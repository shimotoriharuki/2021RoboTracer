
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019dc4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a0c  08019f88  08019f88  00029f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a994  0801a994  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a994  0801a994  0002a994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a99c  0801a99c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a99c  0801a99c  0002a99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a9a4  0801a9a4  0002a9a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801a9a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00046c58  200001e0  0801ab84  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20046e38  0801ab84  00036e38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b233  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c56  00000000  00000000  0006b43f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002348  00000000  00000000  00073098  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002078  00000000  00000000  000753e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354b4  00000000  00000000  00077458  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002660d  00000000  00000000  000ac90c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001110f5  00000000  00000000  000d2f19  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e400e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a798  00000000  00000000  001e408c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019f6c 	.word	0x08019f6c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08019f6c 	.word	0x08019f6c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00a fc6e 	bl	800b8b8 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20044930 	.word	0x20044930

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00a fc56 	bl	800b8b8 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20044930 	.word	0x20044930

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f00a faf7 	bl	800b614 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f009 f85e 	bl	800a0e8 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f009 f858 	bl	800a0e8 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f009 f852 	bl	800a0e8 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f009 f84c 	bl	800a0e8 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f009 f846 	bl	800a0e8 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f009 f840 	bl	800a0e8 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f009 f83a 	bl	800a0e8 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f009 f834 	bl	800a0e8 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f009 f82e 	bl	800a0e8 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f009 f828 	bl	800a0e8 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f009 f81c 	bl	800a0e8 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f009 f816 	bl	800a0e8 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f016 fae9 	bl	8017700 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00e f926 	bl	800f448 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00e f922 	bl	800f448 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00e f91e 	bl	800f448 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00e f91a 	bl	800f448 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20044a1c 	.word	0x20044a1c
 8001248:	20044984 	.word	0x20044984
 800124c:	20044aa4 	.word	0x20044aa4

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20044a1c 	.word	0x20044a1c
 800137c:	20044aa4 	.word	0x20044aa4
 8001380:	20044984 	.word	0x20044984

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	20044a1c 	.word	0x20044a1c
 80013c4:	20044984 	.word	0x20044984
 80013c8:	20044aa4 	.word	0x20044aa4

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800142c:	213c      	movs	r1, #60	; 0x3c
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <_ZN7Encoder4initEv+0x30>)
 8001430:	f00e f8da 	bl	800f5e8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <_ZN7Encoder4initEv+0x34>)
 8001438:	f00e f8d6 	bl	800f5e8 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <_ZN7Encoder4initEv+0x38>)
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <_ZN7Encoder4initEv+0x3c>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20044b84 	.word	0x20044b84
 8001458:	20044868 	.word	0x20044868
 800145c:	40010000 	.word	0x40010000
 8001460:	40010400 	.word	0x40010400
 8001464:	00000000 	.word	0x00000000

08001468 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001470:	4b69      	ldr	r3, [pc, #420]	; (8001618 <_ZN7Encoder6updateEv+0x1b0>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <_ZN7Encoder6updateEv+0x1bc>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 80014a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 80014a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ac:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <_ZN7Encoder6updateEv+0x1c0>)
 80014b4:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f85d 	bl	8000578 <__aeabi_f2d>
 80014be:	a350      	add	r3, pc, #320	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8b0 	bl	8000628 <__aeabi_dmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4625      	mov	r5, r4
 80014ce:	461c      	mov	r4, r3
 80014d0:	4b56      	ldr	r3, [pc, #344]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f84f 	bl	8000578 <__aeabi_f2d>
 80014da:	a34b      	add	r3, pc, #300	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8a2 	bl	8000628 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fee6 	bl	80002bc <__adddf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4618      	mov	r0, r3
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff fb8e 	bl	8000c18 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f837 	bl	8000578 <__aeabi_f2d>
 800150a:	a33d      	add	r3, pc, #244	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f88a 	bl	8000628 <__aeabi_dmul>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	4625      	mov	r5, r4
 800151a:	461c      	mov	r4, r3
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f829 	bl	8000578 <__aeabi_f2d>
 8001526:	a338      	add	r3, pc, #224	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f87c 	bl	8000628 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7fe fec0 	bl	80002bc <__adddf3>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	4618      	mov	r0, r3
 8001542:	4621      	mov	r1, r4
 8001544:	f7ff fb68 	bl	8000c18 <__aeabi_d2f>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <_ZN7Encoder6updateEv+0x1cc>)
 8001554:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 800155c:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 8001564:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001576:	ee17 0a90 	vmov	r0, s15
 800157a:	f7fe fffd 	bl	8000578 <__aeabi_f2d>
 800157e:	a324      	add	r3, pc, #144	; (adr r3, 8001610 <_ZN7Encoder6updateEv+0x1a8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f850 	bl	8000628 <__aeabi_dmul>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	4618      	mov	r0, r3
 800158e:	4621      	mov	r1, r4
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	f7ff f970 	bl	800087c <__aeabi_ddiv>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4618      	mov	r0, r3
 80015a2:	4621      	mov	r1, r4
 80015a4:	f7ff fb38 	bl	8000c18 <__aeabi_d2f>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a05 	vldr	s14, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <_ZN7Encoder6updateEv+0x1d0>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001600:	9999999a 	.word	0x9999999a
 8001604:	3fa99999 	.word	0x3fa99999
 8001608:	66666666 	.word	0x66666666
 800160c:	3fee6666 	.word	0x3fee6666
 8001610:	ce73a049 	.word	0xce73a049
 8001614:	3f77a3f6 	.word	0x3f77a3f6
 8001618:	40010000 	.word	0x40010000
 800161c:	47000000 	.word	0x47000000
 8001620:	3f912547 	.word	0x3f912547
 8001624:	40010400 	.word	0x40010400
 8001628:	20000200 	.word	0x20000200
 800162c:	20000208 	.word	0x20000208
 8001630:	2000020c 	.word	0x2000020c
 8001634:	20000204 	.word	0x20000204
 8001638:	200001fc 	.word	0x200001fc

0800163c <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_ZN7Encoder5clearEv+0x3c>)
 8001656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <_ZN7Encoder5clearEv+0x40>)
 800165e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40010000 	.word	0x40010000
 800167c:	40010400 	.word	0x40010400

08001680 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	return distance_;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	ee07 3a90 	vmov	s15, r3
}
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	ee07 3a90 	vmov	s15, r3
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	return total_distance_;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	ee07 3a90 	vmov	s15, r3
}
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	619a      	str	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	ee07 3a90 	vmov	s15, r3
}
 8001768:	eeb0 0a67 	vmov.f32	s0, s15
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 80017a0:	6839      	ldr	r1, [r7, #0]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f9d8 	bl	8001b58 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 80017a8:	f000 f9ec 	bl	8001b84 <fopen_folder_and_file>

	return ret;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80017c2:	4804      	ldr	r0, [pc, #16]	; (80017d4 <user_fclose+0x1c>)
 80017c4:	f012 fc6a 	bl	801409c <f_close>

	return ret;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20043774 	.word	0x20043774

080017d8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b087      	sub	sp, #28
 80017dc:	af02      	add	r7, sp, #8
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	80fb      	strh	r3, [r7, #6]
 80017e4:	4613      	mov	r3, r2
 80017e6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80017ec:	2300      	movs	r3, #0
 80017ee:	81fb      	strh	r3, [r7, #14]
 80017f0:	e030      	b.n	8001854 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe feba 	bl	8000578 <__aeabi_f2d>
 8001804:	4603      	mov	r3, r0
 8001806:	460c      	mov	r4, r1
 8001808:	e9cd 3400 	strd	r3, r4, [sp]
 800180c:	4a17      	ldr	r2, [pc, #92]	; (800186c <sd_write_float+0x94>)
 800180e:	2180      	movs	r1, #128	; 0x80
 8001810:	4817      	ldr	r0, [pc, #92]	; (8001870 <sd_write_float+0x98>)
 8001812:	f015 f829 	bl	8016868 <sniprintf>

		if(state == ADD_WRITE){
 8001816:	797b      	ldrb	r3, [r7, #5]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d106      	bne.n	800182a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <sd_write_float+0x9c>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4619      	mov	r1, r3
 8001822:	4814      	ldr	r0, [pc, #80]	; (8001874 <sd_write_float+0x9c>)
 8001824:	f012 fcae 	bl	8014184 <f_lseek>
 8001828:	e003      	b.n	8001832 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800182a:	2100      	movs	r1, #0
 800182c:	4811      	ldr	r0, [pc, #68]	; (8001874 <sd_write_float+0x9c>)
 800182e:	f012 fca9 	bl	8014184 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001832:	480f      	ldr	r0, [pc, #60]	; (8001870 <sd_write_float+0x98>)
 8001834:	f7fe fce4 	bl	8000200 <strlen>
 8001838:	4602      	mov	r2, r0
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <sd_write_float+0xa0>)
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <sd_write_float+0x98>)
 800183e:	480d      	ldr	r0, [pc, #52]	; (8001874 <sd_write_float+0x9c>)
 8001840:	f012 fa17 	bl	8013c72 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001844:	f000 f9b8 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001848:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800184c:	b29b      	uxth	r3, r3
 800184e:	3301      	adds	r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	81fb      	strh	r3, [r7, #14]
 8001854:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbc8      	blt.n	80017f2 <sd_write_float+0x1a>
	}
	return ret;
 8001860:	7b7b      	ldrb	r3, [r7, #13]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	bf00      	nop
 800186c:	08019f88 	.word	0x08019f88
 8001870:	200436e4 	.word	0x200436e4
 8001874:	20043774 	.word	0x20043774
 8001878:	20043764 	.word	0x20043764

0800187c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af02      	add	r7, sp, #8
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f960 	bl	8001b58 <create_path>

	if(state == OVER_WRITE){
 8001898:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800189c:	2b00      	cmp	r3, #0
 800189e:	d108      	bne.n	80018b2 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80018a0:	4822      	ldr	r0, [pc, #136]	; (800192c <sd_write_array_float+0xb0>)
 80018a2:	f012 fc25 	bl	80140f0 <f_chdir>
		f_unlink(filepath);	//	一回消す
 80018a6:	4822      	ldr	r0, [pc, #136]	; (8001930 <sd_write_array_float+0xb4>)
 80018a8:	f012 fe90 	bl	80145cc <f_unlink>
		f_chdir("..");
 80018ac:	4821      	ldr	r0, [pc, #132]	; (8001934 <sd_write_array_float+0xb8>)
 80018ae:	f012 fc1f 	bl	80140f0 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80018b2:	f000 f967 	bl	8001b84 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80018b6:	2300      	movs	r3, #0
 80018b8:	82fb      	strh	r3, [r7, #22]
 80018ba:	e028      	b.n	800190e <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80018bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe55 	bl	8000578 <__aeabi_f2d>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	e9cd 3400 	strd	r3, r4, [sp]
 80018d6:	4a18      	ldr	r2, [pc, #96]	; (8001938 <sd_write_array_float+0xbc>)
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	4818      	ldr	r0, [pc, #96]	; (800193c <sd_write_array_float+0xc0>)
 80018dc:	f014 ffc4 	bl	8016868 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <sd_write_array_float+0xc4>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4816      	ldr	r0, [pc, #88]	; (8001940 <sd_write_array_float+0xc4>)
 80018e8:	f012 fc4c 	bl	8014184 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80018ec:	4813      	ldr	r0, [pc, #76]	; (800193c <sd_write_array_float+0xc0>)
 80018ee:	f7fe fc87 	bl	8000200 <strlen>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <sd_write_array_float+0xc8>)
 80018f6:	4911      	ldr	r1, [pc, #68]	; (800193c <sd_write_array_float+0xc0>)
 80018f8:	4811      	ldr	r0, [pc, #68]	; (8001940 <sd_write_array_float+0xc4>)
 80018fa:	f012 f9ba 	bl	8013c72 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80018fe:	f000 f95b 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001902:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001906:	b29b      	uxth	r3, r3
 8001908:	3301      	adds	r3, #1
 800190a:	b29b      	uxth	r3, r3
 800190c:	82fb      	strh	r3, [r7, #22]
 800190e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001916:	429a      	cmp	r2, r3
 8001918:	dbd0      	blt.n	80018bc <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800191a:	4809      	ldr	r0, [pc, #36]	; (8001940 <sd_write_array_float+0xc4>)
 800191c:	f012 fbbe 	bl	801409c <f_close>

	return ret;
 8001920:	7d7b      	ldrb	r3, [r7, #21]
}
 8001922:	4618      	mov	r0, r3
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	bf00      	nop
 800192c:	200435e4 	.word	0x200435e4
 8001930:	200424a4 	.word	0x200424a4
 8001934:	08019fa4 	.word	0x08019fa4
 8001938:	08019f88 	.word	0x08019f88
 800193c:	200436e4 	.word	0x200436e4
 8001940:	20043774 	.word	0x20043774
 8001944:	20043764 	.word	0x20043764

08001948 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	4613      	mov	r3, r2
 8001956:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 f8f8 	bl	8001b58 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001968:	f000 f90c 	bl	8001b84 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800196c:	e019      	b.n	80019a2 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800196e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	4413      	add	r3, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4913      	ldr	r1, [pc, #76]	; (80019c8 <sd_read_array_float+0x80>)
 800197c:	4813      	ldr	r0, [pc, #76]	; (80019cc <sd_read_array_float+0x84>)
 800197e:	f014 ffc7 	bl	8016910 <siscanf>
		i++;
 8001982:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001986:	b29b      	uxth	r3, r3
 8001988:	3301      	adds	r3, #1
 800198a:	b29b      	uxth	r3, r3
 800198c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800198e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001996:	429a      	cmp	r2, r3
 8001998:	db03      	blt.n	80019a2 <sd_read_array_float+0x5a>
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	3b01      	subs	r3, #1
 800199e:	b29b      	uxth	r3, r3
 80019a0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <sd_read_array_float+0x88>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	4809      	ldr	r0, [pc, #36]	; (80019cc <sd_read_array_float+0x84>)
 80019a8:	f012 ffee 	bl	8014988 <f_gets>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1dd      	bne.n	800196e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80019b2:	f000 f901 	bl	8001bb8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <sd_read_array_float+0x88>)
 80019b8:	f012 fb70 	bl	801409c <f_close>

	return ret;
 80019bc:	7d7b      	ldrb	r3, [r7, #21]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	08019f94 	.word	0x08019f94
 80019cc:	200436e4 	.word	0x200436e4
 80019d0:	20043774 	.word	0x20043774

080019d4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 f8b2 	bl	8001b58 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80019f4:	f000 f8c6 	bl	8001b84 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019f8:	e019      	b.n	8001a2e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80019fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	4913      	ldr	r1, [pc, #76]	; (8001a54 <sd_read_array_double+0x80>)
 8001a08:	4813      	ldr	r0, [pc, #76]	; (8001a58 <sd_read_array_double+0x84>)
 8001a0a:	f014 ff81 	bl	8016910 <siscanf>
		i++;
 8001a0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	3301      	adds	r3, #1
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001a1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	db03      	blt.n	8001a2e <sd_read_array_double+0x5a>
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <sd_read_array_double+0x88>)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	4809      	ldr	r0, [pc, #36]	; (8001a58 <sd_read_array_double+0x84>)
 8001a34:	f012 ffa8 	bl	8014988 <f_gets>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1dd      	bne.n	80019fa <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001a3e:	f000 f8bb 	bl	8001bb8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <sd_read_array_double+0x88>)
 8001a44:	f012 fb2a 	bl	801409c <f_close>

	return ret;
 8001a48:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	08019fa0 	.word	0x08019fa0
 8001a58:	200436e4 	.word	0x200436e4
 8001a5c:	20043774 	.word	0x20043774

08001a60 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int16_t *data, char state){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 f86e 	bl	8001b58 <create_path>

	if(state == OVER_WRITE){
 8001a7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d108      	bne.n	8001a96 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001a84:	481f      	ldr	r0, [pc, #124]	; (8001b04 <sd_write_array_int+0xa4>)
 8001a86:	f012 fb33 	bl	80140f0 <f_chdir>
		f_unlink(filepath);	//一回消す
 8001a8a:	481f      	ldr	r0, [pc, #124]	; (8001b08 <sd_write_array_int+0xa8>)
 8001a8c:	f012 fd9e 	bl	80145cc <f_unlink>
		f_chdir("..");
 8001a90:	481e      	ldr	r0, [pc, #120]	; (8001b0c <sd_write_array_int+0xac>)
 8001a92:	f012 fb2d 	bl	80140f0 <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 8001a96:	f000 f875 	bl	8001b84 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	82fb      	strh	r3, [r7, #22]
 8001a9e:	e022      	b.n	8001ae6 <sd_write_array_int+0x86>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 8001aa0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aae:	4a18      	ldr	r2, [pc, #96]	; (8001b10 <sd_write_array_int+0xb0>)
 8001ab0:	2180      	movs	r1, #128	; 0x80
 8001ab2:	4818      	ldr	r0, [pc, #96]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ab4:	f014 fed8 	bl	8016868 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <sd_write_array_int+0xb8>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4619      	mov	r1, r3
 8001abe:	4816      	ldr	r0, [pc, #88]	; (8001b18 <sd_write_array_int+0xb8>)
 8001ac0:	f012 fb60 	bl	8014184 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001ac4:	4813      	ldr	r0, [pc, #76]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ac6:	f7fe fb9b 	bl	8000200 <strlen>
 8001aca:	4602      	mov	r2, r0
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <sd_write_array_int+0xbc>)
 8001ace:	4911      	ldr	r1, [pc, #68]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ad0:	4811      	ldr	r0, [pc, #68]	; (8001b18 <sd_write_array_int+0xb8>)
 8001ad2:	f012 f8ce 	bl	8013c72 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001ad6:	f000 f86f 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001ada:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	82fb      	strh	r3, [r7, #22]
 8001ae6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	dbd6      	blt.n	8001aa0 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 8001af2:	4809      	ldr	r0, [pc, #36]	; (8001b18 <sd_write_array_int+0xb8>)
 8001af4:	f012 fad2 	bl	801409c <f_close>

	return ret;
 8001af8:	7d7b      	ldrb	r3, [r7, #21]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200435e4 	.word	0x200435e4
 8001b08:	200424a4 	.word	0x200424a4
 8001b0c:	08019fa4 	.word	0x08019fa4
 8001b10:	08019fa8 	.word	0x08019fa8
 8001b14:	200436e4 	.word	0x200436e4
 8001b18:	20043774 	.word	0x20043774
 8001b1c:	20043764 	.word	0x20043764

08001b20 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4908      	ldr	r1, [pc, #32]	; (8001b50 <sd_mount+0x30>)
 8001b2e:	4809      	ldr	r0, [pc, #36]	; (8001b54 <sd_mount+0x34>)
 8001b30:	f011 fd2c 	bl	801358c <f_mount>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d102      	bne.n	8001b40 <sd_mount+0x20>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	71fb      	strb	r3, [r7, #7]
 8001b3e:	e001      	b.n	8001b44 <sd_mount+0x24>
	else ret = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001b44:	79fb      	ldrb	r3, [r7, #7]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	08019fb0 	.word	0x08019fb0
 8001b54:	200425a4 	.word	0x200425a4

08001b58 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	4805      	ldr	r0, [pc, #20]	; (8001b7c <create_path+0x24>)
 8001b66:	f014 feff 	bl	8016968 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	4804      	ldr	r0, [pc, #16]	; (8001b80 <create_path+0x28>)
 8001b6e:	f014 fefb 	bl	8016968 <strcpy>

}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	200435e4 	.word	0x200435e4
 8001b80:	200424a4 	.word	0x200424a4

08001b84 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001b88:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <fopen_folder_and_file+0x24>)
 8001b8a:	f012 fde1 	bl	8014750 <f_mkdir>

	f_chdir(dirpath);
 8001b8e:	4806      	ldr	r0, [pc, #24]	; (8001ba8 <fopen_folder_and_file+0x24>)
 8001b90:	f012 faae 	bl	80140f0 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001b94:	2213      	movs	r2, #19
 8001b96:	4905      	ldr	r1, [pc, #20]	; (8001bac <fopen_folder_and_file+0x28>)
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <fopen_folder_and_file+0x2c>)
 8001b9a:	f011 fd3d 	bl	8013618 <f_open>

	f_chdir("..");
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <fopen_folder_and_file+0x30>)
 8001ba0:	f012 faa6 	bl	80140f0 <f_chdir>


}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	200435e4 	.word	0x200435e4
 8001bac:	200424a4 	.word	0x200424a4
 8001bb0:	20043774 	.word	0x20043774
 8001bb4:	08019fa4 	.word	0x08019fa4

08001bb8 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	e007      	b.n	8001bd4 <bufclear+0x1c>
		buffer[i] = '\0';
 8001bc4:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <bufclear+0x30>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b7f      	cmp	r3, #127	; 0x7f
 8001bd8:	ddf4      	ble.n	8001bc4 <bufclear+0xc>
	}
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	200436e4 	.word	0x200436e4

08001bec <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c06:	480e      	ldr	r0, [pc, #56]	; (8001c40 <read_byte+0x54>)
 8001c08:	f009 fd04 	bl	800b614 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001c0c:	f107 010f 	add.w	r1, r7, #15
 8001c10:	2364      	movs	r3, #100	; 0x64
 8001c12:	2201      	movs	r2, #1
 8001c14:	480b      	ldr	r0, [pc, #44]	; (8001c44 <read_byte+0x58>)
 8001c16:	f00c fead 	bl	800e974 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001c1a:	f107 010e 	add.w	r1, r7, #14
 8001c1e:	2364      	movs	r3, #100	; 0x64
 8001c20:	2201      	movs	r2, #1
 8001c22:	4808      	ldr	r0, [pc, #32]	; (8001c44 <read_byte+0x58>)
 8001c24:	f00c ffda 	bl	800ebdc <HAL_SPI_Receive>
	CS_SET;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c2e:	4804      	ldr	r0, [pc, #16]	; (8001c40 <read_byte+0x54>)
 8001c30:	f009 fcf0 	bl	800b614 <HAL_GPIO_WritePin>

	return val;
 8001c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40020400 	.word	0x40020400
 8001c44:	20044810 	.word	0x20044810

08001c48 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460a      	mov	r2, r1
 8001c52:	71fb      	strb	r3, [r7, #7]
 8001c54:	4613      	mov	r3, r2
 8001c56:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <write_byte+0x54>)
 8001c6a:	f009 fcd3 	bl	800b614 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001c6e:	f107 010f 	add.w	r1, r7, #15
 8001c72:	2364      	movs	r3, #100	; 0x64
 8001c74:	2201      	movs	r2, #1
 8001c76:	480a      	ldr	r0, [pc, #40]	; (8001ca0 <write_byte+0x58>)
 8001c78:	f00c fe7c 	bl	800e974 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001c7c:	1db9      	adds	r1, r7, #6
 8001c7e:	2364      	movs	r3, #100	; 0x64
 8001c80:	2201      	movs	r2, #1
 8001c82:	4807      	ldr	r0, [pc, #28]	; (8001ca0 <write_byte+0x58>)
 8001c84:	f00c fe76 	bl	800e974 <HAL_SPI_Transmit>
	CS_SET;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c8e:	4803      	ldr	r0, [pc, #12]	; (8001c9c <write_byte+0x54>)
 8001c90:	f009 fcc0 	bl	800b614 <HAL_GPIO_WritePin>
}
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	20044810 	.word	0x20044810

08001ca4 <IMU_init>:

uint16_t IMU_init() {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7ff ff9c 	bl	8001bec <read_byte>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001cb8:	797b      	ldrb	r3, [r7, #5]
 8001cba:	2be0      	cmp	r3, #224	; 0xe0
 8001cbc:	d119      	bne.n	8001cf2 <IMU_init+0x4e>
		ret = 1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	2006      	movs	r0, #6
 8001cc6:	f7ff ffbf 	bl	8001c48 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001cca:	2110      	movs	r1, #16
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f7ff ffbb 	bl	8001c48 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001cd2:	2120      	movs	r1, #32
 8001cd4:	207f      	movs	r0, #127	; 0x7f
 8001cd6:	f7ff ffb7 	bl	8001c48 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001cda:	2106      	movs	r1, #6
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f7ff ffb3 	bl	8001c48 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001ce2:	2106      	movs	r1, #6
 8001ce4:	2014      	movs	r0, #20
 8001ce6:	f7ff ffaf 	bl	8001c48 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001cea:	2100      	movs	r1, #0
 8001cec:	207f      	movs	r0, #127	; 0x7f
 8001cee:	f7ff ffab 	bl	8001c48 <write_byte>
	}
	return ret;
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <read_gyro_data>:

void read_gyro_data() {
 8001cfc:	b598      	push	{r3, r4, r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001d00:	2033      	movs	r0, #51	; 0x33
 8001d02:	f7ff ff73 	bl	8001bec <read_byte>
 8001d06:	4603      	mov	r3, r0
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21c      	sxth	r4, r3
 8001d0c:	2034      	movs	r0, #52	; 0x34
 8001d0e:	f7ff ff6d 	bl	8001bec <read_byte>
 8001d12:	4603      	mov	r3, r0
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	4323      	orrs	r3, r4
 8001d18:	b21a      	sxth	r2, r3
 8001d1a:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <read_gyro_data+0x64>)
 8001d1c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001d1e:	2035      	movs	r0, #53	; 0x35
 8001d20:	f7ff ff64 	bl	8001bec <read_byte>
 8001d24:	4603      	mov	r3, r0
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	b21c      	sxth	r4, r3
 8001d2a:	2036      	movs	r0, #54	; 0x36
 8001d2c:	f7ff ff5e 	bl	8001bec <read_byte>
 8001d30:	4603      	mov	r3, r0
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	4323      	orrs	r3, r4
 8001d36:	b21a      	sxth	r2, r3
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <read_gyro_data+0x68>)
 8001d3a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001d3c:	2037      	movs	r0, #55	; 0x37
 8001d3e:	f7ff ff55 	bl	8001bec <read_byte>
 8001d42:	4603      	mov	r3, r0
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	b21c      	sxth	r4, r3
 8001d48:	2038      	movs	r0, #56	; 0x38
 8001d4a:	f7ff ff4f 	bl	8001bec <read_byte>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	4323      	orrs	r3, r4
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <read_gyro_data+0x6c>)
 8001d58:	801a      	strh	r2, [r3, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	bd98      	pop	{r3, r4, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200447ac 	.word	0x200447ac
 8001d64:	200447aa 	.word	0x200447aa
 8001d68:	200447a4 	.word	0x200447a4

08001d6c <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	801a      	strh	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	805a      	strh	r2, [r3, #2]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	809a      	strh	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	80da      	strh	r2, [r3, #6]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	811a      	strh	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	815a      	strh	r2, [r3, #10]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]
{

}
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001db8:	f7ff ff74 	bl	8001ca4 <IMU_init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001dc0:	f7ff f96e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff f97a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001dcc:	4809      	ldr	r0, [pc, #36]	; (8001df4 <_ZN3IMU4initEv+0x44>)
 8001dce:	f7ff f9a1 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7ff f973 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001dda:	89fb      	ldrh	r3, [r7, #14]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4806      	ldr	r0, [pc, #24]	; (8001df8 <_ZN3IMU4initEv+0x48>)
 8001de0:	f7ff f998 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001de4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001de8:	f008 f97e 	bl	800a0e8 <HAL_Delay>

}
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	08019fb4 	.word	0x08019fb4
 8001df8:	08019fc0 	.word	0x08019fc0
 8001dfc:	00000000 	.word	0x00000000

08001e00 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001e00:	b5b0      	push	{r4, r5, r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001e08:	f7ff ff78 	bl	8001cfc <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001e0c:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <_ZN3IMU12updateValuesEv+0xb8>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	b21a      	sxth	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001e16:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <_ZN3IMU12updateValuesEv+0xbc>)
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	b21a      	sxth	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <_ZN3IMU12updateValuesEv+0xc0>)
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	b21a      	sxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fb8f 	bl	8000554 <__aeabi_i2d>
 8001e36:	a31c      	add	r3, pc, #112	; (adr r3, 8001ea8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fbf4 	bl	8000628 <__aeabi_dmul>
 8001e40:	4603      	mov	r3, r0
 8001e42:	460c      	mov	r4, r1
 8001e44:	4625      	mov	r5, r4
 8001e46:	461c      	mov	r4, r3
 8001e48:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <_ZN3IMU12updateValuesEv+0xc4>)
 8001e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb80 	bl	8000554 <__aeabi_i2d>
 8001e54:	a316      	add	r3, pc, #88	; (adr r3, 8001eb0 <_ZN3IMU12updateValuesEv+0xb0>)
 8001e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5a:	f7fe fbe5 	bl	8000628 <__aeabi_dmul>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4620      	mov	r0, r4
 8001e64:	4629      	mov	r1, r5
 8001e66:	f7fe fa29 	bl	80002bc <__adddf3>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	460c      	mov	r4, r1
 8001e6e:	4618      	mov	r0, r3
 8001e70:	4621      	mov	r1, r4
 8001e72:	f7fe fe89 	bl	8000b88 <__aeabi_d2iz>
 8001e76:	4603      	mov	r3, r0
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <_ZN3IMU12updateValuesEv+0xc4>)
 8001e86:	801a      	strh	r2, [r3, #0]
	mon_zg= zg_;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e8e:	ee07 3a90 	vmov	s15, r3
 8001e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <_ZN3IMU12updateValuesEv+0xc8>)
 8001e98:	edc3 7a00 	vstr	s15, [r3]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	eb851eb8 	.word	0xeb851eb8
 8001eac:	3f9eb851 	.word	0x3f9eb851
 8001eb0:	70a3d70a 	.word	0x70a3d70a
 8001eb4:	3fef0a3d 	.word	0x3fef0a3d
 8001eb8:	200447ac 	.word	0x200447ac
 8001ebc:	200447aa 	.word	0x200447aa
 8001ec0:	200447a4 	.word	0x200447a4
 8001ec4:	20000214 	.word	0x20000214
 8001ec8:	20000210 	.word	0x20000210
 8001ecc:	00000000 	.word	0x00000000

08001ed0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001ed0:	b5b0      	push	{r4, r5, r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef0:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f7fe fb3f 	bl	8000578 <__aeabi_f2d>
 8001efa:	a316      	add	r3, pc, #88	; (adr r3, 8001f54 <_ZN3IMU8getOmegaEv+0x84>)
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	f7fe fcbc 	bl	800087c <__aeabi_ddiv>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4614      	mov	r4, r2
 8001f0a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001f0e:	a313      	add	r3, pc, #76	; (adr r3, 8001f5c <_ZN3IMU8getOmegaEv+0x8c>)
 8001f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f14:	4620      	mov	r0, r4
 8001f16:	4629      	mov	r1, r5
 8001f18:	f7fe fb86 	bl	8000628 <__aeabi_dmul>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	460c      	mov	r4, r1
 8001f20:	4618      	mov	r0, r3
 8001f22:	4621      	mov	r1, r4
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <_ZN3IMU8getOmegaEv+0x80>)
 8001f2a:	f7fe fca7 	bl	800087c <__aeabi_ddiv>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	460c      	mov	r4, r1
 8001f32:	4618      	mov	r0, r3
 8001f34:	4621      	mov	r1, r4
 8001f36:	f7fe fe6f 	bl	8000c18 <__aeabi_d2f>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	60bb      	str	r3, [r7, #8]

	return omega;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	ee07 3a90 	vmov	s15, r3
}
 8001f44:	eeb0 0a67 	vmov.f32	s0, s15
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40668000 	.word	0x40668000
 8001f54:	66666666 	.word	0x66666666
 8001f58:	40306666 	.word	0x40306666
 8001f5c:	54411744 	.word	0x54411744
 8001f60:	400921fb 	.word	0x400921fb

08001f64 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f66:	b08b      	sub	sp, #44	; 0x2c
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001f6c:	466b      	mov	r3, sp
 8001f6e:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001f70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f74:	f008 f8b8 	bl	800a0e8 <HAL_Delay>
	lcd_clear();
 8001f78:	f7ff f892 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7ff f89e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001f84:	4840      	ldr	r0, [pc, #256]	; (8002088 <_ZN3IMU11calibrationEv+0x124>)
 8001f86:	f7ff f8c5 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f7ff f897 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001f92:	483e      	ldr	r0, [pc, #248]	; (800208c <_ZN3IMU11calibrationEv+0x128>)
 8001f94:	f7ff f8be 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001f98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f9c:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001f9e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fa2:	1e5d      	subs	r5, r3, #1
 8001fa4:	61bd      	str	r5, [r7, #24]
 8001fa6:	462b      	mov	r3, r5
 8001fa8:	3301      	adds	r3, #1
 8001faa:	4619      	mov	r1, r3
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	f04f 0400 	mov.w	r4, #0
 8001fb8:	0154      	lsls	r4, r2, #5
 8001fba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fbe:	014b      	lsls	r3, r1, #5
 8001fc0:	462b      	mov	r3, r5
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	f04f 0400 	mov.w	r4, #0
 8001fd2:	0154      	lsls	r4, r2, #5
 8001fd4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fd8:	014b      	lsls	r3, r1, #5
 8001fda:	462b      	mov	r3, r5
 8001fdc:	3301      	adds	r3, #1
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	3303      	adds	r3, #3
 8001fe2:	3307      	adds	r3, #7
 8001fe4:	08db      	lsrs	r3, r3, #3
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	ebad 0d03 	sub.w	sp, sp, r3
 8001fec:	466b      	mov	r3, sp
 8001fee:	3303      	adds	r3, #3
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	83fb      	strh	r3, [r7, #30]
 8001ffa:	8bfa      	ldrh	r2, [r7, #30]
 8001ffc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002000:	429a      	cmp	r2, r3
 8002002:	da13      	bge.n	800202c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800200a:	8bfb      	ldrh	r3, [r7, #30]
 800200c:	ee07 2a90 	vmov	s15, r2
 8002010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 800201e:	2002      	movs	r0, #2
 8002020:	f008 f862 	bl	800a0e8 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8002024:	8bfb      	ldrh	r3, [r7, #30]
 8002026:	3301      	adds	r3, #1
 8002028:	83fb      	strh	r3, [r7, #30]
 800202a:	e7e6      	b.n	8001ffa <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	462b      	mov	r3, r5
 8002034:	3301      	adds	r3, #1
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	429a      	cmp	r2, r3
 8002042:	d00e      	beq.n	8002062 <_ZN3IMU11calibrationEv+0xfe>
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	60fb      	str	r3, [r7, #12]
		sum += v;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	edd3 7a00 	vldr	s15, [r3]
 800204e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002056:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	3304      	adds	r3, #4
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
 8002060:	e7ec      	b.n	800203c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8002062:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002066:	ee07 3a90 	vmov	s15, r3
 800206a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800206e:	edd7 6a08 	vldr	s13, [r7, #32]
 8002072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	edc3 7a03 	vstr	s15, [r3, #12]
 800207c:	46b5      	mov	sp, r6
}
 800207e:	bf00      	nop
 8002080:	372c      	adds	r7, #44	; 0x2c
 8002082:	46bd      	mov	sp, r7
 8002084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002086:	bf00      	nop
 8002088:	08019fc4 	.word	0x08019fc4
 800208c:	08019fd0 	.word	0x08019fd0

08002090 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af02      	add	r7, sp, #8
 8002096:	4603      	mov	r3, r0
 8002098:	460a      	mov	r2, r1
 800209a:	71fb      	strb	r3, [r7, #7]
 800209c:	4613      	mov	r3, r2
 800209e:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 80020a0:	79bb      	ldrb	r3, [r7, #6]
 80020a2:	b299      	uxth	r1, r3
 80020a4:	1dfa      	adds	r2, r7, #7
 80020a6:	2364      	movs	r3, #100	; 0x64
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	2301      	movs	r3, #1
 80020ac:	480c      	ldr	r0, [pc, #48]	; (80020e0 <INA260_read+0x50>)
 80020ae:	f009 fc03 	bl	800b8b8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 80020b2:	79bb      	ldrb	r3, [r7, #6]
 80020b4:	b299      	uxth	r1, r3
 80020b6:	f107 020c 	add.w	r2, r7, #12
 80020ba:	2364      	movs	r3, #100	; 0x64
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2302      	movs	r3, #2
 80020c0:	4807      	ldr	r0, [pc, #28]	; (80020e0 <INA260_read+0x50>)
 80020c2:	f009 fcf7 	bl	800bab4 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 80020c6:	7b3b      	ldrb	r3, [r7, #12]
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	b21a      	sxth	r2, r3
 80020cc:	7b7b      	ldrb	r3, [r7, #13]
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	4313      	orrs	r3, r2
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	81fb      	strh	r3, [r7, #14]
	return val;
 80020d6:	89fb      	ldrh	r3, [r7, #14]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	200449c4 	.word	0x200449c4

080020e4 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b087      	sub	sp, #28
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	4604      	mov	r4, r0
 80020ec:	4608      	mov	r0, r1
 80020ee:	4611      	mov	r1, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	4623      	mov	r3, r4
 80020f4:	71fb      	strb	r3, [r7, #7]
 80020f6:	4603      	mov	r3, r0
 80020f8:	71bb      	strb	r3, [r7, #6]
 80020fa:	460b      	mov	r3, r1
 80020fc:	717b      	strb	r3, [r7, #5]
 80020fe:	4613      	mov	r3, r2
 8002100:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	733b      	strb	r3, [r7, #12]
 8002106:	79bb      	ldrb	r3, [r7, #6]
 8002108:	737b      	strb	r3, [r7, #13]
 800210a:	797b      	ldrb	r3, [r7, #5]
 800210c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 800210e:	793b      	ldrb	r3, [r7, #4]
 8002110:	b299      	uxth	r1, r3
 8002112:	f107 020c 	add.w	r2, r7, #12
 8002116:	2364      	movs	r3, #100	; 0x64
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	2303      	movs	r3, #3
 800211c:	4803      	ldr	r0, [pc, #12]	; (800212c <INA260_write+0x48>)
 800211e:	f009 fbcb 	bl	800b8b8 <HAL_I2C_Master_Transmit>
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bd90      	pop	{r4, r7, pc}
 800212a:	bf00      	nop
 800212c:	200449c4 	.word	0x200449c4

08002130 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
 800213a:	460b      	mov	r3, r1
 800213c:	71bb      	strb	r3, [r7, #6]
 800213e:	4613      	mov	r3, r2
 8002140:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8002142:	797b      	ldrb	r3, [r7, #5]
 8002144:	79ba      	ldrb	r2, [r7, #6]
 8002146:	79f9      	ldrb	r1, [r7, #7]
 8002148:	2000      	movs	r0, #0
 800214a:	f7ff ffcb 	bl	80020e4 <INA260_write>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	461a      	mov	r2, r3
 8002164:	21df      	movs	r1, #223	; 0xdf
 8002166:	2000      	movs	r0, #0
 8002168:	f7ff ffe2 	bl	8002130 <setConfig>
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
{

}
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8002198:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800219c:	482a      	ldr	r0, [pc, #168]	; (8002248 <_ZN8JoyStick8getValueEv+0xbc>)
 800219e:	f009 fa21 	bl	800b5e4 <HAL_GPIO_ReadPin>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <_ZN8JoyStick8getValueEv+0x2e>
 80021b2:	89fb      	ldrh	r3, [r7, #14]
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 80021ba:	2101      	movs	r1, #1
 80021bc:	4823      	ldr	r0, [pc, #140]	; (800224c <_ZN8JoyStick8getValueEv+0xc0>)
 80021be:	f009 fa11 	bl	800b5e4 <HAL_GPIO_ReadPin>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <_ZN8JoyStick8getValueEv+0x4e>
 80021d2:	89fb      	ldrh	r3, [r7, #14]
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 80021da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021de:	481a      	ldr	r0, [pc, #104]	; (8002248 <_ZN8JoyStick8getValueEv+0xbc>)
 80021e0:	f009 fa00 	bl	800b5e4 <HAL_GPIO_ReadPin>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <_ZN8JoyStick8getValueEv+0x70>
 80021f4:	89fb      	ldrh	r3, [r7, #14]
 80021f6:	f043 0304 	orr.w	r3, r3, #4
 80021fa:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 80021fc:	2104      	movs	r1, #4
 80021fe:	4814      	ldr	r0, [pc, #80]	; (8002250 <_ZN8JoyStick8getValueEv+0xc4>)
 8002200:	f009 f9f0 	bl	800b5e4 <HAL_GPIO_ReadPin>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	bf0c      	ite	eq
 800220a:	2301      	moveq	r3, #1
 800220c:	2300      	movne	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <_ZN8JoyStick8getValueEv+0x90>
 8002214:	89fb      	ldrh	r3, [r7, #14]
 8002216:	f043 0308 	orr.w	r3, r3, #8
 800221a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 800221c:	2180      	movs	r1, #128	; 0x80
 800221e:	480a      	ldr	r0, [pc, #40]	; (8002248 <_ZN8JoyStick8getValueEv+0xbc>)
 8002220:	f009 f9e0 	bl	800b5e4 <HAL_GPIO_ReadPin>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	bf0c      	ite	eq
 800222a:	2301      	moveq	r3, #1
 800222c:	2300      	movne	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <_ZN8JoyStick8getValueEv+0xb0>
 8002234:	89fb      	ldrh	r3, [r7, #14]
 8002236:	f043 0310 	orr.w	r3, r3, #16
 800223a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 800223c:	89fb      	ldrh	r3, [r7, #14]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	40020c00 	.word	0x40020c00
 8002250:	40020400 	.word	0x40020400

08002254 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	2b52      	cmp	r3, #82	; 0x52
 8002264:	d112      	bne.n	800228c <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002266:	2200      	movs	r2, #0
 8002268:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800226c:	4856      	ldr	r0, [pc, #344]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800226e:	f009 f9d1 	bl	800b614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002272:	2201      	movs	r2, #1
 8002274:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002278:	4853      	ldr	r0, [pc, #332]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800227a:	f009 f9cb 	bl	800b614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800227e:	2201      	movs	r2, #1
 8002280:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002284:	4850      	ldr	r0, [pc, #320]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002286:	f009 f9c5 	bl	800b614 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 800228a:	e098      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	2b47      	cmp	r3, #71	; 0x47
 8002290:	d112      	bne.n	80022b8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002292:	2201      	movs	r2, #1
 8002294:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002298:	484b      	ldr	r0, [pc, #300]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800229a:	f009 f9bb 	bl	800b614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800229e:	2200      	movs	r2, #0
 80022a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022a4:	4848      	ldr	r0, [pc, #288]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022a6:	f009 f9b5 	bl	800b614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80022aa:	2201      	movs	r2, #1
 80022ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022b0:	4845      	ldr	r0, [pc, #276]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022b2:	f009 f9af 	bl	800b614 <HAL_GPIO_WritePin>
}
 80022b6:	e082      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	2b42      	cmp	r3, #66	; 0x42
 80022bc:	d112      	bne.n	80022e4 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022be:	2201      	movs	r2, #1
 80022c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022c4:	4840      	ldr	r0, [pc, #256]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022c6:	f009 f9a5 	bl	800b614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80022ca:	2201      	movs	r2, #1
 80022cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022d0:	483d      	ldr	r0, [pc, #244]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022d2:	f009 f99f 	bl	800b614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022dc:	483a      	ldr	r0, [pc, #232]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022de:	f009 f999 	bl	800b614 <HAL_GPIO_WritePin>
}
 80022e2:	e06c      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	2b43      	cmp	r3, #67	; 0x43
 80022e8:	d112      	bne.n	8002310 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022ea:	2201      	movs	r2, #1
 80022ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022f0:	4835      	ldr	r0, [pc, #212]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022f2:	f009 f98f 	bl	800b614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80022f6:	2200      	movs	r2, #0
 80022f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022fc:	4832      	ldr	r0, [pc, #200]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022fe:	f009 f989 	bl	800b614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002302:	2200      	movs	r2, #0
 8002304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002308:	482f      	ldr	r0, [pc, #188]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800230a:	f009 f983 	bl	800b614 <HAL_GPIO_WritePin>
}
 800230e:	e056      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	2b4d      	cmp	r3, #77	; 0x4d
 8002314:	d112      	bne.n	800233c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002316:	2200      	movs	r2, #0
 8002318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800231c:	482a      	ldr	r0, [pc, #168]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800231e:	f009 f979 	bl	800b614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002322:	2201      	movs	r2, #1
 8002324:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002328:	4827      	ldr	r0, [pc, #156]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800232a:	f009 f973 	bl	800b614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002334:	4824      	ldr	r0, [pc, #144]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002336:	f009 f96d 	bl	800b614 <HAL_GPIO_WritePin>
}
 800233a:	e040      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	2b59      	cmp	r3, #89	; 0x59
 8002340:	d112      	bne.n	8002368 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002342:	2200      	movs	r2, #0
 8002344:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002348:	481f      	ldr	r0, [pc, #124]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800234a:	f009 f963 	bl	800b614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800234e:	2200      	movs	r2, #0
 8002350:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002354:	481c      	ldr	r0, [pc, #112]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002356:	f009 f95d 	bl	800b614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800235a:	2201      	movs	r2, #1
 800235c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002360:	4819      	ldr	r0, [pc, #100]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002362:	f009 f957 	bl	800b614 <HAL_GPIO_WritePin>
}
 8002366:	e02a      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	2b57      	cmp	r3, #87	; 0x57
 800236c:	d112      	bne.n	8002394 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800236e:	2200      	movs	r2, #0
 8002370:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002374:	4814      	ldr	r0, [pc, #80]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002376:	f009 f94d 	bl	800b614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800237a:	2200      	movs	r2, #0
 800237c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002380:	4811      	ldr	r0, [pc, #68]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002382:	f009 f947 	bl	800b614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002386:	2200      	movs	r2, #0
 8002388:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800238c:	480e      	ldr	r0, [pc, #56]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800238e:	f009 f941 	bl	800b614 <HAL_GPIO_WritePin>
}
 8002392:	e014      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	2b7e      	cmp	r3, #126	; 0x7e
 8002398:	d111      	bne.n	80023be <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800239a:	2201      	movs	r2, #1
 800239c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023a0:	4809      	ldr	r0, [pc, #36]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80023a2:	f009 f937 	bl	800b614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80023a6:	2201      	movs	r2, #1
 80023a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023ac:	4806      	ldr	r0, [pc, #24]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80023ae:	f009 f931 	bl	800b614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80023b2:	2201      	movs	r2, #1
 80023b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023b8:	4803      	ldr	r0, [pc, #12]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80023ba:	f009 f92b 	bl	800b614 <HAL_GPIO_WritePin>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40020000 	.word	0x40020000

080023cc <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	70fb      	strb	r3, [r7, #3]
 80023d8:	4613      	mov	r3, r2
 80023da:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80023dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d106      	bne.n	80023f2 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80023e4:	2201      	movs	r2, #1
 80023e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ea:	4813      	ldr	r0, [pc, #76]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 80023ec:	f009 f912 	bl	800b614 <HAL_GPIO_WritePin>
 80023f0:	e009      	b.n	8002406 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 80023f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d105      	bne.n	8002406 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80023fa:	2200      	movs	r2, #0
 80023fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002400:	480d      	ldr	r0, [pc, #52]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 8002402:	f009 f907 	bl	800b614 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002406:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d106      	bne.n	800241c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800240e:	2201      	movs	r2, #1
 8002410:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002414:	4808      	ldr	r0, [pc, #32]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 8002416:	f009 f8fd 	bl	800b614 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800241a:	e009      	b.n	8002430 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800241c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d105      	bne.n	8002430 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002424:	2200      	movs	r2, #0
 8002426:	f44f 7100 	mov.w	r1, #512	; 0x200
 800242a:	4803      	ldr	r0, [pc, #12]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 800242c:	f009 f8f2 	bl	800b614 <HAL_GPIO_WritePin>
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40020000 	.word	0x40020000

0800243c <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 800243c:	b580      	push	{r7, lr}
 800243e:	b092      	sub	sp, #72	; 0x48
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fe92 	bl	8002174 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	637b      	str	r3, [r7, #52]	; 0x34
 8002454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002456:	647b      	str	r3, [r7, #68]	; 0x44
 8002458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245a:	331c      	adds	r3, #28
 800245c:	633b      	str	r3, [r7, #48]	; 0x30
 800245e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002462:	429a      	cmp	r2, r3
 8002464:	d008      	beq.n	8002478 <_ZN10LineSensorC1Ev+0x3c>
 8002466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246c:	2200      	movs	r2, #0
 800246e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002472:	3302      	adds	r3, #2
 8002474:	647b      	str	r3, [r7, #68]	; 0x44
 8002476:	e7f2      	b.n	800245e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002482:	643b      	str	r3, [r7, #64]	; 0x40
 8002484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002486:	3338      	adds	r3, #56	; 0x38
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
 800248a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	429a      	cmp	r2, r3
 8002490:	d009      	beq.n	80024a6 <_ZN10LineSensorC1Ev+0x6a>
 8002492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002494:	623b      	str	r3, [r7, #32]
		s = 0;
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800249e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a0:	3304      	adds	r3, #4
 80024a2:	643b      	str	r3, [r7, #64]	; 0x40
 80024a4:	e7f1      	b.n	800248a <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3338      	adds	r3, #56	; 0x38
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d009      	beq.n	80024d4 <_ZN10LineSensorC1Ev+0x98>
 80024c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c2:	617b      	str	r3, [r7, #20]
		m = 0;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80024cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ce:	3304      	adds	r3, #4
 80024d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024d2:	e7f1      	b.n	80024b8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	63bb      	str	r3, [r7, #56]	; 0x38
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	3338      	adds	r3, #56	; 0x38
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d009      	beq.n	8002502 <_ZN10LineSensorC1Ev+0xc6>
 80024ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f0:	60bb      	str	r3, [r7, #8]
		s = 1;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80024f8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80024fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fc:	3304      	adds	r3, #4
 80024fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002500:	e7f1      	b.n	80024e6 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4618      	mov	r0, r3
 8002506:	3748      	adds	r7, #72	; 0x48
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	220e      	movs	r2, #14
 8002518:	4619      	mov	r1, r3
 800251a:	4803      	ldr	r0, [pc, #12]	; (8002528 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800251c:	f007 fe4a 	bl	800a1b4 <HAL_ADC_Start_DMA>
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	200448e8 	.word	0x200448e8

0800252c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b0d      	cmp	r3, #13
 800253c:	dc2f      	bgt.n	800259e <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3392      	adds	r3, #146	; 0x92
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	3304      	adds	r3, #4
 800254a:	ed93 7a00 	vldr	s14, [r3]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	33a0      	adds	r3, #160	; 0xa0
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	3304      	adds	r3, #4
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002572:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	4619      	mov	r1, r3
 8002578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	1a5b      	subs	r3, r3, r1
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	68f9      	ldr	r1, [r7, #12]
 8002588:	440b      	add	r3, r1
 800258a:	3306      	adds	r3, #6
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	3304      	adds	r3, #4
 8002592:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3301      	adds	r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	e7cc      	b.n	8002538 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	3301      	adds	r3, #1
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025a8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b09      	cmp	r3, #9
 80025b0:	d902      	bls.n	80025b8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80025b2:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]


}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	20000254 	.word	0x20000254

080025c8 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80025c8:	b490      	push	{r4, r7}
 80025ca:	b08e      	sub	sp, #56	; 0x38
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80025d0:	2300      	movs	r3, #0
 80025d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80025d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025da:	2b0d      	cmp	r3, #13
 80025dc:	f200 8087 	bhi.w	80026ee <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80025e0:	2300      	movs	r3, #0
 80025e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80025e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025ea:	2b09      	cmp	r3, #9
 80025ec:	d81c      	bhi.n	8002628 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80025ee:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80025f2:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80025f6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4423      	add	r3, r4
 8002606:	3306      	adds	r3, #6
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4403      	add	r3, r0
 800260c:	3304      	adds	r3, #4
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	008b      	lsls	r3, r1, #2
 8002612:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002616:	440b      	add	r3, r1
 8002618:	3b30      	subs	r3, #48	; 0x30
 800261a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800261c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002620:	3301      	adds	r3, #1
 8002622:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002626:	e7de      	b.n	80025e6 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002628:	2300      	movs	r3, #0
 800262a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800262e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002632:	2b09      	cmp	r3, #9
 8002634:	d84d      	bhi.n	80026d2 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002636:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800263a:	3301      	adds	r3, #1
 800263c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002640:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002644:	2b09      	cmp	r3, #9
 8002646:	d83e      	bhi.n	80026c6 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002648:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002652:	4413      	add	r3, r2
 8002654:	3b30      	subs	r3, #48	; 0x30
 8002656:	ed93 7a00 	vldr	s14, [r3]
 800265a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002664:	4413      	add	r3, r2
 8002666:	3b30      	subs	r3, #48	; 0x30
 8002668:	edd3 7a00 	vldr	s15, [r3]
 800266c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002674:	d521      	bpl.n	80026ba <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002676:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002680:	4413      	add	r3, r2
 8002682:	3b30      	subs	r3, #48	; 0x30
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002688:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800268c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002690:	0092      	lsls	r2, r2, #2
 8002692:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002696:	440a      	add	r2, r1
 8002698:	3a30      	subs	r2, #48	; 0x30
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80026a2:	440b      	add	r3, r1
 80026a4:	3b30      	subs	r3, #48	; 0x30
 80026a6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80026a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80026b2:	4413      	add	r3, r2
 80026b4:	3b30      	subs	r3, #48	; 0x30
 80026b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026b8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80026ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80026be:	3301      	adds	r3, #1
 80026c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80026c4:	e7bc      	b.n	8002640 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80026c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80026ca:	3301      	adds	r3, #1
 80026cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80026d0:	e7ad      	b.n	800262e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		//sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
		sensor[ad_cnt] = temp_val[5];
 80026d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	33b0      	adds	r3, #176	; 0xb0
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80026e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026e6:	3301      	adds	r3, #1
 80026e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80026ec:	e773      	b.n	80025d6 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80026f4:	4a26      	ldr	r2, [pc, #152]	; (8002790 <_ZN10LineSensor18updateSensorValuesEv+0x1c8>)
 80026f6:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80026fe:	4a25      	ldr	r2, [pc, #148]	; (8002794 <_ZN10LineSensor18updateSensorValuesEv+0x1cc>)
 8002700:	6013      	str	r3, [r2, #0]

	mon_sens0 = sensor[0];
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002708:	4a23      	ldr	r2, [pc, #140]	; (8002798 <_ZN10LineSensor18updateSensorValuesEv+0x1d0>)
 800270a:	6013      	str	r3, [r2, #0]
	mon_sens1 = sensor[1];
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8002712:	4a22      	ldr	r2, [pc, #136]	; (800279c <_ZN10LineSensor18updateSensorValuesEv+0x1d4>)
 8002714:	6013      	str	r3, [r2, #0]
	mon_sens2 = sensor[2];
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800271c:	4a20      	ldr	r2, [pc, #128]	; (80027a0 <_ZN10LineSensor18updateSensorValuesEv+0x1d8>)
 800271e:	6013      	str	r3, [r2, #0]
	mon_sens3 = sensor[3];
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8002726:	4a1f      	ldr	r2, [pc, #124]	; (80027a4 <_ZN10LineSensor18updateSensorValuesEv+0x1dc>)
 8002728:	6013      	str	r3, [r2, #0]
	mon_sens4 = sensor[4];
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8002730:	4a1d      	ldr	r2, [pc, #116]	; (80027a8 <_ZN10LineSensor18updateSensorValuesEv+0x1e0>)
 8002732:	6013      	str	r3, [r2, #0]
	mon_sens5 = sensor[5];
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800273a:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <_ZN10LineSensor18updateSensorValuesEv+0x1e4>)
 800273c:	6013      	str	r3, [r2, #0]
	mon_sens6 = sensor[6];
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8002744:	4a1a      	ldr	r2, [pc, #104]	; (80027b0 <_ZN10LineSensor18updateSensorValuesEv+0x1e8>)
 8002746:	6013      	str	r3, [r2, #0]
	mon_sens7 = sensor[7];
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800274e:	4a19      	ldr	r2, [pc, #100]	; (80027b4 <_ZN10LineSensor18updateSensorValuesEv+0x1ec>)
 8002750:	6013      	str	r3, [r2, #0]
	mon_sens8 = sensor[8];
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8002758:	4a17      	ldr	r2, [pc, #92]	; (80027b8 <_ZN10LineSensor18updateSensorValuesEv+0x1f0>)
 800275a:	6013      	str	r3, [r2, #0]
	mon_sens9 = sensor[9];
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8002762:	4a16      	ldr	r2, [pc, #88]	; (80027bc <_ZN10LineSensor18updateSensorValuesEv+0x1f4>)
 8002764:	6013      	str	r3, [r2, #0]
	mon_sens10 = sensor[10];
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800276c:	4a14      	ldr	r2, [pc, #80]	; (80027c0 <_ZN10LineSensor18updateSensorValuesEv+0x1f8>)
 800276e:	6013      	str	r3, [r2, #0]
	mon_sens11 = sensor[11];
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8002776:	4a13      	ldr	r2, [pc, #76]	; (80027c4 <_ZN10LineSensor18updateSensorValuesEv+0x1fc>)
 8002778:	6013      	str	r3, [r2, #0]
	mon_sens12 = sensor[12];
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8002780:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <_ZN10LineSensor18updateSensorValuesEv+0x200>)
 8002782:	6013      	str	r3, [r2, #0]
}
 8002784:	bf00      	nop
 8002786:	3738      	adds	r7, #56	; 0x38
 8002788:	46bd      	mov	sp, r7
 800278a:	bc90      	pop	{r4, r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000218 	.word	0x20000218
 8002794:	2000021c 	.word	0x2000021c
 8002798:	20000220 	.word	0x20000220
 800279c:	20000224 	.word	0x20000224
 80027a0:	20000228 	.word	0x20000228
 80027a4:	2000022c 	.word	0x2000022c
 80027a8:	20000230 	.word	0x20000230
 80027ac:	20000234 	.word	0x20000234
 80027b0:	20000238 	.word	0x20000238
 80027b4:	2000023c 	.word	0x2000023c
 80027b8:	20000240 	.word	0x20000240
 80027bc:	20000244 	.word	0x20000244
 80027c0:	20000248 	.word	0x20000248
 80027c4:	2000024c 	.word	0x2000024c
 80027c8:	20000250 	.word	0x20000250

080027cc <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b0a0      	sub	sp, #128	; 0x80
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80027d4:	2064      	movs	r0, #100	; 0x64
 80027d6:	f007 fc87 	bl	800a0e8 <HAL_Delay>

	lcd_clear();
 80027da:	f7fe fc61 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80027de:	2100      	movs	r1, #0
 80027e0:	2000      	movs	r0, #0
 80027e2:	f7fe fc6d 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80027e6:	4886      	ldr	r0, [pc, #536]	; (8002a00 <_ZN10LineSensor11calibrationEv+0x234>)
 80027e8:	f7fe fc94 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80027ec:	2101      	movs	r1, #1
 80027ee:	2000      	movs	r0, #0
 80027f0:	f7fe fc66 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80027f4:	4883      	ldr	r0, [pc, #524]	; (8002a04 <_ZN10LineSensor11calibrationEv+0x238>)
 80027f6:	f7fe fc8d 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027fa:	2300      	movs	r3, #0
 80027fc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002800:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002804:	2b0d      	cmp	r3, #13
 8002806:	d823      	bhi.n	8002850 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002808:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800280c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	32b0      	adds	r2, #176	; 0xb0
 8002814:	0092      	lsls	r2, r2, #2
 8002816:	440a      	add	r2, r1
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002820:	440b      	add	r3, r1
 8002822:	3b40      	subs	r3, #64	; 0x40
 8002824:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002826:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800282a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	32b0      	adds	r2, #176	; 0xb0
 8002832:	0092      	lsls	r2, r2, #2
 8002834:	440a      	add	r2, r1
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800283e:	440b      	add	r3, r1
 8002840:	3b78      	subs	r3, #120	; 0x78
 8002842:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002844:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002848:	3301      	adds	r3, #1
 800284a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800284e:	e7d7      	b.n	8002800 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fc98 	bl	800218c <_ZN8JoyStick8getValueEv>
 800285c:	4603      	mov	r3, r0
 800285e:	2b02      	cmp	r3, #2
 8002860:	bf14      	ite	ne
 8002862:	2301      	movne	r3, #1
 8002864:	2300      	moveq	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d079      	beq.n	8002960 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800286c:	2300      	movs	r3, #0
 800286e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002872:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002876:	2b0d      	cmp	r3, #13
 8002878:	d850      	bhi.n	800291c <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 800287a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002884:	4413      	add	r3, r2
 8002886:	3b40      	subs	r3, #64	; 0x40
 8002888:	ed93 7a00 	vldr	s14, [r3]
 800288c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	33b0      	adds	r3, #176	; 0xb0
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	edd3 7a00 	vldr	s15, [r3]
 800289c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a4:	d50f      	bpl.n	80028c6 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80028a6:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80028aa:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	32b0      	adds	r2, #176	; 0xb0
 80028b2:	0092      	lsls	r2, r2, #2
 80028b4:	440a      	add	r2, r1
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80028be:	440b      	add	r3, r1
 80028c0:	3b40      	subs	r3, #64	; 0x40
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	e024      	b.n	8002910 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80028c6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028d0:	4413      	add	r3, r2
 80028d2:	3b78      	subs	r3, #120	; 0x78
 80028d4:	ed93 7a00 	vldr	s14, [r3]
 80028d8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	33b0      	adds	r3, #176	; 0xb0
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	edd3 7a00 	vldr	s15, [r3]
 80028e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f0:	dd0e      	ble.n	8002910 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80028f2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80028f6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	32b0      	adds	r2, #176	; 0xb0
 80028fe:	0092      	lsls	r2, r2, #2
 8002900:	440a      	add	r2, r1
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800290a:	440b      	add	r3, r1
 800290c:	3b78      	subs	r3, #120	; 0x78
 800290e:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002910:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002914:	3301      	adds	r3, #1
 8002916:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800291a:	e7aa      	b.n	8002872 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8002922:	4618      	mov	r0, r3
 8002924:	f002 fef6 	bl	8005714 <_ZN12RotarySwitch8getValueEv>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	bf0c      	ite	eq
 800292e:	2301      	moveq	r3, #1
 8002930:	2300      	movne	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d009      	beq.n	800294c <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800293e:	2201      	movs	r2, #1
 8002940:	f04f 31ff 	mov.w	r1, #4294967295
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fd41 	bl	80023cc <_ZN3LED2LREaa>
 800294a:	e781      	b.n	8002850 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002952:	2200      	movs	r2, #0
 8002954:	f04f 31ff 	mov.w	r1, #4294967295
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fd37 	bl	80023cc <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800295e:	e777      	b.n	8002850 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002960:	2300      	movs	r3, #0
 8002962:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002966:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800296a:	2b0d      	cmp	r3, #13
 800296c:	d826      	bhi.n	80029bc <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800296e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002978:	4413      	add	r3, r2
 800297a:	3b40      	subs	r3, #64	; 0x40
 800297c:	ed93 7a00 	vldr	s14, [r3]
 8002980:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800298a:	4413      	add	r3, r2
 800298c:	3b78      	subs	r3, #120	; 0x78
 800298e:	edd3 7a00 	vldr	s15, [r3]
 8002992:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002996:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800299a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002a08 <_ZN10LineSensor11calibrationEv+0x23c>
 800299e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	3392      	adds	r3, #146	; 0x92
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	3304      	adds	r3, #4
 80029ac:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029b0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80029b4:	3301      	adds	r3, #1
 80029b6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80029ba:	e7d4      	b.n	8002966 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029bc:	2300      	movs	r3, #0
 80029be:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80029c2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029c6:	2b0d      	cmp	r3, #13
 80029c8:	d815      	bhi.n	80029f6 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 80029ca:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80029ce:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029d2:	0092      	lsls	r2, r2, #2
 80029d4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80029d8:	440a      	add	r2, r1
 80029da:	3a78      	subs	r2, #120	; 0x78
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	33a0      	adds	r3, #160	; 0xa0
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	3304      	adds	r3, #4
 80029e8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029ea:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029ee:	3301      	adds	r3, #1
 80029f0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80029f4:	e7e5      	b.n	80029c2 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 80029f6:	bf00      	nop
 80029f8:	3780      	adds	r7, #128	; 0x80
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	08019fdc 	.word	0x08019fdc
 8002a04:	08019fe8 	.word	0x08019fe8
 8002a08:	447a0000 	.word	0x447a0000

08002a0c <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 8002a18:	2303      	movs	r3, #3
 8002a1a:	81bb      	strh	r3, [r7, #12]
 8002a1c:	89bb      	ldrh	r3, [r7, #12]
 8002a1e:	2b0a      	cmp	r3, #10
 8002a20:	d814      	bhi.n	8002a4c <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 8002a22:	89bb      	ldrh	r3, [r7, #12]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	33b0      	adds	r3, #176	; 0xb0
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	edd3 7a00 	vldr	s15, [r3]
 8002a30:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002aa0 <_ZN10LineSensor13emergencyStopEv+0x94>
 8002a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3c:	db02      	blt.n	8002a44 <_ZN10LineSensor13emergencyStopEv+0x38>
 8002a3e:	89fb      	ldrh	r3, [r7, #14]
 8002a40:	3301      	adds	r3, #1
 8002a42:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 8002a44:	89bb      	ldrh	r3, [r7, #12]
 8002a46:	3301      	adds	r3, #1
 8002a48:	81bb      	strh	r3, [r7, #12]
 8002a4a:	e7e7      	b.n	8002a1c <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 8002a4c:	89fb      	ldrh	r3, [r7, #14]
 8002a4e:	2b07      	cmp	r3, #7
 8002a50:	d906      	bls.n	8002a60 <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 8002a52:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	3301      	adds	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a5c:	801a      	strh	r2, [r3, #0]
 8002a5e:	e002      	b.n	8002a66 <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 8002a60:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 8002a66:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	2b63      	cmp	r3, #99	; 0x63
 8002a6c:	d903      	bls.n	8002a76 <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	701a      	strb	r2, [r3, #0]
 8002a74:	e002      	b.n	8002a7c <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d903      	bls.n	8002a90 <_ZN10LineSensor13emergencyStopEv+0x84>
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a8e:	801a      	strh	r2, [r3, #0]

	return flag;
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a92:	781b      	ldrb	r3, [r3, #0]

}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	44098000 	.word	0x44098000
 8002aa4:	20000256 	.word	0x20000256
 8002aa8:	20000258 	.word	0x20000258

08002aac <_ZSt3absd>:
// 2294. <cstdlib> should declare abs(double)

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8002aac:	b490      	push	{r4, r7}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	ed87 0b00 	vstr	d0, [r7]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	f022 4400 	bic.w	r4, r2, #2147483648	; 0x80000000
 8002abe:	ec44 3b17 	vmov	d7, r3, r4
 8002ac2:	eeb0 0a47 	vmov.f32	s0, s14
 8002ac6:	eef0 0a67 	vmov.f32	s1, s15
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc90      	pop	{r4, r7}
 8002ad0:	4770      	bx	lr

08002ad2 <_ZSt3absf>:

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	ed87 0a01 	vstr	s0, [r7, #4]
 8002adc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ae0:	eef0 7ae7 	vabs.f32	s15, s15
 8002ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 8002af2:	b480      	push	{r7}
 8002af4:	b089      	sub	sp, #36	; 0x24
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
 8002afe:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), sideline_idx2_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0),
				store_check_cnt_(0), all_sideline_flag_(false)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	629a      	str	r2, [r3, #40]	; 0x28
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	645a      	str	r2, [r3, #68]	; 0x44
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002b70:	330c      	adds	r3, #12
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b7e:	3350      	adds	r3, #80	; 0x50
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b8a:	3352      	adds	r3, #82	; 0x52
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	801a      	strh	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b96:	3354      	adds	r3, #84	; 0x54
 8002b98:	2200      	movs	r2, #0
 8002b9a:	801a      	strh	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ba2:	3318      	adds	r3, #24
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	801a      	strh	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bae:	331c      	adds	r3, #28
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	801a      	strh	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bba:	331e      	adds	r3, #30
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	801a      	strh	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bc6:	3320      	adds	r3, #32
 8002bc8:	2200      	movs	r2, #0
 8002bca:	801a      	strh	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bd2:	3322      	adds	r3, #34	; 0x22
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	701a      	strb	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bde:	3323      	adds	r3, #35	; 0x23
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bea:	3324      	adds	r3, #36	; 0x24
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bf6:	3328      	adds	r3, #40	; 0x28
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002c04:	332c      	adds	r3, #44	; 0x2c
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002c12:	3330      	adds	r3, #48	; 0x30
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002c20:	3334      	adds	r3, #52	; 0x34
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002c2e:	3338      	adds	r3, #56	; 0x38
 8002c30:	2200      	movs	r2, #0
 8002c32:	801a      	strh	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002c3a:	333a      	adds	r3, #58	; 0x3a
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	801a      	strh	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002c46:	333c      	adds	r3, #60	; 0x3c
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c62:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c68:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c6e:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c74:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c7a:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c82:	2300      	movs	r3, #0
 8002c84:	83fb      	strh	r3, [r7, #30]
 8002c86:	8bfb      	ldrh	r3, [r7, #30]
 8002c88:	f241 726f 	movw	r2, #5999	; 0x176f
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d80d      	bhi.n	8002cac <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1ba>
		velocity_table_[i] = 0;
 8002c90:	8bfb      	ldrh	r3, [r7, #30]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002c98:	3304      	adds	r3, #4
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002ca4:	8bfb      	ldrh	r3, [r7, #30]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	83fb      	strh	r3, [r7, #30]
 8002caa:	e7ec      	b.n	8002c86 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x194>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002cac:	2300      	movs	r3, #0
 8002cae:	83bb      	strh	r3, [r7, #28]
 8002cb0:	8bbb      	ldrh	r3, [r7, #28]
 8002cb2:	2b63      	cmp	r3, #99	; 0x63
 8002cb4:	d80d      	bhi.n	8002cd2 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1e0>
		crossline_distance_[i] = 0;
 8002cb6:	8bbb      	ldrh	r3, [r7, #28]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002cbe:	3316      	adds	r3, #22
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002cca:	8bbb      	ldrh	r3, [r7, #28]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	83bb      	strh	r3, [r7, #28]
 8002cd0:	e7ee      	b.n	8002cb0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1be>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	837b      	strh	r3, [r7, #26]
 8002cd6:	8b7b      	ldrh	r3, [r7, #26]
 8002cd8:	2b63      	cmp	r3, #99	; 0x63
 8002cda:	d80d      	bhi.n	8002cf8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x206>
		crossline_distance2_[i] = 0;
 8002cdc:	8b7b      	ldrh	r3, [r7, #26]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002ce4:	333a      	adds	r3, #58	; 0x3a
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002cf0:	8b7b      	ldrh	r3, [r7, #26]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	837b      	strh	r3, [r7, #26]
 8002cf6:	e7ee      	b.n	8002cd6 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1e4>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	833b      	strh	r3, [r7, #24]
 8002cfc:	8b3b      	ldrh	r3, [r7, #24]
 8002cfe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d02:	d20d      	bcs.n	8002d20 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x22e>
		sideline_distance_[i] = 0;
 8002d04:	8b3b      	ldrh	r3, [r7, #24]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8002d0c:	331e      	adds	r3, #30
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002d18:	8b3b      	ldrh	r3, [r7, #24]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	833b      	strh	r3, [r7, #24]
 8002d1e:	e7ed      	b.n	8002cfc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x20a>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002d20:	2300      	movs	r3, #0
 8002d22:	82fb      	strh	r3, [r7, #22]
 8002d24:	8afb      	ldrh	r3, [r7, #22]
 8002d26:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d2a:	d20d      	bcs.n	8002d48 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x256>
		sideline_distance2_[i] = 0;
 8002d2c:	8afb      	ldrh	r3, [r7, #22]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8002d34:	3312      	adds	r3, #18
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002d40:	8afb      	ldrh	r3, [r7, #22]
 8002d42:	3301      	adds	r3, #1
 8002d44:	82fb      	strh	r3, [r7, #22]
 8002d46:	e7ed      	b.n	8002d24 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x232>
	/*
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
		all_sideline_distance_[i] = 0;
	}
	*/
}
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3724      	adds	r7, #36	; 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
	...

08002d58 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002d70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002d7c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002d90:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002d9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002da0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002da4:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002da8:	4a06      	ldr	r2, [pc, #24]	; (8002dc4 <_ZN9LineTrace9calcErrorEv+0x6c>)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6013      	str	r3, [r2, #0]

	//diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
	//mon_diff_lpf = diff;

	return diff;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	ee07 3a90 	vmov	s15, r3

}
 8002db4:	eeb0 0a67 	vmov.f32	s0, s15
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	2000025c 	.word	0x2000025c

08002dc8 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002dc8:	b5b0      	push	{r4, r5, r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ffc1 	bl	8002d58 <_ZN9LineTrace9calcErrorEv>
 8002dd6:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d007      	beq.n	8002df4 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002de4:	4b66      	ldr	r3, [pc, #408]	; (8002f80 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002dfa:	3354      	adds	r3, #84	; 0x54
 8002dfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d14c      	bne.n	8002e9e <_ZN9LineTrace8pidTraceEv+0xd6>
		p = kp_slow_ * diff;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002e0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e12:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_slow_ * (diff - pre_diff) / DELTA_T;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002e1c:	4b59      	ldr	r3, [pc, #356]	; (8002f84 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002e1e:	edd3 7a00 	vldr	s15, [r3]
 8002e22:	edd7 6a03 	vldr	s13, [r7, #12]
 8002e26:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e2e:	ee17 0a90 	vmov	r0, s15
 8002e32:	f7fd fba1 	bl	8000578 <__aeabi_f2d>
 8002e36:	a350      	add	r3, pc, #320	; (adr r3, 8002f78 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3c:	f7fd fd1e 	bl	800087c <__aeabi_ddiv>
 8002e40:	4603      	mov	r3, r0
 8002e42:	460c      	mov	r4, r1
 8002e44:	4618      	mov	r0, r3
 8002e46:	4621      	mov	r1, r4
 8002e48:	f7fd fee6 	bl	8000c18 <__aeabi_d2f>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002e50:	4b4b      	ldr	r3, [pc, #300]	; (8002f80 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fd fb8f 	bl	8000578 <__aeabi_f2d>
 8002e5a:	4604      	mov	r4, r0
 8002e5c:	460d      	mov	r5, r1
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002e64:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e6c:	ee17 0a90 	vmov	r0, s15
 8002e70:	f7fd fb82 	bl	8000578 <__aeabi_f2d>
 8002e74:	a340      	add	r3, pc, #256	; (adr r3, 8002f78 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7a:	f7fd fbd5 	bl	8000628 <__aeabi_dmul>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4620      	mov	r0, r4
 8002e84:	4629      	mov	r1, r5
 8002e86:	f7fd fa19 	bl	80002bc <__adddf3>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	460c      	mov	r4, r1
 8002e8e:	4618      	mov	r0, r3
 8002e90:	4621      	mov	r1, r4
 8002e92:	f7fd fec1 	bl	8000c18 <__aeabi_d2f>
 8002e96:	4602      	mov	r2, r0
 8002e98:	4b39      	ldr	r3, [pc, #228]	; (8002f80 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	e04b      	b.n	8002f36 <_ZN9LineTrace8pidTraceEv+0x16e>
	}
	else{
		p = kp_ * diff;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002ea4:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eac:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_ * (diff - pre_diff) / DELTA_T;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002eb6:	4b33      	ldr	r3, [pc, #204]	; (8002f84 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002eb8:	edd3 7a00 	vldr	s15, [r3]
 8002ebc:	edd7 6a03 	vldr	s13, [r7, #12]
 8002ec0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec8:	ee17 0a90 	vmov	r0, s15
 8002ecc:	f7fd fb54 	bl	8000578 <__aeabi_f2d>
 8002ed0:	a329      	add	r3, pc, #164	; (adr r3, 8002f78 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed6:	f7fd fcd1 	bl	800087c <__aeabi_ddiv>
 8002eda:	4603      	mov	r3, r0
 8002edc:	460c      	mov	r4, r1
 8002ede:	4618      	mov	r0, r3
 8002ee0:	4621      	mov	r1, r4
 8002ee2:	f7fd fe99 	bl	8000c18 <__aeabi_d2f>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002eea:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fd fb42 	bl	8000578 <__aeabi_f2d>
 8002ef4:	4604      	mov	r4, r0
 8002ef6:	460d      	mov	r5, r1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002efe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f06:	ee17 0a90 	vmov	r0, s15
 8002f0a:	f7fd fb35 	bl	8000578 <__aeabi_f2d>
 8002f0e:	a31a      	add	r3, pc, #104	; (adr r3, 8002f78 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f14:	f7fd fb88 	bl	8000628 <__aeabi_dmul>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	4629      	mov	r1, r5
 8002f20:	f7fd f9cc 	bl	80002bc <__adddf3>
 8002f24:	4603      	mov	r3, r0
 8002f26:	460c      	mov	r4, r1
 8002f28:	4618      	mov	r0, r3
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	f7fd fe74 	bl	8000c18 <__aeabi_d2f>
 8002f30:	4602      	mov	r2, r0
 8002f32:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002f34:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002f36:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f42:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002f44:	edd3 7a00 	vldr	s15, [r3]
 8002f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f4c:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002f5a:	edd7 0a02 	vldr	s1, [r7, #8]
 8002f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f62:	4610      	mov	r0, r2
 8002f64:	f003 f904 	bl	8006170 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002f68:	4a06      	ldr	r2, [pc, #24]	; (8002f84 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6013      	str	r3, [r2, #0]

}
 8002f6e:	bf00      	nop
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bdb0      	pop	{r4, r5, r7, pc}
 8002f76:	bf00      	nop
 8002f78:	d2f1a9fc 	.word	0xd2f1a9fc
 8002f7c:	3f50624d 	.word	0x3f50624d
 8002f80:	20000280 	.word	0x20000280
 8002f84:	2000027c 	.word	0x2000027c

08002f88 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fe fbc3 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f002 fa7a 	bl	8005498 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f001 ff90 	bl	8004ece <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f001 fff1 	bl	8004fb2 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002fd8:	bf00      	nop
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002fe0:	b590      	push	{r4, r7, lr}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	695a      	ldr	r2, [r3, #20]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ff2:	3318      	adds	r3, #24
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	461c      	mov	r4, r3
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	f7fe fb73 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002ffe:	eef0 7a40 	vmov.f32	s15, s0
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8003008:	3316      	adds	r3, #22
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003018:	3318      	adds	r3, #24
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	3301      	adds	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003026:	3318      	adds	r3, #24
 8003028:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003030:	3318      	adds	r3, #24
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	2b63      	cmp	r3, #99	; 0x63
 8003036:	d905      	bls.n	8003044 <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800303e:	3318      	adds	r3, #24
 8003040:	2263      	movs	r2, #99	; 0x63
 8003042:	801a      	strh	r2, [r3, #0]
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	bd90      	pop	{r4, r7, pc}

0800304c <_ZN9LineTrace23storeCrossLineDistance2Ev>:

void LineTrace::storeCrossLineDistance2()
{
 800304c:	b590      	push	{r4, r7, lr}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
	crossline_distance2_[crossline_idx2_] = encoder_->getTotalDistance();
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800305e:	331a      	adds	r3, #26
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	461c      	mov	r4, r3
 8003064:	4610      	mov	r0, r2
 8003066:	f7fe fb3d 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 800306a:	eef0 7a40 	vmov.f32	s15, s0
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8003074:	333a      	adds	r3, #58	; 0x3a
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx2_++;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003084:	331a      	adds	r3, #26
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	3301      	adds	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003092:	331a      	adds	r3, #26
 8003094:	801a      	strh	r2, [r3, #0]

	if(crossline_idx2_ >= CROSSLINE_SIZE) crossline_idx2_ = CROSSLINE_SIZE - 1;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800309c:	331a      	adds	r3, #26
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	2b63      	cmp	r3, #99	; 0x63
 80030a2:	d905      	bls.n	80030b0 <_ZN9LineTrace23storeCrossLineDistance2Ev+0x64>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030aa:	331a      	adds	r3, #26
 80030ac:	2263      	movs	r2, #99	; 0x63
 80030ae:	801a      	strh	r2, [r3, #0]
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd90      	pop	{r4, r7, pc}

080030b8 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 80030b8:	b590      	push	{r4, r7, lr}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030ca:	331c      	adds	r3, #28
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	461c      	mov	r4, r3
 80030d0:	4610      	mov	r0, r2
 80030d2:	f7fe fb07 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80030d6:	eef0 7a40 	vmov.f32	s15, s0
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	f504 533f 	add.w	r3, r4, #12224	; 0x2fc0
 80030e0:	331e      	adds	r3, #30
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030f0:	331c      	adds	r3, #28
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	3301      	adds	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030fe:	331c      	adds	r3, #28
 8003100:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003108:	331c      	adds	r3, #28
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003110:	d306      	bcc.n	8003120 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003118:	331c      	adds	r3, #28
 800311a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800311e:	801a      	strh	r2, [r3, #0]
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	bd90      	pop	{r4, r7, pc}

08003128 <_ZN9LineTrace22storeSideLineDistance2Ev>:

void LineTrace::storeSideLineDistance2()
{
 8003128:	b590      	push	{r4, r7, lr}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	sideline_distance2_[sideline_idx2_] = encoder_->getTotalDistance();
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	695a      	ldr	r2, [r3, #20]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800313a:	331e      	adds	r3, #30
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	461c      	mov	r4, r3
 8003140:	4610      	mov	r0, r2
 8003142:	f7fe facf 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003146:	eef0 7a40 	vmov.f32	s15, s0
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	f504 5347 	add.w	r3, r4, #12736	; 0x31c0
 8003150:	3312      	adds	r3, #18
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx2_++;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003160:	331e      	adds	r3, #30
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	3301      	adds	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800316e:	331e      	adds	r3, #30
 8003170:	801a      	strh	r2, [r3, #0]

	if(sideline_idx2_ >= SIDELINE_SIZE) sideline_idx2_ = SIDELINE_SIZE - 1;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003178:	331e      	adds	r3, #30
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003180:	d306      	bcc.n	8003190 <_ZN9LineTrace22storeSideLineDistance2Ev+0x68>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003188:	331e      	adds	r3, #30
 800318a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800318e:	801a      	strh	r2, [r3, #0]
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bd90      	pop	{r4, r7, pc}

08003198 <_ZN9LineTrace9storeLogsEv>:
	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}
*/

void LineTrace::storeLogs()
{
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	ed2d 8b02 	vpush	{d8}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d046      	beq.n	800323c <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80031b4:	3354      	adds	r3, #84	; 0x54
 80031b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d11c      	bne.n	80031f8 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69dc      	ldr	r4, [r3, #28]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fe fa7d 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 80031cc:	eeb0 8a40 	vmov.f32	s16, s0
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f002 f94e 	bl	8005476 <_ZN8Odometry8getThetaEv>
 80031da:	ec53 2b10 	vmov	r2, r3, d0
 80031de:	4610      	mov	r0, r2
 80031e0:	4619      	mov	r1, r3
 80031e2:	f7fd fd19 	bl	8000c18 <__aeabi_d2f>
 80031e6:	4603      	mov	r3, r0
 80031e8:	ee00 3a90 	vmov	s1, r3
 80031ec:	eeb0 0a48 	vmov.f32	s0, s16
 80031f0:	4620      	mov	r0, r4
 80031f2:	f001 fd23 	bl	8004c3c <_ZN6Logger21storeDistanceAndThetaEff>
 80031f6:	e01b      	b.n	8003230 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69dc      	ldr	r4, [r3, #28]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	4618      	mov	r0, r3
 8003202:	f7fe fa6f 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003206:	eeb0 8a40 	vmov.f32	s16, s0
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	4618      	mov	r0, r3
 8003210:	f002 f931 	bl	8005476 <_ZN8Odometry8getThetaEv>
 8003214:	ec53 2b10 	vmov	r2, r3, d0
 8003218:	4610      	mov	r0, r2
 800321a:	4619      	mov	r1, r3
 800321c:	f7fd fcfc 	bl	8000c18 <__aeabi_d2f>
 8003220:	4603      	mov	r3, r0
 8003222:	ee00 3a90 	vmov	s1, r3
 8003226:	eeb0 0a48 	vmov.f32	s0, s16
 800322a:	4620      	mov	r0, r4
 800322c:	f001 fd49 	bl	8004cc2 <_ZN6Logger22storeDistanceAndTheta2Eff>
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());

		mon_store_cnt++;
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	3301      	adds	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	4b03      	ldr	r3, [pc, #12]	; (8003248 <_ZN9LineTrace9storeLogsEv+0xb0>)
 800323a:	801a      	strh	r2, [r3, #0]
	}
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	ecbd 8b02 	vpop	{d8}
 8003246:	bd90      	pop	{r4, r7, pc}
 8003248:	20000260 	.word	0x20000260
 800324c:	00000000 	.word	0x00000000

08003250 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8003250:	b5b0      	push	{r4, r5, r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
	/*
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_] / DISTANCE_CORRECTION_CONST);
	crossline_idx_++;
	correction_check_cnt_ = 0;
	*/
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8003258:	2300      	movs	r3, #0
 800325a:	82fb      	strh	r3, [r7, #22]
 800325c:	8afb      	ldrh	r3, [r7, #22]
 800325e:	2b63      	cmp	r3, #99	; 0x63
 8003260:	d866      	bhi.n	8003330 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xe0>
		float temp_crossline_distance = crossline_distance_[i];
 8003262:	8afb      	ldrh	r3, [r7, #22]
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800326a:	3316      	adds	r3, #22
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_crossline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 8003274:	6938      	ldr	r0, [r7, #16]
 8003276:	f7fd f97f 	bl	8000578 <__aeabi_f2d>
 800327a:	4604      	mov	r4, r0
 800327c:	460d      	mov	r5, r1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	4618      	mov	r0, r3
 8003284:	f7fe fa2e 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003288:	ee10 3a10 	vmov	r3, s0
 800328c:	4618      	mov	r0, r3
 800328e:	f7fd f973 	bl	8000578 <__aeabi_f2d>
 8003292:	a331      	add	r3, pc, #196	; (adr r3, 8003358 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x108>)
 8003294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003298:	f7fd faf0 	bl	800087c <__aeabi_ddiv>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4620      	mov	r0, r4
 80032a2:	4629      	mov	r1, r5
 80032a4:	f7fd f808 	bl	80002b8 <__aeabi_dsub>
 80032a8:	4603      	mov	r3, r0
 80032aa:	460c      	mov	r4, r1
 80032ac:	ec44 3b17 	vmov	d7, r3, r4
 80032b0:	eeb0 0a47 	vmov.f32	s0, s14
 80032b4:	eef0 0a67 	vmov.f32	s1, s15
 80032b8:	f7ff fbf8 	bl	8002aac <_ZSt3absd>
 80032bc:	ec54 3b10 	vmov	r3, r4, d0
 80032c0:	4618      	mov	r0, r3
 80032c2:	4621      	mov	r1, r4
 80032c4:	f7fd fca8 	bl	8000c18 <__aeabi_d2f>
 80032c8:	4603      	mov	r3, r0
 80032ca:	60fb      	str	r3, [r7, #12]
		if(diff <= 100){
 80032cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80032d0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003360 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x110>
 80032d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032dc:	d824      	bhi.n	8003328 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xd8>
			correction_check_cnt_ = 0;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80032e4:	3338      	adds	r3, #56	; 0x38
 80032e6:	2200      	movs	r2, #0
 80032e8:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(crossline_distance_[i] / DISTANCE_CORRECTION_CONST);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695c      	ldr	r4, [r3, #20]
 80032ee:	8afb      	ldrh	r3, [r7, #22]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80032f6:	3316      	adds	r3, #22
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fd f93a 	bl	8000578 <__aeabi_f2d>
 8003304:	a314      	add	r3, pc, #80	; (adr r3, 8003358 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x108>)
 8003306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330a:	f7fd fab7 	bl	800087c <__aeabi_ddiv>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	4610      	mov	r0, r2
 8003314:	4619      	mov	r1, r3
 8003316:	f7fd fc7f 	bl	8000c18 <__aeabi_d2f>
 800331a:	4603      	mov	r3, r0
 800331c:	ee00 3a10 	vmov	s0, r3
 8003320:	4620      	mov	r0, r4
 8003322:	f7fe f9ee 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
			break;
 8003326:	e003      	b.n	8003330 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xe0>
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8003328:	8afb      	ldrh	r3, [r7, #22]
 800332a:	3301      	adds	r3, #1
 800332c:	82fb      	strh	r3, [r7, #22]
 800332e:	e795      	b.n	800325c <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xc>
		}
		crossline_idx_++;
	}
	*/

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003336:	3318      	adds	r3, #24
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	2b63      	cmp	r3, #99	; 0x63
 800333c:	d905      	bls.n	800334a <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xfa>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003344:	3318      	adds	r3, #24
 8003346:	2263      	movs	r2, #99	; 0x63
 8003348:	801a      	strh	r2, [r3, #0]

}
 800334a:	bf00      	nop
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bdb0      	pop	{r4, r5, r7, pc}
 8003352:	bf00      	nop
 8003354:	f3af 8000 	nop.w
 8003358:	fa43fe5d 	.word	0xfa43fe5d
 800335c:	3feeebed 	.word	0x3feeebed
 8003360:	42c80000 	.word	0x42c80000
 8003364:	00000000 	.word	0x00000000

08003368 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 8003368:	b5b0      	push	{r4, r5, r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003370:	2300      	movs	r3, #0
 8003372:	82fb      	strh	r3, [r7, #22]
 8003374:	8afb      	ldrh	r3, [r7, #22]
 8003376:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800337a:	d266      	bcs.n	800344a <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xe2>
		float temp_sideline_distance = sideline_distance_[i];
 800337c:	8afb      	ldrh	r3, [r7, #22]
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8003384:	331e      	adds	r3, #30
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 800338e:	6938      	ldr	r0, [r7, #16]
 8003390:	f7fd f8f2 	bl	8000578 <__aeabi_f2d>
 8003394:	4604      	mov	r4, r0
 8003396:	460d      	mov	r5, r1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	4618      	mov	r0, r3
 800339e:	f7fe f9a1 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80033a2:	ee10 3a10 	vmov	r3, s0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fd f8e6 	bl	8000578 <__aeabi_f2d>
 80033ac:	a330      	add	r3, pc, #192	; (adr r3, 8003470 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x108>)
 80033ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b2:	f7fd fa63 	bl	800087c <__aeabi_ddiv>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	4620      	mov	r0, r4
 80033bc:	4629      	mov	r1, r5
 80033be:	f7fc ff7b 	bl	80002b8 <__aeabi_dsub>
 80033c2:	4603      	mov	r3, r0
 80033c4:	460c      	mov	r4, r1
 80033c6:	ec44 3b17 	vmov	d7, r3, r4
 80033ca:	eeb0 0a47 	vmov.f32	s0, s14
 80033ce:	eef0 0a67 	vmov.f32	s1, s15
 80033d2:	f7ff fb6b 	bl	8002aac <_ZSt3absd>
 80033d6:	ec54 3b10 	vmov	r3, r4, d0
 80033da:	4618      	mov	r0, r3
 80033dc:	4621      	mov	r1, r4
 80033de:	f7fd fc1b 	bl	8000c18 <__aeabi_d2f>
 80033e2:	4603      	mov	r3, r0
 80033e4:	60fb      	str	r3, [r7, #12]
		if(diff <= 230){
 80033e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80033ea:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003478 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x110>
 80033ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f6:	d824      	bhi.n	8003442 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xda>
			correction_check_cnt_ = 0;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80033fe:	3338      	adds	r3, #56	; 0x38
 8003400:	2200      	movs	r2, #0
 8003402:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(sideline_distance_[i] / DISTANCE_CORRECTION_CONST);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	695c      	ldr	r4, [r3, #20]
 8003408:	8afb      	ldrh	r3, [r7, #22]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8003410:	331e      	adds	r3, #30
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f7fd f8ad 	bl	8000578 <__aeabi_f2d>
 800341e:	a314      	add	r3, pc, #80	; (adr r3, 8003470 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x108>)
 8003420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003424:	f7fd fa2a 	bl	800087c <__aeabi_ddiv>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4610      	mov	r0, r2
 800342e:	4619      	mov	r1, r3
 8003430:	f7fd fbf2 	bl	8000c18 <__aeabi_d2f>
 8003434:	4603      	mov	r3, r0
 8003436:	ee00 3a10 	vmov	s0, r3
 800343a:	4620      	mov	r0, r4
 800343c:	f7fe f961 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
			break;
 8003440:	e003      	b.n	800344a <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xe2>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003442:	8afb      	ldrh	r3, [r7, #22]
 8003444:	3301      	adds	r3, #1
 8003446:	82fb      	strh	r3, [r7, #22]
 8003448:	e794      	b.n	8003374 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
		sideline_idx_++;
	}
	*/

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003450:	331c      	adds	r3, #28
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003458:	d306      	bcc.n	8003468 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x100>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003460:	331c      	adds	r3, #28
 8003462:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003466:	801a      	strh	r2, [r3, #0]

}
 8003468:	bf00      	nop
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bdb0      	pop	{r4, r5, r7, pc}
 8003470:	fa43fe5d 	.word	0xfa43fe5d
 8003474:	3feeebed 	.word	0x3feeebed
 8003478:	43660000 	.word	0x43660000

0800347c <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800348e:	3354      	adds	r3, #84	; 0x54
 8003490:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d12b      	bne.n	80034f0 <_ZN9LineTrace15radius2VelocityEf+0x74>
		if(radius < 400) velocity = min_velocity_;
 8003498:	edd7 7a00 	vldr	s15, [r7]
 800349c:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003588 <_ZN9LineTrace15radius2VelocityEf+0x10c>
 80034a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a8:	d504      	bpl.n	80034b4 <_ZN9LineTrace15radius2VelocityEf+0x38>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	e05e      	b.n	8003572 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 800) velocity = 1.7;
 80034b4:	edd7 7a00 	vldr	s15, [r7]
 80034b8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800358c <_ZN9LineTrace15radius2VelocityEf+0x110>
 80034bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c4:	d502      	bpl.n	80034cc <_ZN9LineTrace15radius2VelocityEf+0x50>
 80034c6:	4b32      	ldr	r3, [pc, #200]	; (8003590 <_ZN9LineTrace15radius2VelocityEf+0x114>)
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	e052      	b.n	8003572 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 1400) velocity = 2.0;
 80034cc:	edd7 7a00 	vldr	s15, [r7]
 80034d0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003594 <_ZN9LineTrace15radius2VelocityEf+0x118>
 80034d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034dc:	d503      	bpl.n	80034e6 <_ZN9LineTrace15radius2VelocityEf+0x6a>
 80034de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	e045      	b.n	8003572 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else velocity = max_velocity_;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	e040      	b.n	8003572 <_ZN9LineTrace15radius2VelocityEf+0xf6>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034f6:	3354      	adds	r3, #84	; 0x54
 80034f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d136      	bne.n	800356e <_ZN9LineTrace15radius2VelocityEf+0xf2>
		if(radius < 300) velocity = min_velocity2_;
 8003500:	edd7 7a00 	vldr	s15, [r7]
 8003504:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003598 <_ZN9LineTrace15radius2VelocityEf+0x11c>
 8003508:	eef4 7ac7 	vcmpe.f32	s15, s14
 800350c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003510:	d504      	bpl.n	800351c <_ZN9LineTrace15radius2VelocityEf+0xa0>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	e02a      	b.n	8003572 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 1500) velocity = 2.1;
 800351c:	edd7 7a00 	vldr	s15, [r7]
 8003520:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800359c <_ZN9LineTrace15radius2VelocityEf+0x120>
 8003524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352c:	d502      	bpl.n	8003534 <_ZN9LineTrace15radius2VelocityEf+0xb8>
 800352e:	4b1c      	ldr	r3, [pc, #112]	; (80035a0 <_ZN9LineTrace15radius2VelocityEf+0x124>)
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	e01e      	b.n	8003572 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 2000) velocity = 2.5;
 8003534:	edd7 7a00 	vldr	s15, [r7]
 8003538:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80035a4 <_ZN9LineTrace15radius2VelocityEf+0x128>
 800353c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003544:	d502      	bpl.n	800354c <_ZN9LineTrace15radius2VelocityEf+0xd0>
 8003546:	4b18      	ldr	r3, [pc, #96]	; (80035a8 <_ZN9LineTrace15radius2VelocityEf+0x12c>)
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	e012      	b.n	8003572 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 2500) velocity = 3.0;
 800354c:	edd7 7a00 	vldr	s15, [r7]
 8003550:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80035ac <_ZN9LineTrace15radius2VelocityEf+0x130>
 8003554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355c:	d502      	bpl.n	8003564 <_ZN9LineTrace15radius2VelocityEf+0xe8>
 800355e:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <_ZN9LineTrace15radius2VelocityEf+0x134>)
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	e006      	b.n	8003572 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else velocity = max_velocity2_;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	e001      	b.n	8003572 <_ZN9LineTrace15radius2VelocityEf+0xf6>
	}
	else velocity = 1.3;
 800356e:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <_ZN9LineTrace15radius2VelocityEf+0x138>)
 8003570:	60fb      	str	r3, [r7, #12]

	return velocity;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	ee07 3a90 	vmov	s15, r3
}
 8003578:	eeb0 0a67 	vmov.f32	s0, s15
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	43c80000 	.word	0x43c80000
 800358c:	44480000 	.word	0x44480000
 8003590:	3fd9999a 	.word	0x3fd9999a
 8003594:	44af0000 	.word	0x44af0000
 8003598:	43960000 	.word	0x43960000
 800359c:	44bb8000 	.word	0x44bb8000
 80035a0:	40066666 	.word	0x40066666
 80035a4:	44fa0000 	.word	0x44fa0000
 80035a8:	40200000 	.word	0x40200000
 80035ac:	451c4000 	.word	0x451c4000
 80035b0:	40400000 	.word	0x40400000
 80035b4:	3fa66666 	.word	0x3fa66666

080035b8 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 80035b8:	b5b0      	push	{r4, r5, r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80035c4:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80035c6:	f241 736f 	movw	r3, #5999	; 0x176f
 80035ca:	83fb      	strh	r3, [r7, #30]
 80035cc:	8bfb      	ldrh	r3, [r7, #30]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 808d 	beq.w	80036ee <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 80035d4:	8bfb      	ldrh	r3, [r7, #30]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80035de:	3304      	adds	r3, #4
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	ed93 7a00 	vldr	s14, [r3]
 80035e8:	8bfb      	ldrh	r3, [r7, #30]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80035f0:	3304      	adds	r3, #4
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	edd3 7a00 	vldr	s15, [r3]
 80035fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035fe:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003602:	edd7 7a06 	vldr	s15, [r7, #24]
 8003606:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800360a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800360e:	dd6a      	ble.n	80036e6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003610:	8bfb      	ldrh	r3, [r7, #30]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	4413      	add	r3, r2
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7fc ffac 	bl	8000578 <__aeabi_f2d>
 8003620:	a335      	add	r3, pc, #212	; (adr r3, 80036f8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003626:	f7fc ffff 	bl	8000628 <__aeabi_dmul>
 800362a:	4603      	mov	r3, r0
 800362c:	460c      	mov	r4, r1
 800362e:	4625      	mov	r5, r4
 8003630:	461c      	mov	r4, r3
 8003632:	69b8      	ldr	r0, [r7, #24]
 8003634:	f7fc ffa0 	bl	8000578 <__aeabi_f2d>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4620      	mov	r0, r4
 800363e:	4629      	mov	r1, r5
 8003640:	f7fd f91c 	bl	800087c <__aeabi_ddiv>
 8003644:	4603      	mov	r3, r0
 8003646:	460c      	mov	r4, r1
 8003648:	4618      	mov	r0, r3
 800364a:	4621      	mov	r1, r4
 800364c:	f7fd fae4 	bl	8000c18 <__aeabi_d2f>
 8003650:	4603      	mov	r3, r0
 8003652:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003654:	edd7 6a06 	vldr	s13, [r7, #24]
 8003658:	ed97 7a05 	vldr	s14, [r7, #20]
 800365c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003660:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003664:	ed97 7a04 	vldr	s14, [r7, #16]
 8003668:	edd7 7a02 	vldr	s15, [r7, #8]
 800366c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003674:	dd37      	ble.n	80036e6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003676:	8bfb      	ldrh	r3, [r7, #30]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800367e:	3304      	adds	r3, #4
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7fc ff76 	bl	8000578 <__aeabi_f2d>
 800368c:	4604      	mov	r4, r0
 800368e:	460d      	mov	r5, r1
 8003690:	8bfb      	ldrh	r3, [r7, #30]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	4413      	add	r3, r2
 8003698:	ed93 7a00 	vldr	s14, [r3]
 800369c:	edd7 7a02 	vldr	s15, [r7, #8]
 80036a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a4:	ee17 0a90 	vmov	r0, s15
 80036a8:	f7fc ff66 	bl	8000578 <__aeabi_f2d>
 80036ac:	a312      	add	r3, pc, #72	; (adr r3, 80036f8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	f7fc ffb9 	bl	8000628 <__aeabi_dmul>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4620      	mov	r0, r4
 80036bc:	4629      	mov	r1, r5
 80036be:	f7fc fdfd 	bl	80002bc <__adddf3>
 80036c2:	4603      	mov	r3, r0
 80036c4:	460c      	mov	r4, r1
 80036c6:	4619      	mov	r1, r3
 80036c8:	4622      	mov	r2, r4
 80036ca:	8bfb      	ldrh	r3, [r7, #30]
 80036cc:	1e5c      	subs	r4, r3, #1
 80036ce:	4608      	mov	r0, r1
 80036d0:	4611      	mov	r1, r2
 80036d2:	f7fd faa1 	bl	8000c18 <__aeabi_d2f>
 80036d6:	4601      	mov	r1, r0
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80036de:	3304      	adds	r3, #4
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80036e6:	8bfb      	ldrh	r3, [r7, #30]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	83fb      	strh	r3, [r7, #30]
 80036ec:	e76e      	b.n	80035cc <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 80036ee:	bf00      	nop
 80036f0:	3720      	adds	r7, #32
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bdb0      	pop	{r4, r5, r7, pc}
 80036f6:	bf00      	nop
 80036f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80036fc:	3f50624d 	.word	0x3f50624d

08003700 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003700:	b5b0      	push	{r4, r5, r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	ed87 0a02 	vstr	s0, [r7, #8]
 800370c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 800370e:	2300      	movs	r3, #0
 8003710:	83fb      	strh	r3, [r7, #30]
 8003712:	8bfb      	ldrh	r3, [r7, #30]
 8003714:	f241 726f 	movw	r2, #5999	; 0x176f
 8003718:	4293      	cmp	r3, r2
 800371a:	f200 808d 	bhi.w	8003838 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 800371e:	8bfb      	ldrh	r3, [r7, #30]
 8003720:	3301      	adds	r3, #1
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003728:	3304      	adds	r3, #4
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	ed93 7a00 	vldr	s14, [r3]
 8003732:	8bfb      	ldrh	r3, [r7, #30]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800373a:	3304      	adds	r3, #4
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	edd3 7a00 	vldr	s15, [r3]
 8003744:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003748:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800374c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003750:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003758:	dd6a      	ble.n	8003830 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 800375a:	8bfb      	ldrh	r3, [r7, #30]
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	4413      	add	r3, r2
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f7fc ff07 	bl	8000578 <__aeabi_f2d>
 800376a:	a335      	add	r3, pc, #212	; (adr r3, 8003840 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 800376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003770:	f7fc ff5a 	bl	8000628 <__aeabi_dmul>
 8003774:	4603      	mov	r3, r0
 8003776:	460c      	mov	r4, r1
 8003778:	4625      	mov	r5, r4
 800377a:	461c      	mov	r4, r3
 800377c:	69b8      	ldr	r0, [r7, #24]
 800377e:	f7fc fefb 	bl	8000578 <__aeabi_f2d>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4620      	mov	r0, r4
 8003788:	4629      	mov	r1, r5
 800378a:	f7fd f877 	bl	800087c <__aeabi_ddiv>
 800378e:	4603      	mov	r3, r0
 8003790:	460c      	mov	r4, r1
 8003792:	4618      	mov	r0, r3
 8003794:	4621      	mov	r1, r4
 8003796:	f7fd fa3f 	bl	8000c18 <__aeabi_d2f>
 800379a:	4603      	mov	r3, r0
 800379c:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 800379e:	edd7 6a06 	vldr	s13, [r7, #24]
 80037a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80037a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037aa:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80037ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80037b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80037b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037be:	dd37      	ble.n	8003830 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80037c0:	8bfb      	ldrh	r3, [r7, #30]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80037c8:	3304      	adds	r3, #4
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fc fed1 	bl	8000578 <__aeabi_f2d>
 80037d6:	4604      	mov	r4, r0
 80037d8:	460d      	mov	r5, r1
 80037da:	8bfb      	ldrh	r3, [r7, #30]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	4413      	add	r3, r2
 80037e2:	ed93 7a00 	vldr	s14, [r3]
 80037e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80037ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ee:	ee17 0a90 	vmov	r0, s15
 80037f2:	f7fc fec1 	bl	8000578 <__aeabi_f2d>
 80037f6:	a312      	add	r3, pc, #72	; (adr r3, 8003840 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	f7fc ff14 	bl	8000628 <__aeabi_dmul>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4620      	mov	r0, r4
 8003806:	4629      	mov	r1, r5
 8003808:	f7fc fd58 	bl	80002bc <__adddf3>
 800380c:	4603      	mov	r3, r0
 800380e:	460c      	mov	r4, r1
 8003810:	4619      	mov	r1, r3
 8003812:	4622      	mov	r2, r4
 8003814:	8bfb      	ldrh	r3, [r7, #30]
 8003816:	1c5c      	adds	r4, r3, #1
 8003818:	4608      	mov	r0, r1
 800381a:	4611      	mov	r1, r2
 800381c:	f7fd f9fc 	bl	8000c18 <__aeabi_d2f>
 8003820:	4601      	mov	r1, r0
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003828:	3304      	adds	r3, #4
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003830:	8bfb      	ldrh	r3, [r7, #30]
 8003832:	3301      	adds	r3, #1
 8003834:	83fb      	strh	r3, [r7, #30]
 8003836:	e76c      	b.n	8003712 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003838:	bf00      	nop
 800383a:	3720      	adds	r7, #32
 800383c:	46bd      	mov	sp, r7
 800383e:	bdb0      	pop	{r4, r5, r7, pc}
 8003840:	d2f1a9fc 	.word	0xd2f1a9fc
 8003844:	3f50624d 	.word	0x3f50624d

08003848 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	4618      	mov	r0, r3
 8003856:	f7fd ff71 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003860:	3350      	adds	r3, #80	; 0x50
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]
}
 8003866:	bf00      	nop
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800387c:	3350      	adds	r3, #80	; 0x50
 800387e:	2200      	movs	r2, #0
 8003880:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003888:	3352      	adds	r3, #82	; 0x52
 800388a:	2200      	movs	r2, #0
 800388c:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003894:	330c      	adds	r3, #12
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 80038a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80038b6:	3350      	adds	r3, #80	; 0x50
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 809c 	beq.w	80039f8 <_ZN9LineTrace20updateTargetVelocityEv+0x150>
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fd ff0d 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80038ca:	ee10 3a10 	vmov	r3, s0
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fc fe52 	bl	8000578 <__aeabi_f2d>
 80038d4:	a34e      	add	r3, pc, #312	; (adr r3, 8003a10 <_ZN9LineTrace20updateTargetVelocityEv+0x168>)
 80038d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038da:	f7fc fea5 	bl	8000628 <__aeabi_dmul>
 80038de:	4603      	mov	r3, r0
 80038e0:	460c      	mov	r4, r1
 80038e2:	4625      	mov	r5, r4
 80038e4:	461c      	mov	r4, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80038ec:	330c      	adds	r3, #12
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fc fe41 	bl	8000578 <__aeabi_f2d>
 80038f6:	460a      	mov	r2, r1
 80038f8:	4601      	mov	r1, r0
 80038fa:	2301      	movs	r3, #1
 80038fc:	461e      	mov	r6, r3
 80038fe:	4613      	mov	r3, r2
 8003900:	460a      	mov	r2, r1
 8003902:	4620      	mov	r0, r4
 8003904:	4629      	mov	r1, r5
 8003906:	f7fd f915 	bl	8000b34 <__aeabi_dcmpge>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <_ZN9LineTrace20updateTargetVelocityEv+0x6c>
 8003910:	2300      	movs	r3, #0
 8003912:	461e      	mov	r6, r3
 8003914:	b2f3      	uxtb	r3, r6
 8003916:	2b00      	cmp	r3, #0
 8003918:	d026      	beq.n	8003968 <_ZN9LineTrace20updateTargetVelocityEv+0xc0>
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003920:	330c      	adds	r3, #12
 8003922:	ed93 7a00 	vldr	s14, [r3]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800392c:	3352      	adds	r3, #82	; 0x52
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	3332      	adds	r3, #50	; 0x32
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	3304      	adds	r3, #4
 800393a:	edd3 7a00 	vldr	s15, [r3]
 800393e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003948:	330c      	adds	r3, #12
 800394a:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx_++;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003954:	3352      	adds	r3, #82	; 0x52
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	3301      	adds	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003962:	3352      	adds	r3, #82	; 0x52
 8003964:	801a      	strh	r2, [r3, #0]
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 8003966:	e7ab      	b.n	80038c0 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
		}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800396e:	3352      	adds	r3, #82	; 0x52
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	f241 726f 	movw	r2, #5999	; 0x176f
 8003976:	4293      	cmp	r3, r2
 8003978:	d906      	bls.n	8003988 <_ZN9LineTrace20updateTargetVelocityEv+0xe0>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003980:	3352      	adds	r3, #82	; 0x52
 8003982:	f241 726f 	movw	r2, #5999	; 0x176f
 8003986:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800398e:	330c      	adds	r3, #12
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a1b      	ldr	r2, [pc, #108]	; (8003a00 <_ZN9LineTrace20updateTargetVelocityEv+0x158>)
 8003994:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	4618      	mov	r0, r3
 800399c:	f7fd fea2 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80039a0:	eef0 7a40 	vmov.f32	s15, s0
 80039a4:	4b17      	ldr	r3, [pc, #92]	; (8003a04 <_ZN9LineTrace20updateTargetVelocityEv+0x15c>)
 80039a6:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80039b0:	3352      	adds	r3, #82	; 0x52
 80039b2:	881a      	ldrh	r2, [r3, #0]
 80039b4:	4b14      	ldr	r3, [pc, #80]	; (8003a08 <_ZN9LineTrace20updateTargetVelocityEv+0x160>)
 80039b6:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80039be:	3352      	adds	r3, #82	; 0x52
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80039c8:	3304      	adds	r3, #4
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	edd3 7a00 	vldr	s15, [r3]
 80039d2:	eeb0 0a67 	vmov.f32	s0, s15
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 faf7 	bl	8003fca <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80039e2:	3352      	adds	r3, #82	; 0x52
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80039ec:	3304      	adds	r3, #4
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a05      	ldr	r2, [pc, #20]	; (8003a0c <_ZN9LineTrace20updateTargetVelocityEv+0x164>)
 80039f6:	6013      	str	r3, [r2, #0]

	}
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a00:	2000026c 	.word	0x2000026c
 8003a04:	20000270 	.word	0x20000270
 8003a08:	20000274 	.word	0x20000274
 8003a0c:	20000278 	.word	0x20000278
 8003a10:	fa43fe5d 	.word	0xfa43fe5d
 8003a14:	3feeebed 	.word	0x3feeebed

08003a18 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003a24:	2300      	movs	r3, #0
 8003a26:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fd fe4a 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003a32:	eeb0 7a40 	vmov.f32	s14, s0
 8003a36:	edd7 7a00 	vldr	s15, [r7]
 8003a3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a42:	bf94      	ite	ls
 8003a44:	2301      	movls	r3, #1
 8003a46:	2300      	movhi	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[3] + line_sensor_->sensor[4]) / 2;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8003a74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a78:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003a7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a80:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[9] + line_sensor_->sensor[10]) / 2;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8003a94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a98:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003a9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003aa0:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8003aa4:	4a44      	ldr	r2, [pc, #272]	; (8003bb8 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8003aaa:	4a44      	ldr	r2, [pc, #272]	; (8003bbc <_ZN9LineTrace11isCrossLineEv+0x160>)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8003ab0:	4b43      	ldr	r3, [pc, #268]	; (8003bc0 <_ZN9LineTrace11isCrossLineEv+0x164>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	f083 0301 	eor.w	r3, r3, #1
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d04d      	beq.n	8003b5a <_ZN9LineTrace11isCrossLineEv+0xfe>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8003abe:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ac2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8003bc4 <_ZN9LineTrace11isCrossLineEv+0x168>
 8003ac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ace:	d50f      	bpl.n	8003af0 <_ZN9LineTrace11isCrossLineEv+0x94>
 8003ad0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ad4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003bc4 <_ZN9LineTrace11isCrossLineEv+0x168>
 8003ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae0:	d506      	bpl.n	8003af0 <_ZN9LineTrace11isCrossLineEv+0x94>
			cnt++;
 8003ae2:	4b39      	ldr	r3, [pc, #228]	; (8003bc8 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	4b37      	ldr	r3, [pc, #220]	; (8003bc8 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003aec:	801a      	strh	r2, [r3, #0]
 8003aee:	e002      	b.n	8003af6 <_ZN9LineTrace11isCrossLineEv+0x9a>
		}
		else{
			cnt = 0;
 8003af0:	4b35      	ldr	r3, [pc, #212]	; (8003bc8 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 1){
 8003af6:	4b34      	ldr	r3, [pc, #208]	; (8003bc8 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d056      	beq.n	8003bac <_ZN9LineTrace11isCrossLineEv+0x150>
			flag = true;
 8003afe:	4b33      	ldr	r3, [pc, #204]	; (8003bcc <_ZN9LineTrace11isCrossLineEv+0x170>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8003b04:	4b2e      	ldr	r3, [pc, #184]	; (8003bc0 <_ZN9LineTrace11isCrossLineEv+0x164>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8003b0a:	4b2f      	ldr	r3, [pc, #188]	; (8003bc8 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003b16:	3324      	adds	r3, #36	; 0x24
 8003b18:	2201      	movs	r2, #1
 8003b1a:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003b22:	3354      	adds	r3, #84	; 0x54
 8003b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d109      	bne.n	8003b40 <_ZN9LineTrace11isCrossLineEv+0xe4>
				store_check_cnt_ = 0;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003b32:	333a      	adds	r3, #58	; 0x3a
 8003b34:	2200      	movs	r2, #0
 8003b36:	801a      	strh	r2, [r3, #0]
				storeCrossLineDistance();
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7ff fa51 	bl	8002fe0 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8003b3e:	e035      	b.n	8003bac <_ZN9LineTrace11isCrossLineEv+0x150>
			}
			else{
				store_check_cnt_ = 0;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003b46:	333a      	adds	r3, #58	; 0x3a
 8003b48:	2200      	movs	r2, #0
 8003b4a:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7ff fb7f 	bl	8003250 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				storeCrossLineDistance2(); //for correction check
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff fa7a 	bl	800304c <_ZN9LineTrace23storeCrossLineDistance2Ev>
 8003b58:	e028      	b.n	8003bac <_ZN9LineTrace11isCrossLineEv+0x150>
			}
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8003b5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b5e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003bd0 <_ZN9LineTrace11isCrossLineEv+0x174>
 8003b62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6a:	dd0f      	ble.n	8003b8c <_ZN9LineTrace11isCrossLineEv+0x130>
 8003b6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b70:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003bd0 <_ZN9LineTrace11isCrossLineEv+0x174>
 8003b74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b7c:	dd06      	ble.n	8003b8c <_ZN9LineTrace11isCrossLineEv+0x130>
			cnt++;
 8003b7e:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	3301      	adds	r3, #1
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003b88:	801a      	strh	r2, [r3, #0]
 8003b8a:	e002      	b.n	8003b92 <_ZN9LineTrace11isCrossLineEv+0x136>
		}
		else{
			cnt = 0;
 8003b8c:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8003b92:	4b0d      	ldr	r3, [pc, #52]	; (8003bc8 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	2b09      	cmp	r3, #9
 8003b98:	d908      	bls.n	8003bac <_ZN9LineTrace11isCrossLineEv+0x150>
			flag = false;
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <_ZN9LineTrace11isCrossLineEv+0x170>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8003ba0:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <_ZN9LineTrace11isCrossLineEv+0x164>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8003ba6:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	801a      	strh	r2, [r3, #0]
		}

	}

	return flag;
 8003bac:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <_ZN9LineTrace11isCrossLineEv+0x170>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20000264 	.word	0x20000264
 8003bbc:	20000268 	.word	0x20000268
 8003bc0:	20000287 	.word	0x20000287
 8003bc4:	44160000 	.word	0x44160000
 8003bc8:	20000284 	.word	0x20000284
 8003bcc:	20000286 	.word	0x20000286
 8003bd0:	43fa0000 	.word	0x43fa0000

08003bd4 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003bd4:	b590      	push	{r4, r7, lr}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fd fd6e 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003bea:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f001 fc3f 	bl	8005476 <_ZN8Odometry8getThetaEv>
 8003bf8:	ec54 3b10 	vmov	r3, r4, d0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	4621      	mov	r1, r4
 8003c00:	f7fd f80a 	bl	8000c18 <__aeabi_d2f>
 8003c04:	4603      	mov	r3, r0
 8003c06:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003c08:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c14:	d101      	bne.n	8003c1a <_ZN9LineTrace8isStableEv+0x46>
 8003c16:	4b23      	ldr	r3, [pc, #140]	; (8003ca4 <_ZN9LineTrace8isStableEv+0xd0>)
 8003c18:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 8003c1a:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c22:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003c26:	eeb0 0a66 	vmov.f32	s0, s13
 8003c2a:	f7fe ff52 	bl	8002ad2 <_ZSt3absf>
 8003c2e:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 8003c32:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c36:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003ca8 <_ZN9LineTrace8isStableEv+0xd4>
 8003c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c42:	db01      	blt.n	8003c48 <_ZN9LineTrace8isStableEv+0x74>
 8003c44:	4b19      	ldr	r3, [pc, #100]	; (8003cac <_ZN9LineTrace8isStableEv+0xd8>)
 8003c46:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003c4e:	3324      	adds	r3, #36	; 0x24
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d008      	beq.n	8003c68 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003c56:	4b16      	ldr	r3, [pc, #88]	; (8003cb0 <_ZN9LineTrace8isStableEv+0xdc>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003c62:	3324      	adds	r3, #36	; 0x24
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 8003c68:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c6c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003cb4 <_ZN9LineTrace8isStableEv+0xe0>
 8003c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c78:	db06      	blt.n	8003c88 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003c7a:	4b0d      	ldr	r3, [pc, #52]	; (8003cb0 <_ZN9LineTrace8isStableEv+0xdc>)
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <_ZN9LineTrace8isStableEv+0xdc>)
 8003c84:	801a      	strh	r2, [r3, #0]
 8003c86:	e002      	b.n	8003c8e <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003c88:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <_ZN9LineTrace8isStableEv+0xdc>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 5){ //250mm
 8003c8e:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <_ZN9LineTrace8isStableEv+0xdc>)
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d901      	bls.n	8003c9a <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 8003c96:	2301      	movs	r3, #1
 8003c98:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	371c      	adds	r7, #28
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd90      	pop	{r4, r7, pc}
 8003ca4:	3727c5ac 	.word	0x3727c5ac
 8003ca8:	459c4000 	.word	0x459c4000
 8003cac:	459c4000 	.word	0x459c4000
 8003cb0:	20000288 	.word	0x20000288
 8003cb4:	44fa0000 	.word	0x44fa0000

08003cb8 <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b092      	sub	sp, #72	; 0x48
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8003cc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	4963      	ldr	r1, [pc, #396]	; (8003e54 <_ZN9LineTrace4initEv+0x19c>)
 8003cc8:	4863      	ldr	r0, [pc, #396]	; (8003e58 <_ZN9LineTrace4initEv+0x1a0>)
 8003cca:	f7fd fe3d 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8003cce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	4961      	ldr	r1, [pc, #388]	; (8003e5c <_ZN9LineTrace4initEv+0x1a4>)
 8003cd6:	4860      	ldr	r0, [pc, #384]	; (8003e58 <_ZN9LineTrace4initEv+0x1a0>)
 8003cd8:	f7fd fe36 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003cdc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	495f      	ldr	r1, [pc, #380]	; (8003e60 <_ZN9LineTrace4initEv+0x1a8>)
 8003ce4:	485c      	ldr	r0, [pc, #368]	; (8003e58 <_ZN9LineTrace4initEv+0x1a0>)
 8003ce6:	f7fd fe2f 	bl	8001948 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003cea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003cee:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003cf2:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8003cf6:	eeb0 1a66 	vmov.f32	s2, s13
 8003cfa:	eef0 0a47 	vmov.f32	s1, s14
 8003cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f8c6 	bl	8003e94 <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 8003d08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	4955      	ldr	r1, [pc, #340]	; (8003e64 <_ZN9LineTrace4initEv+0x1ac>)
 8003d10:	4851      	ldr	r0, [pc, #324]	; (8003e58 <_ZN9LineTrace4initEv+0x1a0>)
 8003d12:	f7fd fe19 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 8003d16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	4952      	ldr	r1, [pc, #328]	; (8003e68 <_ZN9LineTrace4initEv+0x1b0>)
 8003d1e:	484e      	ldr	r0, [pc, #312]	; (8003e58 <_ZN9LineTrace4initEv+0x1a0>)
 8003d20:	f7fd fe12 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 8003d24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003d28:	2201      	movs	r2, #1
 8003d2a:	4950      	ldr	r1, [pc, #320]	; (8003e6c <_ZN9LineTrace4initEv+0x1b4>)
 8003d2c:	484a      	ldr	r0, [pc, #296]	; (8003e58 <_ZN9LineTrace4initEv+0x1a0>)
 8003d2e:	f7fd fe0b 	bl	8001948 <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 8003d32:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003d36:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003d3a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8003d3e:	eeb0 1a66 	vmov.f32	s2, s13
 8003d42:	eef0 0a47 	vmov.f32	s1, s14
 8003d46:	eeb0 0a67 	vmov.f32	s0, s15
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f8e8 	bl	8003f20 <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003d50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d54:	2201      	movs	r2, #1
 8003d56:	4946      	ldr	r1, [pc, #280]	; (8003e70 <_ZN9LineTrace4initEv+0x1b8>)
 8003d58:	483f      	ldr	r0, [pc, #252]	; (8003e58 <_ZN9LineTrace4initEv+0x1a0>)
 8003d5a:	f7fd fdf5 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003d5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d62:	2201      	movs	r2, #1
 8003d64:	4943      	ldr	r1, [pc, #268]	; (8003e74 <_ZN9LineTrace4initEv+0x1bc>)
 8003d66:	483c      	ldr	r0, [pc, #240]	; (8003e58 <_ZN9LineTrace4initEv+0x1a0>)
 8003d68:	f7fd fdee 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d70:	2201      	movs	r2, #1
 8003d72:	4941      	ldr	r1, [pc, #260]	; (8003e78 <_ZN9LineTrace4initEv+0x1c0>)
 8003d74:	4838      	ldr	r0, [pc, #224]	; (8003e58 <_ZN9LineTrace4initEv+0x1a0>)
 8003d76:	f7fd fde7 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003d7a:	f107 0320 	add.w	r3, r7, #32
 8003d7e:	2201      	movs	r2, #1
 8003d80:	493e      	ldr	r1, [pc, #248]	; (8003e7c <_ZN9LineTrace4initEv+0x1c4>)
 8003d82:	4835      	ldr	r0, [pc, #212]	; (8003e58 <_ZN9LineTrace4initEv+0x1a0>)
 8003d84:	f7fd fde0 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003d88:	f107 031c 	add.w	r3, r7, #28
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	493c      	ldr	r1, [pc, #240]	; (8003e80 <_ZN9LineTrace4initEv+0x1c8>)
 8003d90:	4831      	ldr	r0, [pc, #196]	; (8003e58 <_ZN9LineTrace4initEv+0x1a0>)
 8003d92:	f7fd fdd9 	bl	8001948 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003d96:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f913 	bl	8003fca <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003da4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003da8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f91c 	bl	8003fea <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003db2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003db6:	eeb0 0a67 	vmov.f32	s0, s15
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f925 	bl	800400a <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003dc0:	edd7 7a08 	vldr	s15, [r7, #32]
 8003dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f92e 	bl	800402a <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003dce:	edd7 7a07 	vldr	s15, [r7, #28]
 8003dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f937 	bl	800404a <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003ddc:	f107 0318 	add.w	r3, r7, #24
 8003de0:	2201      	movs	r2, #1
 8003de2:	4928      	ldr	r1, [pc, #160]	; (8003e84 <_ZN9LineTrace4initEv+0x1cc>)
 8003de4:	481c      	ldr	r0, [pc, #112]	; (8003e58 <_ZN9LineTrace4initEv+0x1a0>)
 8003de6:	f7fd fdaf 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003dea:	f107 0314 	add.w	r3, r7, #20
 8003dee:	2201      	movs	r2, #1
 8003df0:	4925      	ldr	r1, [pc, #148]	; (8003e88 <_ZN9LineTrace4initEv+0x1d0>)
 8003df2:	4819      	ldr	r0, [pc, #100]	; (8003e58 <_ZN9LineTrace4initEv+0x1a0>)
 8003df4:	f7fd fda8 	bl	8001948 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003df8:	edd7 7a06 	vldr	s15, [r7, #24]
 8003dfc:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e00:	eef0 0a47 	vmov.f32	s1, s14
 8003e04:	eeb0 0a67 	vmov.f32	s0, s15
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f97e 	bl	800410a <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003e0e:	f04f 0300 	mov.w	r3, #0
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003e1a:	f107 0310 	add.w	r3, r7, #16
 8003e1e:	2201      	movs	r2, #1
 8003e20:	491a      	ldr	r1, [pc, #104]	; (8003e8c <_ZN9LineTrace4initEv+0x1d4>)
 8003e22:	480d      	ldr	r0, [pc, #52]	; (8003e58 <_ZN9LineTrace4initEv+0x1a0>)
 8003e24:	f7fd fd90 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003e28:	f107 030c 	add.w	r3, r7, #12
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	4918      	ldr	r1, [pc, #96]	; (8003e90 <_ZN9LineTrace4initEv+0x1d8>)
 8003e30:	4809      	ldr	r0, [pc, #36]	; (8003e58 <_ZN9LineTrace4initEv+0x1a0>)
 8003e32:	f7fd fd89 	bl	8001948 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003e36:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e3e:	eef0 0a47 	vmov.f32	s1, s14
 8003e42:	eeb0 0a67 	vmov.f32	s0, s15
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f979 	bl	800413e <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003e4c:	bf00      	nop
 8003e4e:	3748      	adds	r7, #72	; 0x48
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	0801a028 	.word	0x0801a028
 8003e58:	0801a030 	.word	0x0801a030
 8003e5c:	0801a038 	.word	0x0801a038
 8003e60:	0801a040 	.word	0x0801a040
 8003e64:	0801a048 	.word	0x0801a048
 8003e68:	0801a054 	.word	0x0801a054
 8003e6c:	0801a060 	.word	0x0801a060
 8003e70:	0801a06c 	.word	0x0801a06c
 8003e74:	0801a078 	.word	0x0801a078
 8003e78:	0801a084 	.word	0x0801a084
 8003e7c:	0801a090 	.word	0x0801a090
 8003e80:	0801a09c 	.word	0x0801a09c
 8003e84:	0801a0a8 	.word	0x0801a0a8
 8003e88:	0801a0b0 	.word	0x0801a0b0
 8003e8c:	0801a0b8 	.word	0x0801a0b8
 8003e90:	0801a0c4 	.word	0x0801a0c4

08003e94 <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ea0:	edc7 0a01 	vstr	s1, [r7, #4]
 8003ea4:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003eba:	bf00      	nop
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
	return kp_;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	ee07 3a90 	vmov	s15, r3
}
 8003ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
	return ki_;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	ee07 3a90 	vmov	s15, r3
}
 8003ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
	return kd_;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	ee07 3a90 	vmov	s15, r3
}
 8003f12:	eeb0 0a67 	vmov.f32	s0, s15
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f2c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003f30:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003f46:	bf00      	nop
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5e:	ee07 3a90 	vmov	s15, r3
}
 8003f62:	eeb0 0a67 	vmov.f32	s0, s15
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7c:	ee07 3a90 	vmov	s15, r3
}
 8003f80:	eeb0 0a67 	vmov.f32	s0, s15
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9a:	ee07 3a90 	vmov	s15, r3
}
 8003f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004078:	ee07 3a90 	vmov	s15, r3
}
 800407c:	eeb0 0a67 	vmov.f32	s0, s15
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004098:	ee07 3a90 	vmov	s15, r3
}
 800409c:	eeb0 0a67 	vmov.f32	s0, s15
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80040b8:	ee07 3a90 	vmov	s15, r3
}
 80040bc:	eeb0 0a67 	vmov.f32	s0, s15
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80040d8:	ee07 3a90 	vmov	s15, r3
}
 80040dc:	eeb0 0a67 	vmov.f32	s0, s15
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80040f8:	ee07 3a90 	vmov	s15, r3
}
 80040fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 800410a:	b480      	push	{r7}
 800410c:	b085      	sub	sp, #20
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	ed87 0a02 	vstr	s0, [r7, #8]
 8004116:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004120:	3328      	adds	r3, #40	; 0x28
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800412c:	332c      	adds	r3, #44	; 0x2c
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	601a      	str	r2, [r3, #0]
}
 8004132:	bf00      	nop
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 800413e:	b480      	push	{r7}
 8004140:	b085      	sub	sp, #20
 8004142:	af00      	add	r7, sp, #0
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	ed87 0a02 	vstr	s0, [r7, #8]
 800414a:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004154:	3330      	adds	r3, #48	; 0x30
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004160:	3334      	adds	r3, #52	; 0x34
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	601a      	str	r2, [r3, #0]
}
 8004166:	bf00      	nop
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
	return max_acc_;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004180:	3328      	adds	r3, #40	; 0x28
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	ee07 3a90 	vmov	s15, r3
}
 8004188:	eeb0 0a67 	vmov.f32	s0, s15
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041a4:	3334      	adds	r3, #52	; 0x34
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	ee07 3a90 	vmov	s15, r3
}
 80041ac:	eeb0 0a67 	vmov.f32	s0, s15
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041c8:	3330      	adds	r3, #48	; 0x30
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	ee07 3a90 	vmov	s15, r3
}
 80041d0:	eeb0 0a67 	vmov.f32	s0, s15
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
	return max_dec_;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041ec:	332c      	adds	r3, #44	; 0x2c
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	ee07 3a90 	vmov	s15, r3
}
 80041f4:	eeb0 0a67 	vmov.f32	s0, s15
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 8120 	beq.w	8004458 <_ZN9LineTrace4flipEv+0x254>
		// ---- line following processing -----//
		pidTrace();
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7fe fdd5 	bl	8002dc8 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff fb42 	bl	80038a8 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- Processing at regular distances -----//

		if(isTargetDistance(50) == true){
 8004224:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8004460 <_ZN9LineTrace4flipEv+0x25c>
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff fbf5 	bl	8003a18 <_ZN9LineTrace16isTargetDistanceEf>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d028      	beq.n	8004286 <_ZN9LineTrace4flipEv+0x82>
			// ---- Store Logs ------//
			storeLogs();
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7fe ffaf 	bl	8003198 <_ZN9LineTrace9storeLogsEv>
			//logger_->storeLog(imu_->getOmega());
			//logger_->storeLog2(target_omega_);

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff fcca 	bl	8003bd4 <_ZN9LineTrace8isStableEv>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00c      	beq.n	8004260 <_ZN9LineTrace4flipEv+0x5c>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	4618      	mov	r0, r3
 800424c:	f001 fbde 	bl	8005a0c <_ZN10SideSensor10getStatusLEv>
 8004250:	4603      	mov	r3, r0
 8004252:	f083 0301 	eor.w	r3, r3, #1
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <_ZN9LineTrace4flipEv+0x5c>
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <_ZN9LineTrace4flipEv+0x5e>
 8004260:	2300      	movs	r3, #0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <_ZN9LineTrace4flipEv+0x6e>
				stable_flag_ = true;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800426c:	3323      	adds	r3, #35	; 0x23
 800426e:	2201      	movs	r2, #1
 8004270:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	4618      	mov	r0, r3
 8004278:	f7fd fa52 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	4618      	mov	r0, r3
 8004282:	f001 f909 	bl	8005498 <_ZN8Odometry13clearPotitionEv>
		}


		// ------- Store side line distance or correction distance------//

		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800428c:	3323      	adds	r3, #35	; 0x23
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d009      	beq.n	80042a8 <_ZN9LineTrace4flipEv+0xa4>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	4618      	mov	r0, r3
 800429a:	f001 fbb7 	bl	8005a0c <_ZN10SideSensor10getStatusLEv>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <_ZN9LineTrace4flipEv+0xa4>
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <_ZN9LineTrace4flipEv+0xa6>
 80042a8:	2300      	movs	r3, #0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d029      	beq.n	8004302 <_ZN9LineTrace4flipEv+0xfe>
			//correction_check_cnt_ = 0;

			if(mode_selector_ == FIRST_RUNNING){
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80042b4:	3354      	adds	r3, #84	; 0x54
 80042b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d109      	bne.n	80042d2 <_ZN9LineTrace4flipEv+0xce>
				store_check_cnt_ = 0;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042c4:	333a      	adds	r3, #58	; 0x3a
 80042c6:	2200      	movs	r2, #0
 80042c8:	801a      	strh	r2, [r3, #0]
				storeSideLineDistance();
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fe fef4 	bl	80030b8 <_ZN9LineTrace21storeSideLineDistanceEv>
 80042d0:	e00b      	b.n	80042ea <_ZN9LineTrace4flipEv+0xe6>
			}
			else{
				store_check_cnt_ = 0;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042d8:	333a      	adds	r3, #58	; 0x3a
 80042da:	2200      	movs	r2, #0
 80042dc:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromSideMarker();
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff f842 	bl	8003368 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				storeSideLineDistance2(); //for correction check
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7fe ff1f 	bl	8003128 <_ZN9LineTrace22storeSideLineDistance2Ev>
			}

			stable_flag_ = false;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042f0:	3323      	adds	r3, #35	; 0x23
 80042f2:	2200      	movs	r2, #0
 80042f4:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042fc:	3324      	adds	r3, #36	; 0x24
 80042fe:	2201      	movs	r2, #1
 8004300:	701a      	strb	r2, [r3, #0]
		}


		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff fbaa 	bl	8003a5c <_ZN9LineTrace11isCrossLineEv>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d009      	beq.n	8004322 <_ZN9LineTrace4flipEv+0x11e>
			side_sensor_->enableIgnore();
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	4618      	mov	r0, r3
 8004314:	f001 fba2 	bl	8005a5c <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	4618      	mov	r0, r3
 800431e:	f7fd fa2a 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
			// Note: Store cross line distance here.
			//led_.LR(1, -1);
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 70){
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	4618      	mov	r0, r3
 8004328:	f001 fbb2 	bl	8005a90 <_ZN10SideSensor13getIgnoreFlagEv>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00f      	beq.n	8004352 <_ZN9LineTrace4flipEv+0x14e>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	4618      	mov	r0, r3
 8004338:	f7fd fa0e 	bl	8001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 800433c:	eeb0 7a40 	vmov.f32	s14, s0
 8004340:	eddf 7a48 	vldr	s15, [pc, #288]	; 8004464 <_ZN9LineTrace4flipEv+0x260>
 8004344:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800434c:	db01      	blt.n	8004352 <_ZN9LineTrace4flipEv+0x14e>
 800434e:	2301      	movs	r3, #1
 8004350:	e000      	b.n	8004354 <_ZN9LineTrace4flipEv+0x150>
 8004352:	2300      	movs	r3, #0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d004      	beq.n	8004362 <_ZN9LineTrace4flipEv+0x15e>
			side_sensor_->disableIgnore();
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	4618      	mov	r0, r3
 800435e:	f001 fb8a 	bl	8005a76 <_ZN10SideSensor13disableIgnoreEv>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	4618      	mov	r0, r3
 8004368:	f7fe fb50 	bl	8002a0c <_ZN10LineSensor13emergencyStopEv>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00d      	beq.n	800438e <_ZN9LineTrace4flipEv+0x18a>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8004468 <_ZN9LineTrace4flipEv+0x264>
 800437a:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8004468 <_ZN9LineTrace4flipEv+0x264>
 800437e:	4618      	mov	r0, r3
 8004380:	f001 fef6 	bl	8006170 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	4618      	mov	r0, r3
 800438a:	f7fc fffb 	bl	8001384 <_ZN3ESC3offEv>
		else{
			//led_.LR(0, -1);
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004394:	3338      	adds	r3, #56	; 0x38
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	3301      	adds	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043a2:	3338      	adds	r3, #56	; 0x38
 80043a4:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043ac:	3338      	adds	r3, #56	; 0x38
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	f242 720f 	movw	r2, #9999	; 0x270f
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d906      	bls.n	80043c6 <_ZN9LineTrace4flipEv+0x1c2>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043be:	3338      	adds	r3, #56	; 0x38
 80043c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80043c4:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 300) led_.fullColor('R');
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043cc:	3338      	adds	r3, #56	; 0x38
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80043d4:	d806      	bhi.n	80043e4 <_ZN9LineTrace4flipEv+0x1e0>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	330c      	adds	r3, #12
 80043da:	2152      	movs	r1, #82	; 0x52
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fd ff39 	bl	8002254 <_ZN3LED9fullColorEc>
 80043e2:	e005      	b.n	80043f0 <_ZN9LineTrace4flipEv+0x1ec>
		else led_.fullColor('B');
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	330c      	adds	r3, #12
 80043e8:	2142      	movs	r1, #66	; 0x42
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fd ff32 	bl	8002254 <_ZN3LED9fullColorEc>

		store_check_cnt_++;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043f6:	333a      	adds	r3, #58	; 0x3a
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	3301      	adds	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004404:	333a      	adds	r3, #58	; 0x3a
 8004406:	801a      	strh	r2, [r3, #0]
		if(store_check_cnt_>= 10000) store_check_cnt_ = 10000;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800440e:	333a      	adds	r3, #58	; 0x3a
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	f242 720f 	movw	r2, #9999	; 0x270f
 8004416:	4293      	cmp	r3, r2
 8004418:	d906      	bls.n	8004428 <_ZN9LineTrace4flipEv+0x224>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004420:	333a      	adds	r3, #58	; 0x3a
 8004422:	f242 7210 	movw	r2, #10000	; 0x2710
 8004426:	801a      	strh	r2, [r3, #0]

		if(store_check_cnt_ <= 200) led_.LR(1, -1);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800442e:	333a      	adds	r3, #58	; 0x3a
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	2bc8      	cmp	r3, #200	; 0xc8
 8004434:	d808      	bhi.n	8004448 <_ZN9LineTrace4flipEv+0x244>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	330c      	adds	r3, #12
 800443a:	f04f 32ff 	mov.w	r2, #4294967295
 800443e:	2101      	movs	r1, #1
 8004440:	4618      	mov	r0, r3
 8004442:	f7fd ffc3 	bl	80023cc <_ZN3LED2LREaa>
		else led_.LR(0, -1);
	}
}
 8004446:	e007      	b.n	8004458 <_ZN9LineTrace4flipEv+0x254>
		else led_.LR(0, -1);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	330c      	adds	r3, #12
 800444c:	f04f 32ff 	mov.w	r2, #4294967295
 8004450:	2100      	movs	r1, #0
 8004452:	4618      	mov	r0, r3
 8004454:	f7fd ffba 	bl	80023cc <_ZN3LED2LREaa>
}
 8004458:	bf00      	nop
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	42480000 	.word	0x42480000
 8004464:	428c0000 	.word	0x428c0000
 8004468:	00000000 	.word	0x00000000

0800446c <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800447e:	3354      	adds	r3, #84	; 0x54
 8004480:	887a      	ldrh	r2, [r7, #2]
 8004482:	801a      	strh	r2, [r3, #0]
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f001 feb8 	bl	8006222 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f001 fac0 	bl	8005a3c <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80044c2:	3318      	adds	r3, #24
 80044c4:	2200      	movs	r2, #0
 80044c6:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80044ce:	331c      	adds	r3, #28
 80044d0:	2200      	movs	r2, #0
 80044d2:	801a      	strh	r2, [r3, #0]
	sideline_idx2_ = 0;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80044da:	331e      	adds	r3, #30
 80044dc:	2200      	movs	r2, #0
 80044de:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80044e6:	3320      	adds	r3, #32
 80044e8:	2200      	movs	r2, #0
 80044ea:	801a      	strh	r2, [r3, #0]
}
 80044ec:	bf00      	nop
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 80044fc:	2300      	movs	r3, #0
 80044fe:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8004500:	2300      	movs	r3, #0
 8004502:	737b      	strb	r3, [r7, #13]
	start();
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7ff ffc3 	bl	8004490 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 800450a:	7b7b      	ldrb	r3, [r7, #13]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d161      	bne.n	80045d4 <_ZN9LineTrace7runningEv+0xe0>
		switch(stage){
 8004510:	89fb      	ldrh	r3, [r7, #14]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <_ZN9LineTrace7runningEv+0x28>
 8004516:	2b0a      	cmp	r3, #10
 8004518:	d030      	beq.n	800457c <_ZN9LineTrace7runningEv+0x88>
 800451a:	e05a      	b.n	80045d2 <_ZN9LineTrace7runningEv+0xde>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	4618      	mov	r0, r3
 8004522:	f001 fa7f 	bl	8005a24 <_ZN10SideSensor16getWhiteLineCntREv>
 8004526:	4603      	mov	r3, r0
 8004528:	2b01      	cmp	r3, #1
 800452a:	bf0c      	ite	eq
 800452c:	2301      	moveq	r3, #1
 800452e:	2300      	movne	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d04a      	beq.n	80045cc <_ZN9LineTrace7runningEv+0xd8>
				loggerStart();
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7fe fd26 	bl	8002f88 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004542:	3354      	adds	r3, #84	; 0x54
 8004544:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7ff f97b 	bl	8003848 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	4618      	mov	r0, r3
 8004558:	f7fd f90d 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	4618      	mov	r0, r3
 8004562:	f7fd f8eb 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	330c      	adds	r3, #12
 800456a:	f04f 32ff 	mov.w	r2, #4294967295
 800456e:	2100      	movs	r1, #0
 8004570:	4618      	mov	r0, r3
 8004572:	f7fd ff2b 	bl	80023cc <_ZN3LED2LREaa>
				stage = 10;
 8004576:	230a      	movs	r3, #10
 8004578:	81fb      	strh	r3, [r7, #14]
			}

			break;
 800457a:	e027      	b.n	80045cc <_ZN9LineTrace7runningEv+0xd8>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	4618      	mov	r0, r3
 8004582:	f001 fa4f 	bl	8005a24 <_ZN10SideSensor16getWhiteLineCntREv>
 8004586:	4603      	mov	r3, r0
 8004588:	2b02      	cmp	r3, #2
 800458a:	bf0c      	ite	eq
 800458c:	2301      	moveq	r3, #1
 800458e:	2300      	movne	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d01c      	beq.n	80045d0 <_ZN9LineTrace7runningEv+0xdc>
				led_.fullColor('M');
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	330c      	adds	r3, #12
 800459a:	214d      	movs	r1, #77	; 0x4d
 800459c:	4618      	mov	r0, r3
 800459e:	f7fd fe59 	bl	8002254 <_ZN3LED9fullColorEc>
				loggerStop();
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fe fd0b 	bl	8002fbe <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7ff f960 	bl	800386e <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 80045ae:	2064      	movs	r0, #100	; 0x64
 80045b0:	f005 fd9a 	bl	800a0e8 <HAL_Delay>

				setTargetVelocity(0);
 80045b4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80045e4 <_ZN9LineTrace7runningEv+0xf0>
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff fd06 	bl	8003fca <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 80045be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80045c2:	f005 fd91 	bl	800a0e8 <HAL_Delay>

				goal_flag = true;
 80045c6:	2301      	movs	r3, #1
 80045c8:	737b      	strb	r3, [r7, #13]

			}

			break;
 80045ca:	e001      	b.n	80045d0 <_ZN9LineTrace7runningEv+0xdc>
			break;
 80045cc:	bf00      	nop
 80045ce:	e79c      	b.n	800450a <_ZN9LineTrace7runningEv+0x16>
			break;
 80045d0:	bf00      	nop
	while(goal_flag == false){
 80045d2:	e79a      	b.n	800450a <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f807 	bl	80045e8 <_ZN9LineTrace4stopEv>
}
 80045da:	bf00      	nop
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	00000000 	.word	0x00000000

080045e8 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f001 fe23 	bl	8006248 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	330c      	adds	r3, #12
 8004606:	2201      	movs	r2, #1
 8004608:	f04f 31ff 	mov.w	r1, #4294967295
 800460c:	4618      	mov	r0, r3
 800460e:	f7fd fedd 	bl	80023cc <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004618:	3354      	adds	r3, #84	; 0x54
 800461a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d11e      	bne.n	8004660 <_ZN9LineTrace4stopEv+0x78>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69d8      	ldr	r0, [r3, #28]
 8004626:	4b28      	ldr	r3, [pc, #160]	; (80046c8 <_ZN9LineTrace4stopEv+0xe0>)
 8004628:	4a28      	ldr	r2, [pc, #160]	; (80046cc <_ZN9LineTrace4stopEv+0xe4>)
 800462a:	4929      	ldr	r1, [pc, #164]	; (80046d0 <_ZN9LineTrace4stopEv+0xe8>)
 800462c:	f000 fbe8 	bl	8004e00 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004636:	3358      	adds	r3, #88	; 0x58
 8004638:	2200      	movs	r2, #0
 800463a:	9200      	str	r2, [sp, #0]
 800463c:	2264      	movs	r2, #100	; 0x64
 800463e:	4925      	ldr	r1, [pc, #148]	; (80046d4 <_ZN9LineTrace4stopEv+0xec>)
 8004640:	4823      	ldr	r0, [pc, #140]	; (80046d0 <_ZN9LineTrace4stopEv+0xe8>)
 8004642:	f7fd f91b 	bl	800187c <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 800464c:	3378      	adds	r3, #120	; 0x78
 800464e:	2200      	movs	r2, #0
 8004650:	9200      	str	r2, [sp, #0]
 8004652:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004656:	4920      	ldr	r1, [pc, #128]	; (80046d8 <_ZN9LineTrace4stopEv+0xf0>)
 8004658:	481d      	ldr	r0, [pc, #116]	; (80046d0 <_ZN9LineTrace4stopEv+0xe8>)
 800465a:	f7fd f90f 	bl	800187c <sd_write_array_float>
 800465e:	e01d      	b.n	800469c <_ZN9LineTrace4stopEv+0xb4>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69d8      	ldr	r0, [r3, #28]
 8004664:	4b1d      	ldr	r3, [pc, #116]	; (80046dc <_ZN9LineTrace4stopEv+0xf4>)
 8004666:	4a1e      	ldr	r2, [pc, #120]	; (80046e0 <_ZN9LineTrace4stopEv+0xf8>)
 8004668:	4919      	ldr	r1, [pc, #100]	; (80046d0 <_ZN9LineTrace4stopEv+0xe8>)
 800466a:	f000 fbec 	bl	8004e46 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDI2.TXT", CROSSLINE_SIZE, crossline_distance2_, OVER_WRITE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8004674:	33e8      	adds	r3, #232	; 0xe8
 8004676:	2200      	movs	r2, #0
 8004678:	9200      	str	r2, [sp, #0]
 800467a:	2264      	movs	r2, #100	; 0x64
 800467c:	4919      	ldr	r1, [pc, #100]	; (80046e4 <_ZN9LineTrace4stopEv+0xfc>)
 800467e:	4814      	ldr	r0, [pc, #80]	; (80046d0 <_ZN9LineTrace4stopEv+0xe8>)
 8004680:	f7fd f8fc 	bl	800187c <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS2.TXT", SIDELINE_SIZE, sideline_distance2_, OVER_WRITE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f503 4347 	add.w	r3, r3, #50944	; 0xc700
 800468a:	3348      	adds	r3, #72	; 0x48
 800468c:	2200      	movs	r2, #0
 800468e:	9200      	str	r2, [sp, #0]
 8004690:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004694:	4914      	ldr	r1, [pc, #80]	; (80046e8 <_ZN9LineTrace4stopEv+0x100>)
 8004696:	480e      	ldr	r0, [pc, #56]	; (80046d0 <_ZN9LineTrace4stopEv+0xe8>)
 8004698:	f7fd f8f0 	bl	800187c <sd_write_array_float>
	}
	//sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);

	led_.LR(-1, 0);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	330c      	adds	r3, #12
 80046a0:	2200      	movs	r2, #0
 80046a2:	f04f 31ff 	mov.w	r1, #4294967295
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fd fe90 	bl	80023cc <_ZN3LED2LREaa>

	logger_->resetIdx();
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fc58 	bl	8004f66 <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 fc07 	bl	8004ece <_ZN6Logger10resetLogs2Ev>
}
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	0801a0d0 	.word	0x0801a0d0
 80046cc:	0801a0dc 	.word	0x0801a0dc
 80046d0:	0801a0ec 	.word	0x0801a0ec
 80046d4:	0801a0f8 	.word	0x0801a0f8
 80046d8:	0801a108 	.word	0x0801a108
 80046dc:	0801a114 	.word	0x0801a114
 80046e0:	0801a120 	.word	0x0801a120
 80046e4:	0801a130 	.word	0x0801a130
 80046e8:	0801a140 	.word	0x0801a140

080046ec <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 80046ec:	b590      	push	{r4, r7, lr}
 80046ee:	b08b      	sub	sp, #44	; 0x2c
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 fb25 	bl	8004d48 <_ZN6Logger23getDistanceArrayPointerEv>
 80046fe:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fb2d 	bl	8004d64 <_ZN6Logger20getThetaArrayPointerEv>
 800470a:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800470c:	2300      	movs	r3, #0
 800470e:	837b      	strh	r3, [r7, #26]
 8004710:	8b7b      	ldrh	r3, [r7, #26]
 8004712:	f241 726f 	movw	r2, #5999	; 0x176f
 8004716:	4293      	cmp	r3, r2
 8004718:	d84b      	bhi.n	80047b2 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 800471a:	8b7b      	ldrh	r3, [r7, #26]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4413      	add	r3, r2
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8004726:	8b7b      	ldrh	r3, [r7, #26]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	4413      	add	r3, r2
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004732:	edd7 7a07 	vldr	s15, [r7, #28]
 8004736:	eef5 7a40 	vcmp.f32	s15, #0.0
 800473a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800473e:	d101      	bne.n	8004744 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8004740:	4b4c      	ldr	r3, [pc, #304]	; (8004874 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 8004742:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8004744:	ed97 7a02 	vldr	s14, [r7, #8]
 8004748:	edd7 7a07 	vldr	s15, [r7, #28]
 800474c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004750:	eeb0 0a66 	vmov.f32	s0, s13
 8004754:	f7fe f9bd 	bl	8002ad2 <_ZSt3absf>
 8004758:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 800475c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004760:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004878 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 8004764:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800476c:	db01      	blt.n	8004772 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 800476e:	4b43      	ldr	r3, [pc, #268]	; (800487c <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 8004770:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8004772:	8b7c      	ldrh	r4, [r7, #26]
 8004774:	ed97 0a05 	vldr	s0, [r7, #20]
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7fe fe7f 	bl	800347c <_ZN9LineTrace15radius2VelocityEf>
 800477e:	eef0 7a40 	vmov.f32	s15, s0
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004788:	3304      	adds	r3, #4
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004792:	8b7b      	ldrh	r3, [r7, #26]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	441a      	add	r2, r3
 800479a:	8b7b      	ldrh	r3, [r7, #26]
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	6879      	ldr	r1, [r7, #4]
 80047a0:	3332      	adds	r3, #50	; 0x32
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	3304      	adds	r3, #4
 80047a8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80047aa:	8b7b      	ldrh	r3, [r7, #26]
 80047ac:	3301      	adds	r3, #1
 80047ae:	837b      	strh	r3, [r7, #26]
 80047b0:	e7ae      	b.n	8004710 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80047b8:	3354      	adds	r3, #84	; 0x54
 80047ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d120      	bne.n	8004804 <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80047ce:	3310      	adds	r3, #16
 80047d0:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047d8:	332c      	adds	r3, #44	; 0x2c
 80047da:	edd3 7a00 	vldr	s15, [r3]
 80047de:	6939      	ldr	r1, [r7, #16]
 80047e0:	eeb0 0a67 	vmov.f32	s0, s15
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7fe fee7 	bl	80035b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047f0:	3328      	adds	r3, #40	; 0x28
 80047f2:	edd3 7a00 	vldr	s15, [r3]
 80047f6:	6939      	ldr	r1, [r7, #16]
 80047f8:	eeb0 0a67 	vmov.f32	s0, s15
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7fe ff7f 	bl	8003700 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004802:	e027      	b.n	8004854 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800480a:	3354      	adds	r3, #84	; 0x54
 800480c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004810:	2b02      	cmp	r3, #2
 8004812:	d11f      	bne.n	8004854 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004820:	3310      	adds	r3, #16
 8004822:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800482a:	3334      	adds	r3, #52	; 0x34
 800482c:	edd3 7a00 	vldr	s15, [r3]
 8004830:	6939      	ldr	r1, [r7, #16]
 8004832:	eeb0 0a67 	vmov.f32	s0, s15
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fe febe 	bl	80035b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004842:	3330      	adds	r3, #48	; 0x30
 8004844:	edd3 7a00 	vldr	s15, [r3]
 8004848:	6939      	ldr	r1, [r7, #16]
 800484a:	eeb0 0a67 	vmov.f32	s0, s15
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fe ff56 	bl	8003700 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800485a:	3310      	adds	r3, #16
 800485c:	2200      	movs	r2, #0
 800485e:	9200      	str	r2, [sp, #0]
 8004860:	f241 7270 	movw	r2, #6000	; 0x1770
 8004864:	4906      	ldr	r1, [pc, #24]	; (8004880 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 8004866:	4807      	ldr	r0, [pc, #28]	; (8004884 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 8004868:	f7fd f808 	bl	800187c <sd_write_array_float>

}
 800486c:	bf00      	nop
 800486e:	3724      	adds	r7, #36	; 0x24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd90      	pop	{r4, r7, pc}
 8004874:	3727c5ac 	.word	0x3727c5ac
 8004878:	459c4000 	.word	0x459c4000
 800487c:	459c4000 	.word	0x459c4000
 8004880:	0801a150 	.word	0x0801a150
 8004884:	0801a0ec 	.word	0x0801a0ec

08004888 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 8004888:	b590      	push	{r4, r7, lr}
 800488a:	b08b      	sub	sp, #44	; 0x2c
 800488c:	af02      	add	r7, sp, #8
 800488e:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	69d8      	ldr	r0, [r3, #28]
 8004894:	4b6b      	ldr	r3, [pc, #428]	; (8004a44 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 8004896:	4a6c      	ldr	r2, [pc, #432]	; (8004a48 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 8004898:	496c      	ldr	r1, [pc, #432]	; (8004a4c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800489a:	f000 faf9 	bl	8004e90 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80048a4:	3358      	adds	r3, #88	; 0x58
 80048a6:	2264      	movs	r2, #100	; 0x64
 80048a8:	4969      	ldr	r1, [pc, #420]	; (8004a50 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 80048aa:	4868      	ldr	r0, [pc, #416]	; (8004a4c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80048ac:	f7fd f84c 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 80048b6:	3378      	adds	r3, #120	; 0x78
 80048b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80048bc:	4965      	ldr	r1, [pc, #404]	; (8004a54 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 80048be:	4863      	ldr	r0, [pc, #396]	; (8004a4c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80048c0:	f7fd f842 	bl	8001948 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 fa3d 	bl	8004d48 <_ZN6Logger23getDistanceArrayPointerEv>
 80048ce:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 fa45 	bl	8004d64 <_ZN6Logger20getThetaArrayPointerEv>
 80048da:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80048dc:	2300      	movs	r3, #0
 80048de:	837b      	strh	r3, [r7, #26]
 80048e0:	8b7b      	ldrh	r3, [r7, #26]
 80048e2:	f241 726f 	movw	r2, #5999	; 0x176f
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d84b      	bhi.n	8004982 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 80048ea:	8b7b      	ldrh	r3, [r7, #26]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	4413      	add	r3, r2
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 80048f6:	8b7b      	ldrh	r3, [r7, #26]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	4413      	add	r3, r2
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004902:	edd7 7a07 	vldr	s15, [r7, #28]
 8004906:	eef5 7a40 	vcmp.f32	s15, #0.0
 800490a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800490e:	d101      	bne.n	8004914 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8004910:	4b51      	ldr	r3, [pc, #324]	; (8004a58 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 8004912:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 8004914:	ed97 7a02 	vldr	s14, [r7, #8]
 8004918:	edd7 7a07 	vldr	s15, [r7, #28]
 800491c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004920:	eeb0 0a66 	vmov.f32	s0, s13
 8004924:	f7fe f8d5 	bl	8002ad2 <_ZSt3absf>
 8004928:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 800492c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004930:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8004a5c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 8004934:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493c:	db01      	blt.n	8004942 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 800493e:	4b48      	ldr	r3, [pc, #288]	; (8004a60 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 8004940:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 8004942:	8b7c      	ldrh	r4, [r7, #26]
 8004944:	ed97 0a05 	vldr	s0, [r7, #20]
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7fe fd97 	bl	800347c <_ZN9LineTrace15radius2VelocityEf>
 800494e:	eef0 7a40 	vmov.f32	s15, s0
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004958:	3304      	adds	r3, #4
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004962:	8b7b      	ldrh	r3, [r7, #26]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	441a      	add	r2, r3
 800496a:	8b7b      	ldrh	r3, [r7, #26]
 800496c:	6812      	ldr	r2, [r2, #0]
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	3332      	adds	r3, #50	; 0x32
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	3304      	adds	r3, #4
 8004978:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800497a:	8b7b      	ldrh	r3, [r7, #26]
 800497c:	3301      	adds	r3, #1
 800497e:	837b      	strh	r3, [r7, #26]
 8004980:	e7ae      	b.n	80048e0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004988:	3354      	adds	r3, #84	; 0x54
 800498a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d120      	bne.n	80049d4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800499e:	3310      	adds	r3, #16
 80049a0:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80049a8:	332c      	adds	r3, #44	; 0x2c
 80049aa:	edd3 7a00 	vldr	s15, [r3]
 80049ae:	6939      	ldr	r1, [r7, #16]
 80049b0:	eeb0 0a67 	vmov.f32	s0, s15
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7fe fdff 	bl	80035b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80049c0:	3328      	adds	r3, #40	; 0x28
 80049c2:	edd3 7a00 	vldr	s15, [r3]
 80049c6:	6939      	ldr	r1, [r7, #16]
 80049c8:	eeb0 0a67 	vmov.f32	s0, s15
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7fe fe97 	bl	8003700 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80049d2:	e027      	b.n	8004a24 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80049da:	3354      	adds	r3, #84	; 0x54
 80049dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d11f      	bne.n	8004a24 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80049f0:	3310      	adds	r3, #16
 80049f2:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80049fa:	3334      	adds	r3, #52	; 0x34
 80049fc:	edd3 7a00 	vldr	s15, [r3]
 8004a00:	6939      	ldr	r1, [r7, #16]
 8004a02:	eeb0 0a67 	vmov.f32	s0, s15
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7fe fdd6 	bl	80035b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004a12:	3330      	adds	r3, #48	; 0x30
 8004a14:	edd3 7a00 	vldr	s15, [r3]
 8004a18:	6939      	ldr	r1, [r7, #16]
 8004a1a:	eeb0 0a67 	vmov.f32	s0, s15
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fe fe6e 	bl	8003700 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004a2a:	3310      	adds	r3, #16
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	9200      	str	r2, [sp, #0]
 8004a30:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a34:	490b      	ldr	r1, [pc, #44]	; (8004a64 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 8004a36:	4805      	ldr	r0, [pc, #20]	; (8004a4c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004a38:	f7fc ff20 	bl	800187c <sd_write_array_float>

}
 8004a3c:	bf00      	nop
 8004a3e:	3724      	adds	r7, #36	; 0x24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd90      	pop	{r4, r7, pc}
 8004a44:	0801a0d0 	.word	0x0801a0d0
 8004a48:	0801a0dc 	.word	0x0801a0dc
 8004a4c:	0801a0ec 	.word	0x0801a0ec
 8004a50:	0801a0f8 	.word	0x0801a0f8
 8004a54:	0801a108 	.word	0x0801a108
 8004a58:	3727c5ac 	.word	0x3727c5ac
 8004a5c:	459c4000 	.word	0x459c4000
 8004a60:	459c4000 	.word	0x459c4000
 8004a64:	0801a150 	.word	0x0801a150

08004a68 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a76:	33c0      	adds	r3, #192	; 0xc0
 8004a78:	2200      	movs	r2, #0
 8004a7a:	701a      	strb	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a82:	33c2      	adds	r3, #194	; 0xc2
 8004a84:	2200      	movs	r2, #0
 8004a86:	801a      	strh	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a8e:	33c4      	adds	r3, #196	; 0xc4
 8004a90:	2200      	movs	r2, #0
 8004a92:	801a      	strh	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a9a:	33c6      	adds	r3, #198	; 0xc6
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	801a      	strh	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004aa6:	33c8      	adds	r3, #200	; 0xc8
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	801a      	strh	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004ab2:	33ca      	adds	r3, #202	; 0xca
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	801a      	strh	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4618      	mov	r0, r3
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
	...

08004ac8 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8004ad4:	f7fd f824 	bl	8001b20 <sd_mount>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	bf0c      	ite	eq
 8004ade:	2301      	moveq	r3, #1
 8004ae0:	2300      	movne	r3, #0
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d016      	beq.n	8004b16 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8004ae8:	f7fc fada 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004aec:	2100      	movs	r1, #0
 8004aee:	2000      	movs	r0, #0
 8004af0:	f7fc fae6 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004af4:	4815      	ldr	r0, [pc, #84]	; (8004b4c <_ZN6Logger10sdCardInitEv+0x84>)
 8004af6:	f7fc fb0d 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004afa:	2101      	movs	r1, #1
 8004afc:	2000      	movs	r0, #0
 8004afe:	f7fc fadf 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8004b02:	4813      	ldr	r0, [pc, #76]	; (8004b50 <_ZN6Logger10sdCardInitEv+0x88>)
 8004b04:	f7fc fb06 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8004b08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b0c:	f005 faec 	bl	800a0e8 <HAL_Delay>

	  ret = true;
 8004b10:	2301      	movs	r3, #1
 8004b12:	73fb      	strb	r3, [r7, #15]
 8004b14:	e015      	b.n	8004b42 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 8004b16:	f7fc fac3 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	f7fc facf 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004b22:	480a      	ldr	r0, [pc, #40]	; (8004b4c <_ZN6Logger10sdCardInitEv+0x84>)
 8004b24:	f7fc faf6 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004b28:	2101      	movs	r1, #1
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	f7fc fac8 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8004b30:	4808      	ldr	r0, [pc, #32]	; (8004b54 <_ZN6Logger10sdCardInitEv+0x8c>)
 8004b32:	f7fc faef 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8004b36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b3a:	f005 fad5 	bl	800a0e8 <HAL_Delay>

	  ret = false;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	0801a160 	.word	0x0801a160
 8004b50:	0801a16c 	.word	0x0801a16c
 8004b54:	0801a174 	.word	0x0801a174

08004b58 <_ZN6Logger11storeLogIntEs>:
		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
	}
}

void Logger::storeLogInt(int16_t data)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	460b      	mov	r3, r1
 8004b62:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b6a:	33c0      	adds	r3, #192	; 0xc0
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d025      	beq.n	8004bbe <_ZN6Logger11storeLogIntEs+0x66>
		store_data_int_[log_index_tim_int_] = data;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b78:	33c6      	adds	r3, #198	; 0xc6
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f502 52fa 	add.w	r2, r2, #8000	; 0x1f40
 8004b84:	8879      	ldrh	r1, [r7, #2]
 8004b86:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		log_index_tim_int_++;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b90:	33c6      	adds	r3, #198	; 0xc6
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	3301      	adds	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b9e:	33c6      	adds	r3, #198	; 0xc6
 8004ba0:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_int_ >= LOG_DATA_SIZE_TIM) log_index_tim_int_ = 0;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004ba8:	33c6      	adds	r3, #198	; 0xc6
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004bb0:	d305      	bcc.n	8004bbe <_ZN6Logger11storeLogIntEs+0x66>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004bb8:	33c6      	adds	r3, #198	; 0xc6
 8004bba:	2200      	movs	r2, #0
 8004bbc:	801a      	strh	r2, [r3, #0]
	}

}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <_ZN6Logger12storeLog2IntEs>:
void Logger::storeLog2Int(int16_t data)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004bdc:	33c0      	adds	r3, #192	; 0xc0
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d025      	beq.n	8004c30 <_ZN6Logger12storeLog2IntEs+0x66>
		store_data_int2_[log_index_tim2_int_] = data;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004bea:	33c8      	adds	r3, #200	; 0xc8
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004bf4:	3310      	adds	r3, #16
 8004bf6:	8879      	ldrh	r1, [r7, #2]
 8004bf8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		log_index_tim2_int_++;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004c02:	33c8      	adds	r3, #200	; 0xc8
 8004c04:	881b      	ldrh	r3, [r3, #0]
 8004c06:	3301      	adds	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004c10:	33c8      	adds	r3, #200	; 0xc8
 8004c12:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_int_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_int_ = 0;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004c1a:	33c8      	adds	r3, #200	; 0xc8
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004c22:	d305      	bcc.n	8004c30 <_ZN6Logger12storeLog2IntEs+0x66>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004c2a:	33c8      	adds	r3, #200	; 0xc8
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	801a      	strh	r2, [r3, #0]
	}

}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <_ZN6Logger21storeDistanceAndThetaEff>:

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	ed87 0a02 	vstr	s0, [r7, #8]
 8004c48:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004c52:	33ca      	adds	r3, #202	; 0xca
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004c5c:	3310      	adds	r3, #16
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004c6c:	33ca      	adds	r3, #202	; 0xca
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004c76:	3320      	adds	r3, #32
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004c86:	33ca      	adds	r3, #202	; 0xca
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004c94:	33ca      	adds	r3, #202	; 0xca
 8004c96:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004c9e:	33ca      	adds	r3, #202	; 0xca
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	f241 726f 	movw	r2, #5999	; 0x176f
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d905      	bls.n	8004cb6 <_ZN6Logger21storeDistanceAndThetaEff+0x7a>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004cb0:	33ca      	adds	r3, #202	; 0xca
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	801a      	strh	r2, [r3, #0]
	//}
}
 8004cb6:	bf00      	nop
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b085      	sub	sp, #20
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	ed87 0a02 	vstr	s0, [r7, #8]
 8004cce:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004cd8:	33ca      	adds	r3, #202	; 0xca
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8004ce2:	3350      	adds	r3, #80	; 0x50
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004cf2:	33ca      	adds	r3, #202	; 0xca
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004cfc:	3340      	adds	r3, #64	; 0x40
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d0c:	33ca      	adds	r3, #202	; 0xca
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	3301      	adds	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d1a:	33ca      	adds	r3, #202	; 0xca
 8004d1c:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d24:	33ca      	adds	r3, #202	; 0xca
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	f241 726f 	movw	r2, #5999	; 0x176f
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d905      	bls.n	8004d3c <_ZN6Logger22storeDistanceAndTheta2Eff+0x7a>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d36:	33ca      	adds	r3, #202	; 0xca
 8004d38:	2200      	movs	r2, #0
 8004d3a:	801a      	strh	r2, [r3, #0]
	//}
}
 8004d3c:	bf00      	nop
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004d56:	3340      	adds	r3, #64	; 0x40
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004d72:	3380      	adds	r3, #128	; 0x80
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	2300      	movs	r3, #0
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	4613      	mov	r3, r2
 8004d94:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	68b8      	ldr	r0, [r7, #8]
 8004d9c:	f7fc fd6e 	bl	800187c <sd_write_array_float>
}
 8004da0:	bf00      	nop
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <_ZN6Logger11saveLogsIntEPKcS1_>:
{
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
}

void Logger::saveLogsInt(const char *folder_name, const char *file_name)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af02      	add	r7, sp, #8
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_int_, OVER_WRITE); //write
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 8004dba:	2300      	movs	r3, #0
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	68b8      	ldr	r0, [r7, #8]
 8004dc8:	f7fc fe4a 	bl	8001a60 <sd_write_array_int>
}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <_ZN6Logger12saveLogs2IntEPKcS1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8004de6:	3320      	adds	r3, #32
 8004de8:	2200      	movs	r2, #0
 8004dea:	9200      	str	r2, [sp, #0]
 8004dec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	68b8      	ldr	r0, [r7, #8]
 8004df4:	f7fc fe34 	bl	8001a60 <sd_write_array_int>
}
 8004df8:	bf00      	nop
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
 8004e0c:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004e14:	3340      	adds	r3, #64	; 0x40
 8004e16:	2200      	movs	r2, #0
 8004e18:	9200      	str	r2, [sp, #0]
 8004e1a:	f241 7270 	movw	r2, #6000	; 0x1770
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	68b8      	ldr	r0, [r7, #8]
 8004e22:	f7fc fd2b 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004e2c:	3380      	adds	r3, #128	; 0x80
 8004e2e:	2200      	movs	r2, #0
 8004e30:	9200      	str	r2, [sp, #0]
 8004e32:	f241 7270 	movw	r2, #6000	; 0x1770
 8004e36:	6839      	ldr	r1, [r7, #0]
 8004e38:	68b8      	ldr	r0, [r7, #8]
 8004e3a:	f7fc fd1f 	bl	800187c <sd_write_array_float>
}
 8004e3e:	bf00      	nop
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b086      	sub	sp, #24
 8004e4a:	af02      	add	r7, sp, #8
 8004e4c:	60f8      	str	r0, [r7, #12]
 8004e4e:	60b9      	str	r1, [r7, #8]
 8004e50:	607a      	str	r2, [r7, #4]
 8004e52:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004e5a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004e5e:	2200      	movs	r2, #0
 8004e60:	9200      	str	r2, [sp, #0]
 8004e62:	f241 7270 	movw	r2, #6000	; 0x1770
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	68b8      	ldr	r0, [r7, #8]
 8004e6a:	f7fc fd07 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004e74:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004e78:	2200      	movs	r2, #0
 8004e7a:	9200      	str	r2, [sp, #0]
 8004e7c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004e80:	6839      	ldr	r1, [r7, #0]
 8004e82:	68b8      	ldr	r0, [r7, #8]
 8004e84:	f7fc fcfa 	bl	800187c <sd_write_array_float>
}
 8004e88:	bf00      	nop
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004ea4:	3340      	adds	r3, #64	; 0x40
 8004ea6:	f241 7270 	movw	r2, #6000	; 0x1770
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	68b8      	ldr	r0, [r7, #8]
 8004eae:	f7fc fd4b 	bl	8001948 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004eb8:	3380      	adds	r3, #128	; 0x80
 8004eba:	f241 7270 	movw	r2, #6000	; 0x1770
 8004ebe:	6839      	ldr	r1, [r7, #0]
 8004ec0:	68b8      	ldr	r0, [r7, #8]
 8004ec2:	f7fc fd41 	bl	8001948 <sd_read_array_float>
}
 8004ec6:	bf00      	nop
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b08b      	sub	sp, #44	; 0x2c
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004edc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004ee0:	61fb      	str	r3, [r7, #28]
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004eec:	3340      	adds	r3, #64	; 0x40
 8004eee:	61bb      	str	r3, [r7, #24]
 8004ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d009      	beq.n	8004f0c <_ZN6Logger10resetLogs2Ev+0x3e>
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	617b      	str	r3, [r7, #20]
		log = 0;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	3304      	adds	r3, #4
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
 8004f0a:	e7f1      	b.n	8004ef0 <_ZN6Logger10resetLogs2Ev+0x22>
	}
	for(auto &log : store_theta2_){
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004f12:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004f16:	613b      	str	r3, [r7, #16]
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	623b      	str	r3, [r7, #32]
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004f22:	3340      	adds	r3, #64	; 0x40
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	6a3a      	ldr	r2, [r7, #32]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d009      	beq.n	8004f42 <_ZN6Logger10resetLogs2Ev+0x74>
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004f3a:	6a3b      	ldr	r3, [r7, #32]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	623b      	str	r3, [r7, #32]
 8004f40:	e7f1      	b.n	8004f26 <_ZN6Logger10resetLogs2Ev+0x58>
	}

	log_index_tim_ = 0;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004f48:	33c2      	adds	r3, #194	; 0xc2
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004f54:	33ca      	adds	r3, #202	; 0xca
 8004f56:	2200      	movs	r2, #0
 8004f58:	801a      	strh	r2, [r3, #0]
}
 8004f5a:	bf00      	nop
 8004f5c:	372c      	adds	r7, #44	; 0x2c
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004f74:	33c2      	adds	r3, #194	; 0xc2
 8004f76:	2200      	movs	r2, #0
 8004f78:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004f80:	33ca      	adds	r3, #202	; 0xca
 8004f82:	2200      	movs	r2, #0
 8004f84:	801a      	strh	r2, [r3, #0]
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004fa0:	33c0      	adds	r3, #192	; 0xc0
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	701a      	strb	r2, [r3, #0]
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004fc0:	33c0      	adds	r3, #192	; 0xc0
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	701a      	strb	r2, [r3, #0]
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	801a      	strh	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	805a      	strh	r2, [r3, #2]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004ffc:	2108      	movs	r1, #8
 8004ffe:	4805      	ldr	r0, [pc, #20]	; (8005014 <_ZN5Motor4initEv+0x20>)
 8005000:	f00a fa22 	bl	800f448 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8005004:	210c      	movs	r1, #12
 8005006:	4803      	ldr	r0, [pc, #12]	; (8005014 <_ZN5Motor4initEv+0x20>)
 8005008:	f00a fa1e 	bl	800f448 <HAL_TIM_PWM_Start>

}
 800500c:	bf00      	nop
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	200448a8 	.word	0x200448a8

08005018 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005026:	2b00      	cmp	r3, #0
 8005028:	da0d      	bge.n	8005046 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 800502a:	2200      	movs	r2, #0
 800502c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005030:	481f      	ldr	r0, [pc, #124]	; (80050b0 <_ZN5Motor9motorCtrlEv+0x98>)
 8005032:	f006 faef 	bl	800b614 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800503c:	b29b      	uxth	r3, r3
 800503e:	425b      	negs	r3, r3
 8005040:	b29b      	uxth	r3, r3
 8005042:	81fb      	strh	r3, [r7, #14]
 8005044:	e00a      	b.n	800505c <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8005046:	2201      	movs	r2, #1
 8005048:	f44f 7100 	mov.w	r1, #512	; 0x200
 800504c:	4818      	ldr	r0, [pc, #96]	; (80050b0 <_ZN5Motor9motorCtrlEv+0x98>)
 800504e:	f006 fae1 	bl	800b614 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005058:	b29b      	uxth	r3, r3
 800505a:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005062:	2b00      	cmp	r3, #0
 8005064:	da0d      	bge.n	8005082 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8005066:	2201      	movs	r2, #1
 8005068:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800506c:	4810      	ldr	r0, [pc, #64]	; (80050b0 <_ZN5Motor9motorCtrlEv+0x98>)
 800506e:	f006 fad1 	bl	800b614 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005078:	b29b      	uxth	r3, r3
 800507a:	425b      	negs	r3, r3
 800507c:	b29b      	uxth	r3, r3
 800507e:	81bb      	strh	r3, [r7, #12]
 8005080:	e00a      	b.n	8005098 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8005082:	2200      	movs	r2, #0
 8005084:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005088:	4809      	ldr	r0, [pc, #36]	; (80050b0 <_ZN5Motor9motorCtrlEv+0x98>)
 800508a:	f006 fac3 	bl	800b614 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005094:	b29b      	uxth	r3, r3
 8005096:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8005098:	89fa      	ldrh	r2, [r7, #14]
 800509a:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <_ZN5Motor9motorCtrlEv+0x9c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 80050a0:	89ba      	ldrh	r2, [r7, #12]
 80050a2:	4b04      	ldr	r3, [pc, #16]	; (80050b4 <_ZN5Motor9motorCtrlEv+0x9c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80050a8:	bf00      	nop
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	40020c00 	.word	0x40020c00
 80050b4:	200448a8 	.word	0x200448a8

080050b8 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 80050b8:	b590      	push	{r4, r7, lr}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6178      	str	r0, [r7, #20]
 80050c0:	ed87 0b02 	vstr	d0, [r7, #8]
 80050c4:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	4b30      	ldr	r3, [pc, #192]	; (8005190 <_ZN5Motor8setRatioEdd+0xd8>)
 80050ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80050d2:	f7fb fd39 	bl	8000b48 <__aeabi_dcmpgt>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d005      	beq.n	80050e8 <_ZN5Motor8setRatioEdd+0x30>
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	4c2b      	ldr	r4, [pc, #172]	; (8005190 <_ZN5Motor8setRatioEdd+0xd8>)
 80050e2:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80050e6:	e00e      	b.n	8005106 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	4b29      	ldr	r3, [pc, #164]	; (8005194 <_ZN5Motor8setRatioEdd+0xdc>)
 80050ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80050f2:	f7fb fd0b 	bl	8000b0c <__aeabi_dcmplt>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d004      	beq.n	8005106 <_ZN5Motor8setRatioEdd+0x4e>
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	4c24      	ldr	r4, [pc, #144]	; (8005194 <_ZN5Motor8setRatioEdd+0xdc>)
 8005102:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8005106:	f04f 0200 	mov.w	r2, #0
 800510a:	4b21      	ldr	r3, [pc, #132]	; (8005190 <_ZN5Motor8setRatioEdd+0xd8>)
 800510c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005110:	f7fb fd1a 	bl	8000b48 <__aeabi_dcmpgt>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d005      	beq.n	8005126 <_ZN5Motor8setRatioEdd+0x6e>
 800511a:	f04f 0300 	mov.w	r3, #0
 800511e:	4c1c      	ldr	r4, [pc, #112]	; (8005190 <_ZN5Motor8setRatioEdd+0xd8>)
 8005120:	e9c7 3400 	strd	r3, r4, [r7]
 8005124:	e00e      	b.n	8005144 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	4b1a      	ldr	r3, [pc, #104]	; (8005194 <_ZN5Motor8setRatioEdd+0xdc>)
 800512c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005130:	f7fb fcec 	bl	8000b0c <__aeabi_dcmplt>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d004      	beq.n	8005144 <_ZN5Motor8setRatioEdd+0x8c>
 800513a:	f04f 0300 	mov.w	r3, #0
 800513e:	4c15      	ldr	r4, [pc, #84]	; (8005194 <_ZN5Motor8setRatioEdd+0xdc>)
 8005140:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	4b13      	ldr	r3, [pc, #76]	; (8005198 <_ZN5Motor8setRatioEdd+0xe0>)
 800514a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800514e:	f7fb fa6b 	bl	8000628 <__aeabi_dmul>
 8005152:	4603      	mov	r3, r0
 8005154:	460c      	mov	r4, r1
 8005156:	4618      	mov	r0, r3
 8005158:	4621      	mov	r1, r4
 800515a:	f7fb fd15 	bl	8000b88 <__aeabi_d2iz>
 800515e:	4603      	mov	r3, r0
 8005160:	b21a      	sxth	r2, r3
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8005166:	f04f 0200 	mov.w	r2, #0
 800516a:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <_ZN5Motor8setRatioEdd+0xe0>)
 800516c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005170:	f7fb fa5a 	bl	8000628 <__aeabi_dmul>
 8005174:	4603      	mov	r3, r0
 8005176:	460c      	mov	r4, r1
 8005178:	4618      	mov	r0, r3
 800517a:	4621      	mov	r1, r4
 800517c:	f7fb fd04 	bl	8000b88 <__aeabi_d2iz>
 8005180:	4603      	mov	r3, r0
 8005182:	b21a      	sxth	r2, r3
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	805a      	strh	r2, [r3, #2]

}
 8005188:	bf00      	nop
 800518a:	371c      	adds	r7, #28
 800518c:	46bd      	mov	sp, r7
 800518e:	bd90      	pop	{r4, r7, pc}
 8005190:	3ff00000 	.word	0x3ff00000
 8005194:	bff00000 	.word	0xbff00000
 8005198:	409c2000 	.word	0x409c2000

0800519c <_ZN5Motor20getLeftCounterPeriodEv>:

int16_t Motor::getLeftCounterPeriod()
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
	return temp_left_counter_period_;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <_ZN5Motor21getRightCounterPeriodEv>:

int16_t Motor::getRightCounterPeriod()
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
	return temp_right_counter_period_;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 80051d0:	b490      	push	{r4, r7}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
 80051dc:	603b      	str	r3, [r7, #0]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	f04f 0300 	mov.w	r3, #0
 80051e4:	f04f 0400 	mov.w	r4, #0
 80051e8:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	f04f 0300 	mov.w	r3, #0
 80051f2:	f04f 0400 	mov.w	r4, #0
 80051f6:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	f04f 0300 	mov.w	r3, #0
 8005200:	f04f 0400 	mov.w	r4, #0
 8005204:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	f04f 0300 	mov.w	r3, #0
 800520e:	f04f 0400 	mov.w	r4, #0
 8005212:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	f04f 0300 	mov.w	r3, #0
 800521c:	f04f 0400 	mov.w	r4, #0
 8005220:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	609a      	str	r2, [r3, #8]
}
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bc90      	pop	{r4, r7}
 8005240:	4770      	bx	lr
 8005242:	0000      	movs	r0, r0
 8005244:	0000      	movs	r0, r0
	...

08005248 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8005248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800524c:	b086      	sub	sp, #24
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	4618      	mov	r0, r3
 8005258:	f7fc fe3a 	bl	8001ed0 <_ZN3IMU8getOmegaEv>
 800525c:	ee10 3a10 	vmov	r3, s0
 8005260:	4618      	mov	r0, r3
 8005262:	f7fb f989 	bl	8000578 <__aeabi_f2d>
 8005266:	4603      	mov	r3, r0
 8005268:	460c      	mov	r4, r1
 800526a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f7fc fa18 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 8005278:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 800527c:	a376      	add	r3, pc, #472	; (adr r3, 8005458 <_ZN8Odometry12calcPotitionEv+0x210>)
 800527e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005282:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005286:	f7fb f9cf 	bl	8000628 <__aeabi_dmul>
 800528a:	4603      	mov	r3, r0
 800528c:	460c      	mov	r4, r1
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f7fb f96c 	bl	8000578 <__aeabi_f2d>
 80052a0:	4682      	mov	sl, r0
 80052a2:	468b      	mov	fp, r1
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80052b0:	f04f 0200 	mov.w	r2, #0
 80052b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052b8:	f7fb fae0 	bl	800087c <__aeabi_ddiv>
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	4640      	mov	r0, r8
 80052c2:	4649      	mov	r1, r9
 80052c4:	f7fa fffa 	bl	80002bc <__adddf3>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	ec43 2b17 	vmov	d7, r2, r3
 80052d0:	eeb0 0a47 	vmov.f32	s0, s14
 80052d4:	eef0 0a67 	vmov.f32	s1, s15
 80052d8:	f00f fbfa 	bl	8014ad0 <cos>
 80052dc:	ec53 2b10 	vmov	r2, r3, d0
 80052e0:	4650      	mov	r0, sl
 80052e2:	4659      	mov	r1, fp
 80052e4:	f7fb f9a0 	bl	8000628 <__aeabi_dmul>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4620      	mov	r0, r4
 80052ee:	4629      	mov	r1, r5
 80052f0:	f7fa ffe4 	bl	80002bc <__adddf3>
 80052f4:	4603      	mov	r3, r0
 80052f6:	460c      	mov	r4, r1
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f7fb f937 	bl	8000578 <__aeabi_f2d>
 800530a:	4682      	mov	sl, r0
 800530c:	468b      	mov	fp, r1
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005322:	f7fb faab 	bl	800087c <__aeabi_ddiv>
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	4640      	mov	r0, r8
 800532c:	4649      	mov	r1, r9
 800532e:	f7fa ffc5 	bl	80002bc <__adddf3>
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	ec43 2b17 	vmov	d7, r2, r3
 800533a:	eeb0 0a47 	vmov.f32	s0, s14
 800533e:	eef0 0a67 	vmov.f32	s1, s15
 8005342:	f00f fc09 	bl	8014b58 <sin>
 8005346:	ec53 2b10 	vmov	r2, r3, d0
 800534a:	4650      	mov	r0, sl
 800534c:	4659      	mov	r1, fp
 800534e:	f7fb f96b 	bl	8000628 <__aeabi_dmul>
 8005352:	4602      	mov	r2, r0
 8005354:	460b      	mov	r3, r1
 8005356:	4620      	mov	r0, r4
 8005358:	4629      	mov	r1, r5
 800535a:	f7fa ffaf 	bl	80002bc <__adddf3>
 800535e:	4603      	mov	r3, r0
 8005360:	460c      	mov	r4, r1
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005374:	461a      	mov	r2, r3
 8005376:	4623      	mov	r3, r4
 8005378:	f7fa ffa0 	bl	80002bc <__adddf3>
 800537c:	4603      	mov	r3, r0
 800537e:	460c      	mov	r4, r1
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	ed93 7b08 	vldr	d7, [r3, #32]
 8005392:	eeb0 0a47 	vmov.f32	s0, s14
 8005396:	eef0 0a67 	vmov.f32	s1, s15
 800539a:	f00f fb99 	bl	8014ad0 <cos>
 800539e:	ec51 0b10 	vmov	r0, r1, d0
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	4b28      	ldr	r3, [pc, #160]	; (8005448 <_ZN8Odometry12calcPotitionEv+0x200>)
 80053a8:	f7fb f93e 	bl	8000628 <__aeabi_dmul>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4620      	mov	r0, r4
 80053b2:	4629      	mov	r1, r5
 80053b4:	f7fa ff82 	bl	80002bc <__adddf3>
 80053b8:	4603      	mov	r3, r0
 80053ba:	460c      	mov	r4, r1
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	ed93 7b08 	vldr	d7, [r3, #32]
 80053ce:	eeb0 0a47 	vmov.f32	s0, s14
 80053d2:	eef0 0a67 	vmov.f32	s1, s15
 80053d6:	f00f fbbf 	bl	8014b58 <sin>
 80053da:	ec51 0b10 	vmov	r0, r1, d0
 80053de:	f04f 0200 	mov.w	r2, #0
 80053e2:	4b19      	ldr	r3, [pc, #100]	; (8005448 <_ZN8Odometry12calcPotitionEv+0x200>)
 80053e4:	f7fb f920 	bl	8000628 <__aeabi_dmul>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	4620      	mov	r0, r4
 80053ee:	4629      	mov	r1, r5
 80053f0:	f7fa ff64 	bl	80002bc <__adddf3>
 80053f4:	4603      	mov	r3, r0
 80053f6:	460c      	mov	r4, r1
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8005404:	4618      	mov	r0, r3
 8005406:	4621      	mov	r1, r4
 8005408:	f7fb fc06 	bl	8000c18 <__aeabi_d2f>
 800540c:	4602      	mov	r2, r0
 800540e:	4b0f      	ldr	r3, [pc, #60]	; (800544c <_ZN8Odometry12calcPotitionEv+0x204>)
 8005410:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8005418:	4618      	mov	r0, r3
 800541a:	4621      	mov	r1, r4
 800541c:	f7fb fbfc 	bl	8000c18 <__aeabi_d2f>
 8005420:	4602      	mov	r2, r0
 8005422:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <_ZN8Odometry12calcPotitionEv+0x208>)
 8005424:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800542c:	4618      	mov	r0, r3
 800542e:	4621      	mov	r1, r4
 8005430:	f7fb fbf2 	bl	8000c18 <__aeabi_d2f>
 8005434:	4602      	mov	r2, r0
 8005436:	4b07      	ldr	r3, [pc, #28]	; (8005454 <_ZN8Odometry12calcPotitionEv+0x20c>)
 8005438:	601a      	str	r2, [r3, #0]
}
 800543a:	bf00      	nop
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005444:	f3af 8000 	nop.w
 8005448:	405b8000 	.word	0x405b8000
 800544c:	2000028c 	.word	0x2000028c
 8005450:	20000290 	.word	0x20000290
 8005454:	20000294 	.word	0x20000294
 8005458:	d2f1a9fc 	.word	0xd2f1a9fc
 800545c:	3f50624d 	.word	0x3f50624d

08005460 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
	calcPotition();
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7ff feed 	bl	8005248 <_ZN8Odometry12calcPotitionEv>
}
 800546e:	bf00      	nop
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8005476:	b490      	push	{r4, r7}
 8005478:	b082      	sub	sp, #8
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
	return theta_;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8005484:	ec44 3b17 	vmov	d7, r3, r4
}
 8005488:	eeb0 0a47 	vmov.f32	s0, s14
 800548c:	eef0 0a67 	vmov.f32	s1, s15
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bc90      	pop	{r4, r7}
 8005496:	4770      	bx	lr

08005498 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8005498:	b490      	push	{r4, r7}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	f04f 0300 	mov.w	r3, #0
 80054a6:	f04f 0400 	mov.w	r4, #0
 80054aa:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	f04f 0300 	mov.w	r3, #0
 80054b4:	f04f 0400 	mov.w	r4, #0
 80054b8:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	f04f 0300 	mov.w	r3, #0
 80054c2:	f04f 0400 	mov.w	r4, #0
 80054c6:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 80054ca:	bf00      	nop
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc90      	pop	{r4, r7}
 80054d2:	4770      	bx	lr

080054d4 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 80054d4:	b490      	push	{r4, r7}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	701a      	strb	r2, [r3, #0]
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	f04f 0300 	mov.w	r3, #0
 80054e8:	f04f 0400 	mov.w	r4, #0
 80054ec:	e9c2 3402 	strd	r3, r4, [r2, #8]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	f04f 0400 	mov.w	r4, #0
 80054fa:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	f04f 0300 	mov.w	r3, #0
 8005504:	f04f 0400 	mov.w	r4, #0
 8005508:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8005512:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005516:	2200      	movs	r2, #0
 8005518:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 800551a:	4a29      	ldr	r2, [pc, #164]	; (80055c0 <_ZN13PathFollowingC1Ev+0xec>)
 800551c:	f04f 0300 	mov.w	r3, #0
 8005520:	f04f 0400 	mov.w	r4, #0
 8005524:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8005528:	4a25      	ldr	r2, [pc, #148]	; (80055c0 <_ZN13PathFollowingC1Ev+0xec>)
 800552a:	f04f 0300 	mov.w	r3, #0
 800552e:	f04f 0400 	mov.w	r4, #0
 8005532:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8005536:	4a22      	ldr	r2, [pc, #136]	; (80055c0 <_ZN13PathFollowingC1Ev+0xec>)
 8005538:	f04f 0300 	mov.w	r3, #0
 800553c:	f04f 0400 	mov.w	r4, #0
 8005540:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8005544:	4a1f      	ldr	r2, [pc, #124]	; (80055c4 <_ZN13PathFollowingC1Ev+0xf0>)
 8005546:	f04f 0300 	mov.w	r3, #0
 800554a:	f04f 0400 	mov.w	r4, #0
 800554e:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8005552:	4a1c      	ldr	r2, [pc, #112]	; (80055c4 <_ZN13PathFollowingC1Ev+0xf0>)
 8005554:	f04f 0300 	mov.w	r3, #0
 8005558:	f04f 0400 	mov.w	r4, #0
 800555c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8005560:	4a18      	ldr	r2, [pc, #96]	; (80055c4 <_ZN13PathFollowingC1Ev+0xf0>)
 8005562:	f04f 0300 	mov.w	r3, #0
 8005566:	f04f 0400 	mov.w	r4, #0
 800556a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 800556e:	4a15      	ldr	r2, [pc, #84]	; (80055c4 <_ZN13PathFollowingC1Ev+0xf0>)
 8005570:	f04f 0300 	mov.w	r3, #0
 8005574:	f04f 0400 	mov.w	r4, #0
 8005578:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 800557c:	4a11      	ldr	r2, [pc, #68]	; (80055c4 <_ZN13PathFollowingC1Ev+0xf0>)
 800557e:	f04f 0300 	mov.w	r3, #0
 8005582:	f04f 0400 	mov.w	r4, #0
 8005586:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 800558a:	4a0e      	ldr	r2, [pc, #56]	; (80055c4 <_ZN13PathFollowingC1Ev+0xf0>)
 800558c:	f04f 0300 	mov.w	r3, #0
 8005590:	f04f 0400 	mov.w	r4, #0
 8005594:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8005598:	4a0b      	ldr	r2, [pc, #44]	; (80055c8 <_ZN13PathFollowingC1Ev+0xf4>)
 800559a:	f04f 0300 	mov.w	r3, #0
 800559e:	f04f 0400 	mov.w	r4, #0
 80055a2:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 80055a6:	4a08      	ldr	r2, [pc, #32]	; (80055c8 <_ZN13PathFollowingC1Ev+0xf4>)
 80055a8:	f04f 0300 	mov.w	r3, #0
 80055ac:	f04f 0400 	mov.w	r4, #0
 80055b0:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bc90      	pop	{r4, r7}
 80055be:	4770      	bx	lr
 80055c0:	20044da8 	.word	0x20044da8
 80055c4:	20044d38 	.word	0x20044d38
 80055c8:	20044d98 	.word	0x20044d98

080055cc <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 80055d4:	f001 fdce 	bl	8007174 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 80055d8:	f107 0318 	add.w	r3, r7, #24
 80055dc:	2201      	movs	r2, #1
 80055de:	4915      	ldr	r1, [pc, #84]	; (8005634 <_ZN13PathFollowing4initEv+0x68>)
 80055e0:	4815      	ldr	r0, [pc, #84]	; (8005638 <_ZN13PathFollowing4initEv+0x6c>)
 80055e2:	f7fc f9f7 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 80055e6:	f107 0310 	add.w	r3, r7, #16
 80055ea:	2201      	movs	r2, #1
 80055ec:	4913      	ldr	r1, [pc, #76]	; (800563c <_ZN13PathFollowing4initEv+0x70>)
 80055ee:	4812      	ldr	r0, [pc, #72]	; (8005638 <_ZN13PathFollowing4initEv+0x6c>)
 80055f0:	f7fc f9f0 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 80055f4:	f107 0308 	add.w	r3, r7, #8
 80055f8:	2201      	movs	r2, #1
 80055fa:	4911      	ldr	r1, [pc, #68]	; (8005640 <_ZN13PathFollowing4initEv+0x74>)
 80055fc:	480e      	ldr	r0, [pc, #56]	; (8005638 <_ZN13PathFollowing4initEv+0x6c>)
 80055fe:	f7fc f9e9 	bl	80019d4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8005602:	ed97 7b06 	vldr	d7, [r7, #24]
 8005606:	ed97 6b04 	vldr	d6, [r7, #16]
 800560a:	ed97 5b02 	vldr	d5, [r7, #8]
 800560e:	eeb0 2a45 	vmov.f32	s4, s10
 8005612:	eef0 2a65 	vmov.f32	s5, s11
 8005616:	eeb0 1a46 	vmov.f32	s2, s12
 800561a:	eef0 1a66 	vmov.f32	s3, s13
 800561e:	eeb0 0a47 	vmov.f32	s0, s14
 8005622:	eef0 0a67 	vmov.f32	s1, s15
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f80c 	bl	8005644 <_ZN13PathFollowing7setGainEddd>
}
 800562c:	bf00      	nop
 800562e:	3720      	adds	r7, #32
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	0801a17c 	.word	0x0801a17c
 8005638:	0801a184 	.word	0x0801a184
 800563c:	0801a18c 	.word	0x0801a18c
 8005640:	0801a194 	.word	0x0801a194

08005644 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8005644:	b490      	push	{r4, r7}
 8005646:	b088      	sub	sp, #32
 8005648:	af00      	add	r7, sp, #0
 800564a:	61f8      	str	r0, [r7, #28]
 800564c:	ed87 0b04 	vstr	d0, [r7, #16]
 8005650:	ed87 1b02 	vstr	d1, [r7, #8]
 8005654:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8005658:	4a09      	ldr	r2, [pc, #36]	; (8005680 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800565a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800565e:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8005662:	4a07      	ldr	r2, [pc, #28]	; (8005680 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005664:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005668:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 800566c:	4a04      	ldr	r2, [pc, #16]	; (8005680 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800566e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005672:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8005676:	bf00      	nop
 8005678:	3720      	adds	r7, #32
 800567a:	46bd      	mov	sp, r7
 800567c:	bc90      	pop	{r4, r7}
 800567e:	4770      	bx	lr
 8005680:	20044da8 	.word	0x20044da8

08005684 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 800568c:	2088      	movs	r0, #136	; 0x88
 800568e:	f7fc fd62 	bl	8002156 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8005692:	2080      	movs	r0, #128	; 0x80
 8005694:	f7fc fd5f 	bl	8002156 <INA260_init>
}
 8005698:	bf00      	nop
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80056a0:	b590      	push	{r4, r7, lr}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80056a8:	2188      	movs	r1, #136	; 0x88
 80056aa:	2002      	movs	r0, #2
 80056ac:	f7fc fcf0 	bl	8002090 <INA260_read>
 80056b0:	4603      	mov	r3, r0
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fa ff4e 	bl	8000554 <__aeabi_i2d>
 80056b8:	a30c      	add	r3, pc, #48	; (adr r3, 80056ec <_ZN11PowerSensor12updateValuesEv+0x4c>)
 80056ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056be:	f7fa ffb3 	bl	8000628 <__aeabi_dmul>
 80056c2:	4603      	mov	r3, r0
 80056c4:	460c      	mov	r4, r1
 80056c6:	4618      	mov	r0, r3
 80056c8:	4621      	mov	r1, r4
 80056ca:	f7fb faa5 	bl	8000c18 <__aeabi_d2f>
 80056ce:	4602      	mov	r2, r0
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	4a03      	ldr	r2, [pc, #12]	; (80056e8 <_ZN11PowerSensor12updateValuesEv+0x48>)
 80056da:	6013      	str	r3, [r2, #0]
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd90      	pop	{r4, r7, pc}
 80056e4:	f3af 8000 	nop.w
 80056e8:	20000298 	.word	0x20000298
 80056ec:	47ae147b 	.word	0x47ae147b
 80056f0:	3f547ae1 	.word	0x3f547ae1

080056f4 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	ee07 3a90 	vmov	s15, r3

}
 8005704:	eeb0 0a67 	vmov.f32	s0, s15
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
	...

08005714 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 800571c:	2300      	movs	r3, #0
 800571e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005720:	2102      	movs	r1, #2
 8005722:	4822      	ldr	r0, [pc, #136]	; (80057ac <_ZN12RotarySwitch8getValueEv+0x98>)
 8005724:	f005 ff5e 	bl	800b5e4 <HAL_GPIO_ReadPin>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	bf0c      	ite	eq
 800572e:	2301      	moveq	r3, #1
 8005730:	2300      	movne	r3, #0
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005738:	89fb      	ldrh	r3, [r7, #14]
 800573a:	f043 0301 	orr.w	r3, r3, #1
 800573e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005740:	2108      	movs	r1, #8
 8005742:	481a      	ldr	r0, [pc, #104]	; (80057ac <_ZN12RotarySwitch8getValueEv+0x98>)
 8005744:	f005 ff4e 	bl	800b5e4 <HAL_GPIO_ReadPin>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	bf0c      	ite	eq
 800574e:	2301      	moveq	r3, #1
 8005750:	2300      	movne	r3, #0
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005758:	89fb      	ldrh	r3, [r7, #14]
 800575a:	f043 0302 	orr.w	r3, r3, #2
 800575e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8005760:	2110      	movs	r1, #16
 8005762:	4812      	ldr	r0, [pc, #72]	; (80057ac <_ZN12RotarySwitch8getValueEv+0x98>)
 8005764:	f005 ff3e 	bl	800b5e4 <HAL_GPIO_ReadPin>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	bf0c      	ite	eq
 800576e:	2301      	moveq	r3, #1
 8005770:	2300      	movne	r3, #0
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <_ZN12RotarySwitch8getValueEv+0x6c>
 8005778:	89fb      	ldrh	r3, [r7, #14]
 800577a:	f043 0304 	orr.w	r3, r3, #4
 800577e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8005780:	2180      	movs	r1, #128	; 0x80
 8005782:	480a      	ldr	r0, [pc, #40]	; (80057ac <_ZN12RotarySwitch8getValueEv+0x98>)
 8005784:	f005 ff2e 	bl	800b5e4 <HAL_GPIO_ReadPin>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	bf0c      	ite	eq
 800578e:	2301      	moveq	r3, #1
 8005790:	2300      	movne	r3, #0
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d003      	beq.n	80057a0 <_ZN12RotarySwitch8getValueEv+0x8c>
 8005798:	89fb      	ldrh	r3, [r7, #14]
 800579a:	f043 0308 	orr.w	r3, r3, #8
 800579e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80057a0:	89fb      	ldrh	r3, [r7, #14]

}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	40020c00 	.word	0x40020c00

080057b0 <_ZN10SideSensorC1Ev>:

uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	709a      	strb	r2, [r3, #2]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	70da      	strb	r2, [r3, #3]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	809a      	strh	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	80da      	strh	r2, [r3, #6]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	721a      	strb	r2, [r3, #8]
{

}
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4618      	mov	r0, r3
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
	...

080057ec <_ZN10SideSensor12updateStatusEv>:

}
*/

void SideSensor::updateStatus()
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	7a1b      	ldrb	r3, [r3, #8]
 80057f8:	f083 0301 	eor.w	r3, r3, #1
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 80ea 	beq.w	80059d8 <_ZN10SideSensor12updateStatusEv+0x1ec>
		if(white_flag1 == false){
 8005804:	4b76      	ldr	r3, [pc, #472]	; (80059e0 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	f083 0301 	eor.w	r3, r3, #1
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d032      	beq.n	8005878 <_ZN10SideSensor12updateStatusEv+0x8c>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2) && HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8) ){ // Right is white and Left is black
 8005812:	2104      	movs	r1, #4
 8005814:	4873      	ldr	r0, [pc, #460]	; (80059e4 <_ZN10SideSensor12updateStatusEv+0x1f8>)
 8005816:	f005 fee5 	bl	800b5e4 <HAL_GPIO_ReadPin>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d109      	bne.n	8005834 <_ZN10SideSensor12updateStatusEv+0x48>
 8005820:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005824:	4870      	ldr	r0, [pc, #448]	; (80059e8 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 8005826:	f005 fedd 	bl	800b5e4 <HAL_GPIO_ReadPin>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <_ZN10SideSensor12updateStatusEv+0x48>
 8005830:	2301      	movs	r3, #1
 8005832:	e000      	b.n	8005836 <_ZN10SideSensor12updateStatusEv+0x4a>
 8005834:	2300      	movs	r3, #0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d006      	beq.n	8005848 <_ZN10SideSensor12updateStatusEv+0x5c>
				cnt_r++;
 800583a:	4b6c      	ldr	r3, [pc, #432]	; (80059ec <_ZN10SideSensor12updateStatusEv+0x200>)
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	3301      	adds	r3, #1
 8005840:	b29a      	uxth	r2, r3
 8005842:	4b6a      	ldr	r3, [pc, #424]	; (80059ec <_ZN10SideSensor12updateStatusEv+0x200>)
 8005844:	801a      	strh	r2, [r3, #0]
 8005846:	e002      	b.n	800584e <_ZN10SideSensor12updateStatusEv+0x62>
			}
			else{
				cnt_r = 0;
 8005848:	4b68      	ldr	r3, [pc, #416]	; (80059ec <_ZN10SideSensor12updateStatusEv+0x200>)
 800584a:	2200      	movs	r2, #0
 800584c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 800584e:	4b67      	ldr	r3, [pc, #412]	; (80059ec <_ZN10SideSensor12updateStatusEv+0x200>)
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	2b04      	cmp	r3, #4
 8005854:	d945      	bls.n	80058e2 <_ZN10SideSensor12updateStatusEv+0xf6>
				status_ |= 0x01;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	f043 0301 	orr.w	r3, r3, #1
 800585e:	b29a      	uxth	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	801a      	strh	r2, [r3, #0]
				status_R_ = true;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	70da      	strb	r2, [r3, #3]
				white_flag1 = true;
 800586a:	4b5d      	ldr	r3, [pc, #372]	; (80059e0 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 800586c:	2201      	movs	r2, #1
 800586e:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8005870:	4b5e      	ldr	r3, [pc, #376]	; (80059ec <_ZN10SideSensor12updateStatusEv+0x200>)
 8005872:	2200      	movs	r2, #0
 8005874:	801a      	strh	r2, [r3, #0]
 8005876:	e034      	b.n	80058e2 <_ZN10SideSensor12updateStatusEv+0xf6>
			}

		}
		else if(white_flag1 == true){
 8005878:	4b59      	ldr	r3, [pc, #356]	; (80059e0 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d030      	beq.n	80058e2 <_ZN10SideSensor12updateStatusEv+0xf6>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){ // Right is black
 8005880:	2104      	movs	r1, #4
 8005882:	4858      	ldr	r0, [pc, #352]	; (80059e4 <_ZN10SideSensor12updateStatusEv+0x1f8>)
 8005884:	f005 feae 	bl	800b5e4 <HAL_GPIO_ReadPin>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	bf14      	ite	ne
 800588e:	2301      	movne	r3, #1
 8005890:	2300      	moveq	r3, #0
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d006      	beq.n	80058a6 <_ZN10SideSensor12updateStatusEv+0xba>
				cnt_r++;
 8005898:	4b54      	ldr	r3, [pc, #336]	; (80059ec <_ZN10SideSensor12updateStatusEv+0x200>)
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	3301      	adds	r3, #1
 800589e:	b29a      	uxth	r2, r3
 80058a0:	4b52      	ldr	r3, [pc, #328]	; (80059ec <_ZN10SideSensor12updateStatusEv+0x200>)
 80058a2:	801a      	strh	r2, [r3, #0]
 80058a4:	e002      	b.n	80058ac <_ZN10SideSensor12updateStatusEv+0xc0>
			}
			else{
				cnt_r = 0;
 80058a6:	4b51      	ldr	r3, [pc, #324]	; (80059ec <_ZN10SideSensor12updateStatusEv+0x200>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80058ac:	4b4f      	ldr	r3, [pc, #316]	; (80059ec <_ZN10SideSensor12updateStatusEv+0x200>)
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d916      	bls.n	80058e2 <_ZN10SideSensor12updateStatusEv+0xf6>
				status_ ^= 0x01;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	f083 0301 	eor.w	r3, r3, #1
 80058bc:	b29a      	uxth	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	801a      	strh	r2, [r3, #0]
				status_R_ = false;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	70da      	strb	r2, [r3, #3]
				white_flag1 = false;
 80058c8:	4b45      	ldr	r3, [pc, #276]	; (80059e0 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	88db      	ldrh	r3, [r3, #6]
 80058d2:	3301      	adds	r3, #1
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	80da      	strh	r2, [r3, #6]
				mon_cnt_r = white_line_cnt_r_;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	88da      	ldrh	r2, [r3, #6]
 80058de:	4b44      	ldr	r3, [pc, #272]	; (80059f0 <_ZN10SideSensor12updateStatusEv+0x204>)
 80058e0:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 80058e2:	4b44      	ldr	r3, [pc, #272]	; (80059f4 <_ZN10SideSensor12updateStatusEv+0x208>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	f083 0301 	eor.w	r3, r3, #1
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d031      	beq.n	8005954 <_ZN10SideSensor12updateStatusEv+0x168>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8) && HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){ //Left is white and Right is black
 80058f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058f4:	483c      	ldr	r0, [pc, #240]	; (80059e8 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 80058f6:	f005 fe75 	bl	800b5e4 <HAL_GPIO_ReadPin>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d108      	bne.n	8005912 <_ZN10SideSensor12updateStatusEv+0x126>
 8005900:	2104      	movs	r1, #4
 8005902:	4838      	ldr	r0, [pc, #224]	; (80059e4 <_ZN10SideSensor12updateStatusEv+0x1f8>)
 8005904:	f005 fe6e 	bl	800b5e4 <HAL_GPIO_ReadPin>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <_ZN10SideSensor12updateStatusEv+0x126>
 800590e:	2301      	movs	r3, #1
 8005910:	e000      	b.n	8005914 <_ZN10SideSensor12updateStatusEv+0x128>
 8005912:	2300      	movs	r3, #0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d006      	beq.n	8005926 <_ZN10SideSensor12updateStatusEv+0x13a>
				cnt_l++;
 8005918:	4b37      	ldr	r3, [pc, #220]	; (80059f8 <_ZN10SideSensor12updateStatusEv+0x20c>)
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	3301      	adds	r3, #1
 800591e:	b29a      	uxth	r2, r3
 8005920:	4b35      	ldr	r3, [pc, #212]	; (80059f8 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005922:	801a      	strh	r2, [r3, #0]
 8005924:	e002      	b.n	800592c <_ZN10SideSensor12updateStatusEv+0x140>
			}
			else{
				cnt_l = 0;
 8005926:	4b34      	ldr	r3, [pc, #208]	; (80059f8 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005928:	2200      	movs	r2, #0
 800592a:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800592c:	4b32      	ldr	r3, [pc, #200]	; (80059f8 <_ZN10SideSensor12updateStatusEv+0x20c>)
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	2b04      	cmp	r3, #4
 8005932:	d90f      	bls.n	8005954 <_ZN10SideSensor12updateStatusEv+0x168>
				status_ |= 0x02;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	f043 0302 	orr.w	r3, r3, #2
 800593c:	b29a      	uxth	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	801a      	strh	r2, [r3, #0]
				status_L_ = true;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	709a      	strb	r2, [r3, #2]
				white_flag2 = true;
 8005948:	4b2a      	ldr	r3, [pc, #168]	; (80059f4 <_ZN10SideSensor12updateStatusEv+0x208>)
 800594a:	2201      	movs	r2, #1
 800594c:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 800594e:	4b2a      	ldr	r3, [pc, #168]	; (80059f8 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005950:	2200      	movs	r2, #0
 8005952:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8005954:	4b27      	ldr	r3, [pc, #156]	; (80059f4 <_ZN10SideSensor12updateStatusEv+0x208>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d031      	beq.n	80059c0 <_ZN10SideSensor12updateStatusEv+0x1d4>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){ //Left is black
 800595c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005960:	4821      	ldr	r0, [pc, #132]	; (80059e8 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 8005962:	f005 fe3f 	bl	800b5e4 <HAL_GPIO_ReadPin>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	bf14      	ite	ne
 800596c:	2301      	movne	r3, #1
 800596e:	2300      	moveq	r3, #0
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d006      	beq.n	8005984 <_ZN10SideSensor12updateStatusEv+0x198>
				cnt_l++;
 8005976:	4b20      	ldr	r3, [pc, #128]	; (80059f8 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005978:	881b      	ldrh	r3, [r3, #0]
 800597a:	3301      	adds	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	4b1e      	ldr	r3, [pc, #120]	; (80059f8 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005980:	801a      	strh	r2, [r3, #0]
 8005982:	e002      	b.n	800598a <_ZN10SideSensor12updateStatusEv+0x19e>
			}
			else{
				cnt_l = 0;
 8005984:	4b1c      	ldr	r3, [pc, #112]	; (80059f8 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005986:	2200      	movs	r2, #0
 8005988:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800598a:	4b1b      	ldr	r3, [pc, #108]	; (80059f8 <_ZN10SideSensor12updateStatusEv+0x20c>)
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	2b04      	cmp	r3, #4
 8005990:	d916      	bls.n	80059c0 <_ZN10SideSensor12updateStatusEv+0x1d4>
				status_ ^= 0x02;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	f083 0302 	eor.w	r3, r3, #2
 800599a:	b29a      	uxth	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	801a      	strh	r2, [r3, #0]
				status_L_ = false;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	709a      	strb	r2, [r3, #2]
				white_flag2 = false;
 80059a6:	4b13      	ldr	r3, [pc, #76]	; (80059f4 <_ZN10SideSensor12updateStatusEv+0x208>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	889b      	ldrh	r3, [r3, #4]
 80059b0:	3301      	adds	r3, #1
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	809a      	strh	r2, [r3, #4]
				mon_cnt_l = white_line_cnt_l_;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	889a      	ldrh	r2, [r3, #4]
 80059bc:	4b0f      	ldr	r3, [pc, #60]	; (80059fc <_ZN10SideSensor12updateStatusEv+0x210>)
 80059be:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	881a      	ldrh	r2, [r3, #0]
 80059c4:	4b0e      	ldr	r3, [pc, #56]	; (8005a00 <_ZN10SideSensor12updateStatusEv+0x214>)
 80059c6:	801a      	strh	r2, [r3, #0]
		mon_status_L = status_L_;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	789a      	ldrb	r2, [r3, #2]
 80059cc:	4b0d      	ldr	r3, [pc, #52]	; (8005a04 <_ZN10SideSensor12updateStatusEv+0x218>)
 80059ce:	701a      	strb	r2, [r3, #0]
		mon_status_R = status_R_;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	78da      	ldrb	r2, [r3, #3]
 80059d4:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <_ZN10SideSensor12updateStatusEv+0x21c>)
 80059d6:	701a      	strb	r2, [r3, #0]
	}

}
 80059d8:	bf00      	nop
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	200002a4 	.word	0x200002a4
 80059e4:	40021000 	.word	0x40021000
 80059e8:	40020c00 	.word	0x40020c00
 80059ec:	200002a8 	.word	0x200002a8
 80059f0:	200002a2 	.word	0x200002a2
 80059f4:	200002a5 	.word	0x200002a5
 80059f8:	200002a6 	.word	0x200002a6
 80059fc:	200002a0 	.word	0x200002a0
 8005a00:	2000029c 	.word	0x2000029c
 8005a04:	2000029e 	.word	0x2000029e
 8005a08:	2000029f 	.word	0x2000029f

08005a0c <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
	return status_L_;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	789b      	ldrb	r3, [r3, #2]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	88db      	ldrh	r3, [r3, #6]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	80da      	strh	r2, [r3, #6]
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	721a      	strb	r2, [r3, #8]
}
 8005a6a:	bf00      	nop
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	721a      	strb	r2, [r3, #8]
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	7a1b      	ldrb	r3, [r3, #8]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	3308      	adds	r3, #8
 8005ab8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005abc:	2100      	movs	r1, #0
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f010 f886 	bl	8015bd0 <memset>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005aca:	811a      	strh	r2, [r3, #8]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ad2:	815a      	strh	r2, [r3, #10]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ada:	819a      	strh	r2, [r3, #12]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ae2:	81da      	strh	r2, [r3, #14]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005aea:	821a      	strh	r2, [r3, #16]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005af2:	825a      	strh	r2, [r3, #18]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2201      	movs	r2, #1
 8005af8:	829a      	strh	r2, [r3, #20]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2201      	movs	r2, #1
 8005afe:	82da      	strh	r2, [r3, #22]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2201      	movs	r2, #1
 8005b04:	831a      	strh	r2, [r3, #24]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	835a      	strh	r2, [r3, #26]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	839a      	strh	r2, [r3, #28]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2201      	movs	r2, #1
 8005b16:	83da      	strh	r2, [r3, #30]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	841a      	strh	r2, [r3, #32]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b24:	845a      	strh	r2, [r3, #34]	; 0x22
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	849a      	strh	r2, [r3, #36]	; 0x24
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b32:	84da      	strh	r2, [r3, #38]	; 0x26
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2201      	movs	r2, #1
 8005b38:	851a      	strh	r2, [r3, #40]	; 0x28
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b4e:	85da      	strh	r2, [r3, #46]	; 0x2e
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b56:	861a      	strh	r2, [r3, #48]	; 0x30
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	865a      	strh	r2, [r3, #50]	; 0x32
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2201      	movs	r2, #1
 8005b62:	869a      	strh	r2, [r3, #52]	; 0x34
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b72:	871a      	strh	r2, [r3, #56]	; 0x38
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2201      	movs	r2, #1
 8005b78:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2201      	movs	r2, #1
 8005b84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bc0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bca:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bf6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c00:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c4e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c68:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c7a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c94:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cae:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cb8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cca:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cd4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ce6:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cf0:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cfa:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d1c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d26:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d30:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d3a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d4c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d7e:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d88:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d9a:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dac:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dce:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dd8:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005df2:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e04:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f04f 0200 	mov.w	r2, #0
 8005e16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4618      	mov	r0, r3
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <_ZN20SystemIdentification10updateMsigEv>:
	logger_->saveLogs("sysident", "MSIGRES.txt");
	logger_->saveLogs2("sysident", "INPUT.txt");
}

void SystemIdentification::updateMsig()
{
 8005e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d042      	beq.n	8005ed0 <_ZN20SystemIdentification10updateMsigEv+0x98>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005e56:	461a      	mov	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3204      	adds	r2, #4
 8005e5c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005e60:	ee07 3a90 	vmov	s15, r3
 8005e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005e78:	3301      	adds	r3, #1
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005e88:	4a13      	ldr	r2, [pc, #76]	; (8005ed8 <_ZN20SystemIdentification10updateMsigEv+0xa0>)
 8005e8a:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005e92:	2bf9      	cmp	r3, #249	; 0xf9
 8005e94:	d903      	bls.n	8005e9e <_ZN20SystemIdentification10updateMsigEv+0x66>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	22fa      	movs	r2, #250	; 0xfa
 8005e9a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, inputVal_);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685c      	ldr	r4, [r3, #4]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7fa fb65 	bl	8000578 <__aeabi_f2d>
 8005eae:	4605      	mov	r5, r0
 8005eb0:	460e      	mov	r6, r1
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fa fb5d 	bl	8000578 <__aeabi_f2d>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	ec43 2b11 	vmov	d1, r2, r3
 8005ec6:	ec46 5b10 	vmov	d0, r5, r6
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f7ff f8f4 	bl	80050b8 <_ZN5Motor8setRatioEdd>

	}

}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ed8:	200002ac 	.word	0x200002ac

08005edc <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f04f 0200 	mov.w	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	605a      	str	r2, [r3, #4]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f04f 0200 	mov.w	r2, #0
 8005f00:	609a      	str	r2, [r3, #8]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f04f 0200 	mov.w	r2, #0
 8005f08:	60da      	str	r2, [r3, #12]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	611a      	str	r2, [r3, #16]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f04f 0200 	mov.w	r2, #0
 8005f18:	615a      	str	r2, [r3, #20]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	619a      	str	r2, [r3, #24]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f04f 0200 	mov.w	r2, #0
 8005f28:	61da      	str	r2, [r3, #28]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f04f 0200 	mov.w	r2, #0
 8005f30:	621a      	str	r2, [r3, #32]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f04f 0200 	mov.w	r2, #0
 8005f38:	625a      	str	r2, [r3, #36]	; 0x24
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f04f 0200 	mov.w	r2, #0
 8005f50:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4618      	mov	r0, r3
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	0000      	movs	r0, r0
 8005f74:	0000      	movs	r0, r0
	...

08005f78 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005f78:	b590      	push	{r4, r7, lr}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f84:	f107 020c 	add.w	r2, r7, #12
 8005f88:	f107 0110 	add.w	r1, r7, #16
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fb fb77 	bl	8001680 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005f92:	ed97 7a04 	vldr	s14, [r7, #16]
 8005f96:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f9e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005fa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005fa6:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8005faa:	6978      	ldr	r0, [r7, #20]
 8005fac:	f7fa fae4 	bl	8000578 <__aeabi_f2d>
 8005fb0:	a30e      	add	r3, pc, #56	; (adr r3, 8005fec <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 8005fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb6:	f7fa fb37 	bl	8000628 <__aeabi_dmul>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	460c      	mov	r4, r1
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	f7fa fe29 	bl	8000c18 <__aeabi_d2f>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	4a05      	ldr	r2, [pc, #20]	; (8005fe8 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 8005fd2:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	ee07 3a90 	vmov	s15, r3
}
 8005fdc:	eeb0 0a67 	vmov.f32	s0, s15
 8005fe0:	371c      	adds	r7, #28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd90      	pop	{r4, r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	200002b0 	.word	0x200002b0
 8005fec:	1ab1d998 	.word	0x1ab1d998
 8005ff0:	3f7830b5 	.word	0x3f7830b5
 8005ff4:	00000000 	.word	0x00000000

08005ff8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	ed93 7a00 	vldr	s14, [r3]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	edd3 7a02 	vldr	s15, [r3, #8]
 800600c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006010:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800601a:	2b00      	cmp	r3, #0
 800601c:	d007      	beq.n	800602e <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 800601e:	4b48      	ldr	r3, [pc, #288]	; (8006140 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	edd3 7a04 	vldr	s15, [r3, #16]
 8006034:	ed97 7a05 	vldr	s14, [r7, #20]
 8006038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800603c:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8006040:	4b3f      	ldr	r3, [pc, #252]	; (8006140 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4618      	mov	r0, r3
 8006046:	f7fa fa97 	bl	8000578 <__aeabi_f2d>
 800604a:	4604      	mov	r4, r0
 800604c:	460d      	mov	r5, r1
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	ed93 7a06 	vldr	s14, [r3, #24]
 8006054:	edd7 7a05 	vldr	s15, [r7, #20]
 8006058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800605c:	ee17 0a90 	vmov	r0, s15
 8006060:	f7fa fa8a 	bl	8000578 <__aeabi_f2d>
 8006064:	a334      	add	r3, pc, #208	; (adr r3, 8006138 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8006066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606a:	f7fa fadd 	bl	8000628 <__aeabi_dmul>
 800606e:	4602      	mov	r2, r0
 8006070:	460b      	mov	r3, r1
 8006072:	4620      	mov	r0, r4
 8006074:	4629      	mov	r1, r5
 8006076:	f7fa f921 	bl	80002bc <__adddf3>
 800607a:	4603      	mov	r3, r0
 800607c:	460c      	mov	r4, r1
 800607e:	4618      	mov	r0, r3
 8006080:	4621      	mov	r1, r4
 8006082:	f7fa fdc9 	bl	8000c18 <__aeabi_d2f>
 8006086:	4602      	mov	r2, r0
 8006088:	4b2d      	ldr	r3, [pc, #180]	; (8006140 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800608a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	ed93 7a05 	vldr	s14, [r3, #20]
 8006092:	4b2c      	ldr	r3, [pc, #176]	; (8006144 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8006094:	edd3 7a00 	vldr	s15, [r3]
 8006098:	edd7 6a05 	vldr	s13, [r7, #20]
 800609c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80060a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060a4:	ee17 0a90 	vmov	r0, s15
 80060a8:	f7fa fa66 	bl	8000578 <__aeabi_f2d>
 80060ac:	a322      	add	r3, pc, #136	; (adr r3, 8006138 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	f7fa fbe3 	bl	800087c <__aeabi_ddiv>
 80060b6:	4603      	mov	r3, r0
 80060b8:	460c      	mov	r4, r1
 80060ba:	4618      	mov	r0, r3
 80060bc:	4621      	mov	r1, r4
 80060be:	f7fa fdab 	bl	8000c18 <__aeabi_d2f>
 80060c2:	4603      	mov	r3, r0
 80060c4:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 80060c6:	ed97 7a04 	vldr	s14, [r7, #16]
 80060ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80060ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80060d2:	4b1b      	ldr	r3, [pc, #108]	; (8006140 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80060d4:	edd3 7a00 	vldr	s15, [r3]
 80060d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060dc:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80060ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80060ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060f2:	ee17 0a90 	vmov	r0, s15
 80060f6:	f7fa fa3f 	bl	8000578 <__aeabi_f2d>
 80060fa:	4605      	mov	r5, r0
 80060fc:	460e      	mov	r6, r1
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006104:	ed97 7a02 	vldr	s14, [r7, #8]
 8006108:	ee77 7a67 	vsub.f32	s15, s14, s15
 800610c:	ee17 0a90 	vmov	r0, s15
 8006110:	f7fa fa32 	bl	8000578 <__aeabi_f2d>
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	ec43 2b11 	vmov	d1, r2, r3
 800611c:	ec46 5b10 	vmov	d0, r5, r6
 8006120:	4620      	mov	r0, r4
 8006122:	f7fe ffc9 	bl	80050b8 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8006126:	4a07      	ldr	r2, [pc, #28]	; (8006144 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	6013      	str	r3, [r2, #0]
}
 800612c:	bf00      	nop
 800612e:	371c      	adds	r7, #28
 8006130:	46bd      	mov	sp, r7
 8006132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006134:	f3af 8000 	nop.w
 8006138:	d2f1a9fc 	.word	0xd2f1a9fc
 800613c:	3f50624d 	.word	0x3f50624d
 8006140:	200002b8 	.word	0x200002b8
 8006144:	200002b4 	.word	0x200002b4

08006148 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	ed87 0a02 	vstr	s0, [r7, #8]
 8006154:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	605a      	str	r2, [r3, #4]
}
 8006164:	bf00      	nop
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	ed87 0a02 	vstr	s0, [r7, #8]
 800617c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800618c:	bf00      	nop
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80061a4:	edc7 0a01 	vstr	s1, [r7, #4]
 80061a8:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	615a      	str	r2, [r3, #20]
}
 80061be:	bf00      	nop
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b085      	sub	sp, #20
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	60f8      	str	r0, [r7, #12]
 80061d2:	ed87 0a02 	vstr	s0, [r7, #8]
 80061d6:	edc7 0a01 	vstr	s1, [r7, #4]
 80061da:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	621a      	str	r2, [r3, #32]
}
 80061f0:	bf00      	nop
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7ff feb7 	bl	8005f78 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7ff feef 	bl	8005ff8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 800621a:	bf00      	nop
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
	...

08006248 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8006278 <_ZN12VelocityCtrl4stopEv+0x30>
 8006260:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8006278 <_ZN12VelocityCtrl4stopEv+0x30>
 8006264:	4618      	mov	r0, r3
 8006266:	f7fe ff27 	bl	80050b8 <_ZN5Motor8setRatioEdd>

}
 800626a:	bf00      	nop
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	f3af 8000 	nop.w
	...

08006280 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a1e      	ldr	r2, [pc, #120]	; (8006308 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d10e      	bne.n	80062b0 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8006292:	f001 fe11 	bl	8007eb8 <cppFlip100ns>

		tim7_timer++;
 8006296:	4b1d      	ldr	r3, [pc, #116]	; (800630c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3301      	adds	r3, #1
 800629c:	4a1b      	ldr	r2, [pc, #108]	; (800630c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800629e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 80062a0:	4b1a      	ldr	r3, [pc, #104]	; (800630c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a1a      	ldr	r2, [pc, #104]	; (8006310 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d902      	bls.n	80062b0 <HAL_TIM_PeriodElapsedCallback+0x30>
 80062aa:	4b18      	ldr	r3, [pc, #96]	; (800630c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a17      	ldr	r2, [pc, #92]	; (8006314 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d10e      	bne.n	80062d8 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 80062ba:	f001 fdcd 	bl	8007e58 <cppFlip1ms>

		tim6_timer++;
 80062be:	4b16      	ldr	r3, [pc, #88]	; (8006318 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	3301      	adds	r3, #1
 80062c4:	4a14      	ldr	r2, [pc, #80]	; (8006318 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80062c6:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 80062c8:	4b13      	ldr	r3, [pc, #76]	; (8006318 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a10      	ldr	r2, [pc, #64]	; (8006310 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d902      	bls.n	80062d8 <HAL_TIM_PeriodElapsedCallback+0x58>
 80062d2:	4b11      	ldr	r3, [pc, #68]	; (8006318 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a0f      	ldr	r2, [pc, #60]	; (800631c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d10e      	bne.n	8006300 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 80062e2:	f001 fdf3 	bl	8007ecc <cppFlip10ms>

		tim13_timer++;
 80062e6:	4b0e      	ldr	r3, [pc, #56]	; (8006320 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3301      	adds	r3, #1
 80062ec:	4a0c      	ldr	r2, [pc, #48]	; (8006320 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80062ee:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 80062f0:	4b0b      	ldr	r3, [pc, #44]	; (8006320 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a06      	ldr	r2, [pc, #24]	; (8006310 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d902      	bls.n	8006300 <HAL_TIM_PeriodElapsedCallback+0x80>
 80062fa:	4b09      	ldr	r3, [pc, #36]	; (8006320 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]
	}

}
 8006300:	bf00      	nop
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	40001400 	.word	0x40001400
 800630c:	20044a5c 	.word	0x20044a5c
 8006310:	0001869f 	.word	0x0001869f
 8006314:	40001000 	.word	0x40001000
 8006318:	20044a18 	.word	0x20044a18
 800631c:	40001c00 	.word	0x40001c00
 8006320:	20044a60 	.word	0x20044a60

08006324 <init>:

void init()
{
 8006324:	b580      	push	{r7, lr}
 8006326:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8006328:	2201      	movs	r2, #1
 800632a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800632e:	4808      	ldr	r0, [pc, #32]	; (8006350 <init+0x2c>)
 8006330:	f005 f970 	bl	800b614 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8006334:	4807      	ldr	r0, [pc, #28]	; (8006354 <init+0x30>)
 8006336:	f009 f838 	bl	800f3aa <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 800633a:	4807      	ldr	r0, [pc, #28]	; (8006358 <init+0x34>)
 800633c:	f009 f835 	bl	800f3aa <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8006340:	4806      	ldr	r0, [pc, #24]	; (800635c <init+0x38>)
 8006342:	f009 f832 	bl	800f3aa <HAL_TIM_Base_Start_IT>

	cppInit();
 8006346:	f001 fce3 	bl	8007d10 <cppInit>

	//path_following_initialize();

}
 800634a:	bf00      	nop
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	40021000 	.word	0x40021000
 8006354:	20044b44 	.word	0x20044b44
 8006358:	20044ce8 	.word	0x20044ce8
 800635c:	20044a64 	.word	0x20044a64

08006360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006364:	f003 fe4e 	bl	800a004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006368:	f000 f82a 	bl	80063c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800636c:	f000 fdbc 	bl	8006ee8 <MX_GPIO_Init>
  MX_DMA_Init();
 8006370:	f000 fd8a 	bl	8006e88 <MX_DMA_Init>
  MX_I2C2_Init();
 8006374:	f000 f9e8 	bl	8006748 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8006378:	f000 fa14 	bl	80067a4 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 800637c:	f000 fa32 	bl	80067e4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8006380:	f000 fa66 	bl	8006850 <MX_TIM1_Init>
  MX_TIM4_Init();
 8006384:	f000 fb70 	bl	8006a68 <MX_TIM4_Init>
  MX_TIM8_Init();
 8006388:	f000 fc3c 	bl	8006c04 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800638c:	f000 fd52 	bl	8006e34 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8006390:	f00a ffde 	bl	8011350 <MX_FATFS_Init>
  MX_TIM6_Init();
 8006394:	f000 fbcc 	bl	8006b30 <MX_TIM6_Init>
  MX_I2C1_Init();
 8006398:	f000 f9a8 	bl	80066ec <MX_I2C1_Init>
  MX_TIM3_Init();
 800639c:	f000 fb00 	bl	80069a0 <MX_TIM3_Init>
  MX_TIM10_Init();
 80063a0:	f000 fc88 	bl	8006cb4 <MX_TIM10_Init>
  MX_TIM11_Init();
 80063a4:	f000 fcd4 	bl	8006d50 <MX_TIM11_Init>
  MX_ADC2_Init();
 80063a8:	f000 f898 	bl	80064dc <MX_ADC2_Init>
  MX_TIM7_Init();
 80063ac:	f000 fbf6 	bl	8006b9c <MX_TIM7_Init>
  MX_TIM13_Init();
 80063b0:	f000 fd1c 	bl	8006dec <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 80063b4:	f7ff ffb6 	bl	8006324 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 80063b8:	f001 fdb6 	bl	8007f28 <cppLoop>
 80063bc:	e7fc      	b.n	80063b8 <main+0x58>
	...

080063c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b0a4      	sub	sp, #144	; 0x90
 80063c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80063c6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80063ca:	2234      	movs	r2, #52	; 0x34
 80063cc:	2100      	movs	r1, #0
 80063ce:	4618      	mov	r0, r3
 80063d0:	f00f fbfe 	bl	8015bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80063d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80063d8:	2200      	movs	r2, #0
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	605a      	str	r2, [r3, #4]
 80063de:	609a      	str	r2, [r3, #8]
 80063e0:	60da      	str	r2, [r3, #12]
 80063e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80063e4:	f107 030c 	add.w	r3, r7, #12
 80063e8:	223c      	movs	r2, #60	; 0x3c
 80063ea:	2100      	movs	r1, #0
 80063ec:	4618      	mov	r0, r3
 80063ee:	f00f fbef 	bl	8015bd0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80063f2:	2300      	movs	r3, #0
 80063f4:	60bb      	str	r3, [r7, #8]
 80063f6:	4b37      	ldr	r3, [pc, #220]	; (80064d4 <SystemClock_Config+0x114>)
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	4a36      	ldr	r2, [pc, #216]	; (80064d4 <SystemClock_Config+0x114>)
 80063fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006400:	6413      	str	r3, [r2, #64]	; 0x40
 8006402:	4b34      	ldr	r3, [pc, #208]	; (80064d4 <SystemClock_Config+0x114>)
 8006404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800640a:	60bb      	str	r3, [r7, #8]
 800640c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800640e:	2300      	movs	r3, #0
 8006410:	607b      	str	r3, [r7, #4]
 8006412:	4b31      	ldr	r3, [pc, #196]	; (80064d8 <SystemClock_Config+0x118>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a30      	ldr	r2, [pc, #192]	; (80064d8 <SystemClock_Config+0x118>)
 8006418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800641c:	6013      	str	r3, [r2, #0]
 800641e:	4b2e      	ldr	r3, [pc, #184]	; (80064d8 <SystemClock_Config+0x118>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006426:	607b      	str	r3, [r7, #4]
 8006428:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800642a:	2301      	movs	r3, #1
 800642c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800642e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006432:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006434:	2302      	movs	r3, #2
 8006436:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006438:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800643c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 800643e:	2308      	movs	r3, #8
 8006440:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8006442:	23b4      	movs	r3, #180	; 0xb4
 8006444:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006448:	2302      	movs	r3, #2
 800644a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800644e:	2308      	movs	r3, #8
 8006450:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006454:	2302      	movs	r3, #2
 8006456:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800645a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800645e:	4618      	mov	r0, r3
 8006460:	f006 fcfa 	bl	800ce58 <HAL_RCC_OscConfig>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800646a:	f000 fe7f 	bl	800716c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800646e:	f006 f875 	bl	800c55c <HAL_PWREx_EnableOverDrive>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8006478:	f000 fe78 	bl	800716c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800647c:	230f      	movs	r3, #15
 800647e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006480:	2302      	movs	r3, #2
 8006482:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006484:	2300      	movs	r3, #0
 8006486:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006488:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800648c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800648e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006492:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006494:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006498:	2105      	movs	r1, #5
 800649a:	4618      	mov	r0, r3
 800649c:	f006 f8ae 	bl	800c5fc <HAL_RCC_ClockConfig>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <SystemClock_Config+0xea>
  {
    Error_Handler();
 80064a6:	f000 fe61 	bl	800716c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80064aa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80064ae:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80064b0:	2300      	movs	r3, #0
 80064b2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80064b4:	2300      	movs	r3, #0
 80064b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80064b8:	f107 030c 	add.w	r3, r7, #12
 80064bc:	4618      	mov	r0, r3
 80064be:	f006 fa8d 	bl	800c9dc <HAL_RCCEx_PeriphCLKConfig>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80064c8:	f000 fe50 	bl	800716c <Error_Handler>
  }
}
 80064cc:	bf00      	nop
 80064ce:	3790      	adds	r7, #144	; 0x90
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	40023800 	.word	0x40023800
 80064d8:	40007000 	.word	0x40007000

080064dc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80064e2:	463b      	mov	r3, r7
 80064e4:	2200      	movs	r2, #0
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	605a      	str	r2, [r3, #4]
 80064ea:	609a      	str	r2, [r3, #8]
 80064ec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80064ee:	4b7c      	ldr	r3, [pc, #496]	; (80066e0 <MX_ADC2_Init+0x204>)
 80064f0:	4a7c      	ldr	r2, [pc, #496]	; (80066e4 <MX_ADC2_Init+0x208>)
 80064f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80064f4:	4b7a      	ldr	r3, [pc, #488]	; (80066e0 <MX_ADC2_Init+0x204>)
 80064f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80064fa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80064fc:	4b78      	ldr	r3, [pc, #480]	; (80066e0 <MX_ADC2_Init+0x204>)
 80064fe:	2200      	movs	r2, #0
 8006500:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8006502:	4b77      	ldr	r3, [pc, #476]	; (80066e0 <MX_ADC2_Init+0x204>)
 8006504:	2201      	movs	r2, #1
 8006506:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006508:	4b75      	ldr	r3, [pc, #468]	; (80066e0 <MX_ADC2_Init+0x204>)
 800650a:	2201      	movs	r2, #1
 800650c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800650e:	4b74      	ldr	r3, [pc, #464]	; (80066e0 <MX_ADC2_Init+0x204>)
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006516:	4b72      	ldr	r3, [pc, #456]	; (80066e0 <MX_ADC2_Init+0x204>)
 8006518:	2200      	movs	r2, #0
 800651a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800651c:	4b70      	ldr	r3, [pc, #448]	; (80066e0 <MX_ADC2_Init+0x204>)
 800651e:	4a72      	ldr	r2, [pc, #456]	; (80066e8 <MX_ADC2_Init+0x20c>)
 8006520:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006522:	4b6f      	ldr	r3, [pc, #444]	; (80066e0 <MX_ADC2_Init+0x204>)
 8006524:	2200      	movs	r2, #0
 8006526:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8006528:	4b6d      	ldr	r3, [pc, #436]	; (80066e0 <MX_ADC2_Init+0x204>)
 800652a:	220e      	movs	r2, #14
 800652c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800652e:	4b6c      	ldr	r3, [pc, #432]	; (80066e0 <MX_ADC2_Init+0x204>)
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006536:	4b6a      	ldr	r3, [pc, #424]	; (80066e0 <MX_ADC2_Init+0x204>)
 8006538:	2201      	movs	r2, #1
 800653a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800653c:	4868      	ldr	r0, [pc, #416]	; (80066e0 <MX_ADC2_Init+0x204>)
 800653e:	f003 fdf5 	bl	800a12c <HAL_ADC_Init>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006548:	f000 fe10 	bl	800716c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800654c:	230a      	movs	r3, #10
 800654e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006550:	2301      	movs	r3, #1
 8006552:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8006554:	2306      	movs	r3, #6
 8006556:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006558:	463b      	mov	r3, r7
 800655a:	4619      	mov	r1, r3
 800655c:	4860      	ldr	r0, [pc, #384]	; (80066e0 <MX_ADC2_Init+0x204>)
 800655e:	f003 ff39 	bl	800a3d4 <HAL_ADC_ConfigChannel>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d001      	beq.n	800656c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8006568:	f000 fe00 	bl	800716c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800656c:	230b      	movs	r3, #11
 800656e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006570:	2302      	movs	r3, #2
 8006572:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006574:	463b      	mov	r3, r7
 8006576:	4619      	mov	r1, r3
 8006578:	4859      	ldr	r0, [pc, #356]	; (80066e0 <MX_ADC2_Init+0x204>)
 800657a:	f003 ff2b 	bl	800a3d4 <HAL_ADC_ConfigChannel>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8006584:	f000 fdf2 	bl	800716c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006588:	230c      	movs	r3, #12
 800658a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800658c:	2303      	movs	r3, #3
 800658e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006590:	463b      	mov	r3, r7
 8006592:	4619      	mov	r1, r3
 8006594:	4852      	ldr	r0, [pc, #328]	; (80066e0 <MX_ADC2_Init+0x204>)
 8006596:	f003 ff1d 	bl	800a3d4 <HAL_ADC_ConfigChannel>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d001      	beq.n	80065a4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80065a0:	f000 fde4 	bl	800716c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80065a4:	230d      	movs	r3, #13
 80065a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80065a8:	2304      	movs	r3, #4
 80065aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80065ac:	463b      	mov	r3, r7
 80065ae:	4619      	mov	r1, r3
 80065b0:	484b      	ldr	r0, [pc, #300]	; (80066e0 <MX_ADC2_Init+0x204>)
 80065b2:	f003 ff0f 	bl	800a3d4 <HAL_ADC_ConfigChannel>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d001      	beq.n	80065c0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80065bc:	f000 fdd6 	bl	800716c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80065c0:	2300      	movs	r3, #0
 80065c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80065c4:	2305      	movs	r3, #5
 80065c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80065c8:	463b      	mov	r3, r7
 80065ca:	4619      	mov	r1, r3
 80065cc:	4844      	ldr	r0, [pc, #272]	; (80066e0 <MX_ADC2_Init+0x204>)
 80065ce:	f003 ff01 	bl	800a3d4 <HAL_ADC_ConfigChannel>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80065d8:	f000 fdc8 	bl	800716c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80065dc:	2301      	movs	r3, #1
 80065de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80065e0:	2306      	movs	r3, #6
 80065e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80065e4:	463b      	mov	r3, r7
 80065e6:	4619      	mov	r1, r3
 80065e8:	483d      	ldr	r0, [pc, #244]	; (80066e0 <MX_ADC2_Init+0x204>)
 80065ea:	f003 fef3 	bl	800a3d4 <HAL_ADC_ConfigChannel>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80065f4:	f000 fdba 	bl	800716c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80065f8:	2302      	movs	r3, #2
 80065fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80065fc:	2307      	movs	r3, #7
 80065fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006600:	463b      	mov	r3, r7
 8006602:	4619      	mov	r1, r3
 8006604:	4836      	ldr	r0, [pc, #216]	; (80066e0 <MX_ADC2_Init+0x204>)
 8006606:	f003 fee5 	bl	800a3d4 <HAL_ADC_ConfigChannel>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d001      	beq.n	8006614 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8006610:	f000 fdac 	bl	800716c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006614:	2303      	movs	r3, #3
 8006616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8006618:	2308      	movs	r3, #8
 800661a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800661c:	463b      	mov	r3, r7
 800661e:	4619      	mov	r1, r3
 8006620:	482f      	ldr	r0, [pc, #188]	; (80066e0 <MX_ADC2_Init+0x204>)
 8006622:	f003 fed7 	bl	800a3d4 <HAL_ADC_ConfigChannel>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 800662c:	f000 fd9e 	bl	800716c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006630:	2304      	movs	r3, #4
 8006632:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8006634:	2309      	movs	r3, #9
 8006636:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006638:	463b      	mov	r3, r7
 800663a:	4619      	mov	r1, r3
 800663c:	4828      	ldr	r0, [pc, #160]	; (80066e0 <MX_ADC2_Init+0x204>)
 800663e:	f003 fec9 	bl	800a3d4 <HAL_ADC_ConfigChannel>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d001      	beq.n	800664c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8006648:	f000 fd90 	bl	800716c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800664c:	2305      	movs	r3, #5
 800664e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8006650:	230a      	movs	r3, #10
 8006652:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006654:	463b      	mov	r3, r7
 8006656:	4619      	mov	r1, r3
 8006658:	4821      	ldr	r0, [pc, #132]	; (80066e0 <MX_ADC2_Init+0x204>)
 800665a:	f003 febb 	bl	800a3d4 <HAL_ADC_ConfigChannel>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d001      	beq.n	8006668 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8006664:	f000 fd82 	bl	800716c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006668:	2306      	movs	r3, #6
 800666a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800666c:	230b      	movs	r3, #11
 800666e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006670:	463b      	mov	r3, r7
 8006672:	4619      	mov	r1, r3
 8006674:	481a      	ldr	r0, [pc, #104]	; (80066e0 <MX_ADC2_Init+0x204>)
 8006676:	f003 fead 	bl	800a3d4 <HAL_ADC_ConfigChannel>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8006680:	f000 fd74 	bl	800716c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8006684:	2307      	movs	r3, #7
 8006686:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8006688:	230c      	movs	r3, #12
 800668a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800668c:	463b      	mov	r3, r7
 800668e:	4619      	mov	r1, r3
 8006690:	4813      	ldr	r0, [pc, #76]	; (80066e0 <MX_ADC2_Init+0x204>)
 8006692:	f003 fe9f 	bl	800a3d4 <HAL_ADC_ConfigChannel>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d001      	beq.n	80066a0 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 800669c:	f000 fd66 	bl	800716c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80066a0:	2308      	movs	r3, #8
 80066a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80066a4:	230d      	movs	r3, #13
 80066a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80066a8:	463b      	mov	r3, r7
 80066aa:	4619      	mov	r1, r3
 80066ac:	480c      	ldr	r0, [pc, #48]	; (80066e0 <MX_ADC2_Init+0x204>)
 80066ae:	f003 fe91 	bl	800a3d4 <HAL_ADC_ConfigChannel>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80066b8:	f000 fd58 	bl	800716c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80066bc:	2309      	movs	r3, #9
 80066be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80066c0:	230e      	movs	r3, #14
 80066c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80066c4:	463b      	mov	r3, r7
 80066c6:	4619      	mov	r1, r3
 80066c8:	4805      	ldr	r0, [pc, #20]	; (80066e0 <MX_ADC2_Init+0x204>)
 80066ca:	f003 fe83 	bl	800a3d4 <HAL_ADC_ConfigChannel>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 80066d4:	f000 fd4a 	bl	800716c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80066d8:	bf00      	nop
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	200448e8 	.word	0x200448e8
 80066e4:	40012100 	.word	0x40012100
 80066e8:	0f000001 	.word	0x0f000001

080066ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80066f0:	4b12      	ldr	r3, [pc, #72]	; (800673c <MX_I2C1_Init+0x50>)
 80066f2:	4a13      	ldr	r2, [pc, #76]	; (8006740 <MX_I2C1_Init+0x54>)
 80066f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80066f6:	4b11      	ldr	r3, [pc, #68]	; (800673c <MX_I2C1_Init+0x50>)
 80066f8:	4a12      	ldr	r2, [pc, #72]	; (8006744 <MX_I2C1_Init+0x58>)
 80066fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80066fc:	4b0f      	ldr	r3, [pc, #60]	; (800673c <MX_I2C1_Init+0x50>)
 80066fe:	2200      	movs	r2, #0
 8006700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006702:	4b0e      	ldr	r3, [pc, #56]	; (800673c <MX_I2C1_Init+0x50>)
 8006704:	2200      	movs	r2, #0
 8006706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006708:	4b0c      	ldr	r3, [pc, #48]	; (800673c <MX_I2C1_Init+0x50>)
 800670a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800670e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006710:	4b0a      	ldr	r3, [pc, #40]	; (800673c <MX_I2C1_Init+0x50>)
 8006712:	2200      	movs	r2, #0
 8006714:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006716:	4b09      	ldr	r3, [pc, #36]	; (800673c <MX_I2C1_Init+0x50>)
 8006718:	2200      	movs	r2, #0
 800671a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800671c:	4b07      	ldr	r3, [pc, #28]	; (800673c <MX_I2C1_Init+0x50>)
 800671e:	2200      	movs	r2, #0
 8006720:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006722:	4b06      	ldr	r3, [pc, #24]	; (800673c <MX_I2C1_Init+0x50>)
 8006724:	2280      	movs	r2, #128	; 0x80
 8006726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006728:	4804      	ldr	r0, [pc, #16]	; (800673c <MX_I2C1_Init+0x50>)
 800672a:	f004 ff8d 	bl	800b648 <HAL_I2C_Init>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006734:	f000 fd1a 	bl	800716c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006738:	bf00      	nop
 800673a:	bd80      	pop	{r7, pc}
 800673c:	20044930 	.word	0x20044930
 8006740:	40005400 	.word	0x40005400
 8006744:	000186a0 	.word	0x000186a0

08006748 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800674c:	4b12      	ldr	r3, [pc, #72]	; (8006798 <MX_I2C2_Init+0x50>)
 800674e:	4a13      	ldr	r2, [pc, #76]	; (800679c <MX_I2C2_Init+0x54>)
 8006750:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8006752:	4b11      	ldr	r3, [pc, #68]	; (8006798 <MX_I2C2_Init+0x50>)
 8006754:	4a12      	ldr	r2, [pc, #72]	; (80067a0 <MX_I2C2_Init+0x58>)
 8006756:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006758:	4b0f      	ldr	r3, [pc, #60]	; (8006798 <MX_I2C2_Init+0x50>)
 800675a:	2200      	movs	r2, #0
 800675c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800675e:	4b0e      	ldr	r3, [pc, #56]	; (8006798 <MX_I2C2_Init+0x50>)
 8006760:	2200      	movs	r2, #0
 8006762:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006764:	4b0c      	ldr	r3, [pc, #48]	; (8006798 <MX_I2C2_Init+0x50>)
 8006766:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800676a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800676c:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <MX_I2C2_Init+0x50>)
 800676e:	2200      	movs	r2, #0
 8006770:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006772:	4b09      	ldr	r3, [pc, #36]	; (8006798 <MX_I2C2_Init+0x50>)
 8006774:	2200      	movs	r2, #0
 8006776:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006778:	4b07      	ldr	r3, [pc, #28]	; (8006798 <MX_I2C2_Init+0x50>)
 800677a:	2200      	movs	r2, #0
 800677c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800677e:	4b06      	ldr	r3, [pc, #24]	; (8006798 <MX_I2C2_Init+0x50>)
 8006780:	2280      	movs	r2, #128	; 0x80
 8006782:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006784:	4804      	ldr	r0, [pc, #16]	; (8006798 <MX_I2C2_Init+0x50>)
 8006786:	f004 ff5f 	bl	800b648 <HAL_I2C_Init>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006790:	f000 fcec 	bl	800716c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006794:	bf00      	nop
 8006796:	bd80      	pop	{r7, pc}
 8006798:	200449c4 	.word	0x200449c4
 800679c:	40005800 	.word	0x40005800
 80067a0:	000186a0 	.word	0x000186a0

080067a4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80067a4:	b480      	push	{r7}
 80067a6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80067a8:	4b0c      	ldr	r3, [pc, #48]	; (80067dc <MX_SDIO_SD_Init+0x38>)
 80067aa:	4a0d      	ldr	r2, [pc, #52]	; (80067e0 <MX_SDIO_SD_Init+0x3c>)
 80067ac:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80067ae:	4b0b      	ldr	r3, [pc, #44]	; (80067dc <MX_SDIO_SD_Init+0x38>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80067b4:	4b09      	ldr	r3, [pc, #36]	; (80067dc <MX_SDIO_SD_Init+0x38>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80067ba:	4b08      	ldr	r3, [pc, #32]	; (80067dc <MX_SDIO_SD_Init+0x38>)
 80067bc:	2200      	movs	r2, #0
 80067be:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80067c0:	4b06      	ldr	r3, [pc, #24]	; (80067dc <MX_SDIO_SD_Init+0x38>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80067c6:	4b05      	ldr	r3, [pc, #20]	; (80067dc <MX_SDIO_SD_Init+0x38>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80067cc:	4b03      	ldr	r3, [pc, #12]	; (80067dc <MX_SDIO_SD_Init+0x38>)
 80067ce:	2202      	movs	r2, #2
 80067d0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80067d2:	bf00      	nop
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	20044bc4 	.word	0x20044bc4
 80067e0:	40012c00 	.word	0x40012c00

080067e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80067e8:	4b17      	ldr	r3, [pc, #92]	; (8006848 <MX_SPI2_Init+0x64>)
 80067ea:	4a18      	ldr	r2, [pc, #96]	; (800684c <MX_SPI2_Init+0x68>)
 80067ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80067ee:	4b16      	ldr	r3, [pc, #88]	; (8006848 <MX_SPI2_Init+0x64>)
 80067f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80067f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80067f6:	4b14      	ldr	r3, [pc, #80]	; (8006848 <MX_SPI2_Init+0x64>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80067fc:	4b12      	ldr	r3, [pc, #72]	; (8006848 <MX_SPI2_Init+0x64>)
 80067fe:	2200      	movs	r2, #0
 8006800:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006802:	4b11      	ldr	r3, [pc, #68]	; (8006848 <MX_SPI2_Init+0x64>)
 8006804:	2202      	movs	r2, #2
 8006806:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006808:	4b0f      	ldr	r3, [pc, #60]	; (8006848 <MX_SPI2_Init+0x64>)
 800680a:	2201      	movs	r2, #1
 800680c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800680e:	4b0e      	ldr	r3, [pc, #56]	; (8006848 <MX_SPI2_Init+0x64>)
 8006810:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006814:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006816:	4b0c      	ldr	r3, [pc, #48]	; (8006848 <MX_SPI2_Init+0x64>)
 8006818:	2228      	movs	r2, #40	; 0x28
 800681a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800681c:	4b0a      	ldr	r3, [pc, #40]	; (8006848 <MX_SPI2_Init+0x64>)
 800681e:	2200      	movs	r2, #0
 8006820:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006822:	4b09      	ldr	r3, [pc, #36]	; (8006848 <MX_SPI2_Init+0x64>)
 8006824:	2200      	movs	r2, #0
 8006826:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006828:	4b07      	ldr	r3, [pc, #28]	; (8006848 <MX_SPI2_Init+0x64>)
 800682a:	2200      	movs	r2, #0
 800682c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800682e:	4b06      	ldr	r3, [pc, #24]	; (8006848 <MX_SPI2_Init+0x64>)
 8006830:	220a      	movs	r2, #10
 8006832:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006834:	4804      	ldr	r0, [pc, #16]	; (8006848 <MX_SPI2_Init+0x64>)
 8006836:	f008 f839 	bl	800e8ac <HAL_SPI_Init>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006840:	f000 fc94 	bl	800716c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006844:	bf00      	nop
 8006846:	bd80      	pop	{r7, pc}
 8006848:	20044810 	.word	0x20044810
 800684c:	40003800 	.word	0x40003800

08006850 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b09a      	sub	sp, #104	; 0x68
 8006854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006856:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800685a:	2224      	movs	r2, #36	; 0x24
 800685c:	2100      	movs	r1, #0
 800685e:	4618      	mov	r0, r3
 8006860:	f00f f9b6 	bl	8015bd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006864:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006868:	2200      	movs	r2, #0
 800686a:	601a      	str	r2, [r3, #0]
 800686c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800686e:	f107 0320 	add.w	r3, r7, #32
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	605a      	str	r2, [r3, #4]
 8006878:	609a      	str	r2, [r3, #8]
 800687a:	60da      	str	r2, [r3, #12]
 800687c:	611a      	str	r2, [r3, #16]
 800687e:	615a      	str	r2, [r3, #20]
 8006880:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006882:	463b      	mov	r3, r7
 8006884:	2220      	movs	r2, #32
 8006886:	2100      	movs	r1, #0
 8006888:	4618      	mov	r0, r3
 800688a:	f00f f9a1 	bl	8015bd0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800688e:	4b42      	ldr	r3, [pc, #264]	; (8006998 <MX_TIM1_Init+0x148>)
 8006890:	4a42      	ldr	r2, [pc, #264]	; (800699c <MX_TIM1_Init+0x14c>)
 8006892:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006894:	4b40      	ldr	r3, [pc, #256]	; (8006998 <MX_TIM1_Init+0x148>)
 8006896:	2200      	movs	r2, #0
 8006898:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800689a:	4b3f      	ldr	r3, [pc, #252]	; (8006998 <MX_TIM1_Init+0x148>)
 800689c:	2200      	movs	r2, #0
 800689e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80068a0:	4b3d      	ldr	r3, [pc, #244]	; (8006998 <MX_TIM1_Init+0x148>)
 80068a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068a8:	4b3b      	ldr	r3, [pc, #236]	; (8006998 <MX_TIM1_Init+0x148>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80068ae:	4b3a      	ldr	r3, [pc, #232]	; (8006998 <MX_TIM1_Init+0x148>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068b4:	4b38      	ldr	r3, [pc, #224]	; (8006998 <MX_TIM1_Init+0x148>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80068ba:	4837      	ldr	r0, [pc, #220]	; (8006998 <MX_TIM1_Init+0x148>)
 80068bc:	f008 fd99 	bl	800f3f2 <HAL_TIM_PWM_Init>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80068c6:	f000 fc51 	bl	800716c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80068ca:	2303      	movs	r3, #3
 80068cc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80068ce:	2300      	movs	r3, #0
 80068d0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80068d2:	2301      	movs	r3, #1
 80068d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80068d6:	2300      	movs	r3, #0
 80068d8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80068da:	2300      	movs	r3, #0
 80068dc:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80068de:	2300      	movs	r3, #0
 80068e0:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80068e2:	2301      	movs	r3, #1
 80068e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80068e6:	2300      	movs	r3, #0
 80068e8:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80068ea:	2300      	movs	r3, #0
 80068ec:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80068ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80068f2:	4619      	mov	r1, r3
 80068f4:	4828      	ldr	r0, [pc, #160]	; (8006998 <MX_TIM1_Init+0x148>)
 80068f6:	f008 fde5 	bl	800f4c4 <HAL_TIM_Encoder_Init>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006900:	f000 fc34 	bl	800716c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006904:	2300      	movs	r3, #0
 8006906:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006908:	2300      	movs	r3, #0
 800690a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800690c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006910:	4619      	mov	r1, r3
 8006912:	4821      	ldr	r0, [pc, #132]	; (8006998 <MX_TIM1_Init+0x148>)
 8006914:	f009 fb0c 	bl	800ff30 <HAL_TIMEx_MasterConfigSynchronization>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800691e:	f000 fc25 	bl	800716c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006922:	2360      	movs	r3, #96	; 0x60
 8006924:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8006926:	2300      	movs	r3, #0
 8006928:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800692a:	2300      	movs	r3, #0
 800692c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800692e:	2300      	movs	r3, #0
 8006930:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006932:	2300      	movs	r3, #0
 8006934:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006936:	2300      	movs	r3, #0
 8006938:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800693a:	2300      	movs	r3, #0
 800693c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800693e:	f107 0320 	add.w	r3, r7, #32
 8006942:	2208      	movs	r2, #8
 8006944:	4619      	mov	r1, r3
 8006946:	4814      	ldr	r0, [pc, #80]	; (8006998 <MX_TIM1_Init+0x148>)
 8006948:	f008 ff8e 	bl	800f868 <HAL_TIM_PWM_ConfigChannel>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8006952:	f000 fc0b 	bl	800716c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006956:	2300      	movs	r3, #0
 8006958:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800695a:	2300      	movs	r3, #0
 800695c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800695e:	2300      	movs	r3, #0
 8006960:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006962:	2300      	movs	r3, #0
 8006964:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006966:	2300      	movs	r3, #0
 8006968:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800696a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800696e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006970:	2300      	movs	r3, #0
 8006972:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006974:	463b      	mov	r3, r7
 8006976:	4619      	mov	r1, r3
 8006978:	4807      	ldr	r0, [pc, #28]	; (8006998 <MX_TIM1_Init+0x148>)
 800697a:	f009 fb55 	bl	8010028 <HAL_TIMEx_ConfigBreakDeadTime>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8006984:	f000 fbf2 	bl	800716c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006988:	4803      	ldr	r0, [pc, #12]	; (8006998 <MX_TIM1_Init+0x148>)
 800698a:	f000 ffdf 	bl	800794c <HAL_TIM_MspPostInit>

}
 800698e:	bf00      	nop
 8006990:	3768      	adds	r7, #104	; 0x68
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	20044b84 	.word	0x20044b84
 800699c:	40010000 	.word	0x40010000

080069a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b08a      	sub	sp, #40	; 0x28
 80069a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069a6:	f107 0320 	add.w	r3, r7, #32
 80069aa:	2200      	movs	r2, #0
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80069b0:	1d3b      	adds	r3, r7, #4
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]
 80069b6:	605a      	str	r2, [r3, #4]
 80069b8:	609a      	str	r2, [r3, #8]
 80069ba:	60da      	str	r2, [r3, #12]
 80069bc:	611a      	str	r2, [r3, #16]
 80069be:	615a      	str	r2, [r3, #20]
 80069c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80069c2:	4b27      	ldr	r3, [pc, #156]	; (8006a60 <MX_TIM3_Init+0xc0>)
 80069c4:	4a27      	ldr	r2, [pc, #156]	; (8006a64 <MX_TIM3_Init+0xc4>)
 80069c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80069c8:	4b25      	ldr	r3, [pc, #148]	; (8006a60 <MX_TIM3_Init+0xc0>)
 80069ca:	2201      	movs	r2, #1
 80069cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069ce:	4b24      	ldr	r3, [pc, #144]	; (8006a60 <MX_TIM3_Init+0xc0>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 80069d4:	4b22      	ldr	r3, [pc, #136]	; (8006a60 <MX_TIM3_Init+0xc0>)
 80069d6:	f241 1293 	movw	r2, #4499	; 0x1193
 80069da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80069dc:	4b20      	ldr	r3, [pc, #128]	; (8006a60 <MX_TIM3_Init+0xc0>)
 80069de:	2200      	movs	r2, #0
 80069e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069e2:	4b1f      	ldr	r3, [pc, #124]	; (8006a60 <MX_TIM3_Init+0xc0>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80069e8:	481d      	ldr	r0, [pc, #116]	; (8006a60 <MX_TIM3_Init+0xc0>)
 80069ea:	f008 fd02 	bl	800f3f2 <HAL_TIM_PWM_Init>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80069f4:	f000 fbba 	bl	800716c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80069f8:	2300      	movs	r3, #0
 80069fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80069fc:	2300      	movs	r3, #0
 80069fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006a00:	f107 0320 	add.w	r3, r7, #32
 8006a04:	4619      	mov	r1, r3
 8006a06:	4816      	ldr	r0, [pc, #88]	; (8006a60 <MX_TIM3_Init+0xc0>)
 8006a08:	f009 fa92 	bl	800ff30 <HAL_TIMEx_MasterConfigSynchronization>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006a12:	f000 fbab 	bl	800716c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006a16:	2360      	movs	r3, #96	; 0x60
 8006a18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006a22:	2300      	movs	r3, #0
 8006a24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006a26:	1d3b      	adds	r3, r7, #4
 8006a28:	2200      	movs	r2, #0
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	480c      	ldr	r0, [pc, #48]	; (8006a60 <MX_TIM3_Init+0xc0>)
 8006a2e:	f008 ff1b 	bl	800f868 <HAL_TIM_PWM_ConfigChannel>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d001      	beq.n	8006a3c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006a38:	f000 fb98 	bl	800716c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006a3c:	1d3b      	adds	r3, r7, #4
 8006a3e:	2204      	movs	r2, #4
 8006a40:	4619      	mov	r1, r3
 8006a42:	4807      	ldr	r0, [pc, #28]	; (8006a60 <MX_TIM3_Init+0xc0>)
 8006a44:	f008 ff10 	bl	800f868 <HAL_TIM_PWM_ConfigChannel>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8006a4e:	f000 fb8d 	bl	800716c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006a52:	4803      	ldr	r0, [pc, #12]	; (8006a60 <MX_TIM3_Init+0xc0>)
 8006a54:	f000 ff7a 	bl	800794c <HAL_TIM_MspPostInit>

}
 8006a58:	bf00      	nop
 8006a5a:	3728      	adds	r7, #40	; 0x28
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	20044a1c 	.word	0x20044a1c
 8006a64:	40000400 	.word	0x40000400

08006a68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b08a      	sub	sp, #40	; 0x28
 8006a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a6e:	f107 0320 	add.w	r3, r7, #32
 8006a72:	2200      	movs	r2, #0
 8006a74:	601a      	str	r2, [r3, #0]
 8006a76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006a78:	1d3b      	adds	r3, r7, #4
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	605a      	str	r2, [r3, #4]
 8006a80:	609a      	str	r2, [r3, #8]
 8006a82:	60da      	str	r2, [r3, #12]
 8006a84:	611a      	str	r2, [r3, #16]
 8006a86:	615a      	str	r2, [r3, #20]
 8006a88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006a8a:	4b27      	ldr	r3, [pc, #156]	; (8006b28 <MX_TIM4_Init+0xc0>)
 8006a8c:	4a27      	ldr	r2, [pc, #156]	; (8006b2c <MX_TIM4_Init+0xc4>)
 8006a8e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006a90:	4b25      	ldr	r3, [pc, #148]	; (8006b28 <MX_TIM4_Init+0xc0>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a96:	4b24      	ldr	r3, [pc, #144]	; (8006b28 <MX_TIM4_Init+0xc0>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8006a9c:	4b22      	ldr	r3, [pc, #136]	; (8006b28 <MX_TIM4_Init+0xc0>)
 8006a9e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8006aa2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006aa4:	4b20      	ldr	r3, [pc, #128]	; (8006b28 <MX_TIM4_Init+0xc0>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006aaa:	4b1f      	ldr	r3, [pc, #124]	; (8006b28 <MX_TIM4_Init+0xc0>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006ab0:	481d      	ldr	r0, [pc, #116]	; (8006b28 <MX_TIM4_Init+0xc0>)
 8006ab2:	f008 fc9e 	bl	800f3f2 <HAL_TIM_PWM_Init>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d001      	beq.n	8006ac0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8006abc:	f000 fb56 	bl	800716c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006ac8:	f107 0320 	add.w	r3, r7, #32
 8006acc:	4619      	mov	r1, r3
 8006ace:	4816      	ldr	r0, [pc, #88]	; (8006b28 <MX_TIM4_Init+0xc0>)
 8006ad0:	f009 fa2e 	bl	800ff30 <HAL_TIMEx_MasterConfigSynchronization>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8006ada:	f000 fb47 	bl	800716c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006ade:	2360      	movs	r3, #96	; 0x60
 8006ae0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006aea:	2300      	movs	r3, #0
 8006aec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006aee:	1d3b      	adds	r3, r7, #4
 8006af0:	2208      	movs	r2, #8
 8006af2:	4619      	mov	r1, r3
 8006af4:	480c      	ldr	r0, [pc, #48]	; (8006b28 <MX_TIM4_Init+0xc0>)
 8006af6:	f008 feb7 	bl	800f868 <HAL_TIM_PWM_ConfigChannel>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006b00:	f000 fb34 	bl	800716c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006b04:	1d3b      	adds	r3, r7, #4
 8006b06:	220c      	movs	r2, #12
 8006b08:	4619      	mov	r1, r3
 8006b0a:	4807      	ldr	r0, [pc, #28]	; (8006b28 <MX_TIM4_Init+0xc0>)
 8006b0c:	f008 feac 	bl	800f868 <HAL_TIM_PWM_ConfigChannel>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8006b16:	f000 fb29 	bl	800716c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8006b1a:	4803      	ldr	r0, [pc, #12]	; (8006b28 <MX_TIM4_Init+0xc0>)
 8006b1c:	f000 ff16 	bl	800794c <HAL_TIM_MspPostInit>

}
 8006b20:	bf00      	nop
 8006b22:	3728      	adds	r7, #40	; 0x28
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	200448a8 	.word	0x200448a8
 8006b2c:	40000800 	.word	0x40000800

08006b30 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b36:	463b      	mov	r3, r7
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]
 8006b3c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006b3e:	4b15      	ldr	r3, [pc, #84]	; (8006b94 <MX_TIM6_Init+0x64>)
 8006b40:	4a15      	ldr	r2, [pc, #84]	; (8006b98 <MX_TIM6_Init+0x68>)
 8006b42:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8006b44:	4b13      	ldr	r3, [pc, #76]	; (8006b94 <MX_TIM6_Init+0x64>)
 8006b46:	2259      	movs	r2, #89	; 0x59
 8006b48:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b4a:	4b12      	ldr	r3, [pc, #72]	; (8006b94 <MX_TIM6_Init+0x64>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006b50:	4b10      	ldr	r3, [pc, #64]	; (8006b94 <MX_TIM6_Init+0x64>)
 8006b52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006b56:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006b58:	4b0e      	ldr	r3, [pc, #56]	; (8006b94 <MX_TIM6_Init+0x64>)
 8006b5a:	2280      	movs	r2, #128	; 0x80
 8006b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006b5e:	480d      	ldr	r0, [pc, #52]	; (8006b94 <MX_TIM6_Init+0x64>)
 8006b60:	f008 fbf8 	bl	800f354 <HAL_TIM_Base_Init>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8006b6a:	f000 faff 	bl	800716c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006b72:	2300      	movs	r3, #0
 8006b74:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006b76:	463b      	mov	r3, r7
 8006b78:	4619      	mov	r1, r3
 8006b7a:	4806      	ldr	r0, [pc, #24]	; (8006b94 <MX_TIM6_Init+0x64>)
 8006b7c:	f009 f9d8 	bl	800ff30 <HAL_TIMEx_MasterConfigSynchronization>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8006b86:	f000 faf1 	bl	800716c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006b8a:	bf00      	nop
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20044b44 	.word	0x20044b44
 8006b98:	40001000 	.word	0x40001000

08006b9c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ba2:	463b      	mov	r3, r7
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	601a      	str	r2, [r3, #0]
 8006ba8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006baa:	4b14      	ldr	r3, [pc, #80]	; (8006bfc <MX_TIM7_Init+0x60>)
 8006bac:	4a14      	ldr	r2, [pc, #80]	; (8006c00 <MX_TIM7_Init+0x64>)
 8006bae:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8006bb0:	4b12      	ldr	r3, [pc, #72]	; (8006bfc <MX_TIM7_Init+0x60>)
 8006bb2:	22b3      	movs	r2, #179	; 0xb3
 8006bb4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006bb6:	4b11      	ldr	r3, [pc, #68]	; (8006bfc <MX_TIM7_Init+0x60>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8006bbc:	4b0f      	ldr	r3, [pc, #60]	; (8006bfc <MX_TIM7_Init+0x60>)
 8006bbe:	2231      	movs	r2, #49	; 0x31
 8006bc0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006bc2:	4b0e      	ldr	r3, [pc, #56]	; (8006bfc <MX_TIM7_Init+0x60>)
 8006bc4:	2280      	movs	r2, #128	; 0x80
 8006bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006bc8:	480c      	ldr	r0, [pc, #48]	; (8006bfc <MX_TIM7_Init+0x60>)
 8006bca:	f008 fbc3 	bl	800f354 <HAL_TIM_Base_Init>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d001      	beq.n	8006bd8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8006bd4:	f000 faca 	bl	800716c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006be0:	463b      	mov	r3, r7
 8006be2:	4619      	mov	r1, r3
 8006be4:	4805      	ldr	r0, [pc, #20]	; (8006bfc <MX_TIM7_Init+0x60>)
 8006be6:	f009 f9a3 	bl	800ff30 <HAL_TIMEx_MasterConfigSynchronization>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006bf0:	f000 fabc 	bl	800716c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006bf4:	bf00      	nop
 8006bf6:	3708      	adds	r7, #8
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	20044ce8 	.word	0x20044ce8
 8006c00:	40001400 	.word	0x40001400

08006c04 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b08c      	sub	sp, #48	; 0x30
 8006c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006c0a:	f107 030c 	add.w	r3, r7, #12
 8006c0e:	2224      	movs	r2, #36	; 0x24
 8006c10:	2100      	movs	r1, #0
 8006c12:	4618      	mov	r0, r3
 8006c14:	f00e ffdc 	bl	8015bd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006c18:	1d3b      	adds	r3, r7, #4
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006c20:	4b22      	ldr	r3, [pc, #136]	; (8006cac <MX_TIM8_Init+0xa8>)
 8006c22:	4a23      	ldr	r2, [pc, #140]	; (8006cb0 <MX_TIM8_Init+0xac>)
 8006c24:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006c26:	4b21      	ldr	r3, [pc, #132]	; (8006cac <MX_TIM8_Init+0xa8>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006c2c:	4b1f      	ldr	r3, [pc, #124]	; (8006cac <MX_TIM8_Init+0xa8>)
 8006c2e:	2210      	movs	r2, #16
 8006c30:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006c32:	4b1e      	ldr	r3, [pc, #120]	; (8006cac <MX_TIM8_Init+0xa8>)
 8006c34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c38:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c3a:	4b1c      	ldr	r3, [pc, #112]	; (8006cac <MX_TIM8_Init+0xa8>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006c40:	4b1a      	ldr	r3, [pc, #104]	; (8006cac <MX_TIM8_Init+0xa8>)
 8006c42:	2200      	movs	r2, #0
 8006c44:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c46:	4b19      	ldr	r3, [pc, #100]	; (8006cac <MX_TIM8_Init+0xa8>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006c50:	2300      	movs	r3, #0
 8006c52:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006c54:	2301      	movs	r3, #1
 8006c56:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006c60:	2300      	movs	r3, #0
 8006c62:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006c64:	2301      	movs	r3, #1
 8006c66:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006c70:	f107 030c 	add.w	r3, r7, #12
 8006c74:	4619      	mov	r1, r3
 8006c76:	480d      	ldr	r0, [pc, #52]	; (8006cac <MX_TIM8_Init+0xa8>)
 8006c78:	f008 fc24 	bl	800f4c4 <HAL_TIM_Encoder_Init>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d001      	beq.n	8006c86 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006c82:	f000 fa73 	bl	800716c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006c86:	2300      	movs	r3, #0
 8006c88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006c8e:	1d3b      	adds	r3, r7, #4
 8006c90:	4619      	mov	r1, r3
 8006c92:	4806      	ldr	r0, [pc, #24]	; (8006cac <MX_TIM8_Init+0xa8>)
 8006c94:	f009 f94c 	bl	800ff30 <HAL_TIMEx_MasterConfigSynchronization>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8006c9e:	f000 fa65 	bl	800716c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006ca2:	bf00      	nop
 8006ca4:	3730      	adds	r7, #48	; 0x30
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	20044868 	.word	0x20044868
 8006cb0:	40010400 	.word	0x40010400

08006cb4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b088      	sub	sp, #32
 8006cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006cba:	1d3b      	adds	r3, r7, #4
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	601a      	str	r2, [r3, #0]
 8006cc0:	605a      	str	r2, [r3, #4]
 8006cc2:	609a      	str	r2, [r3, #8]
 8006cc4:	60da      	str	r2, [r3, #12]
 8006cc6:	611a      	str	r2, [r3, #16]
 8006cc8:	615a      	str	r2, [r3, #20]
 8006cca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006ccc:	4b1e      	ldr	r3, [pc, #120]	; (8006d48 <MX_TIM10_Init+0x94>)
 8006cce:	4a1f      	ldr	r2, [pc, #124]	; (8006d4c <MX_TIM10_Init+0x98>)
 8006cd0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 8006cd2:	4b1d      	ldr	r3, [pc, #116]	; (8006d48 <MX_TIM10_Init+0x94>)
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006cd8:	4b1b      	ldr	r3, [pc, #108]	; (8006d48 <MX_TIM10_Init+0x94>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 8006cde:	4b1a      	ldr	r3, [pc, #104]	; (8006d48 <MX_TIM10_Init+0x94>)
 8006ce0:	f242 3227 	movw	r2, #8999	; 0x2327
 8006ce4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ce6:	4b18      	ldr	r3, [pc, #96]	; (8006d48 <MX_TIM10_Init+0x94>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006cec:	4b16      	ldr	r3, [pc, #88]	; (8006d48 <MX_TIM10_Init+0x94>)
 8006cee:	2200      	movs	r2, #0
 8006cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006cf2:	4815      	ldr	r0, [pc, #84]	; (8006d48 <MX_TIM10_Init+0x94>)
 8006cf4:	f008 fb2e 	bl	800f354 <HAL_TIM_Base_Init>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d001      	beq.n	8006d02 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8006cfe:	f000 fa35 	bl	800716c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006d02:	4811      	ldr	r0, [pc, #68]	; (8006d48 <MX_TIM10_Init+0x94>)
 8006d04:	f008 fb75 	bl	800f3f2 <HAL_TIM_PWM_Init>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8006d0e:	f000 fa2d 	bl	800716c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006d12:	2360      	movs	r3, #96	; 0x60
 8006d14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006d22:	1d3b      	adds	r3, r7, #4
 8006d24:	2200      	movs	r2, #0
 8006d26:	4619      	mov	r1, r3
 8006d28:	4807      	ldr	r0, [pc, #28]	; (8006d48 <MX_TIM10_Init+0x94>)
 8006d2a:	f008 fd9d 	bl	800f868 <HAL_TIM_PWM_ConfigChannel>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006d34:	f000 fa1a 	bl	800716c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006d38:	4803      	ldr	r0, [pc, #12]	; (8006d48 <MX_TIM10_Init+0x94>)
 8006d3a:	f000 fe07 	bl	800794c <HAL_TIM_MspPostInit>

}
 8006d3e:	bf00      	nop
 8006d40:	3720      	adds	r7, #32
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	20044984 	.word	0x20044984
 8006d4c:	40014400 	.word	0x40014400

08006d50 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b088      	sub	sp, #32
 8006d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006d56:	1d3b      	adds	r3, r7, #4
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	605a      	str	r2, [r3, #4]
 8006d5e:	609a      	str	r2, [r3, #8]
 8006d60:	60da      	str	r2, [r3, #12]
 8006d62:	611a      	str	r2, [r3, #16]
 8006d64:	615a      	str	r2, [r3, #20]
 8006d66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006d68:	4b1e      	ldr	r3, [pc, #120]	; (8006de4 <MX_TIM11_Init+0x94>)
 8006d6a:	4a1f      	ldr	r2, [pc, #124]	; (8006de8 <MX_TIM11_Init+0x98>)
 8006d6c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 8006d6e:	4b1d      	ldr	r3, [pc, #116]	; (8006de4 <MX_TIM11_Init+0x94>)
 8006d70:	2201      	movs	r2, #1
 8006d72:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d74:	4b1b      	ldr	r3, [pc, #108]	; (8006de4 <MX_TIM11_Init+0x94>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 8006d7a:	4b1a      	ldr	r3, [pc, #104]	; (8006de4 <MX_TIM11_Init+0x94>)
 8006d7c:	f242 3227 	movw	r2, #8999	; 0x2327
 8006d80:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d82:	4b18      	ldr	r3, [pc, #96]	; (8006de4 <MX_TIM11_Init+0x94>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d88:	4b16      	ldr	r3, [pc, #88]	; (8006de4 <MX_TIM11_Init+0x94>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006d8e:	4815      	ldr	r0, [pc, #84]	; (8006de4 <MX_TIM11_Init+0x94>)
 8006d90:	f008 fae0 	bl	800f354 <HAL_TIM_Base_Init>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8006d9a:	f000 f9e7 	bl	800716c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8006d9e:	4811      	ldr	r0, [pc, #68]	; (8006de4 <MX_TIM11_Init+0x94>)
 8006da0:	f008 fb27 	bl	800f3f2 <HAL_TIM_PWM_Init>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8006daa:	f000 f9df 	bl	800716c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006dae:	2360      	movs	r3, #96	; 0x60
 8006db0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006db2:	2300      	movs	r3, #0
 8006db4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006db6:	2300      	movs	r3, #0
 8006db8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006dbe:	1d3b      	adds	r3, r7, #4
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	4807      	ldr	r0, [pc, #28]	; (8006de4 <MX_TIM11_Init+0x94>)
 8006dc6:	f008 fd4f 	bl	800f868 <HAL_TIM_PWM_ConfigChannel>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8006dd0:	f000 f9cc 	bl	800716c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8006dd4:	4803      	ldr	r0, [pc, #12]	; (8006de4 <MX_TIM11_Init+0x94>)
 8006dd6:	f000 fdb9 	bl	800794c <HAL_TIM_MspPostInit>

}
 8006dda:	bf00      	nop
 8006ddc:	3720      	adds	r7, #32
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	20044aa4 	.word	0x20044aa4
 8006de8:	40014800 	.word	0x40014800

08006dec <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006df0:	4b0e      	ldr	r3, [pc, #56]	; (8006e2c <MX_TIM13_Init+0x40>)
 8006df2:	4a0f      	ldr	r2, [pc, #60]	; (8006e30 <MX_TIM13_Init+0x44>)
 8006df4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8006df6:	4b0d      	ldr	r3, [pc, #52]	; (8006e2c <MX_TIM13_Init+0x40>)
 8006df8:	2259      	movs	r2, #89	; 0x59
 8006dfa:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006dfc:	4b0b      	ldr	r3, [pc, #44]	; (8006e2c <MX_TIM13_Init+0x40>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006e02:	4b0a      	ldr	r3, [pc, #40]	; (8006e2c <MX_TIM13_Init+0x40>)
 8006e04:	f242 720f 	movw	r2, #9999	; 0x270f
 8006e08:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006e0a:	4b08      	ldr	r3, [pc, #32]	; (8006e2c <MX_TIM13_Init+0x40>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006e10:	4b06      	ldr	r3, [pc, #24]	; (8006e2c <MX_TIM13_Init+0x40>)
 8006e12:	2280      	movs	r2, #128	; 0x80
 8006e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006e16:	4805      	ldr	r0, [pc, #20]	; (8006e2c <MX_TIM13_Init+0x40>)
 8006e18:	f008 fa9c 	bl	800f354 <HAL_TIM_Base_Init>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006e22:	f000 f9a3 	bl	800716c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006e26:	bf00      	nop
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	20044a64 	.word	0x20044a64
 8006e30:	40001c00 	.word	0x40001c00

08006e34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006e38:	4b11      	ldr	r3, [pc, #68]	; (8006e80 <MX_USART2_UART_Init+0x4c>)
 8006e3a:	4a12      	ldr	r2, [pc, #72]	; (8006e84 <MX_USART2_UART_Init+0x50>)
 8006e3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006e3e:	4b10      	ldr	r3, [pc, #64]	; (8006e80 <MX_USART2_UART_Init+0x4c>)
 8006e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006e44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006e46:	4b0e      	ldr	r3, [pc, #56]	; (8006e80 <MX_USART2_UART_Init+0x4c>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006e4c:	4b0c      	ldr	r3, [pc, #48]	; (8006e80 <MX_USART2_UART_Init+0x4c>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006e52:	4b0b      	ldr	r3, [pc, #44]	; (8006e80 <MX_USART2_UART_Init+0x4c>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006e58:	4b09      	ldr	r3, [pc, #36]	; (8006e80 <MX_USART2_UART_Init+0x4c>)
 8006e5a:	220c      	movs	r2, #12
 8006e5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006e5e:	4b08      	ldr	r3, [pc, #32]	; (8006e80 <MX_USART2_UART_Init+0x4c>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006e64:	4b06      	ldr	r3, [pc, #24]	; (8006e80 <MX_USART2_UART_Init+0x4c>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006e6a:	4805      	ldr	r0, [pc, #20]	; (8006e80 <MX_USART2_UART_Init+0x4c>)
 8006e6c:	f009 f942 	bl	80100f4 <HAL_UART_Init>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006e76:	f000 f979 	bl	800716c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006e7a:	bf00      	nop
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	20044c48 	.word	0x20044c48
 8006e84:	40004400 	.word	0x40004400

08006e88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006e8e:	2300      	movs	r3, #0
 8006e90:	607b      	str	r3, [r7, #4]
 8006e92:	4b14      	ldr	r3, [pc, #80]	; (8006ee4 <MX_DMA_Init+0x5c>)
 8006e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e96:	4a13      	ldr	r2, [pc, #76]	; (8006ee4 <MX_DMA_Init+0x5c>)
 8006e98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8006e9e:	4b11      	ldr	r3, [pc, #68]	; (8006ee4 <MX_DMA_Init+0x5c>)
 8006ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ea6:	607b      	str	r3, [r7, #4]
 8006ea8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006eaa:	2200      	movs	r2, #0
 8006eac:	2100      	movs	r1, #0
 8006eae:	203a      	movs	r0, #58	; 0x3a
 8006eb0:	f003 fe1b 	bl	800aaea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006eb4:	203a      	movs	r0, #58	; 0x3a
 8006eb6:	f003 fe34 	bl	800ab22 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8006eba:	2200      	movs	r2, #0
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	203b      	movs	r0, #59	; 0x3b
 8006ec0:	f003 fe13 	bl	800aaea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006ec4:	203b      	movs	r0, #59	; 0x3b
 8006ec6:	f003 fe2c 	bl	800ab22 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006eca:	2200      	movs	r2, #0
 8006ecc:	2100      	movs	r1, #0
 8006ece:	2045      	movs	r0, #69	; 0x45
 8006ed0:	f003 fe0b 	bl	800aaea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006ed4:	2045      	movs	r0, #69	; 0x45
 8006ed6:	f003 fe24 	bl	800ab22 <HAL_NVIC_EnableIRQ>

}
 8006eda:	bf00      	nop
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	40023800 	.word	0x40023800

08006ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b08c      	sub	sp, #48	; 0x30
 8006eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006eee:	f107 031c 	add.w	r3, r7, #28
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	601a      	str	r2, [r3, #0]
 8006ef6:	605a      	str	r2, [r3, #4]
 8006ef8:	609a      	str	r2, [r3, #8]
 8006efa:	60da      	str	r2, [r3, #12]
 8006efc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006efe:	2300      	movs	r3, #0
 8006f00:	61bb      	str	r3, [r7, #24]
 8006f02:	4b94      	ldr	r3, [pc, #592]	; (8007154 <MX_GPIO_Init+0x26c>)
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	4a93      	ldr	r2, [pc, #588]	; (8007154 <MX_GPIO_Init+0x26c>)
 8006f08:	f043 0310 	orr.w	r3, r3, #16
 8006f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f0e:	4b91      	ldr	r3, [pc, #580]	; (8007154 <MX_GPIO_Init+0x26c>)
 8006f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f12:	f003 0310 	and.w	r3, r3, #16
 8006f16:	61bb      	str	r3, [r7, #24]
 8006f18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	617b      	str	r3, [r7, #20]
 8006f1e:	4b8d      	ldr	r3, [pc, #564]	; (8007154 <MX_GPIO_Init+0x26c>)
 8006f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f22:	4a8c      	ldr	r2, [pc, #560]	; (8007154 <MX_GPIO_Init+0x26c>)
 8006f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f28:	6313      	str	r3, [r2, #48]	; 0x30
 8006f2a:	4b8a      	ldr	r3, [pc, #552]	; (8007154 <MX_GPIO_Init+0x26c>)
 8006f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f32:	617b      	str	r3, [r7, #20]
 8006f34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f36:	2300      	movs	r3, #0
 8006f38:	613b      	str	r3, [r7, #16]
 8006f3a:	4b86      	ldr	r3, [pc, #536]	; (8007154 <MX_GPIO_Init+0x26c>)
 8006f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3e:	4a85      	ldr	r2, [pc, #532]	; (8007154 <MX_GPIO_Init+0x26c>)
 8006f40:	f043 0304 	orr.w	r3, r3, #4
 8006f44:	6313      	str	r3, [r2, #48]	; 0x30
 8006f46:	4b83      	ldr	r3, [pc, #524]	; (8007154 <MX_GPIO_Init+0x26c>)
 8006f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4a:	f003 0304 	and.w	r3, r3, #4
 8006f4e:	613b      	str	r3, [r7, #16]
 8006f50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f52:	2300      	movs	r3, #0
 8006f54:	60fb      	str	r3, [r7, #12]
 8006f56:	4b7f      	ldr	r3, [pc, #508]	; (8007154 <MX_GPIO_Init+0x26c>)
 8006f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5a:	4a7e      	ldr	r2, [pc, #504]	; (8007154 <MX_GPIO_Init+0x26c>)
 8006f5c:	f043 0301 	orr.w	r3, r3, #1
 8006f60:	6313      	str	r3, [r2, #48]	; 0x30
 8006f62:	4b7c      	ldr	r3, [pc, #496]	; (8007154 <MX_GPIO_Init+0x26c>)
 8006f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	60fb      	str	r3, [r7, #12]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60bb      	str	r3, [r7, #8]
 8006f72:	4b78      	ldr	r3, [pc, #480]	; (8007154 <MX_GPIO_Init+0x26c>)
 8006f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f76:	4a77      	ldr	r2, [pc, #476]	; (8007154 <MX_GPIO_Init+0x26c>)
 8006f78:	f043 0302 	orr.w	r3, r3, #2
 8006f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f7e:	4b75      	ldr	r3, [pc, #468]	; (8007154 <MX_GPIO_Init+0x26c>)
 8006f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	60bb      	str	r3, [r7, #8]
 8006f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	607b      	str	r3, [r7, #4]
 8006f8e:	4b71      	ldr	r3, [pc, #452]	; (8007154 <MX_GPIO_Init+0x26c>)
 8006f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f92:	4a70      	ldr	r2, [pc, #448]	; (8007154 <MX_GPIO_Init+0x26c>)
 8006f94:	f043 0308 	orr.w	r3, r3, #8
 8006f98:	6313      	str	r3, [r2, #48]	; 0x30
 8006f9a:	4b6e      	ldr	r3, [pc, #440]	; (8007154 <MX_GPIO_Init+0x26c>)
 8006f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9e:	f003 0308 	and.w	r3, r3, #8
 8006fa2:	607b      	str	r3, [r7, #4]
 8006fa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006fac:	486a      	ldr	r0, [pc, #424]	; (8007158 <MX_GPIO_Init+0x270>)
 8006fae:	f004 fb31 	bl	800b614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006fb8:	4868      	ldr	r0, [pc, #416]	; (800715c <MX_GPIO_Init+0x274>)
 8006fba:	f004 fb2b 	bl	800b614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006fc4:	4866      	ldr	r0, [pc, #408]	; (8007160 <MX_GPIO_Init+0x278>)
 8006fc6:	f004 fb25 	bl	800b614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006fd0:	4864      	ldr	r0, [pc, #400]	; (8007164 <MX_GPIO_Init+0x27c>)
 8006fd2:	f004 fb1f 	bl	800b614 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006fd6:	2304      	movs	r3, #4
 8006fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006fe2:	f107 031c 	add.w	r3, r7, #28
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	485b      	ldr	r0, [pc, #364]	; (8007158 <MX_GPIO_Init+0x270>)
 8006fea:	f004 f951 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006fee:	230f      	movs	r3, #15
 8006ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ffa:	f107 031c 	add.w	r3, r7, #28
 8006ffe:	4619      	mov	r1, r3
 8007000:	4859      	ldr	r0, [pc, #356]	; (8007168 <MX_GPIO_Init+0x280>)
 8007002:	f004 f945 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007006:	23e1      	movs	r3, #225	; 0xe1
 8007008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800700a:	2303      	movs	r3, #3
 800700c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800700e:	2300      	movs	r3, #0
 8007010:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007012:	f107 031c 	add.w	r3, r7, #28
 8007016:	4619      	mov	r1, r3
 8007018:	4852      	ldr	r0, [pc, #328]	; (8007164 <MX_GPIO_Init+0x27c>)
 800701a:	f004 f939 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800701e:	2303      	movs	r3, #3
 8007020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007022:	2303      	movs	r3, #3
 8007024:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007026:	2300      	movs	r3, #0
 8007028:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800702a:	f107 031c 	add.w	r3, r7, #28
 800702e:	4619      	mov	r1, r3
 8007030:	484a      	ldr	r0, [pc, #296]	; (800715c <MX_GPIO_Init+0x274>)
 8007032:	f004 f92d 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007036:	2304      	movs	r3, #4
 8007038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800703a:	2300      	movs	r3, #0
 800703c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800703e:	2301      	movs	r3, #1
 8007040:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007042:	f107 031c 	add.w	r3, r7, #28
 8007046:	4619      	mov	r1, r3
 8007048:	4844      	ldr	r0, [pc, #272]	; (800715c <MX_GPIO_Init+0x274>)
 800704a:	f004 f921 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 800704e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8007052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007054:	2300      	movs	r3, #0
 8007056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007058:	2301      	movs	r3, #1
 800705a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800705c:	f107 031c 	add.w	r3, r7, #28
 8007060:	4619      	mov	r1, r3
 8007062:	483d      	ldr	r0, [pc, #244]	; (8007158 <MX_GPIO_Init+0x270>)
 8007064:	f004 f914 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8007068:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800706c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800706e:	2301      	movs	r3, #1
 8007070:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007072:	2300      	movs	r3, #0
 8007074:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007076:	2300      	movs	r3, #0
 8007078:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800707a:	f107 031c 	add.w	r3, r7, #28
 800707e:	4619      	mov	r1, r3
 8007080:	4835      	ldr	r0, [pc, #212]	; (8007158 <MX_GPIO_Init+0x270>)
 8007082:	f004 f905 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800708a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800708c:	2301      	movs	r3, #1
 800708e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007090:	2300      	movs	r3, #0
 8007092:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007094:	2300      	movs	r3, #0
 8007096:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007098:	f107 031c 	add.w	r3, r7, #28
 800709c:	4619      	mov	r1, r3
 800709e:	482f      	ldr	r0, [pc, #188]	; (800715c <MX_GPIO_Init+0x274>)
 80070a0:	f004 f8f6 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80070a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80070aa:	2300      	movs	r3, #0
 80070ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80070b2:	f107 031c 	add.w	r3, r7, #28
 80070b6:	4619      	mov	r1, r3
 80070b8:	4829      	ldr	r0, [pc, #164]	; (8007160 <MX_GPIO_Init+0x278>)
 80070ba:	f004 f8e9 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80070be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80070c4:	2301      	movs	r3, #1
 80070c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070c8:	2300      	movs	r3, #0
 80070ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070cc:	2300      	movs	r3, #0
 80070ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80070d0:	f107 031c 	add.w	r3, r7, #28
 80070d4:	4619      	mov	r1, r3
 80070d6:	4822      	ldr	r0, [pc, #136]	; (8007160 <MX_GPIO_Init+0x278>)
 80070d8:	f004 f8da 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80070dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80070e2:	2301      	movs	r3, #1
 80070e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80070e6:	2301      	movs	r3, #1
 80070e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070ea:	2300      	movs	r3, #0
 80070ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80070ee:	f107 031c 	add.w	r3, r7, #28
 80070f2:	4619      	mov	r1, r3
 80070f4:	481a      	ldr	r0, [pc, #104]	; (8007160 <MX_GPIO_Init+0x278>)
 80070f6:	f004 f8cb 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80070fa:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80070fe:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007100:	2301      	movs	r3, #1
 8007102:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007104:	2300      	movs	r3, #0
 8007106:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007108:	2300      	movs	r3, #0
 800710a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800710c:	f107 031c 	add.w	r3, r7, #28
 8007110:	4619      	mov	r1, r3
 8007112:	4814      	ldr	r0, [pc, #80]	; (8007164 <MX_GPIO_Init+0x27c>)
 8007114:	f004 f8bc 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007118:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800711c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800711e:	2300      	movs	r3, #0
 8007120:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007122:	2300      	movs	r3, #0
 8007124:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007126:	f107 031c 	add.w	r3, r7, #28
 800712a:	4619      	mov	r1, r3
 800712c:	480d      	ldr	r0, [pc, #52]	; (8007164 <MX_GPIO_Init+0x27c>)
 800712e:	f004 f8af 	bl	800b290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8007132:	239b      	movs	r3, #155	; 0x9b
 8007134:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007136:	2300      	movs	r3, #0
 8007138:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800713a:	2301      	movs	r3, #1
 800713c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800713e:	f107 031c 	add.w	r3, r7, #28
 8007142:	4619      	mov	r1, r3
 8007144:	4806      	ldr	r0, [pc, #24]	; (8007160 <MX_GPIO_Init+0x278>)
 8007146:	f004 f8a3 	bl	800b290 <HAL_GPIO_Init>

}
 800714a:	bf00      	nop
 800714c:	3730      	adds	r7, #48	; 0x30
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	40023800 	.word	0x40023800
 8007158:	40021000 	.word	0x40021000
 800715c:	40020400 	.word	0x40020400
 8007160:	40020c00 	.word	0x40020c00
 8007164:	40020000 	.word	0x40020000
 8007168:	40020800 	.word	0x40020800

0800716c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800716c:	b480      	push	{r7}
 800716e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007170:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007172:	e7fe      	b.n	8007172 <Error_Handler+0x6>

08007174 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8007174:	b480      	push	{r7}
 8007176:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8007178:	bf00      	nop
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
	...

08007184 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800718a:	2300      	movs	r3, #0
 800718c:	607b      	str	r3, [r7, #4]
 800718e:	4b10      	ldr	r3, [pc, #64]	; (80071d0 <HAL_MspInit+0x4c>)
 8007190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007192:	4a0f      	ldr	r2, [pc, #60]	; (80071d0 <HAL_MspInit+0x4c>)
 8007194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007198:	6453      	str	r3, [r2, #68]	; 0x44
 800719a:	4b0d      	ldr	r3, [pc, #52]	; (80071d0 <HAL_MspInit+0x4c>)
 800719c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071a2:	607b      	str	r3, [r7, #4]
 80071a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80071a6:	2300      	movs	r3, #0
 80071a8:	603b      	str	r3, [r7, #0]
 80071aa:	4b09      	ldr	r3, [pc, #36]	; (80071d0 <HAL_MspInit+0x4c>)
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	4a08      	ldr	r2, [pc, #32]	; (80071d0 <HAL_MspInit+0x4c>)
 80071b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071b4:	6413      	str	r3, [r2, #64]	; 0x40
 80071b6:	4b06      	ldr	r3, [pc, #24]	; (80071d0 <HAL_MspInit+0x4c>)
 80071b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071be:	603b      	str	r3, [r7, #0]
 80071c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80071c2:	bf00      	nop
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	40023800 	.word	0x40023800

080071d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b08c      	sub	sp, #48	; 0x30
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071dc:	f107 031c 	add.w	r3, r7, #28
 80071e0:	2200      	movs	r2, #0
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	605a      	str	r2, [r3, #4]
 80071e6:	609a      	str	r2, [r3, #8]
 80071e8:	60da      	str	r2, [r3, #12]
 80071ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a4a      	ldr	r2, [pc, #296]	; (800731c <HAL_ADC_MspInit+0x148>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	f040 808e 	bne.w	8007314 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80071f8:	2300      	movs	r3, #0
 80071fa:	61bb      	str	r3, [r7, #24]
 80071fc:	4b48      	ldr	r3, [pc, #288]	; (8007320 <HAL_ADC_MspInit+0x14c>)
 80071fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007200:	4a47      	ldr	r2, [pc, #284]	; (8007320 <HAL_ADC_MspInit+0x14c>)
 8007202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007206:	6453      	str	r3, [r2, #68]	; 0x44
 8007208:	4b45      	ldr	r3, [pc, #276]	; (8007320 <HAL_ADC_MspInit+0x14c>)
 800720a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800720c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007210:	61bb      	str	r3, [r7, #24]
 8007212:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007214:	2300      	movs	r3, #0
 8007216:	617b      	str	r3, [r7, #20]
 8007218:	4b41      	ldr	r3, [pc, #260]	; (8007320 <HAL_ADC_MspInit+0x14c>)
 800721a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721c:	4a40      	ldr	r2, [pc, #256]	; (8007320 <HAL_ADC_MspInit+0x14c>)
 800721e:	f043 0304 	orr.w	r3, r3, #4
 8007222:	6313      	str	r3, [r2, #48]	; 0x30
 8007224:	4b3e      	ldr	r3, [pc, #248]	; (8007320 <HAL_ADC_MspInit+0x14c>)
 8007226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007228:	f003 0304 	and.w	r3, r3, #4
 800722c:	617b      	str	r3, [r7, #20]
 800722e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007230:	2300      	movs	r3, #0
 8007232:	613b      	str	r3, [r7, #16]
 8007234:	4b3a      	ldr	r3, [pc, #232]	; (8007320 <HAL_ADC_MspInit+0x14c>)
 8007236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007238:	4a39      	ldr	r2, [pc, #228]	; (8007320 <HAL_ADC_MspInit+0x14c>)
 800723a:	f043 0301 	orr.w	r3, r3, #1
 800723e:	6313      	str	r3, [r2, #48]	; 0x30
 8007240:	4b37      	ldr	r3, [pc, #220]	; (8007320 <HAL_ADC_MspInit+0x14c>)
 8007242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007244:	f003 0301 	and.w	r3, r3, #1
 8007248:	613b      	str	r3, [r7, #16]
 800724a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800724c:	2300      	movs	r3, #0
 800724e:	60fb      	str	r3, [r7, #12]
 8007250:	4b33      	ldr	r3, [pc, #204]	; (8007320 <HAL_ADC_MspInit+0x14c>)
 8007252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007254:	4a32      	ldr	r2, [pc, #200]	; (8007320 <HAL_ADC_MspInit+0x14c>)
 8007256:	f043 0302 	orr.w	r3, r3, #2
 800725a:	6313      	str	r3, [r2, #48]	; 0x30
 800725c:	4b30      	ldr	r3, [pc, #192]	; (8007320 <HAL_ADC_MspInit+0x14c>)
 800725e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	60fb      	str	r3, [r7, #12]
 8007266:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8007268:	230f      	movs	r3, #15
 800726a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800726c:	2303      	movs	r3, #3
 800726e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007270:	2300      	movs	r3, #0
 8007272:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007274:	f107 031c 	add.w	r3, r7, #28
 8007278:	4619      	mov	r1, r3
 800727a:	482a      	ldr	r0, [pc, #168]	; (8007324 <HAL_ADC_MspInit+0x150>)
 800727c:	f004 f808 	bl	800b290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8007280:	23ff      	movs	r3, #255	; 0xff
 8007282:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007284:	2303      	movs	r3, #3
 8007286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007288:	2300      	movs	r3, #0
 800728a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800728c:	f107 031c 	add.w	r3, r7, #28
 8007290:	4619      	mov	r1, r3
 8007292:	4825      	ldr	r0, [pc, #148]	; (8007328 <HAL_ADC_MspInit+0x154>)
 8007294:	f003 fffc 	bl	800b290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007298:	2303      	movs	r3, #3
 800729a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800729c:	2303      	movs	r3, #3
 800729e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072a0:	2300      	movs	r3, #0
 80072a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072a4:	f107 031c 	add.w	r3, r7, #28
 80072a8:	4619      	mov	r1, r3
 80072aa:	4820      	ldr	r0, [pc, #128]	; (800732c <HAL_ADC_MspInit+0x158>)
 80072ac:	f003 fff0 	bl	800b290 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80072b0:	4b1f      	ldr	r3, [pc, #124]	; (8007330 <HAL_ADC_MspInit+0x15c>)
 80072b2:	4a20      	ldr	r2, [pc, #128]	; (8007334 <HAL_ADC_MspInit+0x160>)
 80072b4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80072b6:	4b1e      	ldr	r3, [pc, #120]	; (8007330 <HAL_ADC_MspInit+0x15c>)
 80072b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80072bc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80072be:	4b1c      	ldr	r3, [pc, #112]	; (8007330 <HAL_ADC_MspInit+0x15c>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80072c4:	4b1a      	ldr	r3, [pc, #104]	; (8007330 <HAL_ADC_MspInit+0x15c>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80072ca:	4b19      	ldr	r3, [pc, #100]	; (8007330 <HAL_ADC_MspInit+0x15c>)
 80072cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072d0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80072d2:	4b17      	ldr	r3, [pc, #92]	; (8007330 <HAL_ADC_MspInit+0x15c>)
 80072d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072d8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80072da:	4b15      	ldr	r3, [pc, #84]	; (8007330 <HAL_ADC_MspInit+0x15c>)
 80072dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80072e0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80072e2:	4b13      	ldr	r3, [pc, #76]	; (8007330 <HAL_ADC_MspInit+0x15c>)
 80072e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072e8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80072ea:	4b11      	ldr	r3, [pc, #68]	; (8007330 <HAL_ADC_MspInit+0x15c>)
 80072ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80072f0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80072f2:	4b0f      	ldr	r3, [pc, #60]	; (8007330 <HAL_ADC_MspInit+0x15c>)
 80072f4:	2200      	movs	r2, #0
 80072f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80072f8:	480d      	ldr	r0, [pc, #52]	; (8007330 <HAL_ADC_MspInit+0x15c>)
 80072fa:	f003 fc2d 	bl	800ab58 <HAL_DMA_Init>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8007304:	f7ff ff32 	bl	800716c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a09      	ldr	r2, [pc, #36]	; (8007330 <HAL_ADC_MspInit+0x15c>)
 800730c:	639a      	str	r2, [r3, #56]	; 0x38
 800730e:	4a08      	ldr	r2, [pc, #32]	; (8007330 <HAL_ADC_MspInit+0x15c>)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8007314:	bf00      	nop
 8007316:	3730      	adds	r7, #48	; 0x30
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	40012100 	.word	0x40012100
 8007320:	40023800 	.word	0x40023800
 8007324:	40020800 	.word	0x40020800
 8007328:	40020000 	.word	0x40020000
 800732c:	40020400 	.word	0x40020400
 8007330:	20044c88 	.word	0x20044c88
 8007334:	40026440 	.word	0x40026440

08007338 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b08c      	sub	sp, #48	; 0x30
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007340:	f107 031c 	add.w	r3, r7, #28
 8007344:	2200      	movs	r2, #0
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	605a      	str	r2, [r3, #4]
 800734a:	609a      	str	r2, [r3, #8]
 800734c:	60da      	str	r2, [r3, #12]
 800734e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a32      	ldr	r2, [pc, #200]	; (8007420 <HAL_I2C_MspInit+0xe8>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d12c      	bne.n	80073b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800735a:	2300      	movs	r3, #0
 800735c:	61bb      	str	r3, [r7, #24]
 800735e:	4b31      	ldr	r3, [pc, #196]	; (8007424 <HAL_I2C_MspInit+0xec>)
 8007360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007362:	4a30      	ldr	r2, [pc, #192]	; (8007424 <HAL_I2C_MspInit+0xec>)
 8007364:	f043 0302 	orr.w	r3, r3, #2
 8007368:	6313      	str	r3, [r2, #48]	; 0x30
 800736a:	4b2e      	ldr	r3, [pc, #184]	; (8007424 <HAL_I2C_MspInit+0xec>)
 800736c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736e:	f003 0302 	and.w	r3, r3, #2
 8007372:	61bb      	str	r3, [r7, #24]
 8007374:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007376:	23c0      	movs	r3, #192	; 0xc0
 8007378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800737a:	2312      	movs	r3, #18
 800737c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800737e:	2301      	movs	r3, #1
 8007380:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007382:	2303      	movs	r3, #3
 8007384:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007386:	2304      	movs	r3, #4
 8007388:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800738a:	f107 031c 	add.w	r3, r7, #28
 800738e:	4619      	mov	r1, r3
 8007390:	4825      	ldr	r0, [pc, #148]	; (8007428 <HAL_I2C_MspInit+0xf0>)
 8007392:	f003 ff7d 	bl	800b290 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007396:	2300      	movs	r3, #0
 8007398:	617b      	str	r3, [r7, #20]
 800739a:	4b22      	ldr	r3, [pc, #136]	; (8007424 <HAL_I2C_MspInit+0xec>)
 800739c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739e:	4a21      	ldr	r2, [pc, #132]	; (8007424 <HAL_I2C_MspInit+0xec>)
 80073a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073a4:	6413      	str	r3, [r2, #64]	; 0x40
 80073a6:	4b1f      	ldr	r3, [pc, #124]	; (8007424 <HAL_I2C_MspInit+0xec>)
 80073a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073ae:	617b      	str	r3, [r7, #20]
 80073b0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80073b2:	e031      	b.n	8007418 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a1c      	ldr	r2, [pc, #112]	; (800742c <HAL_I2C_MspInit+0xf4>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d12c      	bne.n	8007418 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073be:	2300      	movs	r3, #0
 80073c0:	613b      	str	r3, [r7, #16]
 80073c2:	4b18      	ldr	r3, [pc, #96]	; (8007424 <HAL_I2C_MspInit+0xec>)
 80073c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c6:	4a17      	ldr	r2, [pc, #92]	; (8007424 <HAL_I2C_MspInit+0xec>)
 80073c8:	f043 0302 	orr.w	r3, r3, #2
 80073cc:	6313      	str	r3, [r2, #48]	; 0x30
 80073ce:	4b15      	ldr	r3, [pc, #84]	; (8007424 <HAL_I2C_MspInit+0xec>)
 80073d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d2:	f003 0302 	and.w	r3, r3, #2
 80073d6:	613b      	str	r3, [r7, #16]
 80073d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80073da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80073de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80073e0:	2312      	movs	r3, #18
 80073e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80073e4:	2301      	movs	r3, #1
 80073e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073e8:	2303      	movs	r3, #3
 80073ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80073ec:	2304      	movs	r3, #4
 80073ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073f0:	f107 031c 	add.w	r3, r7, #28
 80073f4:	4619      	mov	r1, r3
 80073f6:	480c      	ldr	r0, [pc, #48]	; (8007428 <HAL_I2C_MspInit+0xf0>)
 80073f8:	f003 ff4a 	bl	800b290 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80073fc:	2300      	movs	r3, #0
 80073fe:	60fb      	str	r3, [r7, #12]
 8007400:	4b08      	ldr	r3, [pc, #32]	; (8007424 <HAL_I2C_MspInit+0xec>)
 8007402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007404:	4a07      	ldr	r2, [pc, #28]	; (8007424 <HAL_I2C_MspInit+0xec>)
 8007406:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800740a:	6413      	str	r3, [r2, #64]	; 0x40
 800740c:	4b05      	ldr	r3, [pc, #20]	; (8007424 <HAL_I2C_MspInit+0xec>)
 800740e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007414:	60fb      	str	r3, [r7, #12]
 8007416:	68fb      	ldr	r3, [r7, #12]
}
 8007418:	bf00      	nop
 800741a:	3730      	adds	r7, #48	; 0x30
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	40005400 	.word	0x40005400
 8007424:	40023800 	.word	0x40023800
 8007428:	40020400 	.word	0x40020400
 800742c:	40005800 	.word	0x40005800

08007430 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b08a      	sub	sp, #40	; 0x28
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007438:	f107 0314 	add.w	r3, r7, #20
 800743c:	2200      	movs	r2, #0
 800743e:	601a      	str	r2, [r3, #0]
 8007440:	605a      	str	r2, [r3, #4]
 8007442:	609a      	str	r2, [r3, #8]
 8007444:	60da      	str	r2, [r3, #12]
 8007446:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a69      	ldr	r2, [pc, #420]	; (80075f4 <HAL_SD_MspInit+0x1c4>)
 800744e:	4293      	cmp	r3, r2
 8007450:	f040 80cb 	bne.w	80075ea <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8007454:	2300      	movs	r3, #0
 8007456:	613b      	str	r3, [r7, #16]
 8007458:	4b67      	ldr	r3, [pc, #412]	; (80075f8 <HAL_SD_MspInit+0x1c8>)
 800745a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800745c:	4a66      	ldr	r2, [pc, #408]	; (80075f8 <HAL_SD_MspInit+0x1c8>)
 800745e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007462:	6453      	str	r3, [r2, #68]	; 0x44
 8007464:	4b64      	ldr	r3, [pc, #400]	; (80075f8 <HAL_SD_MspInit+0x1c8>)
 8007466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800746c:	613b      	str	r3, [r7, #16]
 800746e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007470:	2300      	movs	r3, #0
 8007472:	60fb      	str	r3, [r7, #12]
 8007474:	4b60      	ldr	r3, [pc, #384]	; (80075f8 <HAL_SD_MspInit+0x1c8>)
 8007476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007478:	4a5f      	ldr	r2, [pc, #380]	; (80075f8 <HAL_SD_MspInit+0x1c8>)
 800747a:	f043 0304 	orr.w	r3, r3, #4
 800747e:	6313      	str	r3, [r2, #48]	; 0x30
 8007480:	4b5d      	ldr	r3, [pc, #372]	; (80075f8 <HAL_SD_MspInit+0x1c8>)
 8007482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007484:	f003 0304 	and.w	r3, r3, #4
 8007488:	60fb      	str	r3, [r7, #12]
 800748a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800748c:	2300      	movs	r3, #0
 800748e:	60bb      	str	r3, [r7, #8]
 8007490:	4b59      	ldr	r3, [pc, #356]	; (80075f8 <HAL_SD_MspInit+0x1c8>)
 8007492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007494:	4a58      	ldr	r2, [pc, #352]	; (80075f8 <HAL_SD_MspInit+0x1c8>)
 8007496:	f043 0308 	orr.w	r3, r3, #8
 800749a:	6313      	str	r3, [r2, #48]	; 0x30
 800749c:	4b56      	ldr	r3, [pc, #344]	; (80075f8 <HAL_SD_MspInit+0x1c8>)
 800749e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a0:	f003 0308 	and.w	r3, r3, #8
 80074a4:	60bb      	str	r3, [r7, #8]
 80074a6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80074a8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80074ac:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074ae:	2302      	movs	r3, #2
 80074b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074b2:	2300      	movs	r3, #0
 80074b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074b6:	2303      	movs	r3, #3
 80074b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80074ba:	230c      	movs	r3, #12
 80074bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074be:	f107 0314 	add.w	r3, r7, #20
 80074c2:	4619      	mov	r1, r3
 80074c4:	484d      	ldr	r0, [pc, #308]	; (80075fc <HAL_SD_MspInit+0x1cc>)
 80074c6:	f003 fee3 	bl	800b290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80074ca:	2304      	movs	r3, #4
 80074cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074ce:	2302      	movs	r3, #2
 80074d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074d2:	2300      	movs	r3, #0
 80074d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074d6:	2303      	movs	r3, #3
 80074d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80074da:	230c      	movs	r3, #12
 80074dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80074de:	f107 0314 	add.w	r3, r7, #20
 80074e2:	4619      	mov	r1, r3
 80074e4:	4846      	ldr	r0, [pc, #280]	; (8007600 <HAL_SD_MspInit+0x1d0>)
 80074e6:	f003 fed3 	bl	800b290 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80074ea:	4b46      	ldr	r3, [pc, #280]	; (8007604 <HAL_SD_MspInit+0x1d4>)
 80074ec:	4a46      	ldr	r2, [pc, #280]	; (8007608 <HAL_SD_MspInit+0x1d8>)
 80074ee:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80074f0:	4b44      	ldr	r3, [pc, #272]	; (8007604 <HAL_SD_MspInit+0x1d4>)
 80074f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80074f6:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80074f8:	4b42      	ldr	r3, [pc, #264]	; (8007604 <HAL_SD_MspInit+0x1d4>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80074fe:	4b41      	ldr	r3, [pc, #260]	; (8007604 <HAL_SD_MspInit+0x1d4>)
 8007500:	2200      	movs	r2, #0
 8007502:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007504:	4b3f      	ldr	r3, [pc, #252]	; (8007604 <HAL_SD_MspInit+0x1d4>)
 8007506:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800750a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800750c:	4b3d      	ldr	r3, [pc, #244]	; (8007604 <HAL_SD_MspInit+0x1d4>)
 800750e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007512:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007514:	4b3b      	ldr	r3, [pc, #236]	; (8007604 <HAL_SD_MspInit+0x1d4>)
 8007516:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800751a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800751c:	4b39      	ldr	r3, [pc, #228]	; (8007604 <HAL_SD_MspInit+0x1d4>)
 800751e:	2220      	movs	r2, #32
 8007520:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007522:	4b38      	ldr	r3, [pc, #224]	; (8007604 <HAL_SD_MspInit+0x1d4>)
 8007524:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007528:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800752a:	4b36      	ldr	r3, [pc, #216]	; (8007604 <HAL_SD_MspInit+0x1d4>)
 800752c:	2204      	movs	r2, #4
 800752e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007530:	4b34      	ldr	r3, [pc, #208]	; (8007604 <HAL_SD_MspInit+0x1d4>)
 8007532:	2203      	movs	r2, #3
 8007534:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8007536:	4b33      	ldr	r3, [pc, #204]	; (8007604 <HAL_SD_MspInit+0x1d4>)
 8007538:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800753c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800753e:	4b31      	ldr	r3, [pc, #196]	; (8007604 <HAL_SD_MspInit+0x1d4>)
 8007540:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007544:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8007546:	482f      	ldr	r0, [pc, #188]	; (8007604 <HAL_SD_MspInit+0x1d4>)
 8007548:	f003 fb06 	bl	800ab58 <HAL_DMA_Init>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8007552:	f7ff fe0b 	bl	800716c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a2a      	ldr	r2, [pc, #168]	; (8007604 <HAL_SD_MspInit+0x1d4>)
 800755a:	641a      	str	r2, [r3, #64]	; 0x40
 800755c:	4a29      	ldr	r2, [pc, #164]	; (8007604 <HAL_SD_MspInit+0x1d4>)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8007562:	4b2a      	ldr	r3, [pc, #168]	; (800760c <HAL_SD_MspInit+0x1dc>)
 8007564:	4a2a      	ldr	r2, [pc, #168]	; (8007610 <HAL_SD_MspInit+0x1e0>)
 8007566:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8007568:	4b28      	ldr	r3, [pc, #160]	; (800760c <HAL_SD_MspInit+0x1dc>)
 800756a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800756e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007570:	4b26      	ldr	r3, [pc, #152]	; (800760c <HAL_SD_MspInit+0x1dc>)
 8007572:	2240      	movs	r2, #64	; 0x40
 8007574:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007576:	4b25      	ldr	r3, [pc, #148]	; (800760c <HAL_SD_MspInit+0x1dc>)
 8007578:	2200      	movs	r2, #0
 800757a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800757c:	4b23      	ldr	r3, [pc, #140]	; (800760c <HAL_SD_MspInit+0x1dc>)
 800757e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007582:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007584:	4b21      	ldr	r3, [pc, #132]	; (800760c <HAL_SD_MspInit+0x1dc>)
 8007586:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800758a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800758c:	4b1f      	ldr	r3, [pc, #124]	; (800760c <HAL_SD_MspInit+0x1dc>)
 800758e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007592:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8007594:	4b1d      	ldr	r3, [pc, #116]	; (800760c <HAL_SD_MspInit+0x1dc>)
 8007596:	2220      	movs	r2, #32
 8007598:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800759a:	4b1c      	ldr	r3, [pc, #112]	; (800760c <HAL_SD_MspInit+0x1dc>)
 800759c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80075a0:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80075a2:	4b1a      	ldr	r3, [pc, #104]	; (800760c <HAL_SD_MspInit+0x1dc>)
 80075a4:	2204      	movs	r2, #4
 80075a6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80075a8:	4b18      	ldr	r3, [pc, #96]	; (800760c <HAL_SD_MspInit+0x1dc>)
 80075aa:	2203      	movs	r2, #3
 80075ac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80075ae:	4b17      	ldr	r3, [pc, #92]	; (800760c <HAL_SD_MspInit+0x1dc>)
 80075b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80075b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80075b6:	4b15      	ldr	r3, [pc, #84]	; (800760c <HAL_SD_MspInit+0x1dc>)
 80075b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80075bc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80075be:	4813      	ldr	r0, [pc, #76]	; (800760c <HAL_SD_MspInit+0x1dc>)
 80075c0:	f003 faca 	bl	800ab58 <HAL_DMA_Init>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d001      	beq.n	80075ce <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80075ca:	f7ff fdcf 	bl	800716c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a0e      	ldr	r2, [pc, #56]	; (800760c <HAL_SD_MspInit+0x1dc>)
 80075d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80075d4:	4a0d      	ldr	r2, [pc, #52]	; (800760c <HAL_SD_MspInit+0x1dc>)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80075da:	2200      	movs	r2, #0
 80075dc:	2100      	movs	r1, #0
 80075de:	2031      	movs	r0, #49	; 0x31
 80075e0:	f003 fa83 	bl	800aaea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80075e4:	2031      	movs	r0, #49	; 0x31
 80075e6:	f003 fa9c 	bl	800ab22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80075ea:	bf00      	nop
 80075ec:	3728      	adds	r7, #40	; 0x28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	40012c00 	.word	0x40012c00
 80075f8:	40023800 	.word	0x40023800
 80075fc:	40020800 	.word	0x40020800
 8007600:	40020c00 	.word	0x40020c00
 8007604:	200447b0 	.word	0x200447b0
 8007608:	40026458 	.word	0x40026458
 800760c:	20044ae4 	.word	0x20044ae4
 8007610:	400264a0 	.word	0x400264a0

08007614 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b08a      	sub	sp, #40	; 0x28
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800761c:	f107 0314 	add.w	r3, r7, #20
 8007620:	2200      	movs	r2, #0
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	605a      	str	r2, [r3, #4]
 8007626:	609a      	str	r2, [r3, #8]
 8007628:	60da      	str	r2, [r3, #12]
 800762a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a19      	ldr	r2, [pc, #100]	; (8007698 <HAL_SPI_MspInit+0x84>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d12c      	bne.n	8007690 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007636:	2300      	movs	r3, #0
 8007638:	613b      	str	r3, [r7, #16]
 800763a:	4b18      	ldr	r3, [pc, #96]	; (800769c <HAL_SPI_MspInit+0x88>)
 800763c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763e:	4a17      	ldr	r2, [pc, #92]	; (800769c <HAL_SPI_MspInit+0x88>)
 8007640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007644:	6413      	str	r3, [r2, #64]	; 0x40
 8007646:	4b15      	ldr	r3, [pc, #84]	; (800769c <HAL_SPI_MspInit+0x88>)
 8007648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800764e:	613b      	str	r3, [r7, #16]
 8007650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007652:	2300      	movs	r3, #0
 8007654:	60fb      	str	r3, [r7, #12]
 8007656:	4b11      	ldr	r3, [pc, #68]	; (800769c <HAL_SPI_MspInit+0x88>)
 8007658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765a:	4a10      	ldr	r2, [pc, #64]	; (800769c <HAL_SPI_MspInit+0x88>)
 800765c:	f043 0302 	orr.w	r3, r3, #2
 8007660:	6313      	str	r3, [r2, #48]	; 0x30
 8007662:	4b0e      	ldr	r3, [pc, #56]	; (800769c <HAL_SPI_MspInit+0x88>)
 8007664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	60fb      	str	r3, [r7, #12]
 800766c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800766e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007674:	2302      	movs	r3, #2
 8007676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007678:	2300      	movs	r3, #0
 800767a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800767c:	2303      	movs	r3, #3
 800767e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007680:	2305      	movs	r3, #5
 8007682:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007684:	f107 0314 	add.w	r3, r7, #20
 8007688:	4619      	mov	r1, r3
 800768a:	4805      	ldr	r0, [pc, #20]	; (80076a0 <HAL_SPI_MspInit+0x8c>)
 800768c:	f003 fe00 	bl	800b290 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007690:	bf00      	nop
 8007692:	3728      	adds	r7, #40	; 0x28
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	40003800 	.word	0x40003800
 800769c:	40023800 	.word	0x40023800
 80076a0:	40020400 	.word	0x40020400

080076a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b08c      	sub	sp, #48	; 0x30
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076ac:	f107 031c 	add.w	r3, r7, #28
 80076b0:	2200      	movs	r2, #0
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	605a      	str	r2, [r3, #4]
 80076b6:	609a      	str	r2, [r3, #8]
 80076b8:	60da      	str	r2, [r3, #12]
 80076ba:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a2d      	ldr	r2, [pc, #180]	; (8007778 <HAL_TIM_PWM_MspInit+0xd4>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d12d      	bne.n	8007722 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80076c6:	2300      	movs	r3, #0
 80076c8:	61bb      	str	r3, [r7, #24]
 80076ca:	4b2c      	ldr	r3, [pc, #176]	; (800777c <HAL_TIM_PWM_MspInit+0xd8>)
 80076cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ce:	4a2b      	ldr	r2, [pc, #172]	; (800777c <HAL_TIM_PWM_MspInit+0xd8>)
 80076d0:	f043 0301 	orr.w	r3, r3, #1
 80076d4:	6453      	str	r3, [r2, #68]	; 0x44
 80076d6:	4b29      	ldr	r3, [pc, #164]	; (800777c <HAL_TIM_PWM_MspInit+0xd8>)
 80076d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	61bb      	str	r3, [r7, #24]
 80076e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80076e2:	2300      	movs	r3, #0
 80076e4:	617b      	str	r3, [r7, #20]
 80076e6:	4b25      	ldr	r3, [pc, #148]	; (800777c <HAL_TIM_PWM_MspInit+0xd8>)
 80076e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ea:	4a24      	ldr	r2, [pc, #144]	; (800777c <HAL_TIM_PWM_MspInit+0xd8>)
 80076ec:	f043 0310 	orr.w	r3, r3, #16
 80076f0:	6313      	str	r3, [r2, #48]	; 0x30
 80076f2:	4b22      	ldr	r3, [pc, #136]	; (800777c <HAL_TIM_PWM_MspInit+0xd8>)
 80076f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f6:	f003 0310 	and.w	r3, r3, #16
 80076fa:	617b      	str	r3, [r7, #20]
 80076fc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80076fe:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007704:	2302      	movs	r3, #2
 8007706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007708:	2300      	movs	r3, #0
 800770a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800770c:	2300      	movs	r3, #0
 800770e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007710:	2301      	movs	r3, #1
 8007712:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007714:	f107 031c 	add.w	r3, r7, #28
 8007718:	4619      	mov	r1, r3
 800771a:	4819      	ldr	r0, [pc, #100]	; (8007780 <HAL_TIM_PWM_MspInit+0xdc>)
 800771c:	f003 fdb8 	bl	800b290 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007720:	e026      	b.n	8007770 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a17      	ldr	r2, [pc, #92]	; (8007784 <HAL_TIM_PWM_MspInit+0xe0>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d10e      	bne.n	800774a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800772c:	2300      	movs	r3, #0
 800772e:	613b      	str	r3, [r7, #16]
 8007730:	4b12      	ldr	r3, [pc, #72]	; (800777c <HAL_TIM_PWM_MspInit+0xd8>)
 8007732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007734:	4a11      	ldr	r2, [pc, #68]	; (800777c <HAL_TIM_PWM_MspInit+0xd8>)
 8007736:	f043 0302 	orr.w	r3, r3, #2
 800773a:	6413      	str	r3, [r2, #64]	; 0x40
 800773c:	4b0f      	ldr	r3, [pc, #60]	; (800777c <HAL_TIM_PWM_MspInit+0xd8>)
 800773e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	613b      	str	r3, [r7, #16]
 8007746:	693b      	ldr	r3, [r7, #16]
}
 8007748:	e012      	b.n	8007770 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a0e      	ldr	r2, [pc, #56]	; (8007788 <HAL_TIM_PWM_MspInit+0xe4>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d10d      	bne.n	8007770 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007754:	2300      	movs	r3, #0
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	4b08      	ldr	r3, [pc, #32]	; (800777c <HAL_TIM_PWM_MspInit+0xd8>)
 800775a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775c:	4a07      	ldr	r2, [pc, #28]	; (800777c <HAL_TIM_PWM_MspInit+0xd8>)
 800775e:	f043 0304 	orr.w	r3, r3, #4
 8007762:	6413      	str	r3, [r2, #64]	; 0x40
 8007764:	4b05      	ldr	r3, [pc, #20]	; (800777c <HAL_TIM_PWM_MspInit+0xd8>)
 8007766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007768:	f003 0304 	and.w	r3, r3, #4
 800776c:	60fb      	str	r3, [r7, #12]
 800776e:	68fb      	ldr	r3, [r7, #12]
}
 8007770:	bf00      	nop
 8007772:	3730      	adds	r7, #48	; 0x30
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	40010000 	.word	0x40010000
 800777c:	40023800 	.word	0x40023800
 8007780:	40021000 	.word	0x40021000
 8007784:	40000400 	.word	0x40000400
 8007788:	40000800 	.word	0x40000800

0800778c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b088      	sub	sp, #32
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a3e      	ldr	r2, [pc, #248]	; (8007894 <HAL_TIM_Base_MspInit+0x108>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d116      	bne.n	80077cc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800779e:	2300      	movs	r3, #0
 80077a0:	61fb      	str	r3, [r7, #28]
 80077a2:	4b3d      	ldr	r3, [pc, #244]	; (8007898 <HAL_TIM_Base_MspInit+0x10c>)
 80077a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a6:	4a3c      	ldr	r2, [pc, #240]	; (8007898 <HAL_TIM_Base_MspInit+0x10c>)
 80077a8:	f043 0310 	orr.w	r3, r3, #16
 80077ac:	6413      	str	r3, [r2, #64]	; 0x40
 80077ae:	4b3a      	ldr	r3, [pc, #232]	; (8007898 <HAL_TIM_Base_MspInit+0x10c>)
 80077b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b2:	f003 0310 	and.w	r3, r3, #16
 80077b6:	61fb      	str	r3, [r7, #28]
 80077b8:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80077ba:	2200      	movs	r2, #0
 80077bc:	2101      	movs	r1, #1
 80077be:	2036      	movs	r0, #54	; 0x36
 80077c0:	f003 f993 	bl	800aaea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80077c4:	2036      	movs	r0, #54	; 0x36
 80077c6:	f003 f9ac 	bl	800ab22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80077ca:	e05e      	b.n	800788a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a32      	ldr	r2, [pc, #200]	; (800789c <HAL_TIM_Base_MspInit+0x110>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d116      	bne.n	8007804 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80077d6:	2300      	movs	r3, #0
 80077d8:	61bb      	str	r3, [r7, #24]
 80077da:	4b2f      	ldr	r3, [pc, #188]	; (8007898 <HAL_TIM_Base_MspInit+0x10c>)
 80077dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077de:	4a2e      	ldr	r2, [pc, #184]	; (8007898 <HAL_TIM_Base_MspInit+0x10c>)
 80077e0:	f043 0320 	orr.w	r3, r3, #32
 80077e4:	6413      	str	r3, [r2, #64]	; 0x40
 80077e6:	4b2c      	ldr	r3, [pc, #176]	; (8007898 <HAL_TIM_Base_MspInit+0x10c>)
 80077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ea:	f003 0320 	and.w	r3, r3, #32
 80077ee:	61bb      	str	r3, [r7, #24]
 80077f0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80077f2:	2200      	movs	r2, #0
 80077f4:	2100      	movs	r1, #0
 80077f6:	2037      	movs	r0, #55	; 0x37
 80077f8:	f003 f977 	bl	800aaea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80077fc:	2037      	movs	r0, #55	; 0x37
 80077fe:	f003 f990 	bl	800ab22 <HAL_NVIC_EnableIRQ>
}
 8007802:	e042      	b.n	800788a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a25      	ldr	r2, [pc, #148]	; (80078a0 <HAL_TIM_Base_MspInit+0x114>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d10e      	bne.n	800782c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800780e:	2300      	movs	r3, #0
 8007810:	617b      	str	r3, [r7, #20]
 8007812:	4b21      	ldr	r3, [pc, #132]	; (8007898 <HAL_TIM_Base_MspInit+0x10c>)
 8007814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007816:	4a20      	ldr	r2, [pc, #128]	; (8007898 <HAL_TIM_Base_MspInit+0x10c>)
 8007818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800781c:	6453      	str	r3, [r2, #68]	; 0x44
 800781e:	4b1e      	ldr	r3, [pc, #120]	; (8007898 <HAL_TIM_Base_MspInit+0x10c>)
 8007820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007826:	617b      	str	r3, [r7, #20]
 8007828:	697b      	ldr	r3, [r7, #20]
}
 800782a:	e02e      	b.n	800788a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a1c      	ldr	r2, [pc, #112]	; (80078a4 <HAL_TIM_Base_MspInit+0x118>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d10e      	bne.n	8007854 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007836:	2300      	movs	r3, #0
 8007838:	613b      	str	r3, [r7, #16]
 800783a:	4b17      	ldr	r3, [pc, #92]	; (8007898 <HAL_TIM_Base_MspInit+0x10c>)
 800783c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800783e:	4a16      	ldr	r2, [pc, #88]	; (8007898 <HAL_TIM_Base_MspInit+0x10c>)
 8007840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007844:	6453      	str	r3, [r2, #68]	; 0x44
 8007846:	4b14      	ldr	r3, [pc, #80]	; (8007898 <HAL_TIM_Base_MspInit+0x10c>)
 8007848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800784a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800784e:	613b      	str	r3, [r7, #16]
 8007850:	693b      	ldr	r3, [r7, #16]
}
 8007852:	e01a      	b.n	800788a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a13      	ldr	r2, [pc, #76]	; (80078a8 <HAL_TIM_Base_MspInit+0x11c>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d115      	bne.n	800788a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800785e:	2300      	movs	r3, #0
 8007860:	60fb      	str	r3, [r7, #12]
 8007862:	4b0d      	ldr	r3, [pc, #52]	; (8007898 <HAL_TIM_Base_MspInit+0x10c>)
 8007864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007866:	4a0c      	ldr	r2, [pc, #48]	; (8007898 <HAL_TIM_Base_MspInit+0x10c>)
 8007868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800786c:	6413      	str	r3, [r2, #64]	; 0x40
 800786e:	4b0a      	ldr	r3, [pc, #40]	; (8007898 <HAL_TIM_Base_MspInit+0x10c>)
 8007870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800787a:	2200      	movs	r2, #0
 800787c:	2100      	movs	r1, #0
 800787e:	202c      	movs	r0, #44	; 0x2c
 8007880:	f003 f933 	bl	800aaea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007884:	202c      	movs	r0, #44	; 0x2c
 8007886:	f003 f94c 	bl	800ab22 <HAL_NVIC_EnableIRQ>
}
 800788a:	bf00      	nop
 800788c:	3720      	adds	r7, #32
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	40001000 	.word	0x40001000
 8007898:	40023800 	.word	0x40023800
 800789c:	40001400 	.word	0x40001400
 80078a0:	40014400 	.word	0x40014400
 80078a4:	40014800 	.word	0x40014800
 80078a8:	40001c00 	.word	0x40001c00

080078ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b08a      	sub	sp, #40	; 0x28
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078b4:	f107 0314 	add.w	r3, r7, #20
 80078b8:	2200      	movs	r2, #0
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	605a      	str	r2, [r3, #4]
 80078be:	609a      	str	r2, [r3, #8]
 80078c0:	60da      	str	r2, [r3, #12]
 80078c2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a1d      	ldr	r2, [pc, #116]	; (8007940 <HAL_TIM_Encoder_MspInit+0x94>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d133      	bne.n	8007936 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80078ce:	2300      	movs	r3, #0
 80078d0:	613b      	str	r3, [r7, #16]
 80078d2:	4b1c      	ldr	r3, [pc, #112]	; (8007944 <HAL_TIM_Encoder_MspInit+0x98>)
 80078d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d6:	4a1b      	ldr	r2, [pc, #108]	; (8007944 <HAL_TIM_Encoder_MspInit+0x98>)
 80078d8:	f043 0302 	orr.w	r3, r3, #2
 80078dc:	6453      	str	r3, [r2, #68]	; 0x44
 80078de:	4b19      	ldr	r3, [pc, #100]	; (8007944 <HAL_TIM_Encoder_MspInit+0x98>)
 80078e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078e2:	f003 0302 	and.w	r3, r3, #2
 80078e6:	613b      	str	r3, [r7, #16]
 80078e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80078ea:	2300      	movs	r3, #0
 80078ec:	60fb      	str	r3, [r7, #12]
 80078ee:	4b15      	ldr	r3, [pc, #84]	; (8007944 <HAL_TIM_Encoder_MspInit+0x98>)
 80078f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f2:	4a14      	ldr	r2, [pc, #80]	; (8007944 <HAL_TIM_Encoder_MspInit+0x98>)
 80078f4:	f043 0304 	orr.w	r3, r3, #4
 80078f8:	6313      	str	r3, [r2, #48]	; 0x30
 80078fa:	4b12      	ldr	r3, [pc, #72]	; (8007944 <HAL_TIM_Encoder_MspInit+0x98>)
 80078fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fe:	f003 0304 	and.w	r3, r3, #4
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007906:	23c0      	movs	r3, #192	; 0xc0
 8007908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800790a:	2302      	movs	r3, #2
 800790c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800790e:	2300      	movs	r3, #0
 8007910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007912:	2300      	movs	r3, #0
 8007914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007916:	2303      	movs	r3, #3
 8007918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800791a:	f107 0314 	add.w	r3, r7, #20
 800791e:	4619      	mov	r1, r3
 8007920:	4809      	ldr	r0, [pc, #36]	; (8007948 <HAL_TIM_Encoder_MspInit+0x9c>)
 8007922:	f003 fcb5 	bl	800b290 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007926:	2200      	movs	r2, #0
 8007928:	2100      	movs	r1, #0
 800792a:	202c      	movs	r0, #44	; 0x2c
 800792c:	f003 f8dd 	bl	800aaea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007930:	202c      	movs	r0, #44	; 0x2c
 8007932:	f003 f8f6 	bl	800ab22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007936:	bf00      	nop
 8007938:	3728      	adds	r7, #40	; 0x28
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	40010400 	.word	0x40010400
 8007944:	40023800 	.word	0x40023800
 8007948:	40020800 	.word	0x40020800

0800794c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b08c      	sub	sp, #48	; 0x30
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007954:	f107 031c 	add.w	r3, r7, #28
 8007958:	2200      	movs	r2, #0
 800795a:	601a      	str	r2, [r3, #0]
 800795c:	605a      	str	r2, [r3, #4]
 800795e:	609a      	str	r2, [r3, #8]
 8007960:	60da      	str	r2, [r3, #12]
 8007962:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a5c      	ldr	r2, [pc, #368]	; (8007adc <HAL_TIM_MspPostInit+0x190>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d11f      	bne.n	80079ae <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800796e:	2300      	movs	r3, #0
 8007970:	61bb      	str	r3, [r7, #24]
 8007972:	4b5b      	ldr	r3, [pc, #364]	; (8007ae0 <HAL_TIM_MspPostInit+0x194>)
 8007974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007976:	4a5a      	ldr	r2, [pc, #360]	; (8007ae0 <HAL_TIM_MspPostInit+0x194>)
 8007978:	f043 0310 	orr.w	r3, r3, #16
 800797c:	6313      	str	r3, [r2, #48]	; 0x30
 800797e:	4b58      	ldr	r3, [pc, #352]	; (8007ae0 <HAL_TIM_MspPostInit+0x194>)
 8007980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007982:	f003 0310 	and.w	r3, r3, #16
 8007986:	61bb      	str	r3, [r7, #24]
 8007988:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800798a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800798e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007990:	2302      	movs	r3, #2
 8007992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007994:	2300      	movs	r3, #0
 8007996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007998:	2300      	movs	r3, #0
 800799a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800799c:	2301      	movs	r3, #1
 800799e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80079a0:	f107 031c 	add.w	r3, r7, #28
 80079a4:	4619      	mov	r1, r3
 80079a6:	484f      	ldr	r0, [pc, #316]	; (8007ae4 <HAL_TIM_MspPostInit+0x198>)
 80079a8:	f003 fc72 	bl	800b290 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80079ac:	e091      	b.n	8007ad2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a4d      	ldr	r2, [pc, #308]	; (8007ae8 <HAL_TIM_MspPostInit+0x19c>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d11e      	bne.n	80079f6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079b8:	2300      	movs	r3, #0
 80079ba:	617b      	str	r3, [r7, #20]
 80079bc:	4b48      	ldr	r3, [pc, #288]	; (8007ae0 <HAL_TIM_MspPostInit+0x194>)
 80079be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c0:	4a47      	ldr	r2, [pc, #284]	; (8007ae0 <HAL_TIM_MspPostInit+0x194>)
 80079c2:	f043 0302 	orr.w	r3, r3, #2
 80079c6:	6313      	str	r3, [r2, #48]	; 0x30
 80079c8:	4b45      	ldr	r3, [pc, #276]	; (8007ae0 <HAL_TIM_MspPostInit+0x194>)
 80079ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079cc:	f003 0302 	and.w	r3, r3, #2
 80079d0:	617b      	str	r3, [r7, #20]
 80079d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80079d4:	2330      	movs	r3, #48	; 0x30
 80079d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079d8:	2302      	movs	r3, #2
 80079da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079dc:	2300      	movs	r3, #0
 80079de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079e0:	2300      	movs	r3, #0
 80079e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80079e4:	2302      	movs	r3, #2
 80079e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079e8:	f107 031c 	add.w	r3, r7, #28
 80079ec:	4619      	mov	r1, r3
 80079ee:	483f      	ldr	r0, [pc, #252]	; (8007aec <HAL_TIM_MspPostInit+0x1a0>)
 80079f0:	f003 fc4e 	bl	800b290 <HAL_GPIO_Init>
}
 80079f4:	e06d      	b.n	8007ad2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a3d      	ldr	r2, [pc, #244]	; (8007af0 <HAL_TIM_MspPostInit+0x1a4>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d11f      	bne.n	8007a40 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007a00:	2300      	movs	r3, #0
 8007a02:	613b      	str	r3, [r7, #16]
 8007a04:	4b36      	ldr	r3, [pc, #216]	; (8007ae0 <HAL_TIM_MspPostInit+0x194>)
 8007a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a08:	4a35      	ldr	r2, [pc, #212]	; (8007ae0 <HAL_TIM_MspPostInit+0x194>)
 8007a0a:	f043 0308 	orr.w	r3, r3, #8
 8007a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8007a10:	4b33      	ldr	r3, [pc, #204]	; (8007ae0 <HAL_TIM_MspPostInit+0x194>)
 8007a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a14:	f003 0308 	and.w	r3, r3, #8
 8007a18:	613b      	str	r3, [r7, #16]
 8007a1a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007a1c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a22:	2302      	movs	r3, #2
 8007a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a26:	2300      	movs	r3, #0
 8007a28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007a2e:	2302      	movs	r3, #2
 8007a30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007a32:	f107 031c 	add.w	r3, r7, #28
 8007a36:	4619      	mov	r1, r3
 8007a38:	482e      	ldr	r0, [pc, #184]	; (8007af4 <HAL_TIM_MspPostInit+0x1a8>)
 8007a3a:	f003 fc29 	bl	800b290 <HAL_GPIO_Init>
}
 8007a3e:	e048      	b.n	8007ad2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a2c      	ldr	r2, [pc, #176]	; (8007af8 <HAL_TIM_MspPostInit+0x1ac>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d11f      	bne.n	8007a8a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	60fb      	str	r3, [r7, #12]
 8007a4e:	4b24      	ldr	r3, [pc, #144]	; (8007ae0 <HAL_TIM_MspPostInit+0x194>)
 8007a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a52:	4a23      	ldr	r2, [pc, #140]	; (8007ae0 <HAL_TIM_MspPostInit+0x194>)
 8007a54:	f043 0302 	orr.w	r3, r3, #2
 8007a58:	6313      	str	r3, [r2, #48]	; 0x30
 8007a5a:	4b21      	ldr	r3, [pc, #132]	; (8007ae0 <HAL_TIM_MspPostInit+0x194>)
 8007a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	60fb      	str	r3, [r7, #12]
 8007a64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007a66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a70:	2300      	movs	r3, #0
 8007a72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a74:	2300      	movs	r3, #0
 8007a76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a7c:	f107 031c 	add.w	r3, r7, #28
 8007a80:	4619      	mov	r1, r3
 8007a82:	481a      	ldr	r0, [pc, #104]	; (8007aec <HAL_TIM_MspPostInit+0x1a0>)
 8007a84:	f003 fc04 	bl	800b290 <HAL_GPIO_Init>
}
 8007a88:	e023      	b.n	8007ad2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a1b      	ldr	r2, [pc, #108]	; (8007afc <HAL_TIM_MspPostInit+0x1b0>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d11e      	bne.n	8007ad2 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a94:	2300      	movs	r3, #0
 8007a96:	60bb      	str	r3, [r7, #8]
 8007a98:	4b11      	ldr	r3, [pc, #68]	; (8007ae0 <HAL_TIM_MspPostInit+0x194>)
 8007a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9c:	4a10      	ldr	r2, [pc, #64]	; (8007ae0 <HAL_TIM_MspPostInit+0x194>)
 8007a9e:	f043 0302 	orr.w	r3, r3, #2
 8007aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8007aa4:	4b0e      	ldr	r3, [pc, #56]	; (8007ae0 <HAL_TIM_MspPostInit+0x194>)
 8007aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa8:	f003 0302 	and.w	r3, r3, #2
 8007aac:	60bb      	str	r3, [r7, #8]
 8007aae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007ab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aba:	2300      	movs	r3, #0
 8007abc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ac6:	f107 031c 	add.w	r3, r7, #28
 8007aca:	4619      	mov	r1, r3
 8007acc:	4807      	ldr	r0, [pc, #28]	; (8007aec <HAL_TIM_MspPostInit+0x1a0>)
 8007ace:	f003 fbdf 	bl	800b290 <HAL_GPIO_Init>
}
 8007ad2:	bf00      	nop
 8007ad4:	3730      	adds	r7, #48	; 0x30
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	40010000 	.word	0x40010000
 8007ae0:	40023800 	.word	0x40023800
 8007ae4:	40021000 	.word	0x40021000
 8007ae8:	40000400 	.word	0x40000400
 8007aec:	40020400 	.word	0x40020400
 8007af0:	40000800 	.word	0x40000800
 8007af4:	40020c00 	.word	0x40020c00
 8007af8:	40014400 	.word	0x40014400
 8007afc:	40014800 	.word	0x40014800

08007b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b08a      	sub	sp, #40	; 0x28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b08:	f107 0314 	add.w	r3, r7, #20
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	601a      	str	r2, [r3, #0]
 8007b10:	605a      	str	r2, [r3, #4]
 8007b12:	609a      	str	r2, [r3, #8]
 8007b14:	60da      	str	r2, [r3, #12]
 8007b16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a19      	ldr	r2, [pc, #100]	; (8007b84 <HAL_UART_MspInit+0x84>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d12b      	bne.n	8007b7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007b22:	2300      	movs	r3, #0
 8007b24:	613b      	str	r3, [r7, #16]
 8007b26:	4b18      	ldr	r3, [pc, #96]	; (8007b88 <HAL_UART_MspInit+0x88>)
 8007b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2a:	4a17      	ldr	r2, [pc, #92]	; (8007b88 <HAL_UART_MspInit+0x88>)
 8007b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b30:	6413      	str	r3, [r2, #64]	; 0x40
 8007b32:	4b15      	ldr	r3, [pc, #84]	; (8007b88 <HAL_UART_MspInit+0x88>)
 8007b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b3a:	613b      	str	r3, [r7, #16]
 8007b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b3e:	2300      	movs	r3, #0
 8007b40:	60fb      	str	r3, [r7, #12]
 8007b42:	4b11      	ldr	r3, [pc, #68]	; (8007b88 <HAL_UART_MspInit+0x88>)
 8007b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b46:	4a10      	ldr	r2, [pc, #64]	; (8007b88 <HAL_UART_MspInit+0x88>)
 8007b48:	f043 0308 	orr.w	r3, r3, #8
 8007b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8007b4e:	4b0e      	ldr	r3, [pc, #56]	; (8007b88 <HAL_UART_MspInit+0x88>)
 8007b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b52:	f003 0308 	and.w	r3, r3, #8
 8007b56:	60fb      	str	r3, [r7, #12]
 8007b58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007b5a:	2360      	movs	r3, #96	; 0x60
 8007b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b5e:	2302      	movs	r3, #2
 8007b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b62:	2300      	movs	r3, #0
 8007b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b66:	2303      	movs	r3, #3
 8007b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007b6a:	2307      	movs	r3, #7
 8007b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007b6e:	f107 0314 	add.w	r3, r7, #20
 8007b72:	4619      	mov	r1, r3
 8007b74:	4805      	ldr	r0, [pc, #20]	; (8007b8c <HAL_UART_MspInit+0x8c>)
 8007b76:	f003 fb8b 	bl	800b290 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007b7a:	bf00      	nop
 8007b7c:	3728      	adds	r7, #40	; 0x28
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	40004400 	.word	0x40004400
 8007b88:	40023800 	.word	0x40023800
 8007b8c:	40020c00 	.word	0x40020c00

08007b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007b90:	b480      	push	{r7}
 8007b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007b94:	e7fe      	b.n	8007b94 <NMI_Handler+0x4>

08007b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007b96:	b480      	push	{r7}
 8007b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007b9a:	e7fe      	b.n	8007b9a <HardFault_Handler+0x4>

08007b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007ba0:	e7fe      	b.n	8007ba0 <MemManage_Handler+0x4>

08007ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007ba6:	e7fe      	b.n	8007ba6 <BusFault_Handler+0x4>

08007ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007bac:	e7fe      	b.n	8007bac <UsageFault_Handler+0x4>

08007bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007bae:	b480      	push	{r7}
 8007bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007bb2:	bf00      	nop
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007bc0:	bf00      	nop
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007bce:	bf00      	nop
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007bdc:	f002 fa64 	bl	800a0a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007be0:	bf00      	nop
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007be8:	4803      	ldr	r0, [pc, #12]	; (8007bf8 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8007bea:	f007 fd34 	bl	800f656 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8007bee:	4803      	ldr	r0, [pc, #12]	; (8007bfc <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007bf0:	f007 fd31 	bl	800f656 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007bf4:	bf00      	nop
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	20044868 	.word	0x20044868
 8007bfc:	20044a64 	.word	0x20044a64

08007c00 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8007c04:	4802      	ldr	r0, [pc, #8]	; (8007c10 <SDIO_IRQHandler+0x10>)
 8007c06:	f005 fdcd 	bl	800d7a4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8007c0a:	bf00      	nop
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	20044bc4 	.word	0x20044bc4

08007c14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007c18:	4802      	ldr	r0, [pc, #8]	; (8007c24 <TIM6_DAC_IRQHandler+0x10>)
 8007c1a:	f007 fd1c 	bl	800f656 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007c1e:	bf00      	nop
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20044b44 	.word	0x20044b44

08007c28 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007c2c:	4802      	ldr	r0, [pc, #8]	; (8007c38 <TIM7_IRQHandler+0x10>)
 8007c2e:	f007 fd12 	bl	800f656 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007c32:	bf00      	nop
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	20044ce8 	.word	0x20044ce8

08007c3c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007c40:	4802      	ldr	r0, [pc, #8]	; (8007c4c <DMA2_Stream2_IRQHandler+0x10>)
 8007c42:	f003 f8b1 	bl	800ada8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007c46:	bf00      	nop
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	20044c88 	.word	0x20044c88

08007c50 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007c54:	4802      	ldr	r0, [pc, #8]	; (8007c60 <DMA2_Stream3_IRQHandler+0x10>)
 8007c56:	f003 f8a7 	bl	800ada8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007c5a:	bf00      	nop
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	200447b0 	.word	0x200447b0

08007c64 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007c68:	4802      	ldr	r0, [pc, #8]	; (8007c74 <DMA2_Stream6_IRQHandler+0x10>)
 8007c6a:	f003 f89d 	bl	800ada8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007c6e:	bf00      	nop
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	20044ae4 	.word	0x20044ae4

08007c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007c80:	4a14      	ldr	r2, [pc, #80]	; (8007cd4 <_sbrk+0x5c>)
 8007c82:	4b15      	ldr	r3, [pc, #84]	; (8007cd8 <_sbrk+0x60>)
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007c8c:	4b13      	ldr	r3, [pc, #76]	; (8007cdc <_sbrk+0x64>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d102      	bne.n	8007c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007c94:	4b11      	ldr	r3, [pc, #68]	; (8007cdc <_sbrk+0x64>)
 8007c96:	4a12      	ldr	r2, [pc, #72]	; (8007ce0 <_sbrk+0x68>)
 8007c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007c9a:	4b10      	ldr	r3, [pc, #64]	; (8007cdc <_sbrk+0x64>)
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	693a      	ldr	r2, [r7, #16]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d207      	bcs.n	8007cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007ca8:	f00d ff68 	bl	8015b7c <__errno>
 8007cac:	4602      	mov	r2, r0
 8007cae:	230c      	movs	r3, #12
 8007cb0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8007cb6:	e009      	b.n	8007ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007cb8:	4b08      	ldr	r3, [pc, #32]	; (8007cdc <_sbrk+0x64>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007cbe:	4b07      	ldr	r3, [pc, #28]	; (8007cdc <_sbrk+0x64>)
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	4a05      	ldr	r2, [pc, #20]	; (8007cdc <_sbrk+0x64>)
 8007cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007cca:	68fb      	ldr	r3, [r7, #12]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3718      	adds	r7, #24
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	20050000 	.word	0x20050000
 8007cd8:	00000800 	.word	0x00000800
 8007cdc:	200002bc 	.word	0x200002bc
 8007ce0:	20046e38 	.word	0x20046e38

08007ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007ce8:	4b08      	ldr	r3, [pc, #32]	; (8007d0c <SystemInit+0x28>)
 8007cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cee:	4a07      	ldr	r2, [pc, #28]	; (8007d0c <SystemInit+0x28>)
 8007cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007cf8:	4b04      	ldr	r3, [pc, #16]	; (8007d0c <SystemInit+0x28>)
 8007cfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007cfe:	609a      	str	r2, [r3, #8]
#endif
}
 8007d00:	bf00      	nop
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	e000ed00 	.word	0xe000ed00

08007d10 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007d10:	b598      	push	{r3, r4, r7, lr}
 8007d12:	af00      	add	r7, sp, #0
	lcd_init();
 8007d14:	f7f9 f980 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007d18:	483b      	ldr	r0, [pc, #236]	; (8007e08 <cppInit+0xf8>)
 8007d1a:	f7fd fcb3 	bl	8005684 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8007d1e:	2064      	movs	r0, #100	; 0x64
 8007d20:	f002 f9e2 	bl	800a0e8 <HAL_Delay>
	power_sensor.updateValues();
 8007d24:	4838      	ldr	r0, [pc, #224]	; (8007e08 <cppInit+0xf8>)
 8007d26:	f7fd fcbb 	bl	80056a0 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8007d2a:	f7f9 f9b9 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8007d2e:	2100      	movs	r1, #0
 8007d30:	2000      	movs	r0, #0
 8007d32:	f7f9 f9c5 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8007d36:	4835      	ldr	r0, [pc, #212]	; (8007e0c <cppInit+0xfc>)
 8007d38:	f7f9 f9ec 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8007d3c:	2101      	movs	r1, #1
 8007d3e:	2000      	movs	r0, #0
 8007d40:	f7f9 f9be 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8007d44:	4830      	ldr	r0, [pc, #192]	; (8007e08 <cppInit+0xf8>)
 8007d46:	f7fd fcd5 	bl	80056f4 <_ZN11PowerSensor17getButteryVoltageEv>
 8007d4a:	ee10 3a10 	vmov	r3, s0
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7f8 fc12 	bl	8000578 <__aeabi_f2d>
 8007d54:	4603      	mov	r3, r0
 8007d56:	460c      	mov	r4, r1
 8007d58:	461a      	mov	r2, r3
 8007d5a:	4623      	mov	r3, r4
 8007d5c:	482c      	ldr	r0, [pc, #176]	; (8007e10 <cppInit+0x100>)
 8007d5e:	f7f9 f9d9 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8007d62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d66:	f002 f9bf 	bl	800a0e8 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8007d6a:	482a      	ldr	r0, [pc, #168]	; (8007e14 <cppInit+0x104>)
 8007d6c:	f7fc feac 	bl	8004ac8 <_ZN6Logger10sdCardInitEv>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d007      	beq.n	8007d86 <cppInit+0x76>
		led.fullColor('G');
 8007d76:	2147      	movs	r1, #71	; 0x47
 8007d78:	4827      	ldr	r0, [pc, #156]	; (8007e18 <cppInit+0x108>)
 8007d7a:	f7fa fa6b 	bl	8002254 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007d7e:	2064      	movs	r0, #100	; 0x64
 8007d80:	f002 f9b2 	bl	800a0e8 <HAL_Delay>
 8007d84:	e006      	b.n	8007d94 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007d86:	2152      	movs	r1, #82	; 0x52
 8007d88:	4823      	ldr	r0, [pc, #140]	; (8007e18 <cppInit+0x108>)
 8007d8a:	f7fa fa63 	bl	8002254 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007d8e:	2064      	movs	r0, #100	; 0x64
 8007d90:	f002 f9aa 	bl	800a0e8 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8007d94:	4821      	ldr	r0, [pc, #132]	; (8007e1c <cppInit+0x10c>)
 8007d96:	f7fa fbb9 	bl	800250c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8007d9a:	4821      	ldr	r0, [pc, #132]	; (8007e20 <cppInit+0x110>)
 8007d9c:	f7fd f92a 	bl	8004ff4 <_ZN5Motor4initEv>
	encoder.init();
 8007da0:	4820      	ldr	r0, [pc, #128]	; (8007e24 <cppInit+0x114>)
 8007da2:	f7f9 fb3f 	bl	8001424 <_ZN7Encoder4initEv>
	imu.init();
 8007da6:	4820      	ldr	r0, [pc, #128]	; (8007e28 <cppInit+0x118>)
 8007da8:	f7fa f802 	bl	8001db0 <_ZN3IMU4initEv>
	line_trace.init();
 8007dac:	481f      	ldr	r0, [pc, #124]	; (8007e2c <cppInit+0x11c>)
 8007dae:	f7fb ff83 	bl	8003cb8 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8007db2:	481a      	ldr	r0, [pc, #104]	; (8007e1c <cppInit+0x10c>)
 8007db4:	f7fa fd0a 	bl	80027cc <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8007db8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007dbc:	f002 f994 	bl	800a0e8 <HAL_Delay>

	led.fullColor('M');
 8007dc0:	214d      	movs	r1, #77	; 0x4d
 8007dc2:	4815      	ldr	r0, [pc, #84]	; (8007e18 <cppInit+0x108>)
 8007dc4:	f7fa fa46 	bl	8002254 <_ZN3LED9fullColorEc>
	imu.calibration();
 8007dc8:	4817      	ldr	r0, [pc, #92]	; (8007e28 <cppInit+0x118>)
 8007dca:	f7fa f8cb 	bl	8001f64 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s
 8007dce:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8007e30 <cppInit+0x120>
 8007dd2:	eddf 0a18 	vldr	s1, [pc, #96]	; 8007e34 <cppInit+0x124>
 8007dd6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007e38 <cppInit+0x128>
 8007dda:	4818      	ldr	r0, [pc, #96]	; (8007e3c <cppInit+0x12c>)
 8007ddc:	f7fe f9dc 	bl	8006198 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 8007de0:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8007e40 <cppInit+0x130>
 8007de4:	eddf 0a17 	vldr	s1, [pc, #92]	; 8007e44 <cppInit+0x134>
 8007de8:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007e48 <cppInit+0x138>
 8007dec:	4813      	ldr	r0, [pc, #76]	; (8007e3c <cppInit+0x12c>)
 8007dee:	f7fe f9ec 	bl	80061ca <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 8007df2:	4816      	ldr	r0, [pc, #88]	; (8007e4c <cppInit+0x13c>)
 8007df4:	f7fd fb50 	bl	8005498 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007df8:	4815      	ldr	r0, [pc, #84]	; (8007e50 <cppInit+0x140>)
 8007dfa:	f7fd fbe7 	bl	80055cc <_ZN13PathFollowing4initEv>

	esc.init();
 8007dfe:	4815      	ldr	r0, [pc, #84]	; (8007e54 <cppInit+0x144>)
 8007e00:	f7f9 f9f4 	bl	80011ec <_ZN3ESC4initEv>

}
 8007e04:	bf00      	nop
 8007e06:	bd98      	pop	{r3, r4, r7, pc}
 8007e08:	200005d4 	.word	0x200005d4
 8007e0c:	0801a1c4 	.word	0x0801a1c4
 8007e10:	0801a1cc 	.word	0x0801a1cc
 8007e14:	200005f4 	.word	0x200005f4
 8007e18:	200005d0 	.word	0x200005d0
 8007e1c:	200002c0 	.word	0x200002c0
 8007e20:	200005cc 	.word	0x200005cc
 8007e24:	2001dac0 	.word	0x2001dac0
 8007e28:	200005e0 	.word	0x200005e0
 8007e2c:	2001db64 	.word	0x2001db64
 8007e30:	3a8439b6 	.word	0x3a8439b6
 8007e34:	40d1a29c 	.word	0x40d1a29c
 8007e38:	3f81f8a1 	.word	0x3f81f8a1
 8007e3c:	2001dae0 	.word	0x2001dae0
 8007e40:	00000000 	.word	0x00000000
 8007e44:	3f5e3fbc 	.word	0x3f5e3fbc
 8007e48:	3d75c28f 	.word	0x3d75c28f
 8007e4c:	2001db20 	.word	0x2001db20
 8007e50:	2002acb0 	.word	0x2002acb0
 8007e54:	2001db60 	.word	0x2001db60

08007e58 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007e5c:	480e      	ldr	r0, [pc, #56]	; (8007e98 <cppFlip1ms+0x40>)
 8007e5e:	f7fa fbb3 	bl	80025c8 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8007e62:	480e      	ldr	r0, [pc, #56]	; (8007e9c <cppFlip1ms+0x44>)
 8007e64:	f7f9 ffcc 	bl	8001e00 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007e68:	480d      	ldr	r0, [pc, #52]	; (8007ea0 <cppFlip1ms+0x48>)
 8007e6a:	f7f9 fafd 	bl	8001468 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007e6e:	480d      	ldr	r0, [pc, #52]	; (8007ea4 <cppFlip1ms+0x4c>)
 8007e70:	f7fc f9c8 	bl	8004204 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007e74:	480c      	ldr	r0, [pc, #48]	; (8007ea8 <cppFlip1ms+0x50>)
 8007e76:	f7fe f9c1 	bl	80061fc <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007e7a:	480c      	ldr	r0, [pc, #48]	; (8007eac <cppFlip1ms+0x54>)
 8007e7c:	f7fd faf0 	bl	8005460 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007e80:	480b      	ldr	r0, [pc, #44]	; (8007eb0 <cppFlip1ms+0x58>)
 8007e82:	f7fd fcb3 	bl	80057ec <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007e86:	480b      	ldr	r0, [pc, #44]	; (8007eb4 <cppFlip1ms+0x5c>)
 8007e88:	f7fd f8c6 	bl	8005018 <_ZN5Motor9motorCtrlEv>
*/
	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8007e8c:	4804      	ldr	r0, [pc, #16]	; (8007ea0 <cppFlip1ms+0x48>)
 8007e8e:	f7f9 fbd5 	bl	800163c <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007e92:	bf00      	nop
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	200002c0 	.word	0x200002c0
 8007e9c:	200005e0 	.word	0x200005e0
 8007ea0:	2001dac0 	.word	0x2001dac0
 8007ea4:	2001db64 	.word	0x2001db64
 8007ea8:	2001dae0 	.word	0x2001dae0
 8007eac:	2001db20 	.word	0x2001db20
 8007eb0:	200005b8 	.word	0x200005b8
 8007eb4:	200005cc 	.word	0x200005cc

08007eb8 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007ebc:	4802      	ldr	r0, [pc, #8]	; (8007ec8 <cppFlip100ns+0x10>)
 8007ebe:	f7fa fb35 	bl	800252c <_ZN10LineSensor17storeSensorValuesEv>
}
 8007ec2:	bf00      	nop
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	200002c0 	.word	0x200002c0

08007ecc <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8007ed0:	4b10      	ldr	r3, [pc, #64]	; (8007f14 <cppFlip10ms+0x48>)
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	4b0e      	ldr	r3, [pc, #56]	; (8007f14 <cppFlip10ms+0x48>)
 8007eda:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 17){ //170ms
 8007edc:	4b0d      	ldr	r3, [pc, #52]	; (8007f14 <cppFlip10ms+0x48>)
 8007ede:	881b      	ldrh	r3, [r3, #0]
 8007ee0:	2b10      	cmp	r3, #16
 8007ee2:	d905      	bls.n	8007ef0 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8007ee4:	480c      	ldr	r0, [pc, #48]	; (8007f18 <cppFlip10ms+0x4c>)
 8007ee6:	f7fd ffa7 	bl	8005e38 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8007eea:	4b0a      	ldr	r3, [pc, #40]	; (8007f14 <cppFlip10ms+0x48>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	801a      	strh	r2, [r3, #0]
	}

	logger.storeLogInt(motor.getLeftCounterPeriod());
 8007ef0:	480a      	ldr	r0, [pc, #40]	; (8007f1c <cppFlip10ms+0x50>)
 8007ef2:	f7fd f953 	bl	800519c <_ZN5Motor20getLeftCounterPeriodEv>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	4619      	mov	r1, r3
 8007efa:	4809      	ldr	r0, [pc, #36]	; (8007f20 <cppFlip10ms+0x54>)
 8007efc:	f7fc fe2c 	bl	8004b58 <_ZN6Logger11storeLogIntEs>
	logger.storeLog2Int(motor.getRightCounterPeriod());
 8007f00:	4806      	ldr	r0, [pc, #24]	; (8007f1c <cppFlip10ms+0x50>)
 8007f02:	f7fd f958 	bl	80051b6 <_ZN5Motor21getRightCounterPeriodEv>
 8007f06:	4603      	mov	r3, r0
 8007f08:	4619      	mov	r1, r3
 8007f0a:	4805      	ldr	r0, [pc, #20]	; (8007f20 <cppFlip10ms+0x54>)
 8007f0c:	f7fc fe5d 	bl	8004bca <_ZN6Logger12storeLog2IntEs>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007f10:	bf00      	nop
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	200423d8 	.word	0x200423d8
 8007f18:	2002aaa4 	.word	0x2002aaa4
 8007f1c:	200005cc 	.word	0x200005cc
 8007f20:	200005f4 	.word	0x200005f4
 8007f24:	00000000 	.word	0x00000000

08007f28 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 8007f2e:	4baf      	ldr	r3, [pc, #700]	; (80081ec <cppLoop+0x2c4>)
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	f3bf 8f5b 	dmb	ish
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	bf0c      	ite	eq
 8007f40:	2301      	moveq	r3, #1
 8007f42:	2300      	movne	r3, #0
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d015      	beq.n	8007f76 <cppLoop+0x4e>
 8007f4a:	48a8      	ldr	r0, [pc, #672]	; (80081ec <cppLoop+0x2c4>)
 8007f4c:	f00c fdb1 	bl	8014ab2 <__cxa_guard_acquire>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	bf14      	ite	ne
 8007f56:	2301      	movne	r3, #1
 8007f58:	2300      	moveq	r3, #0
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00a      	beq.n	8007f76 <cppLoop+0x4e>
 8007f60:	48a3      	ldr	r0, [pc, #652]	; (80081f0 <cppLoop+0x2c8>)
 8007f62:	f7fb ffb0 	bl	8003ec6 <_ZN9LineTrace5getKpEv>
 8007f66:	eef0 7a40 	vmov.f32	s15, s0
 8007f6a:	4ba2      	ldr	r3, [pc, #648]	; (80081f4 <cppLoop+0x2cc>)
 8007f6c:	edc3 7a00 	vstr	s15, [r3]
 8007f70:	489e      	ldr	r0, [pc, #632]	; (80081ec <cppLoop+0x2c4>)
 8007f72:	f00c fdaa 	bl	8014aca <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007f76:	4ba0      	ldr	r3, [pc, #640]	; (80081f8 <cppLoop+0x2d0>)
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	f3bf 8f5b 	dmb	ish
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	f003 0301 	and.w	r3, r3, #1
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	bf0c      	ite	eq
 8007f88:	2301      	moveq	r3, #1
 8007f8a:	2300      	movne	r3, #0
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d015      	beq.n	8007fbe <cppLoop+0x96>
 8007f92:	4899      	ldr	r0, [pc, #612]	; (80081f8 <cppLoop+0x2d0>)
 8007f94:	f00c fd8d 	bl	8014ab2 <__cxa_guard_acquire>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	bf14      	ite	ne
 8007f9e:	2301      	movne	r3, #1
 8007fa0:	2300      	moveq	r3, #0
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00a      	beq.n	8007fbe <cppLoop+0x96>
 8007fa8:	4891      	ldr	r0, [pc, #580]	; (80081f0 <cppLoop+0x2c8>)
 8007faa:	f7fb ff9b 	bl	8003ee4 <_ZN9LineTrace5getKiEv>
 8007fae:	eef0 7a40 	vmov.f32	s15, s0
 8007fb2:	4b92      	ldr	r3, [pc, #584]	; (80081fc <cppLoop+0x2d4>)
 8007fb4:	edc3 7a00 	vstr	s15, [r3]
 8007fb8:	488f      	ldr	r0, [pc, #572]	; (80081f8 <cppLoop+0x2d0>)
 8007fba:	f00c fd86 	bl	8014aca <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8007fbe:	4b90      	ldr	r3, [pc, #576]	; (8008200 <cppLoop+0x2d8>)
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	f3bf 8f5b 	dmb	ish
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	bf0c      	ite	eq
 8007fd0:	2301      	moveq	r3, #1
 8007fd2:	2300      	movne	r3, #0
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d015      	beq.n	8008006 <cppLoop+0xde>
 8007fda:	4889      	ldr	r0, [pc, #548]	; (8008200 <cppLoop+0x2d8>)
 8007fdc:	f00c fd69 	bl	8014ab2 <__cxa_guard_acquire>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	bf14      	ite	ne
 8007fe6:	2301      	movne	r3, #1
 8007fe8:	2300      	moveq	r3, #0
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00a      	beq.n	8008006 <cppLoop+0xde>
 8007ff0:	487f      	ldr	r0, [pc, #508]	; (80081f0 <cppLoop+0x2c8>)
 8007ff2:	f7fb ff86 	bl	8003f02 <_ZN9LineTrace5getKdEv>
 8007ff6:	eef0 7a40 	vmov.f32	s15, s0
 8007ffa:	4b82      	ldr	r3, [pc, #520]	; (8008204 <cppLoop+0x2dc>)
 8007ffc:	edc3 7a00 	vstr	s15, [r3]
 8008000:	487f      	ldr	r0, [pc, #508]	; (8008200 <cppLoop+0x2d8>)
 8008002:	f00c fd62 	bl	8014aca <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 8008006:	4b80      	ldr	r3, [pc, #512]	; (8008208 <cppLoop+0x2e0>)
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	f3bf 8f5b 	dmb	ish
 800800e:	b2db      	uxtb	r3, r3
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	2b00      	cmp	r3, #0
 8008016:	bf0c      	ite	eq
 8008018:	2301      	moveq	r3, #1
 800801a:	2300      	movne	r3, #0
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b00      	cmp	r3, #0
 8008020:	d015      	beq.n	800804e <cppLoop+0x126>
 8008022:	4879      	ldr	r0, [pc, #484]	; (8008208 <cppLoop+0x2e0>)
 8008024:	f00c fd45 	bl	8014ab2 <__cxa_guard_acquire>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	bf14      	ite	ne
 800802e:	2301      	movne	r3, #1
 8008030:	2300      	moveq	r3, #0
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00a      	beq.n	800804e <cppLoop+0x126>
 8008038:	486d      	ldr	r0, [pc, #436]	; (80081f0 <cppLoop+0x2c8>)
 800803a:	f7fb ff8a 	bl	8003f52 <_ZN9LineTrace9getKpSlowEv>
 800803e:	eef0 7a40 	vmov.f32	s15, s0
 8008042:	4b72      	ldr	r3, [pc, #456]	; (800820c <cppLoop+0x2e4>)
 8008044:	edc3 7a00 	vstr	s15, [r3]
 8008048:	486f      	ldr	r0, [pc, #444]	; (8008208 <cppLoop+0x2e0>)
 800804a:	f00c fd3e 	bl	8014aca <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 800804e:	4b70      	ldr	r3, [pc, #448]	; (8008210 <cppLoop+0x2e8>)
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	f3bf 8f5b 	dmb	ish
 8008056:	b2db      	uxtb	r3, r3
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	2b00      	cmp	r3, #0
 800805e:	bf0c      	ite	eq
 8008060:	2301      	moveq	r3, #1
 8008062:	2300      	movne	r3, #0
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d015      	beq.n	8008096 <cppLoop+0x16e>
 800806a:	4869      	ldr	r0, [pc, #420]	; (8008210 <cppLoop+0x2e8>)
 800806c:	f00c fd21 	bl	8014ab2 <__cxa_guard_acquire>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	bf14      	ite	ne
 8008076:	2301      	movne	r3, #1
 8008078:	2300      	moveq	r3, #0
 800807a:	b2db      	uxtb	r3, r3
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00a      	beq.n	8008096 <cppLoop+0x16e>
 8008080:	485b      	ldr	r0, [pc, #364]	; (80081f0 <cppLoop+0x2c8>)
 8008082:	f7fb ff75 	bl	8003f70 <_ZN9LineTrace9getKiSlowEv>
 8008086:	eef0 7a40 	vmov.f32	s15, s0
 800808a:	4b62      	ldr	r3, [pc, #392]	; (8008214 <cppLoop+0x2ec>)
 800808c:	edc3 7a00 	vstr	s15, [r3]
 8008090:	485f      	ldr	r0, [pc, #380]	; (8008210 <cppLoop+0x2e8>)
 8008092:	f00c fd1a 	bl	8014aca <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 8008096:	4b60      	ldr	r3, [pc, #384]	; (8008218 <cppLoop+0x2f0>)
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	f3bf 8f5b 	dmb	ish
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	f003 0301 	and.w	r3, r3, #1
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	bf0c      	ite	eq
 80080a8:	2301      	moveq	r3, #1
 80080aa:	2300      	movne	r3, #0
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d015      	beq.n	80080de <cppLoop+0x1b6>
 80080b2:	4859      	ldr	r0, [pc, #356]	; (8008218 <cppLoop+0x2f0>)
 80080b4:	f00c fcfd 	bl	8014ab2 <__cxa_guard_acquire>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	bf14      	ite	ne
 80080be:	2301      	movne	r3, #1
 80080c0:	2300      	moveq	r3, #0
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00a      	beq.n	80080de <cppLoop+0x1b6>
 80080c8:	4849      	ldr	r0, [pc, #292]	; (80081f0 <cppLoop+0x2c8>)
 80080ca:	f7fb ff60 	bl	8003f8e <_ZN9LineTrace9getKdSlowEv>
 80080ce:	eef0 7a40 	vmov.f32	s15, s0
 80080d2:	4b52      	ldr	r3, [pc, #328]	; (800821c <cppLoop+0x2f4>)
 80080d4:	edc3 7a00 	vstr	s15, [r3]
 80080d8:	484f      	ldr	r0, [pc, #316]	; (8008218 <cppLoop+0x2f0>)
 80080da:	f00c fcf6 	bl	8014aca <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 80080de:	4b50      	ldr	r3, [pc, #320]	; (8008220 <cppLoop+0x2f8>)
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	f3bf 8f5b 	dmb	ish
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	f003 0301 	and.w	r3, r3, #1
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	bf0c      	ite	eq
 80080f0:	2301      	moveq	r3, #1
 80080f2:	2300      	movne	r3, #0
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d015      	beq.n	8008126 <cppLoop+0x1fe>
 80080fa:	4849      	ldr	r0, [pc, #292]	; (8008220 <cppLoop+0x2f8>)
 80080fc:	f00c fcd9 	bl	8014ab2 <__cxa_guard_acquire>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	bf14      	ite	ne
 8008106:	2301      	movne	r3, #1
 8008108:	2300      	moveq	r3, #0
 800810a:	b2db      	uxtb	r3, r3
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00a      	beq.n	8008126 <cppLoop+0x1fe>
 8008110:	4837      	ldr	r0, [pc, #220]	; (80081f0 <cppLoop+0x2c8>)
 8008112:	f7fb ffaa 	bl	800406a <_ZN9LineTrace17getTargetVelocityEv>
 8008116:	eef0 7a40 	vmov.f32	s15, s0
 800811a:	4b42      	ldr	r3, [pc, #264]	; (8008224 <cppLoop+0x2fc>)
 800811c:	edc3 7a00 	vstr	s15, [r3]
 8008120:	483f      	ldr	r0, [pc, #252]	; (8008220 <cppLoop+0x2f8>)
 8008122:	f00c fcd2 	bl	8014aca <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8008126:	4b40      	ldr	r3, [pc, #256]	; (8008228 <cppLoop+0x300>)
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	f3bf 8f5b 	dmb	ish
 800812e:	b2db      	uxtb	r3, r3
 8008130:	f003 0301 	and.w	r3, r3, #1
 8008134:	2b00      	cmp	r3, #0
 8008136:	bf0c      	ite	eq
 8008138:	2301      	moveq	r3, #1
 800813a:	2300      	movne	r3, #0
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b00      	cmp	r3, #0
 8008140:	d015      	beq.n	800816e <cppLoop+0x246>
 8008142:	4839      	ldr	r0, [pc, #228]	; (8008228 <cppLoop+0x300>)
 8008144:	f00c fcb5 	bl	8014ab2 <__cxa_guard_acquire>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	bf14      	ite	ne
 800814e:	2301      	movne	r3, #1
 8008150:	2300      	moveq	r3, #0
 8008152:	b2db      	uxtb	r3, r3
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00a      	beq.n	800816e <cppLoop+0x246>
 8008158:	4825      	ldr	r0, [pc, #148]	; (80081f0 <cppLoop+0x2c8>)
 800815a:	f7fb ff96 	bl	800408a <_ZN9LineTrace14getMaxVelocityEv>
 800815e:	eef0 7a40 	vmov.f32	s15, s0
 8008162:	4b32      	ldr	r3, [pc, #200]	; (800822c <cppLoop+0x304>)
 8008164:	edc3 7a00 	vstr	s15, [r3]
 8008168:	482f      	ldr	r0, [pc, #188]	; (8008228 <cppLoop+0x300>)
 800816a:	f00c fcae 	bl	8014aca <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 800816e:	4b30      	ldr	r3, [pc, #192]	; (8008230 <cppLoop+0x308>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	f3bf 8f5b 	dmb	ish
 8008176:	b2db      	uxtb	r3, r3
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	2b00      	cmp	r3, #0
 800817e:	bf0c      	ite	eq
 8008180:	2301      	moveq	r3, #1
 8008182:	2300      	movne	r3, #0
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b00      	cmp	r3, #0
 8008188:	d015      	beq.n	80081b6 <cppLoop+0x28e>
 800818a:	4829      	ldr	r0, [pc, #164]	; (8008230 <cppLoop+0x308>)
 800818c:	f00c fc91 	bl	8014ab2 <__cxa_guard_acquire>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	bf14      	ite	ne
 8008196:	2301      	movne	r3, #1
 8008198:	2300      	moveq	r3, #0
 800819a:	b2db      	uxtb	r3, r3
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00a      	beq.n	80081b6 <cppLoop+0x28e>
 80081a0:	4813      	ldr	r0, [pc, #76]	; (80081f0 <cppLoop+0x2c8>)
 80081a2:	f7fb ff82 	bl	80040aa <_ZN9LineTrace15getMaxVelocity2Ev>
 80081a6:	eef0 7a40 	vmov.f32	s15, s0
 80081aa:	4b22      	ldr	r3, [pc, #136]	; (8008234 <cppLoop+0x30c>)
 80081ac:	edc3 7a00 	vstr	s15, [r3]
 80081b0:	481f      	ldr	r0, [pc, #124]	; (8008230 <cppLoop+0x308>)
 80081b2:	f00c fc8a 	bl	8014aca <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 80081b6:	4b20      	ldr	r3, [pc, #128]	; (8008238 <cppLoop+0x310>)
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	f3bf 8f5b 	dmb	ish
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	bf0c      	ite	eq
 80081c8:	2301      	moveq	r3, #1
 80081ca:	2300      	movne	r3, #0
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d03f      	beq.n	8008252 <cppLoop+0x32a>
 80081d2:	4819      	ldr	r0, [pc, #100]	; (8008238 <cppLoop+0x310>)
 80081d4:	f00c fc6d 	bl	8014ab2 <__cxa_guard_acquire>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	bf14      	ite	ne
 80081de:	2301      	movne	r3, #1
 80081e0:	2300      	moveq	r3, #0
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d034      	beq.n	8008252 <cppLoop+0x32a>
 80081e8:	e028      	b.n	800823c <cppLoop+0x314>
 80081ea:	bf00      	nop
 80081ec:	200423e8 	.word	0x200423e8
 80081f0:	2001db64 	.word	0x2001db64
 80081f4:	200423e4 	.word	0x200423e4
 80081f8:	200423f0 	.word	0x200423f0
 80081fc:	200423ec 	.word	0x200423ec
 8008200:	200423f8 	.word	0x200423f8
 8008204:	200423f4 	.word	0x200423f4
 8008208:	20042400 	.word	0x20042400
 800820c:	200423fc 	.word	0x200423fc
 8008210:	20042408 	.word	0x20042408
 8008214:	20042404 	.word	0x20042404
 8008218:	20042410 	.word	0x20042410
 800821c:	2004240c 	.word	0x2004240c
 8008220:	20042418 	.word	0x20042418
 8008224:	20042414 	.word	0x20042414
 8008228:	20042420 	.word	0x20042420
 800822c:	2004241c 	.word	0x2004241c
 8008230:	20042428 	.word	0x20042428
 8008234:	20042424 	.word	0x20042424
 8008238:	20042430 	.word	0x20042430
 800823c:	48b6      	ldr	r0, [pc, #728]	; (8008518 <cppLoop+0x5f0>)
 800823e:	f7fb ff44 	bl	80040ca <_ZN9LineTrace14getMinVelocityEv>
 8008242:	eef0 7a40 	vmov.f32	s15, s0
 8008246:	4bb5      	ldr	r3, [pc, #724]	; (800851c <cppLoop+0x5f4>)
 8008248:	edc3 7a00 	vstr	s15, [r3]
 800824c:	48b4      	ldr	r0, [pc, #720]	; (8008520 <cppLoop+0x5f8>)
 800824e:	f00c fc3c 	bl	8014aca <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8008252:	4bb4      	ldr	r3, [pc, #720]	; (8008524 <cppLoop+0x5fc>)
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	f3bf 8f5b 	dmb	ish
 800825a:	b2db      	uxtb	r3, r3
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	2b00      	cmp	r3, #0
 8008262:	bf0c      	ite	eq
 8008264:	2301      	moveq	r3, #1
 8008266:	2300      	movne	r3, #0
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d015      	beq.n	800829a <cppLoop+0x372>
 800826e:	48ad      	ldr	r0, [pc, #692]	; (8008524 <cppLoop+0x5fc>)
 8008270:	f00c fc1f 	bl	8014ab2 <__cxa_guard_acquire>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	bf14      	ite	ne
 800827a:	2301      	movne	r3, #1
 800827c:	2300      	moveq	r3, #0
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00a      	beq.n	800829a <cppLoop+0x372>
 8008284:	48a4      	ldr	r0, [pc, #656]	; (8008518 <cppLoop+0x5f0>)
 8008286:	f7fb ff30 	bl	80040ea <_ZN9LineTrace15getMinVelocity2Ev>
 800828a:	eef0 7a40 	vmov.f32	s15, s0
 800828e:	4ba6      	ldr	r3, [pc, #664]	; (8008528 <cppLoop+0x600>)
 8008290:	edc3 7a00 	vstr	s15, [r3]
 8008294:	48a3      	ldr	r0, [pc, #652]	; (8008524 <cppLoop+0x5fc>)
 8008296:	f00c fc18 	bl	8014aca <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 800829a:	4ba4      	ldr	r3, [pc, #656]	; (800852c <cppLoop+0x604>)
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	f3bf 8f5b 	dmb	ish
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	f003 0301 	and.w	r3, r3, #1
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	bf0c      	ite	eq
 80082ac:	2301      	moveq	r3, #1
 80082ae:	2300      	movne	r3, #0
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d015      	beq.n	80082e2 <cppLoop+0x3ba>
 80082b6:	489d      	ldr	r0, [pc, #628]	; (800852c <cppLoop+0x604>)
 80082b8:	f00c fbfb 	bl	8014ab2 <__cxa_guard_acquire>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	bf14      	ite	ne
 80082c2:	2301      	movne	r3, #1
 80082c4:	2300      	moveq	r3, #0
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00a      	beq.n	80082e2 <cppLoop+0x3ba>
 80082cc:	4892      	ldr	r0, [pc, #584]	; (8008518 <cppLoop+0x5f0>)
 80082ce:	f7fb ff50 	bl	8004172 <_ZN9LineTrace9getMaxAccEv>
 80082d2:	eef0 7a40 	vmov.f32	s15, s0
 80082d6:	4b96      	ldr	r3, [pc, #600]	; (8008530 <cppLoop+0x608>)
 80082d8:	edc3 7a00 	vstr	s15, [r3]
 80082dc:	4893      	ldr	r0, [pc, #588]	; (800852c <cppLoop+0x604>)
 80082de:	f00c fbf4 	bl	8014aca <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 80082e2:	4b94      	ldr	r3, [pc, #592]	; (8008534 <cppLoop+0x60c>)
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	f3bf 8f5b 	dmb	ish
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	f003 0301 	and.w	r3, r3, #1
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	bf0c      	ite	eq
 80082f4:	2301      	moveq	r3, #1
 80082f6:	2300      	movne	r3, #0
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d015      	beq.n	800832a <cppLoop+0x402>
 80082fe:	488d      	ldr	r0, [pc, #564]	; (8008534 <cppLoop+0x60c>)
 8008300:	f00c fbd7 	bl	8014ab2 <__cxa_guard_acquire>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	bf14      	ite	ne
 800830a:	2301      	movne	r3, #1
 800830c:	2300      	moveq	r3, #0
 800830e:	b2db      	uxtb	r3, r3
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00a      	beq.n	800832a <cppLoop+0x402>
 8008314:	4880      	ldr	r0, [pc, #512]	; (8008518 <cppLoop+0x5f0>)
 8008316:	f7fb ff62 	bl	80041de <_ZN9LineTrace9getMaxDecEv>
 800831a:	eef0 7a40 	vmov.f32	s15, s0
 800831e:	4b86      	ldr	r3, [pc, #536]	; (8008538 <cppLoop+0x610>)
 8008320:	edc3 7a00 	vstr	s15, [r3]
 8008324:	4883      	ldr	r0, [pc, #524]	; (8008534 <cppLoop+0x60c>)
 8008326:	f00c fbd0 	bl	8014aca <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 800832a:	4b84      	ldr	r3, [pc, #528]	; (800853c <cppLoop+0x614>)
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	f3bf 8f5b 	dmb	ish
 8008332:	b2db      	uxtb	r3, r3
 8008334:	f003 0301 	and.w	r3, r3, #1
 8008338:	2b00      	cmp	r3, #0
 800833a:	bf0c      	ite	eq
 800833c:	2301      	moveq	r3, #1
 800833e:	2300      	movne	r3, #0
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b00      	cmp	r3, #0
 8008344:	d015      	beq.n	8008372 <cppLoop+0x44a>
 8008346:	487d      	ldr	r0, [pc, #500]	; (800853c <cppLoop+0x614>)
 8008348:	f00c fbb3 	bl	8014ab2 <__cxa_guard_acquire>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	bf14      	ite	ne
 8008352:	2301      	movne	r3, #1
 8008354:	2300      	moveq	r3, #0
 8008356:	b2db      	uxtb	r3, r3
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00a      	beq.n	8008372 <cppLoop+0x44a>
 800835c:	486e      	ldr	r0, [pc, #440]	; (8008518 <cppLoop+0x5f0>)
 800835e:	f7fb ff2c 	bl	80041ba <_ZN9LineTrace10getMaxAcc2Ev>
 8008362:	eef0 7a40 	vmov.f32	s15, s0
 8008366:	4b76      	ldr	r3, [pc, #472]	; (8008540 <cppLoop+0x618>)
 8008368:	edc3 7a00 	vstr	s15, [r3]
 800836c:	4873      	ldr	r0, [pc, #460]	; (800853c <cppLoop+0x614>)
 800836e:	f00c fbac 	bl	8014aca <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8008372:	4b74      	ldr	r3, [pc, #464]	; (8008544 <cppLoop+0x61c>)
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	f3bf 8f5b 	dmb	ish
 800837a:	b2db      	uxtb	r3, r3
 800837c:	f003 0301 	and.w	r3, r3, #1
 8008380:	2b00      	cmp	r3, #0
 8008382:	bf0c      	ite	eq
 8008384:	2301      	moveq	r3, #1
 8008386:	2300      	movne	r3, #0
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b00      	cmp	r3, #0
 800838c:	d015      	beq.n	80083ba <cppLoop+0x492>
 800838e:	486d      	ldr	r0, [pc, #436]	; (8008544 <cppLoop+0x61c>)
 8008390:	f00c fb8f 	bl	8014ab2 <__cxa_guard_acquire>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	bf14      	ite	ne
 800839a:	2301      	movne	r3, #1
 800839c:	2300      	moveq	r3, #0
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00a      	beq.n	80083ba <cppLoop+0x492>
 80083a4:	485c      	ldr	r0, [pc, #368]	; (8008518 <cppLoop+0x5f0>)
 80083a6:	f7fb fef6 	bl	8004196 <_ZN9LineTrace10getMaxDec2Ev>
 80083aa:	eef0 7a40 	vmov.f32	s15, s0
 80083ae:	4b66      	ldr	r3, [pc, #408]	; (8008548 <cppLoop+0x620>)
 80083b0:	edc3 7a00 	vstr	s15, [r3]
 80083b4:	4863      	ldr	r0, [pc, #396]	; (8008544 <cppLoop+0x61c>)
 80083b6:	f00c fb88 	bl	8014aca <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 80083ba:	4864      	ldr	r0, [pc, #400]	; (800854c <cppLoop+0x624>)
 80083bc:	f7fd f9aa 	bl	8005714 <_ZN12RotarySwitch8getValueEv>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b0f      	cmp	r3, #15
 80083c4:	f201 8546 	bhi.w	8009e54 <cppLoop+0x1f2c>
 80083c8:	a201      	add	r2, pc, #4	; (adr r2, 80083d0 <cppLoop+0x4a8>)
 80083ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ce:	bf00      	nop
 80083d0:	08008411 	.word	0x08008411
 80083d4:	08008795 	.word	0x08008795
 80083d8:	080088b1 	.word	0x080088b1
 80083dc:	08008a03 	.word	0x08008a03
 80083e0:	08008add 	.word	0x08008add
 80083e4:	08008d6d 	.word	0x08008d6d
 80083e8:	08008ea9 	.word	0x08008ea9
 80083ec:	0800912d 	.word	0x0800912d
 80083f0:	08009377 	.word	0x08009377
 80083f4:	08009607 	.word	0x08009607
 80083f8:	080096c3 	.word	0x080096c3
 80083fc:	080097b9 	.word	0x080097b9
 8008400:	0800983f 	.word	0x0800983f
 8008404:	08009905 	.word	0x08009905
 8008408:	080099cb 	.word	0x080099cb
 800840c:	08009ae5 	.word	0x08009ae5
	case 0:
		led.fullColor('W');
 8008410:	2157      	movs	r1, #87	; 0x57
 8008412:	484f      	ldr	r0, [pc, #316]	; (8008550 <cppLoop+0x628>)
 8008414:	f7f9 ff1e 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008418:	f7f8 fe42 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800841c:	2100      	movs	r1, #0
 800841e:	2000      	movs	r0, #0
 8008420:	f7f8 fe4e 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", abs(line_trace.getKpSlow()*1000));
 8008424:	483c      	ldr	r0, [pc, #240]	; (8008518 <cppLoop+0x5f0>)
 8008426:	f7fb fd94 	bl	8003f52 <_ZN9LineTrace9getKpSlowEv>
 800842a:	eeb0 7a40 	vmov.f32	s14, s0
 800842e:	eddf 7a49 	vldr	s15, [pc, #292]	; 8008554 <cppLoop+0x62c>
 8008432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008436:	eeb0 0a67 	vmov.f32	s0, s15
 800843a:	f7fa fb4a 	bl	8002ad2 <_ZSt3absf>
 800843e:	ee10 3a10 	vmov	r3, s0
 8008442:	4618      	mov	r0, r3
 8008444:	f7f8 f898 	bl	8000578 <__aeabi_f2d>
 8008448:	4603      	mov	r3, r0
 800844a:	460c      	mov	r4, r1
 800844c:	461a      	mov	r2, r3
 800844e:	4623      	mov	r3, r4
 8008450:	4841      	ldr	r0, [pc, #260]	; (8008558 <cppLoop+0x630>)
 8008452:	f7f8 fe5f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008456:	2101      	movs	r1, #1
 8008458:	2000      	movs	r0, #0
 800845a:	f7f8 fe31 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKiSlow()*100), abs(line_trace.getKdSlow()*10000));
 800845e:	482e      	ldr	r0, [pc, #184]	; (8008518 <cppLoop+0x5f0>)
 8008460:	f7fb fd86 	bl	8003f70 <_ZN9LineTrace9getKiSlowEv>
 8008464:	eeb0 7a40 	vmov.f32	s14, s0
 8008468:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800855c <cppLoop+0x634>
 800846c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008470:	eeb0 0a67 	vmov.f32	s0, s15
 8008474:	f7fa fb2d 	bl	8002ad2 <_ZSt3absf>
 8008478:	ee10 3a10 	vmov	r3, s0
 800847c:	4618      	mov	r0, r3
 800847e:	f7f8 f87b 	bl	8000578 <__aeabi_f2d>
 8008482:	4605      	mov	r5, r0
 8008484:	460e      	mov	r6, r1
 8008486:	4824      	ldr	r0, [pc, #144]	; (8008518 <cppLoop+0x5f0>)
 8008488:	f7fb fd81 	bl	8003f8e <_ZN9LineTrace9getKdSlowEv>
 800848c:	eeb0 7a40 	vmov.f32	s14, s0
 8008490:	eddf 7a33 	vldr	s15, [pc, #204]	; 8008560 <cppLoop+0x638>
 8008494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008498:	eeb0 0a67 	vmov.f32	s0, s15
 800849c:	f7fa fb19 	bl	8002ad2 <_ZSt3absf>
 80084a0:	ee10 3a10 	vmov	r3, s0
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7f8 f867 	bl	8000578 <__aeabi_f2d>
 80084aa:	4603      	mov	r3, r0
 80084ac:	460c      	mov	r4, r1
 80084ae:	e9cd 3400 	strd	r3, r4, [sp]
 80084b2:	462a      	mov	r2, r5
 80084b4:	4633      	mov	r3, r6
 80084b6:	482b      	ldr	r0, [pc, #172]	; (8008564 <cppLoop+0x63c>)
 80084b8:	f7f8 fe2c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80084bc:	482a      	ldr	r0, [pc, #168]	; (8008568 <cppLoop+0x640>)
 80084be:	f7f9 fe65 	bl	800218c <_ZN8JoyStick8getValueEv>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b08      	cmp	r3, #8
 80084c6:	bf0c      	ite	eq
 80084c8:	2301      	moveq	r3, #1
 80084ca:	2300      	movne	r3, #0
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d04e      	beq.n	8008570 <cppLoop+0x648>
			led.LR(-1, 1);
 80084d2:	2201      	movs	r2, #1
 80084d4:	f04f 31ff 	mov.w	r1, #4294967295
 80084d8:	481d      	ldr	r0, [pc, #116]	; (8008550 <cppLoop+0x628>)
 80084da:	f7f9 ff77 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80084de:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80084e2:	f001 fe01 	bl	800a0e8 <HAL_Delay>

			selector++;
 80084e6:	4b21      	ldr	r3, [pc, #132]	; (800856c <cppLoop+0x644>)
 80084e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	3301      	adds	r3, #1
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	b21a      	sxth	r2, r3
 80084f4:	4b1d      	ldr	r3, [pc, #116]	; (800856c <cppLoop+0x644>)
 80084f6:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80084f8:	4b1c      	ldr	r3, [pc, #112]	; (800856c <cppLoop+0x644>)
 80084fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084fe:	2b02      	cmp	r3, #2
 8008500:	dd02      	ble.n	8008508 <cppLoop+0x5e0>
 8008502:	4b1a      	ldr	r3, [pc, #104]	; (800856c <cppLoop+0x644>)
 8008504:	2200      	movs	r2, #0
 8008506:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008508:	2200      	movs	r2, #0
 800850a:	f04f 31ff 	mov.w	r1, #4294967295
 800850e:	4810      	ldr	r0, [pc, #64]	; (8008550 <cppLoop+0x628>)
 8008510:	f7f9 ff5c 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 8008514:	f001 bca0 	b.w	8009e58 <cppLoop+0x1f30>
 8008518:	2001db64 	.word	0x2001db64
 800851c:	2004242c 	.word	0x2004242c
 8008520:	20042430 	.word	0x20042430
 8008524:	20042438 	.word	0x20042438
 8008528:	20042434 	.word	0x20042434
 800852c:	20042440 	.word	0x20042440
 8008530:	2004243c 	.word	0x2004243c
 8008534:	20042448 	.word	0x20042448
 8008538:	20042444 	.word	0x20042444
 800853c:	20042450 	.word	0x20042450
 8008540:	2004244c 	.word	0x2004244c
 8008544:	20042458 	.word	0x20042458
 8008548:	20042454 	.word	0x20042454
 800854c:	200005c8 	.word	0x200005c8
 8008550:	200005d0 	.word	0x200005d0
 8008554:	447a0000 	.word	0x447a0000
 8008558:	0801a1d0 	.word	0x0801a1d0
 800855c:	42c80000 	.word	0x42c80000
 8008560:	461c4000 	.word	0x461c4000
 8008564:	0801a1dc 	.word	0x0801a1dc
 8008568:	200005c4 	.word	0x200005c4
 800856c:	200423da 	.word	0x200423da
		else if(joy_stick.getValue() == JOY_R){
 8008570:	48bd      	ldr	r0, [pc, #756]	; (8008868 <cppLoop+0x940>)
 8008572:	f7f9 fe0b 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008576:	4603      	mov	r3, r0
 8008578:	2b10      	cmp	r3, #16
 800857a:	bf0c      	ite	eq
 800857c:	2301      	moveq	r3, #1
 800857e:	2300      	movne	r3, #0
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b00      	cmp	r3, #0
 8008584:	d059      	beq.n	800863a <cppLoop+0x712>
			led.LR(-1, 1);
 8008586:	2201      	movs	r2, #1
 8008588:	f04f 31ff 	mov.w	r1, #4294967295
 800858c:	48b7      	ldr	r0, [pc, #732]	; (800886c <cppLoop+0x944>)
 800858e:	f7f9 ff1d 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008592:	2064      	movs	r0, #100	; 0x64
 8008594:	f001 fda8 	bl	800a0e8 <HAL_Delay>
			if(selector == 0){
 8008598:	4bb5      	ldr	r3, [pc, #724]	; (8008870 <cppLoop+0x948>)
 800859a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d113      	bne.n	80085ca <cppLoop+0x6a2>
				adj_kp_slow = adj_kp_slow + 0.00001;
 80085a2:	4bb4      	ldr	r3, [pc, #720]	; (8008874 <cppLoop+0x94c>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7f7 ffe6 	bl	8000578 <__aeabi_f2d>
 80085ac:	a3a8      	add	r3, pc, #672	; (adr r3, 8008850 <cppLoop+0x928>)
 80085ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b2:	f7f7 fe83 	bl	80002bc <__adddf3>
 80085b6:	4603      	mov	r3, r0
 80085b8:	460c      	mov	r4, r1
 80085ba:	4618      	mov	r0, r3
 80085bc:	4621      	mov	r1, r4
 80085be:	f7f8 fb2b 	bl	8000c18 <__aeabi_d2f>
 80085c2:	4602      	mov	r2, r0
 80085c4:	4bab      	ldr	r3, [pc, #684]	; (8008874 <cppLoop+0x94c>)
 80085c6:	601a      	str	r2, [r3, #0]
 80085c8:	e02b      	b.n	8008622 <cppLoop+0x6fa>
			else if(selector == 1){
 80085ca:	4ba9      	ldr	r3, [pc, #676]	; (8008870 <cppLoop+0x948>)
 80085cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d113      	bne.n	80085fc <cppLoop+0x6d4>
				adj_ki_slow = adj_ki_slow + 0.0001;
 80085d4:	4ba8      	ldr	r3, [pc, #672]	; (8008878 <cppLoop+0x950>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4618      	mov	r0, r3
 80085da:	f7f7 ffcd 	bl	8000578 <__aeabi_f2d>
 80085de:	a39e      	add	r3, pc, #632	; (adr r3, 8008858 <cppLoop+0x930>)
 80085e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e4:	f7f7 fe6a 	bl	80002bc <__adddf3>
 80085e8:	4603      	mov	r3, r0
 80085ea:	460c      	mov	r4, r1
 80085ec:	4618      	mov	r0, r3
 80085ee:	4621      	mov	r1, r4
 80085f0:	f7f8 fb12 	bl	8000c18 <__aeabi_d2f>
 80085f4:	4602      	mov	r2, r0
 80085f6:	4ba0      	ldr	r3, [pc, #640]	; (8008878 <cppLoop+0x950>)
 80085f8:	601a      	str	r2, [r3, #0]
 80085fa:	e012      	b.n	8008622 <cppLoop+0x6fa>
				adj_kd_slow = adj_kd_slow + 0.000001;
 80085fc:	4b9f      	ldr	r3, [pc, #636]	; (800887c <cppLoop+0x954>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4618      	mov	r0, r3
 8008602:	f7f7 ffb9 	bl	8000578 <__aeabi_f2d>
 8008606:	a396      	add	r3, pc, #600	; (adr r3, 8008860 <cppLoop+0x938>)
 8008608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860c:	f7f7 fe56 	bl	80002bc <__adddf3>
 8008610:	4603      	mov	r3, r0
 8008612:	460c      	mov	r4, r1
 8008614:	4618      	mov	r0, r3
 8008616:	4621      	mov	r1, r4
 8008618:	f7f8 fafe 	bl	8000c18 <__aeabi_d2f>
 800861c:	4602      	mov	r2, r0
 800861e:	4b97      	ldr	r3, [pc, #604]	; (800887c <cppLoop+0x954>)
 8008620:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008622:	2152      	movs	r1, #82	; 0x52
 8008624:	4891      	ldr	r0, [pc, #580]	; (800886c <cppLoop+0x944>)
 8008626:	f7f9 fe15 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800862a:	2200      	movs	r2, #0
 800862c:	f04f 31ff 	mov.w	r1, #4294967295
 8008630:	488e      	ldr	r0, [pc, #568]	; (800886c <cppLoop+0x944>)
 8008632:	f7f9 fecb 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008636:	f001 bc0f 	b.w	8009e58 <cppLoop+0x1f30>
		else if(joy_stick.getValue() == JOY_L){
 800863a:	488b      	ldr	r0, [pc, #556]	; (8008868 <cppLoop+0x940>)
 800863c:	f7f9 fda6 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008640:	4603      	mov	r3, r0
 8008642:	2b01      	cmp	r3, #1
 8008644:	bf0c      	ite	eq
 8008646:	2301      	moveq	r3, #1
 8008648:	2300      	movne	r3, #0
 800864a:	b2db      	uxtb	r3, r3
 800864c:	2b00      	cmp	r3, #0
 800864e:	d059      	beq.n	8008704 <cppLoop+0x7dc>
			led.LR(-1, 1);
 8008650:	2201      	movs	r2, #1
 8008652:	f04f 31ff 	mov.w	r1, #4294967295
 8008656:	4885      	ldr	r0, [pc, #532]	; (800886c <cppLoop+0x944>)
 8008658:	f7f9 feb8 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800865c:	2064      	movs	r0, #100	; 0x64
 800865e:	f001 fd43 	bl	800a0e8 <HAL_Delay>
			if(selector == 0){
 8008662:	4b83      	ldr	r3, [pc, #524]	; (8008870 <cppLoop+0x948>)
 8008664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d113      	bne.n	8008694 <cppLoop+0x76c>
				adj_kp_slow = adj_kp_slow - 0.00001;
 800866c:	4b81      	ldr	r3, [pc, #516]	; (8008874 <cppLoop+0x94c>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4618      	mov	r0, r3
 8008672:	f7f7 ff81 	bl	8000578 <__aeabi_f2d>
 8008676:	a376      	add	r3, pc, #472	; (adr r3, 8008850 <cppLoop+0x928>)
 8008678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867c:	f7f7 fe1c 	bl	80002b8 <__aeabi_dsub>
 8008680:	4603      	mov	r3, r0
 8008682:	460c      	mov	r4, r1
 8008684:	4618      	mov	r0, r3
 8008686:	4621      	mov	r1, r4
 8008688:	f7f8 fac6 	bl	8000c18 <__aeabi_d2f>
 800868c:	4602      	mov	r2, r0
 800868e:	4b79      	ldr	r3, [pc, #484]	; (8008874 <cppLoop+0x94c>)
 8008690:	601a      	str	r2, [r3, #0]
 8008692:	e02b      	b.n	80086ec <cppLoop+0x7c4>
			else if(selector == 1){
 8008694:	4b76      	ldr	r3, [pc, #472]	; (8008870 <cppLoop+0x948>)
 8008696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d113      	bne.n	80086c6 <cppLoop+0x79e>
				adj_ki_slow = adj_ki_slow - 0.0001;
 800869e:	4b76      	ldr	r3, [pc, #472]	; (8008878 <cppLoop+0x950>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7f7 ff68 	bl	8000578 <__aeabi_f2d>
 80086a8:	a36b      	add	r3, pc, #428	; (adr r3, 8008858 <cppLoop+0x930>)
 80086aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ae:	f7f7 fe03 	bl	80002b8 <__aeabi_dsub>
 80086b2:	4603      	mov	r3, r0
 80086b4:	460c      	mov	r4, r1
 80086b6:	4618      	mov	r0, r3
 80086b8:	4621      	mov	r1, r4
 80086ba:	f7f8 faad 	bl	8000c18 <__aeabi_d2f>
 80086be:	4602      	mov	r2, r0
 80086c0:	4b6d      	ldr	r3, [pc, #436]	; (8008878 <cppLoop+0x950>)
 80086c2:	601a      	str	r2, [r3, #0]
 80086c4:	e012      	b.n	80086ec <cppLoop+0x7c4>
				adj_kd_slow = adj_kd_slow - 0.000001;
 80086c6:	4b6d      	ldr	r3, [pc, #436]	; (800887c <cppLoop+0x954>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7f7 ff54 	bl	8000578 <__aeabi_f2d>
 80086d0:	a363      	add	r3, pc, #396	; (adr r3, 8008860 <cppLoop+0x938>)
 80086d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d6:	f7f7 fdef 	bl	80002b8 <__aeabi_dsub>
 80086da:	4603      	mov	r3, r0
 80086dc:	460c      	mov	r4, r1
 80086de:	4618      	mov	r0, r3
 80086e0:	4621      	mov	r1, r4
 80086e2:	f7f8 fa99 	bl	8000c18 <__aeabi_d2f>
 80086e6:	4602      	mov	r2, r0
 80086e8:	4b64      	ldr	r3, [pc, #400]	; (800887c <cppLoop+0x954>)
 80086ea:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80086ec:	2152      	movs	r1, #82	; 0x52
 80086ee:	485f      	ldr	r0, [pc, #380]	; (800886c <cppLoop+0x944>)
 80086f0:	f7f9 fdb0 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80086f4:	2200      	movs	r2, #0
 80086f6:	f04f 31ff 	mov.w	r1, #4294967295
 80086fa:	485c      	ldr	r0, [pc, #368]	; (800886c <cppLoop+0x944>)
 80086fc:	f7f9 fe66 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008700:	f001 bbaa 	b.w	8009e58 <cppLoop+0x1f30>
		else if(joy_stick.getValue() == JOY_C){
 8008704:	4858      	ldr	r0, [pc, #352]	; (8008868 <cppLoop+0x940>)
 8008706:	f7f9 fd41 	bl	800218c <_ZN8JoyStick8getValueEv>
 800870a:	4603      	mov	r3, r0
 800870c:	2b02      	cmp	r3, #2
 800870e:	bf0c      	ite	eq
 8008710:	2301      	moveq	r3, #1
 8008712:	2300      	movne	r3, #0
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	f001 839e 	beq.w	8009e58 <cppLoop+0x1f30>
			led.LR(-1, 1);
 800871c:	2201      	movs	r2, #1
 800871e:	f04f 31ff 	mov.w	r1, #4294967295
 8008722:	4852      	ldr	r0, [pc, #328]	; (800886c <cppLoop+0x944>)
 8008724:	f7f9 fe52 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008728:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800872c:	f001 fcdc 	bl	800a0e8 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 8008730:	2300      	movs	r3, #0
 8008732:	9300      	str	r3, [sp, #0]
 8008734:	4b4f      	ldr	r3, [pc, #316]	; (8008874 <cppLoop+0x94c>)
 8008736:	2201      	movs	r2, #1
 8008738:	4951      	ldr	r1, [pc, #324]	; (8008880 <cppLoop+0x958>)
 800873a:	4852      	ldr	r0, [pc, #328]	; (8008884 <cppLoop+0x95c>)
 800873c:	f7f9 f89e 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 8008740:	2300      	movs	r3, #0
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	4b4c      	ldr	r3, [pc, #304]	; (8008878 <cppLoop+0x950>)
 8008746:	2201      	movs	r2, #1
 8008748:	494f      	ldr	r1, [pc, #316]	; (8008888 <cppLoop+0x960>)
 800874a:	484e      	ldr	r0, [pc, #312]	; (8008884 <cppLoop+0x95c>)
 800874c:	f7f9 f896 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 8008750:	2300      	movs	r3, #0
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	4b49      	ldr	r3, [pc, #292]	; (800887c <cppLoop+0x954>)
 8008756:	2201      	movs	r2, #1
 8008758:	494c      	ldr	r1, [pc, #304]	; (800888c <cppLoop+0x964>)
 800875a:	484a      	ldr	r0, [pc, #296]	; (8008884 <cppLoop+0x95c>)
 800875c:	f7f9 f88e 	bl	800187c <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 8008760:	4b44      	ldr	r3, [pc, #272]	; (8008874 <cppLoop+0x94c>)
 8008762:	edd3 7a00 	vldr	s15, [r3]
 8008766:	4b44      	ldr	r3, [pc, #272]	; (8008878 <cppLoop+0x950>)
 8008768:	ed93 7a00 	vldr	s14, [r3]
 800876c:	4b43      	ldr	r3, [pc, #268]	; (800887c <cppLoop+0x954>)
 800876e:	edd3 6a00 	vldr	s13, [r3]
 8008772:	eeb0 1a66 	vmov.f32	s2, s13
 8008776:	eef0 0a47 	vmov.f32	s1, s14
 800877a:	eeb0 0a67 	vmov.f32	s0, s15
 800877e:	4844      	ldr	r0, [pc, #272]	; (8008890 <cppLoop+0x968>)
 8008780:	f7fb fbce 	bl	8003f20 <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 8008784:	2200      	movs	r2, #0
 8008786:	f04f 31ff 	mov.w	r1, #4294967295
 800878a:	4838      	ldr	r0, [pc, #224]	; (800886c <cppLoop+0x944>)
 800878c:	f7f9 fe1e 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008790:	f001 bb62 	b.w	8009e58 <cppLoop+0x1f30>

	case 1:
		led.fullColor('C');
 8008794:	2143      	movs	r1, #67	; 0x43
 8008796:	4835      	ldr	r0, [pc, #212]	; (800886c <cppLoop+0x944>)
 8008798:	f7f9 fd5c 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 800879c:	f7f8 fc80 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80087a0:	2100      	movs	r1, #0
 80087a2:	2000      	movs	r0, #0
 80087a4:	f7f8 fc8c 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80087a8:	483a      	ldr	r0, [pc, #232]	; (8008894 <cppLoop+0x96c>)
 80087aa:	f7f8 fcb3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80087ae:	2101      	movs	r1, #1
 80087b0:	2000      	movs	r0, #0
 80087b2:	f7f8 fc85 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 80087b6:	4b38      	ldr	r3, [pc, #224]	; (8008898 <cppLoop+0x970>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7f7 fedc 	bl	8000578 <__aeabi_f2d>
 80087c0:	4603      	mov	r3, r0
 80087c2:	460c      	mov	r4, r1
 80087c4:	461a      	mov	r2, r3
 80087c6:	4623      	mov	r3, r4
 80087c8:	4834      	ldr	r0, [pc, #208]	; (800889c <cppLoop+0x974>)
 80087ca:	f7f8 fca3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80087ce:	4826      	ldr	r0, [pc, #152]	; (8008868 <cppLoop+0x940>)
 80087d0:	f7f9 fcdc 	bl	800218c <_ZN8JoyStick8getValueEv>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	bf0c      	ite	eq
 80087da:	2301      	moveq	r3, #1
 80087dc:	2300      	movne	r3, #0
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f001 833b 	beq.w	8009e5c <cppLoop+0x1f34>
			HAL_Delay(500);
 80087e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80087ea:	f001 fc7d 	bl	800a0e8 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 80087ee:	4b2a      	ldr	r3, [pc, #168]	; (8008898 <cppLoop+0x970>)
 80087f0:	edd3 7a00 	vldr	s15, [r3]
 80087f4:	eeb0 0a67 	vmov.f32	s0, s15
 80087f8:	4825      	ldr	r0, [pc, #148]	; (8008890 <cppLoop+0x968>)
 80087fa:	f7fb fbe6 	bl	8003fca <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 80087fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008802:	2101      	movs	r1, #1
 8008804:	4819      	ldr	r0, [pc, #100]	; (800886c <cppLoop+0x944>)
 8008806:	f7f9 fde1 	bl	80023cc <_ZN3LED2LREaa>
			//HAL_Delay(3000);
			//esc.on(BLCD_POWER, BLCD_POWER, BLDC_POWER, BLDC_POWER);
			//HAL_Delay(1000);

			// Record start
			HAL_Delay(1000);
 800880a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800880e:	f001 fc6b 	bl	800a0e8 <HAL_Delay>
			logger.start();
 8008812:	4823      	ldr	r0, [pc, #140]	; (80088a0 <cppLoop+0x978>)
 8008814:	f7fc fbbd 	bl	8004f92 <_ZN6Logger5startEv>

			// Run
			line_trace.setMode(FIRST_RUNNING);
 8008818:	2100      	movs	r1, #0
 800881a:	481d      	ldr	r0, [pc, #116]	; (8008890 <cppLoop+0x968>)
 800881c:	f7fb fe26 	bl	800446c <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8008820:	481b      	ldr	r0, [pc, #108]	; (8008890 <cppLoop+0x968>)
 8008822:	f7fb fe67 	bl	80044f4 <_ZN9LineTrace7runningEv>

			// BLDC off
			//esc.off();

			// Record stop and save
			logger.stop();
 8008826:	481e      	ldr	r0, [pc, #120]	; (80088a0 <cppLoop+0x978>)
 8008828:	f7fc fbc3 	bl	8004fb2 <_ZN6Logger4stopEv>
			logger.saveLogsInt("STATELOG", "LPERIOD.txt");
 800882c:	4a1d      	ldr	r2, [pc, #116]	; (80088a4 <cppLoop+0x97c>)
 800882e:	491e      	ldr	r1, [pc, #120]	; (80088a8 <cppLoop+0x980>)
 8008830:	481b      	ldr	r0, [pc, #108]	; (80088a0 <cppLoop+0x978>)
 8008832:	f7fc fab9 	bl	8004da8 <_ZN6Logger11saveLogsIntEPKcS1_>
			logger.saveLogs2Int("STATELOG", "RPERIOD.txt");
 8008836:	4a1d      	ldr	r2, [pc, #116]	; (80088ac <cppLoop+0x984>)
 8008838:	491b      	ldr	r1, [pc, #108]	; (80088a8 <cppLoop+0x980>)
 800883a:	4819      	ldr	r0, [pc, #100]	; (80088a0 <cppLoop+0x978>)
 800883c:	f7fc faca 	bl	8004dd4 <_ZN6Logger12saveLogs2IntEPKcS1_>

			led.LR(0, -1);
 8008840:	f04f 32ff 	mov.w	r2, #4294967295
 8008844:	2100      	movs	r1, #0
 8008846:	4809      	ldr	r0, [pc, #36]	; (800886c <cppLoop+0x944>)
 8008848:	f7f9 fdc0 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 800884c:	f001 bb06 	b.w	8009e5c <cppLoop+0x1f34>
 8008850:	88e368f1 	.word	0x88e368f1
 8008854:	3ee4f8b5 	.word	0x3ee4f8b5
 8008858:	eb1c432d 	.word	0xeb1c432d
 800885c:	3f1a36e2 	.word	0x3f1a36e2
 8008860:	a0b5ed8d 	.word	0xa0b5ed8d
 8008864:	3eb0c6f7 	.word	0x3eb0c6f7
 8008868:	200005c4 	.word	0x200005c4
 800886c:	200005d0 	.word	0x200005d0
 8008870:	200423da 	.word	0x200423da
 8008874:	200423fc 	.word	0x200423fc
 8008878:	20042404 	.word	0x20042404
 800887c:	2004240c 	.word	0x2004240c
 8008880:	0801a1ec 	.word	0x0801a1ec
 8008884:	0801a1f8 	.word	0x0801a1f8
 8008888:	0801a200 	.word	0x0801a200
 800888c:	0801a20c 	.word	0x0801a20c
 8008890:	2001db64 	.word	0x2001db64
 8008894:	0801a218 	.word	0x0801a218
 8008898:	20042414 	.word	0x20042414
 800889c:	0801a224 	.word	0x0801a224
 80088a0:	200005f4 	.word	0x200005f4
 80088a4:	0801a230 	.word	0x0801a230
 80088a8:	0801a23c 	.word	0x0801a23c
 80088ac:	0801a248 	.word	0x0801a248

	case 2:
		led.fullColor('B');
 80088b0:	2142      	movs	r1, #66	; 0x42
 80088b2:	48b9      	ldr	r0, [pc, #740]	; (8008b98 <cppLoop+0xc70>)
 80088b4:	f7f9 fcce 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80088b8:	f7f8 fbf2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80088bc:	2100      	movs	r1, #0
 80088be:	2000      	movs	r0, #0
 80088c0:	f7f8 fbfe 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80088c4:	48b5      	ldr	r0, [pc, #724]	; (8008b9c <cppLoop+0xc74>)
 80088c6:	f7f8 fc25 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80088ca:	2101      	movs	r1, #1
 80088cc:	2000      	movs	r0, #0
 80088ce:	f7f8 fbf7 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 80088d2:	4bb3      	ldr	r3, [pc, #716]	; (8008ba0 <cppLoop+0xc78>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7f7 fe4e 	bl	8000578 <__aeabi_f2d>
 80088dc:	4603      	mov	r3, r0
 80088de:	460c      	mov	r4, r1
 80088e0:	461a      	mov	r2, r3
 80088e2:	4623      	mov	r3, r4
 80088e4:	48af      	ldr	r0, [pc, #700]	; (8008ba4 <cppLoop+0xc7c>)
 80088e6:	f7f8 fc15 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 80088ea:	48af      	ldr	r0, [pc, #700]	; (8008ba8 <cppLoop+0xc80>)
 80088ec:	f7f9 fc4e 	bl	800218c <_ZN8JoyStick8getValueEv>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b10      	cmp	r3, #16
 80088f4:	bf0c      	ite	eq
 80088f6:	2301      	moveq	r3, #1
 80088f8:	2300      	movne	r3, #0
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d023      	beq.n	8008948 <cppLoop+0xa20>
			led.LR(-1, 1);
 8008900:	2201      	movs	r2, #1
 8008902:	f04f 31ff 	mov.w	r1, #4294967295
 8008906:	48a4      	ldr	r0, [pc, #656]	; (8008b98 <cppLoop+0xc70>)
 8008908:	f7f9 fd60 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800890c:	2064      	movs	r0, #100	; 0x64
 800890e:	f001 fbeb 	bl	800a0e8 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 8008912:	4ba3      	ldr	r3, [pc, #652]	; (8008ba0 <cppLoop+0xc78>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4618      	mov	r0, r3
 8008918:	f7f7 fe2e 	bl	8000578 <__aeabi_f2d>
 800891c:	a39c      	add	r3, pc, #624	; (adr r3, 8008b90 <cppLoop+0xc68>)
 800891e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008922:	f7f7 fccb 	bl	80002bc <__adddf3>
 8008926:	4603      	mov	r3, r0
 8008928:	460c      	mov	r4, r1
 800892a:	4618      	mov	r0, r3
 800892c:	4621      	mov	r1, r4
 800892e:	f7f8 f973 	bl	8000c18 <__aeabi_d2f>
 8008932:	4602      	mov	r2, r0
 8008934:	4b9a      	ldr	r3, [pc, #616]	; (8008ba0 <cppLoop+0xc78>)
 8008936:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8008938:	2200      	movs	r2, #0
 800893a:	f04f 31ff 	mov.w	r1, #4294967295
 800893e:	4896      	ldr	r0, [pc, #600]	; (8008b98 <cppLoop+0xc70>)
 8008940:	f7f9 fd44 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 8008944:	f001 ba8c 	b.w	8009e60 <cppLoop+0x1f38>
		else if(joy_stick.getValue() == JOY_L){
 8008948:	4897      	ldr	r0, [pc, #604]	; (8008ba8 <cppLoop+0xc80>)
 800894a:	f7f9 fc1f 	bl	800218c <_ZN8JoyStick8getValueEv>
 800894e:	4603      	mov	r3, r0
 8008950:	2b01      	cmp	r3, #1
 8008952:	bf0c      	ite	eq
 8008954:	2301      	moveq	r3, #1
 8008956:	2300      	movne	r3, #0
 8008958:	b2db      	uxtb	r3, r3
 800895a:	2b00      	cmp	r3, #0
 800895c:	d023      	beq.n	80089a6 <cppLoop+0xa7e>
			led.LR(-1, 1);
 800895e:	2201      	movs	r2, #1
 8008960:	f04f 31ff 	mov.w	r1, #4294967295
 8008964:	488c      	ldr	r0, [pc, #560]	; (8008b98 <cppLoop+0xc70>)
 8008966:	f7f9 fd31 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800896a:	2064      	movs	r0, #100	; 0x64
 800896c:	f001 fbbc 	bl	800a0e8 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8008970:	4b8b      	ldr	r3, [pc, #556]	; (8008ba0 <cppLoop+0xc78>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4618      	mov	r0, r3
 8008976:	f7f7 fdff 	bl	8000578 <__aeabi_f2d>
 800897a:	a385      	add	r3, pc, #532	; (adr r3, 8008b90 <cppLoop+0xc68>)
 800897c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008980:	f7f7 fc9a 	bl	80002b8 <__aeabi_dsub>
 8008984:	4603      	mov	r3, r0
 8008986:	460c      	mov	r4, r1
 8008988:	4618      	mov	r0, r3
 800898a:	4621      	mov	r1, r4
 800898c:	f7f8 f944 	bl	8000c18 <__aeabi_d2f>
 8008990:	4602      	mov	r2, r0
 8008992:	4b83      	ldr	r3, [pc, #524]	; (8008ba0 <cppLoop+0xc78>)
 8008994:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008996:	2200      	movs	r2, #0
 8008998:	f04f 31ff 	mov.w	r1, #4294967295
 800899c:	487e      	ldr	r0, [pc, #504]	; (8008b98 <cppLoop+0xc70>)
 800899e:	f7f9 fd15 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80089a2:	f001 ba5d 	b.w	8009e60 <cppLoop+0x1f38>
		else if(joy_stick.getValue() == JOY_C){
 80089a6:	4880      	ldr	r0, [pc, #512]	; (8008ba8 <cppLoop+0xc80>)
 80089a8:	f7f9 fbf0 	bl	800218c <_ZN8JoyStick8getValueEv>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	bf0c      	ite	eq
 80089b2:	2301      	moveq	r3, #1
 80089b4:	2300      	movne	r3, #0
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f001 8251 	beq.w	8009e60 <cppLoop+0x1f38>
			led.LR(-1, 1);
 80089be:	2201      	movs	r2, #1
 80089c0:	f04f 31ff 	mov.w	r1, #4294967295
 80089c4:	4874      	ldr	r0, [pc, #464]	; (8008b98 <cppLoop+0xc70>)
 80089c6:	f7f9 fd01 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80089ca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80089ce:	f001 fb8b 	bl	800a0e8 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 80089d2:	2300      	movs	r3, #0
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	4b72      	ldr	r3, [pc, #456]	; (8008ba0 <cppLoop+0xc78>)
 80089d8:	2201      	movs	r2, #1
 80089da:	4974      	ldr	r1, [pc, #464]	; (8008bac <cppLoop+0xc84>)
 80089dc:	4874      	ldr	r0, [pc, #464]	; (8008bb0 <cppLoop+0xc88>)
 80089de:	f7f8 ff4d 	bl	800187c <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 80089e2:	4b6f      	ldr	r3, [pc, #444]	; (8008ba0 <cppLoop+0xc78>)
 80089e4:	edd3 7a00 	vldr	s15, [r3]
 80089e8:	eeb0 0a67 	vmov.f32	s0, s15
 80089ec:	4871      	ldr	r0, [pc, #452]	; (8008bb4 <cppLoop+0xc8c>)
 80089ee:	f7fb faec 	bl	8003fca <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 80089f2:	2200      	movs	r2, #0
 80089f4:	f04f 31ff 	mov.w	r1, #4294967295
 80089f8:	4867      	ldr	r0, [pc, #412]	; (8008b98 <cppLoop+0xc70>)
 80089fa:	f7f9 fce7 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80089fe:	f001 ba2f 	b.w	8009e60 <cppLoop+0x1f38>

	case 3:
		led.fullColor('Y');
 8008a02:	2159      	movs	r1, #89	; 0x59
 8008a04:	4864      	ldr	r0, [pc, #400]	; (8008b98 <cppLoop+0xc70>)
 8008a06:	f7f9 fc25 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008a0a:	f7f8 fb49 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008a0e:	2100      	movs	r1, #0
 8008a10:	2000      	movs	r0, #0
 8008a12:	f7f8 fb55 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 8008a16:	4b68      	ldr	r3, [pc, #416]	; (8008bb8 <cppLoop+0xc90>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7f7 fdac 	bl	8000578 <__aeabi_f2d>
 8008a20:	4603      	mov	r3, r0
 8008a22:	460c      	mov	r4, r1
 8008a24:	461a      	mov	r2, r3
 8008a26:	4623      	mov	r3, r4
 8008a28:	4864      	ldr	r0, [pc, #400]	; (8008bbc <cppLoop+0xc94>)
 8008a2a:	f7f8 fb73 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008a2e:	2101      	movs	r1, #1
 8008a30:	2000      	movs	r0, #0
 8008a32:	f7f8 fb45 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 8008a36:	4b62      	ldr	r3, [pc, #392]	; (8008bc0 <cppLoop+0xc98>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7f7 fd9c 	bl	8000578 <__aeabi_f2d>
 8008a40:	4603      	mov	r3, r0
 8008a42:	460c      	mov	r4, r1
 8008a44:	461a      	mov	r2, r3
 8008a46:	4623      	mov	r3, r4
 8008a48:	485e      	ldr	r0, [pc, #376]	; (8008bc4 <cppLoop+0xc9c>)
 8008a4a:	f7f8 fb63 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008a4e:	4856      	ldr	r0, [pc, #344]	; (8008ba8 <cppLoop+0xc80>)
 8008a50:	f7f9 fb9c 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	bf0c      	ite	eq
 8008a5a:	2301      	moveq	r3, #1
 8008a5c:	2300      	movne	r3, #0
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	f001 81ff 	beq.w	8009e64 <cppLoop+0x1f3c>
			HAL_Delay(500);
 8008a66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008a6a:	f001 fb3d 	bl	800a0e8 <HAL_Delay>

			led.LR(1, -1);
 8008a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a72:	2101      	movs	r1, #1
 8008a74:	4848      	ldr	r0, [pc, #288]	; (8008b98 <cppLoop+0xc70>)
 8008a76:	f7f9 fca9 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8008a7a:	2101      	movs	r1, #1
 8008a7c:	484d      	ldr	r0, [pc, #308]	; (8008bb4 <cppLoop+0xc8c>)
 8008a7e:	f7fb fcf5 	bl	800446c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8008a82:	4b4f      	ldr	r3, [pc, #316]	; (8008bc0 <cppLoop+0xc98>)
 8008a84:	edd3 7a00 	vldr	s15, [r3]
 8008a88:	eeb0 0a67 	vmov.f32	s0, s15
 8008a8c:	4849      	ldr	r0, [pc, #292]	; (8008bb4 <cppLoop+0xc8c>)
 8008a8e:	f7fb fa9c 	bl	8003fca <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008a92:	4b49      	ldr	r3, [pc, #292]	; (8008bb8 <cppLoop+0xc90>)
 8008a94:	edd3 7a00 	vldr	s15, [r3]
 8008a98:	eeb0 0a67 	vmov.f32	s0, s15
 8008a9c:	4845      	ldr	r0, [pc, #276]	; (8008bb4 <cppLoop+0xc8c>)
 8008a9e:	f7fb faa4 	bl	8003fea <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008aa2:	4b47      	ldr	r3, [pc, #284]	; (8008bc0 <cppLoop+0xc98>)
 8008aa4:	edd3 7a00 	vldr	s15, [r3]
 8008aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8008aac:	4841      	ldr	r0, [pc, #260]	; (8008bb4 <cppLoop+0xc8c>)
 8008aae:	f7fb fabc 	bl	800402a <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 8008ab2:	4840      	ldr	r0, [pc, #256]	; (8008bb4 <cppLoop+0xc8c>)
 8008ab4:	f7fb fe1a 	bl	80046ec <_ZN9LineTrace20createVelocityTabeleEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 8008ab8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008abc:	f001 fb14 	bl	800a0e8 <HAL_Delay>

			line_trace.running();
 8008ac0:	483c      	ldr	r0, [pc, #240]	; (8008bb4 <cppLoop+0xc8c>)
 8008ac2:	f7fb fd17 	bl	80044f4 <_ZN9LineTrace7runningEv>

			// BLDC off
			esc.off();
 8008ac6:	4840      	ldr	r0, [pc, #256]	; (8008bc8 <cppLoop+0xca0>)
 8008ac8:	f7f8 fc5c 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 8008acc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	4831      	ldr	r0, [pc, #196]	; (8008b98 <cppLoop+0xc70>)
 8008ad4:	f7f9 fc7a 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 8008ad8:	f001 b9c4 	b.w	8009e64 <cppLoop+0x1f3c>

	case 4:
		led.fullColor('G');
 8008adc:	2147      	movs	r1, #71	; 0x47
 8008ade:	482e      	ldr	r0, [pc, #184]	; (8008b98 <cppLoop+0xc70>)
 8008ae0:	f7f9 fbb8 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008ae4:	f7f8 fadc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008ae8:	2100      	movs	r1, #0
 8008aea:	2000      	movs	r0, #0
 8008aec:	f7f8 fae8 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 8008af0:	4830      	ldr	r0, [pc, #192]	; (8008bb4 <cppLoop+0xc8c>)
 8008af2:	f7fb faca 	bl	800408a <_ZN9LineTrace14getMaxVelocityEv>
 8008af6:	ee10 3a10 	vmov	r3, s0
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7f7 fd3c 	bl	8000578 <__aeabi_f2d>
 8008b00:	4603      	mov	r3, r0
 8008b02:	460c      	mov	r4, r1
 8008b04:	461a      	mov	r2, r3
 8008b06:	4623      	mov	r3, r4
 8008b08:	482c      	ldr	r0, [pc, #176]	; (8008bbc <cppLoop+0xc94>)
 8008b0a:	f7f8 fb03 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008b0e:	2101      	movs	r1, #1
 8008b10:	2000      	movs	r0, #0
 8008b12:	f7f8 fad5 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 8008b16:	4827      	ldr	r0, [pc, #156]	; (8008bb4 <cppLoop+0xc8c>)
 8008b18:	f7fb fad7 	bl	80040ca <_ZN9LineTrace14getMinVelocityEv>
 8008b1c:	ee10 3a10 	vmov	r3, s0
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7f7 fd29 	bl	8000578 <__aeabi_f2d>
 8008b26:	4603      	mov	r3, r0
 8008b28:	460c      	mov	r4, r1
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	4623      	mov	r3, r4
 8008b2e:	481d      	ldr	r0, [pc, #116]	; (8008ba4 <cppLoop+0xc7c>)
 8008b30:	f7f8 faf0 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008b34:	481c      	ldr	r0, [pc, #112]	; (8008ba8 <cppLoop+0xc80>)
 8008b36:	f7f9 fb29 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b08      	cmp	r3, #8
 8008b3e:	bf0c      	ite	eq
 8008b40:	2301      	moveq	r3, #1
 8008b42:	2300      	movne	r3, #0
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d042      	beq.n	8008bd0 <cppLoop+0xca8>
			led.LR(-1, 1);
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8008b50:	4811      	ldr	r0, [pc, #68]	; (8008b98 <cppLoop+0xc70>)
 8008b52:	f7f9 fc3b 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008b56:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008b5a:	f001 fac5 	bl	800a0e8 <HAL_Delay>

			selector_vel++;
 8008b5e:	4b1b      	ldr	r3, [pc, #108]	; (8008bcc <cppLoop+0xca4>)
 8008b60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	3301      	adds	r3, #1
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	b21a      	sxth	r2, r3
 8008b6c:	4b17      	ldr	r3, [pc, #92]	; (8008bcc <cppLoop+0xca4>)
 8008b6e:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 8008b70:	4b16      	ldr	r3, [pc, #88]	; (8008bcc <cppLoop+0xca4>)
 8008b72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	dd02      	ble.n	8008b80 <cppLoop+0xc58>
 8008b7a:	4b14      	ldr	r3, [pc, #80]	; (8008bcc <cppLoop+0xca4>)
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008b80:	2200      	movs	r2, #0
 8008b82:	f04f 31ff 	mov.w	r1, #4294967295
 8008b86:	4804      	ldr	r0, [pc, #16]	; (8008b98 <cppLoop+0xc70>)
 8008b88:	f7f9 fc20 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 8008b8c:	f001 b96c 	b.w	8009e68 <cppLoop+0x1f40>
 8008b90:	9999999a 	.word	0x9999999a
 8008b94:	3fb99999 	.word	0x3fb99999
 8008b98:	200005d0 	.word	0x200005d0
 8008b9c:	0801a218 	.word	0x0801a218
 8008ba0:	20042414 	.word	0x20042414
 8008ba4:	0801a254 	.word	0x0801a254
 8008ba8:	200005c4 	.word	0x200005c4
 8008bac:	0801a260 	.word	0x0801a260
 8008bb0:	0801a1f8 	.word	0x0801a1f8
 8008bb4:	2001db64 	.word	0x2001db64
 8008bb8:	2004241c 	.word	0x2004241c
 8008bbc:	0801a26c 	.word	0x0801a26c
 8008bc0:	2004242c 	.word	0x2004242c
 8008bc4:	0801a224 	.word	0x0801a224
 8008bc8:	2001db60 	.word	0x2001db60
 8008bcc:	200423e0 	.word	0x200423e0
		else if(joy_stick.getValue() == JOY_R){
 8008bd0:	48a5      	ldr	r0, [pc, #660]	; (8008e68 <cppLoop+0xf40>)
 8008bd2:	f7f9 fadb 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b10      	cmp	r3, #16
 8008bda:	bf0c      	ite	eq
 8008bdc:	2301      	moveq	r3, #1
 8008bde:	2300      	movne	r3, #0
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d03c      	beq.n	8008c60 <cppLoop+0xd38>
			led.LR(-1, 1);
 8008be6:	2201      	movs	r2, #1
 8008be8:	f04f 31ff 	mov.w	r1, #4294967295
 8008bec:	489f      	ldr	r0, [pc, #636]	; (8008e6c <cppLoop+0xf44>)
 8008bee:	f7f9 fbed 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008bf2:	2064      	movs	r0, #100	; 0x64
 8008bf4:	f001 fa78 	bl	800a0e8 <HAL_Delay>
			if(selector_vel == 0)
 8008bf8:	4b9d      	ldr	r3, [pc, #628]	; (8008e70 <cppLoop+0xf48>)
 8008bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d113      	bne.n	8008c2a <cppLoop+0xd02>
				adj_max_velocity = adj_max_velocity + 0.1;
 8008c02:	4b9c      	ldr	r3, [pc, #624]	; (8008e74 <cppLoop+0xf4c>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7f7 fcb6 	bl	8000578 <__aeabi_f2d>
 8008c0c:	a394      	add	r3, pc, #592	; (adr r3, 8008e60 <cppLoop+0xf38>)
 8008c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c12:	f7f7 fb53 	bl	80002bc <__adddf3>
 8008c16:	4603      	mov	r3, r0
 8008c18:	460c      	mov	r4, r1
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	4621      	mov	r1, r4
 8008c1e:	f7f7 fffb 	bl	8000c18 <__aeabi_d2f>
 8008c22:	4602      	mov	r2, r0
 8008c24:	4b93      	ldr	r3, [pc, #588]	; (8008e74 <cppLoop+0xf4c>)
 8008c26:	601a      	str	r2, [r3, #0]
 8008c28:	e012      	b.n	8008c50 <cppLoop+0xd28>
				adj_min_velocity = adj_min_velocity + 0.1;
 8008c2a:	4b93      	ldr	r3, [pc, #588]	; (8008e78 <cppLoop+0xf50>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7f7 fca2 	bl	8000578 <__aeabi_f2d>
 8008c34:	a38a      	add	r3, pc, #552	; (adr r3, 8008e60 <cppLoop+0xf38>)
 8008c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3a:	f7f7 fb3f 	bl	80002bc <__adddf3>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	460c      	mov	r4, r1
 8008c42:	4618      	mov	r0, r3
 8008c44:	4621      	mov	r1, r4
 8008c46:	f7f7 ffe7 	bl	8000c18 <__aeabi_d2f>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	4b8a      	ldr	r3, [pc, #552]	; (8008e78 <cppLoop+0xf50>)
 8008c4e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008c50:	2200      	movs	r2, #0
 8008c52:	f04f 31ff 	mov.w	r1, #4294967295
 8008c56:	4885      	ldr	r0, [pc, #532]	; (8008e6c <cppLoop+0xf44>)
 8008c58:	f7f9 fbb8 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008c5c:	f001 b904 	b.w	8009e68 <cppLoop+0x1f40>
		else if(joy_stick.getValue() == JOY_L){
 8008c60:	4881      	ldr	r0, [pc, #516]	; (8008e68 <cppLoop+0xf40>)
 8008c62:	f7f9 fa93 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	bf0c      	ite	eq
 8008c6c:	2301      	moveq	r3, #1
 8008c6e:	2300      	movne	r3, #0
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d03c      	beq.n	8008cf0 <cppLoop+0xdc8>
			led.LR(-1, 1);
 8008c76:	2201      	movs	r2, #1
 8008c78:	f04f 31ff 	mov.w	r1, #4294967295
 8008c7c:	487b      	ldr	r0, [pc, #492]	; (8008e6c <cppLoop+0xf44>)
 8008c7e:	f7f9 fba5 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008c82:	2064      	movs	r0, #100	; 0x64
 8008c84:	f001 fa30 	bl	800a0e8 <HAL_Delay>
			if(selector_vel == 0)
 8008c88:	4b79      	ldr	r3, [pc, #484]	; (8008e70 <cppLoop+0xf48>)
 8008c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d113      	bne.n	8008cba <cppLoop+0xd92>
				adj_max_velocity = adj_max_velocity - 0.1;
 8008c92:	4b78      	ldr	r3, [pc, #480]	; (8008e74 <cppLoop+0xf4c>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7f7 fc6e 	bl	8000578 <__aeabi_f2d>
 8008c9c:	a370      	add	r3, pc, #448	; (adr r3, 8008e60 <cppLoop+0xf38>)
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	f7f7 fb09 	bl	80002b8 <__aeabi_dsub>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	460c      	mov	r4, r1
 8008caa:	4618      	mov	r0, r3
 8008cac:	4621      	mov	r1, r4
 8008cae:	f7f7 ffb3 	bl	8000c18 <__aeabi_d2f>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	4b6f      	ldr	r3, [pc, #444]	; (8008e74 <cppLoop+0xf4c>)
 8008cb6:	601a      	str	r2, [r3, #0]
 8008cb8:	e012      	b.n	8008ce0 <cppLoop+0xdb8>
				adj_min_velocity = adj_min_velocity - 0.1;
 8008cba:	4b6f      	ldr	r3, [pc, #444]	; (8008e78 <cppLoop+0xf50>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7f7 fc5a 	bl	8000578 <__aeabi_f2d>
 8008cc4:	a366      	add	r3, pc, #408	; (adr r3, 8008e60 <cppLoop+0xf38>)
 8008cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cca:	f7f7 faf5 	bl	80002b8 <__aeabi_dsub>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	460c      	mov	r4, r1
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	4621      	mov	r1, r4
 8008cd6:	f7f7 ff9f 	bl	8000c18 <__aeabi_d2f>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	4b66      	ldr	r3, [pc, #408]	; (8008e78 <cppLoop+0xf50>)
 8008cde:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f04f 31ff 	mov.w	r1, #4294967295
 8008ce6:	4861      	ldr	r0, [pc, #388]	; (8008e6c <cppLoop+0xf44>)
 8008ce8:	f7f9 fb70 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008cec:	f001 b8bc 	b.w	8009e68 <cppLoop+0x1f40>
		else if(joy_stick.getValue() == JOY_C){
 8008cf0:	485d      	ldr	r0, [pc, #372]	; (8008e68 <cppLoop+0xf40>)
 8008cf2:	f7f9 fa4b 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	bf0c      	ite	eq
 8008cfc:	2301      	moveq	r3, #1
 8008cfe:	2300      	movne	r3, #0
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f001 80b0 	beq.w	8009e68 <cppLoop+0x1f40>
			led.LR(-1, 1);
 8008d08:	2201      	movs	r2, #1
 8008d0a:	f04f 31ff 	mov.w	r1, #4294967295
 8008d0e:	4857      	ldr	r0, [pc, #348]	; (8008e6c <cppLoop+0xf44>)
 8008d10:	f7f9 fb5c 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008d14:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008d18:	f001 f9e6 	bl	800a0e8 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	9300      	str	r3, [sp, #0]
 8008d20:	4b54      	ldr	r3, [pc, #336]	; (8008e74 <cppLoop+0xf4c>)
 8008d22:	2201      	movs	r2, #1
 8008d24:	4955      	ldr	r1, [pc, #340]	; (8008e7c <cppLoop+0xf54>)
 8008d26:	4856      	ldr	r0, [pc, #344]	; (8008e80 <cppLoop+0xf58>)
 8008d28:	f7f8 fda8 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	4b51      	ldr	r3, [pc, #324]	; (8008e78 <cppLoop+0xf50>)
 8008d32:	2201      	movs	r2, #1
 8008d34:	4953      	ldr	r1, [pc, #332]	; (8008e84 <cppLoop+0xf5c>)
 8008d36:	4852      	ldr	r0, [pc, #328]	; (8008e80 <cppLoop+0xf58>)
 8008d38:	f7f8 fda0 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008d3c:	4b4d      	ldr	r3, [pc, #308]	; (8008e74 <cppLoop+0xf4c>)
 8008d3e:	edd3 7a00 	vldr	s15, [r3]
 8008d42:	eeb0 0a67 	vmov.f32	s0, s15
 8008d46:	4850      	ldr	r0, [pc, #320]	; (8008e88 <cppLoop+0xf60>)
 8008d48:	f7fb f94f 	bl	8003fea <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008d4c:	4b4a      	ldr	r3, [pc, #296]	; (8008e78 <cppLoop+0xf50>)
 8008d4e:	edd3 7a00 	vldr	s15, [r3]
 8008d52:	eeb0 0a67 	vmov.f32	s0, s15
 8008d56:	484c      	ldr	r0, [pc, #304]	; (8008e88 <cppLoop+0xf60>)
 8008d58:	f7fb f967 	bl	800402a <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f04f 31ff 	mov.w	r1, #4294967295
 8008d62:	4842      	ldr	r0, [pc, #264]	; (8008e6c <cppLoop+0xf44>)
 8008d64:	f7f9 fb32 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008d68:	f001 b87e 	b.w	8009e68 <cppLoop+0x1f40>

	case 5:
		led.fullColor('M');
 8008d6c:	214d      	movs	r1, #77	; 0x4d
 8008d6e:	483f      	ldr	r0, [pc, #252]	; (8008e6c <cppLoop+0xf44>)
 8008d70:	f7f9 fa70 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008d74:	f7f8 f994 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008d78:	2100      	movs	r1, #0
 8008d7a:	2000      	movs	r0, #0
 8008d7c:	f7f8 f9a0 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 8008d80:	4b42      	ldr	r3, [pc, #264]	; (8008e8c <cppLoop+0xf64>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7f7 fbf7 	bl	8000578 <__aeabi_f2d>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	460c      	mov	r4, r1
 8008d8e:	461a      	mov	r2, r3
 8008d90:	4623      	mov	r3, r4
 8008d92:	483f      	ldr	r0, [pc, #252]	; (8008e90 <cppLoop+0xf68>)
 8008d94:	f7f8 f9be 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008d98:	2101      	movs	r1, #1
 8008d9a:	2000      	movs	r0, #0
 8008d9c:	f7f8 f990 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 8008da0:	4b3c      	ldr	r3, [pc, #240]	; (8008e94 <cppLoop+0xf6c>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7f7 fbe7 	bl	8000578 <__aeabi_f2d>
 8008daa:	4603      	mov	r3, r0
 8008dac:	460c      	mov	r4, r1
 8008dae:	461a      	mov	r2, r3
 8008db0:	4623      	mov	r3, r4
 8008db2:	4839      	ldr	r0, [pc, #228]	; (8008e98 <cppLoop+0xf70>)
 8008db4:	f7f8 f9ae 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008db8:	482b      	ldr	r0, [pc, #172]	; (8008e68 <cppLoop+0xf40>)
 8008dba:	f7f9 f9e7 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	bf0c      	ite	eq
 8008dc4:	2301      	moveq	r3, #1
 8008dc6:	2300      	movne	r3, #0
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f001 804e 	beq.w	8009e6c <cppLoop+0x1f44>
			HAL_Delay(500);
 8008dd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008dd4:	f001 f988 	bl	800a0e8 <HAL_Delay>

			led.LR(1, -1);
 8008dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8008ddc:	2101      	movs	r1, #1
 8008dde:	4823      	ldr	r0, [pc, #140]	; (8008e6c <cppLoop+0xf44>)
 8008de0:	f7f9 faf4 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8008de4:	4b2d      	ldr	r3, [pc, #180]	; (8008e9c <cppLoop+0xf74>)
 8008de6:	edd3 7a00 	vldr	s15, [r3]
 8008dea:	4b2d      	ldr	r3, [pc, #180]	; (8008ea0 <cppLoop+0xf78>)
 8008dec:	ed93 7a00 	vldr	s14, [r3]
 8008df0:	4b2c      	ldr	r3, [pc, #176]	; (8008ea4 <cppLoop+0xf7c>)
 8008df2:	edd3 6a00 	vldr	s13, [r3]
 8008df6:	eeb0 1a66 	vmov.f32	s2, s13
 8008dfa:	eef0 0a47 	vmov.f32	s1, s14
 8008dfe:	eeb0 0a67 	vmov.f32	s0, s15
 8008e02:	4821      	ldr	r0, [pc, #132]	; (8008e88 <cppLoop+0xf60>)
 8008e04:	f7fb f846 	bl	8003e94 <_ZN9LineTrace7setGainEfff>
			line_trace.setMode(THIRD_RUNNING);
 8008e08:	2102      	movs	r1, #2
 8008e0a:	481f      	ldr	r0, [pc, #124]	; (8008e88 <cppLoop+0xf60>)
 8008e0c:	f7fb fb2e 	bl	800446c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008e10:	4b20      	ldr	r3, [pc, #128]	; (8008e94 <cppLoop+0xf6c>)
 8008e12:	edd3 7a00 	vldr	s15, [r3]
 8008e16:	eeb0 0a67 	vmov.f32	s0, s15
 8008e1a:	481b      	ldr	r0, [pc, #108]	; (8008e88 <cppLoop+0xf60>)
 8008e1c:	f7fb f8d5 	bl	8003fca <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008e20:	4b1a      	ldr	r3, [pc, #104]	; (8008e8c <cppLoop+0xf64>)
 8008e22:	edd3 7a00 	vldr	s15, [r3]
 8008e26:	eeb0 0a67 	vmov.f32	s0, s15
 8008e2a:	4817      	ldr	r0, [pc, #92]	; (8008e88 <cppLoop+0xf60>)
 8008e2c:	f7fb f8ed 	bl	800400a <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008e30:	4b18      	ldr	r3, [pc, #96]	; (8008e94 <cppLoop+0xf6c>)
 8008e32:	edd3 7a00 	vldr	s15, [r3]
 8008e36:	eeb0 0a67 	vmov.f32	s0, s15
 8008e3a:	4813      	ldr	r0, [pc, #76]	; (8008e88 <cppLoop+0xf60>)
 8008e3c:	f7fb f905 	bl	800404a <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 8008e40:	4811      	ldr	r0, [pc, #68]	; (8008e88 <cppLoop+0xf60>)
 8008e42:	f7fb fc53 	bl	80046ec <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8008e46:	4810      	ldr	r0, [pc, #64]	; (8008e88 <cppLoop+0xf60>)
 8008e48:	f7fb fb54 	bl	80044f4 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e50:	2100      	movs	r1, #0
 8008e52:	4806      	ldr	r0, [pc, #24]	; (8008e6c <cppLoop+0xf44>)
 8008e54:	f7f9 faba 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 8008e58:	f001 b808 	b.w	8009e6c <cppLoop+0x1f44>
 8008e5c:	f3af 8000 	nop.w
 8008e60:	9999999a 	.word	0x9999999a
 8008e64:	3fb99999 	.word	0x3fb99999
 8008e68:	200005c4 	.word	0x200005c4
 8008e6c:	200005d0 	.word	0x200005d0
 8008e70:	200423e0 	.word	0x200423e0
 8008e74:	2004241c 	.word	0x2004241c
 8008e78:	2004242c 	.word	0x2004242c
 8008e7c:	0801a278 	.word	0x0801a278
 8008e80:	0801a1f8 	.word	0x0801a1f8
 8008e84:	0801a284 	.word	0x0801a284
 8008e88:	2001db64 	.word	0x2001db64
 8008e8c:	20042424 	.word	0x20042424
 8008e90:	0801a290 	.word	0x0801a290
 8008e94:	20042434 	.word	0x20042434
 8008e98:	0801a224 	.word	0x0801a224
 8008e9c:	200423e4 	.word	0x200423e4
 8008ea0:	200423ec 	.word	0x200423ec
 8008ea4:	200423f4 	.word	0x200423f4

	case 6:
		led.fullColor('R');
 8008ea8:	2152      	movs	r1, #82	; 0x52
 8008eaa:	4895      	ldr	r0, [pc, #596]	; (8009100 <cppLoop+0x11d8>)
 8008eac:	f7f9 f9d2 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008eb0:	f7f8 f8f6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	f7f8 f902 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008ebc:	4891      	ldr	r0, [pc, #580]	; (8009104 <cppLoop+0x11dc>)
 8008ebe:	f7fb f8f4 	bl	80040aa <_ZN9LineTrace15getMaxVelocity2Ev>
 8008ec2:	ee10 3a10 	vmov	r3, s0
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7f7 fb56 	bl	8000578 <__aeabi_f2d>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	460c      	mov	r4, r1
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	4623      	mov	r3, r4
 8008ed4:	488c      	ldr	r0, [pc, #560]	; (8009108 <cppLoop+0x11e0>)
 8008ed6:	f7f8 f91d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008eda:	2101      	movs	r1, #1
 8008edc:	2000      	movs	r0, #0
 8008ede:	f7f8 f8ef 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 8008ee2:	4888      	ldr	r0, [pc, #544]	; (8009104 <cppLoop+0x11dc>)
 8008ee4:	f7fb f901 	bl	80040ea <_ZN9LineTrace15getMinVelocity2Ev>
 8008ee8:	ee10 3a10 	vmov	r3, s0
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7f7 fb43 	bl	8000578 <__aeabi_f2d>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	460c      	mov	r4, r1
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	4623      	mov	r3, r4
 8008efa:	4884      	ldr	r0, [pc, #528]	; (800910c <cppLoop+0x11e4>)
 8008efc:	f7f8 f90a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008f00:	4883      	ldr	r0, [pc, #524]	; (8009110 <cppLoop+0x11e8>)
 8008f02:	f7f9 f943 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b08      	cmp	r3, #8
 8008f0a:	bf0c      	ite	eq
 8008f0c:	2301      	moveq	r3, #1
 8008f0e:	2300      	movne	r3, #0
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d022      	beq.n	8008f5c <cppLoop+0x1034>
			led.LR(-1, 1);
 8008f16:	2201      	movs	r2, #1
 8008f18:	f04f 31ff 	mov.w	r1, #4294967295
 8008f1c:	4878      	ldr	r0, [pc, #480]	; (8009100 <cppLoop+0x11d8>)
 8008f1e:	f7f9 fa55 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008f22:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008f26:	f001 f8df 	bl	800a0e8 <HAL_Delay>

			selector_vel2++;
 8008f2a:	4b7a      	ldr	r3, [pc, #488]	; (8009114 <cppLoop+0x11ec>)
 8008f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	3301      	adds	r3, #1
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	b21a      	sxth	r2, r3
 8008f38:	4b76      	ldr	r3, [pc, #472]	; (8009114 <cppLoop+0x11ec>)
 8008f3a:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 8008f3c:	4b75      	ldr	r3, [pc, #468]	; (8009114 <cppLoop+0x11ec>)
 8008f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	dd02      	ble.n	8008f4c <cppLoop+0x1024>
 8008f46:	4b73      	ldr	r3, [pc, #460]	; (8009114 <cppLoop+0x11ec>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f04f 31ff 	mov.w	r1, #4294967295
 8008f52:	486b      	ldr	r0, [pc, #428]	; (8009100 <cppLoop+0x11d8>)
 8008f54:	f7f9 fa3a 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008f58:	f000 bf8a 	b.w	8009e70 <cppLoop+0x1f48>
		else if(joy_stick.getValue() == JOY_R){
 8008f5c:	486c      	ldr	r0, [pc, #432]	; (8009110 <cppLoop+0x11e8>)
 8008f5e:	f7f9 f915 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b10      	cmp	r3, #16
 8008f66:	bf0c      	ite	eq
 8008f68:	2301      	moveq	r3, #1
 8008f6a:	2300      	movne	r3, #0
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d03c      	beq.n	8008fec <cppLoop+0x10c4>
			led.LR(-1, 1);
 8008f72:	2201      	movs	r2, #1
 8008f74:	f04f 31ff 	mov.w	r1, #4294967295
 8008f78:	4861      	ldr	r0, [pc, #388]	; (8009100 <cppLoop+0x11d8>)
 8008f7a:	f7f9 fa27 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008f7e:	2064      	movs	r0, #100	; 0x64
 8008f80:	f001 f8b2 	bl	800a0e8 <HAL_Delay>
			if(selector_vel2 == 0)
 8008f84:	4b63      	ldr	r3, [pc, #396]	; (8009114 <cppLoop+0x11ec>)
 8008f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d113      	bne.n	8008fb6 <cppLoop+0x108e>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8008f8e:	4b62      	ldr	r3, [pc, #392]	; (8009118 <cppLoop+0x11f0>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7f7 faf0 	bl	8000578 <__aeabi_f2d>
 8008f98:	a357      	add	r3, pc, #348	; (adr r3, 80090f8 <cppLoop+0x11d0>)
 8008f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9e:	f7f7 f98d 	bl	80002bc <__adddf3>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	460c      	mov	r4, r1
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	4621      	mov	r1, r4
 8008faa:	f7f7 fe35 	bl	8000c18 <__aeabi_d2f>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	4b59      	ldr	r3, [pc, #356]	; (8009118 <cppLoop+0x11f0>)
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	e012      	b.n	8008fdc <cppLoop+0x10b4>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8008fb6:	4b59      	ldr	r3, [pc, #356]	; (800911c <cppLoop+0x11f4>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7f7 fadc 	bl	8000578 <__aeabi_f2d>
 8008fc0:	a34d      	add	r3, pc, #308	; (adr r3, 80090f8 <cppLoop+0x11d0>)
 8008fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc6:	f7f7 f979 	bl	80002bc <__adddf3>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	460c      	mov	r4, r1
 8008fce:	4618      	mov	r0, r3
 8008fd0:	4621      	mov	r1, r4
 8008fd2:	f7f7 fe21 	bl	8000c18 <__aeabi_d2f>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	4b50      	ldr	r3, [pc, #320]	; (800911c <cppLoop+0x11f4>)
 8008fda:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f04f 31ff 	mov.w	r1, #4294967295
 8008fe2:	4847      	ldr	r0, [pc, #284]	; (8009100 <cppLoop+0x11d8>)
 8008fe4:	f7f9 f9f2 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008fe8:	f000 bf42 	b.w	8009e70 <cppLoop+0x1f48>
		else if(joy_stick.getValue() == JOY_L){
 8008fec:	4848      	ldr	r0, [pc, #288]	; (8009110 <cppLoop+0x11e8>)
 8008fee:	f7f9 f8cd 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	bf0c      	ite	eq
 8008ff8:	2301      	moveq	r3, #1
 8008ffa:	2300      	movne	r3, #0
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d03c      	beq.n	800907c <cppLoop+0x1154>
			led.LR(-1, 1);
 8009002:	2201      	movs	r2, #1
 8009004:	f04f 31ff 	mov.w	r1, #4294967295
 8009008:	483d      	ldr	r0, [pc, #244]	; (8009100 <cppLoop+0x11d8>)
 800900a:	f7f9 f9df 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800900e:	2064      	movs	r0, #100	; 0x64
 8009010:	f001 f86a 	bl	800a0e8 <HAL_Delay>
			if(selector_vel2 == 0)
 8009014:	4b3f      	ldr	r3, [pc, #252]	; (8009114 <cppLoop+0x11ec>)
 8009016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d113      	bne.n	8009046 <cppLoop+0x111e>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 800901e:	4b3e      	ldr	r3, [pc, #248]	; (8009118 <cppLoop+0x11f0>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4618      	mov	r0, r3
 8009024:	f7f7 faa8 	bl	8000578 <__aeabi_f2d>
 8009028:	a333      	add	r3, pc, #204	; (adr r3, 80090f8 <cppLoop+0x11d0>)
 800902a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902e:	f7f7 f943 	bl	80002b8 <__aeabi_dsub>
 8009032:	4603      	mov	r3, r0
 8009034:	460c      	mov	r4, r1
 8009036:	4618      	mov	r0, r3
 8009038:	4621      	mov	r1, r4
 800903a:	f7f7 fded 	bl	8000c18 <__aeabi_d2f>
 800903e:	4602      	mov	r2, r0
 8009040:	4b35      	ldr	r3, [pc, #212]	; (8009118 <cppLoop+0x11f0>)
 8009042:	601a      	str	r2, [r3, #0]
 8009044:	e012      	b.n	800906c <cppLoop+0x1144>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8009046:	4b35      	ldr	r3, [pc, #212]	; (800911c <cppLoop+0x11f4>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4618      	mov	r0, r3
 800904c:	f7f7 fa94 	bl	8000578 <__aeabi_f2d>
 8009050:	a329      	add	r3, pc, #164	; (adr r3, 80090f8 <cppLoop+0x11d0>)
 8009052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009056:	f7f7 f92f 	bl	80002b8 <__aeabi_dsub>
 800905a:	4603      	mov	r3, r0
 800905c:	460c      	mov	r4, r1
 800905e:	4618      	mov	r0, r3
 8009060:	4621      	mov	r1, r4
 8009062:	f7f7 fdd9 	bl	8000c18 <__aeabi_d2f>
 8009066:	4602      	mov	r2, r0
 8009068:	4b2c      	ldr	r3, [pc, #176]	; (800911c <cppLoop+0x11f4>)
 800906a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800906c:	2200      	movs	r2, #0
 800906e:	f04f 31ff 	mov.w	r1, #4294967295
 8009072:	4823      	ldr	r0, [pc, #140]	; (8009100 <cppLoop+0x11d8>)
 8009074:	f7f9 f9aa 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009078:	f000 befa 	b.w	8009e70 <cppLoop+0x1f48>
		else if(joy_stick.getValue() == JOY_C){
 800907c:	4824      	ldr	r0, [pc, #144]	; (8009110 <cppLoop+0x11e8>)
 800907e:	f7f9 f885 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009082:	4603      	mov	r3, r0
 8009084:	2b02      	cmp	r3, #2
 8009086:	bf0c      	ite	eq
 8009088:	2301      	moveq	r3, #1
 800908a:	2300      	movne	r3, #0
 800908c:	b2db      	uxtb	r3, r3
 800908e:	2b00      	cmp	r3, #0
 8009090:	f000 86ee 	beq.w	8009e70 <cppLoop+0x1f48>
			led.LR(-1, 1);
 8009094:	2201      	movs	r2, #1
 8009096:	f04f 31ff 	mov.w	r1, #4294967295
 800909a:	4819      	ldr	r0, [pc, #100]	; (8009100 <cppLoop+0x11d8>)
 800909c:	f7f9 f996 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80090a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80090a4:	f001 f820 	bl	800a0e8 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 80090a8:	2300      	movs	r3, #0
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	4b1a      	ldr	r3, [pc, #104]	; (8009118 <cppLoop+0x11f0>)
 80090ae:	2201      	movs	r2, #1
 80090b0:	491b      	ldr	r1, [pc, #108]	; (8009120 <cppLoop+0x11f8>)
 80090b2:	481c      	ldr	r0, [pc, #112]	; (8009124 <cppLoop+0x11fc>)
 80090b4:	f7f8 fbe2 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 80090b8:	2300      	movs	r3, #0
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	4b17      	ldr	r3, [pc, #92]	; (800911c <cppLoop+0x11f4>)
 80090be:	2201      	movs	r2, #1
 80090c0:	4919      	ldr	r1, [pc, #100]	; (8009128 <cppLoop+0x1200>)
 80090c2:	4818      	ldr	r0, [pc, #96]	; (8009124 <cppLoop+0x11fc>)
 80090c4:	f7f8 fbda 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80090c8:	4b13      	ldr	r3, [pc, #76]	; (8009118 <cppLoop+0x11f0>)
 80090ca:	edd3 7a00 	vldr	s15, [r3]
 80090ce:	eeb0 0a67 	vmov.f32	s0, s15
 80090d2:	480c      	ldr	r0, [pc, #48]	; (8009104 <cppLoop+0x11dc>)
 80090d4:	f7fa ff99 	bl	800400a <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 80090d8:	4b10      	ldr	r3, [pc, #64]	; (800911c <cppLoop+0x11f4>)
 80090da:	edd3 7a00 	vldr	s15, [r3]
 80090de:	eeb0 0a67 	vmov.f32	s0, s15
 80090e2:	4808      	ldr	r0, [pc, #32]	; (8009104 <cppLoop+0x11dc>)
 80090e4:	f7fa ffb1 	bl	800404a <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 80090e8:	2200      	movs	r2, #0
 80090ea:	f04f 31ff 	mov.w	r1, #4294967295
 80090ee:	4804      	ldr	r0, [pc, #16]	; (8009100 <cppLoop+0x11d8>)
 80090f0:	f7f9 f96c 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80090f4:	f000 bebc 	b.w	8009e70 <cppLoop+0x1f48>
 80090f8:	9999999a 	.word	0x9999999a
 80090fc:	3fb99999 	.word	0x3fb99999
 8009100:	200005d0 	.word	0x200005d0
 8009104:	2001db64 	.word	0x2001db64
 8009108:	0801a290 	.word	0x0801a290
 800910c:	0801a254 	.word	0x0801a254
 8009110:	200005c4 	.word	0x200005c4
 8009114:	200423e2 	.word	0x200423e2
 8009118:	20042424 	.word	0x20042424
 800911c:	20042434 	.word	0x20042434
 8009120:	0801a29c 	.word	0x0801a29c
 8009124:	0801a1f8 	.word	0x0801a1f8
 8009128:	0801a2a8 	.word	0x0801a2a8

	case 7:
		led.fullColor('W');
 800912c:	2157      	movs	r1, #87	; 0x57
 800912e:	48c2      	ldr	r0, [pc, #776]	; (8009438 <cppLoop+0x1510>)
 8009130:	f7f9 f890 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009134:	f7f7 ffb4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009138:	2100      	movs	r1, #0
 800913a:	2000      	movs	r0, #0
 800913c:	f7f7 ffc0 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8009140:	48be      	ldr	r0, [pc, #760]	; (800943c <cppLoop+0x1514>)
 8009142:	f7fb f816 	bl	8004172 <_ZN9LineTrace9getMaxAccEv>
 8009146:	ee10 3a10 	vmov	r3, s0
 800914a:	4618      	mov	r0, r3
 800914c:	f7f7 fa14 	bl	8000578 <__aeabi_f2d>
 8009150:	4603      	mov	r3, r0
 8009152:	460c      	mov	r4, r1
 8009154:	461a      	mov	r2, r3
 8009156:	4623      	mov	r3, r4
 8009158:	48b9      	ldr	r0, [pc, #740]	; (8009440 <cppLoop+0x1518>)
 800915a:	f7f7 ffdb 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800915e:	2101      	movs	r1, #1
 8009160:	2000      	movs	r0, #0
 8009162:	f7f7 ffad 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8009166:	48b5      	ldr	r0, [pc, #724]	; (800943c <cppLoop+0x1514>)
 8009168:	f7fb f839 	bl	80041de <_ZN9LineTrace9getMaxDecEv>
 800916c:	ee10 3a10 	vmov	r3, s0
 8009170:	4618      	mov	r0, r3
 8009172:	f7f7 fa01 	bl	8000578 <__aeabi_f2d>
 8009176:	4603      	mov	r3, r0
 8009178:	460c      	mov	r4, r1
 800917a:	461a      	mov	r2, r3
 800917c:	4623      	mov	r3, r4
 800917e:	48b1      	ldr	r0, [pc, #708]	; (8009444 <cppLoop+0x151c>)
 8009180:	f7f7 ffc8 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8009184:	48b0      	ldr	r0, [pc, #704]	; (8009448 <cppLoop+0x1520>)
 8009186:	f7f9 f801 	bl	800218c <_ZN8JoyStick8getValueEv>
 800918a:	4603      	mov	r3, r0
 800918c:	2b08      	cmp	r3, #8
 800918e:	bf0c      	ite	eq
 8009190:	2301      	moveq	r3, #1
 8009192:	2300      	movne	r3, #0
 8009194:	b2db      	uxtb	r3, r3
 8009196:	2b00      	cmp	r3, #0
 8009198:	d022      	beq.n	80091e0 <cppLoop+0x12b8>
			led.LR(-1, 1);
 800919a:	2201      	movs	r2, #1
 800919c:	f04f 31ff 	mov.w	r1, #4294967295
 80091a0:	48a5      	ldr	r0, [pc, #660]	; (8009438 <cppLoop+0x1510>)
 80091a2:	f7f9 f913 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80091a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80091aa:	f000 ff9d 	bl	800a0e8 <HAL_Delay>

			selector_acc++;
 80091ae:	4ba7      	ldr	r3, [pc, #668]	; (800944c <cppLoop+0x1524>)
 80091b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	3301      	adds	r3, #1
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	b21a      	sxth	r2, r3
 80091bc:	4ba3      	ldr	r3, [pc, #652]	; (800944c <cppLoop+0x1524>)
 80091be:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 80091c0:	4ba2      	ldr	r3, [pc, #648]	; (800944c <cppLoop+0x1524>)
 80091c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	dd02      	ble.n	80091d0 <cppLoop+0x12a8>
 80091ca:	4ba0      	ldr	r3, [pc, #640]	; (800944c <cppLoop+0x1524>)
 80091cc:	2200      	movs	r2, #0
 80091ce:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80091d0:	2200      	movs	r2, #0
 80091d2:	f04f 31ff 	mov.w	r1, #4294967295
 80091d6:	4898      	ldr	r0, [pc, #608]	; (8009438 <cppLoop+0x1510>)
 80091d8:	f7f9 f8f8 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 80091dc:	f000 be4a 	b.w	8009e74 <cppLoop+0x1f4c>
		else if(joy_stick.getValue() == JOY_R){
 80091e0:	4899      	ldr	r0, [pc, #612]	; (8009448 <cppLoop+0x1520>)
 80091e2:	f7f8 ffd3 	bl	800218c <_ZN8JoyStick8getValueEv>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b10      	cmp	r3, #16
 80091ea:	bf0c      	ite	eq
 80091ec:	2301      	moveq	r3, #1
 80091ee:	2300      	movne	r3, #0
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d03c      	beq.n	8009270 <cppLoop+0x1348>
			led.LR(-1, 1);
 80091f6:	2201      	movs	r2, #1
 80091f8:	f04f 31ff 	mov.w	r1, #4294967295
 80091fc:	488e      	ldr	r0, [pc, #568]	; (8009438 <cppLoop+0x1510>)
 80091fe:	f7f9 f8e5 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009202:	2064      	movs	r0, #100	; 0x64
 8009204:	f000 ff70 	bl	800a0e8 <HAL_Delay>
			if(selector_acc == 0){
 8009208:	4b90      	ldr	r3, [pc, #576]	; (800944c <cppLoop+0x1524>)
 800920a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d113      	bne.n	800923a <cppLoop+0x1312>
				adj_acc = adj_acc + 0.1;
 8009212:	4b8f      	ldr	r3, [pc, #572]	; (8009450 <cppLoop+0x1528>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4618      	mov	r0, r3
 8009218:	f7f7 f9ae 	bl	8000578 <__aeabi_f2d>
 800921c:	a384      	add	r3, pc, #528	; (adr r3, 8009430 <cppLoop+0x1508>)
 800921e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009222:	f7f7 f84b 	bl	80002bc <__adddf3>
 8009226:	4603      	mov	r3, r0
 8009228:	460c      	mov	r4, r1
 800922a:	4618      	mov	r0, r3
 800922c:	4621      	mov	r1, r4
 800922e:	f7f7 fcf3 	bl	8000c18 <__aeabi_d2f>
 8009232:	4602      	mov	r2, r0
 8009234:	4b86      	ldr	r3, [pc, #536]	; (8009450 <cppLoop+0x1528>)
 8009236:	601a      	str	r2, [r3, #0]
 8009238:	e012      	b.n	8009260 <cppLoop+0x1338>
				adj_dec = adj_dec + 0.1;
 800923a:	4b86      	ldr	r3, [pc, #536]	; (8009454 <cppLoop+0x152c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4618      	mov	r0, r3
 8009240:	f7f7 f99a 	bl	8000578 <__aeabi_f2d>
 8009244:	a37a      	add	r3, pc, #488	; (adr r3, 8009430 <cppLoop+0x1508>)
 8009246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924a:	f7f7 f837 	bl	80002bc <__adddf3>
 800924e:	4603      	mov	r3, r0
 8009250:	460c      	mov	r4, r1
 8009252:	4618      	mov	r0, r3
 8009254:	4621      	mov	r1, r4
 8009256:	f7f7 fcdf 	bl	8000c18 <__aeabi_d2f>
 800925a:	4602      	mov	r2, r0
 800925c:	4b7d      	ldr	r3, [pc, #500]	; (8009454 <cppLoop+0x152c>)
 800925e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009260:	2200      	movs	r2, #0
 8009262:	f04f 31ff 	mov.w	r1, #4294967295
 8009266:	4874      	ldr	r0, [pc, #464]	; (8009438 <cppLoop+0x1510>)
 8009268:	f7f9 f8b0 	bl	80023cc <_ZN3LED2LREaa>
		break;
 800926c:	f000 be02 	b.w	8009e74 <cppLoop+0x1f4c>
		else if(joy_stick.getValue() == JOY_L){
 8009270:	4875      	ldr	r0, [pc, #468]	; (8009448 <cppLoop+0x1520>)
 8009272:	f7f8 ff8b 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009276:	4603      	mov	r3, r0
 8009278:	2b01      	cmp	r3, #1
 800927a:	bf0c      	ite	eq
 800927c:	2301      	moveq	r3, #1
 800927e:	2300      	movne	r3, #0
 8009280:	b2db      	uxtb	r3, r3
 8009282:	2b00      	cmp	r3, #0
 8009284:	d03c      	beq.n	8009300 <cppLoop+0x13d8>
			led.LR(-1, 1);
 8009286:	2201      	movs	r2, #1
 8009288:	f04f 31ff 	mov.w	r1, #4294967295
 800928c:	486a      	ldr	r0, [pc, #424]	; (8009438 <cppLoop+0x1510>)
 800928e:	f7f9 f89d 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009292:	2064      	movs	r0, #100	; 0x64
 8009294:	f000 ff28 	bl	800a0e8 <HAL_Delay>
			if(selector_acc == 0){
 8009298:	4b6c      	ldr	r3, [pc, #432]	; (800944c <cppLoop+0x1524>)
 800929a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d113      	bne.n	80092ca <cppLoop+0x13a2>
				adj_acc = adj_acc - 0.1;
 80092a2:	4b6b      	ldr	r3, [pc, #428]	; (8009450 <cppLoop+0x1528>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7f7 f966 	bl	8000578 <__aeabi_f2d>
 80092ac:	a360      	add	r3, pc, #384	; (adr r3, 8009430 <cppLoop+0x1508>)
 80092ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b2:	f7f7 f801 	bl	80002b8 <__aeabi_dsub>
 80092b6:	4603      	mov	r3, r0
 80092b8:	460c      	mov	r4, r1
 80092ba:	4618      	mov	r0, r3
 80092bc:	4621      	mov	r1, r4
 80092be:	f7f7 fcab 	bl	8000c18 <__aeabi_d2f>
 80092c2:	4602      	mov	r2, r0
 80092c4:	4b62      	ldr	r3, [pc, #392]	; (8009450 <cppLoop+0x1528>)
 80092c6:	601a      	str	r2, [r3, #0]
 80092c8:	e012      	b.n	80092f0 <cppLoop+0x13c8>
				adj_dec = adj_dec - 0.1;
 80092ca:	4b62      	ldr	r3, [pc, #392]	; (8009454 <cppLoop+0x152c>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7f7 f952 	bl	8000578 <__aeabi_f2d>
 80092d4:	a356      	add	r3, pc, #344	; (adr r3, 8009430 <cppLoop+0x1508>)
 80092d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092da:	f7f6 ffed 	bl	80002b8 <__aeabi_dsub>
 80092de:	4603      	mov	r3, r0
 80092e0:	460c      	mov	r4, r1
 80092e2:	4618      	mov	r0, r3
 80092e4:	4621      	mov	r1, r4
 80092e6:	f7f7 fc97 	bl	8000c18 <__aeabi_d2f>
 80092ea:	4602      	mov	r2, r0
 80092ec:	4b59      	ldr	r3, [pc, #356]	; (8009454 <cppLoop+0x152c>)
 80092ee:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80092f0:	2200      	movs	r2, #0
 80092f2:	f04f 31ff 	mov.w	r1, #4294967295
 80092f6:	4850      	ldr	r0, [pc, #320]	; (8009438 <cppLoop+0x1510>)
 80092f8:	f7f9 f868 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80092fc:	f000 bdba 	b.w	8009e74 <cppLoop+0x1f4c>
		else if(joy_stick.getValue() == JOY_C){
 8009300:	4851      	ldr	r0, [pc, #324]	; (8009448 <cppLoop+0x1520>)
 8009302:	f7f8 ff43 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009306:	4603      	mov	r3, r0
 8009308:	2b02      	cmp	r3, #2
 800930a:	bf0c      	ite	eq
 800930c:	2301      	moveq	r3, #1
 800930e:	2300      	movne	r3, #0
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2b00      	cmp	r3, #0
 8009314:	f000 85ae 	beq.w	8009e74 <cppLoop+0x1f4c>
			led.LR(-1, 1);
 8009318:	2201      	movs	r2, #1
 800931a:	f04f 31ff 	mov.w	r1, #4294967295
 800931e:	4846      	ldr	r0, [pc, #280]	; (8009438 <cppLoop+0x1510>)
 8009320:	f7f9 f854 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009324:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009328:	f000 fede 	bl	800a0e8 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 800932c:	2300      	movs	r3, #0
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	4b47      	ldr	r3, [pc, #284]	; (8009450 <cppLoop+0x1528>)
 8009332:	2201      	movs	r2, #1
 8009334:	4948      	ldr	r1, [pc, #288]	; (8009458 <cppLoop+0x1530>)
 8009336:	4849      	ldr	r0, [pc, #292]	; (800945c <cppLoop+0x1534>)
 8009338:	f7f8 faa0 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 800933c:	2300      	movs	r3, #0
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	4b44      	ldr	r3, [pc, #272]	; (8009454 <cppLoop+0x152c>)
 8009342:	2201      	movs	r2, #1
 8009344:	4946      	ldr	r1, [pc, #280]	; (8009460 <cppLoop+0x1538>)
 8009346:	4845      	ldr	r0, [pc, #276]	; (800945c <cppLoop+0x1534>)
 8009348:	f7f8 fa98 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 800934c:	4b40      	ldr	r3, [pc, #256]	; (8009450 <cppLoop+0x1528>)
 800934e:	edd3 7a00 	vldr	s15, [r3]
 8009352:	4b40      	ldr	r3, [pc, #256]	; (8009454 <cppLoop+0x152c>)
 8009354:	ed93 7a00 	vldr	s14, [r3]
 8009358:	eef0 0a47 	vmov.f32	s1, s14
 800935c:	eeb0 0a67 	vmov.f32	s0, s15
 8009360:	4836      	ldr	r0, [pc, #216]	; (800943c <cppLoop+0x1514>)
 8009362:	f7fa fed2 	bl	800410a <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8009366:	2200      	movs	r2, #0
 8009368:	f04f 31ff 	mov.w	r1, #4294967295
 800936c:	4832      	ldr	r0, [pc, #200]	; (8009438 <cppLoop+0x1510>)
 800936e:	f7f9 f82d 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009372:	f000 bd7f 	b.w	8009e74 <cppLoop+0x1f4c>

	case 8:
		led.fullColor('W');
 8009376:	2157      	movs	r1, #87	; 0x57
 8009378:	482f      	ldr	r0, [pc, #188]	; (8009438 <cppLoop+0x1510>)
 800937a:	f7f8 ff6b 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 800937e:	f7f7 fe8f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009382:	2100      	movs	r1, #0
 8009384:	2000      	movs	r0, #0
 8009386:	f7f7 fe9b 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 800938a:	482c      	ldr	r0, [pc, #176]	; (800943c <cppLoop+0x1514>)
 800938c:	f7fa ff15 	bl	80041ba <_ZN9LineTrace10getMaxAcc2Ev>
 8009390:	ee10 3a10 	vmov	r3, s0
 8009394:	4618      	mov	r0, r3
 8009396:	f7f7 f8ef 	bl	8000578 <__aeabi_f2d>
 800939a:	4603      	mov	r3, r0
 800939c:	460c      	mov	r4, r1
 800939e:	461a      	mov	r2, r3
 80093a0:	4623      	mov	r3, r4
 80093a2:	4830      	ldr	r0, [pc, #192]	; (8009464 <cppLoop+0x153c>)
 80093a4:	f7f7 feb6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80093a8:	2101      	movs	r1, #1
 80093aa:	2000      	movs	r0, #0
 80093ac:	f7f7 fe88 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 80093b0:	4822      	ldr	r0, [pc, #136]	; (800943c <cppLoop+0x1514>)
 80093b2:	f7fa fef0 	bl	8004196 <_ZN9LineTrace10getMaxDec2Ev>
 80093b6:	ee10 3a10 	vmov	r3, s0
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7f7 f8dc 	bl	8000578 <__aeabi_f2d>
 80093c0:	4603      	mov	r3, r0
 80093c2:	460c      	mov	r4, r1
 80093c4:	461a      	mov	r2, r3
 80093c6:	4623      	mov	r3, r4
 80093c8:	4827      	ldr	r0, [pc, #156]	; (8009468 <cppLoop+0x1540>)
 80093ca:	f7f7 fea3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80093ce:	481e      	ldr	r0, [pc, #120]	; (8009448 <cppLoop+0x1520>)
 80093d0:	f7f8 fedc 	bl	800218c <_ZN8JoyStick8getValueEv>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b08      	cmp	r3, #8
 80093d8:	bf0c      	ite	eq
 80093da:	2301      	moveq	r3, #1
 80093dc:	2300      	movne	r3, #0
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d045      	beq.n	8009470 <cppLoop+0x1548>
			led.LR(-1, 1);
 80093e4:	2201      	movs	r2, #1
 80093e6:	f04f 31ff 	mov.w	r1, #4294967295
 80093ea:	4813      	ldr	r0, [pc, #76]	; (8009438 <cppLoop+0x1510>)
 80093ec:	f7f8 ffee 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80093f0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80093f4:	f000 fe78 	bl	800a0e8 <HAL_Delay>

			selector_acc2++;
 80093f8:	4b1c      	ldr	r3, [pc, #112]	; (800946c <cppLoop+0x1544>)
 80093fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80093fe:	b29b      	uxth	r3, r3
 8009400:	3301      	adds	r3, #1
 8009402:	b29b      	uxth	r3, r3
 8009404:	b21a      	sxth	r2, r3
 8009406:	4b19      	ldr	r3, [pc, #100]	; (800946c <cppLoop+0x1544>)
 8009408:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 800940a:	4b18      	ldr	r3, [pc, #96]	; (800946c <cppLoop+0x1544>)
 800940c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009410:	2b01      	cmp	r3, #1
 8009412:	dd02      	ble.n	800941a <cppLoop+0x14f2>
 8009414:	4b15      	ldr	r3, [pc, #84]	; (800946c <cppLoop+0x1544>)
 8009416:	2200      	movs	r2, #0
 8009418:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800941a:	2200      	movs	r2, #0
 800941c:	f04f 31ff 	mov.w	r1, #4294967295
 8009420:	4805      	ldr	r0, [pc, #20]	; (8009438 <cppLoop+0x1510>)
 8009422:	f7f8 ffd3 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8009426:	f000 bd27 	b.w	8009e78 <cppLoop+0x1f50>
 800942a:	bf00      	nop
 800942c:	f3af 8000 	nop.w
 8009430:	9999999a 	.word	0x9999999a
 8009434:	3fb99999 	.word	0x3fb99999
 8009438:	200005d0 	.word	0x200005d0
 800943c:	2001db64 	.word	0x2001db64
 8009440:	0801a2b4 	.word	0x0801a2b4
 8009444:	0801a2c0 	.word	0x0801a2c0
 8009448:	200005c4 	.word	0x200005c4
 800944c:	200423dc 	.word	0x200423dc
 8009450:	2004243c 	.word	0x2004243c
 8009454:	20042444 	.word	0x20042444
 8009458:	0801a2cc 	.word	0x0801a2cc
 800945c:	0801a1f8 	.word	0x0801a1f8
 8009460:	0801a2d4 	.word	0x0801a2d4
 8009464:	0801a2dc 	.word	0x0801a2dc
 8009468:	0801a2e8 	.word	0x0801a2e8
 800946c:	200423de 	.word	0x200423de
		else if(joy_stick.getValue() == JOY_R){
 8009470:	48bf      	ldr	r0, [pc, #764]	; (8009770 <cppLoop+0x1848>)
 8009472:	f7f8 fe8b 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009476:	4603      	mov	r3, r0
 8009478:	2b10      	cmp	r3, #16
 800947a:	bf0c      	ite	eq
 800947c:	2301      	moveq	r3, #1
 800947e:	2300      	movne	r3, #0
 8009480:	b2db      	uxtb	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	d03c      	beq.n	8009500 <cppLoop+0x15d8>
			led.LR(-1, 1);
 8009486:	2201      	movs	r2, #1
 8009488:	f04f 31ff 	mov.w	r1, #4294967295
 800948c:	48b9      	ldr	r0, [pc, #740]	; (8009774 <cppLoop+0x184c>)
 800948e:	f7f8 ff9d 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009492:	2064      	movs	r0, #100	; 0x64
 8009494:	f000 fe28 	bl	800a0e8 <HAL_Delay>
			if(selector_acc2 == 0){
 8009498:	4bb7      	ldr	r3, [pc, #732]	; (8009778 <cppLoop+0x1850>)
 800949a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d113      	bne.n	80094ca <cppLoop+0x15a2>
				adj_acc2 = adj_acc2 + 0.1;
 80094a2:	4bb6      	ldr	r3, [pc, #728]	; (800977c <cppLoop+0x1854>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7f7 f866 	bl	8000578 <__aeabi_f2d>
 80094ac:	a3ae      	add	r3, pc, #696	; (adr r3, 8009768 <cppLoop+0x1840>)
 80094ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b2:	f7f6 ff03 	bl	80002bc <__adddf3>
 80094b6:	4603      	mov	r3, r0
 80094b8:	460c      	mov	r4, r1
 80094ba:	4618      	mov	r0, r3
 80094bc:	4621      	mov	r1, r4
 80094be:	f7f7 fbab 	bl	8000c18 <__aeabi_d2f>
 80094c2:	4602      	mov	r2, r0
 80094c4:	4bad      	ldr	r3, [pc, #692]	; (800977c <cppLoop+0x1854>)
 80094c6:	601a      	str	r2, [r3, #0]
 80094c8:	e012      	b.n	80094f0 <cppLoop+0x15c8>
				adj_dec2 = adj_dec2 + 0.1;
 80094ca:	4bad      	ldr	r3, [pc, #692]	; (8009780 <cppLoop+0x1858>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7f7 f852 	bl	8000578 <__aeabi_f2d>
 80094d4:	a3a4      	add	r3, pc, #656	; (adr r3, 8009768 <cppLoop+0x1840>)
 80094d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094da:	f7f6 feef 	bl	80002bc <__adddf3>
 80094de:	4603      	mov	r3, r0
 80094e0:	460c      	mov	r4, r1
 80094e2:	4618      	mov	r0, r3
 80094e4:	4621      	mov	r1, r4
 80094e6:	f7f7 fb97 	bl	8000c18 <__aeabi_d2f>
 80094ea:	4602      	mov	r2, r0
 80094ec:	4ba4      	ldr	r3, [pc, #656]	; (8009780 <cppLoop+0x1858>)
 80094ee:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80094f0:	2200      	movs	r2, #0
 80094f2:	f04f 31ff 	mov.w	r1, #4294967295
 80094f6:	489f      	ldr	r0, [pc, #636]	; (8009774 <cppLoop+0x184c>)
 80094f8:	f7f8 ff68 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80094fc:	f000 bcbc 	b.w	8009e78 <cppLoop+0x1f50>
		else if(joy_stick.getValue() == JOY_L){
 8009500:	489b      	ldr	r0, [pc, #620]	; (8009770 <cppLoop+0x1848>)
 8009502:	f7f8 fe43 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009506:	4603      	mov	r3, r0
 8009508:	2b01      	cmp	r3, #1
 800950a:	bf0c      	ite	eq
 800950c:	2301      	moveq	r3, #1
 800950e:	2300      	movne	r3, #0
 8009510:	b2db      	uxtb	r3, r3
 8009512:	2b00      	cmp	r3, #0
 8009514:	d03c      	beq.n	8009590 <cppLoop+0x1668>
			led.LR(-1, 1);
 8009516:	2201      	movs	r2, #1
 8009518:	f04f 31ff 	mov.w	r1, #4294967295
 800951c:	4895      	ldr	r0, [pc, #596]	; (8009774 <cppLoop+0x184c>)
 800951e:	f7f8 ff55 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009522:	2064      	movs	r0, #100	; 0x64
 8009524:	f000 fde0 	bl	800a0e8 <HAL_Delay>
			if(selector_acc2 == 0){
 8009528:	4b93      	ldr	r3, [pc, #588]	; (8009778 <cppLoop+0x1850>)
 800952a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d113      	bne.n	800955a <cppLoop+0x1632>
				adj_acc2 = adj_acc2 - 0.1;
 8009532:	4b92      	ldr	r3, [pc, #584]	; (800977c <cppLoop+0x1854>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4618      	mov	r0, r3
 8009538:	f7f7 f81e 	bl	8000578 <__aeabi_f2d>
 800953c:	a38a      	add	r3, pc, #552	; (adr r3, 8009768 <cppLoop+0x1840>)
 800953e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009542:	f7f6 feb9 	bl	80002b8 <__aeabi_dsub>
 8009546:	4603      	mov	r3, r0
 8009548:	460c      	mov	r4, r1
 800954a:	4618      	mov	r0, r3
 800954c:	4621      	mov	r1, r4
 800954e:	f7f7 fb63 	bl	8000c18 <__aeabi_d2f>
 8009552:	4602      	mov	r2, r0
 8009554:	4b89      	ldr	r3, [pc, #548]	; (800977c <cppLoop+0x1854>)
 8009556:	601a      	str	r2, [r3, #0]
 8009558:	e012      	b.n	8009580 <cppLoop+0x1658>
				adj_dec2 = adj_dec2 - 0.1;
 800955a:	4b89      	ldr	r3, [pc, #548]	; (8009780 <cppLoop+0x1858>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4618      	mov	r0, r3
 8009560:	f7f7 f80a 	bl	8000578 <__aeabi_f2d>
 8009564:	a380      	add	r3, pc, #512	; (adr r3, 8009768 <cppLoop+0x1840>)
 8009566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956a:	f7f6 fea5 	bl	80002b8 <__aeabi_dsub>
 800956e:	4603      	mov	r3, r0
 8009570:	460c      	mov	r4, r1
 8009572:	4618      	mov	r0, r3
 8009574:	4621      	mov	r1, r4
 8009576:	f7f7 fb4f 	bl	8000c18 <__aeabi_d2f>
 800957a:	4602      	mov	r2, r0
 800957c:	4b80      	ldr	r3, [pc, #512]	; (8009780 <cppLoop+0x1858>)
 800957e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009580:	2200      	movs	r2, #0
 8009582:	f04f 31ff 	mov.w	r1, #4294967295
 8009586:	487b      	ldr	r0, [pc, #492]	; (8009774 <cppLoop+0x184c>)
 8009588:	f7f8 ff20 	bl	80023cc <_ZN3LED2LREaa>
		break;
 800958c:	f000 bc74 	b.w	8009e78 <cppLoop+0x1f50>
		else if(joy_stick.getValue() == JOY_C){
 8009590:	4877      	ldr	r0, [pc, #476]	; (8009770 <cppLoop+0x1848>)
 8009592:	f7f8 fdfb 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009596:	4603      	mov	r3, r0
 8009598:	2b02      	cmp	r3, #2
 800959a:	bf0c      	ite	eq
 800959c:	2301      	moveq	r3, #1
 800959e:	2300      	movne	r3, #0
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f000 8468 	beq.w	8009e78 <cppLoop+0x1f50>
			led.LR(-1, 1);
 80095a8:	2201      	movs	r2, #1
 80095aa:	f04f 31ff 	mov.w	r1, #4294967295
 80095ae:	4871      	ldr	r0, [pc, #452]	; (8009774 <cppLoop+0x184c>)
 80095b0:	f7f8 ff0c 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80095b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80095b8:	f000 fd96 	bl	800a0e8 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 80095bc:	2300      	movs	r3, #0
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	4b6e      	ldr	r3, [pc, #440]	; (800977c <cppLoop+0x1854>)
 80095c2:	2201      	movs	r2, #1
 80095c4:	496f      	ldr	r1, [pc, #444]	; (8009784 <cppLoop+0x185c>)
 80095c6:	4870      	ldr	r0, [pc, #448]	; (8009788 <cppLoop+0x1860>)
 80095c8:	f7f8 f958 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 80095cc:	2300      	movs	r3, #0
 80095ce:	9300      	str	r3, [sp, #0]
 80095d0:	4b6b      	ldr	r3, [pc, #428]	; (8009780 <cppLoop+0x1858>)
 80095d2:	2201      	movs	r2, #1
 80095d4:	496d      	ldr	r1, [pc, #436]	; (800978c <cppLoop+0x1864>)
 80095d6:	486c      	ldr	r0, [pc, #432]	; (8009788 <cppLoop+0x1860>)
 80095d8:	f7f8 f950 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 80095dc:	4b67      	ldr	r3, [pc, #412]	; (800977c <cppLoop+0x1854>)
 80095de:	edd3 7a00 	vldr	s15, [r3]
 80095e2:	4b67      	ldr	r3, [pc, #412]	; (8009780 <cppLoop+0x1858>)
 80095e4:	ed93 7a00 	vldr	s14, [r3]
 80095e8:	eef0 0a47 	vmov.f32	s1, s14
 80095ec:	eeb0 0a67 	vmov.f32	s0, s15
 80095f0:	4867      	ldr	r0, [pc, #412]	; (8009790 <cppLoop+0x1868>)
 80095f2:	f7fa fda4 	bl	800413e <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 80095f6:	2200      	movs	r2, #0
 80095f8:	f04f 31ff 	mov.w	r1, #4294967295
 80095fc:	485d      	ldr	r0, [pc, #372]	; (8009774 <cppLoop+0x184c>)
 80095fe:	f7f8 fee5 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009602:	f000 bc39 	b.w	8009e78 <cppLoop+0x1f50>

	case 9:
		led.fullColor('~');
 8009606:	217e      	movs	r1, #126	; 0x7e
 8009608:	485a      	ldr	r0, [pc, #360]	; (8009774 <cppLoop+0x184c>)
 800960a:	f7f8 fe23 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 800960e:	f7f7 fd47 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009612:	2100      	movs	r1, #0
 8009614:	2000      	movs	r0, #0
 8009616:	f7f7 fd53 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 800961a:	485e      	ldr	r0, [pc, #376]	; (8009794 <cppLoop+0x186c>)
 800961c:	f7f7 fd7a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009620:	2101      	movs	r1, #1
 8009622:	2000      	movs	r0, #0
 8009624:	f7f7 fd4c 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8009628:	485b      	ldr	r0, [pc, #364]	; (8009798 <cppLoop+0x1870>)
 800962a:	f7f7 fd73 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800962e:	4850      	ldr	r0, [pc, #320]	; (8009770 <cppLoop+0x1848>)
 8009630:	f7f8 fdac 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009634:	4603      	mov	r3, r0
 8009636:	2b02      	cmp	r3, #2
 8009638:	bf0c      	ite	eq
 800963a:	2301      	moveq	r3, #1
 800963c:	2300      	movne	r3, #0
 800963e:	b2db      	uxtb	r3, r3
 8009640:	2b00      	cmp	r3, #0
 8009642:	f000 841b 	beq.w	8009e7c <cppLoop+0x1f54>
			led.LR(-1, 1);
 8009646:	2201      	movs	r2, #1
 8009648:	f04f 31ff 	mov.w	r1, #4294967295
 800964c:	4849      	ldr	r0, [pc, #292]	; (8009774 <cppLoop+0x184c>)
 800964e:	f7f8 febd 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(500);
 8009652:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009656:	f000 fd47 	bl	800a0e8 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 800965a:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800979c <cppLoop+0x1874>
 800965e:	484c      	ldr	r0, [pc, #304]	; (8009790 <cppLoop+0x1868>)
 8009660:	f7fa fca4 	bl	8003fac <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8009664:	484a      	ldr	r0, [pc, #296]	; (8009790 <cppLoop+0x1868>)
 8009666:	f7fa ff13 	bl	8004490 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 800966a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800966e:	f000 fd3b 	bl	800a0e8 <HAL_Delay>

			led.fullColor('R');
 8009672:	2152      	movs	r1, #82	; 0x52
 8009674:	483f      	ldr	r0, [pc, #252]	; (8009774 <cppLoop+0x184c>)
 8009676:	f7f8 fded 	bl	8002254 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 800967a:	4849      	ldr	r0, [pc, #292]	; (80097a0 <cppLoop+0x1878>)
 800967c:	f7f8 f850 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 8009680:	f242 7010 	movw	r0, #10000	; 0x2710
 8009684:	f000 fd30 	bl	800a0e8 <HAL_Delay>

			line_trace.stop();
 8009688:	4841      	ldr	r0, [pc, #260]	; (8009790 <cppLoop+0x1868>)
 800968a:	f7fa ffad 	bl	80045e8 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 800968e:	4945      	ldr	r1, [pc, #276]	; (80097a4 <cppLoop+0x187c>)
 8009690:	4845      	ldr	r0, [pc, #276]	; (80097a8 <cppLoop+0x1880>)
 8009692:	f7f8 f87e 	bl	8001792 <user_fopen>
			float d = encoder.getDistance();
 8009696:	4842      	ldr	r0, [pc, #264]	; (80097a0 <cppLoop+0x1878>)
 8009698:	f7f8 f806 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 800969c:	eef0 7a40 	vmov.f32	s15, s0
 80096a0:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 80096a4:	1d3b      	adds	r3, r7, #4
 80096a6:	2201      	movs	r2, #1
 80096a8:	4619      	mov	r1, r3
 80096aa:	2001      	movs	r0, #1
 80096ac:	f7f8 f894 	bl	80017d8 <sd_write_float>
			user_fclose();
 80096b0:	f7f8 f882 	bl	80017b8 <user_fclose>

			led.LR(-1, 0);
 80096b4:	2200      	movs	r2, #0
 80096b6:	f04f 31ff 	mov.w	r1, #4294967295
 80096ba:	482e      	ldr	r0, [pc, #184]	; (8009774 <cppLoop+0x184c>)
 80096bc:	f7f8 fe86 	bl	80023cc <_ZN3LED2LREaa>
		}
		break;
 80096c0:	e3dc      	b.n	8009e7c <cppLoop+0x1f54>

	case 10:
		led.fullColor('~');
 80096c2:	217e      	movs	r1, #126	; 0x7e
 80096c4:	482b      	ldr	r0, [pc, #172]	; (8009774 <cppLoop+0x184c>)
 80096c6:	f7f8 fdc5 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80096ca:	f7f7 fce9 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80096ce:	2100      	movs	r1, #0
 80096d0:	2000      	movs	r0, #0
 80096d2:	f7f7 fcf5 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 80096d6:	4835      	ldr	r0, [pc, #212]	; (80097ac <cppLoop+0x1884>)
 80096d8:	f7f7 fd1c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80096dc:	2101      	movs	r1, #1
 80096de:	2000      	movs	r0, #0
 80096e0:	f7f7 fcee 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 80096e4:	4832      	ldr	r0, [pc, #200]	; (80097b0 <cppLoop+0x1888>)
 80096e6:	f7f7 fd15 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 80096ea:	4821      	ldr	r0, [pc, #132]	; (8009770 <cppLoop+0x1848>)
 80096ec:	f7f8 fd4e 	bl	800218c <_ZN8JoyStick8getValueEv>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b02      	cmp	r3, #2
 80096f4:	bf0c      	ite	eq
 80096f6:	2301      	moveq	r3, #1
 80096f8:	2300      	movne	r3, #0
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	f000 83bf 	beq.w	8009e80 <cppLoop+0x1f58>
			HAL_Delay(500);
 8009702:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009706:	f000 fcef 	bl	800a0e8 <HAL_Delay>
			led.LR(-1, 1);
 800970a:	2201      	movs	r2, #1
 800970c:	f04f 31ff 	mov.w	r1, #4294967295
 8009710:	4818      	ldr	r0, [pc, #96]	; (8009774 <cppLoop+0x184c>)
 8009712:	f7f8 fe5b 	bl	80023cc <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 8009716:	2102      	movs	r1, #2
 8009718:	481d      	ldr	r0, [pc, #116]	; (8009790 <cppLoop+0x1868>)
 800971a:	f7fa fea7 	bl	800446c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 800971e:	4b25      	ldr	r3, [pc, #148]	; (80097b4 <cppLoop+0x188c>)
 8009720:	edd3 7a00 	vldr	s15, [r3]
 8009724:	eeb0 0a67 	vmov.f32	s0, s15
 8009728:	4819      	ldr	r0, [pc, #100]	; (8009790 <cppLoop+0x1868>)
 800972a:	f7fa fc4e 	bl	8003fca <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800972e:	4b21      	ldr	r3, [pc, #132]	; (80097b4 <cppLoop+0x188c>)
 8009730:	edd3 7a00 	vldr	s15, [r3]
 8009734:	eeb0 0a67 	vmov.f32	s0, s15
 8009738:	4815      	ldr	r0, [pc, #84]	; (8009790 <cppLoop+0x1868>)
 800973a:	f7fa fc56 	bl	8003fea <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 800973e:	4b1d      	ldr	r3, [pc, #116]	; (80097b4 <cppLoop+0x188c>)
 8009740:	edd3 7a00 	vldr	s15, [r3]
 8009744:	eeb0 0a67 	vmov.f32	s0, s15
 8009748:	4811      	ldr	r0, [pc, #68]	; (8009790 <cppLoop+0x1868>)
 800974a:	f7fa fc6e 	bl	800402a <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800974e:	4810      	ldr	r0, [pc, #64]	; (8009790 <cppLoop+0x1868>)
 8009750:	f7fb f89a 	bl	8004888 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 8009754:	2200      	movs	r2, #0
 8009756:	f04f 31ff 	mov.w	r1, #4294967295
 800975a:	4806      	ldr	r0, [pc, #24]	; (8009774 <cppLoop+0x184c>)
 800975c:	f7f8 fe36 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 8009760:	e38e      	b.n	8009e80 <cppLoop+0x1f58>
 8009762:	bf00      	nop
 8009764:	f3af 8000 	nop.w
 8009768:	9999999a 	.word	0x9999999a
 800976c:	3fb99999 	.word	0x3fb99999
 8009770:	200005c4 	.word	0x200005c4
 8009774:	200005d0 	.word	0x200005d0
 8009778:	200423de 	.word	0x200423de
 800977c:	2004244c 	.word	0x2004244c
 8009780:	20042454 	.word	0x20042454
 8009784:	0801a2f4 	.word	0x0801a2f4
 8009788:	0801a1f8 	.word	0x0801a1f8
 800978c:	0801a300 	.word	0x0801a300
 8009790:	2001db64 	.word	0x2001db64
 8009794:	0801a30c 	.word	0x0801a30c
 8009798:	0801a314 	.word	0x0801a314
 800979c:	00000000 	.word	0x00000000
 80097a0:	2001dac0 	.word	0x2001dac0
 80097a4:	0801a320 	.word	0x0801a320
 80097a8:	0801a328 	.word	0x0801a328
 80097ac:	0801a334 	.word	0x0801a334
 80097b0:	0801a340 	.word	0x0801a340
 80097b4:	20042424 	.word	0x20042424

	case 11:
		led.fullColor('~');
 80097b8:	217e      	movs	r1, #126	; 0x7e
 80097ba:	48b5      	ldr	r0, [pc, #724]	; (8009a90 <cppLoop+0x1b68>)
 80097bc:	f7f8 fd4a 	bl	8002254 <_ZN3LED9fullColorEc>

lcd_clear();
 80097c0:	f7f7 fc6e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80097c4:	2100      	movs	r1, #0
 80097c6:	2000      	movs	r0, #0
 80097c8:	f7f7 fc7a 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 80097cc:	48b1      	ldr	r0, [pc, #708]	; (8009a94 <cppLoop+0x1b6c>)
 80097ce:	f7f7 fca1 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80097d2:	2101      	movs	r1, #1
 80097d4:	2000      	movs	r0, #0
 80097d6:	f7f7 fc73 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 80097da:	48af      	ldr	r0, [pc, #700]	; (8009a98 <cppLoop+0x1b70>)
 80097dc:	f7f7 fc9a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80097e0:	48ae      	ldr	r0, [pc, #696]	; (8009a9c <cppLoop+0x1b74>)
 80097e2:	f7f8 fcd3 	bl	800218c <_ZN8JoyStick8getValueEv>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b02      	cmp	r3, #2
 80097ea:	bf0c      	ite	eq
 80097ec:	2301      	moveq	r3, #1
 80097ee:	2300      	movne	r3, #0
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	f000 8346 	beq.w	8009e84 <cppLoop+0x1f5c>
			HAL_Delay(1000);
 80097f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80097fc:	f000 fc74 	bl	800a0e8 <HAL_Delay>
			led.LR(-1, 1);
 8009800:	2201      	movs	r2, #1
 8009802:	f04f 31ff 	mov.w	r1, #4294967295
 8009806:	48a2      	ldr	r0, [pc, #648]	; (8009a90 <cppLoop+0x1b68>)
 8009808:	f7f8 fde0 	bl	80023cc <_ZN3LED2LREaa>

			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 800980c:	eddf 1aa4 	vldr	s3, [pc, #656]	; 8009aa0 <cppLoop+0x1b78>
 8009810:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 8009aa0 <cppLoop+0x1b78>
 8009814:	eddf 0aa2 	vldr	s1, [pc, #648]	; 8009aa0 <cppLoop+0x1b78>
 8009818:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 8009aa0 <cppLoop+0x1b78>
 800981c:	48a1      	ldr	r0, [pc, #644]	; (8009aa4 <cppLoop+0x1b7c>)
 800981e:	f7f7 fd17 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(3000);
 8009822:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009826:	f000 fc5f 	bl	800a0e8 <HAL_Delay>
			esc.off();
 800982a:	489e      	ldr	r0, [pc, #632]	; (8009aa4 <cppLoop+0x1b7c>)
 800982c:	f7f7 fdaa 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 8009830:	2200      	movs	r2, #0
 8009832:	f04f 31ff 	mov.w	r1, #4294967295
 8009836:	4896      	ldr	r0, [pc, #600]	; (8009a90 <cppLoop+0x1b68>)
 8009838:	f7f8 fdc8 	bl	80023cc <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}
		*/

		break;
 800983c:	e322      	b.n	8009e84 <cppLoop+0x1f5c>

	case 12:
		led.fullColor('~');
 800983e:	217e      	movs	r1, #126	; 0x7e
 8009840:	4893      	ldr	r0, [pc, #588]	; (8009a90 <cppLoop+0x1b68>)
 8009842:	f7f8 fd07 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009846:	f7f7 fc2b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800984a:	2100      	movs	r1, #0
 800984c:	2000      	movs	r0, #0
 800984e:	f7f7 fc37 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8009852:	4895      	ldr	r0, [pc, #596]	; (8009aa8 <cppLoop+0x1b80>)
 8009854:	f7f7 fc5e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009858:	2101      	movs	r1, #1
 800985a:	2000      	movs	r0, #0
 800985c:	f7f7 fc30 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8009860:	4892      	ldr	r0, [pc, #584]	; (8009aac <cppLoop+0x1b84>)
 8009862:	f7f7 fc57 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009866:	488d      	ldr	r0, [pc, #564]	; (8009a9c <cppLoop+0x1b74>)
 8009868:	f7f8 fc90 	bl	800218c <_ZN8JoyStick8getValueEv>
 800986c:	4603      	mov	r3, r0
 800986e:	2b02      	cmp	r3, #2
 8009870:	bf0c      	ite	eq
 8009872:	2301      	moveq	r3, #1
 8009874:	2300      	movne	r3, #0
 8009876:	b2db      	uxtb	r3, r3
 8009878:	2b00      	cmp	r3, #0
 800987a:	f000 8305 	beq.w	8009e88 <cppLoop+0x1f60>
			HAL_Delay(1500);
 800987e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8009882:	f000 fc31 	bl	800a0e8 <HAL_Delay>
			led.LR(-1, 1);
 8009886:	2201      	movs	r2, #1
 8009888:	f04f 31ff 	mov.w	r1, #4294967295
 800988c:	4880      	ldr	r0, [pc, #512]	; (8009a90 <cppLoop+0x1b68>)
 800988e:	f7f8 fd9d 	bl	80023cc <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8009892:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009896:	f000 fc27 	bl	800a0e8 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 800989a:	eddf 1a81 	vldr	s3, [pc, #516]	; 8009aa0 <cppLoop+0x1b78>
 800989e:	ed9f 1a80 	vldr	s2, [pc, #512]	; 8009aa0 <cppLoop+0x1b78>
 80098a2:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8009aa0 <cppLoop+0x1b78>
 80098a6:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8009aa0 <cppLoop+0x1b78>
 80098aa:	487e      	ldr	r0, [pc, #504]	; (8009aa4 <cppLoop+0x1b7c>)
 80098ac:	f7f7 fcd0 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 80098b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80098b4:	f000 fc18 	bl	800a0e8 <HAL_Delay>

			logger.start();
 80098b8:	487d      	ldr	r0, [pc, #500]	; (8009ab0 <cppLoop+0x1b88>)
 80098ba:	f7fb fb6a 	bl	8004f92 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 80098be:	487d      	ldr	r0, [pc, #500]	; (8009ab4 <cppLoop+0x1b8c>)
 80098c0:	f7fc fcaf 	bl	8006222 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 80098c4:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8009ab8 <cppLoop+0x1b90>
 80098c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80098cc:	4879      	ldr	r0, [pc, #484]	; (8009ab4 <cppLoop+0x1b8c>)
 80098ce:	f7fc fc3b 	bl	8006148 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 80098d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80098d6:	f000 fc07 	bl	800a0e8 <HAL_Delay>

			logger.stop();
 80098da:	4875      	ldr	r0, [pc, #468]	; (8009ab0 <cppLoop+0x1b88>)
 80098dc:	f7fb fb69 	bl	8004fb2 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 80098e0:	4874      	ldr	r0, [pc, #464]	; (8009ab4 <cppLoop+0x1b8c>)
 80098e2:	f7fc fcb1 	bl	8006248 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 80098e6:	486f      	ldr	r0, [pc, #444]	; (8009aa4 <cppLoop+0x1b7c>)
 80098e8:	f7f7 fd4c 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 80098ec:	4a73      	ldr	r2, [pc, #460]	; (8009abc <cppLoop+0x1b94>)
 80098ee:	4974      	ldr	r1, [pc, #464]	; (8009ac0 <cppLoop+0x1b98>)
 80098f0:	486f      	ldr	r0, [pc, #444]	; (8009ab0 <cppLoop+0x1b88>)
 80098f2:	f7fb fa45 	bl	8004d80 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80098f6:	2200      	movs	r2, #0
 80098f8:	f04f 31ff 	mov.w	r1, #4294967295
 80098fc:	4864      	ldr	r0, [pc, #400]	; (8009a90 <cppLoop+0x1b68>)
 80098fe:	f7f8 fd65 	bl	80023cc <_ZN3LED2LREaa>
		}
		break;
 8009902:	e2c1      	b.n	8009e88 <cppLoop+0x1f60>

	case 13:

		led.fullColor('W');
 8009904:	2157      	movs	r1, #87	; 0x57
 8009906:	4862      	ldr	r0, [pc, #392]	; (8009a90 <cppLoop+0x1b68>)
 8009908:	f7f8 fca4 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 800990c:	f7f7 fbc8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009910:	2100      	movs	r1, #0
 8009912:	2000      	movs	r0, #0
 8009914:	f7f7 fbd4 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8009918:	486a      	ldr	r0, [pc, #424]	; (8009ac4 <cppLoop+0x1b9c>)
 800991a:	f7f7 fbfb 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800991e:	2101      	movs	r1, #1
 8009920:	2000      	movs	r0, #0
 8009922:	f7f7 fbcd 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8009926:	4b68      	ldr	r3, [pc, #416]	; (8009ac8 <cppLoop+0x1ba0>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4618      	mov	r0, r3
 800992c:	f7f6 fe24 	bl	8000578 <__aeabi_f2d>
 8009930:	4603      	mov	r3, r0
 8009932:	460c      	mov	r4, r1
 8009934:	461a      	mov	r2, r3
 8009936:	4623      	mov	r3, r4
 8009938:	4864      	ldr	r0, [pc, #400]	; (8009acc <cppLoop+0x1ba4>)
 800993a:	f7f7 fbeb 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800993e:	4857      	ldr	r0, [pc, #348]	; (8009a9c <cppLoop+0x1b74>)
 8009940:	f7f8 fc24 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009944:	4603      	mov	r3, r0
 8009946:	2b02      	cmp	r3, #2
 8009948:	bf0c      	ite	eq
 800994a:	2301      	moveq	r3, #1
 800994c:	2300      	movne	r3, #0
 800994e:	b2db      	uxtb	r3, r3
 8009950:	2b00      	cmp	r3, #0
 8009952:	f000 829b 	beq.w	8009e8c <cppLoop+0x1f64>
			HAL_Delay(500);
 8009956:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800995a:	f000 fbc5 	bl	800a0e8 <HAL_Delay>

			led.LR(1, -1);
 800995e:	f04f 32ff 	mov.w	r2, #4294967295
 8009962:	2101      	movs	r1, #1
 8009964:	484a      	ldr	r0, [pc, #296]	; (8009a90 <cppLoop+0x1b68>)
 8009966:	f7f8 fd31 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 800996a:	2102      	movs	r1, #2
 800996c:	4858      	ldr	r0, [pc, #352]	; (8009ad0 <cppLoop+0x1ba8>)
 800996e:	f7fa fd7d 	bl	800446c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8009972:	4b58      	ldr	r3, [pc, #352]	; (8009ad4 <cppLoop+0x1bac>)
 8009974:	edd3 7a00 	vldr	s15, [r3]
 8009978:	eeb0 0a67 	vmov.f32	s0, s15
 800997c:	4854      	ldr	r0, [pc, #336]	; (8009ad0 <cppLoop+0x1ba8>)
 800997e:	f7fa fb24 	bl	8003fca <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8009982:	4b51      	ldr	r3, [pc, #324]	; (8009ac8 <cppLoop+0x1ba0>)
 8009984:	edd3 7a00 	vldr	s15, [r3]
 8009988:	eeb0 0a67 	vmov.f32	s0, s15
 800998c:	4850      	ldr	r0, [pc, #320]	; (8009ad0 <cppLoop+0x1ba8>)
 800998e:	f7fa fb2c 	bl	8003fea <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8009992:	4b4d      	ldr	r3, [pc, #308]	; (8009ac8 <cppLoop+0x1ba0>)
 8009994:	edd3 7a00 	vldr	s15, [r3]
 8009998:	eeb0 0a67 	vmov.f32	s0, s15
 800999c:	484c      	ldr	r0, [pc, #304]	; (8009ad0 <cppLoop+0x1ba8>)
 800999e:	f7fa fb44 	bl	800402a <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80099a2:	484b      	ldr	r0, [pc, #300]	; (8009ad0 <cppLoop+0x1ba8>)
 80099a4:	f7fa ff70 	bl	8004888 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 80099a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80099ac:	f000 fb9c 	bl	800a0e8 <HAL_Delay>

			line_trace.running();
 80099b0:	4847      	ldr	r0, [pc, #284]	; (8009ad0 <cppLoop+0x1ba8>)
 80099b2:	f7fa fd9f 	bl	80044f4 <_ZN9LineTrace7runningEv>

			esc.off();
 80099b6:	483b      	ldr	r0, [pc, #236]	; (8009aa4 <cppLoop+0x1b7c>)
 80099b8:	f7f7 fce4 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80099bc:	f04f 32ff 	mov.w	r2, #4294967295
 80099c0:	2100      	movs	r1, #0
 80099c2:	4833      	ldr	r0, [pc, #204]	; (8009a90 <cppLoop+0x1b68>)
 80099c4:	f7f8 fd02 	bl	80023cc <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 80099c8:	e260      	b.n	8009e8c <cppLoop+0x1f64>

	case 14:
		led.fullColor('W');
 80099ca:	2157      	movs	r1, #87	; 0x57
 80099cc:	4830      	ldr	r0, [pc, #192]	; (8009a90 <cppLoop+0x1b68>)
 80099ce:	f7f8 fc41 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80099d2:	f7f7 fb65 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80099d6:	2100      	movs	r1, #0
 80099d8:	2000      	movs	r0, #0
 80099da:	f7f7 fb71 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 80099de:	483e      	ldr	r0, [pc, #248]	; (8009ad8 <cppLoop+0x1bb0>)
 80099e0:	f7f7 fb98 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80099e4:	2101      	movs	r1, #1
 80099e6:	2000      	movs	r0, #0
 80099e8:	f7f7 fb6a 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 80099ec:	4b3b      	ldr	r3, [pc, #236]	; (8009adc <cppLoop+0x1bb4>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7f6 fdc1 	bl	8000578 <__aeabi_f2d>
 80099f6:	4603      	mov	r3, r0
 80099f8:	460c      	mov	r4, r1
 80099fa:	461a      	mov	r2, r3
 80099fc:	4623      	mov	r3, r4
 80099fe:	4833      	ldr	r0, [pc, #204]	; (8009acc <cppLoop+0x1ba4>)
 8009a00:	f7f7 fb88 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009a04:	4825      	ldr	r0, [pc, #148]	; (8009a9c <cppLoop+0x1b74>)
 8009a06:	f7f8 fbc1 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	bf0c      	ite	eq
 8009a10:	2301      	moveq	r3, #1
 8009a12:	2300      	movne	r3, #0
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f000 823a 	beq.w	8009e90 <cppLoop+0x1f68>
			HAL_Delay(500);
 8009a1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009a20:	f000 fb62 	bl	800a0e8 <HAL_Delay>

			led.LR(1, -1);
 8009a24:	f04f 32ff 	mov.w	r2, #4294967295
 8009a28:	2101      	movs	r1, #1
 8009a2a:	4819      	ldr	r0, [pc, #100]	; (8009a90 <cppLoop+0x1b68>)
 8009a2c:	f7f8 fcce 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8009a30:	2101      	movs	r1, #1
 8009a32:	4827      	ldr	r0, [pc, #156]	; (8009ad0 <cppLoop+0x1ba8>)
 8009a34:	f7fa fd1a 	bl	800446c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8009a38:	4b29      	ldr	r3, [pc, #164]	; (8009ae0 <cppLoop+0x1bb8>)
 8009a3a:	edd3 7a00 	vldr	s15, [r3]
 8009a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8009a42:	4823      	ldr	r0, [pc, #140]	; (8009ad0 <cppLoop+0x1ba8>)
 8009a44:	f7fa fac1 	bl	8003fca <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8009a48:	4b24      	ldr	r3, [pc, #144]	; (8009adc <cppLoop+0x1bb4>)
 8009a4a:	edd3 7a00 	vldr	s15, [r3]
 8009a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8009a52:	481f      	ldr	r0, [pc, #124]	; (8009ad0 <cppLoop+0x1ba8>)
 8009a54:	f7fa fac9 	bl	8003fea <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8009a58:	4b21      	ldr	r3, [pc, #132]	; (8009ae0 <cppLoop+0x1bb8>)
 8009a5a:	edd3 7a00 	vldr	s15, [r3]
 8009a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8009a62:	481b      	ldr	r0, [pc, #108]	; (8009ad0 <cppLoop+0x1ba8>)
 8009a64:	f7fa fae1 	bl	800402a <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009a68:	4819      	ldr	r0, [pc, #100]	; (8009ad0 <cppLoop+0x1ba8>)
 8009a6a:	f7fa ff0d 	bl	8004888 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 8009a6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009a72:	f000 fb39 	bl	800a0e8 <HAL_Delay>

			line_trace.running();
 8009a76:	4816      	ldr	r0, [pc, #88]	; (8009ad0 <cppLoop+0x1ba8>)
 8009a78:	f7fa fd3c 	bl	80044f4 <_ZN9LineTrace7runningEv>

			esc.off();
 8009a7c:	4809      	ldr	r0, [pc, #36]	; (8009aa4 <cppLoop+0x1b7c>)
 8009a7e:	f7f7 fc81 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 8009a82:	f04f 32ff 	mov.w	r2, #4294967295
 8009a86:	2100      	movs	r1, #0
 8009a88:	4801      	ldr	r0, [pc, #4]	; (8009a90 <cppLoop+0x1b68>)
 8009a8a:	f7f8 fc9f 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 8009a8e:	e1ff      	b.n	8009e90 <cppLoop+0x1f68>
 8009a90:	200005d0 	.word	0x200005d0
 8009a94:	0801a34c 	.word	0x0801a34c
 8009a98:	0801a350 	.word	0x0801a350
 8009a9c:	200005c4 	.word	0x200005c4
 8009aa0:	3ea3d70a 	.word	0x3ea3d70a
 8009aa4:	2001db60 	.word	0x2001db60
 8009aa8:	0801a358 	.word	0x0801a358
 8009aac:	0801a35c 	.word	0x0801a35c
 8009ab0:	200005f4 	.word	0x200005f4
 8009ab4:	2001dae0 	.word	0x2001dae0
 8009ab8:	00000000 	.word	0x00000000
 8009abc:	0801a368 	.word	0x0801a368
 8009ac0:	0801a374 	.word	0x0801a374
 8009ac4:	0801a380 	.word	0x0801a380
 8009ac8:	20042424 	.word	0x20042424
 8009acc:	0801a224 	.word	0x0801a224
 8009ad0:	2001db64 	.word	0x2001db64
 8009ad4:	20042434 	.word	0x20042434
 8009ad8:	0801a38c 	.word	0x0801a38c
 8009adc:	2004241c 	.word	0x2004241c
 8009ae0:	2004242c 	.word	0x2004242c

	case 15:
		led.fullColor('W');
 8009ae4:	2157      	movs	r1, #87	; 0x57
 8009ae6:	48ac      	ldr	r0, [pc, #688]	; (8009d98 <cppLoop+0x1e70>)
 8009ae8:	f7f8 fbb4 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009aec:	f7f7 fad8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009af0:	2100      	movs	r1, #0
 8009af2:	2000      	movs	r0, #0
 8009af4:	f7f7 fae4 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast%4.2lf", abs(line_trace.getKp()*1000));
 8009af8:	48a8      	ldr	r0, [pc, #672]	; (8009d9c <cppLoop+0x1e74>)
 8009afa:	f7fa f9e4 	bl	8003ec6 <_ZN9LineTrace5getKpEv>
 8009afe:	eeb0 7a40 	vmov.f32	s14, s0
 8009b02:	eddf 7aa7 	vldr	s15, [pc, #668]	; 8009da0 <cppLoop+0x1e78>
 8009b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8009b0e:	f7f8 ffe0 	bl	8002ad2 <_ZSt3absf>
 8009b12:	ee10 3a10 	vmov	r3, s0
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7f6 fd2e 	bl	8000578 <__aeabi_f2d>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	460c      	mov	r4, r1
 8009b20:	461a      	mov	r2, r3
 8009b22:	4623      	mov	r3, r4
 8009b24:	489f      	ldr	r0, [pc, #636]	; (8009da4 <cppLoop+0x1e7c>)
 8009b26:	f7f7 faf5 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009b2a:	2101      	movs	r1, #1
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	f7f7 fac7 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKi()*100), abs(line_trace.getKd()*10000));
 8009b32:	489a      	ldr	r0, [pc, #616]	; (8009d9c <cppLoop+0x1e74>)
 8009b34:	f7fa f9d6 	bl	8003ee4 <_ZN9LineTrace5getKiEv>
 8009b38:	eeb0 7a40 	vmov.f32	s14, s0
 8009b3c:	eddf 7a9a 	vldr	s15, [pc, #616]	; 8009da8 <cppLoop+0x1e80>
 8009b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b44:	eeb0 0a67 	vmov.f32	s0, s15
 8009b48:	f7f8 ffc3 	bl	8002ad2 <_ZSt3absf>
 8009b4c:	ee10 3a10 	vmov	r3, s0
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7f6 fd11 	bl	8000578 <__aeabi_f2d>
 8009b56:	4605      	mov	r5, r0
 8009b58:	460e      	mov	r6, r1
 8009b5a:	4890      	ldr	r0, [pc, #576]	; (8009d9c <cppLoop+0x1e74>)
 8009b5c:	f7fa f9d1 	bl	8003f02 <_ZN9LineTrace5getKdEv>
 8009b60:	eeb0 7a40 	vmov.f32	s14, s0
 8009b64:	eddf 7a91 	vldr	s15, [pc, #580]	; 8009dac <cppLoop+0x1e84>
 8009b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b6c:	eeb0 0a67 	vmov.f32	s0, s15
 8009b70:	f7f8 ffaf 	bl	8002ad2 <_ZSt3absf>
 8009b74:	ee10 3a10 	vmov	r3, s0
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7f6 fcfd 	bl	8000578 <__aeabi_f2d>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	460c      	mov	r4, r1
 8009b82:	e9cd 3400 	strd	r3, r4, [sp]
 8009b86:	462a      	mov	r2, r5
 8009b88:	4633      	mov	r3, r6
 8009b8a:	4889      	ldr	r0, [pc, #548]	; (8009db0 <cppLoop+0x1e88>)
 8009b8c:	f7f7 fac2 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8009b90:	4888      	ldr	r0, [pc, #544]	; (8009db4 <cppLoop+0x1e8c>)
 8009b92:	f7f8 fafb 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b08      	cmp	r3, #8
 8009b9a:	bf0c      	ite	eq
 8009b9c:	2301      	moveq	r3, #1
 8009b9e:	2300      	movne	r3, #0
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d021      	beq.n	8009bea <cppLoop+0x1cc2>
			led.LR(-1, 1);
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8009bac:	487a      	ldr	r0, [pc, #488]	; (8009d98 <cppLoop+0x1e70>)
 8009bae:	f7f8 fc0d 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009bb2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009bb6:	f000 fa97 	bl	800a0e8 <HAL_Delay>

			selector++;
 8009bba:	4b7f      	ldr	r3, [pc, #508]	; (8009db8 <cppLoop+0x1e90>)
 8009bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	b21a      	sxth	r2, r3
 8009bc8:	4b7b      	ldr	r3, [pc, #492]	; (8009db8 <cppLoop+0x1e90>)
 8009bca:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8009bcc:	4b7a      	ldr	r3, [pc, #488]	; (8009db8 <cppLoop+0x1e90>)
 8009bce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	dd02      	ble.n	8009bdc <cppLoop+0x1cb4>
 8009bd6:	4b78      	ldr	r3, [pc, #480]	; (8009db8 <cppLoop+0x1e90>)
 8009bd8:	2200      	movs	r2, #0
 8009bda:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f04f 31ff 	mov.w	r1, #4294967295
 8009be2:	486d      	ldr	r0, [pc, #436]	; (8009d98 <cppLoop+0x1e70>)
 8009be4:	f7f8 fbf2 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8009be8:	e154      	b.n	8009e94 <cppLoop+0x1f6c>
		else if(joy_stick.getValue() == JOY_R){
 8009bea:	4872      	ldr	r0, [pc, #456]	; (8009db4 <cppLoop+0x1e8c>)
 8009bec:	f7f8 face 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b10      	cmp	r3, #16
 8009bf4:	bf0c      	ite	eq
 8009bf6:	2301      	moveq	r3, #1
 8009bf8:	2300      	movne	r3, #0
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d058      	beq.n	8009cb2 <cppLoop+0x1d8a>
			led.LR(-1, 1);
 8009c00:	2201      	movs	r2, #1
 8009c02:	f04f 31ff 	mov.w	r1, #4294967295
 8009c06:	4864      	ldr	r0, [pc, #400]	; (8009d98 <cppLoop+0x1e70>)
 8009c08:	f7f8 fbe0 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009c0c:	2064      	movs	r0, #100	; 0x64
 8009c0e:	f000 fa6b 	bl	800a0e8 <HAL_Delay>
			if(selector == 0){
 8009c12:	4b69      	ldr	r3, [pc, #420]	; (8009db8 <cppLoop+0x1e90>)
 8009c14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d113      	bne.n	8009c44 <cppLoop+0x1d1c>
				adj_kp = adj_kp + 0.00001;
 8009c1c:	4b67      	ldr	r3, [pc, #412]	; (8009dbc <cppLoop+0x1e94>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7f6 fca9 	bl	8000578 <__aeabi_f2d>
 8009c26:	a356      	add	r3, pc, #344	; (adr r3, 8009d80 <cppLoop+0x1e58>)
 8009c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2c:	f7f6 fb46 	bl	80002bc <__adddf3>
 8009c30:	4603      	mov	r3, r0
 8009c32:	460c      	mov	r4, r1
 8009c34:	4618      	mov	r0, r3
 8009c36:	4621      	mov	r1, r4
 8009c38:	f7f6 ffee 	bl	8000c18 <__aeabi_d2f>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	4b5f      	ldr	r3, [pc, #380]	; (8009dbc <cppLoop+0x1e94>)
 8009c40:	601a      	str	r2, [r3, #0]
 8009c42:	e02b      	b.n	8009c9c <cppLoop+0x1d74>
			else if(selector == 1){
 8009c44:	4b5c      	ldr	r3, [pc, #368]	; (8009db8 <cppLoop+0x1e90>)
 8009c46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d113      	bne.n	8009c76 <cppLoop+0x1d4e>
				adj_ki = adj_ki + 0.0001;
 8009c4e:	4b5c      	ldr	r3, [pc, #368]	; (8009dc0 <cppLoop+0x1e98>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7f6 fc90 	bl	8000578 <__aeabi_f2d>
 8009c58:	a34b      	add	r3, pc, #300	; (adr r3, 8009d88 <cppLoop+0x1e60>)
 8009c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5e:	f7f6 fb2d 	bl	80002bc <__adddf3>
 8009c62:	4603      	mov	r3, r0
 8009c64:	460c      	mov	r4, r1
 8009c66:	4618      	mov	r0, r3
 8009c68:	4621      	mov	r1, r4
 8009c6a:	f7f6 ffd5 	bl	8000c18 <__aeabi_d2f>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	4b53      	ldr	r3, [pc, #332]	; (8009dc0 <cppLoop+0x1e98>)
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	e012      	b.n	8009c9c <cppLoop+0x1d74>
				adj_kd = adj_kd + 0.000001;
 8009c76:	4b53      	ldr	r3, [pc, #332]	; (8009dc4 <cppLoop+0x1e9c>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7f6 fc7c 	bl	8000578 <__aeabi_f2d>
 8009c80:	a343      	add	r3, pc, #268	; (adr r3, 8009d90 <cppLoop+0x1e68>)
 8009c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c86:	f7f6 fb19 	bl	80002bc <__adddf3>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	460c      	mov	r4, r1
 8009c8e:	4618      	mov	r0, r3
 8009c90:	4621      	mov	r1, r4
 8009c92:	f7f6 ffc1 	bl	8000c18 <__aeabi_d2f>
 8009c96:	4602      	mov	r2, r0
 8009c98:	4b4a      	ldr	r3, [pc, #296]	; (8009dc4 <cppLoop+0x1e9c>)
 8009c9a:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009c9c:	2152      	movs	r1, #82	; 0x52
 8009c9e:	483e      	ldr	r0, [pc, #248]	; (8009d98 <cppLoop+0x1e70>)
 8009ca0:	f7f8 fad8 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f04f 31ff 	mov.w	r1, #4294967295
 8009caa:	483b      	ldr	r0, [pc, #236]	; (8009d98 <cppLoop+0x1e70>)
 8009cac:	f7f8 fb8e 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009cb0:	e0f0      	b.n	8009e94 <cppLoop+0x1f6c>
		else if(joy_stick.getValue() == JOY_L){
 8009cb2:	4840      	ldr	r0, [pc, #256]	; (8009db4 <cppLoop+0x1e8c>)
 8009cb4:	f7f8 fa6a 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	bf0c      	ite	eq
 8009cbe:	2301      	moveq	r3, #1
 8009cc0:	2300      	movne	r3, #0
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d07f      	beq.n	8009dc8 <cppLoop+0x1ea0>
			led.LR(-1, 1);
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f04f 31ff 	mov.w	r1, #4294967295
 8009cce:	4832      	ldr	r0, [pc, #200]	; (8009d98 <cppLoop+0x1e70>)
 8009cd0:	f7f8 fb7c 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009cd4:	2064      	movs	r0, #100	; 0x64
 8009cd6:	f000 fa07 	bl	800a0e8 <HAL_Delay>
			if(selector == 0){
 8009cda:	4b37      	ldr	r3, [pc, #220]	; (8009db8 <cppLoop+0x1e90>)
 8009cdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d113      	bne.n	8009d0c <cppLoop+0x1de4>
				adj_kp = adj_kp - 0.00001;
 8009ce4:	4b35      	ldr	r3, [pc, #212]	; (8009dbc <cppLoop+0x1e94>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7f6 fc45 	bl	8000578 <__aeabi_f2d>
 8009cee:	a324      	add	r3, pc, #144	; (adr r3, 8009d80 <cppLoop+0x1e58>)
 8009cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf4:	f7f6 fae0 	bl	80002b8 <__aeabi_dsub>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	460c      	mov	r4, r1
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	4621      	mov	r1, r4
 8009d00:	f7f6 ff8a 	bl	8000c18 <__aeabi_d2f>
 8009d04:	4602      	mov	r2, r0
 8009d06:	4b2d      	ldr	r3, [pc, #180]	; (8009dbc <cppLoop+0x1e94>)
 8009d08:	601a      	str	r2, [r3, #0]
 8009d0a:	e02b      	b.n	8009d64 <cppLoop+0x1e3c>
			else if(selector == 1){
 8009d0c:	4b2a      	ldr	r3, [pc, #168]	; (8009db8 <cppLoop+0x1e90>)
 8009d0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d113      	bne.n	8009d3e <cppLoop+0x1e16>
				adj_ki = adj_ki - 0.0001;
 8009d16:	4b2a      	ldr	r3, [pc, #168]	; (8009dc0 <cppLoop+0x1e98>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7f6 fc2c 	bl	8000578 <__aeabi_f2d>
 8009d20:	a319      	add	r3, pc, #100	; (adr r3, 8009d88 <cppLoop+0x1e60>)
 8009d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d26:	f7f6 fac7 	bl	80002b8 <__aeabi_dsub>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	460c      	mov	r4, r1
 8009d2e:	4618      	mov	r0, r3
 8009d30:	4621      	mov	r1, r4
 8009d32:	f7f6 ff71 	bl	8000c18 <__aeabi_d2f>
 8009d36:	4602      	mov	r2, r0
 8009d38:	4b21      	ldr	r3, [pc, #132]	; (8009dc0 <cppLoop+0x1e98>)
 8009d3a:	601a      	str	r2, [r3, #0]
 8009d3c:	e012      	b.n	8009d64 <cppLoop+0x1e3c>
				adj_kd = adj_kd - 0.000001;
 8009d3e:	4b21      	ldr	r3, [pc, #132]	; (8009dc4 <cppLoop+0x1e9c>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7f6 fc18 	bl	8000578 <__aeabi_f2d>
 8009d48:	a311      	add	r3, pc, #68	; (adr r3, 8009d90 <cppLoop+0x1e68>)
 8009d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4e:	f7f6 fab3 	bl	80002b8 <__aeabi_dsub>
 8009d52:	4603      	mov	r3, r0
 8009d54:	460c      	mov	r4, r1
 8009d56:	4618      	mov	r0, r3
 8009d58:	4621      	mov	r1, r4
 8009d5a:	f7f6 ff5d 	bl	8000c18 <__aeabi_d2f>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	4b18      	ldr	r3, [pc, #96]	; (8009dc4 <cppLoop+0x1e9c>)
 8009d62:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009d64:	2152      	movs	r1, #82	; 0x52
 8009d66:	480c      	ldr	r0, [pc, #48]	; (8009d98 <cppLoop+0x1e70>)
 8009d68:	f7f8 fa74 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f04f 31ff 	mov.w	r1, #4294967295
 8009d72:	4809      	ldr	r0, [pc, #36]	; (8009d98 <cppLoop+0x1e70>)
 8009d74:	f7f8 fb2a 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009d78:	e08c      	b.n	8009e94 <cppLoop+0x1f6c>
 8009d7a:	bf00      	nop
 8009d7c:	f3af 8000 	nop.w
 8009d80:	88e368f1 	.word	0x88e368f1
 8009d84:	3ee4f8b5 	.word	0x3ee4f8b5
 8009d88:	eb1c432d 	.word	0xeb1c432d
 8009d8c:	3f1a36e2 	.word	0x3f1a36e2
 8009d90:	a0b5ed8d 	.word	0xa0b5ed8d
 8009d94:	3eb0c6f7 	.word	0x3eb0c6f7
 8009d98:	200005d0 	.word	0x200005d0
 8009d9c:	2001db64 	.word	0x2001db64
 8009da0:	447a0000 	.word	0x447a0000
 8009da4:	0801a398 	.word	0x0801a398
 8009da8:	42c80000 	.word	0x42c80000
 8009dac:	461c4000 	.word	0x461c4000
 8009db0:	0801a1dc 	.word	0x0801a1dc
 8009db4:	200005c4 	.word	0x200005c4
 8009db8:	200423da 	.word	0x200423da
 8009dbc:	200423e4 	.word	0x200423e4
 8009dc0:	200423ec 	.word	0x200423ec
 8009dc4:	200423f4 	.word	0x200423f4
		else if(joy_stick.getValue() == JOY_C){
 8009dc8:	4836      	ldr	r0, [pc, #216]	; (8009ea4 <cppLoop+0x1f7c>)
 8009dca:	f7f8 f9df 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	bf0c      	ite	eq
 8009dd4:	2301      	moveq	r3, #1
 8009dd6:	2300      	movne	r3, #0
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d05a      	beq.n	8009e94 <cppLoop+0x1f6c>
			led.LR(-1, 1);
 8009dde:	2201      	movs	r2, #1
 8009de0:	f04f 31ff 	mov.w	r1, #4294967295
 8009de4:	4830      	ldr	r0, [pc, #192]	; (8009ea8 <cppLoop+0x1f80>)
 8009de6:	f7f8 faf1 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009dea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009dee:	f000 f97b 	bl	800a0e8 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8009df2:	2300      	movs	r3, #0
 8009df4:	9300      	str	r3, [sp, #0]
 8009df6:	4b2d      	ldr	r3, [pc, #180]	; (8009eac <cppLoop+0x1f84>)
 8009df8:	2201      	movs	r2, #1
 8009dfa:	492d      	ldr	r1, [pc, #180]	; (8009eb0 <cppLoop+0x1f88>)
 8009dfc:	482d      	ldr	r0, [pc, #180]	; (8009eb4 <cppLoop+0x1f8c>)
 8009dfe:	f7f7 fd3d 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8009e02:	2300      	movs	r3, #0
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	4b2c      	ldr	r3, [pc, #176]	; (8009eb8 <cppLoop+0x1f90>)
 8009e08:	2201      	movs	r2, #1
 8009e0a:	492c      	ldr	r1, [pc, #176]	; (8009ebc <cppLoop+0x1f94>)
 8009e0c:	4829      	ldr	r0, [pc, #164]	; (8009eb4 <cppLoop+0x1f8c>)
 8009e0e:	f7f7 fd35 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8009e12:	2300      	movs	r3, #0
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	4b2a      	ldr	r3, [pc, #168]	; (8009ec0 <cppLoop+0x1f98>)
 8009e18:	2201      	movs	r2, #1
 8009e1a:	492a      	ldr	r1, [pc, #168]	; (8009ec4 <cppLoop+0x1f9c>)
 8009e1c:	4825      	ldr	r0, [pc, #148]	; (8009eb4 <cppLoop+0x1f8c>)
 8009e1e:	f7f7 fd2d 	bl	800187c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8009e22:	4b22      	ldr	r3, [pc, #136]	; (8009eac <cppLoop+0x1f84>)
 8009e24:	edd3 7a00 	vldr	s15, [r3]
 8009e28:	4b23      	ldr	r3, [pc, #140]	; (8009eb8 <cppLoop+0x1f90>)
 8009e2a:	ed93 7a00 	vldr	s14, [r3]
 8009e2e:	4b24      	ldr	r3, [pc, #144]	; (8009ec0 <cppLoop+0x1f98>)
 8009e30:	edd3 6a00 	vldr	s13, [r3]
 8009e34:	eeb0 1a66 	vmov.f32	s2, s13
 8009e38:	eef0 0a47 	vmov.f32	s1, s14
 8009e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8009e40:	4821      	ldr	r0, [pc, #132]	; (8009ec8 <cppLoop+0x1fa0>)
 8009e42:	f7fa f827 	bl	8003e94 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8009e46:	2200      	movs	r2, #0
 8009e48:	f04f 31ff 	mov.w	r1, #4294967295
 8009e4c:	4816      	ldr	r0, [pc, #88]	; (8009ea8 <cppLoop+0x1f80>)
 8009e4e:	f7f8 fabd 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009e52:	e01f      	b.n	8009e94 <cppLoop+0x1f6c>

	default:
		break;
 8009e54:	bf00      	nop
 8009e56:	e01e      	b.n	8009e96 <cppLoop+0x1f6e>
		break;
 8009e58:	bf00      	nop
 8009e5a:	e01c      	b.n	8009e96 <cppLoop+0x1f6e>
		break;
 8009e5c:	bf00      	nop
 8009e5e:	e01a      	b.n	8009e96 <cppLoop+0x1f6e>
		break;
 8009e60:	bf00      	nop
 8009e62:	e018      	b.n	8009e96 <cppLoop+0x1f6e>
		break;
 8009e64:	bf00      	nop
 8009e66:	e016      	b.n	8009e96 <cppLoop+0x1f6e>
		break;
 8009e68:	bf00      	nop
 8009e6a:	e014      	b.n	8009e96 <cppLoop+0x1f6e>
		break;
 8009e6c:	bf00      	nop
 8009e6e:	e012      	b.n	8009e96 <cppLoop+0x1f6e>
		break;
 8009e70:	bf00      	nop
 8009e72:	e010      	b.n	8009e96 <cppLoop+0x1f6e>
		break;
 8009e74:	bf00      	nop
 8009e76:	e00e      	b.n	8009e96 <cppLoop+0x1f6e>
		break;
 8009e78:	bf00      	nop
 8009e7a:	e00c      	b.n	8009e96 <cppLoop+0x1f6e>
		break;
 8009e7c:	bf00      	nop
 8009e7e:	e00a      	b.n	8009e96 <cppLoop+0x1f6e>
		break;
 8009e80:	bf00      	nop
 8009e82:	e008      	b.n	8009e96 <cppLoop+0x1f6e>
		break;
 8009e84:	bf00      	nop
 8009e86:	e006      	b.n	8009e96 <cppLoop+0x1f6e>
		break;
 8009e88:	bf00      	nop
 8009e8a:	e004      	b.n	8009e96 <cppLoop+0x1f6e>
		break;
 8009e8c:	bf00      	nop
 8009e8e:	e002      	b.n	8009e96 <cppLoop+0x1f6e>
		break;
 8009e90:	bf00      	nop
 8009e92:	e000      	b.n	8009e96 <cppLoop+0x1f6e>
		break;
 8009e94:	bf00      	nop

	}

	HAL_Delay(30);
 8009e96:	201e      	movs	r0, #30
 8009e98:	f000 f926 	bl	800a0e8 <HAL_Delay>

}
 8009e9c:	bf00      	nop
 8009e9e:	370c      	adds	r7, #12
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ea4:	200005c4 	.word	0x200005c4
 8009ea8:	200005d0 	.word	0x200005d0
 8009eac:	200423e4 	.word	0x200423e4
 8009eb0:	0801a3a4 	.word	0x0801a3a4
 8009eb4:	0801a1f8 	.word	0x0801a1f8
 8009eb8:	200423ec 	.word	0x200423ec
 8009ebc:	0801a3ac 	.word	0x0801a3ac
 8009ec0:	200423f4 	.word	0x200423f4
 8009ec4:	0801a3b4 	.word	0x0801a3b4
 8009ec8:	2001db64 	.word	0x2001db64

08009ecc <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b088      	sub	sp, #32
 8009ed0:	af06      	add	r7, sp, #24
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d142      	bne.n	8009f62 <_Z41__static_initialization_and_destruction_0ii+0x96>
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d13d      	bne.n	8009f62 <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 8009ee6:	4821      	ldr	r0, [pc, #132]	; (8009f6c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009ee8:	f7f8 faa8 	bl	800243c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009eec:	4820      	ldr	r0, [pc, #128]	; (8009f70 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009eee:	f7fb fc5f 	bl	80057b0 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8009ef2:	4820      	ldr	r0, [pc, #128]	; (8009f74 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009ef4:	f7f8 f93e 	bl	8002174 <_ZN8JoyStickC1Ev>
Motor motor;
 8009ef8:	481f      	ldr	r0, [pc, #124]	; (8009f78 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009efa:	f7fb f86a 	bl	8004fd2 <_ZN5MotorC1Ev>
IMU imu;
 8009efe:	481f      	ldr	r0, [pc, #124]	; (8009f7c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009f00:	f7f7 ff34 	bl	8001d6c <_ZN3IMUC1Ev>
Logger logger;
 8009f04:	481e      	ldr	r0, [pc, #120]	; (8009f80 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009f06:	f7fa fdaf 	bl	8004a68 <_ZN6LoggerC1Ev>
Encoder encoder;
 8009f0a:	481e      	ldr	r0, [pc, #120]	; (8009f84 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009f0c:	f7f7 fa5e 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009f10:	4b1a      	ldr	r3, [pc, #104]	; (8009f7c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009f12:	4a1c      	ldr	r2, [pc, #112]	; (8009f84 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009f14:	4918      	ldr	r1, [pc, #96]	; (8009f78 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009f16:	481c      	ldr	r0, [pc, #112]	; (8009f88 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009f18:	f7fb ffe0 	bl	8005edc <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009f1c:	4b1a      	ldr	r3, [pc, #104]	; (8009f88 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009f1e:	4a17      	ldr	r2, [pc, #92]	; (8009f7c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009f20:	4918      	ldr	r1, [pc, #96]	; (8009f84 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009f22:	481a      	ldr	r0, [pc, #104]	; (8009f8c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009f24:	f7fb f954 	bl	80051d0 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 8009f28:	4819      	ldr	r0, [pc, #100]	; (8009f90 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009f2a:	f7f7 f953 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 8009f2e:	4b18      	ldr	r3, [pc, #96]	; (8009f90 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009f30:	9305      	str	r3, [sp, #20]
 8009f32:	4b12      	ldr	r3, [pc, #72]	; (8009f7c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009f34:	9304      	str	r3, [sp, #16]
 8009f36:	4b12      	ldr	r3, [pc, #72]	; (8009f80 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009f38:	9303      	str	r3, [sp, #12]
 8009f3a:	4b14      	ldr	r3, [pc, #80]	; (8009f8c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009f3c:	9302      	str	r3, [sp, #8]
 8009f3e:	4b11      	ldr	r3, [pc, #68]	; (8009f84 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009f40:	9301      	str	r3, [sp, #4]
 8009f42:	4b0b      	ldr	r3, [pc, #44]	; (8009f70 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	4b10      	ldr	r3, [pc, #64]	; (8009f88 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009f48:	4a08      	ldr	r2, [pc, #32]	; (8009f6c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009f4a:	490b      	ldr	r1, [pc, #44]	; (8009f78 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009f4c:	4811      	ldr	r0, [pc, #68]	; (8009f94 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009f4e:	f7f8 fdd0 	bl	8002af2 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 8009f52:	4a09      	ldr	r2, [pc, #36]	; (8009f78 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009f54:	490a      	ldr	r1, [pc, #40]	; (8009f80 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009f56:	4810      	ldr	r0, [pc, #64]	; (8009f98 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009f58:	f7fb fda6 	bl	8005aa8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8009f5c:	480f      	ldr	r0, [pc, #60]	; (8009f9c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009f5e:	f7fb fab9 	bl	80054d4 <_ZN13PathFollowingC1Ev>
}
 8009f62:	bf00      	nop
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	200002c0 	.word	0x200002c0
 8009f70:	200005b8 	.word	0x200005b8
 8009f74:	200005c4 	.word	0x200005c4
 8009f78:	200005cc 	.word	0x200005cc
 8009f7c:	200005e0 	.word	0x200005e0
 8009f80:	200005f4 	.word	0x200005f4
 8009f84:	2001dac0 	.word	0x2001dac0
 8009f88:	2001dae0 	.word	0x2001dae0
 8009f8c:	2001db20 	.word	0x2001db20
 8009f90:	2001db60 	.word	0x2001db60
 8009f94:	2001db64 	.word	0x2001db64
 8009f98:	2002aaa4 	.word	0x2002aaa4
 8009f9c:	2002acb0 	.word	0x2002acb0

08009fa0 <_GLOBAL__sub_I_line_sensor>:
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009fa8:	2001      	movs	r0, #1
 8009faa:	f7ff ff8f 	bl	8009ecc <_Z41__static_initialization_and_destruction_0ii>
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009fe8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009fb4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009fb6:	e003      	b.n	8009fc0 <LoopCopyDataInit>

08009fb8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009fb8:	4b0c      	ldr	r3, [pc, #48]	; (8009fec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009fba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009fbc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009fbe:	3104      	adds	r1, #4

08009fc0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009fc0:	480b      	ldr	r0, [pc, #44]	; (8009ff0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009fc2:	4b0c      	ldr	r3, [pc, #48]	; (8009ff4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009fc4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009fc6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009fc8:	d3f6      	bcc.n	8009fb8 <CopyDataInit>
  ldr  r2, =_sbss
 8009fca:	4a0b      	ldr	r2, [pc, #44]	; (8009ff8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009fcc:	e002      	b.n	8009fd4 <LoopFillZerobss>

08009fce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009fce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009fd0:	f842 3b04 	str.w	r3, [r2], #4

08009fd4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009fd4:	4b09      	ldr	r3, [pc, #36]	; (8009ffc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009fd6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009fd8:	d3f9      	bcc.n	8009fce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009fda:	f7fd fe83 	bl	8007ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009fde:	f00b fdd3 	bl	8015b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009fe2:	f7fc f9bd 	bl	8006360 <main>
  bx  lr    
 8009fe6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009fe8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009fec:	0801a9a8 	.word	0x0801a9a8
  ldr  r0, =_sdata
 8009ff0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009ff4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009ff8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009ffc:	20046e38 	.word	0x20046e38

0800a000 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a000:	e7fe      	b.n	800a000 <ADC_IRQHandler>
	...

0800a004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a008:	4b0e      	ldr	r3, [pc, #56]	; (800a044 <HAL_Init+0x40>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a0d      	ldr	r2, [pc, #52]	; (800a044 <HAL_Init+0x40>)
 800a00e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a012:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a014:	4b0b      	ldr	r3, [pc, #44]	; (800a044 <HAL_Init+0x40>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a0a      	ldr	r2, [pc, #40]	; (800a044 <HAL_Init+0x40>)
 800a01a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a01e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a020:	4b08      	ldr	r3, [pc, #32]	; (800a044 <HAL_Init+0x40>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a07      	ldr	r2, [pc, #28]	; (800a044 <HAL_Init+0x40>)
 800a026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a02a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a02c:	2003      	movs	r0, #3
 800a02e:	f000 fd51 	bl	800aad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a032:	2000      	movs	r0, #0
 800a034:	f000 f808 	bl	800a048 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a038:	f7fd f8a4 	bl	8007184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	40023c00 	.word	0x40023c00

0800a048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a050:	4b12      	ldr	r3, [pc, #72]	; (800a09c <HAL_InitTick+0x54>)
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	4b12      	ldr	r3, [pc, #72]	; (800a0a0 <HAL_InitTick+0x58>)
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	4619      	mov	r1, r3
 800a05a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a05e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a062:	fbb2 f3f3 	udiv	r3, r2, r3
 800a066:	4618      	mov	r0, r3
 800a068:	f000 fd69 	bl	800ab3e <HAL_SYSTICK_Config>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d001      	beq.n	800a076 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e00e      	b.n	800a094 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2b0f      	cmp	r3, #15
 800a07a:	d80a      	bhi.n	800a092 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a07c:	2200      	movs	r2, #0
 800a07e:	6879      	ldr	r1, [r7, #4]
 800a080:	f04f 30ff 	mov.w	r0, #4294967295
 800a084:	f000 fd31 	bl	800aaea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a088:	4a06      	ldr	r2, [pc, #24]	; (800a0a4 <HAL_InitTick+0x5c>)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a08e:	2300      	movs	r3, #0
 800a090:	e000      	b.n	800a094 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a092:	2301      	movs	r3, #1
}
 800a094:	4618      	mov	r0, r3
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	20000000 	.word	0x20000000
 800a0a0:	20000008 	.word	0x20000008
 800a0a4:	20000004 	.word	0x20000004

0800a0a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a0ac:	4b06      	ldr	r3, [pc, #24]	; (800a0c8 <HAL_IncTick+0x20>)
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	4b06      	ldr	r3, [pc, #24]	; (800a0cc <HAL_IncTick+0x24>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	4a04      	ldr	r2, [pc, #16]	; (800a0cc <HAL_IncTick+0x24>)
 800a0ba:	6013      	str	r3, [r2, #0]
}
 800a0bc:	bf00      	nop
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	20000008 	.word	0x20000008
 800a0cc:	20044dc0 	.word	0x20044dc0

0800a0d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	af00      	add	r7, sp, #0
  return uwTick;
 800a0d4:	4b03      	ldr	r3, [pc, #12]	; (800a0e4 <HAL_GetTick+0x14>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop
 800a0e4:	20044dc0 	.word	0x20044dc0

0800a0e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a0f0:	f7ff ffee 	bl	800a0d0 <HAL_GetTick>
 800a0f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a100:	d005      	beq.n	800a10e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a102:	4b09      	ldr	r3, [pc, #36]	; (800a128 <HAL_Delay+0x40>)
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	461a      	mov	r2, r3
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	4413      	add	r3, r2
 800a10c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a10e:	bf00      	nop
 800a110:	f7ff ffde 	bl	800a0d0 <HAL_GetTick>
 800a114:	4602      	mov	r2, r0
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d8f7      	bhi.n	800a110 <HAL_Delay+0x28>
  {
  }
}
 800a120:	bf00      	nop
 800a122:	3710      	adds	r7, #16
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	20000008 	.word	0x20000008

0800a12c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a134:	2300      	movs	r3, #0
 800a136:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d101      	bne.n	800a142 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e033      	b.n	800a1aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a146:	2b00      	cmp	r3, #0
 800a148:	d109      	bne.n	800a15e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f7fd f842 	bl	80071d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a162:	f003 0310 	and.w	r3, r3, #16
 800a166:	2b00      	cmp	r3, #0
 800a168:	d118      	bne.n	800a19c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a16e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800a172:	f023 0302 	bic.w	r3, r3, #2
 800a176:	f043 0202 	orr.w	r2, r3, #2
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 fa5a 	bl	800a638 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18e:	f023 0303 	bic.w	r3, r3, #3
 800a192:	f043 0201 	orr.w	r2, r3, #1
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	641a      	str	r2, [r3, #64]	; 0x40
 800a19a:	e001      	b.n	800a1a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800a1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3710      	adds	r7, #16
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
	...

0800a1b4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b086      	sub	sp, #24
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d101      	bne.n	800a1d2 <HAL_ADC_Start_DMA+0x1e>
 800a1ce:	2302      	movs	r3, #2
 800a1d0:	e0cc      	b.n	800a36c <HAL_ADC_Start_DMA+0x1b8>
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	f003 0301 	and.w	r3, r3, #1
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d018      	beq.n	800a21a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	689a      	ldr	r2, [r3, #8]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f042 0201 	orr.w	r2, r2, #1
 800a1f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800a1f8:	4b5e      	ldr	r3, [pc, #376]	; (800a374 <HAL_ADC_Start_DMA+0x1c0>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a5e      	ldr	r2, [pc, #376]	; (800a378 <HAL_ADC_Start_DMA+0x1c4>)
 800a1fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a202:	0c9a      	lsrs	r2, r3, #18
 800a204:	4613      	mov	r3, r2
 800a206:	005b      	lsls	r3, r3, #1
 800a208:	4413      	add	r3, r2
 800a20a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a20c:	e002      	b.n	800a214 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	3b01      	subs	r3, #1
 800a212:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1f9      	bne.n	800a20e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	f003 0301 	and.w	r3, r3, #1
 800a224:	2b01      	cmp	r3, #1
 800a226:	f040 80a0 	bne.w	800a36a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a232:	f023 0301 	bic.w	r3, r3, #1
 800a236:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d007      	beq.n	800a25c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a250:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a254:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a268:	d106      	bne.n	800a278 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a26e:	f023 0206 	bic.w	r2, r3, #6
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	645a      	str	r2, [r3, #68]	; 0x44
 800a276:	e002      	b.n	800a27e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2200      	movs	r2, #0
 800a27c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a286:	4b3d      	ldr	r3, [pc, #244]	; (800a37c <HAL_ADC_Start_DMA+0x1c8>)
 800a288:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a28e:	4a3c      	ldr	r2, [pc, #240]	; (800a380 <HAL_ADC_Start_DMA+0x1cc>)
 800a290:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a296:	4a3b      	ldr	r2, [pc, #236]	; (800a384 <HAL_ADC_Start_DMA+0x1d0>)
 800a298:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a29e:	4a3a      	ldr	r2, [pc, #232]	; (800a388 <HAL_ADC_Start_DMA+0x1d4>)
 800a2a0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800a2aa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	685a      	ldr	r2, [r3, #4]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a2ba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	689a      	ldr	r2, [r3, #8]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2ca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	334c      	adds	r3, #76	; 0x4c
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	68ba      	ldr	r2, [r7, #8]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f000 fcea 	bl	800acb4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	f003 031f 	and.w	r3, r3, #31
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d12a      	bne.n	800a342 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a26      	ldr	r2, [pc, #152]	; (800a38c <HAL_ADC_Start_DMA+0x1d8>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d015      	beq.n	800a322 <HAL_ADC_Start_DMA+0x16e>
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a25      	ldr	r2, [pc, #148]	; (800a390 <HAL_ADC_Start_DMA+0x1dc>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d105      	bne.n	800a30c <HAL_ADC_Start_DMA+0x158>
 800a300:	4b1e      	ldr	r3, [pc, #120]	; (800a37c <HAL_ADC_Start_DMA+0x1c8>)
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	f003 031f 	and.w	r3, r3, #31
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d00a      	beq.n	800a322 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a20      	ldr	r2, [pc, #128]	; (800a394 <HAL_ADC_Start_DMA+0x1e0>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d129      	bne.n	800a36a <HAL_ADC_Start_DMA+0x1b6>
 800a316:	4b19      	ldr	r3, [pc, #100]	; (800a37c <HAL_ADC_Start_DMA+0x1c8>)
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	f003 031f 	and.w	r3, r3, #31
 800a31e:	2b0f      	cmp	r3, #15
 800a320:	d823      	bhi.n	800a36a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d11c      	bne.n	800a36a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	689a      	ldr	r2, [r3, #8]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a33e:	609a      	str	r2, [r3, #8]
 800a340:	e013      	b.n	800a36a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a11      	ldr	r2, [pc, #68]	; (800a38c <HAL_ADC_Start_DMA+0x1d8>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d10e      	bne.n	800a36a <HAL_ADC_Start_DMA+0x1b6>
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a356:	2b00      	cmp	r3, #0
 800a358:	d107      	bne.n	800a36a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	689a      	ldr	r2, [r3, #8]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a368:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3718      	adds	r7, #24
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}
 800a374:	20000000 	.word	0x20000000
 800a378:	431bde83 	.word	0x431bde83
 800a37c:	40012300 	.word	0x40012300
 800a380:	0800a831 	.word	0x0800a831
 800a384:	0800a8eb 	.word	0x0800a8eb
 800a388:	0800a907 	.word	0x0800a907
 800a38c:	40012000 	.word	0x40012000
 800a390:	40012100 	.word	0x40012100
 800a394:	40012200 	.word	0x40012200

0800a398 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800a3a0:	bf00      	nop
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800a3b4:	bf00      	nop
 800a3b6:	370c      	adds	r7, #12
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800a3c8:	bf00      	nop
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d101      	bne.n	800a3f0 <HAL_ADC_ConfigChannel+0x1c>
 800a3ec:	2302      	movs	r3, #2
 800a3ee:	e113      	b.n	800a618 <HAL_ADC_ConfigChannel+0x244>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b09      	cmp	r3, #9
 800a3fe:	d925      	bls.n	800a44c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	68d9      	ldr	r1, [r3, #12]
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	461a      	mov	r2, r3
 800a40e:	4613      	mov	r3, r2
 800a410:	005b      	lsls	r3, r3, #1
 800a412:	4413      	add	r3, r2
 800a414:	3b1e      	subs	r3, #30
 800a416:	2207      	movs	r2, #7
 800a418:	fa02 f303 	lsl.w	r3, r2, r3
 800a41c:	43da      	mvns	r2, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	400a      	ands	r2, r1
 800a424:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	68d9      	ldr	r1, [r3, #12]
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	689a      	ldr	r2, [r3, #8]
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	b29b      	uxth	r3, r3
 800a436:	4618      	mov	r0, r3
 800a438:	4603      	mov	r3, r0
 800a43a:	005b      	lsls	r3, r3, #1
 800a43c:	4403      	add	r3, r0
 800a43e:	3b1e      	subs	r3, #30
 800a440:	409a      	lsls	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	430a      	orrs	r2, r1
 800a448:	60da      	str	r2, [r3, #12]
 800a44a:	e022      	b.n	800a492 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	6919      	ldr	r1, [r3, #16]
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	b29b      	uxth	r3, r3
 800a458:	461a      	mov	r2, r3
 800a45a:	4613      	mov	r3, r2
 800a45c:	005b      	lsls	r3, r3, #1
 800a45e:	4413      	add	r3, r2
 800a460:	2207      	movs	r2, #7
 800a462:	fa02 f303 	lsl.w	r3, r2, r3
 800a466:	43da      	mvns	r2, r3
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	400a      	ands	r2, r1
 800a46e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	6919      	ldr	r1, [r3, #16]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	689a      	ldr	r2, [r3, #8]
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	b29b      	uxth	r3, r3
 800a480:	4618      	mov	r0, r3
 800a482:	4603      	mov	r3, r0
 800a484:	005b      	lsls	r3, r3, #1
 800a486:	4403      	add	r3, r0
 800a488:	409a      	lsls	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	430a      	orrs	r2, r1
 800a490:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	2b06      	cmp	r3, #6
 800a498:	d824      	bhi.n	800a4e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	685a      	ldr	r2, [r3, #4]
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	4413      	add	r3, r2
 800a4aa:	3b05      	subs	r3, #5
 800a4ac:	221f      	movs	r2, #31
 800a4ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a4b2:	43da      	mvns	r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	400a      	ands	r2, r1
 800a4ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	685a      	ldr	r2, [r3, #4]
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	4413      	add	r3, r2
 800a4d4:	3b05      	subs	r3, #5
 800a4d6:	fa00 f203 	lsl.w	r2, r0, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	430a      	orrs	r2, r1
 800a4e0:	635a      	str	r2, [r3, #52]	; 0x34
 800a4e2:	e04c      	b.n	800a57e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	2b0c      	cmp	r3, #12
 800a4ea:	d824      	bhi.n	800a536 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	685a      	ldr	r2, [r3, #4]
 800a4f6:	4613      	mov	r3, r2
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	4413      	add	r3, r2
 800a4fc:	3b23      	subs	r3, #35	; 0x23
 800a4fe:	221f      	movs	r2, #31
 800a500:	fa02 f303 	lsl.w	r3, r2, r3
 800a504:	43da      	mvns	r2, r3
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	400a      	ands	r2, r1
 800a50c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	b29b      	uxth	r3, r3
 800a51a:	4618      	mov	r0, r3
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	685a      	ldr	r2, [r3, #4]
 800a520:	4613      	mov	r3, r2
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	4413      	add	r3, r2
 800a526:	3b23      	subs	r3, #35	; 0x23
 800a528:	fa00 f203 	lsl.w	r2, r0, r3
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	430a      	orrs	r2, r1
 800a532:	631a      	str	r2, [r3, #48]	; 0x30
 800a534:	e023      	b.n	800a57e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	685a      	ldr	r2, [r3, #4]
 800a540:	4613      	mov	r3, r2
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	4413      	add	r3, r2
 800a546:	3b41      	subs	r3, #65	; 0x41
 800a548:	221f      	movs	r2, #31
 800a54a:	fa02 f303 	lsl.w	r3, r2, r3
 800a54e:	43da      	mvns	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	400a      	ands	r2, r1
 800a556:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	b29b      	uxth	r3, r3
 800a564:	4618      	mov	r0, r3
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	685a      	ldr	r2, [r3, #4]
 800a56a:	4613      	mov	r3, r2
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	4413      	add	r3, r2
 800a570:	3b41      	subs	r3, #65	; 0x41
 800a572:	fa00 f203 	lsl.w	r2, r0, r3
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	430a      	orrs	r2, r1
 800a57c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a57e:	4b29      	ldr	r3, [pc, #164]	; (800a624 <HAL_ADC_ConfigChannel+0x250>)
 800a580:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a28      	ldr	r2, [pc, #160]	; (800a628 <HAL_ADC_ConfigChannel+0x254>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d10f      	bne.n	800a5ac <HAL_ADC_ConfigChannel+0x1d8>
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2b12      	cmp	r3, #18
 800a592:	d10b      	bne.n	800a5ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a1d      	ldr	r2, [pc, #116]	; (800a628 <HAL_ADC_ConfigChannel+0x254>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d12b      	bne.n	800a60e <HAL_ADC_ConfigChannel+0x23a>
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a1c      	ldr	r2, [pc, #112]	; (800a62c <HAL_ADC_ConfigChannel+0x258>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d003      	beq.n	800a5c8 <HAL_ADC_ConfigChannel+0x1f4>
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2b11      	cmp	r3, #17
 800a5c6:	d122      	bne.n	800a60e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a11      	ldr	r2, [pc, #68]	; (800a62c <HAL_ADC_ConfigChannel+0x258>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d111      	bne.n	800a60e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a5ea:	4b11      	ldr	r3, [pc, #68]	; (800a630 <HAL_ADC_ConfigChannel+0x25c>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a11      	ldr	r2, [pc, #68]	; (800a634 <HAL_ADC_ConfigChannel+0x260>)
 800a5f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a5f4:	0c9a      	lsrs	r2, r3, #18
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	4413      	add	r3, r2
 800a5fc:	005b      	lsls	r3, r3, #1
 800a5fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a600:	e002      	b.n	800a608 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	3b01      	subs	r3, #1
 800a606:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1f9      	bne.n	800a602 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2200      	movs	r2, #0
 800a612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a616:	2300      	movs	r3, #0
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3714      	adds	r7, #20
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr
 800a624:	40012300 	.word	0x40012300
 800a628:	40012000 	.word	0x40012000
 800a62c:	10000012 	.word	0x10000012
 800a630:	20000000 	.word	0x20000000
 800a634:	431bde83 	.word	0x431bde83

0800a638 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a638:	b480      	push	{r7}
 800a63a:	b085      	sub	sp, #20
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a640:	4b79      	ldr	r3, [pc, #484]	; (800a828 <ADC_Init+0x1f0>)
 800a642:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	685a      	ldr	r2, [r3, #4]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	431a      	orrs	r2, r3
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	685a      	ldr	r2, [r3, #4]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a66c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	6859      	ldr	r1, [r3, #4]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	691b      	ldr	r3, [r3, #16]
 800a678:	021a      	lsls	r2, r3, #8
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	430a      	orrs	r2, r1
 800a680:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	685a      	ldr	r2, [r3, #4]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a690:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	6859      	ldr	r1, [r3, #4]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	689a      	ldr	r2, [r3, #8]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	430a      	orrs	r2, r1
 800a6a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	689a      	ldr	r2, [r3, #8]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a6b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	6899      	ldr	r1, [r3, #8]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	68da      	ldr	r2, [r3, #12]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	430a      	orrs	r2, r1
 800a6c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ca:	4a58      	ldr	r2, [pc, #352]	; (800a82c <ADC_Init+0x1f4>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d022      	beq.n	800a716 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	689a      	ldr	r2, [r3, #8]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a6de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	6899      	ldr	r1, [r3, #8]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	430a      	orrs	r2, r1
 800a6f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	689a      	ldr	r2, [r3, #8]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a700:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	6899      	ldr	r1, [r3, #8]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	430a      	orrs	r2, r1
 800a712:	609a      	str	r2, [r3, #8]
 800a714:	e00f      	b.n	800a736 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	689a      	ldr	r2, [r3, #8]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a724:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	689a      	ldr	r2, [r3, #8]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a734:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	689a      	ldr	r2, [r3, #8]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f022 0202 	bic.w	r2, r2, #2
 800a744:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	6899      	ldr	r1, [r3, #8]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	7e1b      	ldrb	r3, [r3, #24]
 800a750:	005a      	lsls	r2, r3, #1
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	430a      	orrs	r2, r1
 800a758:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d01b      	beq.n	800a79c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	685a      	ldr	r2, [r3, #4]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a772:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	685a      	ldr	r2, [r3, #4]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a782:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	6859      	ldr	r1, [r3, #4]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78e:	3b01      	subs	r3, #1
 800a790:	035a      	lsls	r2, r3, #13
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	430a      	orrs	r2, r1
 800a798:	605a      	str	r2, [r3, #4]
 800a79a:	e007      	b.n	800a7ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	685a      	ldr	r2, [r3, #4]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a7aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a7ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	69db      	ldr	r3, [r3, #28]
 800a7c6:	3b01      	subs	r3, #1
 800a7c8:	051a      	lsls	r2, r3, #20
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	430a      	orrs	r2, r1
 800a7d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	689a      	ldr	r2, [r3, #8]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a7e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	6899      	ldr	r1, [r3, #8]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a7ee:	025a      	lsls	r2, r3, #9
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	430a      	orrs	r2, r1
 800a7f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	689a      	ldr	r2, [r3, #8]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a806:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	6899      	ldr	r1, [r3, #8]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	695b      	ldr	r3, [r3, #20]
 800a812:	029a      	lsls	r2, r3, #10
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	430a      	orrs	r2, r1
 800a81a:	609a      	str	r2, [r3, #8]
}
 800a81c:	bf00      	nop
 800a81e:	3714      	adds	r7, #20
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr
 800a828:	40012300 	.word	0x40012300
 800a82c:	0f000001 	.word	0x0f000001

0800a830 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a83c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a842:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a846:	2b00      	cmp	r3, #0
 800a848:	d13c      	bne.n	800a8c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a860:	2b00      	cmp	r3, #0
 800a862:	d12b      	bne.n	800a8bc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d127      	bne.n	800a8bc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a872:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a876:	2b00      	cmp	r3, #0
 800a878:	d006      	beq.n	800a888 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a884:	2b00      	cmp	r3, #0
 800a886:	d119      	bne.n	800a8bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	685a      	ldr	r2, [r3, #4]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f022 0220 	bic.w	r2, r2, #32
 800a896:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a89c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d105      	bne.n	800a8bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b4:	f043 0201 	orr.w	r2, r3, #1
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a8bc:	68f8      	ldr	r0, [r7, #12]
 800a8be:	f7ff fd6b 	bl	800a398 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a8c2:	e00e      	b.n	800a8e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c8:	f003 0310 	and.w	r3, r3, #16
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d003      	beq.n	800a8d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f7ff fd75 	bl	800a3c0 <HAL_ADC_ErrorCallback>
}
 800a8d6:	e004      	b.n	800a8e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	4798      	blx	r3
}
 800a8e2:	bf00      	nop
 800a8e4:	3710      	adds	r7, #16
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}

0800a8ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b084      	sub	sp, #16
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f7ff fd57 	bl	800a3ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a8fe:	bf00      	nop
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b084      	sub	sp, #16
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a912:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2240      	movs	r2, #64	; 0x40
 800a918:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a91e:	f043 0204 	orr.w	r2, r3, #4
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a926:	68f8      	ldr	r0, [r7, #12]
 800a928:	f7ff fd4a 	bl	800a3c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a92c:	bf00      	nop
 800a92e:	3710      	adds	r7, #16
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a934:	b480      	push	{r7}
 800a936:	b085      	sub	sp, #20
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f003 0307 	and.w	r3, r3, #7
 800a942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a944:	4b0c      	ldr	r3, [pc, #48]	; (800a978 <__NVIC_SetPriorityGrouping+0x44>)
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a94a:	68ba      	ldr	r2, [r7, #8]
 800a94c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a950:	4013      	ands	r3, r2
 800a952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a95c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a966:	4a04      	ldr	r2, [pc, #16]	; (800a978 <__NVIC_SetPriorityGrouping+0x44>)
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	60d3      	str	r3, [r2, #12]
}
 800a96c:	bf00      	nop
 800a96e:	3714      	adds	r7, #20
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr
 800a978:	e000ed00 	.word	0xe000ed00

0800a97c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a97c:	b480      	push	{r7}
 800a97e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a980:	4b04      	ldr	r3, [pc, #16]	; (800a994 <__NVIC_GetPriorityGrouping+0x18>)
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	0a1b      	lsrs	r3, r3, #8
 800a986:	f003 0307 	and.w	r3, r3, #7
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr
 800a994:	e000ed00 	.word	0xe000ed00

0800a998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	4603      	mov	r3, r0
 800a9a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a9a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	db0b      	blt.n	800a9c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a9aa:	79fb      	ldrb	r3, [r7, #7]
 800a9ac:	f003 021f 	and.w	r2, r3, #31
 800a9b0:	4907      	ldr	r1, [pc, #28]	; (800a9d0 <__NVIC_EnableIRQ+0x38>)
 800a9b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a9b6:	095b      	lsrs	r3, r3, #5
 800a9b8:	2001      	movs	r0, #1
 800a9ba:	fa00 f202 	lsl.w	r2, r0, r2
 800a9be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a9c2:	bf00      	nop
 800a9c4:	370c      	adds	r7, #12
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop
 800a9d0:	e000e100 	.word	0xe000e100

0800a9d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	4603      	mov	r3, r0
 800a9dc:	6039      	str	r1, [r7, #0]
 800a9de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a9e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	db0a      	blt.n	800a9fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	b2da      	uxtb	r2, r3
 800a9ec:	490c      	ldr	r1, [pc, #48]	; (800aa20 <__NVIC_SetPriority+0x4c>)
 800a9ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a9f2:	0112      	lsls	r2, r2, #4
 800a9f4:	b2d2      	uxtb	r2, r2
 800a9f6:	440b      	add	r3, r1
 800a9f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a9fc:	e00a      	b.n	800aa14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	b2da      	uxtb	r2, r3
 800aa02:	4908      	ldr	r1, [pc, #32]	; (800aa24 <__NVIC_SetPriority+0x50>)
 800aa04:	79fb      	ldrb	r3, [r7, #7]
 800aa06:	f003 030f 	and.w	r3, r3, #15
 800aa0a:	3b04      	subs	r3, #4
 800aa0c:	0112      	lsls	r2, r2, #4
 800aa0e:	b2d2      	uxtb	r2, r2
 800aa10:	440b      	add	r3, r1
 800aa12:	761a      	strb	r2, [r3, #24]
}
 800aa14:	bf00      	nop
 800aa16:	370c      	adds	r7, #12
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr
 800aa20:	e000e100 	.word	0xe000e100
 800aa24:	e000ed00 	.word	0xe000ed00

0800aa28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b089      	sub	sp, #36	; 0x24
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f003 0307 	and.w	r3, r3, #7
 800aa3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	f1c3 0307 	rsb	r3, r3, #7
 800aa42:	2b04      	cmp	r3, #4
 800aa44:	bf28      	it	cs
 800aa46:	2304      	movcs	r3, #4
 800aa48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800aa4a:	69fb      	ldr	r3, [r7, #28]
 800aa4c:	3304      	adds	r3, #4
 800aa4e:	2b06      	cmp	r3, #6
 800aa50:	d902      	bls.n	800aa58 <NVIC_EncodePriority+0x30>
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	3b03      	subs	r3, #3
 800aa56:	e000      	b.n	800aa5a <NVIC_EncodePriority+0x32>
 800aa58:	2300      	movs	r3, #0
 800aa5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800aa5c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	fa02 f303 	lsl.w	r3, r2, r3
 800aa66:	43da      	mvns	r2, r3
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	401a      	ands	r2, r3
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800aa70:	f04f 31ff 	mov.w	r1, #4294967295
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	fa01 f303 	lsl.w	r3, r1, r3
 800aa7a:	43d9      	mvns	r1, r3
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800aa80:	4313      	orrs	r3, r2
         );
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3724      	adds	r7, #36	; 0x24
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
	...

0800aa90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aaa0:	d301      	bcc.n	800aaa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e00f      	b.n	800aac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800aaa6:	4a0a      	ldr	r2, [pc, #40]	; (800aad0 <SysTick_Config+0x40>)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800aaae:	210f      	movs	r1, #15
 800aab0:	f04f 30ff 	mov.w	r0, #4294967295
 800aab4:	f7ff ff8e 	bl	800a9d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800aab8:	4b05      	ldr	r3, [pc, #20]	; (800aad0 <SysTick_Config+0x40>)
 800aaba:	2200      	movs	r2, #0
 800aabc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800aabe:	4b04      	ldr	r3, [pc, #16]	; (800aad0 <SysTick_Config+0x40>)
 800aac0:	2207      	movs	r2, #7
 800aac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3708      	adds	r7, #8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	e000e010 	.word	0xe000e010

0800aad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f7ff ff29 	bl	800a934 <__NVIC_SetPriorityGrouping>
}
 800aae2:	bf00      	nop
 800aae4:	3708      	adds	r7, #8
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}

0800aaea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b086      	sub	sp, #24
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	60b9      	str	r1, [r7, #8]
 800aaf4:	607a      	str	r2, [r7, #4]
 800aaf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800aafc:	f7ff ff3e 	bl	800a97c <__NVIC_GetPriorityGrouping>
 800ab00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	68b9      	ldr	r1, [r7, #8]
 800ab06:	6978      	ldr	r0, [r7, #20]
 800ab08:	f7ff ff8e 	bl	800aa28 <NVIC_EncodePriority>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab12:	4611      	mov	r1, r2
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7ff ff5d 	bl	800a9d4 <__NVIC_SetPriority>
}
 800ab1a:	bf00      	nop
 800ab1c:	3718      	adds	r7, #24
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ab22:	b580      	push	{r7, lr}
 800ab24:	b082      	sub	sp, #8
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	4603      	mov	r3, r0
 800ab2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ab2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7ff ff31 	bl	800a998 <__NVIC_EnableIRQ>
}
 800ab36:	bf00      	nop
 800ab38:	3708      	adds	r7, #8
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b082      	sub	sp, #8
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f7ff ffa2 	bl	800aa90 <SysTick_Config>
 800ab4c:	4603      	mov	r3, r0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3708      	adds	r7, #8
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
	...

0800ab58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b086      	sub	sp, #24
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800ab60:	2300      	movs	r3, #0
 800ab62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800ab64:	f7ff fab4 	bl	800a0d0 <HAL_GetTick>
 800ab68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d101      	bne.n	800ab74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800ab70:	2301      	movs	r3, #1
 800ab72:	e099      	b.n	800aca8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2202      	movs	r2, #2
 800ab80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f022 0201 	bic.w	r2, r2, #1
 800ab92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ab94:	e00f      	b.n	800abb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ab96:	f7ff fa9b 	bl	800a0d0 <HAL_GetTick>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	1ad3      	subs	r3, r2, r3
 800aba0:	2b05      	cmp	r3, #5
 800aba2:	d908      	bls.n	800abb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2220      	movs	r2, #32
 800aba8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2203      	movs	r2, #3
 800abae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800abb2:	2303      	movs	r3, #3
 800abb4:	e078      	b.n	800aca8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f003 0301 	and.w	r3, r3, #1
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d1e8      	bne.n	800ab96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800abcc:	697a      	ldr	r2, [r7, #20]
 800abce:	4b38      	ldr	r3, [pc, #224]	; (800acb0 <HAL_DMA_Init+0x158>)
 800abd0:	4013      	ands	r3, r2
 800abd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	685a      	ldr	r2, [r3, #4]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800abe2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800abee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	699b      	ldr	r3, [r3, #24]
 800abf4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800abfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6a1b      	ldr	r3, [r3, #32]
 800ac00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ac02:	697a      	ldr	r2, [r7, #20]
 800ac04:	4313      	orrs	r3, r2
 800ac06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0c:	2b04      	cmp	r3, #4
 800ac0e:	d107      	bne.n	800ac20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	697a      	ldr	r2, [r7, #20]
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	697a      	ldr	r2, [r7, #20]
 800ac26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	695b      	ldr	r3, [r3, #20]
 800ac2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	f023 0307 	bic.w	r3, r3, #7
 800ac36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac3c:	697a      	ldr	r2, [r7, #20]
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac46:	2b04      	cmp	r3, #4
 800ac48:	d117      	bne.n	800ac7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac4e:	697a      	ldr	r2, [r7, #20]
 800ac50:	4313      	orrs	r3, r2
 800ac52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d00e      	beq.n	800ac7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 fa9d 	bl	800b19c <DMA_CheckFifoParam>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d008      	beq.n	800ac7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2240      	movs	r2, #64	; 0x40
 800ac6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2201      	movs	r2, #1
 800ac72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800ac76:	2301      	movs	r3, #1
 800ac78:	e016      	b.n	800aca8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	697a      	ldr	r2, [r7, #20]
 800ac80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 fa54 	bl	800b130 <DMA_CalcBaseAndBitshift>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac90:	223f      	movs	r2, #63	; 0x3f
 800ac92:	409a      	lsls	r2, r3
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2201      	movs	r2, #1
 800aca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800aca6:	2300      	movs	r3, #0
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3718      	adds	r7, #24
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	f010803f 	.word	0xf010803f

0800acb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b086      	sub	sp, #24
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	607a      	str	r2, [r7, #4]
 800acc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800acc2:	2300      	movs	r3, #0
 800acc4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d101      	bne.n	800acda <HAL_DMA_Start_IT+0x26>
 800acd6:	2302      	movs	r3, #2
 800acd8:	e040      	b.n	800ad5c <HAL_DMA_Start_IT+0xa8>
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2201      	movs	r2, #1
 800acde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	2b01      	cmp	r3, #1
 800acec:	d12f      	bne.n	800ad4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2202      	movs	r2, #2
 800acf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2200      	movs	r2, #0
 800acfa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	68b9      	ldr	r1, [r7, #8]
 800ad02:	68f8      	ldr	r0, [r7, #12]
 800ad04:	f000 f9e6 	bl	800b0d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad0c:	223f      	movs	r2, #63	; 0x3f
 800ad0e:	409a      	lsls	r2, r3
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f042 0216 	orr.w	r2, r2, #22
 800ad22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d007      	beq.n	800ad3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f042 0208 	orr.w	r2, r2, #8
 800ad3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f042 0201 	orr.w	r2, r2, #1
 800ad4a:	601a      	str	r2, [r3, #0]
 800ad4c:	e005      	b.n	800ad5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2200      	movs	r2, #0
 800ad52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800ad56:	2302      	movs	r3, #2
 800ad58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800ad5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3718      	adds	r7, #24
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	2b02      	cmp	r3, #2
 800ad76:	d004      	beq.n	800ad82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2280      	movs	r2, #128	; 0x80
 800ad7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e00c      	b.n	800ad9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2205      	movs	r2, #5
 800ad86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f022 0201 	bic.w	r2, r2, #1
 800ad98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b086      	sub	sp, #24
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800adb0:	2300      	movs	r3, #0
 800adb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800adb4:	4b92      	ldr	r3, [pc, #584]	; (800b000 <HAL_DMA_IRQHandler+0x258>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a92      	ldr	r2, [pc, #584]	; (800b004 <HAL_DMA_IRQHandler+0x25c>)
 800adba:	fba2 2303 	umull	r2, r3, r2, r3
 800adbe:	0a9b      	lsrs	r3, r3, #10
 800adc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800add2:	2208      	movs	r2, #8
 800add4:	409a      	lsls	r2, r3
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	4013      	ands	r3, r2
 800adda:	2b00      	cmp	r3, #0
 800addc:	d01a      	beq.n	800ae14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f003 0304 	and.w	r3, r3, #4
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d013      	beq.n	800ae14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f022 0204 	bic.w	r2, r2, #4
 800adfa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae00:	2208      	movs	r2, #8
 800ae02:	409a      	lsls	r2, r3
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae0c:	f043 0201 	orr.w	r2, r3, #1
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae18:	2201      	movs	r2, #1
 800ae1a:	409a      	lsls	r2, r3
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	4013      	ands	r3, r2
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d012      	beq.n	800ae4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	695b      	ldr	r3, [r3, #20]
 800ae2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d00b      	beq.n	800ae4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae36:	2201      	movs	r2, #1
 800ae38:	409a      	lsls	r2, r3
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae42:	f043 0202 	orr.w	r2, r3, #2
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae4e:	2204      	movs	r2, #4
 800ae50:	409a      	lsls	r2, r3
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	4013      	ands	r3, r2
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d012      	beq.n	800ae80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f003 0302 	and.w	r3, r3, #2
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d00b      	beq.n	800ae80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae6c:	2204      	movs	r2, #4
 800ae6e:	409a      	lsls	r2, r3
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae78:	f043 0204 	orr.w	r2, r3, #4
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae84:	2210      	movs	r2, #16
 800ae86:	409a      	lsls	r2, r3
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	4013      	ands	r3, r2
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d043      	beq.n	800af18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f003 0308 	and.w	r3, r3, #8
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d03c      	beq.n	800af18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aea2:	2210      	movs	r2, #16
 800aea4:	409a      	lsls	r2, r3
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d018      	beq.n	800aeea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d108      	bne.n	800aed8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d024      	beq.n	800af18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	4798      	blx	r3
 800aed6:	e01f      	b.n	800af18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d01b      	beq.n	800af18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	4798      	blx	r3
 800aee8:	e016      	b.n	800af18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d107      	bne.n	800af08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f022 0208 	bic.w	r2, r2, #8
 800af06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d003      	beq.n	800af18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af1c:	2220      	movs	r2, #32
 800af1e:	409a      	lsls	r2, r3
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	4013      	ands	r3, r2
 800af24:	2b00      	cmp	r3, #0
 800af26:	f000 808e 	beq.w	800b046 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f003 0310 	and.w	r3, r3, #16
 800af34:	2b00      	cmp	r3, #0
 800af36:	f000 8086 	beq.w	800b046 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af3e:	2220      	movs	r2, #32
 800af40:	409a      	lsls	r2, r3
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	2b05      	cmp	r3, #5
 800af50:	d136      	bne.n	800afc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f022 0216 	bic.w	r2, r2, #22
 800af60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	695a      	ldr	r2, [r3, #20]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af76:	2b00      	cmp	r3, #0
 800af78:	d103      	bne.n	800af82 <HAL_DMA_IRQHandler+0x1da>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d007      	beq.n	800af92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f022 0208 	bic.w	r2, r2, #8
 800af90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af96:	223f      	movs	r2, #63	; 0x3f
 800af98:	409a      	lsls	r2, r3
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2201      	movs	r2, #1
 800afaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d07d      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	4798      	blx	r3
        }
        return;
 800afbe:	e078      	b.n	800b0b2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d01c      	beq.n	800b008 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d108      	bne.n	800afee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d030      	beq.n	800b046 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	4798      	blx	r3
 800afec:	e02b      	b.n	800b046 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d027      	beq.n	800b046 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	4798      	blx	r3
 800affe:	e022      	b.n	800b046 <HAL_DMA_IRQHandler+0x29e>
 800b000:	20000000 	.word	0x20000000
 800b004:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b012:	2b00      	cmp	r3, #0
 800b014:	d10f      	bne.n	800b036 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f022 0210 	bic.w	r2, r2, #16
 800b024:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2201      	movs	r2, #1
 800b032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d003      	beq.n	800b046 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d032      	beq.n	800b0b4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b052:	f003 0301 	and.w	r3, r3, #1
 800b056:	2b00      	cmp	r3, #0
 800b058:	d022      	beq.n	800b0a0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2205      	movs	r2, #5
 800b05e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	681a      	ldr	r2, [r3, #0]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f022 0201 	bic.w	r2, r2, #1
 800b070:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	3301      	adds	r3, #1
 800b076:	60bb      	str	r3, [r7, #8]
 800b078:	697a      	ldr	r2, [r7, #20]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d307      	bcc.n	800b08e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f003 0301 	and.w	r3, r3, #1
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d1f2      	bne.n	800b072 <HAL_DMA_IRQHandler+0x2ca>
 800b08c:	e000      	b.n	800b090 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800b08e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2200      	movs	r2, #0
 800b094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d005      	beq.n	800b0b4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	4798      	blx	r3
 800b0b0:	e000      	b.n	800b0b4 <HAL_DMA_IRQHandler+0x30c>
        return;
 800b0b2:	bf00      	nop
    }
  }
}
 800b0b4:	3718      	adds	r7, #24
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop

0800b0bc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	370c      	adds	r7, #12
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr

0800b0d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]
 800b0e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b0f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	683a      	ldr	r2, [r7, #0]
 800b0f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	2b40      	cmp	r3, #64	; 0x40
 800b100:	d108      	bne.n	800b114 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	68ba      	ldr	r2, [r7, #8]
 800b110:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b112:	e007      	b.n	800b124 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	68ba      	ldr	r2, [r7, #8]
 800b11a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	60da      	str	r2, [r3, #12]
}
 800b124:	bf00      	nop
 800b126:	3714      	adds	r7, #20
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	3b10      	subs	r3, #16
 800b140:	4a14      	ldr	r2, [pc, #80]	; (800b194 <DMA_CalcBaseAndBitshift+0x64>)
 800b142:	fba2 2303 	umull	r2, r3, r2, r3
 800b146:	091b      	lsrs	r3, r3, #4
 800b148:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b14a:	4a13      	ldr	r2, [pc, #76]	; (800b198 <DMA_CalcBaseAndBitshift+0x68>)
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	4413      	add	r3, r2
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	461a      	mov	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2b03      	cmp	r3, #3
 800b15c:	d909      	bls.n	800b172 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b166:	f023 0303 	bic.w	r3, r3, #3
 800b16a:	1d1a      	adds	r2, r3, #4
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	659a      	str	r2, [r3, #88]	; 0x58
 800b170:	e007      	b.n	800b182 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b17a:	f023 0303 	bic.w	r3, r3, #3
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b186:	4618      	mov	r0, r3
 800b188:	3714      	adds	r7, #20
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr
 800b192:	bf00      	nop
 800b194:	aaaaaaab 	.word	0xaaaaaaab
 800b198:	0801a3f0 	.word	0x0801a3f0

0800b19c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b085      	sub	sp, #20
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	699b      	ldr	r3, [r3, #24]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d11f      	bne.n	800b1f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	2b03      	cmp	r3, #3
 800b1ba:	d855      	bhi.n	800b268 <DMA_CheckFifoParam+0xcc>
 800b1bc:	a201      	add	r2, pc, #4	; (adr r2, 800b1c4 <DMA_CheckFifoParam+0x28>)
 800b1be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c2:	bf00      	nop
 800b1c4:	0800b1d5 	.word	0x0800b1d5
 800b1c8:	0800b1e7 	.word	0x0800b1e7
 800b1cc:	0800b1d5 	.word	0x0800b1d5
 800b1d0:	0800b269 	.word	0x0800b269
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d045      	beq.n	800b26c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b1e4:	e042      	b.n	800b26c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b1ee:	d13f      	bne.n	800b270 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b1f4:	e03c      	b.n	800b270 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	699b      	ldr	r3, [r3, #24]
 800b1fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1fe:	d121      	bne.n	800b244 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	2b03      	cmp	r3, #3
 800b204:	d836      	bhi.n	800b274 <DMA_CheckFifoParam+0xd8>
 800b206:	a201      	add	r2, pc, #4	; (adr r2, 800b20c <DMA_CheckFifoParam+0x70>)
 800b208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b20c:	0800b21d 	.word	0x0800b21d
 800b210:	0800b223 	.word	0x0800b223
 800b214:	0800b21d 	.word	0x0800b21d
 800b218:	0800b235 	.word	0x0800b235
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b21c:	2301      	movs	r3, #1
 800b21e:	73fb      	strb	r3, [r7, #15]
      break;
 800b220:	e02f      	b.n	800b282 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b226:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d024      	beq.n	800b278 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800b22e:	2301      	movs	r3, #1
 800b230:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b232:	e021      	b.n	800b278 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b238:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b23c:	d11e      	bne.n	800b27c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b242:	e01b      	b.n	800b27c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	2b02      	cmp	r3, #2
 800b248:	d902      	bls.n	800b250 <DMA_CheckFifoParam+0xb4>
 800b24a:	2b03      	cmp	r3, #3
 800b24c:	d003      	beq.n	800b256 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b24e:	e018      	b.n	800b282 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800b250:	2301      	movs	r3, #1
 800b252:	73fb      	strb	r3, [r7, #15]
      break;
 800b254:	e015      	b.n	800b282 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b25a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d00e      	beq.n	800b280 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800b262:	2301      	movs	r3, #1
 800b264:	73fb      	strb	r3, [r7, #15]
      break;
 800b266:	e00b      	b.n	800b280 <DMA_CheckFifoParam+0xe4>
      break;
 800b268:	bf00      	nop
 800b26a:	e00a      	b.n	800b282 <DMA_CheckFifoParam+0xe6>
      break;
 800b26c:	bf00      	nop
 800b26e:	e008      	b.n	800b282 <DMA_CheckFifoParam+0xe6>
      break;
 800b270:	bf00      	nop
 800b272:	e006      	b.n	800b282 <DMA_CheckFifoParam+0xe6>
      break;
 800b274:	bf00      	nop
 800b276:	e004      	b.n	800b282 <DMA_CheckFifoParam+0xe6>
      break;
 800b278:	bf00      	nop
 800b27a:	e002      	b.n	800b282 <DMA_CheckFifoParam+0xe6>
      break;   
 800b27c:	bf00      	nop
 800b27e:	e000      	b.n	800b282 <DMA_CheckFifoParam+0xe6>
      break;
 800b280:	bf00      	nop
    }
  } 
  
  return status; 
 800b282:	7bfb      	ldrb	r3, [r7, #15]
}
 800b284:	4618      	mov	r0, r3
 800b286:	3714      	adds	r7, #20
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b290:	b480      	push	{r7}
 800b292:	b089      	sub	sp, #36	; 0x24
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b29a:	2300      	movs	r3, #0
 800b29c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	61fb      	str	r3, [r7, #28]
 800b2aa:	e177      	b.n	800b59c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	697a      	ldr	r2, [r7, #20]
 800b2bc:	4013      	ands	r3, r2
 800b2be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b2c0:	693a      	ldr	r2, [r7, #16]
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	f040 8166 	bne.w	800b596 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d00b      	beq.n	800b2ea <HAL_GPIO_Init+0x5a>
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	2b02      	cmp	r3, #2
 800b2d8:	d007      	beq.n	800b2ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b2de:	2b11      	cmp	r3, #17
 800b2e0:	d003      	beq.n	800b2ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	2b12      	cmp	r3, #18
 800b2e8:	d130      	bne.n	800b34c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	689b      	ldr	r3, [r3, #8]
 800b2ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	005b      	lsls	r3, r3, #1
 800b2f4:	2203      	movs	r2, #3
 800b2f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b2fa:	43db      	mvns	r3, r3
 800b2fc:	69ba      	ldr	r2, [r7, #24]
 800b2fe:	4013      	ands	r3, r2
 800b300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	68da      	ldr	r2, [r3, #12]
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	005b      	lsls	r3, r3, #1
 800b30a:	fa02 f303 	lsl.w	r3, r2, r3
 800b30e:	69ba      	ldr	r2, [r7, #24]
 800b310:	4313      	orrs	r3, r2
 800b312:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	69ba      	ldr	r2, [r7, #24]
 800b318:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b320:	2201      	movs	r2, #1
 800b322:	69fb      	ldr	r3, [r7, #28]
 800b324:	fa02 f303 	lsl.w	r3, r2, r3
 800b328:	43db      	mvns	r3, r3
 800b32a:	69ba      	ldr	r2, [r7, #24]
 800b32c:	4013      	ands	r3, r2
 800b32e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	091b      	lsrs	r3, r3, #4
 800b336:	f003 0201 	and.w	r2, r3, #1
 800b33a:	69fb      	ldr	r3, [r7, #28]
 800b33c:	fa02 f303 	lsl.w	r3, r2, r3
 800b340:	69ba      	ldr	r2, [r7, #24]
 800b342:	4313      	orrs	r3, r2
 800b344:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	69ba      	ldr	r2, [r7, #24]
 800b34a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	005b      	lsls	r3, r3, #1
 800b356:	2203      	movs	r2, #3
 800b358:	fa02 f303 	lsl.w	r3, r2, r3
 800b35c:	43db      	mvns	r3, r3
 800b35e:	69ba      	ldr	r2, [r7, #24]
 800b360:	4013      	ands	r3, r2
 800b362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	689a      	ldr	r2, [r3, #8]
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	005b      	lsls	r3, r3, #1
 800b36c:	fa02 f303 	lsl.w	r3, r2, r3
 800b370:	69ba      	ldr	r2, [r7, #24]
 800b372:	4313      	orrs	r3, r2
 800b374:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	69ba      	ldr	r2, [r7, #24]
 800b37a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	2b02      	cmp	r3, #2
 800b382:	d003      	beq.n	800b38c <HAL_GPIO_Init+0xfc>
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	2b12      	cmp	r3, #18
 800b38a:	d123      	bne.n	800b3d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	08da      	lsrs	r2, r3, #3
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	3208      	adds	r2, #8
 800b394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b398:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b39a:	69fb      	ldr	r3, [r7, #28]
 800b39c:	f003 0307 	and.w	r3, r3, #7
 800b3a0:	009b      	lsls	r3, r3, #2
 800b3a2:	220f      	movs	r2, #15
 800b3a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b3a8:	43db      	mvns	r3, r3
 800b3aa:	69ba      	ldr	r2, [r7, #24]
 800b3ac:	4013      	ands	r3, r2
 800b3ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	691a      	ldr	r2, [r3, #16]
 800b3b4:	69fb      	ldr	r3, [r7, #28]
 800b3b6:	f003 0307 	and.w	r3, r3, #7
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b3c0:	69ba      	ldr	r2, [r7, #24]
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	08da      	lsrs	r2, r3, #3
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	3208      	adds	r2, #8
 800b3ce:	69b9      	ldr	r1, [r7, #24]
 800b3d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	005b      	lsls	r3, r3, #1
 800b3de:	2203      	movs	r2, #3
 800b3e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b3e4:	43db      	mvns	r3, r3
 800b3e6:	69ba      	ldr	r2, [r7, #24]
 800b3e8:	4013      	ands	r3, r2
 800b3ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	f003 0203 	and.w	r2, r3, #3
 800b3f4:	69fb      	ldr	r3, [r7, #28]
 800b3f6:	005b      	lsls	r3, r3, #1
 800b3f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b3fc:	69ba      	ldr	r2, [r7, #24]
 800b3fe:	4313      	orrs	r3, r2
 800b400:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	69ba      	ldr	r2, [r7, #24]
 800b406:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b410:	2b00      	cmp	r3, #0
 800b412:	f000 80c0 	beq.w	800b596 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b416:	2300      	movs	r3, #0
 800b418:	60fb      	str	r3, [r7, #12]
 800b41a:	4b65      	ldr	r3, [pc, #404]	; (800b5b0 <HAL_GPIO_Init+0x320>)
 800b41c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b41e:	4a64      	ldr	r2, [pc, #400]	; (800b5b0 <HAL_GPIO_Init+0x320>)
 800b420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b424:	6453      	str	r3, [r2, #68]	; 0x44
 800b426:	4b62      	ldr	r3, [pc, #392]	; (800b5b0 <HAL_GPIO_Init+0x320>)
 800b428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b42a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b42e:	60fb      	str	r3, [r7, #12]
 800b430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b432:	4a60      	ldr	r2, [pc, #384]	; (800b5b4 <HAL_GPIO_Init+0x324>)
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	089b      	lsrs	r3, r3, #2
 800b438:	3302      	adds	r3, #2
 800b43a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b43e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b440:	69fb      	ldr	r3, [r7, #28]
 800b442:	f003 0303 	and.w	r3, r3, #3
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	220f      	movs	r2, #15
 800b44a:	fa02 f303 	lsl.w	r3, r2, r3
 800b44e:	43db      	mvns	r3, r3
 800b450:	69ba      	ldr	r2, [r7, #24]
 800b452:	4013      	ands	r3, r2
 800b454:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4a57      	ldr	r2, [pc, #348]	; (800b5b8 <HAL_GPIO_Init+0x328>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d037      	beq.n	800b4ce <HAL_GPIO_Init+0x23e>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	4a56      	ldr	r2, [pc, #344]	; (800b5bc <HAL_GPIO_Init+0x32c>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d031      	beq.n	800b4ca <HAL_GPIO_Init+0x23a>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	4a55      	ldr	r2, [pc, #340]	; (800b5c0 <HAL_GPIO_Init+0x330>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d02b      	beq.n	800b4c6 <HAL_GPIO_Init+0x236>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4a54      	ldr	r2, [pc, #336]	; (800b5c4 <HAL_GPIO_Init+0x334>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d025      	beq.n	800b4c2 <HAL_GPIO_Init+0x232>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	4a53      	ldr	r2, [pc, #332]	; (800b5c8 <HAL_GPIO_Init+0x338>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d01f      	beq.n	800b4be <HAL_GPIO_Init+0x22e>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	4a52      	ldr	r2, [pc, #328]	; (800b5cc <HAL_GPIO_Init+0x33c>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d019      	beq.n	800b4ba <HAL_GPIO_Init+0x22a>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	4a51      	ldr	r2, [pc, #324]	; (800b5d0 <HAL_GPIO_Init+0x340>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d013      	beq.n	800b4b6 <HAL_GPIO_Init+0x226>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	4a50      	ldr	r2, [pc, #320]	; (800b5d4 <HAL_GPIO_Init+0x344>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d00d      	beq.n	800b4b2 <HAL_GPIO_Init+0x222>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4a4f      	ldr	r2, [pc, #316]	; (800b5d8 <HAL_GPIO_Init+0x348>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d007      	beq.n	800b4ae <HAL_GPIO_Init+0x21e>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a4e      	ldr	r2, [pc, #312]	; (800b5dc <HAL_GPIO_Init+0x34c>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d101      	bne.n	800b4aa <HAL_GPIO_Init+0x21a>
 800b4a6:	2309      	movs	r3, #9
 800b4a8:	e012      	b.n	800b4d0 <HAL_GPIO_Init+0x240>
 800b4aa:	230a      	movs	r3, #10
 800b4ac:	e010      	b.n	800b4d0 <HAL_GPIO_Init+0x240>
 800b4ae:	2308      	movs	r3, #8
 800b4b0:	e00e      	b.n	800b4d0 <HAL_GPIO_Init+0x240>
 800b4b2:	2307      	movs	r3, #7
 800b4b4:	e00c      	b.n	800b4d0 <HAL_GPIO_Init+0x240>
 800b4b6:	2306      	movs	r3, #6
 800b4b8:	e00a      	b.n	800b4d0 <HAL_GPIO_Init+0x240>
 800b4ba:	2305      	movs	r3, #5
 800b4bc:	e008      	b.n	800b4d0 <HAL_GPIO_Init+0x240>
 800b4be:	2304      	movs	r3, #4
 800b4c0:	e006      	b.n	800b4d0 <HAL_GPIO_Init+0x240>
 800b4c2:	2303      	movs	r3, #3
 800b4c4:	e004      	b.n	800b4d0 <HAL_GPIO_Init+0x240>
 800b4c6:	2302      	movs	r3, #2
 800b4c8:	e002      	b.n	800b4d0 <HAL_GPIO_Init+0x240>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e000      	b.n	800b4d0 <HAL_GPIO_Init+0x240>
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	69fa      	ldr	r2, [r7, #28]
 800b4d2:	f002 0203 	and.w	r2, r2, #3
 800b4d6:	0092      	lsls	r2, r2, #2
 800b4d8:	4093      	lsls	r3, r2
 800b4da:	69ba      	ldr	r2, [r7, #24]
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b4e0:	4934      	ldr	r1, [pc, #208]	; (800b5b4 <HAL_GPIO_Init+0x324>)
 800b4e2:	69fb      	ldr	r3, [r7, #28]
 800b4e4:	089b      	lsrs	r3, r3, #2
 800b4e6:	3302      	adds	r3, #2
 800b4e8:	69ba      	ldr	r2, [r7, #24]
 800b4ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b4ee:	4b3c      	ldr	r3, [pc, #240]	; (800b5e0 <HAL_GPIO_Init+0x350>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	43db      	mvns	r3, r3
 800b4f8:	69ba      	ldr	r2, [r7, #24]
 800b4fa:	4013      	ands	r3, r2
 800b4fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b506:	2b00      	cmp	r3, #0
 800b508:	d003      	beq.n	800b512 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b50a:	69ba      	ldr	r2, [r7, #24]
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	4313      	orrs	r3, r2
 800b510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b512:	4a33      	ldr	r2, [pc, #204]	; (800b5e0 <HAL_GPIO_Init+0x350>)
 800b514:	69bb      	ldr	r3, [r7, #24]
 800b516:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b518:	4b31      	ldr	r3, [pc, #196]	; (800b5e0 <HAL_GPIO_Init+0x350>)
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	43db      	mvns	r3, r3
 800b522:	69ba      	ldr	r2, [r7, #24]
 800b524:	4013      	ands	r3, r2
 800b526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b530:	2b00      	cmp	r3, #0
 800b532:	d003      	beq.n	800b53c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b534:	69ba      	ldr	r2, [r7, #24]
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	4313      	orrs	r3, r2
 800b53a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b53c:	4a28      	ldr	r2, [pc, #160]	; (800b5e0 <HAL_GPIO_Init+0x350>)
 800b53e:	69bb      	ldr	r3, [r7, #24]
 800b540:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b542:	4b27      	ldr	r3, [pc, #156]	; (800b5e0 <HAL_GPIO_Init+0x350>)
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	43db      	mvns	r3, r3
 800b54c:	69ba      	ldr	r2, [r7, #24]
 800b54e:	4013      	ands	r3, r2
 800b550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d003      	beq.n	800b566 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b55e:	69ba      	ldr	r2, [r7, #24]
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	4313      	orrs	r3, r2
 800b564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b566:	4a1e      	ldr	r2, [pc, #120]	; (800b5e0 <HAL_GPIO_Init+0x350>)
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b56c:	4b1c      	ldr	r3, [pc, #112]	; (800b5e0 <HAL_GPIO_Init+0x350>)
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	43db      	mvns	r3, r3
 800b576:	69ba      	ldr	r2, [r7, #24]
 800b578:	4013      	ands	r3, r2
 800b57a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b584:	2b00      	cmp	r3, #0
 800b586:	d003      	beq.n	800b590 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b588:	69ba      	ldr	r2, [r7, #24]
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	4313      	orrs	r3, r2
 800b58e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b590:	4a13      	ldr	r2, [pc, #76]	; (800b5e0 <HAL_GPIO_Init+0x350>)
 800b592:	69bb      	ldr	r3, [r7, #24]
 800b594:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b596:	69fb      	ldr	r3, [r7, #28]
 800b598:	3301      	adds	r3, #1
 800b59a:	61fb      	str	r3, [r7, #28]
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	2b0f      	cmp	r3, #15
 800b5a0:	f67f ae84 	bls.w	800b2ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b5a4:	bf00      	nop
 800b5a6:	3724      	adds	r7, #36	; 0x24
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr
 800b5b0:	40023800 	.word	0x40023800
 800b5b4:	40013800 	.word	0x40013800
 800b5b8:	40020000 	.word	0x40020000
 800b5bc:	40020400 	.word	0x40020400
 800b5c0:	40020800 	.word	0x40020800
 800b5c4:	40020c00 	.word	0x40020c00
 800b5c8:	40021000 	.word	0x40021000
 800b5cc:	40021400 	.word	0x40021400
 800b5d0:	40021800 	.word	0x40021800
 800b5d4:	40021c00 	.word	0x40021c00
 800b5d8:	40022000 	.word	0x40022000
 800b5dc:	40022400 	.word	0x40022400
 800b5e0:	40013c00 	.word	0x40013c00

0800b5e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b085      	sub	sp, #20
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	691a      	ldr	r2, [r3, #16]
 800b5f4:	887b      	ldrh	r3, [r7, #2]
 800b5f6:	4013      	ands	r3, r2
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d002      	beq.n	800b602 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	73fb      	strb	r3, [r7, #15]
 800b600:	e001      	b.n	800b606 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b602:	2300      	movs	r3, #0
 800b604:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b606:	7bfb      	ldrb	r3, [r7, #15]
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3714      	adds	r7, #20
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	460b      	mov	r3, r1
 800b61e:	807b      	strh	r3, [r7, #2]
 800b620:	4613      	mov	r3, r2
 800b622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b624:	787b      	ldrb	r3, [r7, #1]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d003      	beq.n	800b632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b62a:	887a      	ldrh	r2, [r7, #2]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b630:	e003      	b.n	800b63a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b632:	887b      	ldrh	r3, [r7, #2]
 800b634:	041a      	lsls	r2, r3, #16
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	619a      	str	r2, [r3, #24]
}
 800b63a:	bf00      	nop
 800b63c:	370c      	adds	r7, #12
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
	...

0800b648 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d101      	bne.n	800b65a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b656:	2301      	movs	r3, #1
 800b658:	e11f      	b.n	800b89a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b660:	b2db      	uxtb	r3, r3
 800b662:	2b00      	cmp	r3, #0
 800b664:	d106      	bne.n	800b674 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2200      	movs	r2, #0
 800b66a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f7fb fe62 	bl	8007338 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2224      	movs	r2, #36	; 0x24
 800b678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f022 0201 	bic.w	r2, r2, #1
 800b68a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b69a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	681a      	ldr	r2, [r3, #0]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b6aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b6ac:	f001 f96e 	bl	800c98c <HAL_RCC_GetPCLK1Freq>
 800b6b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	4a7b      	ldr	r2, [pc, #492]	; (800b8a4 <HAL_I2C_Init+0x25c>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d807      	bhi.n	800b6cc <HAL_I2C_Init+0x84>
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	4a7a      	ldr	r2, [pc, #488]	; (800b8a8 <HAL_I2C_Init+0x260>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	bf94      	ite	ls
 800b6c4:	2301      	movls	r3, #1
 800b6c6:	2300      	movhi	r3, #0
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	e006      	b.n	800b6da <HAL_I2C_Init+0x92>
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	4a77      	ldr	r2, [pc, #476]	; (800b8ac <HAL_I2C_Init+0x264>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	bf94      	ite	ls
 800b6d4:	2301      	movls	r3, #1
 800b6d6:	2300      	movhi	r3, #0
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d001      	beq.n	800b6e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e0db      	b.n	800b89a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	4a72      	ldr	r2, [pc, #456]	; (800b8b0 <HAL_I2C_Init+0x268>)
 800b6e6:	fba2 2303 	umull	r2, r3, r2, r3
 800b6ea:	0c9b      	lsrs	r3, r3, #18
 800b6ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	68ba      	ldr	r2, [r7, #8]
 800b6fe:	430a      	orrs	r2, r1
 800b700:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	6a1b      	ldr	r3, [r3, #32]
 800b708:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	4a64      	ldr	r2, [pc, #400]	; (800b8a4 <HAL_I2C_Init+0x25c>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d802      	bhi.n	800b71c <HAL_I2C_Init+0xd4>
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	3301      	adds	r3, #1
 800b71a:	e009      	b.n	800b730 <HAL_I2C_Init+0xe8>
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b722:	fb02 f303 	mul.w	r3, r2, r3
 800b726:	4a63      	ldr	r2, [pc, #396]	; (800b8b4 <HAL_I2C_Init+0x26c>)
 800b728:	fba2 2303 	umull	r2, r3, r2, r3
 800b72c:	099b      	lsrs	r3, r3, #6
 800b72e:	3301      	adds	r3, #1
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	6812      	ldr	r2, [r2, #0]
 800b734:	430b      	orrs	r3, r1
 800b736:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	69db      	ldr	r3, [r3, #28]
 800b73e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b742:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	4956      	ldr	r1, [pc, #344]	; (800b8a4 <HAL_I2C_Init+0x25c>)
 800b74c:	428b      	cmp	r3, r1
 800b74e:	d80d      	bhi.n	800b76c <HAL_I2C_Init+0x124>
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	1e59      	subs	r1, r3, #1
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	005b      	lsls	r3, r3, #1
 800b75a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b75e:	3301      	adds	r3, #1
 800b760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b764:	2b04      	cmp	r3, #4
 800b766:	bf38      	it	cc
 800b768:	2304      	movcc	r3, #4
 800b76a:	e04f      	b.n	800b80c <HAL_I2C_Init+0x1c4>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d111      	bne.n	800b798 <HAL_I2C_Init+0x150>
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	1e58      	subs	r0, r3, #1
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6859      	ldr	r1, [r3, #4]
 800b77c:	460b      	mov	r3, r1
 800b77e:	005b      	lsls	r3, r3, #1
 800b780:	440b      	add	r3, r1
 800b782:	fbb0 f3f3 	udiv	r3, r0, r3
 800b786:	3301      	adds	r3, #1
 800b788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	bf0c      	ite	eq
 800b790:	2301      	moveq	r3, #1
 800b792:	2300      	movne	r3, #0
 800b794:	b2db      	uxtb	r3, r3
 800b796:	e012      	b.n	800b7be <HAL_I2C_Init+0x176>
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	1e58      	subs	r0, r3, #1
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6859      	ldr	r1, [r3, #4]
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	440b      	add	r3, r1
 800b7a6:	0099      	lsls	r1, r3, #2
 800b7a8:	440b      	add	r3, r1
 800b7aa:	fbb0 f3f3 	udiv	r3, r0, r3
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	bf0c      	ite	eq
 800b7b8:	2301      	moveq	r3, #1
 800b7ba:	2300      	movne	r3, #0
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d001      	beq.n	800b7c6 <HAL_I2C_Init+0x17e>
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e022      	b.n	800b80c <HAL_I2C_Init+0x1c4>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d10e      	bne.n	800b7ec <HAL_I2C_Init+0x1a4>
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	1e58      	subs	r0, r3, #1
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6859      	ldr	r1, [r3, #4]
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	005b      	lsls	r3, r3, #1
 800b7da:	440b      	add	r3, r1
 800b7dc:	fbb0 f3f3 	udiv	r3, r0, r3
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b7e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7ea:	e00f      	b.n	800b80c <HAL_I2C_Init+0x1c4>
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	1e58      	subs	r0, r3, #1
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6859      	ldr	r1, [r3, #4]
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	009b      	lsls	r3, r3, #2
 800b7f8:	440b      	add	r3, r1
 800b7fa:	0099      	lsls	r1, r3, #2
 800b7fc:	440b      	add	r3, r1
 800b7fe:	fbb0 f3f3 	udiv	r3, r0, r3
 800b802:	3301      	adds	r3, #1
 800b804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b808:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b80c:	6879      	ldr	r1, [r7, #4]
 800b80e:	6809      	ldr	r1, [r1, #0]
 800b810:	4313      	orrs	r3, r2
 800b812:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	69da      	ldr	r2, [r3, #28]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6a1b      	ldr	r3, [r3, #32]
 800b826:	431a      	orrs	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	430a      	orrs	r2, r1
 800b82e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	689b      	ldr	r3, [r3, #8]
 800b836:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b83a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	6911      	ldr	r1, [r2, #16]
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	68d2      	ldr	r2, [r2, #12]
 800b846:	4311      	orrs	r1, r2
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	6812      	ldr	r2, [r2, #0]
 800b84c:	430b      	orrs	r3, r1
 800b84e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	68db      	ldr	r3, [r3, #12]
 800b856:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	695a      	ldr	r2, [r3, #20]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	699b      	ldr	r3, [r3, #24]
 800b862:	431a      	orrs	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	430a      	orrs	r2, r1
 800b86a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f042 0201 	orr.w	r2, r2, #1
 800b87a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2200      	movs	r2, #0
 800b880:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2220      	movs	r2, #32
 800b886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2200      	movs	r2, #0
 800b88e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b898:	2300      	movs	r3, #0
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3710      	adds	r7, #16
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	000186a0 	.word	0x000186a0
 800b8a8:	001e847f 	.word	0x001e847f
 800b8ac:	003d08ff 	.word	0x003d08ff
 800b8b0:	431bde83 	.word	0x431bde83
 800b8b4:	10624dd3 	.word	0x10624dd3

0800b8b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b088      	sub	sp, #32
 800b8bc:	af02      	add	r7, sp, #8
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	607a      	str	r2, [r7, #4]
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	817b      	strh	r3, [r7, #10]
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b8cc:	f7fe fc00 	bl	800a0d0 <HAL_GetTick>
 800b8d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	2b20      	cmp	r3, #32
 800b8dc:	f040 80e0 	bne.w	800baa0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	9300      	str	r3, [sp, #0]
 800b8e4:	2319      	movs	r3, #25
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	4970      	ldr	r1, [pc, #448]	; (800baac <HAL_I2C_Master_Transmit+0x1f4>)
 800b8ea:	68f8      	ldr	r0, [r7, #12]
 800b8ec:	f000 fc58 	bl	800c1a0 <I2C_WaitOnFlagUntilTimeout>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d001      	beq.n	800b8fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b8f6:	2302      	movs	r3, #2
 800b8f8:	e0d3      	b.n	800baa2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b900:	2b01      	cmp	r3, #1
 800b902:	d101      	bne.n	800b908 <HAL_I2C_Master_Transmit+0x50>
 800b904:	2302      	movs	r3, #2
 800b906:	e0cc      	b.n	800baa2 <HAL_I2C_Master_Transmit+0x1ea>
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2201      	movs	r2, #1
 800b90c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f003 0301 	and.w	r3, r3, #1
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d007      	beq.n	800b92e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f042 0201 	orr.w	r2, r2, #1
 800b92c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b93c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2221      	movs	r2, #33	; 0x21
 800b942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2210      	movs	r2, #16
 800b94a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2200      	movs	r2, #0
 800b952:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	893a      	ldrh	r2, [r7, #8]
 800b95e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b964:	b29a      	uxth	r2, r3
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	4a50      	ldr	r2, [pc, #320]	; (800bab0 <HAL_I2C_Master_Transmit+0x1f8>)
 800b96e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b970:	8979      	ldrh	r1, [r7, #10]
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	6a3a      	ldr	r2, [r7, #32]
 800b976:	68f8      	ldr	r0, [r7, #12]
 800b978:	f000 fac2 	bl	800bf00 <I2C_MasterRequestWrite>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d001      	beq.n	800b986 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b982:	2301      	movs	r3, #1
 800b984:	e08d      	b.n	800baa2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b986:	2300      	movs	r3, #0
 800b988:	613b      	str	r3, [r7, #16]
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	695b      	ldr	r3, [r3, #20]
 800b990:	613b      	str	r3, [r7, #16]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	699b      	ldr	r3, [r3, #24]
 800b998:	613b      	str	r3, [r7, #16]
 800b99a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b99c:	e066      	b.n	800ba6c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b99e:	697a      	ldr	r2, [r7, #20]
 800b9a0:	6a39      	ldr	r1, [r7, #32]
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f000 fcd2 	bl	800c34c <I2C_WaitOnTXEFlagUntilTimeout>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d00d      	beq.n	800b9ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b2:	2b04      	cmp	r3, #4
 800b9b4:	d107      	bne.n	800b9c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	e06b      	b.n	800baa2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ce:	781a      	ldrb	r2, [r3, #0]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9da:	1c5a      	adds	r2, r3, #1
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	b29a      	uxth	r2, r3
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9f2:	3b01      	subs	r3, #1
 800b9f4:	b29a      	uxth	r2, r3
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	695b      	ldr	r3, [r3, #20]
 800ba00:	f003 0304 	and.w	r3, r3, #4
 800ba04:	2b04      	cmp	r3, #4
 800ba06:	d11b      	bne.n	800ba40 <HAL_I2C_Master_Transmit+0x188>
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d017      	beq.n	800ba40 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba14:	781a      	ldrb	r2, [r3, #0]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba20:	1c5a      	adds	r2, r3, #1
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	b29a      	uxth	r2, r3
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba38:	3b01      	subs	r3, #1
 800ba3a:	b29a      	uxth	r2, r3
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba40:	697a      	ldr	r2, [r7, #20]
 800ba42:	6a39      	ldr	r1, [r7, #32]
 800ba44:	68f8      	ldr	r0, [r7, #12]
 800ba46:	f000 fcc2 	bl	800c3ce <I2C_WaitOnBTFFlagUntilTimeout>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d00d      	beq.n	800ba6c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba54:	2b04      	cmp	r3, #4
 800ba56:	d107      	bne.n	800ba68 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba66:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	e01a      	b.n	800baa2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d194      	bne.n	800b99e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2220      	movs	r2, #32
 800ba88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2200      	movs	r2, #0
 800ba98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	e000      	b.n	800baa2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800baa0:	2302      	movs	r3, #2
  }
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3718      	adds	r7, #24
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	00100002 	.word	0x00100002
 800bab0:	ffff0000 	.word	0xffff0000

0800bab4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b08c      	sub	sp, #48	; 0x30
 800bab8:	af02      	add	r7, sp, #8
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	607a      	str	r2, [r7, #4]
 800babe:	461a      	mov	r2, r3
 800bac0:	460b      	mov	r3, r1
 800bac2:	817b      	strh	r3, [r7, #10]
 800bac4:	4613      	mov	r3, r2
 800bac6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bac8:	f7fe fb02 	bl	800a0d0 <HAL_GetTick>
 800bacc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	2b20      	cmp	r3, #32
 800bad8:	f040 820b 	bne.w	800bef2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800badc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bade:	9300      	str	r3, [sp, #0]
 800bae0:	2319      	movs	r3, #25
 800bae2:	2201      	movs	r2, #1
 800bae4:	497c      	ldr	r1, [pc, #496]	; (800bcd8 <HAL_I2C_Master_Receive+0x224>)
 800bae6:	68f8      	ldr	r0, [r7, #12]
 800bae8:	f000 fb5a 	bl	800c1a0 <I2C_WaitOnFlagUntilTimeout>
 800baec:	4603      	mov	r3, r0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d001      	beq.n	800baf6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800baf2:	2302      	movs	r3, #2
 800baf4:	e1fe      	b.n	800bef4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d101      	bne.n	800bb04 <HAL_I2C_Master_Receive+0x50>
 800bb00:	2302      	movs	r3, #2
 800bb02:	e1f7      	b.n	800bef4 <HAL_I2C_Master_Receive+0x440>
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2201      	movs	r2, #1
 800bb08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f003 0301 	and.w	r3, r3, #1
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d007      	beq.n	800bb2a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f042 0201 	orr.w	r2, r2, #1
 800bb28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bb38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2222      	movs	r2, #34	; 0x22
 800bb3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2210      	movs	r2, #16
 800bb46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	893a      	ldrh	r2, [r7, #8]
 800bb5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb60:	b29a      	uxth	r2, r3
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	4a5c      	ldr	r2, [pc, #368]	; (800bcdc <HAL_I2C_Master_Receive+0x228>)
 800bb6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800bb6c:	8979      	ldrh	r1, [r7, #10]
 800bb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb72:	68f8      	ldr	r0, [r7, #12]
 800bb74:	f000 fa46 	bl	800c004 <I2C_MasterRequestRead>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d001      	beq.n	800bb82 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	e1b8      	b.n	800bef4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d113      	bne.n	800bbb2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	623b      	str	r3, [r7, #32]
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	695b      	ldr	r3, [r3, #20]
 800bb94:	623b      	str	r3, [r7, #32]
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	699b      	ldr	r3, [r3, #24]
 800bb9c:	623b      	str	r3, [r7, #32]
 800bb9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbae:	601a      	str	r2, [r3, #0]
 800bbb0:	e18c      	b.n	800becc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d11b      	bne.n	800bbf2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bbca:	2300      	movs	r3, #0
 800bbcc:	61fb      	str	r3, [r7, #28]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	695b      	ldr	r3, [r3, #20]
 800bbd4:	61fb      	str	r3, [r7, #28]
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	699b      	ldr	r3, [r3, #24]
 800bbdc:	61fb      	str	r3, [r7, #28]
 800bbde:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbee:	601a      	str	r2, [r3, #0]
 800bbf0:	e16c      	b.n	800becc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbf6:	2b02      	cmp	r3, #2
 800bbf8:	d11b      	bne.n	800bc32 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	61bb      	str	r3, [r7, #24]
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	695b      	ldr	r3, [r3, #20]
 800bc24:	61bb      	str	r3, [r7, #24]
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	699b      	ldr	r3, [r3, #24]
 800bc2c:	61bb      	str	r3, [r7, #24]
 800bc2e:	69bb      	ldr	r3, [r7, #24]
 800bc30:	e14c      	b.n	800becc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	681a      	ldr	r2, [r3, #0]
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bc40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bc42:	2300      	movs	r3, #0
 800bc44:	617b      	str	r3, [r7, #20]
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	695b      	ldr	r3, [r3, #20]
 800bc4c:	617b      	str	r3, [r7, #20]
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	699b      	ldr	r3, [r3, #24]
 800bc54:	617b      	str	r3, [r7, #20]
 800bc56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800bc58:	e138      	b.n	800becc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc5e:	2b03      	cmp	r3, #3
 800bc60:	f200 80f1 	bhi.w	800be46 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d123      	bne.n	800bcb4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc70:	68f8      	ldr	r0, [r7, #12]
 800bc72:	f000 fbed 	bl	800c450 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d001      	beq.n	800bc80 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	e139      	b.n	800bef4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	691a      	ldr	r2, [r3, #16]
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc8a:	b2d2      	uxtb	r2, r2
 800bc8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc92:	1c5a      	adds	r2, r3, #1
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc9c:	3b01      	subs	r3, #1
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	3b01      	subs	r3, #1
 800bcac:	b29a      	uxth	r2, r3
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bcb2:	e10b      	b.n	800becc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcb8:	2b02      	cmp	r3, #2
 800bcba:	d14e      	bne.n	800bd5a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcbe:	9300      	str	r3, [sp, #0]
 800bcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	4906      	ldr	r1, [pc, #24]	; (800bce0 <HAL_I2C_Master_Receive+0x22c>)
 800bcc6:	68f8      	ldr	r0, [r7, #12]
 800bcc8:	f000 fa6a 	bl	800c1a0 <I2C_WaitOnFlagUntilTimeout>
 800bccc:	4603      	mov	r3, r0
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d008      	beq.n	800bce4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	e10e      	b.n	800bef4 <HAL_I2C_Master_Receive+0x440>
 800bcd6:	bf00      	nop
 800bcd8:	00100002 	.word	0x00100002
 800bcdc:	ffff0000 	.word	0xffff0000
 800bce0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	691a      	ldr	r2, [r3, #16]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfe:	b2d2      	uxtb	r2, r2
 800bd00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd06:	1c5a      	adds	r2, r3, #1
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd10:	3b01      	subs	r3, #1
 800bd12:	b29a      	uxth	r2, r3
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	3b01      	subs	r3, #1
 800bd20:	b29a      	uxth	r2, r3
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	691a      	ldr	r2, [r3, #16]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd30:	b2d2      	uxtb	r2, r2
 800bd32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd38:	1c5a      	adds	r2, r3, #1
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd42:	3b01      	subs	r3, #1
 800bd44:	b29a      	uxth	r2, r3
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	3b01      	subs	r3, #1
 800bd52:	b29a      	uxth	r2, r3
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bd58:	e0b8      	b.n	800becc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5c:	9300      	str	r3, [sp, #0]
 800bd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd60:	2200      	movs	r2, #0
 800bd62:	4966      	ldr	r1, [pc, #408]	; (800befc <HAL_I2C_Master_Receive+0x448>)
 800bd64:	68f8      	ldr	r0, [r7, #12]
 800bd66:	f000 fa1b 	bl	800c1a0 <I2C_WaitOnFlagUntilTimeout>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d001      	beq.n	800bd74 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800bd70:	2301      	movs	r3, #1
 800bd72:	e0bf      	b.n	800bef4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	691a      	ldr	r2, [r3, #16]
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd8e:	b2d2      	uxtb	r2, r2
 800bd90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd96:	1c5a      	adds	r2, r3, #1
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bda0:	3b01      	subs	r3, #1
 800bda2:	b29a      	uxth	r2, r3
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdac:	b29b      	uxth	r3, r3
 800bdae:	3b01      	subs	r3, #1
 800bdb0:	b29a      	uxth	r2, r3
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb8:	9300      	str	r3, [sp, #0]
 800bdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	494f      	ldr	r1, [pc, #316]	; (800befc <HAL_I2C_Master_Receive+0x448>)
 800bdc0:	68f8      	ldr	r0, [r7, #12]
 800bdc2:	f000 f9ed 	bl	800c1a0 <I2C_WaitOnFlagUntilTimeout>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d001      	beq.n	800bdd0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	e091      	b.n	800bef4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bdde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	691a      	ldr	r2, [r3, #16]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdea:	b2d2      	uxtb	r2, r2
 800bdec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf2:	1c5a      	adds	r2, r3, #1
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	b29a      	uxth	r2, r3
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be08:	b29b      	uxth	r3, r3
 800be0a:	3b01      	subs	r3, #1
 800be0c:	b29a      	uxth	r2, r3
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	691a      	ldr	r2, [r3, #16]
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be1c:	b2d2      	uxtb	r2, r2
 800be1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be24:	1c5a      	adds	r2, r3, #1
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be2e:	3b01      	subs	r3, #1
 800be30:	b29a      	uxth	r2, r3
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	3b01      	subs	r3, #1
 800be3e:	b29a      	uxth	r2, r3
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	855a      	strh	r2, [r3, #42]	; 0x2a
 800be44:	e042      	b.n	800becc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800be46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	f000 fb00 	bl	800c450 <I2C_WaitOnRXNEFlagUntilTimeout>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d001      	beq.n	800be5a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800be56:	2301      	movs	r3, #1
 800be58:	e04c      	b.n	800bef4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	691a      	ldr	r2, [r3, #16]
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be64:	b2d2      	uxtb	r2, r2
 800be66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be6c:	1c5a      	adds	r2, r3, #1
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be76:	3b01      	subs	r3, #1
 800be78:	b29a      	uxth	r2, r3
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be82:	b29b      	uxth	r3, r3
 800be84:	3b01      	subs	r3, #1
 800be86:	b29a      	uxth	r2, r3
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	695b      	ldr	r3, [r3, #20]
 800be92:	f003 0304 	and.w	r3, r3, #4
 800be96:	2b04      	cmp	r3, #4
 800be98:	d118      	bne.n	800becc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	691a      	ldr	r2, [r3, #16]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea4:	b2d2      	uxtb	r2, r2
 800bea6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beac:	1c5a      	adds	r2, r3, #1
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800beb6:	3b01      	subs	r3, #1
 800beb8:	b29a      	uxth	r2, r3
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bec2:	b29b      	uxth	r3, r3
 800bec4:	3b01      	subs	r3, #1
 800bec6:	b29a      	uxth	r2, r3
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	f47f aec2 	bne.w	800bc5a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2220      	movs	r2, #32
 800beda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2200      	movs	r2, #0
 800bee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2200      	movs	r2, #0
 800beea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800beee:	2300      	movs	r3, #0
 800bef0:	e000      	b.n	800bef4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bef2:	2302      	movs	r3, #2
  }
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3728      	adds	r7, #40	; 0x28
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}
 800befc:	00010004 	.word	0x00010004

0800bf00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b088      	sub	sp, #32
 800bf04:	af02      	add	r7, sp, #8
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	607a      	str	r2, [r7, #4]
 800bf0a:	603b      	str	r3, [r7, #0]
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	2b08      	cmp	r3, #8
 800bf1a:	d006      	beq.n	800bf2a <I2C_MasterRequestWrite+0x2a>
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	d003      	beq.n	800bf2a <I2C_MasterRequestWrite+0x2a>
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bf28:	d108      	bne.n	800bf3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf38:	601a      	str	r2, [r3, #0]
 800bf3a:	e00b      	b.n	800bf54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf40:	2b12      	cmp	r3, #18
 800bf42:	d107      	bne.n	800bf54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	681a      	ldr	r2, [r3, #0]
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	9300      	str	r3, [sp, #0]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bf60:	68f8      	ldr	r0, [r7, #12]
 800bf62:	f000 f91d 	bl	800c1a0 <I2C_WaitOnFlagUntilTimeout>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00d      	beq.n	800bf88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf7a:	d103      	bne.n	800bf84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bf84:	2303      	movs	r3, #3
 800bf86:	e035      	b.n	800bff4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	691b      	ldr	r3, [r3, #16]
 800bf8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf90:	d108      	bne.n	800bfa4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bf92:	897b      	ldrh	r3, [r7, #10]
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	461a      	mov	r2, r3
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bfa0:	611a      	str	r2, [r3, #16]
 800bfa2:	e01b      	b.n	800bfdc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bfa4:	897b      	ldrh	r3, [r7, #10]
 800bfa6:	11db      	asrs	r3, r3, #7
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	f003 0306 	and.w	r3, r3, #6
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	f063 030f 	orn	r3, r3, #15
 800bfb4:	b2da      	uxtb	r2, r3
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	490e      	ldr	r1, [pc, #56]	; (800bffc <I2C_MasterRequestWrite+0xfc>)
 800bfc2:	68f8      	ldr	r0, [r7, #12]
 800bfc4:	f000 f943 	bl	800c24e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d001      	beq.n	800bfd2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800bfce:	2301      	movs	r3, #1
 800bfd0:	e010      	b.n	800bff4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bfd2:	897b      	ldrh	r3, [r7, #10]
 800bfd4:	b2da      	uxtb	r2, r3
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	4907      	ldr	r1, [pc, #28]	; (800c000 <I2C_MasterRequestWrite+0x100>)
 800bfe2:	68f8      	ldr	r0, [r7, #12]
 800bfe4:	f000 f933 	bl	800c24e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d001      	beq.n	800bff2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800bfee:	2301      	movs	r3, #1
 800bff0:	e000      	b.n	800bff4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800bff2:	2300      	movs	r3, #0
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3718      	adds	r7, #24
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	00010008 	.word	0x00010008
 800c000:	00010002 	.word	0x00010002

0800c004 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b088      	sub	sp, #32
 800c008:	af02      	add	r7, sp, #8
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	607a      	str	r2, [r7, #4]
 800c00e:	603b      	str	r3, [r7, #0]
 800c010:	460b      	mov	r3, r1
 800c012:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c018:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	681a      	ldr	r2, [r3, #0]
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c028:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	2b08      	cmp	r3, #8
 800c02e:	d006      	beq.n	800c03e <I2C_MasterRequestRead+0x3a>
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	2b01      	cmp	r3, #1
 800c034:	d003      	beq.n	800c03e <I2C_MasterRequestRead+0x3a>
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c03c:	d108      	bne.n	800c050 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c04c:	601a      	str	r2, [r3, #0]
 800c04e:	e00b      	b.n	800c068 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c054:	2b11      	cmp	r3, #17
 800c056:	d107      	bne.n	800c068 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c066:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	9300      	str	r3, [sp, #0]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c074:	68f8      	ldr	r0, [r7, #12]
 800c076:	f000 f893 	bl	800c1a0 <I2C_WaitOnFlagUntilTimeout>
 800c07a:	4603      	mov	r3, r0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d00d      	beq.n	800c09c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c08a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c08e:	d103      	bne.n	800c098 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c096:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c098:	2303      	movs	r3, #3
 800c09a:	e079      	b.n	800c190 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	691b      	ldr	r3, [r3, #16]
 800c0a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c0a4:	d108      	bne.n	800c0b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c0a6:	897b      	ldrh	r3, [r7, #10]
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	f043 0301 	orr.w	r3, r3, #1
 800c0ae:	b2da      	uxtb	r2, r3
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	611a      	str	r2, [r3, #16]
 800c0b6:	e05f      	b.n	800c178 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800c0b8:	897b      	ldrh	r3, [r7, #10]
 800c0ba:	11db      	asrs	r3, r3, #7
 800c0bc:	b2db      	uxtb	r3, r3
 800c0be:	f003 0306 	and.w	r3, r3, #6
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	f063 030f 	orn	r3, r3, #15
 800c0c8:	b2da      	uxtb	r2, r3
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	4930      	ldr	r1, [pc, #192]	; (800c198 <I2C_MasterRequestRead+0x194>)
 800c0d6:	68f8      	ldr	r0, [r7, #12]
 800c0d8:	f000 f8b9 	bl	800c24e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d001      	beq.n	800c0e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	e054      	b.n	800c190 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800c0e6:	897b      	ldrh	r3, [r7, #10]
 800c0e8:	b2da      	uxtb	r2, r3
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	687a      	ldr	r2, [r7, #4]
 800c0f4:	4929      	ldr	r1, [pc, #164]	; (800c19c <I2C_MasterRequestRead+0x198>)
 800c0f6:	68f8      	ldr	r0, [r7, #12]
 800c0f8:	f000 f8a9 	bl	800c24e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d001      	beq.n	800c106 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800c102:	2301      	movs	r3, #1
 800c104:	e044      	b.n	800c190 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c106:	2300      	movs	r3, #0
 800c108:	613b      	str	r3, [r7, #16]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	695b      	ldr	r3, [r3, #20]
 800c110:	613b      	str	r3, [r7, #16]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	699b      	ldr	r3, [r3, #24]
 800c118:	613b      	str	r3, [r7, #16]
 800c11a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c12a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	9300      	str	r3, [sp, #0]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2200      	movs	r2, #0
 800c134:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c138:	68f8      	ldr	r0, [r7, #12]
 800c13a:	f000 f831 	bl	800c1a0 <I2C_WaitOnFlagUntilTimeout>
 800c13e:	4603      	mov	r3, r0
 800c140:	2b00      	cmp	r3, #0
 800c142:	d00d      	beq.n	800c160 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c14e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c152:	d103      	bne.n	800c15c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c15a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800c15c:	2303      	movs	r3, #3
 800c15e:	e017      	b.n	800c190 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800c160:	897b      	ldrh	r3, [r7, #10]
 800c162:	11db      	asrs	r3, r3, #7
 800c164:	b2db      	uxtb	r3, r3
 800c166:	f003 0306 	and.w	r3, r3, #6
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	f063 030e 	orn	r3, r3, #14
 800c170:	b2da      	uxtb	r2, r3
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	4907      	ldr	r1, [pc, #28]	; (800c19c <I2C_MasterRequestRead+0x198>)
 800c17e:	68f8      	ldr	r0, [r7, #12]
 800c180:	f000 f865 	bl	800c24e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c184:	4603      	mov	r3, r0
 800c186:	2b00      	cmp	r3, #0
 800c188:	d001      	beq.n	800c18e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800c18a:	2301      	movs	r3, #1
 800c18c:	e000      	b.n	800c190 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800c18e:	2300      	movs	r3, #0
}
 800c190:	4618      	mov	r0, r3
 800c192:	3718      	adds	r7, #24
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}
 800c198:	00010008 	.word	0x00010008
 800c19c:	00010002 	.word	0x00010002

0800c1a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b084      	sub	sp, #16
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	603b      	str	r3, [r7, #0]
 800c1ac:	4613      	mov	r3, r2
 800c1ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c1b0:	e025      	b.n	800c1fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1b8:	d021      	beq.n	800c1fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1ba:	f7fd ff89 	bl	800a0d0 <HAL_GetTick>
 800c1be:	4602      	mov	r2, r0
 800c1c0:	69bb      	ldr	r3, [r7, #24]
 800c1c2:	1ad3      	subs	r3, r2, r3
 800c1c4:	683a      	ldr	r2, [r7, #0]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d302      	bcc.n	800c1d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d116      	bne.n	800c1fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2220      	movs	r2, #32
 800c1da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ea:	f043 0220 	orr.w	r2, r3, #32
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	e023      	b.n	800c246 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	0c1b      	lsrs	r3, r3, #16
 800c202:	b2db      	uxtb	r3, r3
 800c204:	2b01      	cmp	r3, #1
 800c206:	d10d      	bne.n	800c224 <I2C_WaitOnFlagUntilTimeout+0x84>
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	695b      	ldr	r3, [r3, #20]
 800c20e:	43da      	mvns	r2, r3
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	4013      	ands	r3, r2
 800c214:	b29b      	uxth	r3, r3
 800c216:	2b00      	cmp	r3, #0
 800c218:	bf0c      	ite	eq
 800c21a:	2301      	moveq	r3, #1
 800c21c:	2300      	movne	r3, #0
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	461a      	mov	r2, r3
 800c222:	e00c      	b.n	800c23e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	699b      	ldr	r3, [r3, #24]
 800c22a:	43da      	mvns	r2, r3
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	4013      	ands	r3, r2
 800c230:	b29b      	uxth	r3, r3
 800c232:	2b00      	cmp	r3, #0
 800c234:	bf0c      	ite	eq
 800c236:	2301      	moveq	r3, #1
 800c238:	2300      	movne	r3, #0
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	461a      	mov	r2, r3
 800c23e:	79fb      	ldrb	r3, [r7, #7]
 800c240:	429a      	cmp	r2, r3
 800c242:	d0b6      	beq.n	800c1b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c244:	2300      	movs	r3, #0
}
 800c246:	4618      	mov	r0, r3
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}

0800c24e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c24e:	b580      	push	{r7, lr}
 800c250:	b084      	sub	sp, #16
 800c252:	af00      	add	r7, sp, #0
 800c254:	60f8      	str	r0, [r7, #12]
 800c256:	60b9      	str	r1, [r7, #8]
 800c258:	607a      	str	r2, [r7, #4]
 800c25a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c25c:	e051      	b.n	800c302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	695b      	ldr	r3, [r3, #20]
 800c264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c26c:	d123      	bne.n	800c2b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c27c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c286:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2200      	movs	r2, #0
 800c28c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	2220      	movs	r2, #32
 800c292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	2200      	movs	r2, #0
 800c29a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2a2:	f043 0204 	orr.w	r2, r3, #4
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	e046      	b.n	800c344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2bc:	d021      	beq.n	800c302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2be:	f7fd ff07 	bl	800a0d0 <HAL_GetTick>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	1ad3      	subs	r3, r2, r3
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d302      	bcc.n	800c2d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d116      	bne.n	800c302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	2220      	movs	r2, #32
 800c2de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2ee:	f043 0220 	orr.w	r2, r3, #32
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c2fe:	2301      	movs	r3, #1
 800c300:	e020      	b.n	800c344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	0c1b      	lsrs	r3, r3, #16
 800c306:	b2db      	uxtb	r3, r3
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d10c      	bne.n	800c326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	695b      	ldr	r3, [r3, #20]
 800c312:	43da      	mvns	r2, r3
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	4013      	ands	r3, r2
 800c318:	b29b      	uxth	r3, r3
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	bf14      	ite	ne
 800c31e:	2301      	movne	r3, #1
 800c320:	2300      	moveq	r3, #0
 800c322:	b2db      	uxtb	r3, r3
 800c324:	e00b      	b.n	800c33e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	699b      	ldr	r3, [r3, #24]
 800c32c:	43da      	mvns	r2, r3
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	4013      	ands	r3, r2
 800c332:	b29b      	uxth	r3, r3
 800c334:	2b00      	cmp	r3, #0
 800c336:	bf14      	ite	ne
 800c338:	2301      	movne	r3, #1
 800c33a:	2300      	moveq	r3, #0
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d18d      	bne.n	800c25e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800c342:	2300      	movs	r3, #0
}
 800c344:	4618      	mov	r0, r3
 800c346:	3710      	adds	r7, #16
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	60f8      	str	r0, [r7, #12]
 800c354:	60b9      	str	r1, [r7, #8]
 800c356:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c358:	e02d      	b.n	800c3b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c35a:	68f8      	ldr	r0, [r7, #12]
 800c35c:	f000 f8ce 	bl	800c4fc <I2C_IsAcknowledgeFailed>
 800c360:	4603      	mov	r3, r0
 800c362:	2b00      	cmp	r3, #0
 800c364:	d001      	beq.n	800c36a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c366:	2301      	movs	r3, #1
 800c368:	e02d      	b.n	800c3c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c370:	d021      	beq.n	800c3b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c372:	f7fd fead 	bl	800a0d0 <HAL_GetTick>
 800c376:	4602      	mov	r2, r0
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	1ad3      	subs	r3, r2, r3
 800c37c:	68ba      	ldr	r2, [r7, #8]
 800c37e:	429a      	cmp	r2, r3
 800c380:	d302      	bcc.n	800c388 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d116      	bne.n	800c3b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2200      	movs	r2, #0
 800c38c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2220      	movs	r2, #32
 800c392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2200      	movs	r2, #0
 800c39a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3a2:	f043 0220 	orr.w	r2, r3, #32
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	e007      	b.n	800c3c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	695b      	ldr	r3, [r3, #20]
 800c3bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3c0:	2b80      	cmp	r3, #128	; 0x80
 800c3c2:	d1ca      	bne.n	800c35a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c3c4:	2300      	movs	r3, #0
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3710      	adds	r7, #16
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}

0800c3ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c3ce:	b580      	push	{r7, lr}
 800c3d0:	b084      	sub	sp, #16
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	60f8      	str	r0, [r7, #12]
 800c3d6:	60b9      	str	r1, [r7, #8]
 800c3d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c3da:	e02d      	b.n	800c438 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c3dc:	68f8      	ldr	r0, [r7, #12]
 800c3de:	f000 f88d 	bl	800c4fc <I2C_IsAcknowledgeFailed>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d001      	beq.n	800c3ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	e02d      	b.n	800c448 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3f2:	d021      	beq.n	800c438 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c3f4:	f7fd fe6c 	bl	800a0d0 <HAL_GetTick>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	1ad3      	subs	r3, r2, r3
 800c3fe:	68ba      	ldr	r2, [r7, #8]
 800c400:	429a      	cmp	r2, r3
 800c402:	d302      	bcc.n	800c40a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d116      	bne.n	800c438 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2200      	movs	r2, #0
 800c40e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2220      	movs	r2, #32
 800c414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2200      	movs	r2, #0
 800c41c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c424:	f043 0220 	orr.w	r2, r3, #32
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2200      	movs	r2, #0
 800c430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c434:	2301      	movs	r3, #1
 800c436:	e007      	b.n	800c448 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	695b      	ldr	r3, [r3, #20]
 800c43e:	f003 0304 	and.w	r3, r3, #4
 800c442:	2b04      	cmp	r3, #4
 800c444:	d1ca      	bne.n	800c3dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c446:	2300      	movs	r3, #0
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3710      	adds	r7, #16
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	60b9      	str	r1, [r7, #8]
 800c45a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c45c:	e042      	b.n	800c4e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	695b      	ldr	r3, [r3, #20]
 800c464:	f003 0310 	and.w	r3, r3, #16
 800c468:	2b10      	cmp	r3, #16
 800c46a:	d119      	bne.n	800c4a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f06f 0210 	mvn.w	r2, #16
 800c474:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	2200      	movs	r2, #0
 800c47a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2220      	movs	r2, #32
 800c480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2200      	movs	r2, #0
 800c488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	2200      	movs	r2, #0
 800c498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c49c:	2301      	movs	r3, #1
 800c49e:	e029      	b.n	800c4f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c4a0:	f7fd fe16 	bl	800a0d0 <HAL_GetTick>
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	1ad3      	subs	r3, r2, r3
 800c4aa:	68ba      	ldr	r2, [r7, #8]
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d302      	bcc.n	800c4b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d116      	bne.n	800c4e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2220      	movs	r2, #32
 800c4c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4d0:	f043 0220 	orr.w	r2, r3, #32
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	e007      	b.n	800c4f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	695b      	ldr	r3, [r3, #20]
 800c4ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4ee:	2b40      	cmp	r3, #64	; 0x40
 800c4f0:	d1b5      	bne.n	800c45e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c4f2:	2300      	movs	r3, #0
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3710      	adds	r7, #16
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	695b      	ldr	r3, [r3, #20]
 800c50a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c50e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c512:	d11b      	bne.n	800c54c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c51c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2200      	movs	r2, #0
 800c522:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2220      	movs	r2, #32
 800c528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2200      	movs	r2, #0
 800c530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c538:	f043 0204 	orr.w	r2, r3, #4
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c548:	2301      	movs	r3, #1
 800c54a:	e000      	b.n	800c54e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c54c:	2300      	movs	r3, #0
}
 800c54e:	4618      	mov	r0, r3
 800c550:	370c      	adds	r7, #12
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr
	...

0800c55c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800c562:	2300      	movs	r3, #0
 800c564:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c566:	2300      	movs	r3, #0
 800c568:	603b      	str	r3, [r7, #0]
 800c56a:	4b20      	ldr	r3, [pc, #128]	; (800c5ec <HAL_PWREx_EnableOverDrive+0x90>)
 800c56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c56e:	4a1f      	ldr	r2, [pc, #124]	; (800c5ec <HAL_PWREx_EnableOverDrive+0x90>)
 800c570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c574:	6413      	str	r3, [r2, #64]	; 0x40
 800c576:	4b1d      	ldr	r3, [pc, #116]	; (800c5ec <HAL_PWREx_EnableOverDrive+0x90>)
 800c578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c57a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c57e:	603b      	str	r3, [r7, #0]
 800c580:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c582:	4b1b      	ldr	r3, [pc, #108]	; (800c5f0 <HAL_PWREx_EnableOverDrive+0x94>)
 800c584:	2201      	movs	r2, #1
 800c586:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c588:	f7fd fda2 	bl	800a0d0 <HAL_GetTick>
 800c58c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c58e:	e009      	b.n	800c5a4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c590:	f7fd fd9e 	bl	800a0d0 <HAL_GetTick>
 800c594:	4602      	mov	r2, r0
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	1ad3      	subs	r3, r2, r3
 800c59a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c59e:	d901      	bls.n	800c5a4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800c5a0:	2303      	movs	r3, #3
 800c5a2:	e01f      	b.n	800c5e4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c5a4:	4b13      	ldr	r3, [pc, #76]	; (800c5f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c5ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5b0:	d1ee      	bne.n	800c590 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c5b2:	4b11      	ldr	r3, [pc, #68]	; (800c5f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c5b8:	f7fd fd8a 	bl	800a0d0 <HAL_GetTick>
 800c5bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c5be:	e009      	b.n	800c5d4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c5c0:	f7fd fd86 	bl	800a0d0 <HAL_GetTick>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	1ad3      	subs	r3, r2, r3
 800c5ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c5ce:	d901      	bls.n	800c5d4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800c5d0:	2303      	movs	r3, #3
 800c5d2:	e007      	b.n	800c5e4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c5d4:	4b07      	ldr	r3, [pc, #28]	; (800c5f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5e0:	d1ee      	bne.n	800c5c0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800c5e2:	2300      	movs	r3, #0
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3708      	adds	r7, #8
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	40023800 	.word	0x40023800
 800c5f0:	420e0040 	.word	0x420e0040
 800c5f4:	40007000 	.word	0x40007000
 800c5f8:	420e0044 	.word	0x420e0044

0800c5fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d101      	bne.n	800c610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c60c:	2301      	movs	r3, #1
 800c60e:	e0cc      	b.n	800c7aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c610:	4b68      	ldr	r3, [pc, #416]	; (800c7b4 <HAL_RCC_ClockConfig+0x1b8>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f003 030f 	and.w	r3, r3, #15
 800c618:	683a      	ldr	r2, [r7, #0]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d90c      	bls.n	800c638 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c61e:	4b65      	ldr	r3, [pc, #404]	; (800c7b4 <HAL_RCC_ClockConfig+0x1b8>)
 800c620:	683a      	ldr	r2, [r7, #0]
 800c622:	b2d2      	uxtb	r2, r2
 800c624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c626:	4b63      	ldr	r3, [pc, #396]	; (800c7b4 <HAL_RCC_ClockConfig+0x1b8>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f003 030f 	and.w	r3, r3, #15
 800c62e:	683a      	ldr	r2, [r7, #0]
 800c630:	429a      	cmp	r2, r3
 800c632:	d001      	beq.n	800c638 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c634:	2301      	movs	r3, #1
 800c636:	e0b8      	b.n	800c7aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f003 0302 	and.w	r3, r3, #2
 800c640:	2b00      	cmp	r3, #0
 800c642:	d020      	beq.n	800c686 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f003 0304 	and.w	r3, r3, #4
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d005      	beq.n	800c65c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c650:	4b59      	ldr	r3, [pc, #356]	; (800c7b8 <HAL_RCC_ClockConfig+0x1bc>)
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	4a58      	ldr	r2, [pc, #352]	; (800c7b8 <HAL_RCC_ClockConfig+0x1bc>)
 800c656:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c65a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f003 0308 	and.w	r3, r3, #8
 800c664:	2b00      	cmp	r3, #0
 800c666:	d005      	beq.n	800c674 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c668:	4b53      	ldr	r3, [pc, #332]	; (800c7b8 <HAL_RCC_ClockConfig+0x1bc>)
 800c66a:	689b      	ldr	r3, [r3, #8]
 800c66c:	4a52      	ldr	r2, [pc, #328]	; (800c7b8 <HAL_RCC_ClockConfig+0x1bc>)
 800c66e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c672:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c674:	4b50      	ldr	r3, [pc, #320]	; (800c7b8 <HAL_RCC_ClockConfig+0x1bc>)
 800c676:	689b      	ldr	r3, [r3, #8]
 800c678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	494d      	ldr	r1, [pc, #308]	; (800c7b8 <HAL_RCC_ClockConfig+0x1bc>)
 800c682:	4313      	orrs	r3, r2
 800c684:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f003 0301 	and.w	r3, r3, #1
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d044      	beq.n	800c71c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	685b      	ldr	r3, [r3, #4]
 800c696:	2b01      	cmp	r3, #1
 800c698:	d107      	bne.n	800c6aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c69a:	4b47      	ldr	r3, [pc, #284]	; (800c7b8 <HAL_RCC_ClockConfig+0x1bc>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d119      	bne.n	800c6da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	e07f      	b.n	800c7aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	2b02      	cmp	r3, #2
 800c6b0:	d003      	beq.n	800c6ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c6b6:	2b03      	cmp	r3, #3
 800c6b8:	d107      	bne.n	800c6ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c6ba:	4b3f      	ldr	r3, [pc, #252]	; (800c7b8 <HAL_RCC_ClockConfig+0x1bc>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d109      	bne.n	800c6da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	e06f      	b.n	800c7aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c6ca:	4b3b      	ldr	r3, [pc, #236]	; (800c7b8 <HAL_RCC_ClockConfig+0x1bc>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f003 0302 	and.w	r3, r3, #2
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d101      	bne.n	800c6da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	e067      	b.n	800c7aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c6da:	4b37      	ldr	r3, [pc, #220]	; (800c7b8 <HAL_RCC_ClockConfig+0x1bc>)
 800c6dc:	689b      	ldr	r3, [r3, #8]
 800c6de:	f023 0203 	bic.w	r2, r3, #3
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	4934      	ldr	r1, [pc, #208]	; (800c7b8 <HAL_RCC_ClockConfig+0x1bc>)
 800c6e8:	4313      	orrs	r3, r2
 800c6ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c6ec:	f7fd fcf0 	bl	800a0d0 <HAL_GetTick>
 800c6f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c6f2:	e00a      	b.n	800c70a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c6f4:	f7fd fcec 	bl	800a0d0 <HAL_GetTick>
 800c6f8:	4602      	mov	r2, r0
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	1ad3      	subs	r3, r2, r3
 800c6fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800c702:	4293      	cmp	r3, r2
 800c704:	d901      	bls.n	800c70a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c706:	2303      	movs	r3, #3
 800c708:	e04f      	b.n	800c7aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c70a:	4b2b      	ldr	r3, [pc, #172]	; (800c7b8 <HAL_RCC_ClockConfig+0x1bc>)
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	f003 020c 	and.w	r2, r3, #12
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	429a      	cmp	r2, r3
 800c71a:	d1eb      	bne.n	800c6f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c71c:	4b25      	ldr	r3, [pc, #148]	; (800c7b4 <HAL_RCC_ClockConfig+0x1b8>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f003 030f 	and.w	r3, r3, #15
 800c724:	683a      	ldr	r2, [r7, #0]
 800c726:	429a      	cmp	r2, r3
 800c728:	d20c      	bcs.n	800c744 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c72a:	4b22      	ldr	r3, [pc, #136]	; (800c7b4 <HAL_RCC_ClockConfig+0x1b8>)
 800c72c:	683a      	ldr	r2, [r7, #0]
 800c72e:	b2d2      	uxtb	r2, r2
 800c730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c732:	4b20      	ldr	r3, [pc, #128]	; (800c7b4 <HAL_RCC_ClockConfig+0x1b8>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f003 030f 	and.w	r3, r3, #15
 800c73a:	683a      	ldr	r2, [r7, #0]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d001      	beq.n	800c744 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c740:	2301      	movs	r3, #1
 800c742:	e032      	b.n	800c7aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f003 0304 	and.w	r3, r3, #4
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d008      	beq.n	800c762 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c750:	4b19      	ldr	r3, [pc, #100]	; (800c7b8 <HAL_RCC_ClockConfig+0x1bc>)
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	68db      	ldr	r3, [r3, #12]
 800c75c:	4916      	ldr	r1, [pc, #88]	; (800c7b8 <HAL_RCC_ClockConfig+0x1bc>)
 800c75e:	4313      	orrs	r3, r2
 800c760:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f003 0308 	and.w	r3, r3, #8
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d009      	beq.n	800c782 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c76e:	4b12      	ldr	r3, [pc, #72]	; (800c7b8 <HAL_RCC_ClockConfig+0x1bc>)
 800c770:	689b      	ldr	r3, [r3, #8]
 800c772:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	691b      	ldr	r3, [r3, #16]
 800c77a:	00db      	lsls	r3, r3, #3
 800c77c:	490e      	ldr	r1, [pc, #56]	; (800c7b8 <HAL_RCC_ClockConfig+0x1bc>)
 800c77e:	4313      	orrs	r3, r2
 800c780:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c782:	f000 f821 	bl	800c7c8 <HAL_RCC_GetSysClockFreq>
 800c786:	4601      	mov	r1, r0
 800c788:	4b0b      	ldr	r3, [pc, #44]	; (800c7b8 <HAL_RCC_ClockConfig+0x1bc>)
 800c78a:	689b      	ldr	r3, [r3, #8]
 800c78c:	091b      	lsrs	r3, r3, #4
 800c78e:	f003 030f 	and.w	r3, r3, #15
 800c792:	4a0a      	ldr	r2, [pc, #40]	; (800c7bc <HAL_RCC_ClockConfig+0x1c0>)
 800c794:	5cd3      	ldrb	r3, [r2, r3]
 800c796:	fa21 f303 	lsr.w	r3, r1, r3
 800c79a:	4a09      	ldr	r2, [pc, #36]	; (800c7c0 <HAL_RCC_ClockConfig+0x1c4>)
 800c79c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c79e:	4b09      	ldr	r3, [pc, #36]	; (800c7c4 <HAL_RCC_ClockConfig+0x1c8>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7fd fc50 	bl	800a048 <HAL_InitTick>

  return HAL_OK;
 800c7a8:	2300      	movs	r3, #0
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3710      	adds	r7, #16
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}
 800c7b2:	bf00      	nop
 800c7b4:	40023c00 	.word	0x40023c00
 800c7b8:	40023800 	.word	0x40023800
 800c7bc:	0801a3d8 	.word	0x0801a3d8
 800c7c0:	20000000 	.word	0x20000000
 800c7c4:	20000004 	.word	0x20000004

0800c7c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c7c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7ca:	b085      	sub	sp, #20
 800c7cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	607b      	str	r3, [r7, #4]
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	60fb      	str	r3, [r7, #12]
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c7de:	4b63      	ldr	r3, [pc, #396]	; (800c96c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c7e0:	689b      	ldr	r3, [r3, #8]
 800c7e2:	f003 030c 	and.w	r3, r3, #12
 800c7e6:	2b04      	cmp	r3, #4
 800c7e8:	d007      	beq.n	800c7fa <HAL_RCC_GetSysClockFreq+0x32>
 800c7ea:	2b08      	cmp	r3, #8
 800c7ec:	d008      	beq.n	800c800 <HAL_RCC_GetSysClockFreq+0x38>
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	f040 80b4 	bne.w	800c95c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c7f4:	4b5e      	ldr	r3, [pc, #376]	; (800c970 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c7f6:	60bb      	str	r3, [r7, #8]
       break;
 800c7f8:	e0b3      	b.n	800c962 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c7fa:	4b5d      	ldr	r3, [pc, #372]	; (800c970 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c7fc:	60bb      	str	r3, [r7, #8]
      break;
 800c7fe:	e0b0      	b.n	800c962 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c800:	4b5a      	ldr	r3, [pc, #360]	; (800c96c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c808:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c80a:	4b58      	ldr	r3, [pc, #352]	; (800c96c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c80c:	685b      	ldr	r3, [r3, #4]
 800c80e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c812:	2b00      	cmp	r3, #0
 800c814:	d04a      	beq.n	800c8ac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c816:	4b55      	ldr	r3, [pc, #340]	; (800c96c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	099b      	lsrs	r3, r3, #6
 800c81c:	f04f 0400 	mov.w	r4, #0
 800c820:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c824:	f04f 0200 	mov.w	r2, #0
 800c828:	ea03 0501 	and.w	r5, r3, r1
 800c82c:	ea04 0602 	and.w	r6, r4, r2
 800c830:	4629      	mov	r1, r5
 800c832:	4632      	mov	r2, r6
 800c834:	f04f 0300 	mov.w	r3, #0
 800c838:	f04f 0400 	mov.w	r4, #0
 800c83c:	0154      	lsls	r4, r2, #5
 800c83e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c842:	014b      	lsls	r3, r1, #5
 800c844:	4619      	mov	r1, r3
 800c846:	4622      	mov	r2, r4
 800c848:	1b49      	subs	r1, r1, r5
 800c84a:	eb62 0206 	sbc.w	r2, r2, r6
 800c84e:	f04f 0300 	mov.w	r3, #0
 800c852:	f04f 0400 	mov.w	r4, #0
 800c856:	0194      	lsls	r4, r2, #6
 800c858:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c85c:	018b      	lsls	r3, r1, #6
 800c85e:	1a5b      	subs	r3, r3, r1
 800c860:	eb64 0402 	sbc.w	r4, r4, r2
 800c864:	f04f 0100 	mov.w	r1, #0
 800c868:	f04f 0200 	mov.w	r2, #0
 800c86c:	00e2      	lsls	r2, r4, #3
 800c86e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c872:	00d9      	lsls	r1, r3, #3
 800c874:	460b      	mov	r3, r1
 800c876:	4614      	mov	r4, r2
 800c878:	195b      	adds	r3, r3, r5
 800c87a:	eb44 0406 	adc.w	r4, r4, r6
 800c87e:	f04f 0100 	mov.w	r1, #0
 800c882:	f04f 0200 	mov.w	r2, #0
 800c886:	02a2      	lsls	r2, r4, #10
 800c888:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c88c:	0299      	lsls	r1, r3, #10
 800c88e:	460b      	mov	r3, r1
 800c890:	4614      	mov	r4, r2
 800c892:	4618      	mov	r0, r3
 800c894:	4621      	mov	r1, r4
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f04f 0400 	mov.w	r4, #0
 800c89c:	461a      	mov	r2, r3
 800c89e:	4623      	mov	r3, r4
 800c8a0:	f7f4 fa0a 	bl	8000cb8 <__aeabi_uldivmod>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	460c      	mov	r4, r1
 800c8a8:	60fb      	str	r3, [r7, #12]
 800c8aa:	e049      	b.n	800c940 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c8ac:	4b2f      	ldr	r3, [pc, #188]	; (800c96c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	099b      	lsrs	r3, r3, #6
 800c8b2:	f04f 0400 	mov.w	r4, #0
 800c8b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c8ba:	f04f 0200 	mov.w	r2, #0
 800c8be:	ea03 0501 	and.w	r5, r3, r1
 800c8c2:	ea04 0602 	and.w	r6, r4, r2
 800c8c6:	4629      	mov	r1, r5
 800c8c8:	4632      	mov	r2, r6
 800c8ca:	f04f 0300 	mov.w	r3, #0
 800c8ce:	f04f 0400 	mov.w	r4, #0
 800c8d2:	0154      	lsls	r4, r2, #5
 800c8d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c8d8:	014b      	lsls	r3, r1, #5
 800c8da:	4619      	mov	r1, r3
 800c8dc:	4622      	mov	r2, r4
 800c8de:	1b49      	subs	r1, r1, r5
 800c8e0:	eb62 0206 	sbc.w	r2, r2, r6
 800c8e4:	f04f 0300 	mov.w	r3, #0
 800c8e8:	f04f 0400 	mov.w	r4, #0
 800c8ec:	0194      	lsls	r4, r2, #6
 800c8ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c8f2:	018b      	lsls	r3, r1, #6
 800c8f4:	1a5b      	subs	r3, r3, r1
 800c8f6:	eb64 0402 	sbc.w	r4, r4, r2
 800c8fa:	f04f 0100 	mov.w	r1, #0
 800c8fe:	f04f 0200 	mov.w	r2, #0
 800c902:	00e2      	lsls	r2, r4, #3
 800c904:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c908:	00d9      	lsls	r1, r3, #3
 800c90a:	460b      	mov	r3, r1
 800c90c:	4614      	mov	r4, r2
 800c90e:	195b      	adds	r3, r3, r5
 800c910:	eb44 0406 	adc.w	r4, r4, r6
 800c914:	f04f 0100 	mov.w	r1, #0
 800c918:	f04f 0200 	mov.w	r2, #0
 800c91c:	02a2      	lsls	r2, r4, #10
 800c91e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c922:	0299      	lsls	r1, r3, #10
 800c924:	460b      	mov	r3, r1
 800c926:	4614      	mov	r4, r2
 800c928:	4618      	mov	r0, r3
 800c92a:	4621      	mov	r1, r4
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f04f 0400 	mov.w	r4, #0
 800c932:	461a      	mov	r2, r3
 800c934:	4623      	mov	r3, r4
 800c936:	f7f4 f9bf 	bl	8000cb8 <__aeabi_uldivmod>
 800c93a:	4603      	mov	r3, r0
 800c93c:	460c      	mov	r4, r1
 800c93e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c940:	4b0a      	ldr	r3, [pc, #40]	; (800c96c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	0c1b      	lsrs	r3, r3, #16
 800c946:	f003 0303 	and.w	r3, r3, #3
 800c94a:	3301      	adds	r3, #1
 800c94c:	005b      	lsls	r3, r3, #1
 800c94e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c950:	68fa      	ldr	r2, [r7, #12]
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	fbb2 f3f3 	udiv	r3, r2, r3
 800c958:	60bb      	str	r3, [r7, #8]
      break;
 800c95a:	e002      	b.n	800c962 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c95c:	4b04      	ldr	r3, [pc, #16]	; (800c970 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c95e:	60bb      	str	r3, [r7, #8]
      break;
 800c960:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c962:	68bb      	ldr	r3, [r7, #8]
}
 800c964:	4618      	mov	r0, r3
 800c966:	3714      	adds	r7, #20
 800c968:	46bd      	mov	sp, r7
 800c96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c96c:	40023800 	.word	0x40023800
 800c970:	00f42400 	.word	0x00f42400

0800c974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c974:	b480      	push	{r7}
 800c976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c978:	4b03      	ldr	r3, [pc, #12]	; (800c988 <HAL_RCC_GetHCLKFreq+0x14>)
 800c97a:	681b      	ldr	r3, [r3, #0]
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr
 800c986:	bf00      	nop
 800c988:	20000000 	.word	0x20000000

0800c98c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c990:	f7ff fff0 	bl	800c974 <HAL_RCC_GetHCLKFreq>
 800c994:	4601      	mov	r1, r0
 800c996:	4b05      	ldr	r3, [pc, #20]	; (800c9ac <HAL_RCC_GetPCLK1Freq+0x20>)
 800c998:	689b      	ldr	r3, [r3, #8]
 800c99a:	0a9b      	lsrs	r3, r3, #10
 800c99c:	f003 0307 	and.w	r3, r3, #7
 800c9a0:	4a03      	ldr	r2, [pc, #12]	; (800c9b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c9a2:	5cd3      	ldrb	r3, [r2, r3]
 800c9a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	bd80      	pop	{r7, pc}
 800c9ac:	40023800 	.word	0x40023800
 800c9b0:	0801a3e8 	.word	0x0801a3e8

0800c9b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c9b8:	f7ff ffdc 	bl	800c974 <HAL_RCC_GetHCLKFreq>
 800c9bc:	4601      	mov	r1, r0
 800c9be:	4b05      	ldr	r3, [pc, #20]	; (800c9d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c9c0:	689b      	ldr	r3, [r3, #8]
 800c9c2:	0b5b      	lsrs	r3, r3, #13
 800c9c4:	f003 0307 	and.w	r3, r3, #7
 800c9c8:	4a03      	ldr	r2, [pc, #12]	; (800c9d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c9ca:	5cd3      	ldrb	r3, [r2, r3]
 800c9cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	bd80      	pop	{r7, pc}
 800c9d4:	40023800 	.word	0x40023800
 800c9d8:	0801a3e8 	.word	0x0801a3e8

0800c9dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b088      	sub	sp, #32
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d00a      	beq.n	800ca1a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ca04:	4b66      	ldr	r3, [pc, #408]	; (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ca06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca0a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca12:	4963      	ldr	r1, [pc, #396]	; (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ca14:	4313      	orrs	r3, r2
 800ca16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d00a      	beq.n	800ca3c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800ca26:	4b5e      	ldr	r3, [pc, #376]	; (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ca28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca2c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca34:	495a      	ldr	r1, [pc, #360]	; (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ca36:	4313      	orrs	r3, r2
 800ca38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f003 0301 	and.w	r3, r3, #1
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d10b      	bne.n	800ca60 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d105      	bne.n	800ca60 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d075      	beq.n	800cb4c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ca60:	4b50      	ldr	r3, [pc, #320]	; (800cba4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800ca62:	2200      	movs	r2, #0
 800ca64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ca66:	f7fd fb33 	bl	800a0d0 <HAL_GetTick>
 800ca6a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ca6c:	e008      	b.n	800ca80 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800ca6e:	f7fd fb2f 	bl	800a0d0 <HAL_GetTick>
 800ca72:	4602      	mov	r2, r0
 800ca74:	69fb      	ldr	r3, [r7, #28]
 800ca76:	1ad3      	subs	r3, r2, r3
 800ca78:	2b02      	cmp	r3, #2
 800ca7a:	d901      	bls.n	800ca80 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ca7c:	2303      	movs	r3, #3
 800ca7e:	e1dc      	b.n	800ce3a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ca80:	4b47      	ldr	r3, [pc, #284]	; (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d1f0      	bne.n	800ca6e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f003 0301 	and.w	r3, r3, #1
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d009      	beq.n	800caac <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	019a      	lsls	r2, r3, #6
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	689b      	ldr	r3, [r3, #8]
 800caa2:	071b      	lsls	r3, r3, #28
 800caa4:	493e      	ldr	r1, [pc, #248]	; (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800caa6:	4313      	orrs	r3, r2
 800caa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f003 0302 	and.w	r3, r3, #2
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d01f      	beq.n	800caf8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800cab8:	4b39      	ldr	r3, [pc, #228]	; (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800caba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cabe:	0f1b      	lsrs	r3, r3, #28
 800cac0:	f003 0307 	and.w	r3, r3, #7
 800cac4:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	019a      	lsls	r2, r3, #6
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	061b      	lsls	r3, r3, #24
 800cad2:	431a      	orrs	r2, r3
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	071b      	lsls	r3, r3, #28
 800cad8:	4931      	ldr	r1, [pc, #196]	; (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800cada:	4313      	orrs	r3, r2
 800cadc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800cae0:	4b2f      	ldr	r3, [pc, #188]	; (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800cae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cae6:	f023 021f 	bic.w	r2, r3, #31
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6a1b      	ldr	r3, [r3, #32]
 800caee:	3b01      	subs	r3, #1
 800caf0:	492b      	ldr	r1, [pc, #172]	; (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800caf2:	4313      	orrs	r3, r2
 800caf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d00d      	beq.n	800cb20 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	685b      	ldr	r3, [r3, #4]
 800cb08:	019a      	lsls	r2, r3, #6
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	061b      	lsls	r3, r3, #24
 800cb10:	431a      	orrs	r2, r3
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	689b      	ldr	r3, [r3, #8]
 800cb16:	071b      	lsls	r3, r3, #28
 800cb18:	4921      	ldr	r1, [pc, #132]	; (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800cb20:	4b20      	ldr	r3, [pc, #128]	; (800cba4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800cb22:	2201      	movs	r2, #1
 800cb24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cb26:	f7fd fad3 	bl	800a0d0 <HAL_GetTick>
 800cb2a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800cb2c:	e008      	b.n	800cb40 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800cb2e:	f7fd facf 	bl	800a0d0 <HAL_GetTick>
 800cb32:	4602      	mov	r2, r0
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	1ad3      	subs	r3, r2, r3
 800cb38:	2b02      	cmp	r3, #2
 800cb3a:	d901      	bls.n	800cb40 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cb3c:	2303      	movs	r3, #3
 800cb3e:	e17c      	b.n	800ce3a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800cb40:	4b17      	ldr	r3, [pc, #92]	; (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d0f0      	beq.n	800cb2e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f003 0304 	and.w	r3, r3, #4
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d112      	bne.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d10c      	bne.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	f000 80ce 	beq.w	800cd0e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800cb76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb7a:	f040 80c8 	bne.w	800cd0e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800cb7e:	4b0a      	ldr	r3, [pc, #40]	; (800cba8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800cb80:	2200      	movs	r2, #0
 800cb82:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cb84:	f7fd faa4 	bl	800a0d0 <HAL_GetTick>
 800cb88:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800cb8a:	e00f      	b.n	800cbac <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800cb8c:	f7fd faa0 	bl	800a0d0 <HAL_GetTick>
 800cb90:	4602      	mov	r2, r0
 800cb92:	69fb      	ldr	r3, [r7, #28]
 800cb94:	1ad3      	subs	r3, r2, r3
 800cb96:	2b02      	cmp	r3, #2
 800cb98:	d908      	bls.n	800cbac <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cb9a:	2303      	movs	r3, #3
 800cb9c:	e14d      	b.n	800ce3a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800cb9e:	bf00      	nop
 800cba0:	40023800 	.word	0x40023800
 800cba4:	42470068 	.word	0x42470068
 800cba8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800cbac:	4ba5      	ldr	r3, [pc, #660]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbb8:	d0e8      	beq.n	800cb8c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f003 0304 	and.w	r3, r3, #4
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d02e      	beq.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800cbc6:	4b9f      	ldr	r3, [pc, #636]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbcc:	0c1b      	lsrs	r3, r3, #16
 800cbce:	f003 0303 	and.w	r3, r3, #3
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	005b      	lsls	r3, r3, #1
 800cbd6:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800cbd8:	4b9a      	ldr	r3, [pc, #616]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbde:	0f1b      	lsrs	r3, r3, #28
 800cbe0:	f003 0307 	and.w	r3, r3, #7
 800cbe4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	691b      	ldr	r3, [r3, #16]
 800cbea:	019a      	lsls	r2, r3, #6
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	085b      	lsrs	r3, r3, #1
 800cbf0:	3b01      	subs	r3, #1
 800cbf2:	041b      	lsls	r3, r3, #16
 800cbf4:	431a      	orrs	r2, r3
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	699b      	ldr	r3, [r3, #24]
 800cbfa:	061b      	lsls	r3, r3, #24
 800cbfc:	431a      	orrs	r2, r3
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	071b      	lsls	r3, r3, #28
 800cc02:	4990      	ldr	r1, [pc, #576]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc04:	4313      	orrs	r3, r2
 800cc06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800cc0a:	4b8e      	ldr	r3, [pc, #568]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc10:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc18:	3b01      	subs	r3, #1
 800cc1a:	021b      	lsls	r3, r3, #8
 800cc1c:	4989      	ldr	r1, [pc, #548]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc1e:	4313      	orrs	r3, r2
 800cc20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f003 0308 	and.w	r3, r3, #8
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d02c      	beq.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800cc30:	4b84      	ldr	r3, [pc, #528]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc36:	0c1b      	lsrs	r3, r3, #16
 800cc38:	f003 0303 	and.w	r3, r3, #3
 800cc3c:	3301      	adds	r3, #1
 800cc3e:	005b      	lsls	r3, r3, #1
 800cc40:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cc42:	4b80      	ldr	r3, [pc, #512]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc48:	0e1b      	lsrs	r3, r3, #24
 800cc4a:	f003 030f 	and.w	r3, r3, #15
 800cc4e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	691b      	ldr	r3, [r3, #16]
 800cc54:	019a      	lsls	r2, r3, #6
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	085b      	lsrs	r3, r3, #1
 800cc5a:	3b01      	subs	r3, #1
 800cc5c:	041b      	lsls	r3, r3, #16
 800cc5e:	431a      	orrs	r2, r3
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	061b      	lsls	r3, r3, #24
 800cc64:	431a      	orrs	r2, r3
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	69db      	ldr	r3, [r3, #28]
 800cc6a:	071b      	lsls	r3, r3, #28
 800cc6c:	4975      	ldr	r1, [pc, #468]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc6e:	4313      	orrs	r3, r2
 800cc70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800cc74:	4b73      	ldr	r3, [pc, #460]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc82:	4970      	ldr	r1, [pc, #448]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc84:	4313      	orrs	r3, r2
 800cc86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d024      	beq.n	800cce0 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800cc9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc9e:	d11f      	bne.n	800cce0 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cca0:	4b68      	ldr	r3, [pc, #416]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cca6:	0e1b      	lsrs	r3, r3, #24
 800cca8:	f003 030f 	and.w	r3, r3, #15
 800ccac:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ccae:	4b65      	ldr	r3, [pc, #404]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ccb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccb4:	0f1b      	lsrs	r3, r3, #28
 800ccb6:	f003 0307 	and.w	r3, r3, #7
 800ccba:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	691b      	ldr	r3, [r3, #16]
 800ccc0:	019a      	lsls	r2, r3, #6
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	695b      	ldr	r3, [r3, #20]
 800ccc6:	085b      	lsrs	r3, r3, #1
 800ccc8:	3b01      	subs	r3, #1
 800ccca:	041b      	lsls	r3, r3, #16
 800cccc:	431a      	orrs	r2, r3
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	061b      	lsls	r3, r3, #24
 800ccd2:	431a      	orrs	r2, r3
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	071b      	lsls	r3, r3, #28
 800ccd8:	495a      	ldr	r1, [pc, #360]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800cce0:	4b59      	ldr	r3, [pc, #356]	; (800ce48 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800cce2:	2201      	movs	r2, #1
 800cce4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cce6:	f7fd f9f3 	bl	800a0d0 <HAL_GetTick>
 800ccea:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ccec:	e008      	b.n	800cd00 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800ccee:	f7fd f9ef 	bl	800a0d0 <HAL_GetTick>
 800ccf2:	4602      	mov	r2, r0
 800ccf4:	69fb      	ldr	r3, [r7, #28]
 800ccf6:	1ad3      	subs	r3, r2, r3
 800ccf8:	2b02      	cmp	r3, #2
 800ccfa:	d901      	bls.n	800cd00 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ccfc:	2303      	movs	r3, #3
 800ccfe:	e09c      	b.n	800ce3a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cd00:	4b50      	ldr	r3, [pc, #320]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd0c:	d1ef      	bne.n	800ccee <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f003 0320 	and.w	r3, r3, #32
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	f000 8083 	beq.w	800ce22 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	60bb      	str	r3, [r7, #8]
 800cd20:	4b48      	ldr	r3, [pc, #288]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cd22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd24:	4a47      	ldr	r2, [pc, #284]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cd26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd2a:	6413      	str	r3, [r2, #64]	; 0x40
 800cd2c:	4b45      	ldr	r3, [pc, #276]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cd2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd34:	60bb      	str	r3, [r7, #8]
 800cd36:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800cd38:	4b44      	ldr	r3, [pc, #272]	; (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a43      	ldr	r2, [pc, #268]	; (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cd3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd42:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cd44:	f7fd f9c4 	bl	800a0d0 <HAL_GetTick>
 800cd48:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cd4a:	e008      	b.n	800cd5e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800cd4c:	f7fd f9c0 	bl	800a0d0 <HAL_GetTick>
 800cd50:	4602      	mov	r2, r0
 800cd52:	69fb      	ldr	r3, [r7, #28]
 800cd54:	1ad3      	subs	r3, r2, r3
 800cd56:	2b02      	cmp	r3, #2
 800cd58:	d901      	bls.n	800cd5e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800cd5a:	2303      	movs	r3, #3
 800cd5c:	e06d      	b.n	800ce3a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cd5e:	4b3b      	ldr	r3, [pc, #236]	; (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d0f0      	beq.n	800cd4c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cd6a:	4b36      	ldr	r3, [pc, #216]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cd6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd72:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cd74:	69bb      	ldr	r3, [r7, #24]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d02f      	beq.n	800cdda <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd82:	69ba      	ldr	r2, [r7, #24]
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d028      	beq.n	800cdda <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cd88:	4b2e      	ldr	r3, [pc, #184]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cd8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd90:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cd92:	4b2f      	ldr	r3, [pc, #188]	; (800ce50 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800cd94:	2201      	movs	r2, #1
 800cd96:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cd98:	4b2d      	ldr	r3, [pc, #180]	; (800ce50 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800cd9e:	4a29      	ldr	r2, [pc, #164]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cda0:	69bb      	ldr	r3, [r7, #24]
 800cda2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cda4:	4b27      	ldr	r3, [pc, #156]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cda6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cda8:	f003 0301 	and.w	r3, r3, #1
 800cdac:	2b01      	cmp	r3, #1
 800cdae:	d114      	bne.n	800cdda <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800cdb0:	f7fd f98e 	bl	800a0d0 <HAL_GetTick>
 800cdb4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cdb6:	e00a      	b.n	800cdce <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cdb8:	f7fd f98a 	bl	800a0d0 <HAL_GetTick>
 800cdbc:	4602      	mov	r2, r0
 800cdbe:	69fb      	ldr	r3, [r7, #28]
 800cdc0:	1ad3      	subs	r3, r2, r3
 800cdc2:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d901      	bls.n	800cdce <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800cdca:	2303      	movs	r3, #3
 800cdcc:	e035      	b.n	800ce3a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cdce:	4b1d      	ldr	r3, [pc, #116]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cdd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdd2:	f003 0302 	and.w	r3, r3, #2
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d0ee      	beq.n	800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cde2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cde6:	d10d      	bne.n	800ce04 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800cde8:	4b16      	ldr	r3, [pc, #88]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cdea:	689b      	ldr	r3, [r3, #8]
 800cdec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdf4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cdf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdfc:	4911      	ldr	r1, [pc, #68]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	608b      	str	r3, [r1, #8]
 800ce02:	e005      	b.n	800ce10 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800ce04:	4b0f      	ldr	r3, [pc, #60]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ce06:	689b      	ldr	r3, [r3, #8]
 800ce08:	4a0e      	ldr	r2, [pc, #56]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ce0a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ce0e:	6093      	str	r3, [r2, #8]
 800ce10:	4b0c      	ldr	r3, [pc, #48]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ce12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce1c:	4909      	ldr	r1, [pc, #36]	; (800ce44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f003 0310 	and.w	r3, r3, #16
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d004      	beq.n	800ce38 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ce34:	4b07      	ldr	r3, [pc, #28]	; (800ce54 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800ce36:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800ce38:	2300      	movs	r3, #0
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3720      	adds	r7, #32
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop
 800ce44:	40023800 	.word	0x40023800
 800ce48:	42470070 	.word	0x42470070
 800ce4c:	40007000 	.word	0x40007000
 800ce50:	42470e40 	.word	0x42470e40
 800ce54:	424711e0 	.word	0x424711e0

0800ce58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b086      	sub	sp, #24
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ce60:	2300      	movs	r3, #0
 800ce62:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f003 0301 	and.w	r3, r3, #1
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d075      	beq.n	800cf5c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ce70:	4ba2      	ldr	r3, [pc, #648]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800ce72:	689b      	ldr	r3, [r3, #8]
 800ce74:	f003 030c 	and.w	r3, r3, #12
 800ce78:	2b04      	cmp	r3, #4
 800ce7a:	d00c      	beq.n	800ce96 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ce7c:	4b9f      	ldr	r3, [pc, #636]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800ce7e:	689b      	ldr	r3, [r3, #8]
 800ce80:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ce84:	2b08      	cmp	r3, #8
 800ce86:	d112      	bne.n	800ceae <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ce88:	4b9c      	ldr	r3, [pc, #624]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce94:	d10b      	bne.n	800ceae <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ce96:	4b99      	ldr	r3, [pc, #612]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d05b      	beq.n	800cf5a <HAL_RCC_OscConfig+0x102>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	685b      	ldr	r3, [r3, #4]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d157      	bne.n	800cf5a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	e20b      	b.n	800d2c6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	685b      	ldr	r3, [r3, #4]
 800ceb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ceb6:	d106      	bne.n	800cec6 <HAL_RCC_OscConfig+0x6e>
 800ceb8:	4b90      	ldr	r3, [pc, #576]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4a8f      	ldr	r2, [pc, #572]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800cebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cec2:	6013      	str	r3, [r2, #0]
 800cec4:	e01d      	b.n	800cf02 <HAL_RCC_OscConfig+0xaa>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cece:	d10c      	bne.n	800ceea <HAL_RCC_OscConfig+0x92>
 800ced0:	4b8a      	ldr	r3, [pc, #552]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4a89      	ldr	r2, [pc, #548]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800ced6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ceda:	6013      	str	r3, [r2, #0]
 800cedc:	4b87      	ldr	r3, [pc, #540]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	4a86      	ldr	r2, [pc, #536]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800cee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cee6:	6013      	str	r3, [r2, #0]
 800cee8:	e00b      	b.n	800cf02 <HAL_RCC_OscConfig+0xaa>
 800ceea:	4b84      	ldr	r3, [pc, #528]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4a83      	ldr	r2, [pc, #524]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800cef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cef4:	6013      	str	r3, [r2, #0]
 800cef6:	4b81      	ldr	r3, [pc, #516]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	4a80      	ldr	r2, [pc, #512]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800cefc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cf00:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d013      	beq.n	800cf32 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf0a:	f7fd f8e1 	bl	800a0d0 <HAL_GetTick>
 800cf0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cf10:	e008      	b.n	800cf24 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cf12:	f7fd f8dd 	bl	800a0d0 <HAL_GetTick>
 800cf16:	4602      	mov	r2, r0
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	1ad3      	subs	r3, r2, r3
 800cf1c:	2b64      	cmp	r3, #100	; 0x64
 800cf1e:	d901      	bls.n	800cf24 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800cf20:	2303      	movs	r3, #3
 800cf22:	e1d0      	b.n	800d2c6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cf24:	4b75      	ldr	r3, [pc, #468]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d0f0      	beq.n	800cf12 <HAL_RCC_OscConfig+0xba>
 800cf30:	e014      	b.n	800cf5c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf32:	f7fd f8cd 	bl	800a0d0 <HAL_GetTick>
 800cf36:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cf38:	e008      	b.n	800cf4c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cf3a:	f7fd f8c9 	bl	800a0d0 <HAL_GetTick>
 800cf3e:	4602      	mov	r2, r0
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	1ad3      	subs	r3, r2, r3
 800cf44:	2b64      	cmp	r3, #100	; 0x64
 800cf46:	d901      	bls.n	800cf4c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800cf48:	2303      	movs	r3, #3
 800cf4a:	e1bc      	b.n	800d2c6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cf4c:	4b6b      	ldr	r3, [pc, #428]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d1f0      	bne.n	800cf3a <HAL_RCC_OscConfig+0xe2>
 800cf58:	e000      	b.n	800cf5c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cf5a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f003 0302 	and.w	r3, r3, #2
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d063      	beq.n	800d030 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cf68:	4b64      	ldr	r3, [pc, #400]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800cf6a:	689b      	ldr	r3, [r3, #8]
 800cf6c:	f003 030c 	and.w	r3, r3, #12
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d00b      	beq.n	800cf8c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cf74:	4b61      	ldr	r3, [pc, #388]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800cf76:	689b      	ldr	r3, [r3, #8]
 800cf78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cf7c:	2b08      	cmp	r3, #8
 800cf7e:	d11c      	bne.n	800cfba <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cf80:	4b5e      	ldr	r3, [pc, #376]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d116      	bne.n	800cfba <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cf8c:	4b5b      	ldr	r3, [pc, #364]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f003 0302 	and.w	r3, r3, #2
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d005      	beq.n	800cfa4 <HAL_RCC_OscConfig+0x14c>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	68db      	ldr	r3, [r3, #12]
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d001      	beq.n	800cfa4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	e190      	b.n	800d2c6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cfa4:	4b55      	ldr	r3, [pc, #340]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	691b      	ldr	r3, [r3, #16]
 800cfb0:	00db      	lsls	r3, r3, #3
 800cfb2:	4952      	ldr	r1, [pc, #328]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cfb8:	e03a      	b.n	800d030 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	68db      	ldr	r3, [r3, #12]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d020      	beq.n	800d004 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cfc2:	4b4f      	ldr	r3, [pc, #316]	; (800d100 <HAL_RCC_OscConfig+0x2a8>)
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfc8:	f7fd f882 	bl	800a0d0 <HAL_GetTick>
 800cfcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cfce:	e008      	b.n	800cfe2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cfd0:	f7fd f87e 	bl	800a0d0 <HAL_GetTick>
 800cfd4:	4602      	mov	r2, r0
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	1ad3      	subs	r3, r2, r3
 800cfda:	2b02      	cmp	r3, #2
 800cfdc:	d901      	bls.n	800cfe2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800cfde:	2303      	movs	r3, #3
 800cfe0:	e171      	b.n	800d2c6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cfe2:	4b46      	ldr	r3, [pc, #280]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f003 0302 	and.w	r3, r3, #2
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d0f0      	beq.n	800cfd0 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cfee:	4b43      	ldr	r3, [pc, #268]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	691b      	ldr	r3, [r3, #16]
 800cffa:	00db      	lsls	r3, r3, #3
 800cffc:	493f      	ldr	r1, [pc, #252]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800cffe:	4313      	orrs	r3, r2
 800d000:	600b      	str	r3, [r1, #0]
 800d002:	e015      	b.n	800d030 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d004:	4b3e      	ldr	r3, [pc, #248]	; (800d100 <HAL_RCC_OscConfig+0x2a8>)
 800d006:	2200      	movs	r2, #0
 800d008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d00a:	f7fd f861 	bl	800a0d0 <HAL_GetTick>
 800d00e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d010:	e008      	b.n	800d024 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d012:	f7fd f85d 	bl	800a0d0 <HAL_GetTick>
 800d016:	4602      	mov	r2, r0
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	1ad3      	subs	r3, r2, r3
 800d01c:	2b02      	cmp	r3, #2
 800d01e:	d901      	bls.n	800d024 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800d020:	2303      	movs	r3, #3
 800d022:	e150      	b.n	800d2c6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d024:	4b35      	ldr	r3, [pc, #212]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	f003 0302 	and.w	r3, r3, #2
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d1f0      	bne.n	800d012 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	f003 0308 	and.w	r3, r3, #8
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d030      	beq.n	800d09e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	695b      	ldr	r3, [r3, #20]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d016      	beq.n	800d072 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d044:	4b2f      	ldr	r3, [pc, #188]	; (800d104 <HAL_RCC_OscConfig+0x2ac>)
 800d046:	2201      	movs	r2, #1
 800d048:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d04a:	f7fd f841 	bl	800a0d0 <HAL_GetTick>
 800d04e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d050:	e008      	b.n	800d064 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d052:	f7fd f83d 	bl	800a0d0 <HAL_GetTick>
 800d056:	4602      	mov	r2, r0
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	1ad3      	subs	r3, r2, r3
 800d05c:	2b02      	cmp	r3, #2
 800d05e:	d901      	bls.n	800d064 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800d060:	2303      	movs	r3, #3
 800d062:	e130      	b.n	800d2c6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d064:	4b25      	ldr	r3, [pc, #148]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800d066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d068:	f003 0302 	and.w	r3, r3, #2
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d0f0      	beq.n	800d052 <HAL_RCC_OscConfig+0x1fa>
 800d070:	e015      	b.n	800d09e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d072:	4b24      	ldr	r3, [pc, #144]	; (800d104 <HAL_RCC_OscConfig+0x2ac>)
 800d074:	2200      	movs	r2, #0
 800d076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d078:	f7fd f82a 	bl	800a0d0 <HAL_GetTick>
 800d07c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d07e:	e008      	b.n	800d092 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d080:	f7fd f826 	bl	800a0d0 <HAL_GetTick>
 800d084:	4602      	mov	r2, r0
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	1ad3      	subs	r3, r2, r3
 800d08a:	2b02      	cmp	r3, #2
 800d08c:	d901      	bls.n	800d092 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800d08e:	2303      	movs	r3, #3
 800d090:	e119      	b.n	800d2c6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d092:	4b1a      	ldr	r3, [pc, #104]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800d094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d096:	f003 0302 	and.w	r3, r3, #2
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d1f0      	bne.n	800d080 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	f003 0304 	and.w	r3, r3, #4
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	f000 809f 	beq.w	800d1ea <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d0b0:	4b12      	ldr	r3, [pc, #72]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800d0b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d10f      	bne.n	800d0dc <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d0bc:	2300      	movs	r3, #0
 800d0be:	60fb      	str	r3, [r7, #12]
 800d0c0:	4b0e      	ldr	r3, [pc, #56]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800d0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c4:	4a0d      	ldr	r2, [pc, #52]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800d0c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0ca:	6413      	str	r3, [r2, #64]	; 0x40
 800d0cc:	4b0b      	ldr	r3, [pc, #44]	; (800d0fc <HAL_RCC_OscConfig+0x2a4>)
 800d0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d0d4:	60fb      	str	r3, [r7, #12]
 800d0d6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800d0d8:	2301      	movs	r3, #1
 800d0da:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d0dc:	4b0a      	ldr	r3, [pc, #40]	; (800d108 <HAL_RCC_OscConfig+0x2b0>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d120      	bne.n	800d12a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d0e8:	4b07      	ldr	r3, [pc, #28]	; (800d108 <HAL_RCC_OscConfig+0x2b0>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4a06      	ldr	r2, [pc, #24]	; (800d108 <HAL_RCC_OscConfig+0x2b0>)
 800d0ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d0f4:	f7fc ffec 	bl	800a0d0 <HAL_GetTick>
 800d0f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d0fa:	e010      	b.n	800d11e <HAL_RCC_OscConfig+0x2c6>
 800d0fc:	40023800 	.word	0x40023800
 800d100:	42470000 	.word	0x42470000
 800d104:	42470e80 	.word	0x42470e80
 800d108:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d10c:	f7fc ffe0 	bl	800a0d0 <HAL_GetTick>
 800d110:	4602      	mov	r2, r0
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	1ad3      	subs	r3, r2, r3
 800d116:	2b02      	cmp	r3, #2
 800d118:	d901      	bls.n	800d11e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800d11a:	2303      	movs	r3, #3
 800d11c:	e0d3      	b.n	800d2c6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d11e:	4b6c      	ldr	r3, [pc, #432]	; (800d2d0 <HAL_RCC_OscConfig+0x478>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d126:	2b00      	cmp	r3, #0
 800d128:	d0f0      	beq.n	800d10c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	689b      	ldr	r3, [r3, #8]
 800d12e:	2b01      	cmp	r3, #1
 800d130:	d106      	bne.n	800d140 <HAL_RCC_OscConfig+0x2e8>
 800d132:	4b68      	ldr	r3, [pc, #416]	; (800d2d4 <HAL_RCC_OscConfig+0x47c>)
 800d134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d136:	4a67      	ldr	r2, [pc, #412]	; (800d2d4 <HAL_RCC_OscConfig+0x47c>)
 800d138:	f043 0301 	orr.w	r3, r3, #1
 800d13c:	6713      	str	r3, [r2, #112]	; 0x70
 800d13e:	e01c      	b.n	800d17a <HAL_RCC_OscConfig+0x322>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	689b      	ldr	r3, [r3, #8]
 800d144:	2b05      	cmp	r3, #5
 800d146:	d10c      	bne.n	800d162 <HAL_RCC_OscConfig+0x30a>
 800d148:	4b62      	ldr	r3, [pc, #392]	; (800d2d4 <HAL_RCC_OscConfig+0x47c>)
 800d14a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d14c:	4a61      	ldr	r2, [pc, #388]	; (800d2d4 <HAL_RCC_OscConfig+0x47c>)
 800d14e:	f043 0304 	orr.w	r3, r3, #4
 800d152:	6713      	str	r3, [r2, #112]	; 0x70
 800d154:	4b5f      	ldr	r3, [pc, #380]	; (800d2d4 <HAL_RCC_OscConfig+0x47c>)
 800d156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d158:	4a5e      	ldr	r2, [pc, #376]	; (800d2d4 <HAL_RCC_OscConfig+0x47c>)
 800d15a:	f043 0301 	orr.w	r3, r3, #1
 800d15e:	6713      	str	r3, [r2, #112]	; 0x70
 800d160:	e00b      	b.n	800d17a <HAL_RCC_OscConfig+0x322>
 800d162:	4b5c      	ldr	r3, [pc, #368]	; (800d2d4 <HAL_RCC_OscConfig+0x47c>)
 800d164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d166:	4a5b      	ldr	r2, [pc, #364]	; (800d2d4 <HAL_RCC_OscConfig+0x47c>)
 800d168:	f023 0301 	bic.w	r3, r3, #1
 800d16c:	6713      	str	r3, [r2, #112]	; 0x70
 800d16e:	4b59      	ldr	r3, [pc, #356]	; (800d2d4 <HAL_RCC_OscConfig+0x47c>)
 800d170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d172:	4a58      	ldr	r2, [pc, #352]	; (800d2d4 <HAL_RCC_OscConfig+0x47c>)
 800d174:	f023 0304 	bic.w	r3, r3, #4
 800d178:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	689b      	ldr	r3, [r3, #8]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d015      	beq.n	800d1ae <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d182:	f7fc ffa5 	bl	800a0d0 <HAL_GetTick>
 800d186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d188:	e00a      	b.n	800d1a0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d18a:	f7fc ffa1 	bl	800a0d0 <HAL_GetTick>
 800d18e:	4602      	mov	r2, r0
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	1ad3      	subs	r3, r2, r3
 800d194:	f241 3288 	movw	r2, #5000	; 0x1388
 800d198:	4293      	cmp	r3, r2
 800d19a:	d901      	bls.n	800d1a0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800d19c:	2303      	movs	r3, #3
 800d19e:	e092      	b.n	800d2c6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d1a0:	4b4c      	ldr	r3, [pc, #304]	; (800d2d4 <HAL_RCC_OscConfig+0x47c>)
 800d1a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1a4:	f003 0302 	and.w	r3, r3, #2
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d0ee      	beq.n	800d18a <HAL_RCC_OscConfig+0x332>
 800d1ac:	e014      	b.n	800d1d8 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d1ae:	f7fc ff8f 	bl	800a0d0 <HAL_GetTick>
 800d1b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d1b4:	e00a      	b.n	800d1cc <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d1b6:	f7fc ff8b 	bl	800a0d0 <HAL_GetTick>
 800d1ba:	4602      	mov	r2, r0
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	1ad3      	subs	r3, r2, r3
 800d1c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1c4:	4293      	cmp	r3, r2
 800d1c6:	d901      	bls.n	800d1cc <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800d1c8:	2303      	movs	r3, #3
 800d1ca:	e07c      	b.n	800d2c6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d1cc:	4b41      	ldr	r3, [pc, #260]	; (800d2d4 <HAL_RCC_OscConfig+0x47c>)
 800d1ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1d0:	f003 0302 	and.w	r3, r3, #2
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d1ee      	bne.n	800d1b6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d1d8:	7dfb      	ldrb	r3, [r7, #23]
 800d1da:	2b01      	cmp	r3, #1
 800d1dc:	d105      	bne.n	800d1ea <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d1de:	4b3d      	ldr	r3, [pc, #244]	; (800d2d4 <HAL_RCC_OscConfig+0x47c>)
 800d1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1e2:	4a3c      	ldr	r2, [pc, #240]	; (800d2d4 <HAL_RCC_OscConfig+0x47c>)
 800d1e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d1e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	699b      	ldr	r3, [r3, #24]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d068      	beq.n	800d2c4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d1f2:	4b38      	ldr	r3, [pc, #224]	; (800d2d4 <HAL_RCC_OscConfig+0x47c>)
 800d1f4:	689b      	ldr	r3, [r3, #8]
 800d1f6:	f003 030c 	and.w	r3, r3, #12
 800d1fa:	2b08      	cmp	r3, #8
 800d1fc:	d060      	beq.n	800d2c0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	699b      	ldr	r3, [r3, #24]
 800d202:	2b02      	cmp	r3, #2
 800d204:	d145      	bne.n	800d292 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d206:	4b34      	ldr	r3, [pc, #208]	; (800d2d8 <HAL_RCC_OscConfig+0x480>)
 800d208:	2200      	movs	r2, #0
 800d20a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d20c:	f7fc ff60 	bl	800a0d0 <HAL_GetTick>
 800d210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d212:	e008      	b.n	800d226 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d214:	f7fc ff5c 	bl	800a0d0 <HAL_GetTick>
 800d218:	4602      	mov	r2, r0
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	1ad3      	subs	r3, r2, r3
 800d21e:	2b02      	cmp	r3, #2
 800d220:	d901      	bls.n	800d226 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800d222:	2303      	movs	r3, #3
 800d224:	e04f      	b.n	800d2c6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d226:	4b2b      	ldr	r3, [pc, #172]	; (800d2d4 <HAL_RCC_OscConfig+0x47c>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d1f0      	bne.n	800d214 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	69da      	ldr	r2, [r3, #28]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6a1b      	ldr	r3, [r3, #32]
 800d23a:	431a      	orrs	r2, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d240:	019b      	lsls	r3, r3, #6
 800d242:	431a      	orrs	r2, r3
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d248:	085b      	lsrs	r3, r3, #1
 800d24a:	3b01      	subs	r3, #1
 800d24c:	041b      	lsls	r3, r3, #16
 800d24e:	431a      	orrs	r2, r3
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d254:	061b      	lsls	r3, r3, #24
 800d256:	431a      	orrs	r2, r3
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d25c:	071b      	lsls	r3, r3, #28
 800d25e:	491d      	ldr	r1, [pc, #116]	; (800d2d4 <HAL_RCC_OscConfig+0x47c>)
 800d260:	4313      	orrs	r3, r2
 800d262:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d264:	4b1c      	ldr	r3, [pc, #112]	; (800d2d8 <HAL_RCC_OscConfig+0x480>)
 800d266:	2201      	movs	r2, #1
 800d268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d26a:	f7fc ff31 	bl	800a0d0 <HAL_GetTick>
 800d26e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d270:	e008      	b.n	800d284 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d272:	f7fc ff2d 	bl	800a0d0 <HAL_GetTick>
 800d276:	4602      	mov	r2, r0
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	1ad3      	subs	r3, r2, r3
 800d27c:	2b02      	cmp	r3, #2
 800d27e:	d901      	bls.n	800d284 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800d280:	2303      	movs	r3, #3
 800d282:	e020      	b.n	800d2c6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d284:	4b13      	ldr	r3, [pc, #76]	; (800d2d4 <HAL_RCC_OscConfig+0x47c>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d0f0      	beq.n	800d272 <HAL_RCC_OscConfig+0x41a>
 800d290:	e018      	b.n	800d2c4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d292:	4b11      	ldr	r3, [pc, #68]	; (800d2d8 <HAL_RCC_OscConfig+0x480>)
 800d294:	2200      	movs	r2, #0
 800d296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d298:	f7fc ff1a 	bl	800a0d0 <HAL_GetTick>
 800d29c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d29e:	e008      	b.n	800d2b2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d2a0:	f7fc ff16 	bl	800a0d0 <HAL_GetTick>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	1ad3      	subs	r3, r2, r3
 800d2aa:	2b02      	cmp	r3, #2
 800d2ac:	d901      	bls.n	800d2b2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800d2ae:	2303      	movs	r3, #3
 800d2b0:	e009      	b.n	800d2c6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d2b2:	4b08      	ldr	r3, [pc, #32]	; (800d2d4 <HAL_RCC_OscConfig+0x47c>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d1f0      	bne.n	800d2a0 <HAL_RCC_OscConfig+0x448>
 800d2be:	e001      	b.n	800d2c4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	e000      	b.n	800d2c6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800d2c4:	2300      	movs	r3, #0
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3718      	adds	r7, #24
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}
 800d2ce:	bf00      	nop
 800d2d0:	40007000 	.word	0x40007000
 800d2d4:	40023800 	.word	0x40023800
 800d2d8:	42470060 	.word	0x42470060

0800d2dc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b082      	sub	sp, #8
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d101      	bne.n	800d2ee <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	e022      	b.n	800d334 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d105      	bne.n	800d306 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f7fa f895 	bl	8007430 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2203      	movs	r2, #3
 800d30a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 f814 	bl	800d33c <HAL_SD_InitCard>
 800d314:	4603      	mov	r3, r0
 800d316:	2b00      	cmp	r3, #0
 800d318:	d001      	beq.n	800d31e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d31a:	2301      	movs	r3, #1
 800d31c:	e00a      	b.n	800d334 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2200      	movs	r2, #0
 800d322:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2200      	movs	r2, #0
 800d328:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2201      	movs	r2, #1
 800d32e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d332:	2300      	movs	r3, #0
}
 800d334:	4618      	mov	r0, r3
 800d336:	3708      	adds	r7, #8
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d33c:	b5b0      	push	{r4, r5, r7, lr}
 800d33e:	b08e      	sub	sp, #56	; 0x38
 800d340:	af04      	add	r7, sp, #16
 800d342:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800d344:	2300      	movs	r3, #0
 800d346:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800d348:	2300      	movs	r3, #0
 800d34a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d34c:	2300      	movs	r3, #0
 800d34e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800d350:	2300      	movs	r3, #0
 800d352:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d354:	2300      	movs	r3, #0
 800d356:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800d358:	2376      	movs	r3, #118	; 0x76
 800d35a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681d      	ldr	r5, [r3, #0]
 800d360:	466c      	mov	r4, sp
 800d362:	f107 0314 	add.w	r3, r7, #20
 800d366:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d36a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d36e:	f107 0308 	add.w	r3, r7, #8
 800d372:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d374:	4628      	mov	r0, r5
 800d376:	f003 fa87 	bl	8010888 <SDIO_Init>
 800d37a:	4603      	mov	r3, r0
 800d37c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d384:	2b00      	cmp	r3, #0
 800d386:	d001      	beq.n	800d38c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d388:	2301      	movs	r3, #1
 800d38a:	e031      	b.n	800d3f0 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800d38c:	4b1a      	ldr	r3, [pc, #104]	; (800d3f8 <HAL_SD_InitCard+0xbc>)
 800d38e:	2200      	movs	r2, #0
 800d390:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	4618      	mov	r0, r3
 800d398:	f003 fabf 	bl	801091a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800d39c:	4b16      	ldr	r3, [pc, #88]	; (800d3f8 <HAL_SD_InitCard+0xbc>)
 800d39e:	2201      	movs	r2, #1
 800d3a0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f000 ffc6 	bl	800e334 <SD_PowerON>
 800d3a8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d3aa:	6a3b      	ldr	r3, [r7, #32]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d00b      	beq.n	800d3c8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3bc:	6a3b      	ldr	r3, [r7, #32]
 800d3be:	431a      	orrs	r2, r3
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	e013      	b.n	800d3f0 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f000 fee5 	bl	800e198 <SD_InitCard>
 800d3ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d3d0:	6a3b      	ldr	r3, [r7, #32]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d00b      	beq.n	800d3ee <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2201      	movs	r2, #1
 800d3da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3e2:	6a3b      	ldr	r3, [r7, #32]
 800d3e4:	431a      	orrs	r2, r3
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	e000      	b.n	800d3f0 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800d3ee:	2300      	movs	r3, #0
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3728      	adds	r7, #40	; 0x28
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bdb0      	pop	{r4, r5, r7, pc}
 800d3f8:	422580a0 	.word	0x422580a0

0800d3fc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b08c      	sub	sp, #48	; 0x30
 800d400:	af00      	add	r7, sp, #0
 800d402:	60f8      	str	r0, [r7, #12]
 800d404:	60b9      	str	r1, [r7, #8]
 800d406:	607a      	str	r2, [r7, #4]
 800d408:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d107      	bne.n	800d424 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d418:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d420:	2301      	movs	r3, #1
 800d422:	e0c7      	b.n	800d5b4 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	f040 80c0 	bne.w	800d5b2 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2200      	movs	r2, #0
 800d436:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d438:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	441a      	add	r2, r3
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d442:	429a      	cmp	r2, r3
 800d444:	d907      	bls.n	800d456 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d44a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d452:	2301      	movs	r3, #1
 800d454:	e0ae      	b.n	800d5b4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2203      	movs	r2, #3
 800d45a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	2200      	movs	r2, #0
 800d464:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d474:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d47a:	4a50      	ldr	r2, [pc, #320]	; (800d5bc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d47c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d482:	4a4f      	ldr	r2, [pc, #316]	; (800d5c0 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800d484:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d48a:	2200      	movs	r2, #0
 800d48c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	3380      	adds	r3, #128	; 0x80
 800d498:	4619      	mov	r1, r3
 800d49a:	68ba      	ldr	r2, [r7, #8]
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	025b      	lsls	r3, r3, #9
 800d4a0:	089b      	lsrs	r3, r3, #2
 800d4a2:	f7fd fc07 	bl	800acb4 <HAL_DMA_Start_IT>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d017      	beq.n	800d4dc <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d4ba:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4a40      	ldr	r2, [pc, #256]	; (800d5c4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d4c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	e06b      	b.n	800d5b4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d4dc:	4b3a      	ldr	r3, [pc, #232]	; (800d5c8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800d4de:	2201      	movs	r2, #1
 800d4e0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4e6:	2b01      	cmp	r3, #1
 800d4e8:	d002      	beq.n	800d4f0 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800d4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ec:	025b      	lsls	r3, r3, #9
 800d4ee:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f003 faa1 	bl	8010a40 <SDMMC_CmdBlockLength>
 800d4fe:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800d500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d502:	2b00      	cmp	r3, #0
 800d504:	d00f      	beq.n	800d526 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	4a2e      	ldr	r2, [pc, #184]	; (800d5c4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d50c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d514:	431a      	orrs	r2, r3
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	2201      	movs	r2, #1
 800d51e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800d522:	2301      	movs	r3, #1
 800d524:	e046      	b.n	800d5b4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d526:	f04f 33ff 	mov.w	r3, #4294967295
 800d52a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	025b      	lsls	r3, r3, #9
 800d530:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d532:	2390      	movs	r3, #144	; 0x90
 800d534:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d536:	2302      	movs	r3, #2
 800d538:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d53a:	2300      	movs	r3, #0
 800d53c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d53e:	2301      	movs	r3, #1
 800d540:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f107 0210 	add.w	r2, r7, #16
 800d54a:	4611      	mov	r1, r2
 800d54c:	4618      	mov	r0, r3
 800d54e:	f003 fa4b 	bl	80109e8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	2b01      	cmp	r3, #1
 800d556:	d90a      	bls.n	800d56e <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2282      	movs	r2, #130	; 0x82
 800d55c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d564:	4618      	mov	r0, r3
 800d566:	f003 faaf 	bl	8010ac8 <SDMMC_CmdReadMultiBlock>
 800d56a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d56c:	e009      	b.n	800d582 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2281      	movs	r2, #129	; 0x81
 800d572:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d57a:	4618      	mov	r0, r3
 800d57c:	f003 fa82 	bl	8010a84 <SDMMC_CmdReadSingleBlock>
 800d580:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d584:	2b00      	cmp	r3, #0
 800d586:	d012      	beq.n	800d5ae <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	4a0d      	ldr	r2, [pc, #52]	; (800d5c4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d58e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d596:	431a      	orrs	r2, r3
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e002      	b.n	800d5b4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	e000      	b.n	800d5b4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800d5b2:	2302      	movs	r3, #2
  }
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3730      	adds	r7, #48	; 0x30
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}
 800d5bc:	0800dfa7 	.word	0x0800dfa7
 800d5c0:	0800e019 	.word	0x0800e019
 800d5c4:	004005ff 	.word	0x004005ff
 800d5c8:	4225858c 	.word	0x4225858c

0800d5cc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b08c      	sub	sp, #48	; 0x30
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	60b9      	str	r1, [r7, #8]
 800d5d6:	607a      	str	r2, [r7, #4]
 800d5d8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d107      	bne.n	800d5f4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5e8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	e0ca      	b.n	800d78a <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d5fa:	b2db      	uxtb	r3, r3
 800d5fc:	2b01      	cmp	r3, #1
 800d5fe:	f040 80c3 	bne.w	800d788 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2200      	movs	r2, #0
 800d606:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d608:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	441a      	add	r2, r3
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d612:	429a      	cmp	r2, r3
 800d614:	d907      	bls.n	800d626 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d61a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d622:	2301      	movs	r3, #1
 800d624:	e0b1      	b.n	800d78a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2203      	movs	r2, #3
 800d62a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	2200      	movs	r2, #0
 800d634:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f042 021a 	orr.w	r2, r2, #26
 800d644:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d64a:	4a52      	ldr	r2, [pc, #328]	; (800d794 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d64c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d652:	4a51      	ldr	r2, [pc, #324]	; (800d798 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800d654:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d65a:	2200      	movs	r2, #0
 800d65c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d662:	2b01      	cmp	r3, #1
 800d664:	d002      	beq.n	800d66c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d668:	025b      	lsls	r3, r3, #9
 800d66a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d674:	4618      	mov	r0, r3
 800d676:	f003 f9e3 	bl	8010a40 <SDMMC_CmdBlockLength>
 800d67a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d00f      	beq.n	800d6a2 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	4a45      	ldr	r2, [pc, #276]	; (800d79c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d688:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d690:	431a      	orrs	r2, r3
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	2201      	movs	r2, #1
 800d69a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e073      	b.n	800d78a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	2b01      	cmp	r3, #1
 800d6a6:	d90a      	bls.n	800d6be <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	22a0      	movs	r2, #160	; 0xa0
 800d6ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f003 fa4b 	bl	8010b50 <SDMMC_CmdWriteMultiBlock>
 800d6ba:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d6bc:	e009      	b.n	800d6d2 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2290      	movs	r2, #144	; 0x90
 800d6c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f003 fa1e 	bl	8010b0c <SDMMC_CmdWriteSingleBlock>
 800d6d0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d012      	beq.n	800d6fe <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4a2f      	ldr	r2, [pc, #188]	; (800d79c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d6de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e6:	431a      	orrs	r2, r3
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	e045      	b.n	800d78a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d6fe:	4b28      	ldr	r3, [pc, #160]	; (800d7a0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800d700:	2201      	movs	r2, #1
 800d702:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d708:	68b9      	ldr	r1, [r7, #8]
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	3380      	adds	r3, #128	; 0x80
 800d710:	461a      	mov	r2, r3
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	025b      	lsls	r3, r3, #9
 800d716:	089b      	lsrs	r3, r3, #2
 800d718:	f7fd facc 	bl	800acb4 <HAL_DMA_Start_IT>
 800d71c:	4603      	mov	r3, r0
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d01a      	beq.n	800d758 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f022 021a 	bic.w	r2, r2, #26
 800d730:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	4a19      	ldr	r2, [pc, #100]	; (800d79c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d738:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d73e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	2201      	movs	r2, #1
 800d74a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2200      	movs	r2, #0
 800d752:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d754:	2301      	movs	r3, #1
 800d756:	e018      	b.n	800d78a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d758:	f04f 33ff 	mov.w	r3, #4294967295
 800d75c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	025b      	lsls	r3, r3, #9
 800d762:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d764:	2390      	movs	r3, #144	; 0x90
 800d766:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d768:	2300      	movs	r3, #0
 800d76a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d76c:	2300      	movs	r3, #0
 800d76e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d770:	2301      	movs	r3, #1
 800d772:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f107 0210 	add.w	r2, r7, #16
 800d77c:	4611      	mov	r1, r2
 800d77e:	4618      	mov	r0, r3
 800d780:	f003 f932 	bl	80109e8 <SDIO_ConfigData>

      return HAL_OK;
 800d784:	2300      	movs	r3, #0
 800d786:	e000      	b.n	800d78a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800d788:	2302      	movs	r3, #2
  }
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3730      	adds	r7, #48	; 0x30
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}
 800d792:	bf00      	nop
 800d794:	0800df7d 	.word	0x0800df7d
 800d798:	0800e019 	.word	0x0800e019
 800d79c:	004005ff 	.word	0x004005ff
 800d7a0:	4225858c 	.word	0x4225858c

0800d7a4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b084      	sub	sp, #16
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7b0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d008      	beq.n	800d7d2 <HAL_SD_IRQHandler+0x2e>
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f003 0308 	and.w	r3, r3, #8
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d003      	beq.n	800d7d2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f000 ffc8 	bl	800e760 <SD_Read_IT>
 800d7d0:	e155      	b.n	800da7e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	f000 808f 	beq.w	800d900 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d7ea:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7f2:	687a      	ldr	r2, [r7, #4]
 800d7f4:	6812      	ldr	r2, [r2, #0]
 800d7f6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d7fa:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d7fe:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f022 0201 	bic.w	r2, r2, #1
 800d80e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	f003 0308 	and.w	r3, r3, #8
 800d816:	2b00      	cmp	r3, #0
 800d818:	d039      	beq.n	800d88e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	f003 0302 	and.w	r3, r3, #2
 800d820:	2b00      	cmp	r3, #0
 800d822:	d104      	bne.n	800d82e <HAL_SD_IRQHandler+0x8a>
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f003 0320 	and.w	r3, r3, #32
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d011      	beq.n	800d852 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	4618      	mov	r0, r3
 800d834:	f003 f9ae 	bl	8010b94 <SDMMC_CmdStopTransfer>
 800d838:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d008      	beq.n	800d852 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	431a      	orrs	r2, r3
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f000 f91f 	bl	800da90 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f240 523a 	movw	r2, #1338	; 0x53a
 800d85a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2201      	movs	r2, #1
 800d860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2200      	movs	r2, #0
 800d868:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f003 0301 	and.w	r3, r3, #1
 800d870:	2b00      	cmp	r3, #0
 800d872:	d104      	bne.n	800d87e <HAL_SD_IRQHandler+0xda>
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f003 0302 	and.w	r3, r3, #2
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d003      	beq.n	800d886 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f003 fe04 	bl	801148c <HAL_SD_RxCpltCallback>
 800d884:	e0fb      	b.n	800da7e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f003 fdf6 	bl	8011478 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d88c:	e0f7      	b.n	800da7e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d894:	2b00      	cmp	r3, #0
 800d896:	f000 80f2 	beq.w	800da7e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	f003 0320 	and.w	r3, r3, #32
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d011      	beq.n	800d8c8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f003 f973 	bl	8010b94 <SDMMC_CmdStopTransfer>
 800d8ae:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d008      	beq.n	800d8c8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	431a      	orrs	r2, r3
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f000 f8e4 	bl	800da90 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	f003 0301 	and.w	r3, r3, #1
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	f040 80d5 	bne.w	800da7e <HAL_SD_IRQHandler+0x2da>
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f003 0302 	and.w	r3, r3, #2
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	f040 80cf 	bne.w	800da7e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	f022 0208 	bic.w	r2, r2, #8
 800d8ee:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f003 fdbd 	bl	8011478 <HAL_SD_TxCpltCallback>
}
 800d8fe:	e0be      	b.n	800da7e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d008      	beq.n	800d920 <HAL_SD_IRQHandler+0x17c>
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	f003 0308 	and.w	r3, r3, #8
 800d914:	2b00      	cmp	r3, #0
 800d916:	d003      	beq.n	800d920 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f000 ff72 	bl	800e802 <SD_Write_IT>
 800d91e:	e0ae      	b.n	800da7e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d926:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	f000 80a7 	beq.w	800da7e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d936:	f003 0302 	and.w	r3, r3, #2
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d005      	beq.n	800d94a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d942:	f043 0202 	orr.w	r2, r3, #2
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d950:	f003 0308 	and.w	r3, r3, #8
 800d954:	2b00      	cmp	r3, #0
 800d956:	d005      	beq.n	800d964 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d95c:	f043 0208 	orr.w	r2, r3, #8
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d96a:	f003 0320 	and.w	r3, r3, #32
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d005      	beq.n	800d97e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d976:	f043 0220 	orr.w	r2, r3, #32
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d984:	f003 0310 	and.w	r3, r3, #16
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d005      	beq.n	800d998 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d990:	f043 0210 	orr.w	r2, r3, #16
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f240 523a 	movw	r2, #1338	; 0x53a
 800d9a0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d9b0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f003 f8ec 	bl	8010b94 <SDMMC_CmdStopTransfer>
 800d9bc:	4602      	mov	r2, r0
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9c2:	431a      	orrs	r2, r3
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	f003 0308 	and.w	r3, r3, #8
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d00a      	beq.n	800d9e8 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2201      	movs	r2, #1
 800d9d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f000 f855 	bl	800da90 <HAL_SD_ErrorCallback>
}
 800d9e6:	e04a      	b.n	800da7e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d045      	beq.n	800da7e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	f003 0310 	and.w	r3, r3, #16
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d104      	bne.n	800da06 <HAL_SD_IRQHandler+0x262>
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f003 0320 	and.w	r3, r3, #32
 800da02:	2b00      	cmp	r3, #0
 800da04:	d011      	beq.n	800da2a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da0a:	4a1f      	ldr	r2, [pc, #124]	; (800da88 <HAL_SD_IRQHandler+0x2e4>)
 800da0c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da12:	4618      	mov	r0, r3
 800da14:	f7fd f9a6 	bl	800ad64 <HAL_DMA_Abort_IT>
 800da18:	4603      	mov	r3, r0
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d02f      	beq.n	800da7e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da22:	4618      	mov	r0, r3
 800da24:	f000 fb4a 	bl	800e0bc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800da28:	e029      	b.n	800da7e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	f003 0301 	and.w	r3, r3, #1
 800da30:	2b00      	cmp	r3, #0
 800da32:	d104      	bne.n	800da3e <HAL_SD_IRQHandler+0x29a>
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	f003 0302 	and.w	r3, r3, #2
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d011      	beq.n	800da62 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da42:	4a12      	ldr	r2, [pc, #72]	; (800da8c <HAL_SD_IRQHandler+0x2e8>)
 800da44:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7fd f98a 	bl	800ad64 <HAL_DMA_Abort_IT>
 800da50:	4603      	mov	r3, r0
 800da52:	2b00      	cmp	r3, #0
 800da54:	d013      	beq.n	800da7e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da5a:	4618      	mov	r0, r3
 800da5c:	f000 fb65 	bl	800e12a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800da60:	e00d      	b.n	800da7e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2200      	movs	r2, #0
 800da66:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2201      	movs	r2, #1
 800da6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2200      	movs	r2, #0
 800da74:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f003 fcf4 	bl	8011464 <HAL_SD_AbortCallback>
}
 800da7c:	e7ff      	b.n	800da7e <HAL_SD_IRQHandler+0x2da>
 800da7e:	bf00      	nop
 800da80:	3710      	adds	r7, #16
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	0800e0bd 	.word	0x0800e0bd
 800da8c:	0800e12b 	.word	0x0800e12b

0800da90 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800da90:	b480      	push	{r7}
 800da92:	b083      	sub	sp, #12
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800da98:	bf00      	nop
 800da9a:	370c      	adds	r7, #12
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr

0800daa4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800daa4:	b480      	push	{r7}
 800daa6:	b083      	sub	sp, #12
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dab2:	0f9b      	lsrs	r3, r3, #30
 800dab4:	b2da      	uxtb	r2, r3
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dabe:	0e9b      	lsrs	r3, r3, #26
 800dac0:	b2db      	uxtb	r3, r3
 800dac2:	f003 030f 	and.w	r3, r3, #15
 800dac6:	b2da      	uxtb	r2, r3
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dad0:	0e1b      	lsrs	r3, r3, #24
 800dad2:	b2db      	uxtb	r3, r3
 800dad4:	f003 0303 	and.w	r3, r3, #3
 800dad8:	b2da      	uxtb	r2, r3
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dae2:	0c1b      	lsrs	r3, r3, #16
 800dae4:	b2da      	uxtb	r2, r3
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800daee:	0a1b      	lsrs	r3, r3, #8
 800daf0:	b2da      	uxtb	r2, r3
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dafa:	b2da      	uxtb	r2, r3
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db04:	0d1b      	lsrs	r3, r3, #20
 800db06:	b29a      	uxth	r2, r3
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db10:	0c1b      	lsrs	r3, r3, #16
 800db12:	b2db      	uxtb	r3, r3
 800db14:	f003 030f 	and.w	r3, r3, #15
 800db18:	b2da      	uxtb	r2, r3
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db22:	0bdb      	lsrs	r3, r3, #15
 800db24:	b2db      	uxtb	r3, r3
 800db26:	f003 0301 	and.w	r3, r3, #1
 800db2a:	b2da      	uxtb	r2, r3
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db34:	0b9b      	lsrs	r3, r3, #14
 800db36:	b2db      	uxtb	r3, r3
 800db38:	f003 0301 	and.w	r3, r3, #1
 800db3c:	b2da      	uxtb	r2, r3
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db46:	0b5b      	lsrs	r3, r3, #13
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	f003 0301 	and.w	r3, r3, #1
 800db4e:	b2da      	uxtb	r2, r3
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db58:	0b1b      	lsrs	r3, r3, #12
 800db5a:	b2db      	uxtb	r3, r3
 800db5c:	f003 0301 	and.w	r3, r3, #1
 800db60:	b2da      	uxtb	r2, r3
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	2200      	movs	r2, #0
 800db6a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db70:	2b00      	cmp	r3, #0
 800db72:	d163      	bne.n	800dc3c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db78:	009a      	lsls	r2, r3, #2
 800db7a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800db7e:	4013      	ands	r3, r2
 800db80:	687a      	ldr	r2, [r7, #4]
 800db82:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800db84:	0f92      	lsrs	r2, r2, #30
 800db86:	431a      	orrs	r2, r3
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db90:	0edb      	lsrs	r3, r3, #27
 800db92:	b2db      	uxtb	r3, r3
 800db94:	f003 0307 	and.w	r3, r3, #7
 800db98:	b2da      	uxtb	r2, r3
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dba2:	0e1b      	lsrs	r3, r3, #24
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	f003 0307 	and.w	r3, r3, #7
 800dbaa:	b2da      	uxtb	r2, r3
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbb4:	0d5b      	lsrs	r3, r3, #21
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	f003 0307 	and.w	r3, r3, #7
 800dbbc:	b2da      	uxtb	r2, r3
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbc6:	0c9b      	lsrs	r3, r3, #18
 800dbc8:	b2db      	uxtb	r3, r3
 800dbca:	f003 0307 	and.w	r3, r3, #7
 800dbce:	b2da      	uxtb	r2, r3
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbd8:	0bdb      	lsrs	r3, r3, #15
 800dbda:	b2db      	uxtb	r3, r3
 800dbdc:	f003 0307 	and.w	r3, r3, #7
 800dbe0:	b2da      	uxtb	r2, r3
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	691b      	ldr	r3, [r3, #16]
 800dbea:	1c5a      	adds	r2, r3, #1
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	7e1b      	ldrb	r3, [r3, #24]
 800dbf4:	b2db      	uxtb	r3, r3
 800dbf6:	f003 0307 	and.w	r3, r3, #7
 800dbfa:	3302      	adds	r3, #2
 800dbfc:	2201      	movs	r2, #1
 800dbfe:	fa02 f303 	lsl.w	r3, r2, r3
 800dc02:	687a      	ldr	r2, [r7, #4]
 800dc04:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800dc06:	fb02 f203 	mul.w	r2, r2, r3
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	7a1b      	ldrb	r3, [r3, #8]
 800dc12:	b2db      	uxtb	r3, r3
 800dc14:	f003 030f 	and.w	r3, r3, #15
 800dc18:	2201      	movs	r2, #1
 800dc1a:	409a      	lsls	r2, r3
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc24:	687a      	ldr	r2, [r7, #4]
 800dc26:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800dc28:	0a52      	lsrs	r2, r2, #9
 800dc2a:	fb02 f203 	mul.w	r2, r2, r3
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc38:	661a      	str	r2, [r3, #96]	; 0x60
 800dc3a:	e031      	b.n	800dca0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc40:	2b01      	cmp	r3, #1
 800dc42:	d11d      	bne.n	800dc80 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc48:	041b      	lsls	r3, r3, #16
 800dc4a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc52:	0c1b      	lsrs	r3, r3, #16
 800dc54:	431a      	orrs	r2, r3
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	691b      	ldr	r3, [r3, #16]
 800dc5e:	3301      	adds	r3, #1
 800dc60:	029a      	lsls	r2, r3, #10
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc74:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	661a      	str	r2, [r3, #96]	; 0x60
 800dc7e:	e00f      	b.n	800dca0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4a58      	ldr	r2, [pc, #352]	; (800dde8 <HAL_SD_GetCardCSD+0x344>)
 800dc86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2201      	movs	r2, #1
 800dc98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	e09d      	b.n	800dddc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dca4:	0b9b      	lsrs	r3, r3, #14
 800dca6:	b2db      	uxtb	r3, r3
 800dca8:	f003 0301 	and.w	r3, r3, #1
 800dcac:	b2da      	uxtb	r2, r3
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcb6:	09db      	lsrs	r3, r3, #7
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcbe:	b2da      	uxtb	r2, r3
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcc8:	b2db      	uxtb	r3, r3
 800dcca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcce:	b2da      	uxtb	r2, r3
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcd8:	0fdb      	lsrs	r3, r3, #31
 800dcda:	b2da      	uxtb	r2, r3
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dce4:	0f5b      	lsrs	r3, r3, #29
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	f003 0303 	and.w	r3, r3, #3
 800dcec:	b2da      	uxtb	r2, r3
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcf6:	0e9b      	lsrs	r3, r3, #26
 800dcf8:	b2db      	uxtb	r3, r3
 800dcfa:	f003 0307 	and.w	r3, r3, #7
 800dcfe:	b2da      	uxtb	r2, r3
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd08:	0d9b      	lsrs	r3, r3, #22
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	f003 030f 	and.w	r3, r3, #15
 800dd10:	b2da      	uxtb	r2, r3
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd1a:	0d5b      	lsrs	r3, r3, #21
 800dd1c:	b2db      	uxtb	r3, r3
 800dd1e:	f003 0301 	and.w	r3, r3, #1
 800dd22:	b2da      	uxtb	r2, r3
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd36:	0c1b      	lsrs	r3, r3, #16
 800dd38:	b2db      	uxtb	r3, r3
 800dd3a:	f003 0301 	and.w	r3, r3, #1
 800dd3e:	b2da      	uxtb	r2, r3
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd4a:	0bdb      	lsrs	r3, r3, #15
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	f003 0301 	and.w	r3, r3, #1
 800dd52:	b2da      	uxtb	r2, r3
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd5e:	0b9b      	lsrs	r3, r3, #14
 800dd60:	b2db      	uxtb	r3, r3
 800dd62:	f003 0301 	and.w	r3, r3, #1
 800dd66:	b2da      	uxtb	r2, r3
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd72:	0b5b      	lsrs	r3, r3, #13
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	f003 0301 	and.w	r3, r3, #1
 800dd7a:	b2da      	uxtb	r2, r3
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd86:	0b1b      	lsrs	r3, r3, #12
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	f003 0301 	and.w	r3, r3, #1
 800dd8e:	b2da      	uxtb	r2, r3
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd9a:	0a9b      	lsrs	r3, r3, #10
 800dd9c:	b2db      	uxtb	r3, r3
 800dd9e:	f003 0303 	and.w	r3, r3, #3
 800dda2:	b2da      	uxtb	r2, r3
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddae:	0a1b      	lsrs	r3, r3, #8
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	f003 0303 	and.w	r3, r3, #3
 800ddb6:	b2da      	uxtb	r2, r3
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddc2:	085b      	lsrs	r3, r3, #1
 800ddc4:	b2db      	uxtb	r3, r3
 800ddc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddca:	b2da      	uxtb	r2, r3
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	2201      	movs	r2, #1
 800ddd6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ddda:	2300      	movs	r3, #0
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	370c      	adds	r7, #12
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr
 800dde8:	004005ff 	.word	0x004005ff

0800ddec <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b083      	sub	sp, #12
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800de36:	2300      	movs	r3, #0
}
 800de38:	4618      	mov	r0, r3
 800de3a:	370c      	adds	r7, #12
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr

0800de44 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800de44:	b5b0      	push	{r4, r5, r7, lr}
 800de46:	b08e      	sub	sp, #56	; 0x38
 800de48:	af04      	add	r7, sp, #16
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2203      	movs	r2, #3
 800de52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de5a:	2b03      	cmp	r3, #3
 800de5c:	d02e      	beq.n	800debc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de64:	d106      	bne.n	800de74 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de6a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	639a      	str	r2, [r3, #56]	; 0x38
 800de72:	e029      	b.n	800dec8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800de7a:	d10a      	bne.n	800de92 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f000 fb0f 	bl	800e4a0 <SD_WideBus_Enable>
 800de82:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8a:	431a      	orrs	r2, r3
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	639a      	str	r2, [r3, #56]	; 0x38
 800de90:	e01a      	b.n	800dec8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d10a      	bne.n	800deae <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f000 fb4c 	bl	800e536 <SD_WideBus_Disable>
 800de9e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea6:	431a      	orrs	r2, r3
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	639a      	str	r2, [r3, #56]	; 0x38
 800deac:	e00c      	b.n	800dec8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deb2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	639a      	str	r2, [r3, #56]	; 0x38
 800deba:	e005      	b.n	800dec8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dec0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800decc:	2b00      	cmp	r3, #0
 800dece:	d009      	beq.n	800dee4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	4a18      	ldr	r2, [pc, #96]	; (800df38 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800ded6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2201      	movs	r2, #1
 800dedc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dee0:	2301      	movs	r3, #1
 800dee2:	e024      	b.n	800df2e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	685b      	ldr	r3, [r3, #4]
 800dee8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	689b      	ldr	r3, [r3, #8]
 800deee:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	68db      	ldr	r3, [r3, #12]
 800def4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	695b      	ldr	r3, [r3, #20]
 800defe:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	699b      	ldr	r3, [r3, #24]
 800df04:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681d      	ldr	r5, [r3, #0]
 800df0a:	466c      	mov	r4, sp
 800df0c:	f107 0318 	add.w	r3, r7, #24
 800df10:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800df14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800df18:	f107 030c 	add.w	r3, r7, #12
 800df1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800df1e:	4628      	mov	r0, r5
 800df20:	f002 fcb2 	bl	8010888 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2201      	movs	r2, #1
 800df28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800df2c:	2300      	movs	r3, #0
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3728      	adds	r7, #40	; 0x28
 800df32:	46bd      	mov	sp, r7
 800df34:	bdb0      	pop	{r4, r5, r7, pc}
 800df36:	bf00      	nop
 800df38:	004005ff 	.word	0x004005ff

0800df3c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b086      	sub	sp, #24
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800df44:	2300      	movs	r3, #0
 800df46:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800df48:	f107 030c 	add.w	r3, r7, #12
 800df4c:	4619      	mov	r1, r3
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f000 fa7e 	bl	800e450 <SD_SendStatus>
 800df54:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d005      	beq.n	800df68 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df60:	697b      	ldr	r3, [r7, #20]
 800df62:	431a      	orrs	r2, r3
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	0a5b      	lsrs	r3, r3, #9
 800df6c:	f003 030f 	and.w	r3, r3, #15
 800df70:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800df72:	693b      	ldr	r3, [r7, #16]
}
 800df74:	4618      	mov	r0, r3
 800df76:	3718      	adds	r7, #24
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}

0800df7c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800df7c:	b480      	push	{r7}
 800df7e:	b085      	sub	sp, #20
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df88:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800df98:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800df9a:	bf00      	nop
 800df9c:	3714      	adds	r7, #20
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa4:	4770      	bx	lr

0800dfa6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dfa6:	b580      	push	{r7, lr}
 800dfa8:	b084      	sub	sp, #16
 800dfaa:	af00      	add	r7, sp, #0
 800dfac:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfb2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfb8:	2b82      	cmp	r3, #130	; 0x82
 800dfba:	d111      	bne.n	800dfe0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f002 fde7 	bl	8010b94 <SDMMC_CmdStopTransfer>
 800dfc6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d008      	beq.n	800dfe0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	431a      	orrs	r2, r3
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800dfda:	68f8      	ldr	r0, [r7, #12]
 800dfdc:	f7ff fd58 	bl	800da90 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f022 0208 	bic.w	r2, r2, #8
 800dfee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	f240 523a 	movw	r2, #1338	; 0x53a
 800dff8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	2201      	movs	r2, #1
 800dffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2200      	movs	r2, #0
 800e006:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800e008:	68f8      	ldr	r0, [r7, #12]
 800e00a:	f003 fa3f 	bl	801148c <HAL_SD_RxCpltCallback>
#endif
}
 800e00e:	bf00      	nop
 800e010:	3710      	adds	r7, #16
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
	...

0800e018 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b086      	sub	sp, #24
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e024:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f7fd f848 	bl	800b0bc <HAL_DMA_GetError>
 800e02c:	4603      	mov	r3, r0
 800e02e:	2b02      	cmp	r3, #2
 800e030:	d03e      	beq.n	800e0b0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e038:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e03e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e040:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	2b01      	cmp	r3, #1
 800e046:	d002      	beq.n	800e04e <SD_DMAError+0x36>
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	2b01      	cmp	r3, #1
 800e04c:	d12d      	bne.n	800e0aa <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	4a19      	ldr	r2, [pc, #100]	; (800e0b8 <SD_DMAError+0xa0>)
 800e054:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e064:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e06a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800e072:	6978      	ldr	r0, [r7, #20]
 800e074:	f7ff ff62 	bl	800df3c <HAL_SD_GetCardState>
 800e078:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	2b06      	cmp	r3, #6
 800e07e:	d002      	beq.n	800e086 <SD_DMAError+0x6e>
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	2b05      	cmp	r3, #5
 800e084:	d10a      	bne.n	800e09c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	4618      	mov	r0, r3
 800e08c:	f002 fd82 	bl	8010b94 <SDMMC_CmdStopTransfer>
 800e090:	4602      	mov	r2, r0
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e096:	431a      	orrs	r2, r3
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	2201      	movs	r2, #1
 800e0a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800e0aa:	6978      	ldr	r0, [r7, #20]
 800e0ac:	f7ff fcf0 	bl	800da90 <HAL_SD_ErrorCallback>
#endif
  }
}
 800e0b0:	bf00      	nop
 800e0b2:	3718      	adds	r7, #24
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}
 800e0b8:	004005ff 	.word	0x004005ff

0800e0bc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b084      	sub	sp, #16
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0c8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f240 523a 	movw	r2, #1338	; 0x53a
 800e0d2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e0d4:	68f8      	ldr	r0, [r7, #12]
 800e0d6:	f7ff ff31 	bl	800df3c <HAL_SD_GetCardState>
 800e0da:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	2201      	movs	r2, #1
 800e0e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	2b06      	cmp	r3, #6
 800e0ee:	d002      	beq.n	800e0f6 <SD_DMATxAbort+0x3a>
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	2b05      	cmp	r3, #5
 800e0f4:	d10a      	bne.n	800e10c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f002 fd4a 	bl	8010b94 <SDMMC_CmdStopTransfer>
 800e100:	4602      	mov	r2, r0
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e106:	431a      	orrs	r2, r3
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e110:	2b00      	cmp	r3, #0
 800e112:	d103      	bne.n	800e11c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e114:	68f8      	ldr	r0, [r7, #12]
 800e116:	f003 f9a5 	bl	8011464 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e11a:	e002      	b.n	800e122 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e11c:	68f8      	ldr	r0, [r7, #12]
 800e11e:	f7ff fcb7 	bl	800da90 <HAL_SD_ErrorCallback>
}
 800e122:	bf00      	nop
 800e124:	3710      	adds	r7, #16
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}

0800e12a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800e12a:	b580      	push	{r7, lr}
 800e12c:	b084      	sub	sp, #16
 800e12e:	af00      	add	r7, sp, #0
 800e130:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e136:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	f240 523a 	movw	r2, #1338	; 0x53a
 800e140:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e142:	68f8      	ldr	r0, [r7, #12]
 800e144:	f7ff fefa 	bl	800df3c <HAL_SD_GetCardState>
 800e148:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	2201      	movs	r2, #1
 800e14e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2200      	movs	r2, #0
 800e156:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	2b06      	cmp	r3, #6
 800e15c:	d002      	beq.n	800e164 <SD_DMARxAbort+0x3a>
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	2b05      	cmp	r3, #5
 800e162:	d10a      	bne.n	800e17a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	4618      	mov	r0, r3
 800e16a:	f002 fd13 	bl	8010b94 <SDMMC_CmdStopTransfer>
 800e16e:	4602      	mov	r2, r0
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e174:	431a      	orrs	r2, r3
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d103      	bne.n	800e18a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e182:	68f8      	ldr	r0, [r7, #12]
 800e184:	f003 f96e 	bl	8011464 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e188:	e002      	b.n	800e190 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e18a:	68f8      	ldr	r0, [r7, #12]
 800e18c:	f7ff fc80 	bl	800da90 <HAL_SD_ErrorCallback>
}
 800e190:	bf00      	nop
 800e192:	3710      	adds	r7, #16
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}

0800e198 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e198:	b5b0      	push	{r4, r5, r7, lr}
 800e19a:	b094      	sub	sp, #80	; 0x50
 800e19c:	af04      	add	r7, sp, #16
 800e19e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f002 fbc5 	bl	8010938 <SDIO_GetPowerState>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d102      	bne.n	800e1ba <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e1b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e1b8:	e0b7      	b.n	800e32a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1be:	2b03      	cmp	r3, #3
 800e1c0:	d02f      	beq.n	800e222 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f002 fdee 	bl	8010da8 <SDMMC_CmdSendCID>
 800e1cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d001      	beq.n	800e1d8 <SD_InitCard+0x40>
    {
      return errorstate;
 800e1d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1d6:	e0a8      	b.n	800e32a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	2100      	movs	r1, #0
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f002 fbef 	bl	80109c2 <SDIO_GetResponse>
 800e1e4:	4602      	mov	r2, r0
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	2104      	movs	r1, #4
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f002 fbe6 	bl	80109c2 <SDIO_GetResponse>
 800e1f6:	4602      	mov	r2, r0
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	2108      	movs	r1, #8
 800e202:	4618      	mov	r0, r3
 800e204:	f002 fbdd 	bl	80109c2 <SDIO_GetResponse>
 800e208:	4602      	mov	r2, r0
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	210c      	movs	r1, #12
 800e214:	4618      	mov	r0, r3
 800e216:	f002 fbd4 	bl	80109c2 <SDIO_GetResponse>
 800e21a:	4602      	mov	r2, r0
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e226:	2b03      	cmp	r3, #3
 800e228:	d00d      	beq.n	800e246 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	f107 020e 	add.w	r2, r7, #14
 800e232:	4611      	mov	r1, r2
 800e234:	4618      	mov	r0, r3
 800e236:	f002 fdf4 	bl	8010e22 <SDMMC_CmdSetRelAdd>
 800e23a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e23c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d001      	beq.n	800e246 <SD_InitCard+0xae>
    {
      return errorstate;
 800e242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e244:	e071      	b.n	800e32a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e24a:	2b03      	cmp	r3, #3
 800e24c:	d036      	beq.n	800e2bc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e24e:	89fb      	ldrh	r3, [r7, #14]
 800e250:	461a      	mov	r2, r3
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681a      	ldr	r2, [r3, #0]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e25e:	041b      	lsls	r3, r3, #16
 800e260:	4619      	mov	r1, r3
 800e262:	4610      	mov	r0, r2
 800e264:	f002 fdbe 	bl	8010de4 <SDMMC_CmdSendCSD>
 800e268:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e26a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d001      	beq.n	800e274 <SD_InitCard+0xdc>
    {
      return errorstate;
 800e270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e272:	e05a      	b.n	800e32a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	2100      	movs	r1, #0
 800e27a:	4618      	mov	r0, r3
 800e27c:	f002 fba1 	bl	80109c2 <SDIO_GetResponse>
 800e280:	4602      	mov	r2, r0
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	2104      	movs	r1, #4
 800e28c:	4618      	mov	r0, r3
 800e28e:	f002 fb98 	bl	80109c2 <SDIO_GetResponse>
 800e292:	4602      	mov	r2, r0
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	2108      	movs	r1, #8
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f002 fb8f 	bl	80109c2 <SDIO_GetResponse>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	210c      	movs	r1, #12
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f002 fb86 	bl	80109c2 <SDIO_GetResponse>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	2104      	movs	r1, #4
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f002 fb7d 	bl	80109c2 <SDIO_GetResponse>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	0d1a      	lsrs	r2, r3, #20
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e2d0:	f107 0310 	add.w	r3, r7, #16
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f7ff fbe4 	bl	800daa4 <HAL_SD_GetCardCSD>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d002      	beq.n	800e2e8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e2e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e2e6:	e020      	b.n	800e32a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6819      	ldr	r1, [r3, #0]
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2f0:	041b      	lsls	r3, r3, #16
 800e2f2:	f04f 0400 	mov.w	r4, #0
 800e2f6:	461a      	mov	r2, r3
 800e2f8:	4623      	mov	r3, r4
 800e2fa:	4608      	mov	r0, r1
 800e2fc:	f002 fc6c 	bl	8010bd8 <SDMMC_CmdSelDesel>
 800e300:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e304:	2b00      	cmp	r3, #0
 800e306:	d001      	beq.n	800e30c <SD_InitCard+0x174>
  {
    return errorstate;
 800e308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e30a:	e00e      	b.n	800e32a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681d      	ldr	r5, [r3, #0]
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	466c      	mov	r4, sp
 800e314:	f103 0210 	add.w	r2, r3, #16
 800e318:	ca07      	ldmia	r2, {r0, r1, r2}
 800e31a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e31e:	3304      	adds	r3, #4
 800e320:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e322:	4628      	mov	r0, r5
 800e324:	f002 fab0 	bl	8010888 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e328:	2300      	movs	r3, #0
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3740      	adds	r7, #64	; 0x40
 800e32e:	46bd      	mov	sp, r7
 800e330:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e334 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b086      	sub	sp, #24
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e33c:	2300      	movs	r3, #0
 800e33e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e340:	2300      	movs	r3, #0
 800e342:	617b      	str	r3, [r7, #20]
 800e344:	2300      	movs	r3, #0
 800e346:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	4618      	mov	r0, r3
 800e34e:	f002 fc66 	bl	8010c1e <SDMMC_CmdGoIdleState>
 800e352:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d001      	beq.n	800e35e <SD_PowerON+0x2a>
  {
    return errorstate;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	e072      	b.n	800e444 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	4618      	mov	r0, r3
 800e364:	f002 fc79 	bl	8010c5a <SDMMC_CmdOperCond>
 800e368:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d00d      	beq.n	800e38c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2200      	movs	r2, #0
 800e374:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4618      	mov	r0, r3
 800e37c:	f002 fc4f 	bl	8010c1e <SDMMC_CmdGoIdleState>
 800e380:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d004      	beq.n	800e392 <SD_PowerON+0x5e>
    {
      return errorstate;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	e05b      	b.n	800e444 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2201      	movs	r2, #1
 800e390:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e396:	2b01      	cmp	r3, #1
 800e398:	d137      	bne.n	800e40a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	2100      	movs	r1, #0
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f002 fc79 	bl	8010c98 <SDMMC_CmdAppCommand>
 800e3a6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d02d      	beq.n	800e40a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e3ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e3b2:	e047      	b.n	800e444 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	2100      	movs	r1, #0
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f002 fc6c 	bl	8010c98 <SDMMC_CmdAppCommand>
 800e3c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d001      	beq.n	800e3cc <SD_PowerON+0x98>
    {
      return errorstate;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	e03b      	b.n	800e444 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	491e      	ldr	r1, [pc, #120]	; (800e44c <SD_PowerON+0x118>)
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f002 fc82 	bl	8010cdc <SDMMC_CmdAppOperCommand>
 800e3d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d002      	beq.n	800e3e6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e3e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e3e4:	e02e      	b.n	800e444 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	2100      	movs	r1, #0
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f002 fae8 	bl	80109c2 <SDIO_GetResponse>
 800e3f2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	0fdb      	lsrs	r3, r3, #31
 800e3f8:	2b01      	cmp	r3, #1
 800e3fa:	d101      	bne.n	800e400 <SD_PowerON+0xcc>
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	e000      	b.n	800e402 <SD_PowerON+0xce>
 800e400:	2300      	movs	r3, #0
 800e402:	613b      	str	r3, [r7, #16]

    count++;
 800e404:	68bb      	ldr	r3, [r7, #8]
 800e406:	3301      	adds	r3, #1
 800e408:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e410:	4293      	cmp	r3, r2
 800e412:	d802      	bhi.n	800e41a <SD_PowerON+0xe6>
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d0cc      	beq.n	800e3b4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e420:	4293      	cmp	r3, r2
 800e422:	d902      	bls.n	800e42a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e424:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e428:	e00c      	b.n	800e444 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e430:	2b00      	cmp	r3, #0
 800e432:	d003      	beq.n	800e43c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2201      	movs	r2, #1
 800e438:	645a      	str	r2, [r3, #68]	; 0x44
 800e43a:	e002      	b.n	800e442 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2200      	movs	r2, #0
 800e440:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e442:	2300      	movs	r3, #0
}
 800e444:	4618      	mov	r0, r3
 800e446:	3718      	adds	r7, #24
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}
 800e44c:	c1100000 	.word	0xc1100000

0800e450 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d102      	bne.n	800e466 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e460:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e464:	e018      	b.n	800e498 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681a      	ldr	r2, [r3, #0]
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e46e:	041b      	lsls	r3, r3, #16
 800e470:	4619      	mov	r1, r3
 800e472:	4610      	mov	r0, r2
 800e474:	f002 fcf6 	bl	8010e64 <SDMMC_CmdSendStatus>
 800e478:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d001      	beq.n	800e484 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	e009      	b.n	800e498 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	2100      	movs	r1, #0
 800e48a:	4618      	mov	r0, r3
 800e48c:	f002 fa99 	bl	80109c2 <SDIO_GetResponse>
 800e490:	4602      	mov	r2, r0
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e496:	2300      	movs	r3, #0
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3710      	adds	r7, #16
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}

0800e4a0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b086      	sub	sp, #24
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	60fb      	str	r3, [r7, #12]
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	2100      	movs	r1, #0
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f002 fa83 	bl	80109c2 <SDIO_GetResponse>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e4c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e4c6:	d102      	bne.n	800e4ce <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e4c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e4cc:	e02f      	b.n	800e52e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e4ce:	f107 030c 	add.w	r3, r7, #12
 800e4d2:	4619      	mov	r1, r3
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f000 f879 	bl	800e5cc <SD_FindSCR>
 800e4da:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d001      	beq.n	800e4e6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	e023      	b.n	800e52e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d01c      	beq.n	800e52a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681a      	ldr	r2, [r3, #0]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4f8:	041b      	lsls	r3, r3, #16
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	4610      	mov	r0, r2
 800e4fe:	f002 fbcb 	bl	8010c98 <SDMMC_CmdAppCommand>
 800e502:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d001      	beq.n	800e50e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	e00f      	b.n	800e52e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	2102      	movs	r1, #2
 800e514:	4618      	mov	r0, r3
 800e516:	f002 fc04 	bl	8010d22 <SDMMC_CmdBusWidth>
 800e51a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d001      	beq.n	800e526 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	e003      	b.n	800e52e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e526:	2300      	movs	r3, #0
 800e528:	e001      	b.n	800e52e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e52a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3718      	adds	r7, #24
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}

0800e536 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e536:	b580      	push	{r7, lr}
 800e538:	b086      	sub	sp, #24
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e53e:	2300      	movs	r3, #0
 800e540:	60fb      	str	r3, [r7, #12]
 800e542:	2300      	movs	r3, #0
 800e544:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	2100      	movs	r1, #0
 800e54c:	4618      	mov	r0, r3
 800e54e:	f002 fa38 	bl	80109c2 <SDIO_GetResponse>
 800e552:	4603      	mov	r3, r0
 800e554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e558:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e55c:	d102      	bne.n	800e564 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e55e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e562:	e02f      	b.n	800e5c4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e564:	f107 030c 	add.w	r3, r7, #12
 800e568:	4619      	mov	r1, r3
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 f82e 	bl	800e5cc <SD_FindSCR>
 800e570:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d001      	beq.n	800e57c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	e023      	b.n	800e5c4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e582:	2b00      	cmp	r3, #0
 800e584:	d01c      	beq.n	800e5c0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681a      	ldr	r2, [r3, #0]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e58e:	041b      	lsls	r3, r3, #16
 800e590:	4619      	mov	r1, r3
 800e592:	4610      	mov	r0, r2
 800e594:	f002 fb80 	bl	8010c98 <SDMMC_CmdAppCommand>
 800e598:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d001      	beq.n	800e5a4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	e00f      	b.n	800e5c4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	2100      	movs	r1, #0
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f002 fbb9 	bl	8010d22 <SDMMC_CmdBusWidth>
 800e5b0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d001      	beq.n	800e5bc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	e003      	b.n	800e5c4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	e001      	b.n	800e5c4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e5c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3718      	adds	r7, #24
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e5cc:	b590      	push	{r4, r7, lr}
 800e5ce:	b08f      	sub	sp, #60	; 0x3c
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e5d6:	f7fb fd7b 	bl	800a0d0 <HAL_GetTick>
 800e5da:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	60bb      	str	r3, [r7, #8]
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	2108      	movs	r1, #8
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f002 fa24 	bl	8010a40 <SDMMC_CmdBlockLength>
 800e5f8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d001      	beq.n	800e604 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e602:	e0a9      	b.n	800e758 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e60c:	041b      	lsls	r3, r3, #16
 800e60e:	4619      	mov	r1, r3
 800e610:	4610      	mov	r0, r2
 800e612:	f002 fb41 	bl	8010c98 <SDMMC_CmdAppCommand>
 800e616:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d001      	beq.n	800e622 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e620:	e09a      	b.n	800e758 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e622:	f04f 33ff 	mov.w	r3, #4294967295
 800e626:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e628:	2308      	movs	r3, #8
 800e62a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e62c:	2330      	movs	r3, #48	; 0x30
 800e62e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e630:	2302      	movs	r3, #2
 800e632:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e634:	2300      	movs	r3, #0
 800e636:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e638:	2301      	movs	r3, #1
 800e63a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	f107 0210 	add.w	r2, r7, #16
 800e644:	4611      	mov	r1, r2
 800e646:	4618      	mov	r0, r3
 800e648:	f002 f9ce 	bl	80109e8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4618      	mov	r0, r3
 800e652:	f002 fb88 	bl	8010d66 <SDMMC_CmdSendSCR>
 800e656:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d022      	beq.n	800e6a4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800e65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e660:	e07a      	b.n	800e758 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d00e      	beq.n	800e68e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6819      	ldr	r1, [r3, #0]
 800e674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e676:	009b      	lsls	r3, r3, #2
 800e678:	f107 0208 	add.w	r2, r7, #8
 800e67c:	18d4      	adds	r4, r2, r3
 800e67e:	4608      	mov	r0, r1
 800e680:	f002 f92d 	bl	80108de <SDIO_ReadFIFO>
 800e684:	4603      	mov	r3, r0
 800e686:	6023      	str	r3, [r4, #0]
      index++;
 800e688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e68a:	3301      	adds	r3, #1
 800e68c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e68e:	f7fb fd1f 	bl	800a0d0 <HAL_GetTick>
 800e692:	4602      	mov	r2, r0
 800e694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e696:	1ad3      	subs	r3, r2, r3
 800e698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e69c:	d102      	bne.n	800e6a4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e69e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e6a2:	e059      	b.n	800e758 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6aa:	f240 432a 	movw	r3, #1066	; 0x42a
 800e6ae:	4013      	ands	r3, r2
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d0d6      	beq.n	800e662 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6ba:	f003 0308 	and.w	r3, r3, #8
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d005      	beq.n	800e6ce <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	2208      	movs	r2, #8
 800e6c8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e6ca:	2308      	movs	r3, #8
 800e6cc:	e044      	b.n	800e758 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6d4:	f003 0302 	and.w	r3, r3, #2
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d005      	beq.n	800e6e8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	2202      	movs	r2, #2
 800e6e2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e6e4:	2302      	movs	r3, #2
 800e6e6:	e037      	b.n	800e758 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6ee:	f003 0320 	and.w	r3, r3, #32
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d005      	beq.n	800e702 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	2220      	movs	r2, #32
 800e6fc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e6fe:	2320      	movs	r3, #32
 800e700:	e02a      	b.n	800e758 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	f240 523a 	movw	r2, #1338	; 0x53a
 800e70a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	061a      	lsls	r2, r3, #24
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	021b      	lsls	r3, r3, #8
 800e714:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e718:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	0a1b      	lsrs	r3, r3, #8
 800e71e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e722:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	0e1b      	lsrs	r3, r3, #24
 800e728:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72c:	601a      	str	r2, [r3, #0]
    scr++;
 800e72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e730:	3304      	adds	r3, #4
 800e732:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	061a      	lsls	r2, r3, #24
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	021b      	lsls	r3, r3, #8
 800e73c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e740:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	0a1b      	lsrs	r3, r3, #8
 800e746:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e74a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	0e1b      	lsrs	r3, r3, #24
 800e750:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e754:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e756:	2300      	movs	r3, #0
}
 800e758:	4618      	mov	r0, r3
 800e75a:	373c      	adds	r7, #60	; 0x3c
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd90      	pop	{r4, r7, pc}

0800e760 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b086      	sub	sp, #24
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e76c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e772:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d03f      	beq.n	800e7fa <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e77a:	2300      	movs	r3, #0
 800e77c:	617b      	str	r3, [r7, #20]
 800e77e:	e033      	b.n	800e7e8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	4618      	mov	r0, r3
 800e786:	f002 f8aa 	bl	80108de <SDIO_ReadFIFO>
 800e78a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	b2da      	uxtb	r2, r3
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	3301      	adds	r3, #1
 800e798:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e79a:	693b      	ldr	r3, [r7, #16]
 800e79c:	3b01      	subs	r3, #1
 800e79e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	0a1b      	lsrs	r3, r3, #8
 800e7a4:	b2da      	uxtb	r2, r3
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	3301      	adds	r3, #1
 800e7ae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	3b01      	subs	r3, #1
 800e7b4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	0c1b      	lsrs	r3, r3, #16
 800e7ba:	b2da      	uxtb	r2, r3
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	3b01      	subs	r3, #1
 800e7ca:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	0e1b      	lsrs	r3, r3, #24
 800e7d0:	b2da      	uxtb	r2, r3
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	3301      	adds	r3, #1
 800e7da:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e7dc:	693b      	ldr	r3, [r7, #16]
 800e7de:	3b01      	subs	r3, #1
 800e7e0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	3301      	adds	r3, #1
 800e7e6:	617b      	str	r3, [r7, #20]
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	2b07      	cmp	r3, #7
 800e7ec:	d9c8      	bls.n	800e780 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	68fa      	ldr	r2, [r7, #12]
 800e7f2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	693a      	ldr	r2, [r7, #16]
 800e7f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e7fa:	bf00      	nop
 800e7fc:	3718      	adds	r7, #24
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}

0800e802 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e802:	b580      	push	{r7, lr}
 800e804:	b086      	sub	sp, #24
 800e806:	af00      	add	r7, sp, #0
 800e808:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6a1b      	ldr	r3, [r3, #32]
 800e80e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e814:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e816:	693b      	ldr	r3, [r7, #16]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d043      	beq.n	800e8a4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e81c:	2300      	movs	r3, #0
 800e81e:	617b      	str	r3, [r7, #20]
 800e820:	e037      	b.n	800e892 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	3301      	adds	r3, #1
 800e82c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	3b01      	subs	r3, #1
 800e832:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	021a      	lsls	r2, r3, #8
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	4313      	orrs	r3, r2
 800e83e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	3301      	adds	r3, #1
 800e844:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	3b01      	subs	r3, #1
 800e84a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	781b      	ldrb	r3, [r3, #0]
 800e850:	041a      	lsls	r2, r3, #16
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	4313      	orrs	r3, r2
 800e856:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	3301      	adds	r3, #1
 800e85c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	3b01      	subs	r3, #1
 800e862:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	061a      	lsls	r2, r3, #24
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	4313      	orrs	r3, r2
 800e86e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	3301      	adds	r3, #1
 800e874:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e876:	693b      	ldr	r3, [r7, #16]
 800e878:	3b01      	subs	r3, #1
 800e87a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	f107 0208 	add.w	r2, r7, #8
 800e884:	4611      	mov	r1, r2
 800e886:	4618      	mov	r0, r3
 800e888:	f002 f836 	bl	80108f8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e88c:	697b      	ldr	r3, [r7, #20]
 800e88e:	3301      	adds	r3, #1
 800e890:	617b      	str	r3, [r7, #20]
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	2b07      	cmp	r3, #7
 800e896:	d9c4      	bls.n	800e822 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	68fa      	ldr	r2, [r7, #12]
 800e89c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	693a      	ldr	r2, [r7, #16]
 800e8a2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e8a4:	bf00      	nop
 800e8a6:	3718      	adds	r7, #24
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}

0800e8ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b082      	sub	sp, #8
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d101      	bne.n	800e8be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	e056      	b.n	800e96c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e8ca:	b2db      	uxtb	r3, r3
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d106      	bne.n	800e8de <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f7f8 fe9b 	bl	8007614 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2202      	movs	r2, #2
 800e8e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	681a      	ldr	r2, [r3, #0]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e8f4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	685a      	ldr	r2, [r3, #4]
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	689b      	ldr	r3, [r3, #8]
 800e8fe:	431a      	orrs	r2, r3
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	68db      	ldr	r3, [r3, #12]
 800e904:	431a      	orrs	r2, r3
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	691b      	ldr	r3, [r3, #16]
 800e90a:	431a      	orrs	r2, r3
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	695b      	ldr	r3, [r3, #20]
 800e910:	431a      	orrs	r2, r3
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	699b      	ldr	r3, [r3, #24]
 800e916:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e91a:	431a      	orrs	r2, r3
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	69db      	ldr	r3, [r3, #28]
 800e920:	431a      	orrs	r2, r3
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6a1b      	ldr	r3, [r3, #32]
 800e926:	ea42 0103 	orr.w	r1, r2, r3
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	430a      	orrs	r2, r1
 800e934:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	699b      	ldr	r3, [r3, #24]
 800e93a:	0c1b      	lsrs	r3, r3, #16
 800e93c:	f003 0104 	and.w	r1, r3, #4
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	430a      	orrs	r2, r1
 800e94a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	69da      	ldr	r2, [r3, #28]
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e95a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2200      	movs	r2, #0
 800e960:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2201      	movs	r2, #1
 800e966:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e96a:	2300      	movs	r3, #0
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3708      	adds	r7, #8
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b088      	sub	sp, #32
 800e978:	af00      	add	r7, sp, #0
 800e97a:	60f8      	str	r0, [r7, #12]
 800e97c:	60b9      	str	r1, [r7, #8]
 800e97e:	603b      	str	r3, [r7, #0]
 800e980:	4613      	mov	r3, r2
 800e982:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e984:	2300      	movs	r3, #0
 800e986:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e98e:	2b01      	cmp	r3, #1
 800e990:	d101      	bne.n	800e996 <HAL_SPI_Transmit+0x22>
 800e992:	2302      	movs	r3, #2
 800e994:	e11e      	b.n	800ebd4 <HAL_SPI_Transmit+0x260>
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	2201      	movs	r2, #1
 800e99a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e99e:	f7fb fb97 	bl	800a0d0 <HAL_GetTick>
 800e9a2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e9a4:	88fb      	ldrh	r3, [r7, #6]
 800e9a6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e9ae:	b2db      	uxtb	r3, r3
 800e9b0:	2b01      	cmp	r3, #1
 800e9b2:	d002      	beq.n	800e9ba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e9b4:	2302      	movs	r3, #2
 800e9b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e9b8:	e103      	b.n	800ebc2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d002      	beq.n	800e9c6 <HAL_SPI_Transmit+0x52>
 800e9c0:	88fb      	ldrh	r3, [r7, #6]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d102      	bne.n	800e9cc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e9ca:	e0fa      	b.n	800ebc2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2203      	movs	r2, #3
 800e9d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	68ba      	ldr	r2, [r7, #8]
 800e9de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	88fa      	ldrh	r2, [r7, #6]
 800e9e4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	88fa      	ldrh	r2, [r7, #6]
 800e9ea:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	2200      	movs	r2, #0
 800ea02:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	2200      	movs	r2, #0
 800ea08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	689b      	ldr	r3, [r3, #8]
 800ea0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea12:	d107      	bne.n	800ea24 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	681a      	ldr	r2, [r3, #0]
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ea22:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea2e:	2b40      	cmp	r3, #64	; 0x40
 800ea30:	d007      	beq.n	800ea42 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	681a      	ldr	r2, [r3, #0]
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	68db      	ldr	r3, [r3, #12]
 800ea46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea4a:	d14b      	bne.n	800eae4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	685b      	ldr	r3, [r3, #4]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d002      	beq.n	800ea5a <HAL_SPI_Transmit+0xe6>
 800ea54:	8afb      	ldrh	r3, [r7, #22]
 800ea56:	2b01      	cmp	r3, #1
 800ea58:	d13e      	bne.n	800ead8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea5e:	881a      	ldrh	r2, [r3, #0]
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea6a:	1c9a      	adds	r2, r3, #2
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea74:	b29b      	uxth	r3, r3
 800ea76:	3b01      	subs	r3, #1
 800ea78:	b29a      	uxth	r2, r3
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ea7e:	e02b      	b.n	800ead8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	689b      	ldr	r3, [r3, #8]
 800ea86:	f003 0302 	and.w	r3, r3, #2
 800ea8a:	2b02      	cmp	r3, #2
 800ea8c:	d112      	bne.n	800eab4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea92:	881a      	ldrh	r2, [r3, #0]
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea9e:	1c9a      	adds	r2, r3, #2
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eaa8:	b29b      	uxth	r3, r3
 800eaaa:	3b01      	subs	r3, #1
 800eaac:	b29a      	uxth	r2, r3
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	86da      	strh	r2, [r3, #54]	; 0x36
 800eab2:	e011      	b.n	800ead8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eab4:	f7fb fb0c 	bl	800a0d0 <HAL_GetTick>
 800eab8:	4602      	mov	r2, r0
 800eaba:	69bb      	ldr	r3, [r7, #24]
 800eabc:	1ad3      	subs	r3, r2, r3
 800eabe:	683a      	ldr	r2, [r7, #0]
 800eac0:	429a      	cmp	r2, r3
 800eac2:	d803      	bhi.n	800eacc <HAL_SPI_Transmit+0x158>
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaca:	d102      	bne.n	800ead2 <HAL_SPI_Transmit+0x15e>
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d102      	bne.n	800ead8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800ead2:	2303      	movs	r3, #3
 800ead4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ead6:	e074      	b.n	800ebc2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eadc:	b29b      	uxth	r3, r3
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d1ce      	bne.n	800ea80 <HAL_SPI_Transmit+0x10c>
 800eae2:	e04c      	b.n	800eb7e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	685b      	ldr	r3, [r3, #4]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d002      	beq.n	800eaf2 <HAL_SPI_Transmit+0x17e>
 800eaec:	8afb      	ldrh	r3, [r7, #22]
 800eaee:	2b01      	cmp	r3, #1
 800eaf0:	d140      	bne.n	800eb74 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	330c      	adds	r3, #12
 800eafc:	7812      	ldrb	r2, [r2, #0]
 800eafe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb04:	1c5a      	adds	r2, r3, #1
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb0e:	b29b      	uxth	r3, r3
 800eb10:	3b01      	subs	r3, #1
 800eb12:	b29a      	uxth	r2, r3
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800eb18:	e02c      	b.n	800eb74 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	689b      	ldr	r3, [r3, #8]
 800eb20:	f003 0302 	and.w	r3, r3, #2
 800eb24:	2b02      	cmp	r3, #2
 800eb26:	d113      	bne.n	800eb50 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	330c      	adds	r3, #12
 800eb32:	7812      	ldrb	r2, [r2, #0]
 800eb34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb3a:	1c5a      	adds	r2, r3, #1
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb44:	b29b      	uxth	r3, r3
 800eb46:	3b01      	subs	r3, #1
 800eb48:	b29a      	uxth	r2, r3
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	86da      	strh	r2, [r3, #54]	; 0x36
 800eb4e:	e011      	b.n	800eb74 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb50:	f7fb fabe 	bl	800a0d0 <HAL_GetTick>
 800eb54:	4602      	mov	r2, r0
 800eb56:	69bb      	ldr	r3, [r7, #24]
 800eb58:	1ad3      	subs	r3, r2, r3
 800eb5a:	683a      	ldr	r2, [r7, #0]
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	d803      	bhi.n	800eb68 <HAL_SPI_Transmit+0x1f4>
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb66:	d102      	bne.n	800eb6e <HAL_SPI_Transmit+0x1fa>
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d102      	bne.n	800eb74 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800eb6e:	2303      	movs	r3, #3
 800eb70:	77fb      	strb	r3, [r7, #31]
          goto error;
 800eb72:	e026      	b.n	800ebc2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb78:	b29b      	uxth	r3, r3
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d1cd      	bne.n	800eb1a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800eb7e:	69ba      	ldr	r2, [r7, #24]
 800eb80:	6839      	ldr	r1, [r7, #0]
 800eb82:	68f8      	ldr	r0, [r7, #12]
 800eb84:	f000 fba4 	bl	800f2d0 <SPI_EndRxTxTransaction>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d002      	beq.n	800eb94 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	2220      	movs	r2, #32
 800eb92:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	689b      	ldr	r3, [r3, #8]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d10a      	bne.n	800ebb2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	613b      	str	r3, [r7, #16]
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	68db      	ldr	r3, [r3, #12]
 800eba6:	613b      	str	r3, [r7, #16]
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	689b      	ldr	r3, [r3, #8]
 800ebae:	613b      	str	r3, [r7, #16]
 800ebb0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d002      	beq.n	800ebc0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800ebba:	2301      	movs	r3, #1
 800ebbc:	77fb      	strb	r3, [r7, #31]
 800ebbe:	e000      	b.n	800ebc2 <HAL_SPI_Transmit+0x24e>
  }

error:
 800ebc0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	2201      	movs	r2, #1
 800ebc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	2200      	movs	r2, #0
 800ebce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ebd2:	7ffb      	ldrb	r3, [r7, #31]
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3720      	adds	r7, #32
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b088      	sub	sp, #32
 800ebe0:	af02      	add	r7, sp, #8
 800ebe2:	60f8      	str	r0, [r7, #12]
 800ebe4:	60b9      	str	r1, [r7, #8]
 800ebe6:	603b      	str	r3, [r7, #0]
 800ebe8:	4613      	mov	r3, r2
 800ebea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ebec:	2300      	movs	r3, #0
 800ebee:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ebf8:	d112      	bne.n	800ec20 <HAL_SPI_Receive+0x44>
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	689b      	ldr	r3, [r3, #8]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d10e      	bne.n	800ec20 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	2204      	movs	r2, #4
 800ec06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ec0a:	88fa      	ldrh	r2, [r7, #6]
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	9300      	str	r3, [sp, #0]
 800ec10:	4613      	mov	r3, r2
 800ec12:	68ba      	ldr	r2, [r7, #8]
 800ec14:	68b9      	ldr	r1, [r7, #8]
 800ec16:	68f8      	ldr	r0, [r7, #12]
 800ec18:	f000 f8e9 	bl	800edee <HAL_SPI_TransmitReceive>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	e0e2      	b.n	800ede6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ec26:	2b01      	cmp	r3, #1
 800ec28:	d101      	bne.n	800ec2e <HAL_SPI_Receive+0x52>
 800ec2a:	2302      	movs	r3, #2
 800ec2c:	e0db      	b.n	800ede6 <HAL_SPI_Receive+0x20a>
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	2201      	movs	r2, #1
 800ec32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ec36:	f7fb fa4b 	bl	800a0d0 <HAL_GetTick>
 800ec3a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ec42:	b2db      	uxtb	r3, r3
 800ec44:	2b01      	cmp	r3, #1
 800ec46:	d002      	beq.n	800ec4e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ec48:	2302      	movs	r3, #2
 800ec4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ec4c:	e0c2      	b.n	800edd4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d002      	beq.n	800ec5a <HAL_SPI_Receive+0x7e>
 800ec54:	88fb      	ldrh	r3, [r7, #6]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d102      	bne.n	800ec60 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ec5e:	e0b9      	b.n	800edd4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	2204      	movs	r2, #4
 800ec64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	68ba      	ldr	r2, [r7, #8]
 800ec72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	88fa      	ldrh	r2, [r7, #6]
 800ec78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	88fa      	ldrh	r2, [r7, #6]
 800ec7e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2200      	movs	r2, #0
 800ec84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2200      	movs	r2, #0
 800ec96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	689b      	ldr	r3, [r3, #8]
 800eca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eca6:	d107      	bne.n	800ecb8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	681a      	ldr	r2, [r3, #0]
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ecb6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecc2:	2b40      	cmp	r3, #64	; 0x40
 800ecc4:	d007      	beq.n	800ecd6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	681a      	ldr	r2, [r3, #0]
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ecd4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	68db      	ldr	r3, [r3, #12]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d162      	bne.n	800eda4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ecde:	e02e      	b.n	800ed3e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	689b      	ldr	r3, [r3, #8]
 800ece6:	f003 0301 	and.w	r3, r3, #1
 800ecea:	2b01      	cmp	r3, #1
 800ecec:	d115      	bne.n	800ed1a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	f103 020c 	add.w	r2, r3, #12
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecfa:	7812      	ldrb	r2, [r2, #0]
 800ecfc:	b2d2      	uxtb	r2, r2
 800ecfe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed04:	1c5a      	adds	r2, r3, #1
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed0e:	b29b      	uxth	r3, r3
 800ed10:	3b01      	subs	r3, #1
 800ed12:	b29a      	uxth	r2, r3
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ed18:	e011      	b.n	800ed3e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed1a:	f7fb f9d9 	bl	800a0d0 <HAL_GetTick>
 800ed1e:	4602      	mov	r2, r0
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	1ad3      	subs	r3, r2, r3
 800ed24:	683a      	ldr	r2, [r7, #0]
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d803      	bhi.n	800ed32 <HAL_SPI_Receive+0x156>
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed30:	d102      	bne.n	800ed38 <HAL_SPI_Receive+0x15c>
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d102      	bne.n	800ed3e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800ed38:	2303      	movs	r3, #3
 800ed3a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ed3c:	e04a      	b.n	800edd4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed42:	b29b      	uxth	r3, r3
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d1cb      	bne.n	800ece0 <HAL_SPI_Receive+0x104>
 800ed48:	e031      	b.n	800edae <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	689b      	ldr	r3, [r3, #8]
 800ed50:	f003 0301 	and.w	r3, r3, #1
 800ed54:	2b01      	cmp	r3, #1
 800ed56:	d113      	bne.n	800ed80 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	68da      	ldr	r2, [r3, #12]
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed62:	b292      	uxth	r2, r2
 800ed64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed6a:	1c9a      	adds	r2, r3, #2
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed74:	b29b      	uxth	r3, r3
 800ed76:	3b01      	subs	r3, #1
 800ed78:	b29a      	uxth	r2, r3
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ed7e:	e011      	b.n	800eda4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed80:	f7fb f9a6 	bl	800a0d0 <HAL_GetTick>
 800ed84:	4602      	mov	r2, r0
 800ed86:	693b      	ldr	r3, [r7, #16]
 800ed88:	1ad3      	subs	r3, r2, r3
 800ed8a:	683a      	ldr	r2, [r7, #0]
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d803      	bhi.n	800ed98 <HAL_SPI_Receive+0x1bc>
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed96:	d102      	bne.n	800ed9e <HAL_SPI_Receive+0x1c2>
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d102      	bne.n	800eda4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800ed9e:	2303      	movs	r3, #3
 800eda0:	75fb      	strb	r3, [r7, #23]
          goto error;
 800eda2:	e017      	b.n	800edd4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eda8:	b29b      	uxth	r3, r3
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d1cd      	bne.n	800ed4a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800edae:	693a      	ldr	r2, [r7, #16]
 800edb0:	6839      	ldr	r1, [r7, #0]
 800edb2:	68f8      	ldr	r0, [r7, #12]
 800edb4:	f000 fa27 	bl	800f206 <SPI_EndRxTransaction>
 800edb8:	4603      	mov	r3, r0
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d002      	beq.n	800edc4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2220      	movs	r2, #32
 800edc2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d002      	beq.n	800edd2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800edcc:	2301      	movs	r3, #1
 800edce:	75fb      	strb	r3, [r7, #23]
 800edd0:	e000      	b.n	800edd4 <HAL_SPI_Receive+0x1f8>
  }

error :
 800edd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	2201      	movs	r2, #1
 800edd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	2200      	movs	r2, #0
 800ede0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ede4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3718      	adds	r7, #24
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}

0800edee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800edee:	b580      	push	{r7, lr}
 800edf0:	b08c      	sub	sp, #48	; 0x30
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	60f8      	str	r0, [r7, #12]
 800edf6:	60b9      	str	r1, [r7, #8]
 800edf8:	607a      	str	r2, [r7, #4]
 800edfa:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800edfc:	2301      	movs	r3, #1
 800edfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ee00:	2300      	movs	r3, #0
 800ee02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ee0c:	2b01      	cmp	r3, #1
 800ee0e:	d101      	bne.n	800ee14 <HAL_SPI_TransmitReceive+0x26>
 800ee10:	2302      	movs	r3, #2
 800ee12:	e18a      	b.n	800f12a <HAL_SPI_TransmitReceive+0x33c>
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	2201      	movs	r2, #1
 800ee18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ee1c:	f7fb f958 	bl	800a0d0 <HAL_GetTick>
 800ee20:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ee28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	685b      	ldr	r3, [r3, #4]
 800ee30:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ee32:	887b      	ldrh	r3, [r7, #2]
 800ee34:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ee36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee3a:	2b01      	cmp	r3, #1
 800ee3c:	d00f      	beq.n	800ee5e <HAL_SPI_TransmitReceive+0x70>
 800ee3e:	69fb      	ldr	r3, [r7, #28]
 800ee40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ee44:	d107      	bne.n	800ee56 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	689b      	ldr	r3, [r3, #8]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d103      	bne.n	800ee56 <HAL_SPI_TransmitReceive+0x68>
 800ee4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee52:	2b04      	cmp	r3, #4
 800ee54:	d003      	beq.n	800ee5e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ee56:	2302      	movs	r3, #2
 800ee58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ee5c:	e15b      	b.n	800f116 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d005      	beq.n	800ee70 <HAL_SPI_TransmitReceive+0x82>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d002      	beq.n	800ee70 <HAL_SPI_TransmitReceive+0x82>
 800ee6a:	887b      	ldrh	r3, [r7, #2]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d103      	bne.n	800ee78 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ee70:	2301      	movs	r3, #1
 800ee72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ee76:	e14e      	b.n	800f116 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ee7e:	b2db      	uxtb	r3, r3
 800ee80:	2b04      	cmp	r3, #4
 800ee82:	d003      	beq.n	800ee8c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	2205      	movs	r2, #5
 800ee88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	687a      	ldr	r2, [r7, #4]
 800ee96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	887a      	ldrh	r2, [r7, #2]
 800ee9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	887a      	ldrh	r2, [r7, #2]
 800eea2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	68ba      	ldr	r2, [r7, #8]
 800eea8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	887a      	ldrh	r2, [r7, #2]
 800eeae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	887a      	ldrh	r2, [r7, #2]
 800eeb4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	2200      	movs	r2, #0
 800eec0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eecc:	2b40      	cmp	r3, #64	; 0x40
 800eece:	d007      	beq.n	800eee0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	681a      	ldr	r2, [r3, #0]
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eede:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	68db      	ldr	r3, [r3, #12]
 800eee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eee8:	d178      	bne.n	800efdc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	685b      	ldr	r3, [r3, #4]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d002      	beq.n	800eef8 <HAL_SPI_TransmitReceive+0x10a>
 800eef2:	8b7b      	ldrh	r3, [r7, #26]
 800eef4:	2b01      	cmp	r3, #1
 800eef6:	d166      	bne.n	800efc6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eefc:	881a      	ldrh	r2, [r3, #0]
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef08:	1c9a      	adds	r2, r3, #2
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ef12:	b29b      	uxth	r3, r3
 800ef14:	3b01      	subs	r3, #1
 800ef16:	b29a      	uxth	r2, r3
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ef1c:	e053      	b.n	800efc6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	689b      	ldr	r3, [r3, #8]
 800ef24:	f003 0302 	and.w	r3, r3, #2
 800ef28:	2b02      	cmp	r3, #2
 800ef2a:	d11b      	bne.n	800ef64 <HAL_SPI_TransmitReceive+0x176>
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ef30:	b29b      	uxth	r3, r3
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d016      	beq.n	800ef64 <HAL_SPI_TransmitReceive+0x176>
 800ef36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef38:	2b01      	cmp	r3, #1
 800ef3a:	d113      	bne.n	800ef64 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef40:	881a      	ldrh	r2, [r3, #0]
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef4c:	1c9a      	adds	r2, r3, #2
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ef56:	b29b      	uxth	r3, r3
 800ef58:	3b01      	subs	r3, #1
 800ef5a:	b29a      	uxth	r2, r3
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ef60:	2300      	movs	r3, #0
 800ef62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	689b      	ldr	r3, [r3, #8]
 800ef6a:	f003 0301 	and.w	r3, r3, #1
 800ef6e:	2b01      	cmp	r3, #1
 800ef70:	d119      	bne.n	800efa6 <HAL_SPI_TransmitReceive+0x1b8>
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef76:	b29b      	uxth	r3, r3
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d014      	beq.n	800efa6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	68da      	ldr	r2, [r3, #12]
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef86:	b292      	uxth	r2, r2
 800ef88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef8e:	1c9a      	adds	r2, r3, #2
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef98:	b29b      	uxth	r3, r3
 800ef9a:	3b01      	subs	r3, #1
 800ef9c:	b29a      	uxth	r2, r3
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800efa2:	2301      	movs	r3, #1
 800efa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800efa6:	f7fb f893 	bl	800a0d0 <HAL_GetTick>
 800efaa:	4602      	mov	r2, r0
 800efac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efae:	1ad3      	subs	r3, r2, r3
 800efb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d807      	bhi.n	800efc6 <HAL_SPI_TransmitReceive+0x1d8>
 800efb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efbc:	d003      	beq.n	800efc6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800efbe:	2303      	movs	r3, #3
 800efc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800efc4:	e0a7      	b.n	800f116 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800efca:	b29b      	uxth	r3, r3
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d1a6      	bne.n	800ef1e <HAL_SPI_TransmitReceive+0x130>
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800efd4:	b29b      	uxth	r3, r3
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d1a1      	bne.n	800ef1e <HAL_SPI_TransmitReceive+0x130>
 800efda:	e07c      	b.n	800f0d6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	685b      	ldr	r3, [r3, #4]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d002      	beq.n	800efea <HAL_SPI_TransmitReceive+0x1fc>
 800efe4:	8b7b      	ldrh	r3, [r7, #26]
 800efe6:	2b01      	cmp	r3, #1
 800efe8:	d16b      	bne.n	800f0c2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	330c      	adds	r3, #12
 800eff4:	7812      	ldrb	r2, [r2, #0]
 800eff6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800effc:	1c5a      	adds	r2, r3, #1
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f006:	b29b      	uxth	r3, r3
 800f008:	3b01      	subs	r3, #1
 800f00a:	b29a      	uxth	r2, r3
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f010:	e057      	b.n	800f0c2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	689b      	ldr	r3, [r3, #8]
 800f018:	f003 0302 	and.w	r3, r3, #2
 800f01c:	2b02      	cmp	r3, #2
 800f01e:	d11c      	bne.n	800f05a <HAL_SPI_TransmitReceive+0x26c>
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f024:	b29b      	uxth	r3, r3
 800f026:	2b00      	cmp	r3, #0
 800f028:	d017      	beq.n	800f05a <HAL_SPI_TransmitReceive+0x26c>
 800f02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f02c:	2b01      	cmp	r3, #1
 800f02e:	d114      	bne.n	800f05a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	330c      	adds	r3, #12
 800f03a:	7812      	ldrb	r2, [r2, #0]
 800f03c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f042:	1c5a      	adds	r2, r3, #1
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	3b01      	subs	r3, #1
 800f050:	b29a      	uxth	r2, r3
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f056:	2300      	movs	r3, #0
 800f058:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	689b      	ldr	r3, [r3, #8]
 800f060:	f003 0301 	and.w	r3, r3, #1
 800f064:	2b01      	cmp	r3, #1
 800f066:	d119      	bne.n	800f09c <HAL_SPI_TransmitReceive+0x2ae>
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d014      	beq.n	800f09c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	68da      	ldr	r2, [r3, #12]
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f07c:	b2d2      	uxtb	r2, r2
 800f07e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f084:	1c5a      	adds	r2, r3, #1
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f08e:	b29b      	uxth	r3, r3
 800f090:	3b01      	subs	r3, #1
 800f092:	b29a      	uxth	r2, r3
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f098:	2301      	movs	r3, #1
 800f09a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f09c:	f7fb f818 	bl	800a0d0 <HAL_GetTick>
 800f0a0:	4602      	mov	r2, r0
 800f0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a4:	1ad3      	subs	r3, r2, r3
 800f0a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d803      	bhi.n	800f0b4 <HAL_SPI_TransmitReceive+0x2c6>
 800f0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0b2:	d102      	bne.n	800f0ba <HAL_SPI_TransmitReceive+0x2cc>
 800f0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d103      	bne.n	800f0c2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800f0ba:	2303      	movs	r3, #3
 800f0bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800f0c0:	e029      	b.n	800f116 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f0c6:	b29b      	uxth	r3, r3
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d1a2      	bne.n	800f012 <HAL_SPI_TransmitReceive+0x224>
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f0d0:	b29b      	uxth	r3, r3
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d19d      	bne.n	800f012 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f0d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f0da:	68f8      	ldr	r0, [r7, #12]
 800f0dc:	f000 f8f8 	bl	800f2d0 <SPI_EndRxTxTransaction>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d006      	beq.n	800f0f4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800f0e6:	2301      	movs	r3, #1
 800f0e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	2220      	movs	r2, #32
 800f0f0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800f0f2:	e010      	b.n	800f116 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	689b      	ldr	r3, [r3, #8]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d10b      	bne.n	800f114 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	617b      	str	r3, [r7, #20]
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	68db      	ldr	r3, [r3, #12]
 800f106:	617b      	str	r3, [r7, #20]
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	689b      	ldr	r3, [r3, #8]
 800f10e:	617b      	str	r3, [r7, #20]
 800f110:	697b      	ldr	r3, [r7, #20]
 800f112:	e000      	b.n	800f116 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800f114:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	2201      	movs	r2, #1
 800f11a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	2200      	movs	r2, #0
 800f122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f126:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3730      	adds	r7, #48	; 0x30
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}

0800f132 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f132:	b580      	push	{r7, lr}
 800f134:	b084      	sub	sp, #16
 800f136:	af00      	add	r7, sp, #0
 800f138:	60f8      	str	r0, [r7, #12]
 800f13a:	60b9      	str	r1, [r7, #8]
 800f13c:	603b      	str	r3, [r7, #0]
 800f13e:	4613      	mov	r3, r2
 800f140:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f142:	e04c      	b.n	800f1de <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f14a:	d048      	beq.n	800f1de <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800f14c:	f7fa ffc0 	bl	800a0d0 <HAL_GetTick>
 800f150:	4602      	mov	r2, r0
 800f152:	69bb      	ldr	r3, [r7, #24]
 800f154:	1ad3      	subs	r3, r2, r3
 800f156:	683a      	ldr	r2, [r7, #0]
 800f158:	429a      	cmp	r2, r3
 800f15a:	d902      	bls.n	800f162 <SPI_WaitFlagStateUntilTimeout+0x30>
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d13d      	bne.n	800f1de <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	685a      	ldr	r2, [r3, #4]
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f170:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	685b      	ldr	r3, [r3, #4]
 800f176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f17a:	d111      	bne.n	800f1a0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	689b      	ldr	r3, [r3, #8]
 800f180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f184:	d004      	beq.n	800f190 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	689b      	ldr	r3, [r3, #8]
 800f18a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f18e:	d107      	bne.n	800f1a0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	681a      	ldr	r2, [r3, #0]
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f19e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f1a8:	d10f      	bne.n	800f1ca <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	681a      	ldr	r2, [r3, #0]
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f1b8:	601a      	str	r2, [r3, #0]
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	681a      	ldr	r2, [r3, #0]
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f1c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	2201      	movs	r2, #1
 800f1ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f1da:	2303      	movs	r3, #3
 800f1dc:	e00f      	b.n	800f1fe <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	689a      	ldr	r2, [r3, #8]
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	4013      	ands	r3, r2
 800f1e8:	68ba      	ldr	r2, [r7, #8]
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	bf0c      	ite	eq
 800f1ee:	2301      	moveq	r3, #1
 800f1f0:	2300      	movne	r3, #0
 800f1f2:	b2db      	uxtb	r3, r3
 800f1f4:	461a      	mov	r2, r3
 800f1f6:	79fb      	ldrb	r3, [r7, #7]
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	d1a3      	bne.n	800f144 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800f1fc:	2300      	movs	r3, #0
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3710      	adds	r7, #16
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}

0800f206 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f206:	b580      	push	{r7, lr}
 800f208:	b086      	sub	sp, #24
 800f20a:	af02      	add	r7, sp, #8
 800f20c:	60f8      	str	r0, [r7, #12]
 800f20e:	60b9      	str	r1, [r7, #8]
 800f210:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	685b      	ldr	r3, [r3, #4]
 800f216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f21a:	d111      	bne.n	800f240 <SPI_EndRxTransaction+0x3a>
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	689b      	ldr	r3, [r3, #8]
 800f220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f224:	d004      	beq.n	800f230 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	689b      	ldr	r3, [r3, #8]
 800f22a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f22e:	d107      	bne.n	800f240 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	681a      	ldr	r2, [r3, #0]
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f23e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f248:	d12a      	bne.n	800f2a0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	689b      	ldr	r3, [r3, #8]
 800f24e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f252:	d012      	beq.n	800f27a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	9300      	str	r3, [sp, #0]
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	2200      	movs	r2, #0
 800f25c:	2180      	movs	r1, #128	; 0x80
 800f25e:	68f8      	ldr	r0, [r7, #12]
 800f260:	f7ff ff67 	bl	800f132 <SPI_WaitFlagStateUntilTimeout>
 800f264:	4603      	mov	r3, r0
 800f266:	2b00      	cmp	r3, #0
 800f268:	d02d      	beq.n	800f2c6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f26e:	f043 0220 	orr.w	r2, r3, #32
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f276:	2303      	movs	r3, #3
 800f278:	e026      	b.n	800f2c8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	9300      	str	r3, [sp, #0]
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	2200      	movs	r2, #0
 800f282:	2101      	movs	r1, #1
 800f284:	68f8      	ldr	r0, [r7, #12]
 800f286:	f7ff ff54 	bl	800f132 <SPI_WaitFlagStateUntilTimeout>
 800f28a:	4603      	mov	r3, r0
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d01a      	beq.n	800f2c6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f294:	f043 0220 	orr.w	r2, r3, #32
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f29c:	2303      	movs	r3, #3
 800f29e:	e013      	b.n	800f2c8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	2101      	movs	r1, #1
 800f2aa:	68f8      	ldr	r0, [r7, #12]
 800f2ac:	f7ff ff41 	bl	800f132 <SPI_WaitFlagStateUntilTimeout>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d007      	beq.n	800f2c6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2ba:	f043 0220 	orr.w	r2, r3, #32
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f2c2:	2303      	movs	r3, #3
 800f2c4:	e000      	b.n	800f2c8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800f2c6:	2300      	movs	r3, #0
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3710      	adds	r7, #16
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}

0800f2d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b088      	sub	sp, #32
 800f2d4:	af02      	add	r7, sp, #8
 800f2d6:	60f8      	str	r0, [r7, #12]
 800f2d8:	60b9      	str	r1, [r7, #8]
 800f2da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f2dc:	4b1b      	ldr	r3, [pc, #108]	; (800f34c <SPI_EndRxTxTransaction+0x7c>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	4a1b      	ldr	r2, [pc, #108]	; (800f350 <SPI_EndRxTxTransaction+0x80>)
 800f2e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f2e6:	0d5b      	lsrs	r3, r3, #21
 800f2e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f2ec:	fb02 f303 	mul.w	r3, r2, r3
 800f2f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	685b      	ldr	r3, [r3, #4]
 800f2f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f2fa:	d112      	bne.n	800f322 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	9300      	str	r3, [sp, #0]
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	2200      	movs	r2, #0
 800f304:	2180      	movs	r1, #128	; 0x80
 800f306:	68f8      	ldr	r0, [r7, #12]
 800f308:	f7ff ff13 	bl	800f132 <SPI_WaitFlagStateUntilTimeout>
 800f30c:	4603      	mov	r3, r0
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d016      	beq.n	800f340 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f316:	f043 0220 	orr.w	r2, r3, #32
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f31e:	2303      	movs	r3, #3
 800f320:	e00f      	b.n	800f342 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d00a      	beq.n	800f33e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f328:	697b      	ldr	r3, [r7, #20]
 800f32a:	3b01      	subs	r3, #1
 800f32c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	689b      	ldr	r3, [r3, #8]
 800f334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f338:	2b80      	cmp	r3, #128	; 0x80
 800f33a:	d0f2      	beq.n	800f322 <SPI_EndRxTxTransaction+0x52>
 800f33c:	e000      	b.n	800f340 <SPI_EndRxTxTransaction+0x70>
        break;
 800f33e:	bf00      	nop
  }

  return HAL_OK;
 800f340:	2300      	movs	r3, #0
}
 800f342:	4618      	mov	r0, r3
 800f344:	3718      	adds	r7, #24
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}
 800f34a:	bf00      	nop
 800f34c:	20000000 	.word	0x20000000
 800f350:	165e9f81 	.word	0x165e9f81

0800f354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b082      	sub	sp, #8
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d101      	bne.n	800f366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f362:	2301      	movs	r3, #1
 800f364:	e01d      	b.n	800f3a2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f36c:	b2db      	uxtb	r3, r3
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d106      	bne.n	800f380 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2200      	movs	r2, #0
 800f376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f7f8 fa06 	bl	800778c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2202      	movs	r2, #2
 800f384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681a      	ldr	r2, [r3, #0]
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	3304      	adds	r3, #4
 800f390:	4619      	mov	r1, r3
 800f392:	4610      	mov	r0, r2
 800f394:	f000 fb56 	bl	800fa44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2201      	movs	r2, #1
 800f39c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f3a0:	2300      	movs	r3, #0
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	3708      	adds	r7, #8
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}

0800f3aa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f3aa:	b480      	push	{r7}
 800f3ac:	b085      	sub	sp, #20
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	68da      	ldr	r2, [r3, #12]
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	f042 0201 	orr.w	r2, r2, #1
 800f3c0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	689b      	ldr	r3, [r3, #8]
 800f3c8:	f003 0307 	and.w	r3, r3, #7
 800f3cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	2b06      	cmp	r3, #6
 800f3d2:	d007      	beq.n	800f3e4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	681a      	ldr	r2, [r3, #0]
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	f042 0201 	orr.w	r2, r2, #1
 800f3e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f3e4:	2300      	movs	r3, #0
}
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	3714      	adds	r7, #20
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f0:	4770      	bx	lr

0800f3f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f3f2:	b580      	push	{r7, lr}
 800f3f4:	b082      	sub	sp, #8
 800f3f6:	af00      	add	r7, sp, #0
 800f3f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d101      	bne.n	800f404 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f400:	2301      	movs	r3, #1
 800f402:	e01d      	b.n	800f440 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f40a:	b2db      	uxtb	r3, r3
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d106      	bne.n	800f41e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2200      	movs	r2, #0
 800f414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f7f8 f943 	bl	80076a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2202      	movs	r2, #2
 800f422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681a      	ldr	r2, [r3, #0]
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	3304      	adds	r3, #4
 800f42e:	4619      	mov	r1, r3
 800f430:	4610      	mov	r0, r2
 800f432:	f000 fb07 	bl	800fa44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	2201      	movs	r2, #1
 800f43a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f43e:	2300      	movs	r3, #0
}
 800f440:	4618      	mov	r0, r3
 800f442:	3708      	adds	r7, #8
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}

0800f448 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b084      	sub	sp, #16
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	2201      	movs	r2, #1
 800f458:	6839      	ldr	r1, [r7, #0]
 800f45a:	4618      	mov	r0, r3
 800f45c:	f000 fd42 	bl	800fee4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	4a15      	ldr	r2, [pc, #84]	; (800f4bc <HAL_TIM_PWM_Start+0x74>)
 800f466:	4293      	cmp	r3, r2
 800f468:	d004      	beq.n	800f474 <HAL_TIM_PWM_Start+0x2c>
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	4a14      	ldr	r2, [pc, #80]	; (800f4c0 <HAL_TIM_PWM_Start+0x78>)
 800f470:	4293      	cmp	r3, r2
 800f472:	d101      	bne.n	800f478 <HAL_TIM_PWM_Start+0x30>
 800f474:	2301      	movs	r3, #1
 800f476:	e000      	b.n	800f47a <HAL_TIM_PWM_Start+0x32>
 800f478:	2300      	movs	r3, #0
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d007      	beq.n	800f48e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f48c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	689b      	ldr	r3, [r3, #8]
 800f494:	f003 0307 	and.w	r3, r3, #7
 800f498:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	2b06      	cmp	r3, #6
 800f49e:	d007      	beq.n	800f4b0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	681a      	ldr	r2, [r3, #0]
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	f042 0201 	orr.w	r2, r2, #1
 800f4ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f4b0:	2300      	movs	r3, #0
}
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	3710      	adds	r7, #16
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}
 800f4ba:	bf00      	nop
 800f4bc:	40010000 	.word	0x40010000
 800f4c0:	40010400 	.word	0x40010400

0800f4c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b086      	sub	sp, #24
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
 800f4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d101      	bne.n	800f4d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	e083      	b.n	800f5e0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f4de:	b2db      	uxtb	r3, r3
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d106      	bne.n	800f4f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f7f8 f9dd 	bl	80078ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2202      	movs	r2, #2
 800f4f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	689b      	ldr	r3, [r3, #8]
 800f500:	687a      	ldr	r2, [r7, #4]
 800f502:	6812      	ldr	r2, [r2, #0]
 800f504:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f508:	f023 0307 	bic.w	r3, r3, #7
 800f50c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681a      	ldr	r2, [r3, #0]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	3304      	adds	r3, #4
 800f516:	4619      	mov	r1, r3
 800f518:	4610      	mov	r0, r2
 800f51a:	f000 fa93 	bl	800fa44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	689b      	ldr	r3, [r3, #8]
 800f524:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	699b      	ldr	r3, [r3, #24]
 800f52c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	6a1b      	ldr	r3, [r3, #32]
 800f534:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	697a      	ldr	r2, [r7, #20]
 800f53c:	4313      	orrs	r3, r2
 800f53e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f540:	693b      	ldr	r3, [r7, #16]
 800f542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f546:	f023 0303 	bic.w	r3, r3, #3
 800f54a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	689a      	ldr	r2, [r3, #8]
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	699b      	ldr	r3, [r3, #24]
 800f554:	021b      	lsls	r3, r3, #8
 800f556:	4313      	orrs	r3, r2
 800f558:	693a      	ldr	r2, [r7, #16]
 800f55a:	4313      	orrs	r3, r2
 800f55c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f55e:	693b      	ldr	r3, [r7, #16]
 800f560:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f564:	f023 030c 	bic.w	r3, r3, #12
 800f568:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f56a:	693b      	ldr	r3, [r7, #16]
 800f56c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f570:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f574:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	68da      	ldr	r2, [r3, #12]
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	69db      	ldr	r3, [r3, #28]
 800f57e:	021b      	lsls	r3, r3, #8
 800f580:	4313      	orrs	r3, r2
 800f582:	693a      	ldr	r2, [r7, #16]
 800f584:	4313      	orrs	r3, r2
 800f586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	691b      	ldr	r3, [r3, #16]
 800f58c:	011a      	lsls	r2, r3, #4
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	6a1b      	ldr	r3, [r3, #32]
 800f592:	031b      	lsls	r3, r3, #12
 800f594:	4313      	orrs	r3, r2
 800f596:	693a      	ldr	r2, [r7, #16]
 800f598:	4313      	orrs	r3, r2
 800f59a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f5a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f5aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	685a      	ldr	r2, [r3, #4]
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	695b      	ldr	r3, [r3, #20]
 800f5b4:	011b      	lsls	r3, r3, #4
 800f5b6:	4313      	orrs	r3, r2
 800f5b8:	68fa      	ldr	r2, [r7, #12]
 800f5ba:	4313      	orrs	r3, r2
 800f5bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	697a      	ldr	r2, [r7, #20]
 800f5c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	693a      	ldr	r2, [r7, #16]
 800f5cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	68fa      	ldr	r2, [r7, #12]
 800f5d4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2201      	movs	r2, #1
 800f5da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f5de:	2300      	movs	r3, #0
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3718      	adds	r7, #24
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}

0800f5e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b082      	sub	sp, #8
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
 800f5f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d002      	beq.n	800f5fe <HAL_TIM_Encoder_Start+0x16>
 800f5f8:	2b04      	cmp	r3, #4
 800f5fa:	d008      	beq.n	800f60e <HAL_TIM_Encoder_Start+0x26>
 800f5fc:	e00f      	b.n	800f61e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	2201      	movs	r2, #1
 800f604:	2100      	movs	r1, #0
 800f606:	4618      	mov	r0, r3
 800f608:	f000 fc6c 	bl	800fee4 <TIM_CCxChannelCmd>
      break;
 800f60c:	e016      	b.n	800f63c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	2201      	movs	r2, #1
 800f614:	2104      	movs	r1, #4
 800f616:	4618      	mov	r0, r3
 800f618:	f000 fc64 	bl	800fee4 <TIM_CCxChannelCmd>
      break;
 800f61c:	e00e      	b.n	800f63c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	2201      	movs	r2, #1
 800f624:	2100      	movs	r1, #0
 800f626:	4618      	mov	r0, r3
 800f628:	f000 fc5c 	bl	800fee4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	2201      	movs	r2, #1
 800f632:	2104      	movs	r1, #4
 800f634:	4618      	mov	r0, r3
 800f636:	f000 fc55 	bl	800fee4 <TIM_CCxChannelCmd>
      break;
 800f63a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	681a      	ldr	r2, [r3, #0]
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	f042 0201 	orr.w	r2, r2, #1
 800f64a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f64c:	2300      	movs	r3, #0
}
 800f64e:	4618      	mov	r0, r3
 800f650:	3708      	adds	r7, #8
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}

0800f656 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f656:	b580      	push	{r7, lr}
 800f658:	b082      	sub	sp, #8
 800f65a:	af00      	add	r7, sp, #0
 800f65c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	691b      	ldr	r3, [r3, #16]
 800f664:	f003 0302 	and.w	r3, r3, #2
 800f668:	2b02      	cmp	r3, #2
 800f66a:	d122      	bne.n	800f6b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	68db      	ldr	r3, [r3, #12]
 800f672:	f003 0302 	and.w	r3, r3, #2
 800f676:	2b02      	cmp	r3, #2
 800f678:	d11b      	bne.n	800f6b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	f06f 0202 	mvn.w	r2, #2
 800f682:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2201      	movs	r2, #1
 800f688:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	699b      	ldr	r3, [r3, #24]
 800f690:	f003 0303 	and.w	r3, r3, #3
 800f694:	2b00      	cmp	r3, #0
 800f696:	d003      	beq.n	800f6a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f000 f9b5 	bl	800fa08 <HAL_TIM_IC_CaptureCallback>
 800f69e:	e005      	b.n	800f6ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f000 f9a7 	bl	800f9f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f000 f9b8 	bl	800fa1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	691b      	ldr	r3, [r3, #16]
 800f6b8:	f003 0304 	and.w	r3, r3, #4
 800f6bc:	2b04      	cmp	r3, #4
 800f6be:	d122      	bne.n	800f706 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	68db      	ldr	r3, [r3, #12]
 800f6c6:	f003 0304 	and.w	r3, r3, #4
 800f6ca:	2b04      	cmp	r3, #4
 800f6cc:	d11b      	bne.n	800f706 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	f06f 0204 	mvn.w	r2, #4
 800f6d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2202      	movs	r2, #2
 800f6dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	699b      	ldr	r3, [r3, #24]
 800f6e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d003      	beq.n	800f6f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f000 f98b 	bl	800fa08 <HAL_TIM_IC_CaptureCallback>
 800f6f2:	e005      	b.n	800f700 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	f000 f97d 	bl	800f9f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f000 f98e 	bl	800fa1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2200      	movs	r2, #0
 800f704:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	691b      	ldr	r3, [r3, #16]
 800f70c:	f003 0308 	and.w	r3, r3, #8
 800f710:	2b08      	cmp	r3, #8
 800f712:	d122      	bne.n	800f75a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	68db      	ldr	r3, [r3, #12]
 800f71a:	f003 0308 	and.w	r3, r3, #8
 800f71e:	2b08      	cmp	r3, #8
 800f720:	d11b      	bne.n	800f75a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	f06f 0208 	mvn.w	r2, #8
 800f72a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2204      	movs	r2, #4
 800f730:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	69db      	ldr	r3, [r3, #28]
 800f738:	f003 0303 	and.w	r3, r3, #3
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d003      	beq.n	800f748 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f000 f961 	bl	800fa08 <HAL_TIM_IC_CaptureCallback>
 800f746:	e005      	b.n	800f754 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f748:	6878      	ldr	r0, [r7, #4]
 800f74a:	f000 f953 	bl	800f9f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f000 f964 	bl	800fa1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2200      	movs	r2, #0
 800f758:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	691b      	ldr	r3, [r3, #16]
 800f760:	f003 0310 	and.w	r3, r3, #16
 800f764:	2b10      	cmp	r3, #16
 800f766:	d122      	bne.n	800f7ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	68db      	ldr	r3, [r3, #12]
 800f76e:	f003 0310 	and.w	r3, r3, #16
 800f772:	2b10      	cmp	r3, #16
 800f774:	d11b      	bne.n	800f7ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	f06f 0210 	mvn.w	r2, #16
 800f77e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2208      	movs	r2, #8
 800f784:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	69db      	ldr	r3, [r3, #28]
 800f78c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f790:	2b00      	cmp	r3, #0
 800f792:	d003      	beq.n	800f79c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f000 f937 	bl	800fa08 <HAL_TIM_IC_CaptureCallback>
 800f79a:	e005      	b.n	800f7a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f000 f929 	bl	800f9f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f7a2:	6878      	ldr	r0, [r7, #4]
 800f7a4:	f000 f93a 	bl	800fa1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	691b      	ldr	r3, [r3, #16]
 800f7b4:	f003 0301 	and.w	r3, r3, #1
 800f7b8:	2b01      	cmp	r3, #1
 800f7ba:	d10e      	bne.n	800f7da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	68db      	ldr	r3, [r3, #12]
 800f7c2:	f003 0301 	and.w	r3, r3, #1
 800f7c6:	2b01      	cmp	r3, #1
 800f7c8:	d107      	bne.n	800f7da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	f06f 0201 	mvn.w	r2, #1
 800f7d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f7f6 fd53 	bl	8006280 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	691b      	ldr	r3, [r3, #16]
 800f7e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7e4:	2b80      	cmp	r3, #128	; 0x80
 800f7e6:	d10e      	bne.n	800f806 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	68db      	ldr	r3, [r3, #12]
 800f7ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7f2:	2b80      	cmp	r3, #128	; 0x80
 800f7f4:	d107      	bne.n	800f806 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f7fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f800:	6878      	ldr	r0, [r7, #4]
 800f802:	f000 fc6d 	bl	80100e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	691b      	ldr	r3, [r3, #16]
 800f80c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f810:	2b40      	cmp	r3, #64	; 0x40
 800f812:	d10e      	bne.n	800f832 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	68db      	ldr	r3, [r3, #12]
 800f81a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f81e:	2b40      	cmp	r3, #64	; 0x40
 800f820:	d107      	bne.n	800f832 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f82a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f000 f8ff 	bl	800fa30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	691b      	ldr	r3, [r3, #16]
 800f838:	f003 0320 	and.w	r3, r3, #32
 800f83c:	2b20      	cmp	r3, #32
 800f83e:	d10e      	bne.n	800f85e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	68db      	ldr	r3, [r3, #12]
 800f846:	f003 0320 	and.w	r3, r3, #32
 800f84a:	2b20      	cmp	r3, #32
 800f84c:	d107      	bne.n	800f85e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	f06f 0220 	mvn.w	r2, #32
 800f856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f000 fc37 	bl	80100cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f85e:	bf00      	nop
 800f860:	3708      	adds	r7, #8
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}
	...

0800f868 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b084      	sub	sp, #16
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	60f8      	str	r0, [r7, #12]
 800f870:	60b9      	str	r1, [r7, #8]
 800f872:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f87a:	2b01      	cmp	r3, #1
 800f87c:	d101      	bne.n	800f882 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f87e:	2302      	movs	r3, #2
 800f880:	e0b4      	b.n	800f9ec <HAL_TIM_PWM_ConfigChannel+0x184>
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	2201      	movs	r2, #1
 800f886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	2202      	movs	r2, #2
 800f88e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2b0c      	cmp	r3, #12
 800f896:	f200 809f 	bhi.w	800f9d8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f89a:	a201      	add	r2, pc, #4	; (adr r2, 800f8a0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8a0:	0800f8d5 	.word	0x0800f8d5
 800f8a4:	0800f9d9 	.word	0x0800f9d9
 800f8a8:	0800f9d9 	.word	0x0800f9d9
 800f8ac:	0800f9d9 	.word	0x0800f9d9
 800f8b0:	0800f915 	.word	0x0800f915
 800f8b4:	0800f9d9 	.word	0x0800f9d9
 800f8b8:	0800f9d9 	.word	0x0800f9d9
 800f8bc:	0800f9d9 	.word	0x0800f9d9
 800f8c0:	0800f957 	.word	0x0800f957
 800f8c4:	0800f9d9 	.word	0x0800f9d9
 800f8c8:	0800f9d9 	.word	0x0800f9d9
 800f8cc:	0800f9d9 	.word	0x0800f9d9
 800f8d0:	0800f997 	.word	0x0800f997
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	68b9      	ldr	r1, [r7, #8]
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f000 f952 	bl	800fb84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	699a      	ldr	r2, [r3, #24]
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	f042 0208 	orr.w	r2, r2, #8
 800f8ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	699a      	ldr	r2, [r3, #24]
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	f022 0204 	bic.w	r2, r2, #4
 800f8fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	6999      	ldr	r1, [r3, #24]
 800f906:	68bb      	ldr	r3, [r7, #8]
 800f908:	691a      	ldr	r2, [r3, #16]
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	430a      	orrs	r2, r1
 800f910:	619a      	str	r2, [r3, #24]
      break;
 800f912:	e062      	b.n	800f9da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	68b9      	ldr	r1, [r7, #8]
 800f91a:	4618      	mov	r0, r3
 800f91c:	f000 f9a2 	bl	800fc64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	699a      	ldr	r2, [r3, #24]
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f92e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	699a      	ldr	r2, [r3, #24]
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f93e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	6999      	ldr	r1, [r3, #24]
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	691b      	ldr	r3, [r3, #16]
 800f94a:	021a      	lsls	r2, r3, #8
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	430a      	orrs	r2, r1
 800f952:	619a      	str	r2, [r3, #24]
      break;
 800f954:	e041      	b.n	800f9da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	68b9      	ldr	r1, [r7, #8]
 800f95c:	4618      	mov	r0, r3
 800f95e:	f000 f9f7 	bl	800fd50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	69da      	ldr	r2, [r3, #28]
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	f042 0208 	orr.w	r2, r2, #8
 800f970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	69da      	ldr	r2, [r3, #28]
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	f022 0204 	bic.w	r2, r2, #4
 800f980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	69d9      	ldr	r1, [r3, #28]
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	691a      	ldr	r2, [r3, #16]
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	430a      	orrs	r2, r1
 800f992:	61da      	str	r2, [r3, #28]
      break;
 800f994:	e021      	b.n	800f9da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	68b9      	ldr	r1, [r7, #8]
 800f99c:	4618      	mov	r0, r3
 800f99e:	f000 fa4b 	bl	800fe38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	69da      	ldr	r2, [r3, #28]
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f9b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	69da      	ldr	r2, [r3, #28]
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f9c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	69d9      	ldr	r1, [r3, #28]
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	691b      	ldr	r3, [r3, #16]
 800f9cc:	021a      	lsls	r2, r3, #8
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	430a      	orrs	r2, r1
 800f9d4:	61da      	str	r2, [r3, #28]
      break;
 800f9d6:	e000      	b.n	800f9da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f9d8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	2201      	movs	r2, #1
 800f9de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f9ea:	2300      	movs	r3, #0
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3710      	adds	r7, #16
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f9f4:	b480      	push	{r7}
 800f9f6:	b083      	sub	sp, #12
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f9fc:	bf00      	nop
 800f9fe:	370c      	adds	r7, #12
 800fa00:	46bd      	mov	sp, r7
 800fa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa06:	4770      	bx	lr

0800fa08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fa08:	b480      	push	{r7}
 800fa0a:	b083      	sub	sp, #12
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fa10:	bf00      	nop
 800fa12:	370c      	adds	r7, #12
 800fa14:	46bd      	mov	sp, r7
 800fa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1a:	4770      	bx	lr

0800fa1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fa1c:	b480      	push	{r7}
 800fa1e:	b083      	sub	sp, #12
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fa24:	bf00      	nop
 800fa26:	370c      	adds	r7, #12
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2e:	4770      	bx	lr

0800fa30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fa30:	b480      	push	{r7}
 800fa32:	b083      	sub	sp, #12
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fa38:	bf00      	nop
 800fa3a:	370c      	adds	r7, #12
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa42:	4770      	bx	lr

0800fa44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800fa44:	b480      	push	{r7}
 800fa46:	b085      	sub	sp, #20
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
 800fa4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	4a40      	ldr	r2, [pc, #256]	; (800fb58 <TIM_Base_SetConfig+0x114>)
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	d013      	beq.n	800fa84 <TIM_Base_SetConfig+0x40>
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa62:	d00f      	beq.n	800fa84 <TIM_Base_SetConfig+0x40>
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	4a3d      	ldr	r2, [pc, #244]	; (800fb5c <TIM_Base_SetConfig+0x118>)
 800fa68:	4293      	cmp	r3, r2
 800fa6a:	d00b      	beq.n	800fa84 <TIM_Base_SetConfig+0x40>
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	4a3c      	ldr	r2, [pc, #240]	; (800fb60 <TIM_Base_SetConfig+0x11c>)
 800fa70:	4293      	cmp	r3, r2
 800fa72:	d007      	beq.n	800fa84 <TIM_Base_SetConfig+0x40>
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	4a3b      	ldr	r2, [pc, #236]	; (800fb64 <TIM_Base_SetConfig+0x120>)
 800fa78:	4293      	cmp	r3, r2
 800fa7a:	d003      	beq.n	800fa84 <TIM_Base_SetConfig+0x40>
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	4a3a      	ldr	r2, [pc, #232]	; (800fb68 <TIM_Base_SetConfig+0x124>)
 800fa80:	4293      	cmp	r3, r2
 800fa82:	d108      	bne.n	800fa96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	685b      	ldr	r3, [r3, #4]
 800fa90:	68fa      	ldr	r2, [r7, #12]
 800fa92:	4313      	orrs	r3, r2
 800fa94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	4a2f      	ldr	r2, [pc, #188]	; (800fb58 <TIM_Base_SetConfig+0x114>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d02b      	beq.n	800faf6 <TIM_Base_SetConfig+0xb2>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800faa4:	d027      	beq.n	800faf6 <TIM_Base_SetConfig+0xb2>
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	4a2c      	ldr	r2, [pc, #176]	; (800fb5c <TIM_Base_SetConfig+0x118>)
 800faaa:	4293      	cmp	r3, r2
 800faac:	d023      	beq.n	800faf6 <TIM_Base_SetConfig+0xb2>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	4a2b      	ldr	r2, [pc, #172]	; (800fb60 <TIM_Base_SetConfig+0x11c>)
 800fab2:	4293      	cmp	r3, r2
 800fab4:	d01f      	beq.n	800faf6 <TIM_Base_SetConfig+0xb2>
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	4a2a      	ldr	r2, [pc, #168]	; (800fb64 <TIM_Base_SetConfig+0x120>)
 800faba:	4293      	cmp	r3, r2
 800fabc:	d01b      	beq.n	800faf6 <TIM_Base_SetConfig+0xb2>
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	4a29      	ldr	r2, [pc, #164]	; (800fb68 <TIM_Base_SetConfig+0x124>)
 800fac2:	4293      	cmp	r3, r2
 800fac4:	d017      	beq.n	800faf6 <TIM_Base_SetConfig+0xb2>
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	4a28      	ldr	r2, [pc, #160]	; (800fb6c <TIM_Base_SetConfig+0x128>)
 800faca:	4293      	cmp	r3, r2
 800facc:	d013      	beq.n	800faf6 <TIM_Base_SetConfig+0xb2>
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	4a27      	ldr	r2, [pc, #156]	; (800fb70 <TIM_Base_SetConfig+0x12c>)
 800fad2:	4293      	cmp	r3, r2
 800fad4:	d00f      	beq.n	800faf6 <TIM_Base_SetConfig+0xb2>
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	4a26      	ldr	r2, [pc, #152]	; (800fb74 <TIM_Base_SetConfig+0x130>)
 800fada:	4293      	cmp	r3, r2
 800fadc:	d00b      	beq.n	800faf6 <TIM_Base_SetConfig+0xb2>
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	4a25      	ldr	r2, [pc, #148]	; (800fb78 <TIM_Base_SetConfig+0x134>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d007      	beq.n	800faf6 <TIM_Base_SetConfig+0xb2>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	4a24      	ldr	r2, [pc, #144]	; (800fb7c <TIM_Base_SetConfig+0x138>)
 800faea:	4293      	cmp	r3, r2
 800faec:	d003      	beq.n	800faf6 <TIM_Base_SetConfig+0xb2>
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	4a23      	ldr	r2, [pc, #140]	; (800fb80 <TIM_Base_SetConfig+0x13c>)
 800faf2:	4293      	cmp	r3, r2
 800faf4:	d108      	bne.n	800fb08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fafc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	68db      	ldr	r3, [r3, #12]
 800fb02:	68fa      	ldr	r2, [r7, #12]
 800fb04:	4313      	orrs	r3, r2
 800fb06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	695b      	ldr	r3, [r3, #20]
 800fb12:	4313      	orrs	r3, r2
 800fb14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	68fa      	ldr	r2, [r7, #12]
 800fb1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	689a      	ldr	r2, [r3, #8]
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	681a      	ldr	r2, [r3, #0]
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	4a0a      	ldr	r2, [pc, #40]	; (800fb58 <TIM_Base_SetConfig+0x114>)
 800fb30:	4293      	cmp	r3, r2
 800fb32:	d003      	beq.n	800fb3c <TIM_Base_SetConfig+0xf8>
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	4a0c      	ldr	r2, [pc, #48]	; (800fb68 <TIM_Base_SetConfig+0x124>)
 800fb38:	4293      	cmp	r3, r2
 800fb3a:	d103      	bne.n	800fb44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	691a      	ldr	r2, [r3, #16]
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2201      	movs	r2, #1
 800fb48:	615a      	str	r2, [r3, #20]
}
 800fb4a:	bf00      	nop
 800fb4c:	3714      	adds	r7, #20
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb54:	4770      	bx	lr
 800fb56:	bf00      	nop
 800fb58:	40010000 	.word	0x40010000
 800fb5c:	40000400 	.word	0x40000400
 800fb60:	40000800 	.word	0x40000800
 800fb64:	40000c00 	.word	0x40000c00
 800fb68:	40010400 	.word	0x40010400
 800fb6c:	40014000 	.word	0x40014000
 800fb70:	40014400 	.word	0x40014400
 800fb74:	40014800 	.word	0x40014800
 800fb78:	40001800 	.word	0x40001800
 800fb7c:	40001c00 	.word	0x40001c00
 800fb80:	40002000 	.word	0x40002000

0800fb84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fb84:	b480      	push	{r7}
 800fb86:	b087      	sub	sp, #28
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
 800fb8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6a1b      	ldr	r3, [r3, #32]
 800fb92:	f023 0201 	bic.w	r2, r3, #1
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6a1b      	ldr	r3, [r3, #32]
 800fb9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	685b      	ldr	r3, [r3, #4]
 800fba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	699b      	ldr	r3, [r3, #24]
 800fbaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	f023 0303 	bic.w	r3, r3, #3
 800fbba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	68fa      	ldr	r2, [r7, #12]
 800fbc2:	4313      	orrs	r3, r2
 800fbc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	f023 0302 	bic.w	r3, r3, #2
 800fbcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	689b      	ldr	r3, [r3, #8]
 800fbd2:	697a      	ldr	r2, [r7, #20]
 800fbd4:	4313      	orrs	r3, r2
 800fbd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	4a20      	ldr	r2, [pc, #128]	; (800fc5c <TIM_OC1_SetConfig+0xd8>)
 800fbdc:	4293      	cmp	r3, r2
 800fbde:	d003      	beq.n	800fbe8 <TIM_OC1_SetConfig+0x64>
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	4a1f      	ldr	r2, [pc, #124]	; (800fc60 <TIM_OC1_SetConfig+0xdc>)
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d10c      	bne.n	800fc02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	f023 0308 	bic.w	r3, r3, #8
 800fbee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	68db      	ldr	r3, [r3, #12]
 800fbf4:	697a      	ldr	r2, [r7, #20]
 800fbf6:	4313      	orrs	r3, r2
 800fbf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	f023 0304 	bic.w	r3, r3, #4
 800fc00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	4a15      	ldr	r2, [pc, #84]	; (800fc5c <TIM_OC1_SetConfig+0xd8>)
 800fc06:	4293      	cmp	r3, r2
 800fc08:	d003      	beq.n	800fc12 <TIM_OC1_SetConfig+0x8e>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	4a14      	ldr	r2, [pc, #80]	; (800fc60 <TIM_OC1_SetConfig+0xdc>)
 800fc0e:	4293      	cmp	r3, r2
 800fc10:	d111      	bne.n	800fc36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fc12:	693b      	ldr	r3, [r7, #16]
 800fc14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fc18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fc1a:	693b      	ldr	r3, [r7, #16]
 800fc1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fc20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	695b      	ldr	r3, [r3, #20]
 800fc26:	693a      	ldr	r2, [r7, #16]
 800fc28:	4313      	orrs	r3, r2
 800fc2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	699b      	ldr	r3, [r3, #24]
 800fc30:	693a      	ldr	r2, [r7, #16]
 800fc32:	4313      	orrs	r3, r2
 800fc34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	693a      	ldr	r2, [r7, #16]
 800fc3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	68fa      	ldr	r2, [r7, #12]
 800fc40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	685a      	ldr	r2, [r3, #4]
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	697a      	ldr	r2, [r7, #20]
 800fc4e:	621a      	str	r2, [r3, #32]
}
 800fc50:	bf00      	nop
 800fc52:	371c      	adds	r7, #28
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr
 800fc5c:	40010000 	.word	0x40010000
 800fc60:	40010400 	.word	0x40010400

0800fc64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fc64:	b480      	push	{r7}
 800fc66:	b087      	sub	sp, #28
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
 800fc6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6a1b      	ldr	r3, [r3, #32]
 800fc72:	f023 0210 	bic.w	r2, r3, #16
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6a1b      	ldr	r3, [r3, #32]
 800fc7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	685b      	ldr	r3, [r3, #4]
 800fc84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	699b      	ldr	r3, [r3, #24]
 800fc8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fc9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	021b      	lsls	r3, r3, #8
 800fca2:	68fa      	ldr	r2, [r7, #12]
 800fca4:	4313      	orrs	r3, r2
 800fca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	f023 0320 	bic.w	r3, r3, #32
 800fcae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	689b      	ldr	r3, [r3, #8]
 800fcb4:	011b      	lsls	r3, r3, #4
 800fcb6:	697a      	ldr	r2, [r7, #20]
 800fcb8:	4313      	orrs	r3, r2
 800fcba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	4a22      	ldr	r2, [pc, #136]	; (800fd48 <TIM_OC2_SetConfig+0xe4>)
 800fcc0:	4293      	cmp	r3, r2
 800fcc2:	d003      	beq.n	800fccc <TIM_OC2_SetConfig+0x68>
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	4a21      	ldr	r2, [pc, #132]	; (800fd4c <TIM_OC2_SetConfig+0xe8>)
 800fcc8:	4293      	cmp	r3, r2
 800fcca:	d10d      	bne.n	800fce8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fccc:	697b      	ldr	r3, [r7, #20]
 800fcce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fcd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	68db      	ldr	r3, [r3, #12]
 800fcd8:	011b      	lsls	r3, r3, #4
 800fcda:	697a      	ldr	r2, [r7, #20]
 800fcdc:	4313      	orrs	r3, r2
 800fcde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fce6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	4a17      	ldr	r2, [pc, #92]	; (800fd48 <TIM_OC2_SetConfig+0xe4>)
 800fcec:	4293      	cmp	r3, r2
 800fcee:	d003      	beq.n	800fcf8 <TIM_OC2_SetConfig+0x94>
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	4a16      	ldr	r2, [pc, #88]	; (800fd4c <TIM_OC2_SetConfig+0xe8>)
 800fcf4:	4293      	cmp	r3, r2
 800fcf6:	d113      	bne.n	800fd20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fcfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fd00:	693b      	ldr	r3, [r7, #16]
 800fd02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	695b      	ldr	r3, [r3, #20]
 800fd0c:	009b      	lsls	r3, r3, #2
 800fd0e:	693a      	ldr	r2, [r7, #16]
 800fd10:	4313      	orrs	r3, r2
 800fd12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	699b      	ldr	r3, [r3, #24]
 800fd18:	009b      	lsls	r3, r3, #2
 800fd1a:	693a      	ldr	r2, [r7, #16]
 800fd1c:	4313      	orrs	r3, r2
 800fd1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	693a      	ldr	r2, [r7, #16]
 800fd24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	68fa      	ldr	r2, [r7, #12]
 800fd2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	685a      	ldr	r2, [r3, #4]
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	697a      	ldr	r2, [r7, #20]
 800fd38:	621a      	str	r2, [r3, #32]
}
 800fd3a:	bf00      	nop
 800fd3c:	371c      	adds	r7, #28
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd44:	4770      	bx	lr
 800fd46:	bf00      	nop
 800fd48:	40010000 	.word	0x40010000
 800fd4c:	40010400 	.word	0x40010400

0800fd50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fd50:	b480      	push	{r7}
 800fd52:	b087      	sub	sp, #28
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6a1b      	ldr	r3, [r3, #32]
 800fd5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6a1b      	ldr	r3, [r3, #32]
 800fd6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	685b      	ldr	r3, [r3, #4]
 800fd70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	69db      	ldr	r3, [r3, #28]
 800fd76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	f023 0303 	bic.w	r3, r3, #3
 800fd86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	68fa      	ldr	r2, [r7, #12]
 800fd8e:	4313      	orrs	r3, r2
 800fd90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fd92:	697b      	ldr	r3, [r7, #20]
 800fd94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fd98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	689b      	ldr	r3, [r3, #8]
 800fd9e:	021b      	lsls	r3, r3, #8
 800fda0:	697a      	ldr	r2, [r7, #20]
 800fda2:	4313      	orrs	r3, r2
 800fda4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	4a21      	ldr	r2, [pc, #132]	; (800fe30 <TIM_OC3_SetConfig+0xe0>)
 800fdaa:	4293      	cmp	r3, r2
 800fdac:	d003      	beq.n	800fdb6 <TIM_OC3_SetConfig+0x66>
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	4a20      	ldr	r2, [pc, #128]	; (800fe34 <TIM_OC3_SetConfig+0xe4>)
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d10d      	bne.n	800fdd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fdb6:	697b      	ldr	r3, [r7, #20]
 800fdb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fdbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	68db      	ldr	r3, [r3, #12]
 800fdc2:	021b      	lsls	r3, r3, #8
 800fdc4:	697a      	ldr	r2, [r7, #20]
 800fdc6:	4313      	orrs	r3, r2
 800fdc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fdd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	4a16      	ldr	r2, [pc, #88]	; (800fe30 <TIM_OC3_SetConfig+0xe0>)
 800fdd6:	4293      	cmp	r3, r2
 800fdd8:	d003      	beq.n	800fde2 <TIM_OC3_SetConfig+0x92>
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	4a15      	ldr	r2, [pc, #84]	; (800fe34 <TIM_OC3_SetConfig+0xe4>)
 800fdde:	4293      	cmp	r3, r2
 800fde0:	d113      	bne.n	800fe0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fde8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fdea:	693b      	ldr	r3, [r7, #16]
 800fdec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fdf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fdf2:	683b      	ldr	r3, [r7, #0]
 800fdf4:	695b      	ldr	r3, [r3, #20]
 800fdf6:	011b      	lsls	r3, r3, #4
 800fdf8:	693a      	ldr	r2, [r7, #16]
 800fdfa:	4313      	orrs	r3, r2
 800fdfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	699b      	ldr	r3, [r3, #24]
 800fe02:	011b      	lsls	r3, r3, #4
 800fe04:	693a      	ldr	r2, [r7, #16]
 800fe06:	4313      	orrs	r3, r2
 800fe08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	693a      	ldr	r2, [r7, #16]
 800fe0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	68fa      	ldr	r2, [r7, #12]
 800fe14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	685a      	ldr	r2, [r3, #4]
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	697a      	ldr	r2, [r7, #20]
 800fe22:	621a      	str	r2, [r3, #32]
}
 800fe24:	bf00      	nop
 800fe26:	371c      	adds	r7, #28
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2e:	4770      	bx	lr
 800fe30:	40010000 	.word	0x40010000
 800fe34:	40010400 	.word	0x40010400

0800fe38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fe38:	b480      	push	{r7}
 800fe3a:	b087      	sub	sp, #28
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
 800fe40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6a1b      	ldr	r3, [r3, #32]
 800fe46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6a1b      	ldr	r3, [r3, #32]
 800fe52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	685b      	ldr	r3, [r3, #4]
 800fe58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	69db      	ldr	r3, [r3, #28]
 800fe5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fe66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fe6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	021b      	lsls	r3, r3, #8
 800fe76:	68fa      	ldr	r2, [r7, #12]
 800fe78:	4313      	orrs	r3, r2
 800fe7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fe7c:	693b      	ldr	r3, [r7, #16]
 800fe7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fe82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	689b      	ldr	r3, [r3, #8]
 800fe88:	031b      	lsls	r3, r3, #12
 800fe8a:	693a      	ldr	r2, [r7, #16]
 800fe8c:	4313      	orrs	r3, r2
 800fe8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	4a12      	ldr	r2, [pc, #72]	; (800fedc <TIM_OC4_SetConfig+0xa4>)
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d003      	beq.n	800fea0 <TIM_OC4_SetConfig+0x68>
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	4a11      	ldr	r2, [pc, #68]	; (800fee0 <TIM_OC4_SetConfig+0xa8>)
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	d109      	bne.n	800feb4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fea0:	697b      	ldr	r3, [r7, #20]
 800fea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fea6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	695b      	ldr	r3, [r3, #20]
 800feac:	019b      	lsls	r3, r3, #6
 800feae:	697a      	ldr	r2, [r7, #20]
 800feb0:	4313      	orrs	r3, r2
 800feb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	697a      	ldr	r2, [r7, #20]
 800feb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	68fa      	ldr	r2, [r7, #12]
 800febe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	685a      	ldr	r2, [r3, #4]
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	693a      	ldr	r2, [r7, #16]
 800fecc:	621a      	str	r2, [r3, #32]
}
 800fece:	bf00      	nop
 800fed0:	371c      	adds	r7, #28
 800fed2:	46bd      	mov	sp, r7
 800fed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed8:	4770      	bx	lr
 800feda:	bf00      	nop
 800fedc:	40010000 	.word	0x40010000
 800fee0:	40010400 	.word	0x40010400

0800fee4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fee4:	b480      	push	{r7}
 800fee6:	b087      	sub	sp, #28
 800fee8:	af00      	add	r7, sp, #0
 800feea:	60f8      	str	r0, [r7, #12]
 800feec:	60b9      	str	r1, [r7, #8]
 800feee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	f003 031f 	and.w	r3, r3, #31
 800fef6:	2201      	movs	r2, #1
 800fef8:	fa02 f303 	lsl.w	r3, r2, r3
 800fefc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	6a1a      	ldr	r2, [r3, #32]
 800ff02:	697b      	ldr	r3, [r7, #20]
 800ff04:	43db      	mvns	r3, r3
 800ff06:	401a      	ands	r2, r3
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	6a1a      	ldr	r2, [r3, #32]
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	f003 031f 	and.w	r3, r3, #31
 800ff16:	6879      	ldr	r1, [r7, #4]
 800ff18:	fa01 f303 	lsl.w	r3, r1, r3
 800ff1c:	431a      	orrs	r2, r3
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	621a      	str	r2, [r3, #32]
}
 800ff22:	bf00      	nop
 800ff24:	371c      	adds	r7, #28
 800ff26:	46bd      	mov	sp, r7
 800ff28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2c:	4770      	bx	lr
	...

0800ff30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ff30:	b480      	push	{r7}
 800ff32:	b085      	sub	sp, #20
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
 800ff38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ff40:	2b01      	cmp	r3, #1
 800ff42:	d101      	bne.n	800ff48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ff44:	2302      	movs	r3, #2
 800ff46:	e05a      	b.n	800fffe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	2201      	movs	r2, #1
 800ff4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2202      	movs	r2, #2
 800ff54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	685b      	ldr	r3, [r3, #4]
 800ff5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	689b      	ldr	r3, [r3, #8]
 800ff66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	68fa      	ldr	r2, [r7, #12]
 800ff76:	4313      	orrs	r3, r2
 800ff78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	68fa      	ldr	r2, [r7, #12]
 800ff80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	4a21      	ldr	r2, [pc, #132]	; (801000c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ff88:	4293      	cmp	r3, r2
 800ff8a:	d022      	beq.n	800ffd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff94:	d01d      	beq.n	800ffd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	4a1d      	ldr	r2, [pc, #116]	; (8010010 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ff9c:	4293      	cmp	r3, r2
 800ff9e:	d018      	beq.n	800ffd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	4a1b      	ldr	r2, [pc, #108]	; (8010014 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ffa6:	4293      	cmp	r3, r2
 800ffa8:	d013      	beq.n	800ffd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	4a1a      	ldr	r2, [pc, #104]	; (8010018 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ffb0:	4293      	cmp	r3, r2
 800ffb2:	d00e      	beq.n	800ffd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	4a18      	ldr	r2, [pc, #96]	; (801001c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ffba:	4293      	cmp	r3, r2
 800ffbc:	d009      	beq.n	800ffd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	4a17      	ldr	r2, [pc, #92]	; (8010020 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ffc4:	4293      	cmp	r3, r2
 800ffc6:	d004      	beq.n	800ffd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	4a15      	ldr	r2, [pc, #84]	; (8010024 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ffce:	4293      	cmp	r3, r2
 800ffd0:	d10c      	bne.n	800ffec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ffd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	685b      	ldr	r3, [r3, #4]
 800ffde:	68ba      	ldr	r2, [r7, #8]
 800ffe0:	4313      	orrs	r3, r2
 800ffe2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	68ba      	ldr	r2, [r7, #8]
 800ffea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2201      	movs	r2, #1
 800fff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2200      	movs	r2, #0
 800fff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fffc:	2300      	movs	r3, #0
}
 800fffe:	4618      	mov	r0, r3
 8010000:	3714      	adds	r7, #20
 8010002:	46bd      	mov	sp, r7
 8010004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010008:	4770      	bx	lr
 801000a:	bf00      	nop
 801000c:	40010000 	.word	0x40010000
 8010010:	40000400 	.word	0x40000400
 8010014:	40000800 	.word	0x40000800
 8010018:	40000c00 	.word	0x40000c00
 801001c:	40010400 	.word	0x40010400
 8010020:	40014000 	.word	0x40014000
 8010024:	40001800 	.word	0x40001800

08010028 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010028:	b480      	push	{r7}
 801002a:	b085      	sub	sp, #20
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
 8010030:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010032:	2300      	movs	r3, #0
 8010034:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801003c:	2b01      	cmp	r3, #1
 801003e:	d101      	bne.n	8010044 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010040:	2302      	movs	r3, #2
 8010042:	e03d      	b.n	80100c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2201      	movs	r2, #1
 8010048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	68db      	ldr	r3, [r3, #12]
 8010056:	4313      	orrs	r3, r2
 8010058:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	689b      	ldr	r3, [r3, #8]
 8010064:	4313      	orrs	r3, r2
 8010066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	685b      	ldr	r3, [r3, #4]
 8010072:	4313      	orrs	r3, r2
 8010074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	4313      	orrs	r3, r2
 8010082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	691b      	ldr	r3, [r3, #16]
 801008e:	4313      	orrs	r3, r2
 8010090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	695b      	ldr	r3, [r3, #20]
 801009c:	4313      	orrs	r3, r2
 801009e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	69db      	ldr	r3, [r3, #28]
 80100aa:	4313      	orrs	r3, r2
 80100ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	68fa      	ldr	r2, [r7, #12]
 80100b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	2200      	movs	r2, #0
 80100ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80100be:	2300      	movs	r3, #0
}
 80100c0:	4618      	mov	r0, r3
 80100c2:	3714      	adds	r7, #20
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr

080100cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80100cc:	b480      	push	{r7}
 80100ce:	b083      	sub	sp, #12
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80100d4:	bf00      	nop
 80100d6:	370c      	adds	r7, #12
 80100d8:	46bd      	mov	sp, r7
 80100da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100de:	4770      	bx	lr

080100e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80100e0:	b480      	push	{r7}
 80100e2:	b083      	sub	sp, #12
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80100e8:	bf00      	nop
 80100ea:	370c      	adds	r7, #12
 80100ec:	46bd      	mov	sp, r7
 80100ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f2:	4770      	bx	lr

080100f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b082      	sub	sp, #8
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d101      	bne.n	8010106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010102:	2301      	movs	r3, #1
 8010104:	e03f      	b.n	8010186 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801010c:	b2db      	uxtb	r3, r3
 801010e:	2b00      	cmp	r3, #0
 8010110:	d106      	bne.n	8010120 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2200      	movs	r2, #0
 8010116:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f7f7 fcf0 	bl	8007b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2224      	movs	r2, #36	; 0x24
 8010124:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	68da      	ldr	r2, [r3, #12]
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010136:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f000 f829 	bl	8010190 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	691a      	ldr	r2, [r3, #16]
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801014c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	695a      	ldr	r2, [r3, #20]
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801015c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	68da      	ldr	r2, [r3, #12]
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801016c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2200      	movs	r2, #0
 8010172:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2220      	movs	r2, #32
 8010178:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	2220      	movs	r2, #32
 8010180:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8010184:	2300      	movs	r3, #0
}
 8010186:	4618      	mov	r0, r3
 8010188:	3708      	adds	r7, #8
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}
	...

08010190 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010194:	b085      	sub	sp, #20
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	691b      	ldr	r3, [r3, #16]
 80101a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	68da      	ldr	r2, [r3, #12]
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	430a      	orrs	r2, r1
 80101ae:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	689a      	ldr	r2, [r3, #8]
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	691b      	ldr	r3, [r3, #16]
 80101b8:	431a      	orrs	r2, r3
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	695b      	ldr	r3, [r3, #20]
 80101be:	431a      	orrs	r2, r3
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	69db      	ldr	r3, [r3, #28]
 80101c4:	4313      	orrs	r3, r2
 80101c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	68db      	ldr	r3, [r3, #12]
 80101ce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80101d2:	f023 030c 	bic.w	r3, r3, #12
 80101d6:	687a      	ldr	r2, [r7, #4]
 80101d8:	6812      	ldr	r2, [r2, #0]
 80101da:	68f9      	ldr	r1, [r7, #12]
 80101dc:	430b      	orrs	r3, r1
 80101de:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	695b      	ldr	r3, [r3, #20]
 80101e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	699a      	ldr	r2, [r3, #24]
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	430a      	orrs	r2, r1
 80101f4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	69db      	ldr	r3, [r3, #28]
 80101fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80101fe:	f040 818b 	bne.w	8010518 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	4ac1      	ldr	r2, [pc, #772]	; (801050c <UART_SetConfig+0x37c>)
 8010208:	4293      	cmp	r3, r2
 801020a:	d005      	beq.n	8010218 <UART_SetConfig+0x88>
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	4abf      	ldr	r2, [pc, #764]	; (8010510 <UART_SetConfig+0x380>)
 8010212:	4293      	cmp	r3, r2
 8010214:	f040 80bd 	bne.w	8010392 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010218:	f7fc fbcc 	bl	800c9b4 <HAL_RCC_GetPCLK2Freq>
 801021c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	461d      	mov	r5, r3
 8010222:	f04f 0600 	mov.w	r6, #0
 8010226:	46a8      	mov	r8, r5
 8010228:	46b1      	mov	r9, r6
 801022a:	eb18 0308 	adds.w	r3, r8, r8
 801022e:	eb49 0409 	adc.w	r4, r9, r9
 8010232:	4698      	mov	r8, r3
 8010234:	46a1      	mov	r9, r4
 8010236:	eb18 0805 	adds.w	r8, r8, r5
 801023a:	eb49 0906 	adc.w	r9, r9, r6
 801023e:	f04f 0100 	mov.w	r1, #0
 8010242:	f04f 0200 	mov.w	r2, #0
 8010246:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801024a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801024e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010252:	4688      	mov	r8, r1
 8010254:	4691      	mov	r9, r2
 8010256:	eb18 0005 	adds.w	r0, r8, r5
 801025a:	eb49 0106 	adc.w	r1, r9, r6
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	685b      	ldr	r3, [r3, #4]
 8010262:	461d      	mov	r5, r3
 8010264:	f04f 0600 	mov.w	r6, #0
 8010268:	196b      	adds	r3, r5, r5
 801026a:	eb46 0406 	adc.w	r4, r6, r6
 801026e:	461a      	mov	r2, r3
 8010270:	4623      	mov	r3, r4
 8010272:	f7f0 fd21 	bl	8000cb8 <__aeabi_uldivmod>
 8010276:	4603      	mov	r3, r0
 8010278:	460c      	mov	r4, r1
 801027a:	461a      	mov	r2, r3
 801027c:	4ba5      	ldr	r3, [pc, #660]	; (8010514 <UART_SetConfig+0x384>)
 801027e:	fba3 2302 	umull	r2, r3, r3, r2
 8010282:	095b      	lsrs	r3, r3, #5
 8010284:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	461d      	mov	r5, r3
 801028c:	f04f 0600 	mov.w	r6, #0
 8010290:	46a9      	mov	r9, r5
 8010292:	46b2      	mov	sl, r6
 8010294:	eb19 0309 	adds.w	r3, r9, r9
 8010298:	eb4a 040a 	adc.w	r4, sl, sl
 801029c:	4699      	mov	r9, r3
 801029e:	46a2      	mov	sl, r4
 80102a0:	eb19 0905 	adds.w	r9, r9, r5
 80102a4:	eb4a 0a06 	adc.w	sl, sl, r6
 80102a8:	f04f 0100 	mov.w	r1, #0
 80102ac:	f04f 0200 	mov.w	r2, #0
 80102b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80102b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80102b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80102bc:	4689      	mov	r9, r1
 80102be:	4692      	mov	sl, r2
 80102c0:	eb19 0005 	adds.w	r0, r9, r5
 80102c4:	eb4a 0106 	adc.w	r1, sl, r6
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	685b      	ldr	r3, [r3, #4]
 80102cc:	461d      	mov	r5, r3
 80102ce:	f04f 0600 	mov.w	r6, #0
 80102d2:	196b      	adds	r3, r5, r5
 80102d4:	eb46 0406 	adc.w	r4, r6, r6
 80102d8:	461a      	mov	r2, r3
 80102da:	4623      	mov	r3, r4
 80102dc:	f7f0 fcec 	bl	8000cb8 <__aeabi_uldivmod>
 80102e0:	4603      	mov	r3, r0
 80102e2:	460c      	mov	r4, r1
 80102e4:	461a      	mov	r2, r3
 80102e6:	4b8b      	ldr	r3, [pc, #556]	; (8010514 <UART_SetConfig+0x384>)
 80102e8:	fba3 1302 	umull	r1, r3, r3, r2
 80102ec:	095b      	lsrs	r3, r3, #5
 80102ee:	2164      	movs	r1, #100	; 0x64
 80102f0:	fb01 f303 	mul.w	r3, r1, r3
 80102f4:	1ad3      	subs	r3, r2, r3
 80102f6:	00db      	lsls	r3, r3, #3
 80102f8:	3332      	adds	r3, #50	; 0x32
 80102fa:	4a86      	ldr	r2, [pc, #536]	; (8010514 <UART_SetConfig+0x384>)
 80102fc:	fba2 2303 	umull	r2, r3, r2, r3
 8010300:	095b      	lsrs	r3, r3, #5
 8010302:	005b      	lsls	r3, r3, #1
 8010304:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010308:	4498      	add	r8, r3
 801030a:	68bb      	ldr	r3, [r7, #8]
 801030c:	461d      	mov	r5, r3
 801030e:	f04f 0600 	mov.w	r6, #0
 8010312:	46a9      	mov	r9, r5
 8010314:	46b2      	mov	sl, r6
 8010316:	eb19 0309 	adds.w	r3, r9, r9
 801031a:	eb4a 040a 	adc.w	r4, sl, sl
 801031e:	4699      	mov	r9, r3
 8010320:	46a2      	mov	sl, r4
 8010322:	eb19 0905 	adds.w	r9, r9, r5
 8010326:	eb4a 0a06 	adc.w	sl, sl, r6
 801032a:	f04f 0100 	mov.w	r1, #0
 801032e:	f04f 0200 	mov.w	r2, #0
 8010332:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010336:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801033a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801033e:	4689      	mov	r9, r1
 8010340:	4692      	mov	sl, r2
 8010342:	eb19 0005 	adds.w	r0, r9, r5
 8010346:	eb4a 0106 	adc.w	r1, sl, r6
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	461d      	mov	r5, r3
 8010350:	f04f 0600 	mov.w	r6, #0
 8010354:	196b      	adds	r3, r5, r5
 8010356:	eb46 0406 	adc.w	r4, r6, r6
 801035a:	461a      	mov	r2, r3
 801035c:	4623      	mov	r3, r4
 801035e:	f7f0 fcab 	bl	8000cb8 <__aeabi_uldivmod>
 8010362:	4603      	mov	r3, r0
 8010364:	460c      	mov	r4, r1
 8010366:	461a      	mov	r2, r3
 8010368:	4b6a      	ldr	r3, [pc, #424]	; (8010514 <UART_SetConfig+0x384>)
 801036a:	fba3 1302 	umull	r1, r3, r3, r2
 801036e:	095b      	lsrs	r3, r3, #5
 8010370:	2164      	movs	r1, #100	; 0x64
 8010372:	fb01 f303 	mul.w	r3, r1, r3
 8010376:	1ad3      	subs	r3, r2, r3
 8010378:	00db      	lsls	r3, r3, #3
 801037a:	3332      	adds	r3, #50	; 0x32
 801037c:	4a65      	ldr	r2, [pc, #404]	; (8010514 <UART_SetConfig+0x384>)
 801037e:	fba2 2303 	umull	r2, r3, r2, r3
 8010382:	095b      	lsrs	r3, r3, #5
 8010384:	f003 0207 	and.w	r2, r3, #7
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	4442      	add	r2, r8
 801038e:	609a      	str	r2, [r3, #8]
 8010390:	e26f      	b.n	8010872 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010392:	f7fc fafb 	bl	800c98c <HAL_RCC_GetPCLK1Freq>
 8010396:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	461d      	mov	r5, r3
 801039c:	f04f 0600 	mov.w	r6, #0
 80103a0:	46a8      	mov	r8, r5
 80103a2:	46b1      	mov	r9, r6
 80103a4:	eb18 0308 	adds.w	r3, r8, r8
 80103a8:	eb49 0409 	adc.w	r4, r9, r9
 80103ac:	4698      	mov	r8, r3
 80103ae:	46a1      	mov	r9, r4
 80103b0:	eb18 0805 	adds.w	r8, r8, r5
 80103b4:	eb49 0906 	adc.w	r9, r9, r6
 80103b8:	f04f 0100 	mov.w	r1, #0
 80103bc:	f04f 0200 	mov.w	r2, #0
 80103c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80103c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80103c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80103cc:	4688      	mov	r8, r1
 80103ce:	4691      	mov	r9, r2
 80103d0:	eb18 0005 	adds.w	r0, r8, r5
 80103d4:	eb49 0106 	adc.w	r1, r9, r6
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	685b      	ldr	r3, [r3, #4]
 80103dc:	461d      	mov	r5, r3
 80103de:	f04f 0600 	mov.w	r6, #0
 80103e2:	196b      	adds	r3, r5, r5
 80103e4:	eb46 0406 	adc.w	r4, r6, r6
 80103e8:	461a      	mov	r2, r3
 80103ea:	4623      	mov	r3, r4
 80103ec:	f7f0 fc64 	bl	8000cb8 <__aeabi_uldivmod>
 80103f0:	4603      	mov	r3, r0
 80103f2:	460c      	mov	r4, r1
 80103f4:	461a      	mov	r2, r3
 80103f6:	4b47      	ldr	r3, [pc, #284]	; (8010514 <UART_SetConfig+0x384>)
 80103f8:	fba3 2302 	umull	r2, r3, r3, r2
 80103fc:	095b      	lsrs	r3, r3, #5
 80103fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010402:	68bb      	ldr	r3, [r7, #8]
 8010404:	461d      	mov	r5, r3
 8010406:	f04f 0600 	mov.w	r6, #0
 801040a:	46a9      	mov	r9, r5
 801040c:	46b2      	mov	sl, r6
 801040e:	eb19 0309 	adds.w	r3, r9, r9
 8010412:	eb4a 040a 	adc.w	r4, sl, sl
 8010416:	4699      	mov	r9, r3
 8010418:	46a2      	mov	sl, r4
 801041a:	eb19 0905 	adds.w	r9, r9, r5
 801041e:	eb4a 0a06 	adc.w	sl, sl, r6
 8010422:	f04f 0100 	mov.w	r1, #0
 8010426:	f04f 0200 	mov.w	r2, #0
 801042a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801042e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010432:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010436:	4689      	mov	r9, r1
 8010438:	4692      	mov	sl, r2
 801043a:	eb19 0005 	adds.w	r0, r9, r5
 801043e:	eb4a 0106 	adc.w	r1, sl, r6
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	685b      	ldr	r3, [r3, #4]
 8010446:	461d      	mov	r5, r3
 8010448:	f04f 0600 	mov.w	r6, #0
 801044c:	196b      	adds	r3, r5, r5
 801044e:	eb46 0406 	adc.w	r4, r6, r6
 8010452:	461a      	mov	r2, r3
 8010454:	4623      	mov	r3, r4
 8010456:	f7f0 fc2f 	bl	8000cb8 <__aeabi_uldivmod>
 801045a:	4603      	mov	r3, r0
 801045c:	460c      	mov	r4, r1
 801045e:	461a      	mov	r2, r3
 8010460:	4b2c      	ldr	r3, [pc, #176]	; (8010514 <UART_SetConfig+0x384>)
 8010462:	fba3 1302 	umull	r1, r3, r3, r2
 8010466:	095b      	lsrs	r3, r3, #5
 8010468:	2164      	movs	r1, #100	; 0x64
 801046a:	fb01 f303 	mul.w	r3, r1, r3
 801046e:	1ad3      	subs	r3, r2, r3
 8010470:	00db      	lsls	r3, r3, #3
 8010472:	3332      	adds	r3, #50	; 0x32
 8010474:	4a27      	ldr	r2, [pc, #156]	; (8010514 <UART_SetConfig+0x384>)
 8010476:	fba2 2303 	umull	r2, r3, r2, r3
 801047a:	095b      	lsrs	r3, r3, #5
 801047c:	005b      	lsls	r3, r3, #1
 801047e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010482:	4498      	add	r8, r3
 8010484:	68bb      	ldr	r3, [r7, #8]
 8010486:	461d      	mov	r5, r3
 8010488:	f04f 0600 	mov.w	r6, #0
 801048c:	46a9      	mov	r9, r5
 801048e:	46b2      	mov	sl, r6
 8010490:	eb19 0309 	adds.w	r3, r9, r9
 8010494:	eb4a 040a 	adc.w	r4, sl, sl
 8010498:	4699      	mov	r9, r3
 801049a:	46a2      	mov	sl, r4
 801049c:	eb19 0905 	adds.w	r9, r9, r5
 80104a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80104a4:	f04f 0100 	mov.w	r1, #0
 80104a8:	f04f 0200 	mov.w	r2, #0
 80104ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80104b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80104b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80104b8:	4689      	mov	r9, r1
 80104ba:	4692      	mov	sl, r2
 80104bc:	eb19 0005 	adds.w	r0, r9, r5
 80104c0:	eb4a 0106 	adc.w	r1, sl, r6
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	685b      	ldr	r3, [r3, #4]
 80104c8:	461d      	mov	r5, r3
 80104ca:	f04f 0600 	mov.w	r6, #0
 80104ce:	196b      	adds	r3, r5, r5
 80104d0:	eb46 0406 	adc.w	r4, r6, r6
 80104d4:	461a      	mov	r2, r3
 80104d6:	4623      	mov	r3, r4
 80104d8:	f7f0 fbee 	bl	8000cb8 <__aeabi_uldivmod>
 80104dc:	4603      	mov	r3, r0
 80104de:	460c      	mov	r4, r1
 80104e0:	461a      	mov	r2, r3
 80104e2:	4b0c      	ldr	r3, [pc, #48]	; (8010514 <UART_SetConfig+0x384>)
 80104e4:	fba3 1302 	umull	r1, r3, r3, r2
 80104e8:	095b      	lsrs	r3, r3, #5
 80104ea:	2164      	movs	r1, #100	; 0x64
 80104ec:	fb01 f303 	mul.w	r3, r1, r3
 80104f0:	1ad3      	subs	r3, r2, r3
 80104f2:	00db      	lsls	r3, r3, #3
 80104f4:	3332      	adds	r3, #50	; 0x32
 80104f6:	4a07      	ldr	r2, [pc, #28]	; (8010514 <UART_SetConfig+0x384>)
 80104f8:	fba2 2303 	umull	r2, r3, r2, r3
 80104fc:	095b      	lsrs	r3, r3, #5
 80104fe:	f003 0207 	and.w	r2, r3, #7
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	4442      	add	r2, r8
 8010508:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801050a:	e1b2      	b.n	8010872 <UART_SetConfig+0x6e2>
 801050c:	40011000 	.word	0x40011000
 8010510:	40011400 	.word	0x40011400
 8010514:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	4ad7      	ldr	r2, [pc, #860]	; (801087c <UART_SetConfig+0x6ec>)
 801051e:	4293      	cmp	r3, r2
 8010520:	d005      	beq.n	801052e <UART_SetConfig+0x39e>
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	4ad6      	ldr	r2, [pc, #856]	; (8010880 <UART_SetConfig+0x6f0>)
 8010528:	4293      	cmp	r3, r2
 801052a:	f040 80d1 	bne.w	80106d0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801052e:	f7fc fa41 	bl	800c9b4 <HAL_RCC_GetPCLK2Freq>
 8010532:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010534:	68bb      	ldr	r3, [r7, #8]
 8010536:	469a      	mov	sl, r3
 8010538:	f04f 0b00 	mov.w	fp, #0
 801053c:	46d0      	mov	r8, sl
 801053e:	46d9      	mov	r9, fp
 8010540:	eb18 0308 	adds.w	r3, r8, r8
 8010544:	eb49 0409 	adc.w	r4, r9, r9
 8010548:	4698      	mov	r8, r3
 801054a:	46a1      	mov	r9, r4
 801054c:	eb18 080a 	adds.w	r8, r8, sl
 8010550:	eb49 090b 	adc.w	r9, r9, fp
 8010554:	f04f 0100 	mov.w	r1, #0
 8010558:	f04f 0200 	mov.w	r2, #0
 801055c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010560:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010564:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010568:	4688      	mov	r8, r1
 801056a:	4691      	mov	r9, r2
 801056c:	eb1a 0508 	adds.w	r5, sl, r8
 8010570:	eb4b 0609 	adc.w	r6, fp, r9
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	685b      	ldr	r3, [r3, #4]
 8010578:	4619      	mov	r1, r3
 801057a:	f04f 0200 	mov.w	r2, #0
 801057e:	f04f 0300 	mov.w	r3, #0
 8010582:	f04f 0400 	mov.w	r4, #0
 8010586:	0094      	lsls	r4, r2, #2
 8010588:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801058c:	008b      	lsls	r3, r1, #2
 801058e:	461a      	mov	r2, r3
 8010590:	4623      	mov	r3, r4
 8010592:	4628      	mov	r0, r5
 8010594:	4631      	mov	r1, r6
 8010596:	f7f0 fb8f 	bl	8000cb8 <__aeabi_uldivmod>
 801059a:	4603      	mov	r3, r0
 801059c:	460c      	mov	r4, r1
 801059e:	461a      	mov	r2, r3
 80105a0:	4bb8      	ldr	r3, [pc, #736]	; (8010884 <UART_SetConfig+0x6f4>)
 80105a2:	fba3 2302 	umull	r2, r3, r3, r2
 80105a6:	095b      	lsrs	r3, r3, #5
 80105a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	469b      	mov	fp, r3
 80105b0:	f04f 0c00 	mov.w	ip, #0
 80105b4:	46d9      	mov	r9, fp
 80105b6:	46e2      	mov	sl, ip
 80105b8:	eb19 0309 	adds.w	r3, r9, r9
 80105bc:	eb4a 040a 	adc.w	r4, sl, sl
 80105c0:	4699      	mov	r9, r3
 80105c2:	46a2      	mov	sl, r4
 80105c4:	eb19 090b 	adds.w	r9, r9, fp
 80105c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80105cc:	f04f 0100 	mov.w	r1, #0
 80105d0:	f04f 0200 	mov.w	r2, #0
 80105d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80105d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80105dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80105e0:	4689      	mov	r9, r1
 80105e2:	4692      	mov	sl, r2
 80105e4:	eb1b 0509 	adds.w	r5, fp, r9
 80105e8:	eb4c 060a 	adc.w	r6, ip, sl
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	685b      	ldr	r3, [r3, #4]
 80105f0:	4619      	mov	r1, r3
 80105f2:	f04f 0200 	mov.w	r2, #0
 80105f6:	f04f 0300 	mov.w	r3, #0
 80105fa:	f04f 0400 	mov.w	r4, #0
 80105fe:	0094      	lsls	r4, r2, #2
 8010600:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010604:	008b      	lsls	r3, r1, #2
 8010606:	461a      	mov	r2, r3
 8010608:	4623      	mov	r3, r4
 801060a:	4628      	mov	r0, r5
 801060c:	4631      	mov	r1, r6
 801060e:	f7f0 fb53 	bl	8000cb8 <__aeabi_uldivmod>
 8010612:	4603      	mov	r3, r0
 8010614:	460c      	mov	r4, r1
 8010616:	461a      	mov	r2, r3
 8010618:	4b9a      	ldr	r3, [pc, #616]	; (8010884 <UART_SetConfig+0x6f4>)
 801061a:	fba3 1302 	umull	r1, r3, r3, r2
 801061e:	095b      	lsrs	r3, r3, #5
 8010620:	2164      	movs	r1, #100	; 0x64
 8010622:	fb01 f303 	mul.w	r3, r1, r3
 8010626:	1ad3      	subs	r3, r2, r3
 8010628:	011b      	lsls	r3, r3, #4
 801062a:	3332      	adds	r3, #50	; 0x32
 801062c:	4a95      	ldr	r2, [pc, #596]	; (8010884 <UART_SetConfig+0x6f4>)
 801062e:	fba2 2303 	umull	r2, r3, r2, r3
 8010632:	095b      	lsrs	r3, r3, #5
 8010634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010638:	4498      	add	r8, r3
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	469b      	mov	fp, r3
 801063e:	f04f 0c00 	mov.w	ip, #0
 8010642:	46d9      	mov	r9, fp
 8010644:	46e2      	mov	sl, ip
 8010646:	eb19 0309 	adds.w	r3, r9, r9
 801064a:	eb4a 040a 	adc.w	r4, sl, sl
 801064e:	4699      	mov	r9, r3
 8010650:	46a2      	mov	sl, r4
 8010652:	eb19 090b 	adds.w	r9, r9, fp
 8010656:	eb4a 0a0c 	adc.w	sl, sl, ip
 801065a:	f04f 0100 	mov.w	r1, #0
 801065e:	f04f 0200 	mov.w	r2, #0
 8010662:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010666:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801066a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801066e:	4689      	mov	r9, r1
 8010670:	4692      	mov	sl, r2
 8010672:	eb1b 0509 	adds.w	r5, fp, r9
 8010676:	eb4c 060a 	adc.w	r6, ip, sl
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	685b      	ldr	r3, [r3, #4]
 801067e:	4619      	mov	r1, r3
 8010680:	f04f 0200 	mov.w	r2, #0
 8010684:	f04f 0300 	mov.w	r3, #0
 8010688:	f04f 0400 	mov.w	r4, #0
 801068c:	0094      	lsls	r4, r2, #2
 801068e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010692:	008b      	lsls	r3, r1, #2
 8010694:	461a      	mov	r2, r3
 8010696:	4623      	mov	r3, r4
 8010698:	4628      	mov	r0, r5
 801069a:	4631      	mov	r1, r6
 801069c:	f7f0 fb0c 	bl	8000cb8 <__aeabi_uldivmod>
 80106a0:	4603      	mov	r3, r0
 80106a2:	460c      	mov	r4, r1
 80106a4:	461a      	mov	r2, r3
 80106a6:	4b77      	ldr	r3, [pc, #476]	; (8010884 <UART_SetConfig+0x6f4>)
 80106a8:	fba3 1302 	umull	r1, r3, r3, r2
 80106ac:	095b      	lsrs	r3, r3, #5
 80106ae:	2164      	movs	r1, #100	; 0x64
 80106b0:	fb01 f303 	mul.w	r3, r1, r3
 80106b4:	1ad3      	subs	r3, r2, r3
 80106b6:	011b      	lsls	r3, r3, #4
 80106b8:	3332      	adds	r3, #50	; 0x32
 80106ba:	4a72      	ldr	r2, [pc, #456]	; (8010884 <UART_SetConfig+0x6f4>)
 80106bc:	fba2 2303 	umull	r2, r3, r2, r3
 80106c0:	095b      	lsrs	r3, r3, #5
 80106c2:	f003 020f 	and.w	r2, r3, #15
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	4442      	add	r2, r8
 80106cc:	609a      	str	r2, [r3, #8]
 80106ce:	e0d0      	b.n	8010872 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80106d0:	f7fc f95c 	bl	800c98c <HAL_RCC_GetPCLK1Freq>
 80106d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	469a      	mov	sl, r3
 80106da:	f04f 0b00 	mov.w	fp, #0
 80106de:	46d0      	mov	r8, sl
 80106e0:	46d9      	mov	r9, fp
 80106e2:	eb18 0308 	adds.w	r3, r8, r8
 80106e6:	eb49 0409 	adc.w	r4, r9, r9
 80106ea:	4698      	mov	r8, r3
 80106ec:	46a1      	mov	r9, r4
 80106ee:	eb18 080a 	adds.w	r8, r8, sl
 80106f2:	eb49 090b 	adc.w	r9, r9, fp
 80106f6:	f04f 0100 	mov.w	r1, #0
 80106fa:	f04f 0200 	mov.w	r2, #0
 80106fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010702:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010706:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801070a:	4688      	mov	r8, r1
 801070c:	4691      	mov	r9, r2
 801070e:	eb1a 0508 	adds.w	r5, sl, r8
 8010712:	eb4b 0609 	adc.w	r6, fp, r9
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	685b      	ldr	r3, [r3, #4]
 801071a:	4619      	mov	r1, r3
 801071c:	f04f 0200 	mov.w	r2, #0
 8010720:	f04f 0300 	mov.w	r3, #0
 8010724:	f04f 0400 	mov.w	r4, #0
 8010728:	0094      	lsls	r4, r2, #2
 801072a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801072e:	008b      	lsls	r3, r1, #2
 8010730:	461a      	mov	r2, r3
 8010732:	4623      	mov	r3, r4
 8010734:	4628      	mov	r0, r5
 8010736:	4631      	mov	r1, r6
 8010738:	f7f0 fabe 	bl	8000cb8 <__aeabi_uldivmod>
 801073c:	4603      	mov	r3, r0
 801073e:	460c      	mov	r4, r1
 8010740:	461a      	mov	r2, r3
 8010742:	4b50      	ldr	r3, [pc, #320]	; (8010884 <UART_SetConfig+0x6f4>)
 8010744:	fba3 2302 	umull	r2, r3, r3, r2
 8010748:	095b      	lsrs	r3, r3, #5
 801074a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	469b      	mov	fp, r3
 8010752:	f04f 0c00 	mov.w	ip, #0
 8010756:	46d9      	mov	r9, fp
 8010758:	46e2      	mov	sl, ip
 801075a:	eb19 0309 	adds.w	r3, r9, r9
 801075e:	eb4a 040a 	adc.w	r4, sl, sl
 8010762:	4699      	mov	r9, r3
 8010764:	46a2      	mov	sl, r4
 8010766:	eb19 090b 	adds.w	r9, r9, fp
 801076a:	eb4a 0a0c 	adc.w	sl, sl, ip
 801076e:	f04f 0100 	mov.w	r1, #0
 8010772:	f04f 0200 	mov.w	r2, #0
 8010776:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801077a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801077e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010782:	4689      	mov	r9, r1
 8010784:	4692      	mov	sl, r2
 8010786:	eb1b 0509 	adds.w	r5, fp, r9
 801078a:	eb4c 060a 	adc.w	r6, ip, sl
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	685b      	ldr	r3, [r3, #4]
 8010792:	4619      	mov	r1, r3
 8010794:	f04f 0200 	mov.w	r2, #0
 8010798:	f04f 0300 	mov.w	r3, #0
 801079c:	f04f 0400 	mov.w	r4, #0
 80107a0:	0094      	lsls	r4, r2, #2
 80107a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80107a6:	008b      	lsls	r3, r1, #2
 80107a8:	461a      	mov	r2, r3
 80107aa:	4623      	mov	r3, r4
 80107ac:	4628      	mov	r0, r5
 80107ae:	4631      	mov	r1, r6
 80107b0:	f7f0 fa82 	bl	8000cb8 <__aeabi_uldivmod>
 80107b4:	4603      	mov	r3, r0
 80107b6:	460c      	mov	r4, r1
 80107b8:	461a      	mov	r2, r3
 80107ba:	4b32      	ldr	r3, [pc, #200]	; (8010884 <UART_SetConfig+0x6f4>)
 80107bc:	fba3 1302 	umull	r1, r3, r3, r2
 80107c0:	095b      	lsrs	r3, r3, #5
 80107c2:	2164      	movs	r1, #100	; 0x64
 80107c4:	fb01 f303 	mul.w	r3, r1, r3
 80107c8:	1ad3      	subs	r3, r2, r3
 80107ca:	011b      	lsls	r3, r3, #4
 80107cc:	3332      	adds	r3, #50	; 0x32
 80107ce:	4a2d      	ldr	r2, [pc, #180]	; (8010884 <UART_SetConfig+0x6f4>)
 80107d0:	fba2 2303 	umull	r2, r3, r2, r3
 80107d4:	095b      	lsrs	r3, r3, #5
 80107d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80107da:	4498      	add	r8, r3
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	469b      	mov	fp, r3
 80107e0:	f04f 0c00 	mov.w	ip, #0
 80107e4:	46d9      	mov	r9, fp
 80107e6:	46e2      	mov	sl, ip
 80107e8:	eb19 0309 	adds.w	r3, r9, r9
 80107ec:	eb4a 040a 	adc.w	r4, sl, sl
 80107f0:	4699      	mov	r9, r3
 80107f2:	46a2      	mov	sl, r4
 80107f4:	eb19 090b 	adds.w	r9, r9, fp
 80107f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80107fc:	f04f 0100 	mov.w	r1, #0
 8010800:	f04f 0200 	mov.w	r2, #0
 8010804:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010808:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801080c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010810:	4689      	mov	r9, r1
 8010812:	4692      	mov	sl, r2
 8010814:	eb1b 0509 	adds.w	r5, fp, r9
 8010818:	eb4c 060a 	adc.w	r6, ip, sl
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	685b      	ldr	r3, [r3, #4]
 8010820:	4619      	mov	r1, r3
 8010822:	f04f 0200 	mov.w	r2, #0
 8010826:	f04f 0300 	mov.w	r3, #0
 801082a:	f04f 0400 	mov.w	r4, #0
 801082e:	0094      	lsls	r4, r2, #2
 8010830:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010834:	008b      	lsls	r3, r1, #2
 8010836:	461a      	mov	r2, r3
 8010838:	4623      	mov	r3, r4
 801083a:	4628      	mov	r0, r5
 801083c:	4631      	mov	r1, r6
 801083e:	f7f0 fa3b 	bl	8000cb8 <__aeabi_uldivmod>
 8010842:	4603      	mov	r3, r0
 8010844:	460c      	mov	r4, r1
 8010846:	461a      	mov	r2, r3
 8010848:	4b0e      	ldr	r3, [pc, #56]	; (8010884 <UART_SetConfig+0x6f4>)
 801084a:	fba3 1302 	umull	r1, r3, r3, r2
 801084e:	095b      	lsrs	r3, r3, #5
 8010850:	2164      	movs	r1, #100	; 0x64
 8010852:	fb01 f303 	mul.w	r3, r1, r3
 8010856:	1ad3      	subs	r3, r2, r3
 8010858:	011b      	lsls	r3, r3, #4
 801085a:	3332      	adds	r3, #50	; 0x32
 801085c:	4a09      	ldr	r2, [pc, #36]	; (8010884 <UART_SetConfig+0x6f4>)
 801085e:	fba2 2303 	umull	r2, r3, r2, r3
 8010862:	095b      	lsrs	r3, r3, #5
 8010864:	f003 020f 	and.w	r2, r3, #15
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	4442      	add	r2, r8
 801086e:	609a      	str	r2, [r3, #8]
}
 8010870:	e7ff      	b.n	8010872 <UART_SetConfig+0x6e2>
 8010872:	bf00      	nop
 8010874:	3714      	adds	r7, #20
 8010876:	46bd      	mov	sp, r7
 8010878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801087c:	40011000 	.word	0x40011000
 8010880:	40011400 	.word	0x40011400
 8010884:	51eb851f 	.word	0x51eb851f

08010888 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8010888:	b084      	sub	sp, #16
 801088a:	b480      	push	{r7}
 801088c:	b085      	sub	sp, #20
 801088e:	af00      	add	r7, sp, #0
 8010890:	6078      	str	r0, [r7, #4]
 8010892:	f107 001c 	add.w	r0, r7, #28
 8010896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801089a:	2300      	movs	r3, #0
 801089c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 801089e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80108a0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80108a2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80108a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80108a6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80108a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80108aa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80108ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80108ae:	431a      	orrs	r2, r3
             Init.ClockDiv
 80108b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80108b2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80108b4:	68fa      	ldr	r2, [r7, #12]
 80108b6:	4313      	orrs	r3, r2
 80108b8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	685b      	ldr	r3, [r3, #4]
 80108be:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80108c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80108c6:	68fa      	ldr	r2, [r7, #12]
 80108c8:	431a      	orrs	r2, r3
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80108ce:	2300      	movs	r3, #0
}
 80108d0:	4618      	mov	r0, r3
 80108d2:	3714      	adds	r7, #20
 80108d4:	46bd      	mov	sp, r7
 80108d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108da:	b004      	add	sp, #16
 80108dc:	4770      	bx	lr

080108de <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80108de:	b480      	push	{r7}
 80108e0:	b083      	sub	sp, #12
 80108e2:	af00      	add	r7, sp, #0
 80108e4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80108ec:	4618      	mov	r0, r3
 80108ee:	370c      	adds	r7, #12
 80108f0:	46bd      	mov	sp, r7
 80108f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f6:	4770      	bx	lr

080108f8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80108f8:	b480      	push	{r7}
 80108fa:	b083      	sub	sp, #12
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
 8010900:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	681a      	ldr	r2, [r3, #0]
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801090c:	2300      	movs	r3, #0
}
 801090e:	4618      	mov	r0, r3
 8010910:	370c      	adds	r7, #12
 8010912:	46bd      	mov	sp, r7
 8010914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010918:	4770      	bx	lr

0801091a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 801091a:	b580      	push	{r7, lr}
 801091c:	b082      	sub	sp, #8
 801091e:	af00      	add	r7, sp, #0
 8010920:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	2203      	movs	r2, #3
 8010926:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010928:	2002      	movs	r0, #2
 801092a:	f7f9 fbdd 	bl	800a0e8 <HAL_Delay>
  
  return HAL_OK;
 801092e:	2300      	movs	r3, #0
}
 8010930:	4618      	mov	r0, r3
 8010932:	3708      	adds	r7, #8
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}

08010938 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8010938:	b480      	push	{r7}
 801093a:	b083      	sub	sp, #12
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	f003 0303 	and.w	r3, r3, #3
}
 8010948:	4618      	mov	r0, r3
 801094a:	370c      	adds	r7, #12
 801094c:	46bd      	mov	sp, r7
 801094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010952:	4770      	bx	lr

08010954 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8010954:	b480      	push	{r7}
 8010956:	b085      	sub	sp, #20
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
 801095c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801095e:	2300      	movs	r3, #0
 8010960:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	681a      	ldr	r2, [r3, #0]
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801096e:	683b      	ldr	r3, [r7, #0]
 8010970:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010972:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010974:	683b      	ldr	r3, [r7, #0]
 8010976:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010978:	431a      	orrs	r2, r3
                       Command->CPSM);
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801097e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010980:	68fa      	ldr	r2, [r7, #12]
 8010982:	4313      	orrs	r3, r2
 8010984:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	68db      	ldr	r3, [r3, #12]
 801098a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801098e:	f023 030f 	bic.w	r3, r3, #15
 8010992:	68fa      	ldr	r2, [r7, #12]
 8010994:	431a      	orrs	r2, r3
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 801099a:	2300      	movs	r3, #0
}
 801099c:	4618      	mov	r0, r3
 801099e:	3714      	adds	r7, #20
 80109a0:	46bd      	mov	sp, r7
 80109a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a6:	4770      	bx	lr

080109a8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80109a8:	b480      	push	{r7}
 80109aa:	b083      	sub	sp, #12
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	691b      	ldr	r3, [r3, #16]
 80109b4:	b2db      	uxtb	r3, r3
}
 80109b6:	4618      	mov	r0, r3
 80109b8:	370c      	adds	r7, #12
 80109ba:	46bd      	mov	sp, r7
 80109bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c0:	4770      	bx	lr

080109c2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80109c2:	b480      	push	{r7}
 80109c4:	b085      	sub	sp, #20
 80109c6:	af00      	add	r7, sp, #0
 80109c8:	6078      	str	r0, [r7, #4]
 80109ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	3314      	adds	r3, #20
 80109d0:	461a      	mov	r2, r3
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	4413      	add	r3, r2
 80109d6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	681b      	ldr	r3, [r3, #0]
}  
 80109dc:	4618      	mov	r0, r3
 80109de:	3714      	adds	r7, #20
 80109e0:	46bd      	mov	sp, r7
 80109e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e6:	4770      	bx	lr

080109e8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80109e8:	b480      	push	{r7}
 80109ea:	b085      	sub	sp, #20
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
 80109f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80109f2:	2300      	movs	r3, #0
 80109f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	681a      	ldr	r2, [r3, #0]
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	685a      	ldr	r2, [r3, #4]
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010a0e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010a14:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010a1a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010a1c:	68fa      	ldr	r2, [r7, #12]
 8010a1e:	4313      	orrs	r3, r2
 8010a20:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a26:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	431a      	orrs	r2, r3
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010a32:	2300      	movs	r3, #0

}
 8010a34:	4618      	mov	r0, r3
 8010a36:	3714      	adds	r7, #20
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3e:	4770      	bx	lr

08010a40 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b088      	sub	sp, #32
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
 8010a48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010a4a:	683b      	ldr	r3, [r7, #0]
 8010a4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010a4e:	2310      	movs	r3, #16
 8010a50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a52:	2340      	movs	r3, #64	; 0x40
 8010a54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a56:	2300      	movs	r3, #0
 8010a58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a60:	f107 0308 	add.w	r3, r7, #8
 8010a64:	4619      	mov	r1, r3
 8010a66:	6878      	ldr	r0, [r7, #4]
 8010a68:	f7ff ff74 	bl	8010954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8010a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a70:	2110      	movs	r1, #16
 8010a72:	6878      	ldr	r0, [r7, #4]
 8010a74:	f000 fa40 	bl	8010ef8 <SDMMC_GetCmdResp1>
 8010a78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a7a:	69fb      	ldr	r3, [r7, #28]
}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3720      	adds	r7, #32
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}

08010a84 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b088      	sub	sp, #32
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
 8010a8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010a92:	2311      	movs	r3, #17
 8010a94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a96:	2340      	movs	r3, #64	; 0x40
 8010a98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010aa2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010aa4:	f107 0308 	add.w	r3, r7, #8
 8010aa8:	4619      	mov	r1, r3
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f7ff ff52 	bl	8010954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ab4:	2111      	movs	r1, #17
 8010ab6:	6878      	ldr	r0, [r7, #4]
 8010ab8:	f000 fa1e 	bl	8010ef8 <SDMMC_GetCmdResp1>
 8010abc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010abe:	69fb      	ldr	r3, [r7, #28]
}
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	3720      	adds	r7, #32
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}

08010ac8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b088      	sub	sp, #32
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
 8010ad0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010ad6:	2312      	movs	r3, #18
 8010ad8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010ada:	2340      	movs	r3, #64	; 0x40
 8010adc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010ade:	2300      	movs	r3, #0
 8010ae0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ae6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010ae8:	f107 0308 	add.w	r3, r7, #8
 8010aec:	4619      	mov	r1, r3
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f7ff ff30 	bl	8010954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8010af8:	2112      	movs	r1, #18
 8010afa:	6878      	ldr	r0, [r7, #4]
 8010afc:	f000 f9fc 	bl	8010ef8 <SDMMC_GetCmdResp1>
 8010b00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b02:	69fb      	ldr	r3, [r7, #28]
}
 8010b04:	4618      	mov	r0, r3
 8010b06:	3720      	adds	r7, #32
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	bd80      	pop	{r7, pc}

08010b0c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b088      	sub	sp, #32
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
 8010b14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010b1a:	2318      	movs	r3, #24
 8010b1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b1e:	2340      	movs	r3, #64	; 0x40
 8010b20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b22:	2300      	movs	r3, #0
 8010b24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b2c:	f107 0308 	add.w	r3, r7, #8
 8010b30:	4619      	mov	r1, r3
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f7ff ff0e 	bl	8010954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b3c:	2118      	movs	r1, #24
 8010b3e:	6878      	ldr	r0, [r7, #4]
 8010b40:	f000 f9da 	bl	8010ef8 <SDMMC_GetCmdResp1>
 8010b44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b46:	69fb      	ldr	r3, [r7, #28]
}
 8010b48:	4618      	mov	r0, r3
 8010b4a:	3720      	adds	r7, #32
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	bd80      	pop	{r7, pc}

08010b50 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b088      	sub	sp, #32
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
 8010b58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010b5e:	2319      	movs	r3, #25
 8010b60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b62:	2340      	movs	r3, #64	; 0x40
 8010b64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b66:	2300      	movs	r3, #0
 8010b68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b70:	f107 0308 	add.w	r3, r7, #8
 8010b74:	4619      	mov	r1, r3
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f7ff feec 	bl	8010954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b80:	2119      	movs	r1, #25
 8010b82:	6878      	ldr	r0, [r7, #4]
 8010b84:	f000 f9b8 	bl	8010ef8 <SDMMC_GetCmdResp1>
 8010b88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b8a:	69fb      	ldr	r3, [r7, #28]
}
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	3720      	adds	r7, #32
 8010b90:	46bd      	mov	sp, r7
 8010b92:	bd80      	pop	{r7, pc}

08010b94 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b088      	sub	sp, #32
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010ba0:	230c      	movs	r3, #12
 8010ba2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010ba4:	2340      	movs	r3, #64	; 0x40
 8010ba6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010ba8:	2300      	movs	r3, #0
 8010baa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010bb2:	f107 0308 	add.w	r3, r7, #8
 8010bb6:	4619      	mov	r1, r3
 8010bb8:	6878      	ldr	r0, [r7, #4]
 8010bba:	f7ff fecb 	bl	8010954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8010bbe:	4a05      	ldr	r2, [pc, #20]	; (8010bd4 <SDMMC_CmdStopTransfer+0x40>)
 8010bc0:	210c      	movs	r1, #12
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f000 f998 	bl	8010ef8 <SDMMC_GetCmdResp1>
 8010bc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bca:	69fb      	ldr	r3, [r7, #28]
}
 8010bcc:	4618      	mov	r0, r3
 8010bce:	3720      	adds	r7, #32
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd80      	pop	{r7, pc}
 8010bd4:	05f5e100 	.word	0x05f5e100

08010bd8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b08a      	sub	sp, #40	; 0x28
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	60f8      	str	r0, [r7, #12]
 8010be0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010be4:	683b      	ldr	r3, [r7, #0]
 8010be6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010be8:	2307      	movs	r3, #7
 8010bea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010bec:	2340      	movs	r3, #64	; 0x40
 8010bee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bf8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010bfa:	f107 0310 	add.w	r3, r7, #16
 8010bfe:	4619      	mov	r1, r3
 8010c00:	68f8      	ldr	r0, [r7, #12]
 8010c02:	f7ff fea7 	bl	8010954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8010c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c0a:	2107      	movs	r1, #7
 8010c0c:	68f8      	ldr	r0, [r7, #12]
 8010c0e:	f000 f973 	bl	8010ef8 <SDMMC_GetCmdResp1>
 8010c12:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010c16:	4618      	mov	r0, r3
 8010c18:	3728      	adds	r7, #40	; 0x28
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	bd80      	pop	{r7, pc}

08010c1e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8010c1e:	b580      	push	{r7, lr}
 8010c20:	b088      	sub	sp, #32
 8010c22:	af00      	add	r7, sp, #0
 8010c24:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010c26:	2300      	movs	r3, #0
 8010c28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8010c2e:	2300      	movs	r3, #0
 8010c30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010c32:	2300      	movs	r3, #0
 8010c34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010c3c:	f107 0308 	add.w	r3, r7, #8
 8010c40:	4619      	mov	r1, r3
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f7ff fe86 	bl	8010954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f000 f92d 	bl	8010ea8 <SDMMC_GetCmdError>
 8010c4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c50:	69fb      	ldr	r3, [r7, #28]
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	3720      	adds	r7, #32
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}

08010c5a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8010c5a:	b580      	push	{r7, lr}
 8010c5c:	b088      	sub	sp, #32
 8010c5e:	af00      	add	r7, sp, #0
 8010c60:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010c62:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010c66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010c68:	2308      	movs	r3, #8
 8010c6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010c6c:	2340      	movs	r3, #64	; 0x40
 8010c6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010c70:	2300      	movs	r3, #0
 8010c72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010c7a:	f107 0308 	add.w	r3, r7, #8
 8010c7e:	4619      	mov	r1, r3
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f7ff fe67 	bl	8010954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010c86:	6878      	ldr	r0, [r7, #4]
 8010c88:	f000 fb16 	bl	80112b8 <SDMMC_GetCmdResp7>
 8010c8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c8e:	69fb      	ldr	r3, [r7, #28]
}
 8010c90:	4618      	mov	r0, r3
 8010c92:	3720      	adds	r7, #32
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}

08010c98 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b088      	sub	sp, #32
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010ca6:	2337      	movs	r3, #55	; 0x37
 8010ca8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010caa:	2340      	movs	r3, #64	; 0x40
 8010cac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010cae:	2300      	movs	r3, #0
 8010cb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010cb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010cb8:	f107 0308 	add.w	r3, r7, #8
 8010cbc:	4619      	mov	r1, r3
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f7ff fe48 	bl	8010954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8010cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cc8:	2137      	movs	r1, #55	; 0x37
 8010cca:	6878      	ldr	r0, [r7, #4]
 8010ccc:	f000 f914 	bl	8010ef8 <SDMMC_GetCmdResp1>
 8010cd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cd2:	69fb      	ldr	r3, [r7, #28]
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3720      	adds	r7, #32
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b088      	sub	sp, #32
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
 8010ce4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010cec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010cf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010cf2:	2329      	movs	r3, #41	; 0x29
 8010cf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010cf6:	2340      	movs	r3, #64	; 0x40
 8010cf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010d04:	f107 0308 	add.w	r3, r7, #8
 8010d08:	4619      	mov	r1, r3
 8010d0a:	6878      	ldr	r0, [r7, #4]
 8010d0c:	f7ff fe22 	bl	8010954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010d10:	6878      	ldr	r0, [r7, #4]
 8010d12:	f000 fa23 	bl	801115c <SDMMC_GetCmdResp3>
 8010d16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d18:	69fb      	ldr	r3, [r7, #28]
}
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	3720      	adds	r7, #32
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	bd80      	pop	{r7, pc}

08010d22 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8010d22:	b580      	push	{r7, lr}
 8010d24:	b088      	sub	sp, #32
 8010d26:	af00      	add	r7, sp, #0
 8010d28:	6078      	str	r0, [r7, #4]
 8010d2a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010d30:	2306      	movs	r3, #6
 8010d32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010d34:	2340      	movs	r3, #64	; 0x40
 8010d36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010d42:	f107 0308 	add.w	r3, r7, #8
 8010d46:	4619      	mov	r1, r3
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	f7ff fe03 	bl	8010954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8010d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d52:	2106      	movs	r1, #6
 8010d54:	6878      	ldr	r0, [r7, #4]
 8010d56:	f000 f8cf 	bl	8010ef8 <SDMMC_GetCmdResp1>
 8010d5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d5c:	69fb      	ldr	r3, [r7, #28]
}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	3720      	adds	r7, #32
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}

08010d66 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8010d66:	b580      	push	{r7, lr}
 8010d68:	b088      	sub	sp, #32
 8010d6a:	af00      	add	r7, sp, #0
 8010d6c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010d6e:	2300      	movs	r3, #0
 8010d70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010d72:	2333      	movs	r3, #51	; 0x33
 8010d74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010d76:	2340      	movs	r3, #64	; 0x40
 8010d78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010d84:	f107 0308 	add.w	r3, r7, #8
 8010d88:	4619      	mov	r1, r3
 8010d8a:	6878      	ldr	r0, [r7, #4]
 8010d8c:	f7ff fde2 	bl	8010954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d94:	2133      	movs	r1, #51	; 0x33
 8010d96:	6878      	ldr	r0, [r7, #4]
 8010d98:	f000 f8ae 	bl	8010ef8 <SDMMC_GetCmdResp1>
 8010d9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d9e:	69fb      	ldr	r3, [r7, #28]
}
 8010da0:	4618      	mov	r0, r3
 8010da2:	3720      	adds	r7, #32
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd80      	pop	{r7, pc}

08010da8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b088      	sub	sp, #32
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010db0:	2300      	movs	r3, #0
 8010db2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010db4:	2302      	movs	r3, #2
 8010db6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010db8:	23c0      	movs	r3, #192	; 0xc0
 8010dba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010dc4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010dc6:	f107 0308 	add.w	r3, r7, #8
 8010dca:	4619      	mov	r1, r3
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f7ff fdc1 	bl	8010954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010dd2:	6878      	ldr	r0, [r7, #4]
 8010dd4:	f000 f97c 	bl	80110d0 <SDMMC_GetCmdResp2>
 8010dd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010dda:	69fb      	ldr	r3, [r7, #28]
}
 8010ddc:	4618      	mov	r0, r3
 8010dde:	3720      	adds	r7, #32
 8010de0:	46bd      	mov	sp, r7
 8010de2:	bd80      	pop	{r7, pc}

08010de4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b088      	sub	sp, #32
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
 8010dec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010dee:	683b      	ldr	r3, [r7, #0]
 8010df0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010df2:	2309      	movs	r3, #9
 8010df4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010df6:	23c0      	movs	r3, #192	; 0xc0
 8010df8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010e04:	f107 0308 	add.w	r3, r7, #8
 8010e08:	4619      	mov	r1, r3
 8010e0a:	6878      	ldr	r0, [r7, #4]
 8010e0c:	f7ff fda2 	bl	8010954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010e10:	6878      	ldr	r0, [r7, #4]
 8010e12:	f000 f95d 	bl	80110d0 <SDMMC_GetCmdResp2>
 8010e16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e18:	69fb      	ldr	r3, [r7, #28]
}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3720      	adds	r7, #32
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}

08010e22 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010e22:	b580      	push	{r7, lr}
 8010e24:	b088      	sub	sp, #32
 8010e26:	af00      	add	r7, sp, #0
 8010e28:	6078      	str	r0, [r7, #4]
 8010e2a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010e30:	2303      	movs	r3, #3
 8010e32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010e34:	2340      	movs	r3, #64	; 0x40
 8010e36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010e38:	2300      	movs	r3, #0
 8010e3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010e3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010e42:	f107 0308 	add.w	r3, r7, #8
 8010e46:	4619      	mov	r1, r3
 8010e48:	6878      	ldr	r0, [r7, #4]
 8010e4a:	f7ff fd83 	bl	8010954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010e4e:	683a      	ldr	r2, [r7, #0]
 8010e50:	2103      	movs	r1, #3
 8010e52:	6878      	ldr	r0, [r7, #4]
 8010e54:	f000 f9bc 	bl	80111d0 <SDMMC_GetCmdResp6>
 8010e58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e5a:	69fb      	ldr	r3, [r7, #28]
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3720      	adds	r7, #32
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}

08010e64 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b088      	sub	sp, #32
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
 8010e6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010e72:	230d      	movs	r3, #13
 8010e74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010e76:	2340      	movs	r3, #64	; 0x40
 8010e78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010e84:	f107 0308 	add.w	r3, r7, #8
 8010e88:	4619      	mov	r1, r3
 8010e8a:	6878      	ldr	r0, [r7, #4]
 8010e8c:	f7ff fd62 	bl	8010954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e94:	210d      	movs	r1, #13
 8010e96:	6878      	ldr	r0, [r7, #4]
 8010e98:	f000 f82e 	bl	8010ef8 <SDMMC_GetCmdResp1>
 8010e9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e9e:	69fb      	ldr	r3, [r7, #28]
}
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	3720      	adds	r7, #32
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bd80      	pop	{r7, pc}

08010ea8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010ea8:	b490      	push	{r4, r7}
 8010eaa:	b082      	sub	sp, #8
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010eb0:	4b0f      	ldr	r3, [pc, #60]	; (8010ef0 <SDMMC_GetCmdError+0x48>)
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	4a0f      	ldr	r2, [pc, #60]	; (8010ef4 <SDMMC_GetCmdError+0x4c>)
 8010eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8010eba:	0a5b      	lsrs	r3, r3, #9
 8010ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ec0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010ec4:	4623      	mov	r3, r4
 8010ec6:	1e5c      	subs	r4, r3, #1
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d102      	bne.n	8010ed2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ecc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010ed0:	e009      	b.n	8010ee6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d0f2      	beq.n	8010ec4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	22c5      	movs	r2, #197	; 0xc5
 8010ee2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010ee4:	2300      	movs	r3, #0
}
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	3708      	adds	r7, #8
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bc90      	pop	{r4, r7}
 8010eee:	4770      	bx	lr
 8010ef0:	20000000 	.word	0x20000000
 8010ef4:	10624dd3 	.word	0x10624dd3

08010ef8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010ef8:	b590      	push	{r4, r7, lr}
 8010efa:	b087      	sub	sp, #28
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	60f8      	str	r0, [r7, #12]
 8010f00:	460b      	mov	r3, r1
 8010f02:	607a      	str	r2, [r7, #4]
 8010f04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010f06:	4b6f      	ldr	r3, [pc, #444]	; (80110c4 <SDMMC_GetCmdResp1+0x1cc>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	4a6f      	ldr	r2, [pc, #444]	; (80110c8 <SDMMC_GetCmdResp1+0x1d0>)
 8010f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8010f10:	0a5b      	lsrs	r3, r3, #9
 8010f12:	687a      	ldr	r2, [r7, #4]
 8010f14:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010f18:	4623      	mov	r3, r4
 8010f1a:	1e5c      	subs	r4, r3, #1
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d102      	bne.n	8010f26 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010f24:	e0c9      	b.n	80110ba <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f2a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f2c:	697b      	ldr	r3, [r7, #20]
 8010f2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d0f0      	beq.n	8010f18 <SDMMC_GetCmdResp1+0x20>
 8010f36:	697b      	ldr	r3, [r7, #20]
 8010f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d1eb      	bne.n	8010f18 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f44:	f003 0304 	and.w	r3, r3, #4
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d004      	beq.n	8010f56 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	2204      	movs	r2, #4
 8010f50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f52:	2304      	movs	r3, #4
 8010f54:	e0b1      	b.n	80110ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f5a:	f003 0301 	and.w	r3, r3, #1
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d004      	beq.n	8010f6c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	2201      	movs	r2, #1
 8010f66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f68:	2301      	movs	r3, #1
 8010f6a:	e0a6      	b.n	80110ba <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	22c5      	movs	r2, #197	; 0xc5
 8010f70:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010f72:	68f8      	ldr	r0, [r7, #12]
 8010f74:	f7ff fd18 	bl	80109a8 <SDIO_GetCommandResponse>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	461a      	mov	r2, r3
 8010f7c:	7afb      	ldrb	r3, [r7, #11]
 8010f7e:	4293      	cmp	r3, r2
 8010f80:	d001      	beq.n	8010f86 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f82:	2301      	movs	r3, #1
 8010f84:	e099      	b.n	80110ba <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010f86:	2100      	movs	r1, #0
 8010f88:	68f8      	ldr	r0, [r7, #12]
 8010f8a:	f7ff fd1a 	bl	80109c2 <SDIO_GetResponse>
 8010f8e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010f90:	693a      	ldr	r2, [r7, #16]
 8010f92:	4b4e      	ldr	r3, [pc, #312]	; (80110cc <SDMMC_GetCmdResp1+0x1d4>)
 8010f94:	4013      	ands	r3, r2
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d101      	bne.n	8010f9e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	e08d      	b.n	80110ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010f9e:	693b      	ldr	r3, [r7, #16]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	da02      	bge.n	8010faa <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010fa4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010fa8:	e087      	b.n	80110ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d001      	beq.n	8010fb8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010fb4:	2340      	movs	r3, #64	; 0x40
 8010fb6:	e080      	b.n	80110ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010fb8:	693b      	ldr	r3, [r7, #16]
 8010fba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d001      	beq.n	8010fc6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010fc2:	2380      	movs	r3, #128	; 0x80
 8010fc4:	e079      	b.n	80110ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010fc6:	693b      	ldr	r3, [r7, #16]
 8010fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d002      	beq.n	8010fd6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010fd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010fd4:	e071      	b.n	80110ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010fd6:	693b      	ldr	r3, [r7, #16]
 8010fd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d002      	beq.n	8010fe6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010fe4:	e069      	b.n	80110ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010fe6:	693b      	ldr	r3, [r7, #16]
 8010fe8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d002      	beq.n	8010ff6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ff4:	e061      	b.n	80110ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010ff6:	693b      	ldr	r3, [r7, #16]
 8010ff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d002      	beq.n	8011006 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011000:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011004:	e059      	b.n	80110ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011006:	693b      	ldr	r3, [r7, #16]
 8011008:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801100c:	2b00      	cmp	r3, #0
 801100e:	d002      	beq.n	8011016 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011014:	e051      	b.n	80110ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011016:	693b      	ldr	r3, [r7, #16]
 8011018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801101c:	2b00      	cmp	r3, #0
 801101e:	d002      	beq.n	8011026 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011020:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011024:	e049      	b.n	80110ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011026:	693b      	ldr	r3, [r7, #16]
 8011028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801102c:	2b00      	cmp	r3, #0
 801102e:	d002      	beq.n	8011036 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011030:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011034:	e041      	b.n	80110ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011036:	693b      	ldr	r3, [r7, #16]
 8011038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801103c:	2b00      	cmp	r3, #0
 801103e:	d002      	beq.n	8011046 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8011040:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011044:	e039      	b.n	80110ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011046:	693b      	ldr	r3, [r7, #16]
 8011048:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801104c:	2b00      	cmp	r3, #0
 801104e:	d002      	beq.n	8011056 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011050:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011054:	e031      	b.n	80110ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011056:	693b      	ldr	r3, [r7, #16]
 8011058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801105c:	2b00      	cmp	r3, #0
 801105e:	d002      	beq.n	8011066 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011060:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011064:	e029      	b.n	80110ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011066:	693b      	ldr	r3, [r7, #16]
 8011068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801106c:	2b00      	cmp	r3, #0
 801106e:	d002      	beq.n	8011076 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011070:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011074:	e021      	b.n	80110ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011076:	693b      	ldr	r3, [r7, #16]
 8011078:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801107c:	2b00      	cmp	r3, #0
 801107e:	d002      	beq.n	8011086 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011080:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011084:	e019      	b.n	80110ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011086:	693b      	ldr	r3, [r7, #16]
 8011088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801108c:	2b00      	cmp	r3, #0
 801108e:	d002      	beq.n	8011096 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011090:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011094:	e011      	b.n	80110ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011096:	693b      	ldr	r3, [r7, #16]
 8011098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801109c:	2b00      	cmp	r3, #0
 801109e:	d002      	beq.n	80110a6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80110a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80110a4:	e009      	b.n	80110ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80110a6:	693b      	ldr	r3, [r7, #16]
 80110a8:	f003 0308 	and.w	r3, r3, #8
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d002      	beq.n	80110b6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80110b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80110b4:	e001      	b.n	80110ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80110b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80110ba:	4618      	mov	r0, r3
 80110bc:	371c      	adds	r7, #28
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd90      	pop	{r4, r7, pc}
 80110c2:	bf00      	nop
 80110c4:	20000000 	.word	0x20000000
 80110c8:	10624dd3 	.word	0x10624dd3
 80110cc:	fdffe008 	.word	0xfdffe008

080110d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80110d0:	b490      	push	{r4, r7}
 80110d2:	b084      	sub	sp, #16
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80110d8:	4b1e      	ldr	r3, [pc, #120]	; (8011154 <SDMMC_GetCmdResp2+0x84>)
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	4a1e      	ldr	r2, [pc, #120]	; (8011158 <SDMMC_GetCmdResp2+0x88>)
 80110de:	fba2 2303 	umull	r2, r3, r2, r3
 80110e2:	0a5b      	lsrs	r3, r3, #9
 80110e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80110e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80110ec:	4623      	mov	r3, r4
 80110ee:	1e5c      	subs	r4, r3, #1
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d102      	bne.n	80110fa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80110f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80110f8:	e026      	b.n	8011148 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110fe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011106:	2b00      	cmp	r3, #0
 8011108:	d0f0      	beq.n	80110ec <SDMMC_GetCmdResp2+0x1c>
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011110:	2b00      	cmp	r3, #0
 8011112:	d1eb      	bne.n	80110ec <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011118:	f003 0304 	and.w	r3, r3, #4
 801111c:	2b00      	cmp	r3, #0
 801111e:	d004      	beq.n	801112a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2204      	movs	r2, #4
 8011124:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011126:	2304      	movs	r3, #4
 8011128:	e00e      	b.n	8011148 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801112e:	f003 0301 	and.w	r3, r3, #1
 8011132:	2b00      	cmp	r3, #0
 8011134:	d004      	beq.n	8011140 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	2201      	movs	r2, #1
 801113a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801113c:	2301      	movs	r3, #1
 801113e:	e003      	b.n	8011148 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	22c5      	movs	r2, #197	; 0xc5
 8011144:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011146:	2300      	movs	r3, #0
}
 8011148:	4618      	mov	r0, r3
 801114a:	3710      	adds	r7, #16
 801114c:	46bd      	mov	sp, r7
 801114e:	bc90      	pop	{r4, r7}
 8011150:	4770      	bx	lr
 8011152:	bf00      	nop
 8011154:	20000000 	.word	0x20000000
 8011158:	10624dd3 	.word	0x10624dd3

0801115c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 801115c:	b490      	push	{r4, r7}
 801115e:	b084      	sub	sp, #16
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011164:	4b18      	ldr	r3, [pc, #96]	; (80111c8 <SDMMC_GetCmdResp3+0x6c>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	4a18      	ldr	r2, [pc, #96]	; (80111cc <SDMMC_GetCmdResp3+0x70>)
 801116a:	fba2 2303 	umull	r2, r3, r2, r3
 801116e:	0a5b      	lsrs	r3, r3, #9
 8011170:	f241 3288 	movw	r2, #5000	; 0x1388
 8011174:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011178:	4623      	mov	r3, r4
 801117a:	1e5c      	subs	r4, r3, #1
 801117c:	2b00      	cmp	r3, #0
 801117e:	d102      	bne.n	8011186 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011180:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011184:	e01b      	b.n	80111be <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801118a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011192:	2b00      	cmp	r3, #0
 8011194:	d0f0      	beq.n	8011178 <SDMMC_GetCmdResp3+0x1c>
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801119c:	2b00      	cmp	r3, #0
 801119e:	d1eb      	bne.n	8011178 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111a4:	f003 0304 	and.w	r3, r3, #4
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d004      	beq.n	80111b6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2204      	movs	r2, #4
 80111b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80111b2:	2304      	movs	r3, #4
 80111b4:	e003      	b.n	80111be <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	22c5      	movs	r2, #197	; 0xc5
 80111ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80111bc:	2300      	movs	r3, #0
}
 80111be:	4618      	mov	r0, r3
 80111c0:	3710      	adds	r7, #16
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bc90      	pop	{r4, r7}
 80111c6:	4770      	bx	lr
 80111c8:	20000000 	.word	0x20000000
 80111cc:	10624dd3 	.word	0x10624dd3

080111d0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80111d0:	b590      	push	{r4, r7, lr}
 80111d2:	b087      	sub	sp, #28
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	60f8      	str	r0, [r7, #12]
 80111d8:	460b      	mov	r3, r1
 80111da:	607a      	str	r2, [r7, #4]
 80111dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80111de:	4b34      	ldr	r3, [pc, #208]	; (80112b0 <SDMMC_GetCmdResp6+0xe0>)
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	4a34      	ldr	r2, [pc, #208]	; (80112b4 <SDMMC_GetCmdResp6+0xe4>)
 80111e4:	fba2 2303 	umull	r2, r3, r2, r3
 80111e8:	0a5b      	lsrs	r3, r3, #9
 80111ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80111ee:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80111f2:	4623      	mov	r3, r4
 80111f4:	1e5c      	subs	r4, r3, #1
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d102      	bne.n	8011200 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80111fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80111fe:	e052      	b.n	80112a6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011204:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011206:	697b      	ldr	r3, [r7, #20]
 8011208:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801120c:	2b00      	cmp	r3, #0
 801120e:	d0f0      	beq.n	80111f2 <SDMMC_GetCmdResp6+0x22>
 8011210:	697b      	ldr	r3, [r7, #20]
 8011212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011216:	2b00      	cmp	r3, #0
 8011218:	d1eb      	bne.n	80111f2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801121e:	f003 0304 	and.w	r3, r3, #4
 8011222:	2b00      	cmp	r3, #0
 8011224:	d004      	beq.n	8011230 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	2204      	movs	r2, #4
 801122a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801122c:	2304      	movs	r3, #4
 801122e:	e03a      	b.n	80112a6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011234:	f003 0301 	and.w	r3, r3, #1
 8011238:	2b00      	cmp	r3, #0
 801123a:	d004      	beq.n	8011246 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	2201      	movs	r2, #1
 8011240:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011242:	2301      	movs	r3, #1
 8011244:	e02f      	b.n	80112a6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8011246:	68f8      	ldr	r0, [r7, #12]
 8011248:	f7ff fbae 	bl	80109a8 <SDIO_GetCommandResponse>
 801124c:	4603      	mov	r3, r0
 801124e:	461a      	mov	r2, r3
 8011250:	7afb      	ldrb	r3, [r7, #11]
 8011252:	4293      	cmp	r3, r2
 8011254:	d001      	beq.n	801125a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011256:	2301      	movs	r3, #1
 8011258:	e025      	b.n	80112a6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	22c5      	movs	r2, #197	; 0xc5
 801125e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8011260:	2100      	movs	r1, #0
 8011262:	68f8      	ldr	r0, [r7, #12]
 8011264:	f7ff fbad 	bl	80109c2 <SDIO_GetResponse>
 8011268:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801126a:	693b      	ldr	r3, [r7, #16]
 801126c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011270:	2b00      	cmp	r3, #0
 8011272:	d106      	bne.n	8011282 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011274:	693b      	ldr	r3, [r7, #16]
 8011276:	0c1b      	lsrs	r3, r3, #16
 8011278:	b29a      	uxth	r2, r3
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 801127e:	2300      	movs	r3, #0
 8011280:	e011      	b.n	80112a6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011282:	693b      	ldr	r3, [r7, #16]
 8011284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011288:	2b00      	cmp	r3, #0
 801128a:	d002      	beq.n	8011292 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801128c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011290:	e009      	b.n	80112a6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011292:	693b      	ldr	r3, [r7, #16]
 8011294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011298:	2b00      	cmp	r3, #0
 801129a:	d002      	beq.n	80112a2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801129c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80112a0:	e001      	b.n	80112a6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80112a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80112a6:	4618      	mov	r0, r3
 80112a8:	371c      	adds	r7, #28
 80112aa:	46bd      	mov	sp, r7
 80112ac:	bd90      	pop	{r4, r7, pc}
 80112ae:	bf00      	nop
 80112b0:	20000000 	.word	0x20000000
 80112b4:	10624dd3 	.word	0x10624dd3

080112b8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80112b8:	b490      	push	{r4, r7}
 80112ba:	b084      	sub	sp, #16
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80112c0:	4b21      	ldr	r3, [pc, #132]	; (8011348 <SDMMC_GetCmdResp7+0x90>)
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	4a21      	ldr	r2, [pc, #132]	; (801134c <SDMMC_GetCmdResp7+0x94>)
 80112c6:	fba2 2303 	umull	r2, r3, r2, r3
 80112ca:	0a5b      	lsrs	r3, r3, #9
 80112cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80112d0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80112d4:	4623      	mov	r3, r4
 80112d6:	1e5c      	subs	r4, r3, #1
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d102      	bne.n	80112e2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80112dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80112e0:	e02c      	b.n	801133c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112e6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d0f0      	beq.n	80112d4 <SDMMC_GetCmdResp7+0x1c>
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d1eb      	bne.n	80112d4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011300:	f003 0304 	and.w	r3, r3, #4
 8011304:	2b00      	cmp	r3, #0
 8011306:	d004      	beq.n	8011312 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2204      	movs	r2, #4
 801130c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801130e:	2304      	movs	r3, #4
 8011310:	e014      	b.n	801133c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011316:	f003 0301 	and.w	r3, r3, #1
 801131a:	2b00      	cmp	r3, #0
 801131c:	d004      	beq.n	8011328 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	2201      	movs	r2, #1
 8011322:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011324:	2301      	movs	r3, #1
 8011326:	e009      	b.n	801133c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801132c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011330:	2b00      	cmp	r3, #0
 8011332:	d002      	beq.n	801133a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	2240      	movs	r2, #64	; 0x40
 8011338:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801133a:	2300      	movs	r3, #0
  
}
 801133c:	4618      	mov	r0, r3
 801133e:	3710      	adds	r7, #16
 8011340:	46bd      	mov	sp, r7
 8011342:	bc90      	pop	{r4, r7}
 8011344:	4770      	bx	lr
 8011346:	bf00      	nop
 8011348:	20000000 	.word	0x20000000
 801134c:	10624dd3 	.word	0x10624dd3

08011350 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011350:	b580      	push	{r7, lr}
 8011352:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011354:	4904      	ldr	r1, [pc, #16]	; (8011368 <MX_FATFS_Init+0x18>)
 8011356:	4805      	ldr	r0, [pc, #20]	; (801136c <MX_FATFS_Init+0x1c>)
 8011358:	f003 fb9c 	bl	8014a94 <FATFS_LinkDriver>
 801135c:	4603      	mov	r3, r0
 801135e:	461a      	mov	r2, r3
 8011360:	4b03      	ldr	r3, [pc, #12]	; (8011370 <MX_FATFS_Init+0x20>)
 8011362:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011364:	bf00      	nop
 8011366:	bd80      	pop	{r7, pc}
 8011368:	20044dc8 	.word	0x20044dc8
 801136c:	0801a3f8 	.word	0x0801a3f8
 8011370:	20044dc4 	.word	0x20044dc4

08011374 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b082      	sub	sp, #8
 8011378:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801137a:	2300      	movs	r3, #0
 801137c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801137e:	f000 f896 	bl	80114ae <BSP_SD_IsDetected>
 8011382:	4603      	mov	r3, r0
 8011384:	2b01      	cmp	r3, #1
 8011386:	d001      	beq.n	801138c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8011388:	2301      	movs	r3, #1
 801138a:	e012      	b.n	80113b2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 801138c:	480b      	ldr	r0, [pc, #44]	; (80113bc <BSP_SD_Init+0x48>)
 801138e:	f7fb ffa5 	bl	800d2dc <HAL_SD_Init>
 8011392:	4603      	mov	r3, r0
 8011394:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8011396:	79fb      	ldrb	r3, [r7, #7]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d109      	bne.n	80113b0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 801139c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80113a0:	4806      	ldr	r0, [pc, #24]	; (80113bc <BSP_SD_Init+0x48>)
 80113a2:	f7fc fd4f 	bl	800de44 <HAL_SD_ConfigWideBusOperation>
 80113a6:	4603      	mov	r3, r0
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d001      	beq.n	80113b0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80113ac:	2301      	movs	r3, #1
 80113ae:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80113b0:	79fb      	ldrb	r3, [r7, #7]
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3708      	adds	r7, #8
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}
 80113ba:	bf00      	nop
 80113bc:	20044bc4 	.word	0x20044bc4

080113c0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b086      	sub	sp, #24
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	60f8      	str	r0, [r7, #12]
 80113c8:	60b9      	str	r1, [r7, #8]
 80113ca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80113cc:	2300      	movs	r3, #0
 80113ce:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	68ba      	ldr	r2, [r7, #8]
 80113d4:	68f9      	ldr	r1, [r7, #12]
 80113d6:	4806      	ldr	r0, [pc, #24]	; (80113f0 <BSP_SD_ReadBlocks_DMA+0x30>)
 80113d8:	f7fc f810 	bl	800d3fc <HAL_SD_ReadBlocks_DMA>
 80113dc:	4603      	mov	r3, r0
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d001      	beq.n	80113e6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80113e2:	2301      	movs	r3, #1
 80113e4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80113e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80113e8:	4618      	mov	r0, r3
 80113ea:	3718      	adds	r7, #24
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bd80      	pop	{r7, pc}
 80113f0:	20044bc4 	.word	0x20044bc4

080113f4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b086      	sub	sp, #24
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	60f8      	str	r0, [r7, #12]
 80113fc:	60b9      	str	r1, [r7, #8]
 80113fe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011400:	2300      	movs	r3, #0
 8011402:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	68ba      	ldr	r2, [r7, #8]
 8011408:	68f9      	ldr	r1, [r7, #12]
 801140a:	4806      	ldr	r0, [pc, #24]	; (8011424 <BSP_SD_WriteBlocks_DMA+0x30>)
 801140c:	f7fc f8de 	bl	800d5cc <HAL_SD_WriteBlocks_DMA>
 8011410:	4603      	mov	r3, r0
 8011412:	2b00      	cmp	r3, #0
 8011414:	d001      	beq.n	801141a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011416:	2301      	movs	r3, #1
 8011418:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801141a:	7dfb      	ldrb	r3, [r7, #23]
}
 801141c:	4618      	mov	r0, r3
 801141e:	3718      	adds	r7, #24
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}
 8011424:	20044bc4 	.word	0x20044bc4

08011428 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801142c:	4805      	ldr	r0, [pc, #20]	; (8011444 <BSP_SD_GetCardState+0x1c>)
 801142e:	f7fc fd85 	bl	800df3c <HAL_SD_GetCardState>
 8011432:	4603      	mov	r3, r0
 8011434:	2b04      	cmp	r3, #4
 8011436:	bf14      	ite	ne
 8011438:	2301      	movne	r3, #1
 801143a:	2300      	moveq	r3, #0
 801143c:	b2db      	uxtb	r3, r3
}
 801143e:	4618      	mov	r0, r3
 8011440:	bd80      	pop	{r7, pc}
 8011442:	bf00      	nop
 8011444:	20044bc4 	.word	0x20044bc4

08011448 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b082      	sub	sp, #8
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8011450:	6879      	ldr	r1, [r7, #4]
 8011452:	4803      	ldr	r0, [pc, #12]	; (8011460 <BSP_SD_GetCardInfo+0x18>)
 8011454:	f7fc fcca 	bl	800ddec <HAL_SD_GetCardInfo>
}
 8011458:	bf00      	nop
 801145a:	3708      	adds	r7, #8
 801145c:	46bd      	mov	sp, r7
 801145e:	bd80      	pop	{r7, pc}
 8011460:	20044bc4 	.word	0x20044bc4

08011464 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b082      	sub	sp, #8
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 801146c:	f000 f818 	bl	80114a0 <BSP_SD_AbortCallback>
}
 8011470:	bf00      	nop
 8011472:	3708      	adds	r7, #8
 8011474:	46bd      	mov	sp, r7
 8011476:	bd80      	pop	{r7, pc}

08011478 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b082      	sub	sp, #8
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011480:	f000 f9a8 	bl	80117d4 <BSP_SD_WriteCpltCallback>
}
 8011484:	bf00      	nop
 8011486:	3708      	adds	r7, #8
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}

0801148c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b082      	sub	sp, #8
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8011494:	f000 f9aa 	bl	80117ec <BSP_SD_ReadCpltCallback>
}
 8011498:	bf00      	nop
 801149a:	3708      	adds	r7, #8
 801149c:	46bd      	mov	sp, r7
 801149e:	bd80      	pop	{r7, pc}

080114a0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80114a0:	b480      	push	{r7}
 80114a2:	af00      	add	r7, sp, #0

}
 80114a4:	bf00      	nop
 80114a6:	46bd      	mov	sp, r7
 80114a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ac:	4770      	bx	lr

080114ae <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80114ae:	b580      	push	{r7, lr}
 80114b0:	b082      	sub	sp, #8
 80114b2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80114b4:	2301      	movs	r3, #1
 80114b6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80114b8:	f000 f80c 	bl	80114d4 <BSP_PlatformIsDetected>
 80114bc:	4603      	mov	r3, r0
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d101      	bne.n	80114c6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80114c2:	2300      	movs	r3, #0
 80114c4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80114c6:	79fb      	ldrb	r3, [r7, #7]
 80114c8:	b2db      	uxtb	r3, r3
}
 80114ca:	4618      	mov	r0, r3
 80114cc:	3708      	adds	r7, #8
 80114ce:	46bd      	mov	sp, r7
 80114d0:	bd80      	pop	{r7, pc}
	...

080114d4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b082      	sub	sp, #8
 80114d8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80114da:	2301      	movs	r3, #1
 80114dc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80114de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80114e2:	4806      	ldr	r0, [pc, #24]	; (80114fc <BSP_PlatformIsDetected+0x28>)
 80114e4:	f7fa f87e 	bl	800b5e4 <HAL_GPIO_ReadPin>
 80114e8:	4603      	mov	r3, r0
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d001      	beq.n	80114f2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80114ee:	2300      	movs	r3, #0
 80114f0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80114f2:	79fb      	ldrb	r3, [r7, #7]
}
 80114f4:	4618      	mov	r0, r3
 80114f6:	3708      	adds	r7, #8
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bd80      	pop	{r7, pc}
 80114fc:	40020000 	.word	0x40020000

08011500 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011500:	b580      	push	{r7, lr}
 8011502:	b084      	sub	sp, #16
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011508:	f7f8 fde2 	bl	800a0d0 <HAL_GetTick>
 801150c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801150e:	e006      	b.n	801151e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011510:	f7ff ff8a 	bl	8011428 <BSP_SD_GetCardState>
 8011514:	4603      	mov	r3, r0
 8011516:	2b00      	cmp	r3, #0
 8011518:	d101      	bne.n	801151e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801151a:	2300      	movs	r3, #0
 801151c:	e009      	b.n	8011532 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801151e:	f7f8 fdd7 	bl	800a0d0 <HAL_GetTick>
 8011522:	4602      	mov	r2, r0
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	1ad3      	subs	r3, r2, r3
 8011528:	687a      	ldr	r2, [r7, #4]
 801152a:	429a      	cmp	r2, r3
 801152c:	d8f0      	bhi.n	8011510 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801152e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011532:	4618      	mov	r0, r3
 8011534:	3710      	adds	r7, #16
 8011536:	46bd      	mov	sp, r7
 8011538:	bd80      	pop	{r7, pc}
	...

0801153c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b082      	sub	sp, #8
 8011540:	af00      	add	r7, sp, #0
 8011542:	4603      	mov	r3, r0
 8011544:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011546:	4b0b      	ldr	r3, [pc, #44]	; (8011574 <SD_CheckStatus+0x38>)
 8011548:	2201      	movs	r2, #1
 801154a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801154c:	f7ff ff6c 	bl	8011428 <BSP_SD_GetCardState>
 8011550:	4603      	mov	r3, r0
 8011552:	2b00      	cmp	r3, #0
 8011554:	d107      	bne.n	8011566 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011556:	4b07      	ldr	r3, [pc, #28]	; (8011574 <SD_CheckStatus+0x38>)
 8011558:	781b      	ldrb	r3, [r3, #0]
 801155a:	b2db      	uxtb	r3, r3
 801155c:	f023 0301 	bic.w	r3, r3, #1
 8011560:	b2da      	uxtb	r2, r3
 8011562:	4b04      	ldr	r3, [pc, #16]	; (8011574 <SD_CheckStatus+0x38>)
 8011564:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011566:	4b03      	ldr	r3, [pc, #12]	; (8011574 <SD_CheckStatus+0x38>)
 8011568:	781b      	ldrb	r3, [r3, #0]
 801156a:	b2db      	uxtb	r3, r3
}
 801156c:	4618      	mov	r0, r3
 801156e:	3708      	adds	r7, #8
 8011570:	46bd      	mov	sp, r7
 8011572:	bd80      	pop	{r7, pc}
 8011574:	20000009 	.word	0x20000009

08011578 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011578:	b580      	push	{r7, lr}
 801157a:	b082      	sub	sp, #8
 801157c:	af00      	add	r7, sp, #0
 801157e:	4603      	mov	r3, r0
 8011580:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8011582:	f7ff fef7 	bl	8011374 <BSP_SD_Init>
 8011586:	4603      	mov	r3, r0
 8011588:	2b00      	cmp	r3, #0
 801158a:	d107      	bne.n	801159c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 801158c:	79fb      	ldrb	r3, [r7, #7]
 801158e:	4618      	mov	r0, r3
 8011590:	f7ff ffd4 	bl	801153c <SD_CheckStatus>
 8011594:	4603      	mov	r3, r0
 8011596:	461a      	mov	r2, r3
 8011598:	4b04      	ldr	r3, [pc, #16]	; (80115ac <SD_initialize+0x34>)
 801159a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801159c:	4b03      	ldr	r3, [pc, #12]	; (80115ac <SD_initialize+0x34>)
 801159e:	781b      	ldrb	r3, [r3, #0]
 80115a0:	b2db      	uxtb	r3, r3
}
 80115a2:	4618      	mov	r0, r3
 80115a4:	3708      	adds	r7, #8
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}
 80115aa:	bf00      	nop
 80115ac:	20000009 	.word	0x20000009

080115b0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b082      	sub	sp, #8
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	4603      	mov	r3, r0
 80115b8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80115ba:	79fb      	ldrb	r3, [r7, #7]
 80115bc:	4618      	mov	r0, r3
 80115be:	f7ff ffbd 	bl	801153c <SD_CheckStatus>
 80115c2:	4603      	mov	r3, r0
}
 80115c4:	4618      	mov	r0, r3
 80115c6:	3708      	adds	r7, #8
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bd80      	pop	{r7, pc}

080115cc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b086      	sub	sp, #24
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	60b9      	str	r1, [r7, #8]
 80115d4:	607a      	str	r2, [r7, #4]
 80115d6:	603b      	str	r3, [r7, #0]
 80115d8:	4603      	mov	r3, r0
 80115da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80115dc:	2301      	movs	r3, #1
 80115de:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80115e0:	f247 5030 	movw	r0, #30000	; 0x7530
 80115e4:	f7ff ff8c 	bl	8011500 <SD_CheckStatusWithTimeout>
 80115e8:	4603      	mov	r3, r0
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	da01      	bge.n	80115f2 <SD_read+0x26>
  {
    return res;
 80115ee:	7dfb      	ldrb	r3, [r7, #23]
 80115f0:	e03b      	b.n	801166a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80115f2:	683a      	ldr	r2, [r7, #0]
 80115f4:	6879      	ldr	r1, [r7, #4]
 80115f6:	68b8      	ldr	r0, [r7, #8]
 80115f8:	f7ff fee2 	bl	80113c0 <BSP_SD_ReadBlocks_DMA>
 80115fc:	4603      	mov	r3, r0
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d132      	bne.n	8011668 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8011602:	4b1c      	ldr	r3, [pc, #112]	; (8011674 <SD_read+0xa8>)
 8011604:	2200      	movs	r2, #0
 8011606:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8011608:	f7f8 fd62 	bl	800a0d0 <HAL_GetTick>
 801160c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801160e:	bf00      	nop
 8011610:	4b18      	ldr	r3, [pc, #96]	; (8011674 <SD_read+0xa8>)
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d108      	bne.n	801162a <SD_read+0x5e>
 8011618:	f7f8 fd5a 	bl	800a0d0 <HAL_GetTick>
 801161c:	4602      	mov	r2, r0
 801161e:	693b      	ldr	r3, [r7, #16]
 8011620:	1ad3      	subs	r3, r2, r3
 8011622:	f247 522f 	movw	r2, #29999	; 0x752f
 8011626:	4293      	cmp	r3, r2
 8011628:	d9f2      	bls.n	8011610 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 801162a:	4b12      	ldr	r3, [pc, #72]	; (8011674 <SD_read+0xa8>)
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d102      	bne.n	8011638 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8011632:	2301      	movs	r3, #1
 8011634:	75fb      	strb	r3, [r7, #23]
 8011636:	e017      	b.n	8011668 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011638:	4b0e      	ldr	r3, [pc, #56]	; (8011674 <SD_read+0xa8>)
 801163a:	2200      	movs	r2, #0
 801163c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801163e:	f7f8 fd47 	bl	800a0d0 <HAL_GetTick>
 8011642:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011644:	e007      	b.n	8011656 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011646:	f7ff feef 	bl	8011428 <BSP_SD_GetCardState>
 801164a:	4603      	mov	r3, r0
 801164c:	2b00      	cmp	r3, #0
 801164e:	d102      	bne.n	8011656 <SD_read+0x8a>
          {
            res = RES_OK;
 8011650:	2300      	movs	r3, #0
 8011652:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8011654:	e008      	b.n	8011668 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011656:	f7f8 fd3b 	bl	800a0d0 <HAL_GetTick>
 801165a:	4602      	mov	r2, r0
 801165c:	693b      	ldr	r3, [r7, #16]
 801165e:	1ad3      	subs	r3, r2, r3
 8011660:	f247 522f 	movw	r2, #29999	; 0x752f
 8011664:	4293      	cmp	r3, r2
 8011666:	d9ee      	bls.n	8011646 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8011668:	7dfb      	ldrb	r3, [r7, #23]
}
 801166a:	4618      	mov	r0, r3
 801166c:	3718      	adds	r7, #24
 801166e:	46bd      	mov	sp, r7
 8011670:	bd80      	pop	{r7, pc}
 8011672:	bf00      	nop
 8011674:	20042460 	.word	0x20042460

08011678 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b086      	sub	sp, #24
 801167c:	af00      	add	r7, sp, #0
 801167e:	60b9      	str	r1, [r7, #8]
 8011680:	607a      	str	r2, [r7, #4]
 8011682:	603b      	str	r3, [r7, #0]
 8011684:	4603      	mov	r3, r0
 8011686:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011688:	2301      	movs	r3, #1
 801168a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801168c:	4b24      	ldr	r3, [pc, #144]	; (8011720 <SD_write+0xa8>)
 801168e:	2200      	movs	r2, #0
 8011690:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011692:	f247 5030 	movw	r0, #30000	; 0x7530
 8011696:	f7ff ff33 	bl	8011500 <SD_CheckStatusWithTimeout>
 801169a:	4603      	mov	r3, r0
 801169c:	2b00      	cmp	r3, #0
 801169e:	da01      	bge.n	80116a4 <SD_write+0x2c>
  {
    return res;
 80116a0:	7dfb      	ldrb	r3, [r7, #23]
 80116a2:	e038      	b.n	8011716 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80116a4:	683a      	ldr	r2, [r7, #0]
 80116a6:	6879      	ldr	r1, [r7, #4]
 80116a8:	68b8      	ldr	r0, [r7, #8]
 80116aa:	f7ff fea3 	bl	80113f4 <BSP_SD_WriteBlocks_DMA>
 80116ae:	4603      	mov	r3, r0
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d12f      	bne.n	8011714 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80116b4:	f7f8 fd0c 	bl	800a0d0 <HAL_GetTick>
 80116b8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80116ba:	bf00      	nop
 80116bc:	4b18      	ldr	r3, [pc, #96]	; (8011720 <SD_write+0xa8>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d108      	bne.n	80116d6 <SD_write+0x5e>
 80116c4:	f7f8 fd04 	bl	800a0d0 <HAL_GetTick>
 80116c8:	4602      	mov	r2, r0
 80116ca:	693b      	ldr	r3, [r7, #16]
 80116cc:	1ad3      	subs	r3, r2, r3
 80116ce:	f247 522f 	movw	r2, #29999	; 0x752f
 80116d2:	4293      	cmp	r3, r2
 80116d4:	d9f2      	bls.n	80116bc <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 80116d6:	4b12      	ldr	r3, [pc, #72]	; (8011720 <SD_write+0xa8>)
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d102      	bne.n	80116e4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80116de:	2301      	movs	r3, #1
 80116e0:	75fb      	strb	r3, [r7, #23]
 80116e2:	e017      	b.n	8011714 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80116e4:	4b0e      	ldr	r3, [pc, #56]	; (8011720 <SD_write+0xa8>)
 80116e6:	2200      	movs	r2, #0
 80116e8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80116ea:	f7f8 fcf1 	bl	800a0d0 <HAL_GetTick>
 80116ee:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80116f0:	e007      	b.n	8011702 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80116f2:	f7ff fe99 	bl	8011428 <BSP_SD_GetCardState>
 80116f6:	4603      	mov	r3, r0
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d102      	bne.n	8011702 <SD_write+0x8a>
          {
            res = RES_OK;
 80116fc:	2300      	movs	r3, #0
 80116fe:	75fb      	strb	r3, [r7, #23]
            break;
 8011700:	e008      	b.n	8011714 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011702:	f7f8 fce5 	bl	800a0d0 <HAL_GetTick>
 8011706:	4602      	mov	r2, r0
 8011708:	693b      	ldr	r3, [r7, #16]
 801170a:	1ad3      	subs	r3, r2, r3
 801170c:	f247 522f 	movw	r2, #29999	; 0x752f
 8011710:	4293      	cmp	r3, r2
 8011712:	d9ee      	bls.n	80116f2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8011714:	7dfb      	ldrb	r3, [r7, #23]
}
 8011716:	4618      	mov	r0, r3
 8011718:	3718      	adds	r7, #24
 801171a:	46bd      	mov	sp, r7
 801171c:	bd80      	pop	{r7, pc}
 801171e:	bf00      	nop
 8011720:	2004245c 	.word	0x2004245c

08011724 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b08c      	sub	sp, #48	; 0x30
 8011728:	af00      	add	r7, sp, #0
 801172a:	4603      	mov	r3, r0
 801172c:	603a      	str	r2, [r7, #0]
 801172e:	71fb      	strb	r3, [r7, #7]
 8011730:	460b      	mov	r3, r1
 8011732:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011734:	2301      	movs	r3, #1
 8011736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801173a:	4b25      	ldr	r3, [pc, #148]	; (80117d0 <SD_ioctl+0xac>)
 801173c:	781b      	ldrb	r3, [r3, #0]
 801173e:	b2db      	uxtb	r3, r3
 8011740:	f003 0301 	and.w	r3, r3, #1
 8011744:	2b00      	cmp	r3, #0
 8011746:	d001      	beq.n	801174c <SD_ioctl+0x28>
 8011748:	2303      	movs	r3, #3
 801174a:	e03c      	b.n	80117c6 <SD_ioctl+0xa2>

  switch (cmd)
 801174c:	79bb      	ldrb	r3, [r7, #6]
 801174e:	2b03      	cmp	r3, #3
 8011750:	d834      	bhi.n	80117bc <SD_ioctl+0x98>
 8011752:	a201      	add	r2, pc, #4	; (adr r2, 8011758 <SD_ioctl+0x34>)
 8011754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011758:	08011769 	.word	0x08011769
 801175c:	08011771 	.word	0x08011771
 8011760:	08011789 	.word	0x08011789
 8011764:	080117a3 	.word	0x080117a3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011768:	2300      	movs	r3, #0
 801176a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801176e:	e028      	b.n	80117c2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011770:	f107 030c 	add.w	r3, r7, #12
 8011774:	4618      	mov	r0, r3
 8011776:	f7ff fe67 	bl	8011448 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801177a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011780:	2300      	movs	r3, #0
 8011782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011786:	e01c      	b.n	80117c2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011788:	f107 030c 	add.w	r3, r7, #12
 801178c:	4618      	mov	r0, r3
 801178e:	f7ff fe5b 	bl	8011448 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011794:	b29a      	uxth	r2, r3
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801179a:	2300      	movs	r3, #0
 801179c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80117a0:	e00f      	b.n	80117c2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80117a2:	f107 030c 	add.w	r3, r7, #12
 80117a6:	4618      	mov	r0, r3
 80117a8:	f7ff fe4e 	bl	8011448 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80117ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ae:	0a5a      	lsrs	r2, r3, #9
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80117b4:	2300      	movs	r3, #0
 80117b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80117ba:	e002      	b.n	80117c2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80117bc:	2304      	movs	r3, #4
 80117be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80117c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80117c6:	4618      	mov	r0, r3
 80117c8:	3730      	adds	r7, #48	; 0x30
 80117ca:	46bd      	mov	sp, r7
 80117cc:	bd80      	pop	{r7, pc}
 80117ce:	bf00      	nop
 80117d0:	20000009 	.word	0x20000009

080117d4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80117d4:	b480      	push	{r7}
 80117d6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80117d8:	4b03      	ldr	r3, [pc, #12]	; (80117e8 <BSP_SD_WriteCpltCallback+0x14>)
 80117da:	2201      	movs	r2, #1
 80117dc:	601a      	str	r2, [r3, #0]
}
 80117de:	bf00      	nop
 80117e0:	46bd      	mov	sp, r7
 80117e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e6:	4770      	bx	lr
 80117e8:	2004245c 	.word	0x2004245c

080117ec <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80117ec:	b480      	push	{r7}
 80117ee:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80117f0:	4b03      	ldr	r3, [pc, #12]	; (8011800 <BSP_SD_ReadCpltCallback+0x14>)
 80117f2:	2201      	movs	r2, #1
 80117f4:	601a      	str	r2, [r3, #0]
}
 80117f6:	bf00      	nop
 80117f8:	46bd      	mov	sp, r7
 80117fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fe:	4770      	bx	lr
 8011800:	20042460 	.word	0x20042460

08011804 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011804:	b580      	push	{r7, lr}
 8011806:	b084      	sub	sp, #16
 8011808:	af00      	add	r7, sp, #0
 801180a:	4603      	mov	r3, r0
 801180c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801180e:	79fb      	ldrb	r3, [r7, #7]
 8011810:	4a08      	ldr	r2, [pc, #32]	; (8011834 <disk_status+0x30>)
 8011812:	009b      	lsls	r3, r3, #2
 8011814:	4413      	add	r3, r2
 8011816:	685b      	ldr	r3, [r3, #4]
 8011818:	685b      	ldr	r3, [r3, #4]
 801181a:	79fa      	ldrb	r2, [r7, #7]
 801181c:	4905      	ldr	r1, [pc, #20]	; (8011834 <disk_status+0x30>)
 801181e:	440a      	add	r2, r1
 8011820:	7a12      	ldrb	r2, [r2, #8]
 8011822:	4610      	mov	r0, r2
 8011824:	4798      	blx	r3
 8011826:	4603      	mov	r3, r0
 8011828:	73fb      	strb	r3, [r7, #15]
  return stat;
 801182a:	7bfb      	ldrb	r3, [r7, #15]
}
 801182c:	4618      	mov	r0, r3
 801182e:	3710      	adds	r7, #16
 8011830:	46bd      	mov	sp, r7
 8011832:	bd80      	pop	{r7, pc}
 8011834:	2004248c 	.word	0x2004248c

08011838 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b084      	sub	sp, #16
 801183c:	af00      	add	r7, sp, #0
 801183e:	4603      	mov	r3, r0
 8011840:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011842:	2300      	movs	r3, #0
 8011844:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011846:	79fb      	ldrb	r3, [r7, #7]
 8011848:	4a0d      	ldr	r2, [pc, #52]	; (8011880 <disk_initialize+0x48>)
 801184a:	5cd3      	ldrb	r3, [r2, r3]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d111      	bne.n	8011874 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011850:	79fb      	ldrb	r3, [r7, #7]
 8011852:	4a0b      	ldr	r2, [pc, #44]	; (8011880 <disk_initialize+0x48>)
 8011854:	2101      	movs	r1, #1
 8011856:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011858:	79fb      	ldrb	r3, [r7, #7]
 801185a:	4a09      	ldr	r2, [pc, #36]	; (8011880 <disk_initialize+0x48>)
 801185c:	009b      	lsls	r3, r3, #2
 801185e:	4413      	add	r3, r2
 8011860:	685b      	ldr	r3, [r3, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	79fa      	ldrb	r2, [r7, #7]
 8011866:	4906      	ldr	r1, [pc, #24]	; (8011880 <disk_initialize+0x48>)
 8011868:	440a      	add	r2, r1
 801186a:	7a12      	ldrb	r2, [r2, #8]
 801186c:	4610      	mov	r0, r2
 801186e:	4798      	blx	r3
 8011870:	4603      	mov	r3, r0
 8011872:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011874:	7bfb      	ldrb	r3, [r7, #15]
}
 8011876:	4618      	mov	r0, r3
 8011878:	3710      	adds	r7, #16
 801187a:	46bd      	mov	sp, r7
 801187c:	bd80      	pop	{r7, pc}
 801187e:	bf00      	nop
 8011880:	2004248c 	.word	0x2004248c

08011884 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011884:	b590      	push	{r4, r7, lr}
 8011886:	b087      	sub	sp, #28
 8011888:	af00      	add	r7, sp, #0
 801188a:	60b9      	str	r1, [r7, #8]
 801188c:	607a      	str	r2, [r7, #4]
 801188e:	603b      	str	r3, [r7, #0]
 8011890:	4603      	mov	r3, r0
 8011892:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011894:	7bfb      	ldrb	r3, [r7, #15]
 8011896:	4a0a      	ldr	r2, [pc, #40]	; (80118c0 <disk_read+0x3c>)
 8011898:	009b      	lsls	r3, r3, #2
 801189a:	4413      	add	r3, r2
 801189c:	685b      	ldr	r3, [r3, #4]
 801189e:	689c      	ldr	r4, [r3, #8]
 80118a0:	7bfb      	ldrb	r3, [r7, #15]
 80118a2:	4a07      	ldr	r2, [pc, #28]	; (80118c0 <disk_read+0x3c>)
 80118a4:	4413      	add	r3, r2
 80118a6:	7a18      	ldrb	r0, [r3, #8]
 80118a8:	683b      	ldr	r3, [r7, #0]
 80118aa:	687a      	ldr	r2, [r7, #4]
 80118ac:	68b9      	ldr	r1, [r7, #8]
 80118ae:	47a0      	blx	r4
 80118b0:	4603      	mov	r3, r0
 80118b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80118b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80118b6:	4618      	mov	r0, r3
 80118b8:	371c      	adds	r7, #28
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd90      	pop	{r4, r7, pc}
 80118be:	bf00      	nop
 80118c0:	2004248c 	.word	0x2004248c

080118c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80118c4:	b590      	push	{r4, r7, lr}
 80118c6:	b087      	sub	sp, #28
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	60b9      	str	r1, [r7, #8]
 80118cc:	607a      	str	r2, [r7, #4]
 80118ce:	603b      	str	r3, [r7, #0]
 80118d0:	4603      	mov	r3, r0
 80118d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80118d4:	7bfb      	ldrb	r3, [r7, #15]
 80118d6:	4a0a      	ldr	r2, [pc, #40]	; (8011900 <disk_write+0x3c>)
 80118d8:	009b      	lsls	r3, r3, #2
 80118da:	4413      	add	r3, r2
 80118dc:	685b      	ldr	r3, [r3, #4]
 80118de:	68dc      	ldr	r4, [r3, #12]
 80118e0:	7bfb      	ldrb	r3, [r7, #15]
 80118e2:	4a07      	ldr	r2, [pc, #28]	; (8011900 <disk_write+0x3c>)
 80118e4:	4413      	add	r3, r2
 80118e6:	7a18      	ldrb	r0, [r3, #8]
 80118e8:	683b      	ldr	r3, [r7, #0]
 80118ea:	687a      	ldr	r2, [r7, #4]
 80118ec:	68b9      	ldr	r1, [r7, #8]
 80118ee:	47a0      	blx	r4
 80118f0:	4603      	mov	r3, r0
 80118f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80118f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80118f6:	4618      	mov	r0, r3
 80118f8:	371c      	adds	r7, #28
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd90      	pop	{r4, r7, pc}
 80118fe:	bf00      	nop
 8011900:	2004248c 	.word	0x2004248c

08011904 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b084      	sub	sp, #16
 8011908:	af00      	add	r7, sp, #0
 801190a:	4603      	mov	r3, r0
 801190c:	603a      	str	r2, [r7, #0]
 801190e:	71fb      	strb	r3, [r7, #7]
 8011910:	460b      	mov	r3, r1
 8011912:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011914:	79fb      	ldrb	r3, [r7, #7]
 8011916:	4a09      	ldr	r2, [pc, #36]	; (801193c <disk_ioctl+0x38>)
 8011918:	009b      	lsls	r3, r3, #2
 801191a:	4413      	add	r3, r2
 801191c:	685b      	ldr	r3, [r3, #4]
 801191e:	691b      	ldr	r3, [r3, #16]
 8011920:	79fa      	ldrb	r2, [r7, #7]
 8011922:	4906      	ldr	r1, [pc, #24]	; (801193c <disk_ioctl+0x38>)
 8011924:	440a      	add	r2, r1
 8011926:	7a10      	ldrb	r0, [r2, #8]
 8011928:	79b9      	ldrb	r1, [r7, #6]
 801192a:	683a      	ldr	r2, [r7, #0]
 801192c:	4798      	blx	r3
 801192e:	4603      	mov	r3, r0
 8011930:	73fb      	strb	r3, [r7, #15]
  return res;
 8011932:	7bfb      	ldrb	r3, [r7, #15]
}
 8011934:	4618      	mov	r0, r3
 8011936:	3710      	adds	r7, #16
 8011938:	46bd      	mov	sp, r7
 801193a:	bd80      	pop	{r7, pc}
 801193c:	2004248c 	.word	0x2004248c

08011940 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011940:	b480      	push	{r7}
 8011942:	b085      	sub	sp, #20
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	3301      	adds	r3, #1
 801194c:	781b      	ldrb	r3, [r3, #0]
 801194e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011950:	89fb      	ldrh	r3, [r7, #14]
 8011952:	021b      	lsls	r3, r3, #8
 8011954:	b21a      	sxth	r2, r3
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	781b      	ldrb	r3, [r3, #0]
 801195a:	b21b      	sxth	r3, r3
 801195c:	4313      	orrs	r3, r2
 801195e:	b21b      	sxth	r3, r3
 8011960:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011962:	89fb      	ldrh	r3, [r7, #14]
}
 8011964:	4618      	mov	r0, r3
 8011966:	3714      	adds	r7, #20
 8011968:	46bd      	mov	sp, r7
 801196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196e:	4770      	bx	lr

08011970 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011970:	b480      	push	{r7}
 8011972:	b085      	sub	sp, #20
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	3303      	adds	r3, #3
 801197c:	781b      	ldrb	r3, [r3, #0]
 801197e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	021b      	lsls	r3, r3, #8
 8011984:	687a      	ldr	r2, [r7, #4]
 8011986:	3202      	adds	r2, #2
 8011988:	7812      	ldrb	r2, [r2, #0]
 801198a:	4313      	orrs	r3, r2
 801198c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	021b      	lsls	r3, r3, #8
 8011992:	687a      	ldr	r2, [r7, #4]
 8011994:	3201      	adds	r2, #1
 8011996:	7812      	ldrb	r2, [r2, #0]
 8011998:	4313      	orrs	r3, r2
 801199a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	021b      	lsls	r3, r3, #8
 80119a0:	687a      	ldr	r2, [r7, #4]
 80119a2:	7812      	ldrb	r2, [r2, #0]
 80119a4:	4313      	orrs	r3, r2
 80119a6:	60fb      	str	r3, [r7, #12]
	return rv;
 80119a8:	68fb      	ldr	r3, [r7, #12]
}
 80119aa:	4618      	mov	r0, r3
 80119ac:	3714      	adds	r7, #20
 80119ae:	46bd      	mov	sp, r7
 80119b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b4:	4770      	bx	lr

080119b6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80119b6:	b480      	push	{r7}
 80119b8:	b083      	sub	sp, #12
 80119ba:	af00      	add	r7, sp, #0
 80119bc:	6078      	str	r0, [r7, #4]
 80119be:	460b      	mov	r3, r1
 80119c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	1c5a      	adds	r2, r3, #1
 80119c6:	607a      	str	r2, [r7, #4]
 80119c8:	887a      	ldrh	r2, [r7, #2]
 80119ca:	b2d2      	uxtb	r2, r2
 80119cc:	701a      	strb	r2, [r3, #0]
 80119ce:	887b      	ldrh	r3, [r7, #2]
 80119d0:	0a1b      	lsrs	r3, r3, #8
 80119d2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	1c5a      	adds	r2, r3, #1
 80119d8:	607a      	str	r2, [r7, #4]
 80119da:	887a      	ldrh	r2, [r7, #2]
 80119dc:	b2d2      	uxtb	r2, r2
 80119de:	701a      	strb	r2, [r3, #0]
}
 80119e0:	bf00      	nop
 80119e2:	370c      	adds	r7, #12
 80119e4:	46bd      	mov	sp, r7
 80119e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ea:	4770      	bx	lr

080119ec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80119ec:	b480      	push	{r7}
 80119ee:	b083      	sub	sp, #12
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
 80119f4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	1c5a      	adds	r2, r3, #1
 80119fa:	607a      	str	r2, [r7, #4]
 80119fc:	683a      	ldr	r2, [r7, #0]
 80119fe:	b2d2      	uxtb	r2, r2
 8011a00:	701a      	strb	r2, [r3, #0]
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	0a1b      	lsrs	r3, r3, #8
 8011a06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	1c5a      	adds	r2, r3, #1
 8011a0c:	607a      	str	r2, [r7, #4]
 8011a0e:	683a      	ldr	r2, [r7, #0]
 8011a10:	b2d2      	uxtb	r2, r2
 8011a12:	701a      	strb	r2, [r3, #0]
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	0a1b      	lsrs	r3, r3, #8
 8011a18:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	1c5a      	adds	r2, r3, #1
 8011a1e:	607a      	str	r2, [r7, #4]
 8011a20:	683a      	ldr	r2, [r7, #0]
 8011a22:	b2d2      	uxtb	r2, r2
 8011a24:	701a      	strb	r2, [r3, #0]
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	0a1b      	lsrs	r3, r3, #8
 8011a2a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	1c5a      	adds	r2, r3, #1
 8011a30:	607a      	str	r2, [r7, #4]
 8011a32:	683a      	ldr	r2, [r7, #0]
 8011a34:	b2d2      	uxtb	r2, r2
 8011a36:	701a      	strb	r2, [r3, #0]
}
 8011a38:	bf00      	nop
 8011a3a:	370c      	adds	r7, #12
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a42:	4770      	bx	lr

08011a44 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011a44:	b480      	push	{r7}
 8011a46:	b087      	sub	sp, #28
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	60f8      	str	r0, [r7, #12]
 8011a4c:	60b9      	str	r1, [r7, #8]
 8011a4e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d00d      	beq.n	8011a7a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011a5e:	693a      	ldr	r2, [r7, #16]
 8011a60:	1c53      	adds	r3, r2, #1
 8011a62:	613b      	str	r3, [r7, #16]
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	1c59      	adds	r1, r3, #1
 8011a68:	6179      	str	r1, [r7, #20]
 8011a6a:	7812      	ldrb	r2, [r2, #0]
 8011a6c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	3b01      	subs	r3, #1
 8011a72:	607b      	str	r3, [r7, #4]
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d1f1      	bne.n	8011a5e <mem_cpy+0x1a>
	}
}
 8011a7a:	bf00      	nop
 8011a7c:	371c      	adds	r7, #28
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a84:	4770      	bx	lr

08011a86 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011a86:	b480      	push	{r7}
 8011a88:	b087      	sub	sp, #28
 8011a8a:	af00      	add	r7, sp, #0
 8011a8c:	60f8      	str	r0, [r7, #12]
 8011a8e:	60b9      	str	r1, [r7, #8]
 8011a90:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011a96:	697b      	ldr	r3, [r7, #20]
 8011a98:	1c5a      	adds	r2, r3, #1
 8011a9a:	617a      	str	r2, [r7, #20]
 8011a9c:	68ba      	ldr	r2, [r7, #8]
 8011a9e:	b2d2      	uxtb	r2, r2
 8011aa0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	3b01      	subs	r3, #1
 8011aa6:	607b      	str	r3, [r7, #4]
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d1f3      	bne.n	8011a96 <mem_set+0x10>
}
 8011aae:	bf00      	nop
 8011ab0:	371c      	adds	r7, #28
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab8:	4770      	bx	lr

08011aba <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011aba:	b480      	push	{r7}
 8011abc:	b089      	sub	sp, #36	; 0x24
 8011abe:	af00      	add	r7, sp, #0
 8011ac0:	60f8      	str	r0, [r7, #12]
 8011ac2:	60b9      	str	r1, [r7, #8]
 8011ac4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	61fb      	str	r3, [r7, #28]
 8011aca:	68bb      	ldr	r3, [r7, #8]
 8011acc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011ad2:	69fb      	ldr	r3, [r7, #28]
 8011ad4:	1c5a      	adds	r2, r3, #1
 8011ad6:	61fa      	str	r2, [r7, #28]
 8011ad8:	781b      	ldrb	r3, [r3, #0]
 8011ada:	4619      	mov	r1, r3
 8011adc:	69bb      	ldr	r3, [r7, #24]
 8011ade:	1c5a      	adds	r2, r3, #1
 8011ae0:	61ba      	str	r2, [r7, #24]
 8011ae2:	781b      	ldrb	r3, [r3, #0]
 8011ae4:	1acb      	subs	r3, r1, r3
 8011ae6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	3b01      	subs	r3, #1
 8011aec:	607b      	str	r3, [r7, #4]
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d002      	beq.n	8011afa <mem_cmp+0x40>
 8011af4:	697b      	ldr	r3, [r7, #20]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d0eb      	beq.n	8011ad2 <mem_cmp+0x18>

	return r;
 8011afa:	697b      	ldr	r3, [r7, #20]
}
 8011afc:	4618      	mov	r0, r3
 8011afe:	3724      	adds	r7, #36	; 0x24
 8011b00:	46bd      	mov	sp, r7
 8011b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b06:	4770      	bx	lr

08011b08 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011b08:	b480      	push	{r7}
 8011b0a:	b083      	sub	sp, #12
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
 8011b10:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011b12:	e002      	b.n	8011b1a <chk_chr+0x12>
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	3301      	adds	r3, #1
 8011b18:	607b      	str	r3, [r7, #4]
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	781b      	ldrb	r3, [r3, #0]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d005      	beq.n	8011b2e <chk_chr+0x26>
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	781b      	ldrb	r3, [r3, #0]
 8011b26:	461a      	mov	r2, r3
 8011b28:	683b      	ldr	r3, [r7, #0]
 8011b2a:	4293      	cmp	r3, r2
 8011b2c:	d1f2      	bne.n	8011b14 <chk_chr+0xc>
	return *str;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	781b      	ldrb	r3, [r3, #0]
}
 8011b32:	4618      	mov	r0, r3
 8011b34:	370c      	adds	r7, #12
 8011b36:	46bd      	mov	sp, r7
 8011b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3c:	4770      	bx	lr
	...

08011b40 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011b40:	b480      	push	{r7}
 8011b42:	b085      	sub	sp, #20
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
 8011b48:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	60bb      	str	r3, [r7, #8]
 8011b4e:	68bb      	ldr	r3, [r7, #8]
 8011b50:	60fb      	str	r3, [r7, #12]
 8011b52:	e029      	b.n	8011ba8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011b54:	4a27      	ldr	r2, [pc, #156]	; (8011bf4 <chk_lock+0xb4>)
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	011b      	lsls	r3, r3, #4
 8011b5a:	4413      	add	r3, r2
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d01d      	beq.n	8011b9e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011b62:	4a24      	ldr	r2, [pc, #144]	; (8011bf4 <chk_lock+0xb4>)
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	011b      	lsls	r3, r3, #4
 8011b68:	4413      	add	r3, r2
 8011b6a:	681a      	ldr	r2, [r3, #0]
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	429a      	cmp	r2, r3
 8011b72:	d116      	bne.n	8011ba2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011b74:	4a1f      	ldr	r2, [pc, #124]	; (8011bf4 <chk_lock+0xb4>)
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	011b      	lsls	r3, r3, #4
 8011b7a:	4413      	add	r3, r2
 8011b7c:	3304      	adds	r3, #4
 8011b7e:	681a      	ldr	r2, [r3, #0]
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011b84:	429a      	cmp	r2, r3
 8011b86:	d10c      	bne.n	8011ba2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011b88:	4a1a      	ldr	r2, [pc, #104]	; (8011bf4 <chk_lock+0xb4>)
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	011b      	lsls	r3, r3, #4
 8011b8e:	4413      	add	r3, r2
 8011b90:	3308      	adds	r3, #8
 8011b92:	681a      	ldr	r2, [r3, #0]
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011b98:	429a      	cmp	r2, r3
 8011b9a:	d102      	bne.n	8011ba2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011b9c:	e007      	b.n	8011bae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	3301      	adds	r3, #1
 8011ba6:	60fb      	str	r3, [r7, #12]
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	2b01      	cmp	r3, #1
 8011bac:	d9d2      	bls.n	8011b54 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	2b02      	cmp	r3, #2
 8011bb2:	d109      	bne.n	8011bc8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011bb4:	68bb      	ldr	r3, [r7, #8]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d102      	bne.n	8011bc0 <chk_lock+0x80>
 8011bba:	683b      	ldr	r3, [r7, #0]
 8011bbc:	2b02      	cmp	r3, #2
 8011bbe:	d101      	bne.n	8011bc4 <chk_lock+0x84>
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	e010      	b.n	8011be6 <chk_lock+0xa6>
 8011bc4:	2312      	movs	r3, #18
 8011bc6:	e00e      	b.n	8011be6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011bc8:	683b      	ldr	r3, [r7, #0]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d108      	bne.n	8011be0 <chk_lock+0xa0>
 8011bce:	4a09      	ldr	r2, [pc, #36]	; (8011bf4 <chk_lock+0xb4>)
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	011b      	lsls	r3, r3, #4
 8011bd4:	4413      	add	r3, r2
 8011bd6:	330c      	adds	r3, #12
 8011bd8:	881b      	ldrh	r3, [r3, #0]
 8011bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011bde:	d101      	bne.n	8011be4 <chk_lock+0xa4>
 8011be0:	2310      	movs	r3, #16
 8011be2:	e000      	b.n	8011be6 <chk_lock+0xa6>
 8011be4:	2300      	movs	r3, #0
}
 8011be6:	4618      	mov	r0, r3
 8011be8:	3714      	adds	r7, #20
 8011bea:	46bd      	mov	sp, r7
 8011bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf0:	4770      	bx	lr
 8011bf2:	bf00      	nop
 8011bf4:	2004246c 	.word	0x2004246c

08011bf8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011bf8:	b480      	push	{r7}
 8011bfa:	b083      	sub	sp, #12
 8011bfc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011bfe:	2300      	movs	r3, #0
 8011c00:	607b      	str	r3, [r7, #4]
 8011c02:	e002      	b.n	8011c0a <enq_lock+0x12>
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	3301      	adds	r3, #1
 8011c08:	607b      	str	r3, [r7, #4]
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2b01      	cmp	r3, #1
 8011c0e:	d806      	bhi.n	8011c1e <enq_lock+0x26>
 8011c10:	4a09      	ldr	r2, [pc, #36]	; (8011c38 <enq_lock+0x40>)
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	011b      	lsls	r3, r3, #4
 8011c16:	4413      	add	r3, r2
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d1f2      	bne.n	8011c04 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	2b02      	cmp	r3, #2
 8011c22:	bf14      	ite	ne
 8011c24:	2301      	movne	r3, #1
 8011c26:	2300      	moveq	r3, #0
 8011c28:	b2db      	uxtb	r3, r3
}
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	370c      	adds	r7, #12
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c34:	4770      	bx	lr
 8011c36:	bf00      	nop
 8011c38:	2004246c 	.word	0x2004246c

08011c3c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011c3c:	b480      	push	{r7}
 8011c3e:	b085      	sub	sp, #20
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
 8011c44:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011c46:	2300      	movs	r3, #0
 8011c48:	60fb      	str	r3, [r7, #12]
 8011c4a:	e01f      	b.n	8011c8c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011c4c:	4a41      	ldr	r2, [pc, #260]	; (8011d54 <inc_lock+0x118>)
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	011b      	lsls	r3, r3, #4
 8011c52:	4413      	add	r3, r2
 8011c54:	681a      	ldr	r2, [r3, #0]
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d113      	bne.n	8011c86 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011c5e:	4a3d      	ldr	r2, [pc, #244]	; (8011d54 <inc_lock+0x118>)
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	011b      	lsls	r3, r3, #4
 8011c64:	4413      	add	r3, r2
 8011c66:	3304      	adds	r3, #4
 8011c68:	681a      	ldr	r2, [r3, #0]
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011c6e:	429a      	cmp	r2, r3
 8011c70:	d109      	bne.n	8011c86 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011c72:	4a38      	ldr	r2, [pc, #224]	; (8011d54 <inc_lock+0x118>)
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	011b      	lsls	r3, r3, #4
 8011c78:	4413      	add	r3, r2
 8011c7a:	3308      	adds	r3, #8
 8011c7c:	681a      	ldr	r2, [r3, #0]
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d006      	beq.n	8011c94 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	3301      	adds	r3, #1
 8011c8a:	60fb      	str	r3, [r7, #12]
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	2b01      	cmp	r3, #1
 8011c90:	d9dc      	bls.n	8011c4c <inc_lock+0x10>
 8011c92:	e000      	b.n	8011c96 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011c94:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	2b02      	cmp	r3, #2
 8011c9a:	d132      	bne.n	8011d02 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	60fb      	str	r3, [r7, #12]
 8011ca0:	e002      	b.n	8011ca8 <inc_lock+0x6c>
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	3301      	adds	r3, #1
 8011ca6:	60fb      	str	r3, [r7, #12]
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	2b01      	cmp	r3, #1
 8011cac:	d806      	bhi.n	8011cbc <inc_lock+0x80>
 8011cae:	4a29      	ldr	r2, [pc, #164]	; (8011d54 <inc_lock+0x118>)
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	011b      	lsls	r3, r3, #4
 8011cb4:	4413      	add	r3, r2
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d1f2      	bne.n	8011ca2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	2b02      	cmp	r3, #2
 8011cc0:	d101      	bne.n	8011cc6 <inc_lock+0x8a>
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	e040      	b.n	8011d48 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	681a      	ldr	r2, [r3, #0]
 8011cca:	4922      	ldr	r1, [pc, #136]	; (8011d54 <inc_lock+0x118>)
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	011b      	lsls	r3, r3, #4
 8011cd0:	440b      	add	r3, r1
 8011cd2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	689a      	ldr	r2, [r3, #8]
 8011cd8:	491e      	ldr	r1, [pc, #120]	; (8011d54 <inc_lock+0x118>)
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	011b      	lsls	r3, r3, #4
 8011cde:	440b      	add	r3, r1
 8011ce0:	3304      	adds	r3, #4
 8011ce2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	695a      	ldr	r2, [r3, #20]
 8011ce8:	491a      	ldr	r1, [pc, #104]	; (8011d54 <inc_lock+0x118>)
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	011b      	lsls	r3, r3, #4
 8011cee:	440b      	add	r3, r1
 8011cf0:	3308      	adds	r3, #8
 8011cf2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011cf4:	4a17      	ldr	r2, [pc, #92]	; (8011d54 <inc_lock+0x118>)
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	011b      	lsls	r3, r3, #4
 8011cfa:	4413      	add	r3, r2
 8011cfc:	330c      	adds	r3, #12
 8011cfe:	2200      	movs	r2, #0
 8011d00:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011d02:	683b      	ldr	r3, [r7, #0]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d009      	beq.n	8011d1c <inc_lock+0xe0>
 8011d08:	4a12      	ldr	r2, [pc, #72]	; (8011d54 <inc_lock+0x118>)
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	011b      	lsls	r3, r3, #4
 8011d0e:	4413      	add	r3, r2
 8011d10:	330c      	adds	r3, #12
 8011d12:	881b      	ldrh	r3, [r3, #0]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d001      	beq.n	8011d1c <inc_lock+0xe0>
 8011d18:	2300      	movs	r3, #0
 8011d1a:	e015      	b.n	8011d48 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d108      	bne.n	8011d34 <inc_lock+0xf8>
 8011d22:	4a0c      	ldr	r2, [pc, #48]	; (8011d54 <inc_lock+0x118>)
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	011b      	lsls	r3, r3, #4
 8011d28:	4413      	add	r3, r2
 8011d2a:	330c      	adds	r3, #12
 8011d2c:	881b      	ldrh	r3, [r3, #0]
 8011d2e:	3301      	adds	r3, #1
 8011d30:	b29a      	uxth	r2, r3
 8011d32:	e001      	b.n	8011d38 <inc_lock+0xfc>
 8011d34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011d38:	4906      	ldr	r1, [pc, #24]	; (8011d54 <inc_lock+0x118>)
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	011b      	lsls	r3, r3, #4
 8011d3e:	440b      	add	r3, r1
 8011d40:	330c      	adds	r3, #12
 8011d42:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	3301      	adds	r3, #1
}
 8011d48:	4618      	mov	r0, r3
 8011d4a:	3714      	adds	r7, #20
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d52:	4770      	bx	lr
 8011d54:	2004246c 	.word	0x2004246c

08011d58 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011d58:	b480      	push	{r7}
 8011d5a:	b085      	sub	sp, #20
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	3b01      	subs	r3, #1
 8011d64:	607b      	str	r3, [r7, #4]
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	2b01      	cmp	r3, #1
 8011d6a:	d825      	bhi.n	8011db8 <dec_lock+0x60>
		n = Files[i].ctr;
 8011d6c:	4a17      	ldr	r2, [pc, #92]	; (8011dcc <dec_lock+0x74>)
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	011b      	lsls	r3, r3, #4
 8011d72:	4413      	add	r3, r2
 8011d74:	330c      	adds	r3, #12
 8011d76:	881b      	ldrh	r3, [r3, #0]
 8011d78:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011d7a:	89fb      	ldrh	r3, [r7, #14]
 8011d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011d80:	d101      	bne.n	8011d86 <dec_lock+0x2e>
 8011d82:	2300      	movs	r3, #0
 8011d84:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011d86:	89fb      	ldrh	r3, [r7, #14]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d002      	beq.n	8011d92 <dec_lock+0x3a>
 8011d8c:	89fb      	ldrh	r3, [r7, #14]
 8011d8e:	3b01      	subs	r3, #1
 8011d90:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011d92:	4a0e      	ldr	r2, [pc, #56]	; (8011dcc <dec_lock+0x74>)
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	011b      	lsls	r3, r3, #4
 8011d98:	4413      	add	r3, r2
 8011d9a:	330c      	adds	r3, #12
 8011d9c:	89fa      	ldrh	r2, [r7, #14]
 8011d9e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011da0:	89fb      	ldrh	r3, [r7, #14]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d105      	bne.n	8011db2 <dec_lock+0x5a>
 8011da6:	4a09      	ldr	r2, [pc, #36]	; (8011dcc <dec_lock+0x74>)
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	011b      	lsls	r3, r3, #4
 8011dac:	4413      	add	r3, r2
 8011dae:	2200      	movs	r2, #0
 8011db0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011db2:	2300      	movs	r3, #0
 8011db4:	737b      	strb	r3, [r7, #13]
 8011db6:	e001      	b.n	8011dbc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011db8:	2302      	movs	r3, #2
 8011dba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011dbc:	7b7b      	ldrb	r3, [r7, #13]
}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	3714      	adds	r7, #20
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc8:	4770      	bx	lr
 8011dca:	bf00      	nop
 8011dcc:	2004246c 	.word	0x2004246c

08011dd0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011dd0:	b480      	push	{r7}
 8011dd2:	b085      	sub	sp, #20
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011dd8:	2300      	movs	r3, #0
 8011dda:	60fb      	str	r3, [r7, #12]
 8011ddc:	e010      	b.n	8011e00 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011dde:	4a0d      	ldr	r2, [pc, #52]	; (8011e14 <clear_lock+0x44>)
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	011b      	lsls	r3, r3, #4
 8011de4:	4413      	add	r3, r2
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	687a      	ldr	r2, [r7, #4]
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d105      	bne.n	8011dfa <clear_lock+0x2a>
 8011dee:	4a09      	ldr	r2, [pc, #36]	; (8011e14 <clear_lock+0x44>)
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	011b      	lsls	r3, r3, #4
 8011df4:	4413      	add	r3, r2
 8011df6:	2200      	movs	r2, #0
 8011df8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	3301      	adds	r3, #1
 8011dfe:	60fb      	str	r3, [r7, #12]
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	2b01      	cmp	r3, #1
 8011e04:	d9eb      	bls.n	8011dde <clear_lock+0xe>
	}
}
 8011e06:	bf00      	nop
 8011e08:	3714      	adds	r7, #20
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e10:	4770      	bx	lr
 8011e12:	bf00      	nop
 8011e14:	2004246c 	.word	0x2004246c

08011e18 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b086      	sub	sp, #24
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011e20:	2300      	movs	r3, #0
 8011e22:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	78db      	ldrb	r3, [r3, #3]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d034      	beq.n	8011e96 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e30:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	7858      	ldrb	r0, [r3, #1]
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	697a      	ldr	r2, [r7, #20]
 8011e40:	f7ff fd40 	bl	80118c4 <disk_write>
 8011e44:	4603      	mov	r3, r0
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d002      	beq.n	8011e50 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011e4a:	2301      	movs	r3, #1
 8011e4c:	73fb      	strb	r3, [r7, #15]
 8011e4e:	e022      	b.n	8011e96 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2200      	movs	r2, #0
 8011e54:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e5a:	697a      	ldr	r2, [r7, #20]
 8011e5c:	1ad2      	subs	r2, r2, r3
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	6a1b      	ldr	r3, [r3, #32]
 8011e62:	429a      	cmp	r2, r3
 8011e64:	d217      	bcs.n	8011e96 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	789b      	ldrb	r3, [r3, #2]
 8011e6a:	613b      	str	r3, [r7, #16]
 8011e6c:	e010      	b.n	8011e90 <sync_window+0x78>
					wsect += fs->fsize;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	6a1b      	ldr	r3, [r3, #32]
 8011e72:	697a      	ldr	r2, [r7, #20]
 8011e74:	4413      	add	r3, r2
 8011e76:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	7858      	ldrb	r0, [r3, #1]
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011e82:	2301      	movs	r3, #1
 8011e84:	697a      	ldr	r2, [r7, #20]
 8011e86:	f7ff fd1d 	bl	80118c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011e8a:	693b      	ldr	r3, [r7, #16]
 8011e8c:	3b01      	subs	r3, #1
 8011e8e:	613b      	str	r3, [r7, #16]
 8011e90:	693b      	ldr	r3, [r7, #16]
 8011e92:	2b01      	cmp	r3, #1
 8011e94:	d8eb      	bhi.n	8011e6e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e98:	4618      	mov	r0, r3
 8011e9a:	3718      	adds	r7, #24
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	bd80      	pop	{r7, pc}

08011ea0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b084      	sub	sp, #16
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
 8011ea8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011eaa:	2300      	movs	r3, #0
 8011eac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011eb2:	683a      	ldr	r2, [r7, #0]
 8011eb4:	429a      	cmp	r2, r3
 8011eb6:	d01b      	beq.n	8011ef0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011eb8:	6878      	ldr	r0, [r7, #4]
 8011eba:	f7ff ffad 	bl	8011e18 <sync_window>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011ec2:	7bfb      	ldrb	r3, [r7, #15]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d113      	bne.n	8011ef0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	7858      	ldrb	r0, [r3, #1]
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011ed2:	2301      	movs	r3, #1
 8011ed4:	683a      	ldr	r2, [r7, #0]
 8011ed6:	f7ff fcd5 	bl	8011884 <disk_read>
 8011eda:	4603      	mov	r3, r0
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d004      	beq.n	8011eea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ee4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	683a      	ldr	r2, [r7, #0]
 8011eee:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	3710      	adds	r7, #16
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	bd80      	pop	{r7, pc}
	...

08011efc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b084      	sub	sp, #16
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011f04:	6878      	ldr	r0, [r7, #4]
 8011f06:	f7ff ff87 	bl	8011e18 <sync_window>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011f0e:	7bfb      	ldrb	r3, [r7, #15]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d159      	bne.n	8011fc8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	781b      	ldrb	r3, [r3, #0]
 8011f18:	2b03      	cmp	r3, #3
 8011f1a:	d149      	bne.n	8011fb0 <sync_fs+0xb4>
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	791b      	ldrb	r3, [r3, #4]
 8011f20:	2b01      	cmp	r3, #1
 8011f22:	d145      	bne.n	8011fb0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	899b      	ldrh	r3, [r3, #12]
 8011f2e:	461a      	mov	r2, r3
 8011f30:	2100      	movs	r1, #0
 8011f32:	f7ff fda8 	bl	8011a86 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	3338      	adds	r3, #56	; 0x38
 8011f3a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011f3e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011f42:	4618      	mov	r0, r3
 8011f44:	f7ff fd37 	bl	80119b6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	3338      	adds	r3, #56	; 0x38
 8011f4c:	4921      	ldr	r1, [pc, #132]	; (8011fd4 <sync_fs+0xd8>)
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f7ff fd4c 	bl	80119ec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	3338      	adds	r3, #56	; 0x38
 8011f58:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011f5c:	491e      	ldr	r1, [pc, #120]	; (8011fd8 <sync_fs+0xdc>)
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f7ff fd44 	bl	80119ec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	3338      	adds	r3, #56	; 0x38
 8011f68:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	695b      	ldr	r3, [r3, #20]
 8011f70:	4619      	mov	r1, r3
 8011f72:	4610      	mov	r0, r2
 8011f74:	f7ff fd3a 	bl	80119ec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	3338      	adds	r3, #56	; 0x38
 8011f7c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	691b      	ldr	r3, [r3, #16]
 8011f84:	4619      	mov	r1, r3
 8011f86:	4610      	mov	r0, r2
 8011f88:	f7ff fd30 	bl	80119ec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f90:	1c5a      	adds	r2, r3, #1
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	7858      	ldrb	r0, [r3, #1]
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	f7ff fc8d 	bl	80118c4 <disk_write>
			fs->fsi_flag = 0;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	2200      	movs	r2, #0
 8011fae:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	785b      	ldrb	r3, [r3, #1]
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	2100      	movs	r1, #0
 8011fb8:	4618      	mov	r0, r3
 8011fba:	f7ff fca3 	bl	8011904 <disk_ioctl>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d001      	beq.n	8011fc8 <sync_fs+0xcc>
 8011fc4:	2301      	movs	r3, #1
 8011fc6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fca:	4618      	mov	r0, r3
 8011fcc:	3710      	adds	r7, #16
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	bd80      	pop	{r7, pc}
 8011fd2:	bf00      	nop
 8011fd4:	41615252 	.word	0x41615252
 8011fd8:	61417272 	.word	0x61417272

08011fdc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011fdc:	b480      	push	{r7}
 8011fde:	b083      	sub	sp, #12
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
 8011fe4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	3b02      	subs	r3, #2
 8011fea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	69db      	ldr	r3, [r3, #28]
 8011ff0:	3b02      	subs	r3, #2
 8011ff2:	683a      	ldr	r2, [r7, #0]
 8011ff4:	429a      	cmp	r2, r3
 8011ff6:	d301      	bcc.n	8011ffc <clust2sect+0x20>
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	e008      	b.n	801200e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	895b      	ldrh	r3, [r3, #10]
 8012000:	461a      	mov	r2, r3
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	fb03 f202 	mul.w	r2, r3, r2
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801200c:	4413      	add	r3, r2
}
 801200e:	4618      	mov	r0, r3
 8012010:	370c      	adds	r7, #12
 8012012:	46bd      	mov	sp, r7
 8012014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012018:	4770      	bx	lr

0801201a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801201a:	b580      	push	{r7, lr}
 801201c:	b086      	sub	sp, #24
 801201e:	af00      	add	r7, sp, #0
 8012020:	6078      	str	r0, [r7, #4]
 8012022:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801202a:	683b      	ldr	r3, [r7, #0]
 801202c:	2b01      	cmp	r3, #1
 801202e:	d904      	bls.n	801203a <get_fat+0x20>
 8012030:	693b      	ldr	r3, [r7, #16]
 8012032:	69db      	ldr	r3, [r3, #28]
 8012034:	683a      	ldr	r2, [r7, #0]
 8012036:	429a      	cmp	r2, r3
 8012038:	d302      	bcc.n	8012040 <get_fat+0x26>
		val = 1;	/* Internal error */
 801203a:	2301      	movs	r3, #1
 801203c:	617b      	str	r3, [r7, #20]
 801203e:	e0b7      	b.n	80121b0 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012040:	f04f 33ff 	mov.w	r3, #4294967295
 8012044:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012046:	693b      	ldr	r3, [r7, #16]
 8012048:	781b      	ldrb	r3, [r3, #0]
 801204a:	2b02      	cmp	r3, #2
 801204c:	d05a      	beq.n	8012104 <get_fat+0xea>
 801204e:	2b03      	cmp	r3, #3
 8012050:	d07d      	beq.n	801214e <get_fat+0x134>
 8012052:	2b01      	cmp	r3, #1
 8012054:	f040 80a2 	bne.w	801219c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	60fb      	str	r3, [r7, #12]
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	085b      	lsrs	r3, r3, #1
 8012060:	68fa      	ldr	r2, [r7, #12]
 8012062:	4413      	add	r3, r2
 8012064:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012066:	693b      	ldr	r3, [r7, #16]
 8012068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801206a:	693b      	ldr	r3, [r7, #16]
 801206c:	899b      	ldrh	r3, [r3, #12]
 801206e:	4619      	mov	r1, r3
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	fbb3 f3f1 	udiv	r3, r3, r1
 8012076:	4413      	add	r3, r2
 8012078:	4619      	mov	r1, r3
 801207a:	6938      	ldr	r0, [r7, #16]
 801207c:	f7ff ff10 	bl	8011ea0 <move_window>
 8012080:	4603      	mov	r3, r0
 8012082:	2b00      	cmp	r3, #0
 8012084:	f040 808d 	bne.w	80121a2 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	1c5a      	adds	r2, r3, #1
 801208c:	60fa      	str	r2, [r7, #12]
 801208e:	693a      	ldr	r2, [r7, #16]
 8012090:	8992      	ldrh	r2, [r2, #12]
 8012092:	fbb3 f1f2 	udiv	r1, r3, r2
 8012096:	fb02 f201 	mul.w	r2, r2, r1
 801209a:	1a9b      	subs	r3, r3, r2
 801209c:	693a      	ldr	r2, [r7, #16]
 801209e:	4413      	add	r3, r2
 80120a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80120a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80120a6:	693b      	ldr	r3, [r7, #16]
 80120a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80120aa:	693b      	ldr	r3, [r7, #16]
 80120ac:	899b      	ldrh	r3, [r3, #12]
 80120ae:	4619      	mov	r1, r3
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80120b6:	4413      	add	r3, r2
 80120b8:	4619      	mov	r1, r3
 80120ba:	6938      	ldr	r0, [r7, #16]
 80120bc:	f7ff fef0 	bl	8011ea0 <move_window>
 80120c0:	4603      	mov	r3, r0
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d16f      	bne.n	80121a6 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80120c6:	693b      	ldr	r3, [r7, #16]
 80120c8:	899b      	ldrh	r3, [r3, #12]
 80120ca:	461a      	mov	r2, r3
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80120d2:	fb02 f201 	mul.w	r2, r2, r1
 80120d6:	1a9b      	subs	r3, r3, r2
 80120d8:	693a      	ldr	r2, [r7, #16]
 80120da:	4413      	add	r3, r2
 80120dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80120e0:	021b      	lsls	r3, r3, #8
 80120e2:	461a      	mov	r2, r3
 80120e4:	68bb      	ldr	r3, [r7, #8]
 80120e6:	4313      	orrs	r3, r2
 80120e8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80120ea:	683b      	ldr	r3, [r7, #0]
 80120ec:	f003 0301 	and.w	r3, r3, #1
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d002      	beq.n	80120fa <get_fat+0xe0>
 80120f4:	68bb      	ldr	r3, [r7, #8]
 80120f6:	091b      	lsrs	r3, r3, #4
 80120f8:	e002      	b.n	8012100 <get_fat+0xe6>
 80120fa:	68bb      	ldr	r3, [r7, #8]
 80120fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012100:	617b      	str	r3, [r7, #20]
			break;
 8012102:	e055      	b.n	80121b0 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012104:	693b      	ldr	r3, [r7, #16]
 8012106:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012108:	693b      	ldr	r3, [r7, #16]
 801210a:	899b      	ldrh	r3, [r3, #12]
 801210c:	085b      	lsrs	r3, r3, #1
 801210e:	b29b      	uxth	r3, r3
 8012110:	4619      	mov	r1, r3
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	fbb3 f3f1 	udiv	r3, r3, r1
 8012118:	4413      	add	r3, r2
 801211a:	4619      	mov	r1, r3
 801211c:	6938      	ldr	r0, [r7, #16]
 801211e:	f7ff febf 	bl	8011ea0 <move_window>
 8012122:	4603      	mov	r3, r0
 8012124:	2b00      	cmp	r3, #0
 8012126:	d140      	bne.n	80121aa <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012128:	693b      	ldr	r3, [r7, #16]
 801212a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801212e:	683b      	ldr	r3, [r7, #0]
 8012130:	005b      	lsls	r3, r3, #1
 8012132:	693a      	ldr	r2, [r7, #16]
 8012134:	8992      	ldrh	r2, [r2, #12]
 8012136:	fbb3 f0f2 	udiv	r0, r3, r2
 801213a:	fb02 f200 	mul.w	r2, r2, r0
 801213e:	1a9b      	subs	r3, r3, r2
 8012140:	440b      	add	r3, r1
 8012142:	4618      	mov	r0, r3
 8012144:	f7ff fbfc 	bl	8011940 <ld_word>
 8012148:	4603      	mov	r3, r0
 801214a:	617b      	str	r3, [r7, #20]
			break;
 801214c:	e030      	b.n	80121b0 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801214e:	693b      	ldr	r3, [r7, #16]
 8012150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012152:	693b      	ldr	r3, [r7, #16]
 8012154:	899b      	ldrh	r3, [r3, #12]
 8012156:	089b      	lsrs	r3, r3, #2
 8012158:	b29b      	uxth	r3, r3
 801215a:	4619      	mov	r1, r3
 801215c:	683b      	ldr	r3, [r7, #0]
 801215e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012162:	4413      	add	r3, r2
 8012164:	4619      	mov	r1, r3
 8012166:	6938      	ldr	r0, [r7, #16]
 8012168:	f7ff fe9a 	bl	8011ea0 <move_window>
 801216c:	4603      	mov	r3, r0
 801216e:	2b00      	cmp	r3, #0
 8012170:	d11d      	bne.n	80121ae <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012172:	693b      	ldr	r3, [r7, #16]
 8012174:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012178:	683b      	ldr	r3, [r7, #0]
 801217a:	009b      	lsls	r3, r3, #2
 801217c:	693a      	ldr	r2, [r7, #16]
 801217e:	8992      	ldrh	r2, [r2, #12]
 8012180:	fbb3 f0f2 	udiv	r0, r3, r2
 8012184:	fb02 f200 	mul.w	r2, r2, r0
 8012188:	1a9b      	subs	r3, r3, r2
 801218a:	440b      	add	r3, r1
 801218c:	4618      	mov	r0, r3
 801218e:	f7ff fbef 	bl	8011970 <ld_dword>
 8012192:	4603      	mov	r3, r0
 8012194:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012198:	617b      	str	r3, [r7, #20]
			break;
 801219a:	e009      	b.n	80121b0 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801219c:	2301      	movs	r3, #1
 801219e:	617b      	str	r3, [r7, #20]
 80121a0:	e006      	b.n	80121b0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80121a2:	bf00      	nop
 80121a4:	e004      	b.n	80121b0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80121a6:	bf00      	nop
 80121a8:	e002      	b.n	80121b0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80121aa:	bf00      	nop
 80121ac:	e000      	b.n	80121b0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80121ae:	bf00      	nop
		}
	}

	return val;
 80121b0:	697b      	ldr	r3, [r7, #20]
}
 80121b2:	4618      	mov	r0, r3
 80121b4:	3718      	adds	r7, #24
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}

080121ba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80121ba:	b590      	push	{r4, r7, lr}
 80121bc:	b089      	sub	sp, #36	; 0x24
 80121be:	af00      	add	r7, sp, #0
 80121c0:	60f8      	str	r0, [r7, #12]
 80121c2:	60b9      	str	r1, [r7, #8]
 80121c4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80121c6:	2302      	movs	r3, #2
 80121c8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80121ca:	68bb      	ldr	r3, [r7, #8]
 80121cc:	2b01      	cmp	r3, #1
 80121ce:	f240 8106 	bls.w	80123de <put_fat+0x224>
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	69db      	ldr	r3, [r3, #28]
 80121d6:	68ba      	ldr	r2, [r7, #8]
 80121d8:	429a      	cmp	r2, r3
 80121da:	f080 8100 	bcs.w	80123de <put_fat+0x224>
		switch (fs->fs_type) {
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	781b      	ldrb	r3, [r3, #0]
 80121e2:	2b02      	cmp	r3, #2
 80121e4:	f000 8088 	beq.w	80122f8 <put_fat+0x13e>
 80121e8:	2b03      	cmp	r3, #3
 80121ea:	f000 80b0 	beq.w	801234e <put_fat+0x194>
 80121ee:	2b01      	cmp	r3, #1
 80121f0:	f040 80f5 	bne.w	80123de <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80121f4:	68bb      	ldr	r3, [r7, #8]
 80121f6:	61bb      	str	r3, [r7, #24]
 80121f8:	69bb      	ldr	r3, [r7, #24]
 80121fa:	085b      	lsrs	r3, r3, #1
 80121fc:	69ba      	ldr	r2, [r7, #24]
 80121fe:	4413      	add	r3, r2
 8012200:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	899b      	ldrh	r3, [r3, #12]
 801220a:	4619      	mov	r1, r3
 801220c:	69bb      	ldr	r3, [r7, #24]
 801220e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012212:	4413      	add	r3, r2
 8012214:	4619      	mov	r1, r3
 8012216:	68f8      	ldr	r0, [r7, #12]
 8012218:	f7ff fe42 	bl	8011ea0 <move_window>
 801221c:	4603      	mov	r3, r0
 801221e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012220:	7ffb      	ldrb	r3, [r7, #31]
 8012222:	2b00      	cmp	r3, #0
 8012224:	f040 80d4 	bne.w	80123d0 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801222e:	69bb      	ldr	r3, [r7, #24]
 8012230:	1c5a      	adds	r2, r3, #1
 8012232:	61ba      	str	r2, [r7, #24]
 8012234:	68fa      	ldr	r2, [r7, #12]
 8012236:	8992      	ldrh	r2, [r2, #12]
 8012238:	fbb3 f0f2 	udiv	r0, r3, r2
 801223c:	fb02 f200 	mul.w	r2, r2, r0
 8012240:	1a9b      	subs	r3, r3, r2
 8012242:	440b      	add	r3, r1
 8012244:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012246:	68bb      	ldr	r3, [r7, #8]
 8012248:	f003 0301 	and.w	r3, r3, #1
 801224c:	2b00      	cmp	r3, #0
 801224e:	d00d      	beq.n	801226c <put_fat+0xb2>
 8012250:	697b      	ldr	r3, [r7, #20]
 8012252:	781b      	ldrb	r3, [r3, #0]
 8012254:	b25b      	sxtb	r3, r3
 8012256:	f003 030f 	and.w	r3, r3, #15
 801225a:	b25a      	sxtb	r2, r3
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	b2db      	uxtb	r3, r3
 8012260:	011b      	lsls	r3, r3, #4
 8012262:	b25b      	sxtb	r3, r3
 8012264:	4313      	orrs	r3, r2
 8012266:	b25b      	sxtb	r3, r3
 8012268:	b2db      	uxtb	r3, r3
 801226a:	e001      	b.n	8012270 <put_fat+0xb6>
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	b2db      	uxtb	r3, r3
 8012270:	697a      	ldr	r2, [r7, #20]
 8012272:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	2201      	movs	r2, #1
 8012278:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	899b      	ldrh	r3, [r3, #12]
 8012282:	4619      	mov	r1, r3
 8012284:	69bb      	ldr	r3, [r7, #24]
 8012286:	fbb3 f3f1 	udiv	r3, r3, r1
 801228a:	4413      	add	r3, r2
 801228c:	4619      	mov	r1, r3
 801228e:	68f8      	ldr	r0, [r7, #12]
 8012290:	f7ff fe06 	bl	8011ea0 <move_window>
 8012294:	4603      	mov	r3, r0
 8012296:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012298:	7ffb      	ldrb	r3, [r7, #31]
 801229a:	2b00      	cmp	r3, #0
 801229c:	f040 809a 	bne.w	80123d4 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	899b      	ldrh	r3, [r3, #12]
 80122aa:	461a      	mov	r2, r3
 80122ac:	69bb      	ldr	r3, [r7, #24]
 80122ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80122b2:	fb02 f200 	mul.w	r2, r2, r0
 80122b6:	1a9b      	subs	r3, r3, r2
 80122b8:	440b      	add	r3, r1
 80122ba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80122bc:	68bb      	ldr	r3, [r7, #8]
 80122be:	f003 0301 	and.w	r3, r3, #1
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d003      	beq.n	80122ce <put_fat+0x114>
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	091b      	lsrs	r3, r3, #4
 80122ca:	b2db      	uxtb	r3, r3
 80122cc:	e00e      	b.n	80122ec <put_fat+0x132>
 80122ce:	697b      	ldr	r3, [r7, #20]
 80122d0:	781b      	ldrb	r3, [r3, #0]
 80122d2:	b25b      	sxtb	r3, r3
 80122d4:	f023 030f 	bic.w	r3, r3, #15
 80122d8:	b25a      	sxtb	r2, r3
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	0a1b      	lsrs	r3, r3, #8
 80122de:	b25b      	sxtb	r3, r3
 80122e0:	f003 030f 	and.w	r3, r3, #15
 80122e4:	b25b      	sxtb	r3, r3
 80122e6:	4313      	orrs	r3, r2
 80122e8:	b25b      	sxtb	r3, r3
 80122ea:	b2db      	uxtb	r3, r3
 80122ec:	697a      	ldr	r2, [r7, #20]
 80122ee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	2201      	movs	r2, #1
 80122f4:	70da      	strb	r2, [r3, #3]
			break;
 80122f6:	e072      	b.n	80123de <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	899b      	ldrh	r3, [r3, #12]
 8012300:	085b      	lsrs	r3, r3, #1
 8012302:	b29b      	uxth	r3, r3
 8012304:	4619      	mov	r1, r3
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	fbb3 f3f1 	udiv	r3, r3, r1
 801230c:	4413      	add	r3, r2
 801230e:	4619      	mov	r1, r3
 8012310:	68f8      	ldr	r0, [r7, #12]
 8012312:	f7ff fdc5 	bl	8011ea0 <move_window>
 8012316:	4603      	mov	r3, r0
 8012318:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801231a:	7ffb      	ldrb	r3, [r7, #31]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d15b      	bne.n	80123d8 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012326:	68bb      	ldr	r3, [r7, #8]
 8012328:	005b      	lsls	r3, r3, #1
 801232a:	68fa      	ldr	r2, [r7, #12]
 801232c:	8992      	ldrh	r2, [r2, #12]
 801232e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012332:	fb02 f200 	mul.w	r2, r2, r0
 8012336:	1a9b      	subs	r3, r3, r2
 8012338:	440b      	add	r3, r1
 801233a:	687a      	ldr	r2, [r7, #4]
 801233c:	b292      	uxth	r2, r2
 801233e:	4611      	mov	r1, r2
 8012340:	4618      	mov	r0, r3
 8012342:	f7ff fb38 	bl	80119b6 <st_word>
			fs->wflag = 1;
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	2201      	movs	r2, #1
 801234a:	70da      	strb	r2, [r3, #3]
			break;
 801234c:	e047      	b.n	80123de <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	899b      	ldrh	r3, [r3, #12]
 8012356:	089b      	lsrs	r3, r3, #2
 8012358:	b29b      	uxth	r3, r3
 801235a:	4619      	mov	r1, r3
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012362:	4413      	add	r3, r2
 8012364:	4619      	mov	r1, r3
 8012366:	68f8      	ldr	r0, [r7, #12]
 8012368:	f7ff fd9a 	bl	8011ea0 <move_window>
 801236c:	4603      	mov	r3, r0
 801236e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012370:	7ffb      	ldrb	r3, [r7, #31]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d132      	bne.n	80123dc <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012382:	68bb      	ldr	r3, [r7, #8]
 8012384:	009b      	lsls	r3, r3, #2
 8012386:	68fa      	ldr	r2, [r7, #12]
 8012388:	8992      	ldrh	r2, [r2, #12]
 801238a:	fbb3 f0f2 	udiv	r0, r3, r2
 801238e:	fb02 f200 	mul.w	r2, r2, r0
 8012392:	1a9b      	subs	r3, r3, r2
 8012394:	440b      	add	r3, r1
 8012396:	4618      	mov	r0, r3
 8012398:	f7ff faea 	bl	8011970 <ld_dword>
 801239c:	4603      	mov	r3, r0
 801239e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80123a2:	4323      	orrs	r3, r4
 80123a4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80123ac:	68bb      	ldr	r3, [r7, #8]
 80123ae:	009b      	lsls	r3, r3, #2
 80123b0:	68fa      	ldr	r2, [r7, #12]
 80123b2:	8992      	ldrh	r2, [r2, #12]
 80123b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80123b8:	fb02 f200 	mul.w	r2, r2, r0
 80123bc:	1a9b      	subs	r3, r3, r2
 80123be:	440b      	add	r3, r1
 80123c0:	6879      	ldr	r1, [r7, #4]
 80123c2:	4618      	mov	r0, r3
 80123c4:	f7ff fb12 	bl	80119ec <st_dword>
			fs->wflag = 1;
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	2201      	movs	r2, #1
 80123cc:	70da      	strb	r2, [r3, #3]
			break;
 80123ce:	e006      	b.n	80123de <put_fat+0x224>
			if (res != FR_OK) break;
 80123d0:	bf00      	nop
 80123d2:	e004      	b.n	80123de <put_fat+0x224>
			if (res != FR_OK) break;
 80123d4:	bf00      	nop
 80123d6:	e002      	b.n	80123de <put_fat+0x224>
			if (res != FR_OK) break;
 80123d8:	bf00      	nop
 80123da:	e000      	b.n	80123de <put_fat+0x224>
			if (res != FR_OK) break;
 80123dc:	bf00      	nop
		}
	}
	return res;
 80123de:	7ffb      	ldrb	r3, [r7, #31]
}
 80123e0:	4618      	mov	r0, r3
 80123e2:	3724      	adds	r7, #36	; 0x24
 80123e4:	46bd      	mov	sp, r7
 80123e6:	bd90      	pop	{r4, r7, pc}

080123e8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b088      	sub	sp, #32
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	60f8      	str	r0, [r7, #12]
 80123f0:	60b9      	str	r1, [r7, #8]
 80123f2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80123f4:	2300      	movs	r3, #0
 80123f6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80123fe:	68bb      	ldr	r3, [r7, #8]
 8012400:	2b01      	cmp	r3, #1
 8012402:	d904      	bls.n	801240e <remove_chain+0x26>
 8012404:	69bb      	ldr	r3, [r7, #24]
 8012406:	69db      	ldr	r3, [r3, #28]
 8012408:	68ba      	ldr	r2, [r7, #8]
 801240a:	429a      	cmp	r2, r3
 801240c:	d301      	bcc.n	8012412 <remove_chain+0x2a>
 801240e:	2302      	movs	r3, #2
 8012410:	e04b      	b.n	80124aa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d00c      	beq.n	8012432 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012418:	f04f 32ff 	mov.w	r2, #4294967295
 801241c:	6879      	ldr	r1, [r7, #4]
 801241e:	69b8      	ldr	r0, [r7, #24]
 8012420:	f7ff fecb 	bl	80121ba <put_fat>
 8012424:	4603      	mov	r3, r0
 8012426:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012428:	7ffb      	ldrb	r3, [r7, #31]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d001      	beq.n	8012432 <remove_chain+0x4a>
 801242e:	7ffb      	ldrb	r3, [r7, #31]
 8012430:	e03b      	b.n	80124aa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012432:	68b9      	ldr	r1, [r7, #8]
 8012434:	68f8      	ldr	r0, [r7, #12]
 8012436:	f7ff fdf0 	bl	801201a <get_fat>
 801243a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801243c:	697b      	ldr	r3, [r7, #20]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d031      	beq.n	80124a6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012442:	697b      	ldr	r3, [r7, #20]
 8012444:	2b01      	cmp	r3, #1
 8012446:	d101      	bne.n	801244c <remove_chain+0x64>
 8012448:	2302      	movs	r3, #2
 801244a:	e02e      	b.n	80124aa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801244c:	697b      	ldr	r3, [r7, #20]
 801244e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012452:	d101      	bne.n	8012458 <remove_chain+0x70>
 8012454:	2301      	movs	r3, #1
 8012456:	e028      	b.n	80124aa <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012458:	2200      	movs	r2, #0
 801245a:	68b9      	ldr	r1, [r7, #8]
 801245c:	69b8      	ldr	r0, [r7, #24]
 801245e:	f7ff feac 	bl	80121ba <put_fat>
 8012462:	4603      	mov	r3, r0
 8012464:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012466:	7ffb      	ldrb	r3, [r7, #31]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d001      	beq.n	8012470 <remove_chain+0x88>
 801246c:	7ffb      	ldrb	r3, [r7, #31]
 801246e:	e01c      	b.n	80124aa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012470:	69bb      	ldr	r3, [r7, #24]
 8012472:	695a      	ldr	r2, [r3, #20]
 8012474:	69bb      	ldr	r3, [r7, #24]
 8012476:	69db      	ldr	r3, [r3, #28]
 8012478:	3b02      	subs	r3, #2
 801247a:	429a      	cmp	r2, r3
 801247c:	d20b      	bcs.n	8012496 <remove_chain+0xae>
			fs->free_clst++;
 801247e:	69bb      	ldr	r3, [r7, #24]
 8012480:	695b      	ldr	r3, [r3, #20]
 8012482:	1c5a      	adds	r2, r3, #1
 8012484:	69bb      	ldr	r3, [r7, #24]
 8012486:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8012488:	69bb      	ldr	r3, [r7, #24]
 801248a:	791b      	ldrb	r3, [r3, #4]
 801248c:	f043 0301 	orr.w	r3, r3, #1
 8012490:	b2da      	uxtb	r2, r3
 8012492:	69bb      	ldr	r3, [r7, #24]
 8012494:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012496:	697b      	ldr	r3, [r7, #20]
 8012498:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801249a:	69bb      	ldr	r3, [r7, #24]
 801249c:	69db      	ldr	r3, [r3, #28]
 801249e:	68ba      	ldr	r2, [r7, #8]
 80124a0:	429a      	cmp	r2, r3
 80124a2:	d3c6      	bcc.n	8012432 <remove_chain+0x4a>
 80124a4:	e000      	b.n	80124a8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80124a6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80124a8:	2300      	movs	r3, #0
}
 80124aa:	4618      	mov	r0, r3
 80124ac:	3720      	adds	r7, #32
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bd80      	pop	{r7, pc}

080124b2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80124b2:	b580      	push	{r7, lr}
 80124b4:	b088      	sub	sp, #32
 80124b6:	af00      	add	r7, sp, #0
 80124b8:	6078      	str	r0, [r7, #4]
 80124ba:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80124c2:	683b      	ldr	r3, [r7, #0]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d10d      	bne.n	80124e4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80124c8:	693b      	ldr	r3, [r7, #16]
 80124ca:	691b      	ldr	r3, [r3, #16]
 80124cc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80124ce:	69bb      	ldr	r3, [r7, #24]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d004      	beq.n	80124de <create_chain+0x2c>
 80124d4:	693b      	ldr	r3, [r7, #16]
 80124d6:	69db      	ldr	r3, [r3, #28]
 80124d8:	69ba      	ldr	r2, [r7, #24]
 80124da:	429a      	cmp	r2, r3
 80124dc:	d31b      	bcc.n	8012516 <create_chain+0x64>
 80124de:	2301      	movs	r3, #1
 80124e0:	61bb      	str	r3, [r7, #24]
 80124e2:	e018      	b.n	8012516 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80124e4:	6839      	ldr	r1, [r7, #0]
 80124e6:	6878      	ldr	r0, [r7, #4]
 80124e8:	f7ff fd97 	bl	801201a <get_fat>
 80124ec:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	2b01      	cmp	r3, #1
 80124f2:	d801      	bhi.n	80124f8 <create_chain+0x46>
 80124f4:	2301      	movs	r3, #1
 80124f6:	e070      	b.n	80125da <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124fe:	d101      	bne.n	8012504 <create_chain+0x52>
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	e06a      	b.n	80125da <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012504:	693b      	ldr	r3, [r7, #16]
 8012506:	69db      	ldr	r3, [r3, #28]
 8012508:	68fa      	ldr	r2, [r7, #12]
 801250a:	429a      	cmp	r2, r3
 801250c:	d201      	bcs.n	8012512 <create_chain+0x60>
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	e063      	b.n	80125da <create_chain+0x128>
		scl = clst;
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012516:	69bb      	ldr	r3, [r7, #24]
 8012518:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801251a:	69fb      	ldr	r3, [r7, #28]
 801251c:	3301      	adds	r3, #1
 801251e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012520:	693b      	ldr	r3, [r7, #16]
 8012522:	69db      	ldr	r3, [r3, #28]
 8012524:	69fa      	ldr	r2, [r7, #28]
 8012526:	429a      	cmp	r2, r3
 8012528:	d307      	bcc.n	801253a <create_chain+0x88>
				ncl = 2;
 801252a:	2302      	movs	r3, #2
 801252c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801252e:	69fa      	ldr	r2, [r7, #28]
 8012530:	69bb      	ldr	r3, [r7, #24]
 8012532:	429a      	cmp	r2, r3
 8012534:	d901      	bls.n	801253a <create_chain+0x88>
 8012536:	2300      	movs	r3, #0
 8012538:	e04f      	b.n	80125da <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801253a:	69f9      	ldr	r1, [r7, #28]
 801253c:	6878      	ldr	r0, [r7, #4]
 801253e:	f7ff fd6c 	bl	801201a <get_fat>
 8012542:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d00e      	beq.n	8012568 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	2b01      	cmp	r3, #1
 801254e:	d003      	beq.n	8012558 <create_chain+0xa6>
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012556:	d101      	bne.n	801255c <create_chain+0xaa>
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	e03e      	b.n	80125da <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801255c:	69fa      	ldr	r2, [r7, #28]
 801255e:	69bb      	ldr	r3, [r7, #24]
 8012560:	429a      	cmp	r2, r3
 8012562:	d1da      	bne.n	801251a <create_chain+0x68>
 8012564:	2300      	movs	r3, #0
 8012566:	e038      	b.n	80125da <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012568:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801256a:	f04f 32ff 	mov.w	r2, #4294967295
 801256e:	69f9      	ldr	r1, [r7, #28]
 8012570:	6938      	ldr	r0, [r7, #16]
 8012572:	f7ff fe22 	bl	80121ba <put_fat>
 8012576:	4603      	mov	r3, r0
 8012578:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801257a:	7dfb      	ldrb	r3, [r7, #23]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d109      	bne.n	8012594 <create_chain+0xe2>
 8012580:	683b      	ldr	r3, [r7, #0]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d006      	beq.n	8012594 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012586:	69fa      	ldr	r2, [r7, #28]
 8012588:	6839      	ldr	r1, [r7, #0]
 801258a:	6938      	ldr	r0, [r7, #16]
 801258c:	f7ff fe15 	bl	80121ba <put_fat>
 8012590:	4603      	mov	r3, r0
 8012592:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012594:	7dfb      	ldrb	r3, [r7, #23]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d116      	bne.n	80125c8 <create_chain+0x116>
		fs->last_clst = ncl;
 801259a:	693b      	ldr	r3, [r7, #16]
 801259c:	69fa      	ldr	r2, [r7, #28]
 801259e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80125a0:	693b      	ldr	r3, [r7, #16]
 80125a2:	695a      	ldr	r2, [r3, #20]
 80125a4:	693b      	ldr	r3, [r7, #16]
 80125a6:	69db      	ldr	r3, [r3, #28]
 80125a8:	3b02      	subs	r3, #2
 80125aa:	429a      	cmp	r2, r3
 80125ac:	d804      	bhi.n	80125b8 <create_chain+0x106>
 80125ae:	693b      	ldr	r3, [r7, #16]
 80125b0:	695b      	ldr	r3, [r3, #20]
 80125b2:	1e5a      	subs	r2, r3, #1
 80125b4:	693b      	ldr	r3, [r7, #16]
 80125b6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80125b8:	693b      	ldr	r3, [r7, #16]
 80125ba:	791b      	ldrb	r3, [r3, #4]
 80125bc:	f043 0301 	orr.w	r3, r3, #1
 80125c0:	b2da      	uxtb	r2, r3
 80125c2:	693b      	ldr	r3, [r7, #16]
 80125c4:	711a      	strb	r2, [r3, #4]
 80125c6:	e007      	b.n	80125d8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80125c8:	7dfb      	ldrb	r3, [r7, #23]
 80125ca:	2b01      	cmp	r3, #1
 80125cc:	d102      	bne.n	80125d4 <create_chain+0x122>
 80125ce:	f04f 33ff 	mov.w	r3, #4294967295
 80125d2:	e000      	b.n	80125d6 <create_chain+0x124>
 80125d4:	2301      	movs	r3, #1
 80125d6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80125d8:	69fb      	ldr	r3, [r7, #28]
}
 80125da:	4618      	mov	r0, r3
 80125dc:	3720      	adds	r7, #32
 80125de:	46bd      	mov	sp, r7
 80125e0:	bd80      	pop	{r7, pc}

080125e2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80125e2:	b480      	push	{r7}
 80125e4:	b087      	sub	sp, #28
 80125e6:	af00      	add	r7, sp, #0
 80125e8:	6078      	str	r0, [r7, #4]
 80125ea:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125f6:	3304      	adds	r3, #4
 80125f8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	899b      	ldrh	r3, [r3, #12]
 80125fe:	461a      	mov	r2, r3
 8012600:	683b      	ldr	r3, [r7, #0]
 8012602:	fbb3 f3f2 	udiv	r3, r3, r2
 8012606:	68fa      	ldr	r2, [r7, #12]
 8012608:	8952      	ldrh	r2, [r2, #10]
 801260a:	fbb3 f3f2 	udiv	r3, r3, r2
 801260e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012610:	693b      	ldr	r3, [r7, #16]
 8012612:	1d1a      	adds	r2, r3, #4
 8012614:	613a      	str	r2, [r7, #16]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801261a:	68bb      	ldr	r3, [r7, #8]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d101      	bne.n	8012624 <clmt_clust+0x42>
 8012620:	2300      	movs	r3, #0
 8012622:	e010      	b.n	8012646 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8012624:	697a      	ldr	r2, [r7, #20]
 8012626:	68bb      	ldr	r3, [r7, #8]
 8012628:	429a      	cmp	r2, r3
 801262a:	d307      	bcc.n	801263c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801262c:	697a      	ldr	r2, [r7, #20]
 801262e:	68bb      	ldr	r3, [r7, #8]
 8012630:	1ad3      	subs	r3, r2, r3
 8012632:	617b      	str	r3, [r7, #20]
 8012634:	693b      	ldr	r3, [r7, #16]
 8012636:	3304      	adds	r3, #4
 8012638:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801263a:	e7e9      	b.n	8012610 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801263c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801263e:	693b      	ldr	r3, [r7, #16]
 8012640:	681a      	ldr	r2, [r3, #0]
 8012642:	697b      	ldr	r3, [r7, #20]
 8012644:	4413      	add	r3, r2
}
 8012646:	4618      	mov	r0, r3
 8012648:	371c      	adds	r7, #28
 801264a:	46bd      	mov	sp, r7
 801264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012650:	4770      	bx	lr

08012652 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012652:	b580      	push	{r7, lr}
 8012654:	b086      	sub	sp, #24
 8012656:	af00      	add	r7, sp, #0
 8012658:	6078      	str	r0, [r7, #4]
 801265a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012662:	683b      	ldr	r3, [r7, #0]
 8012664:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012668:	d204      	bcs.n	8012674 <dir_sdi+0x22>
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	f003 031f 	and.w	r3, r3, #31
 8012670:	2b00      	cmp	r3, #0
 8012672:	d001      	beq.n	8012678 <dir_sdi+0x26>
		return FR_INT_ERR;
 8012674:	2302      	movs	r3, #2
 8012676:	e071      	b.n	801275c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	683a      	ldr	r2, [r7, #0]
 801267c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	689b      	ldr	r3, [r3, #8]
 8012682:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012684:	697b      	ldr	r3, [r7, #20]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d106      	bne.n	8012698 <dir_sdi+0x46>
 801268a:	693b      	ldr	r3, [r7, #16]
 801268c:	781b      	ldrb	r3, [r3, #0]
 801268e:	2b02      	cmp	r3, #2
 8012690:	d902      	bls.n	8012698 <dir_sdi+0x46>
		clst = fs->dirbase;
 8012692:	693b      	ldr	r3, [r7, #16]
 8012694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012696:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012698:	697b      	ldr	r3, [r7, #20]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d10c      	bne.n	80126b8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801269e:	683b      	ldr	r3, [r7, #0]
 80126a0:	095b      	lsrs	r3, r3, #5
 80126a2:	693a      	ldr	r2, [r7, #16]
 80126a4:	8912      	ldrh	r2, [r2, #8]
 80126a6:	4293      	cmp	r3, r2
 80126a8:	d301      	bcc.n	80126ae <dir_sdi+0x5c>
 80126aa:	2302      	movs	r3, #2
 80126ac:	e056      	b.n	801275c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80126ae:	693b      	ldr	r3, [r7, #16]
 80126b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	61da      	str	r2, [r3, #28]
 80126b6:	e02d      	b.n	8012714 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80126b8:	693b      	ldr	r3, [r7, #16]
 80126ba:	895b      	ldrh	r3, [r3, #10]
 80126bc:	461a      	mov	r2, r3
 80126be:	693b      	ldr	r3, [r7, #16]
 80126c0:	899b      	ldrh	r3, [r3, #12]
 80126c2:	fb03 f302 	mul.w	r3, r3, r2
 80126c6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80126c8:	e019      	b.n	80126fe <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	6979      	ldr	r1, [r7, #20]
 80126ce:	4618      	mov	r0, r3
 80126d0:	f7ff fca3 	bl	801201a <get_fat>
 80126d4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80126d6:	697b      	ldr	r3, [r7, #20]
 80126d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126dc:	d101      	bne.n	80126e2 <dir_sdi+0x90>
 80126de:	2301      	movs	r3, #1
 80126e0:	e03c      	b.n	801275c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80126e2:	697b      	ldr	r3, [r7, #20]
 80126e4:	2b01      	cmp	r3, #1
 80126e6:	d904      	bls.n	80126f2 <dir_sdi+0xa0>
 80126e8:	693b      	ldr	r3, [r7, #16]
 80126ea:	69db      	ldr	r3, [r3, #28]
 80126ec:	697a      	ldr	r2, [r7, #20]
 80126ee:	429a      	cmp	r2, r3
 80126f0:	d301      	bcc.n	80126f6 <dir_sdi+0xa4>
 80126f2:	2302      	movs	r3, #2
 80126f4:	e032      	b.n	801275c <dir_sdi+0x10a>
			ofs -= csz;
 80126f6:	683a      	ldr	r2, [r7, #0]
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	1ad3      	subs	r3, r2, r3
 80126fc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80126fe:	683a      	ldr	r2, [r7, #0]
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	429a      	cmp	r2, r3
 8012704:	d2e1      	bcs.n	80126ca <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8012706:	6979      	ldr	r1, [r7, #20]
 8012708:	6938      	ldr	r0, [r7, #16]
 801270a:	f7ff fc67 	bl	8011fdc <clust2sect>
 801270e:	4602      	mov	r2, r0
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	697a      	ldr	r2, [r7, #20]
 8012718:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	69db      	ldr	r3, [r3, #28]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d101      	bne.n	8012726 <dir_sdi+0xd4>
 8012722:	2302      	movs	r3, #2
 8012724:	e01a      	b.n	801275c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	69da      	ldr	r2, [r3, #28]
 801272a:	693b      	ldr	r3, [r7, #16]
 801272c:	899b      	ldrh	r3, [r3, #12]
 801272e:	4619      	mov	r1, r3
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	fbb3 f3f1 	udiv	r3, r3, r1
 8012736:	441a      	add	r2, r3
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801273c:	693b      	ldr	r3, [r7, #16]
 801273e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012742:	693b      	ldr	r3, [r7, #16]
 8012744:	899b      	ldrh	r3, [r3, #12]
 8012746:	461a      	mov	r2, r3
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	fbb3 f0f2 	udiv	r0, r3, r2
 801274e:	fb02 f200 	mul.w	r2, r2, r0
 8012752:	1a9b      	subs	r3, r3, r2
 8012754:	18ca      	adds	r2, r1, r3
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801275a:	2300      	movs	r3, #0
}
 801275c:	4618      	mov	r0, r3
 801275e:	3718      	adds	r7, #24
 8012760:	46bd      	mov	sp, r7
 8012762:	bd80      	pop	{r7, pc}

08012764 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b086      	sub	sp, #24
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
 801276c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	695b      	ldr	r3, [r3, #20]
 8012778:	3320      	adds	r3, #32
 801277a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	69db      	ldr	r3, [r3, #28]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d003      	beq.n	801278c <dir_next+0x28>
 8012784:	68bb      	ldr	r3, [r7, #8]
 8012786:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801278a:	d301      	bcc.n	8012790 <dir_next+0x2c>
 801278c:	2304      	movs	r3, #4
 801278e:	e0bb      	b.n	8012908 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	899b      	ldrh	r3, [r3, #12]
 8012794:	461a      	mov	r2, r3
 8012796:	68bb      	ldr	r3, [r7, #8]
 8012798:	fbb3 f1f2 	udiv	r1, r3, r2
 801279c:	fb02 f201 	mul.w	r2, r2, r1
 80127a0:	1a9b      	subs	r3, r3, r2
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	f040 809d 	bne.w	80128e2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	69db      	ldr	r3, [r3, #28]
 80127ac:	1c5a      	adds	r2, r3, #1
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	699b      	ldr	r3, [r3, #24]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d10b      	bne.n	80127d2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80127ba:	68bb      	ldr	r3, [r7, #8]
 80127bc:	095b      	lsrs	r3, r3, #5
 80127be:	68fa      	ldr	r2, [r7, #12]
 80127c0:	8912      	ldrh	r2, [r2, #8]
 80127c2:	4293      	cmp	r3, r2
 80127c4:	f0c0 808d 	bcc.w	80128e2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	2200      	movs	r2, #0
 80127cc:	61da      	str	r2, [r3, #28]
 80127ce:	2304      	movs	r3, #4
 80127d0:	e09a      	b.n	8012908 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	899b      	ldrh	r3, [r3, #12]
 80127d6:	461a      	mov	r2, r3
 80127d8:	68bb      	ldr	r3, [r7, #8]
 80127da:	fbb3 f3f2 	udiv	r3, r3, r2
 80127de:	68fa      	ldr	r2, [r7, #12]
 80127e0:	8952      	ldrh	r2, [r2, #10]
 80127e2:	3a01      	subs	r2, #1
 80127e4:	4013      	ands	r3, r2
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d17b      	bne.n	80128e2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80127ea:	687a      	ldr	r2, [r7, #4]
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	699b      	ldr	r3, [r3, #24]
 80127f0:	4619      	mov	r1, r3
 80127f2:	4610      	mov	r0, r2
 80127f4:	f7ff fc11 	bl	801201a <get_fat>
 80127f8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80127fa:	697b      	ldr	r3, [r7, #20]
 80127fc:	2b01      	cmp	r3, #1
 80127fe:	d801      	bhi.n	8012804 <dir_next+0xa0>
 8012800:	2302      	movs	r3, #2
 8012802:	e081      	b.n	8012908 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012804:	697b      	ldr	r3, [r7, #20]
 8012806:	f1b3 3fff 	cmp.w	r3, #4294967295
 801280a:	d101      	bne.n	8012810 <dir_next+0xac>
 801280c:	2301      	movs	r3, #1
 801280e:	e07b      	b.n	8012908 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	69db      	ldr	r3, [r3, #28]
 8012814:	697a      	ldr	r2, [r7, #20]
 8012816:	429a      	cmp	r2, r3
 8012818:	d359      	bcc.n	80128ce <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801281a:	683b      	ldr	r3, [r7, #0]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d104      	bne.n	801282a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	2200      	movs	r2, #0
 8012824:	61da      	str	r2, [r3, #28]
 8012826:	2304      	movs	r3, #4
 8012828:	e06e      	b.n	8012908 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801282a:	687a      	ldr	r2, [r7, #4]
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	699b      	ldr	r3, [r3, #24]
 8012830:	4619      	mov	r1, r3
 8012832:	4610      	mov	r0, r2
 8012834:	f7ff fe3d 	bl	80124b2 <create_chain>
 8012838:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801283a:	697b      	ldr	r3, [r7, #20]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d101      	bne.n	8012844 <dir_next+0xe0>
 8012840:	2307      	movs	r3, #7
 8012842:	e061      	b.n	8012908 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	2b01      	cmp	r3, #1
 8012848:	d101      	bne.n	801284e <dir_next+0xea>
 801284a:	2302      	movs	r3, #2
 801284c:	e05c      	b.n	8012908 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012854:	d101      	bne.n	801285a <dir_next+0xf6>
 8012856:	2301      	movs	r3, #1
 8012858:	e056      	b.n	8012908 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801285a:	68f8      	ldr	r0, [r7, #12]
 801285c:	f7ff fadc 	bl	8011e18 <sync_window>
 8012860:	4603      	mov	r3, r0
 8012862:	2b00      	cmp	r3, #0
 8012864:	d001      	beq.n	801286a <dir_next+0x106>
 8012866:	2301      	movs	r3, #1
 8012868:	e04e      	b.n	8012908 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	899b      	ldrh	r3, [r3, #12]
 8012874:	461a      	mov	r2, r3
 8012876:	2100      	movs	r1, #0
 8012878:	f7ff f905 	bl	8011a86 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801287c:	2300      	movs	r3, #0
 801287e:	613b      	str	r3, [r7, #16]
 8012880:	6979      	ldr	r1, [r7, #20]
 8012882:	68f8      	ldr	r0, [r7, #12]
 8012884:	f7ff fbaa 	bl	8011fdc <clust2sect>
 8012888:	4602      	mov	r2, r0
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	635a      	str	r2, [r3, #52]	; 0x34
 801288e:	e012      	b.n	80128b6 <dir_next+0x152>
						fs->wflag = 1;
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	2201      	movs	r2, #1
 8012894:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012896:	68f8      	ldr	r0, [r7, #12]
 8012898:	f7ff fabe 	bl	8011e18 <sync_window>
 801289c:	4603      	mov	r3, r0
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d001      	beq.n	80128a6 <dir_next+0x142>
 80128a2:	2301      	movs	r3, #1
 80128a4:	e030      	b.n	8012908 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80128a6:	693b      	ldr	r3, [r7, #16]
 80128a8:	3301      	adds	r3, #1
 80128aa:	613b      	str	r3, [r7, #16]
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128b0:	1c5a      	adds	r2, r3, #1
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	635a      	str	r2, [r3, #52]	; 0x34
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	895b      	ldrh	r3, [r3, #10]
 80128ba:	461a      	mov	r2, r3
 80128bc:	693b      	ldr	r3, [r7, #16]
 80128be:	4293      	cmp	r3, r2
 80128c0:	d3e6      	bcc.n	8012890 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80128c6:	693b      	ldr	r3, [r7, #16]
 80128c8:	1ad2      	subs	r2, r2, r3
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	697a      	ldr	r2, [r7, #20]
 80128d2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80128d4:	6979      	ldr	r1, [r7, #20]
 80128d6:	68f8      	ldr	r0, [r7, #12]
 80128d8:	f7ff fb80 	bl	8011fdc <clust2sect>
 80128dc:	4602      	mov	r2, r0
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	68ba      	ldr	r2, [r7, #8]
 80128e6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	899b      	ldrh	r3, [r3, #12]
 80128f2:	461a      	mov	r2, r3
 80128f4:	68bb      	ldr	r3, [r7, #8]
 80128f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80128fa:	fb02 f200 	mul.w	r2, r2, r0
 80128fe:	1a9b      	subs	r3, r3, r2
 8012900:	18ca      	adds	r2, r1, r3
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012906:	2300      	movs	r3, #0
}
 8012908:	4618      	mov	r0, r3
 801290a:	3718      	adds	r7, #24
 801290c:	46bd      	mov	sp, r7
 801290e:	bd80      	pop	{r7, pc}

08012910 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b086      	sub	sp, #24
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
 8012918:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012920:	2100      	movs	r1, #0
 8012922:	6878      	ldr	r0, [r7, #4]
 8012924:	f7ff fe95 	bl	8012652 <dir_sdi>
 8012928:	4603      	mov	r3, r0
 801292a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801292c:	7dfb      	ldrb	r3, [r7, #23]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d12b      	bne.n	801298a <dir_alloc+0x7a>
		n = 0;
 8012932:	2300      	movs	r3, #0
 8012934:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	69db      	ldr	r3, [r3, #28]
 801293a:	4619      	mov	r1, r3
 801293c:	68f8      	ldr	r0, [r7, #12]
 801293e:	f7ff faaf 	bl	8011ea0 <move_window>
 8012942:	4603      	mov	r3, r0
 8012944:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012946:	7dfb      	ldrb	r3, [r7, #23]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d11d      	bne.n	8012988 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	6a1b      	ldr	r3, [r3, #32]
 8012950:	781b      	ldrb	r3, [r3, #0]
 8012952:	2be5      	cmp	r3, #229	; 0xe5
 8012954:	d004      	beq.n	8012960 <dir_alloc+0x50>
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	6a1b      	ldr	r3, [r3, #32]
 801295a:	781b      	ldrb	r3, [r3, #0]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d107      	bne.n	8012970 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012960:	693b      	ldr	r3, [r7, #16]
 8012962:	3301      	adds	r3, #1
 8012964:	613b      	str	r3, [r7, #16]
 8012966:	693a      	ldr	r2, [r7, #16]
 8012968:	683b      	ldr	r3, [r7, #0]
 801296a:	429a      	cmp	r2, r3
 801296c:	d102      	bne.n	8012974 <dir_alloc+0x64>
 801296e:	e00c      	b.n	801298a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012970:	2300      	movs	r3, #0
 8012972:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012974:	2101      	movs	r1, #1
 8012976:	6878      	ldr	r0, [r7, #4]
 8012978:	f7ff fef4 	bl	8012764 <dir_next>
 801297c:	4603      	mov	r3, r0
 801297e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012980:	7dfb      	ldrb	r3, [r7, #23]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d0d7      	beq.n	8012936 <dir_alloc+0x26>
 8012986:	e000      	b.n	801298a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012988:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801298a:	7dfb      	ldrb	r3, [r7, #23]
 801298c:	2b04      	cmp	r3, #4
 801298e:	d101      	bne.n	8012994 <dir_alloc+0x84>
 8012990:	2307      	movs	r3, #7
 8012992:	75fb      	strb	r3, [r7, #23]
	return res;
 8012994:	7dfb      	ldrb	r3, [r7, #23]
}
 8012996:	4618      	mov	r0, r3
 8012998:	3718      	adds	r7, #24
 801299a:	46bd      	mov	sp, r7
 801299c:	bd80      	pop	{r7, pc}

0801299e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801299e:	b580      	push	{r7, lr}
 80129a0:	b084      	sub	sp, #16
 80129a2:	af00      	add	r7, sp, #0
 80129a4:	6078      	str	r0, [r7, #4]
 80129a6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80129a8:	683b      	ldr	r3, [r7, #0]
 80129aa:	331a      	adds	r3, #26
 80129ac:	4618      	mov	r0, r3
 80129ae:	f7fe ffc7 	bl	8011940 <ld_word>
 80129b2:	4603      	mov	r3, r0
 80129b4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	781b      	ldrb	r3, [r3, #0]
 80129ba:	2b03      	cmp	r3, #3
 80129bc:	d109      	bne.n	80129d2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	3314      	adds	r3, #20
 80129c2:	4618      	mov	r0, r3
 80129c4:	f7fe ffbc 	bl	8011940 <ld_word>
 80129c8:	4603      	mov	r3, r0
 80129ca:	041b      	lsls	r3, r3, #16
 80129cc:	68fa      	ldr	r2, [r7, #12]
 80129ce:	4313      	orrs	r3, r2
 80129d0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80129d2:	68fb      	ldr	r3, [r7, #12]
}
 80129d4:	4618      	mov	r0, r3
 80129d6:	3710      	adds	r7, #16
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd80      	pop	{r7, pc}

080129dc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	b084      	sub	sp, #16
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	60f8      	str	r0, [r7, #12]
 80129e4:	60b9      	str	r1, [r7, #8]
 80129e6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80129e8:	68bb      	ldr	r3, [r7, #8]
 80129ea:	331a      	adds	r3, #26
 80129ec:	687a      	ldr	r2, [r7, #4]
 80129ee:	b292      	uxth	r2, r2
 80129f0:	4611      	mov	r1, r2
 80129f2:	4618      	mov	r0, r3
 80129f4:	f7fe ffdf 	bl	80119b6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	781b      	ldrb	r3, [r3, #0]
 80129fc:	2b03      	cmp	r3, #3
 80129fe:	d109      	bne.n	8012a14 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012a00:	68bb      	ldr	r3, [r7, #8]
 8012a02:	f103 0214 	add.w	r2, r3, #20
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	0c1b      	lsrs	r3, r3, #16
 8012a0a:	b29b      	uxth	r3, r3
 8012a0c:	4619      	mov	r1, r3
 8012a0e:	4610      	mov	r0, r2
 8012a10:	f7fe ffd1 	bl	80119b6 <st_word>
	}
}
 8012a14:	bf00      	nop
 8012a16:	3710      	adds	r7, #16
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	bd80      	pop	{r7, pc}

08012a1c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b086      	sub	sp, #24
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
 8012a24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012a26:	2304      	movs	r3, #4
 8012a28:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012a30:	e03c      	b.n	8012aac <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	69db      	ldr	r3, [r3, #28]
 8012a36:	4619      	mov	r1, r3
 8012a38:	6938      	ldr	r0, [r7, #16]
 8012a3a:	f7ff fa31 	bl	8011ea0 <move_window>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012a42:	7dfb      	ldrb	r3, [r7, #23]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d136      	bne.n	8012ab6 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	6a1b      	ldr	r3, [r3, #32]
 8012a4c:	781b      	ldrb	r3, [r3, #0]
 8012a4e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012a50:	7bfb      	ldrb	r3, [r7, #15]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d102      	bne.n	8012a5c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012a56:	2304      	movs	r3, #4
 8012a58:	75fb      	strb	r3, [r7, #23]
 8012a5a:	e031      	b.n	8012ac0 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	6a1b      	ldr	r3, [r3, #32]
 8012a60:	330b      	adds	r3, #11
 8012a62:	781b      	ldrb	r3, [r3, #0]
 8012a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a68:	73bb      	strb	r3, [r7, #14]
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	7bba      	ldrb	r2, [r7, #14]
 8012a6e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012a70:	7bfb      	ldrb	r3, [r7, #15]
 8012a72:	2be5      	cmp	r3, #229	; 0xe5
 8012a74:	d011      	beq.n	8012a9a <dir_read+0x7e>
 8012a76:	7bfb      	ldrb	r3, [r7, #15]
 8012a78:	2b2e      	cmp	r3, #46	; 0x2e
 8012a7a:	d00e      	beq.n	8012a9a <dir_read+0x7e>
 8012a7c:	7bbb      	ldrb	r3, [r7, #14]
 8012a7e:	2b0f      	cmp	r3, #15
 8012a80:	d00b      	beq.n	8012a9a <dir_read+0x7e>
 8012a82:	7bbb      	ldrb	r3, [r7, #14]
 8012a84:	f023 0320 	bic.w	r3, r3, #32
 8012a88:	2b08      	cmp	r3, #8
 8012a8a:	bf0c      	ite	eq
 8012a8c:	2301      	moveq	r3, #1
 8012a8e:	2300      	movne	r3, #0
 8012a90:	b2db      	uxtb	r3, r3
 8012a92:	461a      	mov	r2, r3
 8012a94:	683b      	ldr	r3, [r7, #0]
 8012a96:	4293      	cmp	r3, r2
 8012a98:	d00f      	beq.n	8012aba <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012a9a:	2100      	movs	r1, #0
 8012a9c:	6878      	ldr	r0, [r7, #4]
 8012a9e:	f7ff fe61 	bl	8012764 <dir_next>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012aa6:	7dfb      	ldrb	r3, [r7, #23]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d108      	bne.n	8012abe <dir_read+0xa2>
	while (dp->sect) {
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	69db      	ldr	r3, [r3, #28]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d1be      	bne.n	8012a32 <dir_read+0x16>
 8012ab4:	e004      	b.n	8012ac0 <dir_read+0xa4>
		if (res != FR_OK) break;
 8012ab6:	bf00      	nop
 8012ab8:	e002      	b.n	8012ac0 <dir_read+0xa4>
				break;
 8012aba:	bf00      	nop
 8012abc:	e000      	b.n	8012ac0 <dir_read+0xa4>
		if (res != FR_OK) break;
 8012abe:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012ac0:	7dfb      	ldrb	r3, [r7, #23]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d002      	beq.n	8012acc <dir_read+0xb0>
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	2200      	movs	r2, #0
 8012aca:	61da      	str	r2, [r3, #28]
	return res;
 8012acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ace:	4618      	mov	r0, r3
 8012ad0:	3718      	adds	r7, #24
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	bd80      	pop	{r7, pc}

08012ad6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012ad6:	b580      	push	{r7, lr}
 8012ad8:	b086      	sub	sp, #24
 8012ada:	af00      	add	r7, sp, #0
 8012adc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012ae4:	2100      	movs	r1, #0
 8012ae6:	6878      	ldr	r0, [r7, #4]
 8012ae8:	f7ff fdb3 	bl	8012652 <dir_sdi>
 8012aec:	4603      	mov	r3, r0
 8012aee:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012af0:	7dfb      	ldrb	r3, [r7, #23]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d001      	beq.n	8012afa <dir_find+0x24>
 8012af6:	7dfb      	ldrb	r3, [r7, #23]
 8012af8:	e03e      	b.n	8012b78 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	69db      	ldr	r3, [r3, #28]
 8012afe:	4619      	mov	r1, r3
 8012b00:	6938      	ldr	r0, [r7, #16]
 8012b02:	f7ff f9cd 	bl	8011ea0 <move_window>
 8012b06:	4603      	mov	r3, r0
 8012b08:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012b0a:	7dfb      	ldrb	r3, [r7, #23]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d12f      	bne.n	8012b70 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	6a1b      	ldr	r3, [r3, #32]
 8012b14:	781b      	ldrb	r3, [r3, #0]
 8012b16:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012b18:	7bfb      	ldrb	r3, [r7, #15]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d102      	bne.n	8012b24 <dir_find+0x4e>
 8012b1e:	2304      	movs	r3, #4
 8012b20:	75fb      	strb	r3, [r7, #23]
 8012b22:	e028      	b.n	8012b76 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	6a1b      	ldr	r3, [r3, #32]
 8012b28:	330b      	adds	r3, #11
 8012b2a:	781b      	ldrb	r3, [r3, #0]
 8012b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012b30:	b2da      	uxtb	r2, r3
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	6a1b      	ldr	r3, [r3, #32]
 8012b3a:	330b      	adds	r3, #11
 8012b3c:	781b      	ldrb	r3, [r3, #0]
 8012b3e:	f003 0308 	and.w	r3, r3, #8
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d10a      	bne.n	8012b5c <dir_find+0x86>
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	6a18      	ldr	r0, [r3, #32]
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	3324      	adds	r3, #36	; 0x24
 8012b4e:	220b      	movs	r2, #11
 8012b50:	4619      	mov	r1, r3
 8012b52:	f7fe ffb2 	bl	8011aba <mem_cmp>
 8012b56:	4603      	mov	r3, r0
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d00b      	beq.n	8012b74 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012b5c:	2100      	movs	r1, #0
 8012b5e:	6878      	ldr	r0, [r7, #4]
 8012b60:	f7ff fe00 	bl	8012764 <dir_next>
 8012b64:	4603      	mov	r3, r0
 8012b66:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012b68:	7dfb      	ldrb	r3, [r7, #23]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d0c5      	beq.n	8012afa <dir_find+0x24>
 8012b6e:	e002      	b.n	8012b76 <dir_find+0xa0>
		if (res != FR_OK) break;
 8012b70:	bf00      	nop
 8012b72:	e000      	b.n	8012b76 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012b74:	bf00      	nop

	return res;
 8012b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b78:	4618      	mov	r0, r3
 8012b7a:	3718      	adds	r7, #24
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	bd80      	pop	{r7, pc}

08012b80 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b084      	sub	sp, #16
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012b8e:	2101      	movs	r1, #1
 8012b90:	6878      	ldr	r0, [r7, #4]
 8012b92:	f7ff febd 	bl	8012910 <dir_alloc>
 8012b96:	4603      	mov	r3, r0
 8012b98:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012b9a:	7bfb      	ldrb	r3, [r7, #15]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d11c      	bne.n	8012bda <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	69db      	ldr	r3, [r3, #28]
 8012ba4:	4619      	mov	r1, r3
 8012ba6:	68b8      	ldr	r0, [r7, #8]
 8012ba8:	f7ff f97a 	bl	8011ea0 <move_window>
 8012bac:	4603      	mov	r3, r0
 8012bae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012bb0:	7bfb      	ldrb	r3, [r7, #15]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d111      	bne.n	8012bda <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	6a1b      	ldr	r3, [r3, #32]
 8012bba:	2220      	movs	r2, #32
 8012bbc:	2100      	movs	r1, #0
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f7fe ff61 	bl	8011a86 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	6a18      	ldr	r0, [r3, #32]
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	3324      	adds	r3, #36	; 0x24
 8012bcc:	220b      	movs	r2, #11
 8012bce:	4619      	mov	r1, r3
 8012bd0:	f7fe ff38 	bl	8011a44 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	2201      	movs	r2, #1
 8012bd8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bdc:	4618      	mov	r0, r3
 8012bde:	3710      	adds	r7, #16
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}

08012be4 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b084      	sub	sp, #16
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	69db      	ldr	r3, [r3, #28]
 8012bf6:	4619      	mov	r1, r3
 8012bf8:	68f8      	ldr	r0, [r7, #12]
 8012bfa:	f7ff f951 	bl	8011ea0 <move_window>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8012c02:	7afb      	ldrb	r3, [r7, #11]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d106      	bne.n	8012c16 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	6a1b      	ldr	r3, [r3, #32]
 8012c0c:	22e5      	movs	r2, #229	; 0xe5
 8012c0e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	2201      	movs	r2, #1
 8012c14:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8012c16:	7afb      	ldrb	r3, [r7, #11]
}
 8012c18:	4618      	mov	r0, r3
 8012c1a:	3710      	adds	r7, #16
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	bd80      	pop	{r7, pc}

08012c20 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b088      	sub	sp, #32
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
 8012c28:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	60fb      	str	r3, [r7, #12]
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	3324      	adds	r3, #36	; 0x24
 8012c34:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012c36:	220b      	movs	r2, #11
 8012c38:	2120      	movs	r1, #32
 8012c3a:	68b8      	ldr	r0, [r7, #8]
 8012c3c:	f7fe ff23 	bl	8011a86 <mem_set>
	si = i = 0; ni = 8;
 8012c40:	2300      	movs	r3, #0
 8012c42:	613b      	str	r3, [r7, #16]
 8012c44:	693b      	ldr	r3, [r7, #16]
 8012c46:	617b      	str	r3, [r7, #20]
 8012c48:	2308      	movs	r3, #8
 8012c4a:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8012c4c:	68fa      	ldr	r2, [r7, #12]
 8012c4e:	697b      	ldr	r3, [r7, #20]
 8012c50:	4413      	add	r3, r2
 8012c52:	781b      	ldrb	r3, [r3, #0]
 8012c54:	2b2e      	cmp	r3, #46	; 0x2e
 8012c56:	d12f      	bne.n	8012cb8 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8012c58:	697b      	ldr	r3, [r7, #20]
 8012c5a:	1c5a      	adds	r2, r3, #1
 8012c5c:	617a      	str	r2, [r7, #20]
 8012c5e:	68fa      	ldr	r2, [r7, #12]
 8012c60:	4413      	add	r3, r2
 8012c62:	781b      	ldrb	r3, [r3, #0]
 8012c64:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8012c66:	7ffb      	ldrb	r3, [r7, #31]
 8012c68:	2b2e      	cmp	r3, #46	; 0x2e
 8012c6a:	d10a      	bne.n	8012c82 <create_name+0x62>
 8012c6c:	697b      	ldr	r3, [r7, #20]
 8012c6e:	2b02      	cmp	r3, #2
 8012c70:	d807      	bhi.n	8012c82 <create_name+0x62>
			sfn[i++] = c;
 8012c72:	693b      	ldr	r3, [r7, #16]
 8012c74:	1c5a      	adds	r2, r3, #1
 8012c76:	613a      	str	r2, [r7, #16]
 8012c78:	68ba      	ldr	r2, [r7, #8]
 8012c7a:	4413      	add	r3, r2
 8012c7c:	7ffa      	ldrb	r2, [r7, #31]
 8012c7e:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8012c80:	e7ea      	b.n	8012c58 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8012c82:	7ffb      	ldrb	r3, [r7, #31]
 8012c84:	2b2f      	cmp	r3, #47	; 0x2f
 8012c86:	d007      	beq.n	8012c98 <create_name+0x78>
 8012c88:	7ffb      	ldrb	r3, [r7, #31]
 8012c8a:	2b5c      	cmp	r3, #92	; 0x5c
 8012c8c:	d004      	beq.n	8012c98 <create_name+0x78>
 8012c8e:	7ffb      	ldrb	r3, [r7, #31]
 8012c90:	2b20      	cmp	r3, #32
 8012c92:	d901      	bls.n	8012c98 <create_name+0x78>
 8012c94:	2306      	movs	r3, #6
 8012c96:	e084      	b.n	8012da2 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8012c98:	68fa      	ldr	r2, [r7, #12]
 8012c9a:	697b      	ldr	r3, [r7, #20]
 8012c9c:	441a      	add	r2, r3
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8012ca2:	7ffb      	ldrb	r3, [r7, #31]
 8012ca4:	2b20      	cmp	r3, #32
 8012ca6:	d801      	bhi.n	8012cac <create_name+0x8c>
 8012ca8:	2224      	movs	r2, #36	; 0x24
 8012caa:	e000      	b.n	8012cae <create_name+0x8e>
 8012cac:	2220      	movs	r2, #32
 8012cae:	68bb      	ldr	r3, [r7, #8]
 8012cb0:	330b      	adds	r3, #11
 8012cb2:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	e074      	b.n	8012da2 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012cb8:	697b      	ldr	r3, [r7, #20]
 8012cba:	1c5a      	adds	r2, r3, #1
 8012cbc:	617a      	str	r2, [r7, #20]
 8012cbe:	68fa      	ldr	r2, [r7, #12]
 8012cc0:	4413      	add	r3, r2
 8012cc2:	781b      	ldrb	r3, [r3, #0]
 8012cc4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012cc6:	7ffb      	ldrb	r3, [r7, #31]
 8012cc8:	2b20      	cmp	r3, #32
 8012cca:	d94e      	bls.n	8012d6a <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012ccc:	7ffb      	ldrb	r3, [r7, #31]
 8012cce:	2b2f      	cmp	r3, #47	; 0x2f
 8012cd0:	d006      	beq.n	8012ce0 <create_name+0xc0>
 8012cd2:	7ffb      	ldrb	r3, [r7, #31]
 8012cd4:	2b5c      	cmp	r3, #92	; 0x5c
 8012cd6:	d110      	bne.n	8012cfa <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012cd8:	e002      	b.n	8012ce0 <create_name+0xc0>
 8012cda:	697b      	ldr	r3, [r7, #20]
 8012cdc:	3301      	adds	r3, #1
 8012cde:	617b      	str	r3, [r7, #20]
 8012ce0:	68fa      	ldr	r2, [r7, #12]
 8012ce2:	697b      	ldr	r3, [r7, #20]
 8012ce4:	4413      	add	r3, r2
 8012ce6:	781b      	ldrb	r3, [r3, #0]
 8012ce8:	2b2f      	cmp	r3, #47	; 0x2f
 8012cea:	d0f6      	beq.n	8012cda <create_name+0xba>
 8012cec:	68fa      	ldr	r2, [r7, #12]
 8012cee:	697b      	ldr	r3, [r7, #20]
 8012cf0:	4413      	add	r3, r2
 8012cf2:	781b      	ldrb	r3, [r3, #0]
 8012cf4:	2b5c      	cmp	r3, #92	; 0x5c
 8012cf6:	d0f0      	beq.n	8012cda <create_name+0xba>
			break;
 8012cf8:	e038      	b.n	8012d6c <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012cfa:	7ffb      	ldrb	r3, [r7, #31]
 8012cfc:	2b2e      	cmp	r3, #46	; 0x2e
 8012cfe:	d003      	beq.n	8012d08 <create_name+0xe8>
 8012d00:	693a      	ldr	r2, [r7, #16]
 8012d02:	69bb      	ldr	r3, [r7, #24]
 8012d04:	429a      	cmp	r2, r3
 8012d06:	d30c      	bcc.n	8012d22 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012d08:	69bb      	ldr	r3, [r7, #24]
 8012d0a:	2b0b      	cmp	r3, #11
 8012d0c:	d002      	beq.n	8012d14 <create_name+0xf4>
 8012d0e:	7ffb      	ldrb	r3, [r7, #31]
 8012d10:	2b2e      	cmp	r3, #46	; 0x2e
 8012d12:	d001      	beq.n	8012d18 <create_name+0xf8>
 8012d14:	2306      	movs	r3, #6
 8012d16:	e044      	b.n	8012da2 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8012d18:	2308      	movs	r3, #8
 8012d1a:	613b      	str	r3, [r7, #16]
 8012d1c:	230b      	movs	r3, #11
 8012d1e:	61bb      	str	r3, [r7, #24]
			continue;
 8012d20:	e022      	b.n	8012d68 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012d22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	da04      	bge.n	8012d34 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012d2a:	7ffb      	ldrb	r3, [r7, #31]
 8012d2c:	3b80      	subs	r3, #128	; 0x80
 8012d2e:	4a1f      	ldr	r2, [pc, #124]	; (8012dac <create_name+0x18c>)
 8012d30:	5cd3      	ldrb	r3, [r2, r3]
 8012d32:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012d34:	7ffb      	ldrb	r3, [r7, #31]
 8012d36:	4619      	mov	r1, r3
 8012d38:	481d      	ldr	r0, [pc, #116]	; (8012db0 <create_name+0x190>)
 8012d3a:	f7fe fee5 	bl	8011b08 <chk_chr>
 8012d3e:	4603      	mov	r3, r0
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d001      	beq.n	8012d48 <create_name+0x128>
 8012d44:	2306      	movs	r3, #6
 8012d46:	e02c      	b.n	8012da2 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012d48:	7ffb      	ldrb	r3, [r7, #31]
 8012d4a:	2b60      	cmp	r3, #96	; 0x60
 8012d4c:	d905      	bls.n	8012d5a <create_name+0x13a>
 8012d4e:	7ffb      	ldrb	r3, [r7, #31]
 8012d50:	2b7a      	cmp	r3, #122	; 0x7a
 8012d52:	d802      	bhi.n	8012d5a <create_name+0x13a>
 8012d54:	7ffb      	ldrb	r3, [r7, #31]
 8012d56:	3b20      	subs	r3, #32
 8012d58:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8012d5a:	693b      	ldr	r3, [r7, #16]
 8012d5c:	1c5a      	adds	r2, r3, #1
 8012d5e:	613a      	str	r2, [r7, #16]
 8012d60:	68ba      	ldr	r2, [r7, #8]
 8012d62:	4413      	add	r3, r2
 8012d64:	7ffa      	ldrb	r2, [r7, #31]
 8012d66:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012d68:	e7a6      	b.n	8012cb8 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012d6a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012d6c:	68fa      	ldr	r2, [r7, #12]
 8012d6e:	697b      	ldr	r3, [r7, #20]
 8012d70:	441a      	add	r2, r3
 8012d72:	683b      	ldr	r3, [r7, #0]
 8012d74:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012d76:	693b      	ldr	r3, [r7, #16]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d101      	bne.n	8012d80 <create_name+0x160>
 8012d7c:	2306      	movs	r3, #6
 8012d7e:	e010      	b.n	8012da2 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012d80:	68bb      	ldr	r3, [r7, #8]
 8012d82:	781b      	ldrb	r3, [r3, #0]
 8012d84:	2be5      	cmp	r3, #229	; 0xe5
 8012d86:	d102      	bne.n	8012d8e <create_name+0x16e>
 8012d88:	68bb      	ldr	r3, [r7, #8]
 8012d8a:	2205      	movs	r2, #5
 8012d8c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012d8e:	7ffb      	ldrb	r3, [r7, #31]
 8012d90:	2b20      	cmp	r3, #32
 8012d92:	d801      	bhi.n	8012d98 <create_name+0x178>
 8012d94:	2204      	movs	r2, #4
 8012d96:	e000      	b.n	8012d9a <create_name+0x17a>
 8012d98:	2200      	movs	r2, #0
 8012d9a:	68bb      	ldr	r3, [r7, #8]
 8012d9c:	330b      	adds	r3, #11
 8012d9e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012da0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012da2:	4618      	mov	r0, r3
 8012da4:	3720      	adds	r7, #32
 8012da6:	46bd      	mov	sp, r7
 8012da8:	bd80      	pop	{r7, pc}
 8012daa:	bf00      	nop
 8012dac:	0801a40c 	.word	0x0801a40c
 8012db0:	0801a3bc 	.word	0x0801a3bc

08012db4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b086      	sub	sp, #24
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
 8012dbc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012dc2:	693b      	ldr	r3, [r7, #16]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	781b      	ldrb	r3, [r3, #0]
 8012dcc:	2b2f      	cmp	r3, #47	; 0x2f
 8012dce:	d00b      	beq.n	8012de8 <follow_path+0x34>
 8012dd0:	683b      	ldr	r3, [r7, #0]
 8012dd2:	781b      	ldrb	r3, [r3, #0]
 8012dd4:	2b5c      	cmp	r3, #92	; 0x5c
 8012dd6:	d007      	beq.n	8012de8 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	699a      	ldr	r2, [r3, #24]
 8012ddc:	693b      	ldr	r3, [r7, #16]
 8012dde:	609a      	str	r2, [r3, #8]
 8012de0:	e00d      	b.n	8012dfe <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012de2:	683b      	ldr	r3, [r7, #0]
 8012de4:	3301      	adds	r3, #1
 8012de6:	603b      	str	r3, [r7, #0]
 8012de8:	683b      	ldr	r3, [r7, #0]
 8012dea:	781b      	ldrb	r3, [r3, #0]
 8012dec:	2b2f      	cmp	r3, #47	; 0x2f
 8012dee:	d0f8      	beq.n	8012de2 <follow_path+0x2e>
 8012df0:	683b      	ldr	r3, [r7, #0]
 8012df2:	781b      	ldrb	r3, [r3, #0]
 8012df4:	2b5c      	cmp	r3, #92	; 0x5c
 8012df6:	d0f4      	beq.n	8012de2 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012df8:	693b      	ldr	r3, [r7, #16]
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012dfe:	683b      	ldr	r3, [r7, #0]
 8012e00:	781b      	ldrb	r3, [r3, #0]
 8012e02:	2b1f      	cmp	r3, #31
 8012e04:	d80a      	bhi.n	8012e1c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	2280      	movs	r2, #128	; 0x80
 8012e0a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012e0e:	2100      	movs	r1, #0
 8012e10:	6878      	ldr	r0, [r7, #4]
 8012e12:	f7ff fc1e 	bl	8012652 <dir_sdi>
 8012e16:	4603      	mov	r3, r0
 8012e18:	75fb      	strb	r3, [r7, #23]
 8012e1a:	e05b      	b.n	8012ed4 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012e1c:	463b      	mov	r3, r7
 8012e1e:	4619      	mov	r1, r3
 8012e20:	6878      	ldr	r0, [r7, #4]
 8012e22:	f7ff fefd 	bl	8012c20 <create_name>
 8012e26:	4603      	mov	r3, r0
 8012e28:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012e2a:	7dfb      	ldrb	r3, [r7, #23]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d14c      	bne.n	8012eca <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012e30:	6878      	ldr	r0, [r7, #4]
 8012e32:	f7ff fe50 	bl	8012ad6 <dir_find>
 8012e36:	4603      	mov	r3, r0
 8012e38:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012e40:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012e42:	7dfb      	ldrb	r3, [r7, #23]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d01b      	beq.n	8012e80 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012e48:	7dfb      	ldrb	r3, [r7, #23]
 8012e4a:	2b04      	cmp	r3, #4
 8012e4c:	d13f      	bne.n	8012ece <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8012e4e:	7afb      	ldrb	r3, [r7, #11]
 8012e50:	f003 0320 	and.w	r3, r3, #32
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d00b      	beq.n	8012e70 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012e58:	7afb      	ldrb	r3, [r7, #11]
 8012e5a:	f003 0304 	and.w	r3, r3, #4
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d031      	beq.n	8012ec6 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	2280      	movs	r2, #128	; 0x80
 8012e66:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8012e6e:	e02e      	b.n	8012ece <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012e70:	7afb      	ldrb	r3, [r7, #11]
 8012e72:	f003 0304 	and.w	r3, r3, #4
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d129      	bne.n	8012ece <follow_path+0x11a>
 8012e7a:	2305      	movs	r3, #5
 8012e7c:	75fb      	strb	r3, [r7, #23]
				break;
 8012e7e:	e026      	b.n	8012ece <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012e80:	7afb      	ldrb	r3, [r7, #11]
 8012e82:	f003 0304 	and.w	r3, r3, #4
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d123      	bne.n	8012ed2 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012e8a:	693b      	ldr	r3, [r7, #16]
 8012e8c:	799b      	ldrb	r3, [r3, #6]
 8012e8e:	f003 0310 	and.w	r3, r3, #16
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d102      	bne.n	8012e9c <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8012e96:	2305      	movs	r3, #5
 8012e98:	75fb      	strb	r3, [r7, #23]
 8012e9a:	e01b      	b.n	8012ed4 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	695b      	ldr	r3, [r3, #20]
 8012ea6:	68fa      	ldr	r2, [r7, #12]
 8012ea8:	8992      	ldrh	r2, [r2, #12]
 8012eaa:	fbb3 f0f2 	udiv	r0, r3, r2
 8012eae:	fb02 f200 	mul.w	r2, r2, r0
 8012eb2:	1a9b      	subs	r3, r3, r2
 8012eb4:	440b      	add	r3, r1
 8012eb6:	4619      	mov	r1, r3
 8012eb8:	68f8      	ldr	r0, [r7, #12]
 8012eba:	f7ff fd70 	bl	801299e <ld_clust>
 8012ebe:	4602      	mov	r2, r0
 8012ec0:	693b      	ldr	r3, [r7, #16]
 8012ec2:	609a      	str	r2, [r3, #8]
 8012ec4:	e7aa      	b.n	8012e1c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012ec6:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012ec8:	e7a8      	b.n	8012e1c <follow_path+0x68>
			if (res != FR_OK) break;
 8012eca:	bf00      	nop
 8012ecc:	e002      	b.n	8012ed4 <follow_path+0x120>
				break;
 8012ece:	bf00      	nop
 8012ed0:	e000      	b.n	8012ed4 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012ed2:	bf00      	nop
			}
		}
	}

	return res;
 8012ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	3718      	adds	r7, #24
 8012eda:	46bd      	mov	sp, r7
 8012edc:	bd80      	pop	{r7, pc}

08012ede <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012ede:	b480      	push	{r7}
 8012ee0:	b087      	sub	sp, #28
 8012ee2:	af00      	add	r7, sp, #0
 8012ee4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8012eea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d031      	beq.n	8012f58 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	617b      	str	r3, [r7, #20]
 8012efa:	e002      	b.n	8012f02 <get_ldnumber+0x24>
 8012efc:	697b      	ldr	r3, [r7, #20]
 8012efe:	3301      	adds	r3, #1
 8012f00:	617b      	str	r3, [r7, #20]
 8012f02:	697b      	ldr	r3, [r7, #20]
 8012f04:	781b      	ldrb	r3, [r3, #0]
 8012f06:	2b20      	cmp	r3, #32
 8012f08:	d903      	bls.n	8012f12 <get_ldnumber+0x34>
 8012f0a:	697b      	ldr	r3, [r7, #20]
 8012f0c:	781b      	ldrb	r3, [r3, #0]
 8012f0e:	2b3a      	cmp	r3, #58	; 0x3a
 8012f10:	d1f4      	bne.n	8012efc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012f12:	697b      	ldr	r3, [r7, #20]
 8012f14:	781b      	ldrb	r3, [r3, #0]
 8012f16:	2b3a      	cmp	r3, #58	; 0x3a
 8012f18:	d11c      	bne.n	8012f54 <get_ldnumber+0x76>
			tp = *path;
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	1c5a      	adds	r2, r3, #1
 8012f24:	60fa      	str	r2, [r7, #12]
 8012f26:	781b      	ldrb	r3, [r3, #0]
 8012f28:	3b30      	subs	r3, #48	; 0x30
 8012f2a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012f2c:	68bb      	ldr	r3, [r7, #8]
 8012f2e:	2b09      	cmp	r3, #9
 8012f30:	d80e      	bhi.n	8012f50 <get_ldnumber+0x72>
 8012f32:	68fa      	ldr	r2, [r7, #12]
 8012f34:	697b      	ldr	r3, [r7, #20]
 8012f36:	429a      	cmp	r2, r3
 8012f38:	d10a      	bne.n	8012f50 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012f3a:	68bb      	ldr	r3, [r7, #8]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d107      	bne.n	8012f50 <get_ldnumber+0x72>
					vol = (int)i;
 8012f40:	68bb      	ldr	r3, [r7, #8]
 8012f42:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012f44:	697b      	ldr	r3, [r7, #20]
 8012f46:	3301      	adds	r3, #1
 8012f48:	617b      	str	r3, [r7, #20]
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	697a      	ldr	r2, [r7, #20]
 8012f4e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012f50:	693b      	ldr	r3, [r7, #16]
 8012f52:	e002      	b.n	8012f5a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012f54:	2300      	movs	r3, #0
 8012f56:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012f58:	693b      	ldr	r3, [r7, #16]
}
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	371c      	adds	r7, #28
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f64:	4770      	bx	lr
	...

08012f68 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b082      	sub	sp, #8
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
 8012f70:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	2200      	movs	r2, #0
 8012f76:	70da      	strb	r2, [r3, #3]
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8012f7e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012f80:	6839      	ldr	r1, [r7, #0]
 8012f82:	6878      	ldr	r0, [r7, #4]
 8012f84:	f7fe ff8c 	bl	8011ea0 <move_window>
 8012f88:	4603      	mov	r3, r0
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d001      	beq.n	8012f92 <check_fs+0x2a>
 8012f8e:	2304      	movs	r3, #4
 8012f90:	e038      	b.n	8013004 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	3338      	adds	r3, #56	; 0x38
 8012f96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f7fe fcd0 	bl	8011940 <ld_word>
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	461a      	mov	r2, r3
 8012fa4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012fa8:	429a      	cmp	r2, r3
 8012faa:	d001      	beq.n	8012fb0 <check_fs+0x48>
 8012fac:	2303      	movs	r3, #3
 8012fae:	e029      	b.n	8013004 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012fb6:	2be9      	cmp	r3, #233	; 0xe9
 8012fb8:	d009      	beq.n	8012fce <check_fs+0x66>
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012fc0:	2beb      	cmp	r3, #235	; 0xeb
 8012fc2:	d11e      	bne.n	8013002 <check_fs+0x9a>
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012fca:	2b90      	cmp	r3, #144	; 0x90
 8012fcc:	d119      	bne.n	8013002 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	3338      	adds	r3, #56	; 0x38
 8012fd2:	3336      	adds	r3, #54	; 0x36
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	f7fe fccb 	bl	8011970 <ld_dword>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012fe0:	4a0a      	ldr	r2, [pc, #40]	; (801300c <check_fs+0xa4>)
 8012fe2:	4293      	cmp	r3, r2
 8012fe4:	d101      	bne.n	8012fea <check_fs+0x82>
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	e00c      	b.n	8013004 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	3338      	adds	r3, #56	; 0x38
 8012fee:	3352      	adds	r3, #82	; 0x52
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f7fe fcbd 	bl	8011970 <ld_dword>
 8012ff6:	4602      	mov	r2, r0
 8012ff8:	4b05      	ldr	r3, [pc, #20]	; (8013010 <check_fs+0xa8>)
 8012ffa:	429a      	cmp	r2, r3
 8012ffc:	d101      	bne.n	8013002 <check_fs+0x9a>
 8012ffe:	2300      	movs	r3, #0
 8013000:	e000      	b.n	8013004 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013002:	2302      	movs	r3, #2
}
 8013004:	4618      	mov	r0, r3
 8013006:	3708      	adds	r7, #8
 8013008:	46bd      	mov	sp, r7
 801300a:	bd80      	pop	{r7, pc}
 801300c:	00544146 	.word	0x00544146
 8013010:	33544146 	.word	0x33544146

08013014 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b096      	sub	sp, #88	; 0x58
 8013018:	af00      	add	r7, sp, #0
 801301a:	60f8      	str	r0, [r7, #12]
 801301c:	60b9      	str	r1, [r7, #8]
 801301e:	4613      	mov	r3, r2
 8013020:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013022:	68bb      	ldr	r3, [r7, #8]
 8013024:	2200      	movs	r2, #0
 8013026:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013028:	68f8      	ldr	r0, [r7, #12]
 801302a:	f7ff ff58 	bl	8012ede <get_ldnumber>
 801302e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013032:	2b00      	cmp	r3, #0
 8013034:	da01      	bge.n	801303a <find_volume+0x26>
 8013036:	230b      	movs	r3, #11
 8013038:	e268      	b.n	801350c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801303a:	4ab0      	ldr	r2, [pc, #704]	; (80132fc <find_volume+0x2e8>)
 801303c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801303e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013042:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013046:	2b00      	cmp	r3, #0
 8013048:	d101      	bne.n	801304e <find_volume+0x3a>
 801304a:	230c      	movs	r3, #12
 801304c:	e25e      	b.n	801350c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801304e:	68bb      	ldr	r3, [r7, #8]
 8013050:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013052:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013054:	79fb      	ldrb	r3, [r7, #7]
 8013056:	f023 0301 	bic.w	r3, r3, #1
 801305a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801305c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801305e:	781b      	ldrb	r3, [r3, #0]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d01a      	beq.n	801309a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013066:	785b      	ldrb	r3, [r3, #1]
 8013068:	4618      	mov	r0, r3
 801306a:	f7fe fbcb 	bl	8011804 <disk_status>
 801306e:	4603      	mov	r3, r0
 8013070:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013074:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013078:	f003 0301 	and.w	r3, r3, #1
 801307c:	2b00      	cmp	r3, #0
 801307e:	d10c      	bne.n	801309a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013080:	79fb      	ldrb	r3, [r7, #7]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d007      	beq.n	8013096 <find_volume+0x82>
 8013086:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801308a:	f003 0304 	and.w	r3, r3, #4
 801308e:	2b00      	cmp	r3, #0
 8013090:	d001      	beq.n	8013096 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8013092:	230a      	movs	r3, #10
 8013094:	e23a      	b.n	801350c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8013096:	2300      	movs	r3, #0
 8013098:	e238      	b.n	801350c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801309a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801309c:	2200      	movs	r2, #0
 801309e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80130a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130a2:	b2da      	uxtb	r2, r3
 80130a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130a6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80130a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130aa:	785b      	ldrb	r3, [r3, #1]
 80130ac:	4618      	mov	r0, r3
 80130ae:	f7fe fbc3 	bl	8011838 <disk_initialize>
 80130b2:	4603      	mov	r3, r0
 80130b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80130b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80130bc:	f003 0301 	and.w	r3, r3, #1
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d001      	beq.n	80130c8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80130c4:	2303      	movs	r3, #3
 80130c6:	e221      	b.n	801350c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80130c8:	79fb      	ldrb	r3, [r7, #7]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d007      	beq.n	80130de <find_volume+0xca>
 80130ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80130d2:	f003 0304 	and.w	r3, r3, #4
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d001      	beq.n	80130de <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80130da:	230a      	movs	r3, #10
 80130dc:	e216      	b.n	801350c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80130de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130e0:	7858      	ldrb	r0, [r3, #1]
 80130e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130e4:	330c      	adds	r3, #12
 80130e6:	461a      	mov	r2, r3
 80130e8:	2102      	movs	r1, #2
 80130ea:	f7fe fc0b 	bl	8011904 <disk_ioctl>
 80130ee:	4603      	mov	r3, r0
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d001      	beq.n	80130f8 <find_volume+0xe4>
 80130f4:	2301      	movs	r3, #1
 80130f6:	e209      	b.n	801350c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80130f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130fa:	899b      	ldrh	r3, [r3, #12]
 80130fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013100:	d80d      	bhi.n	801311e <find_volume+0x10a>
 8013102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013104:	899b      	ldrh	r3, [r3, #12]
 8013106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801310a:	d308      	bcc.n	801311e <find_volume+0x10a>
 801310c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801310e:	899b      	ldrh	r3, [r3, #12]
 8013110:	461a      	mov	r2, r3
 8013112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013114:	899b      	ldrh	r3, [r3, #12]
 8013116:	3b01      	subs	r3, #1
 8013118:	4013      	ands	r3, r2
 801311a:	2b00      	cmp	r3, #0
 801311c:	d001      	beq.n	8013122 <find_volume+0x10e>
 801311e:	2301      	movs	r3, #1
 8013120:	e1f4      	b.n	801350c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013122:	2300      	movs	r3, #0
 8013124:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013126:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013128:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801312a:	f7ff ff1d 	bl	8012f68 <check_fs>
 801312e:	4603      	mov	r3, r0
 8013130:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013134:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013138:	2b02      	cmp	r3, #2
 801313a:	d14b      	bne.n	80131d4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801313c:	2300      	movs	r3, #0
 801313e:	643b      	str	r3, [r7, #64]	; 0x40
 8013140:	e01f      	b.n	8013182 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013144:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8013148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801314a:	011b      	lsls	r3, r3, #4
 801314c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013150:	4413      	add	r3, r2
 8013152:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013156:	3304      	adds	r3, #4
 8013158:	781b      	ldrb	r3, [r3, #0]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d006      	beq.n	801316c <find_volume+0x158>
 801315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013160:	3308      	adds	r3, #8
 8013162:	4618      	mov	r0, r3
 8013164:	f7fe fc04 	bl	8011970 <ld_dword>
 8013168:	4602      	mov	r2, r0
 801316a:	e000      	b.n	801316e <find_volume+0x15a>
 801316c:	2200      	movs	r2, #0
 801316e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013170:	009b      	lsls	r3, r3, #2
 8013172:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8013176:	440b      	add	r3, r1
 8013178:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801317c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801317e:	3301      	adds	r3, #1
 8013180:	643b      	str	r3, [r7, #64]	; 0x40
 8013182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013184:	2b03      	cmp	r3, #3
 8013186:	d9dc      	bls.n	8013142 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013188:	2300      	movs	r3, #0
 801318a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801318c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801318e:	2b00      	cmp	r3, #0
 8013190:	d002      	beq.n	8013198 <find_volume+0x184>
 8013192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013194:	3b01      	subs	r3, #1
 8013196:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801319a:	009b      	lsls	r3, r3, #2
 801319c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80131a0:	4413      	add	r3, r2
 80131a2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80131a6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80131a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d005      	beq.n	80131ba <find_volume+0x1a6>
 80131ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80131b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80131b2:	f7ff fed9 	bl	8012f68 <check_fs>
 80131b6:	4603      	mov	r3, r0
 80131b8:	e000      	b.n	80131bc <find_volume+0x1a8>
 80131ba:	2303      	movs	r3, #3
 80131bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80131c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80131c4:	2b01      	cmp	r3, #1
 80131c6:	d905      	bls.n	80131d4 <find_volume+0x1c0>
 80131c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131ca:	3301      	adds	r3, #1
 80131cc:	643b      	str	r3, [r7, #64]	; 0x40
 80131ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131d0:	2b03      	cmp	r3, #3
 80131d2:	d9e1      	bls.n	8013198 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80131d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80131d8:	2b04      	cmp	r3, #4
 80131da:	d101      	bne.n	80131e0 <find_volume+0x1cc>
 80131dc:	2301      	movs	r3, #1
 80131de:	e195      	b.n	801350c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80131e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80131e4:	2b01      	cmp	r3, #1
 80131e6:	d901      	bls.n	80131ec <find_volume+0x1d8>
 80131e8:	230d      	movs	r3, #13
 80131ea:	e18f      	b.n	801350c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80131ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ee:	3338      	adds	r3, #56	; 0x38
 80131f0:	330b      	adds	r3, #11
 80131f2:	4618      	mov	r0, r3
 80131f4:	f7fe fba4 	bl	8011940 <ld_word>
 80131f8:	4603      	mov	r3, r0
 80131fa:	461a      	mov	r2, r3
 80131fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131fe:	899b      	ldrh	r3, [r3, #12]
 8013200:	429a      	cmp	r2, r3
 8013202:	d001      	beq.n	8013208 <find_volume+0x1f4>
 8013204:	230d      	movs	r3, #13
 8013206:	e181      	b.n	801350c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801320a:	3338      	adds	r3, #56	; 0x38
 801320c:	3316      	adds	r3, #22
 801320e:	4618      	mov	r0, r3
 8013210:	f7fe fb96 	bl	8011940 <ld_word>
 8013214:	4603      	mov	r3, r0
 8013216:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801321a:	2b00      	cmp	r3, #0
 801321c:	d106      	bne.n	801322c <find_volume+0x218>
 801321e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013220:	3338      	adds	r3, #56	; 0x38
 8013222:	3324      	adds	r3, #36	; 0x24
 8013224:	4618      	mov	r0, r3
 8013226:	f7fe fba3 	bl	8011970 <ld_dword>
 801322a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801322c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801322e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013230:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013234:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8013238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801323a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801323c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801323e:	789b      	ldrb	r3, [r3, #2]
 8013240:	2b01      	cmp	r3, #1
 8013242:	d005      	beq.n	8013250 <find_volume+0x23c>
 8013244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013246:	789b      	ldrb	r3, [r3, #2]
 8013248:	2b02      	cmp	r3, #2
 801324a:	d001      	beq.n	8013250 <find_volume+0x23c>
 801324c:	230d      	movs	r3, #13
 801324e:	e15d      	b.n	801350c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013252:	789b      	ldrb	r3, [r3, #2]
 8013254:	461a      	mov	r2, r3
 8013256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013258:	fb02 f303 	mul.w	r3, r2, r3
 801325c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801325e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013264:	b29a      	uxth	r2, r3
 8013266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013268:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801326a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801326c:	895b      	ldrh	r3, [r3, #10]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d008      	beq.n	8013284 <find_volume+0x270>
 8013272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013274:	895b      	ldrh	r3, [r3, #10]
 8013276:	461a      	mov	r2, r3
 8013278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801327a:	895b      	ldrh	r3, [r3, #10]
 801327c:	3b01      	subs	r3, #1
 801327e:	4013      	ands	r3, r2
 8013280:	2b00      	cmp	r3, #0
 8013282:	d001      	beq.n	8013288 <find_volume+0x274>
 8013284:	230d      	movs	r3, #13
 8013286:	e141      	b.n	801350c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801328a:	3338      	adds	r3, #56	; 0x38
 801328c:	3311      	adds	r3, #17
 801328e:	4618      	mov	r0, r3
 8013290:	f7fe fb56 	bl	8011940 <ld_word>
 8013294:	4603      	mov	r3, r0
 8013296:	461a      	mov	r2, r3
 8013298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801329a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801329c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801329e:	891b      	ldrh	r3, [r3, #8]
 80132a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80132a2:	8992      	ldrh	r2, [r2, #12]
 80132a4:	0952      	lsrs	r2, r2, #5
 80132a6:	b292      	uxth	r2, r2
 80132a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80132ac:	fb02 f201 	mul.w	r2, r2, r1
 80132b0:	1a9b      	subs	r3, r3, r2
 80132b2:	b29b      	uxth	r3, r3
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d001      	beq.n	80132bc <find_volume+0x2a8>
 80132b8:	230d      	movs	r3, #13
 80132ba:	e127      	b.n	801350c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80132bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132be:	3338      	adds	r3, #56	; 0x38
 80132c0:	3313      	adds	r3, #19
 80132c2:	4618      	mov	r0, r3
 80132c4:	f7fe fb3c 	bl	8011940 <ld_word>
 80132c8:	4603      	mov	r3, r0
 80132ca:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80132cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d106      	bne.n	80132e0 <find_volume+0x2cc>
 80132d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132d4:	3338      	adds	r3, #56	; 0x38
 80132d6:	3320      	adds	r3, #32
 80132d8:	4618      	mov	r0, r3
 80132da:	f7fe fb49 	bl	8011970 <ld_dword>
 80132de:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80132e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132e2:	3338      	adds	r3, #56	; 0x38
 80132e4:	330e      	adds	r3, #14
 80132e6:	4618      	mov	r0, r3
 80132e8:	f7fe fb2a 	bl	8011940 <ld_word>
 80132ec:	4603      	mov	r3, r0
 80132ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80132f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d104      	bne.n	8013300 <find_volume+0x2ec>
 80132f6:	230d      	movs	r3, #13
 80132f8:	e108      	b.n	801350c <find_volume+0x4f8>
 80132fa:	bf00      	nop
 80132fc:	20042464 	.word	0x20042464

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013300:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013304:	4413      	add	r3, r2
 8013306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013308:	8911      	ldrh	r1, [r2, #8]
 801330a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801330c:	8992      	ldrh	r2, [r2, #12]
 801330e:	0952      	lsrs	r2, r2, #5
 8013310:	b292      	uxth	r2, r2
 8013312:	fbb1 f2f2 	udiv	r2, r1, r2
 8013316:	b292      	uxth	r2, r2
 8013318:	4413      	add	r3, r2
 801331a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801331c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801331e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013320:	429a      	cmp	r2, r3
 8013322:	d201      	bcs.n	8013328 <find_volume+0x314>
 8013324:	230d      	movs	r3, #13
 8013326:	e0f1      	b.n	801350c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801332c:	1ad3      	subs	r3, r2, r3
 801332e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013330:	8952      	ldrh	r2, [r2, #10]
 8013332:	fbb3 f3f2 	udiv	r3, r3, r2
 8013336:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801333a:	2b00      	cmp	r3, #0
 801333c:	d101      	bne.n	8013342 <find_volume+0x32e>
 801333e:	230d      	movs	r3, #13
 8013340:	e0e4      	b.n	801350c <find_volume+0x4f8>
		fmt = FS_FAT32;
 8013342:	2303      	movs	r3, #3
 8013344:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801334a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801334e:	4293      	cmp	r3, r2
 8013350:	d802      	bhi.n	8013358 <find_volume+0x344>
 8013352:	2302      	movs	r3, #2
 8013354:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801335a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801335e:	4293      	cmp	r3, r2
 8013360:	d802      	bhi.n	8013368 <find_volume+0x354>
 8013362:	2301      	movs	r3, #1
 8013364:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801336a:	1c9a      	adds	r2, r3, #2
 801336c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801336e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8013370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013372:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013374:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013376:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801337a:	441a      	add	r2, r3
 801337c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801337e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8013380:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013384:	441a      	add	r2, r3
 8013386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013388:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801338a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801338e:	2b03      	cmp	r3, #3
 8013390:	d11e      	bne.n	80133d0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013394:	3338      	adds	r3, #56	; 0x38
 8013396:	332a      	adds	r3, #42	; 0x2a
 8013398:	4618      	mov	r0, r3
 801339a:	f7fe fad1 	bl	8011940 <ld_word>
 801339e:	4603      	mov	r3, r0
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d001      	beq.n	80133a8 <find_volume+0x394>
 80133a4:	230d      	movs	r3, #13
 80133a6:	e0b1      	b.n	801350c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80133a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133aa:	891b      	ldrh	r3, [r3, #8]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d001      	beq.n	80133b4 <find_volume+0x3a0>
 80133b0:	230d      	movs	r3, #13
 80133b2:	e0ab      	b.n	801350c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80133b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133b6:	3338      	adds	r3, #56	; 0x38
 80133b8:	332c      	adds	r3, #44	; 0x2c
 80133ba:	4618      	mov	r0, r3
 80133bc:	f7fe fad8 	bl	8011970 <ld_dword>
 80133c0:	4602      	mov	r2, r0
 80133c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133c4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80133c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133c8:	69db      	ldr	r3, [r3, #28]
 80133ca:	009b      	lsls	r3, r3, #2
 80133cc:	647b      	str	r3, [r7, #68]	; 0x44
 80133ce:	e01f      	b.n	8013410 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80133d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133d2:	891b      	ldrh	r3, [r3, #8]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d101      	bne.n	80133dc <find_volume+0x3c8>
 80133d8:	230d      	movs	r3, #13
 80133da:	e097      	b.n	801350c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80133dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80133e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133e2:	441a      	add	r2, r3
 80133e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133e6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80133e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80133ec:	2b02      	cmp	r3, #2
 80133ee:	d103      	bne.n	80133f8 <find_volume+0x3e4>
 80133f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133f2:	69db      	ldr	r3, [r3, #28]
 80133f4:	005b      	lsls	r3, r3, #1
 80133f6:	e00a      	b.n	801340e <find_volume+0x3fa>
 80133f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133fa:	69da      	ldr	r2, [r3, #28]
 80133fc:	4613      	mov	r3, r2
 80133fe:	005b      	lsls	r3, r3, #1
 8013400:	4413      	add	r3, r2
 8013402:	085a      	lsrs	r2, r3, #1
 8013404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013406:	69db      	ldr	r3, [r3, #28]
 8013408:	f003 0301 	and.w	r3, r3, #1
 801340c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801340e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013412:	6a1a      	ldr	r2, [r3, #32]
 8013414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013416:	899b      	ldrh	r3, [r3, #12]
 8013418:	4619      	mov	r1, r3
 801341a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801341c:	440b      	add	r3, r1
 801341e:	3b01      	subs	r3, #1
 8013420:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013422:	8989      	ldrh	r1, [r1, #12]
 8013424:	fbb3 f3f1 	udiv	r3, r3, r1
 8013428:	429a      	cmp	r2, r3
 801342a:	d201      	bcs.n	8013430 <find_volume+0x41c>
 801342c:	230d      	movs	r3, #13
 801342e:	e06d      	b.n	801350c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013432:	f04f 32ff 	mov.w	r2, #4294967295
 8013436:	615a      	str	r2, [r3, #20]
 8013438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801343a:	695a      	ldr	r2, [r3, #20]
 801343c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801343e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013442:	2280      	movs	r2, #128	; 0x80
 8013444:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013446:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801344a:	2b03      	cmp	r3, #3
 801344c:	d149      	bne.n	80134e2 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801344e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013450:	3338      	adds	r3, #56	; 0x38
 8013452:	3330      	adds	r3, #48	; 0x30
 8013454:	4618      	mov	r0, r3
 8013456:	f7fe fa73 	bl	8011940 <ld_word>
 801345a:	4603      	mov	r3, r0
 801345c:	2b01      	cmp	r3, #1
 801345e:	d140      	bne.n	80134e2 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013462:	3301      	adds	r3, #1
 8013464:	4619      	mov	r1, r3
 8013466:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013468:	f7fe fd1a 	bl	8011ea0 <move_window>
 801346c:	4603      	mov	r3, r0
 801346e:	2b00      	cmp	r3, #0
 8013470:	d137      	bne.n	80134e2 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8013472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013474:	2200      	movs	r2, #0
 8013476:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801347a:	3338      	adds	r3, #56	; 0x38
 801347c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013480:	4618      	mov	r0, r3
 8013482:	f7fe fa5d 	bl	8011940 <ld_word>
 8013486:	4603      	mov	r3, r0
 8013488:	461a      	mov	r2, r3
 801348a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801348e:	429a      	cmp	r2, r3
 8013490:	d127      	bne.n	80134e2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013494:	3338      	adds	r3, #56	; 0x38
 8013496:	4618      	mov	r0, r3
 8013498:	f7fe fa6a 	bl	8011970 <ld_dword>
 801349c:	4602      	mov	r2, r0
 801349e:	4b1d      	ldr	r3, [pc, #116]	; (8013514 <find_volume+0x500>)
 80134a0:	429a      	cmp	r2, r3
 80134a2:	d11e      	bne.n	80134e2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80134a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134a6:	3338      	adds	r3, #56	; 0x38
 80134a8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80134ac:	4618      	mov	r0, r3
 80134ae:	f7fe fa5f 	bl	8011970 <ld_dword>
 80134b2:	4602      	mov	r2, r0
 80134b4:	4b18      	ldr	r3, [pc, #96]	; (8013518 <find_volume+0x504>)
 80134b6:	429a      	cmp	r2, r3
 80134b8:	d113      	bne.n	80134e2 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80134ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134bc:	3338      	adds	r3, #56	; 0x38
 80134be:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80134c2:	4618      	mov	r0, r3
 80134c4:	f7fe fa54 	bl	8011970 <ld_dword>
 80134c8:	4602      	mov	r2, r0
 80134ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134cc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80134ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134d0:	3338      	adds	r3, #56	; 0x38
 80134d2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80134d6:	4618      	mov	r0, r3
 80134d8:	f7fe fa4a 	bl	8011970 <ld_dword>
 80134dc:	4602      	mov	r2, r0
 80134de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134e0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80134e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134e4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80134e8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80134ea:	4b0c      	ldr	r3, [pc, #48]	; (801351c <find_volume+0x508>)
 80134ec:	881b      	ldrh	r3, [r3, #0]
 80134ee:	3301      	adds	r3, #1
 80134f0:	b29a      	uxth	r2, r3
 80134f2:	4b0a      	ldr	r3, [pc, #40]	; (801351c <find_volume+0x508>)
 80134f4:	801a      	strh	r2, [r3, #0]
 80134f6:	4b09      	ldr	r3, [pc, #36]	; (801351c <find_volume+0x508>)
 80134f8:	881a      	ldrh	r2, [r3, #0]
 80134fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134fc:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80134fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013500:	2200      	movs	r2, #0
 8013502:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013504:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013506:	f7fe fc63 	bl	8011dd0 <clear_lock>
#endif
	return FR_OK;
 801350a:	2300      	movs	r3, #0
}
 801350c:	4618      	mov	r0, r3
 801350e:	3758      	adds	r7, #88	; 0x58
 8013510:	46bd      	mov	sp, r7
 8013512:	bd80      	pop	{r7, pc}
 8013514:	41615252 	.word	0x41615252
 8013518:	61417272 	.word	0x61417272
 801351c:	20042468 	.word	0x20042468

08013520 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013520:	b580      	push	{r7, lr}
 8013522:	b084      	sub	sp, #16
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
 8013528:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801352a:	2309      	movs	r3, #9
 801352c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d01c      	beq.n	801356e <validate+0x4e>
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d018      	beq.n	801356e <validate+0x4e>
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	781b      	ldrb	r3, [r3, #0]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d013      	beq.n	801356e <validate+0x4e>
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	889a      	ldrh	r2, [r3, #4]
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	88db      	ldrh	r3, [r3, #6]
 8013550:	429a      	cmp	r2, r3
 8013552:	d10c      	bne.n	801356e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	785b      	ldrb	r3, [r3, #1]
 801355a:	4618      	mov	r0, r3
 801355c:	f7fe f952 	bl	8011804 <disk_status>
 8013560:	4603      	mov	r3, r0
 8013562:	f003 0301 	and.w	r3, r3, #1
 8013566:	2b00      	cmp	r3, #0
 8013568:	d101      	bne.n	801356e <validate+0x4e>
			res = FR_OK;
 801356a:	2300      	movs	r3, #0
 801356c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801356e:	7bfb      	ldrb	r3, [r7, #15]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d102      	bne.n	801357a <validate+0x5a>
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	e000      	b.n	801357c <validate+0x5c>
 801357a:	2300      	movs	r3, #0
 801357c:	683a      	ldr	r2, [r7, #0]
 801357e:	6013      	str	r3, [r2, #0]
	return res;
 8013580:	7bfb      	ldrb	r3, [r7, #15]
}
 8013582:	4618      	mov	r0, r3
 8013584:	3710      	adds	r7, #16
 8013586:	46bd      	mov	sp, r7
 8013588:	bd80      	pop	{r7, pc}
	...

0801358c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b088      	sub	sp, #32
 8013590:	af00      	add	r7, sp, #0
 8013592:	60f8      	str	r0, [r7, #12]
 8013594:	60b9      	str	r1, [r7, #8]
 8013596:	4613      	mov	r3, r2
 8013598:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801359a:	68bb      	ldr	r3, [r7, #8]
 801359c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801359e:	f107 0310 	add.w	r3, r7, #16
 80135a2:	4618      	mov	r0, r3
 80135a4:	f7ff fc9b 	bl	8012ede <get_ldnumber>
 80135a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80135aa:	69fb      	ldr	r3, [r7, #28]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	da01      	bge.n	80135b4 <f_mount+0x28>
 80135b0:	230b      	movs	r3, #11
 80135b2:	e02b      	b.n	801360c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80135b4:	4a17      	ldr	r2, [pc, #92]	; (8013614 <f_mount+0x88>)
 80135b6:	69fb      	ldr	r3, [r7, #28]
 80135b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80135bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80135be:	69bb      	ldr	r3, [r7, #24]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d005      	beq.n	80135d0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80135c4:	69b8      	ldr	r0, [r7, #24]
 80135c6:	f7fe fc03 	bl	8011dd0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80135ca:	69bb      	ldr	r3, [r7, #24]
 80135cc:	2200      	movs	r2, #0
 80135ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d002      	beq.n	80135dc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	2200      	movs	r2, #0
 80135da:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80135dc:	68fa      	ldr	r2, [r7, #12]
 80135de:	490d      	ldr	r1, [pc, #52]	; (8013614 <f_mount+0x88>)
 80135e0:	69fb      	ldr	r3, [r7, #28]
 80135e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d002      	beq.n	80135f2 <f_mount+0x66>
 80135ec:	79fb      	ldrb	r3, [r7, #7]
 80135ee:	2b01      	cmp	r3, #1
 80135f0:	d001      	beq.n	80135f6 <f_mount+0x6a>
 80135f2:	2300      	movs	r3, #0
 80135f4:	e00a      	b.n	801360c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80135f6:	f107 010c 	add.w	r1, r7, #12
 80135fa:	f107 0308 	add.w	r3, r7, #8
 80135fe:	2200      	movs	r2, #0
 8013600:	4618      	mov	r0, r3
 8013602:	f7ff fd07 	bl	8013014 <find_volume>
 8013606:	4603      	mov	r3, r0
 8013608:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801360a:	7dfb      	ldrb	r3, [r7, #23]
}
 801360c:	4618      	mov	r0, r3
 801360e:	3720      	adds	r7, #32
 8013610:	46bd      	mov	sp, r7
 8013612:	bd80      	pop	{r7, pc}
 8013614:	20042464 	.word	0x20042464

08013618 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b098      	sub	sp, #96	; 0x60
 801361c:	af00      	add	r7, sp, #0
 801361e:	60f8      	str	r0, [r7, #12]
 8013620:	60b9      	str	r1, [r7, #8]
 8013622:	4613      	mov	r3, r2
 8013624:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	2b00      	cmp	r3, #0
 801362a:	d101      	bne.n	8013630 <f_open+0x18>
 801362c:	2309      	movs	r3, #9
 801362e:	e1ba      	b.n	80139a6 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013630:	79fb      	ldrb	r3, [r7, #7]
 8013632:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013636:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013638:	79fa      	ldrb	r2, [r7, #7]
 801363a:	f107 0110 	add.w	r1, r7, #16
 801363e:	f107 0308 	add.w	r3, r7, #8
 8013642:	4618      	mov	r0, r3
 8013644:	f7ff fce6 	bl	8013014 <find_volume>
 8013648:	4603      	mov	r3, r0
 801364a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801364e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013652:	2b00      	cmp	r3, #0
 8013654:	f040 819e 	bne.w	8013994 <f_open+0x37c>
		dj.obj.fs = fs;
 8013658:	693b      	ldr	r3, [r7, #16]
 801365a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801365c:	68ba      	ldr	r2, [r7, #8]
 801365e:	f107 0314 	add.w	r3, r7, #20
 8013662:	4611      	mov	r1, r2
 8013664:	4618      	mov	r0, r3
 8013666:	f7ff fba5 	bl	8012db4 <follow_path>
 801366a:	4603      	mov	r3, r0
 801366c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013670:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013674:	2b00      	cmp	r3, #0
 8013676:	d11a      	bne.n	80136ae <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013678:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801367c:	b25b      	sxtb	r3, r3
 801367e:	2b00      	cmp	r3, #0
 8013680:	da03      	bge.n	801368a <f_open+0x72>
				res = FR_INVALID_NAME;
 8013682:	2306      	movs	r3, #6
 8013684:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013688:	e011      	b.n	80136ae <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801368a:	79fb      	ldrb	r3, [r7, #7]
 801368c:	f023 0301 	bic.w	r3, r3, #1
 8013690:	2b00      	cmp	r3, #0
 8013692:	bf14      	ite	ne
 8013694:	2301      	movne	r3, #1
 8013696:	2300      	moveq	r3, #0
 8013698:	b2db      	uxtb	r3, r3
 801369a:	461a      	mov	r2, r3
 801369c:	f107 0314 	add.w	r3, r7, #20
 80136a0:	4611      	mov	r1, r2
 80136a2:	4618      	mov	r0, r3
 80136a4:	f7fe fa4c 	bl	8011b40 <chk_lock>
 80136a8:	4603      	mov	r3, r0
 80136aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80136ae:	79fb      	ldrb	r3, [r7, #7]
 80136b0:	f003 031c 	and.w	r3, r3, #28
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d07e      	beq.n	80137b6 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 80136b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d017      	beq.n	80136f0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80136c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80136c4:	2b04      	cmp	r3, #4
 80136c6:	d10e      	bne.n	80136e6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80136c8:	f7fe fa96 	bl	8011bf8 <enq_lock>
 80136cc:	4603      	mov	r3, r0
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d006      	beq.n	80136e0 <f_open+0xc8>
 80136d2:	f107 0314 	add.w	r3, r7, #20
 80136d6:	4618      	mov	r0, r3
 80136d8:	f7ff fa52 	bl	8012b80 <dir_register>
 80136dc:	4603      	mov	r3, r0
 80136de:	e000      	b.n	80136e2 <f_open+0xca>
 80136e0:	2312      	movs	r3, #18
 80136e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80136e6:	79fb      	ldrb	r3, [r7, #7]
 80136e8:	f043 0308 	orr.w	r3, r3, #8
 80136ec:	71fb      	strb	r3, [r7, #7]
 80136ee:	e010      	b.n	8013712 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80136f0:	7ebb      	ldrb	r3, [r7, #26]
 80136f2:	f003 0311 	and.w	r3, r3, #17
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d003      	beq.n	8013702 <f_open+0xea>
					res = FR_DENIED;
 80136fa:	2307      	movs	r3, #7
 80136fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013700:	e007      	b.n	8013712 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013702:	79fb      	ldrb	r3, [r7, #7]
 8013704:	f003 0304 	and.w	r3, r3, #4
 8013708:	2b00      	cmp	r3, #0
 801370a:	d002      	beq.n	8013712 <f_open+0xfa>
 801370c:	2308      	movs	r3, #8
 801370e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013712:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013716:	2b00      	cmp	r3, #0
 8013718:	d167      	bne.n	80137ea <f_open+0x1d2>
 801371a:	79fb      	ldrb	r3, [r7, #7]
 801371c:	f003 0308 	and.w	r3, r3, #8
 8013720:	2b00      	cmp	r3, #0
 8013722:	d062      	beq.n	80137ea <f_open+0x1d2>
				dw = GET_FATTIME();
 8013724:	4ba2      	ldr	r3, [pc, #648]	; (80139b0 <f_open+0x398>)
 8013726:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801372a:	330e      	adds	r3, #14
 801372c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801372e:	4618      	mov	r0, r3
 8013730:	f7fe f95c 	bl	80119ec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013736:	3316      	adds	r3, #22
 8013738:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801373a:	4618      	mov	r0, r3
 801373c:	f7fe f956 	bl	80119ec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013742:	330b      	adds	r3, #11
 8013744:	2220      	movs	r2, #32
 8013746:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013748:	693b      	ldr	r3, [r7, #16]
 801374a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801374c:	4611      	mov	r1, r2
 801374e:	4618      	mov	r0, r3
 8013750:	f7ff f925 	bl	801299e <ld_clust>
 8013754:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013756:	693b      	ldr	r3, [r7, #16]
 8013758:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801375a:	2200      	movs	r2, #0
 801375c:	4618      	mov	r0, r3
 801375e:	f7ff f93d 	bl	80129dc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013764:	331c      	adds	r3, #28
 8013766:	2100      	movs	r1, #0
 8013768:	4618      	mov	r0, r3
 801376a:	f7fe f93f 	bl	80119ec <st_dword>
					fs->wflag = 1;
 801376e:	693b      	ldr	r3, [r7, #16]
 8013770:	2201      	movs	r2, #1
 8013772:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013776:	2b00      	cmp	r3, #0
 8013778:	d037      	beq.n	80137ea <f_open+0x1d2>
						dw = fs->winsect;
 801377a:	693b      	ldr	r3, [r7, #16]
 801377c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801377e:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013780:	f107 0314 	add.w	r3, r7, #20
 8013784:	2200      	movs	r2, #0
 8013786:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013788:	4618      	mov	r0, r3
 801378a:	f7fe fe2d 	bl	80123e8 <remove_chain>
 801378e:	4603      	mov	r3, r0
 8013790:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8013794:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013798:	2b00      	cmp	r3, #0
 801379a:	d126      	bne.n	80137ea <f_open+0x1d2>
							res = move_window(fs, dw);
 801379c:	693b      	ldr	r3, [r7, #16]
 801379e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80137a0:	4618      	mov	r0, r3
 80137a2:	f7fe fb7d 	bl	8011ea0 <move_window>
 80137a6:	4603      	mov	r3, r0
 80137a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80137ac:	693b      	ldr	r3, [r7, #16]
 80137ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80137b0:	3a01      	subs	r2, #1
 80137b2:	611a      	str	r2, [r3, #16]
 80137b4:	e019      	b.n	80137ea <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80137b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d115      	bne.n	80137ea <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80137be:	7ebb      	ldrb	r3, [r7, #26]
 80137c0:	f003 0310 	and.w	r3, r3, #16
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d003      	beq.n	80137d0 <f_open+0x1b8>
					res = FR_NO_FILE;
 80137c8:	2304      	movs	r3, #4
 80137ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80137ce:	e00c      	b.n	80137ea <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80137d0:	79fb      	ldrb	r3, [r7, #7]
 80137d2:	f003 0302 	and.w	r3, r3, #2
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d007      	beq.n	80137ea <f_open+0x1d2>
 80137da:	7ebb      	ldrb	r3, [r7, #26]
 80137dc:	f003 0301 	and.w	r3, r3, #1
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d002      	beq.n	80137ea <f_open+0x1d2>
						res = FR_DENIED;
 80137e4:	2307      	movs	r3, #7
 80137e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80137ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d128      	bne.n	8013844 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80137f2:	79fb      	ldrb	r3, [r7, #7]
 80137f4:	f003 0308 	and.w	r3, r3, #8
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d003      	beq.n	8013804 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 80137fc:	79fb      	ldrb	r3, [r7, #7]
 80137fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013802:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013804:	693b      	ldr	r3, [r7, #16]
 8013806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801380c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013812:	79fb      	ldrb	r3, [r7, #7]
 8013814:	f023 0301 	bic.w	r3, r3, #1
 8013818:	2b00      	cmp	r3, #0
 801381a:	bf14      	ite	ne
 801381c:	2301      	movne	r3, #1
 801381e:	2300      	moveq	r3, #0
 8013820:	b2db      	uxtb	r3, r3
 8013822:	461a      	mov	r2, r3
 8013824:	f107 0314 	add.w	r3, r7, #20
 8013828:	4611      	mov	r1, r2
 801382a:	4618      	mov	r0, r3
 801382c:	f7fe fa06 	bl	8011c3c <inc_lock>
 8013830:	4602      	mov	r2, r0
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	691b      	ldr	r3, [r3, #16]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d102      	bne.n	8013844 <f_open+0x22c>
 801383e:	2302      	movs	r3, #2
 8013840:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013844:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013848:	2b00      	cmp	r3, #0
 801384a:	f040 80a3 	bne.w	8013994 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801384e:	693b      	ldr	r3, [r7, #16]
 8013850:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013852:	4611      	mov	r1, r2
 8013854:	4618      	mov	r0, r3
 8013856:	f7ff f8a2 	bl	801299e <ld_clust>
 801385a:	4602      	mov	r2, r0
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013862:	331c      	adds	r3, #28
 8013864:	4618      	mov	r0, r3
 8013866:	f7fe f883 	bl	8011970 <ld_dword>
 801386a:	4602      	mov	r2, r0
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	2200      	movs	r2, #0
 8013874:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013876:	693a      	ldr	r2, [r7, #16]
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801387c:	693b      	ldr	r3, [r7, #16]
 801387e:	88da      	ldrh	r2, [r3, #6]
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	79fa      	ldrb	r2, [r7, #7]
 8013888:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	2200      	movs	r2, #0
 801388e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	2200      	movs	r2, #0
 8013894:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	2200      	movs	r2, #0
 801389a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	3330      	adds	r3, #48	; 0x30
 80138a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80138a4:	2100      	movs	r1, #0
 80138a6:	4618      	mov	r0, r3
 80138a8:	f7fe f8ed 	bl	8011a86 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80138ac:	79fb      	ldrb	r3, [r7, #7]
 80138ae:	f003 0320 	and.w	r3, r3, #32
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d06e      	beq.n	8013994 <f_open+0x37c>
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	68db      	ldr	r3, [r3, #12]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d06a      	beq.n	8013994 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	68da      	ldr	r2, [r3, #12]
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80138c6:	693b      	ldr	r3, [r7, #16]
 80138c8:	895b      	ldrh	r3, [r3, #10]
 80138ca:	461a      	mov	r2, r3
 80138cc:	693b      	ldr	r3, [r7, #16]
 80138ce:	899b      	ldrh	r3, [r3, #12]
 80138d0:	fb03 f302 	mul.w	r3, r3, r2
 80138d4:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	689b      	ldr	r3, [r3, #8]
 80138da:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	68db      	ldr	r3, [r3, #12]
 80138e0:	657b      	str	r3, [r7, #84]	; 0x54
 80138e2:	e016      	b.n	8013912 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80138e8:	4618      	mov	r0, r3
 80138ea:	f7fe fb96 	bl	801201a <get_fat>
 80138ee:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80138f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80138f2:	2b01      	cmp	r3, #1
 80138f4:	d802      	bhi.n	80138fc <f_open+0x2e4>
 80138f6:	2302      	movs	r3, #2
 80138f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80138fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80138fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013902:	d102      	bne.n	801390a <f_open+0x2f2>
 8013904:	2301      	movs	r3, #1
 8013906:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801390a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801390c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801390e:	1ad3      	subs	r3, r2, r3
 8013910:	657b      	str	r3, [r7, #84]	; 0x54
 8013912:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013916:	2b00      	cmp	r3, #0
 8013918:	d103      	bne.n	8013922 <f_open+0x30a>
 801391a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801391c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801391e:	429a      	cmp	r2, r3
 8013920:	d8e0      	bhi.n	80138e4 <f_open+0x2cc>
				}
				fp->clust = clst;
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013926:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013928:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801392c:	2b00      	cmp	r3, #0
 801392e:	d131      	bne.n	8013994 <f_open+0x37c>
 8013930:	693b      	ldr	r3, [r7, #16]
 8013932:	899b      	ldrh	r3, [r3, #12]
 8013934:	461a      	mov	r2, r3
 8013936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013938:	fbb3 f1f2 	udiv	r1, r3, r2
 801393c:	fb02 f201 	mul.w	r2, r2, r1
 8013940:	1a9b      	subs	r3, r3, r2
 8013942:	2b00      	cmp	r3, #0
 8013944:	d026      	beq.n	8013994 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013946:	693b      	ldr	r3, [r7, #16]
 8013948:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801394a:	4618      	mov	r0, r3
 801394c:	f7fe fb46 	bl	8011fdc <clust2sect>
 8013950:	6478      	str	r0, [r7, #68]	; 0x44
 8013952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013954:	2b00      	cmp	r3, #0
 8013956:	d103      	bne.n	8013960 <f_open+0x348>
						res = FR_INT_ERR;
 8013958:	2302      	movs	r3, #2
 801395a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801395e:	e019      	b.n	8013994 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013960:	693b      	ldr	r3, [r7, #16]
 8013962:	899b      	ldrh	r3, [r3, #12]
 8013964:	461a      	mov	r2, r3
 8013966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013968:	fbb3 f2f2 	udiv	r2, r3, r2
 801396c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801396e:	441a      	add	r2, r3
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013974:	693b      	ldr	r3, [r7, #16]
 8013976:	7858      	ldrb	r0, [r3, #1]
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	6a1a      	ldr	r2, [r3, #32]
 8013982:	2301      	movs	r3, #1
 8013984:	f7fd ff7e 	bl	8011884 <disk_read>
 8013988:	4603      	mov	r3, r0
 801398a:	2b00      	cmp	r3, #0
 801398c:	d002      	beq.n	8013994 <f_open+0x37c>
 801398e:	2301      	movs	r3, #1
 8013990:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013994:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013998:	2b00      	cmp	r3, #0
 801399a:	d002      	beq.n	80139a2 <f_open+0x38a>
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	2200      	movs	r2, #0
 80139a0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80139a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80139a6:	4618      	mov	r0, r3
 80139a8:	3760      	adds	r7, #96	; 0x60
 80139aa:	46bd      	mov	sp, r7
 80139ac:	bd80      	pop	{r7, pc}
 80139ae:	bf00      	nop
 80139b0:	274a0000 	.word	0x274a0000

080139b4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b08e      	sub	sp, #56	; 0x38
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	60f8      	str	r0, [r7, #12]
 80139bc:	60b9      	str	r1, [r7, #8]
 80139be:	607a      	str	r2, [r7, #4]
 80139c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80139c2:	68bb      	ldr	r3, [r7, #8]
 80139c4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80139c6:	683b      	ldr	r3, [r7, #0]
 80139c8:	2200      	movs	r2, #0
 80139ca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	f107 0214 	add.w	r2, r7, #20
 80139d2:	4611      	mov	r1, r2
 80139d4:	4618      	mov	r0, r3
 80139d6:	f7ff fda3 	bl	8013520 <validate>
 80139da:	4603      	mov	r3, r0
 80139dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80139e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d107      	bne.n	80139f8 <f_read+0x44>
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	7d5b      	ldrb	r3, [r3, #21]
 80139ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80139f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d002      	beq.n	80139fe <f_read+0x4a>
 80139f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80139fc:	e135      	b.n	8013c6a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	7d1b      	ldrb	r3, [r3, #20]
 8013a02:	f003 0301 	and.w	r3, r3, #1
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d101      	bne.n	8013a0e <f_read+0x5a>
 8013a0a:	2307      	movs	r3, #7
 8013a0c:	e12d      	b.n	8013c6a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	68da      	ldr	r2, [r3, #12]
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	699b      	ldr	r3, [r3, #24]
 8013a16:	1ad3      	subs	r3, r2, r3
 8013a18:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8013a1a:	687a      	ldr	r2, [r7, #4]
 8013a1c:	6a3b      	ldr	r3, [r7, #32]
 8013a1e:	429a      	cmp	r2, r3
 8013a20:	f240 811e 	bls.w	8013c60 <f_read+0x2ac>
 8013a24:	6a3b      	ldr	r3, [r7, #32]
 8013a26:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013a28:	e11a      	b.n	8013c60 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	699b      	ldr	r3, [r3, #24]
 8013a2e:	697a      	ldr	r2, [r7, #20]
 8013a30:	8992      	ldrh	r2, [r2, #12]
 8013a32:	fbb3 f1f2 	udiv	r1, r3, r2
 8013a36:	fb02 f201 	mul.w	r2, r2, r1
 8013a3a:	1a9b      	subs	r3, r3, r2
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	f040 80d5 	bne.w	8013bec <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	699b      	ldr	r3, [r3, #24]
 8013a46:	697a      	ldr	r2, [r7, #20]
 8013a48:	8992      	ldrh	r2, [r2, #12]
 8013a4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a4e:	697a      	ldr	r2, [r7, #20]
 8013a50:	8952      	ldrh	r2, [r2, #10]
 8013a52:	3a01      	subs	r2, #1
 8013a54:	4013      	ands	r3, r2
 8013a56:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013a58:	69fb      	ldr	r3, [r7, #28]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d12f      	bne.n	8013abe <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	699b      	ldr	r3, [r3, #24]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d103      	bne.n	8013a6e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	689b      	ldr	r3, [r3, #8]
 8013a6a:	633b      	str	r3, [r7, #48]	; 0x30
 8013a6c:	e013      	b.n	8013a96 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d007      	beq.n	8013a86 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	699b      	ldr	r3, [r3, #24]
 8013a7a:	4619      	mov	r1, r3
 8013a7c:	68f8      	ldr	r0, [r7, #12]
 8013a7e:	f7fe fdb0 	bl	80125e2 <clmt_clust>
 8013a82:	6338      	str	r0, [r7, #48]	; 0x30
 8013a84:	e007      	b.n	8013a96 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8013a86:	68fa      	ldr	r2, [r7, #12]
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	69db      	ldr	r3, [r3, #28]
 8013a8c:	4619      	mov	r1, r3
 8013a8e:	4610      	mov	r0, r2
 8013a90:	f7fe fac3 	bl	801201a <get_fat>
 8013a94:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a98:	2b01      	cmp	r3, #1
 8013a9a:	d804      	bhi.n	8013aa6 <f_read+0xf2>
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	2202      	movs	r2, #2
 8013aa0:	755a      	strb	r2, [r3, #21]
 8013aa2:	2302      	movs	r3, #2
 8013aa4:	e0e1      	b.n	8013c6a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aac:	d104      	bne.n	8013ab8 <f_read+0x104>
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	2201      	movs	r2, #1
 8013ab2:	755a      	strb	r2, [r3, #21]
 8013ab4:	2301      	movs	r3, #1
 8013ab6:	e0d8      	b.n	8013c6a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013abc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013abe:	697a      	ldr	r2, [r7, #20]
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	69db      	ldr	r3, [r3, #28]
 8013ac4:	4619      	mov	r1, r3
 8013ac6:	4610      	mov	r0, r2
 8013ac8:	f7fe fa88 	bl	8011fdc <clust2sect>
 8013acc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013ace:	69bb      	ldr	r3, [r7, #24]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d104      	bne.n	8013ade <f_read+0x12a>
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	2202      	movs	r2, #2
 8013ad8:	755a      	strb	r2, [r3, #21]
 8013ada:	2302      	movs	r3, #2
 8013adc:	e0c5      	b.n	8013c6a <f_read+0x2b6>
			sect += csect;
 8013ade:	69ba      	ldr	r2, [r7, #24]
 8013ae0:	69fb      	ldr	r3, [r7, #28]
 8013ae2:	4413      	add	r3, r2
 8013ae4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8013ae6:	697b      	ldr	r3, [r7, #20]
 8013ae8:	899b      	ldrh	r3, [r3, #12]
 8013aea:	461a      	mov	r2, r3
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	fbb3 f3f2 	udiv	r3, r3, r2
 8013af2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d041      	beq.n	8013b7e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013afa:	69fa      	ldr	r2, [r7, #28]
 8013afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013afe:	4413      	add	r3, r2
 8013b00:	697a      	ldr	r2, [r7, #20]
 8013b02:	8952      	ldrh	r2, [r2, #10]
 8013b04:	4293      	cmp	r3, r2
 8013b06:	d905      	bls.n	8013b14 <f_read+0x160>
					cc = fs->csize - csect;
 8013b08:	697b      	ldr	r3, [r7, #20]
 8013b0a:	895b      	ldrh	r3, [r3, #10]
 8013b0c:	461a      	mov	r2, r3
 8013b0e:	69fb      	ldr	r3, [r7, #28]
 8013b10:	1ad3      	subs	r3, r2, r3
 8013b12:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013b14:	697b      	ldr	r3, [r7, #20]
 8013b16:	7858      	ldrb	r0, [r3, #1]
 8013b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b1a:	69ba      	ldr	r2, [r7, #24]
 8013b1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013b1e:	f7fd feb1 	bl	8011884 <disk_read>
 8013b22:	4603      	mov	r3, r0
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d004      	beq.n	8013b32 <f_read+0x17e>
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	2201      	movs	r2, #1
 8013b2c:	755a      	strb	r2, [r3, #21]
 8013b2e:	2301      	movs	r3, #1
 8013b30:	e09b      	b.n	8013c6a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	7d1b      	ldrb	r3, [r3, #20]
 8013b36:	b25b      	sxtb	r3, r3
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	da18      	bge.n	8013b6e <f_read+0x1ba>
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	6a1a      	ldr	r2, [r3, #32]
 8013b40:	69bb      	ldr	r3, [r7, #24]
 8013b42:	1ad3      	subs	r3, r2, r3
 8013b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b46:	429a      	cmp	r2, r3
 8013b48:	d911      	bls.n	8013b6e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	6a1a      	ldr	r2, [r3, #32]
 8013b4e:	69bb      	ldr	r3, [r7, #24]
 8013b50:	1ad3      	subs	r3, r2, r3
 8013b52:	697a      	ldr	r2, [r7, #20]
 8013b54:	8992      	ldrh	r2, [r2, #12]
 8013b56:	fb02 f303 	mul.w	r3, r2, r3
 8013b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b5c:	18d0      	adds	r0, r2, r3
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013b64:	697b      	ldr	r3, [r7, #20]
 8013b66:	899b      	ldrh	r3, [r3, #12]
 8013b68:	461a      	mov	r2, r3
 8013b6a:	f7fd ff6b 	bl	8011a44 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8013b6e:	697b      	ldr	r3, [r7, #20]
 8013b70:	899b      	ldrh	r3, [r3, #12]
 8013b72:	461a      	mov	r2, r3
 8013b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b76:	fb02 f303 	mul.w	r3, r2, r3
 8013b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8013b7c:	e05c      	b.n	8013c38 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	6a1b      	ldr	r3, [r3, #32]
 8013b82:	69ba      	ldr	r2, [r7, #24]
 8013b84:	429a      	cmp	r2, r3
 8013b86:	d02e      	beq.n	8013be6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	7d1b      	ldrb	r3, [r3, #20]
 8013b8c:	b25b      	sxtb	r3, r3
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	da18      	bge.n	8013bc4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013b92:	697b      	ldr	r3, [r7, #20]
 8013b94:	7858      	ldrb	r0, [r3, #1]
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	6a1a      	ldr	r2, [r3, #32]
 8013ba0:	2301      	movs	r3, #1
 8013ba2:	f7fd fe8f 	bl	80118c4 <disk_write>
 8013ba6:	4603      	mov	r3, r0
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d004      	beq.n	8013bb6 <f_read+0x202>
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	2201      	movs	r2, #1
 8013bb0:	755a      	strb	r2, [r3, #21]
 8013bb2:	2301      	movs	r3, #1
 8013bb4:	e059      	b.n	8013c6a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	7d1b      	ldrb	r3, [r3, #20]
 8013bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013bbe:	b2da      	uxtb	r2, r3
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013bc4:	697b      	ldr	r3, [r7, #20]
 8013bc6:	7858      	ldrb	r0, [r3, #1]
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013bce:	2301      	movs	r3, #1
 8013bd0:	69ba      	ldr	r2, [r7, #24]
 8013bd2:	f7fd fe57 	bl	8011884 <disk_read>
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d004      	beq.n	8013be6 <f_read+0x232>
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	2201      	movs	r2, #1
 8013be0:	755a      	strb	r2, [r3, #21]
 8013be2:	2301      	movs	r3, #1
 8013be4:	e041      	b.n	8013c6a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	69ba      	ldr	r2, [r7, #24]
 8013bea:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013bec:	697b      	ldr	r3, [r7, #20]
 8013bee:	899b      	ldrh	r3, [r3, #12]
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	699b      	ldr	r3, [r3, #24]
 8013bf6:	697a      	ldr	r2, [r7, #20]
 8013bf8:	8992      	ldrh	r2, [r2, #12]
 8013bfa:	fbb3 f1f2 	udiv	r1, r3, r2
 8013bfe:	fb02 f201 	mul.w	r2, r2, r1
 8013c02:	1a9b      	subs	r3, r3, r2
 8013c04:	1ac3      	subs	r3, r0, r3
 8013c06:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	429a      	cmp	r2, r3
 8013c0e:	d901      	bls.n	8013c14 <f_read+0x260>
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	699b      	ldr	r3, [r3, #24]
 8013c1e:	697a      	ldr	r2, [r7, #20]
 8013c20:	8992      	ldrh	r2, [r2, #12]
 8013c22:	fbb3 f0f2 	udiv	r0, r3, r2
 8013c26:	fb02 f200 	mul.w	r2, r2, r0
 8013c2a:	1a9b      	subs	r3, r3, r2
 8013c2c:	440b      	add	r3, r1
 8013c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c30:	4619      	mov	r1, r3
 8013c32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c34:	f7fd ff06 	bl	8011a44 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c3c:	4413      	add	r3, r2
 8013c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	699a      	ldr	r2, [r3, #24]
 8013c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c46:	441a      	add	r2, r3
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	619a      	str	r2, [r3, #24]
 8013c4c:	683b      	ldr	r3, [r7, #0]
 8013c4e:	681a      	ldr	r2, [r3, #0]
 8013c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c52:	441a      	add	r2, r3
 8013c54:	683b      	ldr	r3, [r7, #0]
 8013c56:	601a      	str	r2, [r3, #0]
 8013c58:	687a      	ldr	r2, [r7, #4]
 8013c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c5c:	1ad3      	subs	r3, r2, r3
 8013c5e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	f47f aee1 	bne.w	8013a2a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013c68:	2300      	movs	r3, #0
}
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	3738      	adds	r7, #56	; 0x38
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	bd80      	pop	{r7, pc}

08013c72 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013c72:	b580      	push	{r7, lr}
 8013c74:	b08c      	sub	sp, #48	; 0x30
 8013c76:	af00      	add	r7, sp, #0
 8013c78:	60f8      	str	r0, [r7, #12]
 8013c7a:	60b9      	str	r1, [r7, #8]
 8013c7c:	607a      	str	r2, [r7, #4]
 8013c7e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013c80:	68bb      	ldr	r3, [r7, #8]
 8013c82:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013c84:	683b      	ldr	r3, [r7, #0]
 8013c86:	2200      	movs	r2, #0
 8013c88:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	f107 0210 	add.w	r2, r7, #16
 8013c90:	4611      	mov	r1, r2
 8013c92:	4618      	mov	r0, r3
 8013c94:	f7ff fc44 	bl	8013520 <validate>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013c9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d107      	bne.n	8013cb6 <f_write+0x44>
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	7d5b      	ldrb	r3, [r3, #21]
 8013caa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013cae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d002      	beq.n	8013cbc <f_write+0x4a>
 8013cb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013cba:	e16a      	b.n	8013f92 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	7d1b      	ldrb	r3, [r3, #20]
 8013cc0:	f003 0302 	and.w	r3, r3, #2
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d101      	bne.n	8013ccc <f_write+0x5a>
 8013cc8:	2307      	movs	r3, #7
 8013cca:	e162      	b.n	8013f92 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	699a      	ldr	r2, [r3, #24]
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	441a      	add	r2, r3
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	699b      	ldr	r3, [r3, #24]
 8013cd8:	429a      	cmp	r2, r3
 8013cda:	f080 814c 	bcs.w	8013f76 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	699b      	ldr	r3, [r3, #24]
 8013ce2:	43db      	mvns	r3, r3
 8013ce4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013ce6:	e146      	b.n	8013f76 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	699b      	ldr	r3, [r3, #24]
 8013cec:	693a      	ldr	r2, [r7, #16]
 8013cee:	8992      	ldrh	r2, [r2, #12]
 8013cf0:	fbb3 f1f2 	udiv	r1, r3, r2
 8013cf4:	fb02 f201 	mul.w	r2, r2, r1
 8013cf8:	1a9b      	subs	r3, r3, r2
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	f040 80f1 	bne.w	8013ee2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	699b      	ldr	r3, [r3, #24]
 8013d04:	693a      	ldr	r2, [r7, #16]
 8013d06:	8992      	ldrh	r2, [r2, #12]
 8013d08:	fbb3 f3f2 	udiv	r3, r3, r2
 8013d0c:	693a      	ldr	r2, [r7, #16]
 8013d0e:	8952      	ldrh	r2, [r2, #10]
 8013d10:	3a01      	subs	r2, #1
 8013d12:	4013      	ands	r3, r2
 8013d14:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013d16:	69bb      	ldr	r3, [r7, #24]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d143      	bne.n	8013da4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	699b      	ldr	r3, [r3, #24]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d10c      	bne.n	8013d3e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	689b      	ldr	r3, [r3, #8]
 8013d28:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d11a      	bne.n	8013d66 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	2100      	movs	r1, #0
 8013d34:	4618      	mov	r0, r3
 8013d36:	f7fe fbbc 	bl	80124b2 <create_chain>
 8013d3a:	62b8      	str	r0, [r7, #40]	; 0x28
 8013d3c:	e013      	b.n	8013d66 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d007      	beq.n	8013d56 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	699b      	ldr	r3, [r3, #24]
 8013d4a:	4619      	mov	r1, r3
 8013d4c:	68f8      	ldr	r0, [r7, #12]
 8013d4e:	f7fe fc48 	bl	80125e2 <clmt_clust>
 8013d52:	62b8      	str	r0, [r7, #40]	; 0x28
 8013d54:	e007      	b.n	8013d66 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013d56:	68fa      	ldr	r2, [r7, #12]
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	69db      	ldr	r3, [r3, #28]
 8013d5c:	4619      	mov	r1, r3
 8013d5e:	4610      	mov	r0, r2
 8013d60:	f7fe fba7 	bl	80124b2 <create_chain>
 8013d64:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	f000 8109 	beq.w	8013f80 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d70:	2b01      	cmp	r3, #1
 8013d72:	d104      	bne.n	8013d7e <f_write+0x10c>
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	2202      	movs	r2, #2
 8013d78:	755a      	strb	r2, [r3, #21]
 8013d7a:	2302      	movs	r3, #2
 8013d7c:	e109      	b.n	8013f92 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d84:	d104      	bne.n	8013d90 <f_write+0x11e>
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	2201      	movs	r2, #1
 8013d8a:	755a      	strb	r2, [r3, #21]
 8013d8c:	2301      	movs	r3, #1
 8013d8e:	e100      	b.n	8013f92 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d94:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	689b      	ldr	r3, [r3, #8]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d102      	bne.n	8013da4 <f_write+0x132>
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013da2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	7d1b      	ldrb	r3, [r3, #20]
 8013da8:	b25b      	sxtb	r3, r3
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	da18      	bge.n	8013de0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013dae:	693b      	ldr	r3, [r7, #16]
 8013db0:	7858      	ldrb	r0, [r3, #1]
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	6a1a      	ldr	r2, [r3, #32]
 8013dbc:	2301      	movs	r3, #1
 8013dbe:	f7fd fd81 	bl	80118c4 <disk_write>
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d004      	beq.n	8013dd2 <f_write+0x160>
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	2201      	movs	r2, #1
 8013dcc:	755a      	strb	r2, [r3, #21]
 8013dce:	2301      	movs	r3, #1
 8013dd0:	e0df      	b.n	8013f92 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	7d1b      	ldrb	r3, [r3, #20]
 8013dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013dda:	b2da      	uxtb	r2, r3
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013de0:	693a      	ldr	r2, [r7, #16]
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	69db      	ldr	r3, [r3, #28]
 8013de6:	4619      	mov	r1, r3
 8013de8:	4610      	mov	r0, r2
 8013dea:	f7fe f8f7 	bl	8011fdc <clust2sect>
 8013dee:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013df0:	697b      	ldr	r3, [r7, #20]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d104      	bne.n	8013e00 <f_write+0x18e>
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	2202      	movs	r2, #2
 8013dfa:	755a      	strb	r2, [r3, #21]
 8013dfc:	2302      	movs	r3, #2
 8013dfe:	e0c8      	b.n	8013f92 <f_write+0x320>
			sect += csect;
 8013e00:	697a      	ldr	r2, [r7, #20]
 8013e02:	69bb      	ldr	r3, [r7, #24]
 8013e04:	4413      	add	r3, r2
 8013e06:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013e08:	693b      	ldr	r3, [r7, #16]
 8013e0a:	899b      	ldrh	r3, [r3, #12]
 8013e0c:	461a      	mov	r2, r3
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e14:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013e16:	6a3b      	ldr	r3, [r7, #32]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d043      	beq.n	8013ea4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013e1c:	69ba      	ldr	r2, [r7, #24]
 8013e1e:	6a3b      	ldr	r3, [r7, #32]
 8013e20:	4413      	add	r3, r2
 8013e22:	693a      	ldr	r2, [r7, #16]
 8013e24:	8952      	ldrh	r2, [r2, #10]
 8013e26:	4293      	cmp	r3, r2
 8013e28:	d905      	bls.n	8013e36 <f_write+0x1c4>
					cc = fs->csize - csect;
 8013e2a:	693b      	ldr	r3, [r7, #16]
 8013e2c:	895b      	ldrh	r3, [r3, #10]
 8013e2e:	461a      	mov	r2, r3
 8013e30:	69bb      	ldr	r3, [r7, #24]
 8013e32:	1ad3      	subs	r3, r2, r3
 8013e34:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013e36:	693b      	ldr	r3, [r7, #16]
 8013e38:	7858      	ldrb	r0, [r3, #1]
 8013e3a:	6a3b      	ldr	r3, [r7, #32]
 8013e3c:	697a      	ldr	r2, [r7, #20]
 8013e3e:	69f9      	ldr	r1, [r7, #28]
 8013e40:	f7fd fd40 	bl	80118c4 <disk_write>
 8013e44:	4603      	mov	r3, r0
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d004      	beq.n	8013e54 <f_write+0x1e2>
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	2201      	movs	r2, #1
 8013e4e:	755a      	strb	r2, [r3, #21]
 8013e50:	2301      	movs	r3, #1
 8013e52:	e09e      	b.n	8013f92 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	6a1a      	ldr	r2, [r3, #32]
 8013e58:	697b      	ldr	r3, [r7, #20]
 8013e5a:	1ad3      	subs	r3, r2, r3
 8013e5c:	6a3a      	ldr	r2, [r7, #32]
 8013e5e:	429a      	cmp	r2, r3
 8013e60:	d918      	bls.n	8013e94 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	6a1a      	ldr	r2, [r3, #32]
 8013e6c:	697b      	ldr	r3, [r7, #20]
 8013e6e:	1ad3      	subs	r3, r2, r3
 8013e70:	693a      	ldr	r2, [r7, #16]
 8013e72:	8992      	ldrh	r2, [r2, #12]
 8013e74:	fb02 f303 	mul.w	r3, r2, r3
 8013e78:	69fa      	ldr	r2, [r7, #28]
 8013e7a:	18d1      	adds	r1, r2, r3
 8013e7c:	693b      	ldr	r3, [r7, #16]
 8013e7e:	899b      	ldrh	r3, [r3, #12]
 8013e80:	461a      	mov	r2, r3
 8013e82:	f7fd fddf 	bl	8011a44 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	7d1b      	ldrb	r3, [r3, #20]
 8013e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013e8e:	b2da      	uxtb	r2, r3
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013e94:	693b      	ldr	r3, [r7, #16]
 8013e96:	899b      	ldrh	r3, [r3, #12]
 8013e98:	461a      	mov	r2, r3
 8013e9a:	6a3b      	ldr	r3, [r7, #32]
 8013e9c:	fb02 f303 	mul.w	r3, r2, r3
 8013ea0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013ea2:	e04b      	b.n	8013f3c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	6a1b      	ldr	r3, [r3, #32]
 8013ea8:	697a      	ldr	r2, [r7, #20]
 8013eaa:	429a      	cmp	r2, r3
 8013eac:	d016      	beq.n	8013edc <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	699a      	ldr	r2, [r3, #24]
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013eb6:	429a      	cmp	r2, r3
 8013eb8:	d210      	bcs.n	8013edc <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013eba:	693b      	ldr	r3, [r7, #16]
 8013ebc:	7858      	ldrb	r0, [r3, #1]
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013ec4:	2301      	movs	r3, #1
 8013ec6:	697a      	ldr	r2, [r7, #20]
 8013ec8:	f7fd fcdc 	bl	8011884 <disk_read>
 8013ecc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d004      	beq.n	8013edc <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	2201      	movs	r2, #1
 8013ed6:	755a      	strb	r2, [r3, #21]
 8013ed8:	2301      	movs	r3, #1
 8013eda:	e05a      	b.n	8013f92 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	697a      	ldr	r2, [r7, #20]
 8013ee0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013ee2:	693b      	ldr	r3, [r7, #16]
 8013ee4:	899b      	ldrh	r3, [r3, #12]
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	699b      	ldr	r3, [r3, #24]
 8013eec:	693a      	ldr	r2, [r7, #16]
 8013eee:	8992      	ldrh	r2, [r2, #12]
 8013ef0:	fbb3 f1f2 	udiv	r1, r3, r2
 8013ef4:	fb02 f201 	mul.w	r2, r2, r1
 8013ef8:	1a9b      	subs	r3, r3, r2
 8013efa:	1ac3      	subs	r3, r0, r3
 8013efc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	429a      	cmp	r2, r3
 8013f04:	d901      	bls.n	8013f0a <f_write+0x298>
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	699b      	ldr	r3, [r3, #24]
 8013f14:	693a      	ldr	r2, [r7, #16]
 8013f16:	8992      	ldrh	r2, [r2, #12]
 8013f18:	fbb3 f0f2 	udiv	r0, r3, r2
 8013f1c:	fb02 f200 	mul.w	r2, r2, r0
 8013f20:	1a9b      	subs	r3, r3, r2
 8013f22:	440b      	add	r3, r1
 8013f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f26:	69f9      	ldr	r1, [r7, #28]
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f7fd fd8b 	bl	8011a44 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	7d1b      	ldrb	r3, [r3, #20]
 8013f32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013f36:	b2da      	uxtb	r2, r3
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013f3c:	69fa      	ldr	r2, [r7, #28]
 8013f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f40:	4413      	add	r3, r2
 8013f42:	61fb      	str	r3, [r7, #28]
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	699a      	ldr	r2, [r3, #24]
 8013f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f4a:	441a      	add	r2, r3
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	619a      	str	r2, [r3, #24]
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	68da      	ldr	r2, [r3, #12]
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	699b      	ldr	r3, [r3, #24]
 8013f58:	429a      	cmp	r2, r3
 8013f5a:	bf38      	it	cc
 8013f5c:	461a      	movcc	r2, r3
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	60da      	str	r2, [r3, #12]
 8013f62:	683b      	ldr	r3, [r7, #0]
 8013f64:	681a      	ldr	r2, [r3, #0]
 8013f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f68:	441a      	add	r2, r3
 8013f6a:	683b      	ldr	r3, [r7, #0]
 8013f6c:	601a      	str	r2, [r3, #0]
 8013f6e:	687a      	ldr	r2, [r7, #4]
 8013f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f72:	1ad3      	subs	r3, r2, r3
 8013f74:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	f47f aeb5 	bne.w	8013ce8 <f_write+0x76>
 8013f7e:	e000      	b.n	8013f82 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013f80:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	7d1b      	ldrb	r3, [r3, #20]
 8013f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f8a:	b2da      	uxtb	r2, r3
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013f90:	2300      	movs	r3, #0
}
 8013f92:	4618      	mov	r0, r3
 8013f94:	3730      	adds	r7, #48	; 0x30
 8013f96:	46bd      	mov	sp, r7
 8013f98:	bd80      	pop	{r7, pc}
	...

08013f9c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b086      	sub	sp, #24
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	f107 0208 	add.w	r2, r7, #8
 8013faa:	4611      	mov	r1, r2
 8013fac:	4618      	mov	r0, r3
 8013fae:	f7ff fab7 	bl	8013520 <validate>
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013fb6:	7dfb      	ldrb	r3, [r7, #23]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d167      	bne.n	801408c <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	7d1b      	ldrb	r3, [r3, #20]
 8013fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d061      	beq.n	801408c <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	7d1b      	ldrb	r3, [r3, #20]
 8013fcc:	b25b      	sxtb	r3, r3
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	da15      	bge.n	8013ffe <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013fd2:	68bb      	ldr	r3, [r7, #8]
 8013fd4:	7858      	ldrb	r0, [r3, #1]
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	6a1a      	ldr	r2, [r3, #32]
 8013fe0:	2301      	movs	r3, #1
 8013fe2:	f7fd fc6f 	bl	80118c4 <disk_write>
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d001      	beq.n	8013ff0 <f_sync+0x54>
 8013fec:	2301      	movs	r3, #1
 8013fee:	e04e      	b.n	801408e <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	7d1b      	ldrb	r3, [r3, #20]
 8013ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013ff8:	b2da      	uxtb	r2, r3
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013ffe:	4b26      	ldr	r3, [pc, #152]	; (8014098 <f_sync+0xfc>)
 8014000:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014002:	68ba      	ldr	r2, [r7, #8]
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014008:	4619      	mov	r1, r3
 801400a:	4610      	mov	r0, r2
 801400c:	f7fd ff48 	bl	8011ea0 <move_window>
 8014010:	4603      	mov	r3, r0
 8014012:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014014:	7dfb      	ldrb	r3, [r7, #23]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d138      	bne.n	801408c <f_sync+0xf0>
					dir = fp->dir_ptr;
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801401e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	330b      	adds	r3, #11
 8014024:	781a      	ldrb	r2, [r3, #0]
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	330b      	adds	r3, #11
 801402a:	f042 0220 	orr.w	r2, r2, #32
 801402e:	b2d2      	uxtb	r2, r2
 8014030:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	6818      	ldr	r0, [r3, #0]
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	689b      	ldr	r3, [r3, #8]
 801403a:	461a      	mov	r2, r3
 801403c:	68f9      	ldr	r1, [r7, #12]
 801403e:	f7fe fccd 	bl	80129dc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	f103 021c 	add.w	r2, r3, #28
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	68db      	ldr	r3, [r3, #12]
 801404c:	4619      	mov	r1, r3
 801404e:	4610      	mov	r0, r2
 8014050:	f7fd fccc 	bl	80119ec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	3316      	adds	r3, #22
 8014058:	6939      	ldr	r1, [r7, #16]
 801405a:	4618      	mov	r0, r3
 801405c:	f7fd fcc6 	bl	80119ec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	3312      	adds	r3, #18
 8014064:	2100      	movs	r1, #0
 8014066:	4618      	mov	r0, r3
 8014068:	f7fd fca5 	bl	80119b6 <st_word>
					fs->wflag = 1;
 801406c:	68bb      	ldr	r3, [r7, #8]
 801406e:	2201      	movs	r2, #1
 8014070:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014072:	68bb      	ldr	r3, [r7, #8]
 8014074:	4618      	mov	r0, r3
 8014076:	f7fd ff41 	bl	8011efc <sync_fs>
 801407a:	4603      	mov	r3, r0
 801407c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	7d1b      	ldrb	r3, [r3, #20]
 8014082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014086:	b2da      	uxtb	r2, r3
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801408c:	7dfb      	ldrb	r3, [r7, #23]
}
 801408e:	4618      	mov	r0, r3
 8014090:	3718      	adds	r7, #24
 8014092:	46bd      	mov	sp, r7
 8014094:	bd80      	pop	{r7, pc}
 8014096:	bf00      	nop
 8014098:	274a0000 	.word	0x274a0000

0801409c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801409c:	b580      	push	{r7, lr}
 801409e:	b084      	sub	sp, #16
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80140a4:	6878      	ldr	r0, [r7, #4]
 80140a6:	f7ff ff79 	bl	8013f9c <f_sync>
 80140aa:	4603      	mov	r3, r0
 80140ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80140ae:	7bfb      	ldrb	r3, [r7, #15]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d118      	bne.n	80140e6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	f107 0208 	add.w	r2, r7, #8
 80140ba:	4611      	mov	r1, r2
 80140bc:	4618      	mov	r0, r3
 80140be:	f7ff fa2f 	bl	8013520 <validate>
 80140c2:	4603      	mov	r3, r0
 80140c4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80140c6:	7bfb      	ldrb	r3, [r7, #15]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d10c      	bne.n	80140e6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	691b      	ldr	r3, [r3, #16]
 80140d0:	4618      	mov	r0, r3
 80140d2:	f7fd fe41 	bl	8011d58 <dec_lock>
 80140d6:	4603      	mov	r3, r0
 80140d8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80140da:	7bfb      	ldrb	r3, [r7, #15]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d102      	bne.n	80140e6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	2200      	movs	r2, #0
 80140e4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80140e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80140e8:	4618      	mov	r0, r3
 80140ea:	3710      	adds	r7, #16
 80140ec:	46bd      	mov	sp, r7
 80140ee:	bd80      	pop	{r7, pc}

080140f0 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80140f0:	b590      	push	{r4, r7, lr}
 80140f2:	b091      	sub	sp, #68	; 0x44
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80140f8:	f107 0108 	add.w	r1, r7, #8
 80140fc:	1d3b      	adds	r3, r7, #4
 80140fe:	2200      	movs	r2, #0
 8014100:	4618      	mov	r0, r3
 8014102:	f7fe ff87 	bl	8013014 <find_volume>
 8014106:	4603      	mov	r3, r0
 8014108:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 801410c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014110:	2b00      	cmp	r3, #0
 8014112:	d131      	bne.n	8014178 <f_chdir+0x88>
		dj.obj.fs = fs;
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8014118:	687a      	ldr	r2, [r7, #4]
 801411a:	f107 030c 	add.w	r3, r7, #12
 801411e:	4611      	mov	r1, r2
 8014120:	4618      	mov	r0, r3
 8014122:	f7fe fe47 	bl	8012db4 <follow_path>
 8014126:	4603      	mov	r3, r0
 8014128:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 801412c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014130:	2b00      	cmp	r3, #0
 8014132:	d11a      	bne.n	801416a <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8014134:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014138:	b25b      	sxtb	r3, r3
 801413a:	2b00      	cmp	r3, #0
 801413c:	da03      	bge.n	8014146 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 801413e:	68bb      	ldr	r3, [r7, #8]
 8014140:	697a      	ldr	r2, [r7, #20]
 8014142:	619a      	str	r2, [r3, #24]
 8014144:	e011      	b.n	801416a <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8014146:	7cbb      	ldrb	r3, [r7, #18]
 8014148:	f003 0310 	and.w	r3, r3, #16
 801414c:	2b00      	cmp	r3, #0
 801414e:	d009      	beq.n	8014164 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8014150:	68bb      	ldr	r3, [r7, #8]
 8014152:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014154:	68bc      	ldr	r4, [r7, #8]
 8014156:	4611      	mov	r1, r2
 8014158:	4618      	mov	r0, r3
 801415a:	f7fe fc20 	bl	801299e <ld_clust>
 801415e:	4603      	mov	r3, r0
 8014160:	61a3      	str	r3, [r4, #24]
 8014162:	e002      	b.n	801416a <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8014164:	2305      	movs	r3, #5
 8014166:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801416a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801416e:	2b04      	cmp	r3, #4
 8014170:	d102      	bne.n	8014178 <f_chdir+0x88>
 8014172:	2305      	movs	r3, #5
 8014174:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8014178:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801417c:	4618      	mov	r0, r3
 801417e:	3744      	adds	r7, #68	; 0x44
 8014180:	46bd      	mov	sp, r7
 8014182:	bd90      	pop	{r4, r7, pc}

08014184 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b090      	sub	sp, #64	; 0x40
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
 801418c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	f107 0208 	add.w	r2, r7, #8
 8014194:	4611      	mov	r1, r2
 8014196:	4618      	mov	r0, r3
 8014198:	f7ff f9c2 	bl	8013520 <validate>
 801419c:	4603      	mov	r3, r0
 801419e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80141a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d103      	bne.n	80141b2 <f_lseek+0x2e>
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	7d5b      	ldrb	r3, [r3, #21]
 80141ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80141b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d002      	beq.n	80141c0 <f_lseek+0x3c>
 80141ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80141be:	e201      	b.n	80145c4 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	f000 80d9 	beq.w	801437c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80141ca:	683b      	ldr	r3, [r7, #0]
 80141cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141d0:	d15a      	bne.n	8014288 <f_lseek+0x104>
			tbl = fp->cltbl;
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141d6:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80141d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141da:	1d1a      	adds	r2, r3, #4
 80141dc:	627a      	str	r2, [r7, #36]	; 0x24
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	617b      	str	r3, [r7, #20]
 80141e2:	2302      	movs	r3, #2
 80141e4:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	689b      	ldr	r3, [r3, #8]
 80141ea:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80141ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d03a      	beq.n	8014268 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80141f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141f4:	613b      	str	r3, [r7, #16]
 80141f6:	2300      	movs	r3, #0
 80141f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80141fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141fc:	3302      	adds	r3, #2
 80141fe:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8014200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014202:	60fb      	str	r3, [r7, #12]
 8014204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014206:	3301      	adds	r3, #1
 8014208:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801420e:	4618      	mov	r0, r3
 8014210:	f7fd ff03 	bl	801201a <get_fat>
 8014214:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8014216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014218:	2b01      	cmp	r3, #1
 801421a:	d804      	bhi.n	8014226 <f_lseek+0xa2>
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	2202      	movs	r2, #2
 8014220:	755a      	strb	r2, [r3, #21]
 8014222:	2302      	movs	r3, #2
 8014224:	e1ce      	b.n	80145c4 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014228:	f1b3 3fff 	cmp.w	r3, #4294967295
 801422c:	d104      	bne.n	8014238 <f_lseek+0xb4>
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	2201      	movs	r2, #1
 8014232:	755a      	strb	r2, [r3, #21]
 8014234:	2301      	movs	r3, #1
 8014236:	e1c5      	b.n	80145c4 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	3301      	adds	r3, #1
 801423c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801423e:	429a      	cmp	r2, r3
 8014240:	d0de      	beq.n	8014200 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8014242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014244:	697b      	ldr	r3, [r7, #20]
 8014246:	429a      	cmp	r2, r3
 8014248:	d809      	bhi.n	801425e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801424c:	1d1a      	adds	r2, r3, #4
 801424e:	627a      	str	r2, [r7, #36]	; 0x24
 8014250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014252:	601a      	str	r2, [r3, #0]
 8014254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014256:	1d1a      	adds	r2, r3, #4
 8014258:	627a      	str	r2, [r7, #36]	; 0x24
 801425a:	693a      	ldr	r2, [r7, #16]
 801425c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801425e:	68bb      	ldr	r3, [r7, #8]
 8014260:	69db      	ldr	r3, [r3, #28]
 8014262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014264:	429a      	cmp	r2, r3
 8014266:	d3c4      	bcc.n	80141f2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801426c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801426e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8014270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014272:	697b      	ldr	r3, [r7, #20]
 8014274:	429a      	cmp	r2, r3
 8014276:	d803      	bhi.n	8014280 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8014278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801427a:	2200      	movs	r2, #0
 801427c:	601a      	str	r2, [r3, #0]
 801427e:	e19f      	b.n	80145c0 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8014280:	2311      	movs	r3, #17
 8014282:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8014286:	e19b      	b.n	80145c0 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	68db      	ldr	r3, [r3, #12]
 801428c:	683a      	ldr	r2, [r7, #0]
 801428e:	429a      	cmp	r2, r3
 8014290:	d902      	bls.n	8014298 <f_lseek+0x114>
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	68db      	ldr	r3, [r3, #12]
 8014296:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	683a      	ldr	r2, [r7, #0]
 801429c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801429e:	683b      	ldr	r3, [r7, #0]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	f000 818d 	beq.w	80145c0 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80142a6:	683b      	ldr	r3, [r7, #0]
 80142a8:	3b01      	subs	r3, #1
 80142aa:	4619      	mov	r1, r3
 80142ac:	6878      	ldr	r0, [r7, #4]
 80142ae:	f7fe f998 	bl	80125e2 <clmt_clust>
 80142b2:	4602      	mov	r2, r0
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80142b8:	68ba      	ldr	r2, [r7, #8]
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	69db      	ldr	r3, [r3, #28]
 80142be:	4619      	mov	r1, r3
 80142c0:	4610      	mov	r0, r2
 80142c2:	f7fd fe8b 	bl	8011fdc <clust2sect>
 80142c6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80142c8:	69bb      	ldr	r3, [r7, #24]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d104      	bne.n	80142d8 <f_lseek+0x154>
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	2202      	movs	r2, #2
 80142d2:	755a      	strb	r2, [r3, #21]
 80142d4:	2302      	movs	r3, #2
 80142d6:	e175      	b.n	80145c4 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80142d8:	683b      	ldr	r3, [r7, #0]
 80142da:	3b01      	subs	r3, #1
 80142dc:	68ba      	ldr	r2, [r7, #8]
 80142de:	8992      	ldrh	r2, [r2, #12]
 80142e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80142e4:	68ba      	ldr	r2, [r7, #8]
 80142e6:	8952      	ldrh	r2, [r2, #10]
 80142e8:	3a01      	subs	r2, #1
 80142ea:	4013      	ands	r3, r2
 80142ec:	69ba      	ldr	r2, [r7, #24]
 80142ee:	4413      	add	r3, r2
 80142f0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	699b      	ldr	r3, [r3, #24]
 80142f6:	68ba      	ldr	r2, [r7, #8]
 80142f8:	8992      	ldrh	r2, [r2, #12]
 80142fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80142fe:	fb02 f201 	mul.w	r2, r2, r1
 8014302:	1a9b      	subs	r3, r3, r2
 8014304:	2b00      	cmp	r3, #0
 8014306:	f000 815b 	beq.w	80145c0 <f_lseek+0x43c>
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	6a1b      	ldr	r3, [r3, #32]
 801430e:	69ba      	ldr	r2, [r7, #24]
 8014310:	429a      	cmp	r2, r3
 8014312:	f000 8155 	beq.w	80145c0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	7d1b      	ldrb	r3, [r3, #20]
 801431a:	b25b      	sxtb	r3, r3
 801431c:	2b00      	cmp	r3, #0
 801431e:	da18      	bge.n	8014352 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014320:	68bb      	ldr	r3, [r7, #8]
 8014322:	7858      	ldrb	r0, [r3, #1]
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	6a1a      	ldr	r2, [r3, #32]
 801432e:	2301      	movs	r3, #1
 8014330:	f7fd fac8 	bl	80118c4 <disk_write>
 8014334:	4603      	mov	r3, r0
 8014336:	2b00      	cmp	r3, #0
 8014338:	d004      	beq.n	8014344 <f_lseek+0x1c0>
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	2201      	movs	r2, #1
 801433e:	755a      	strb	r2, [r3, #21]
 8014340:	2301      	movs	r3, #1
 8014342:	e13f      	b.n	80145c4 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	7d1b      	ldrb	r3, [r3, #20]
 8014348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801434c:	b2da      	uxtb	r2, r3
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8014352:	68bb      	ldr	r3, [r7, #8]
 8014354:	7858      	ldrb	r0, [r3, #1]
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801435c:	2301      	movs	r3, #1
 801435e:	69ba      	ldr	r2, [r7, #24]
 8014360:	f7fd fa90 	bl	8011884 <disk_read>
 8014364:	4603      	mov	r3, r0
 8014366:	2b00      	cmp	r3, #0
 8014368:	d004      	beq.n	8014374 <f_lseek+0x1f0>
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	2201      	movs	r2, #1
 801436e:	755a      	strb	r2, [r3, #21]
 8014370:	2301      	movs	r3, #1
 8014372:	e127      	b.n	80145c4 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	69ba      	ldr	r2, [r7, #24]
 8014378:	621a      	str	r2, [r3, #32]
 801437a:	e121      	b.n	80145c0 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	68db      	ldr	r3, [r3, #12]
 8014380:	683a      	ldr	r2, [r7, #0]
 8014382:	429a      	cmp	r2, r3
 8014384:	d908      	bls.n	8014398 <f_lseek+0x214>
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	7d1b      	ldrb	r3, [r3, #20]
 801438a:	f003 0302 	and.w	r3, r3, #2
 801438e:	2b00      	cmp	r3, #0
 8014390:	d102      	bne.n	8014398 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	68db      	ldr	r3, [r3, #12]
 8014396:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	699b      	ldr	r3, [r3, #24]
 801439c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801439e:	2300      	movs	r3, #0
 80143a0:	637b      	str	r3, [r7, #52]	; 0x34
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143a6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80143a8:	683b      	ldr	r3, [r7, #0]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	f000 80b5 	beq.w	801451a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80143b0:	68bb      	ldr	r3, [r7, #8]
 80143b2:	895b      	ldrh	r3, [r3, #10]
 80143b4:	461a      	mov	r2, r3
 80143b6:	68bb      	ldr	r3, [r7, #8]
 80143b8:	899b      	ldrh	r3, [r3, #12]
 80143ba:	fb03 f302 	mul.w	r3, r3, r2
 80143be:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80143c0:	6a3b      	ldr	r3, [r7, #32]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d01b      	beq.n	80143fe <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80143c6:	683b      	ldr	r3, [r7, #0]
 80143c8:	1e5a      	subs	r2, r3, #1
 80143ca:	69fb      	ldr	r3, [r7, #28]
 80143cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80143d0:	6a3b      	ldr	r3, [r7, #32]
 80143d2:	1e59      	subs	r1, r3, #1
 80143d4:	69fb      	ldr	r3, [r7, #28]
 80143d6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80143da:	429a      	cmp	r2, r3
 80143dc:	d30f      	bcc.n	80143fe <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80143de:	6a3b      	ldr	r3, [r7, #32]
 80143e0:	1e5a      	subs	r2, r3, #1
 80143e2:	69fb      	ldr	r3, [r7, #28]
 80143e4:	425b      	negs	r3, r3
 80143e6:	401a      	ands	r2, r3
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	699b      	ldr	r3, [r3, #24]
 80143f0:	683a      	ldr	r2, [r7, #0]
 80143f2:	1ad3      	subs	r3, r2, r3
 80143f4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	69db      	ldr	r3, [r3, #28]
 80143fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80143fc:	e022      	b.n	8014444 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	689b      	ldr	r3, [r3, #8]
 8014402:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8014404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014406:	2b00      	cmp	r3, #0
 8014408:	d119      	bne.n	801443e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	2100      	movs	r1, #0
 801440e:	4618      	mov	r0, r3
 8014410:	f7fe f84f 	bl	80124b2 <create_chain>
 8014414:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014418:	2b01      	cmp	r3, #1
 801441a:	d104      	bne.n	8014426 <f_lseek+0x2a2>
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	2202      	movs	r2, #2
 8014420:	755a      	strb	r2, [r3, #21]
 8014422:	2302      	movs	r3, #2
 8014424:	e0ce      	b.n	80145c4 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014428:	f1b3 3fff 	cmp.w	r3, #4294967295
 801442c:	d104      	bne.n	8014438 <f_lseek+0x2b4>
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	2201      	movs	r2, #1
 8014432:	755a      	strb	r2, [r3, #21]
 8014434:	2301      	movs	r3, #1
 8014436:	e0c5      	b.n	80145c4 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801443c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014442:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8014444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014446:	2b00      	cmp	r3, #0
 8014448:	d067      	beq.n	801451a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 801444a:	e03a      	b.n	80144c2 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 801444c:	683a      	ldr	r2, [r7, #0]
 801444e:	69fb      	ldr	r3, [r7, #28]
 8014450:	1ad3      	subs	r3, r2, r3
 8014452:	603b      	str	r3, [r7, #0]
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	699a      	ldr	r2, [r3, #24]
 8014458:	69fb      	ldr	r3, [r7, #28]
 801445a:	441a      	add	r2, r3
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	7d1b      	ldrb	r3, [r3, #20]
 8014464:	f003 0302 	and.w	r3, r3, #2
 8014468:	2b00      	cmp	r3, #0
 801446a:	d00b      	beq.n	8014484 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014470:	4618      	mov	r0, r3
 8014472:	f7fe f81e 	bl	80124b2 <create_chain>
 8014476:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801447a:	2b00      	cmp	r3, #0
 801447c:	d108      	bne.n	8014490 <f_lseek+0x30c>
							ofs = 0; break;
 801447e:	2300      	movs	r3, #0
 8014480:	603b      	str	r3, [r7, #0]
 8014482:	e022      	b.n	80144ca <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014488:	4618      	mov	r0, r3
 801448a:	f7fd fdc6 	bl	801201a <get_fat>
 801448e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014496:	d104      	bne.n	80144a2 <f_lseek+0x31e>
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	2201      	movs	r2, #1
 801449c:	755a      	strb	r2, [r3, #21]
 801449e:	2301      	movs	r3, #1
 80144a0:	e090      	b.n	80145c4 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80144a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144a4:	2b01      	cmp	r3, #1
 80144a6:	d904      	bls.n	80144b2 <f_lseek+0x32e>
 80144a8:	68bb      	ldr	r3, [r7, #8]
 80144aa:	69db      	ldr	r3, [r3, #28]
 80144ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80144ae:	429a      	cmp	r2, r3
 80144b0:	d304      	bcc.n	80144bc <f_lseek+0x338>
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	2202      	movs	r2, #2
 80144b6:	755a      	strb	r2, [r3, #21]
 80144b8:	2302      	movs	r3, #2
 80144ba:	e083      	b.n	80145c4 <f_lseek+0x440>
					fp->clust = clst;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80144c0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80144c2:	683a      	ldr	r2, [r7, #0]
 80144c4:	69fb      	ldr	r3, [r7, #28]
 80144c6:	429a      	cmp	r2, r3
 80144c8:	d8c0      	bhi.n	801444c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	699a      	ldr	r2, [r3, #24]
 80144ce:	683b      	ldr	r3, [r7, #0]
 80144d0:	441a      	add	r2, r3
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80144d6:	68bb      	ldr	r3, [r7, #8]
 80144d8:	899b      	ldrh	r3, [r3, #12]
 80144da:	461a      	mov	r2, r3
 80144dc:	683b      	ldr	r3, [r7, #0]
 80144de:	fbb3 f1f2 	udiv	r1, r3, r2
 80144e2:	fb02 f201 	mul.w	r2, r2, r1
 80144e6:	1a9b      	subs	r3, r3, r2
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d016      	beq.n	801451a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80144ec:	68bb      	ldr	r3, [r7, #8]
 80144ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80144f0:	4618      	mov	r0, r3
 80144f2:	f7fd fd73 	bl	8011fdc <clust2sect>
 80144f6:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80144f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d104      	bne.n	8014508 <f_lseek+0x384>
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	2202      	movs	r2, #2
 8014502:	755a      	strb	r2, [r3, #21]
 8014504:	2302      	movs	r3, #2
 8014506:	e05d      	b.n	80145c4 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8014508:	68bb      	ldr	r3, [r7, #8]
 801450a:	899b      	ldrh	r3, [r3, #12]
 801450c:	461a      	mov	r2, r3
 801450e:	683b      	ldr	r3, [r7, #0]
 8014510:	fbb3 f3f2 	udiv	r3, r3, r2
 8014514:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014516:	4413      	add	r3, r2
 8014518:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	699a      	ldr	r2, [r3, #24]
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	68db      	ldr	r3, [r3, #12]
 8014522:	429a      	cmp	r2, r3
 8014524:	d90a      	bls.n	801453c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	699a      	ldr	r2, [r3, #24]
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	7d1b      	ldrb	r3, [r3, #20]
 8014532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014536:	b2da      	uxtb	r2, r3
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	699b      	ldr	r3, [r3, #24]
 8014540:	68ba      	ldr	r2, [r7, #8]
 8014542:	8992      	ldrh	r2, [r2, #12]
 8014544:	fbb3 f1f2 	udiv	r1, r3, r2
 8014548:	fb02 f201 	mul.w	r2, r2, r1
 801454c:	1a9b      	subs	r3, r3, r2
 801454e:	2b00      	cmp	r3, #0
 8014550:	d036      	beq.n	80145c0 <f_lseek+0x43c>
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	6a1b      	ldr	r3, [r3, #32]
 8014556:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014558:	429a      	cmp	r2, r3
 801455a:	d031      	beq.n	80145c0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	7d1b      	ldrb	r3, [r3, #20]
 8014560:	b25b      	sxtb	r3, r3
 8014562:	2b00      	cmp	r3, #0
 8014564:	da18      	bge.n	8014598 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014566:	68bb      	ldr	r3, [r7, #8]
 8014568:	7858      	ldrb	r0, [r3, #1]
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	6a1a      	ldr	r2, [r3, #32]
 8014574:	2301      	movs	r3, #1
 8014576:	f7fd f9a5 	bl	80118c4 <disk_write>
 801457a:	4603      	mov	r3, r0
 801457c:	2b00      	cmp	r3, #0
 801457e:	d004      	beq.n	801458a <f_lseek+0x406>
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	2201      	movs	r2, #1
 8014584:	755a      	strb	r2, [r3, #21]
 8014586:	2301      	movs	r3, #1
 8014588:	e01c      	b.n	80145c4 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	7d1b      	ldrb	r3, [r3, #20]
 801458e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014592:	b2da      	uxtb	r2, r3
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014598:	68bb      	ldr	r3, [r7, #8]
 801459a:	7858      	ldrb	r0, [r3, #1]
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80145a2:	2301      	movs	r3, #1
 80145a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80145a6:	f7fd f96d 	bl	8011884 <disk_read>
 80145aa:	4603      	mov	r3, r0
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d004      	beq.n	80145ba <f_lseek+0x436>
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	2201      	movs	r2, #1
 80145b4:	755a      	strb	r2, [r3, #21]
 80145b6:	2301      	movs	r3, #1
 80145b8:	e004      	b.n	80145c4 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80145be:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80145c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80145c4:	4618      	mov	r0, r3
 80145c6:	3740      	adds	r7, #64	; 0x40
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bd80      	pop	{r7, pc}

080145cc <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b09e      	sub	sp, #120	; 0x78
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80145d4:	2300      	movs	r3, #0
 80145d6:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80145d8:	f107 010c 	add.w	r1, r7, #12
 80145dc:	1d3b      	adds	r3, r7, #4
 80145de:	2202      	movs	r2, #2
 80145e0:	4618      	mov	r0, r3
 80145e2:	f7fe fd17 	bl	8013014 <find_volume>
 80145e6:	4603      	mov	r3, r0
 80145e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80145f0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	f040 80a4 	bne.w	8014742 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80145fa:	687a      	ldr	r2, [r7, #4]
 80145fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014600:	4611      	mov	r1, r2
 8014602:	4618      	mov	r0, r3
 8014604:	f7fe fbd6 	bl	8012db4 <follow_path>
 8014608:	4603      	mov	r3, r0
 801460a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 801460e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014612:	2b00      	cmp	r3, #0
 8014614:	d108      	bne.n	8014628 <f_unlink+0x5c>
 8014616:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801461a:	f003 0320 	and.w	r3, r3, #32
 801461e:	2b00      	cmp	r3, #0
 8014620:	d002      	beq.n	8014628 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8014622:	2306      	movs	r3, #6
 8014624:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8014628:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801462c:	2b00      	cmp	r3, #0
 801462e:	d108      	bne.n	8014642 <f_unlink+0x76>
 8014630:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014634:	2102      	movs	r1, #2
 8014636:	4618      	mov	r0, r3
 8014638:	f7fd fa82 	bl	8011b40 <chk_lock>
 801463c:	4603      	mov	r3, r0
 801463e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8014642:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014646:	2b00      	cmp	r3, #0
 8014648:	d17b      	bne.n	8014742 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801464a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801464e:	b25b      	sxtb	r3, r3
 8014650:	2b00      	cmp	r3, #0
 8014652:	da03      	bge.n	801465c <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8014654:	2306      	movs	r3, #6
 8014656:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801465a:	e008      	b.n	801466e <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801465c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014660:	f003 0301 	and.w	r3, r3, #1
 8014664:	2b00      	cmp	r3, #0
 8014666:	d002      	beq.n	801466e <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8014668:	2307      	movs	r3, #7
 801466a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 801466e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014672:	2b00      	cmp	r3, #0
 8014674:	d13d      	bne.n	80146f2 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801467a:	4611      	mov	r1, r2
 801467c:	4618      	mov	r0, r3
 801467e:	f7fe f98e 	bl	801299e <ld_clust>
 8014682:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8014684:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014688:	f003 0310 	and.w	r3, r3, #16
 801468c:	2b00      	cmp	r3, #0
 801468e:	d030      	beq.n	80146f2 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	699b      	ldr	r3, [r3, #24]
 8014694:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014696:	429a      	cmp	r2, r3
 8014698:	d103      	bne.n	80146a2 <f_unlink+0xd6>
						res = FR_DENIED;
 801469a:	2307      	movs	r3, #7
 801469c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80146a0:	e027      	b.n	80146f2 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80146a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80146a8:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80146aa:	f107 0310 	add.w	r3, r7, #16
 80146ae:	2100      	movs	r1, #0
 80146b0:	4618      	mov	r0, r3
 80146b2:	f7fd ffce 	bl	8012652 <dir_sdi>
 80146b6:	4603      	mov	r3, r0
 80146b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80146bc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d116      	bne.n	80146f2 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 80146c4:	f107 0310 	add.w	r3, r7, #16
 80146c8:	2100      	movs	r1, #0
 80146ca:	4618      	mov	r0, r3
 80146cc:	f7fe f9a6 	bl	8012a1c <dir_read>
 80146d0:	4603      	mov	r3, r0
 80146d2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80146d6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d102      	bne.n	80146e4 <f_unlink+0x118>
 80146de:	2307      	movs	r3, #7
 80146e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80146e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80146e8:	2b04      	cmp	r3, #4
 80146ea:	d102      	bne.n	80146f2 <f_unlink+0x126>
 80146ec:	2300      	movs	r3, #0
 80146ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80146f2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d123      	bne.n	8014742 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80146fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80146fe:	4618      	mov	r0, r3
 8014700:	f7fe fa70 	bl	8012be4 <dir_remove>
 8014704:	4603      	mov	r3, r0
 8014706:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801470a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801470e:	2b00      	cmp	r3, #0
 8014710:	d10c      	bne.n	801472c <f_unlink+0x160>
 8014712:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014714:	2b00      	cmp	r3, #0
 8014716:	d009      	beq.n	801472c <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8014718:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801471c:	2200      	movs	r2, #0
 801471e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014720:	4618      	mov	r0, r3
 8014722:	f7fd fe61 	bl	80123e8 <remove_chain>
 8014726:	4603      	mov	r3, r0
 8014728:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801472c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014730:	2b00      	cmp	r3, #0
 8014732:	d106      	bne.n	8014742 <f_unlink+0x176>
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	4618      	mov	r0, r3
 8014738:	f7fd fbe0 	bl	8011efc <sync_fs>
 801473c:	4603      	mov	r3, r0
 801473e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014742:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8014746:	4618      	mov	r0, r3
 8014748:	3778      	adds	r7, #120	; 0x78
 801474a:	46bd      	mov	sp, r7
 801474c:	bd80      	pop	{r7, pc}
	...

08014750 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b096      	sub	sp, #88	; 0x58
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014758:	f107 0108 	add.w	r1, r7, #8
 801475c:	1d3b      	adds	r3, r7, #4
 801475e:	2202      	movs	r2, #2
 8014760:	4618      	mov	r0, r3
 8014762:	f7fe fc57 	bl	8013014 <find_volume>
 8014766:	4603      	mov	r3, r0
 8014768:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 801476c:	68bb      	ldr	r3, [r7, #8]
 801476e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8014770:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014774:	2b00      	cmp	r3, #0
 8014776:	f040 80fe 	bne.w	8014976 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801477a:	687a      	ldr	r2, [r7, #4]
 801477c:	f107 030c 	add.w	r3, r7, #12
 8014780:	4611      	mov	r1, r2
 8014782:	4618      	mov	r0, r3
 8014784:	f7fe fb16 	bl	8012db4 <follow_path>
 8014788:	4603      	mov	r3, r0
 801478a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801478e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014792:	2b00      	cmp	r3, #0
 8014794:	d102      	bne.n	801479c <f_mkdir+0x4c>
 8014796:	2308      	movs	r3, #8
 8014798:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 801479c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80147a0:	2b04      	cmp	r3, #4
 80147a2:	d108      	bne.n	80147b6 <f_mkdir+0x66>
 80147a4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80147a8:	f003 0320 	and.w	r3, r3, #32
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d002      	beq.n	80147b6 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80147b0:	2306      	movs	r3, #6
 80147b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80147b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80147ba:	2b04      	cmp	r3, #4
 80147bc:	f040 80db 	bne.w	8014976 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80147c0:	f107 030c 	add.w	r3, r7, #12
 80147c4:	2100      	movs	r1, #0
 80147c6:	4618      	mov	r0, r3
 80147c8:	f7fd fe73 	bl	80124b2 <create_chain>
 80147cc:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80147ce:	68bb      	ldr	r3, [r7, #8]
 80147d0:	895b      	ldrh	r3, [r3, #10]
 80147d2:	461a      	mov	r2, r3
 80147d4:	68bb      	ldr	r3, [r7, #8]
 80147d6:	899b      	ldrh	r3, [r3, #12]
 80147d8:	fb03 f302 	mul.w	r3, r3, r2
 80147dc:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80147de:	2300      	movs	r3, #0
 80147e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80147e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d102      	bne.n	80147f0 <f_mkdir+0xa0>
 80147ea:	2307      	movs	r3, #7
 80147ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80147f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80147f2:	2b01      	cmp	r3, #1
 80147f4:	d102      	bne.n	80147fc <f_mkdir+0xac>
 80147f6:	2302      	movs	r3, #2
 80147f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80147fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80147fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014802:	d102      	bne.n	801480a <f_mkdir+0xba>
 8014804:	2301      	movs	r3, #1
 8014806:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801480a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801480e:	2b00      	cmp	r3, #0
 8014810:	d106      	bne.n	8014820 <f_mkdir+0xd0>
 8014812:	68bb      	ldr	r3, [r7, #8]
 8014814:	4618      	mov	r0, r3
 8014816:	f7fd faff 	bl	8011e18 <sync_window>
 801481a:	4603      	mov	r3, r0
 801481c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8014820:	4b58      	ldr	r3, [pc, #352]	; (8014984 <f_mkdir+0x234>)
 8014822:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8014824:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014828:	2b00      	cmp	r3, #0
 801482a:	d16c      	bne.n	8014906 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 801482c:	68bb      	ldr	r3, [r7, #8]
 801482e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014830:	4618      	mov	r0, r3
 8014832:	f7fd fbd3 	bl	8011fdc <clust2sect>
 8014836:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8014838:	68bb      	ldr	r3, [r7, #8]
 801483a:	3338      	adds	r3, #56	; 0x38
 801483c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 801483e:	68bb      	ldr	r3, [r7, #8]
 8014840:	899b      	ldrh	r3, [r3, #12]
 8014842:	461a      	mov	r2, r3
 8014844:	2100      	movs	r1, #0
 8014846:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014848:	f7fd f91d 	bl	8011a86 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801484c:	220b      	movs	r2, #11
 801484e:	2120      	movs	r1, #32
 8014850:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014852:	f7fd f918 	bl	8011a86 <mem_set>
					dir[DIR_Name] = '.';
 8014856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014858:	222e      	movs	r2, #46	; 0x2e
 801485a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801485c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801485e:	330b      	adds	r3, #11
 8014860:	2210      	movs	r2, #16
 8014862:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8014864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014866:	3316      	adds	r3, #22
 8014868:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801486a:	4618      	mov	r0, r3
 801486c:	f7fd f8be 	bl	80119ec <st_dword>
					st_clust(fs, dir, dcl);
 8014870:	68bb      	ldr	r3, [r7, #8]
 8014872:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014874:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014876:	4618      	mov	r0, r3
 8014878:	f7fe f8b0 	bl	80129dc <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801487c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801487e:	3320      	adds	r3, #32
 8014880:	2220      	movs	r2, #32
 8014882:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014884:	4618      	mov	r0, r3
 8014886:	f7fd f8dd 	bl	8011a44 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801488a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801488c:	3321      	adds	r3, #33	; 0x21
 801488e:	222e      	movs	r2, #46	; 0x2e
 8014890:	701a      	strb	r2, [r3, #0]
 8014892:	697b      	ldr	r3, [r7, #20]
 8014894:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8014896:	68bb      	ldr	r3, [r7, #8]
 8014898:	781b      	ldrb	r3, [r3, #0]
 801489a:	2b03      	cmp	r3, #3
 801489c:	d106      	bne.n	80148ac <f_mkdir+0x15c>
 801489e:	68bb      	ldr	r3, [r7, #8]
 80148a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80148a4:	429a      	cmp	r2, r3
 80148a6:	d101      	bne.n	80148ac <f_mkdir+0x15c>
 80148a8:	2300      	movs	r3, #0
 80148aa:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80148ac:	68b8      	ldr	r0, [r7, #8]
 80148ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80148b0:	3320      	adds	r3, #32
 80148b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80148b4:	4619      	mov	r1, r3
 80148b6:	f7fe f891 	bl	80129dc <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80148ba:	68bb      	ldr	r3, [r7, #8]
 80148bc:	895b      	ldrh	r3, [r3, #10]
 80148be:	653b      	str	r3, [r7, #80]	; 0x50
 80148c0:	e01c      	b.n	80148fc <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 80148c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148c4:	1c5a      	adds	r2, r3, #1
 80148c6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80148c8:	68ba      	ldr	r2, [r7, #8]
 80148ca:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 80148cc:	68bb      	ldr	r3, [r7, #8]
 80148ce:	2201      	movs	r2, #1
 80148d0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80148d2:	68bb      	ldr	r3, [r7, #8]
 80148d4:	4618      	mov	r0, r3
 80148d6:	f7fd fa9f 	bl	8011e18 <sync_window>
 80148da:	4603      	mov	r3, r0
 80148dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80148e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d10d      	bne.n	8014904 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 80148e8:	68bb      	ldr	r3, [r7, #8]
 80148ea:	899b      	ldrh	r3, [r3, #12]
 80148ec:	461a      	mov	r2, r3
 80148ee:	2100      	movs	r1, #0
 80148f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80148f2:	f7fd f8c8 	bl	8011a86 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80148f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148f8:	3b01      	subs	r3, #1
 80148fa:	653b      	str	r3, [r7, #80]	; 0x50
 80148fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d1df      	bne.n	80148c2 <f_mkdir+0x172>
 8014902:	e000      	b.n	8014906 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8014904:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8014906:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801490a:	2b00      	cmp	r3, #0
 801490c:	d107      	bne.n	801491e <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801490e:	f107 030c 	add.w	r3, r7, #12
 8014912:	4618      	mov	r0, r3
 8014914:	f7fe f934 	bl	8012b80 <dir_register>
 8014918:	4603      	mov	r3, r0
 801491a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 801491e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014922:	2b00      	cmp	r3, #0
 8014924:	d120      	bne.n	8014968 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8014926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014928:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801492a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801492c:	3316      	adds	r3, #22
 801492e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014930:	4618      	mov	r0, r3
 8014932:	f7fd f85b 	bl	80119ec <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8014936:	68bb      	ldr	r3, [r7, #8]
 8014938:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801493a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801493c:	4618      	mov	r0, r3
 801493e:	f7fe f84d 	bl	80129dc <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8014942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014944:	330b      	adds	r3, #11
 8014946:	2210      	movs	r2, #16
 8014948:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801494a:	68bb      	ldr	r3, [r7, #8]
 801494c:	2201      	movs	r2, #1
 801494e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014950:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014954:	2b00      	cmp	r3, #0
 8014956:	d10e      	bne.n	8014976 <f_mkdir+0x226>
					res = sync_fs(fs);
 8014958:	68bb      	ldr	r3, [r7, #8]
 801495a:	4618      	mov	r0, r3
 801495c:	f7fd face 	bl	8011efc <sync_fs>
 8014960:	4603      	mov	r3, r0
 8014962:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8014966:	e006      	b.n	8014976 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014968:	f107 030c 	add.w	r3, r7, #12
 801496c:	2200      	movs	r2, #0
 801496e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014970:	4618      	mov	r0, r3
 8014972:	f7fd fd39 	bl	80123e8 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014976:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801497a:	4618      	mov	r0, r3
 801497c:	3758      	adds	r7, #88	; 0x58
 801497e:	46bd      	mov	sp, r7
 8014980:	bd80      	pop	{r7, pc}
 8014982:	bf00      	nop
 8014984:	274a0000 	.word	0x274a0000

08014988 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b088      	sub	sp, #32
 801498c:	af00      	add	r7, sp, #0
 801498e:	60f8      	str	r0, [r7, #12]
 8014990:	60b9      	str	r1, [r7, #8]
 8014992:	607a      	str	r2, [r7, #4]
	int n = 0;
 8014994:	2300      	movs	r3, #0
 8014996:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801499c:	e017      	b.n	80149ce <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801499e:	f107 0310 	add.w	r3, r7, #16
 80149a2:	f107 0114 	add.w	r1, r7, #20
 80149a6:	2201      	movs	r2, #1
 80149a8:	6878      	ldr	r0, [r7, #4]
 80149aa:	f7ff f803 	bl	80139b4 <f_read>
		if (rc != 1) break;
 80149ae:	693b      	ldr	r3, [r7, #16]
 80149b0:	2b01      	cmp	r3, #1
 80149b2:	d112      	bne.n	80149da <f_gets+0x52>
		c = s[0];
 80149b4:	7d3b      	ldrb	r3, [r7, #20]
 80149b6:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80149b8:	69bb      	ldr	r3, [r7, #24]
 80149ba:	1c5a      	adds	r2, r3, #1
 80149bc:	61ba      	str	r2, [r7, #24]
 80149be:	7dfa      	ldrb	r2, [r7, #23]
 80149c0:	701a      	strb	r2, [r3, #0]
		n++;
 80149c2:	69fb      	ldr	r3, [r7, #28]
 80149c4:	3301      	adds	r3, #1
 80149c6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80149c8:	7dfb      	ldrb	r3, [r7, #23]
 80149ca:	2b0a      	cmp	r3, #10
 80149cc:	d007      	beq.n	80149de <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80149ce:	68bb      	ldr	r3, [r7, #8]
 80149d0:	3b01      	subs	r3, #1
 80149d2:	69fa      	ldr	r2, [r7, #28]
 80149d4:	429a      	cmp	r2, r3
 80149d6:	dbe2      	blt.n	801499e <f_gets+0x16>
 80149d8:	e002      	b.n	80149e0 <f_gets+0x58>
		if (rc != 1) break;
 80149da:	bf00      	nop
 80149dc:	e000      	b.n	80149e0 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 80149de:	bf00      	nop
	}
	*p = 0;
 80149e0:	69bb      	ldr	r3, [r7, #24]
 80149e2:	2200      	movs	r2, #0
 80149e4:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80149e6:	69fb      	ldr	r3, [r7, #28]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d001      	beq.n	80149f0 <f_gets+0x68>
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	e000      	b.n	80149f2 <f_gets+0x6a>
 80149f0:	2300      	movs	r3, #0
}
 80149f2:	4618      	mov	r0, r3
 80149f4:	3720      	adds	r7, #32
 80149f6:	46bd      	mov	sp, r7
 80149f8:	bd80      	pop	{r7, pc}
	...

080149fc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80149fc:	b480      	push	{r7}
 80149fe:	b087      	sub	sp, #28
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	60f8      	str	r0, [r7, #12]
 8014a04:	60b9      	str	r1, [r7, #8]
 8014a06:	4613      	mov	r3, r2
 8014a08:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014a0a:	2301      	movs	r3, #1
 8014a0c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014a0e:	2300      	movs	r3, #0
 8014a10:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014a12:	4b1f      	ldr	r3, [pc, #124]	; (8014a90 <FATFS_LinkDriverEx+0x94>)
 8014a14:	7a5b      	ldrb	r3, [r3, #9]
 8014a16:	b2db      	uxtb	r3, r3
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d131      	bne.n	8014a80 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014a1c:	4b1c      	ldr	r3, [pc, #112]	; (8014a90 <FATFS_LinkDriverEx+0x94>)
 8014a1e:	7a5b      	ldrb	r3, [r3, #9]
 8014a20:	b2db      	uxtb	r3, r3
 8014a22:	461a      	mov	r2, r3
 8014a24:	4b1a      	ldr	r3, [pc, #104]	; (8014a90 <FATFS_LinkDriverEx+0x94>)
 8014a26:	2100      	movs	r1, #0
 8014a28:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014a2a:	4b19      	ldr	r3, [pc, #100]	; (8014a90 <FATFS_LinkDriverEx+0x94>)
 8014a2c:	7a5b      	ldrb	r3, [r3, #9]
 8014a2e:	b2db      	uxtb	r3, r3
 8014a30:	4a17      	ldr	r2, [pc, #92]	; (8014a90 <FATFS_LinkDriverEx+0x94>)
 8014a32:	009b      	lsls	r3, r3, #2
 8014a34:	4413      	add	r3, r2
 8014a36:	68fa      	ldr	r2, [r7, #12]
 8014a38:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014a3a:	4b15      	ldr	r3, [pc, #84]	; (8014a90 <FATFS_LinkDriverEx+0x94>)
 8014a3c:	7a5b      	ldrb	r3, [r3, #9]
 8014a3e:	b2db      	uxtb	r3, r3
 8014a40:	461a      	mov	r2, r3
 8014a42:	4b13      	ldr	r3, [pc, #76]	; (8014a90 <FATFS_LinkDriverEx+0x94>)
 8014a44:	4413      	add	r3, r2
 8014a46:	79fa      	ldrb	r2, [r7, #7]
 8014a48:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014a4a:	4b11      	ldr	r3, [pc, #68]	; (8014a90 <FATFS_LinkDriverEx+0x94>)
 8014a4c:	7a5b      	ldrb	r3, [r3, #9]
 8014a4e:	b2db      	uxtb	r3, r3
 8014a50:	1c5a      	adds	r2, r3, #1
 8014a52:	b2d1      	uxtb	r1, r2
 8014a54:	4a0e      	ldr	r2, [pc, #56]	; (8014a90 <FATFS_LinkDriverEx+0x94>)
 8014a56:	7251      	strb	r1, [r2, #9]
 8014a58:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014a5a:	7dbb      	ldrb	r3, [r7, #22]
 8014a5c:	3330      	adds	r3, #48	; 0x30
 8014a5e:	b2da      	uxtb	r2, r3
 8014a60:	68bb      	ldr	r3, [r7, #8]
 8014a62:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014a64:	68bb      	ldr	r3, [r7, #8]
 8014a66:	3301      	adds	r3, #1
 8014a68:	223a      	movs	r2, #58	; 0x3a
 8014a6a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014a6c:	68bb      	ldr	r3, [r7, #8]
 8014a6e:	3302      	adds	r3, #2
 8014a70:	222f      	movs	r2, #47	; 0x2f
 8014a72:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014a74:	68bb      	ldr	r3, [r7, #8]
 8014a76:	3303      	adds	r3, #3
 8014a78:	2200      	movs	r2, #0
 8014a7a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a82:	4618      	mov	r0, r3
 8014a84:	371c      	adds	r7, #28
 8014a86:	46bd      	mov	sp, r7
 8014a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8c:	4770      	bx	lr
 8014a8e:	bf00      	nop
 8014a90:	2004248c 	.word	0x2004248c

08014a94 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014a94:	b580      	push	{r7, lr}
 8014a96:	b082      	sub	sp, #8
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	6078      	str	r0, [r7, #4]
 8014a9c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	6839      	ldr	r1, [r7, #0]
 8014aa2:	6878      	ldr	r0, [r7, #4]
 8014aa4:	f7ff ffaa 	bl	80149fc <FATFS_LinkDriverEx>
 8014aa8:	4603      	mov	r3, r0
}
 8014aaa:	4618      	mov	r0, r3
 8014aac:	3708      	adds	r7, #8
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	bd80      	pop	{r7, pc}

08014ab2 <__cxa_guard_acquire>:
 8014ab2:	6803      	ldr	r3, [r0, #0]
 8014ab4:	07db      	lsls	r3, r3, #31
 8014ab6:	d406      	bmi.n	8014ac6 <__cxa_guard_acquire+0x14>
 8014ab8:	7843      	ldrb	r3, [r0, #1]
 8014aba:	b103      	cbz	r3, 8014abe <__cxa_guard_acquire+0xc>
 8014abc:	deff      	udf	#255	; 0xff
 8014abe:	2301      	movs	r3, #1
 8014ac0:	7043      	strb	r3, [r0, #1]
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	4770      	bx	lr
 8014ac6:	2000      	movs	r0, #0
 8014ac8:	4770      	bx	lr

08014aca <__cxa_guard_release>:
 8014aca:	2301      	movs	r3, #1
 8014acc:	6003      	str	r3, [r0, #0]
 8014ace:	4770      	bx	lr

08014ad0 <cos>:
 8014ad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014ad2:	ec51 0b10 	vmov	r0, r1, d0
 8014ad6:	4a1e      	ldr	r2, [pc, #120]	; (8014b50 <cos+0x80>)
 8014ad8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014adc:	4293      	cmp	r3, r2
 8014ade:	dc06      	bgt.n	8014aee <cos+0x1e>
 8014ae0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8014b48 <cos+0x78>
 8014ae4:	f000 fa74 	bl	8014fd0 <__kernel_cos>
 8014ae8:	ec51 0b10 	vmov	r0, r1, d0
 8014aec:	e007      	b.n	8014afe <cos+0x2e>
 8014aee:	4a19      	ldr	r2, [pc, #100]	; (8014b54 <cos+0x84>)
 8014af0:	4293      	cmp	r3, r2
 8014af2:	dd09      	ble.n	8014b08 <cos+0x38>
 8014af4:	ee10 2a10 	vmov	r2, s0
 8014af8:	460b      	mov	r3, r1
 8014afa:	f7eb fbdd 	bl	80002b8 <__aeabi_dsub>
 8014afe:	ec41 0b10 	vmov	d0, r0, r1
 8014b02:	b005      	add	sp, #20
 8014b04:	f85d fb04 	ldr.w	pc, [sp], #4
 8014b08:	4668      	mov	r0, sp
 8014b0a:	f000 f86d 	bl	8014be8 <__ieee754_rem_pio2>
 8014b0e:	f000 0003 	and.w	r0, r0, #3
 8014b12:	2801      	cmp	r0, #1
 8014b14:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014b18:	ed9d 0b00 	vldr	d0, [sp]
 8014b1c:	d007      	beq.n	8014b2e <cos+0x5e>
 8014b1e:	2802      	cmp	r0, #2
 8014b20:	d00e      	beq.n	8014b40 <cos+0x70>
 8014b22:	2800      	cmp	r0, #0
 8014b24:	d0de      	beq.n	8014ae4 <cos+0x14>
 8014b26:	2001      	movs	r0, #1
 8014b28:	f000 fe5a 	bl	80157e0 <__kernel_sin>
 8014b2c:	e7dc      	b.n	8014ae8 <cos+0x18>
 8014b2e:	f000 fe57 	bl	80157e0 <__kernel_sin>
 8014b32:	ec53 2b10 	vmov	r2, r3, d0
 8014b36:	ee10 0a10 	vmov	r0, s0
 8014b3a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014b3e:	e7de      	b.n	8014afe <cos+0x2e>
 8014b40:	f000 fa46 	bl	8014fd0 <__kernel_cos>
 8014b44:	e7f5      	b.n	8014b32 <cos+0x62>
 8014b46:	bf00      	nop
	...
 8014b50:	3fe921fb 	.word	0x3fe921fb
 8014b54:	7fefffff 	.word	0x7fefffff

08014b58 <sin>:
 8014b58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014b5a:	ec51 0b10 	vmov	r0, r1, d0
 8014b5e:	4a20      	ldr	r2, [pc, #128]	; (8014be0 <sin+0x88>)
 8014b60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014b64:	4293      	cmp	r3, r2
 8014b66:	dc07      	bgt.n	8014b78 <sin+0x20>
 8014b68:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8014bd8 <sin+0x80>
 8014b6c:	2000      	movs	r0, #0
 8014b6e:	f000 fe37 	bl	80157e0 <__kernel_sin>
 8014b72:	ec51 0b10 	vmov	r0, r1, d0
 8014b76:	e007      	b.n	8014b88 <sin+0x30>
 8014b78:	4a1a      	ldr	r2, [pc, #104]	; (8014be4 <sin+0x8c>)
 8014b7a:	4293      	cmp	r3, r2
 8014b7c:	dd09      	ble.n	8014b92 <sin+0x3a>
 8014b7e:	ee10 2a10 	vmov	r2, s0
 8014b82:	460b      	mov	r3, r1
 8014b84:	f7eb fb98 	bl	80002b8 <__aeabi_dsub>
 8014b88:	ec41 0b10 	vmov	d0, r0, r1
 8014b8c:	b005      	add	sp, #20
 8014b8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014b92:	4668      	mov	r0, sp
 8014b94:	f000 f828 	bl	8014be8 <__ieee754_rem_pio2>
 8014b98:	f000 0003 	and.w	r0, r0, #3
 8014b9c:	2801      	cmp	r0, #1
 8014b9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014ba2:	ed9d 0b00 	vldr	d0, [sp]
 8014ba6:	d004      	beq.n	8014bb2 <sin+0x5a>
 8014ba8:	2802      	cmp	r0, #2
 8014baa:	d005      	beq.n	8014bb8 <sin+0x60>
 8014bac:	b970      	cbnz	r0, 8014bcc <sin+0x74>
 8014bae:	2001      	movs	r0, #1
 8014bb0:	e7dd      	b.n	8014b6e <sin+0x16>
 8014bb2:	f000 fa0d 	bl	8014fd0 <__kernel_cos>
 8014bb6:	e7dc      	b.n	8014b72 <sin+0x1a>
 8014bb8:	2001      	movs	r0, #1
 8014bba:	f000 fe11 	bl	80157e0 <__kernel_sin>
 8014bbe:	ec53 2b10 	vmov	r2, r3, d0
 8014bc2:	ee10 0a10 	vmov	r0, s0
 8014bc6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014bca:	e7dd      	b.n	8014b88 <sin+0x30>
 8014bcc:	f000 fa00 	bl	8014fd0 <__kernel_cos>
 8014bd0:	e7f5      	b.n	8014bbe <sin+0x66>
 8014bd2:	bf00      	nop
 8014bd4:	f3af 8000 	nop.w
	...
 8014be0:	3fe921fb 	.word	0x3fe921fb
 8014be4:	7fefffff 	.word	0x7fefffff

08014be8 <__ieee754_rem_pio2>:
 8014be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bec:	ec57 6b10 	vmov	r6, r7, d0
 8014bf0:	4bc3      	ldr	r3, [pc, #780]	; (8014f00 <__ieee754_rem_pio2+0x318>)
 8014bf2:	b08d      	sub	sp, #52	; 0x34
 8014bf4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8014bf8:	4598      	cmp	r8, r3
 8014bfa:	4604      	mov	r4, r0
 8014bfc:	9704      	str	r7, [sp, #16]
 8014bfe:	dc07      	bgt.n	8014c10 <__ieee754_rem_pio2+0x28>
 8014c00:	2200      	movs	r2, #0
 8014c02:	2300      	movs	r3, #0
 8014c04:	ed84 0b00 	vstr	d0, [r4]
 8014c08:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014c0c:	2500      	movs	r5, #0
 8014c0e:	e027      	b.n	8014c60 <__ieee754_rem_pio2+0x78>
 8014c10:	4bbc      	ldr	r3, [pc, #752]	; (8014f04 <__ieee754_rem_pio2+0x31c>)
 8014c12:	4598      	cmp	r8, r3
 8014c14:	dc75      	bgt.n	8014d02 <__ieee754_rem_pio2+0x11a>
 8014c16:	9b04      	ldr	r3, [sp, #16]
 8014c18:	4dbb      	ldr	r5, [pc, #748]	; (8014f08 <__ieee754_rem_pio2+0x320>)
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	ee10 0a10 	vmov	r0, s0
 8014c20:	a3a9      	add	r3, pc, #676	; (adr r3, 8014ec8 <__ieee754_rem_pio2+0x2e0>)
 8014c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c26:	4639      	mov	r1, r7
 8014c28:	dd36      	ble.n	8014c98 <__ieee754_rem_pio2+0xb0>
 8014c2a:	f7eb fb45 	bl	80002b8 <__aeabi_dsub>
 8014c2e:	45a8      	cmp	r8, r5
 8014c30:	4606      	mov	r6, r0
 8014c32:	460f      	mov	r7, r1
 8014c34:	d018      	beq.n	8014c68 <__ieee754_rem_pio2+0x80>
 8014c36:	a3a6      	add	r3, pc, #664	; (adr r3, 8014ed0 <__ieee754_rem_pio2+0x2e8>)
 8014c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c3c:	f7eb fb3c 	bl	80002b8 <__aeabi_dsub>
 8014c40:	4602      	mov	r2, r0
 8014c42:	460b      	mov	r3, r1
 8014c44:	e9c4 2300 	strd	r2, r3, [r4]
 8014c48:	4630      	mov	r0, r6
 8014c4a:	4639      	mov	r1, r7
 8014c4c:	f7eb fb34 	bl	80002b8 <__aeabi_dsub>
 8014c50:	a39f      	add	r3, pc, #636	; (adr r3, 8014ed0 <__ieee754_rem_pio2+0x2e8>)
 8014c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c56:	f7eb fb2f 	bl	80002b8 <__aeabi_dsub>
 8014c5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014c5e:	2501      	movs	r5, #1
 8014c60:	4628      	mov	r0, r5
 8014c62:	b00d      	add	sp, #52	; 0x34
 8014c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c68:	a39b      	add	r3, pc, #620	; (adr r3, 8014ed8 <__ieee754_rem_pio2+0x2f0>)
 8014c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c6e:	f7eb fb23 	bl	80002b8 <__aeabi_dsub>
 8014c72:	a39b      	add	r3, pc, #620	; (adr r3, 8014ee0 <__ieee754_rem_pio2+0x2f8>)
 8014c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c78:	4606      	mov	r6, r0
 8014c7a:	460f      	mov	r7, r1
 8014c7c:	f7eb fb1c 	bl	80002b8 <__aeabi_dsub>
 8014c80:	4602      	mov	r2, r0
 8014c82:	460b      	mov	r3, r1
 8014c84:	e9c4 2300 	strd	r2, r3, [r4]
 8014c88:	4630      	mov	r0, r6
 8014c8a:	4639      	mov	r1, r7
 8014c8c:	f7eb fb14 	bl	80002b8 <__aeabi_dsub>
 8014c90:	a393      	add	r3, pc, #588	; (adr r3, 8014ee0 <__ieee754_rem_pio2+0x2f8>)
 8014c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c96:	e7de      	b.n	8014c56 <__ieee754_rem_pio2+0x6e>
 8014c98:	f7eb fb10 	bl	80002bc <__adddf3>
 8014c9c:	45a8      	cmp	r8, r5
 8014c9e:	4606      	mov	r6, r0
 8014ca0:	460f      	mov	r7, r1
 8014ca2:	d016      	beq.n	8014cd2 <__ieee754_rem_pio2+0xea>
 8014ca4:	a38a      	add	r3, pc, #552	; (adr r3, 8014ed0 <__ieee754_rem_pio2+0x2e8>)
 8014ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014caa:	f7eb fb07 	bl	80002bc <__adddf3>
 8014cae:	4602      	mov	r2, r0
 8014cb0:	460b      	mov	r3, r1
 8014cb2:	e9c4 2300 	strd	r2, r3, [r4]
 8014cb6:	4630      	mov	r0, r6
 8014cb8:	4639      	mov	r1, r7
 8014cba:	f7eb fafd 	bl	80002b8 <__aeabi_dsub>
 8014cbe:	a384      	add	r3, pc, #528	; (adr r3, 8014ed0 <__ieee754_rem_pio2+0x2e8>)
 8014cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cc4:	f7eb fafa 	bl	80002bc <__adddf3>
 8014cc8:	f04f 35ff 	mov.w	r5, #4294967295
 8014ccc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014cd0:	e7c6      	b.n	8014c60 <__ieee754_rem_pio2+0x78>
 8014cd2:	a381      	add	r3, pc, #516	; (adr r3, 8014ed8 <__ieee754_rem_pio2+0x2f0>)
 8014cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cd8:	f7eb faf0 	bl	80002bc <__adddf3>
 8014cdc:	a380      	add	r3, pc, #512	; (adr r3, 8014ee0 <__ieee754_rem_pio2+0x2f8>)
 8014cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ce2:	4606      	mov	r6, r0
 8014ce4:	460f      	mov	r7, r1
 8014ce6:	f7eb fae9 	bl	80002bc <__adddf3>
 8014cea:	4602      	mov	r2, r0
 8014cec:	460b      	mov	r3, r1
 8014cee:	e9c4 2300 	strd	r2, r3, [r4]
 8014cf2:	4630      	mov	r0, r6
 8014cf4:	4639      	mov	r1, r7
 8014cf6:	f7eb fadf 	bl	80002b8 <__aeabi_dsub>
 8014cfa:	a379      	add	r3, pc, #484	; (adr r3, 8014ee0 <__ieee754_rem_pio2+0x2f8>)
 8014cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d00:	e7e0      	b.n	8014cc4 <__ieee754_rem_pio2+0xdc>
 8014d02:	4b82      	ldr	r3, [pc, #520]	; (8014f0c <__ieee754_rem_pio2+0x324>)
 8014d04:	4598      	cmp	r8, r3
 8014d06:	f300 80d0 	bgt.w	8014eaa <__ieee754_rem_pio2+0x2c2>
 8014d0a:	f000 fe23 	bl	8015954 <fabs>
 8014d0e:	ec57 6b10 	vmov	r6, r7, d0
 8014d12:	ee10 0a10 	vmov	r0, s0
 8014d16:	a374      	add	r3, pc, #464	; (adr r3, 8014ee8 <__ieee754_rem_pio2+0x300>)
 8014d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d1c:	4639      	mov	r1, r7
 8014d1e:	f7eb fc83 	bl	8000628 <__aeabi_dmul>
 8014d22:	2200      	movs	r2, #0
 8014d24:	4b7a      	ldr	r3, [pc, #488]	; (8014f10 <__ieee754_rem_pio2+0x328>)
 8014d26:	f7eb fac9 	bl	80002bc <__adddf3>
 8014d2a:	f7eb ff2d 	bl	8000b88 <__aeabi_d2iz>
 8014d2e:	4605      	mov	r5, r0
 8014d30:	f7eb fc10 	bl	8000554 <__aeabi_i2d>
 8014d34:	a364      	add	r3, pc, #400	; (adr r3, 8014ec8 <__ieee754_rem_pio2+0x2e0>)
 8014d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014d3e:	f7eb fc73 	bl	8000628 <__aeabi_dmul>
 8014d42:	4602      	mov	r2, r0
 8014d44:	460b      	mov	r3, r1
 8014d46:	4630      	mov	r0, r6
 8014d48:	4639      	mov	r1, r7
 8014d4a:	f7eb fab5 	bl	80002b8 <__aeabi_dsub>
 8014d4e:	a360      	add	r3, pc, #384	; (adr r3, 8014ed0 <__ieee754_rem_pio2+0x2e8>)
 8014d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d54:	4682      	mov	sl, r0
 8014d56:	468b      	mov	fp, r1
 8014d58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014d5c:	f7eb fc64 	bl	8000628 <__aeabi_dmul>
 8014d60:	2d1f      	cmp	r5, #31
 8014d62:	4606      	mov	r6, r0
 8014d64:	460f      	mov	r7, r1
 8014d66:	dc0c      	bgt.n	8014d82 <__ieee754_rem_pio2+0x19a>
 8014d68:	1e6a      	subs	r2, r5, #1
 8014d6a:	4b6a      	ldr	r3, [pc, #424]	; (8014f14 <__ieee754_rem_pio2+0x32c>)
 8014d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d70:	4543      	cmp	r3, r8
 8014d72:	d006      	beq.n	8014d82 <__ieee754_rem_pio2+0x19a>
 8014d74:	4632      	mov	r2, r6
 8014d76:	463b      	mov	r3, r7
 8014d78:	4650      	mov	r0, sl
 8014d7a:	4659      	mov	r1, fp
 8014d7c:	f7eb fa9c 	bl	80002b8 <__aeabi_dsub>
 8014d80:	e00e      	b.n	8014da0 <__ieee754_rem_pio2+0x1b8>
 8014d82:	4632      	mov	r2, r6
 8014d84:	463b      	mov	r3, r7
 8014d86:	4650      	mov	r0, sl
 8014d88:	4659      	mov	r1, fp
 8014d8a:	f7eb fa95 	bl	80002b8 <__aeabi_dsub>
 8014d8e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014d92:	9305      	str	r3, [sp, #20]
 8014d94:	9a05      	ldr	r2, [sp, #20]
 8014d96:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014d9a:	1ad3      	subs	r3, r2, r3
 8014d9c:	2b10      	cmp	r3, #16
 8014d9e:	dc02      	bgt.n	8014da6 <__ieee754_rem_pio2+0x1be>
 8014da0:	e9c4 0100 	strd	r0, r1, [r4]
 8014da4:	e039      	b.n	8014e1a <__ieee754_rem_pio2+0x232>
 8014da6:	a34c      	add	r3, pc, #304	; (adr r3, 8014ed8 <__ieee754_rem_pio2+0x2f0>)
 8014da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014db0:	f7eb fc3a 	bl	8000628 <__aeabi_dmul>
 8014db4:	4606      	mov	r6, r0
 8014db6:	460f      	mov	r7, r1
 8014db8:	4602      	mov	r2, r0
 8014dba:	460b      	mov	r3, r1
 8014dbc:	4650      	mov	r0, sl
 8014dbe:	4659      	mov	r1, fp
 8014dc0:	f7eb fa7a 	bl	80002b8 <__aeabi_dsub>
 8014dc4:	4602      	mov	r2, r0
 8014dc6:	460b      	mov	r3, r1
 8014dc8:	4680      	mov	r8, r0
 8014dca:	4689      	mov	r9, r1
 8014dcc:	4650      	mov	r0, sl
 8014dce:	4659      	mov	r1, fp
 8014dd0:	f7eb fa72 	bl	80002b8 <__aeabi_dsub>
 8014dd4:	4632      	mov	r2, r6
 8014dd6:	463b      	mov	r3, r7
 8014dd8:	f7eb fa6e 	bl	80002b8 <__aeabi_dsub>
 8014ddc:	a340      	add	r3, pc, #256	; (adr r3, 8014ee0 <__ieee754_rem_pio2+0x2f8>)
 8014dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014de2:	4606      	mov	r6, r0
 8014de4:	460f      	mov	r7, r1
 8014de6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014dea:	f7eb fc1d 	bl	8000628 <__aeabi_dmul>
 8014dee:	4632      	mov	r2, r6
 8014df0:	463b      	mov	r3, r7
 8014df2:	f7eb fa61 	bl	80002b8 <__aeabi_dsub>
 8014df6:	4602      	mov	r2, r0
 8014df8:	460b      	mov	r3, r1
 8014dfa:	4606      	mov	r6, r0
 8014dfc:	460f      	mov	r7, r1
 8014dfe:	4640      	mov	r0, r8
 8014e00:	4649      	mov	r1, r9
 8014e02:	f7eb fa59 	bl	80002b8 <__aeabi_dsub>
 8014e06:	9a05      	ldr	r2, [sp, #20]
 8014e08:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014e0c:	1ad3      	subs	r3, r2, r3
 8014e0e:	2b31      	cmp	r3, #49	; 0x31
 8014e10:	dc20      	bgt.n	8014e54 <__ieee754_rem_pio2+0x26c>
 8014e12:	e9c4 0100 	strd	r0, r1, [r4]
 8014e16:	46c2      	mov	sl, r8
 8014e18:	46cb      	mov	fp, r9
 8014e1a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014e1e:	4650      	mov	r0, sl
 8014e20:	4642      	mov	r2, r8
 8014e22:	464b      	mov	r3, r9
 8014e24:	4659      	mov	r1, fp
 8014e26:	f7eb fa47 	bl	80002b8 <__aeabi_dsub>
 8014e2a:	463b      	mov	r3, r7
 8014e2c:	4632      	mov	r2, r6
 8014e2e:	f7eb fa43 	bl	80002b8 <__aeabi_dsub>
 8014e32:	9b04      	ldr	r3, [sp, #16]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014e3a:	f6bf af11 	bge.w	8014c60 <__ieee754_rem_pio2+0x78>
 8014e3e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014e42:	6063      	str	r3, [r4, #4]
 8014e44:	f8c4 8000 	str.w	r8, [r4]
 8014e48:	60a0      	str	r0, [r4, #8]
 8014e4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014e4e:	60e3      	str	r3, [r4, #12]
 8014e50:	426d      	negs	r5, r5
 8014e52:	e705      	b.n	8014c60 <__ieee754_rem_pio2+0x78>
 8014e54:	a326      	add	r3, pc, #152	; (adr r3, 8014ef0 <__ieee754_rem_pio2+0x308>)
 8014e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014e5e:	f7eb fbe3 	bl	8000628 <__aeabi_dmul>
 8014e62:	4606      	mov	r6, r0
 8014e64:	460f      	mov	r7, r1
 8014e66:	4602      	mov	r2, r0
 8014e68:	460b      	mov	r3, r1
 8014e6a:	4640      	mov	r0, r8
 8014e6c:	4649      	mov	r1, r9
 8014e6e:	f7eb fa23 	bl	80002b8 <__aeabi_dsub>
 8014e72:	4602      	mov	r2, r0
 8014e74:	460b      	mov	r3, r1
 8014e76:	4682      	mov	sl, r0
 8014e78:	468b      	mov	fp, r1
 8014e7a:	4640      	mov	r0, r8
 8014e7c:	4649      	mov	r1, r9
 8014e7e:	f7eb fa1b 	bl	80002b8 <__aeabi_dsub>
 8014e82:	4632      	mov	r2, r6
 8014e84:	463b      	mov	r3, r7
 8014e86:	f7eb fa17 	bl	80002b8 <__aeabi_dsub>
 8014e8a:	a31b      	add	r3, pc, #108	; (adr r3, 8014ef8 <__ieee754_rem_pio2+0x310>)
 8014e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e90:	4606      	mov	r6, r0
 8014e92:	460f      	mov	r7, r1
 8014e94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014e98:	f7eb fbc6 	bl	8000628 <__aeabi_dmul>
 8014e9c:	4632      	mov	r2, r6
 8014e9e:	463b      	mov	r3, r7
 8014ea0:	f7eb fa0a 	bl	80002b8 <__aeabi_dsub>
 8014ea4:	4606      	mov	r6, r0
 8014ea6:	460f      	mov	r7, r1
 8014ea8:	e764      	b.n	8014d74 <__ieee754_rem_pio2+0x18c>
 8014eaa:	4b1b      	ldr	r3, [pc, #108]	; (8014f18 <__ieee754_rem_pio2+0x330>)
 8014eac:	4598      	cmp	r8, r3
 8014eae:	dd35      	ble.n	8014f1c <__ieee754_rem_pio2+0x334>
 8014eb0:	ee10 2a10 	vmov	r2, s0
 8014eb4:	463b      	mov	r3, r7
 8014eb6:	4630      	mov	r0, r6
 8014eb8:	4639      	mov	r1, r7
 8014eba:	f7eb f9fd 	bl	80002b8 <__aeabi_dsub>
 8014ebe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014ec2:	e9c4 0100 	strd	r0, r1, [r4]
 8014ec6:	e6a1      	b.n	8014c0c <__ieee754_rem_pio2+0x24>
 8014ec8:	54400000 	.word	0x54400000
 8014ecc:	3ff921fb 	.word	0x3ff921fb
 8014ed0:	1a626331 	.word	0x1a626331
 8014ed4:	3dd0b461 	.word	0x3dd0b461
 8014ed8:	1a600000 	.word	0x1a600000
 8014edc:	3dd0b461 	.word	0x3dd0b461
 8014ee0:	2e037073 	.word	0x2e037073
 8014ee4:	3ba3198a 	.word	0x3ba3198a
 8014ee8:	6dc9c883 	.word	0x6dc9c883
 8014eec:	3fe45f30 	.word	0x3fe45f30
 8014ef0:	2e000000 	.word	0x2e000000
 8014ef4:	3ba3198a 	.word	0x3ba3198a
 8014ef8:	252049c1 	.word	0x252049c1
 8014efc:	397b839a 	.word	0x397b839a
 8014f00:	3fe921fb 	.word	0x3fe921fb
 8014f04:	4002d97b 	.word	0x4002d97b
 8014f08:	3ff921fb 	.word	0x3ff921fb
 8014f0c:	413921fb 	.word	0x413921fb
 8014f10:	3fe00000 	.word	0x3fe00000
 8014f14:	0801a48c 	.word	0x0801a48c
 8014f18:	7fefffff 	.word	0x7fefffff
 8014f1c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014f20:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8014f24:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014f28:	4630      	mov	r0, r6
 8014f2a:	460f      	mov	r7, r1
 8014f2c:	f7eb fe2c 	bl	8000b88 <__aeabi_d2iz>
 8014f30:	f7eb fb10 	bl	8000554 <__aeabi_i2d>
 8014f34:	4602      	mov	r2, r0
 8014f36:	460b      	mov	r3, r1
 8014f38:	4630      	mov	r0, r6
 8014f3a:	4639      	mov	r1, r7
 8014f3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014f40:	f7eb f9ba 	bl	80002b8 <__aeabi_dsub>
 8014f44:	2200      	movs	r2, #0
 8014f46:	4b1f      	ldr	r3, [pc, #124]	; (8014fc4 <__ieee754_rem_pio2+0x3dc>)
 8014f48:	f7eb fb6e 	bl	8000628 <__aeabi_dmul>
 8014f4c:	460f      	mov	r7, r1
 8014f4e:	4606      	mov	r6, r0
 8014f50:	f7eb fe1a 	bl	8000b88 <__aeabi_d2iz>
 8014f54:	f7eb fafe 	bl	8000554 <__aeabi_i2d>
 8014f58:	4602      	mov	r2, r0
 8014f5a:	460b      	mov	r3, r1
 8014f5c:	4630      	mov	r0, r6
 8014f5e:	4639      	mov	r1, r7
 8014f60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014f64:	f7eb f9a8 	bl	80002b8 <__aeabi_dsub>
 8014f68:	2200      	movs	r2, #0
 8014f6a:	4b16      	ldr	r3, [pc, #88]	; (8014fc4 <__ieee754_rem_pio2+0x3dc>)
 8014f6c:	f7eb fb5c 	bl	8000628 <__aeabi_dmul>
 8014f70:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014f74:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8014f78:	f04f 0803 	mov.w	r8, #3
 8014f7c:	2600      	movs	r6, #0
 8014f7e:	2700      	movs	r7, #0
 8014f80:	4632      	mov	r2, r6
 8014f82:	463b      	mov	r3, r7
 8014f84:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014f88:	f108 3aff 	add.w	sl, r8, #4294967295
 8014f8c:	f7eb fdb4 	bl	8000af8 <__aeabi_dcmpeq>
 8014f90:	b9b0      	cbnz	r0, 8014fc0 <__ieee754_rem_pio2+0x3d8>
 8014f92:	4b0d      	ldr	r3, [pc, #52]	; (8014fc8 <__ieee754_rem_pio2+0x3e0>)
 8014f94:	9301      	str	r3, [sp, #4]
 8014f96:	2302      	movs	r3, #2
 8014f98:	9300      	str	r3, [sp, #0]
 8014f9a:	462a      	mov	r2, r5
 8014f9c:	4643      	mov	r3, r8
 8014f9e:	4621      	mov	r1, r4
 8014fa0:	a806      	add	r0, sp, #24
 8014fa2:	f000 f8dd 	bl	8015160 <__kernel_rem_pio2>
 8014fa6:	9b04      	ldr	r3, [sp, #16]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	4605      	mov	r5, r0
 8014fac:	f6bf ae58 	bge.w	8014c60 <__ieee754_rem_pio2+0x78>
 8014fb0:	6863      	ldr	r3, [r4, #4]
 8014fb2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014fb6:	6063      	str	r3, [r4, #4]
 8014fb8:	68e3      	ldr	r3, [r4, #12]
 8014fba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014fbe:	e746      	b.n	8014e4e <__ieee754_rem_pio2+0x266>
 8014fc0:	46d0      	mov	r8, sl
 8014fc2:	e7dd      	b.n	8014f80 <__ieee754_rem_pio2+0x398>
 8014fc4:	41700000 	.word	0x41700000
 8014fc8:	0801a50c 	.word	0x0801a50c
 8014fcc:	00000000 	.word	0x00000000

08014fd0 <__kernel_cos>:
 8014fd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fd4:	ec59 8b10 	vmov	r8, r9, d0
 8014fd8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8014fdc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8014fe0:	ed2d 8b02 	vpush	{d8}
 8014fe4:	eeb0 8a41 	vmov.f32	s16, s2
 8014fe8:	eef0 8a61 	vmov.f32	s17, s3
 8014fec:	da07      	bge.n	8014ffe <__kernel_cos+0x2e>
 8014fee:	ee10 0a10 	vmov	r0, s0
 8014ff2:	4649      	mov	r1, r9
 8014ff4:	f7eb fdc8 	bl	8000b88 <__aeabi_d2iz>
 8014ff8:	2800      	cmp	r0, #0
 8014ffa:	f000 8089 	beq.w	8015110 <__kernel_cos+0x140>
 8014ffe:	4642      	mov	r2, r8
 8015000:	464b      	mov	r3, r9
 8015002:	4640      	mov	r0, r8
 8015004:	4649      	mov	r1, r9
 8015006:	f7eb fb0f 	bl	8000628 <__aeabi_dmul>
 801500a:	2200      	movs	r2, #0
 801500c:	4b4e      	ldr	r3, [pc, #312]	; (8015148 <__kernel_cos+0x178>)
 801500e:	4604      	mov	r4, r0
 8015010:	460d      	mov	r5, r1
 8015012:	f7eb fb09 	bl	8000628 <__aeabi_dmul>
 8015016:	a340      	add	r3, pc, #256	; (adr r3, 8015118 <__kernel_cos+0x148>)
 8015018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801501c:	4682      	mov	sl, r0
 801501e:	468b      	mov	fp, r1
 8015020:	4620      	mov	r0, r4
 8015022:	4629      	mov	r1, r5
 8015024:	f7eb fb00 	bl	8000628 <__aeabi_dmul>
 8015028:	a33d      	add	r3, pc, #244	; (adr r3, 8015120 <__kernel_cos+0x150>)
 801502a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801502e:	f7eb f945 	bl	80002bc <__adddf3>
 8015032:	4622      	mov	r2, r4
 8015034:	462b      	mov	r3, r5
 8015036:	f7eb faf7 	bl	8000628 <__aeabi_dmul>
 801503a:	a33b      	add	r3, pc, #236	; (adr r3, 8015128 <__kernel_cos+0x158>)
 801503c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015040:	f7eb f93a 	bl	80002b8 <__aeabi_dsub>
 8015044:	4622      	mov	r2, r4
 8015046:	462b      	mov	r3, r5
 8015048:	f7eb faee 	bl	8000628 <__aeabi_dmul>
 801504c:	a338      	add	r3, pc, #224	; (adr r3, 8015130 <__kernel_cos+0x160>)
 801504e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015052:	f7eb f933 	bl	80002bc <__adddf3>
 8015056:	4622      	mov	r2, r4
 8015058:	462b      	mov	r3, r5
 801505a:	f7eb fae5 	bl	8000628 <__aeabi_dmul>
 801505e:	a336      	add	r3, pc, #216	; (adr r3, 8015138 <__kernel_cos+0x168>)
 8015060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015064:	f7eb f928 	bl	80002b8 <__aeabi_dsub>
 8015068:	4622      	mov	r2, r4
 801506a:	462b      	mov	r3, r5
 801506c:	f7eb fadc 	bl	8000628 <__aeabi_dmul>
 8015070:	a333      	add	r3, pc, #204	; (adr r3, 8015140 <__kernel_cos+0x170>)
 8015072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015076:	f7eb f921 	bl	80002bc <__adddf3>
 801507a:	4622      	mov	r2, r4
 801507c:	462b      	mov	r3, r5
 801507e:	f7eb fad3 	bl	8000628 <__aeabi_dmul>
 8015082:	4622      	mov	r2, r4
 8015084:	462b      	mov	r3, r5
 8015086:	f7eb facf 	bl	8000628 <__aeabi_dmul>
 801508a:	ec53 2b18 	vmov	r2, r3, d8
 801508e:	4604      	mov	r4, r0
 8015090:	460d      	mov	r5, r1
 8015092:	4640      	mov	r0, r8
 8015094:	4649      	mov	r1, r9
 8015096:	f7eb fac7 	bl	8000628 <__aeabi_dmul>
 801509a:	460b      	mov	r3, r1
 801509c:	4602      	mov	r2, r0
 801509e:	4629      	mov	r1, r5
 80150a0:	4620      	mov	r0, r4
 80150a2:	f7eb f909 	bl	80002b8 <__aeabi_dsub>
 80150a6:	4b29      	ldr	r3, [pc, #164]	; (801514c <__kernel_cos+0x17c>)
 80150a8:	429e      	cmp	r6, r3
 80150aa:	4680      	mov	r8, r0
 80150ac:	4689      	mov	r9, r1
 80150ae:	dc11      	bgt.n	80150d4 <__kernel_cos+0x104>
 80150b0:	4602      	mov	r2, r0
 80150b2:	460b      	mov	r3, r1
 80150b4:	4650      	mov	r0, sl
 80150b6:	4659      	mov	r1, fp
 80150b8:	f7eb f8fe 	bl	80002b8 <__aeabi_dsub>
 80150bc:	460b      	mov	r3, r1
 80150be:	4924      	ldr	r1, [pc, #144]	; (8015150 <__kernel_cos+0x180>)
 80150c0:	4602      	mov	r2, r0
 80150c2:	2000      	movs	r0, #0
 80150c4:	f7eb f8f8 	bl	80002b8 <__aeabi_dsub>
 80150c8:	ecbd 8b02 	vpop	{d8}
 80150cc:	ec41 0b10 	vmov	d0, r0, r1
 80150d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150d4:	4b1f      	ldr	r3, [pc, #124]	; (8015154 <__kernel_cos+0x184>)
 80150d6:	491e      	ldr	r1, [pc, #120]	; (8015150 <__kernel_cos+0x180>)
 80150d8:	429e      	cmp	r6, r3
 80150da:	bfcc      	ite	gt
 80150dc:	4d1e      	ldrgt	r5, [pc, #120]	; (8015158 <__kernel_cos+0x188>)
 80150de:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80150e2:	2400      	movs	r4, #0
 80150e4:	4622      	mov	r2, r4
 80150e6:	462b      	mov	r3, r5
 80150e8:	2000      	movs	r0, #0
 80150ea:	f7eb f8e5 	bl	80002b8 <__aeabi_dsub>
 80150ee:	4622      	mov	r2, r4
 80150f0:	4606      	mov	r6, r0
 80150f2:	460f      	mov	r7, r1
 80150f4:	462b      	mov	r3, r5
 80150f6:	4650      	mov	r0, sl
 80150f8:	4659      	mov	r1, fp
 80150fa:	f7eb f8dd 	bl	80002b8 <__aeabi_dsub>
 80150fe:	4642      	mov	r2, r8
 8015100:	464b      	mov	r3, r9
 8015102:	f7eb f8d9 	bl	80002b8 <__aeabi_dsub>
 8015106:	4602      	mov	r2, r0
 8015108:	460b      	mov	r3, r1
 801510a:	4630      	mov	r0, r6
 801510c:	4639      	mov	r1, r7
 801510e:	e7d9      	b.n	80150c4 <__kernel_cos+0xf4>
 8015110:	2000      	movs	r0, #0
 8015112:	490f      	ldr	r1, [pc, #60]	; (8015150 <__kernel_cos+0x180>)
 8015114:	e7d8      	b.n	80150c8 <__kernel_cos+0xf8>
 8015116:	bf00      	nop
 8015118:	be8838d4 	.word	0xbe8838d4
 801511c:	bda8fae9 	.word	0xbda8fae9
 8015120:	bdb4b1c4 	.word	0xbdb4b1c4
 8015124:	3e21ee9e 	.word	0x3e21ee9e
 8015128:	809c52ad 	.word	0x809c52ad
 801512c:	3e927e4f 	.word	0x3e927e4f
 8015130:	19cb1590 	.word	0x19cb1590
 8015134:	3efa01a0 	.word	0x3efa01a0
 8015138:	16c15177 	.word	0x16c15177
 801513c:	3f56c16c 	.word	0x3f56c16c
 8015140:	5555554c 	.word	0x5555554c
 8015144:	3fa55555 	.word	0x3fa55555
 8015148:	3fe00000 	.word	0x3fe00000
 801514c:	3fd33332 	.word	0x3fd33332
 8015150:	3ff00000 	.word	0x3ff00000
 8015154:	3fe90000 	.word	0x3fe90000
 8015158:	3fd20000 	.word	0x3fd20000
 801515c:	00000000 	.word	0x00000000

08015160 <__kernel_rem_pio2>:
 8015160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015164:	ed2d 8b02 	vpush	{d8}
 8015168:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801516c:	1ed4      	subs	r4, r2, #3
 801516e:	9308      	str	r3, [sp, #32]
 8015170:	9101      	str	r1, [sp, #4]
 8015172:	4bc5      	ldr	r3, [pc, #788]	; (8015488 <__kernel_rem_pio2+0x328>)
 8015174:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8015176:	9009      	str	r0, [sp, #36]	; 0x24
 8015178:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801517c:	9304      	str	r3, [sp, #16]
 801517e:	9b08      	ldr	r3, [sp, #32]
 8015180:	3b01      	subs	r3, #1
 8015182:	9307      	str	r3, [sp, #28]
 8015184:	2318      	movs	r3, #24
 8015186:	fb94 f4f3 	sdiv	r4, r4, r3
 801518a:	f06f 0317 	mvn.w	r3, #23
 801518e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8015192:	fb04 3303 	mla	r3, r4, r3, r3
 8015196:	eb03 0a02 	add.w	sl, r3, r2
 801519a:	9b04      	ldr	r3, [sp, #16]
 801519c:	9a07      	ldr	r2, [sp, #28]
 801519e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8015478 <__kernel_rem_pio2+0x318>
 80151a2:	eb03 0802 	add.w	r8, r3, r2
 80151a6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80151a8:	1aa7      	subs	r7, r4, r2
 80151aa:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80151ae:	ae22      	add	r6, sp, #136	; 0x88
 80151b0:	2500      	movs	r5, #0
 80151b2:	4545      	cmp	r5, r8
 80151b4:	dd13      	ble.n	80151de <__kernel_rem_pio2+0x7e>
 80151b6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8015478 <__kernel_rem_pio2+0x318>
 80151ba:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80151be:	2600      	movs	r6, #0
 80151c0:	9b04      	ldr	r3, [sp, #16]
 80151c2:	429e      	cmp	r6, r3
 80151c4:	dc32      	bgt.n	801522c <__kernel_rem_pio2+0xcc>
 80151c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151c8:	9302      	str	r3, [sp, #8]
 80151ca:	9b08      	ldr	r3, [sp, #32]
 80151cc:	199d      	adds	r5, r3, r6
 80151ce:	ab22      	add	r3, sp, #136	; 0x88
 80151d0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80151d4:	9306      	str	r3, [sp, #24]
 80151d6:	ec59 8b18 	vmov	r8, r9, d8
 80151da:	2700      	movs	r7, #0
 80151dc:	e01f      	b.n	801521e <__kernel_rem_pio2+0xbe>
 80151de:	42ef      	cmn	r7, r5
 80151e0:	d407      	bmi.n	80151f2 <__kernel_rem_pio2+0x92>
 80151e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80151e6:	f7eb f9b5 	bl	8000554 <__aeabi_i2d>
 80151ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 80151ee:	3501      	adds	r5, #1
 80151f0:	e7df      	b.n	80151b2 <__kernel_rem_pio2+0x52>
 80151f2:	ec51 0b18 	vmov	r0, r1, d8
 80151f6:	e7f8      	b.n	80151ea <__kernel_rem_pio2+0x8a>
 80151f8:	9906      	ldr	r1, [sp, #24]
 80151fa:	9d02      	ldr	r5, [sp, #8]
 80151fc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8015200:	9106      	str	r1, [sp, #24]
 8015202:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8015206:	9502      	str	r5, [sp, #8]
 8015208:	f7eb fa0e 	bl	8000628 <__aeabi_dmul>
 801520c:	4602      	mov	r2, r0
 801520e:	460b      	mov	r3, r1
 8015210:	4640      	mov	r0, r8
 8015212:	4649      	mov	r1, r9
 8015214:	f7eb f852 	bl	80002bc <__adddf3>
 8015218:	3701      	adds	r7, #1
 801521a:	4680      	mov	r8, r0
 801521c:	4689      	mov	r9, r1
 801521e:	9b07      	ldr	r3, [sp, #28]
 8015220:	429f      	cmp	r7, r3
 8015222:	dde9      	ble.n	80151f8 <__kernel_rem_pio2+0x98>
 8015224:	e8eb 8902 	strd	r8, r9, [fp], #8
 8015228:	3601      	adds	r6, #1
 801522a:	e7c9      	b.n	80151c0 <__kernel_rem_pio2+0x60>
 801522c:	9b04      	ldr	r3, [sp, #16]
 801522e:	aa0e      	add	r2, sp, #56	; 0x38
 8015230:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015234:	930c      	str	r3, [sp, #48]	; 0x30
 8015236:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8015238:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801523c:	9c04      	ldr	r4, [sp, #16]
 801523e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015240:	ab9a      	add	r3, sp, #616	; 0x268
 8015242:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8015246:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801524a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801524e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8015252:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8015256:	ab9a      	add	r3, sp, #616	; 0x268
 8015258:	445b      	add	r3, fp
 801525a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801525e:	2500      	movs	r5, #0
 8015260:	1b63      	subs	r3, r4, r5
 8015262:	2b00      	cmp	r3, #0
 8015264:	dc78      	bgt.n	8015358 <__kernel_rem_pio2+0x1f8>
 8015266:	4650      	mov	r0, sl
 8015268:	ec49 8b10 	vmov	d0, r8, r9
 801526c:	f000 fc00 	bl	8015a70 <scalbn>
 8015270:	ec57 6b10 	vmov	r6, r7, d0
 8015274:	2200      	movs	r2, #0
 8015276:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801527a:	ee10 0a10 	vmov	r0, s0
 801527e:	4639      	mov	r1, r7
 8015280:	f7eb f9d2 	bl	8000628 <__aeabi_dmul>
 8015284:	ec41 0b10 	vmov	d0, r0, r1
 8015288:	f000 fb6e 	bl	8015968 <floor>
 801528c:	2200      	movs	r2, #0
 801528e:	ec51 0b10 	vmov	r0, r1, d0
 8015292:	4b7e      	ldr	r3, [pc, #504]	; (801548c <__kernel_rem_pio2+0x32c>)
 8015294:	f7eb f9c8 	bl	8000628 <__aeabi_dmul>
 8015298:	4602      	mov	r2, r0
 801529a:	460b      	mov	r3, r1
 801529c:	4630      	mov	r0, r6
 801529e:	4639      	mov	r1, r7
 80152a0:	f7eb f80a 	bl	80002b8 <__aeabi_dsub>
 80152a4:	460f      	mov	r7, r1
 80152a6:	4606      	mov	r6, r0
 80152a8:	f7eb fc6e 	bl	8000b88 <__aeabi_d2iz>
 80152ac:	9006      	str	r0, [sp, #24]
 80152ae:	f7eb f951 	bl	8000554 <__aeabi_i2d>
 80152b2:	4602      	mov	r2, r0
 80152b4:	460b      	mov	r3, r1
 80152b6:	4630      	mov	r0, r6
 80152b8:	4639      	mov	r1, r7
 80152ba:	f7ea fffd 	bl	80002b8 <__aeabi_dsub>
 80152be:	f1ba 0f00 	cmp.w	sl, #0
 80152c2:	4606      	mov	r6, r0
 80152c4:	460f      	mov	r7, r1
 80152c6:	dd6c      	ble.n	80153a2 <__kernel_rem_pio2+0x242>
 80152c8:	1e62      	subs	r2, r4, #1
 80152ca:	ab0e      	add	r3, sp, #56	; 0x38
 80152cc:	f1ca 0118 	rsb	r1, sl, #24
 80152d0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80152d4:	9d06      	ldr	r5, [sp, #24]
 80152d6:	fa40 f301 	asr.w	r3, r0, r1
 80152da:	441d      	add	r5, r3
 80152dc:	408b      	lsls	r3, r1
 80152de:	1ac0      	subs	r0, r0, r3
 80152e0:	ab0e      	add	r3, sp, #56	; 0x38
 80152e2:	9506      	str	r5, [sp, #24]
 80152e4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80152e8:	f1ca 0317 	rsb	r3, sl, #23
 80152ec:	fa40 f303 	asr.w	r3, r0, r3
 80152f0:	9302      	str	r3, [sp, #8]
 80152f2:	9b02      	ldr	r3, [sp, #8]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	dd62      	ble.n	80153be <__kernel_rem_pio2+0x25e>
 80152f8:	9b06      	ldr	r3, [sp, #24]
 80152fa:	2200      	movs	r2, #0
 80152fc:	3301      	adds	r3, #1
 80152fe:	9306      	str	r3, [sp, #24]
 8015300:	4615      	mov	r5, r2
 8015302:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8015306:	4294      	cmp	r4, r2
 8015308:	f300 8095 	bgt.w	8015436 <__kernel_rem_pio2+0x2d6>
 801530c:	f1ba 0f00 	cmp.w	sl, #0
 8015310:	dd07      	ble.n	8015322 <__kernel_rem_pio2+0x1c2>
 8015312:	f1ba 0f01 	cmp.w	sl, #1
 8015316:	f000 80a2 	beq.w	801545e <__kernel_rem_pio2+0x2fe>
 801531a:	f1ba 0f02 	cmp.w	sl, #2
 801531e:	f000 80c1 	beq.w	80154a4 <__kernel_rem_pio2+0x344>
 8015322:	9b02      	ldr	r3, [sp, #8]
 8015324:	2b02      	cmp	r3, #2
 8015326:	d14a      	bne.n	80153be <__kernel_rem_pio2+0x25e>
 8015328:	4632      	mov	r2, r6
 801532a:	463b      	mov	r3, r7
 801532c:	2000      	movs	r0, #0
 801532e:	4958      	ldr	r1, [pc, #352]	; (8015490 <__kernel_rem_pio2+0x330>)
 8015330:	f7ea ffc2 	bl	80002b8 <__aeabi_dsub>
 8015334:	4606      	mov	r6, r0
 8015336:	460f      	mov	r7, r1
 8015338:	2d00      	cmp	r5, #0
 801533a:	d040      	beq.n	80153be <__kernel_rem_pio2+0x25e>
 801533c:	4650      	mov	r0, sl
 801533e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8015480 <__kernel_rem_pio2+0x320>
 8015342:	f000 fb95 	bl	8015a70 <scalbn>
 8015346:	4630      	mov	r0, r6
 8015348:	4639      	mov	r1, r7
 801534a:	ec53 2b10 	vmov	r2, r3, d0
 801534e:	f7ea ffb3 	bl	80002b8 <__aeabi_dsub>
 8015352:	4606      	mov	r6, r0
 8015354:	460f      	mov	r7, r1
 8015356:	e032      	b.n	80153be <__kernel_rem_pio2+0x25e>
 8015358:	2200      	movs	r2, #0
 801535a:	4b4e      	ldr	r3, [pc, #312]	; (8015494 <__kernel_rem_pio2+0x334>)
 801535c:	4640      	mov	r0, r8
 801535e:	4649      	mov	r1, r9
 8015360:	f7eb f962 	bl	8000628 <__aeabi_dmul>
 8015364:	f7eb fc10 	bl	8000b88 <__aeabi_d2iz>
 8015368:	f7eb f8f4 	bl	8000554 <__aeabi_i2d>
 801536c:	2200      	movs	r2, #0
 801536e:	4b4a      	ldr	r3, [pc, #296]	; (8015498 <__kernel_rem_pio2+0x338>)
 8015370:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015374:	f7eb f958 	bl	8000628 <__aeabi_dmul>
 8015378:	4602      	mov	r2, r0
 801537a:	460b      	mov	r3, r1
 801537c:	4640      	mov	r0, r8
 801537e:	4649      	mov	r1, r9
 8015380:	f7ea ff9a 	bl	80002b8 <__aeabi_dsub>
 8015384:	f7eb fc00 	bl	8000b88 <__aeabi_d2iz>
 8015388:	ab0e      	add	r3, sp, #56	; 0x38
 801538a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801538e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8015392:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015396:	f7ea ff91 	bl	80002bc <__adddf3>
 801539a:	3501      	adds	r5, #1
 801539c:	4680      	mov	r8, r0
 801539e:	4689      	mov	r9, r1
 80153a0:	e75e      	b.n	8015260 <__kernel_rem_pio2+0x100>
 80153a2:	d105      	bne.n	80153b0 <__kernel_rem_pio2+0x250>
 80153a4:	1e63      	subs	r3, r4, #1
 80153a6:	aa0e      	add	r2, sp, #56	; 0x38
 80153a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80153ac:	15c3      	asrs	r3, r0, #23
 80153ae:	e79f      	b.n	80152f0 <__kernel_rem_pio2+0x190>
 80153b0:	2200      	movs	r2, #0
 80153b2:	4b3a      	ldr	r3, [pc, #232]	; (801549c <__kernel_rem_pio2+0x33c>)
 80153b4:	f7eb fbbe 	bl	8000b34 <__aeabi_dcmpge>
 80153b8:	2800      	cmp	r0, #0
 80153ba:	d139      	bne.n	8015430 <__kernel_rem_pio2+0x2d0>
 80153bc:	9002      	str	r0, [sp, #8]
 80153be:	2200      	movs	r2, #0
 80153c0:	2300      	movs	r3, #0
 80153c2:	4630      	mov	r0, r6
 80153c4:	4639      	mov	r1, r7
 80153c6:	f7eb fb97 	bl	8000af8 <__aeabi_dcmpeq>
 80153ca:	2800      	cmp	r0, #0
 80153cc:	f000 80c7 	beq.w	801555e <__kernel_rem_pio2+0x3fe>
 80153d0:	1e65      	subs	r5, r4, #1
 80153d2:	462b      	mov	r3, r5
 80153d4:	2200      	movs	r2, #0
 80153d6:	9904      	ldr	r1, [sp, #16]
 80153d8:	428b      	cmp	r3, r1
 80153da:	da6a      	bge.n	80154b2 <__kernel_rem_pio2+0x352>
 80153dc:	2a00      	cmp	r2, #0
 80153de:	f000 8088 	beq.w	80154f2 <__kernel_rem_pio2+0x392>
 80153e2:	ab0e      	add	r3, sp, #56	; 0x38
 80153e4:	f1aa 0a18 	sub.w	sl, sl, #24
 80153e8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	f000 80b4 	beq.w	801555a <__kernel_rem_pio2+0x3fa>
 80153f2:	4650      	mov	r0, sl
 80153f4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8015480 <__kernel_rem_pio2+0x320>
 80153f8:	f000 fb3a 	bl	8015a70 <scalbn>
 80153fc:	00ec      	lsls	r4, r5, #3
 80153fe:	ab72      	add	r3, sp, #456	; 0x1c8
 8015400:	191e      	adds	r6, r3, r4
 8015402:	ec59 8b10 	vmov	r8, r9, d0
 8015406:	f106 0a08 	add.w	sl, r6, #8
 801540a:	462f      	mov	r7, r5
 801540c:	2f00      	cmp	r7, #0
 801540e:	f280 80df 	bge.w	80155d0 <__kernel_rem_pio2+0x470>
 8015412:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8015478 <__kernel_rem_pio2+0x318>
 8015416:	f04f 0a00 	mov.w	sl, #0
 801541a:	eba5 030a 	sub.w	r3, r5, sl
 801541e:	2b00      	cmp	r3, #0
 8015420:	f2c0 810a 	blt.w	8015638 <__kernel_rem_pio2+0x4d8>
 8015424:	f8df b078 	ldr.w	fp, [pc, #120]	; 80154a0 <__kernel_rem_pio2+0x340>
 8015428:	ec59 8b18 	vmov	r8, r9, d8
 801542c:	2700      	movs	r7, #0
 801542e:	e0f5      	b.n	801561c <__kernel_rem_pio2+0x4bc>
 8015430:	2302      	movs	r3, #2
 8015432:	9302      	str	r3, [sp, #8]
 8015434:	e760      	b.n	80152f8 <__kernel_rem_pio2+0x198>
 8015436:	ab0e      	add	r3, sp, #56	; 0x38
 8015438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801543c:	b94d      	cbnz	r5, 8015452 <__kernel_rem_pio2+0x2f2>
 801543e:	b12b      	cbz	r3, 801544c <__kernel_rem_pio2+0x2ec>
 8015440:	a80e      	add	r0, sp, #56	; 0x38
 8015442:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8015446:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801544a:	2301      	movs	r3, #1
 801544c:	3201      	adds	r2, #1
 801544e:	461d      	mov	r5, r3
 8015450:	e759      	b.n	8015306 <__kernel_rem_pio2+0x1a6>
 8015452:	a80e      	add	r0, sp, #56	; 0x38
 8015454:	1acb      	subs	r3, r1, r3
 8015456:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801545a:	462b      	mov	r3, r5
 801545c:	e7f6      	b.n	801544c <__kernel_rem_pio2+0x2ec>
 801545e:	1e62      	subs	r2, r4, #1
 8015460:	ab0e      	add	r3, sp, #56	; 0x38
 8015462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015466:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801546a:	a90e      	add	r1, sp, #56	; 0x38
 801546c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015470:	e757      	b.n	8015322 <__kernel_rem_pio2+0x1c2>
 8015472:	bf00      	nop
 8015474:	f3af 8000 	nop.w
	...
 8015484:	3ff00000 	.word	0x3ff00000
 8015488:	0801a658 	.word	0x0801a658
 801548c:	40200000 	.word	0x40200000
 8015490:	3ff00000 	.word	0x3ff00000
 8015494:	3e700000 	.word	0x3e700000
 8015498:	41700000 	.word	0x41700000
 801549c:	3fe00000 	.word	0x3fe00000
 80154a0:	0801a618 	.word	0x0801a618
 80154a4:	1e62      	subs	r2, r4, #1
 80154a6:	ab0e      	add	r3, sp, #56	; 0x38
 80154a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154ac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80154b0:	e7db      	b.n	801546a <__kernel_rem_pio2+0x30a>
 80154b2:	a90e      	add	r1, sp, #56	; 0x38
 80154b4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80154b8:	3b01      	subs	r3, #1
 80154ba:	430a      	orrs	r2, r1
 80154bc:	e78b      	b.n	80153d6 <__kernel_rem_pio2+0x276>
 80154be:	3301      	adds	r3, #1
 80154c0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80154c4:	2900      	cmp	r1, #0
 80154c6:	d0fa      	beq.n	80154be <__kernel_rem_pio2+0x35e>
 80154c8:	9a08      	ldr	r2, [sp, #32]
 80154ca:	4422      	add	r2, r4
 80154cc:	00d2      	lsls	r2, r2, #3
 80154ce:	a922      	add	r1, sp, #136	; 0x88
 80154d0:	18e3      	adds	r3, r4, r3
 80154d2:	9206      	str	r2, [sp, #24]
 80154d4:	440a      	add	r2, r1
 80154d6:	9302      	str	r3, [sp, #8]
 80154d8:	f10b 0108 	add.w	r1, fp, #8
 80154dc:	f102 0308 	add.w	r3, r2, #8
 80154e0:	1c66      	adds	r6, r4, #1
 80154e2:	910a      	str	r1, [sp, #40]	; 0x28
 80154e4:	2500      	movs	r5, #0
 80154e6:	930d      	str	r3, [sp, #52]	; 0x34
 80154e8:	9b02      	ldr	r3, [sp, #8]
 80154ea:	42b3      	cmp	r3, r6
 80154ec:	da04      	bge.n	80154f8 <__kernel_rem_pio2+0x398>
 80154ee:	461c      	mov	r4, r3
 80154f0:	e6a6      	b.n	8015240 <__kernel_rem_pio2+0xe0>
 80154f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80154f4:	2301      	movs	r3, #1
 80154f6:	e7e3      	b.n	80154c0 <__kernel_rem_pio2+0x360>
 80154f8:	9b06      	ldr	r3, [sp, #24]
 80154fa:	18ef      	adds	r7, r5, r3
 80154fc:	ab22      	add	r3, sp, #136	; 0x88
 80154fe:	441f      	add	r7, r3
 8015500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015502:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015506:	f7eb f825 	bl	8000554 <__aeabi_i2d>
 801550a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801550c:	461c      	mov	r4, r3
 801550e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015510:	e9c7 0100 	strd	r0, r1, [r7]
 8015514:	eb03 0b05 	add.w	fp, r3, r5
 8015518:	2700      	movs	r7, #0
 801551a:	f04f 0800 	mov.w	r8, #0
 801551e:	f04f 0900 	mov.w	r9, #0
 8015522:	9b07      	ldr	r3, [sp, #28]
 8015524:	429f      	cmp	r7, r3
 8015526:	dd08      	ble.n	801553a <__kernel_rem_pio2+0x3da>
 8015528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801552a:	aa72      	add	r2, sp, #456	; 0x1c8
 801552c:	18eb      	adds	r3, r5, r3
 801552e:	4413      	add	r3, r2
 8015530:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8015534:	3601      	adds	r6, #1
 8015536:	3508      	adds	r5, #8
 8015538:	e7d6      	b.n	80154e8 <__kernel_rem_pio2+0x388>
 801553a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801553e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8015542:	f7eb f871 	bl	8000628 <__aeabi_dmul>
 8015546:	4602      	mov	r2, r0
 8015548:	460b      	mov	r3, r1
 801554a:	4640      	mov	r0, r8
 801554c:	4649      	mov	r1, r9
 801554e:	f7ea feb5 	bl	80002bc <__adddf3>
 8015552:	3701      	adds	r7, #1
 8015554:	4680      	mov	r8, r0
 8015556:	4689      	mov	r9, r1
 8015558:	e7e3      	b.n	8015522 <__kernel_rem_pio2+0x3c2>
 801555a:	3d01      	subs	r5, #1
 801555c:	e741      	b.n	80153e2 <__kernel_rem_pio2+0x282>
 801555e:	f1ca 0000 	rsb	r0, sl, #0
 8015562:	ec47 6b10 	vmov	d0, r6, r7
 8015566:	f000 fa83 	bl	8015a70 <scalbn>
 801556a:	ec57 6b10 	vmov	r6, r7, d0
 801556e:	2200      	movs	r2, #0
 8015570:	4b99      	ldr	r3, [pc, #612]	; (80157d8 <__kernel_rem_pio2+0x678>)
 8015572:	ee10 0a10 	vmov	r0, s0
 8015576:	4639      	mov	r1, r7
 8015578:	f7eb fadc 	bl	8000b34 <__aeabi_dcmpge>
 801557c:	b1f8      	cbz	r0, 80155be <__kernel_rem_pio2+0x45e>
 801557e:	2200      	movs	r2, #0
 8015580:	4b96      	ldr	r3, [pc, #600]	; (80157dc <__kernel_rem_pio2+0x67c>)
 8015582:	4630      	mov	r0, r6
 8015584:	4639      	mov	r1, r7
 8015586:	f7eb f84f 	bl	8000628 <__aeabi_dmul>
 801558a:	f7eb fafd 	bl	8000b88 <__aeabi_d2iz>
 801558e:	4680      	mov	r8, r0
 8015590:	f7ea ffe0 	bl	8000554 <__aeabi_i2d>
 8015594:	2200      	movs	r2, #0
 8015596:	4b90      	ldr	r3, [pc, #576]	; (80157d8 <__kernel_rem_pio2+0x678>)
 8015598:	f7eb f846 	bl	8000628 <__aeabi_dmul>
 801559c:	460b      	mov	r3, r1
 801559e:	4602      	mov	r2, r0
 80155a0:	4639      	mov	r1, r7
 80155a2:	4630      	mov	r0, r6
 80155a4:	f7ea fe88 	bl	80002b8 <__aeabi_dsub>
 80155a8:	f7eb faee 	bl	8000b88 <__aeabi_d2iz>
 80155ac:	1c65      	adds	r5, r4, #1
 80155ae:	ab0e      	add	r3, sp, #56	; 0x38
 80155b0:	f10a 0a18 	add.w	sl, sl, #24
 80155b4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80155b8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80155bc:	e719      	b.n	80153f2 <__kernel_rem_pio2+0x292>
 80155be:	4630      	mov	r0, r6
 80155c0:	4639      	mov	r1, r7
 80155c2:	f7eb fae1 	bl	8000b88 <__aeabi_d2iz>
 80155c6:	ab0e      	add	r3, sp, #56	; 0x38
 80155c8:	4625      	mov	r5, r4
 80155ca:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80155ce:	e710      	b.n	80153f2 <__kernel_rem_pio2+0x292>
 80155d0:	ab0e      	add	r3, sp, #56	; 0x38
 80155d2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80155d6:	f7ea ffbd 	bl	8000554 <__aeabi_i2d>
 80155da:	4642      	mov	r2, r8
 80155dc:	464b      	mov	r3, r9
 80155de:	f7eb f823 	bl	8000628 <__aeabi_dmul>
 80155e2:	2200      	movs	r2, #0
 80155e4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80155e8:	4b7c      	ldr	r3, [pc, #496]	; (80157dc <__kernel_rem_pio2+0x67c>)
 80155ea:	4640      	mov	r0, r8
 80155ec:	4649      	mov	r1, r9
 80155ee:	f7eb f81b 	bl	8000628 <__aeabi_dmul>
 80155f2:	3f01      	subs	r7, #1
 80155f4:	4680      	mov	r8, r0
 80155f6:	4689      	mov	r9, r1
 80155f8:	e708      	b.n	801540c <__kernel_rem_pio2+0x2ac>
 80155fa:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80155fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015602:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8015606:	f7eb f80f 	bl	8000628 <__aeabi_dmul>
 801560a:	4602      	mov	r2, r0
 801560c:	460b      	mov	r3, r1
 801560e:	4640      	mov	r0, r8
 8015610:	4649      	mov	r1, r9
 8015612:	f7ea fe53 	bl	80002bc <__adddf3>
 8015616:	3701      	adds	r7, #1
 8015618:	4680      	mov	r8, r0
 801561a:	4689      	mov	r9, r1
 801561c:	9b04      	ldr	r3, [sp, #16]
 801561e:	429f      	cmp	r7, r3
 8015620:	dc01      	bgt.n	8015626 <__kernel_rem_pio2+0x4c6>
 8015622:	45ba      	cmp	sl, r7
 8015624:	dae9      	bge.n	80155fa <__kernel_rem_pio2+0x49a>
 8015626:	ab4a      	add	r3, sp, #296	; 0x128
 8015628:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801562c:	e9c3 8900 	strd	r8, r9, [r3]
 8015630:	f10a 0a01 	add.w	sl, sl, #1
 8015634:	3e08      	subs	r6, #8
 8015636:	e6f0      	b.n	801541a <__kernel_rem_pio2+0x2ba>
 8015638:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801563a:	2b03      	cmp	r3, #3
 801563c:	d85b      	bhi.n	80156f6 <__kernel_rem_pio2+0x596>
 801563e:	e8df f003 	tbb	[pc, r3]
 8015642:	264a      	.short	0x264a
 8015644:	0226      	.short	0x0226
 8015646:	ab9a      	add	r3, sp, #616	; 0x268
 8015648:	441c      	add	r4, r3
 801564a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801564e:	46a2      	mov	sl, r4
 8015650:	46ab      	mov	fp, r5
 8015652:	f1bb 0f00 	cmp.w	fp, #0
 8015656:	dc6c      	bgt.n	8015732 <__kernel_rem_pio2+0x5d2>
 8015658:	46a2      	mov	sl, r4
 801565a:	46ab      	mov	fp, r5
 801565c:	f1bb 0f01 	cmp.w	fp, #1
 8015660:	f300 8086 	bgt.w	8015770 <__kernel_rem_pio2+0x610>
 8015664:	2000      	movs	r0, #0
 8015666:	2100      	movs	r1, #0
 8015668:	2d01      	cmp	r5, #1
 801566a:	f300 80a0 	bgt.w	80157ae <__kernel_rem_pio2+0x64e>
 801566e:	9b02      	ldr	r3, [sp, #8]
 8015670:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8015674:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8015678:	2b00      	cmp	r3, #0
 801567a:	f040 809e 	bne.w	80157ba <__kernel_rem_pio2+0x65a>
 801567e:	9b01      	ldr	r3, [sp, #4]
 8015680:	e9c3 7800 	strd	r7, r8, [r3]
 8015684:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8015688:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801568c:	e033      	b.n	80156f6 <__kernel_rem_pio2+0x596>
 801568e:	3408      	adds	r4, #8
 8015690:	ab4a      	add	r3, sp, #296	; 0x128
 8015692:	441c      	add	r4, r3
 8015694:	462e      	mov	r6, r5
 8015696:	2000      	movs	r0, #0
 8015698:	2100      	movs	r1, #0
 801569a:	2e00      	cmp	r6, #0
 801569c:	da3a      	bge.n	8015714 <__kernel_rem_pio2+0x5b4>
 801569e:	9b02      	ldr	r3, [sp, #8]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d03d      	beq.n	8015720 <__kernel_rem_pio2+0x5c0>
 80156a4:	4602      	mov	r2, r0
 80156a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80156aa:	9c01      	ldr	r4, [sp, #4]
 80156ac:	e9c4 2300 	strd	r2, r3, [r4]
 80156b0:	4602      	mov	r2, r0
 80156b2:	460b      	mov	r3, r1
 80156b4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80156b8:	f7ea fdfe 	bl	80002b8 <__aeabi_dsub>
 80156bc:	ae4c      	add	r6, sp, #304	; 0x130
 80156be:	2401      	movs	r4, #1
 80156c0:	42a5      	cmp	r5, r4
 80156c2:	da30      	bge.n	8015726 <__kernel_rem_pio2+0x5c6>
 80156c4:	9b02      	ldr	r3, [sp, #8]
 80156c6:	b113      	cbz	r3, 80156ce <__kernel_rem_pio2+0x56e>
 80156c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80156cc:	4619      	mov	r1, r3
 80156ce:	9b01      	ldr	r3, [sp, #4]
 80156d0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80156d4:	e00f      	b.n	80156f6 <__kernel_rem_pio2+0x596>
 80156d6:	ab9a      	add	r3, sp, #616	; 0x268
 80156d8:	441c      	add	r4, r3
 80156da:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80156de:	2000      	movs	r0, #0
 80156e0:	2100      	movs	r1, #0
 80156e2:	2d00      	cmp	r5, #0
 80156e4:	da10      	bge.n	8015708 <__kernel_rem_pio2+0x5a8>
 80156e6:	9b02      	ldr	r3, [sp, #8]
 80156e8:	b113      	cbz	r3, 80156f0 <__kernel_rem_pio2+0x590>
 80156ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80156ee:	4619      	mov	r1, r3
 80156f0:	9b01      	ldr	r3, [sp, #4]
 80156f2:	e9c3 0100 	strd	r0, r1, [r3]
 80156f6:	9b06      	ldr	r3, [sp, #24]
 80156f8:	f003 0007 	and.w	r0, r3, #7
 80156fc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8015700:	ecbd 8b02 	vpop	{d8}
 8015704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015708:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801570c:	f7ea fdd6 	bl	80002bc <__adddf3>
 8015710:	3d01      	subs	r5, #1
 8015712:	e7e6      	b.n	80156e2 <__kernel_rem_pio2+0x582>
 8015714:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015718:	f7ea fdd0 	bl	80002bc <__adddf3>
 801571c:	3e01      	subs	r6, #1
 801571e:	e7bc      	b.n	801569a <__kernel_rem_pio2+0x53a>
 8015720:	4602      	mov	r2, r0
 8015722:	460b      	mov	r3, r1
 8015724:	e7c1      	b.n	80156aa <__kernel_rem_pio2+0x54a>
 8015726:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801572a:	f7ea fdc7 	bl	80002bc <__adddf3>
 801572e:	3401      	adds	r4, #1
 8015730:	e7c6      	b.n	80156c0 <__kernel_rem_pio2+0x560>
 8015732:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8015736:	ed3a 7b02 	vldmdb	sl!, {d7}
 801573a:	4640      	mov	r0, r8
 801573c:	ec53 2b17 	vmov	r2, r3, d7
 8015740:	4649      	mov	r1, r9
 8015742:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015746:	f7ea fdb9 	bl	80002bc <__adddf3>
 801574a:	4602      	mov	r2, r0
 801574c:	460b      	mov	r3, r1
 801574e:	4606      	mov	r6, r0
 8015750:	460f      	mov	r7, r1
 8015752:	4640      	mov	r0, r8
 8015754:	4649      	mov	r1, r9
 8015756:	f7ea fdaf 	bl	80002b8 <__aeabi_dsub>
 801575a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801575e:	f7ea fdad 	bl	80002bc <__adddf3>
 8015762:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015766:	e9ca 0100 	strd	r0, r1, [sl]
 801576a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801576e:	e770      	b.n	8015652 <__kernel_rem_pio2+0x4f2>
 8015770:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8015774:	ed3a 7b02 	vldmdb	sl!, {d7}
 8015778:	4630      	mov	r0, r6
 801577a:	ec53 2b17 	vmov	r2, r3, d7
 801577e:	4639      	mov	r1, r7
 8015780:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015784:	f7ea fd9a 	bl	80002bc <__adddf3>
 8015788:	4602      	mov	r2, r0
 801578a:	460b      	mov	r3, r1
 801578c:	4680      	mov	r8, r0
 801578e:	4689      	mov	r9, r1
 8015790:	4630      	mov	r0, r6
 8015792:	4639      	mov	r1, r7
 8015794:	f7ea fd90 	bl	80002b8 <__aeabi_dsub>
 8015798:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801579c:	f7ea fd8e 	bl	80002bc <__adddf3>
 80157a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80157a4:	e9ca 0100 	strd	r0, r1, [sl]
 80157a8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80157ac:	e756      	b.n	801565c <__kernel_rem_pio2+0x4fc>
 80157ae:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80157b2:	f7ea fd83 	bl	80002bc <__adddf3>
 80157b6:	3d01      	subs	r5, #1
 80157b8:	e756      	b.n	8015668 <__kernel_rem_pio2+0x508>
 80157ba:	9b01      	ldr	r3, [sp, #4]
 80157bc:	9a01      	ldr	r2, [sp, #4]
 80157be:	601f      	str	r7, [r3, #0]
 80157c0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80157c4:	605c      	str	r4, [r3, #4]
 80157c6:	609d      	str	r5, [r3, #8]
 80157c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80157cc:	60d3      	str	r3, [r2, #12]
 80157ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80157d2:	6110      	str	r0, [r2, #16]
 80157d4:	6153      	str	r3, [r2, #20]
 80157d6:	e78e      	b.n	80156f6 <__kernel_rem_pio2+0x596>
 80157d8:	41700000 	.word	0x41700000
 80157dc:	3e700000 	.word	0x3e700000

080157e0 <__kernel_sin>:
 80157e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157e4:	ec55 4b10 	vmov	r4, r5, d0
 80157e8:	b085      	sub	sp, #20
 80157ea:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80157ee:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80157f2:	ed8d 1b00 	vstr	d1, [sp]
 80157f6:	9002      	str	r0, [sp, #8]
 80157f8:	da06      	bge.n	8015808 <__kernel_sin+0x28>
 80157fa:	ee10 0a10 	vmov	r0, s0
 80157fe:	4629      	mov	r1, r5
 8015800:	f7eb f9c2 	bl	8000b88 <__aeabi_d2iz>
 8015804:	2800      	cmp	r0, #0
 8015806:	d051      	beq.n	80158ac <__kernel_sin+0xcc>
 8015808:	4622      	mov	r2, r4
 801580a:	462b      	mov	r3, r5
 801580c:	4620      	mov	r0, r4
 801580e:	4629      	mov	r1, r5
 8015810:	f7ea ff0a 	bl	8000628 <__aeabi_dmul>
 8015814:	4682      	mov	sl, r0
 8015816:	468b      	mov	fp, r1
 8015818:	4602      	mov	r2, r0
 801581a:	460b      	mov	r3, r1
 801581c:	4620      	mov	r0, r4
 801581e:	4629      	mov	r1, r5
 8015820:	f7ea ff02 	bl	8000628 <__aeabi_dmul>
 8015824:	a341      	add	r3, pc, #260	; (adr r3, 801592c <__kernel_sin+0x14c>)
 8015826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801582a:	4680      	mov	r8, r0
 801582c:	4689      	mov	r9, r1
 801582e:	4650      	mov	r0, sl
 8015830:	4659      	mov	r1, fp
 8015832:	f7ea fef9 	bl	8000628 <__aeabi_dmul>
 8015836:	a33f      	add	r3, pc, #252	; (adr r3, 8015934 <__kernel_sin+0x154>)
 8015838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801583c:	f7ea fd3c 	bl	80002b8 <__aeabi_dsub>
 8015840:	4652      	mov	r2, sl
 8015842:	465b      	mov	r3, fp
 8015844:	f7ea fef0 	bl	8000628 <__aeabi_dmul>
 8015848:	a33c      	add	r3, pc, #240	; (adr r3, 801593c <__kernel_sin+0x15c>)
 801584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801584e:	f7ea fd35 	bl	80002bc <__adddf3>
 8015852:	4652      	mov	r2, sl
 8015854:	465b      	mov	r3, fp
 8015856:	f7ea fee7 	bl	8000628 <__aeabi_dmul>
 801585a:	a33a      	add	r3, pc, #232	; (adr r3, 8015944 <__kernel_sin+0x164>)
 801585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015860:	f7ea fd2a 	bl	80002b8 <__aeabi_dsub>
 8015864:	4652      	mov	r2, sl
 8015866:	465b      	mov	r3, fp
 8015868:	f7ea fede 	bl	8000628 <__aeabi_dmul>
 801586c:	a337      	add	r3, pc, #220	; (adr r3, 801594c <__kernel_sin+0x16c>)
 801586e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015872:	f7ea fd23 	bl	80002bc <__adddf3>
 8015876:	9b02      	ldr	r3, [sp, #8]
 8015878:	4606      	mov	r6, r0
 801587a:	460f      	mov	r7, r1
 801587c:	b9db      	cbnz	r3, 80158b6 <__kernel_sin+0xd6>
 801587e:	4602      	mov	r2, r0
 8015880:	460b      	mov	r3, r1
 8015882:	4650      	mov	r0, sl
 8015884:	4659      	mov	r1, fp
 8015886:	f7ea fecf 	bl	8000628 <__aeabi_dmul>
 801588a:	a325      	add	r3, pc, #148	; (adr r3, 8015920 <__kernel_sin+0x140>)
 801588c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015890:	f7ea fd12 	bl	80002b8 <__aeabi_dsub>
 8015894:	4642      	mov	r2, r8
 8015896:	464b      	mov	r3, r9
 8015898:	f7ea fec6 	bl	8000628 <__aeabi_dmul>
 801589c:	4602      	mov	r2, r0
 801589e:	460b      	mov	r3, r1
 80158a0:	4620      	mov	r0, r4
 80158a2:	4629      	mov	r1, r5
 80158a4:	f7ea fd0a 	bl	80002bc <__adddf3>
 80158a8:	4604      	mov	r4, r0
 80158aa:	460d      	mov	r5, r1
 80158ac:	ec45 4b10 	vmov	d0, r4, r5
 80158b0:	b005      	add	sp, #20
 80158b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158b6:	2200      	movs	r2, #0
 80158b8:	4b1b      	ldr	r3, [pc, #108]	; (8015928 <__kernel_sin+0x148>)
 80158ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80158be:	f7ea feb3 	bl	8000628 <__aeabi_dmul>
 80158c2:	4632      	mov	r2, r6
 80158c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80158c8:	463b      	mov	r3, r7
 80158ca:	4640      	mov	r0, r8
 80158cc:	4649      	mov	r1, r9
 80158ce:	f7ea feab 	bl	8000628 <__aeabi_dmul>
 80158d2:	4602      	mov	r2, r0
 80158d4:	460b      	mov	r3, r1
 80158d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80158da:	f7ea fced 	bl	80002b8 <__aeabi_dsub>
 80158de:	4652      	mov	r2, sl
 80158e0:	465b      	mov	r3, fp
 80158e2:	f7ea fea1 	bl	8000628 <__aeabi_dmul>
 80158e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80158ea:	f7ea fce5 	bl	80002b8 <__aeabi_dsub>
 80158ee:	a30c      	add	r3, pc, #48	; (adr r3, 8015920 <__kernel_sin+0x140>)
 80158f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158f4:	4606      	mov	r6, r0
 80158f6:	460f      	mov	r7, r1
 80158f8:	4640      	mov	r0, r8
 80158fa:	4649      	mov	r1, r9
 80158fc:	f7ea fe94 	bl	8000628 <__aeabi_dmul>
 8015900:	4602      	mov	r2, r0
 8015902:	460b      	mov	r3, r1
 8015904:	4630      	mov	r0, r6
 8015906:	4639      	mov	r1, r7
 8015908:	f7ea fcd8 	bl	80002bc <__adddf3>
 801590c:	4602      	mov	r2, r0
 801590e:	460b      	mov	r3, r1
 8015910:	4620      	mov	r0, r4
 8015912:	4629      	mov	r1, r5
 8015914:	f7ea fcd0 	bl	80002b8 <__aeabi_dsub>
 8015918:	e7c6      	b.n	80158a8 <__kernel_sin+0xc8>
 801591a:	bf00      	nop
 801591c:	f3af 8000 	nop.w
 8015920:	55555549 	.word	0x55555549
 8015924:	3fc55555 	.word	0x3fc55555
 8015928:	3fe00000 	.word	0x3fe00000
 801592c:	5acfd57c 	.word	0x5acfd57c
 8015930:	3de5d93a 	.word	0x3de5d93a
 8015934:	8a2b9ceb 	.word	0x8a2b9ceb
 8015938:	3e5ae5e6 	.word	0x3e5ae5e6
 801593c:	57b1fe7d 	.word	0x57b1fe7d
 8015940:	3ec71de3 	.word	0x3ec71de3
 8015944:	19c161d5 	.word	0x19c161d5
 8015948:	3f2a01a0 	.word	0x3f2a01a0
 801594c:	1110f8a6 	.word	0x1110f8a6
 8015950:	3f811111 	.word	0x3f811111

08015954 <fabs>:
 8015954:	ec51 0b10 	vmov	r0, r1, d0
 8015958:	ee10 2a10 	vmov	r2, s0
 801595c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015960:	ec43 2b10 	vmov	d0, r2, r3
 8015964:	4770      	bx	lr
	...

08015968 <floor>:
 8015968:	ec51 0b10 	vmov	r0, r1, d0
 801596c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015970:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8015974:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015978:	2e13      	cmp	r6, #19
 801597a:	460c      	mov	r4, r1
 801597c:	ee10 5a10 	vmov	r5, s0
 8015980:	4680      	mov	r8, r0
 8015982:	dc34      	bgt.n	80159ee <floor+0x86>
 8015984:	2e00      	cmp	r6, #0
 8015986:	da16      	bge.n	80159b6 <floor+0x4e>
 8015988:	a335      	add	r3, pc, #212	; (adr r3, 8015a60 <floor+0xf8>)
 801598a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801598e:	f7ea fc95 	bl	80002bc <__adddf3>
 8015992:	2200      	movs	r2, #0
 8015994:	2300      	movs	r3, #0
 8015996:	f7eb f8d7 	bl	8000b48 <__aeabi_dcmpgt>
 801599a:	b148      	cbz	r0, 80159b0 <floor+0x48>
 801599c:	2c00      	cmp	r4, #0
 801599e:	da59      	bge.n	8015a54 <floor+0xec>
 80159a0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80159a4:	4a30      	ldr	r2, [pc, #192]	; (8015a68 <floor+0x100>)
 80159a6:	432b      	orrs	r3, r5
 80159a8:	2500      	movs	r5, #0
 80159aa:	42ab      	cmp	r3, r5
 80159ac:	bf18      	it	ne
 80159ae:	4614      	movne	r4, r2
 80159b0:	4621      	mov	r1, r4
 80159b2:	4628      	mov	r0, r5
 80159b4:	e025      	b.n	8015a02 <floor+0x9a>
 80159b6:	4f2d      	ldr	r7, [pc, #180]	; (8015a6c <floor+0x104>)
 80159b8:	4137      	asrs	r7, r6
 80159ba:	ea01 0307 	and.w	r3, r1, r7
 80159be:	4303      	orrs	r3, r0
 80159c0:	d01f      	beq.n	8015a02 <floor+0x9a>
 80159c2:	a327      	add	r3, pc, #156	; (adr r3, 8015a60 <floor+0xf8>)
 80159c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159c8:	f7ea fc78 	bl	80002bc <__adddf3>
 80159cc:	2200      	movs	r2, #0
 80159ce:	2300      	movs	r3, #0
 80159d0:	f7eb f8ba 	bl	8000b48 <__aeabi_dcmpgt>
 80159d4:	2800      	cmp	r0, #0
 80159d6:	d0eb      	beq.n	80159b0 <floor+0x48>
 80159d8:	2c00      	cmp	r4, #0
 80159da:	bfbe      	ittt	lt
 80159dc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80159e0:	fa43 f606 	asrlt.w	r6, r3, r6
 80159e4:	19a4      	addlt	r4, r4, r6
 80159e6:	ea24 0407 	bic.w	r4, r4, r7
 80159ea:	2500      	movs	r5, #0
 80159ec:	e7e0      	b.n	80159b0 <floor+0x48>
 80159ee:	2e33      	cmp	r6, #51	; 0x33
 80159f0:	dd0b      	ble.n	8015a0a <floor+0xa2>
 80159f2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80159f6:	d104      	bne.n	8015a02 <floor+0x9a>
 80159f8:	ee10 2a10 	vmov	r2, s0
 80159fc:	460b      	mov	r3, r1
 80159fe:	f7ea fc5d 	bl	80002bc <__adddf3>
 8015a02:	ec41 0b10 	vmov	d0, r0, r1
 8015a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a0a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8015a12:	fa23 f707 	lsr.w	r7, r3, r7
 8015a16:	4207      	tst	r7, r0
 8015a18:	d0f3      	beq.n	8015a02 <floor+0x9a>
 8015a1a:	a311      	add	r3, pc, #68	; (adr r3, 8015a60 <floor+0xf8>)
 8015a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a20:	f7ea fc4c 	bl	80002bc <__adddf3>
 8015a24:	2200      	movs	r2, #0
 8015a26:	2300      	movs	r3, #0
 8015a28:	f7eb f88e 	bl	8000b48 <__aeabi_dcmpgt>
 8015a2c:	2800      	cmp	r0, #0
 8015a2e:	d0bf      	beq.n	80159b0 <floor+0x48>
 8015a30:	2c00      	cmp	r4, #0
 8015a32:	da02      	bge.n	8015a3a <floor+0xd2>
 8015a34:	2e14      	cmp	r6, #20
 8015a36:	d103      	bne.n	8015a40 <floor+0xd8>
 8015a38:	3401      	adds	r4, #1
 8015a3a:	ea25 0507 	bic.w	r5, r5, r7
 8015a3e:	e7b7      	b.n	80159b0 <floor+0x48>
 8015a40:	2301      	movs	r3, #1
 8015a42:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015a46:	fa03 f606 	lsl.w	r6, r3, r6
 8015a4a:	4435      	add	r5, r6
 8015a4c:	4545      	cmp	r5, r8
 8015a4e:	bf38      	it	cc
 8015a50:	18e4      	addcc	r4, r4, r3
 8015a52:	e7f2      	b.n	8015a3a <floor+0xd2>
 8015a54:	2500      	movs	r5, #0
 8015a56:	462c      	mov	r4, r5
 8015a58:	e7aa      	b.n	80159b0 <floor+0x48>
 8015a5a:	bf00      	nop
 8015a5c:	f3af 8000 	nop.w
 8015a60:	8800759c 	.word	0x8800759c
 8015a64:	7e37e43c 	.word	0x7e37e43c
 8015a68:	bff00000 	.word	0xbff00000
 8015a6c:	000fffff 	.word	0x000fffff

08015a70 <scalbn>:
 8015a70:	b570      	push	{r4, r5, r6, lr}
 8015a72:	ec55 4b10 	vmov	r4, r5, d0
 8015a76:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8015a7a:	4606      	mov	r6, r0
 8015a7c:	462b      	mov	r3, r5
 8015a7e:	b9aa      	cbnz	r2, 8015aac <scalbn+0x3c>
 8015a80:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015a84:	4323      	orrs	r3, r4
 8015a86:	d03b      	beq.n	8015b00 <scalbn+0x90>
 8015a88:	4b31      	ldr	r3, [pc, #196]	; (8015b50 <scalbn+0xe0>)
 8015a8a:	4629      	mov	r1, r5
 8015a8c:	2200      	movs	r2, #0
 8015a8e:	ee10 0a10 	vmov	r0, s0
 8015a92:	f7ea fdc9 	bl	8000628 <__aeabi_dmul>
 8015a96:	4b2f      	ldr	r3, [pc, #188]	; (8015b54 <scalbn+0xe4>)
 8015a98:	429e      	cmp	r6, r3
 8015a9a:	4604      	mov	r4, r0
 8015a9c:	460d      	mov	r5, r1
 8015a9e:	da12      	bge.n	8015ac6 <scalbn+0x56>
 8015aa0:	a327      	add	r3, pc, #156	; (adr r3, 8015b40 <scalbn+0xd0>)
 8015aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aa6:	f7ea fdbf 	bl	8000628 <__aeabi_dmul>
 8015aaa:	e009      	b.n	8015ac0 <scalbn+0x50>
 8015aac:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015ab0:	428a      	cmp	r2, r1
 8015ab2:	d10c      	bne.n	8015ace <scalbn+0x5e>
 8015ab4:	ee10 2a10 	vmov	r2, s0
 8015ab8:	4620      	mov	r0, r4
 8015aba:	4629      	mov	r1, r5
 8015abc:	f7ea fbfe 	bl	80002bc <__adddf3>
 8015ac0:	4604      	mov	r4, r0
 8015ac2:	460d      	mov	r5, r1
 8015ac4:	e01c      	b.n	8015b00 <scalbn+0x90>
 8015ac6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015aca:	460b      	mov	r3, r1
 8015acc:	3a36      	subs	r2, #54	; 0x36
 8015ace:	4432      	add	r2, r6
 8015ad0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015ad4:	428a      	cmp	r2, r1
 8015ad6:	dd0b      	ble.n	8015af0 <scalbn+0x80>
 8015ad8:	ec45 4b11 	vmov	d1, r4, r5
 8015adc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015b48 <scalbn+0xd8>
 8015ae0:	f000 f83c 	bl	8015b5c <copysign>
 8015ae4:	a318      	add	r3, pc, #96	; (adr r3, 8015b48 <scalbn+0xd8>)
 8015ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aea:	ec51 0b10 	vmov	r0, r1, d0
 8015aee:	e7da      	b.n	8015aa6 <scalbn+0x36>
 8015af0:	2a00      	cmp	r2, #0
 8015af2:	dd08      	ble.n	8015b06 <scalbn+0x96>
 8015af4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015af8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015afc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015b00:	ec45 4b10 	vmov	d0, r4, r5
 8015b04:	bd70      	pop	{r4, r5, r6, pc}
 8015b06:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015b0a:	da0d      	bge.n	8015b28 <scalbn+0xb8>
 8015b0c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015b10:	429e      	cmp	r6, r3
 8015b12:	ec45 4b11 	vmov	d1, r4, r5
 8015b16:	dce1      	bgt.n	8015adc <scalbn+0x6c>
 8015b18:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015b40 <scalbn+0xd0>
 8015b1c:	f000 f81e 	bl	8015b5c <copysign>
 8015b20:	a307      	add	r3, pc, #28	; (adr r3, 8015b40 <scalbn+0xd0>)
 8015b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b26:	e7e0      	b.n	8015aea <scalbn+0x7a>
 8015b28:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015b2c:	3236      	adds	r2, #54	; 0x36
 8015b2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015b32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015b36:	4620      	mov	r0, r4
 8015b38:	4629      	mov	r1, r5
 8015b3a:	2200      	movs	r2, #0
 8015b3c:	4b06      	ldr	r3, [pc, #24]	; (8015b58 <scalbn+0xe8>)
 8015b3e:	e7b2      	b.n	8015aa6 <scalbn+0x36>
 8015b40:	c2f8f359 	.word	0xc2f8f359
 8015b44:	01a56e1f 	.word	0x01a56e1f
 8015b48:	8800759c 	.word	0x8800759c
 8015b4c:	7e37e43c 	.word	0x7e37e43c
 8015b50:	43500000 	.word	0x43500000
 8015b54:	ffff3cb0 	.word	0xffff3cb0
 8015b58:	3c900000 	.word	0x3c900000

08015b5c <copysign>:
 8015b5c:	ec51 0b10 	vmov	r0, r1, d0
 8015b60:	ee11 0a90 	vmov	r0, s3
 8015b64:	ee10 2a10 	vmov	r2, s0
 8015b68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015b6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015b70:	ea41 0300 	orr.w	r3, r1, r0
 8015b74:	ec43 2b10 	vmov	d0, r2, r3
 8015b78:	4770      	bx	lr
	...

08015b7c <__errno>:
 8015b7c:	4b01      	ldr	r3, [pc, #4]	; (8015b84 <__errno+0x8>)
 8015b7e:	6818      	ldr	r0, [r3, #0]
 8015b80:	4770      	bx	lr
 8015b82:	bf00      	nop
 8015b84:	2000000c 	.word	0x2000000c

08015b88 <__libc_init_array>:
 8015b88:	b570      	push	{r4, r5, r6, lr}
 8015b8a:	4e0d      	ldr	r6, [pc, #52]	; (8015bc0 <__libc_init_array+0x38>)
 8015b8c:	4c0d      	ldr	r4, [pc, #52]	; (8015bc4 <__libc_init_array+0x3c>)
 8015b8e:	1ba4      	subs	r4, r4, r6
 8015b90:	10a4      	asrs	r4, r4, #2
 8015b92:	2500      	movs	r5, #0
 8015b94:	42a5      	cmp	r5, r4
 8015b96:	d109      	bne.n	8015bac <__libc_init_array+0x24>
 8015b98:	4e0b      	ldr	r6, [pc, #44]	; (8015bc8 <__libc_init_array+0x40>)
 8015b9a:	4c0c      	ldr	r4, [pc, #48]	; (8015bcc <__libc_init_array+0x44>)
 8015b9c:	f004 f9e6 	bl	8019f6c <_init>
 8015ba0:	1ba4      	subs	r4, r4, r6
 8015ba2:	10a4      	asrs	r4, r4, #2
 8015ba4:	2500      	movs	r5, #0
 8015ba6:	42a5      	cmp	r5, r4
 8015ba8:	d105      	bne.n	8015bb6 <__libc_init_array+0x2e>
 8015baa:	bd70      	pop	{r4, r5, r6, pc}
 8015bac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015bb0:	4798      	blx	r3
 8015bb2:	3501      	adds	r5, #1
 8015bb4:	e7ee      	b.n	8015b94 <__libc_init_array+0xc>
 8015bb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015bba:	4798      	blx	r3
 8015bbc:	3501      	adds	r5, #1
 8015bbe:	e7f2      	b.n	8015ba6 <__libc_init_array+0x1e>
 8015bc0:	0801a99c 	.word	0x0801a99c
 8015bc4:	0801a99c 	.word	0x0801a99c
 8015bc8:	0801a99c 	.word	0x0801a99c
 8015bcc:	0801a9a4 	.word	0x0801a9a4

08015bd0 <memset>:
 8015bd0:	4402      	add	r2, r0
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	4293      	cmp	r3, r2
 8015bd6:	d100      	bne.n	8015bda <memset+0xa>
 8015bd8:	4770      	bx	lr
 8015bda:	f803 1b01 	strb.w	r1, [r3], #1
 8015bde:	e7f9      	b.n	8015bd4 <memset+0x4>

08015be0 <__cvt>:
 8015be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015be4:	ec55 4b10 	vmov	r4, r5, d0
 8015be8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015bea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015bee:	2d00      	cmp	r5, #0
 8015bf0:	460e      	mov	r6, r1
 8015bf2:	4691      	mov	r9, r2
 8015bf4:	4619      	mov	r1, r3
 8015bf6:	bfb8      	it	lt
 8015bf8:	4622      	movlt	r2, r4
 8015bfa:	462b      	mov	r3, r5
 8015bfc:	f027 0720 	bic.w	r7, r7, #32
 8015c00:	bfbb      	ittet	lt
 8015c02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015c06:	461d      	movlt	r5, r3
 8015c08:	2300      	movge	r3, #0
 8015c0a:	232d      	movlt	r3, #45	; 0x2d
 8015c0c:	bfb8      	it	lt
 8015c0e:	4614      	movlt	r4, r2
 8015c10:	2f46      	cmp	r7, #70	; 0x46
 8015c12:	700b      	strb	r3, [r1, #0]
 8015c14:	d004      	beq.n	8015c20 <__cvt+0x40>
 8015c16:	2f45      	cmp	r7, #69	; 0x45
 8015c18:	d100      	bne.n	8015c1c <__cvt+0x3c>
 8015c1a:	3601      	adds	r6, #1
 8015c1c:	2102      	movs	r1, #2
 8015c1e:	e000      	b.n	8015c22 <__cvt+0x42>
 8015c20:	2103      	movs	r1, #3
 8015c22:	ab03      	add	r3, sp, #12
 8015c24:	9301      	str	r3, [sp, #4]
 8015c26:	ab02      	add	r3, sp, #8
 8015c28:	9300      	str	r3, [sp, #0]
 8015c2a:	4632      	mov	r2, r6
 8015c2c:	4653      	mov	r3, sl
 8015c2e:	ec45 4b10 	vmov	d0, r4, r5
 8015c32:	f001 fdfd 	bl	8017830 <_dtoa_r>
 8015c36:	2f47      	cmp	r7, #71	; 0x47
 8015c38:	4680      	mov	r8, r0
 8015c3a:	d102      	bne.n	8015c42 <__cvt+0x62>
 8015c3c:	f019 0f01 	tst.w	r9, #1
 8015c40:	d026      	beq.n	8015c90 <__cvt+0xb0>
 8015c42:	2f46      	cmp	r7, #70	; 0x46
 8015c44:	eb08 0906 	add.w	r9, r8, r6
 8015c48:	d111      	bne.n	8015c6e <__cvt+0x8e>
 8015c4a:	f898 3000 	ldrb.w	r3, [r8]
 8015c4e:	2b30      	cmp	r3, #48	; 0x30
 8015c50:	d10a      	bne.n	8015c68 <__cvt+0x88>
 8015c52:	2200      	movs	r2, #0
 8015c54:	2300      	movs	r3, #0
 8015c56:	4620      	mov	r0, r4
 8015c58:	4629      	mov	r1, r5
 8015c5a:	f7ea ff4d 	bl	8000af8 <__aeabi_dcmpeq>
 8015c5e:	b918      	cbnz	r0, 8015c68 <__cvt+0x88>
 8015c60:	f1c6 0601 	rsb	r6, r6, #1
 8015c64:	f8ca 6000 	str.w	r6, [sl]
 8015c68:	f8da 3000 	ldr.w	r3, [sl]
 8015c6c:	4499      	add	r9, r3
 8015c6e:	2200      	movs	r2, #0
 8015c70:	2300      	movs	r3, #0
 8015c72:	4620      	mov	r0, r4
 8015c74:	4629      	mov	r1, r5
 8015c76:	f7ea ff3f 	bl	8000af8 <__aeabi_dcmpeq>
 8015c7a:	b938      	cbnz	r0, 8015c8c <__cvt+0xac>
 8015c7c:	2230      	movs	r2, #48	; 0x30
 8015c7e:	9b03      	ldr	r3, [sp, #12]
 8015c80:	454b      	cmp	r3, r9
 8015c82:	d205      	bcs.n	8015c90 <__cvt+0xb0>
 8015c84:	1c59      	adds	r1, r3, #1
 8015c86:	9103      	str	r1, [sp, #12]
 8015c88:	701a      	strb	r2, [r3, #0]
 8015c8a:	e7f8      	b.n	8015c7e <__cvt+0x9e>
 8015c8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8015c90:	9b03      	ldr	r3, [sp, #12]
 8015c92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c94:	eba3 0308 	sub.w	r3, r3, r8
 8015c98:	4640      	mov	r0, r8
 8015c9a:	6013      	str	r3, [r2, #0]
 8015c9c:	b004      	add	sp, #16
 8015c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015ca2 <__exponent>:
 8015ca2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015ca4:	2900      	cmp	r1, #0
 8015ca6:	4604      	mov	r4, r0
 8015ca8:	bfba      	itte	lt
 8015caa:	4249      	neglt	r1, r1
 8015cac:	232d      	movlt	r3, #45	; 0x2d
 8015cae:	232b      	movge	r3, #43	; 0x2b
 8015cb0:	2909      	cmp	r1, #9
 8015cb2:	f804 2b02 	strb.w	r2, [r4], #2
 8015cb6:	7043      	strb	r3, [r0, #1]
 8015cb8:	dd20      	ble.n	8015cfc <__exponent+0x5a>
 8015cba:	f10d 0307 	add.w	r3, sp, #7
 8015cbe:	461f      	mov	r7, r3
 8015cc0:	260a      	movs	r6, #10
 8015cc2:	fb91 f5f6 	sdiv	r5, r1, r6
 8015cc6:	fb06 1115 	mls	r1, r6, r5, r1
 8015cca:	3130      	adds	r1, #48	; 0x30
 8015ccc:	2d09      	cmp	r5, #9
 8015cce:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015cd2:	f103 32ff 	add.w	r2, r3, #4294967295
 8015cd6:	4629      	mov	r1, r5
 8015cd8:	dc09      	bgt.n	8015cee <__exponent+0x4c>
 8015cda:	3130      	adds	r1, #48	; 0x30
 8015cdc:	3b02      	subs	r3, #2
 8015cde:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015ce2:	42bb      	cmp	r3, r7
 8015ce4:	4622      	mov	r2, r4
 8015ce6:	d304      	bcc.n	8015cf2 <__exponent+0x50>
 8015ce8:	1a10      	subs	r0, r2, r0
 8015cea:	b003      	add	sp, #12
 8015cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cee:	4613      	mov	r3, r2
 8015cf0:	e7e7      	b.n	8015cc2 <__exponent+0x20>
 8015cf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015cf6:	f804 2b01 	strb.w	r2, [r4], #1
 8015cfa:	e7f2      	b.n	8015ce2 <__exponent+0x40>
 8015cfc:	2330      	movs	r3, #48	; 0x30
 8015cfe:	4419      	add	r1, r3
 8015d00:	7083      	strb	r3, [r0, #2]
 8015d02:	1d02      	adds	r2, r0, #4
 8015d04:	70c1      	strb	r1, [r0, #3]
 8015d06:	e7ef      	b.n	8015ce8 <__exponent+0x46>

08015d08 <_printf_float>:
 8015d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d0c:	b08d      	sub	sp, #52	; 0x34
 8015d0e:	460c      	mov	r4, r1
 8015d10:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015d14:	4616      	mov	r6, r2
 8015d16:	461f      	mov	r7, r3
 8015d18:	4605      	mov	r5, r0
 8015d1a:	f002 fe7b 	bl	8018a14 <_localeconv_r>
 8015d1e:	6803      	ldr	r3, [r0, #0]
 8015d20:	9304      	str	r3, [sp, #16]
 8015d22:	4618      	mov	r0, r3
 8015d24:	f7ea fa6c 	bl	8000200 <strlen>
 8015d28:	2300      	movs	r3, #0
 8015d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8015d2c:	f8d8 3000 	ldr.w	r3, [r8]
 8015d30:	9005      	str	r0, [sp, #20]
 8015d32:	3307      	adds	r3, #7
 8015d34:	f023 0307 	bic.w	r3, r3, #7
 8015d38:	f103 0208 	add.w	r2, r3, #8
 8015d3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015d40:	f8d4 b000 	ldr.w	fp, [r4]
 8015d44:	f8c8 2000 	str.w	r2, [r8]
 8015d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d4c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015d50:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015d54:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015d58:	9307      	str	r3, [sp, #28]
 8015d5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8015d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8015d62:	4ba7      	ldr	r3, [pc, #668]	; (8016000 <_printf_float+0x2f8>)
 8015d64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015d68:	f7ea fef8 	bl	8000b5c <__aeabi_dcmpun>
 8015d6c:	bb70      	cbnz	r0, 8015dcc <_printf_float+0xc4>
 8015d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8015d72:	4ba3      	ldr	r3, [pc, #652]	; (8016000 <_printf_float+0x2f8>)
 8015d74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015d78:	f7ea fed2 	bl	8000b20 <__aeabi_dcmple>
 8015d7c:	bb30      	cbnz	r0, 8015dcc <_printf_float+0xc4>
 8015d7e:	2200      	movs	r2, #0
 8015d80:	2300      	movs	r3, #0
 8015d82:	4640      	mov	r0, r8
 8015d84:	4649      	mov	r1, r9
 8015d86:	f7ea fec1 	bl	8000b0c <__aeabi_dcmplt>
 8015d8a:	b110      	cbz	r0, 8015d92 <_printf_float+0x8a>
 8015d8c:	232d      	movs	r3, #45	; 0x2d
 8015d8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015d92:	4a9c      	ldr	r2, [pc, #624]	; (8016004 <_printf_float+0x2fc>)
 8015d94:	4b9c      	ldr	r3, [pc, #624]	; (8016008 <_printf_float+0x300>)
 8015d96:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015d9a:	bf8c      	ite	hi
 8015d9c:	4690      	movhi	r8, r2
 8015d9e:	4698      	movls	r8, r3
 8015da0:	2303      	movs	r3, #3
 8015da2:	f02b 0204 	bic.w	r2, fp, #4
 8015da6:	6123      	str	r3, [r4, #16]
 8015da8:	6022      	str	r2, [r4, #0]
 8015daa:	f04f 0900 	mov.w	r9, #0
 8015dae:	9700      	str	r7, [sp, #0]
 8015db0:	4633      	mov	r3, r6
 8015db2:	aa0b      	add	r2, sp, #44	; 0x2c
 8015db4:	4621      	mov	r1, r4
 8015db6:	4628      	mov	r0, r5
 8015db8:	f000 f9e6 	bl	8016188 <_printf_common>
 8015dbc:	3001      	adds	r0, #1
 8015dbe:	f040 808d 	bne.w	8015edc <_printf_float+0x1d4>
 8015dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8015dc6:	b00d      	add	sp, #52	; 0x34
 8015dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dcc:	4642      	mov	r2, r8
 8015dce:	464b      	mov	r3, r9
 8015dd0:	4640      	mov	r0, r8
 8015dd2:	4649      	mov	r1, r9
 8015dd4:	f7ea fec2 	bl	8000b5c <__aeabi_dcmpun>
 8015dd8:	b110      	cbz	r0, 8015de0 <_printf_float+0xd8>
 8015dda:	4a8c      	ldr	r2, [pc, #560]	; (801600c <_printf_float+0x304>)
 8015ddc:	4b8c      	ldr	r3, [pc, #560]	; (8016010 <_printf_float+0x308>)
 8015dde:	e7da      	b.n	8015d96 <_printf_float+0x8e>
 8015de0:	6861      	ldr	r1, [r4, #4]
 8015de2:	1c4b      	adds	r3, r1, #1
 8015de4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015de8:	a80a      	add	r0, sp, #40	; 0x28
 8015dea:	d13e      	bne.n	8015e6a <_printf_float+0x162>
 8015dec:	2306      	movs	r3, #6
 8015dee:	6063      	str	r3, [r4, #4]
 8015df0:	2300      	movs	r3, #0
 8015df2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015df6:	ab09      	add	r3, sp, #36	; 0x24
 8015df8:	9300      	str	r3, [sp, #0]
 8015dfa:	ec49 8b10 	vmov	d0, r8, r9
 8015dfe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015e02:	6022      	str	r2, [r4, #0]
 8015e04:	f8cd a004 	str.w	sl, [sp, #4]
 8015e08:	6861      	ldr	r1, [r4, #4]
 8015e0a:	4628      	mov	r0, r5
 8015e0c:	f7ff fee8 	bl	8015be0 <__cvt>
 8015e10:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015e14:	2b47      	cmp	r3, #71	; 0x47
 8015e16:	4680      	mov	r8, r0
 8015e18:	d109      	bne.n	8015e2e <_printf_float+0x126>
 8015e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e1c:	1cd8      	adds	r0, r3, #3
 8015e1e:	db02      	blt.n	8015e26 <_printf_float+0x11e>
 8015e20:	6862      	ldr	r2, [r4, #4]
 8015e22:	4293      	cmp	r3, r2
 8015e24:	dd47      	ble.n	8015eb6 <_printf_float+0x1ae>
 8015e26:	f1aa 0a02 	sub.w	sl, sl, #2
 8015e2a:	fa5f fa8a 	uxtb.w	sl, sl
 8015e2e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015e32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015e34:	d824      	bhi.n	8015e80 <_printf_float+0x178>
 8015e36:	3901      	subs	r1, #1
 8015e38:	4652      	mov	r2, sl
 8015e3a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015e3e:	9109      	str	r1, [sp, #36]	; 0x24
 8015e40:	f7ff ff2f 	bl	8015ca2 <__exponent>
 8015e44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e46:	1813      	adds	r3, r2, r0
 8015e48:	2a01      	cmp	r2, #1
 8015e4a:	4681      	mov	r9, r0
 8015e4c:	6123      	str	r3, [r4, #16]
 8015e4e:	dc02      	bgt.n	8015e56 <_printf_float+0x14e>
 8015e50:	6822      	ldr	r2, [r4, #0]
 8015e52:	07d1      	lsls	r1, r2, #31
 8015e54:	d501      	bpl.n	8015e5a <_printf_float+0x152>
 8015e56:	3301      	adds	r3, #1
 8015e58:	6123      	str	r3, [r4, #16]
 8015e5a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d0a5      	beq.n	8015dae <_printf_float+0xa6>
 8015e62:	232d      	movs	r3, #45	; 0x2d
 8015e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015e68:	e7a1      	b.n	8015dae <_printf_float+0xa6>
 8015e6a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015e6e:	f000 8177 	beq.w	8016160 <_printf_float+0x458>
 8015e72:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015e76:	d1bb      	bne.n	8015df0 <_printf_float+0xe8>
 8015e78:	2900      	cmp	r1, #0
 8015e7a:	d1b9      	bne.n	8015df0 <_printf_float+0xe8>
 8015e7c:	2301      	movs	r3, #1
 8015e7e:	e7b6      	b.n	8015dee <_printf_float+0xe6>
 8015e80:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015e84:	d119      	bne.n	8015eba <_printf_float+0x1b2>
 8015e86:	2900      	cmp	r1, #0
 8015e88:	6863      	ldr	r3, [r4, #4]
 8015e8a:	dd0c      	ble.n	8015ea6 <_printf_float+0x19e>
 8015e8c:	6121      	str	r1, [r4, #16]
 8015e8e:	b913      	cbnz	r3, 8015e96 <_printf_float+0x18e>
 8015e90:	6822      	ldr	r2, [r4, #0]
 8015e92:	07d2      	lsls	r2, r2, #31
 8015e94:	d502      	bpl.n	8015e9c <_printf_float+0x194>
 8015e96:	3301      	adds	r3, #1
 8015e98:	440b      	add	r3, r1
 8015e9a:	6123      	str	r3, [r4, #16]
 8015e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e9e:	65a3      	str	r3, [r4, #88]	; 0x58
 8015ea0:	f04f 0900 	mov.w	r9, #0
 8015ea4:	e7d9      	b.n	8015e5a <_printf_float+0x152>
 8015ea6:	b913      	cbnz	r3, 8015eae <_printf_float+0x1a6>
 8015ea8:	6822      	ldr	r2, [r4, #0]
 8015eaa:	07d0      	lsls	r0, r2, #31
 8015eac:	d501      	bpl.n	8015eb2 <_printf_float+0x1aa>
 8015eae:	3302      	adds	r3, #2
 8015eb0:	e7f3      	b.n	8015e9a <_printf_float+0x192>
 8015eb2:	2301      	movs	r3, #1
 8015eb4:	e7f1      	b.n	8015e9a <_printf_float+0x192>
 8015eb6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015eba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015ebe:	4293      	cmp	r3, r2
 8015ec0:	db05      	blt.n	8015ece <_printf_float+0x1c6>
 8015ec2:	6822      	ldr	r2, [r4, #0]
 8015ec4:	6123      	str	r3, [r4, #16]
 8015ec6:	07d1      	lsls	r1, r2, #31
 8015ec8:	d5e8      	bpl.n	8015e9c <_printf_float+0x194>
 8015eca:	3301      	adds	r3, #1
 8015ecc:	e7e5      	b.n	8015e9a <_printf_float+0x192>
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	bfd4      	ite	le
 8015ed2:	f1c3 0302 	rsble	r3, r3, #2
 8015ed6:	2301      	movgt	r3, #1
 8015ed8:	4413      	add	r3, r2
 8015eda:	e7de      	b.n	8015e9a <_printf_float+0x192>
 8015edc:	6823      	ldr	r3, [r4, #0]
 8015ede:	055a      	lsls	r2, r3, #21
 8015ee0:	d407      	bmi.n	8015ef2 <_printf_float+0x1ea>
 8015ee2:	6923      	ldr	r3, [r4, #16]
 8015ee4:	4642      	mov	r2, r8
 8015ee6:	4631      	mov	r1, r6
 8015ee8:	4628      	mov	r0, r5
 8015eea:	47b8      	blx	r7
 8015eec:	3001      	adds	r0, #1
 8015eee:	d12b      	bne.n	8015f48 <_printf_float+0x240>
 8015ef0:	e767      	b.n	8015dc2 <_printf_float+0xba>
 8015ef2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015ef6:	f240 80dc 	bls.w	80160b2 <_printf_float+0x3aa>
 8015efa:	2200      	movs	r2, #0
 8015efc:	2300      	movs	r3, #0
 8015efe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015f02:	f7ea fdf9 	bl	8000af8 <__aeabi_dcmpeq>
 8015f06:	2800      	cmp	r0, #0
 8015f08:	d033      	beq.n	8015f72 <_printf_float+0x26a>
 8015f0a:	2301      	movs	r3, #1
 8015f0c:	4a41      	ldr	r2, [pc, #260]	; (8016014 <_printf_float+0x30c>)
 8015f0e:	4631      	mov	r1, r6
 8015f10:	4628      	mov	r0, r5
 8015f12:	47b8      	blx	r7
 8015f14:	3001      	adds	r0, #1
 8015f16:	f43f af54 	beq.w	8015dc2 <_printf_float+0xba>
 8015f1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015f1e:	429a      	cmp	r2, r3
 8015f20:	db02      	blt.n	8015f28 <_printf_float+0x220>
 8015f22:	6823      	ldr	r3, [r4, #0]
 8015f24:	07d8      	lsls	r0, r3, #31
 8015f26:	d50f      	bpl.n	8015f48 <_printf_float+0x240>
 8015f28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015f2c:	4631      	mov	r1, r6
 8015f2e:	4628      	mov	r0, r5
 8015f30:	47b8      	blx	r7
 8015f32:	3001      	adds	r0, #1
 8015f34:	f43f af45 	beq.w	8015dc2 <_printf_float+0xba>
 8015f38:	f04f 0800 	mov.w	r8, #0
 8015f3c:	f104 091a 	add.w	r9, r4, #26
 8015f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f42:	3b01      	subs	r3, #1
 8015f44:	4543      	cmp	r3, r8
 8015f46:	dc09      	bgt.n	8015f5c <_printf_float+0x254>
 8015f48:	6823      	ldr	r3, [r4, #0]
 8015f4a:	079b      	lsls	r3, r3, #30
 8015f4c:	f100 8103 	bmi.w	8016156 <_printf_float+0x44e>
 8015f50:	68e0      	ldr	r0, [r4, #12]
 8015f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f54:	4298      	cmp	r0, r3
 8015f56:	bfb8      	it	lt
 8015f58:	4618      	movlt	r0, r3
 8015f5a:	e734      	b.n	8015dc6 <_printf_float+0xbe>
 8015f5c:	2301      	movs	r3, #1
 8015f5e:	464a      	mov	r2, r9
 8015f60:	4631      	mov	r1, r6
 8015f62:	4628      	mov	r0, r5
 8015f64:	47b8      	blx	r7
 8015f66:	3001      	adds	r0, #1
 8015f68:	f43f af2b 	beq.w	8015dc2 <_printf_float+0xba>
 8015f6c:	f108 0801 	add.w	r8, r8, #1
 8015f70:	e7e6      	b.n	8015f40 <_printf_float+0x238>
 8015f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	dc2b      	bgt.n	8015fd0 <_printf_float+0x2c8>
 8015f78:	2301      	movs	r3, #1
 8015f7a:	4a26      	ldr	r2, [pc, #152]	; (8016014 <_printf_float+0x30c>)
 8015f7c:	4631      	mov	r1, r6
 8015f7e:	4628      	mov	r0, r5
 8015f80:	47b8      	blx	r7
 8015f82:	3001      	adds	r0, #1
 8015f84:	f43f af1d 	beq.w	8015dc2 <_printf_float+0xba>
 8015f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f8a:	b923      	cbnz	r3, 8015f96 <_printf_float+0x28e>
 8015f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f8e:	b913      	cbnz	r3, 8015f96 <_printf_float+0x28e>
 8015f90:	6823      	ldr	r3, [r4, #0]
 8015f92:	07d9      	lsls	r1, r3, #31
 8015f94:	d5d8      	bpl.n	8015f48 <_printf_float+0x240>
 8015f96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015f9a:	4631      	mov	r1, r6
 8015f9c:	4628      	mov	r0, r5
 8015f9e:	47b8      	blx	r7
 8015fa0:	3001      	adds	r0, #1
 8015fa2:	f43f af0e 	beq.w	8015dc2 <_printf_float+0xba>
 8015fa6:	f04f 0900 	mov.w	r9, #0
 8015faa:	f104 0a1a 	add.w	sl, r4, #26
 8015fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fb0:	425b      	negs	r3, r3
 8015fb2:	454b      	cmp	r3, r9
 8015fb4:	dc01      	bgt.n	8015fba <_printf_float+0x2b2>
 8015fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fb8:	e794      	b.n	8015ee4 <_printf_float+0x1dc>
 8015fba:	2301      	movs	r3, #1
 8015fbc:	4652      	mov	r2, sl
 8015fbe:	4631      	mov	r1, r6
 8015fc0:	4628      	mov	r0, r5
 8015fc2:	47b8      	blx	r7
 8015fc4:	3001      	adds	r0, #1
 8015fc6:	f43f aefc 	beq.w	8015dc2 <_printf_float+0xba>
 8015fca:	f109 0901 	add.w	r9, r9, #1
 8015fce:	e7ee      	b.n	8015fae <_printf_float+0x2a6>
 8015fd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015fd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015fd4:	429a      	cmp	r2, r3
 8015fd6:	bfa8      	it	ge
 8015fd8:	461a      	movge	r2, r3
 8015fda:	2a00      	cmp	r2, #0
 8015fdc:	4691      	mov	r9, r2
 8015fde:	dd07      	ble.n	8015ff0 <_printf_float+0x2e8>
 8015fe0:	4613      	mov	r3, r2
 8015fe2:	4631      	mov	r1, r6
 8015fe4:	4642      	mov	r2, r8
 8015fe6:	4628      	mov	r0, r5
 8015fe8:	47b8      	blx	r7
 8015fea:	3001      	adds	r0, #1
 8015fec:	f43f aee9 	beq.w	8015dc2 <_printf_float+0xba>
 8015ff0:	f104 031a 	add.w	r3, r4, #26
 8015ff4:	f04f 0b00 	mov.w	fp, #0
 8015ff8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015ffc:	9306      	str	r3, [sp, #24]
 8015ffe:	e015      	b.n	801602c <_printf_float+0x324>
 8016000:	7fefffff 	.word	0x7fefffff
 8016004:	0801a66c 	.word	0x0801a66c
 8016008:	0801a668 	.word	0x0801a668
 801600c:	0801a674 	.word	0x0801a674
 8016010:	0801a670 	.word	0x0801a670
 8016014:	0801a82b 	.word	0x0801a82b
 8016018:	2301      	movs	r3, #1
 801601a:	9a06      	ldr	r2, [sp, #24]
 801601c:	4631      	mov	r1, r6
 801601e:	4628      	mov	r0, r5
 8016020:	47b8      	blx	r7
 8016022:	3001      	adds	r0, #1
 8016024:	f43f aecd 	beq.w	8015dc2 <_printf_float+0xba>
 8016028:	f10b 0b01 	add.w	fp, fp, #1
 801602c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8016030:	ebaa 0309 	sub.w	r3, sl, r9
 8016034:	455b      	cmp	r3, fp
 8016036:	dcef      	bgt.n	8016018 <_printf_float+0x310>
 8016038:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801603c:	429a      	cmp	r2, r3
 801603e:	44d0      	add	r8, sl
 8016040:	db15      	blt.n	801606e <_printf_float+0x366>
 8016042:	6823      	ldr	r3, [r4, #0]
 8016044:	07da      	lsls	r2, r3, #31
 8016046:	d412      	bmi.n	801606e <_printf_float+0x366>
 8016048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801604a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801604c:	eba3 020a 	sub.w	r2, r3, sl
 8016050:	eba3 0a01 	sub.w	sl, r3, r1
 8016054:	4592      	cmp	sl, r2
 8016056:	bfa8      	it	ge
 8016058:	4692      	movge	sl, r2
 801605a:	f1ba 0f00 	cmp.w	sl, #0
 801605e:	dc0e      	bgt.n	801607e <_printf_float+0x376>
 8016060:	f04f 0800 	mov.w	r8, #0
 8016064:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016068:	f104 091a 	add.w	r9, r4, #26
 801606c:	e019      	b.n	80160a2 <_printf_float+0x39a>
 801606e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016072:	4631      	mov	r1, r6
 8016074:	4628      	mov	r0, r5
 8016076:	47b8      	blx	r7
 8016078:	3001      	adds	r0, #1
 801607a:	d1e5      	bne.n	8016048 <_printf_float+0x340>
 801607c:	e6a1      	b.n	8015dc2 <_printf_float+0xba>
 801607e:	4653      	mov	r3, sl
 8016080:	4642      	mov	r2, r8
 8016082:	4631      	mov	r1, r6
 8016084:	4628      	mov	r0, r5
 8016086:	47b8      	blx	r7
 8016088:	3001      	adds	r0, #1
 801608a:	d1e9      	bne.n	8016060 <_printf_float+0x358>
 801608c:	e699      	b.n	8015dc2 <_printf_float+0xba>
 801608e:	2301      	movs	r3, #1
 8016090:	464a      	mov	r2, r9
 8016092:	4631      	mov	r1, r6
 8016094:	4628      	mov	r0, r5
 8016096:	47b8      	blx	r7
 8016098:	3001      	adds	r0, #1
 801609a:	f43f ae92 	beq.w	8015dc2 <_printf_float+0xba>
 801609e:	f108 0801 	add.w	r8, r8, #1
 80160a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80160a6:	1a9b      	subs	r3, r3, r2
 80160a8:	eba3 030a 	sub.w	r3, r3, sl
 80160ac:	4543      	cmp	r3, r8
 80160ae:	dcee      	bgt.n	801608e <_printf_float+0x386>
 80160b0:	e74a      	b.n	8015f48 <_printf_float+0x240>
 80160b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80160b4:	2a01      	cmp	r2, #1
 80160b6:	dc01      	bgt.n	80160bc <_printf_float+0x3b4>
 80160b8:	07db      	lsls	r3, r3, #31
 80160ba:	d53a      	bpl.n	8016132 <_printf_float+0x42a>
 80160bc:	2301      	movs	r3, #1
 80160be:	4642      	mov	r2, r8
 80160c0:	4631      	mov	r1, r6
 80160c2:	4628      	mov	r0, r5
 80160c4:	47b8      	blx	r7
 80160c6:	3001      	adds	r0, #1
 80160c8:	f43f ae7b 	beq.w	8015dc2 <_printf_float+0xba>
 80160cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80160d0:	4631      	mov	r1, r6
 80160d2:	4628      	mov	r0, r5
 80160d4:	47b8      	blx	r7
 80160d6:	3001      	adds	r0, #1
 80160d8:	f108 0801 	add.w	r8, r8, #1
 80160dc:	f43f ae71 	beq.w	8015dc2 <_printf_float+0xba>
 80160e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160e2:	2200      	movs	r2, #0
 80160e4:	f103 3aff 	add.w	sl, r3, #4294967295
 80160e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80160ec:	2300      	movs	r3, #0
 80160ee:	f7ea fd03 	bl	8000af8 <__aeabi_dcmpeq>
 80160f2:	b9c8      	cbnz	r0, 8016128 <_printf_float+0x420>
 80160f4:	4653      	mov	r3, sl
 80160f6:	4642      	mov	r2, r8
 80160f8:	4631      	mov	r1, r6
 80160fa:	4628      	mov	r0, r5
 80160fc:	47b8      	blx	r7
 80160fe:	3001      	adds	r0, #1
 8016100:	d10e      	bne.n	8016120 <_printf_float+0x418>
 8016102:	e65e      	b.n	8015dc2 <_printf_float+0xba>
 8016104:	2301      	movs	r3, #1
 8016106:	4652      	mov	r2, sl
 8016108:	4631      	mov	r1, r6
 801610a:	4628      	mov	r0, r5
 801610c:	47b8      	blx	r7
 801610e:	3001      	adds	r0, #1
 8016110:	f43f ae57 	beq.w	8015dc2 <_printf_float+0xba>
 8016114:	f108 0801 	add.w	r8, r8, #1
 8016118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801611a:	3b01      	subs	r3, #1
 801611c:	4543      	cmp	r3, r8
 801611e:	dcf1      	bgt.n	8016104 <_printf_float+0x3fc>
 8016120:	464b      	mov	r3, r9
 8016122:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016126:	e6de      	b.n	8015ee6 <_printf_float+0x1de>
 8016128:	f04f 0800 	mov.w	r8, #0
 801612c:	f104 0a1a 	add.w	sl, r4, #26
 8016130:	e7f2      	b.n	8016118 <_printf_float+0x410>
 8016132:	2301      	movs	r3, #1
 8016134:	e7df      	b.n	80160f6 <_printf_float+0x3ee>
 8016136:	2301      	movs	r3, #1
 8016138:	464a      	mov	r2, r9
 801613a:	4631      	mov	r1, r6
 801613c:	4628      	mov	r0, r5
 801613e:	47b8      	blx	r7
 8016140:	3001      	adds	r0, #1
 8016142:	f43f ae3e 	beq.w	8015dc2 <_printf_float+0xba>
 8016146:	f108 0801 	add.w	r8, r8, #1
 801614a:	68e3      	ldr	r3, [r4, #12]
 801614c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801614e:	1a9b      	subs	r3, r3, r2
 8016150:	4543      	cmp	r3, r8
 8016152:	dcf0      	bgt.n	8016136 <_printf_float+0x42e>
 8016154:	e6fc      	b.n	8015f50 <_printf_float+0x248>
 8016156:	f04f 0800 	mov.w	r8, #0
 801615a:	f104 0919 	add.w	r9, r4, #25
 801615e:	e7f4      	b.n	801614a <_printf_float+0x442>
 8016160:	2900      	cmp	r1, #0
 8016162:	f43f ae8b 	beq.w	8015e7c <_printf_float+0x174>
 8016166:	2300      	movs	r3, #0
 8016168:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801616c:	ab09      	add	r3, sp, #36	; 0x24
 801616e:	9300      	str	r3, [sp, #0]
 8016170:	ec49 8b10 	vmov	d0, r8, r9
 8016174:	6022      	str	r2, [r4, #0]
 8016176:	f8cd a004 	str.w	sl, [sp, #4]
 801617a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801617e:	4628      	mov	r0, r5
 8016180:	f7ff fd2e 	bl	8015be0 <__cvt>
 8016184:	4680      	mov	r8, r0
 8016186:	e648      	b.n	8015e1a <_printf_float+0x112>

08016188 <_printf_common>:
 8016188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801618c:	4691      	mov	r9, r2
 801618e:	461f      	mov	r7, r3
 8016190:	688a      	ldr	r2, [r1, #8]
 8016192:	690b      	ldr	r3, [r1, #16]
 8016194:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016198:	4293      	cmp	r3, r2
 801619a:	bfb8      	it	lt
 801619c:	4613      	movlt	r3, r2
 801619e:	f8c9 3000 	str.w	r3, [r9]
 80161a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80161a6:	4606      	mov	r6, r0
 80161a8:	460c      	mov	r4, r1
 80161aa:	b112      	cbz	r2, 80161b2 <_printf_common+0x2a>
 80161ac:	3301      	adds	r3, #1
 80161ae:	f8c9 3000 	str.w	r3, [r9]
 80161b2:	6823      	ldr	r3, [r4, #0]
 80161b4:	0699      	lsls	r1, r3, #26
 80161b6:	bf42      	ittt	mi
 80161b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80161bc:	3302      	addmi	r3, #2
 80161be:	f8c9 3000 	strmi.w	r3, [r9]
 80161c2:	6825      	ldr	r5, [r4, #0]
 80161c4:	f015 0506 	ands.w	r5, r5, #6
 80161c8:	d107      	bne.n	80161da <_printf_common+0x52>
 80161ca:	f104 0a19 	add.w	sl, r4, #25
 80161ce:	68e3      	ldr	r3, [r4, #12]
 80161d0:	f8d9 2000 	ldr.w	r2, [r9]
 80161d4:	1a9b      	subs	r3, r3, r2
 80161d6:	42ab      	cmp	r3, r5
 80161d8:	dc28      	bgt.n	801622c <_printf_common+0xa4>
 80161da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80161de:	6822      	ldr	r2, [r4, #0]
 80161e0:	3300      	adds	r3, #0
 80161e2:	bf18      	it	ne
 80161e4:	2301      	movne	r3, #1
 80161e6:	0692      	lsls	r2, r2, #26
 80161e8:	d42d      	bmi.n	8016246 <_printf_common+0xbe>
 80161ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80161ee:	4639      	mov	r1, r7
 80161f0:	4630      	mov	r0, r6
 80161f2:	47c0      	blx	r8
 80161f4:	3001      	adds	r0, #1
 80161f6:	d020      	beq.n	801623a <_printf_common+0xb2>
 80161f8:	6823      	ldr	r3, [r4, #0]
 80161fa:	68e5      	ldr	r5, [r4, #12]
 80161fc:	f8d9 2000 	ldr.w	r2, [r9]
 8016200:	f003 0306 	and.w	r3, r3, #6
 8016204:	2b04      	cmp	r3, #4
 8016206:	bf08      	it	eq
 8016208:	1aad      	subeq	r5, r5, r2
 801620a:	68a3      	ldr	r3, [r4, #8]
 801620c:	6922      	ldr	r2, [r4, #16]
 801620e:	bf0c      	ite	eq
 8016210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016214:	2500      	movne	r5, #0
 8016216:	4293      	cmp	r3, r2
 8016218:	bfc4      	itt	gt
 801621a:	1a9b      	subgt	r3, r3, r2
 801621c:	18ed      	addgt	r5, r5, r3
 801621e:	f04f 0900 	mov.w	r9, #0
 8016222:	341a      	adds	r4, #26
 8016224:	454d      	cmp	r5, r9
 8016226:	d11a      	bne.n	801625e <_printf_common+0xd6>
 8016228:	2000      	movs	r0, #0
 801622a:	e008      	b.n	801623e <_printf_common+0xb6>
 801622c:	2301      	movs	r3, #1
 801622e:	4652      	mov	r2, sl
 8016230:	4639      	mov	r1, r7
 8016232:	4630      	mov	r0, r6
 8016234:	47c0      	blx	r8
 8016236:	3001      	adds	r0, #1
 8016238:	d103      	bne.n	8016242 <_printf_common+0xba>
 801623a:	f04f 30ff 	mov.w	r0, #4294967295
 801623e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016242:	3501      	adds	r5, #1
 8016244:	e7c3      	b.n	80161ce <_printf_common+0x46>
 8016246:	18e1      	adds	r1, r4, r3
 8016248:	1c5a      	adds	r2, r3, #1
 801624a:	2030      	movs	r0, #48	; 0x30
 801624c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016250:	4422      	add	r2, r4
 8016252:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016256:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801625a:	3302      	adds	r3, #2
 801625c:	e7c5      	b.n	80161ea <_printf_common+0x62>
 801625e:	2301      	movs	r3, #1
 8016260:	4622      	mov	r2, r4
 8016262:	4639      	mov	r1, r7
 8016264:	4630      	mov	r0, r6
 8016266:	47c0      	blx	r8
 8016268:	3001      	adds	r0, #1
 801626a:	d0e6      	beq.n	801623a <_printf_common+0xb2>
 801626c:	f109 0901 	add.w	r9, r9, #1
 8016270:	e7d8      	b.n	8016224 <_printf_common+0x9c>
	...

08016274 <_printf_i>:
 8016274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016278:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801627c:	460c      	mov	r4, r1
 801627e:	7e09      	ldrb	r1, [r1, #24]
 8016280:	b085      	sub	sp, #20
 8016282:	296e      	cmp	r1, #110	; 0x6e
 8016284:	4617      	mov	r7, r2
 8016286:	4606      	mov	r6, r0
 8016288:	4698      	mov	r8, r3
 801628a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801628c:	f000 80b3 	beq.w	80163f6 <_printf_i+0x182>
 8016290:	d822      	bhi.n	80162d8 <_printf_i+0x64>
 8016292:	2963      	cmp	r1, #99	; 0x63
 8016294:	d036      	beq.n	8016304 <_printf_i+0x90>
 8016296:	d80a      	bhi.n	80162ae <_printf_i+0x3a>
 8016298:	2900      	cmp	r1, #0
 801629a:	f000 80b9 	beq.w	8016410 <_printf_i+0x19c>
 801629e:	2958      	cmp	r1, #88	; 0x58
 80162a0:	f000 8083 	beq.w	80163aa <_printf_i+0x136>
 80162a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80162a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80162ac:	e032      	b.n	8016314 <_printf_i+0xa0>
 80162ae:	2964      	cmp	r1, #100	; 0x64
 80162b0:	d001      	beq.n	80162b6 <_printf_i+0x42>
 80162b2:	2969      	cmp	r1, #105	; 0x69
 80162b4:	d1f6      	bne.n	80162a4 <_printf_i+0x30>
 80162b6:	6820      	ldr	r0, [r4, #0]
 80162b8:	6813      	ldr	r3, [r2, #0]
 80162ba:	0605      	lsls	r5, r0, #24
 80162bc:	f103 0104 	add.w	r1, r3, #4
 80162c0:	d52a      	bpl.n	8016318 <_printf_i+0xa4>
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	6011      	str	r1, [r2, #0]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	da03      	bge.n	80162d2 <_printf_i+0x5e>
 80162ca:	222d      	movs	r2, #45	; 0x2d
 80162cc:	425b      	negs	r3, r3
 80162ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80162d2:	486f      	ldr	r0, [pc, #444]	; (8016490 <_printf_i+0x21c>)
 80162d4:	220a      	movs	r2, #10
 80162d6:	e039      	b.n	801634c <_printf_i+0xd8>
 80162d8:	2973      	cmp	r1, #115	; 0x73
 80162da:	f000 809d 	beq.w	8016418 <_printf_i+0x1a4>
 80162de:	d808      	bhi.n	80162f2 <_printf_i+0x7e>
 80162e0:	296f      	cmp	r1, #111	; 0x6f
 80162e2:	d020      	beq.n	8016326 <_printf_i+0xb2>
 80162e4:	2970      	cmp	r1, #112	; 0x70
 80162e6:	d1dd      	bne.n	80162a4 <_printf_i+0x30>
 80162e8:	6823      	ldr	r3, [r4, #0]
 80162ea:	f043 0320 	orr.w	r3, r3, #32
 80162ee:	6023      	str	r3, [r4, #0]
 80162f0:	e003      	b.n	80162fa <_printf_i+0x86>
 80162f2:	2975      	cmp	r1, #117	; 0x75
 80162f4:	d017      	beq.n	8016326 <_printf_i+0xb2>
 80162f6:	2978      	cmp	r1, #120	; 0x78
 80162f8:	d1d4      	bne.n	80162a4 <_printf_i+0x30>
 80162fa:	2378      	movs	r3, #120	; 0x78
 80162fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016300:	4864      	ldr	r0, [pc, #400]	; (8016494 <_printf_i+0x220>)
 8016302:	e055      	b.n	80163b0 <_printf_i+0x13c>
 8016304:	6813      	ldr	r3, [r2, #0]
 8016306:	1d19      	adds	r1, r3, #4
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	6011      	str	r1, [r2, #0]
 801630c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016310:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016314:	2301      	movs	r3, #1
 8016316:	e08c      	b.n	8016432 <_printf_i+0x1be>
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	6011      	str	r1, [r2, #0]
 801631c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016320:	bf18      	it	ne
 8016322:	b21b      	sxthne	r3, r3
 8016324:	e7cf      	b.n	80162c6 <_printf_i+0x52>
 8016326:	6813      	ldr	r3, [r2, #0]
 8016328:	6825      	ldr	r5, [r4, #0]
 801632a:	1d18      	adds	r0, r3, #4
 801632c:	6010      	str	r0, [r2, #0]
 801632e:	0628      	lsls	r0, r5, #24
 8016330:	d501      	bpl.n	8016336 <_printf_i+0xc2>
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	e002      	b.n	801633c <_printf_i+0xc8>
 8016336:	0668      	lsls	r0, r5, #25
 8016338:	d5fb      	bpl.n	8016332 <_printf_i+0xbe>
 801633a:	881b      	ldrh	r3, [r3, #0]
 801633c:	4854      	ldr	r0, [pc, #336]	; (8016490 <_printf_i+0x21c>)
 801633e:	296f      	cmp	r1, #111	; 0x6f
 8016340:	bf14      	ite	ne
 8016342:	220a      	movne	r2, #10
 8016344:	2208      	moveq	r2, #8
 8016346:	2100      	movs	r1, #0
 8016348:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801634c:	6865      	ldr	r5, [r4, #4]
 801634e:	60a5      	str	r5, [r4, #8]
 8016350:	2d00      	cmp	r5, #0
 8016352:	f2c0 8095 	blt.w	8016480 <_printf_i+0x20c>
 8016356:	6821      	ldr	r1, [r4, #0]
 8016358:	f021 0104 	bic.w	r1, r1, #4
 801635c:	6021      	str	r1, [r4, #0]
 801635e:	2b00      	cmp	r3, #0
 8016360:	d13d      	bne.n	80163de <_printf_i+0x16a>
 8016362:	2d00      	cmp	r5, #0
 8016364:	f040 808e 	bne.w	8016484 <_printf_i+0x210>
 8016368:	4665      	mov	r5, ip
 801636a:	2a08      	cmp	r2, #8
 801636c:	d10b      	bne.n	8016386 <_printf_i+0x112>
 801636e:	6823      	ldr	r3, [r4, #0]
 8016370:	07db      	lsls	r3, r3, #31
 8016372:	d508      	bpl.n	8016386 <_printf_i+0x112>
 8016374:	6923      	ldr	r3, [r4, #16]
 8016376:	6862      	ldr	r2, [r4, #4]
 8016378:	429a      	cmp	r2, r3
 801637a:	bfde      	ittt	le
 801637c:	2330      	movle	r3, #48	; 0x30
 801637e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016382:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016386:	ebac 0305 	sub.w	r3, ip, r5
 801638a:	6123      	str	r3, [r4, #16]
 801638c:	f8cd 8000 	str.w	r8, [sp]
 8016390:	463b      	mov	r3, r7
 8016392:	aa03      	add	r2, sp, #12
 8016394:	4621      	mov	r1, r4
 8016396:	4630      	mov	r0, r6
 8016398:	f7ff fef6 	bl	8016188 <_printf_common>
 801639c:	3001      	adds	r0, #1
 801639e:	d14d      	bne.n	801643c <_printf_i+0x1c8>
 80163a0:	f04f 30ff 	mov.w	r0, #4294967295
 80163a4:	b005      	add	sp, #20
 80163a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80163aa:	4839      	ldr	r0, [pc, #228]	; (8016490 <_printf_i+0x21c>)
 80163ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80163b0:	6813      	ldr	r3, [r2, #0]
 80163b2:	6821      	ldr	r1, [r4, #0]
 80163b4:	1d1d      	adds	r5, r3, #4
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	6015      	str	r5, [r2, #0]
 80163ba:	060a      	lsls	r2, r1, #24
 80163bc:	d50b      	bpl.n	80163d6 <_printf_i+0x162>
 80163be:	07ca      	lsls	r2, r1, #31
 80163c0:	bf44      	itt	mi
 80163c2:	f041 0120 	orrmi.w	r1, r1, #32
 80163c6:	6021      	strmi	r1, [r4, #0]
 80163c8:	b91b      	cbnz	r3, 80163d2 <_printf_i+0x15e>
 80163ca:	6822      	ldr	r2, [r4, #0]
 80163cc:	f022 0220 	bic.w	r2, r2, #32
 80163d0:	6022      	str	r2, [r4, #0]
 80163d2:	2210      	movs	r2, #16
 80163d4:	e7b7      	b.n	8016346 <_printf_i+0xd2>
 80163d6:	064d      	lsls	r5, r1, #25
 80163d8:	bf48      	it	mi
 80163da:	b29b      	uxthmi	r3, r3
 80163dc:	e7ef      	b.n	80163be <_printf_i+0x14a>
 80163de:	4665      	mov	r5, ip
 80163e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80163e4:	fb02 3311 	mls	r3, r2, r1, r3
 80163e8:	5cc3      	ldrb	r3, [r0, r3]
 80163ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80163ee:	460b      	mov	r3, r1
 80163f0:	2900      	cmp	r1, #0
 80163f2:	d1f5      	bne.n	80163e0 <_printf_i+0x16c>
 80163f4:	e7b9      	b.n	801636a <_printf_i+0xf6>
 80163f6:	6813      	ldr	r3, [r2, #0]
 80163f8:	6825      	ldr	r5, [r4, #0]
 80163fa:	6961      	ldr	r1, [r4, #20]
 80163fc:	1d18      	adds	r0, r3, #4
 80163fe:	6010      	str	r0, [r2, #0]
 8016400:	0628      	lsls	r0, r5, #24
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	d501      	bpl.n	801640a <_printf_i+0x196>
 8016406:	6019      	str	r1, [r3, #0]
 8016408:	e002      	b.n	8016410 <_printf_i+0x19c>
 801640a:	066a      	lsls	r2, r5, #25
 801640c:	d5fb      	bpl.n	8016406 <_printf_i+0x192>
 801640e:	8019      	strh	r1, [r3, #0]
 8016410:	2300      	movs	r3, #0
 8016412:	6123      	str	r3, [r4, #16]
 8016414:	4665      	mov	r5, ip
 8016416:	e7b9      	b.n	801638c <_printf_i+0x118>
 8016418:	6813      	ldr	r3, [r2, #0]
 801641a:	1d19      	adds	r1, r3, #4
 801641c:	6011      	str	r1, [r2, #0]
 801641e:	681d      	ldr	r5, [r3, #0]
 8016420:	6862      	ldr	r2, [r4, #4]
 8016422:	2100      	movs	r1, #0
 8016424:	4628      	mov	r0, r5
 8016426:	f7e9 fef3 	bl	8000210 <memchr>
 801642a:	b108      	cbz	r0, 8016430 <_printf_i+0x1bc>
 801642c:	1b40      	subs	r0, r0, r5
 801642e:	6060      	str	r0, [r4, #4]
 8016430:	6863      	ldr	r3, [r4, #4]
 8016432:	6123      	str	r3, [r4, #16]
 8016434:	2300      	movs	r3, #0
 8016436:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801643a:	e7a7      	b.n	801638c <_printf_i+0x118>
 801643c:	6923      	ldr	r3, [r4, #16]
 801643e:	462a      	mov	r2, r5
 8016440:	4639      	mov	r1, r7
 8016442:	4630      	mov	r0, r6
 8016444:	47c0      	blx	r8
 8016446:	3001      	adds	r0, #1
 8016448:	d0aa      	beq.n	80163a0 <_printf_i+0x12c>
 801644a:	6823      	ldr	r3, [r4, #0]
 801644c:	079b      	lsls	r3, r3, #30
 801644e:	d413      	bmi.n	8016478 <_printf_i+0x204>
 8016450:	68e0      	ldr	r0, [r4, #12]
 8016452:	9b03      	ldr	r3, [sp, #12]
 8016454:	4298      	cmp	r0, r3
 8016456:	bfb8      	it	lt
 8016458:	4618      	movlt	r0, r3
 801645a:	e7a3      	b.n	80163a4 <_printf_i+0x130>
 801645c:	2301      	movs	r3, #1
 801645e:	464a      	mov	r2, r9
 8016460:	4639      	mov	r1, r7
 8016462:	4630      	mov	r0, r6
 8016464:	47c0      	blx	r8
 8016466:	3001      	adds	r0, #1
 8016468:	d09a      	beq.n	80163a0 <_printf_i+0x12c>
 801646a:	3501      	adds	r5, #1
 801646c:	68e3      	ldr	r3, [r4, #12]
 801646e:	9a03      	ldr	r2, [sp, #12]
 8016470:	1a9b      	subs	r3, r3, r2
 8016472:	42ab      	cmp	r3, r5
 8016474:	dcf2      	bgt.n	801645c <_printf_i+0x1e8>
 8016476:	e7eb      	b.n	8016450 <_printf_i+0x1dc>
 8016478:	2500      	movs	r5, #0
 801647a:	f104 0919 	add.w	r9, r4, #25
 801647e:	e7f5      	b.n	801646c <_printf_i+0x1f8>
 8016480:	2b00      	cmp	r3, #0
 8016482:	d1ac      	bne.n	80163de <_printf_i+0x16a>
 8016484:	7803      	ldrb	r3, [r0, #0]
 8016486:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801648a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801648e:	e76c      	b.n	801636a <_printf_i+0xf6>
 8016490:	0801a678 	.word	0x0801a678
 8016494:	0801a689 	.word	0x0801a689

08016498 <_scanf_float>:
 8016498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801649c:	469a      	mov	sl, r3
 801649e:	688b      	ldr	r3, [r1, #8]
 80164a0:	4616      	mov	r6, r2
 80164a2:	1e5a      	subs	r2, r3, #1
 80164a4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80164a8:	b087      	sub	sp, #28
 80164aa:	bf83      	ittte	hi
 80164ac:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80164b0:	189b      	addhi	r3, r3, r2
 80164b2:	9301      	strhi	r3, [sp, #4]
 80164b4:	2300      	movls	r3, #0
 80164b6:	bf86      	itte	hi
 80164b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80164bc:	608b      	strhi	r3, [r1, #8]
 80164be:	9301      	strls	r3, [sp, #4]
 80164c0:	680b      	ldr	r3, [r1, #0]
 80164c2:	4688      	mov	r8, r1
 80164c4:	f04f 0b00 	mov.w	fp, #0
 80164c8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80164cc:	f848 3b1c 	str.w	r3, [r8], #28
 80164d0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80164d4:	4607      	mov	r7, r0
 80164d6:	460c      	mov	r4, r1
 80164d8:	4645      	mov	r5, r8
 80164da:	465a      	mov	r2, fp
 80164dc:	46d9      	mov	r9, fp
 80164de:	f8cd b008 	str.w	fp, [sp, #8]
 80164e2:	68a1      	ldr	r1, [r4, #8]
 80164e4:	b181      	cbz	r1, 8016508 <_scanf_float+0x70>
 80164e6:	6833      	ldr	r3, [r6, #0]
 80164e8:	781b      	ldrb	r3, [r3, #0]
 80164ea:	2b49      	cmp	r3, #73	; 0x49
 80164ec:	d071      	beq.n	80165d2 <_scanf_float+0x13a>
 80164ee:	d84d      	bhi.n	801658c <_scanf_float+0xf4>
 80164f0:	2b39      	cmp	r3, #57	; 0x39
 80164f2:	d840      	bhi.n	8016576 <_scanf_float+0xde>
 80164f4:	2b31      	cmp	r3, #49	; 0x31
 80164f6:	f080 8088 	bcs.w	801660a <_scanf_float+0x172>
 80164fa:	2b2d      	cmp	r3, #45	; 0x2d
 80164fc:	f000 8090 	beq.w	8016620 <_scanf_float+0x188>
 8016500:	d815      	bhi.n	801652e <_scanf_float+0x96>
 8016502:	2b2b      	cmp	r3, #43	; 0x2b
 8016504:	f000 808c 	beq.w	8016620 <_scanf_float+0x188>
 8016508:	f1b9 0f00 	cmp.w	r9, #0
 801650c:	d003      	beq.n	8016516 <_scanf_float+0x7e>
 801650e:	6823      	ldr	r3, [r4, #0]
 8016510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016514:	6023      	str	r3, [r4, #0]
 8016516:	3a01      	subs	r2, #1
 8016518:	2a01      	cmp	r2, #1
 801651a:	f200 80ea 	bhi.w	80166f2 <_scanf_float+0x25a>
 801651e:	4545      	cmp	r5, r8
 8016520:	f200 80dc 	bhi.w	80166dc <_scanf_float+0x244>
 8016524:	2601      	movs	r6, #1
 8016526:	4630      	mov	r0, r6
 8016528:	b007      	add	sp, #28
 801652a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801652e:	2b2e      	cmp	r3, #46	; 0x2e
 8016530:	f000 809f 	beq.w	8016672 <_scanf_float+0x1da>
 8016534:	2b30      	cmp	r3, #48	; 0x30
 8016536:	d1e7      	bne.n	8016508 <_scanf_float+0x70>
 8016538:	6820      	ldr	r0, [r4, #0]
 801653a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801653e:	d064      	beq.n	801660a <_scanf_float+0x172>
 8016540:	9b01      	ldr	r3, [sp, #4]
 8016542:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8016546:	6020      	str	r0, [r4, #0]
 8016548:	f109 0901 	add.w	r9, r9, #1
 801654c:	b11b      	cbz	r3, 8016556 <_scanf_float+0xbe>
 801654e:	3b01      	subs	r3, #1
 8016550:	3101      	adds	r1, #1
 8016552:	9301      	str	r3, [sp, #4]
 8016554:	60a1      	str	r1, [r4, #8]
 8016556:	68a3      	ldr	r3, [r4, #8]
 8016558:	3b01      	subs	r3, #1
 801655a:	60a3      	str	r3, [r4, #8]
 801655c:	6923      	ldr	r3, [r4, #16]
 801655e:	3301      	adds	r3, #1
 8016560:	6123      	str	r3, [r4, #16]
 8016562:	6873      	ldr	r3, [r6, #4]
 8016564:	3b01      	subs	r3, #1
 8016566:	2b00      	cmp	r3, #0
 8016568:	6073      	str	r3, [r6, #4]
 801656a:	f340 80ac 	ble.w	80166c6 <_scanf_float+0x22e>
 801656e:	6833      	ldr	r3, [r6, #0]
 8016570:	3301      	adds	r3, #1
 8016572:	6033      	str	r3, [r6, #0]
 8016574:	e7b5      	b.n	80164e2 <_scanf_float+0x4a>
 8016576:	2b45      	cmp	r3, #69	; 0x45
 8016578:	f000 8085 	beq.w	8016686 <_scanf_float+0x1ee>
 801657c:	2b46      	cmp	r3, #70	; 0x46
 801657e:	d06a      	beq.n	8016656 <_scanf_float+0x1be>
 8016580:	2b41      	cmp	r3, #65	; 0x41
 8016582:	d1c1      	bne.n	8016508 <_scanf_float+0x70>
 8016584:	2a01      	cmp	r2, #1
 8016586:	d1bf      	bne.n	8016508 <_scanf_float+0x70>
 8016588:	2202      	movs	r2, #2
 801658a:	e046      	b.n	801661a <_scanf_float+0x182>
 801658c:	2b65      	cmp	r3, #101	; 0x65
 801658e:	d07a      	beq.n	8016686 <_scanf_float+0x1ee>
 8016590:	d818      	bhi.n	80165c4 <_scanf_float+0x12c>
 8016592:	2b54      	cmp	r3, #84	; 0x54
 8016594:	d066      	beq.n	8016664 <_scanf_float+0x1cc>
 8016596:	d811      	bhi.n	80165bc <_scanf_float+0x124>
 8016598:	2b4e      	cmp	r3, #78	; 0x4e
 801659a:	d1b5      	bne.n	8016508 <_scanf_float+0x70>
 801659c:	2a00      	cmp	r2, #0
 801659e:	d146      	bne.n	801662e <_scanf_float+0x196>
 80165a0:	f1b9 0f00 	cmp.w	r9, #0
 80165a4:	d145      	bne.n	8016632 <_scanf_float+0x19a>
 80165a6:	6821      	ldr	r1, [r4, #0]
 80165a8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80165ac:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80165b0:	d13f      	bne.n	8016632 <_scanf_float+0x19a>
 80165b2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80165b6:	6021      	str	r1, [r4, #0]
 80165b8:	2201      	movs	r2, #1
 80165ba:	e02e      	b.n	801661a <_scanf_float+0x182>
 80165bc:	2b59      	cmp	r3, #89	; 0x59
 80165be:	d01e      	beq.n	80165fe <_scanf_float+0x166>
 80165c0:	2b61      	cmp	r3, #97	; 0x61
 80165c2:	e7de      	b.n	8016582 <_scanf_float+0xea>
 80165c4:	2b6e      	cmp	r3, #110	; 0x6e
 80165c6:	d0e9      	beq.n	801659c <_scanf_float+0x104>
 80165c8:	d815      	bhi.n	80165f6 <_scanf_float+0x15e>
 80165ca:	2b66      	cmp	r3, #102	; 0x66
 80165cc:	d043      	beq.n	8016656 <_scanf_float+0x1be>
 80165ce:	2b69      	cmp	r3, #105	; 0x69
 80165d0:	d19a      	bne.n	8016508 <_scanf_float+0x70>
 80165d2:	f1bb 0f00 	cmp.w	fp, #0
 80165d6:	d138      	bne.n	801664a <_scanf_float+0x1b2>
 80165d8:	f1b9 0f00 	cmp.w	r9, #0
 80165dc:	d197      	bne.n	801650e <_scanf_float+0x76>
 80165de:	6821      	ldr	r1, [r4, #0]
 80165e0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80165e4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80165e8:	d195      	bne.n	8016516 <_scanf_float+0x7e>
 80165ea:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80165ee:	6021      	str	r1, [r4, #0]
 80165f0:	f04f 0b01 	mov.w	fp, #1
 80165f4:	e011      	b.n	801661a <_scanf_float+0x182>
 80165f6:	2b74      	cmp	r3, #116	; 0x74
 80165f8:	d034      	beq.n	8016664 <_scanf_float+0x1cc>
 80165fa:	2b79      	cmp	r3, #121	; 0x79
 80165fc:	d184      	bne.n	8016508 <_scanf_float+0x70>
 80165fe:	f1bb 0f07 	cmp.w	fp, #7
 8016602:	d181      	bne.n	8016508 <_scanf_float+0x70>
 8016604:	f04f 0b08 	mov.w	fp, #8
 8016608:	e007      	b.n	801661a <_scanf_float+0x182>
 801660a:	eb12 0f0b 	cmn.w	r2, fp
 801660e:	f47f af7b 	bne.w	8016508 <_scanf_float+0x70>
 8016612:	6821      	ldr	r1, [r4, #0]
 8016614:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016618:	6021      	str	r1, [r4, #0]
 801661a:	702b      	strb	r3, [r5, #0]
 801661c:	3501      	adds	r5, #1
 801661e:	e79a      	b.n	8016556 <_scanf_float+0xbe>
 8016620:	6821      	ldr	r1, [r4, #0]
 8016622:	0608      	lsls	r0, r1, #24
 8016624:	f57f af70 	bpl.w	8016508 <_scanf_float+0x70>
 8016628:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801662c:	e7f4      	b.n	8016618 <_scanf_float+0x180>
 801662e:	2a02      	cmp	r2, #2
 8016630:	d047      	beq.n	80166c2 <_scanf_float+0x22a>
 8016632:	f1bb 0f01 	cmp.w	fp, #1
 8016636:	d003      	beq.n	8016640 <_scanf_float+0x1a8>
 8016638:	f1bb 0f04 	cmp.w	fp, #4
 801663c:	f47f af64 	bne.w	8016508 <_scanf_float+0x70>
 8016640:	f10b 0b01 	add.w	fp, fp, #1
 8016644:	fa5f fb8b 	uxtb.w	fp, fp
 8016648:	e7e7      	b.n	801661a <_scanf_float+0x182>
 801664a:	f1bb 0f03 	cmp.w	fp, #3
 801664e:	d0f7      	beq.n	8016640 <_scanf_float+0x1a8>
 8016650:	f1bb 0f05 	cmp.w	fp, #5
 8016654:	e7f2      	b.n	801663c <_scanf_float+0x1a4>
 8016656:	f1bb 0f02 	cmp.w	fp, #2
 801665a:	f47f af55 	bne.w	8016508 <_scanf_float+0x70>
 801665e:	f04f 0b03 	mov.w	fp, #3
 8016662:	e7da      	b.n	801661a <_scanf_float+0x182>
 8016664:	f1bb 0f06 	cmp.w	fp, #6
 8016668:	f47f af4e 	bne.w	8016508 <_scanf_float+0x70>
 801666c:	f04f 0b07 	mov.w	fp, #7
 8016670:	e7d3      	b.n	801661a <_scanf_float+0x182>
 8016672:	6821      	ldr	r1, [r4, #0]
 8016674:	0588      	lsls	r0, r1, #22
 8016676:	f57f af47 	bpl.w	8016508 <_scanf_float+0x70>
 801667a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801667e:	6021      	str	r1, [r4, #0]
 8016680:	f8cd 9008 	str.w	r9, [sp, #8]
 8016684:	e7c9      	b.n	801661a <_scanf_float+0x182>
 8016686:	6821      	ldr	r1, [r4, #0]
 8016688:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 801668c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016690:	d006      	beq.n	80166a0 <_scanf_float+0x208>
 8016692:	0548      	lsls	r0, r1, #21
 8016694:	f57f af38 	bpl.w	8016508 <_scanf_float+0x70>
 8016698:	f1b9 0f00 	cmp.w	r9, #0
 801669c:	f43f af3b 	beq.w	8016516 <_scanf_float+0x7e>
 80166a0:	0588      	lsls	r0, r1, #22
 80166a2:	bf58      	it	pl
 80166a4:	9802      	ldrpl	r0, [sp, #8]
 80166a6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80166aa:	bf58      	it	pl
 80166ac:	eba9 0000 	subpl.w	r0, r9, r0
 80166b0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80166b4:	bf58      	it	pl
 80166b6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80166ba:	6021      	str	r1, [r4, #0]
 80166bc:	f04f 0900 	mov.w	r9, #0
 80166c0:	e7ab      	b.n	801661a <_scanf_float+0x182>
 80166c2:	2203      	movs	r2, #3
 80166c4:	e7a9      	b.n	801661a <_scanf_float+0x182>
 80166c6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80166ca:	9205      	str	r2, [sp, #20]
 80166cc:	4631      	mov	r1, r6
 80166ce:	4638      	mov	r0, r7
 80166d0:	4798      	blx	r3
 80166d2:	9a05      	ldr	r2, [sp, #20]
 80166d4:	2800      	cmp	r0, #0
 80166d6:	f43f af04 	beq.w	80164e2 <_scanf_float+0x4a>
 80166da:	e715      	b.n	8016508 <_scanf_float+0x70>
 80166dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80166e0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80166e4:	4632      	mov	r2, r6
 80166e6:	4638      	mov	r0, r7
 80166e8:	4798      	blx	r3
 80166ea:	6923      	ldr	r3, [r4, #16]
 80166ec:	3b01      	subs	r3, #1
 80166ee:	6123      	str	r3, [r4, #16]
 80166f0:	e715      	b.n	801651e <_scanf_float+0x86>
 80166f2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80166f6:	2b06      	cmp	r3, #6
 80166f8:	d80a      	bhi.n	8016710 <_scanf_float+0x278>
 80166fa:	f1bb 0f02 	cmp.w	fp, #2
 80166fe:	d968      	bls.n	80167d2 <_scanf_float+0x33a>
 8016700:	f1ab 0b03 	sub.w	fp, fp, #3
 8016704:	fa5f fb8b 	uxtb.w	fp, fp
 8016708:	eba5 0b0b 	sub.w	fp, r5, fp
 801670c:	455d      	cmp	r5, fp
 801670e:	d14b      	bne.n	80167a8 <_scanf_float+0x310>
 8016710:	6823      	ldr	r3, [r4, #0]
 8016712:	05da      	lsls	r2, r3, #23
 8016714:	d51f      	bpl.n	8016756 <_scanf_float+0x2be>
 8016716:	055b      	lsls	r3, r3, #21
 8016718:	d468      	bmi.n	80167ec <_scanf_float+0x354>
 801671a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801671e:	6923      	ldr	r3, [r4, #16]
 8016720:	2965      	cmp	r1, #101	; 0x65
 8016722:	f103 33ff 	add.w	r3, r3, #4294967295
 8016726:	f105 3bff 	add.w	fp, r5, #4294967295
 801672a:	6123      	str	r3, [r4, #16]
 801672c:	d00d      	beq.n	801674a <_scanf_float+0x2b2>
 801672e:	2945      	cmp	r1, #69	; 0x45
 8016730:	d00b      	beq.n	801674a <_scanf_float+0x2b2>
 8016732:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016736:	4632      	mov	r2, r6
 8016738:	4638      	mov	r0, r7
 801673a:	4798      	blx	r3
 801673c:	6923      	ldr	r3, [r4, #16]
 801673e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8016742:	3b01      	subs	r3, #1
 8016744:	f1a5 0b02 	sub.w	fp, r5, #2
 8016748:	6123      	str	r3, [r4, #16]
 801674a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801674e:	4632      	mov	r2, r6
 8016750:	4638      	mov	r0, r7
 8016752:	4798      	blx	r3
 8016754:	465d      	mov	r5, fp
 8016756:	6826      	ldr	r6, [r4, #0]
 8016758:	f016 0610 	ands.w	r6, r6, #16
 801675c:	d17a      	bne.n	8016854 <_scanf_float+0x3bc>
 801675e:	702e      	strb	r6, [r5, #0]
 8016760:	6823      	ldr	r3, [r4, #0]
 8016762:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801676a:	d142      	bne.n	80167f2 <_scanf_float+0x35a>
 801676c:	9b02      	ldr	r3, [sp, #8]
 801676e:	eba9 0303 	sub.w	r3, r9, r3
 8016772:	425a      	negs	r2, r3
 8016774:	2b00      	cmp	r3, #0
 8016776:	d149      	bne.n	801680c <_scanf_float+0x374>
 8016778:	2200      	movs	r2, #0
 801677a:	4641      	mov	r1, r8
 801677c:	4638      	mov	r0, r7
 801677e:	f000 ff0b 	bl	8017598 <_strtod_r>
 8016782:	6825      	ldr	r5, [r4, #0]
 8016784:	f8da 3000 	ldr.w	r3, [sl]
 8016788:	f015 0f02 	tst.w	r5, #2
 801678c:	f103 0204 	add.w	r2, r3, #4
 8016790:	ec59 8b10 	vmov	r8, r9, d0
 8016794:	f8ca 2000 	str.w	r2, [sl]
 8016798:	d043      	beq.n	8016822 <_scanf_float+0x38a>
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	e9c3 8900 	strd	r8, r9, [r3]
 80167a0:	68e3      	ldr	r3, [r4, #12]
 80167a2:	3301      	adds	r3, #1
 80167a4:	60e3      	str	r3, [r4, #12]
 80167a6:	e6be      	b.n	8016526 <_scanf_float+0x8e>
 80167a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80167ac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80167b0:	4632      	mov	r2, r6
 80167b2:	4638      	mov	r0, r7
 80167b4:	4798      	blx	r3
 80167b6:	6923      	ldr	r3, [r4, #16]
 80167b8:	3b01      	subs	r3, #1
 80167ba:	6123      	str	r3, [r4, #16]
 80167bc:	e7a6      	b.n	801670c <_scanf_float+0x274>
 80167be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80167c2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80167c6:	4632      	mov	r2, r6
 80167c8:	4638      	mov	r0, r7
 80167ca:	4798      	blx	r3
 80167cc:	6923      	ldr	r3, [r4, #16]
 80167ce:	3b01      	subs	r3, #1
 80167d0:	6123      	str	r3, [r4, #16]
 80167d2:	4545      	cmp	r5, r8
 80167d4:	d8f3      	bhi.n	80167be <_scanf_float+0x326>
 80167d6:	e6a5      	b.n	8016524 <_scanf_float+0x8c>
 80167d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80167dc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80167e0:	4632      	mov	r2, r6
 80167e2:	4638      	mov	r0, r7
 80167e4:	4798      	blx	r3
 80167e6:	6923      	ldr	r3, [r4, #16]
 80167e8:	3b01      	subs	r3, #1
 80167ea:	6123      	str	r3, [r4, #16]
 80167ec:	4545      	cmp	r5, r8
 80167ee:	d8f3      	bhi.n	80167d8 <_scanf_float+0x340>
 80167f0:	e698      	b.n	8016524 <_scanf_float+0x8c>
 80167f2:	9b03      	ldr	r3, [sp, #12]
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d0bf      	beq.n	8016778 <_scanf_float+0x2e0>
 80167f8:	9904      	ldr	r1, [sp, #16]
 80167fa:	230a      	movs	r3, #10
 80167fc:	4632      	mov	r2, r6
 80167fe:	3101      	adds	r1, #1
 8016800:	4638      	mov	r0, r7
 8016802:	f000 ff55 	bl	80176b0 <_strtol_r>
 8016806:	9b03      	ldr	r3, [sp, #12]
 8016808:	9d04      	ldr	r5, [sp, #16]
 801680a:	1ac2      	subs	r2, r0, r3
 801680c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016810:	429d      	cmp	r5, r3
 8016812:	bf28      	it	cs
 8016814:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016818:	490f      	ldr	r1, [pc, #60]	; (8016858 <_scanf_float+0x3c0>)
 801681a:	4628      	mov	r0, r5
 801681c:	f000 f858 	bl	80168d0 <siprintf>
 8016820:	e7aa      	b.n	8016778 <_scanf_float+0x2e0>
 8016822:	f015 0504 	ands.w	r5, r5, #4
 8016826:	d1b8      	bne.n	801679a <_scanf_float+0x302>
 8016828:	681f      	ldr	r7, [r3, #0]
 801682a:	ee10 2a10 	vmov	r2, s0
 801682e:	464b      	mov	r3, r9
 8016830:	ee10 0a10 	vmov	r0, s0
 8016834:	4649      	mov	r1, r9
 8016836:	f7ea f991 	bl	8000b5c <__aeabi_dcmpun>
 801683a:	b128      	cbz	r0, 8016848 <_scanf_float+0x3b0>
 801683c:	4628      	mov	r0, r5
 801683e:	f000 f80d 	bl	801685c <nanf>
 8016842:	ed87 0a00 	vstr	s0, [r7]
 8016846:	e7ab      	b.n	80167a0 <_scanf_float+0x308>
 8016848:	4640      	mov	r0, r8
 801684a:	4649      	mov	r1, r9
 801684c:	f7ea f9e4 	bl	8000c18 <__aeabi_d2f>
 8016850:	6038      	str	r0, [r7, #0]
 8016852:	e7a5      	b.n	80167a0 <_scanf_float+0x308>
 8016854:	2600      	movs	r6, #0
 8016856:	e666      	b.n	8016526 <_scanf_float+0x8e>
 8016858:	0801a69a 	.word	0x0801a69a

0801685c <nanf>:
 801685c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016864 <nanf+0x8>
 8016860:	4770      	bx	lr
 8016862:	bf00      	nop
 8016864:	7fc00000 	.word	0x7fc00000

08016868 <sniprintf>:
 8016868:	b40c      	push	{r2, r3}
 801686a:	b530      	push	{r4, r5, lr}
 801686c:	4b17      	ldr	r3, [pc, #92]	; (80168cc <sniprintf+0x64>)
 801686e:	1e0c      	subs	r4, r1, #0
 8016870:	b09d      	sub	sp, #116	; 0x74
 8016872:	681d      	ldr	r5, [r3, #0]
 8016874:	da08      	bge.n	8016888 <sniprintf+0x20>
 8016876:	238b      	movs	r3, #139	; 0x8b
 8016878:	602b      	str	r3, [r5, #0]
 801687a:	f04f 30ff 	mov.w	r0, #4294967295
 801687e:	b01d      	add	sp, #116	; 0x74
 8016880:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016884:	b002      	add	sp, #8
 8016886:	4770      	bx	lr
 8016888:	f44f 7302 	mov.w	r3, #520	; 0x208
 801688c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016890:	bf14      	ite	ne
 8016892:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016896:	4623      	moveq	r3, r4
 8016898:	9304      	str	r3, [sp, #16]
 801689a:	9307      	str	r3, [sp, #28]
 801689c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80168a0:	9002      	str	r0, [sp, #8]
 80168a2:	9006      	str	r0, [sp, #24]
 80168a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80168a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80168aa:	ab21      	add	r3, sp, #132	; 0x84
 80168ac:	a902      	add	r1, sp, #8
 80168ae:	4628      	mov	r0, r5
 80168b0:	9301      	str	r3, [sp, #4]
 80168b2:	f002 fdf1 	bl	8019498 <_svfiprintf_r>
 80168b6:	1c43      	adds	r3, r0, #1
 80168b8:	bfbc      	itt	lt
 80168ba:	238b      	movlt	r3, #139	; 0x8b
 80168bc:	602b      	strlt	r3, [r5, #0]
 80168be:	2c00      	cmp	r4, #0
 80168c0:	d0dd      	beq.n	801687e <sniprintf+0x16>
 80168c2:	9b02      	ldr	r3, [sp, #8]
 80168c4:	2200      	movs	r2, #0
 80168c6:	701a      	strb	r2, [r3, #0]
 80168c8:	e7d9      	b.n	801687e <sniprintf+0x16>
 80168ca:	bf00      	nop
 80168cc:	2000000c 	.word	0x2000000c

080168d0 <siprintf>:
 80168d0:	b40e      	push	{r1, r2, r3}
 80168d2:	b500      	push	{lr}
 80168d4:	b09c      	sub	sp, #112	; 0x70
 80168d6:	ab1d      	add	r3, sp, #116	; 0x74
 80168d8:	9002      	str	r0, [sp, #8]
 80168da:	9006      	str	r0, [sp, #24]
 80168dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80168e0:	4809      	ldr	r0, [pc, #36]	; (8016908 <siprintf+0x38>)
 80168e2:	9107      	str	r1, [sp, #28]
 80168e4:	9104      	str	r1, [sp, #16]
 80168e6:	4909      	ldr	r1, [pc, #36]	; (801690c <siprintf+0x3c>)
 80168e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80168ec:	9105      	str	r1, [sp, #20]
 80168ee:	6800      	ldr	r0, [r0, #0]
 80168f0:	9301      	str	r3, [sp, #4]
 80168f2:	a902      	add	r1, sp, #8
 80168f4:	f002 fdd0 	bl	8019498 <_svfiprintf_r>
 80168f8:	9b02      	ldr	r3, [sp, #8]
 80168fa:	2200      	movs	r2, #0
 80168fc:	701a      	strb	r2, [r3, #0]
 80168fe:	b01c      	add	sp, #112	; 0x70
 8016900:	f85d eb04 	ldr.w	lr, [sp], #4
 8016904:	b003      	add	sp, #12
 8016906:	4770      	bx	lr
 8016908:	2000000c 	.word	0x2000000c
 801690c:	ffff0208 	.word	0xffff0208

08016910 <siscanf>:
 8016910:	b40e      	push	{r1, r2, r3}
 8016912:	b530      	push	{r4, r5, lr}
 8016914:	b09c      	sub	sp, #112	; 0x70
 8016916:	ac1f      	add	r4, sp, #124	; 0x7c
 8016918:	f44f 7201 	mov.w	r2, #516	; 0x204
 801691c:	f854 5b04 	ldr.w	r5, [r4], #4
 8016920:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016924:	9002      	str	r0, [sp, #8]
 8016926:	9006      	str	r0, [sp, #24]
 8016928:	f7e9 fc6a 	bl	8000200 <strlen>
 801692c:	4b0b      	ldr	r3, [pc, #44]	; (801695c <siscanf+0x4c>)
 801692e:	9003      	str	r0, [sp, #12]
 8016930:	9007      	str	r0, [sp, #28]
 8016932:	930b      	str	r3, [sp, #44]	; 0x2c
 8016934:	480a      	ldr	r0, [pc, #40]	; (8016960 <siscanf+0x50>)
 8016936:	9401      	str	r4, [sp, #4]
 8016938:	2300      	movs	r3, #0
 801693a:	930f      	str	r3, [sp, #60]	; 0x3c
 801693c:	9314      	str	r3, [sp, #80]	; 0x50
 801693e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016942:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016946:	462a      	mov	r2, r5
 8016948:	4623      	mov	r3, r4
 801694a:	a902      	add	r1, sp, #8
 801694c:	6800      	ldr	r0, [r0, #0]
 801694e:	f002 fef5 	bl	801973c <__ssvfiscanf_r>
 8016952:	b01c      	add	sp, #112	; 0x70
 8016954:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016958:	b003      	add	sp, #12
 801695a:	4770      	bx	lr
 801695c:	08016965 	.word	0x08016965
 8016960:	2000000c 	.word	0x2000000c

08016964 <__seofread>:
 8016964:	2000      	movs	r0, #0
 8016966:	4770      	bx	lr

08016968 <strcpy>:
 8016968:	4603      	mov	r3, r0
 801696a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801696e:	f803 2b01 	strb.w	r2, [r3], #1
 8016972:	2a00      	cmp	r2, #0
 8016974:	d1f9      	bne.n	801696a <strcpy+0x2>
 8016976:	4770      	bx	lr

08016978 <sulp>:
 8016978:	b570      	push	{r4, r5, r6, lr}
 801697a:	4604      	mov	r4, r0
 801697c:	460d      	mov	r5, r1
 801697e:	ec45 4b10 	vmov	d0, r4, r5
 8016982:	4616      	mov	r6, r2
 8016984:	f002 fb44 	bl	8019010 <__ulp>
 8016988:	ec51 0b10 	vmov	r0, r1, d0
 801698c:	b17e      	cbz	r6, 80169ae <sulp+0x36>
 801698e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016992:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016996:	2b00      	cmp	r3, #0
 8016998:	dd09      	ble.n	80169ae <sulp+0x36>
 801699a:	051b      	lsls	r3, r3, #20
 801699c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80169a0:	2400      	movs	r4, #0
 80169a2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80169a6:	4622      	mov	r2, r4
 80169a8:	462b      	mov	r3, r5
 80169aa:	f7e9 fe3d 	bl	8000628 <__aeabi_dmul>
 80169ae:	bd70      	pop	{r4, r5, r6, pc}

080169b0 <_strtod_l>:
 80169b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169b4:	461f      	mov	r7, r3
 80169b6:	b0a1      	sub	sp, #132	; 0x84
 80169b8:	2300      	movs	r3, #0
 80169ba:	4681      	mov	r9, r0
 80169bc:	4638      	mov	r0, r7
 80169be:	460e      	mov	r6, r1
 80169c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80169c2:	931c      	str	r3, [sp, #112]	; 0x70
 80169c4:	f002 f824 	bl	8018a10 <__localeconv_l>
 80169c8:	4680      	mov	r8, r0
 80169ca:	6800      	ldr	r0, [r0, #0]
 80169cc:	f7e9 fc18 	bl	8000200 <strlen>
 80169d0:	f04f 0a00 	mov.w	sl, #0
 80169d4:	4604      	mov	r4, r0
 80169d6:	f04f 0b00 	mov.w	fp, #0
 80169da:	961b      	str	r6, [sp, #108]	; 0x6c
 80169dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169de:	781a      	ldrb	r2, [r3, #0]
 80169e0:	2a0d      	cmp	r2, #13
 80169e2:	d832      	bhi.n	8016a4a <_strtod_l+0x9a>
 80169e4:	2a09      	cmp	r2, #9
 80169e6:	d236      	bcs.n	8016a56 <_strtod_l+0xa6>
 80169e8:	2a00      	cmp	r2, #0
 80169ea:	d03e      	beq.n	8016a6a <_strtod_l+0xba>
 80169ec:	2300      	movs	r3, #0
 80169ee:	930d      	str	r3, [sp, #52]	; 0x34
 80169f0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80169f2:	782b      	ldrb	r3, [r5, #0]
 80169f4:	2b30      	cmp	r3, #48	; 0x30
 80169f6:	f040 80ac 	bne.w	8016b52 <_strtod_l+0x1a2>
 80169fa:	786b      	ldrb	r3, [r5, #1]
 80169fc:	2b58      	cmp	r3, #88	; 0x58
 80169fe:	d001      	beq.n	8016a04 <_strtod_l+0x54>
 8016a00:	2b78      	cmp	r3, #120	; 0x78
 8016a02:	d167      	bne.n	8016ad4 <_strtod_l+0x124>
 8016a04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016a06:	9301      	str	r3, [sp, #4]
 8016a08:	ab1c      	add	r3, sp, #112	; 0x70
 8016a0a:	9300      	str	r3, [sp, #0]
 8016a0c:	9702      	str	r7, [sp, #8]
 8016a0e:	ab1d      	add	r3, sp, #116	; 0x74
 8016a10:	4a88      	ldr	r2, [pc, #544]	; (8016c34 <_strtod_l+0x284>)
 8016a12:	a91b      	add	r1, sp, #108	; 0x6c
 8016a14:	4648      	mov	r0, r9
 8016a16:	f001 fd12 	bl	801843e <__gethex>
 8016a1a:	f010 0407 	ands.w	r4, r0, #7
 8016a1e:	4606      	mov	r6, r0
 8016a20:	d005      	beq.n	8016a2e <_strtod_l+0x7e>
 8016a22:	2c06      	cmp	r4, #6
 8016a24:	d12b      	bne.n	8016a7e <_strtod_l+0xce>
 8016a26:	3501      	adds	r5, #1
 8016a28:	2300      	movs	r3, #0
 8016a2a:	951b      	str	r5, [sp, #108]	; 0x6c
 8016a2c:	930d      	str	r3, [sp, #52]	; 0x34
 8016a2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	f040 859a 	bne.w	801756a <_strtod_l+0xbba>
 8016a36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016a38:	b1e3      	cbz	r3, 8016a74 <_strtod_l+0xc4>
 8016a3a:	4652      	mov	r2, sl
 8016a3c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016a40:	ec43 2b10 	vmov	d0, r2, r3
 8016a44:	b021      	add	sp, #132	; 0x84
 8016a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a4a:	2a2b      	cmp	r2, #43	; 0x2b
 8016a4c:	d015      	beq.n	8016a7a <_strtod_l+0xca>
 8016a4e:	2a2d      	cmp	r2, #45	; 0x2d
 8016a50:	d004      	beq.n	8016a5c <_strtod_l+0xac>
 8016a52:	2a20      	cmp	r2, #32
 8016a54:	d1ca      	bne.n	80169ec <_strtod_l+0x3c>
 8016a56:	3301      	adds	r3, #1
 8016a58:	931b      	str	r3, [sp, #108]	; 0x6c
 8016a5a:	e7bf      	b.n	80169dc <_strtod_l+0x2c>
 8016a5c:	2201      	movs	r2, #1
 8016a5e:	920d      	str	r2, [sp, #52]	; 0x34
 8016a60:	1c5a      	adds	r2, r3, #1
 8016a62:	921b      	str	r2, [sp, #108]	; 0x6c
 8016a64:	785b      	ldrb	r3, [r3, #1]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d1c2      	bne.n	80169f0 <_strtod_l+0x40>
 8016a6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016a6c:	961b      	str	r6, [sp, #108]	; 0x6c
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	f040 8579 	bne.w	8017566 <_strtod_l+0xbb6>
 8016a74:	4652      	mov	r2, sl
 8016a76:	465b      	mov	r3, fp
 8016a78:	e7e2      	b.n	8016a40 <_strtod_l+0x90>
 8016a7a:	2200      	movs	r2, #0
 8016a7c:	e7ef      	b.n	8016a5e <_strtod_l+0xae>
 8016a7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016a80:	b13a      	cbz	r2, 8016a92 <_strtod_l+0xe2>
 8016a82:	2135      	movs	r1, #53	; 0x35
 8016a84:	a81e      	add	r0, sp, #120	; 0x78
 8016a86:	f002 fbbb 	bl	8019200 <__copybits>
 8016a8a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016a8c:	4648      	mov	r0, r9
 8016a8e:	f002 f828 	bl	8018ae2 <_Bfree>
 8016a92:	3c01      	subs	r4, #1
 8016a94:	2c04      	cmp	r4, #4
 8016a96:	d806      	bhi.n	8016aa6 <_strtod_l+0xf6>
 8016a98:	e8df f004 	tbb	[pc, r4]
 8016a9c:	1714030a 	.word	0x1714030a
 8016aa0:	0a          	.byte	0x0a
 8016aa1:	00          	.byte	0x00
 8016aa2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8016aa6:	0730      	lsls	r0, r6, #28
 8016aa8:	d5c1      	bpl.n	8016a2e <_strtod_l+0x7e>
 8016aaa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016aae:	e7be      	b.n	8016a2e <_strtod_l+0x7e>
 8016ab0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016ab4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016ab6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016aba:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016abe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016ac2:	e7f0      	b.n	8016aa6 <_strtod_l+0xf6>
 8016ac4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016c38 <_strtod_l+0x288>
 8016ac8:	e7ed      	b.n	8016aa6 <_strtod_l+0xf6>
 8016aca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016ace:	f04f 3aff 	mov.w	sl, #4294967295
 8016ad2:	e7e8      	b.n	8016aa6 <_strtod_l+0xf6>
 8016ad4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ad6:	1c5a      	adds	r2, r3, #1
 8016ad8:	921b      	str	r2, [sp, #108]	; 0x6c
 8016ada:	785b      	ldrb	r3, [r3, #1]
 8016adc:	2b30      	cmp	r3, #48	; 0x30
 8016ade:	d0f9      	beq.n	8016ad4 <_strtod_l+0x124>
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d0a4      	beq.n	8016a2e <_strtod_l+0x7e>
 8016ae4:	2301      	movs	r3, #1
 8016ae6:	2500      	movs	r5, #0
 8016ae8:	9306      	str	r3, [sp, #24]
 8016aea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016aec:	9308      	str	r3, [sp, #32]
 8016aee:	9507      	str	r5, [sp, #28]
 8016af0:	9505      	str	r5, [sp, #20]
 8016af2:	220a      	movs	r2, #10
 8016af4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016af6:	7807      	ldrb	r7, [r0, #0]
 8016af8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016afc:	b2d9      	uxtb	r1, r3
 8016afe:	2909      	cmp	r1, #9
 8016b00:	d929      	bls.n	8016b56 <_strtod_l+0x1a6>
 8016b02:	4622      	mov	r2, r4
 8016b04:	f8d8 1000 	ldr.w	r1, [r8]
 8016b08:	f003 f902 	bl	8019d10 <strncmp>
 8016b0c:	2800      	cmp	r0, #0
 8016b0e:	d031      	beq.n	8016b74 <_strtod_l+0x1c4>
 8016b10:	2000      	movs	r0, #0
 8016b12:	9c05      	ldr	r4, [sp, #20]
 8016b14:	9004      	str	r0, [sp, #16]
 8016b16:	463b      	mov	r3, r7
 8016b18:	4602      	mov	r2, r0
 8016b1a:	2b65      	cmp	r3, #101	; 0x65
 8016b1c:	d001      	beq.n	8016b22 <_strtod_l+0x172>
 8016b1e:	2b45      	cmp	r3, #69	; 0x45
 8016b20:	d114      	bne.n	8016b4c <_strtod_l+0x19c>
 8016b22:	b924      	cbnz	r4, 8016b2e <_strtod_l+0x17e>
 8016b24:	b910      	cbnz	r0, 8016b2c <_strtod_l+0x17c>
 8016b26:	9b06      	ldr	r3, [sp, #24]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d09e      	beq.n	8016a6a <_strtod_l+0xba>
 8016b2c:	2400      	movs	r4, #0
 8016b2e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016b30:	1c73      	adds	r3, r6, #1
 8016b32:	931b      	str	r3, [sp, #108]	; 0x6c
 8016b34:	7873      	ldrb	r3, [r6, #1]
 8016b36:	2b2b      	cmp	r3, #43	; 0x2b
 8016b38:	d078      	beq.n	8016c2c <_strtod_l+0x27c>
 8016b3a:	2b2d      	cmp	r3, #45	; 0x2d
 8016b3c:	d070      	beq.n	8016c20 <_strtod_l+0x270>
 8016b3e:	f04f 0c00 	mov.w	ip, #0
 8016b42:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8016b46:	2f09      	cmp	r7, #9
 8016b48:	d97c      	bls.n	8016c44 <_strtod_l+0x294>
 8016b4a:	961b      	str	r6, [sp, #108]	; 0x6c
 8016b4c:	f04f 0e00 	mov.w	lr, #0
 8016b50:	e09a      	b.n	8016c88 <_strtod_l+0x2d8>
 8016b52:	2300      	movs	r3, #0
 8016b54:	e7c7      	b.n	8016ae6 <_strtod_l+0x136>
 8016b56:	9905      	ldr	r1, [sp, #20]
 8016b58:	2908      	cmp	r1, #8
 8016b5a:	bfdd      	ittte	le
 8016b5c:	9907      	ldrle	r1, [sp, #28]
 8016b5e:	fb02 3301 	mlale	r3, r2, r1, r3
 8016b62:	9307      	strle	r3, [sp, #28]
 8016b64:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016b68:	9b05      	ldr	r3, [sp, #20]
 8016b6a:	3001      	adds	r0, #1
 8016b6c:	3301      	adds	r3, #1
 8016b6e:	9305      	str	r3, [sp, #20]
 8016b70:	901b      	str	r0, [sp, #108]	; 0x6c
 8016b72:	e7bf      	b.n	8016af4 <_strtod_l+0x144>
 8016b74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b76:	191a      	adds	r2, r3, r4
 8016b78:	921b      	str	r2, [sp, #108]	; 0x6c
 8016b7a:	9a05      	ldr	r2, [sp, #20]
 8016b7c:	5d1b      	ldrb	r3, [r3, r4]
 8016b7e:	2a00      	cmp	r2, #0
 8016b80:	d037      	beq.n	8016bf2 <_strtod_l+0x242>
 8016b82:	9c05      	ldr	r4, [sp, #20]
 8016b84:	4602      	mov	r2, r0
 8016b86:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016b8a:	2909      	cmp	r1, #9
 8016b8c:	d913      	bls.n	8016bb6 <_strtod_l+0x206>
 8016b8e:	2101      	movs	r1, #1
 8016b90:	9104      	str	r1, [sp, #16]
 8016b92:	e7c2      	b.n	8016b1a <_strtod_l+0x16a>
 8016b94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b96:	1c5a      	adds	r2, r3, #1
 8016b98:	921b      	str	r2, [sp, #108]	; 0x6c
 8016b9a:	785b      	ldrb	r3, [r3, #1]
 8016b9c:	3001      	adds	r0, #1
 8016b9e:	2b30      	cmp	r3, #48	; 0x30
 8016ba0:	d0f8      	beq.n	8016b94 <_strtod_l+0x1e4>
 8016ba2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016ba6:	2a08      	cmp	r2, #8
 8016ba8:	f200 84e4 	bhi.w	8017574 <_strtod_l+0xbc4>
 8016bac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016bae:	9208      	str	r2, [sp, #32]
 8016bb0:	4602      	mov	r2, r0
 8016bb2:	2000      	movs	r0, #0
 8016bb4:	4604      	mov	r4, r0
 8016bb6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016bba:	f100 0101 	add.w	r1, r0, #1
 8016bbe:	d012      	beq.n	8016be6 <_strtod_l+0x236>
 8016bc0:	440a      	add	r2, r1
 8016bc2:	eb00 0c04 	add.w	ip, r0, r4
 8016bc6:	4621      	mov	r1, r4
 8016bc8:	270a      	movs	r7, #10
 8016bca:	458c      	cmp	ip, r1
 8016bcc:	d113      	bne.n	8016bf6 <_strtod_l+0x246>
 8016bce:	1821      	adds	r1, r4, r0
 8016bd0:	2908      	cmp	r1, #8
 8016bd2:	f104 0401 	add.w	r4, r4, #1
 8016bd6:	4404      	add	r4, r0
 8016bd8:	dc19      	bgt.n	8016c0e <_strtod_l+0x25e>
 8016bda:	9b07      	ldr	r3, [sp, #28]
 8016bdc:	210a      	movs	r1, #10
 8016bde:	fb01 e303 	mla	r3, r1, r3, lr
 8016be2:	9307      	str	r3, [sp, #28]
 8016be4:	2100      	movs	r1, #0
 8016be6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016be8:	1c58      	adds	r0, r3, #1
 8016bea:	901b      	str	r0, [sp, #108]	; 0x6c
 8016bec:	785b      	ldrb	r3, [r3, #1]
 8016bee:	4608      	mov	r0, r1
 8016bf0:	e7c9      	b.n	8016b86 <_strtod_l+0x1d6>
 8016bf2:	9805      	ldr	r0, [sp, #20]
 8016bf4:	e7d3      	b.n	8016b9e <_strtod_l+0x1ee>
 8016bf6:	2908      	cmp	r1, #8
 8016bf8:	f101 0101 	add.w	r1, r1, #1
 8016bfc:	dc03      	bgt.n	8016c06 <_strtod_l+0x256>
 8016bfe:	9b07      	ldr	r3, [sp, #28]
 8016c00:	437b      	muls	r3, r7
 8016c02:	9307      	str	r3, [sp, #28]
 8016c04:	e7e1      	b.n	8016bca <_strtod_l+0x21a>
 8016c06:	2910      	cmp	r1, #16
 8016c08:	bfd8      	it	le
 8016c0a:	437d      	mulle	r5, r7
 8016c0c:	e7dd      	b.n	8016bca <_strtod_l+0x21a>
 8016c0e:	2c10      	cmp	r4, #16
 8016c10:	bfdc      	itt	le
 8016c12:	210a      	movle	r1, #10
 8016c14:	fb01 e505 	mlale	r5, r1, r5, lr
 8016c18:	e7e4      	b.n	8016be4 <_strtod_l+0x234>
 8016c1a:	2301      	movs	r3, #1
 8016c1c:	9304      	str	r3, [sp, #16]
 8016c1e:	e781      	b.n	8016b24 <_strtod_l+0x174>
 8016c20:	f04f 0c01 	mov.w	ip, #1
 8016c24:	1cb3      	adds	r3, r6, #2
 8016c26:	931b      	str	r3, [sp, #108]	; 0x6c
 8016c28:	78b3      	ldrb	r3, [r6, #2]
 8016c2a:	e78a      	b.n	8016b42 <_strtod_l+0x192>
 8016c2c:	f04f 0c00 	mov.w	ip, #0
 8016c30:	e7f8      	b.n	8016c24 <_strtod_l+0x274>
 8016c32:	bf00      	nop
 8016c34:	0801a6a0 	.word	0x0801a6a0
 8016c38:	7ff00000 	.word	0x7ff00000
 8016c3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016c3e:	1c5f      	adds	r7, r3, #1
 8016c40:	971b      	str	r7, [sp, #108]	; 0x6c
 8016c42:	785b      	ldrb	r3, [r3, #1]
 8016c44:	2b30      	cmp	r3, #48	; 0x30
 8016c46:	d0f9      	beq.n	8016c3c <_strtod_l+0x28c>
 8016c48:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016c4c:	2f08      	cmp	r7, #8
 8016c4e:	f63f af7d 	bhi.w	8016b4c <_strtod_l+0x19c>
 8016c52:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016c56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016c58:	930a      	str	r3, [sp, #40]	; 0x28
 8016c5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016c5c:	1c5f      	adds	r7, r3, #1
 8016c5e:	971b      	str	r7, [sp, #108]	; 0x6c
 8016c60:	785b      	ldrb	r3, [r3, #1]
 8016c62:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016c66:	f1b8 0f09 	cmp.w	r8, #9
 8016c6a:	d937      	bls.n	8016cdc <_strtod_l+0x32c>
 8016c6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016c6e:	1a7f      	subs	r7, r7, r1
 8016c70:	2f08      	cmp	r7, #8
 8016c72:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016c76:	dc37      	bgt.n	8016ce8 <_strtod_l+0x338>
 8016c78:	45be      	cmp	lr, r7
 8016c7a:	bfa8      	it	ge
 8016c7c:	46be      	movge	lr, r7
 8016c7e:	f1bc 0f00 	cmp.w	ip, #0
 8016c82:	d001      	beq.n	8016c88 <_strtod_l+0x2d8>
 8016c84:	f1ce 0e00 	rsb	lr, lr, #0
 8016c88:	2c00      	cmp	r4, #0
 8016c8a:	d151      	bne.n	8016d30 <_strtod_l+0x380>
 8016c8c:	2800      	cmp	r0, #0
 8016c8e:	f47f aece 	bne.w	8016a2e <_strtod_l+0x7e>
 8016c92:	9a06      	ldr	r2, [sp, #24]
 8016c94:	2a00      	cmp	r2, #0
 8016c96:	f47f aeca 	bne.w	8016a2e <_strtod_l+0x7e>
 8016c9a:	9a04      	ldr	r2, [sp, #16]
 8016c9c:	2a00      	cmp	r2, #0
 8016c9e:	f47f aee4 	bne.w	8016a6a <_strtod_l+0xba>
 8016ca2:	2b4e      	cmp	r3, #78	; 0x4e
 8016ca4:	d027      	beq.n	8016cf6 <_strtod_l+0x346>
 8016ca6:	dc21      	bgt.n	8016cec <_strtod_l+0x33c>
 8016ca8:	2b49      	cmp	r3, #73	; 0x49
 8016caa:	f47f aede 	bne.w	8016a6a <_strtod_l+0xba>
 8016cae:	49a0      	ldr	r1, [pc, #640]	; (8016f30 <_strtod_l+0x580>)
 8016cb0:	a81b      	add	r0, sp, #108	; 0x6c
 8016cb2:	f001 fdf7 	bl	80188a4 <__match>
 8016cb6:	2800      	cmp	r0, #0
 8016cb8:	f43f aed7 	beq.w	8016a6a <_strtod_l+0xba>
 8016cbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016cbe:	499d      	ldr	r1, [pc, #628]	; (8016f34 <_strtod_l+0x584>)
 8016cc0:	3b01      	subs	r3, #1
 8016cc2:	a81b      	add	r0, sp, #108	; 0x6c
 8016cc4:	931b      	str	r3, [sp, #108]	; 0x6c
 8016cc6:	f001 fded 	bl	80188a4 <__match>
 8016cca:	b910      	cbnz	r0, 8016cd2 <_strtod_l+0x322>
 8016ccc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016cce:	3301      	adds	r3, #1
 8016cd0:	931b      	str	r3, [sp, #108]	; 0x6c
 8016cd2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016f48 <_strtod_l+0x598>
 8016cd6:	f04f 0a00 	mov.w	sl, #0
 8016cda:	e6a8      	b.n	8016a2e <_strtod_l+0x7e>
 8016cdc:	210a      	movs	r1, #10
 8016cde:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016ce2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016ce6:	e7b8      	b.n	8016c5a <_strtod_l+0x2aa>
 8016ce8:	46be      	mov	lr, r7
 8016cea:	e7c8      	b.n	8016c7e <_strtod_l+0x2ce>
 8016cec:	2b69      	cmp	r3, #105	; 0x69
 8016cee:	d0de      	beq.n	8016cae <_strtod_l+0x2fe>
 8016cf0:	2b6e      	cmp	r3, #110	; 0x6e
 8016cf2:	f47f aeba 	bne.w	8016a6a <_strtod_l+0xba>
 8016cf6:	4990      	ldr	r1, [pc, #576]	; (8016f38 <_strtod_l+0x588>)
 8016cf8:	a81b      	add	r0, sp, #108	; 0x6c
 8016cfa:	f001 fdd3 	bl	80188a4 <__match>
 8016cfe:	2800      	cmp	r0, #0
 8016d00:	f43f aeb3 	beq.w	8016a6a <_strtod_l+0xba>
 8016d04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016d06:	781b      	ldrb	r3, [r3, #0]
 8016d08:	2b28      	cmp	r3, #40	; 0x28
 8016d0a:	d10e      	bne.n	8016d2a <_strtod_l+0x37a>
 8016d0c:	aa1e      	add	r2, sp, #120	; 0x78
 8016d0e:	498b      	ldr	r1, [pc, #556]	; (8016f3c <_strtod_l+0x58c>)
 8016d10:	a81b      	add	r0, sp, #108	; 0x6c
 8016d12:	f001 fddb 	bl	80188cc <__hexnan>
 8016d16:	2805      	cmp	r0, #5
 8016d18:	d107      	bne.n	8016d2a <_strtod_l+0x37a>
 8016d1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016d1c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016d20:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016d24:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016d28:	e681      	b.n	8016a2e <_strtod_l+0x7e>
 8016d2a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016f50 <_strtod_l+0x5a0>
 8016d2e:	e7d2      	b.n	8016cd6 <_strtod_l+0x326>
 8016d30:	ebae 0302 	sub.w	r3, lr, r2
 8016d34:	9306      	str	r3, [sp, #24]
 8016d36:	9b05      	ldr	r3, [sp, #20]
 8016d38:	9807      	ldr	r0, [sp, #28]
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	bf08      	it	eq
 8016d3e:	4623      	moveq	r3, r4
 8016d40:	2c10      	cmp	r4, #16
 8016d42:	9305      	str	r3, [sp, #20]
 8016d44:	46a0      	mov	r8, r4
 8016d46:	bfa8      	it	ge
 8016d48:	f04f 0810 	movge.w	r8, #16
 8016d4c:	f7e9 fbf2 	bl	8000534 <__aeabi_ui2d>
 8016d50:	2c09      	cmp	r4, #9
 8016d52:	4682      	mov	sl, r0
 8016d54:	468b      	mov	fp, r1
 8016d56:	dc13      	bgt.n	8016d80 <_strtod_l+0x3d0>
 8016d58:	9b06      	ldr	r3, [sp, #24]
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	f43f ae67 	beq.w	8016a2e <_strtod_l+0x7e>
 8016d60:	9b06      	ldr	r3, [sp, #24]
 8016d62:	dd7a      	ble.n	8016e5a <_strtod_l+0x4aa>
 8016d64:	2b16      	cmp	r3, #22
 8016d66:	dc61      	bgt.n	8016e2c <_strtod_l+0x47c>
 8016d68:	4a75      	ldr	r2, [pc, #468]	; (8016f40 <_strtod_l+0x590>)
 8016d6a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016d6e:	e9de 0100 	ldrd	r0, r1, [lr]
 8016d72:	4652      	mov	r2, sl
 8016d74:	465b      	mov	r3, fp
 8016d76:	f7e9 fc57 	bl	8000628 <__aeabi_dmul>
 8016d7a:	4682      	mov	sl, r0
 8016d7c:	468b      	mov	fp, r1
 8016d7e:	e656      	b.n	8016a2e <_strtod_l+0x7e>
 8016d80:	4b6f      	ldr	r3, [pc, #444]	; (8016f40 <_strtod_l+0x590>)
 8016d82:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016d86:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016d8a:	f7e9 fc4d 	bl	8000628 <__aeabi_dmul>
 8016d8e:	4606      	mov	r6, r0
 8016d90:	4628      	mov	r0, r5
 8016d92:	460f      	mov	r7, r1
 8016d94:	f7e9 fbce 	bl	8000534 <__aeabi_ui2d>
 8016d98:	4602      	mov	r2, r0
 8016d9a:	460b      	mov	r3, r1
 8016d9c:	4630      	mov	r0, r6
 8016d9e:	4639      	mov	r1, r7
 8016da0:	f7e9 fa8c 	bl	80002bc <__adddf3>
 8016da4:	2c0f      	cmp	r4, #15
 8016da6:	4682      	mov	sl, r0
 8016da8:	468b      	mov	fp, r1
 8016daa:	ddd5      	ble.n	8016d58 <_strtod_l+0x3a8>
 8016dac:	9b06      	ldr	r3, [sp, #24]
 8016dae:	eba4 0808 	sub.w	r8, r4, r8
 8016db2:	4498      	add	r8, r3
 8016db4:	f1b8 0f00 	cmp.w	r8, #0
 8016db8:	f340 8096 	ble.w	8016ee8 <_strtod_l+0x538>
 8016dbc:	f018 030f 	ands.w	r3, r8, #15
 8016dc0:	d00a      	beq.n	8016dd8 <_strtod_l+0x428>
 8016dc2:	495f      	ldr	r1, [pc, #380]	; (8016f40 <_strtod_l+0x590>)
 8016dc4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016dc8:	4652      	mov	r2, sl
 8016dca:	465b      	mov	r3, fp
 8016dcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016dd0:	f7e9 fc2a 	bl	8000628 <__aeabi_dmul>
 8016dd4:	4682      	mov	sl, r0
 8016dd6:	468b      	mov	fp, r1
 8016dd8:	f038 080f 	bics.w	r8, r8, #15
 8016ddc:	d073      	beq.n	8016ec6 <_strtod_l+0x516>
 8016dde:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016de2:	dd47      	ble.n	8016e74 <_strtod_l+0x4c4>
 8016de4:	2400      	movs	r4, #0
 8016de6:	46a0      	mov	r8, r4
 8016de8:	9407      	str	r4, [sp, #28]
 8016dea:	9405      	str	r4, [sp, #20]
 8016dec:	2322      	movs	r3, #34	; 0x22
 8016dee:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016f48 <_strtod_l+0x598>
 8016df2:	f8c9 3000 	str.w	r3, [r9]
 8016df6:	f04f 0a00 	mov.w	sl, #0
 8016dfa:	9b07      	ldr	r3, [sp, #28]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	f43f ae16 	beq.w	8016a2e <_strtod_l+0x7e>
 8016e02:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016e04:	4648      	mov	r0, r9
 8016e06:	f001 fe6c 	bl	8018ae2 <_Bfree>
 8016e0a:	9905      	ldr	r1, [sp, #20]
 8016e0c:	4648      	mov	r0, r9
 8016e0e:	f001 fe68 	bl	8018ae2 <_Bfree>
 8016e12:	4641      	mov	r1, r8
 8016e14:	4648      	mov	r0, r9
 8016e16:	f001 fe64 	bl	8018ae2 <_Bfree>
 8016e1a:	9907      	ldr	r1, [sp, #28]
 8016e1c:	4648      	mov	r0, r9
 8016e1e:	f001 fe60 	bl	8018ae2 <_Bfree>
 8016e22:	4621      	mov	r1, r4
 8016e24:	4648      	mov	r0, r9
 8016e26:	f001 fe5c 	bl	8018ae2 <_Bfree>
 8016e2a:	e600      	b.n	8016a2e <_strtod_l+0x7e>
 8016e2c:	9a06      	ldr	r2, [sp, #24]
 8016e2e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016e32:	4293      	cmp	r3, r2
 8016e34:	dbba      	blt.n	8016dac <_strtod_l+0x3fc>
 8016e36:	4d42      	ldr	r5, [pc, #264]	; (8016f40 <_strtod_l+0x590>)
 8016e38:	f1c4 040f 	rsb	r4, r4, #15
 8016e3c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016e40:	4652      	mov	r2, sl
 8016e42:	465b      	mov	r3, fp
 8016e44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016e48:	f7e9 fbee 	bl	8000628 <__aeabi_dmul>
 8016e4c:	9b06      	ldr	r3, [sp, #24]
 8016e4e:	1b1c      	subs	r4, r3, r4
 8016e50:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016e54:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016e58:	e78d      	b.n	8016d76 <_strtod_l+0x3c6>
 8016e5a:	f113 0f16 	cmn.w	r3, #22
 8016e5e:	dba5      	blt.n	8016dac <_strtod_l+0x3fc>
 8016e60:	4a37      	ldr	r2, [pc, #220]	; (8016f40 <_strtod_l+0x590>)
 8016e62:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016e66:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016e6a:	4650      	mov	r0, sl
 8016e6c:	4659      	mov	r1, fp
 8016e6e:	f7e9 fd05 	bl	800087c <__aeabi_ddiv>
 8016e72:	e782      	b.n	8016d7a <_strtod_l+0x3ca>
 8016e74:	2300      	movs	r3, #0
 8016e76:	4e33      	ldr	r6, [pc, #204]	; (8016f44 <_strtod_l+0x594>)
 8016e78:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016e7c:	4650      	mov	r0, sl
 8016e7e:	4659      	mov	r1, fp
 8016e80:	461d      	mov	r5, r3
 8016e82:	f1b8 0f01 	cmp.w	r8, #1
 8016e86:	dc21      	bgt.n	8016ecc <_strtod_l+0x51c>
 8016e88:	b10b      	cbz	r3, 8016e8e <_strtod_l+0x4de>
 8016e8a:	4682      	mov	sl, r0
 8016e8c:	468b      	mov	fp, r1
 8016e8e:	4b2d      	ldr	r3, [pc, #180]	; (8016f44 <_strtod_l+0x594>)
 8016e90:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016e94:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016e98:	4652      	mov	r2, sl
 8016e9a:	465b      	mov	r3, fp
 8016e9c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016ea0:	f7e9 fbc2 	bl	8000628 <__aeabi_dmul>
 8016ea4:	4b28      	ldr	r3, [pc, #160]	; (8016f48 <_strtod_l+0x598>)
 8016ea6:	460a      	mov	r2, r1
 8016ea8:	400b      	ands	r3, r1
 8016eaa:	4928      	ldr	r1, [pc, #160]	; (8016f4c <_strtod_l+0x59c>)
 8016eac:	428b      	cmp	r3, r1
 8016eae:	4682      	mov	sl, r0
 8016eb0:	d898      	bhi.n	8016de4 <_strtod_l+0x434>
 8016eb2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016eb6:	428b      	cmp	r3, r1
 8016eb8:	bf86      	itte	hi
 8016eba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016f54 <_strtod_l+0x5a4>
 8016ebe:	f04f 3aff 	movhi.w	sl, #4294967295
 8016ec2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	9304      	str	r3, [sp, #16]
 8016eca:	e077      	b.n	8016fbc <_strtod_l+0x60c>
 8016ecc:	f018 0f01 	tst.w	r8, #1
 8016ed0:	d006      	beq.n	8016ee0 <_strtod_l+0x530>
 8016ed2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eda:	f7e9 fba5 	bl	8000628 <__aeabi_dmul>
 8016ede:	2301      	movs	r3, #1
 8016ee0:	3501      	adds	r5, #1
 8016ee2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016ee6:	e7cc      	b.n	8016e82 <_strtod_l+0x4d2>
 8016ee8:	d0ed      	beq.n	8016ec6 <_strtod_l+0x516>
 8016eea:	f1c8 0800 	rsb	r8, r8, #0
 8016eee:	f018 020f 	ands.w	r2, r8, #15
 8016ef2:	d00a      	beq.n	8016f0a <_strtod_l+0x55a>
 8016ef4:	4b12      	ldr	r3, [pc, #72]	; (8016f40 <_strtod_l+0x590>)
 8016ef6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016efa:	4650      	mov	r0, sl
 8016efc:	4659      	mov	r1, fp
 8016efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f02:	f7e9 fcbb 	bl	800087c <__aeabi_ddiv>
 8016f06:	4682      	mov	sl, r0
 8016f08:	468b      	mov	fp, r1
 8016f0a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016f0e:	d0da      	beq.n	8016ec6 <_strtod_l+0x516>
 8016f10:	f1b8 0f1f 	cmp.w	r8, #31
 8016f14:	dd20      	ble.n	8016f58 <_strtod_l+0x5a8>
 8016f16:	2400      	movs	r4, #0
 8016f18:	46a0      	mov	r8, r4
 8016f1a:	9407      	str	r4, [sp, #28]
 8016f1c:	9405      	str	r4, [sp, #20]
 8016f1e:	2322      	movs	r3, #34	; 0x22
 8016f20:	f04f 0a00 	mov.w	sl, #0
 8016f24:	f04f 0b00 	mov.w	fp, #0
 8016f28:	f8c9 3000 	str.w	r3, [r9]
 8016f2c:	e765      	b.n	8016dfa <_strtod_l+0x44a>
 8016f2e:	bf00      	nop
 8016f30:	0801a66d 	.word	0x0801a66d
 8016f34:	0801a6f3 	.word	0x0801a6f3
 8016f38:	0801a675 	.word	0x0801a675
 8016f3c:	0801a6b4 	.word	0x0801a6b4
 8016f40:	0801a730 	.word	0x0801a730
 8016f44:	0801a708 	.word	0x0801a708
 8016f48:	7ff00000 	.word	0x7ff00000
 8016f4c:	7ca00000 	.word	0x7ca00000
 8016f50:	fff80000 	.word	0xfff80000
 8016f54:	7fefffff 	.word	0x7fefffff
 8016f58:	f018 0310 	ands.w	r3, r8, #16
 8016f5c:	bf18      	it	ne
 8016f5e:	236a      	movne	r3, #106	; 0x6a
 8016f60:	4da0      	ldr	r5, [pc, #640]	; (80171e4 <_strtod_l+0x834>)
 8016f62:	9304      	str	r3, [sp, #16]
 8016f64:	4650      	mov	r0, sl
 8016f66:	4659      	mov	r1, fp
 8016f68:	2300      	movs	r3, #0
 8016f6a:	f1b8 0f00 	cmp.w	r8, #0
 8016f6e:	f300 810a 	bgt.w	8017186 <_strtod_l+0x7d6>
 8016f72:	b10b      	cbz	r3, 8016f78 <_strtod_l+0x5c8>
 8016f74:	4682      	mov	sl, r0
 8016f76:	468b      	mov	fp, r1
 8016f78:	9b04      	ldr	r3, [sp, #16]
 8016f7a:	b1bb      	cbz	r3, 8016fac <_strtod_l+0x5fc>
 8016f7c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016f80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	4659      	mov	r1, fp
 8016f88:	dd10      	ble.n	8016fac <_strtod_l+0x5fc>
 8016f8a:	2b1f      	cmp	r3, #31
 8016f8c:	f340 8107 	ble.w	801719e <_strtod_l+0x7ee>
 8016f90:	2b34      	cmp	r3, #52	; 0x34
 8016f92:	bfde      	ittt	le
 8016f94:	3b20      	suble	r3, #32
 8016f96:	f04f 32ff 	movle.w	r2, #4294967295
 8016f9a:	fa02 f303 	lslle.w	r3, r2, r3
 8016f9e:	f04f 0a00 	mov.w	sl, #0
 8016fa2:	bfcc      	ite	gt
 8016fa4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016fa8:	ea03 0b01 	andle.w	fp, r3, r1
 8016fac:	2200      	movs	r2, #0
 8016fae:	2300      	movs	r3, #0
 8016fb0:	4650      	mov	r0, sl
 8016fb2:	4659      	mov	r1, fp
 8016fb4:	f7e9 fda0 	bl	8000af8 <__aeabi_dcmpeq>
 8016fb8:	2800      	cmp	r0, #0
 8016fba:	d1ac      	bne.n	8016f16 <_strtod_l+0x566>
 8016fbc:	9b07      	ldr	r3, [sp, #28]
 8016fbe:	9300      	str	r3, [sp, #0]
 8016fc0:	9a05      	ldr	r2, [sp, #20]
 8016fc2:	9908      	ldr	r1, [sp, #32]
 8016fc4:	4623      	mov	r3, r4
 8016fc6:	4648      	mov	r0, r9
 8016fc8:	f001 fddd 	bl	8018b86 <__s2b>
 8016fcc:	9007      	str	r0, [sp, #28]
 8016fce:	2800      	cmp	r0, #0
 8016fd0:	f43f af08 	beq.w	8016de4 <_strtod_l+0x434>
 8016fd4:	9a06      	ldr	r2, [sp, #24]
 8016fd6:	9b06      	ldr	r3, [sp, #24]
 8016fd8:	2a00      	cmp	r2, #0
 8016fda:	f1c3 0300 	rsb	r3, r3, #0
 8016fde:	bfa8      	it	ge
 8016fe0:	2300      	movge	r3, #0
 8016fe2:	930e      	str	r3, [sp, #56]	; 0x38
 8016fe4:	2400      	movs	r4, #0
 8016fe6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016fea:	9316      	str	r3, [sp, #88]	; 0x58
 8016fec:	46a0      	mov	r8, r4
 8016fee:	9b07      	ldr	r3, [sp, #28]
 8016ff0:	4648      	mov	r0, r9
 8016ff2:	6859      	ldr	r1, [r3, #4]
 8016ff4:	f001 fd41 	bl	8018a7a <_Balloc>
 8016ff8:	9005      	str	r0, [sp, #20]
 8016ffa:	2800      	cmp	r0, #0
 8016ffc:	f43f aef6 	beq.w	8016dec <_strtod_l+0x43c>
 8017000:	9b07      	ldr	r3, [sp, #28]
 8017002:	691a      	ldr	r2, [r3, #16]
 8017004:	3202      	adds	r2, #2
 8017006:	f103 010c 	add.w	r1, r3, #12
 801700a:	0092      	lsls	r2, r2, #2
 801700c:	300c      	adds	r0, #12
 801700e:	f001 fd29 	bl	8018a64 <memcpy>
 8017012:	aa1e      	add	r2, sp, #120	; 0x78
 8017014:	a91d      	add	r1, sp, #116	; 0x74
 8017016:	ec4b ab10 	vmov	d0, sl, fp
 801701a:	4648      	mov	r0, r9
 801701c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8017020:	f002 f86c 	bl	80190fc <__d2b>
 8017024:	901c      	str	r0, [sp, #112]	; 0x70
 8017026:	2800      	cmp	r0, #0
 8017028:	f43f aee0 	beq.w	8016dec <_strtod_l+0x43c>
 801702c:	2101      	movs	r1, #1
 801702e:	4648      	mov	r0, r9
 8017030:	f001 fe35 	bl	8018c9e <__i2b>
 8017034:	4680      	mov	r8, r0
 8017036:	2800      	cmp	r0, #0
 8017038:	f43f aed8 	beq.w	8016dec <_strtod_l+0x43c>
 801703c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801703e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017040:	2e00      	cmp	r6, #0
 8017042:	bfab      	itete	ge
 8017044:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8017046:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8017048:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801704a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801704c:	bfac      	ite	ge
 801704e:	18f7      	addge	r7, r6, r3
 8017050:	1b9d      	sublt	r5, r3, r6
 8017052:	9b04      	ldr	r3, [sp, #16]
 8017054:	1af6      	subs	r6, r6, r3
 8017056:	4416      	add	r6, r2
 8017058:	4b63      	ldr	r3, [pc, #396]	; (80171e8 <_strtod_l+0x838>)
 801705a:	3e01      	subs	r6, #1
 801705c:	429e      	cmp	r6, r3
 801705e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017062:	f280 80af 	bge.w	80171c4 <_strtod_l+0x814>
 8017066:	1b9b      	subs	r3, r3, r6
 8017068:	2b1f      	cmp	r3, #31
 801706a:	eba2 0203 	sub.w	r2, r2, r3
 801706e:	f04f 0101 	mov.w	r1, #1
 8017072:	f300 809b 	bgt.w	80171ac <_strtod_l+0x7fc>
 8017076:	fa01 f303 	lsl.w	r3, r1, r3
 801707a:	930f      	str	r3, [sp, #60]	; 0x3c
 801707c:	2300      	movs	r3, #0
 801707e:	930a      	str	r3, [sp, #40]	; 0x28
 8017080:	18be      	adds	r6, r7, r2
 8017082:	9b04      	ldr	r3, [sp, #16]
 8017084:	42b7      	cmp	r7, r6
 8017086:	4415      	add	r5, r2
 8017088:	441d      	add	r5, r3
 801708a:	463b      	mov	r3, r7
 801708c:	bfa8      	it	ge
 801708e:	4633      	movge	r3, r6
 8017090:	42ab      	cmp	r3, r5
 8017092:	bfa8      	it	ge
 8017094:	462b      	movge	r3, r5
 8017096:	2b00      	cmp	r3, #0
 8017098:	bfc2      	ittt	gt
 801709a:	1af6      	subgt	r6, r6, r3
 801709c:	1aed      	subgt	r5, r5, r3
 801709e:	1aff      	subgt	r7, r7, r3
 80170a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80170a2:	b1bb      	cbz	r3, 80170d4 <_strtod_l+0x724>
 80170a4:	4641      	mov	r1, r8
 80170a6:	461a      	mov	r2, r3
 80170a8:	4648      	mov	r0, r9
 80170aa:	f001 fe97 	bl	8018ddc <__pow5mult>
 80170ae:	4680      	mov	r8, r0
 80170b0:	2800      	cmp	r0, #0
 80170b2:	f43f ae9b 	beq.w	8016dec <_strtod_l+0x43c>
 80170b6:	4601      	mov	r1, r0
 80170b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80170ba:	4648      	mov	r0, r9
 80170bc:	f001 fdf8 	bl	8018cb0 <__multiply>
 80170c0:	900c      	str	r0, [sp, #48]	; 0x30
 80170c2:	2800      	cmp	r0, #0
 80170c4:	f43f ae92 	beq.w	8016dec <_strtod_l+0x43c>
 80170c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80170ca:	4648      	mov	r0, r9
 80170cc:	f001 fd09 	bl	8018ae2 <_Bfree>
 80170d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170d2:	931c      	str	r3, [sp, #112]	; 0x70
 80170d4:	2e00      	cmp	r6, #0
 80170d6:	dc7a      	bgt.n	80171ce <_strtod_l+0x81e>
 80170d8:	9b06      	ldr	r3, [sp, #24]
 80170da:	2b00      	cmp	r3, #0
 80170dc:	dd08      	ble.n	80170f0 <_strtod_l+0x740>
 80170de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80170e0:	9905      	ldr	r1, [sp, #20]
 80170e2:	4648      	mov	r0, r9
 80170e4:	f001 fe7a 	bl	8018ddc <__pow5mult>
 80170e8:	9005      	str	r0, [sp, #20]
 80170ea:	2800      	cmp	r0, #0
 80170ec:	f43f ae7e 	beq.w	8016dec <_strtod_l+0x43c>
 80170f0:	2d00      	cmp	r5, #0
 80170f2:	dd08      	ble.n	8017106 <_strtod_l+0x756>
 80170f4:	462a      	mov	r2, r5
 80170f6:	9905      	ldr	r1, [sp, #20]
 80170f8:	4648      	mov	r0, r9
 80170fa:	f001 febd 	bl	8018e78 <__lshift>
 80170fe:	9005      	str	r0, [sp, #20]
 8017100:	2800      	cmp	r0, #0
 8017102:	f43f ae73 	beq.w	8016dec <_strtod_l+0x43c>
 8017106:	2f00      	cmp	r7, #0
 8017108:	dd08      	ble.n	801711c <_strtod_l+0x76c>
 801710a:	4641      	mov	r1, r8
 801710c:	463a      	mov	r2, r7
 801710e:	4648      	mov	r0, r9
 8017110:	f001 feb2 	bl	8018e78 <__lshift>
 8017114:	4680      	mov	r8, r0
 8017116:	2800      	cmp	r0, #0
 8017118:	f43f ae68 	beq.w	8016dec <_strtod_l+0x43c>
 801711c:	9a05      	ldr	r2, [sp, #20]
 801711e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017120:	4648      	mov	r0, r9
 8017122:	f001 ff17 	bl	8018f54 <__mdiff>
 8017126:	4604      	mov	r4, r0
 8017128:	2800      	cmp	r0, #0
 801712a:	f43f ae5f 	beq.w	8016dec <_strtod_l+0x43c>
 801712e:	68c3      	ldr	r3, [r0, #12]
 8017130:	930c      	str	r3, [sp, #48]	; 0x30
 8017132:	2300      	movs	r3, #0
 8017134:	60c3      	str	r3, [r0, #12]
 8017136:	4641      	mov	r1, r8
 8017138:	f001 fef2 	bl	8018f20 <__mcmp>
 801713c:	2800      	cmp	r0, #0
 801713e:	da55      	bge.n	80171ec <_strtod_l+0x83c>
 8017140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017142:	b9e3      	cbnz	r3, 801717e <_strtod_l+0x7ce>
 8017144:	f1ba 0f00 	cmp.w	sl, #0
 8017148:	d119      	bne.n	801717e <_strtod_l+0x7ce>
 801714a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801714e:	b9b3      	cbnz	r3, 801717e <_strtod_l+0x7ce>
 8017150:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017154:	0d1b      	lsrs	r3, r3, #20
 8017156:	051b      	lsls	r3, r3, #20
 8017158:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801715c:	d90f      	bls.n	801717e <_strtod_l+0x7ce>
 801715e:	6963      	ldr	r3, [r4, #20]
 8017160:	b913      	cbnz	r3, 8017168 <_strtod_l+0x7b8>
 8017162:	6923      	ldr	r3, [r4, #16]
 8017164:	2b01      	cmp	r3, #1
 8017166:	dd0a      	ble.n	801717e <_strtod_l+0x7ce>
 8017168:	4621      	mov	r1, r4
 801716a:	2201      	movs	r2, #1
 801716c:	4648      	mov	r0, r9
 801716e:	f001 fe83 	bl	8018e78 <__lshift>
 8017172:	4641      	mov	r1, r8
 8017174:	4604      	mov	r4, r0
 8017176:	f001 fed3 	bl	8018f20 <__mcmp>
 801717a:	2800      	cmp	r0, #0
 801717c:	dc67      	bgt.n	801724e <_strtod_l+0x89e>
 801717e:	9b04      	ldr	r3, [sp, #16]
 8017180:	2b00      	cmp	r3, #0
 8017182:	d171      	bne.n	8017268 <_strtod_l+0x8b8>
 8017184:	e63d      	b.n	8016e02 <_strtod_l+0x452>
 8017186:	f018 0f01 	tst.w	r8, #1
 801718a:	d004      	beq.n	8017196 <_strtod_l+0x7e6>
 801718c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017190:	f7e9 fa4a 	bl	8000628 <__aeabi_dmul>
 8017194:	2301      	movs	r3, #1
 8017196:	ea4f 0868 	mov.w	r8, r8, asr #1
 801719a:	3508      	adds	r5, #8
 801719c:	e6e5      	b.n	8016f6a <_strtod_l+0x5ba>
 801719e:	f04f 32ff 	mov.w	r2, #4294967295
 80171a2:	fa02 f303 	lsl.w	r3, r2, r3
 80171a6:	ea03 0a0a 	and.w	sl, r3, sl
 80171aa:	e6ff      	b.n	8016fac <_strtod_l+0x5fc>
 80171ac:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80171b0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80171b4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80171b8:	36e2      	adds	r6, #226	; 0xe2
 80171ba:	fa01 f306 	lsl.w	r3, r1, r6
 80171be:	930a      	str	r3, [sp, #40]	; 0x28
 80171c0:	910f      	str	r1, [sp, #60]	; 0x3c
 80171c2:	e75d      	b.n	8017080 <_strtod_l+0x6d0>
 80171c4:	2300      	movs	r3, #0
 80171c6:	930a      	str	r3, [sp, #40]	; 0x28
 80171c8:	2301      	movs	r3, #1
 80171ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80171cc:	e758      	b.n	8017080 <_strtod_l+0x6d0>
 80171ce:	4632      	mov	r2, r6
 80171d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80171d2:	4648      	mov	r0, r9
 80171d4:	f001 fe50 	bl	8018e78 <__lshift>
 80171d8:	901c      	str	r0, [sp, #112]	; 0x70
 80171da:	2800      	cmp	r0, #0
 80171dc:	f47f af7c 	bne.w	80170d8 <_strtod_l+0x728>
 80171e0:	e604      	b.n	8016dec <_strtod_l+0x43c>
 80171e2:	bf00      	nop
 80171e4:	0801a6c8 	.word	0x0801a6c8
 80171e8:	fffffc02 	.word	0xfffffc02
 80171ec:	465d      	mov	r5, fp
 80171ee:	f040 8086 	bne.w	80172fe <_strtod_l+0x94e>
 80171f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80171f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80171f8:	b32a      	cbz	r2, 8017246 <_strtod_l+0x896>
 80171fa:	4aaf      	ldr	r2, [pc, #700]	; (80174b8 <_strtod_l+0xb08>)
 80171fc:	4293      	cmp	r3, r2
 80171fe:	d153      	bne.n	80172a8 <_strtod_l+0x8f8>
 8017200:	9b04      	ldr	r3, [sp, #16]
 8017202:	4650      	mov	r0, sl
 8017204:	b1d3      	cbz	r3, 801723c <_strtod_l+0x88c>
 8017206:	4aad      	ldr	r2, [pc, #692]	; (80174bc <_strtod_l+0xb0c>)
 8017208:	402a      	ands	r2, r5
 801720a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801720e:	f04f 31ff 	mov.w	r1, #4294967295
 8017212:	d816      	bhi.n	8017242 <_strtod_l+0x892>
 8017214:	0d12      	lsrs	r2, r2, #20
 8017216:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801721a:	fa01 f303 	lsl.w	r3, r1, r3
 801721e:	4298      	cmp	r0, r3
 8017220:	d142      	bne.n	80172a8 <_strtod_l+0x8f8>
 8017222:	4ba7      	ldr	r3, [pc, #668]	; (80174c0 <_strtod_l+0xb10>)
 8017224:	429d      	cmp	r5, r3
 8017226:	d102      	bne.n	801722e <_strtod_l+0x87e>
 8017228:	3001      	adds	r0, #1
 801722a:	f43f addf 	beq.w	8016dec <_strtod_l+0x43c>
 801722e:	4ba3      	ldr	r3, [pc, #652]	; (80174bc <_strtod_l+0xb0c>)
 8017230:	402b      	ands	r3, r5
 8017232:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8017236:	f04f 0a00 	mov.w	sl, #0
 801723a:	e7a0      	b.n	801717e <_strtod_l+0x7ce>
 801723c:	f04f 33ff 	mov.w	r3, #4294967295
 8017240:	e7ed      	b.n	801721e <_strtod_l+0x86e>
 8017242:	460b      	mov	r3, r1
 8017244:	e7eb      	b.n	801721e <_strtod_l+0x86e>
 8017246:	bb7b      	cbnz	r3, 80172a8 <_strtod_l+0x8f8>
 8017248:	f1ba 0f00 	cmp.w	sl, #0
 801724c:	d12c      	bne.n	80172a8 <_strtod_l+0x8f8>
 801724e:	9904      	ldr	r1, [sp, #16]
 8017250:	4a9a      	ldr	r2, [pc, #616]	; (80174bc <_strtod_l+0xb0c>)
 8017252:	465b      	mov	r3, fp
 8017254:	b1f1      	cbz	r1, 8017294 <_strtod_l+0x8e4>
 8017256:	ea02 010b 	and.w	r1, r2, fp
 801725a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801725e:	dc19      	bgt.n	8017294 <_strtod_l+0x8e4>
 8017260:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017264:	f77f ae5b 	ble.w	8016f1e <_strtod_l+0x56e>
 8017268:	4a96      	ldr	r2, [pc, #600]	; (80174c4 <_strtod_l+0xb14>)
 801726a:	2300      	movs	r3, #0
 801726c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8017270:	4650      	mov	r0, sl
 8017272:	4659      	mov	r1, fp
 8017274:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017278:	f7e9 f9d6 	bl	8000628 <__aeabi_dmul>
 801727c:	4682      	mov	sl, r0
 801727e:	468b      	mov	fp, r1
 8017280:	2900      	cmp	r1, #0
 8017282:	f47f adbe 	bne.w	8016e02 <_strtod_l+0x452>
 8017286:	2800      	cmp	r0, #0
 8017288:	f47f adbb 	bne.w	8016e02 <_strtod_l+0x452>
 801728c:	2322      	movs	r3, #34	; 0x22
 801728e:	f8c9 3000 	str.w	r3, [r9]
 8017292:	e5b6      	b.n	8016e02 <_strtod_l+0x452>
 8017294:	4013      	ands	r3, r2
 8017296:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801729a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801729e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80172a2:	f04f 3aff 	mov.w	sl, #4294967295
 80172a6:	e76a      	b.n	801717e <_strtod_l+0x7ce>
 80172a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80172aa:	b193      	cbz	r3, 80172d2 <_strtod_l+0x922>
 80172ac:	422b      	tst	r3, r5
 80172ae:	f43f af66 	beq.w	801717e <_strtod_l+0x7ce>
 80172b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80172b4:	9a04      	ldr	r2, [sp, #16]
 80172b6:	4650      	mov	r0, sl
 80172b8:	4659      	mov	r1, fp
 80172ba:	b173      	cbz	r3, 80172da <_strtod_l+0x92a>
 80172bc:	f7ff fb5c 	bl	8016978 <sulp>
 80172c0:	4602      	mov	r2, r0
 80172c2:	460b      	mov	r3, r1
 80172c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80172c8:	f7e8 fff8 	bl	80002bc <__adddf3>
 80172cc:	4682      	mov	sl, r0
 80172ce:	468b      	mov	fp, r1
 80172d0:	e755      	b.n	801717e <_strtod_l+0x7ce>
 80172d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80172d4:	ea13 0f0a 	tst.w	r3, sl
 80172d8:	e7e9      	b.n	80172ae <_strtod_l+0x8fe>
 80172da:	f7ff fb4d 	bl	8016978 <sulp>
 80172de:	4602      	mov	r2, r0
 80172e0:	460b      	mov	r3, r1
 80172e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80172e6:	f7e8 ffe7 	bl	80002b8 <__aeabi_dsub>
 80172ea:	2200      	movs	r2, #0
 80172ec:	2300      	movs	r3, #0
 80172ee:	4682      	mov	sl, r0
 80172f0:	468b      	mov	fp, r1
 80172f2:	f7e9 fc01 	bl	8000af8 <__aeabi_dcmpeq>
 80172f6:	2800      	cmp	r0, #0
 80172f8:	f47f ae11 	bne.w	8016f1e <_strtod_l+0x56e>
 80172fc:	e73f      	b.n	801717e <_strtod_l+0x7ce>
 80172fe:	4641      	mov	r1, r8
 8017300:	4620      	mov	r0, r4
 8017302:	f001 ff4a 	bl	801919a <__ratio>
 8017306:	ec57 6b10 	vmov	r6, r7, d0
 801730a:	2200      	movs	r2, #0
 801730c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017310:	ee10 0a10 	vmov	r0, s0
 8017314:	4639      	mov	r1, r7
 8017316:	f7e9 fc03 	bl	8000b20 <__aeabi_dcmple>
 801731a:	2800      	cmp	r0, #0
 801731c:	d077      	beq.n	801740e <_strtod_l+0xa5e>
 801731e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017320:	2b00      	cmp	r3, #0
 8017322:	d04a      	beq.n	80173ba <_strtod_l+0xa0a>
 8017324:	4b68      	ldr	r3, [pc, #416]	; (80174c8 <_strtod_l+0xb18>)
 8017326:	2200      	movs	r2, #0
 8017328:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801732c:	4f66      	ldr	r7, [pc, #408]	; (80174c8 <_strtod_l+0xb18>)
 801732e:	2600      	movs	r6, #0
 8017330:	4b62      	ldr	r3, [pc, #392]	; (80174bc <_strtod_l+0xb0c>)
 8017332:	402b      	ands	r3, r5
 8017334:	930f      	str	r3, [sp, #60]	; 0x3c
 8017336:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017338:	4b64      	ldr	r3, [pc, #400]	; (80174cc <_strtod_l+0xb1c>)
 801733a:	429a      	cmp	r2, r3
 801733c:	f040 80ce 	bne.w	80174dc <_strtod_l+0xb2c>
 8017340:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017344:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017348:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801734c:	ec4b ab10 	vmov	d0, sl, fp
 8017350:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8017354:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017358:	f001 fe5a 	bl	8019010 <__ulp>
 801735c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017360:	ec53 2b10 	vmov	r2, r3, d0
 8017364:	f7e9 f960 	bl	8000628 <__aeabi_dmul>
 8017368:	4652      	mov	r2, sl
 801736a:	465b      	mov	r3, fp
 801736c:	f7e8 ffa6 	bl	80002bc <__adddf3>
 8017370:	460b      	mov	r3, r1
 8017372:	4952      	ldr	r1, [pc, #328]	; (80174bc <_strtod_l+0xb0c>)
 8017374:	4a56      	ldr	r2, [pc, #344]	; (80174d0 <_strtod_l+0xb20>)
 8017376:	4019      	ands	r1, r3
 8017378:	4291      	cmp	r1, r2
 801737a:	4682      	mov	sl, r0
 801737c:	d95b      	bls.n	8017436 <_strtod_l+0xa86>
 801737e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017380:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017384:	4293      	cmp	r3, r2
 8017386:	d103      	bne.n	8017390 <_strtod_l+0x9e0>
 8017388:	9b08      	ldr	r3, [sp, #32]
 801738a:	3301      	adds	r3, #1
 801738c:	f43f ad2e 	beq.w	8016dec <_strtod_l+0x43c>
 8017390:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80174c0 <_strtod_l+0xb10>
 8017394:	f04f 3aff 	mov.w	sl, #4294967295
 8017398:	991c      	ldr	r1, [sp, #112]	; 0x70
 801739a:	4648      	mov	r0, r9
 801739c:	f001 fba1 	bl	8018ae2 <_Bfree>
 80173a0:	9905      	ldr	r1, [sp, #20]
 80173a2:	4648      	mov	r0, r9
 80173a4:	f001 fb9d 	bl	8018ae2 <_Bfree>
 80173a8:	4641      	mov	r1, r8
 80173aa:	4648      	mov	r0, r9
 80173ac:	f001 fb99 	bl	8018ae2 <_Bfree>
 80173b0:	4621      	mov	r1, r4
 80173b2:	4648      	mov	r0, r9
 80173b4:	f001 fb95 	bl	8018ae2 <_Bfree>
 80173b8:	e619      	b.n	8016fee <_strtod_l+0x63e>
 80173ba:	f1ba 0f00 	cmp.w	sl, #0
 80173be:	d11a      	bne.n	80173f6 <_strtod_l+0xa46>
 80173c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80173c4:	b9eb      	cbnz	r3, 8017402 <_strtod_l+0xa52>
 80173c6:	2200      	movs	r2, #0
 80173c8:	4b3f      	ldr	r3, [pc, #252]	; (80174c8 <_strtod_l+0xb18>)
 80173ca:	4630      	mov	r0, r6
 80173cc:	4639      	mov	r1, r7
 80173ce:	f7e9 fb9d 	bl	8000b0c <__aeabi_dcmplt>
 80173d2:	b9c8      	cbnz	r0, 8017408 <_strtod_l+0xa58>
 80173d4:	4630      	mov	r0, r6
 80173d6:	4639      	mov	r1, r7
 80173d8:	2200      	movs	r2, #0
 80173da:	4b3e      	ldr	r3, [pc, #248]	; (80174d4 <_strtod_l+0xb24>)
 80173dc:	f7e9 f924 	bl	8000628 <__aeabi_dmul>
 80173e0:	4606      	mov	r6, r0
 80173e2:	460f      	mov	r7, r1
 80173e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80173e8:	9618      	str	r6, [sp, #96]	; 0x60
 80173ea:	9319      	str	r3, [sp, #100]	; 0x64
 80173ec:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80173f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80173f4:	e79c      	b.n	8017330 <_strtod_l+0x980>
 80173f6:	f1ba 0f01 	cmp.w	sl, #1
 80173fa:	d102      	bne.n	8017402 <_strtod_l+0xa52>
 80173fc:	2d00      	cmp	r5, #0
 80173fe:	f43f ad8e 	beq.w	8016f1e <_strtod_l+0x56e>
 8017402:	2200      	movs	r2, #0
 8017404:	4b34      	ldr	r3, [pc, #208]	; (80174d8 <_strtod_l+0xb28>)
 8017406:	e78f      	b.n	8017328 <_strtod_l+0x978>
 8017408:	2600      	movs	r6, #0
 801740a:	4f32      	ldr	r7, [pc, #200]	; (80174d4 <_strtod_l+0xb24>)
 801740c:	e7ea      	b.n	80173e4 <_strtod_l+0xa34>
 801740e:	4b31      	ldr	r3, [pc, #196]	; (80174d4 <_strtod_l+0xb24>)
 8017410:	4630      	mov	r0, r6
 8017412:	4639      	mov	r1, r7
 8017414:	2200      	movs	r2, #0
 8017416:	f7e9 f907 	bl	8000628 <__aeabi_dmul>
 801741a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801741c:	4606      	mov	r6, r0
 801741e:	460f      	mov	r7, r1
 8017420:	b933      	cbnz	r3, 8017430 <_strtod_l+0xa80>
 8017422:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017426:	9010      	str	r0, [sp, #64]	; 0x40
 8017428:	9311      	str	r3, [sp, #68]	; 0x44
 801742a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801742e:	e7df      	b.n	80173f0 <_strtod_l+0xa40>
 8017430:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8017434:	e7f9      	b.n	801742a <_strtod_l+0xa7a>
 8017436:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801743a:	9b04      	ldr	r3, [sp, #16]
 801743c:	2b00      	cmp	r3, #0
 801743e:	d1ab      	bne.n	8017398 <_strtod_l+0x9e8>
 8017440:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017444:	0d1b      	lsrs	r3, r3, #20
 8017446:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017448:	051b      	lsls	r3, r3, #20
 801744a:	429a      	cmp	r2, r3
 801744c:	465d      	mov	r5, fp
 801744e:	d1a3      	bne.n	8017398 <_strtod_l+0x9e8>
 8017450:	4639      	mov	r1, r7
 8017452:	4630      	mov	r0, r6
 8017454:	f7e9 fb98 	bl	8000b88 <__aeabi_d2iz>
 8017458:	f7e9 f87c 	bl	8000554 <__aeabi_i2d>
 801745c:	460b      	mov	r3, r1
 801745e:	4602      	mov	r2, r0
 8017460:	4639      	mov	r1, r7
 8017462:	4630      	mov	r0, r6
 8017464:	f7e8 ff28 	bl	80002b8 <__aeabi_dsub>
 8017468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801746a:	4606      	mov	r6, r0
 801746c:	460f      	mov	r7, r1
 801746e:	b933      	cbnz	r3, 801747e <_strtod_l+0xace>
 8017470:	f1ba 0f00 	cmp.w	sl, #0
 8017474:	d103      	bne.n	801747e <_strtod_l+0xace>
 8017476:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801747a:	2d00      	cmp	r5, #0
 801747c:	d06d      	beq.n	801755a <_strtod_l+0xbaa>
 801747e:	a30a      	add	r3, pc, #40	; (adr r3, 80174a8 <_strtod_l+0xaf8>)
 8017480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017484:	4630      	mov	r0, r6
 8017486:	4639      	mov	r1, r7
 8017488:	f7e9 fb40 	bl	8000b0c <__aeabi_dcmplt>
 801748c:	2800      	cmp	r0, #0
 801748e:	f47f acb8 	bne.w	8016e02 <_strtod_l+0x452>
 8017492:	a307      	add	r3, pc, #28	; (adr r3, 80174b0 <_strtod_l+0xb00>)
 8017494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017498:	4630      	mov	r0, r6
 801749a:	4639      	mov	r1, r7
 801749c:	f7e9 fb54 	bl	8000b48 <__aeabi_dcmpgt>
 80174a0:	2800      	cmp	r0, #0
 80174a2:	f43f af79 	beq.w	8017398 <_strtod_l+0x9e8>
 80174a6:	e4ac      	b.n	8016e02 <_strtod_l+0x452>
 80174a8:	94a03595 	.word	0x94a03595
 80174ac:	3fdfffff 	.word	0x3fdfffff
 80174b0:	35afe535 	.word	0x35afe535
 80174b4:	3fe00000 	.word	0x3fe00000
 80174b8:	000fffff 	.word	0x000fffff
 80174bc:	7ff00000 	.word	0x7ff00000
 80174c0:	7fefffff 	.word	0x7fefffff
 80174c4:	39500000 	.word	0x39500000
 80174c8:	3ff00000 	.word	0x3ff00000
 80174cc:	7fe00000 	.word	0x7fe00000
 80174d0:	7c9fffff 	.word	0x7c9fffff
 80174d4:	3fe00000 	.word	0x3fe00000
 80174d8:	bff00000 	.word	0xbff00000
 80174dc:	9b04      	ldr	r3, [sp, #16]
 80174de:	b333      	cbz	r3, 801752e <_strtod_l+0xb7e>
 80174e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80174e2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80174e6:	d822      	bhi.n	801752e <_strtod_l+0xb7e>
 80174e8:	a327      	add	r3, pc, #156	; (adr r3, 8017588 <_strtod_l+0xbd8>)
 80174ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174ee:	4630      	mov	r0, r6
 80174f0:	4639      	mov	r1, r7
 80174f2:	f7e9 fb15 	bl	8000b20 <__aeabi_dcmple>
 80174f6:	b1a0      	cbz	r0, 8017522 <_strtod_l+0xb72>
 80174f8:	4639      	mov	r1, r7
 80174fa:	4630      	mov	r0, r6
 80174fc:	f7e9 fb6c 	bl	8000bd8 <__aeabi_d2uiz>
 8017500:	2800      	cmp	r0, #0
 8017502:	bf08      	it	eq
 8017504:	2001      	moveq	r0, #1
 8017506:	f7e9 f815 	bl	8000534 <__aeabi_ui2d>
 801750a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801750c:	4606      	mov	r6, r0
 801750e:	460f      	mov	r7, r1
 8017510:	bb03      	cbnz	r3, 8017554 <_strtod_l+0xba4>
 8017512:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017516:	9012      	str	r0, [sp, #72]	; 0x48
 8017518:	9313      	str	r3, [sp, #76]	; 0x4c
 801751a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801751e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017524:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017526:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801752a:	1a9b      	subs	r3, r3, r2
 801752c:	930b      	str	r3, [sp, #44]	; 0x2c
 801752e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8017532:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8017536:	f001 fd6b 	bl	8019010 <__ulp>
 801753a:	4650      	mov	r0, sl
 801753c:	ec53 2b10 	vmov	r2, r3, d0
 8017540:	4659      	mov	r1, fp
 8017542:	f7e9 f871 	bl	8000628 <__aeabi_dmul>
 8017546:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801754a:	f7e8 feb7 	bl	80002bc <__adddf3>
 801754e:	4682      	mov	sl, r0
 8017550:	468b      	mov	fp, r1
 8017552:	e772      	b.n	801743a <_strtod_l+0xa8a>
 8017554:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017558:	e7df      	b.n	801751a <_strtod_l+0xb6a>
 801755a:	a30d      	add	r3, pc, #52	; (adr r3, 8017590 <_strtod_l+0xbe0>)
 801755c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017560:	f7e9 fad4 	bl	8000b0c <__aeabi_dcmplt>
 8017564:	e79c      	b.n	80174a0 <_strtod_l+0xaf0>
 8017566:	2300      	movs	r3, #0
 8017568:	930d      	str	r3, [sp, #52]	; 0x34
 801756a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801756c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801756e:	6013      	str	r3, [r2, #0]
 8017570:	f7ff ba61 	b.w	8016a36 <_strtod_l+0x86>
 8017574:	2b65      	cmp	r3, #101	; 0x65
 8017576:	f04f 0200 	mov.w	r2, #0
 801757a:	f43f ab4e 	beq.w	8016c1a <_strtod_l+0x26a>
 801757e:	2101      	movs	r1, #1
 8017580:	4614      	mov	r4, r2
 8017582:	9104      	str	r1, [sp, #16]
 8017584:	f7ff bacb 	b.w	8016b1e <_strtod_l+0x16e>
 8017588:	ffc00000 	.word	0xffc00000
 801758c:	41dfffff 	.word	0x41dfffff
 8017590:	94a03595 	.word	0x94a03595
 8017594:	3fcfffff 	.word	0x3fcfffff

08017598 <_strtod_r>:
 8017598:	4b05      	ldr	r3, [pc, #20]	; (80175b0 <_strtod_r+0x18>)
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	b410      	push	{r4}
 801759e:	6a1b      	ldr	r3, [r3, #32]
 80175a0:	4c04      	ldr	r4, [pc, #16]	; (80175b4 <_strtod_r+0x1c>)
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	bf08      	it	eq
 80175a6:	4623      	moveq	r3, r4
 80175a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80175ac:	f7ff ba00 	b.w	80169b0 <_strtod_l>
 80175b0:	2000000c 	.word	0x2000000c
 80175b4:	20000070 	.word	0x20000070

080175b8 <_strtol_l.isra.0>:
 80175b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175bc:	4680      	mov	r8, r0
 80175be:	4689      	mov	r9, r1
 80175c0:	4692      	mov	sl, r2
 80175c2:	461e      	mov	r6, r3
 80175c4:	460f      	mov	r7, r1
 80175c6:	463d      	mov	r5, r7
 80175c8:	9808      	ldr	r0, [sp, #32]
 80175ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80175ce:	f001 fa0d 	bl	80189ec <__locale_ctype_ptr_l>
 80175d2:	4420      	add	r0, r4
 80175d4:	7843      	ldrb	r3, [r0, #1]
 80175d6:	f013 0308 	ands.w	r3, r3, #8
 80175da:	d132      	bne.n	8017642 <_strtol_l.isra.0+0x8a>
 80175dc:	2c2d      	cmp	r4, #45	; 0x2d
 80175de:	d132      	bne.n	8017646 <_strtol_l.isra.0+0x8e>
 80175e0:	787c      	ldrb	r4, [r7, #1]
 80175e2:	1cbd      	adds	r5, r7, #2
 80175e4:	2201      	movs	r2, #1
 80175e6:	2e00      	cmp	r6, #0
 80175e8:	d05d      	beq.n	80176a6 <_strtol_l.isra.0+0xee>
 80175ea:	2e10      	cmp	r6, #16
 80175ec:	d109      	bne.n	8017602 <_strtol_l.isra.0+0x4a>
 80175ee:	2c30      	cmp	r4, #48	; 0x30
 80175f0:	d107      	bne.n	8017602 <_strtol_l.isra.0+0x4a>
 80175f2:	782b      	ldrb	r3, [r5, #0]
 80175f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80175f8:	2b58      	cmp	r3, #88	; 0x58
 80175fa:	d14f      	bne.n	801769c <_strtol_l.isra.0+0xe4>
 80175fc:	786c      	ldrb	r4, [r5, #1]
 80175fe:	2610      	movs	r6, #16
 8017600:	3502      	adds	r5, #2
 8017602:	2a00      	cmp	r2, #0
 8017604:	bf14      	ite	ne
 8017606:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801760a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801760e:	2700      	movs	r7, #0
 8017610:	fbb1 fcf6 	udiv	ip, r1, r6
 8017614:	4638      	mov	r0, r7
 8017616:	fb06 1e1c 	mls	lr, r6, ip, r1
 801761a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801761e:	2b09      	cmp	r3, #9
 8017620:	d817      	bhi.n	8017652 <_strtol_l.isra.0+0x9a>
 8017622:	461c      	mov	r4, r3
 8017624:	42a6      	cmp	r6, r4
 8017626:	dd23      	ble.n	8017670 <_strtol_l.isra.0+0xb8>
 8017628:	1c7b      	adds	r3, r7, #1
 801762a:	d007      	beq.n	801763c <_strtol_l.isra.0+0x84>
 801762c:	4584      	cmp	ip, r0
 801762e:	d31c      	bcc.n	801766a <_strtol_l.isra.0+0xb2>
 8017630:	d101      	bne.n	8017636 <_strtol_l.isra.0+0x7e>
 8017632:	45a6      	cmp	lr, r4
 8017634:	db19      	blt.n	801766a <_strtol_l.isra.0+0xb2>
 8017636:	fb00 4006 	mla	r0, r0, r6, r4
 801763a:	2701      	movs	r7, #1
 801763c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017640:	e7eb      	b.n	801761a <_strtol_l.isra.0+0x62>
 8017642:	462f      	mov	r7, r5
 8017644:	e7bf      	b.n	80175c6 <_strtol_l.isra.0+0xe>
 8017646:	2c2b      	cmp	r4, #43	; 0x2b
 8017648:	bf04      	itt	eq
 801764a:	1cbd      	addeq	r5, r7, #2
 801764c:	787c      	ldrbeq	r4, [r7, #1]
 801764e:	461a      	mov	r2, r3
 8017650:	e7c9      	b.n	80175e6 <_strtol_l.isra.0+0x2e>
 8017652:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8017656:	2b19      	cmp	r3, #25
 8017658:	d801      	bhi.n	801765e <_strtol_l.isra.0+0xa6>
 801765a:	3c37      	subs	r4, #55	; 0x37
 801765c:	e7e2      	b.n	8017624 <_strtol_l.isra.0+0x6c>
 801765e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017662:	2b19      	cmp	r3, #25
 8017664:	d804      	bhi.n	8017670 <_strtol_l.isra.0+0xb8>
 8017666:	3c57      	subs	r4, #87	; 0x57
 8017668:	e7dc      	b.n	8017624 <_strtol_l.isra.0+0x6c>
 801766a:	f04f 37ff 	mov.w	r7, #4294967295
 801766e:	e7e5      	b.n	801763c <_strtol_l.isra.0+0x84>
 8017670:	1c7b      	adds	r3, r7, #1
 8017672:	d108      	bne.n	8017686 <_strtol_l.isra.0+0xce>
 8017674:	2322      	movs	r3, #34	; 0x22
 8017676:	f8c8 3000 	str.w	r3, [r8]
 801767a:	4608      	mov	r0, r1
 801767c:	f1ba 0f00 	cmp.w	sl, #0
 8017680:	d107      	bne.n	8017692 <_strtol_l.isra.0+0xda>
 8017682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017686:	b102      	cbz	r2, 801768a <_strtol_l.isra.0+0xd2>
 8017688:	4240      	negs	r0, r0
 801768a:	f1ba 0f00 	cmp.w	sl, #0
 801768e:	d0f8      	beq.n	8017682 <_strtol_l.isra.0+0xca>
 8017690:	b10f      	cbz	r7, 8017696 <_strtol_l.isra.0+0xde>
 8017692:	f105 39ff 	add.w	r9, r5, #4294967295
 8017696:	f8ca 9000 	str.w	r9, [sl]
 801769a:	e7f2      	b.n	8017682 <_strtol_l.isra.0+0xca>
 801769c:	2430      	movs	r4, #48	; 0x30
 801769e:	2e00      	cmp	r6, #0
 80176a0:	d1af      	bne.n	8017602 <_strtol_l.isra.0+0x4a>
 80176a2:	2608      	movs	r6, #8
 80176a4:	e7ad      	b.n	8017602 <_strtol_l.isra.0+0x4a>
 80176a6:	2c30      	cmp	r4, #48	; 0x30
 80176a8:	d0a3      	beq.n	80175f2 <_strtol_l.isra.0+0x3a>
 80176aa:	260a      	movs	r6, #10
 80176ac:	e7a9      	b.n	8017602 <_strtol_l.isra.0+0x4a>
	...

080176b0 <_strtol_r>:
 80176b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80176b2:	4c06      	ldr	r4, [pc, #24]	; (80176cc <_strtol_r+0x1c>)
 80176b4:	4d06      	ldr	r5, [pc, #24]	; (80176d0 <_strtol_r+0x20>)
 80176b6:	6824      	ldr	r4, [r4, #0]
 80176b8:	6a24      	ldr	r4, [r4, #32]
 80176ba:	2c00      	cmp	r4, #0
 80176bc:	bf08      	it	eq
 80176be:	462c      	moveq	r4, r5
 80176c0:	9400      	str	r4, [sp, #0]
 80176c2:	f7ff ff79 	bl	80175b8 <_strtol_l.isra.0>
 80176c6:	b003      	add	sp, #12
 80176c8:	bd30      	pop	{r4, r5, pc}
 80176ca:	bf00      	nop
 80176cc:	2000000c 	.word	0x2000000c
 80176d0:	20000070 	.word	0x20000070

080176d4 <_vsiprintf_r>:
 80176d4:	b500      	push	{lr}
 80176d6:	b09b      	sub	sp, #108	; 0x6c
 80176d8:	9100      	str	r1, [sp, #0]
 80176da:	9104      	str	r1, [sp, #16]
 80176dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80176e0:	9105      	str	r1, [sp, #20]
 80176e2:	9102      	str	r1, [sp, #8]
 80176e4:	4905      	ldr	r1, [pc, #20]	; (80176fc <_vsiprintf_r+0x28>)
 80176e6:	9103      	str	r1, [sp, #12]
 80176e8:	4669      	mov	r1, sp
 80176ea:	f001 fed5 	bl	8019498 <_svfiprintf_r>
 80176ee:	9b00      	ldr	r3, [sp, #0]
 80176f0:	2200      	movs	r2, #0
 80176f2:	701a      	strb	r2, [r3, #0]
 80176f4:	b01b      	add	sp, #108	; 0x6c
 80176f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80176fa:	bf00      	nop
 80176fc:	ffff0208 	.word	0xffff0208

08017700 <vsiprintf>:
 8017700:	4613      	mov	r3, r2
 8017702:	460a      	mov	r2, r1
 8017704:	4601      	mov	r1, r0
 8017706:	4802      	ldr	r0, [pc, #8]	; (8017710 <vsiprintf+0x10>)
 8017708:	6800      	ldr	r0, [r0, #0]
 801770a:	f7ff bfe3 	b.w	80176d4 <_vsiprintf_r>
 801770e:	bf00      	nop
 8017710:	2000000c 	.word	0x2000000c

08017714 <quorem>:
 8017714:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017718:	6903      	ldr	r3, [r0, #16]
 801771a:	690c      	ldr	r4, [r1, #16]
 801771c:	42a3      	cmp	r3, r4
 801771e:	4680      	mov	r8, r0
 8017720:	f2c0 8082 	blt.w	8017828 <quorem+0x114>
 8017724:	3c01      	subs	r4, #1
 8017726:	f101 0714 	add.w	r7, r1, #20
 801772a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801772e:	f100 0614 	add.w	r6, r0, #20
 8017732:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8017736:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801773a:	eb06 030c 	add.w	r3, r6, ip
 801773e:	3501      	adds	r5, #1
 8017740:	eb07 090c 	add.w	r9, r7, ip
 8017744:	9301      	str	r3, [sp, #4]
 8017746:	fbb0 f5f5 	udiv	r5, r0, r5
 801774a:	b395      	cbz	r5, 80177b2 <quorem+0x9e>
 801774c:	f04f 0a00 	mov.w	sl, #0
 8017750:	4638      	mov	r0, r7
 8017752:	46b6      	mov	lr, r6
 8017754:	46d3      	mov	fp, sl
 8017756:	f850 2b04 	ldr.w	r2, [r0], #4
 801775a:	b293      	uxth	r3, r2
 801775c:	fb05 a303 	mla	r3, r5, r3, sl
 8017760:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017764:	b29b      	uxth	r3, r3
 8017766:	ebab 0303 	sub.w	r3, fp, r3
 801776a:	0c12      	lsrs	r2, r2, #16
 801776c:	f8de b000 	ldr.w	fp, [lr]
 8017770:	fb05 a202 	mla	r2, r5, r2, sl
 8017774:	fa13 f38b 	uxtah	r3, r3, fp
 8017778:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801777c:	fa1f fb82 	uxth.w	fp, r2
 8017780:	f8de 2000 	ldr.w	r2, [lr]
 8017784:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017788:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801778c:	b29b      	uxth	r3, r3
 801778e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017792:	4581      	cmp	r9, r0
 8017794:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017798:	f84e 3b04 	str.w	r3, [lr], #4
 801779c:	d2db      	bcs.n	8017756 <quorem+0x42>
 801779e:	f856 300c 	ldr.w	r3, [r6, ip]
 80177a2:	b933      	cbnz	r3, 80177b2 <quorem+0x9e>
 80177a4:	9b01      	ldr	r3, [sp, #4]
 80177a6:	3b04      	subs	r3, #4
 80177a8:	429e      	cmp	r6, r3
 80177aa:	461a      	mov	r2, r3
 80177ac:	d330      	bcc.n	8017810 <quorem+0xfc>
 80177ae:	f8c8 4010 	str.w	r4, [r8, #16]
 80177b2:	4640      	mov	r0, r8
 80177b4:	f001 fbb4 	bl	8018f20 <__mcmp>
 80177b8:	2800      	cmp	r0, #0
 80177ba:	db25      	blt.n	8017808 <quorem+0xf4>
 80177bc:	3501      	adds	r5, #1
 80177be:	4630      	mov	r0, r6
 80177c0:	f04f 0c00 	mov.w	ip, #0
 80177c4:	f857 2b04 	ldr.w	r2, [r7], #4
 80177c8:	f8d0 e000 	ldr.w	lr, [r0]
 80177cc:	b293      	uxth	r3, r2
 80177ce:	ebac 0303 	sub.w	r3, ip, r3
 80177d2:	0c12      	lsrs	r2, r2, #16
 80177d4:	fa13 f38e 	uxtah	r3, r3, lr
 80177d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80177dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80177e0:	b29b      	uxth	r3, r3
 80177e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80177e6:	45b9      	cmp	r9, r7
 80177e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80177ec:	f840 3b04 	str.w	r3, [r0], #4
 80177f0:	d2e8      	bcs.n	80177c4 <quorem+0xb0>
 80177f2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80177f6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80177fa:	b92a      	cbnz	r2, 8017808 <quorem+0xf4>
 80177fc:	3b04      	subs	r3, #4
 80177fe:	429e      	cmp	r6, r3
 8017800:	461a      	mov	r2, r3
 8017802:	d30b      	bcc.n	801781c <quorem+0x108>
 8017804:	f8c8 4010 	str.w	r4, [r8, #16]
 8017808:	4628      	mov	r0, r5
 801780a:	b003      	add	sp, #12
 801780c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017810:	6812      	ldr	r2, [r2, #0]
 8017812:	3b04      	subs	r3, #4
 8017814:	2a00      	cmp	r2, #0
 8017816:	d1ca      	bne.n	80177ae <quorem+0x9a>
 8017818:	3c01      	subs	r4, #1
 801781a:	e7c5      	b.n	80177a8 <quorem+0x94>
 801781c:	6812      	ldr	r2, [r2, #0]
 801781e:	3b04      	subs	r3, #4
 8017820:	2a00      	cmp	r2, #0
 8017822:	d1ef      	bne.n	8017804 <quorem+0xf0>
 8017824:	3c01      	subs	r4, #1
 8017826:	e7ea      	b.n	80177fe <quorem+0xea>
 8017828:	2000      	movs	r0, #0
 801782a:	e7ee      	b.n	801780a <quorem+0xf6>
 801782c:	0000      	movs	r0, r0
	...

08017830 <_dtoa_r>:
 8017830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017834:	ec57 6b10 	vmov	r6, r7, d0
 8017838:	b097      	sub	sp, #92	; 0x5c
 801783a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801783c:	9106      	str	r1, [sp, #24]
 801783e:	4604      	mov	r4, r0
 8017840:	920b      	str	r2, [sp, #44]	; 0x2c
 8017842:	9312      	str	r3, [sp, #72]	; 0x48
 8017844:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017848:	e9cd 6700 	strd	r6, r7, [sp]
 801784c:	b93d      	cbnz	r5, 801785e <_dtoa_r+0x2e>
 801784e:	2010      	movs	r0, #16
 8017850:	f001 f8ee 	bl	8018a30 <malloc>
 8017854:	6260      	str	r0, [r4, #36]	; 0x24
 8017856:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801785a:	6005      	str	r5, [r0, #0]
 801785c:	60c5      	str	r5, [r0, #12]
 801785e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017860:	6819      	ldr	r1, [r3, #0]
 8017862:	b151      	cbz	r1, 801787a <_dtoa_r+0x4a>
 8017864:	685a      	ldr	r2, [r3, #4]
 8017866:	604a      	str	r2, [r1, #4]
 8017868:	2301      	movs	r3, #1
 801786a:	4093      	lsls	r3, r2
 801786c:	608b      	str	r3, [r1, #8]
 801786e:	4620      	mov	r0, r4
 8017870:	f001 f937 	bl	8018ae2 <_Bfree>
 8017874:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017876:	2200      	movs	r2, #0
 8017878:	601a      	str	r2, [r3, #0]
 801787a:	1e3b      	subs	r3, r7, #0
 801787c:	bfbb      	ittet	lt
 801787e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017882:	9301      	strlt	r3, [sp, #4]
 8017884:	2300      	movge	r3, #0
 8017886:	2201      	movlt	r2, #1
 8017888:	bfac      	ite	ge
 801788a:	f8c8 3000 	strge.w	r3, [r8]
 801788e:	f8c8 2000 	strlt.w	r2, [r8]
 8017892:	4baf      	ldr	r3, [pc, #700]	; (8017b50 <_dtoa_r+0x320>)
 8017894:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017898:	ea33 0308 	bics.w	r3, r3, r8
 801789c:	d114      	bne.n	80178c8 <_dtoa_r+0x98>
 801789e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80178a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80178a4:	6013      	str	r3, [r2, #0]
 80178a6:	9b00      	ldr	r3, [sp, #0]
 80178a8:	b923      	cbnz	r3, 80178b4 <_dtoa_r+0x84>
 80178aa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80178ae:	2800      	cmp	r0, #0
 80178b0:	f000 8542 	beq.w	8018338 <_dtoa_r+0xb08>
 80178b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80178b6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8017b64 <_dtoa_r+0x334>
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	f000 8544 	beq.w	8018348 <_dtoa_r+0xb18>
 80178c0:	f10b 0303 	add.w	r3, fp, #3
 80178c4:	f000 bd3e 	b.w	8018344 <_dtoa_r+0xb14>
 80178c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80178cc:	2200      	movs	r2, #0
 80178ce:	2300      	movs	r3, #0
 80178d0:	4630      	mov	r0, r6
 80178d2:	4639      	mov	r1, r7
 80178d4:	f7e9 f910 	bl	8000af8 <__aeabi_dcmpeq>
 80178d8:	4681      	mov	r9, r0
 80178da:	b168      	cbz	r0, 80178f8 <_dtoa_r+0xc8>
 80178dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80178de:	2301      	movs	r3, #1
 80178e0:	6013      	str	r3, [r2, #0]
 80178e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	f000 8524 	beq.w	8018332 <_dtoa_r+0xb02>
 80178ea:	4b9a      	ldr	r3, [pc, #616]	; (8017b54 <_dtoa_r+0x324>)
 80178ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80178ee:	f103 3bff 	add.w	fp, r3, #4294967295
 80178f2:	6013      	str	r3, [r2, #0]
 80178f4:	f000 bd28 	b.w	8018348 <_dtoa_r+0xb18>
 80178f8:	aa14      	add	r2, sp, #80	; 0x50
 80178fa:	a915      	add	r1, sp, #84	; 0x54
 80178fc:	ec47 6b10 	vmov	d0, r6, r7
 8017900:	4620      	mov	r0, r4
 8017902:	f001 fbfb 	bl	80190fc <__d2b>
 8017906:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801790a:	9004      	str	r0, [sp, #16]
 801790c:	2d00      	cmp	r5, #0
 801790e:	d07c      	beq.n	8017a0a <_dtoa_r+0x1da>
 8017910:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017914:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017918:	46b2      	mov	sl, r6
 801791a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801791e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017922:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8017926:	2200      	movs	r2, #0
 8017928:	4b8b      	ldr	r3, [pc, #556]	; (8017b58 <_dtoa_r+0x328>)
 801792a:	4650      	mov	r0, sl
 801792c:	4659      	mov	r1, fp
 801792e:	f7e8 fcc3 	bl	80002b8 <__aeabi_dsub>
 8017932:	a381      	add	r3, pc, #516	; (adr r3, 8017b38 <_dtoa_r+0x308>)
 8017934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017938:	f7e8 fe76 	bl	8000628 <__aeabi_dmul>
 801793c:	a380      	add	r3, pc, #512	; (adr r3, 8017b40 <_dtoa_r+0x310>)
 801793e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017942:	f7e8 fcbb 	bl	80002bc <__adddf3>
 8017946:	4606      	mov	r6, r0
 8017948:	4628      	mov	r0, r5
 801794a:	460f      	mov	r7, r1
 801794c:	f7e8 fe02 	bl	8000554 <__aeabi_i2d>
 8017950:	a37d      	add	r3, pc, #500	; (adr r3, 8017b48 <_dtoa_r+0x318>)
 8017952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017956:	f7e8 fe67 	bl	8000628 <__aeabi_dmul>
 801795a:	4602      	mov	r2, r0
 801795c:	460b      	mov	r3, r1
 801795e:	4630      	mov	r0, r6
 8017960:	4639      	mov	r1, r7
 8017962:	f7e8 fcab 	bl	80002bc <__adddf3>
 8017966:	4606      	mov	r6, r0
 8017968:	460f      	mov	r7, r1
 801796a:	f7e9 f90d 	bl	8000b88 <__aeabi_d2iz>
 801796e:	2200      	movs	r2, #0
 8017970:	4682      	mov	sl, r0
 8017972:	2300      	movs	r3, #0
 8017974:	4630      	mov	r0, r6
 8017976:	4639      	mov	r1, r7
 8017978:	f7e9 f8c8 	bl	8000b0c <__aeabi_dcmplt>
 801797c:	b148      	cbz	r0, 8017992 <_dtoa_r+0x162>
 801797e:	4650      	mov	r0, sl
 8017980:	f7e8 fde8 	bl	8000554 <__aeabi_i2d>
 8017984:	4632      	mov	r2, r6
 8017986:	463b      	mov	r3, r7
 8017988:	f7e9 f8b6 	bl	8000af8 <__aeabi_dcmpeq>
 801798c:	b908      	cbnz	r0, 8017992 <_dtoa_r+0x162>
 801798e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017992:	f1ba 0f16 	cmp.w	sl, #22
 8017996:	d859      	bhi.n	8017a4c <_dtoa_r+0x21c>
 8017998:	4970      	ldr	r1, [pc, #448]	; (8017b5c <_dtoa_r+0x32c>)
 801799a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801799e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80179a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80179a6:	f7e9 f8cf 	bl	8000b48 <__aeabi_dcmpgt>
 80179aa:	2800      	cmp	r0, #0
 80179ac:	d050      	beq.n	8017a50 <_dtoa_r+0x220>
 80179ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80179b2:	2300      	movs	r3, #0
 80179b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80179b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80179b8:	1b5d      	subs	r5, r3, r5
 80179ba:	f1b5 0801 	subs.w	r8, r5, #1
 80179be:	bf49      	itett	mi
 80179c0:	f1c5 0301 	rsbmi	r3, r5, #1
 80179c4:	2300      	movpl	r3, #0
 80179c6:	9305      	strmi	r3, [sp, #20]
 80179c8:	f04f 0800 	movmi.w	r8, #0
 80179cc:	bf58      	it	pl
 80179ce:	9305      	strpl	r3, [sp, #20]
 80179d0:	f1ba 0f00 	cmp.w	sl, #0
 80179d4:	db3e      	blt.n	8017a54 <_dtoa_r+0x224>
 80179d6:	2300      	movs	r3, #0
 80179d8:	44d0      	add	r8, sl
 80179da:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80179de:	9307      	str	r3, [sp, #28]
 80179e0:	9b06      	ldr	r3, [sp, #24]
 80179e2:	2b09      	cmp	r3, #9
 80179e4:	f200 8090 	bhi.w	8017b08 <_dtoa_r+0x2d8>
 80179e8:	2b05      	cmp	r3, #5
 80179ea:	bfc4      	itt	gt
 80179ec:	3b04      	subgt	r3, #4
 80179ee:	9306      	strgt	r3, [sp, #24]
 80179f0:	9b06      	ldr	r3, [sp, #24]
 80179f2:	f1a3 0302 	sub.w	r3, r3, #2
 80179f6:	bfcc      	ite	gt
 80179f8:	2500      	movgt	r5, #0
 80179fa:	2501      	movle	r5, #1
 80179fc:	2b03      	cmp	r3, #3
 80179fe:	f200 808f 	bhi.w	8017b20 <_dtoa_r+0x2f0>
 8017a02:	e8df f003 	tbb	[pc, r3]
 8017a06:	7f7d      	.short	0x7f7d
 8017a08:	7131      	.short	0x7131
 8017a0a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017a0e:	441d      	add	r5, r3
 8017a10:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8017a14:	2820      	cmp	r0, #32
 8017a16:	dd13      	ble.n	8017a40 <_dtoa_r+0x210>
 8017a18:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017a1c:	9b00      	ldr	r3, [sp, #0]
 8017a1e:	fa08 f800 	lsl.w	r8, r8, r0
 8017a22:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8017a26:	fa23 f000 	lsr.w	r0, r3, r0
 8017a2a:	ea48 0000 	orr.w	r0, r8, r0
 8017a2e:	f7e8 fd81 	bl	8000534 <__aeabi_ui2d>
 8017a32:	2301      	movs	r3, #1
 8017a34:	4682      	mov	sl, r0
 8017a36:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017a3a:	3d01      	subs	r5, #1
 8017a3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8017a3e:	e772      	b.n	8017926 <_dtoa_r+0xf6>
 8017a40:	9b00      	ldr	r3, [sp, #0]
 8017a42:	f1c0 0020 	rsb	r0, r0, #32
 8017a46:	fa03 f000 	lsl.w	r0, r3, r0
 8017a4a:	e7f0      	b.n	8017a2e <_dtoa_r+0x1fe>
 8017a4c:	2301      	movs	r3, #1
 8017a4e:	e7b1      	b.n	80179b4 <_dtoa_r+0x184>
 8017a50:	900f      	str	r0, [sp, #60]	; 0x3c
 8017a52:	e7b0      	b.n	80179b6 <_dtoa_r+0x186>
 8017a54:	9b05      	ldr	r3, [sp, #20]
 8017a56:	eba3 030a 	sub.w	r3, r3, sl
 8017a5a:	9305      	str	r3, [sp, #20]
 8017a5c:	f1ca 0300 	rsb	r3, sl, #0
 8017a60:	9307      	str	r3, [sp, #28]
 8017a62:	2300      	movs	r3, #0
 8017a64:	930e      	str	r3, [sp, #56]	; 0x38
 8017a66:	e7bb      	b.n	80179e0 <_dtoa_r+0x1b0>
 8017a68:	2301      	movs	r3, #1
 8017a6a:	930a      	str	r3, [sp, #40]	; 0x28
 8017a6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	dd59      	ble.n	8017b26 <_dtoa_r+0x2f6>
 8017a72:	9302      	str	r3, [sp, #8]
 8017a74:	4699      	mov	r9, r3
 8017a76:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017a78:	2200      	movs	r2, #0
 8017a7a:	6072      	str	r2, [r6, #4]
 8017a7c:	2204      	movs	r2, #4
 8017a7e:	f102 0014 	add.w	r0, r2, #20
 8017a82:	4298      	cmp	r0, r3
 8017a84:	6871      	ldr	r1, [r6, #4]
 8017a86:	d953      	bls.n	8017b30 <_dtoa_r+0x300>
 8017a88:	4620      	mov	r0, r4
 8017a8a:	f000 fff6 	bl	8018a7a <_Balloc>
 8017a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017a90:	6030      	str	r0, [r6, #0]
 8017a92:	f1b9 0f0e 	cmp.w	r9, #14
 8017a96:	f8d3 b000 	ldr.w	fp, [r3]
 8017a9a:	f200 80e6 	bhi.w	8017c6a <_dtoa_r+0x43a>
 8017a9e:	2d00      	cmp	r5, #0
 8017aa0:	f000 80e3 	beq.w	8017c6a <_dtoa_r+0x43a>
 8017aa4:	ed9d 7b00 	vldr	d7, [sp]
 8017aa8:	f1ba 0f00 	cmp.w	sl, #0
 8017aac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017ab0:	dd74      	ble.n	8017b9c <_dtoa_r+0x36c>
 8017ab2:	4a2a      	ldr	r2, [pc, #168]	; (8017b5c <_dtoa_r+0x32c>)
 8017ab4:	f00a 030f 	and.w	r3, sl, #15
 8017ab8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017abc:	ed93 7b00 	vldr	d7, [r3]
 8017ac0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8017ac4:	06f0      	lsls	r0, r6, #27
 8017ac6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017aca:	d565      	bpl.n	8017b98 <_dtoa_r+0x368>
 8017acc:	4b24      	ldr	r3, [pc, #144]	; (8017b60 <_dtoa_r+0x330>)
 8017ace:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017ad2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017ad6:	f7e8 fed1 	bl	800087c <__aeabi_ddiv>
 8017ada:	e9cd 0100 	strd	r0, r1, [sp]
 8017ade:	f006 060f 	and.w	r6, r6, #15
 8017ae2:	2503      	movs	r5, #3
 8017ae4:	4f1e      	ldr	r7, [pc, #120]	; (8017b60 <_dtoa_r+0x330>)
 8017ae6:	e04c      	b.n	8017b82 <_dtoa_r+0x352>
 8017ae8:	2301      	movs	r3, #1
 8017aea:	930a      	str	r3, [sp, #40]	; 0x28
 8017aec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017aee:	4453      	add	r3, sl
 8017af0:	f103 0901 	add.w	r9, r3, #1
 8017af4:	9302      	str	r3, [sp, #8]
 8017af6:	464b      	mov	r3, r9
 8017af8:	2b01      	cmp	r3, #1
 8017afa:	bfb8      	it	lt
 8017afc:	2301      	movlt	r3, #1
 8017afe:	e7ba      	b.n	8017a76 <_dtoa_r+0x246>
 8017b00:	2300      	movs	r3, #0
 8017b02:	e7b2      	b.n	8017a6a <_dtoa_r+0x23a>
 8017b04:	2300      	movs	r3, #0
 8017b06:	e7f0      	b.n	8017aea <_dtoa_r+0x2ba>
 8017b08:	2501      	movs	r5, #1
 8017b0a:	2300      	movs	r3, #0
 8017b0c:	9306      	str	r3, [sp, #24]
 8017b0e:	950a      	str	r5, [sp, #40]	; 0x28
 8017b10:	f04f 33ff 	mov.w	r3, #4294967295
 8017b14:	9302      	str	r3, [sp, #8]
 8017b16:	4699      	mov	r9, r3
 8017b18:	2200      	movs	r2, #0
 8017b1a:	2312      	movs	r3, #18
 8017b1c:	920b      	str	r2, [sp, #44]	; 0x2c
 8017b1e:	e7aa      	b.n	8017a76 <_dtoa_r+0x246>
 8017b20:	2301      	movs	r3, #1
 8017b22:	930a      	str	r3, [sp, #40]	; 0x28
 8017b24:	e7f4      	b.n	8017b10 <_dtoa_r+0x2e0>
 8017b26:	2301      	movs	r3, #1
 8017b28:	9302      	str	r3, [sp, #8]
 8017b2a:	4699      	mov	r9, r3
 8017b2c:	461a      	mov	r2, r3
 8017b2e:	e7f5      	b.n	8017b1c <_dtoa_r+0x2ec>
 8017b30:	3101      	adds	r1, #1
 8017b32:	6071      	str	r1, [r6, #4]
 8017b34:	0052      	lsls	r2, r2, #1
 8017b36:	e7a2      	b.n	8017a7e <_dtoa_r+0x24e>
 8017b38:	636f4361 	.word	0x636f4361
 8017b3c:	3fd287a7 	.word	0x3fd287a7
 8017b40:	8b60c8b3 	.word	0x8b60c8b3
 8017b44:	3fc68a28 	.word	0x3fc68a28
 8017b48:	509f79fb 	.word	0x509f79fb
 8017b4c:	3fd34413 	.word	0x3fd34413
 8017b50:	7ff00000 	.word	0x7ff00000
 8017b54:	0801a82c 	.word	0x0801a82c
 8017b58:	3ff80000 	.word	0x3ff80000
 8017b5c:	0801a730 	.word	0x0801a730
 8017b60:	0801a708 	.word	0x0801a708
 8017b64:	0801a6f9 	.word	0x0801a6f9
 8017b68:	07f1      	lsls	r1, r6, #31
 8017b6a:	d508      	bpl.n	8017b7e <_dtoa_r+0x34e>
 8017b6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017b74:	f7e8 fd58 	bl	8000628 <__aeabi_dmul>
 8017b78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017b7c:	3501      	adds	r5, #1
 8017b7e:	1076      	asrs	r6, r6, #1
 8017b80:	3708      	adds	r7, #8
 8017b82:	2e00      	cmp	r6, #0
 8017b84:	d1f0      	bne.n	8017b68 <_dtoa_r+0x338>
 8017b86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017b8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b8e:	f7e8 fe75 	bl	800087c <__aeabi_ddiv>
 8017b92:	e9cd 0100 	strd	r0, r1, [sp]
 8017b96:	e01a      	b.n	8017bce <_dtoa_r+0x39e>
 8017b98:	2502      	movs	r5, #2
 8017b9a:	e7a3      	b.n	8017ae4 <_dtoa_r+0x2b4>
 8017b9c:	f000 80a0 	beq.w	8017ce0 <_dtoa_r+0x4b0>
 8017ba0:	f1ca 0600 	rsb	r6, sl, #0
 8017ba4:	4b9f      	ldr	r3, [pc, #636]	; (8017e24 <_dtoa_r+0x5f4>)
 8017ba6:	4fa0      	ldr	r7, [pc, #640]	; (8017e28 <_dtoa_r+0x5f8>)
 8017ba8:	f006 020f 	and.w	r2, r6, #15
 8017bac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017bb8:	f7e8 fd36 	bl	8000628 <__aeabi_dmul>
 8017bbc:	e9cd 0100 	strd	r0, r1, [sp]
 8017bc0:	1136      	asrs	r6, r6, #4
 8017bc2:	2300      	movs	r3, #0
 8017bc4:	2502      	movs	r5, #2
 8017bc6:	2e00      	cmp	r6, #0
 8017bc8:	d17f      	bne.n	8017cca <_dtoa_r+0x49a>
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d1e1      	bne.n	8017b92 <_dtoa_r+0x362>
 8017bce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	f000 8087 	beq.w	8017ce4 <_dtoa_r+0x4b4>
 8017bd6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017bda:	2200      	movs	r2, #0
 8017bdc:	4b93      	ldr	r3, [pc, #588]	; (8017e2c <_dtoa_r+0x5fc>)
 8017bde:	4630      	mov	r0, r6
 8017be0:	4639      	mov	r1, r7
 8017be2:	f7e8 ff93 	bl	8000b0c <__aeabi_dcmplt>
 8017be6:	2800      	cmp	r0, #0
 8017be8:	d07c      	beq.n	8017ce4 <_dtoa_r+0x4b4>
 8017bea:	f1b9 0f00 	cmp.w	r9, #0
 8017bee:	d079      	beq.n	8017ce4 <_dtoa_r+0x4b4>
 8017bf0:	9b02      	ldr	r3, [sp, #8]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	dd35      	ble.n	8017c62 <_dtoa_r+0x432>
 8017bf6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017bfa:	9308      	str	r3, [sp, #32]
 8017bfc:	4639      	mov	r1, r7
 8017bfe:	2200      	movs	r2, #0
 8017c00:	4b8b      	ldr	r3, [pc, #556]	; (8017e30 <_dtoa_r+0x600>)
 8017c02:	4630      	mov	r0, r6
 8017c04:	f7e8 fd10 	bl	8000628 <__aeabi_dmul>
 8017c08:	e9cd 0100 	strd	r0, r1, [sp]
 8017c0c:	9f02      	ldr	r7, [sp, #8]
 8017c0e:	3501      	adds	r5, #1
 8017c10:	4628      	mov	r0, r5
 8017c12:	f7e8 fc9f 	bl	8000554 <__aeabi_i2d>
 8017c16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017c1a:	f7e8 fd05 	bl	8000628 <__aeabi_dmul>
 8017c1e:	2200      	movs	r2, #0
 8017c20:	4b84      	ldr	r3, [pc, #528]	; (8017e34 <_dtoa_r+0x604>)
 8017c22:	f7e8 fb4b 	bl	80002bc <__adddf3>
 8017c26:	4605      	mov	r5, r0
 8017c28:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017c2c:	2f00      	cmp	r7, #0
 8017c2e:	d15d      	bne.n	8017cec <_dtoa_r+0x4bc>
 8017c30:	2200      	movs	r2, #0
 8017c32:	4b81      	ldr	r3, [pc, #516]	; (8017e38 <_dtoa_r+0x608>)
 8017c34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c38:	f7e8 fb3e 	bl	80002b8 <__aeabi_dsub>
 8017c3c:	462a      	mov	r2, r5
 8017c3e:	4633      	mov	r3, r6
 8017c40:	e9cd 0100 	strd	r0, r1, [sp]
 8017c44:	f7e8 ff80 	bl	8000b48 <__aeabi_dcmpgt>
 8017c48:	2800      	cmp	r0, #0
 8017c4a:	f040 8288 	bne.w	801815e <_dtoa_r+0x92e>
 8017c4e:	462a      	mov	r2, r5
 8017c50:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017c54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c58:	f7e8 ff58 	bl	8000b0c <__aeabi_dcmplt>
 8017c5c:	2800      	cmp	r0, #0
 8017c5e:	f040 827c 	bne.w	801815a <_dtoa_r+0x92a>
 8017c62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017c66:	e9cd 2300 	strd	r2, r3, [sp]
 8017c6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	f2c0 8150 	blt.w	8017f12 <_dtoa_r+0x6e2>
 8017c72:	f1ba 0f0e 	cmp.w	sl, #14
 8017c76:	f300 814c 	bgt.w	8017f12 <_dtoa_r+0x6e2>
 8017c7a:	4b6a      	ldr	r3, [pc, #424]	; (8017e24 <_dtoa_r+0x5f4>)
 8017c7c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017c80:	ed93 7b00 	vldr	d7, [r3]
 8017c84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017c8c:	f280 80d8 	bge.w	8017e40 <_dtoa_r+0x610>
 8017c90:	f1b9 0f00 	cmp.w	r9, #0
 8017c94:	f300 80d4 	bgt.w	8017e40 <_dtoa_r+0x610>
 8017c98:	f040 825e 	bne.w	8018158 <_dtoa_r+0x928>
 8017c9c:	2200      	movs	r2, #0
 8017c9e:	4b66      	ldr	r3, [pc, #408]	; (8017e38 <_dtoa_r+0x608>)
 8017ca0:	ec51 0b17 	vmov	r0, r1, d7
 8017ca4:	f7e8 fcc0 	bl	8000628 <__aeabi_dmul>
 8017ca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017cac:	f7e8 ff42 	bl	8000b34 <__aeabi_dcmpge>
 8017cb0:	464f      	mov	r7, r9
 8017cb2:	464e      	mov	r6, r9
 8017cb4:	2800      	cmp	r0, #0
 8017cb6:	f040 8234 	bne.w	8018122 <_dtoa_r+0x8f2>
 8017cba:	2331      	movs	r3, #49	; 0x31
 8017cbc:	f10b 0501 	add.w	r5, fp, #1
 8017cc0:	f88b 3000 	strb.w	r3, [fp]
 8017cc4:	f10a 0a01 	add.w	sl, sl, #1
 8017cc8:	e22f      	b.n	801812a <_dtoa_r+0x8fa>
 8017cca:	07f2      	lsls	r2, r6, #31
 8017ccc:	d505      	bpl.n	8017cda <_dtoa_r+0x4aa>
 8017cce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017cd2:	f7e8 fca9 	bl	8000628 <__aeabi_dmul>
 8017cd6:	3501      	adds	r5, #1
 8017cd8:	2301      	movs	r3, #1
 8017cda:	1076      	asrs	r6, r6, #1
 8017cdc:	3708      	adds	r7, #8
 8017cde:	e772      	b.n	8017bc6 <_dtoa_r+0x396>
 8017ce0:	2502      	movs	r5, #2
 8017ce2:	e774      	b.n	8017bce <_dtoa_r+0x39e>
 8017ce4:	f8cd a020 	str.w	sl, [sp, #32]
 8017ce8:	464f      	mov	r7, r9
 8017cea:	e791      	b.n	8017c10 <_dtoa_r+0x3e0>
 8017cec:	4b4d      	ldr	r3, [pc, #308]	; (8017e24 <_dtoa_r+0x5f4>)
 8017cee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017cf2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8017cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d047      	beq.n	8017d8c <_dtoa_r+0x55c>
 8017cfc:	4602      	mov	r2, r0
 8017cfe:	460b      	mov	r3, r1
 8017d00:	2000      	movs	r0, #0
 8017d02:	494e      	ldr	r1, [pc, #312]	; (8017e3c <_dtoa_r+0x60c>)
 8017d04:	f7e8 fdba 	bl	800087c <__aeabi_ddiv>
 8017d08:	462a      	mov	r2, r5
 8017d0a:	4633      	mov	r3, r6
 8017d0c:	f7e8 fad4 	bl	80002b8 <__aeabi_dsub>
 8017d10:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017d14:	465d      	mov	r5, fp
 8017d16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017d1a:	f7e8 ff35 	bl	8000b88 <__aeabi_d2iz>
 8017d1e:	4606      	mov	r6, r0
 8017d20:	f7e8 fc18 	bl	8000554 <__aeabi_i2d>
 8017d24:	4602      	mov	r2, r0
 8017d26:	460b      	mov	r3, r1
 8017d28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017d2c:	f7e8 fac4 	bl	80002b8 <__aeabi_dsub>
 8017d30:	3630      	adds	r6, #48	; 0x30
 8017d32:	f805 6b01 	strb.w	r6, [r5], #1
 8017d36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017d3a:	e9cd 0100 	strd	r0, r1, [sp]
 8017d3e:	f7e8 fee5 	bl	8000b0c <__aeabi_dcmplt>
 8017d42:	2800      	cmp	r0, #0
 8017d44:	d163      	bne.n	8017e0e <_dtoa_r+0x5de>
 8017d46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017d4a:	2000      	movs	r0, #0
 8017d4c:	4937      	ldr	r1, [pc, #220]	; (8017e2c <_dtoa_r+0x5fc>)
 8017d4e:	f7e8 fab3 	bl	80002b8 <__aeabi_dsub>
 8017d52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017d56:	f7e8 fed9 	bl	8000b0c <__aeabi_dcmplt>
 8017d5a:	2800      	cmp	r0, #0
 8017d5c:	f040 80b7 	bne.w	8017ece <_dtoa_r+0x69e>
 8017d60:	eba5 030b 	sub.w	r3, r5, fp
 8017d64:	429f      	cmp	r7, r3
 8017d66:	f77f af7c 	ble.w	8017c62 <_dtoa_r+0x432>
 8017d6a:	2200      	movs	r2, #0
 8017d6c:	4b30      	ldr	r3, [pc, #192]	; (8017e30 <_dtoa_r+0x600>)
 8017d6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017d72:	f7e8 fc59 	bl	8000628 <__aeabi_dmul>
 8017d76:	2200      	movs	r2, #0
 8017d78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017d7c:	4b2c      	ldr	r3, [pc, #176]	; (8017e30 <_dtoa_r+0x600>)
 8017d7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017d82:	f7e8 fc51 	bl	8000628 <__aeabi_dmul>
 8017d86:	e9cd 0100 	strd	r0, r1, [sp]
 8017d8a:	e7c4      	b.n	8017d16 <_dtoa_r+0x4e6>
 8017d8c:	462a      	mov	r2, r5
 8017d8e:	4633      	mov	r3, r6
 8017d90:	f7e8 fc4a 	bl	8000628 <__aeabi_dmul>
 8017d94:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017d98:	eb0b 0507 	add.w	r5, fp, r7
 8017d9c:	465e      	mov	r6, fp
 8017d9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017da2:	f7e8 fef1 	bl	8000b88 <__aeabi_d2iz>
 8017da6:	4607      	mov	r7, r0
 8017da8:	f7e8 fbd4 	bl	8000554 <__aeabi_i2d>
 8017dac:	3730      	adds	r7, #48	; 0x30
 8017dae:	4602      	mov	r2, r0
 8017db0:	460b      	mov	r3, r1
 8017db2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017db6:	f7e8 fa7f 	bl	80002b8 <__aeabi_dsub>
 8017dba:	f806 7b01 	strb.w	r7, [r6], #1
 8017dbe:	42ae      	cmp	r6, r5
 8017dc0:	e9cd 0100 	strd	r0, r1, [sp]
 8017dc4:	f04f 0200 	mov.w	r2, #0
 8017dc8:	d126      	bne.n	8017e18 <_dtoa_r+0x5e8>
 8017dca:	4b1c      	ldr	r3, [pc, #112]	; (8017e3c <_dtoa_r+0x60c>)
 8017dcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017dd0:	f7e8 fa74 	bl	80002bc <__adddf3>
 8017dd4:	4602      	mov	r2, r0
 8017dd6:	460b      	mov	r3, r1
 8017dd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ddc:	f7e8 feb4 	bl	8000b48 <__aeabi_dcmpgt>
 8017de0:	2800      	cmp	r0, #0
 8017de2:	d174      	bne.n	8017ece <_dtoa_r+0x69e>
 8017de4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017de8:	2000      	movs	r0, #0
 8017dea:	4914      	ldr	r1, [pc, #80]	; (8017e3c <_dtoa_r+0x60c>)
 8017dec:	f7e8 fa64 	bl	80002b8 <__aeabi_dsub>
 8017df0:	4602      	mov	r2, r0
 8017df2:	460b      	mov	r3, r1
 8017df4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017df8:	f7e8 fe88 	bl	8000b0c <__aeabi_dcmplt>
 8017dfc:	2800      	cmp	r0, #0
 8017dfe:	f43f af30 	beq.w	8017c62 <_dtoa_r+0x432>
 8017e02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017e06:	2b30      	cmp	r3, #48	; 0x30
 8017e08:	f105 32ff 	add.w	r2, r5, #4294967295
 8017e0c:	d002      	beq.n	8017e14 <_dtoa_r+0x5e4>
 8017e0e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017e12:	e04a      	b.n	8017eaa <_dtoa_r+0x67a>
 8017e14:	4615      	mov	r5, r2
 8017e16:	e7f4      	b.n	8017e02 <_dtoa_r+0x5d2>
 8017e18:	4b05      	ldr	r3, [pc, #20]	; (8017e30 <_dtoa_r+0x600>)
 8017e1a:	f7e8 fc05 	bl	8000628 <__aeabi_dmul>
 8017e1e:	e9cd 0100 	strd	r0, r1, [sp]
 8017e22:	e7bc      	b.n	8017d9e <_dtoa_r+0x56e>
 8017e24:	0801a730 	.word	0x0801a730
 8017e28:	0801a708 	.word	0x0801a708
 8017e2c:	3ff00000 	.word	0x3ff00000
 8017e30:	40240000 	.word	0x40240000
 8017e34:	401c0000 	.word	0x401c0000
 8017e38:	40140000 	.word	0x40140000
 8017e3c:	3fe00000 	.word	0x3fe00000
 8017e40:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017e44:	465d      	mov	r5, fp
 8017e46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017e4a:	4630      	mov	r0, r6
 8017e4c:	4639      	mov	r1, r7
 8017e4e:	f7e8 fd15 	bl	800087c <__aeabi_ddiv>
 8017e52:	f7e8 fe99 	bl	8000b88 <__aeabi_d2iz>
 8017e56:	4680      	mov	r8, r0
 8017e58:	f7e8 fb7c 	bl	8000554 <__aeabi_i2d>
 8017e5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017e60:	f7e8 fbe2 	bl	8000628 <__aeabi_dmul>
 8017e64:	4602      	mov	r2, r0
 8017e66:	460b      	mov	r3, r1
 8017e68:	4630      	mov	r0, r6
 8017e6a:	4639      	mov	r1, r7
 8017e6c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017e70:	f7e8 fa22 	bl	80002b8 <__aeabi_dsub>
 8017e74:	f805 6b01 	strb.w	r6, [r5], #1
 8017e78:	eba5 060b 	sub.w	r6, r5, fp
 8017e7c:	45b1      	cmp	r9, r6
 8017e7e:	4602      	mov	r2, r0
 8017e80:	460b      	mov	r3, r1
 8017e82:	d139      	bne.n	8017ef8 <_dtoa_r+0x6c8>
 8017e84:	f7e8 fa1a 	bl	80002bc <__adddf3>
 8017e88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017e8c:	4606      	mov	r6, r0
 8017e8e:	460f      	mov	r7, r1
 8017e90:	f7e8 fe5a 	bl	8000b48 <__aeabi_dcmpgt>
 8017e94:	b9c8      	cbnz	r0, 8017eca <_dtoa_r+0x69a>
 8017e96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017e9a:	4630      	mov	r0, r6
 8017e9c:	4639      	mov	r1, r7
 8017e9e:	f7e8 fe2b 	bl	8000af8 <__aeabi_dcmpeq>
 8017ea2:	b110      	cbz	r0, 8017eaa <_dtoa_r+0x67a>
 8017ea4:	f018 0f01 	tst.w	r8, #1
 8017ea8:	d10f      	bne.n	8017eca <_dtoa_r+0x69a>
 8017eaa:	9904      	ldr	r1, [sp, #16]
 8017eac:	4620      	mov	r0, r4
 8017eae:	f000 fe18 	bl	8018ae2 <_Bfree>
 8017eb2:	2300      	movs	r3, #0
 8017eb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017eb6:	702b      	strb	r3, [r5, #0]
 8017eb8:	f10a 0301 	add.w	r3, sl, #1
 8017ebc:	6013      	str	r3, [r2, #0]
 8017ebe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	f000 8241 	beq.w	8018348 <_dtoa_r+0xb18>
 8017ec6:	601d      	str	r5, [r3, #0]
 8017ec8:	e23e      	b.n	8018348 <_dtoa_r+0xb18>
 8017eca:	f8cd a020 	str.w	sl, [sp, #32]
 8017ece:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017ed2:	2a39      	cmp	r2, #57	; 0x39
 8017ed4:	f105 33ff 	add.w	r3, r5, #4294967295
 8017ed8:	d108      	bne.n	8017eec <_dtoa_r+0x6bc>
 8017eda:	459b      	cmp	fp, r3
 8017edc:	d10a      	bne.n	8017ef4 <_dtoa_r+0x6c4>
 8017ede:	9b08      	ldr	r3, [sp, #32]
 8017ee0:	3301      	adds	r3, #1
 8017ee2:	9308      	str	r3, [sp, #32]
 8017ee4:	2330      	movs	r3, #48	; 0x30
 8017ee6:	f88b 3000 	strb.w	r3, [fp]
 8017eea:	465b      	mov	r3, fp
 8017eec:	781a      	ldrb	r2, [r3, #0]
 8017eee:	3201      	adds	r2, #1
 8017ef0:	701a      	strb	r2, [r3, #0]
 8017ef2:	e78c      	b.n	8017e0e <_dtoa_r+0x5de>
 8017ef4:	461d      	mov	r5, r3
 8017ef6:	e7ea      	b.n	8017ece <_dtoa_r+0x69e>
 8017ef8:	2200      	movs	r2, #0
 8017efa:	4b9b      	ldr	r3, [pc, #620]	; (8018168 <_dtoa_r+0x938>)
 8017efc:	f7e8 fb94 	bl	8000628 <__aeabi_dmul>
 8017f00:	2200      	movs	r2, #0
 8017f02:	2300      	movs	r3, #0
 8017f04:	4606      	mov	r6, r0
 8017f06:	460f      	mov	r7, r1
 8017f08:	f7e8 fdf6 	bl	8000af8 <__aeabi_dcmpeq>
 8017f0c:	2800      	cmp	r0, #0
 8017f0e:	d09a      	beq.n	8017e46 <_dtoa_r+0x616>
 8017f10:	e7cb      	b.n	8017eaa <_dtoa_r+0x67a>
 8017f12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017f14:	2a00      	cmp	r2, #0
 8017f16:	f000 808b 	beq.w	8018030 <_dtoa_r+0x800>
 8017f1a:	9a06      	ldr	r2, [sp, #24]
 8017f1c:	2a01      	cmp	r2, #1
 8017f1e:	dc6e      	bgt.n	8017ffe <_dtoa_r+0x7ce>
 8017f20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017f22:	2a00      	cmp	r2, #0
 8017f24:	d067      	beq.n	8017ff6 <_dtoa_r+0x7c6>
 8017f26:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017f2a:	9f07      	ldr	r7, [sp, #28]
 8017f2c:	9d05      	ldr	r5, [sp, #20]
 8017f2e:	9a05      	ldr	r2, [sp, #20]
 8017f30:	2101      	movs	r1, #1
 8017f32:	441a      	add	r2, r3
 8017f34:	4620      	mov	r0, r4
 8017f36:	9205      	str	r2, [sp, #20]
 8017f38:	4498      	add	r8, r3
 8017f3a:	f000 feb0 	bl	8018c9e <__i2b>
 8017f3e:	4606      	mov	r6, r0
 8017f40:	2d00      	cmp	r5, #0
 8017f42:	dd0c      	ble.n	8017f5e <_dtoa_r+0x72e>
 8017f44:	f1b8 0f00 	cmp.w	r8, #0
 8017f48:	dd09      	ble.n	8017f5e <_dtoa_r+0x72e>
 8017f4a:	4545      	cmp	r5, r8
 8017f4c:	9a05      	ldr	r2, [sp, #20]
 8017f4e:	462b      	mov	r3, r5
 8017f50:	bfa8      	it	ge
 8017f52:	4643      	movge	r3, r8
 8017f54:	1ad2      	subs	r2, r2, r3
 8017f56:	9205      	str	r2, [sp, #20]
 8017f58:	1aed      	subs	r5, r5, r3
 8017f5a:	eba8 0803 	sub.w	r8, r8, r3
 8017f5e:	9b07      	ldr	r3, [sp, #28]
 8017f60:	b1eb      	cbz	r3, 8017f9e <_dtoa_r+0x76e>
 8017f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d067      	beq.n	8018038 <_dtoa_r+0x808>
 8017f68:	b18f      	cbz	r7, 8017f8e <_dtoa_r+0x75e>
 8017f6a:	4631      	mov	r1, r6
 8017f6c:	463a      	mov	r2, r7
 8017f6e:	4620      	mov	r0, r4
 8017f70:	f000 ff34 	bl	8018ddc <__pow5mult>
 8017f74:	9a04      	ldr	r2, [sp, #16]
 8017f76:	4601      	mov	r1, r0
 8017f78:	4606      	mov	r6, r0
 8017f7a:	4620      	mov	r0, r4
 8017f7c:	f000 fe98 	bl	8018cb0 <__multiply>
 8017f80:	9904      	ldr	r1, [sp, #16]
 8017f82:	9008      	str	r0, [sp, #32]
 8017f84:	4620      	mov	r0, r4
 8017f86:	f000 fdac 	bl	8018ae2 <_Bfree>
 8017f8a:	9b08      	ldr	r3, [sp, #32]
 8017f8c:	9304      	str	r3, [sp, #16]
 8017f8e:	9b07      	ldr	r3, [sp, #28]
 8017f90:	1bda      	subs	r2, r3, r7
 8017f92:	d004      	beq.n	8017f9e <_dtoa_r+0x76e>
 8017f94:	9904      	ldr	r1, [sp, #16]
 8017f96:	4620      	mov	r0, r4
 8017f98:	f000 ff20 	bl	8018ddc <__pow5mult>
 8017f9c:	9004      	str	r0, [sp, #16]
 8017f9e:	2101      	movs	r1, #1
 8017fa0:	4620      	mov	r0, r4
 8017fa2:	f000 fe7c 	bl	8018c9e <__i2b>
 8017fa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017fa8:	4607      	mov	r7, r0
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	f000 81d0 	beq.w	8018350 <_dtoa_r+0xb20>
 8017fb0:	461a      	mov	r2, r3
 8017fb2:	4601      	mov	r1, r0
 8017fb4:	4620      	mov	r0, r4
 8017fb6:	f000 ff11 	bl	8018ddc <__pow5mult>
 8017fba:	9b06      	ldr	r3, [sp, #24]
 8017fbc:	2b01      	cmp	r3, #1
 8017fbe:	4607      	mov	r7, r0
 8017fc0:	dc40      	bgt.n	8018044 <_dtoa_r+0x814>
 8017fc2:	9b00      	ldr	r3, [sp, #0]
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d139      	bne.n	801803c <_dtoa_r+0x80c>
 8017fc8:	9b01      	ldr	r3, [sp, #4]
 8017fca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d136      	bne.n	8018040 <_dtoa_r+0x810>
 8017fd2:	9b01      	ldr	r3, [sp, #4]
 8017fd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017fd8:	0d1b      	lsrs	r3, r3, #20
 8017fda:	051b      	lsls	r3, r3, #20
 8017fdc:	b12b      	cbz	r3, 8017fea <_dtoa_r+0x7ba>
 8017fde:	9b05      	ldr	r3, [sp, #20]
 8017fe0:	3301      	adds	r3, #1
 8017fe2:	9305      	str	r3, [sp, #20]
 8017fe4:	f108 0801 	add.w	r8, r8, #1
 8017fe8:	2301      	movs	r3, #1
 8017fea:	9307      	str	r3, [sp, #28]
 8017fec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d12a      	bne.n	8018048 <_dtoa_r+0x818>
 8017ff2:	2001      	movs	r0, #1
 8017ff4:	e030      	b.n	8018058 <_dtoa_r+0x828>
 8017ff6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017ff8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017ffc:	e795      	b.n	8017f2a <_dtoa_r+0x6fa>
 8017ffe:	9b07      	ldr	r3, [sp, #28]
 8018000:	f109 37ff 	add.w	r7, r9, #4294967295
 8018004:	42bb      	cmp	r3, r7
 8018006:	bfbf      	itttt	lt
 8018008:	9b07      	ldrlt	r3, [sp, #28]
 801800a:	9707      	strlt	r7, [sp, #28]
 801800c:	1afa      	sublt	r2, r7, r3
 801800e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8018010:	bfbb      	ittet	lt
 8018012:	189b      	addlt	r3, r3, r2
 8018014:	930e      	strlt	r3, [sp, #56]	; 0x38
 8018016:	1bdf      	subge	r7, r3, r7
 8018018:	2700      	movlt	r7, #0
 801801a:	f1b9 0f00 	cmp.w	r9, #0
 801801e:	bfb5      	itete	lt
 8018020:	9b05      	ldrlt	r3, [sp, #20]
 8018022:	9d05      	ldrge	r5, [sp, #20]
 8018024:	eba3 0509 	sublt.w	r5, r3, r9
 8018028:	464b      	movge	r3, r9
 801802a:	bfb8      	it	lt
 801802c:	2300      	movlt	r3, #0
 801802e:	e77e      	b.n	8017f2e <_dtoa_r+0x6fe>
 8018030:	9f07      	ldr	r7, [sp, #28]
 8018032:	9d05      	ldr	r5, [sp, #20]
 8018034:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8018036:	e783      	b.n	8017f40 <_dtoa_r+0x710>
 8018038:	9a07      	ldr	r2, [sp, #28]
 801803a:	e7ab      	b.n	8017f94 <_dtoa_r+0x764>
 801803c:	2300      	movs	r3, #0
 801803e:	e7d4      	b.n	8017fea <_dtoa_r+0x7ba>
 8018040:	9b00      	ldr	r3, [sp, #0]
 8018042:	e7d2      	b.n	8017fea <_dtoa_r+0x7ba>
 8018044:	2300      	movs	r3, #0
 8018046:	9307      	str	r3, [sp, #28]
 8018048:	693b      	ldr	r3, [r7, #16]
 801804a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801804e:	6918      	ldr	r0, [r3, #16]
 8018050:	f000 fdd7 	bl	8018c02 <__hi0bits>
 8018054:	f1c0 0020 	rsb	r0, r0, #32
 8018058:	4440      	add	r0, r8
 801805a:	f010 001f 	ands.w	r0, r0, #31
 801805e:	d047      	beq.n	80180f0 <_dtoa_r+0x8c0>
 8018060:	f1c0 0320 	rsb	r3, r0, #32
 8018064:	2b04      	cmp	r3, #4
 8018066:	dd3b      	ble.n	80180e0 <_dtoa_r+0x8b0>
 8018068:	9b05      	ldr	r3, [sp, #20]
 801806a:	f1c0 001c 	rsb	r0, r0, #28
 801806e:	4403      	add	r3, r0
 8018070:	9305      	str	r3, [sp, #20]
 8018072:	4405      	add	r5, r0
 8018074:	4480      	add	r8, r0
 8018076:	9b05      	ldr	r3, [sp, #20]
 8018078:	2b00      	cmp	r3, #0
 801807a:	dd05      	ble.n	8018088 <_dtoa_r+0x858>
 801807c:	461a      	mov	r2, r3
 801807e:	9904      	ldr	r1, [sp, #16]
 8018080:	4620      	mov	r0, r4
 8018082:	f000 fef9 	bl	8018e78 <__lshift>
 8018086:	9004      	str	r0, [sp, #16]
 8018088:	f1b8 0f00 	cmp.w	r8, #0
 801808c:	dd05      	ble.n	801809a <_dtoa_r+0x86a>
 801808e:	4639      	mov	r1, r7
 8018090:	4642      	mov	r2, r8
 8018092:	4620      	mov	r0, r4
 8018094:	f000 fef0 	bl	8018e78 <__lshift>
 8018098:	4607      	mov	r7, r0
 801809a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801809c:	b353      	cbz	r3, 80180f4 <_dtoa_r+0x8c4>
 801809e:	4639      	mov	r1, r7
 80180a0:	9804      	ldr	r0, [sp, #16]
 80180a2:	f000 ff3d 	bl	8018f20 <__mcmp>
 80180a6:	2800      	cmp	r0, #0
 80180a8:	da24      	bge.n	80180f4 <_dtoa_r+0x8c4>
 80180aa:	2300      	movs	r3, #0
 80180ac:	220a      	movs	r2, #10
 80180ae:	9904      	ldr	r1, [sp, #16]
 80180b0:	4620      	mov	r0, r4
 80180b2:	f000 fd2d 	bl	8018b10 <__multadd>
 80180b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80180b8:	9004      	str	r0, [sp, #16]
 80180ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80180be:	2b00      	cmp	r3, #0
 80180c0:	f000 814d 	beq.w	801835e <_dtoa_r+0xb2e>
 80180c4:	2300      	movs	r3, #0
 80180c6:	4631      	mov	r1, r6
 80180c8:	220a      	movs	r2, #10
 80180ca:	4620      	mov	r0, r4
 80180cc:	f000 fd20 	bl	8018b10 <__multadd>
 80180d0:	9b02      	ldr	r3, [sp, #8]
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	4606      	mov	r6, r0
 80180d6:	dc4f      	bgt.n	8018178 <_dtoa_r+0x948>
 80180d8:	9b06      	ldr	r3, [sp, #24]
 80180da:	2b02      	cmp	r3, #2
 80180dc:	dd4c      	ble.n	8018178 <_dtoa_r+0x948>
 80180de:	e011      	b.n	8018104 <_dtoa_r+0x8d4>
 80180e0:	d0c9      	beq.n	8018076 <_dtoa_r+0x846>
 80180e2:	9a05      	ldr	r2, [sp, #20]
 80180e4:	331c      	adds	r3, #28
 80180e6:	441a      	add	r2, r3
 80180e8:	9205      	str	r2, [sp, #20]
 80180ea:	441d      	add	r5, r3
 80180ec:	4498      	add	r8, r3
 80180ee:	e7c2      	b.n	8018076 <_dtoa_r+0x846>
 80180f0:	4603      	mov	r3, r0
 80180f2:	e7f6      	b.n	80180e2 <_dtoa_r+0x8b2>
 80180f4:	f1b9 0f00 	cmp.w	r9, #0
 80180f8:	dc38      	bgt.n	801816c <_dtoa_r+0x93c>
 80180fa:	9b06      	ldr	r3, [sp, #24]
 80180fc:	2b02      	cmp	r3, #2
 80180fe:	dd35      	ble.n	801816c <_dtoa_r+0x93c>
 8018100:	f8cd 9008 	str.w	r9, [sp, #8]
 8018104:	9b02      	ldr	r3, [sp, #8]
 8018106:	b963      	cbnz	r3, 8018122 <_dtoa_r+0x8f2>
 8018108:	4639      	mov	r1, r7
 801810a:	2205      	movs	r2, #5
 801810c:	4620      	mov	r0, r4
 801810e:	f000 fcff 	bl	8018b10 <__multadd>
 8018112:	4601      	mov	r1, r0
 8018114:	4607      	mov	r7, r0
 8018116:	9804      	ldr	r0, [sp, #16]
 8018118:	f000 ff02 	bl	8018f20 <__mcmp>
 801811c:	2800      	cmp	r0, #0
 801811e:	f73f adcc 	bgt.w	8017cba <_dtoa_r+0x48a>
 8018122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018124:	465d      	mov	r5, fp
 8018126:	ea6f 0a03 	mvn.w	sl, r3
 801812a:	f04f 0900 	mov.w	r9, #0
 801812e:	4639      	mov	r1, r7
 8018130:	4620      	mov	r0, r4
 8018132:	f000 fcd6 	bl	8018ae2 <_Bfree>
 8018136:	2e00      	cmp	r6, #0
 8018138:	f43f aeb7 	beq.w	8017eaa <_dtoa_r+0x67a>
 801813c:	f1b9 0f00 	cmp.w	r9, #0
 8018140:	d005      	beq.n	801814e <_dtoa_r+0x91e>
 8018142:	45b1      	cmp	r9, r6
 8018144:	d003      	beq.n	801814e <_dtoa_r+0x91e>
 8018146:	4649      	mov	r1, r9
 8018148:	4620      	mov	r0, r4
 801814a:	f000 fcca 	bl	8018ae2 <_Bfree>
 801814e:	4631      	mov	r1, r6
 8018150:	4620      	mov	r0, r4
 8018152:	f000 fcc6 	bl	8018ae2 <_Bfree>
 8018156:	e6a8      	b.n	8017eaa <_dtoa_r+0x67a>
 8018158:	2700      	movs	r7, #0
 801815a:	463e      	mov	r6, r7
 801815c:	e7e1      	b.n	8018122 <_dtoa_r+0x8f2>
 801815e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8018162:	463e      	mov	r6, r7
 8018164:	e5a9      	b.n	8017cba <_dtoa_r+0x48a>
 8018166:	bf00      	nop
 8018168:	40240000 	.word	0x40240000
 801816c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801816e:	f8cd 9008 	str.w	r9, [sp, #8]
 8018172:	2b00      	cmp	r3, #0
 8018174:	f000 80fa 	beq.w	801836c <_dtoa_r+0xb3c>
 8018178:	2d00      	cmp	r5, #0
 801817a:	dd05      	ble.n	8018188 <_dtoa_r+0x958>
 801817c:	4631      	mov	r1, r6
 801817e:	462a      	mov	r2, r5
 8018180:	4620      	mov	r0, r4
 8018182:	f000 fe79 	bl	8018e78 <__lshift>
 8018186:	4606      	mov	r6, r0
 8018188:	9b07      	ldr	r3, [sp, #28]
 801818a:	2b00      	cmp	r3, #0
 801818c:	d04c      	beq.n	8018228 <_dtoa_r+0x9f8>
 801818e:	6871      	ldr	r1, [r6, #4]
 8018190:	4620      	mov	r0, r4
 8018192:	f000 fc72 	bl	8018a7a <_Balloc>
 8018196:	6932      	ldr	r2, [r6, #16]
 8018198:	3202      	adds	r2, #2
 801819a:	4605      	mov	r5, r0
 801819c:	0092      	lsls	r2, r2, #2
 801819e:	f106 010c 	add.w	r1, r6, #12
 80181a2:	300c      	adds	r0, #12
 80181a4:	f000 fc5e 	bl	8018a64 <memcpy>
 80181a8:	2201      	movs	r2, #1
 80181aa:	4629      	mov	r1, r5
 80181ac:	4620      	mov	r0, r4
 80181ae:	f000 fe63 	bl	8018e78 <__lshift>
 80181b2:	9b00      	ldr	r3, [sp, #0]
 80181b4:	f8cd b014 	str.w	fp, [sp, #20]
 80181b8:	f003 0301 	and.w	r3, r3, #1
 80181bc:	46b1      	mov	r9, r6
 80181be:	9307      	str	r3, [sp, #28]
 80181c0:	4606      	mov	r6, r0
 80181c2:	4639      	mov	r1, r7
 80181c4:	9804      	ldr	r0, [sp, #16]
 80181c6:	f7ff faa5 	bl	8017714 <quorem>
 80181ca:	4649      	mov	r1, r9
 80181cc:	4605      	mov	r5, r0
 80181ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80181d2:	9804      	ldr	r0, [sp, #16]
 80181d4:	f000 fea4 	bl	8018f20 <__mcmp>
 80181d8:	4632      	mov	r2, r6
 80181da:	9000      	str	r0, [sp, #0]
 80181dc:	4639      	mov	r1, r7
 80181de:	4620      	mov	r0, r4
 80181e0:	f000 feb8 	bl	8018f54 <__mdiff>
 80181e4:	68c3      	ldr	r3, [r0, #12]
 80181e6:	4602      	mov	r2, r0
 80181e8:	bb03      	cbnz	r3, 801822c <_dtoa_r+0x9fc>
 80181ea:	4601      	mov	r1, r0
 80181ec:	9008      	str	r0, [sp, #32]
 80181ee:	9804      	ldr	r0, [sp, #16]
 80181f0:	f000 fe96 	bl	8018f20 <__mcmp>
 80181f4:	9a08      	ldr	r2, [sp, #32]
 80181f6:	4603      	mov	r3, r0
 80181f8:	4611      	mov	r1, r2
 80181fa:	4620      	mov	r0, r4
 80181fc:	9308      	str	r3, [sp, #32]
 80181fe:	f000 fc70 	bl	8018ae2 <_Bfree>
 8018202:	9b08      	ldr	r3, [sp, #32]
 8018204:	b9a3      	cbnz	r3, 8018230 <_dtoa_r+0xa00>
 8018206:	9a06      	ldr	r2, [sp, #24]
 8018208:	b992      	cbnz	r2, 8018230 <_dtoa_r+0xa00>
 801820a:	9a07      	ldr	r2, [sp, #28]
 801820c:	b982      	cbnz	r2, 8018230 <_dtoa_r+0xa00>
 801820e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018212:	d029      	beq.n	8018268 <_dtoa_r+0xa38>
 8018214:	9b00      	ldr	r3, [sp, #0]
 8018216:	2b00      	cmp	r3, #0
 8018218:	dd01      	ble.n	801821e <_dtoa_r+0x9ee>
 801821a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801821e:	9b05      	ldr	r3, [sp, #20]
 8018220:	1c5d      	adds	r5, r3, #1
 8018222:	f883 8000 	strb.w	r8, [r3]
 8018226:	e782      	b.n	801812e <_dtoa_r+0x8fe>
 8018228:	4630      	mov	r0, r6
 801822a:	e7c2      	b.n	80181b2 <_dtoa_r+0x982>
 801822c:	2301      	movs	r3, #1
 801822e:	e7e3      	b.n	80181f8 <_dtoa_r+0x9c8>
 8018230:	9a00      	ldr	r2, [sp, #0]
 8018232:	2a00      	cmp	r2, #0
 8018234:	db04      	blt.n	8018240 <_dtoa_r+0xa10>
 8018236:	d125      	bne.n	8018284 <_dtoa_r+0xa54>
 8018238:	9a06      	ldr	r2, [sp, #24]
 801823a:	bb1a      	cbnz	r2, 8018284 <_dtoa_r+0xa54>
 801823c:	9a07      	ldr	r2, [sp, #28]
 801823e:	bb0a      	cbnz	r2, 8018284 <_dtoa_r+0xa54>
 8018240:	2b00      	cmp	r3, #0
 8018242:	ddec      	ble.n	801821e <_dtoa_r+0x9ee>
 8018244:	2201      	movs	r2, #1
 8018246:	9904      	ldr	r1, [sp, #16]
 8018248:	4620      	mov	r0, r4
 801824a:	f000 fe15 	bl	8018e78 <__lshift>
 801824e:	4639      	mov	r1, r7
 8018250:	9004      	str	r0, [sp, #16]
 8018252:	f000 fe65 	bl	8018f20 <__mcmp>
 8018256:	2800      	cmp	r0, #0
 8018258:	dc03      	bgt.n	8018262 <_dtoa_r+0xa32>
 801825a:	d1e0      	bne.n	801821e <_dtoa_r+0x9ee>
 801825c:	f018 0f01 	tst.w	r8, #1
 8018260:	d0dd      	beq.n	801821e <_dtoa_r+0x9ee>
 8018262:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018266:	d1d8      	bne.n	801821a <_dtoa_r+0x9ea>
 8018268:	9b05      	ldr	r3, [sp, #20]
 801826a:	9a05      	ldr	r2, [sp, #20]
 801826c:	1c5d      	adds	r5, r3, #1
 801826e:	2339      	movs	r3, #57	; 0x39
 8018270:	7013      	strb	r3, [r2, #0]
 8018272:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018276:	2b39      	cmp	r3, #57	; 0x39
 8018278:	f105 32ff 	add.w	r2, r5, #4294967295
 801827c:	d04f      	beq.n	801831e <_dtoa_r+0xaee>
 801827e:	3301      	adds	r3, #1
 8018280:	7013      	strb	r3, [r2, #0]
 8018282:	e754      	b.n	801812e <_dtoa_r+0x8fe>
 8018284:	9a05      	ldr	r2, [sp, #20]
 8018286:	2b00      	cmp	r3, #0
 8018288:	f102 0501 	add.w	r5, r2, #1
 801828c:	dd06      	ble.n	801829c <_dtoa_r+0xa6c>
 801828e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018292:	d0e9      	beq.n	8018268 <_dtoa_r+0xa38>
 8018294:	f108 0801 	add.w	r8, r8, #1
 8018298:	9b05      	ldr	r3, [sp, #20]
 801829a:	e7c2      	b.n	8018222 <_dtoa_r+0x9f2>
 801829c:	9a02      	ldr	r2, [sp, #8]
 801829e:	f805 8c01 	strb.w	r8, [r5, #-1]
 80182a2:	eba5 030b 	sub.w	r3, r5, fp
 80182a6:	4293      	cmp	r3, r2
 80182a8:	d021      	beq.n	80182ee <_dtoa_r+0xabe>
 80182aa:	2300      	movs	r3, #0
 80182ac:	220a      	movs	r2, #10
 80182ae:	9904      	ldr	r1, [sp, #16]
 80182b0:	4620      	mov	r0, r4
 80182b2:	f000 fc2d 	bl	8018b10 <__multadd>
 80182b6:	45b1      	cmp	r9, r6
 80182b8:	9004      	str	r0, [sp, #16]
 80182ba:	f04f 0300 	mov.w	r3, #0
 80182be:	f04f 020a 	mov.w	r2, #10
 80182c2:	4649      	mov	r1, r9
 80182c4:	4620      	mov	r0, r4
 80182c6:	d105      	bne.n	80182d4 <_dtoa_r+0xaa4>
 80182c8:	f000 fc22 	bl	8018b10 <__multadd>
 80182cc:	4681      	mov	r9, r0
 80182ce:	4606      	mov	r6, r0
 80182d0:	9505      	str	r5, [sp, #20]
 80182d2:	e776      	b.n	80181c2 <_dtoa_r+0x992>
 80182d4:	f000 fc1c 	bl	8018b10 <__multadd>
 80182d8:	4631      	mov	r1, r6
 80182da:	4681      	mov	r9, r0
 80182dc:	2300      	movs	r3, #0
 80182de:	220a      	movs	r2, #10
 80182e0:	4620      	mov	r0, r4
 80182e2:	f000 fc15 	bl	8018b10 <__multadd>
 80182e6:	4606      	mov	r6, r0
 80182e8:	e7f2      	b.n	80182d0 <_dtoa_r+0xaa0>
 80182ea:	f04f 0900 	mov.w	r9, #0
 80182ee:	2201      	movs	r2, #1
 80182f0:	9904      	ldr	r1, [sp, #16]
 80182f2:	4620      	mov	r0, r4
 80182f4:	f000 fdc0 	bl	8018e78 <__lshift>
 80182f8:	4639      	mov	r1, r7
 80182fa:	9004      	str	r0, [sp, #16]
 80182fc:	f000 fe10 	bl	8018f20 <__mcmp>
 8018300:	2800      	cmp	r0, #0
 8018302:	dcb6      	bgt.n	8018272 <_dtoa_r+0xa42>
 8018304:	d102      	bne.n	801830c <_dtoa_r+0xadc>
 8018306:	f018 0f01 	tst.w	r8, #1
 801830a:	d1b2      	bne.n	8018272 <_dtoa_r+0xa42>
 801830c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018310:	2b30      	cmp	r3, #48	; 0x30
 8018312:	f105 32ff 	add.w	r2, r5, #4294967295
 8018316:	f47f af0a 	bne.w	801812e <_dtoa_r+0x8fe>
 801831a:	4615      	mov	r5, r2
 801831c:	e7f6      	b.n	801830c <_dtoa_r+0xadc>
 801831e:	4593      	cmp	fp, r2
 8018320:	d105      	bne.n	801832e <_dtoa_r+0xafe>
 8018322:	2331      	movs	r3, #49	; 0x31
 8018324:	f10a 0a01 	add.w	sl, sl, #1
 8018328:	f88b 3000 	strb.w	r3, [fp]
 801832c:	e6ff      	b.n	801812e <_dtoa_r+0x8fe>
 801832e:	4615      	mov	r5, r2
 8018330:	e79f      	b.n	8018272 <_dtoa_r+0xa42>
 8018332:	f8df b064 	ldr.w	fp, [pc, #100]	; 8018398 <_dtoa_r+0xb68>
 8018336:	e007      	b.n	8018348 <_dtoa_r+0xb18>
 8018338:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801833a:	f8df b060 	ldr.w	fp, [pc, #96]	; 801839c <_dtoa_r+0xb6c>
 801833e:	b11b      	cbz	r3, 8018348 <_dtoa_r+0xb18>
 8018340:	f10b 0308 	add.w	r3, fp, #8
 8018344:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018346:	6013      	str	r3, [r2, #0]
 8018348:	4658      	mov	r0, fp
 801834a:	b017      	add	sp, #92	; 0x5c
 801834c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018350:	9b06      	ldr	r3, [sp, #24]
 8018352:	2b01      	cmp	r3, #1
 8018354:	f77f ae35 	ble.w	8017fc2 <_dtoa_r+0x792>
 8018358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801835a:	9307      	str	r3, [sp, #28]
 801835c:	e649      	b.n	8017ff2 <_dtoa_r+0x7c2>
 801835e:	9b02      	ldr	r3, [sp, #8]
 8018360:	2b00      	cmp	r3, #0
 8018362:	dc03      	bgt.n	801836c <_dtoa_r+0xb3c>
 8018364:	9b06      	ldr	r3, [sp, #24]
 8018366:	2b02      	cmp	r3, #2
 8018368:	f73f aecc 	bgt.w	8018104 <_dtoa_r+0x8d4>
 801836c:	465d      	mov	r5, fp
 801836e:	4639      	mov	r1, r7
 8018370:	9804      	ldr	r0, [sp, #16]
 8018372:	f7ff f9cf 	bl	8017714 <quorem>
 8018376:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801837a:	f805 8b01 	strb.w	r8, [r5], #1
 801837e:	9a02      	ldr	r2, [sp, #8]
 8018380:	eba5 030b 	sub.w	r3, r5, fp
 8018384:	429a      	cmp	r2, r3
 8018386:	ddb0      	ble.n	80182ea <_dtoa_r+0xaba>
 8018388:	2300      	movs	r3, #0
 801838a:	220a      	movs	r2, #10
 801838c:	9904      	ldr	r1, [sp, #16]
 801838e:	4620      	mov	r0, r4
 8018390:	f000 fbbe 	bl	8018b10 <__multadd>
 8018394:	9004      	str	r0, [sp, #16]
 8018396:	e7ea      	b.n	801836e <_dtoa_r+0xb3e>
 8018398:	0801a82b 	.word	0x0801a82b
 801839c:	0801a6f0 	.word	0x0801a6f0

080183a0 <rshift>:
 80183a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183a2:	6906      	ldr	r6, [r0, #16]
 80183a4:	114b      	asrs	r3, r1, #5
 80183a6:	429e      	cmp	r6, r3
 80183a8:	f100 0414 	add.w	r4, r0, #20
 80183ac:	dd30      	ble.n	8018410 <rshift+0x70>
 80183ae:	f011 011f 	ands.w	r1, r1, #31
 80183b2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80183b6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80183ba:	d108      	bne.n	80183ce <rshift+0x2e>
 80183bc:	4621      	mov	r1, r4
 80183be:	42b2      	cmp	r2, r6
 80183c0:	460b      	mov	r3, r1
 80183c2:	d211      	bcs.n	80183e8 <rshift+0x48>
 80183c4:	f852 3b04 	ldr.w	r3, [r2], #4
 80183c8:	f841 3b04 	str.w	r3, [r1], #4
 80183cc:	e7f7      	b.n	80183be <rshift+0x1e>
 80183ce:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80183d2:	f1c1 0c20 	rsb	ip, r1, #32
 80183d6:	40cd      	lsrs	r5, r1
 80183d8:	3204      	adds	r2, #4
 80183da:	4623      	mov	r3, r4
 80183dc:	42b2      	cmp	r2, r6
 80183de:	4617      	mov	r7, r2
 80183e0:	d30c      	bcc.n	80183fc <rshift+0x5c>
 80183e2:	601d      	str	r5, [r3, #0]
 80183e4:	b105      	cbz	r5, 80183e8 <rshift+0x48>
 80183e6:	3304      	adds	r3, #4
 80183e8:	1b1a      	subs	r2, r3, r4
 80183ea:	42a3      	cmp	r3, r4
 80183ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80183f0:	bf08      	it	eq
 80183f2:	2300      	moveq	r3, #0
 80183f4:	6102      	str	r2, [r0, #16]
 80183f6:	bf08      	it	eq
 80183f8:	6143      	streq	r3, [r0, #20]
 80183fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183fc:	683f      	ldr	r7, [r7, #0]
 80183fe:	fa07 f70c 	lsl.w	r7, r7, ip
 8018402:	433d      	orrs	r5, r7
 8018404:	f843 5b04 	str.w	r5, [r3], #4
 8018408:	f852 5b04 	ldr.w	r5, [r2], #4
 801840c:	40cd      	lsrs	r5, r1
 801840e:	e7e5      	b.n	80183dc <rshift+0x3c>
 8018410:	4623      	mov	r3, r4
 8018412:	e7e9      	b.n	80183e8 <rshift+0x48>

08018414 <__hexdig_fun>:
 8018414:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018418:	2b09      	cmp	r3, #9
 801841a:	d802      	bhi.n	8018422 <__hexdig_fun+0xe>
 801841c:	3820      	subs	r0, #32
 801841e:	b2c0      	uxtb	r0, r0
 8018420:	4770      	bx	lr
 8018422:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018426:	2b05      	cmp	r3, #5
 8018428:	d801      	bhi.n	801842e <__hexdig_fun+0x1a>
 801842a:	3847      	subs	r0, #71	; 0x47
 801842c:	e7f7      	b.n	801841e <__hexdig_fun+0xa>
 801842e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018432:	2b05      	cmp	r3, #5
 8018434:	d801      	bhi.n	801843a <__hexdig_fun+0x26>
 8018436:	3827      	subs	r0, #39	; 0x27
 8018438:	e7f1      	b.n	801841e <__hexdig_fun+0xa>
 801843a:	2000      	movs	r0, #0
 801843c:	4770      	bx	lr

0801843e <__gethex>:
 801843e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018442:	b08b      	sub	sp, #44	; 0x2c
 8018444:	468a      	mov	sl, r1
 8018446:	9002      	str	r0, [sp, #8]
 8018448:	9816      	ldr	r0, [sp, #88]	; 0x58
 801844a:	9306      	str	r3, [sp, #24]
 801844c:	4690      	mov	r8, r2
 801844e:	f000 fadf 	bl	8018a10 <__localeconv_l>
 8018452:	6803      	ldr	r3, [r0, #0]
 8018454:	9303      	str	r3, [sp, #12]
 8018456:	4618      	mov	r0, r3
 8018458:	f7e7 fed2 	bl	8000200 <strlen>
 801845c:	9b03      	ldr	r3, [sp, #12]
 801845e:	9001      	str	r0, [sp, #4]
 8018460:	4403      	add	r3, r0
 8018462:	f04f 0b00 	mov.w	fp, #0
 8018466:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801846a:	9307      	str	r3, [sp, #28]
 801846c:	f8da 3000 	ldr.w	r3, [sl]
 8018470:	3302      	adds	r3, #2
 8018472:	461f      	mov	r7, r3
 8018474:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018478:	2830      	cmp	r0, #48	; 0x30
 801847a:	d06c      	beq.n	8018556 <__gethex+0x118>
 801847c:	f7ff ffca 	bl	8018414 <__hexdig_fun>
 8018480:	4604      	mov	r4, r0
 8018482:	2800      	cmp	r0, #0
 8018484:	d16a      	bne.n	801855c <__gethex+0x11e>
 8018486:	9a01      	ldr	r2, [sp, #4]
 8018488:	9903      	ldr	r1, [sp, #12]
 801848a:	4638      	mov	r0, r7
 801848c:	f001 fc40 	bl	8019d10 <strncmp>
 8018490:	2800      	cmp	r0, #0
 8018492:	d166      	bne.n	8018562 <__gethex+0x124>
 8018494:	9b01      	ldr	r3, [sp, #4]
 8018496:	5cf8      	ldrb	r0, [r7, r3]
 8018498:	18fe      	adds	r6, r7, r3
 801849a:	f7ff ffbb 	bl	8018414 <__hexdig_fun>
 801849e:	2800      	cmp	r0, #0
 80184a0:	d062      	beq.n	8018568 <__gethex+0x12a>
 80184a2:	4633      	mov	r3, r6
 80184a4:	7818      	ldrb	r0, [r3, #0]
 80184a6:	2830      	cmp	r0, #48	; 0x30
 80184a8:	461f      	mov	r7, r3
 80184aa:	f103 0301 	add.w	r3, r3, #1
 80184ae:	d0f9      	beq.n	80184a4 <__gethex+0x66>
 80184b0:	f7ff ffb0 	bl	8018414 <__hexdig_fun>
 80184b4:	fab0 f580 	clz	r5, r0
 80184b8:	096d      	lsrs	r5, r5, #5
 80184ba:	4634      	mov	r4, r6
 80184bc:	f04f 0b01 	mov.w	fp, #1
 80184c0:	463a      	mov	r2, r7
 80184c2:	4616      	mov	r6, r2
 80184c4:	3201      	adds	r2, #1
 80184c6:	7830      	ldrb	r0, [r6, #0]
 80184c8:	f7ff ffa4 	bl	8018414 <__hexdig_fun>
 80184cc:	2800      	cmp	r0, #0
 80184ce:	d1f8      	bne.n	80184c2 <__gethex+0x84>
 80184d0:	9a01      	ldr	r2, [sp, #4]
 80184d2:	9903      	ldr	r1, [sp, #12]
 80184d4:	4630      	mov	r0, r6
 80184d6:	f001 fc1b 	bl	8019d10 <strncmp>
 80184da:	b950      	cbnz	r0, 80184f2 <__gethex+0xb4>
 80184dc:	b954      	cbnz	r4, 80184f4 <__gethex+0xb6>
 80184de:	9b01      	ldr	r3, [sp, #4]
 80184e0:	18f4      	adds	r4, r6, r3
 80184e2:	4622      	mov	r2, r4
 80184e4:	4616      	mov	r6, r2
 80184e6:	3201      	adds	r2, #1
 80184e8:	7830      	ldrb	r0, [r6, #0]
 80184ea:	f7ff ff93 	bl	8018414 <__hexdig_fun>
 80184ee:	2800      	cmp	r0, #0
 80184f0:	d1f8      	bne.n	80184e4 <__gethex+0xa6>
 80184f2:	b10c      	cbz	r4, 80184f8 <__gethex+0xba>
 80184f4:	1ba4      	subs	r4, r4, r6
 80184f6:	00a4      	lsls	r4, r4, #2
 80184f8:	7833      	ldrb	r3, [r6, #0]
 80184fa:	2b50      	cmp	r3, #80	; 0x50
 80184fc:	d001      	beq.n	8018502 <__gethex+0xc4>
 80184fe:	2b70      	cmp	r3, #112	; 0x70
 8018500:	d140      	bne.n	8018584 <__gethex+0x146>
 8018502:	7873      	ldrb	r3, [r6, #1]
 8018504:	2b2b      	cmp	r3, #43	; 0x2b
 8018506:	d031      	beq.n	801856c <__gethex+0x12e>
 8018508:	2b2d      	cmp	r3, #45	; 0x2d
 801850a:	d033      	beq.n	8018574 <__gethex+0x136>
 801850c:	1c71      	adds	r1, r6, #1
 801850e:	f04f 0900 	mov.w	r9, #0
 8018512:	7808      	ldrb	r0, [r1, #0]
 8018514:	f7ff ff7e 	bl	8018414 <__hexdig_fun>
 8018518:	1e43      	subs	r3, r0, #1
 801851a:	b2db      	uxtb	r3, r3
 801851c:	2b18      	cmp	r3, #24
 801851e:	d831      	bhi.n	8018584 <__gethex+0x146>
 8018520:	f1a0 0210 	sub.w	r2, r0, #16
 8018524:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018528:	f7ff ff74 	bl	8018414 <__hexdig_fun>
 801852c:	1e43      	subs	r3, r0, #1
 801852e:	b2db      	uxtb	r3, r3
 8018530:	2b18      	cmp	r3, #24
 8018532:	d922      	bls.n	801857a <__gethex+0x13c>
 8018534:	f1b9 0f00 	cmp.w	r9, #0
 8018538:	d000      	beq.n	801853c <__gethex+0xfe>
 801853a:	4252      	negs	r2, r2
 801853c:	4414      	add	r4, r2
 801853e:	f8ca 1000 	str.w	r1, [sl]
 8018542:	b30d      	cbz	r5, 8018588 <__gethex+0x14a>
 8018544:	f1bb 0f00 	cmp.w	fp, #0
 8018548:	bf0c      	ite	eq
 801854a:	2706      	moveq	r7, #6
 801854c:	2700      	movne	r7, #0
 801854e:	4638      	mov	r0, r7
 8018550:	b00b      	add	sp, #44	; 0x2c
 8018552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018556:	f10b 0b01 	add.w	fp, fp, #1
 801855a:	e78a      	b.n	8018472 <__gethex+0x34>
 801855c:	2500      	movs	r5, #0
 801855e:	462c      	mov	r4, r5
 8018560:	e7ae      	b.n	80184c0 <__gethex+0x82>
 8018562:	463e      	mov	r6, r7
 8018564:	2501      	movs	r5, #1
 8018566:	e7c7      	b.n	80184f8 <__gethex+0xba>
 8018568:	4604      	mov	r4, r0
 801856a:	e7fb      	b.n	8018564 <__gethex+0x126>
 801856c:	f04f 0900 	mov.w	r9, #0
 8018570:	1cb1      	adds	r1, r6, #2
 8018572:	e7ce      	b.n	8018512 <__gethex+0xd4>
 8018574:	f04f 0901 	mov.w	r9, #1
 8018578:	e7fa      	b.n	8018570 <__gethex+0x132>
 801857a:	230a      	movs	r3, #10
 801857c:	fb03 0202 	mla	r2, r3, r2, r0
 8018580:	3a10      	subs	r2, #16
 8018582:	e7cf      	b.n	8018524 <__gethex+0xe6>
 8018584:	4631      	mov	r1, r6
 8018586:	e7da      	b.n	801853e <__gethex+0x100>
 8018588:	1bf3      	subs	r3, r6, r7
 801858a:	3b01      	subs	r3, #1
 801858c:	4629      	mov	r1, r5
 801858e:	2b07      	cmp	r3, #7
 8018590:	dc49      	bgt.n	8018626 <__gethex+0x1e8>
 8018592:	9802      	ldr	r0, [sp, #8]
 8018594:	f000 fa71 	bl	8018a7a <_Balloc>
 8018598:	9b01      	ldr	r3, [sp, #4]
 801859a:	f100 0914 	add.w	r9, r0, #20
 801859e:	f04f 0b00 	mov.w	fp, #0
 80185a2:	f1c3 0301 	rsb	r3, r3, #1
 80185a6:	4605      	mov	r5, r0
 80185a8:	f8cd 9010 	str.w	r9, [sp, #16]
 80185ac:	46da      	mov	sl, fp
 80185ae:	9308      	str	r3, [sp, #32]
 80185b0:	42b7      	cmp	r7, r6
 80185b2:	d33b      	bcc.n	801862c <__gethex+0x1ee>
 80185b4:	9804      	ldr	r0, [sp, #16]
 80185b6:	f840 ab04 	str.w	sl, [r0], #4
 80185ba:	eba0 0009 	sub.w	r0, r0, r9
 80185be:	1080      	asrs	r0, r0, #2
 80185c0:	6128      	str	r0, [r5, #16]
 80185c2:	0147      	lsls	r7, r0, #5
 80185c4:	4650      	mov	r0, sl
 80185c6:	f000 fb1c 	bl	8018c02 <__hi0bits>
 80185ca:	f8d8 6000 	ldr.w	r6, [r8]
 80185ce:	1a3f      	subs	r7, r7, r0
 80185d0:	42b7      	cmp	r7, r6
 80185d2:	dd64      	ble.n	801869e <__gethex+0x260>
 80185d4:	1bbf      	subs	r7, r7, r6
 80185d6:	4639      	mov	r1, r7
 80185d8:	4628      	mov	r0, r5
 80185da:	f000 fe2b 	bl	8019234 <__any_on>
 80185de:	4682      	mov	sl, r0
 80185e0:	b178      	cbz	r0, 8018602 <__gethex+0x1c4>
 80185e2:	1e7b      	subs	r3, r7, #1
 80185e4:	1159      	asrs	r1, r3, #5
 80185e6:	f003 021f 	and.w	r2, r3, #31
 80185ea:	f04f 0a01 	mov.w	sl, #1
 80185ee:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80185f2:	fa0a f202 	lsl.w	r2, sl, r2
 80185f6:	420a      	tst	r2, r1
 80185f8:	d003      	beq.n	8018602 <__gethex+0x1c4>
 80185fa:	4553      	cmp	r3, sl
 80185fc:	dc46      	bgt.n	801868c <__gethex+0x24e>
 80185fe:	f04f 0a02 	mov.w	sl, #2
 8018602:	4639      	mov	r1, r7
 8018604:	4628      	mov	r0, r5
 8018606:	f7ff fecb 	bl	80183a0 <rshift>
 801860a:	443c      	add	r4, r7
 801860c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018610:	42a3      	cmp	r3, r4
 8018612:	da52      	bge.n	80186ba <__gethex+0x27c>
 8018614:	4629      	mov	r1, r5
 8018616:	9802      	ldr	r0, [sp, #8]
 8018618:	f000 fa63 	bl	8018ae2 <_Bfree>
 801861c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801861e:	2300      	movs	r3, #0
 8018620:	6013      	str	r3, [r2, #0]
 8018622:	27a3      	movs	r7, #163	; 0xa3
 8018624:	e793      	b.n	801854e <__gethex+0x110>
 8018626:	3101      	adds	r1, #1
 8018628:	105b      	asrs	r3, r3, #1
 801862a:	e7b0      	b.n	801858e <__gethex+0x150>
 801862c:	1e73      	subs	r3, r6, #1
 801862e:	9305      	str	r3, [sp, #20]
 8018630:	9a07      	ldr	r2, [sp, #28]
 8018632:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018636:	4293      	cmp	r3, r2
 8018638:	d018      	beq.n	801866c <__gethex+0x22e>
 801863a:	f1bb 0f20 	cmp.w	fp, #32
 801863e:	d107      	bne.n	8018650 <__gethex+0x212>
 8018640:	9b04      	ldr	r3, [sp, #16]
 8018642:	f8c3 a000 	str.w	sl, [r3]
 8018646:	3304      	adds	r3, #4
 8018648:	f04f 0a00 	mov.w	sl, #0
 801864c:	9304      	str	r3, [sp, #16]
 801864e:	46d3      	mov	fp, sl
 8018650:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018654:	f7ff fede 	bl	8018414 <__hexdig_fun>
 8018658:	f000 000f 	and.w	r0, r0, #15
 801865c:	fa00 f00b 	lsl.w	r0, r0, fp
 8018660:	ea4a 0a00 	orr.w	sl, sl, r0
 8018664:	f10b 0b04 	add.w	fp, fp, #4
 8018668:	9b05      	ldr	r3, [sp, #20]
 801866a:	e00d      	b.n	8018688 <__gethex+0x24a>
 801866c:	9b05      	ldr	r3, [sp, #20]
 801866e:	9a08      	ldr	r2, [sp, #32]
 8018670:	4413      	add	r3, r2
 8018672:	42bb      	cmp	r3, r7
 8018674:	d3e1      	bcc.n	801863a <__gethex+0x1fc>
 8018676:	4618      	mov	r0, r3
 8018678:	9a01      	ldr	r2, [sp, #4]
 801867a:	9903      	ldr	r1, [sp, #12]
 801867c:	9309      	str	r3, [sp, #36]	; 0x24
 801867e:	f001 fb47 	bl	8019d10 <strncmp>
 8018682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018684:	2800      	cmp	r0, #0
 8018686:	d1d8      	bne.n	801863a <__gethex+0x1fc>
 8018688:	461e      	mov	r6, r3
 801868a:	e791      	b.n	80185b0 <__gethex+0x172>
 801868c:	1eb9      	subs	r1, r7, #2
 801868e:	4628      	mov	r0, r5
 8018690:	f000 fdd0 	bl	8019234 <__any_on>
 8018694:	2800      	cmp	r0, #0
 8018696:	d0b2      	beq.n	80185fe <__gethex+0x1c0>
 8018698:	f04f 0a03 	mov.w	sl, #3
 801869c:	e7b1      	b.n	8018602 <__gethex+0x1c4>
 801869e:	da09      	bge.n	80186b4 <__gethex+0x276>
 80186a0:	1bf7      	subs	r7, r6, r7
 80186a2:	4629      	mov	r1, r5
 80186a4:	463a      	mov	r2, r7
 80186a6:	9802      	ldr	r0, [sp, #8]
 80186a8:	f000 fbe6 	bl	8018e78 <__lshift>
 80186ac:	1be4      	subs	r4, r4, r7
 80186ae:	4605      	mov	r5, r0
 80186b0:	f100 0914 	add.w	r9, r0, #20
 80186b4:	f04f 0a00 	mov.w	sl, #0
 80186b8:	e7a8      	b.n	801860c <__gethex+0x1ce>
 80186ba:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80186be:	42a0      	cmp	r0, r4
 80186c0:	dd6a      	ble.n	8018798 <__gethex+0x35a>
 80186c2:	1b04      	subs	r4, r0, r4
 80186c4:	42a6      	cmp	r6, r4
 80186c6:	dc2e      	bgt.n	8018726 <__gethex+0x2e8>
 80186c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80186cc:	2b02      	cmp	r3, #2
 80186ce:	d022      	beq.n	8018716 <__gethex+0x2d8>
 80186d0:	2b03      	cmp	r3, #3
 80186d2:	d024      	beq.n	801871e <__gethex+0x2e0>
 80186d4:	2b01      	cmp	r3, #1
 80186d6:	d115      	bne.n	8018704 <__gethex+0x2c6>
 80186d8:	42a6      	cmp	r6, r4
 80186da:	d113      	bne.n	8018704 <__gethex+0x2c6>
 80186dc:	2e01      	cmp	r6, #1
 80186de:	dc0b      	bgt.n	80186f8 <__gethex+0x2ba>
 80186e0:	9a06      	ldr	r2, [sp, #24]
 80186e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80186e6:	6013      	str	r3, [r2, #0]
 80186e8:	2301      	movs	r3, #1
 80186ea:	612b      	str	r3, [r5, #16]
 80186ec:	f8c9 3000 	str.w	r3, [r9]
 80186f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80186f2:	2762      	movs	r7, #98	; 0x62
 80186f4:	601d      	str	r5, [r3, #0]
 80186f6:	e72a      	b.n	801854e <__gethex+0x110>
 80186f8:	1e71      	subs	r1, r6, #1
 80186fa:	4628      	mov	r0, r5
 80186fc:	f000 fd9a 	bl	8019234 <__any_on>
 8018700:	2800      	cmp	r0, #0
 8018702:	d1ed      	bne.n	80186e0 <__gethex+0x2a2>
 8018704:	4629      	mov	r1, r5
 8018706:	9802      	ldr	r0, [sp, #8]
 8018708:	f000 f9eb 	bl	8018ae2 <_Bfree>
 801870c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801870e:	2300      	movs	r3, #0
 8018710:	6013      	str	r3, [r2, #0]
 8018712:	2750      	movs	r7, #80	; 0x50
 8018714:	e71b      	b.n	801854e <__gethex+0x110>
 8018716:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018718:	2b00      	cmp	r3, #0
 801871a:	d0e1      	beq.n	80186e0 <__gethex+0x2a2>
 801871c:	e7f2      	b.n	8018704 <__gethex+0x2c6>
 801871e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018720:	2b00      	cmp	r3, #0
 8018722:	d1dd      	bne.n	80186e0 <__gethex+0x2a2>
 8018724:	e7ee      	b.n	8018704 <__gethex+0x2c6>
 8018726:	1e67      	subs	r7, r4, #1
 8018728:	f1ba 0f00 	cmp.w	sl, #0
 801872c:	d131      	bne.n	8018792 <__gethex+0x354>
 801872e:	b127      	cbz	r7, 801873a <__gethex+0x2fc>
 8018730:	4639      	mov	r1, r7
 8018732:	4628      	mov	r0, r5
 8018734:	f000 fd7e 	bl	8019234 <__any_on>
 8018738:	4682      	mov	sl, r0
 801873a:	117a      	asrs	r2, r7, #5
 801873c:	2301      	movs	r3, #1
 801873e:	f007 071f 	and.w	r7, r7, #31
 8018742:	fa03 f707 	lsl.w	r7, r3, r7
 8018746:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801874a:	4621      	mov	r1, r4
 801874c:	421f      	tst	r7, r3
 801874e:	4628      	mov	r0, r5
 8018750:	bf18      	it	ne
 8018752:	f04a 0a02 	orrne.w	sl, sl, #2
 8018756:	1b36      	subs	r6, r6, r4
 8018758:	f7ff fe22 	bl	80183a0 <rshift>
 801875c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018760:	2702      	movs	r7, #2
 8018762:	f1ba 0f00 	cmp.w	sl, #0
 8018766:	d048      	beq.n	80187fa <__gethex+0x3bc>
 8018768:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801876c:	2b02      	cmp	r3, #2
 801876e:	d015      	beq.n	801879c <__gethex+0x35e>
 8018770:	2b03      	cmp	r3, #3
 8018772:	d017      	beq.n	80187a4 <__gethex+0x366>
 8018774:	2b01      	cmp	r3, #1
 8018776:	d109      	bne.n	801878c <__gethex+0x34e>
 8018778:	f01a 0f02 	tst.w	sl, #2
 801877c:	d006      	beq.n	801878c <__gethex+0x34e>
 801877e:	f8d9 3000 	ldr.w	r3, [r9]
 8018782:	ea4a 0a03 	orr.w	sl, sl, r3
 8018786:	f01a 0f01 	tst.w	sl, #1
 801878a:	d10e      	bne.n	80187aa <__gethex+0x36c>
 801878c:	f047 0710 	orr.w	r7, r7, #16
 8018790:	e033      	b.n	80187fa <__gethex+0x3bc>
 8018792:	f04f 0a01 	mov.w	sl, #1
 8018796:	e7d0      	b.n	801873a <__gethex+0x2fc>
 8018798:	2701      	movs	r7, #1
 801879a:	e7e2      	b.n	8018762 <__gethex+0x324>
 801879c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801879e:	f1c3 0301 	rsb	r3, r3, #1
 80187a2:	9315      	str	r3, [sp, #84]	; 0x54
 80187a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d0f0      	beq.n	801878c <__gethex+0x34e>
 80187aa:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80187ae:	f105 0314 	add.w	r3, r5, #20
 80187b2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80187b6:	eb03 010a 	add.w	r1, r3, sl
 80187ba:	f04f 0c00 	mov.w	ip, #0
 80187be:	4618      	mov	r0, r3
 80187c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80187c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80187c8:	d01c      	beq.n	8018804 <__gethex+0x3c6>
 80187ca:	3201      	adds	r2, #1
 80187cc:	6002      	str	r2, [r0, #0]
 80187ce:	2f02      	cmp	r7, #2
 80187d0:	f105 0314 	add.w	r3, r5, #20
 80187d4:	d138      	bne.n	8018848 <__gethex+0x40a>
 80187d6:	f8d8 2000 	ldr.w	r2, [r8]
 80187da:	3a01      	subs	r2, #1
 80187dc:	42b2      	cmp	r2, r6
 80187de:	d10a      	bne.n	80187f6 <__gethex+0x3b8>
 80187e0:	1171      	asrs	r1, r6, #5
 80187e2:	2201      	movs	r2, #1
 80187e4:	f006 061f 	and.w	r6, r6, #31
 80187e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80187ec:	fa02 f606 	lsl.w	r6, r2, r6
 80187f0:	421e      	tst	r6, r3
 80187f2:	bf18      	it	ne
 80187f4:	4617      	movne	r7, r2
 80187f6:	f047 0720 	orr.w	r7, r7, #32
 80187fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80187fc:	601d      	str	r5, [r3, #0]
 80187fe:	9b06      	ldr	r3, [sp, #24]
 8018800:	601c      	str	r4, [r3, #0]
 8018802:	e6a4      	b.n	801854e <__gethex+0x110>
 8018804:	4299      	cmp	r1, r3
 8018806:	f843 cc04 	str.w	ip, [r3, #-4]
 801880a:	d8d8      	bhi.n	80187be <__gethex+0x380>
 801880c:	68ab      	ldr	r3, [r5, #8]
 801880e:	4599      	cmp	r9, r3
 8018810:	db12      	blt.n	8018838 <__gethex+0x3fa>
 8018812:	6869      	ldr	r1, [r5, #4]
 8018814:	9802      	ldr	r0, [sp, #8]
 8018816:	3101      	adds	r1, #1
 8018818:	f000 f92f 	bl	8018a7a <_Balloc>
 801881c:	692a      	ldr	r2, [r5, #16]
 801881e:	3202      	adds	r2, #2
 8018820:	f105 010c 	add.w	r1, r5, #12
 8018824:	4683      	mov	fp, r0
 8018826:	0092      	lsls	r2, r2, #2
 8018828:	300c      	adds	r0, #12
 801882a:	f000 f91b 	bl	8018a64 <memcpy>
 801882e:	4629      	mov	r1, r5
 8018830:	9802      	ldr	r0, [sp, #8]
 8018832:	f000 f956 	bl	8018ae2 <_Bfree>
 8018836:	465d      	mov	r5, fp
 8018838:	692b      	ldr	r3, [r5, #16]
 801883a:	1c5a      	adds	r2, r3, #1
 801883c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018840:	612a      	str	r2, [r5, #16]
 8018842:	2201      	movs	r2, #1
 8018844:	615a      	str	r2, [r3, #20]
 8018846:	e7c2      	b.n	80187ce <__gethex+0x390>
 8018848:	692a      	ldr	r2, [r5, #16]
 801884a:	454a      	cmp	r2, r9
 801884c:	dd0b      	ble.n	8018866 <__gethex+0x428>
 801884e:	2101      	movs	r1, #1
 8018850:	4628      	mov	r0, r5
 8018852:	f7ff fda5 	bl	80183a0 <rshift>
 8018856:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801885a:	3401      	adds	r4, #1
 801885c:	42a3      	cmp	r3, r4
 801885e:	f6ff aed9 	blt.w	8018614 <__gethex+0x1d6>
 8018862:	2701      	movs	r7, #1
 8018864:	e7c7      	b.n	80187f6 <__gethex+0x3b8>
 8018866:	f016 061f 	ands.w	r6, r6, #31
 801886a:	d0fa      	beq.n	8018862 <__gethex+0x424>
 801886c:	449a      	add	sl, r3
 801886e:	f1c6 0620 	rsb	r6, r6, #32
 8018872:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018876:	f000 f9c4 	bl	8018c02 <__hi0bits>
 801887a:	42b0      	cmp	r0, r6
 801887c:	dbe7      	blt.n	801884e <__gethex+0x410>
 801887e:	e7f0      	b.n	8018862 <__gethex+0x424>

08018880 <L_shift>:
 8018880:	f1c2 0208 	rsb	r2, r2, #8
 8018884:	0092      	lsls	r2, r2, #2
 8018886:	b570      	push	{r4, r5, r6, lr}
 8018888:	f1c2 0620 	rsb	r6, r2, #32
 801888c:	6843      	ldr	r3, [r0, #4]
 801888e:	6804      	ldr	r4, [r0, #0]
 8018890:	fa03 f506 	lsl.w	r5, r3, r6
 8018894:	432c      	orrs	r4, r5
 8018896:	40d3      	lsrs	r3, r2
 8018898:	6004      	str	r4, [r0, #0]
 801889a:	f840 3f04 	str.w	r3, [r0, #4]!
 801889e:	4288      	cmp	r0, r1
 80188a0:	d3f4      	bcc.n	801888c <L_shift+0xc>
 80188a2:	bd70      	pop	{r4, r5, r6, pc}

080188a4 <__match>:
 80188a4:	b530      	push	{r4, r5, lr}
 80188a6:	6803      	ldr	r3, [r0, #0]
 80188a8:	3301      	adds	r3, #1
 80188aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80188ae:	b914      	cbnz	r4, 80188b6 <__match+0x12>
 80188b0:	6003      	str	r3, [r0, #0]
 80188b2:	2001      	movs	r0, #1
 80188b4:	bd30      	pop	{r4, r5, pc}
 80188b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80188ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80188be:	2d19      	cmp	r5, #25
 80188c0:	bf98      	it	ls
 80188c2:	3220      	addls	r2, #32
 80188c4:	42a2      	cmp	r2, r4
 80188c6:	d0f0      	beq.n	80188aa <__match+0x6>
 80188c8:	2000      	movs	r0, #0
 80188ca:	e7f3      	b.n	80188b4 <__match+0x10>

080188cc <__hexnan>:
 80188cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188d0:	680b      	ldr	r3, [r1, #0]
 80188d2:	6801      	ldr	r1, [r0, #0]
 80188d4:	115f      	asrs	r7, r3, #5
 80188d6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80188da:	f013 031f 	ands.w	r3, r3, #31
 80188de:	b087      	sub	sp, #28
 80188e0:	bf18      	it	ne
 80188e2:	3704      	addne	r7, #4
 80188e4:	2500      	movs	r5, #0
 80188e6:	1f3e      	subs	r6, r7, #4
 80188e8:	4682      	mov	sl, r0
 80188ea:	4690      	mov	r8, r2
 80188ec:	9301      	str	r3, [sp, #4]
 80188ee:	f847 5c04 	str.w	r5, [r7, #-4]
 80188f2:	46b1      	mov	r9, r6
 80188f4:	4634      	mov	r4, r6
 80188f6:	9502      	str	r5, [sp, #8]
 80188f8:	46ab      	mov	fp, r5
 80188fa:	784a      	ldrb	r2, [r1, #1]
 80188fc:	1c4b      	adds	r3, r1, #1
 80188fe:	9303      	str	r3, [sp, #12]
 8018900:	b342      	cbz	r2, 8018954 <__hexnan+0x88>
 8018902:	4610      	mov	r0, r2
 8018904:	9105      	str	r1, [sp, #20]
 8018906:	9204      	str	r2, [sp, #16]
 8018908:	f7ff fd84 	bl	8018414 <__hexdig_fun>
 801890c:	2800      	cmp	r0, #0
 801890e:	d143      	bne.n	8018998 <__hexnan+0xcc>
 8018910:	9a04      	ldr	r2, [sp, #16]
 8018912:	9905      	ldr	r1, [sp, #20]
 8018914:	2a20      	cmp	r2, #32
 8018916:	d818      	bhi.n	801894a <__hexnan+0x7e>
 8018918:	9b02      	ldr	r3, [sp, #8]
 801891a:	459b      	cmp	fp, r3
 801891c:	dd13      	ble.n	8018946 <__hexnan+0x7a>
 801891e:	454c      	cmp	r4, r9
 8018920:	d206      	bcs.n	8018930 <__hexnan+0x64>
 8018922:	2d07      	cmp	r5, #7
 8018924:	dc04      	bgt.n	8018930 <__hexnan+0x64>
 8018926:	462a      	mov	r2, r5
 8018928:	4649      	mov	r1, r9
 801892a:	4620      	mov	r0, r4
 801892c:	f7ff ffa8 	bl	8018880 <L_shift>
 8018930:	4544      	cmp	r4, r8
 8018932:	d944      	bls.n	80189be <__hexnan+0xf2>
 8018934:	2300      	movs	r3, #0
 8018936:	f1a4 0904 	sub.w	r9, r4, #4
 801893a:	f844 3c04 	str.w	r3, [r4, #-4]
 801893e:	f8cd b008 	str.w	fp, [sp, #8]
 8018942:	464c      	mov	r4, r9
 8018944:	461d      	mov	r5, r3
 8018946:	9903      	ldr	r1, [sp, #12]
 8018948:	e7d7      	b.n	80188fa <__hexnan+0x2e>
 801894a:	2a29      	cmp	r2, #41	; 0x29
 801894c:	d14a      	bne.n	80189e4 <__hexnan+0x118>
 801894e:	3102      	adds	r1, #2
 8018950:	f8ca 1000 	str.w	r1, [sl]
 8018954:	f1bb 0f00 	cmp.w	fp, #0
 8018958:	d044      	beq.n	80189e4 <__hexnan+0x118>
 801895a:	454c      	cmp	r4, r9
 801895c:	d206      	bcs.n	801896c <__hexnan+0xa0>
 801895e:	2d07      	cmp	r5, #7
 8018960:	dc04      	bgt.n	801896c <__hexnan+0xa0>
 8018962:	462a      	mov	r2, r5
 8018964:	4649      	mov	r1, r9
 8018966:	4620      	mov	r0, r4
 8018968:	f7ff ff8a 	bl	8018880 <L_shift>
 801896c:	4544      	cmp	r4, r8
 801896e:	d928      	bls.n	80189c2 <__hexnan+0xf6>
 8018970:	4643      	mov	r3, r8
 8018972:	f854 2b04 	ldr.w	r2, [r4], #4
 8018976:	f843 2b04 	str.w	r2, [r3], #4
 801897a:	42a6      	cmp	r6, r4
 801897c:	d2f9      	bcs.n	8018972 <__hexnan+0xa6>
 801897e:	2200      	movs	r2, #0
 8018980:	f843 2b04 	str.w	r2, [r3], #4
 8018984:	429e      	cmp	r6, r3
 8018986:	d2fb      	bcs.n	8018980 <__hexnan+0xb4>
 8018988:	6833      	ldr	r3, [r6, #0]
 801898a:	b91b      	cbnz	r3, 8018994 <__hexnan+0xc8>
 801898c:	4546      	cmp	r6, r8
 801898e:	d127      	bne.n	80189e0 <__hexnan+0x114>
 8018990:	2301      	movs	r3, #1
 8018992:	6033      	str	r3, [r6, #0]
 8018994:	2005      	movs	r0, #5
 8018996:	e026      	b.n	80189e6 <__hexnan+0x11a>
 8018998:	3501      	adds	r5, #1
 801899a:	2d08      	cmp	r5, #8
 801899c:	f10b 0b01 	add.w	fp, fp, #1
 80189a0:	dd06      	ble.n	80189b0 <__hexnan+0xe4>
 80189a2:	4544      	cmp	r4, r8
 80189a4:	d9cf      	bls.n	8018946 <__hexnan+0x7a>
 80189a6:	2300      	movs	r3, #0
 80189a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80189ac:	2501      	movs	r5, #1
 80189ae:	3c04      	subs	r4, #4
 80189b0:	6822      	ldr	r2, [r4, #0]
 80189b2:	f000 000f 	and.w	r0, r0, #15
 80189b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80189ba:	6020      	str	r0, [r4, #0]
 80189bc:	e7c3      	b.n	8018946 <__hexnan+0x7a>
 80189be:	2508      	movs	r5, #8
 80189c0:	e7c1      	b.n	8018946 <__hexnan+0x7a>
 80189c2:	9b01      	ldr	r3, [sp, #4]
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d0df      	beq.n	8018988 <__hexnan+0xbc>
 80189c8:	f04f 32ff 	mov.w	r2, #4294967295
 80189cc:	f1c3 0320 	rsb	r3, r3, #32
 80189d0:	fa22 f303 	lsr.w	r3, r2, r3
 80189d4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80189d8:	401a      	ands	r2, r3
 80189da:	f847 2c04 	str.w	r2, [r7, #-4]
 80189de:	e7d3      	b.n	8018988 <__hexnan+0xbc>
 80189e0:	3e04      	subs	r6, #4
 80189e2:	e7d1      	b.n	8018988 <__hexnan+0xbc>
 80189e4:	2004      	movs	r0, #4
 80189e6:	b007      	add	sp, #28
 80189e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080189ec <__locale_ctype_ptr_l>:
 80189ec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80189f0:	4770      	bx	lr
	...

080189f4 <__locale_ctype_ptr>:
 80189f4:	4b04      	ldr	r3, [pc, #16]	; (8018a08 <__locale_ctype_ptr+0x14>)
 80189f6:	4a05      	ldr	r2, [pc, #20]	; (8018a0c <__locale_ctype_ptr+0x18>)
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	6a1b      	ldr	r3, [r3, #32]
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	bf08      	it	eq
 8018a00:	4613      	moveq	r3, r2
 8018a02:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8018a06:	4770      	bx	lr
 8018a08:	2000000c 	.word	0x2000000c
 8018a0c:	20000070 	.word	0x20000070

08018a10 <__localeconv_l>:
 8018a10:	30f0      	adds	r0, #240	; 0xf0
 8018a12:	4770      	bx	lr

08018a14 <_localeconv_r>:
 8018a14:	4b04      	ldr	r3, [pc, #16]	; (8018a28 <_localeconv_r+0x14>)
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	6a18      	ldr	r0, [r3, #32]
 8018a1a:	4b04      	ldr	r3, [pc, #16]	; (8018a2c <_localeconv_r+0x18>)
 8018a1c:	2800      	cmp	r0, #0
 8018a1e:	bf08      	it	eq
 8018a20:	4618      	moveq	r0, r3
 8018a22:	30f0      	adds	r0, #240	; 0xf0
 8018a24:	4770      	bx	lr
 8018a26:	bf00      	nop
 8018a28:	2000000c 	.word	0x2000000c
 8018a2c:	20000070 	.word	0x20000070

08018a30 <malloc>:
 8018a30:	4b02      	ldr	r3, [pc, #8]	; (8018a3c <malloc+0xc>)
 8018a32:	4601      	mov	r1, r0
 8018a34:	6818      	ldr	r0, [r3, #0]
 8018a36:	f000 bc7b 	b.w	8019330 <_malloc_r>
 8018a3a:	bf00      	nop
 8018a3c:	2000000c 	.word	0x2000000c

08018a40 <__ascii_mbtowc>:
 8018a40:	b082      	sub	sp, #8
 8018a42:	b901      	cbnz	r1, 8018a46 <__ascii_mbtowc+0x6>
 8018a44:	a901      	add	r1, sp, #4
 8018a46:	b142      	cbz	r2, 8018a5a <__ascii_mbtowc+0x1a>
 8018a48:	b14b      	cbz	r3, 8018a5e <__ascii_mbtowc+0x1e>
 8018a4a:	7813      	ldrb	r3, [r2, #0]
 8018a4c:	600b      	str	r3, [r1, #0]
 8018a4e:	7812      	ldrb	r2, [r2, #0]
 8018a50:	1c10      	adds	r0, r2, #0
 8018a52:	bf18      	it	ne
 8018a54:	2001      	movne	r0, #1
 8018a56:	b002      	add	sp, #8
 8018a58:	4770      	bx	lr
 8018a5a:	4610      	mov	r0, r2
 8018a5c:	e7fb      	b.n	8018a56 <__ascii_mbtowc+0x16>
 8018a5e:	f06f 0001 	mvn.w	r0, #1
 8018a62:	e7f8      	b.n	8018a56 <__ascii_mbtowc+0x16>

08018a64 <memcpy>:
 8018a64:	b510      	push	{r4, lr}
 8018a66:	1e43      	subs	r3, r0, #1
 8018a68:	440a      	add	r2, r1
 8018a6a:	4291      	cmp	r1, r2
 8018a6c:	d100      	bne.n	8018a70 <memcpy+0xc>
 8018a6e:	bd10      	pop	{r4, pc}
 8018a70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018a74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018a78:	e7f7      	b.n	8018a6a <memcpy+0x6>

08018a7a <_Balloc>:
 8018a7a:	b570      	push	{r4, r5, r6, lr}
 8018a7c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018a7e:	4604      	mov	r4, r0
 8018a80:	460e      	mov	r6, r1
 8018a82:	b93d      	cbnz	r5, 8018a94 <_Balloc+0x1a>
 8018a84:	2010      	movs	r0, #16
 8018a86:	f7ff ffd3 	bl	8018a30 <malloc>
 8018a8a:	6260      	str	r0, [r4, #36]	; 0x24
 8018a8c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018a90:	6005      	str	r5, [r0, #0]
 8018a92:	60c5      	str	r5, [r0, #12]
 8018a94:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018a96:	68eb      	ldr	r3, [r5, #12]
 8018a98:	b183      	cbz	r3, 8018abc <_Balloc+0x42>
 8018a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018a9c:	68db      	ldr	r3, [r3, #12]
 8018a9e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018aa2:	b9b8      	cbnz	r0, 8018ad4 <_Balloc+0x5a>
 8018aa4:	2101      	movs	r1, #1
 8018aa6:	fa01 f506 	lsl.w	r5, r1, r6
 8018aaa:	1d6a      	adds	r2, r5, #5
 8018aac:	0092      	lsls	r2, r2, #2
 8018aae:	4620      	mov	r0, r4
 8018ab0:	f000 fbe1 	bl	8019276 <_calloc_r>
 8018ab4:	b160      	cbz	r0, 8018ad0 <_Balloc+0x56>
 8018ab6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018aba:	e00e      	b.n	8018ada <_Balloc+0x60>
 8018abc:	2221      	movs	r2, #33	; 0x21
 8018abe:	2104      	movs	r1, #4
 8018ac0:	4620      	mov	r0, r4
 8018ac2:	f000 fbd8 	bl	8019276 <_calloc_r>
 8018ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018ac8:	60e8      	str	r0, [r5, #12]
 8018aca:	68db      	ldr	r3, [r3, #12]
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d1e4      	bne.n	8018a9a <_Balloc+0x20>
 8018ad0:	2000      	movs	r0, #0
 8018ad2:	bd70      	pop	{r4, r5, r6, pc}
 8018ad4:	6802      	ldr	r2, [r0, #0]
 8018ad6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018ada:	2300      	movs	r3, #0
 8018adc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018ae0:	e7f7      	b.n	8018ad2 <_Balloc+0x58>

08018ae2 <_Bfree>:
 8018ae2:	b570      	push	{r4, r5, r6, lr}
 8018ae4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018ae6:	4606      	mov	r6, r0
 8018ae8:	460d      	mov	r5, r1
 8018aea:	b93c      	cbnz	r4, 8018afc <_Bfree+0x1a>
 8018aec:	2010      	movs	r0, #16
 8018aee:	f7ff ff9f 	bl	8018a30 <malloc>
 8018af2:	6270      	str	r0, [r6, #36]	; 0x24
 8018af4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018af8:	6004      	str	r4, [r0, #0]
 8018afa:	60c4      	str	r4, [r0, #12]
 8018afc:	b13d      	cbz	r5, 8018b0e <_Bfree+0x2c>
 8018afe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018b00:	686a      	ldr	r2, [r5, #4]
 8018b02:	68db      	ldr	r3, [r3, #12]
 8018b04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018b08:	6029      	str	r1, [r5, #0]
 8018b0a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018b0e:	bd70      	pop	{r4, r5, r6, pc}

08018b10 <__multadd>:
 8018b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b14:	690d      	ldr	r5, [r1, #16]
 8018b16:	461f      	mov	r7, r3
 8018b18:	4606      	mov	r6, r0
 8018b1a:	460c      	mov	r4, r1
 8018b1c:	f101 0c14 	add.w	ip, r1, #20
 8018b20:	2300      	movs	r3, #0
 8018b22:	f8dc 0000 	ldr.w	r0, [ip]
 8018b26:	b281      	uxth	r1, r0
 8018b28:	fb02 7101 	mla	r1, r2, r1, r7
 8018b2c:	0c0f      	lsrs	r7, r1, #16
 8018b2e:	0c00      	lsrs	r0, r0, #16
 8018b30:	fb02 7000 	mla	r0, r2, r0, r7
 8018b34:	b289      	uxth	r1, r1
 8018b36:	3301      	adds	r3, #1
 8018b38:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018b3c:	429d      	cmp	r5, r3
 8018b3e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018b42:	f84c 1b04 	str.w	r1, [ip], #4
 8018b46:	dcec      	bgt.n	8018b22 <__multadd+0x12>
 8018b48:	b1d7      	cbz	r7, 8018b80 <__multadd+0x70>
 8018b4a:	68a3      	ldr	r3, [r4, #8]
 8018b4c:	42ab      	cmp	r3, r5
 8018b4e:	dc12      	bgt.n	8018b76 <__multadd+0x66>
 8018b50:	6861      	ldr	r1, [r4, #4]
 8018b52:	4630      	mov	r0, r6
 8018b54:	3101      	adds	r1, #1
 8018b56:	f7ff ff90 	bl	8018a7a <_Balloc>
 8018b5a:	6922      	ldr	r2, [r4, #16]
 8018b5c:	3202      	adds	r2, #2
 8018b5e:	f104 010c 	add.w	r1, r4, #12
 8018b62:	4680      	mov	r8, r0
 8018b64:	0092      	lsls	r2, r2, #2
 8018b66:	300c      	adds	r0, #12
 8018b68:	f7ff ff7c 	bl	8018a64 <memcpy>
 8018b6c:	4621      	mov	r1, r4
 8018b6e:	4630      	mov	r0, r6
 8018b70:	f7ff ffb7 	bl	8018ae2 <_Bfree>
 8018b74:	4644      	mov	r4, r8
 8018b76:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018b7a:	3501      	adds	r5, #1
 8018b7c:	615f      	str	r7, [r3, #20]
 8018b7e:	6125      	str	r5, [r4, #16]
 8018b80:	4620      	mov	r0, r4
 8018b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018b86 <__s2b>:
 8018b86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b8a:	460c      	mov	r4, r1
 8018b8c:	4615      	mov	r5, r2
 8018b8e:	461f      	mov	r7, r3
 8018b90:	2209      	movs	r2, #9
 8018b92:	3308      	adds	r3, #8
 8018b94:	4606      	mov	r6, r0
 8018b96:	fb93 f3f2 	sdiv	r3, r3, r2
 8018b9a:	2100      	movs	r1, #0
 8018b9c:	2201      	movs	r2, #1
 8018b9e:	429a      	cmp	r2, r3
 8018ba0:	db20      	blt.n	8018be4 <__s2b+0x5e>
 8018ba2:	4630      	mov	r0, r6
 8018ba4:	f7ff ff69 	bl	8018a7a <_Balloc>
 8018ba8:	9b08      	ldr	r3, [sp, #32]
 8018baa:	6143      	str	r3, [r0, #20]
 8018bac:	2d09      	cmp	r5, #9
 8018bae:	f04f 0301 	mov.w	r3, #1
 8018bb2:	6103      	str	r3, [r0, #16]
 8018bb4:	dd19      	ble.n	8018bea <__s2b+0x64>
 8018bb6:	f104 0809 	add.w	r8, r4, #9
 8018bba:	46c1      	mov	r9, r8
 8018bbc:	442c      	add	r4, r5
 8018bbe:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018bc2:	4601      	mov	r1, r0
 8018bc4:	3b30      	subs	r3, #48	; 0x30
 8018bc6:	220a      	movs	r2, #10
 8018bc8:	4630      	mov	r0, r6
 8018bca:	f7ff ffa1 	bl	8018b10 <__multadd>
 8018bce:	45a1      	cmp	r9, r4
 8018bd0:	d1f5      	bne.n	8018bbe <__s2b+0x38>
 8018bd2:	eb08 0405 	add.w	r4, r8, r5
 8018bd6:	3c08      	subs	r4, #8
 8018bd8:	1b2d      	subs	r5, r5, r4
 8018bda:	1963      	adds	r3, r4, r5
 8018bdc:	42bb      	cmp	r3, r7
 8018bde:	db07      	blt.n	8018bf0 <__s2b+0x6a>
 8018be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018be4:	0052      	lsls	r2, r2, #1
 8018be6:	3101      	adds	r1, #1
 8018be8:	e7d9      	b.n	8018b9e <__s2b+0x18>
 8018bea:	340a      	adds	r4, #10
 8018bec:	2509      	movs	r5, #9
 8018bee:	e7f3      	b.n	8018bd8 <__s2b+0x52>
 8018bf0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018bf4:	4601      	mov	r1, r0
 8018bf6:	3b30      	subs	r3, #48	; 0x30
 8018bf8:	220a      	movs	r2, #10
 8018bfa:	4630      	mov	r0, r6
 8018bfc:	f7ff ff88 	bl	8018b10 <__multadd>
 8018c00:	e7eb      	b.n	8018bda <__s2b+0x54>

08018c02 <__hi0bits>:
 8018c02:	0c02      	lsrs	r2, r0, #16
 8018c04:	0412      	lsls	r2, r2, #16
 8018c06:	4603      	mov	r3, r0
 8018c08:	b9b2      	cbnz	r2, 8018c38 <__hi0bits+0x36>
 8018c0a:	0403      	lsls	r3, r0, #16
 8018c0c:	2010      	movs	r0, #16
 8018c0e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018c12:	bf04      	itt	eq
 8018c14:	021b      	lsleq	r3, r3, #8
 8018c16:	3008      	addeq	r0, #8
 8018c18:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018c1c:	bf04      	itt	eq
 8018c1e:	011b      	lsleq	r3, r3, #4
 8018c20:	3004      	addeq	r0, #4
 8018c22:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018c26:	bf04      	itt	eq
 8018c28:	009b      	lsleq	r3, r3, #2
 8018c2a:	3002      	addeq	r0, #2
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	db06      	blt.n	8018c3e <__hi0bits+0x3c>
 8018c30:	005b      	lsls	r3, r3, #1
 8018c32:	d503      	bpl.n	8018c3c <__hi0bits+0x3a>
 8018c34:	3001      	adds	r0, #1
 8018c36:	4770      	bx	lr
 8018c38:	2000      	movs	r0, #0
 8018c3a:	e7e8      	b.n	8018c0e <__hi0bits+0xc>
 8018c3c:	2020      	movs	r0, #32
 8018c3e:	4770      	bx	lr

08018c40 <__lo0bits>:
 8018c40:	6803      	ldr	r3, [r0, #0]
 8018c42:	f013 0207 	ands.w	r2, r3, #7
 8018c46:	4601      	mov	r1, r0
 8018c48:	d00b      	beq.n	8018c62 <__lo0bits+0x22>
 8018c4a:	07da      	lsls	r2, r3, #31
 8018c4c:	d423      	bmi.n	8018c96 <__lo0bits+0x56>
 8018c4e:	0798      	lsls	r0, r3, #30
 8018c50:	bf49      	itett	mi
 8018c52:	085b      	lsrmi	r3, r3, #1
 8018c54:	089b      	lsrpl	r3, r3, #2
 8018c56:	2001      	movmi	r0, #1
 8018c58:	600b      	strmi	r3, [r1, #0]
 8018c5a:	bf5c      	itt	pl
 8018c5c:	600b      	strpl	r3, [r1, #0]
 8018c5e:	2002      	movpl	r0, #2
 8018c60:	4770      	bx	lr
 8018c62:	b298      	uxth	r0, r3
 8018c64:	b9a8      	cbnz	r0, 8018c92 <__lo0bits+0x52>
 8018c66:	0c1b      	lsrs	r3, r3, #16
 8018c68:	2010      	movs	r0, #16
 8018c6a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018c6e:	bf04      	itt	eq
 8018c70:	0a1b      	lsreq	r3, r3, #8
 8018c72:	3008      	addeq	r0, #8
 8018c74:	071a      	lsls	r2, r3, #28
 8018c76:	bf04      	itt	eq
 8018c78:	091b      	lsreq	r3, r3, #4
 8018c7a:	3004      	addeq	r0, #4
 8018c7c:	079a      	lsls	r2, r3, #30
 8018c7e:	bf04      	itt	eq
 8018c80:	089b      	lsreq	r3, r3, #2
 8018c82:	3002      	addeq	r0, #2
 8018c84:	07da      	lsls	r2, r3, #31
 8018c86:	d402      	bmi.n	8018c8e <__lo0bits+0x4e>
 8018c88:	085b      	lsrs	r3, r3, #1
 8018c8a:	d006      	beq.n	8018c9a <__lo0bits+0x5a>
 8018c8c:	3001      	adds	r0, #1
 8018c8e:	600b      	str	r3, [r1, #0]
 8018c90:	4770      	bx	lr
 8018c92:	4610      	mov	r0, r2
 8018c94:	e7e9      	b.n	8018c6a <__lo0bits+0x2a>
 8018c96:	2000      	movs	r0, #0
 8018c98:	4770      	bx	lr
 8018c9a:	2020      	movs	r0, #32
 8018c9c:	4770      	bx	lr

08018c9e <__i2b>:
 8018c9e:	b510      	push	{r4, lr}
 8018ca0:	460c      	mov	r4, r1
 8018ca2:	2101      	movs	r1, #1
 8018ca4:	f7ff fee9 	bl	8018a7a <_Balloc>
 8018ca8:	2201      	movs	r2, #1
 8018caa:	6144      	str	r4, [r0, #20]
 8018cac:	6102      	str	r2, [r0, #16]
 8018cae:	bd10      	pop	{r4, pc}

08018cb0 <__multiply>:
 8018cb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cb4:	4614      	mov	r4, r2
 8018cb6:	690a      	ldr	r2, [r1, #16]
 8018cb8:	6923      	ldr	r3, [r4, #16]
 8018cba:	429a      	cmp	r2, r3
 8018cbc:	bfb8      	it	lt
 8018cbe:	460b      	movlt	r3, r1
 8018cc0:	4688      	mov	r8, r1
 8018cc2:	bfbc      	itt	lt
 8018cc4:	46a0      	movlt	r8, r4
 8018cc6:	461c      	movlt	r4, r3
 8018cc8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018ccc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018cd0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018cd4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018cd8:	eb07 0609 	add.w	r6, r7, r9
 8018cdc:	42b3      	cmp	r3, r6
 8018cde:	bfb8      	it	lt
 8018ce0:	3101      	addlt	r1, #1
 8018ce2:	f7ff feca 	bl	8018a7a <_Balloc>
 8018ce6:	f100 0514 	add.w	r5, r0, #20
 8018cea:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018cee:	462b      	mov	r3, r5
 8018cf0:	2200      	movs	r2, #0
 8018cf2:	4573      	cmp	r3, lr
 8018cf4:	d316      	bcc.n	8018d24 <__multiply+0x74>
 8018cf6:	f104 0214 	add.w	r2, r4, #20
 8018cfa:	f108 0114 	add.w	r1, r8, #20
 8018cfe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018d02:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018d06:	9300      	str	r3, [sp, #0]
 8018d08:	9b00      	ldr	r3, [sp, #0]
 8018d0a:	9201      	str	r2, [sp, #4]
 8018d0c:	4293      	cmp	r3, r2
 8018d0e:	d80c      	bhi.n	8018d2a <__multiply+0x7a>
 8018d10:	2e00      	cmp	r6, #0
 8018d12:	dd03      	ble.n	8018d1c <__multiply+0x6c>
 8018d14:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	d05d      	beq.n	8018dd8 <__multiply+0x128>
 8018d1c:	6106      	str	r6, [r0, #16]
 8018d1e:	b003      	add	sp, #12
 8018d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d24:	f843 2b04 	str.w	r2, [r3], #4
 8018d28:	e7e3      	b.n	8018cf2 <__multiply+0x42>
 8018d2a:	f8b2 b000 	ldrh.w	fp, [r2]
 8018d2e:	f1bb 0f00 	cmp.w	fp, #0
 8018d32:	d023      	beq.n	8018d7c <__multiply+0xcc>
 8018d34:	4689      	mov	r9, r1
 8018d36:	46ac      	mov	ip, r5
 8018d38:	f04f 0800 	mov.w	r8, #0
 8018d3c:	f859 4b04 	ldr.w	r4, [r9], #4
 8018d40:	f8dc a000 	ldr.w	sl, [ip]
 8018d44:	b2a3      	uxth	r3, r4
 8018d46:	fa1f fa8a 	uxth.w	sl, sl
 8018d4a:	fb0b a303 	mla	r3, fp, r3, sl
 8018d4e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018d52:	f8dc 4000 	ldr.w	r4, [ip]
 8018d56:	4443      	add	r3, r8
 8018d58:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018d5c:	fb0b 840a 	mla	r4, fp, sl, r8
 8018d60:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018d64:	46e2      	mov	sl, ip
 8018d66:	b29b      	uxth	r3, r3
 8018d68:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018d6c:	454f      	cmp	r7, r9
 8018d6e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018d72:	f84a 3b04 	str.w	r3, [sl], #4
 8018d76:	d82b      	bhi.n	8018dd0 <__multiply+0x120>
 8018d78:	f8cc 8004 	str.w	r8, [ip, #4]
 8018d7c:	9b01      	ldr	r3, [sp, #4]
 8018d7e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018d82:	3204      	adds	r2, #4
 8018d84:	f1ba 0f00 	cmp.w	sl, #0
 8018d88:	d020      	beq.n	8018dcc <__multiply+0x11c>
 8018d8a:	682b      	ldr	r3, [r5, #0]
 8018d8c:	4689      	mov	r9, r1
 8018d8e:	46a8      	mov	r8, r5
 8018d90:	f04f 0b00 	mov.w	fp, #0
 8018d94:	f8b9 c000 	ldrh.w	ip, [r9]
 8018d98:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018d9c:	fb0a 440c 	mla	r4, sl, ip, r4
 8018da0:	445c      	add	r4, fp
 8018da2:	46c4      	mov	ip, r8
 8018da4:	b29b      	uxth	r3, r3
 8018da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018daa:	f84c 3b04 	str.w	r3, [ip], #4
 8018dae:	f859 3b04 	ldr.w	r3, [r9], #4
 8018db2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018db6:	0c1b      	lsrs	r3, r3, #16
 8018db8:	fb0a b303 	mla	r3, sl, r3, fp
 8018dbc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018dc0:	454f      	cmp	r7, r9
 8018dc2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018dc6:	d805      	bhi.n	8018dd4 <__multiply+0x124>
 8018dc8:	f8c8 3004 	str.w	r3, [r8, #4]
 8018dcc:	3504      	adds	r5, #4
 8018dce:	e79b      	b.n	8018d08 <__multiply+0x58>
 8018dd0:	46d4      	mov	ip, sl
 8018dd2:	e7b3      	b.n	8018d3c <__multiply+0x8c>
 8018dd4:	46e0      	mov	r8, ip
 8018dd6:	e7dd      	b.n	8018d94 <__multiply+0xe4>
 8018dd8:	3e01      	subs	r6, #1
 8018dda:	e799      	b.n	8018d10 <__multiply+0x60>

08018ddc <__pow5mult>:
 8018ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018de0:	4615      	mov	r5, r2
 8018de2:	f012 0203 	ands.w	r2, r2, #3
 8018de6:	4606      	mov	r6, r0
 8018de8:	460f      	mov	r7, r1
 8018dea:	d007      	beq.n	8018dfc <__pow5mult+0x20>
 8018dec:	3a01      	subs	r2, #1
 8018dee:	4c21      	ldr	r4, [pc, #132]	; (8018e74 <__pow5mult+0x98>)
 8018df0:	2300      	movs	r3, #0
 8018df2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018df6:	f7ff fe8b 	bl	8018b10 <__multadd>
 8018dfa:	4607      	mov	r7, r0
 8018dfc:	10ad      	asrs	r5, r5, #2
 8018dfe:	d035      	beq.n	8018e6c <__pow5mult+0x90>
 8018e00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018e02:	b93c      	cbnz	r4, 8018e14 <__pow5mult+0x38>
 8018e04:	2010      	movs	r0, #16
 8018e06:	f7ff fe13 	bl	8018a30 <malloc>
 8018e0a:	6270      	str	r0, [r6, #36]	; 0x24
 8018e0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018e10:	6004      	str	r4, [r0, #0]
 8018e12:	60c4      	str	r4, [r0, #12]
 8018e14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018e18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018e1c:	b94c      	cbnz	r4, 8018e32 <__pow5mult+0x56>
 8018e1e:	f240 2171 	movw	r1, #625	; 0x271
 8018e22:	4630      	mov	r0, r6
 8018e24:	f7ff ff3b 	bl	8018c9e <__i2b>
 8018e28:	2300      	movs	r3, #0
 8018e2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8018e2e:	4604      	mov	r4, r0
 8018e30:	6003      	str	r3, [r0, #0]
 8018e32:	f04f 0800 	mov.w	r8, #0
 8018e36:	07eb      	lsls	r3, r5, #31
 8018e38:	d50a      	bpl.n	8018e50 <__pow5mult+0x74>
 8018e3a:	4639      	mov	r1, r7
 8018e3c:	4622      	mov	r2, r4
 8018e3e:	4630      	mov	r0, r6
 8018e40:	f7ff ff36 	bl	8018cb0 <__multiply>
 8018e44:	4639      	mov	r1, r7
 8018e46:	4681      	mov	r9, r0
 8018e48:	4630      	mov	r0, r6
 8018e4a:	f7ff fe4a 	bl	8018ae2 <_Bfree>
 8018e4e:	464f      	mov	r7, r9
 8018e50:	106d      	asrs	r5, r5, #1
 8018e52:	d00b      	beq.n	8018e6c <__pow5mult+0x90>
 8018e54:	6820      	ldr	r0, [r4, #0]
 8018e56:	b938      	cbnz	r0, 8018e68 <__pow5mult+0x8c>
 8018e58:	4622      	mov	r2, r4
 8018e5a:	4621      	mov	r1, r4
 8018e5c:	4630      	mov	r0, r6
 8018e5e:	f7ff ff27 	bl	8018cb0 <__multiply>
 8018e62:	6020      	str	r0, [r4, #0]
 8018e64:	f8c0 8000 	str.w	r8, [r0]
 8018e68:	4604      	mov	r4, r0
 8018e6a:	e7e4      	b.n	8018e36 <__pow5mult+0x5a>
 8018e6c:	4638      	mov	r0, r7
 8018e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e72:	bf00      	nop
 8018e74:	0801a7f8 	.word	0x0801a7f8

08018e78 <__lshift>:
 8018e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e7c:	460c      	mov	r4, r1
 8018e7e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018e82:	6923      	ldr	r3, [r4, #16]
 8018e84:	6849      	ldr	r1, [r1, #4]
 8018e86:	eb0a 0903 	add.w	r9, sl, r3
 8018e8a:	68a3      	ldr	r3, [r4, #8]
 8018e8c:	4607      	mov	r7, r0
 8018e8e:	4616      	mov	r6, r2
 8018e90:	f109 0501 	add.w	r5, r9, #1
 8018e94:	42ab      	cmp	r3, r5
 8018e96:	db32      	blt.n	8018efe <__lshift+0x86>
 8018e98:	4638      	mov	r0, r7
 8018e9a:	f7ff fdee 	bl	8018a7a <_Balloc>
 8018e9e:	2300      	movs	r3, #0
 8018ea0:	4680      	mov	r8, r0
 8018ea2:	f100 0114 	add.w	r1, r0, #20
 8018ea6:	461a      	mov	r2, r3
 8018ea8:	4553      	cmp	r3, sl
 8018eaa:	db2b      	blt.n	8018f04 <__lshift+0x8c>
 8018eac:	6920      	ldr	r0, [r4, #16]
 8018eae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018eb2:	f104 0314 	add.w	r3, r4, #20
 8018eb6:	f016 021f 	ands.w	r2, r6, #31
 8018eba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018ebe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018ec2:	d025      	beq.n	8018f10 <__lshift+0x98>
 8018ec4:	f1c2 0e20 	rsb	lr, r2, #32
 8018ec8:	2000      	movs	r0, #0
 8018eca:	681e      	ldr	r6, [r3, #0]
 8018ecc:	468a      	mov	sl, r1
 8018ece:	4096      	lsls	r6, r2
 8018ed0:	4330      	orrs	r0, r6
 8018ed2:	f84a 0b04 	str.w	r0, [sl], #4
 8018ed6:	f853 0b04 	ldr.w	r0, [r3], #4
 8018eda:	459c      	cmp	ip, r3
 8018edc:	fa20 f00e 	lsr.w	r0, r0, lr
 8018ee0:	d814      	bhi.n	8018f0c <__lshift+0x94>
 8018ee2:	6048      	str	r0, [r1, #4]
 8018ee4:	b108      	cbz	r0, 8018eea <__lshift+0x72>
 8018ee6:	f109 0502 	add.w	r5, r9, #2
 8018eea:	3d01      	subs	r5, #1
 8018eec:	4638      	mov	r0, r7
 8018eee:	f8c8 5010 	str.w	r5, [r8, #16]
 8018ef2:	4621      	mov	r1, r4
 8018ef4:	f7ff fdf5 	bl	8018ae2 <_Bfree>
 8018ef8:	4640      	mov	r0, r8
 8018efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018efe:	3101      	adds	r1, #1
 8018f00:	005b      	lsls	r3, r3, #1
 8018f02:	e7c7      	b.n	8018e94 <__lshift+0x1c>
 8018f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018f08:	3301      	adds	r3, #1
 8018f0a:	e7cd      	b.n	8018ea8 <__lshift+0x30>
 8018f0c:	4651      	mov	r1, sl
 8018f0e:	e7dc      	b.n	8018eca <__lshift+0x52>
 8018f10:	3904      	subs	r1, #4
 8018f12:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f16:	f841 2f04 	str.w	r2, [r1, #4]!
 8018f1a:	459c      	cmp	ip, r3
 8018f1c:	d8f9      	bhi.n	8018f12 <__lshift+0x9a>
 8018f1e:	e7e4      	b.n	8018eea <__lshift+0x72>

08018f20 <__mcmp>:
 8018f20:	6903      	ldr	r3, [r0, #16]
 8018f22:	690a      	ldr	r2, [r1, #16]
 8018f24:	1a9b      	subs	r3, r3, r2
 8018f26:	b530      	push	{r4, r5, lr}
 8018f28:	d10c      	bne.n	8018f44 <__mcmp+0x24>
 8018f2a:	0092      	lsls	r2, r2, #2
 8018f2c:	3014      	adds	r0, #20
 8018f2e:	3114      	adds	r1, #20
 8018f30:	1884      	adds	r4, r0, r2
 8018f32:	4411      	add	r1, r2
 8018f34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018f38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018f3c:	4295      	cmp	r5, r2
 8018f3e:	d003      	beq.n	8018f48 <__mcmp+0x28>
 8018f40:	d305      	bcc.n	8018f4e <__mcmp+0x2e>
 8018f42:	2301      	movs	r3, #1
 8018f44:	4618      	mov	r0, r3
 8018f46:	bd30      	pop	{r4, r5, pc}
 8018f48:	42a0      	cmp	r0, r4
 8018f4a:	d3f3      	bcc.n	8018f34 <__mcmp+0x14>
 8018f4c:	e7fa      	b.n	8018f44 <__mcmp+0x24>
 8018f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8018f52:	e7f7      	b.n	8018f44 <__mcmp+0x24>

08018f54 <__mdiff>:
 8018f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f58:	460d      	mov	r5, r1
 8018f5a:	4607      	mov	r7, r0
 8018f5c:	4611      	mov	r1, r2
 8018f5e:	4628      	mov	r0, r5
 8018f60:	4614      	mov	r4, r2
 8018f62:	f7ff ffdd 	bl	8018f20 <__mcmp>
 8018f66:	1e06      	subs	r6, r0, #0
 8018f68:	d108      	bne.n	8018f7c <__mdiff+0x28>
 8018f6a:	4631      	mov	r1, r6
 8018f6c:	4638      	mov	r0, r7
 8018f6e:	f7ff fd84 	bl	8018a7a <_Balloc>
 8018f72:	2301      	movs	r3, #1
 8018f74:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f7c:	bfa4      	itt	ge
 8018f7e:	4623      	movge	r3, r4
 8018f80:	462c      	movge	r4, r5
 8018f82:	4638      	mov	r0, r7
 8018f84:	6861      	ldr	r1, [r4, #4]
 8018f86:	bfa6      	itte	ge
 8018f88:	461d      	movge	r5, r3
 8018f8a:	2600      	movge	r6, #0
 8018f8c:	2601      	movlt	r6, #1
 8018f8e:	f7ff fd74 	bl	8018a7a <_Balloc>
 8018f92:	692b      	ldr	r3, [r5, #16]
 8018f94:	60c6      	str	r6, [r0, #12]
 8018f96:	6926      	ldr	r6, [r4, #16]
 8018f98:	f105 0914 	add.w	r9, r5, #20
 8018f9c:	f104 0214 	add.w	r2, r4, #20
 8018fa0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018fa4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018fa8:	f100 0514 	add.w	r5, r0, #20
 8018fac:	f04f 0e00 	mov.w	lr, #0
 8018fb0:	f852 ab04 	ldr.w	sl, [r2], #4
 8018fb4:	f859 4b04 	ldr.w	r4, [r9], #4
 8018fb8:	fa1e f18a 	uxtah	r1, lr, sl
 8018fbc:	b2a3      	uxth	r3, r4
 8018fbe:	1ac9      	subs	r1, r1, r3
 8018fc0:	0c23      	lsrs	r3, r4, #16
 8018fc2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018fc6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018fca:	b289      	uxth	r1, r1
 8018fcc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018fd0:	45c8      	cmp	r8, r9
 8018fd2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018fd6:	4694      	mov	ip, r2
 8018fd8:	f845 3b04 	str.w	r3, [r5], #4
 8018fdc:	d8e8      	bhi.n	8018fb0 <__mdiff+0x5c>
 8018fde:	45bc      	cmp	ip, r7
 8018fe0:	d304      	bcc.n	8018fec <__mdiff+0x98>
 8018fe2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018fe6:	b183      	cbz	r3, 801900a <__mdiff+0xb6>
 8018fe8:	6106      	str	r6, [r0, #16]
 8018fea:	e7c5      	b.n	8018f78 <__mdiff+0x24>
 8018fec:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018ff0:	fa1e f381 	uxtah	r3, lr, r1
 8018ff4:	141a      	asrs	r2, r3, #16
 8018ff6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018ffa:	b29b      	uxth	r3, r3
 8018ffc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019000:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8019004:	f845 3b04 	str.w	r3, [r5], #4
 8019008:	e7e9      	b.n	8018fde <__mdiff+0x8a>
 801900a:	3e01      	subs	r6, #1
 801900c:	e7e9      	b.n	8018fe2 <__mdiff+0x8e>
	...

08019010 <__ulp>:
 8019010:	4b12      	ldr	r3, [pc, #72]	; (801905c <__ulp+0x4c>)
 8019012:	ee10 2a90 	vmov	r2, s1
 8019016:	401a      	ands	r2, r3
 8019018:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801901c:	2b00      	cmp	r3, #0
 801901e:	dd04      	ble.n	801902a <__ulp+0x1a>
 8019020:	2000      	movs	r0, #0
 8019022:	4619      	mov	r1, r3
 8019024:	ec41 0b10 	vmov	d0, r0, r1
 8019028:	4770      	bx	lr
 801902a:	425b      	negs	r3, r3
 801902c:	151b      	asrs	r3, r3, #20
 801902e:	2b13      	cmp	r3, #19
 8019030:	f04f 0000 	mov.w	r0, #0
 8019034:	f04f 0100 	mov.w	r1, #0
 8019038:	dc04      	bgt.n	8019044 <__ulp+0x34>
 801903a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801903e:	fa42 f103 	asr.w	r1, r2, r3
 8019042:	e7ef      	b.n	8019024 <__ulp+0x14>
 8019044:	3b14      	subs	r3, #20
 8019046:	2b1e      	cmp	r3, #30
 8019048:	f04f 0201 	mov.w	r2, #1
 801904c:	bfda      	itte	le
 801904e:	f1c3 031f 	rsble	r3, r3, #31
 8019052:	fa02 f303 	lslle.w	r3, r2, r3
 8019056:	4613      	movgt	r3, r2
 8019058:	4618      	mov	r0, r3
 801905a:	e7e3      	b.n	8019024 <__ulp+0x14>
 801905c:	7ff00000 	.word	0x7ff00000

08019060 <__b2d>:
 8019060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019062:	6905      	ldr	r5, [r0, #16]
 8019064:	f100 0714 	add.w	r7, r0, #20
 8019068:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801906c:	1f2e      	subs	r6, r5, #4
 801906e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8019072:	4620      	mov	r0, r4
 8019074:	f7ff fdc5 	bl	8018c02 <__hi0bits>
 8019078:	f1c0 0320 	rsb	r3, r0, #32
 801907c:	280a      	cmp	r0, #10
 801907e:	600b      	str	r3, [r1, #0]
 8019080:	f8df c074 	ldr.w	ip, [pc, #116]	; 80190f8 <__b2d+0x98>
 8019084:	dc14      	bgt.n	80190b0 <__b2d+0x50>
 8019086:	f1c0 0e0b 	rsb	lr, r0, #11
 801908a:	fa24 f10e 	lsr.w	r1, r4, lr
 801908e:	42b7      	cmp	r7, r6
 8019090:	ea41 030c 	orr.w	r3, r1, ip
 8019094:	bf34      	ite	cc
 8019096:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801909a:	2100      	movcs	r1, #0
 801909c:	3015      	adds	r0, #21
 801909e:	fa04 f000 	lsl.w	r0, r4, r0
 80190a2:	fa21 f10e 	lsr.w	r1, r1, lr
 80190a6:	ea40 0201 	orr.w	r2, r0, r1
 80190aa:	ec43 2b10 	vmov	d0, r2, r3
 80190ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190b0:	42b7      	cmp	r7, r6
 80190b2:	bf3a      	itte	cc
 80190b4:	f1a5 0608 	subcc.w	r6, r5, #8
 80190b8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80190bc:	2100      	movcs	r1, #0
 80190be:	380b      	subs	r0, #11
 80190c0:	d015      	beq.n	80190ee <__b2d+0x8e>
 80190c2:	4084      	lsls	r4, r0
 80190c4:	f1c0 0520 	rsb	r5, r0, #32
 80190c8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80190cc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80190d0:	42be      	cmp	r6, r7
 80190d2:	fa21 fc05 	lsr.w	ip, r1, r5
 80190d6:	ea44 030c 	orr.w	r3, r4, ip
 80190da:	bf8c      	ite	hi
 80190dc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80190e0:	2400      	movls	r4, #0
 80190e2:	fa01 f000 	lsl.w	r0, r1, r0
 80190e6:	40ec      	lsrs	r4, r5
 80190e8:	ea40 0204 	orr.w	r2, r0, r4
 80190ec:	e7dd      	b.n	80190aa <__b2d+0x4a>
 80190ee:	ea44 030c 	orr.w	r3, r4, ip
 80190f2:	460a      	mov	r2, r1
 80190f4:	e7d9      	b.n	80190aa <__b2d+0x4a>
 80190f6:	bf00      	nop
 80190f8:	3ff00000 	.word	0x3ff00000

080190fc <__d2b>:
 80190fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019100:	460e      	mov	r6, r1
 8019102:	2101      	movs	r1, #1
 8019104:	ec59 8b10 	vmov	r8, r9, d0
 8019108:	4615      	mov	r5, r2
 801910a:	f7ff fcb6 	bl	8018a7a <_Balloc>
 801910e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8019112:	4607      	mov	r7, r0
 8019114:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019118:	bb34      	cbnz	r4, 8019168 <__d2b+0x6c>
 801911a:	9301      	str	r3, [sp, #4]
 801911c:	f1b8 0300 	subs.w	r3, r8, #0
 8019120:	d027      	beq.n	8019172 <__d2b+0x76>
 8019122:	a802      	add	r0, sp, #8
 8019124:	f840 3d08 	str.w	r3, [r0, #-8]!
 8019128:	f7ff fd8a 	bl	8018c40 <__lo0bits>
 801912c:	9900      	ldr	r1, [sp, #0]
 801912e:	b1f0      	cbz	r0, 801916e <__d2b+0x72>
 8019130:	9a01      	ldr	r2, [sp, #4]
 8019132:	f1c0 0320 	rsb	r3, r0, #32
 8019136:	fa02 f303 	lsl.w	r3, r2, r3
 801913a:	430b      	orrs	r3, r1
 801913c:	40c2      	lsrs	r2, r0
 801913e:	617b      	str	r3, [r7, #20]
 8019140:	9201      	str	r2, [sp, #4]
 8019142:	9b01      	ldr	r3, [sp, #4]
 8019144:	61bb      	str	r3, [r7, #24]
 8019146:	2b00      	cmp	r3, #0
 8019148:	bf14      	ite	ne
 801914a:	2102      	movne	r1, #2
 801914c:	2101      	moveq	r1, #1
 801914e:	6139      	str	r1, [r7, #16]
 8019150:	b1c4      	cbz	r4, 8019184 <__d2b+0x88>
 8019152:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8019156:	4404      	add	r4, r0
 8019158:	6034      	str	r4, [r6, #0]
 801915a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801915e:	6028      	str	r0, [r5, #0]
 8019160:	4638      	mov	r0, r7
 8019162:	b003      	add	sp, #12
 8019164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019168:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801916c:	e7d5      	b.n	801911a <__d2b+0x1e>
 801916e:	6179      	str	r1, [r7, #20]
 8019170:	e7e7      	b.n	8019142 <__d2b+0x46>
 8019172:	a801      	add	r0, sp, #4
 8019174:	f7ff fd64 	bl	8018c40 <__lo0bits>
 8019178:	9b01      	ldr	r3, [sp, #4]
 801917a:	617b      	str	r3, [r7, #20]
 801917c:	2101      	movs	r1, #1
 801917e:	6139      	str	r1, [r7, #16]
 8019180:	3020      	adds	r0, #32
 8019182:	e7e5      	b.n	8019150 <__d2b+0x54>
 8019184:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8019188:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801918c:	6030      	str	r0, [r6, #0]
 801918e:	6918      	ldr	r0, [r3, #16]
 8019190:	f7ff fd37 	bl	8018c02 <__hi0bits>
 8019194:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8019198:	e7e1      	b.n	801915e <__d2b+0x62>

0801919a <__ratio>:
 801919a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801919e:	4688      	mov	r8, r1
 80191a0:	4669      	mov	r1, sp
 80191a2:	4681      	mov	r9, r0
 80191a4:	f7ff ff5c 	bl	8019060 <__b2d>
 80191a8:	a901      	add	r1, sp, #4
 80191aa:	4640      	mov	r0, r8
 80191ac:	ec57 6b10 	vmov	r6, r7, d0
 80191b0:	f7ff ff56 	bl	8019060 <__b2d>
 80191b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80191b8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80191bc:	eba3 0c02 	sub.w	ip, r3, r2
 80191c0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80191c4:	1a9b      	subs	r3, r3, r2
 80191c6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80191ca:	ec5b ab10 	vmov	sl, fp, d0
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	bfce      	itee	gt
 80191d2:	463a      	movgt	r2, r7
 80191d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80191d8:	465a      	movle	r2, fp
 80191da:	4659      	mov	r1, fp
 80191dc:	463d      	mov	r5, r7
 80191de:	bfd4      	ite	le
 80191e0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80191e4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80191e8:	4630      	mov	r0, r6
 80191ea:	ee10 2a10 	vmov	r2, s0
 80191ee:	460b      	mov	r3, r1
 80191f0:	4629      	mov	r1, r5
 80191f2:	f7e7 fb43 	bl	800087c <__aeabi_ddiv>
 80191f6:	ec41 0b10 	vmov	d0, r0, r1
 80191fa:	b003      	add	sp, #12
 80191fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019200 <__copybits>:
 8019200:	3901      	subs	r1, #1
 8019202:	b510      	push	{r4, lr}
 8019204:	1149      	asrs	r1, r1, #5
 8019206:	6914      	ldr	r4, [r2, #16]
 8019208:	3101      	adds	r1, #1
 801920a:	f102 0314 	add.w	r3, r2, #20
 801920e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019212:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019216:	42a3      	cmp	r3, r4
 8019218:	4602      	mov	r2, r0
 801921a:	d303      	bcc.n	8019224 <__copybits+0x24>
 801921c:	2300      	movs	r3, #0
 801921e:	428a      	cmp	r2, r1
 8019220:	d305      	bcc.n	801922e <__copybits+0x2e>
 8019222:	bd10      	pop	{r4, pc}
 8019224:	f853 2b04 	ldr.w	r2, [r3], #4
 8019228:	f840 2b04 	str.w	r2, [r0], #4
 801922c:	e7f3      	b.n	8019216 <__copybits+0x16>
 801922e:	f842 3b04 	str.w	r3, [r2], #4
 8019232:	e7f4      	b.n	801921e <__copybits+0x1e>

08019234 <__any_on>:
 8019234:	f100 0214 	add.w	r2, r0, #20
 8019238:	6900      	ldr	r0, [r0, #16]
 801923a:	114b      	asrs	r3, r1, #5
 801923c:	4298      	cmp	r0, r3
 801923e:	b510      	push	{r4, lr}
 8019240:	db11      	blt.n	8019266 <__any_on+0x32>
 8019242:	dd0a      	ble.n	801925a <__any_on+0x26>
 8019244:	f011 011f 	ands.w	r1, r1, #31
 8019248:	d007      	beq.n	801925a <__any_on+0x26>
 801924a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801924e:	fa24 f001 	lsr.w	r0, r4, r1
 8019252:	fa00 f101 	lsl.w	r1, r0, r1
 8019256:	428c      	cmp	r4, r1
 8019258:	d10b      	bne.n	8019272 <__any_on+0x3e>
 801925a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801925e:	4293      	cmp	r3, r2
 8019260:	d803      	bhi.n	801926a <__any_on+0x36>
 8019262:	2000      	movs	r0, #0
 8019264:	bd10      	pop	{r4, pc}
 8019266:	4603      	mov	r3, r0
 8019268:	e7f7      	b.n	801925a <__any_on+0x26>
 801926a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801926e:	2900      	cmp	r1, #0
 8019270:	d0f5      	beq.n	801925e <__any_on+0x2a>
 8019272:	2001      	movs	r0, #1
 8019274:	e7f6      	b.n	8019264 <__any_on+0x30>

08019276 <_calloc_r>:
 8019276:	b538      	push	{r3, r4, r5, lr}
 8019278:	fb02 f401 	mul.w	r4, r2, r1
 801927c:	4621      	mov	r1, r4
 801927e:	f000 f857 	bl	8019330 <_malloc_r>
 8019282:	4605      	mov	r5, r0
 8019284:	b118      	cbz	r0, 801928e <_calloc_r+0x18>
 8019286:	4622      	mov	r2, r4
 8019288:	2100      	movs	r1, #0
 801928a:	f7fc fca1 	bl	8015bd0 <memset>
 801928e:	4628      	mov	r0, r5
 8019290:	bd38      	pop	{r3, r4, r5, pc}
	...

08019294 <_free_r>:
 8019294:	b538      	push	{r3, r4, r5, lr}
 8019296:	4605      	mov	r5, r0
 8019298:	2900      	cmp	r1, #0
 801929a:	d045      	beq.n	8019328 <_free_r+0x94>
 801929c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80192a0:	1f0c      	subs	r4, r1, #4
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	bfb8      	it	lt
 80192a6:	18e4      	addlt	r4, r4, r3
 80192a8:	f000 fe30 	bl	8019f0c <__malloc_lock>
 80192ac:	4a1f      	ldr	r2, [pc, #124]	; (801932c <_free_r+0x98>)
 80192ae:	6813      	ldr	r3, [r2, #0]
 80192b0:	4610      	mov	r0, r2
 80192b2:	b933      	cbnz	r3, 80192c2 <_free_r+0x2e>
 80192b4:	6063      	str	r3, [r4, #4]
 80192b6:	6014      	str	r4, [r2, #0]
 80192b8:	4628      	mov	r0, r5
 80192ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80192be:	f000 be26 	b.w	8019f0e <__malloc_unlock>
 80192c2:	42a3      	cmp	r3, r4
 80192c4:	d90c      	bls.n	80192e0 <_free_r+0x4c>
 80192c6:	6821      	ldr	r1, [r4, #0]
 80192c8:	1862      	adds	r2, r4, r1
 80192ca:	4293      	cmp	r3, r2
 80192cc:	bf04      	itt	eq
 80192ce:	681a      	ldreq	r2, [r3, #0]
 80192d0:	685b      	ldreq	r3, [r3, #4]
 80192d2:	6063      	str	r3, [r4, #4]
 80192d4:	bf04      	itt	eq
 80192d6:	1852      	addeq	r2, r2, r1
 80192d8:	6022      	streq	r2, [r4, #0]
 80192da:	6004      	str	r4, [r0, #0]
 80192dc:	e7ec      	b.n	80192b8 <_free_r+0x24>
 80192de:	4613      	mov	r3, r2
 80192e0:	685a      	ldr	r2, [r3, #4]
 80192e2:	b10a      	cbz	r2, 80192e8 <_free_r+0x54>
 80192e4:	42a2      	cmp	r2, r4
 80192e6:	d9fa      	bls.n	80192de <_free_r+0x4a>
 80192e8:	6819      	ldr	r1, [r3, #0]
 80192ea:	1858      	adds	r0, r3, r1
 80192ec:	42a0      	cmp	r0, r4
 80192ee:	d10b      	bne.n	8019308 <_free_r+0x74>
 80192f0:	6820      	ldr	r0, [r4, #0]
 80192f2:	4401      	add	r1, r0
 80192f4:	1858      	adds	r0, r3, r1
 80192f6:	4282      	cmp	r2, r0
 80192f8:	6019      	str	r1, [r3, #0]
 80192fa:	d1dd      	bne.n	80192b8 <_free_r+0x24>
 80192fc:	6810      	ldr	r0, [r2, #0]
 80192fe:	6852      	ldr	r2, [r2, #4]
 8019300:	605a      	str	r2, [r3, #4]
 8019302:	4401      	add	r1, r0
 8019304:	6019      	str	r1, [r3, #0]
 8019306:	e7d7      	b.n	80192b8 <_free_r+0x24>
 8019308:	d902      	bls.n	8019310 <_free_r+0x7c>
 801930a:	230c      	movs	r3, #12
 801930c:	602b      	str	r3, [r5, #0]
 801930e:	e7d3      	b.n	80192b8 <_free_r+0x24>
 8019310:	6820      	ldr	r0, [r4, #0]
 8019312:	1821      	adds	r1, r4, r0
 8019314:	428a      	cmp	r2, r1
 8019316:	bf04      	itt	eq
 8019318:	6811      	ldreq	r1, [r2, #0]
 801931a:	6852      	ldreq	r2, [r2, #4]
 801931c:	6062      	str	r2, [r4, #4]
 801931e:	bf04      	itt	eq
 8019320:	1809      	addeq	r1, r1, r0
 8019322:	6021      	streq	r1, [r4, #0]
 8019324:	605c      	str	r4, [r3, #4]
 8019326:	e7c7      	b.n	80192b8 <_free_r+0x24>
 8019328:	bd38      	pop	{r3, r4, r5, pc}
 801932a:	bf00      	nop
 801932c:	20042498 	.word	0x20042498

08019330 <_malloc_r>:
 8019330:	b570      	push	{r4, r5, r6, lr}
 8019332:	1ccd      	adds	r5, r1, #3
 8019334:	f025 0503 	bic.w	r5, r5, #3
 8019338:	3508      	adds	r5, #8
 801933a:	2d0c      	cmp	r5, #12
 801933c:	bf38      	it	cc
 801933e:	250c      	movcc	r5, #12
 8019340:	2d00      	cmp	r5, #0
 8019342:	4606      	mov	r6, r0
 8019344:	db01      	blt.n	801934a <_malloc_r+0x1a>
 8019346:	42a9      	cmp	r1, r5
 8019348:	d903      	bls.n	8019352 <_malloc_r+0x22>
 801934a:	230c      	movs	r3, #12
 801934c:	6033      	str	r3, [r6, #0]
 801934e:	2000      	movs	r0, #0
 8019350:	bd70      	pop	{r4, r5, r6, pc}
 8019352:	f000 fddb 	bl	8019f0c <__malloc_lock>
 8019356:	4a21      	ldr	r2, [pc, #132]	; (80193dc <_malloc_r+0xac>)
 8019358:	6814      	ldr	r4, [r2, #0]
 801935a:	4621      	mov	r1, r4
 801935c:	b991      	cbnz	r1, 8019384 <_malloc_r+0x54>
 801935e:	4c20      	ldr	r4, [pc, #128]	; (80193e0 <_malloc_r+0xb0>)
 8019360:	6823      	ldr	r3, [r4, #0]
 8019362:	b91b      	cbnz	r3, 801936c <_malloc_r+0x3c>
 8019364:	4630      	mov	r0, r6
 8019366:	f000 fc91 	bl	8019c8c <_sbrk_r>
 801936a:	6020      	str	r0, [r4, #0]
 801936c:	4629      	mov	r1, r5
 801936e:	4630      	mov	r0, r6
 8019370:	f000 fc8c 	bl	8019c8c <_sbrk_r>
 8019374:	1c43      	adds	r3, r0, #1
 8019376:	d124      	bne.n	80193c2 <_malloc_r+0x92>
 8019378:	230c      	movs	r3, #12
 801937a:	6033      	str	r3, [r6, #0]
 801937c:	4630      	mov	r0, r6
 801937e:	f000 fdc6 	bl	8019f0e <__malloc_unlock>
 8019382:	e7e4      	b.n	801934e <_malloc_r+0x1e>
 8019384:	680b      	ldr	r3, [r1, #0]
 8019386:	1b5b      	subs	r3, r3, r5
 8019388:	d418      	bmi.n	80193bc <_malloc_r+0x8c>
 801938a:	2b0b      	cmp	r3, #11
 801938c:	d90f      	bls.n	80193ae <_malloc_r+0x7e>
 801938e:	600b      	str	r3, [r1, #0]
 8019390:	50cd      	str	r5, [r1, r3]
 8019392:	18cc      	adds	r4, r1, r3
 8019394:	4630      	mov	r0, r6
 8019396:	f000 fdba 	bl	8019f0e <__malloc_unlock>
 801939a:	f104 000b 	add.w	r0, r4, #11
 801939e:	1d23      	adds	r3, r4, #4
 80193a0:	f020 0007 	bic.w	r0, r0, #7
 80193a4:	1ac3      	subs	r3, r0, r3
 80193a6:	d0d3      	beq.n	8019350 <_malloc_r+0x20>
 80193a8:	425a      	negs	r2, r3
 80193aa:	50e2      	str	r2, [r4, r3]
 80193ac:	e7d0      	b.n	8019350 <_malloc_r+0x20>
 80193ae:	428c      	cmp	r4, r1
 80193b0:	684b      	ldr	r3, [r1, #4]
 80193b2:	bf16      	itet	ne
 80193b4:	6063      	strne	r3, [r4, #4]
 80193b6:	6013      	streq	r3, [r2, #0]
 80193b8:	460c      	movne	r4, r1
 80193ba:	e7eb      	b.n	8019394 <_malloc_r+0x64>
 80193bc:	460c      	mov	r4, r1
 80193be:	6849      	ldr	r1, [r1, #4]
 80193c0:	e7cc      	b.n	801935c <_malloc_r+0x2c>
 80193c2:	1cc4      	adds	r4, r0, #3
 80193c4:	f024 0403 	bic.w	r4, r4, #3
 80193c8:	42a0      	cmp	r0, r4
 80193ca:	d005      	beq.n	80193d8 <_malloc_r+0xa8>
 80193cc:	1a21      	subs	r1, r4, r0
 80193ce:	4630      	mov	r0, r6
 80193d0:	f000 fc5c 	bl	8019c8c <_sbrk_r>
 80193d4:	3001      	adds	r0, #1
 80193d6:	d0cf      	beq.n	8019378 <_malloc_r+0x48>
 80193d8:	6025      	str	r5, [r4, #0]
 80193da:	e7db      	b.n	8019394 <_malloc_r+0x64>
 80193dc:	20042498 	.word	0x20042498
 80193e0:	2004249c 	.word	0x2004249c

080193e4 <__ssputs_r>:
 80193e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80193e8:	688e      	ldr	r6, [r1, #8]
 80193ea:	429e      	cmp	r6, r3
 80193ec:	4682      	mov	sl, r0
 80193ee:	460c      	mov	r4, r1
 80193f0:	4690      	mov	r8, r2
 80193f2:	4699      	mov	r9, r3
 80193f4:	d837      	bhi.n	8019466 <__ssputs_r+0x82>
 80193f6:	898a      	ldrh	r2, [r1, #12]
 80193f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80193fc:	d031      	beq.n	8019462 <__ssputs_r+0x7e>
 80193fe:	6825      	ldr	r5, [r4, #0]
 8019400:	6909      	ldr	r1, [r1, #16]
 8019402:	1a6f      	subs	r7, r5, r1
 8019404:	6965      	ldr	r5, [r4, #20]
 8019406:	2302      	movs	r3, #2
 8019408:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801940c:	fb95 f5f3 	sdiv	r5, r5, r3
 8019410:	f109 0301 	add.w	r3, r9, #1
 8019414:	443b      	add	r3, r7
 8019416:	429d      	cmp	r5, r3
 8019418:	bf38      	it	cc
 801941a:	461d      	movcc	r5, r3
 801941c:	0553      	lsls	r3, r2, #21
 801941e:	d530      	bpl.n	8019482 <__ssputs_r+0x9e>
 8019420:	4629      	mov	r1, r5
 8019422:	f7ff ff85 	bl	8019330 <_malloc_r>
 8019426:	4606      	mov	r6, r0
 8019428:	b950      	cbnz	r0, 8019440 <__ssputs_r+0x5c>
 801942a:	230c      	movs	r3, #12
 801942c:	f8ca 3000 	str.w	r3, [sl]
 8019430:	89a3      	ldrh	r3, [r4, #12]
 8019432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019436:	81a3      	strh	r3, [r4, #12]
 8019438:	f04f 30ff 	mov.w	r0, #4294967295
 801943c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019440:	463a      	mov	r2, r7
 8019442:	6921      	ldr	r1, [r4, #16]
 8019444:	f7ff fb0e 	bl	8018a64 <memcpy>
 8019448:	89a3      	ldrh	r3, [r4, #12]
 801944a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801944e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019452:	81a3      	strh	r3, [r4, #12]
 8019454:	6126      	str	r6, [r4, #16]
 8019456:	6165      	str	r5, [r4, #20]
 8019458:	443e      	add	r6, r7
 801945a:	1bed      	subs	r5, r5, r7
 801945c:	6026      	str	r6, [r4, #0]
 801945e:	60a5      	str	r5, [r4, #8]
 8019460:	464e      	mov	r6, r9
 8019462:	454e      	cmp	r6, r9
 8019464:	d900      	bls.n	8019468 <__ssputs_r+0x84>
 8019466:	464e      	mov	r6, r9
 8019468:	4632      	mov	r2, r6
 801946a:	4641      	mov	r1, r8
 801946c:	6820      	ldr	r0, [r4, #0]
 801946e:	f000 fd34 	bl	8019eda <memmove>
 8019472:	68a3      	ldr	r3, [r4, #8]
 8019474:	1b9b      	subs	r3, r3, r6
 8019476:	60a3      	str	r3, [r4, #8]
 8019478:	6823      	ldr	r3, [r4, #0]
 801947a:	441e      	add	r6, r3
 801947c:	6026      	str	r6, [r4, #0]
 801947e:	2000      	movs	r0, #0
 8019480:	e7dc      	b.n	801943c <__ssputs_r+0x58>
 8019482:	462a      	mov	r2, r5
 8019484:	f000 fd44 	bl	8019f10 <_realloc_r>
 8019488:	4606      	mov	r6, r0
 801948a:	2800      	cmp	r0, #0
 801948c:	d1e2      	bne.n	8019454 <__ssputs_r+0x70>
 801948e:	6921      	ldr	r1, [r4, #16]
 8019490:	4650      	mov	r0, sl
 8019492:	f7ff feff 	bl	8019294 <_free_r>
 8019496:	e7c8      	b.n	801942a <__ssputs_r+0x46>

08019498 <_svfiprintf_r>:
 8019498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801949c:	461d      	mov	r5, r3
 801949e:	898b      	ldrh	r3, [r1, #12]
 80194a0:	061f      	lsls	r7, r3, #24
 80194a2:	b09d      	sub	sp, #116	; 0x74
 80194a4:	4680      	mov	r8, r0
 80194a6:	460c      	mov	r4, r1
 80194a8:	4616      	mov	r6, r2
 80194aa:	d50f      	bpl.n	80194cc <_svfiprintf_r+0x34>
 80194ac:	690b      	ldr	r3, [r1, #16]
 80194ae:	b96b      	cbnz	r3, 80194cc <_svfiprintf_r+0x34>
 80194b0:	2140      	movs	r1, #64	; 0x40
 80194b2:	f7ff ff3d 	bl	8019330 <_malloc_r>
 80194b6:	6020      	str	r0, [r4, #0]
 80194b8:	6120      	str	r0, [r4, #16]
 80194ba:	b928      	cbnz	r0, 80194c8 <_svfiprintf_r+0x30>
 80194bc:	230c      	movs	r3, #12
 80194be:	f8c8 3000 	str.w	r3, [r8]
 80194c2:	f04f 30ff 	mov.w	r0, #4294967295
 80194c6:	e0c8      	b.n	801965a <_svfiprintf_r+0x1c2>
 80194c8:	2340      	movs	r3, #64	; 0x40
 80194ca:	6163      	str	r3, [r4, #20]
 80194cc:	2300      	movs	r3, #0
 80194ce:	9309      	str	r3, [sp, #36]	; 0x24
 80194d0:	2320      	movs	r3, #32
 80194d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80194d6:	2330      	movs	r3, #48	; 0x30
 80194d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80194dc:	9503      	str	r5, [sp, #12]
 80194de:	f04f 0b01 	mov.w	fp, #1
 80194e2:	4637      	mov	r7, r6
 80194e4:	463d      	mov	r5, r7
 80194e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80194ea:	b10b      	cbz	r3, 80194f0 <_svfiprintf_r+0x58>
 80194ec:	2b25      	cmp	r3, #37	; 0x25
 80194ee:	d13e      	bne.n	801956e <_svfiprintf_r+0xd6>
 80194f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80194f4:	d00b      	beq.n	801950e <_svfiprintf_r+0x76>
 80194f6:	4653      	mov	r3, sl
 80194f8:	4632      	mov	r2, r6
 80194fa:	4621      	mov	r1, r4
 80194fc:	4640      	mov	r0, r8
 80194fe:	f7ff ff71 	bl	80193e4 <__ssputs_r>
 8019502:	3001      	adds	r0, #1
 8019504:	f000 80a4 	beq.w	8019650 <_svfiprintf_r+0x1b8>
 8019508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801950a:	4453      	add	r3, sl
 801950c:	9309      	str	r3, [sp, #36]	; 0x24
 801950e:	783b      	ldrb	r3, [r7, #0]
 8019510:	2b00      	cmp	r3, #0
 8019512:	f000 809d 	beq.w	8019650 <_svfiprintf_r+0x1b8>
 8019516:	2300      	movs	r3, #0
 8019518:	f04f 32ff 	mov.w	r2, #4294967295
 801951c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019520:	9304      	str	r3, [sp, #16]
 8019522:	9307      	str	r3, [sp, #28]
 8019524:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019528:	931a      	str	r3, [sp, #104]	; 0x68
 801952a:	462f      	mov	r7, r5
 801952c:	2205      	movs	r2, #5
 801952e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019532:	4850      	ldr	r0, [pc, #320]	; (8019674 <_svfiprintf_r+0x1dc>)
 8019534:	f7e6 fe6c 	bl	8000210 <memchr>
 8019538:	9b04      	ldr	r3, [sp, #16]
 801953a:	b9d0      	cbnz	r0, 8019572 <_svfiprintf_r+0xda>
 801953c:	06d9      	lsls	r1, r3, #27
 801953e:	bf44      	itt	mi
 8019540:	2220      	movmi	r2, #32
 8019542:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019546:	071a      	lsls	r2, r3, #28
 8019548:	bf44      	itt	mi
 801954a:	222b      	movmi	r2, #43	; 0x2b
 801954c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019550:	782a      	ldrb	r2, [r5, #0]
 8019552:	2a2a      	cmp	r2, #42	; 0x2a
 8019554:	d015      	beq.n	8019582 <_svfiprintf_r+0xea>
 8019556:	9a07      	ldr	r2, [sp, #28]
 8019558:	462f      	mov	r7, r5
 801955a:	2000      	movs	r0, #0
 801955c:	250a      	movs	r5, #10
 801955e:	4639      	mov	r1, r7
 8019560:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019564:	3b30      	subs	r3, #48	; 0x30
 8019566:	2b09      	cmp	r3, #9
 8019568:	d94d      	bls.n	8019606 <_svfiprintf_r+0x16e>
 801956a:	b1b8      	cbz	r0, 801959c <_svfiprintf_r+0x104>
 801956c:	e00f      	b.n	801958e <_svfiprintf_r+0xf6>
 801956e:	462f      	mov	r7, r5
 8019570:	e7b8      	b.n	80194e4 <_svfiprintf_r+0x4c>
 8019572:	4a40      	ldr	r2, [pc, #256]	; (8019674 <_svfiprintf_r+0x1dc>)
 8019574:	1a80      	subs	r0, r0, r2
 8019576:	fa0b f000 	lsl.w	r0, fp, r0
 801957a:	4318      	orrs	r0, r3
 801957c:	9004      	str	r0, [sp, #16]
 801957e:	463d      	mov	r5, r7
 8019580:	e7d3      	b.n	801952a <_svfiprintf_r+0x92>
 8019582:	9a03      	ldr	r2, [sp, #12]
 8019584:	1d11      	adds	r1, r2, #4
 8019586:	6812      	ldr	r2, [r2, #0]
 8019588:	9103      	str	r1, [sp, #12]
 801958a:	2a00      	cmp	r2, #0
 801958c:	db01      	blt.n	8019592 <_svfiprintf_r+0xfa>
 801958e:	9207      	str	r2, [sp, #28]
 8019590:	e004      	b.n	801959c <_svfiprintf_r+0x104>
 8019592:	4252      	negs	r2, r2
 8019594:	f043 0302 	orr.w	r3, r3, #2
 8019598:	9207      	str	r2, [sp, #28]
 801959a:	9304      	str	r3, [sp, #16]
 801959c:	783b      	ldrb	r3, [r7, #0]
 801959e:	2b2e      	cmp	r3, #46	; 0x2e
 80195a0:	d10c      	bne.n	80195bc <_svfiprintf_r+0x124>
 80195a2:	787b      	ldrb	r3, [r7, #1]
 80195a4:	2b2a      	cmp	r3, #42	; 0x2a
 80195a6:	d133      	bne.n	8019610 <_svfiprintf_r+0x178>
 80195a8:	9b03      	ldr	r3, [sp, #12]
 80195aa:	1d1a      	adds	r2, r3, #4
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	9203      	str	r2, [sp, #12]
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	bfb8      	it	lt
 80195b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80195b8:	3702      	adds	r7, #2
 80195ba:	9305      	str	r3, [sp, #20]
 80195bc:	4d2e      	ldr	r5, [pc, #184]	; (8019678 <_svfiprintf_r+0x1e0>)
 80195be:	7839      	ldrb	r1, [r7, #0]
 80195c0:	2203      	movs	r2, #3
 80195c2:	4628      	mov	r0, r5
 80195c4:	f7e6 fe24 	bl	8000210 <memchr>
 80195c8:	b138      	cbz	r0, 80195da <_svfiprintf_r+0x142>
 80195ca:	2340      	movs	r3, #64	; 0x40
 80195cc:	1b40      	subs	r0, r0, r5
 80195ce:	fa03 f000 	lsl.w	r0, r3, r0
 80195d2:	9b04      	ldr	r3, [sp, #16]
 80195d4:	4303      	orrs	r3, r0
 80195d6:	3701      	adds	r7, #1
 80195d8:	9304      	str	r3, [sp, #16]
 80195da:	7839      	ldrb	r1, [r7, #0]
 80195dc:	4827      	ldr	r0, [pc, #156]	; (801967c <_svfiprintf_r+0x1e4>)
 80195de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80195e2:	2206      	movs	r2, #6
 80195e4:	1c7e      	adds	r6, r7, #1
 80195e6:	f7e6 fe13 	bl	8000210 <memchr>
 80195ea:	2800      	cmp	r0, #0
 80195ec:	d038      	beq.n	8019660 <_svfiprintf_r+0x1c8>
 80195ee:	4b24      	ldr	r3, [pc, #144]	; (8019680 <_svfiprintf_r+0x1e8>)
 80195f0:	bb13      	cbnz	r3, 8019638 <_svfiprintf_r+0x1a0>
 80195f2:	9b03      	ldr	r3, [sp, #12]
 80195f4:	3307      	adds	r3, #7
 80195f6:	f023 0307 	bic.w	r3, r3, #7
 80195fa:	3308      	adds	r3, #8
 80195fc:	9303      	str	r3, [sp, #12]
 80195fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019600:	444b      	add	r3, r9
 8019602:	9309      	str	r3, [sp, #36]	; 0x24
 8019604:	e76d      	b.n	80194e2 <_svfiprintf_r+0x4a>
 8019606:	fb05 3202 	mla	r2, r5, r2, r3
 801960a:	2001      	movs	r0, #1
 801960c:	460f      	mov	r7, r1
 801960e:	e7a6      	b.n	801955e <_svfiprintf_r+0xc6>
 8019610:	2300      	movs	r3, #0
 8019612:	3701      	adds	r7, #1
 8019614:	9305      	str	r3, [sp, #20]
 8019616:	4619      	mov	r1, r3
 8019618:	250a      	movs	r5, #10
 801961a:	4638      	mov	r0, r7
 801961c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019620:	3a30      	subs	r2, #48	; 0x30
 8019622:	2a09      	cmp	r2, #9
 8019624:	d903      	bls.n	801962e <_svfiprintf_r+0x196>
 8019626:	2b00      	cmp	r3, #0
 8019628:	d0c8      	beq.n	80195bc <_svfiprintf_r+0x124>
 801962a:	9105      	str	r1, [sp, #20]
 801962c:	e7c6      	b.n	80195bc <_svfiprintf_r+0x124>
 801962e:	fb05 2101 	mla	r1, r5, r1, r2
 8019632:	2301      	movs	r3, #1
 8019634:	4607      	mov	r7, r0
 8019636:	e7f0      	b.n	801961a <_svfiprintf_r+0x182>
 8019638:	ab03      	add	r3, sp, #12
 801963a:	9300      	str	r3, [sp, #0]
 801963c:	4622      	mov	r2, r4
 801963e:	4b11      	ldr	r3, [pc, #68]	; (8019684 <_svfiprintf_r+0x1ec>)
 8019640:	a904      	add	r1, sp, #16
 8019642:	4640      	mov	r0, r8
 8019644:	f7fc fb60 	bl	8015d08 <_printf_float>
 8019648:	f1b0 3fff 	cmp.w	r0, #4294967295
 801964c:	4681      	mov	r9, r0
 801964e:	d1d6      	bne.n	80195fe <_svfiprintf_r+0x166>
 8019650:	89a3      	ldrh	r3, [r4, #12]
 8019652:	065b      	lsls	r3, r3, #25
 8019654:	f53f af35 	bmi.w	80194c2 <_svfiprintf_r+0x2a>
 8019658:	9809      	ldr	r0, [sp, #36]	; 0x24
 801965a:	b01d      	add	sp, #116	; 0x74
 801965c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019660:	ab03      	add	r3, sp, #12
 8019662:	9300      	str	r3, [sp, #0]
 8019664:	4622      	mov	r2, r4
 8019666:	4b07      	ldr	r3, [pc, #28]	; (8019684 <_svfiprintf_r+0x1ec>)
 8019668:	a904      	add	r1, sp, #16
 801966a:	4640      	mov	r0, r8
 801966c:	f7fc fe02 	bl	8016274 <_printf_i>
 8019670:	e7ea      	b.n	8019648 <_svfiprintf_r+0x1b0>
 8019672:	bf00      	nop
 8019674:	0801a804 	.word	0x0801a804
 8019678:	0801a80a 	.word	0x0801a80a
 801967c:	0801a80e 	.word	0x0801a80e
 8019680:	08015d09 	.word	0x08015d09
 8019684:	080193e5 	.word	0x080193e5

08019688 <_sungetc_r>:
 8019688:	b538      	push	{r3, r4, r5, lr}
 801968a:	1c4b      	adds	r3, r1, #1
 801968c:	4614      	mov	r4, r2
 801968e:	d103      	bne.n	8019698 <_sungetc_r+0x10>
 8019690:	f04f 35ff 	mov.w	r5, #4294967295
 8019694:	4628      	mov	r0, r5
 8019696:	bd38      	pop	{r3, r4, r5, pc}
 8019698:	8993      	ldrh	r3, [r2, #12]
 801969a:	f023 0320 	bic.w	r3, r3, #32
 801969e:	8193      	strh	r3, [r2, #12]
 80196a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80196a2:	6852      	ldr	r2, [r2, #4]
 80196a4:	b2cd      	uxtb	r5, r1
 80196a6:	b18b      	cbz	r3, 80196cc <_sungetc_r+0x44>
 80196a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80196aa:	4293      	cmp	r3, r2
 80196ac:	dd08      	ble.n	80196c0 <_sungetc_r+0x38>
 80196ae:	6823      	ldr	r3, [r4, #0]
 80196b0:	1e5a      	subs	r2, r3, #1
 80196b2:	6022      	str	r2, [r4, #0]
 80196b4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80196b8:	6863      	ldr	r3, [r4, #4]
 80196ba:	3301      	adds	r3, #1
 80196bc:	6063      	str	r3, [r4, #4]
 80196be:	e7e9      	b.n	8019694 <_sungetc_r+0xc>
 80196c0:	4621      	mov	r1, r4
 80196c2:	f000 fbc3 	bl	8019e4c <__submore>
 80196c6:	2800      	cmp	r0, #0
 80196c8:	d0f1      	beq.n	80196ae <_sungetc_r+0x26>
 80196ca:	e7e1      	b.n	8019690 <_sungetc_r+0x8>
 80196cc:	6921      	ldr	r1, [r4, #16]
 80196ce:	6823      	ldr	r3, [r4, #0]
 80196d0:	b151      	cbz	r1, 80196e8 <_sungetc_r+0x60>
 80196d2:	4299      	cmp	r1, r3
 80196d4:	d208      	bcs.n	80196e8 <_sungetc_r+0x60>
 80196d6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80196da:	42a9      	cmp	r1, r5
 80196dc:	d104      	bne.n	80196e8 <_sungetc_r+0x60>
 80196de:	3b01      	subs	r3, #1
 80196e0:	3201      	adds	r2, #1
 80196e2:	6023      	str	r3, [r4, #0]
 80196e4:	6062      	str	r2, [r4, #4]
 80196e6:	e7d5      	b.n	8019694 <_sungetc_r+0xc>
 80196e8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80196ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80196f0:	6363      	str	r3, [r4, #52]	; 0x34
 80196f2:	2303      	movs	r3, #3
 80196f4:	63a3      	str	r3, [r4, #56]	; 0x38
 80196f6:	4623      	mov	r3, r4
 80196f8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80196fc:	6023      	str	r3, [r4, #0]
 80196fe:	2301      	movs	r3, #1
 8019700:	e7dc      	b.n	80196bc <_sungetc_r+0x34>

08019702 <__ssrefill_r>:
 8019702:	b510      	push	{r4, lr}
 8019704:	460c      	mov	r4, r1
 8019706:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019708:	b169      	cbz	r1, 8019726 <__ssrefill_r+0x24>
 801970a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801970e:	4299      	cmp	r1, r3
 8019710:	d001      	beq.n	8019716 <__ssrefill_r+0x14>
 8019712:	f7ff fdbf 	bl	8019294 <_free_r>
 8019716:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019718:	6063      	str	r3, [r4, #4]
 801971a:	2000      	movs	r0, #0
 801971c:	6360      	str	r0, [r4, #52]	; 0x34
 801971e:	b113      	cbz	r3, 8019726 <__ssrefill_r+0x24>
 8019720:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019722:	6023      	str	r3, [r4, #0]
 8019724:	bd10      	pop	{r4, pc}
 8019726:	6923      	ldr	r3, [r4, #16]
 8019728:	6023      	str	r3, [r4, #0]
 801972a:	2300      	movs	r3, #0
 801972c:	6063      	str	r3, [r4, #4]
 801972e:	89a3      	ldrh	r3, [r4, #12]
 8019730:	f043 0320 	orr.w	r3, r3, #32
 8019734:	81a3      	strh	r3, [r4, #12]
 8019736:	f04f 30ff 	mov.w	r0, #4294967295
 801973a:	e7f3      	b.n	8019724 <__ssrefill_r+0x22>

0801973c <__ssvfiscanf_r>:
 801973c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019740:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8019744:	460c      	mov	r4, r1
 8019746:	2100      	movs	r1, #0
 8019748:	9144      	str	r1, [sp, #272]	; 0x110
 801974a:	9145      	str	r1, [sp, #276]	; 0x114
 801974c:	499f      	ldr	r1, [pc, #636]	; (80199cc <__ssvfiscanf_r+0x290>)
 801974e:	91a0      	str	r1, [sp, #640]	; 0x280
 8019750:	f10d 0804 	add.w	r8, sp, #4
 8019754:	499e      	ldr	r1, [pc, #632]	; (80199d0 <__ssvfiscanf_r+0x294>)
 8019756:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80199d4 <__ssvfiscanf_r+0x298>
 801975a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801975e:	4606      	mov	r6, r0
 8019760:	4692      	mov	sl, r2
 8019762:	91a1      	str	r1, [sp, #644]	; 0x284
 8019764:	9300      	str	r3, [sp, #0]
 8019766:	270a      	movs	r7, #10
 8019768:	f89a 3000 	ldrb.w	r3, [sl]
 801976c:	2b00      	cmp	r3, #0
 801976e:	f000 812a 	beq.w	80199c6 <__ssvfiscanf_r+0x28a>
 8019772:	4655      	mov	r5, sl
 8019774:	f7ff f93e 	bl	80189f4 <__locale_ctype_ptr>
 8019778:	f815 bb01 	ldrb.w	fp, [r5], #1
 801977c:	4458      	add	r0, fp
 801977e:	7843      	ldrb	r3, [r0, #1]
 8019780:	f013 0308 	ands.w	r3, r3, #8
 8019784:	d01c      	beq.n	80197c0 <__ssvfiscanf_r+0x84>
 8019786:	6863      	ldr	r3, [r4, #4]
 8019788:	2b00      	cmp	r3, #0
 801978a:	dd12      	ble.n	80197b2 <__ssvfiscanf_r+0x76>
 801978c:	f7ff f932 	bl	80189f4 <__locale_ctype_ptr>
 8019790:	6823      	ldr	r3, [r4, #0]
 8019792:	781a      	ldrb	r2, [r3, #0]
 8019794:	4410      	add	r0, r2
 8019796:	7842      	ldrb	r2, [r0, #1]
 8019798:	0712      	lsls	r2, r2, #28
 801979a:	d401      	bmi.n	80197a0 <__ssvfiscanf_r+0x64>
 801979c:	46aa      	mov	sl, r5
 801979e:	e7e3      	b.n	8019768 <__ssvfiscanf_r+0x2c>
 80197a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80197a2:	3201      	adds	r2, #1
 80197a4:	9245      	str	r2, [sp, #276]	; 0x114
 80197a6:	6862      	ldr	r2, [r4, #4]
 80197a8:	3301      	adds	r3, #1
 80197aa:	3a01      	subs	r2, #1
 80197ac:	6062      	str	r2, [r4, #4]
 80197ae:	6023      	str	r3, [r4, #0]
 80197b0:	e7e9      	b.n	8019786 <__ssvfiscanf_r+0x4a>
 80197b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80197b4:	4621      	mov	r1, r4
 80197b6:	4630      	mov	r0, r6
 80197b8:	4798      	blx	r3
 80197ba:	2800      	cmp	r0, #0
 80197bc:	d0e6      	beq.n	801978c <__ssvfiscanf_r+0x50>
 80197be:	e7ed      	b.n	801979c <__ssvfiscanf_r+0x60>
 80197c0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80197c4:	f040 8082 	bne.w	80198cc <__ssvfiscanf_r+0x190>
 80197c8:	9343      	str	r3, [sp, #268]	; 0x10c
 80197ca:	9341      	str	r3, [sp, #260]	; 0x104
 80197cc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80197d0:	2b2a      	cmp	r3, #42	; 0x2a
 80197d2:	d103      	bne.n	80197dc <__ssvfiscanf_r+0xa0>
 80197d4:	2310      	movs	r3, #16
 80197d6:	9341      	str	r3, [sp, #260]	; 0x104
 80197d8:	f10a 0502 	add.w	r5, sl, #2
 80197dc:	46aa      	mov	sl, r5
 80197de:	f815 1b01 	ldrb.w	r1, [r5], #1
 80197e2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80197e6:	2a09      	cmp	r2, #9
 80197e8:	d922      	bls.n	8019830 <__ssvfiscanf_r+0xf4>
 80197ea:	2203      	movs	r2, #3
 80197ec:	4879      	ldr	r0, [pc, #484]	; (80199d4 <__ssvfiscanf_r+0x298>)
 80197ee:	f7e6 fd0f 	bl	8000210 <memchr>
 80197f2:	b138      	cbz	r0, 8019804 <__ssvfiscanf_r+0xc8>
 80197f4:	eba0 0309 	sub.w	r3, r0, r9
 80197f8:	2001      	movs	r0, #1
 80197fa:	4098      	lsls	r0, r3
 80197fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80197fe:	4318      	orrs	r0, r3
 8019800:	9041      	str	r0, [sp, #260]	; 0x104
 8019802:	46aa      	mov	sl, r5
 8019804:	f89a 3000 	ldrb.w	r3, [sl]
 8019808:	2b67      	cmp	r3, #103	; 0x67
 801980a:	f10a 0501 	add.w	r5, sl, #1
 801980e:	d82b      	bhi.n	8019868 <__ssvfiscanf_r+0x12c>
 8019810:	2b65      	cmp	r3, #101	; 0x65
 8019812:	f080 809f 	bcs.w	8019954 <__ssvfiscanf_r+0x218>
 8019816:	2b47      	cmp	r3, #71	; 0x47
 8019818:	d810      	bhi.n	801983c <__ssvfiscanf_r+0x100>
 801981a:	2b45      	cmp	r3, #69	; 0x45
 801981c:	f080 809a 	bcs.w	8019954 <__ssvfiscanf_r+0x218>
 8019820:	2b00      	cmp	r3, #0
 8019822:	d06c      	beq.n	80198fe <__ssvfiscanf_r+0x1c2>
 8019824:	2b25      	cmp	r3, #37	; 0x25
 8019826:	d051      	beq.n	80198cc <__ssvfiscanf_r+0x190>
 8019828:	2303      	movs	r3, #3
 801982a:	9347      	str	r3, [sp, #284]	; 0x11c
 801982c:	9742      	str	r7, [sp, #264]	; 0x108
 801982e:	e027      	b.n	8019880 <__ssvfiscanf_r+0x144>
 8019830:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8019832:	fb07 1303 	mla	r3, r7, r3, r1
 8019836:	3b30      	subs	r3, #48	; 0x30
 8019838:	9343      	str	r3, [sp, #268]	; 0x10c
 801983a:	e7cf      	b.n	80197dc <__ssvfiscanf_r+0xa0>
 801983c:	2b5b      	cmp	r3, #91	; 0x5b
 801983e:	d06a      	beq.n	8019916 <__ssvfiscanf_r+0x1da>
 8019840:	d80c      	bhi.n	801985c <__ssvfiscanf_r+0x120>
 8019842:	2b58      	cmp	r3, #88	; 0x58
 8019844:	d1f0      	bne.n	8019828 <__ssvfiscanf_r+0xec>
 8019846:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801984c:	9241      	str	r2, [sp, #260]	; 0x104
 801984e:	2210      	movs	r2, #16
 8019850:	9242      	str	r2, [sp, #264]	; 0x108
 8019852:	2b6e      	cmp	r3, #110	; 0x6e
 8019854:	bf8c      	ite	hi
 8019856:	2304      	movhi	r3, #4
 8019858:	2303      	movls	r3, #3
 801985a:	e010      	b.n	801987e <__ssvfiscanf_r+0x142>
 801985c:	2b63      	cmp	r3, #99	; 0x63
 801985e:	d065      	beq.n	801992c <__ssvfiscanf_r+0x1f0>
 8019860:	2b64      	cmp	r3, #100	; 0x64
 8019862:	d1e1      	bne.n	8019828 <__ssvfiscanf_r+0xec>
 8019864:	9742      	str	r7, [sp, #264]	; 0x108
 8019866:	e7f4      	b.n	8019852 <__ssvfiscanf_r+0x116>
 8019868:	2b70      	cmp	r3, #112	; 0x70
 801986a:	d04b      	beq.n	8019904 <__ssvfiscanf_r+0x1c8>
 801986c:	d826      	bhi.n	80198bc <__ssvfiscanf_r+0x180>
 801986e:	2b6e      	cmp	r3, #110	; 0x6e
 8019870:	d062      	beq.n	8019938 <__ssvfiscanf_r+0x1fc>
 8019872:	d84c      	bhi.n	801990e <__ssvfiscanf_r+0x1d2>
 8019874:	2b69      	cmp	r3, #105	; 0x69
 8019876:	d1d7      	bne.n	8019828 <__ssvfiscanf_r+0xec>
 8019878:	2300      	movs	r3, #0
 801987a:	9342      	str	r3, [sp, #264]	; 0x108
 801987c:	2303      	movs	r3, #3
 801987e:	9347      	str	r3, [sp, #284]	; 0x11c
 8019880:	6863      	ldr	r3, [r4, #4]
 8019882:	2b00      	cmp	r3, #0
 8019884:	dd68      	ble.n	8019958 <__ssvfiscanf_r+0x21c>
 8019886:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019888:	0659      	lsls	r1, r3, #25
 801988a:	d407      	bmi.n	801989c <__ssvfiscanf_r+0x160>
 801988c:	f7ff f8b2 	bl	80189f4 <__locale_ctype_ptr>
 8019890:	6823      	ldr	r3, [r4, #0]
 8019892:	781a      	ldrb	r2, [r3, #0]
 8019894:	4410      	add	r0, r2
 8019896:	7842      	ldrb	r2, [r0, #1]
 8019898:	0712      	lsls	r2, r2, #28
 801989a:	d464      	bmi.n	8019966 <__ssvfiscanf_r+0x22a>
 801989c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801989e:	2b02      	cmp	r3, #2
 80198a0:	dc73      	bgt.n	801998a <__ssvfiscanf_r+0x24e>
 80198a2:	466b      	mov	r3, sp
 80198a4:	4622      	mov	r2, r4
 80198a6:	a941      	add	r1, sp, #260	; 0x104
 80198a8:	4630      	mov	r0, r6
 80198aa:	f000 f897 	bl	80199dc <_scanf_chars>
 80198ae:	2801      	cmp	r0, #1
 80198b0:	f000 8089 	beq.w	80199c6 <__ssvfiscanf_r+0x28a>
 80198b4:	2802      	cmp	r0, #2
 80198b6:	f47f af71 	bne.w	801979c <__ssvfiscanf_r+0x60>
 80198ba:	e01d      	b.n	80198f8 <__ssvfiscanf_r+0x1bc>
 80198bc:	2b75      	cmp	r3, #117	; 0x75
 80198be:	d0d1      	beq.n	8019864 <__ssvfiscanf_r+0x128>
 80198c0:	2b78      	cmp	r3, #120	; 0x78
 80198c2:	d0c0      	beq.n	8019846 <__ssvfiscanf_r+0x10a>
 80198c4:	2b73      	cmp	r3, #115	; 0x73
 80198c6:	d1af      	bne.n	8019828 <__ssvfiscanf_r+0xec>
 80198c8:	2302      	movs	r3, #2
 80198ca:	e7d8      	b.n	801987e <__ssvfiscanf_r+0x142>
 80198cc:	6863      	ldr	r3, [r4, #4]
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	dd0c      	ble.n	80198ec <__ssvfiscanf_r+0x1b0>
 80198d2:	6823      	ldr	r3, [r4, #0]
 80198d4:	781a      	ldrb	r2, [r3, #0]
 80198d6:	455a      	cmp	r2, fp
 80198d8:	d175      	bne.n	80199c6 <__ssvfiscanf_r+0x28a>
 80198da:	3301      	adds	r3, #1
 80198dc:	6862      	ldr	r2, [r4, #4]
 80198de:	6023      	str	r3, [r4, #0]
 80198e0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80198e2:	3a01      	subs	r2, #1
 80198e4:	3301      	adds	r3, #1
 80198e6:	6062      	str	r2, [r4, #4]
 80198e8:	9345      	str	r3, [sp, #276]	; 0x114
 80198ea:	e757      	b.n	801979c <__ssvfiscanf_r+0x60>
 80198ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80198ee:	4621      	mov	r1, r4
 80198f0:	4630      	mov	r0, r6
 80198f2:	4798      	blx	r3
 80198f4:	2800      	cmp	r0, #0
 80198f6:	d0ec      	beq.n	80198d2 <__ssvfiscanf_r+0x196>
 80198f8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80198fa:	2800      	cmp	r0, #0
 80198fc:	d159      	bne.n	80199b2 <__ssvfiscanf_r+0x276>
 80198fe:	f04f 30ff 	mov.w	r0, #4294967295
 8019902:	e05c      	b.n	80199be <__ssvfiscanf_r+0x282>
 8019904:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019906:	f042 0220 	orr.w	r2, r2, #32
 801990a:	9241      	str	r2, [sp, #260]	; 0x104
 801990c:	e79b      	b.n	8019846 <__ssvfiscanf_r+0x10a>
 801990e:	2308      	movs	r3, #8
 8019910:	9342      	str	r3, [sp, #264]	; 0x108
 8019912:	2304      	movs	r3, #4
 8019914:	e7b3      	b.n	801987e <__ssvfiscanf_r+0x142>
 8019916:	4629      	mov	r1, r5
 8019918:	4640      	mov	r0, r8
 801991a:	f000 f9c7 	bl	8019cac <__sccl>
 801991e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019924:	9341      	str	r3, [sp, #260]	; 0x104
 8019926:	4605      	mov	r5, r0
 8019928:	2301      	movs	r3, #1
 801992a:	e7a8      	b.n	801987e <__ssvfiscanf_r+0x142>
 801992c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801992e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019932:	9341      	str	r3, [sp, #260]	; 0x104
 8019934:	2300      	movs	r3, #0
 8019936:	e7a2      	b.n	801987e <__ssvfiscanf_r+0x142>
 8019938:	9841      	ldr	r0, [sp, #260]	; 0x104
 801993a:	06c3      	lsls	r3, r0, #27
 801993c:	f53f af2e 	bmi.w	801979c <__ssvfiscanf_r+0x60>
 8019940:	9b00      	ldr	r3, [sp, #0]
 8019942:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019944:	1d19      	adds	r1, r3, #4
 8019946:	9100      	str	r1, [sp, #0]
 8019948:	681b      	ldr	r3, [r3, #0]
 801994a:	07c0      	lsls	r0, r0, #31
 801994c:	bf4c      	ite	mi
 801994e:	801a      	strhmi	r2, [r3, #0]
 8019950:	601a      	strpl	r2, [r3, #0]
 8019952:	e723      	b.n	801979c <__ssvfiscanf_r+0x60>
 8019954:	2305      	movs	r3, #5
 8019956:	e792      	b.n	801987e <__ssvfiscanf_r+0x142>
 8019958:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801995a:	4621      	mov	r1, r4
 801995c:	4630      	mov	r0, r6
 801995e:	4798      	blx	r3
 8019960:	2800      	cmp	r0, #0
 8019962:	d090      	beq.n	8019886 <__ssvfiscanf_r+0x14a>
 8019964:	e7c8      	b.n	80198f8 <__ssvfiscanf_r+0x1bc>
 8019966:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019968:	3201      	adds	r2, #1
 801996a:	9245      	str	r2, [sp, #276]	; 0x114
 801996c:	6862      	ldr	r2, [r4, #4]
 801996e:	3a01      	subs	r2, #1
 8019970:	2a00      	cmp	r2, #0
 8019972:	6062      	str	r2, [r4, #4]
 8019974:	dd02      	ble.n	801997c <__ssvfiscanf_r+0x240>
 8019976:	3301      	adds	r3, #1
 8019978:	6023      	str	r3, [r4, #0]
 801997a:	e787      	b.n	801988c <__ssvfiscanf_r+0x150>
 801997c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801997e:	4621      	mov	r1, r4
 8019980:	4630      	mov	r0, r6
 8019982:	4798      	blx	r3
 8019984:	2800      	cmp	r0, #0
 8019986:	d081      	beq.n	801988c <__ssvfiscanf_r+0x150>
 8019988:	e7b6      	b.n	80198f8 <__ssvfiscanf_r+0x1bc>
 801998a:	2b04      	cmp	r3, #4
 801998c:	dc06      	bgt.n	801999c <__ssvfiscanf_r+0x260>
 801998e:	466b      	mov	r3, sp
 8019990:	4622      	mov	r2, r4
 8019992:	a941      	add	r1, sp, #260	; 0x104
 8019994:	4630      	mov	r0, r6
 8019996:	f000 f885 	bl	8019aa4 <_scanf_i>
 801999a:	e788      	b.n	80198ae <__ssvfiscanf_r+0x172>
 801999c:	4b0e      	ldr	r3, [pc, #56]	; (80199d8 <__ssvfiscanf_r+0x29c>)
 801999e:	2b00      	cmp	r3, #0
 80199a0:	f43f aefc 	beq.w	801979c <__ssvfiscanf_r+0x60>
 80199a4:	466b      	mov	r3, sp
 80199a6:	4622      	mov	r2, r4
 80199a8:	a941      	add	r1, sp, #260	; 0x104
 80199aa:	4630      	mov	r0, r6
 80199ac:	f7fc fd74 	bl	8016498 <_scanf_float>
 80199b0:	e77d      	b.n	80198ae <__ssvfiscanf_r+0x172>
 80199b2:	89a3      	ldrh	r3, [r4, #12]
 80199b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80199b8:	bf18      	it	ne
 80199ba:	f04f 30ff 	movne.w	r0, #4294967295
 80199be:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80199c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199c6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80199c8:	e7f9      	b.n	80199be <__ssvfiscanf_r+0x282>
 80199ca:	bf00      	nop
 80199cc:	08019689 	.word	0x08019689
 80199d0:	08019703 	.word	0x08019703
 80199d4:	0801a80a 	.word	0x0801a80a
 80199d8:	08016499 	.word	0x08016499

080199dc <_scanf_chars>:
 80199dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199e0:	4615      	mov	r5, r2
 80199e2:	688a      	ldr	r2, [r1, #8]
 80199e4:	4680      	mov	r8, r0
 80199e6:	460c      	mov	r4, r1
 80199e8:	b932      	cbnz	r2, 80199f8 <_scanf_chars+0x1c>
 80199ea:	698a      	ldr	r2, [r1, #24]
 80199ec:	2a00      	cmp	r2, #0
 80199ee:	bf14      	ite	ne
 80199f0:	f04f 32ff 	movne.w	r2, #4294967295
 80199f4:	2201      	moveq	r2, #1
 80199f6:	608a      	str	r2, [r1, #8]
 80199f8:	6822      	ldr	r2, [r4, #0]
 80199fa:	06d1      	lsls	r1, r2, #27
 80199fc:	bf5f      	itttt	pl
 80199fe:	681a      	ldrpl	r2, [r3, #0]
 8019a00:	1d11      	addpl	r1, r2, #4
 8019a02:	6019      	strpl	r1, [r3, #0]
 8019a04:	6817      	ldrpl	r7, [r2, #0]
 8019a06:	2600      	movs	r6, #0
 8019a08:	69a3      	ldr	r3, [r4, #24]
 8019a0a:	b1db      	cbz	r3, 8019a44 <_scanf_chars+0x68>
 8019a0c:	2b01      	cmp	r3, #1
 8019a0e:	d107      	bne.n	8019a20 <_scanf_chars+0x44>
 8019a10:	682b      	ldr	r3, [r5, #0]
 8019a12:	6962      	ldr	r2, [r4, #20]
 8019a14:	781b      	ldrb	r3, [r3, #0]
 8019a16:	5cd3      	ldrb	r3, [r2, r3]
 8019a18:	b9a3      	cbnz	r3, 8019a44 <_scanf_chars+0x68>
 8019a1a:	2e00      	cmp	r6, #0
 8019a1c:	d132      	bne.n	8019a84 <_scanf_chars+0xa8>
 8019a1e:	e006      	b.n	8019a2e <_scanf_chars+0x52>
 8019a20:	2b02      	cmp	r3, #2
 8019a22:	d007      	beq.n	8019a34 <_scanf_chars+0x58>
 8019a24:	2e00      	cmp	r6, #0
 8019a26:	d12d      	bne.n	8019a84 <_scanf_chars+0xa8>
 8019a28:	69a3      	ldr	r3, [r4, #24]
 8019a2a:	2b01      	cmp	r3, #1
 8019a2c:	d12a      	bne.n	8019a84 <_scanf_chars+0xa8>
 8019a2e:	2001      	movs	r0, #1
 8019a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a34:	f7fe ffde 	bl	80189f4 <__locale_ctype_ptr>
 8019a38:	682b      	ldr	r3, [r5, #0]
 8019a3a:	781b      	ldrb	r3, [r3, #0]
 8019a3c:	4418      	add	r0, r3
 8019a3e:	7843      	ldrb	r3, [r0, #1]
 8019a40:	071b      	lsls	r3, r3, #28
 8019a42:	d4ef      	bmi.n	8019a24 <_scanf_chars+0x48>
 8019a44:	6823      	ldr	r3, [r4, #0]
 8019a46:	06da      	lsls	r2, r3, #27
 8019a48:	bf5e      	ittt	pl
 8019a4a:	682b      	ldrpl	r3, [r5, #0]
 8019a4c:	781b      	ldrbpl	r3, [r3, #0]
 8019a4e:	703b      	strbpl	r3, [r7, #0]
 8019a50:	682a      	ldr	r2, [r5, #0]
 8019a52:	686b      	ldr	r3, [r5, #4]
 8019a54:	f102 0201 	add.w	r2, r2, #1
 8019a58:	602a      	str	r2, [r5, #0]
 8019a5a:	68a2      	ldr	r2, [r4, #8]
 8019a5c:	f103 33ff 	add.w	r3, r3, #4294967295
 8019a60:	f102 32ff 	add.w	r2, r2, #4294967295
 8019a64:	606b      	str	r3, [r5, #4]
 8019a66:	f106 0601 	add.w	r6, r6, #1
 8019a6a:	bf58      	it	pl
 8019a6c:	3701      	addpl	r7, #1
 8019a6e:	60a2      	str	r2, [r4, #8]
 8019a70:	b142      	cbz	r2, 8019a84 <_scanf_chars+0xa8>
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	dcc8      	bgt.n	8019a08 <_scanf_chars+0x2c>
 8019a76:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019a7a:	4629      	mov	r1, r5
 8019a7c:	4640      	mov	r0, r8
 8019a7e:	4798      	blx	r3
 8019a80:	2800      	cmp	r0, #0
 8019a82:	d0c1      	beq.n	8019a08 <_scanf_chars+0x2c>
 8019a84:	6823      	ldr	r3, [r4, #0]
 8019a86:	f013 0310 	ands.w	r3, r3, #16
 8019a8a:	d105      	bne.n	8019a98 <_scanf_chars+0xbc>
 8019a8c:	68e2      	ldr	r2, [r4, #12]
 8019a8e:	3201      	adds	r2, #1
 8019a90:	60e2      	str	r2, [r4, #12]
 8019a92:	69a2      	ldr	r2, [r4, #24]
 8019a94:	b102      	cbz	r2, 8019a98 <_scanf_chars+0xbc>
 8019a96:	703b      	strb	r3, [r7, #0]
 8019a98:	6923      	ldr	r3, [r4, #16]
 8019a9a:	441e      	add	r6, r3
 8019a9c:	6126      	str	r6, [r4, #16]
 8019a9e:	2000      	movs	r0, #0
 8019aa0:	e7c6      	b.n	8019a30 <_scanf_chars+0x54>
	...

08019aa4 <_scanf_i>:
 8019aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019aa8:	469a      	mov	sl, r3
 8019aaa:	4b74      	ldr	r3, [pc, #464]	; (8019c7c <_scanf_i+0x1d8>)
 8019aac:	460c      	mov	r4, r1
 8019aae:	4683      	mov	fp, r0
 8019ab0:	4616      	mov	r6, r2
 8019ab2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019ab6:	b087      	sub	sp, #28
 8019ab8:	ab03      	add	r3, sp, #12
 8019aba:	68a7      	ldr	r7, [r4, #8]
 8019abc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019ac0:	4b6f      	ldr	r3, [pc, #444]	; (8019c80 <_scanf_i+0x1dc>)
 8019ac2:	69a1      	ldr	r1, [r4, #24]
 8019ac4:	4a6f      	ldr	r2, [pc, #444]	; (8019c84 <_scanf_i+0x1e0>)
 8019ac6:	2903      	cmp	r1, #3
 8019ac8:	bf08      	it	eq
 8019aca:	461a      	moveq	r2, r3
 8019acc:	1e7b      	subs	r3, r7, #1
 8019ace:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8019ad2:	bf84      	itt	hi
 8019ad4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019ad8:	60a3      	strhi	r3, [r4, #8]
 8019ada:	6823      	ldr	r3, [r4, #0]
 8019adc:	9200      	str	r2, [sp, #0]
 8019ade:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019ae2:	bf88      	it	hi
 8019ae4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019ae8:	f104 091c 	add.w	r9, r4, #28
 8019aec:	6023      	str	r3, [r4, #0]
 8019aee:	bf8c      	ite	hi
 8019af0:	197f      	addhi	r7, r7, r5
 8019af2:	2700      	movls	r7, #0
 8019af4:	464b      	mov	r3, r9
 8019af6:	f04f 0800 	mov.w	r8, #0
 8019afa:	9301      	str	r3, [sp, #4]
 8019afc:	6831      	ldr	r1, [r6, #0]
 8019afe:	ab03      	add	r3, sp, #12
 8019b00:	2202      	movs	r2, #2
 8019b02:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8019b06:	7809      	ldrb	r1, [r1, #0]
 8019b08:	f7e6 fb82 	bl	8000210 <memchr>
 8019b0c:	9b01      	ldr	r3, [sp, #4]
 8019b0e:	b330      	cbz	r0, 8019b5e <_scanf_i+0xba>
 8019b10:	f1b8 0f01 	cmp.w	r8, #1
 8019b14:	d15a      	bne.n	8019bcc <_scanf_i+0x128>
 8019b16:	6862      	ldr	r2, [r4, #4]
 8019b18:	b92a      	cbnz	r2, 8019b26 <_scanf_i+0x82>
 8019b1a:	6822      	ldr	r2, [r4, #0]
 8019b1c:	2108      	movs	r1, #8
 8019b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019b22:	6061      	str	r1, [r4, #4]
 8019b24:	6022      	str	r2, [r4, #0]
 8019b26:	6822      	ldr	r2, [r4, #0]
 8019b28:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019b2c:	6022      	str	r2, [r4, #0]
 8019b2e:	68a2      	ldr	r2, [r4, #8]
 8019b30:	1e51      	subs	r1, r2, #1
 8019b32:	60a1      	str	r1, [r4, #8]
 8019b34:	b19a      	cbz	r2, 8019b5e <_scanf_i+0xba>
 8019b36:	6832      	ldr	r2, [r6, #0]
 8019b38:	1c51      	adds	r1, r2, #1
 8019b3a:	6031      	str	r1, [r6, #0]
 8019b3c:	7812      	ldrb	r2, [r2, #0]
 8019b3e:	701a      	strb	r2, [r3, #0]
 8019b40:	1c5d      	adds	r5, r3, #1
 8019b42:	6873      	ldr	r3, [r6, #4]
 8019b44:	3b01      	subs	r3, #1
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	6073      	str	r3, [r6, #4]
 8019b4a:	dc07      	bgt.n	8019b5c <_scanf_i+0xb8>
 8019b4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019b50:	4631      	mov	r1, r6
 8019b52:	4658      	mov	r0, fp
 8019b54:	4798      	blx	r3
 8019b56:	2800      	cmp	r0, #0
 8019b58:	f040 8086 	bne.w	8019c68 <_scanf_i+0x1c4>
 8019b5c:	462b      	mov	r3, r5
 8019b5e:	f108 0801 	add.w	r8, r8, #1
 8019b62:	f1b8 0f03 	cmp.w	r8, #3
 8019b66:	d1c8      	bne.n	8019afa <_scanf_i+0x56>
 8019b68:	6862      	ldr	r2, [r4, #4]
 8019b6a:	b90a      	cbnz	r2, 8019b70 <_scanf_i+0xcc>
 8019b6c:	220a      	movs	r2, #10
 8019b6e:	6062      	str	r2, [r4, #4]
 8019b70:	6862      	ldr	r2, [r4, #4]
 8019b72:	4945      	ldr	r1, [pc, #276]	; (8019c88 <_scanf_i+0x1e4>)
 8019b74:	6960      	ldr	r0, [r4, #20]
 8019b76:	9301      	str	r3, [sp, #4]
 8019b78:	1a89      	subs	r1, r1, r2
 8019b7a:	f000 f897 	bl	8019cac <__sccl>
 8019b7e:	9b01      	ldr	r3, [sp, #4]
 8019b80:	f04f 0800 	mov.w	r8, #0
 8019b84:	461d      	mov	r5, r3
 8019b86:	68a3      	ldr	r3, [r4, #8]
 8019b88:	6822      	ldr	r2, [r4, #0]
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d03a      	beq.n	8019c04 <_scanf_i+0x160>
 8019b8e:	6831      	ldr	r1, [r6, #0]
 8019b90:	6960      	ldr	r0, [r4, #20]
 8019b92:	f891 c000 	ldrb.w	ip, [r1]
 8019b96:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019b9a:	2800      	cmp	r0, #0
 8019b9c:	d032      	beq.n	8019c04 <_scanf_i+0x160>
 8019b9e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019ba2:	d121      	bne.n	8019be8 <_scanf_i+0x144>
 8019ba4:	0510      	lsls	r0, r2, #20
 8019ba6:	d51f      	bpl.n	8019be8 <_scanf_i+0x144>
 8019ba8:	f108 0801 	add.w	r8, r8, #1
 8019bac:	b117      	cbz	r7, 8019bb4 <_scanf_i+0x110>
 8019bae:	3301      	adds	r3, #1
 8019bb0:	3f01      	subs	r7, #1
 8019bb2:	60a3      	str	r3, [r4, #8]
 8019bb4:	6873      	ldr	r3, [r6, #4]
 8019bb6:	3b01      	subs	r3, #1
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	6073      	str	r3, [r6, #4]
 8019bbc:	dd1b      	ble.n	8019bf6 <_scanf_i+0x152>
 8019bbe:	6833      	ldr	r3, [r6, #0]
 8019bc0:	3301      	adds	r3, #1
 8019bc2:	6033      	str	r3, [r6, #0]
 8019bc4:	68a3      	ldr	r3, [r4, #8]
 8019bc6:	3b01      	subs	r3, #1
 8019bc8:	60a3      	str	r3, [r4, #8]
 8019bca:	e7dc      	b.n	8019b86 <_scanf_i+0xe2>
 8019bcc:	f1b8 0f02 	cmp.w	r8, #2
 8019bd0:	d1ad      	bne.n	8019b2e <_scanf_i+0x8a>
 8019bd2:	6822      	ldr	r2, [r4, #0]
 8019bd4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019bd8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019bdc:	d1bf      	bne.n	8019b5e <_scanf_i+0xba>
 8019bde:	2110      	movs	r1, #16
 8019be0:	6061      	str	r1, [r4, #4]
 8019be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019be6:	e7a1      	b.n	8019b2c <_scanf_i+0x88>
 8019be8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019bec:	6022      	str	r2, [r4, #0]
 8019bee:	780b      	ldrb	r3, [r1, #0]
 8019bf0:	702b      	strb	r3, [r5, #0]
 8019bf2:	3501      	adds	r5, #1
 8019bf4:	e7de      	b.n	8019bb4 <_scanf_i+0x110>
 8019bf6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019bfa:	4631      	mov	r1, r6
 8019bfc:	4658      	mov	r0, fp
 8019bfe:	4798      	blx	r3
 8019c00:	2800      	cmp	r0, #0
 8019c02:	d0df      	beq.n	8019bc4 <_scanf_i+0x120>
 8019c04:	6823      	ldr	r3, [r4, #0]
 8019c06:	05d9      	lsls	r1, r3, #23
 8019c08:	d50c      	bpl.n	8019c24 <_scanf_i+0x180>
 8019c0a:	454d      	cmp	r5, r9
 8019c0c:	d908      	bls.n	8019c20 <_scanf_i+0x17c>
 8019c0e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019c12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019c16:	4632      	mov	r2, r6
 8019c18:	4658      	mov	r0, fp
 8019c1a:	4798      	blx	r3
 8019c1c:	1e6f      	subs	r7, r5, #1
 8019c1e:	463d      	mov	r5, r7
 8019c20:	454d      	cmp	r5, r9
 8019c22:	d029      	beq.n	8019c78 <_scanf_i+0x1d4>
 8019c24:	6822      	ldr	r2, [r4, #0]
 8019c26:	f012 0210 	ands.w	r2, r2, #16
 8019c2a:	d113      	bne.n	8019c54 <_scanf_i+0x1b0>
 8019c2c:	702a      	strb	r2, [r5, #0]
 8019c2e:	6863      	ldr	r3, [r4, #4]
 8019c30:	9e00      	ldr	r6, [sp, #0]
 8019c32:	4649      	mov	r1, r9
 8019c34:	4658      	mov	r0, fp
 8019c36:	47b0      	blx	r6
 8019c38:	f8da 3000 	ldr.w	r3, [sl]
 8019c3c:	6821      	ldr	r1, [r4, #0]
 8019c3e:	1d1a      	adds	r2, r3, #4
 8019c40:	f8ca 2000 	str.w	r2, [sl]
 8019c44:	f011 0f20 	tst.w	r1, #32
 8019c48:	681b      	ldr	r3, [r3, #0]
 8019c4a:	d010      	beq.n	8019c6e <_scanf_i+0x1ca>
 8019c4c:	6018      	str	r0, [r3, #0]
 8019c4e:	68e3      	ldr	r3, [r4, #12]
 8019c50:	3301      	adds	r3, #1
 8019c52:	60e3      	str	r3, [r4, #12]
 8019c54:	eba5 0509 	sub.w	r5, r5, r9
 8019c58:	44a8      	add	r8, r5
 8019c5a:	6925      	ldr	r5, [r4, #16]
 8019c5c:	4445      	add	r5, r8
 8019c5e:	6125      	str	r5, [r4, #16]
 8019c60:	2000      	movs	r0, #0
 8019c62:	b007      	add	sp, #28
 8019c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c68:	f04f 0800 	mov.w	r8, #0
 8019c6c:	e7ca      	b.n	8019c04 <_scanf_i+0x160>
 8019c6e:	07ca      	lsls	r2, r1, #31
 8019c70:	bf4c      	ite	mi
 8019c72:	8018      	strhmi	r0, [r3, #0]
 8019c74:	6018      	strpl	r0, [r3, #0]
 8019c76:	e7ea      	b.n	8019c4e <_scanf_i+0x1aa>
 8019c78:	2001      	movs	r0, #1
 8019c7a:	e7f2      	b.n	8019c62 <_scanf_i+0x1be>
 8019c7c:	0801a3cc 	.word	0x0801a3cc
 8019c80:	080176b1 	.word	0x080176b1
 8019c84:	08019e29 	.word	0x08019e29
 8019c88:	0801a825 	.word	0x0801a825

08019c8c <_sbrk_r>:
 8019c8c:	b538      	push	{r3, r4, r5, lr}
 8019c8e:	4c06      	ldr	r4, [pc, #24]	; (8019ca8 <_sbrk_r+0x1c>)
 8019c90:	2300      	movs	r3, #0
 8019c92:	4605      	mov	r5, r0
 8019c94:	4608      	mov	r0, r1
 8019c96:	6023      	str	r3, [r4, #0]
 8019c98:	f7ed ffee 	bl	8007c78 <_sbrk>
 8019c9c:	1c43      	adds	r3, r0, #1
 8019c9e:	d102      	bne.n	8019ca6 <_sbrk_r+0x1a>
 8019ca0:	6823      	ldr	r3, [r4, #0]
 8019ca2:	b103      	cbz	r3, 8019ca6 <_sbrk_r+0x1a>
 8019ca4:	602b      	str	r3, [r5, #0]
 8019ca6:	bd38      	pop	{r3, r4, r5, pc}
 8019ca8:	20046e34 	.word	0x20046e34

08019cac <__sccl>:
 8019cac:	b570      	push	{r4, r5, r6, lr}
 8019cae:	780b      	ldrb	r3, [r1, #0]
 8019cb0:	2b5e      	cmp	r3, #94	; 0x5e
 8019cb2:	bf13      	iteet	ne
 8019cb4:	1c4a      	addne	r2, r1, #1
 8019cb6:	1c8a      	addeq	r2, r1, #2
 8019cb8:	784b      	ldrbeq	r3, [r1, #1]
 8019cba:	2100      	movne	r1, #0
 8019cbc:	bf08      	it	eq
 8019cbe:	2101      	moveq	r1, #1
 8019cc0:	1e44      	subs	r4, r0, #1
 8019cc2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8019cc6:	f804 1f01 	strb.w	r1, [r4, #1]!
 8019cca:	42ac      	cmp	r4, r5
 8019ccc:	d1fb      	bne.n	8019cc6 <__sccl+0x1a>
 8019cce:	b913      	cbnz	r3, 8019cd6 <__sccl+0x2a>
 8019cd0:	3a01      	subs	r2, #1
 8019cd2:	4610      	mov	r0, r2
 8019cd4:	bd70      	pop	{r4, r5, r6, pc}
 8019cd6:	f081 0401 	eor.w	r4, r1, #1
 8019cda:	54c4      	strb	r4, [r0, r3]
 8019cdc:	1c51      	adds	r1, r2, #1
 8019cde:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019ce2:	2d2d      	cmp	r5, #45	; 0x2d
 8019ce4:	f101 36ff 	add.w	r6, r1, #4294967295
 8019ce8:	460a      	mov	r2, r1
 8019cea:	d006      	beq.n	8019cfa <__sccl+0x4e>
 8019cec:	2d5d      	cmp	r5, #93	; 0x5d
 8019cee:	d0f0      	beq.n	8019cd2 <__sccl+0x26>
 8019cf0:	b90d      	cbnz	r5, 8019cf6 <__sccl+0x4a>
 8019cf2:	4632      	mov	r2, r6
 8019cf4:	e7ed      	b.n	8019cd2 <__sccl+0x26>
 8019cf6:	462b      	mov	r3, r5
 8019cf8:	e7ef      	b.n	8019cda <__sccl+0x2e>
 8019cfa:	780e      	ldrb	r6, [r1, #0]
 8019cfc:	2e5d      	cmp	r6, #93	; 0x5d
 8019cfe:	d0fa      	beq.n	8019cf6 <__sccl+0x4a>
 8019d00:	42b3      	cmp	r3, r6
 8019d02:	dcf8      	bgt.n	8019cf6 <__sccl+0x4a>
 8019d04:	3301      	adds	r3, #1
 8019d06:	429e      	cmp	r6, r3
 8019d08:	54c4      	strb	r4, [r0, r3]
 8019d0a:	dcfb      	bgt.n	8019d04 <__sccl+0x58>
 8019d0c:	3102      	adds	r1, #2
 8019d0e:	e7e6      	b.n	8019cde <__sccl+0x32>

08019d10 <strncmp>:
 8019d10:	b510      	push	{r4, lr}
 8019d12:	b16a      	cbz	r2, 8019d30 <strncmp+0x20>
 8019d14:	3901      	subs	r1, #1
 8019d16:	1884      	adds	r4, r0, r2
 8019d18:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019d1c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019d20:	4293      	cmp	r3, r2
 8019d22:	d103      	bne.n	8019d2c <strncmp+0x1c>
 8019d24:	42a0      	cmp	r0, r4
 8019d26:	d001      	beq.n	8019d2c <strncmp+0x1c>
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d1f5      	bne.n	8019d18 <strncmp+0x8>
 8019d2c:	1a98      	subs	r0, r3, r2
 8019d2e:	bd10      	pop	{r4, pc}
 8019d30:	4610      	mov	r0, r2
 8019d32:	e7fc      	b.n	8019d2e <strncmp+0x1e>

08019d34 <_strtoul_l.isra.0>:
 8019d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d38:	4680      	mov	r8, r0
 8019d3a:	4689      	mov	r9, r1
 8019d3c:	4692      	mov	sl, r2
 8019d3e:	461e      	mov	r6, r3
 8019d40:	460f      	mov	r7, r1
 8019d42:	463d      	mov	r5, r7
 8019d44:	9808      	ldr	r0, [sp, #32]
 8019d46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019d4a:	f7fe fe4f 	bl	80189ec <__locale_ctype_ptr_l>
 8019d4e:	4420      	add	r0, r4
 8019d50:	7843      	ldrb	r3, [r0, #1]
 8019d52:	f013 0308 	ands.w	r3, r3, #8
 8019d56:	d130      	bne.n	8019dba <_strtoul_l.isra.0+0x86>
 8019d58:	2c2d      	cmp	r4, #45	; 0x2d
 8019d5a:	d130      	bne.n	8019dbe <_strtoul_l.isra.0+0x8a>
 8019d5c:	787c      	ldrb	r4, [r7, #1]
 8019d5e:	1cbd      	adds	r5, r7, #2
 8019d60:	2101      	movs	r1, #1
 8019d62:	2e00      	cmp	r6, #0
 8019d64:	d05c      	beq.n	8019e20 <_strtoul_l.isra.0+0xec>
 8019d66:	2e10      	cmp	r6, #16
 8019d68:	d109      	bne.n	8019d7e <_strtoul_l.isra.0+0x4a>
 8019d6a:	2c30      	cmp	r4, #48	; 0x30
 8019d6c:	d107      	bne.n	8019d7e <_strtoul_l.isra.0+0x4a>
 8019d6e:	782b      	ldrb	r3, [r5, #0]
 8019d70:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019d74:	2b58      	cmp	r3, #88	; 0x58
 8019d76:	d14e      	bne.n	8019e16 <_strtoul_l.isra.0+0xe2>
 8019d78:	786c      	ldrb	r4, [r5, #1]
 8019d7a:	2610      	movs	r6, #16
 8019d7c:	3502      	adds	r5, #2
 8019d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8019d82:	2300      	movs	r3, #0
 8019d84:	fbb2 f2f6 	udiv	r2, r2, r6
 8019d88:	fb06 fc02 	mul.w	ip, r6, r2
 8019d8c:	ea6f 0c0c 	mvn.w	ip, ip
 8019d90:	4618      	mov	r0, r3
 8019d92:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019d96:	2f09      	cmp	r7, #9
 8019d98:	d817      	bhi.n	8019dca <_strtoul_l.isra.0+0x96>
 8019d9a:	463c      	mov	r4, r7
 8019d9c:	42a6      	cmp	r6, r4
 8019d9e:	dd23      	ble.n	8019de8 <_strtoul_l.isra.0+0xb4>
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	db1e      	blt.n	8019de2 <_strtoul_l.isra.0+0xae>
 8019da4:	4282      	cmp	r2, r0
 8019da6:	d31c      	bcc.n	8019de2 <_strtoul_l.isra.0+0xae>
 8019da8:	d101      	bne.n	8019dae <_strtoul_l.isra.0+0x7a>
 8019daa:	45a4      	cmp	ip, r4
 8019dac:	db19      	blt.n	8019de2 <_strtoul_l.isra.0+0xae>
 8019dae:	fb00 4006 	mla	r0, r0, r6, r4
 8019db2:	2301      	movs	r3, #1
 8019db4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019db8:	e7eb      	b.n	8019d92 <_strtoul_l.isra.0+0x5e>
 8019dba:	462f      	mov	r7, r5
 8019dbc:	e7c1      	b.n	8019d42 <_strtoul_l.isra.0+0xe>
 8019dbe:	2c2b      	cmp	r4, #43	; 0x2b
 8019dc0:	bf04      	itt	eq
 8019dc2:	1cbd      	addeq	r5, r7, #2
 8019dc4:	787c      	ldrbeq	r4, [r7, #1]
 8019dc6:	4619      	mov	r1, r3
 8019dc8:	e7cb      	b.n	8019d62 <_strtoul_l.isra.0+0x2e>
 8019dca:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019dce:	2f19      	cmp	r7, #25
 8019dd0:	d801      	bhi.n	8019dd6 <_strtoul_l.isra.0+0xa2>
 8019dd2:	3c37      	subs	r4, #55	; 0x37
 8019dd4:	e7e2      	b.n	8019d9c <_strtoul_l.isra.0+0x68>
 8019dd6:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019dda:	2f19      	cmp	r7, #25
 8019ddc:	d804      	bhi.n	8019de8 <_strtoul_l.isra.0+0xb4>
 8019dde:	3c57      	subs	r4, #87	; 0x57
 8019de0:	e7dc      	b.n	8019d9c <_strtoul_l.isra.0+0x68>
 8019de2:	f04f 33ff 	mov.w	r3, #4294967295
 8019de6:	e7e5      	b.n	8019db4 <_strtoul_l.isra.0+0x80>
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	da09      	bge.n	8019e00 <_strtoul_l.isra.0+0xcc>
 8019dec:	2322      	movs	r3, #34	; 0x22
 8019dee:	f8c8 3000 	str.w	r3, [r8]
 8019df2:	f04f 30ff 	mov.w	r0, #4294967295
 8019df6:	f1ba 0f00 	cmp.w	sl, #0
 8019dfa:	d107      	bne.n	8019e0c <_strtoul_l.isra.0+0xd8>
 8019dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e00:	b101      	cbz	r1, 8019e04 <_strtoul_l.isra.0+0xd0>
 8019e02:	4240      	negs	r0, r0
 8019e04:	f1ba 0f00 	cmp.w	sl, #0
 8019e08:	d0f8      	beq.n	8019dfc <_strtoul_l.isra.0+0xc8>
 8019e0a:	b10b      	cbz	r3, 8019e10 <_strtoul_l.isra.0+0xdc>
 8019e0c:	f105 39ff 	add.w	r9, r5, #4294967295
 8019e10:	f8ca 9000 	str.w	r9, [sl]
 8019e14:	e7f2      	b.n	8019dfc <_strtoul_l.isra.0+0xc8>
 8019e16:	2430      	movs	r4, #48	; 0x30
 8019e18:	2e00      	cmp	r6, #0
 8019e1a:	d1b0      	bne.n	8019d7e <_strtoul_l.isra.0+0x4a>
 8019e1c:	2608      	movs	r6, #8
 8019e1e:	e7ae      	b.n	8019d7e <_strtoul_l.isra.0+0x4a>
 8019e20:	2c30      	cmp	r4, #48	; 0x30
 8019e22:	d0a4      	beq.n	8019d6e <_strtoul_l.isra.0+0x3a>
 8019e24:	260a      	movs	r6, #10
 8019e26:	e7aa      	b.n	8019d7e <_strtoul_l.isra.0+0x4a>

08019e28 <_strtoul_r>:
 8019e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019e2a:	4c06      	ldr	r4, [pc, #24]	; (8019e44 <_strtoul_r+0x1c>)
 8019e2c:	4d06      	ldr	r5, [pc, #24]	; (8019e48 <_strtoul_r+0x20>)
 8019e2e:	6824      	ldr	r4, [r4, #0]
 8019e30:	6a24      	ldr	r4, [r4, #32]
 8019e32:	2c00      	cmp	r4, #0
 8019e34:	bf08      	it	eq
 8019e36:	462c      	moveq	r4, r5
 8019e38:	9400      	str	r4, [sp, #0]
 8019e3a:	f7ff ff7b 	bl	8019d34 <_strtoul_l.isra.0>
 8019e3e:	b003      	add	sp, #12
 8019e40:	bd30      	pop	{r4, r5, pc}
 8019e42:	bf00      	nop
 8019e44:	2000000c 	.word	0x2000000c
 8019e48:	20000070 	.word	0x20000070

08019e4c <__submore>:
 8019e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e50:	460c      	mov	r4, r1
 8019e52:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019e54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019e58:	4299      	cmp	r1, r3
 8019e5a:	d11d      	bne.n	8019e98 <__submore+0x4c>
 8019e5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019e60:	f7ff fa66 	bl	8019330 <_malloc_r>
 8019e64:	b918      	cbnz	r0, 8019e6e <__submore+0x22>
 8019e66:	f04f 30ff 	mov.w	r0, #4294967295
 8019e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019e72:	63a3      	str	r3, [r4, #56]	; 0x38
 8019e74:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019e78:	6360      	str	r0, [r4, #52]	; 0x34
 8019e7a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019e7e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019e82:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8019e86:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019e8a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019e8e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019e92:	6020      	str	r0, [r4, #0]
 8019e94:	2000      	movs	r0, #0
 8019e96:	e7e8      	b.n	8019e6a <__submore+0x1e>
 8019e98:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019e9a:	0077      	lsls	r7, r6, #1
 8019e9c:	463a      	mov	r2, r7
 8019e9e:	f000 f837 	bl	8019f10 <_realloc_r>
 8019ea2:	4605      	mov	r5, r0
 8019ea4:	2800      	cmp	r0, #0
 8019ea6:	d0de      	beq.n	8019e66 <__submore+0x1a>
 8019ea8:	eb00 0806 	add.w	r8, r0, r6
 8019eac:	4601      	mov	r1, r0
 8019eae:	4632      	mov	r2, r6
 8019eb0:	4640      	mov	r0, r8
 8019eb2:	f7fe fdd7 	bl	8018a64 <memcpy>
 8019eb6:	f8c4 8000 	str.w	r8, [r4]
 8019eba:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019ebe:	e7e9      	b.n	8019e94 <__submore+0x48>

08019ec0 <__ascii_wctomb>:
 8019ec0:	b149      	cbz	r1, 8019ed6 <__ascii_wctomb+0x16>
 8019ec2:	2aff      	cmp	r2, #255	; 0xff
 8019ec4:	bf85      	ittet	hi
 8019ec6:	238a      	movhi	r3, #138	; 0x8a
 8019ec8:	6003      	strhi	r3, [r0, #0]
 8019eca:	700a      	strbls	r2, [r1, #0]
 8019ecc:	f04f 30ff 	movhi.w	r0, #4294967295
 8019ed0:	bf98      	it	ls
 8019ed2:	2001      	movls	r0, #1
 8019ed4:	4770      	bx	lr
 8019ed6:	4608      	mov	r0, r1
 8019ed8:	4770      	bx	lr

08019eda <memmove>:
 8019eda:	4288      	cmp	r0, r1
 8019edc:	b510      	push	{r4, lr}
 8019ede:	eb01 0302 	add.w	r3, r1, r2
 8019ee2:	d807      	bhi.n	8019ef4 <memmove+0x1a>
 8019ee4:	1e42      	subs	r2, r0, #1
 8019ee6:	4299      	cmp	r1, r3
 8019ee8:	d00a      	beq.n	8019f00 <memmove+0x26>
 8019eea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019eee:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019ef2:	e7f8      	b.n	8019ee6 <memmove+0xc>
 8019ef4:	4283      	cmp	r3, r0
 8019ef6:	d9f5      	bls.n	8019ee4 <memmove+0xa>
 8019ef8:	1881      	adds	r1, r0, r2
 8019efa:	1ad2      	subs	r2, r2, r3
 8019efc:	42d3      	cmn	r3, r2
 8019efe:	d100      	bne.n	8019f02 <memmove+0x28>
 8019f00:	bd10      	pop	{r4, pc}
 8019f02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019f06:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019f0a:	e7f7      	b.n	8019efc <memmove+0x22>

08019f0c <__malloc_lock>:
 8019f0c:	4770      	bx	lr

08019f0e <__malloc_unlock>:
 8019f0e:	4770      	bx	lr

08019f10 <_realloc_r>:
 8019f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f12:	4607      	mov	r7, r0
 8019f14:	4614      	mov	r4, r2
 8019f16:	460e      	mov	r6, r1
 8019f18:	b921      	cbnz	r1, 8019f24 <_realloc_r+0x14>
 8019f1a:	4611      	mov	r1, r2
 8019f1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019f20:	f7ff ba06 	b.w	8019330 <_malloc_r>
 8019f24:	b922      	cbnz	r2, 8019f30 <_realloc_r+0x20>
 8019f26:	f7ff f9b5 	bl	8019294 <_free_r>
 8019f2a:	4625      	mov	r5, r4
 8019f2c:	4628      	mov	r0, r5
 8019f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f30:	f000 f814 	bl	8019f5c <_malloc_usable_size_r>
 8019f34:	42a0      	cmp	r0, r4
 8019f36:	d20f      	bcs.n	8019f58 <_realloc_r+0x48>
 8019f38:	4621      	mov	r1, r4
 8019f3a:	4638      	mov	r0, r7
 8019f3c:	f7ff f9f8 	bl	8019330 <_malloc_r>
 8019f40:	4605      	mov	r5, r0
 8019f42:	2800      	cmp	r0, #0
 8019f44:	d0f2      	beq.n	8019f2c <_realloc_r+0x1c>
 8019f46:	4631      	mov	r1, r6
 8019f48:	4622      	mov	r2, r4
 8019f4a:	f7fe fd8b 	bl	8018a64 <memcpy>
 8019f4e:	4631      	mov	r1, r6
 8019f50:	4638      	mov	r0, r7
 8019f52:	f7ff f99f 	bl	8019294 <_free_r>
 8019f56:	e7e9      	b.n	8019f2c <_realloc_r+0x1c>
 8019f58:	4635      	mov	r5, r6
 8019f5a:	e7e7      	b.n	8019f2c <_realloc_r+0x1c>

08019f5c <_malloc_usable_size_r>:
 8019f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019f60:	1f18      	subs	r0, r3, #4
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	bfbc      	itt	lt
 8019f66:	580b      	ldrlt	r3, [r1, r0]
 8019f68:	18c0      	addlt	r0, r0, r3
 8019f6a:	4770      	bx	lr

08019f6c <_init>:
 8019f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f6e:	bf00      	nop
 8019f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019f72:	bc08      	pop	{r3}
 8019f74:	469e      	mov	lr, r3
 8019f76:	4770      	bx	lr

08019f78 <_fini>:
 8019f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f7a:	bf00      	nop
 8019f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019f7e:	bc08      	pop	{r3}
 8019f80:	469e      	mov	lr, r3
 8019f82:	4770      	bx	lr
