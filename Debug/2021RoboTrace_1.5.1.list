
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018e58  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bb4  08019018  08019018  00029018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019bcc  08019bcc  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08019bcc  08019bcc  00029bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019bd4  08019bd4  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08019bd4  08019bd4  00029bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019bdc  08019bdc  00029bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08019be0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00040c90  200001e0  08019dbc  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20040e70  08019dbc  00030e70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000390d6  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000794d  00000000  00000000  000692e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022a8  00000000  00000000  00070c30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fe8  00000000  00000000  00072ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003524d  00000000  00000000  00074ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025b7c  00000000  00000000  000aa10d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110c2b  00000000  00000000  000cfc89  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e08b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a5ac  00000000  00000000  001e0930  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019000 	.word	0x08019000

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08019000 	.word	0x08019000

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f009 fabe 	bl	800a558 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2003e968 	.word	0x2003e968

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f009 faa6 	bl	800a558 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2003e968 	.word	0x2003e968

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f009 f947 	bl	800a2b4 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f007 feae 	bl	8008d88 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f007 fea8 	bl	8008d88 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f007 fea2 	bl	8008d88 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f007 fe9c 	bl	8008d88 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f007 fe96 	bl	8008d88 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f007 fe90 	bl	8008d88 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f007 fe8a 	bl	8008d88 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f007 fe84 	bl	8008d88 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f007 fe7e 	bl	8008d88 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f007 fe78 	bl	8008d88 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f007 fe6c 	bl	8008d88 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f007 fe66 	bl	8008d88 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f015 fb3d 	bl	80167a8 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011b4:	213c      	movs	r1, #60	; 0x3c
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <_ZN7Encoder4initEv+0x30>)
 80011b8:	f00d f866 	bl	800e288 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011bc:	213c      	movs	r1, #60	; 0x3c
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <_ZN7Encoder4initEv+0x34>)
 80011c0:	f00d f862 	bl	800e288 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <_ZN7Encoder4initEv+0x38>)
 80011c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <_ZN7Encoder4initEv+0x3c>)
 80011ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2003ebbc 	.word	0x2003ebbc
 80011e0:	2003e8a0 	.word	0x2003e8a0
 80011e4:	40010000 	.word	0x40010000
 80011e8:	40010400 	.word	0x40010400
 80011ec:	00000000 	.word	0x00000000

080011f0 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011f8:	4b69      	ldr	r3, [pc, #420]	; (80013a0 <_ZN7Encoder6updateEv+0x1b0>)
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001204:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001214:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001218:	4b64      	ldr	r3, [pc, #400]	; (80013ac <_ZN7Encoder6updateEv+0x1bc>)
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001224:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800122c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001234:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4a5d      	ldr	r2, [pc, #372]	; (80013b0 <_ZN7Encoder6updateEv+0x1c0>)
 800123c:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f999 	bl	8000578 <__aeabi_f2d>
 8001246:	a350      	add	r3, pc, #320	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7ff f9ec 	bl	8000628 <__aeabi_dmul>
 8001250:	4603      	mov	r3, r0
 8001252:	460c      	mov	r4, r1
 8001254:	4625      	mov	r5, r4
 8001256:	461c      	mov	r4, r3
 8001258:	4b56      	ldr	r3, [pc, #344]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f98b 	bl	8000578 <__aeabi_f2d>
 8001262:	a34b      	add	r3, pc, #300	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff f9de 	bl	8000628 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4620      	mov	r0, r4
 8001272:	4629      	mov	r1, r5
 8001274:	f7ff f822 	bl	80002bc <__adddf3>
 8001278:	4603      	mov	r3, r0
 800127a:	460c      	mov	r4, r1
 800127c:	4618      	mov	r0, r3
 800127e:	4621      	mov	r1, r4
 8001280:	f7ff fcca 	bl	8000c18 <__aeabi_d2f>
 8001284:	4602      	mov	r2, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f973 	bl	8000578 <__aeabi_f2d>
 8001292:	a33d      	add	r3, pc, #244	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f9c6 	bl	8000628 <__aeabi_dmul>
 800129c:	4603      	mov	r3, r0
 800129e:	460c      	mov	r4, r1
 80012a0:	4625      	mov	r5, r4
 80012a2:	461c      	mov	r4, r3
 80012a4:	4b44      	ldr	r3, [pc, #272]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f965 	bl	8000578 <__aeabi_f2d>
 80012ae:	a338      	add	r3, pc, #224	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7ff f9b8 	bl	8000628 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4620      	mov	r0, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	f7fe fffc 	bl	80002bc <__adddf3>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	4618      	mov	r0, r3
 80012ca:	4621      	mov	r1, r4
 80012cc:	f7ff fca4 	bl	8000c18 <__aeabi_d2f>
 80012d0:	4602      	mov	r2, r0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a38      	ldr	r2, [pc, #224]	; (80013bc <_ZN7Encoder6updateEv+0x1cc>)
 80012dc:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a34      	ldr	r2, [pc, #208]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 80012e4:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	4a33      	ldr	r2, [pc, #204]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012ec:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	ed93 7a00 	vldr	s14, [r3]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fe:	ee17 0a90 	vmov	r0, s15
 8001302:	f7ff f939 	bl	8000578 <__aeabi_f2d>
 8001306:	a324      	add	r3, pc, #144	; (adr r3, 8001398 <_ZN7Encoder6updateEv+0x1a8>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f98c 	bl	8000628 <__aeabi_dmul>
 8001310:	4603      	mov	r3, r0
 8001312:	460c      	mov	r4, r1
 8001314:	4618      	mov	r0, r3
 8001316:	4621      	mov	r1, r4
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001320:	f7ff faac 	bl	800087c <__aeabi_ddiv>
 8001324:	4603      	mov	r3, r0
 8001326:	460c      	mov	r4, r1
 8001328:	4618      	mov	r0, r3
 800132a:	4621      	mov	r1, r4
 800132c:	f7ff fc74 	bl	8000c18 <__aeabi_d2f>
 8001330:	4602      	mov	r2, r0
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	ed93 7a05 	vldr	s14, [r3, #20]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edd3 7a02 	vldr	s15, [r3, #8]
 8001358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	ed93 7a07 	vldr	s14, [r3, #28]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	edd3 7a02 	vldr	s15, [r3, #8]
 800136e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <_ZN7Encoder6updateEv+0x1d0>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bdb0      	pop	{r4, r5, r7, pc}
 8001388:	9999999a 	.word	0x9999999a
 800138c:	3fa99999 	.word	0x3fa99999
 8001390:	66666666 	.word	0x66666666
 8001394:	3fee6666 	.word	0x3fee6666
 8001398:	ce73a049 	.word	0xce73a049
 800139c:	3f77a3f6 	.word	0x3f77a3f6
 80013a0:	40010000 	.word	0x40010000
 80013a4:	47000000 	.word	0x47000000
 80013a8:	3f912547 	.word	0x3f912547
 80013ac:	40010400 	.word	0x40010400
 80013b0:	20000200 	.word	0x20000200
 80013b4:	20000208 	.word	0x20000208
 80013b8:	2000020c 	.word	0x2000020c
 80013bc:	20000204 	.word	0x20000204
 80013c0:	200001fc 	.word	0x200001fc

080013c4 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_ZN7Encoder5clearEv+0x3c>)
 80013de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <_ZN7Encoder5clearEv+0x40>)
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40010000 	.word	0x40010000
 8001404:	40010400 	.word	0x40010400

08001408 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	601a      	str	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	return distance_;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	ee07 3a90 	vmov	s15, r3
}
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	ee07 3a90 	vmov	s15, r3
}
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	ee07 3a90 	vmov	s15, r3
}
 800147c:	eeb0 0a67 	vmov.f32	s0, s15
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	619a      	str	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	ee07 3a90 	vmov	s15, r3
}
 80014f0:	eeb0 0a67 	vmov.f32	s0, s15
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001528:	6839      	ldr	r1, [r7, #0]
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f978 	bl	8001820 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 8001530:	f000 f98c 	bl	800184c <fopen_folder_and_file>

	return ret;
 8001534:	7bfb      	ldrb	r3, [r7, #15]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 800154a:	4804      	ldr	r0, [pc, #16]	; (800155c <user_fclose+0x1c>)
 800154c:	f011 fbf6 	bl	8012d3c <f_close>

	return ret;
 8001550:	79fb      	ldrb	r3, [r7, #7]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2003d7ac 	.word	0x2003d7ac

08001560 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b087      	sub	sp, #28
 8001564:	af02      	add	r7, sp, #8
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	80fb      	strh	r3, [r7, #6]
 800156c:	4613      	mov	r3, r2
 800156e:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001574:	2300      	movs	r3, #0
 8001576:	81fb      	strh	r3, [r7, #14]
 8001578:	e030      	b.n	80015dc <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800157a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	4413      	add	r3, r2
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe fff6 	bl	8000578 <__aeabi_f2d>
 800158c:	4603      	mov	r3, r0
 800158e:	460c      	mov	r4, r1
 8001590:	e9cd 3400 	strd	r3, r4, [sp]
 8001594:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <sd_write_float+0x94>)
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	4817      	ldr	r0, [pc, #92]	; (80015f8 <sd_write_float+0x98>)
 800159a:	f014 f9b9 	bl	8015910 <sniprintf>

		if(state == ADD_WRITE){
 800159e:	797b      	ldrb	r3, [r7, #5]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80015a4:	4b15      	ldr	r3, [pc, #84]	; (80015fc <sd_write_float+0x9c>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4619      	mov	r1, r3
 80015aa:	4814      	ldr	r0, [pc, #80]	; (80015fc <sd_write_float+0x9c>)
 80015ac:	f011 fc3a 	bl	8012e24 <f_lseek>
 80015b0:	e003      	b.n	80015ba <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 80015b2:	2100      	movs	r1, #0
 80015b4:	4811      	ldr	r0, [pc, #68]	; (80015fc <sd_write_float+0x9c>)
 80015b6:	f011 fc35 	bl	8012e24 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80015ba:	480f      	ldr	r0, [pc, #60]	; (80015f8 <sd_write_float+0x98>)
 80015bc:	f7fe fe20 	bl	8000200 <strlen>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <sd_write_float+0xa0>)
 80015c4:	490c      	ldr	r1, [pc, #48]	; (80015f8 <sd_write_float+0x98>)
 80015c6:	480d      	ldr	r0, [pc, #52]	; (80015fc <sd_write_float+0x9c>)
 80015c8:	f011 f9a3 	bl	8012912 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80015cc:	f000 f958 	bl	8001880 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	3301      	adds	r3, #1
 80015d8:	b29b      	uxth	r3, r3
 80015da:	81fb      	strh	r3, [r7, #14]
 80015dc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbc8      	blt.n	800157a <sd_write_float+0x1a>
	}
	return ret;
 80015e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd90      	pop	{r4, r7, pc}
 80015f2:	bf00      	nop
 80015f4:	08019018 	.word	0x08019018
 80015f8:	2003d71c 	.word	0x2003d71c
 80015fc:	2003d7ac 	.word	0x2003d7ac
 8001600:	2003d79c 	.word	0x2003d79c

08001604 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af02      	add	r7, sp, #8
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	4613      	mov	r3, r2
 8001612:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 f900 	bl	8001820 <create_path>

	if(state == OVER_WRITE){
 8001620:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001624:	2b00      	cmp	r3, #0
 8001626:	d108      	bne.n	800163a <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001628:	4822      	ldr	r0, [pc, #136]	; (80016b4 <sd_write_array_float+0xb0>)
 800162a:	f011 fbb1 	bl	8012d90 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800162e:	4822      	ldr	r0, [pc, #136]	; (80016b8 <sd_write_array_float+0xb4>)
 8001630:	f011 fe1c 	bl	801326c <f_unlink>
		f_chdir("..");
 8001634:	4821      	ldr	r0, [pc, #132]	; (80016bc <sd_write_array_float+0xb8>)
 8001636:	f011 fbab 	bl	8012d90 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 800163a:	f000 f907 	bl	800184c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800163e:	2300      	movs	r3, #0
 8001640:	82fb      	strh	r3, [r7, #22]
 8001642:	e028      	b.n	8001696 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001644:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	4413      	add	r3, r2
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff91 	bl	8000578 <__aeabi_f2d>
 8001656:	4603      	mov	r3, r0
 8001658:	460c      	mov	r4, r1
 800165a:	e9cd 3400 	strd	r3, r4, [sp]
 800165e:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <sd_write_array_float+0xbc>)
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	4818      	ldr	r0, [pc, #96]	; (80016c4 <sd_write_array_float+0xc0>)
 8001664:	f014 f954 	bl	8015910 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <sd_write_array_float+0xc4>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4619      	mov	r1, r3
 800166e:	4816      	ldr	r0, [pc, #88]	; (80016c8 <sd_write_array_float+0xc4>)
 8001670:	f011 fbd8 	bl	8012e24 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001674:	4813      	ldr	r0, [pc, #76]	; (80016c4 <sd_write_array_float+0xc0>)
 8001676:	f7fe fdc3 	bl	8000200 <strlen>
 800167a:	4602      	mov	r2, r0
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <sd_write_array_float+0xc8>)
 800167e:	4911      	ldr	r1, [pc, #68]	; (80016c4 <sd_write_array_float+0xc0>)
 8001680:	4811      	ldr	r0, [pc, #68]	; (80016c8 <sd_write_array_float+0xc4>)
 8001682:	f011 f946 	bl	8012912 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001686:	f000 f8fb 	bl	8001880 <bufclear>
	for(short i = 0 ; i < size; i++){
 800168a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800168e:	b29b      	uxth	r3, r3
 8001690:	3301      	adds	r3, #1
 8001692:	b29b      	uxth	r3, r3
 8001694:	82fb      	strh	r3, [r7, #22]
 8001696:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800169a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169e:	429a      	cmp	r2, r3
 80016a0:	dbd0      	blt.n	8001644 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80016a2:	4809      	ldr	r0, [pc, #36]	; (80016c8 <sd_write_array_float+0xc4>)
 80016a4:	f011 fb4a 	bl	8012d3c <f_close>

	return ret;
 80016a8:	7d7b      	ldrb	r3, [r7, #21]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	371c      	adds	r7, #28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd90      	pop	{r4, r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2003d61c 	.word	0x2003d61c
 80016b8:	2003c4dc 	.word	0x2003c4dc
 80016bc:	08019034 	.word	0x08019034
 80016c0:	08019018 	.word	0x08019018
 80016c4:	2003d71c 	.word	0x2003d71c
 80016c8:	2003d7ac 	.word	0x2003d7ac
 80016cc:	2003d79c 	.word	0x2003d79c

080016d0 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 f898 	bl	8001820 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016f0:	f000 f8ac 	bl	800184c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016f4:	e019      	b.n	800172a <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 80016f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	461a      	mov	r2, r3
 8001702:	4913      	ldr	r1, [pc, #76]	; (8001750 <sd_read_array_float+0x80>)
 8001704:	4813      	ldr	r0, [pc, #76]	; (8001754 <sd_read_array_float+0x84>)
 8001706:	f014 f957 	bl	80159b8 <siscanf>
		i++;
 800170a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800170e:	b29b      	uxth	r3, r3
 8001710:	3301      	adds	r3, #1
 8001712:	b29b      	uxth	r3, r3
 8001714:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001716:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800171a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171e:	429a      	cmp	r2, r3
 8001720:	db03      	blt.n	800172a <sd_read_array_float+0x5a>
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	3b01      	subs	r3, #1
 8001726:	b29b      	uxth	r3, r3
 8001728:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <sd_read_array_float+0x88>)
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	4809      	ldr	r0, [pc, #36]	; (8001754 <sd_read_array_float+0x84>)
 8001730:	f011 ff7a 	bl	8013628 <f_gets>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1dd      	bne.n	80016f6 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800173a:	f000 f8a1 	bl	8001880 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800173e:	4806      	ldr	r0, [pc, #24]	; (8001758 <sd_read_array_float+0x88>)
 8001740:	f011 fafc 	bl	8012d3c <f_close>

	return ret;
 8001744:	7d7b      	ldrb	r3, [r7, #21]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	08019024 	.word	0x08019024
 8001754:	2003d71c 	.word	0x2003d71c
 8001758:	2003d7ac 	.word	0x2003d7ac

0800175c <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	4613      	mov	r3, r2
 800176a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 f852 	bl	8001820 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800177c:	f000 f866 	bl	800184c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001780:	e019      	b.n	80017b6 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 8001782:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	4413      	add	r3, r2
 800178c:	461a      	mov	r2, r3
 800178e:	4913      	ldr	r1, [pc, #76]	; (80017dc <sd_read_array_double+0x80>)
 8001790:	4813      	ldr	r0, [pc, #76]	; (80017e0 <sd_read_array_double+0x84>)
 8001792:	f014 f911 	bl	80159b8 <siscanf>
		i++;
 8001796:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800179a:	b29b      	uxth	r3, r3
 800179c:	3301      	adds	r3, #1
 800179e:	b29b      	uxth	r3, r3
 80017a0:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80017a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	db03      	blt.n	80017b6 <sd_read_array_double+0x5a>
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80017b6:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <sd_read_array_double+0x88>)
 80017b8:	2180      	movs	r1, #128	; 0x80
 80017ba:	4809      	ldr	r0, [pc, #36]	; (80017e0 <sd_read_array_double+0x84>)
 80017bc:	f011 ff34 	bl	8013628 <f_gets>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1dd      	bne.n	8001782 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80017c6:	f000 f85b 	bl	8001880 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80017ca:	4806      	ldr	r0, [pc, #24]	; (80017e4 <sd_read_array_double+0x88>)
 80017cc:	f011 fab6 	bl	8012d3c <f_close>

	return ret;
 80017d0:	7d7b      	ldrb	r3, [r7, #21]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	08019030 	.word	0x08019030
 80017e0:	2003d71c 	.word	0x2003d71c
 80017e4:	2003d7ac 	.word	0x2003d7ac

080017e8 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80017f2:	2201      	movs	r2, #1
 80017f4:	4908      	ldr	r1, [pc, #32]	; (8001818 <sd_mount+0x30>)
 80017f6:	4809      	ldr	r0, [pc, #36]	; (800181c <sd_mount+0x34>)
 80017f8:	f010 fd18 	bl	801222c <f_mount>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <sd_mount+0x20>
 8001802:	2301      	movs	r3, #1
 8001804:	71fb      	strb	r3, [r7, #7]
 8001806:	e001      	b.n	800180c <sd_mount+0x24>
	else ret = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	71fb      	strb	r3, [r7, #7]

	return ret;
 800180c:	79fb      	ldrb	r3, [r7, #7]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	08019040 	.word	0x08019040
 800181c:	2003c5dc 	.word	0x2003c5dc

08001820 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <create_path+0x24>)
 800182e:	f014 f8ef 	bl	8015a10 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001832:	6839      	ldr	r1, [r7, #0]
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <create_path+0x28>)
 8001836:	f014 f8eb 	bl	8015a10 <strcpy>

}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2003d61c 	.word	0x2003d61c
 8001848:	2003c4dc 	.word	0x2003c4dc

0800184c <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001850:	4807      	ldr	r0, [pc, #28]	; (8001870 <fopen_folder_and_file+0x24>)
 8001852:	f011 fdcd 	bl	80133f0 <f_mkdir>

	f_chdir(dirpath);
 8001856:	4806      	ldr	r0, [pc, #24]	; (8001870 <fopen_folder_and_file+0x24>)
 8001858:	f011 fa9a 	bl	8012d90 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800185c:	2213      	movs	r2, #19
 800185e:	4905      	ldr	r1, [pc, #20]	; (8001874 <fopen_folder_and_file+0x28>)
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <fopen_folder_and_file+0x2c>)
 8001862:	f010 fd29 	bl	80122b8 <f_open>

	f_chdir("..");
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <fopen_folder_and_file+0x30>)
 8001868:	f011 fa92 	bl	8012d90 <f_chdir>


}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	2003d61c 	.word	0x2003d61c
 8001874:	2003c4dc 	.word	0x2003c4dc
 8001878:	2003d7ac 	.word	0x2003d7ac
 800187c:	08019034 	.word	0x08019034

08001880 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	e007      	b.n	800189c <bufclear+0x1c>
		buffer[i] = '\0';
 800188c:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <bufclear+0x30>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3301      	adds	r3, #1
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b7f      	cmp	r3, #127	; 0x7f
 80018a0:	ddf4      	ble.n	800188c <bufclear+0xc>
	}
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	2003d71c 	.word	0x2003d71c

080018b4 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ce:	480e      	ldr	r0, [pc, #56]	; (8001908 <read_byte+0x54>)
 80018d0:	f008 fcf0 	bl	800a2b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018d4:	f107 010f 	add.w	r1, r7, #15
 80018d8:	2364      	movs	r3, #100	; 0x64
 80018da:	2201      	movs	r2, #1
 80018dc:	480b      	ldr	r0, [pc, #44]	; (800190c <read_byte+0x58>)
 80018de:	f00b fe99 	bl	800d614 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 80018e2:	f107 010e 	add.w	r1, r7, #14
 80018e6:	2364      	movs	r3, #100	; 0x64
 80018e8:	2201      	movs	r2, #1
 80018ea:	4808      	ldr	r0, [pc, #32]	; (800190c <read_byte+0x58>)
 80018ec:	f00b ffc6 	bl	800d87c <HAL_SPI_Receive>
	CS_SET;
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018f6:	4804      	ldr	r0, [pc, #16]	; (8001908 <read_byte+0x54>)
 80018f8:	f008 fcdc 	bl	800a2b4 <HAL_GPIO_WritePin>

	return val;
 80018fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40020400 	.word	0x40020400
 800190c:	2003e848 	.word	0x2003e848

08001910 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	460a      	mov	r2, r1
 800191a:	71fb      	strb	r3, [r7, #7]
 800191c:	4613      	mov	r3, r2
 800191e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001926:	b2db      	uxtb	r3, r3
 8001928:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <write_byte+0x54>)
 8001932:	f008 fcbf 	bl	800a2b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001936:	f107 010f 	add.w	r1, r7, #15
 800193a:	2364      	movs	r3, #100	; 0x64
 800193c:	2201      	movs	r2, #1
 800193e:	480a      	ldr	r0, [pc, #40]	; (8001968 <write_byte+0x58>)
 8001940:	f00b fe68 	bl	800d614 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001944:	1db9      	adds	r1, r7, #6
 8001946:	2364      	movs	r3, #100	; 0x64
 8001948:	2201      	movs	r2, #1
 800194a:	4807      	ldr	r0, [pc, #28]	; (8001968 <write_byte+0x58>)
 800194c:	f00b fe62 	bl	800d614 <HAL_SPI_Transmit>
	CS_SET;
 8001950:	2201      	movs	r2, #1
 8001952:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <write_byte+0x54>)
 8001958:	f008 fcac 	bl	800a2b4 <HAL_GPIO_WritePin>
}
 800195c:	bf00      	nop
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40020400 	.word	0x40020400
 8001968:	2003e848 	.word	0x2003e848

0800196c <IMU_init>:

uint16_t IMU_init() {
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff ff9c 	bl	80018b4 <read_byte>
 800197c:	4603      	mov	r3, r0
 800197e:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001980:	797b      	ldrb	r3, [r7, #5]
 8001982:	2be0      	cmp	r3, #224	; 0xe0
 8001984:	d119      	bne.n	80019ba <IMU_init+0x4e>
		ret = 1;
 8001986:	2301      	movs	r3, #1
 8001988:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800198a:	2101      	movs	r1, #1
 800198c:	2006      	movs	r0, #6
 800198e:	f7ff ffbf 	bl	8001910 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001992:	2110      	movs	r1, #16
 8001994:	2003      	movs	r0, #3
 8001996:	f7ff ffbb 	bl	8001910 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800199a:	2120      	movs	r1, #32
 800199c:	207f      	movs	r0, #127	; 0x7f
 800199e:	f7ff ffb7 	bl	8001910 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 80019a2:	2106      	movs	r1, #6
 80019a4:	2001      	movs	r0, #1
 80019a6:	f7ff ffb3 	bl	8001910 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 80019aa:	2106      	movs	r1, #6
 80019ac:	2014      	movs	r0, #20
 80019ae:	f7ff ffaf 	bl	8001910 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80019b2:	2100      	movs	r1, #0
 80019b4:	207f      	movs	r0, #127	; 0x7f
 80019b6:	f7ff ffab 	bl	8001910 <write_byte>
	}
	return ret;
 80019ba:	88fb      	ldrh	r3, [r7, #6]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <read_gyro_data>:

void read_gyro_data() {
 80019c4:	b598      	push	{r3, r4, r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80019c8:	2033      	movs	r0, #51	; 0x33
 80019ca:	f7ff ff73 	bl	80018b4 <read_byte>
 80019ce:	4603      	mov	r3, r0
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	b21c      	sxth	r4, r3
 80019d4:	2034      	movs	r0, #52	; 0x34
 80019d6:	f7ff ff6d 	bl	80018b4 <read_byte>
 80019da:	4603      	mov	r3, r0
 80019dc:	b21b      	sxth	r3, r3
 80019de:	4323      	orrs	r3, r4
 80019e0:	b21a      	sxth	r2, r3
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <read_gyro_data+0x64>)
 80019e4:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80019e6:	2035      	movs	r0, #53	; 0x35
 80019e8:	f7ff ff64 	bl	80018b4 <read_byte>
 80019ec:	4603      	mov	r3, r0
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	b21c      	sxth	r4, r3
 80019f2:	2036      	movs	r0, #54	; 0x36
 80019f4:	f7ff ff5e 	bl	80018b4 <read_byte>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	4323      	orrs	r3, r4
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <read_gyro_data+0x68>)
 8001a02:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001a04:	2037      	movs	r0, #55	; 0x37
 8001a06:	f7ff ff55 	bl	80018b4 <read_byte>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	b21c      	sxth	r4, r3
 8001a10:	2038      	movs	r0, #56	; 0x38
 8001a12:	f7ff ff4f 	bl	80018b4 <read_byte>
 8001a16:	4603      	mov	r3, r0
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	4323      	orrs	r3, r4
 8001a1c:	b21a      	sxth	r2, r3
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <read_gyro_data+0x6c>)
 8001a20:	801a      	strh	r2, [r3, #0]
}
 8001a22:	bf00      	nop
 8001a24:	bd98      	pop	{r3, r4, r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2003e7e4 	.word	0x2003e7e4
 8001a2c:	2003e7e2 	.word	0x2003e7e2
 8001a30:	2003e7dc 	.word	0x2003e7dc

08001a34 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	801a      	strh	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	805a      	strh	r2, [r3, #2]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	809a      	strh	r2, [r3, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	80da      	strh	r2, [r3, #6]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	811a      	strh	r2, [r3, #8]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	815a      	strh	r2, [r3, #10]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
{

}
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a80:	f7ff ff74 	bl	800196c <IMU_init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001a88:	f7ff fb0a 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7ff fb16 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001a94:	4809      	ldr	r0, [pc, #36]	; (8001abc <_ZN3IMU4initEv+0x44>)
 8001a96:	f7ff fb3d 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7ff fb0f 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001aa2:	89fb      	ldrh	r3, [r7, #14]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <_ZN3IMU4initEv+0x48>)
 8001aa8:	f7ff fb34 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001aac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ab0:	f007 f96a 	bl	8008d88 <HAL_Delay>

}
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	08019044 	.word	0x08019044
 8001ac0:	08019050 	.word	0x08019050
 8001ac4:	00000000 	.word	0x00000000

08001ac8 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001ad0:	f7ff ff78 	bl	80019c4 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <_ZN3IMU12updateValuesEv+0xa0>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	b21a      	sxth	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <_ZN3IMU12updateValuesEv+0xa4>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001ae8:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <_ZN3IMU12updateValuesEv+0xa8>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	b21a      	sxth	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd2b 	bl	8000554 <__aeabi_i2d>
 8001afe:	a316      	add	r3, pc, #88	; (adr r3, 8001b58 <_ZN3IMU12updateValuesEv+0x90>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe fd90 	bl	8000628 <__aeabi_dmul>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	460c      	mov	r4, r1
 8001b0c:	4625      	mov	r5, r4
 8001b0e:	461c      	mov	r4, r3
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <_ZN3IMU12updateValuesEv+0xac>)
 8001b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fd1c 	bl	8000554 <__aeabi_i2d>
 8001b1c:	a310      	add	r3, pc, #64	; (adr r3, 8001b60 <_ZN3IMU12updateValuesEv+0x98>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe fd81 	bl	8000628 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	f7fe fbc5 	bl	80002bc <__adddf3>
 8001b32:	4603      	mov	r3, r0
 8001b34:	460c      	mov	r4, r1
 8001b36:	4618      	mov	r0, r3
 8001b38:	4621      	mov	r1, r4
 8001b3a:	f7ff f825 	bl	8000b88 <__aeabi_d2iz>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <_ZN3IMU12updateValuesEv+0xac>)
 8001b4e:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bdb0      	pop	{r4, r5, r7, pc}
 8001b58:	eb851eb8 	.word	0xeb851eb8
 8001b5c:	3f9eb851 	.word	0x3f9eb851
 8001b60:	70a3d70a 	.word	0x70a3d70a
 8001b64:	3fef0a3d 	.word	0x3fef0a3d
 8001b68:	2003e7e4 	.word	0x2003e7e4
 8001b6c:	2003e7e2 	.word	0x2003e7e2
 8001b70:	2003e7dc 	.word	0x2003e7dc
 8001b74:	20000210 	.word	0x20000210

08001b78 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001b78:	b5b0      	push	{r4, r5, r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b98:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f7fe fceb 	bl	8000578 <__aeabi_f2d>
 8001ba2:	a316      	add	r3, pc, #88	; (adr r3, 8001bfc <_ZN3IMU8getOmegaEv+0x84>)
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	f7fe fe68 	bl	800087c <__aeabi_ddiv>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4614      	mov	r4, r2
 8001bb2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001bb6:	a313      	add	r3, pc, #76	; (adr r3, 8001c04 <_ZN3IMU8getOmegaEv+0x8c>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	4629      	mov	r1, r5
 8001bc0:	f7fe fd32 	bl	8000628 <__aeabi_dmul>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	460c      	mov	r4, r1
 8001bc8:	4618      	mov	r0, r3
 8001bca:	4621      	mov	r1, r4
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <_ZN3IMU8getOmegaEv+0x80>)
 8001bd2:	f7fe fe53 	bl	800087c <__aeabi_ddiv>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	460c      	mov	r4, r1
 8001bda:	4618      	mov	r0, r3
 8001bdc:	4621      	mov	r1, r4
 8001bde:	f7ff f81b 	bl	8000c18 <__aeabi_d2f>
 8001be2:	4603      	mov	r3, r0
 8001be4:	ee07 3a90 	vmov	s15, r3
}
 8001be8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	40668000 	.word	0x40668000
 8001bfc:	66666666 	.word	0x66666666
 8001c00:	40306666 	.word	0x40306666
 8001c04:	54411744 	.word	0x54411744
 8001c08:	400921fb 	.word	0x400921fb

08001c0c <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0e:	b08b      	sub	sp, #44	; 0x2c
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001c14:	466b      	mov	r3, sp
 8001c16:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001c18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c1c:	f007 f8b4 	bl	8008d88 <HAL_Delay>
	lcd_clear();
 8001c20:	f7ff fa3e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001c24:	2100      	movs	r1, #0
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7ff fa4a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001c2c:	4840      	ldr	r0, [pc, #256]	; (8001d30 <_ZN3IMU11calibrationEv+0x124>)
 8001c2e:	f7ff fa71 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001c32:	2101      	movs	r1, #1
 8001c34:	2000      	movs	r0, #0
 8001c36:	f7ff fa43 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001c3a:	483e      	ldr	r0, [pc, #248]	; (8001d34 <_ZN3IMU11calibrationEv+0x128>)
 8001c3c:	f7ff fa6a 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001c40:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c44:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001c46:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c4a:	1e5d      	subs	r5, r3, #1
 8001c4c:	61bd      	str	r5, [r7, #24]
 8001c4e:	462b      	mov	r3, r5
 8001c50:	3301      	adds	r3, #1
 8001c52:	4619      	mov	r1, r3
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	f04f 0400 	mov.w	r4, #0
 8001c60:	0154      	lsls	r4, r2, #5
 8001c62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c66:	014b      	lsls	r3, r1, #5
 8001c68:	462b      	mov	r3, r5
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	f04f 0400 	mov.w	r4, #0
 8001c7a:	0154      	lsls	r4, r2, #5
 8001c7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c80:	014b      	lsls	r3, r1, #5
 8001c82:	462b      	mov	r3, r5
 8001c84:	3301      	adds	r3, #1
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	3303      	adds	r3, #3
 8001c8a:	3307      	adds	r3, #7
 8001c8c:	08db      	lsrs	r3, r3, #3
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	ebad 0d03 	sub.w	sp, sp, r3
 8001c94:	466b      	mov	r3, sp
 8001c96:	3303      	adds	r3, #3
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	83fb      	strh	r3, [r7, #30]
 8001ca2:	8bfa      	ldrh	r2, [r7, #30]
 8001ca4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	da13      	bge.n	8001cd4 <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001cb2:	8bfb      	ldrh	r3, [r7, #30]
 8001cb4:	ee07 2a90 	vmov	s15, r2
 8001cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f007 f85e 	bl	8008d88 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001ccc:	8bfb      	ldrh	r3, [r7, #30]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	83fb      	strh	r3, [r7, #30]
 8001cd2:	e7e6      	b.n	8001ca2 <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	462b      	mov	r3, r5
 8001cdc:	3301      	adds	r3, #1
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d00e      	beq.n	8001d0a <_ZN3IMU11calibrationEv+0xfe>
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfe:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	3304      	adds	r3, #4
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
 8001d08:	e7ec      	b.n	8001ce4 <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001d0a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d0e:	ee07 3a90 	vmov	s15, r3
 8001d12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d16:	edd7 6a08 	vldr	s13, [r7, #32]
 8001d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	edc3 7a03 	vstr	s15, [r3, #12]
 8001d24:	46b5      	mov	sp, r6
}
 8001d26:	bf00      	nop
 8001d28:	372c      	adds	r7, #44	; 0x2c
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	08019054 	.word	0x08019054
 8001d34:	08019060 	.word	0x08019060

08001d38 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	4603      	mov	r3, r0
 8001d40:	460a      	mov	r2, r1
 8001d42:	71fb      	strb	r3, [r7, #7]
 8001d44:	4613      	mov	r3, r2
 8001d46:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001d48:	79bb      	ldrb	r3, [r7, #6]
 8001d4a:	b299      	uxth	r1, r3
 8001d4c:	1dfa      	adds	r2, r7, #7
 8001d4e:	2364      	movs	r3, #100	; 0x64
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2301      	movs	r3, #1
 8001d54:	480c      	ldr	r0, [pc, #48]	; (8001d88 <INA260_read+0x50>)
 8001d56:	f008 fbff 	bl	800a558 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	b299      	uxth	r1, r3
 8001d5e:	f107 020c 	add.w	r2, r7, #12
 8001d62:	2364      	movs	r3, #100	; 0x64
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2302      	movs	r3, #2
 8001d68:	4807      	ldr	r0, [pc, #28]	; (8001d88 <INA260_read+0x50>)
 8001d6a:	f008 fcf3 	bl	800a754 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d6e:	7b3b      	ldrb	r3, [r7, #12]
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	b21a      	sxth	r2, r3
 8001d74:	7b7b      	ldrb	r3, [r7, #13]
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d7e:	89fb      	ldrh	r3, [r7, #14]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	2003e9fc 	.word	0x2003e9fc

08001d8c <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	4604      	mov	r4, r0
 8001d94:	4608      	mov	r0, r1
 8001d96:	4611      	mov	r1, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4623      	mov	r3, r4
 8001d9c:	71fb      	strb	r3, [r7, #7]
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71bb      	strb	r3, [r7, #6]
 8001da2:	460b      	mov	r3, r1
 8001da4:	717b      	strb	r3, [r7, #5]
 8001da6:	4613      	mov	r3, r2
 8001da8:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	733b      	strb	r3, [r7, #12]
 8001dae:	79bb      	ldrb	r3, [r7, #6]
 8001db0:	737b      	strb	r3, [r7, #13]
 8001db2:	797b      	ldrb	r3, [r7, #5]
 8001db4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001db6:	793b      	ldrb	r3, [r7, #4]
 8001db8:	b299      	uxth	r1, r3
 8001dba:	f107 020c 	add.w	r2, r7, #12
 8001dbe:	2364      	movs	r3, #100	; 0x64
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <INA260_write+0x48>)
 8001dc6:	f008 fbc7 	bl	800a558 <HAL_I2C_Master_Transmit>
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd90      	pop	{r4, r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2003e9fc 	.word	0x2003e9fc

08001dd8 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
 8001de2:	460b      	mov	r3, r1
 8001de4:	71bb      	strb	r3, [r7, #6]
 8001de6:	4613      	mov	r3, r2
 8001de8:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001dea:	797b      	ldrb	r3, [r7, #5]
 8001dec:	79ba      	ldrb	r2, [r7, #6]
 8001dee:	79f9      	ldrb	r1, [r7, #7]
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff ffcb 	bl	8001d8c <INA260_write>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	21df      	movs	r1, #223	; 0xdf
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f7ff ffe2 	bl	8001dd8 <setConfig>
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
{

}
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001e40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e44:	482a      	ldr	r0, [pc, #168]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e46:	f008 fa1d 	bl	800a284 <HAL_GPIO_ReadPin>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <_ZN8JoyStick8getValueEv+0x2e>
 8001e5a:	89fb      	ldrh	r3, [r7, #14]
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001e62:	2101      	movs	r1, #1
 8001e64:	4823      	ldr	r0, [pc, #140]	; (8001ef4 <_ZN8JoyStick8getValueEv+0xc0>)
 8001e66:	f008 fa0d 	bl	800a284 <HAL_GPIO_ReadPin>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf0c      	ite	eq
 8001e70:	2301      	moveq	r3, #1
 8001e72:	2300      	movne	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <_ZN8JoyStick8getValueEv+0x4e>
 8001e7a:	89fb      	ldrh	r3, [r7, #14]
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e86:	481a      	ldr	r0, [pc, #104]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e88:	f008 f9fc 	bl	800a284 <HAL_GPIO_ReadPin>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf0c      	ite	eq
 8001e92:	2301      	moveq	r3, #1
 8001e94:	2300      	movne	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <_ZN8JoyStick8getValueEv+0x70>
 8001e9c:	89fb      	ldrh	r3, [r7, #14]
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001ea4:	2104      	movs	r1, #4
 8001ea6:	4814      	ldr	r0, [pc, #80]	; (8001ef8 <_ZN8JoyStick8getValueEv+0xc4>)
 8001ea8:	f008 f9ec 	bl	800a284 <HAL_GPIO_ReadPin>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bf0c      	ite	eq
 8001eb2:	2301      	moveq	r3, #1
 8001eb4:	2300      	movne	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <_ZN8JoyStick8getValueEv+0x90>
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	f043 0308 	orr.w	r3, r3, #8
 8001ec2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	480a      	ldr	r0, [pc, #40]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001ec8:	f008 f9dc 	bl	800a284 <HAL_GPIO_ReadPin>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	bf0c      	ite	eq
 8001ed2:	2301      	moveq	r3, #1
 8001ed4:	2300      	movne	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <_ZN8JoyStick8getValueEv+0xb0>
 8001edc:	89fb      	ldrh	r3, [r7, #14]
 8001ede:	f043 0310 	orr.w	r3, r3, #16
 8001ee2:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001ee4:	89fb      	ldrh	r3, [r7, #14]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40020c00 	.word	0x40020c00
 8001ef8:	40020400 	.word	0x40020400

08001efc <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	2b52      	cmp	r3, #82	; 0x52
 8001f0c:	d112      	bne.n	8001f34 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f14:	4856      	ldr	r0, [pc, #344]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f16:	f008 f9cd 	bl	800a2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f20:	4853      	ldr	r0, [pc, #332]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f22:	f008 f9c7 	bl	800a2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f26:	2201      	movs	r2, #1
 8001f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f2c:	4850      	ldr	r0, [pc, #320]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f2e:	f008 f9c1 	bl	800a2b4 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001f32:	e098      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	2b47      	cmp	r3, #71	; 0x47
 8001f38:	d112      	bne.n	8001f60 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f40:	484b      	ldr	r0, [pc, #300]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f42:	f008 f9b7 	bl	800a2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f4c:	4848      	ldr	r0, [pc, #288]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f4e:	f008 f9b1 	bl	800a2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f52:	2201      	movs	r2, #1
 8001f54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f58:	4845      	ldr	r0, [pc, #276]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f5a:	f008 f9ab 	bl	800a2b4 <HAL_GPIO_WritePin>
}
 8001f5e:	e082      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	2b42      	cmp	r3, #66	; 0x42
 8001f64:	d112      	bne.n	8001f8c <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f66:	2201      	movs	r2, #1
 8001f68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f6c:	4840      	ldr	r0, [pc, #256]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f6e:	f008 f9a1 	bl	800a2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f72:	2201      	movs	r2, #1
 8001f74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f78:	483d      	ldr	r0, [pc, #244]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f7a:	f008 f99b 	bl	800a2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f84:	483a      	ldr	r0, [pc, #232]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f86:	f008 f995 	bl	800a2b4 <HAL_GPIO_WritePin>
}
 8001f8a:	e06c      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	2b43      	cmp	r3, #67	; 0x43
 8001f90:	d112      	bne.n	8001fb8 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f92:	2201      	movs	r2, #1
 8001f94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f98:	4835      	ldr	r0, [pc, #212]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f9a:	f008 f98b 	bl	800a2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fa4:	4832      	ldr	r0, [pc, #200]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fa6:	f008 f985 	bl	800a2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fb0:	482f      	ldr	r0, [pc, #188]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fb2:	f008 f97f 	bl	800a2b4 <HAL_GPIO_WritePin>
}
 8001fb6:	e056      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	2b4d      	cmp	r3, #77	; 0x4d
 8001fbc:	d112      	bne.n	8001fe4 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc4:	482a      	ldr	r0, [pc, #168]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fc6:	f008 f975 	bl	800a2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fd0:	4827      	ldr	r0, [pc, #156]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fd2:	f008 f96f 	bl	800a2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fdc:	4824      	ldr	r0, [pc, #144]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fde:	f008 f969 	bl	800a2b4 <HAL_GPIO_WritePin>
}
 8001fe2:	e040      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	2b59      	cmp	r3, #89	; 0x59
 8001fe8:	d112      	bne.n	8002010 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ff0:	481f      	ldr	r0, [pc, #124]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001ff2:	f008 f95f 	bl	800a2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ffc:	481c      	ldr	r0, [pc, #112]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001ffe:	f008 f959 	bl	800a2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002002:	2201      	movs	r2, #1
 8002004:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002008:	4819      	ldr	r0, [pc, #100]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800200a:	f008 f953 	bl	800a2b4 <HAL_GPIO_WritePin>
}
 800200e:	e02a      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	2b57      	cmp	r3, #87	; 0x57
 8002014:	d112      	bne.n	800203c <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800201c:	4814      	ldr	r0, [pc, #80]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800201e:	f008 f949 	bl	800a2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002028:	4811      	ldr	r0, [pc, #68]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800202a:	f008 f943 	bl	800a2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002034:	480e      	ldr	r0, [pc, #56]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002036:	f008 f93d 	bl	800a2b4 <HAL_GPIO_WritePin>
}
 800203a:	e014      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	2b7e      	cmp	r3, #126	; 0x7e
 8002040:	d111      	bne.n	8002066 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002042:	2201      	movs	r2, #1
 8002044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002048:	4809      	ldr	r0, [pc, #36]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800204a:	f008 f933 	bl	800a2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800204e:	2201      	movs	r2, #1
 8002050:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002054:	4806      	ldr	r0, [pc, #24]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002056:	f008 f92d 	bl	800a2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800205a:	2201      	movs	r2, #1
 800205c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002060:	4803      	ldr	r0, [pc, #12]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002062:	f008 f927 	bl	800a2b4 <HAL_GPIO_WritePin>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40020000 	.word	0x40020000

08002074 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
 8002080:	4613      	mov	r3, r2
 8002082:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d106      	bne.n	800209a <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800208c:	2201      	movs	r2, #1
 800208e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002092:	4813      	ldr	r0, [pc, #76]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 8002094:	f008 f90e 	bl	800a2b4 <HAL_GPIO_WritePin>
 8002098:	e009      	b.n	80020ae <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800209a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d105      	bne.n	80020ae <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80020a2:	2200      	movs	r2, #0
 80020a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a8:	480d      	ldr	r0, [pc, #52]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020aa:	f008 f903 	bl	800a2b4 <HAL_GPIO_WritePin>

	if(r_status == 1)
 80020ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d106      	bne.n	80020c4 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80020b6:	2201      	movs	r2, #1
 80020b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020bc:	4808      	ldr	r0, [pc, #32]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020be:	f008 f8f9 	bl	800a2b4 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80020c2:	e009      	b.n	80020d8 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80020c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d105      	bne.n	80020d8 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80020cc:	2200      	movs	r2, #0
 80020ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020d2:	4803      	ldr	r0, [pc, #12]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020d4:	f008 f8ee 	bl	800a2b4 <HAL_GPIO_WritePin>
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40020000 	.word	0x40020000

080020e4 <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b092      	sub	sp, #72	; 0x48
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fe92 	bl	8001e1c <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
 80020fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002102:	331c      	adds	r3, #28
 8002104:	633b      	str	r3, [r7, #48]	; 0x30
 8002106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210a:	429a      	cmp	r2, r3
 800210c:	d008      	beq.n	8002120 <_ZN10LineSensorC1Ev+0x3c>
 800210e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8002112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002114:	2200      	movs	r2, #0
 8002116:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800211a:	3302      	adds	r3, #2
 800211c:	647b      	str	r3, [r7, #68]	; 0x44
 800211e:	e7f2      	b.n	8002106 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
 8002128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212a:	643b      	str	r3, [r7, #64]	; 0x40
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212e:	3338      	adds	r3, #56	; 0x38
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
 8002132:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	429a      	cmp	r2, r3
 8002138:	d009      	beq.n	800214e <_ZN10LineSensorC1Ev+0x6a>
 800213a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800213c:	623b      	str	r3, [r7, #32]
		s = 0;
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8002146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002148:	3304      	adds	r3, #4
 800214a:	643b      	str	r3, [r7, #64]	; 0x40
 800214c:	e7f1      	b.n	8002132 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3338      	adds	r3, #56	; 0x38
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	429a      	cmp	r2, r3
 8002166:	d009      	beq.n	800217c <_ZN10LineSensorC1Ev+0x98>
 8002168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800216a:	617b      	str	r3, [r7, #20]
		m = 0;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002176:	3304      	adds	r3, #4
 8002178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800217a:	e7f1      	b.n	8002160 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	63bb      	str	r3, [r7, #56]	; 0x38
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	3338      	adds	r3, #56	; 0x38
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	429a      	cmp	r2, r3
 8002194:	d009      	beq.n	80021aa <_ZN10LineSensorC1Ev+0xc6>
 8002196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002198:	60bb      	str	r3, [r7, #8]
		s = 1;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021a0:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80021a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a4:	3304      	adds	r3, #4
 80021a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80021a8:	e7f1      	b.n	800218e <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4618      	mov	r0, r3
 80021ae:	3748      	adds	r7, #72	; 0x48
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	220e      	movs	r2, #14
 80021c0:	4619      	mov	r1, r3
 80021c2:	4803      	ldr	r0, [pc, #12]	; (80021d0 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80021c4:	f006 fe46 	bl	8008e54 <HAL_ADC_Start_DMA>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	2003e920 	.word	0x2003e920

080021d4 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b0d      	cmp	r3, #13
 80021e4:	dc2f      	bgt.n	8002246 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3392      	adds	r3, #146	; 0x92
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3304      	adds	r3, #4
 80021f2:	ed93 7a00 	vldr	s14, [r3]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021fe:	ee07 3a90 	vmov	s15, r3
 8002202:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	33a0      	adds	r3, #160	; 0xa0
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	3304      	adds	r3, #4
 8002212:	edd3 7a00 	vldr	s15, [r3]
 8002216:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	4619      	mov	r1, r3
 8002220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	1a5b      	subs	r3, r3, r1
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	68f9      	ldr	r1, [r7, #12]
 8002230:	440b      	add	r3, r1
 8002232:	3306      	adds	r3, #6
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	3304      	adds	r3, #4
 800223a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	3301      	adds	r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e7cc      	b.n	80021e0 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	3301      	adds	r3, #1
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002250:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b09      	cmp	r3, #9
 8002258:	d902      	bls.n	8002260 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]


}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	2000021c 	.word	0x2000021c

08002270 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002270:	b5b0      	push	{r4, r5, r7, lr}
 8002272:	b08e      	sub	sp, #56	; 0x38
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800227e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002282:	2b0d      	cmp	r3, #13
 8002284:	f200 80b8 	bhi.w	80023f8 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002288:	2300      	movs	r3, #0
 800228a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800228e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002292:	2b09      	cmp	r3, #9
 8002294:	d81c      	bhi.n	80022d0 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002296:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800229a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800229e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4423      	add	r3, r4
 80022ae:	3306      	adds	r3, #6
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4403      	add	r3, r0
 80022b4:	3304      	adds	r3, #4
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	008b      	lsls	r3, r1, #2
 80022ba:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022be:	440b      	add	r3, r1
 80022c0:	3b30      	subs	r3, #48	; 0x30
 80022c2:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022c8:	3301      	adds	r3, #1
 80022ca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022ce:	e7de      	b.n	800228e <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80022d0:	2300      	movs	r3, #0
 80022d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022da:	2b09      	cmp	r3, #9
 80022dc:	d84d      	bhi.n	800237a <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80022de:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022e2:	3301      	adds	r3, #1
 80022e4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022ec:	2b09      	cmp	r3, #9
 80022ee:	d83e      	bhi.n	800236e <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80022f0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022fa:	4413      	add	r3, r2
 80022fc:	3b30      	subs	r3, #48	; 0x30
 80022fe:	ed93 7a00 	vldr	s14, [r3]
 8002302:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800230c:	4413      	add	r3, r2
 800230e:	3b30      	subs	r3, #48	; 0x30
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231c:	d521      	bpl.n	8002362 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 800231e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002328:	4413      	add	r3, r2
 800232a:	3b30      	subs	r3, #48	; 0x30
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002330:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002334:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002338:	0092      	lsls	r2, r2, #2
 800233a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800233e:	440a      	add	r2, r1
 8002340:	3a30      	subs	r2, #48	; 0x30
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800234a:	440b      	add	r3, r1
 800234c:	3b30      	subs	r3, #48	; 0x30
 800234e:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002350:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800235a:	4413      	add	r3, r2
 800235c:	3b30      	subs	r3, #48	; 0x30
 800235e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002360:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002362:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002366:	3301      	adds	r3, #1
 8002368:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800236c:	e7bc      	b.n	80022e8 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800236e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002372:	3301      	adds	r3, #1
 8002374:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002378:	e7ad      	b.n	80022d6 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f8fb 	bl	8000578 <__aeabi_f2d>
 8002382:	a32a      	add	r3, pc, #168	; (adr r3, 800242c <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	f7fe f94e 	bl	8000628 <__aeabi_dmul>
 800238c:	4603      	mov	r3, r0
 800238e:	460c      	mov	r4, r1
 8002390:	4625      	mov	r5, r4
 8002392:	461c      	mov	r4, r3
 8002394:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002398:	4a21      	ldr	r2, [pc, #132]	; (8002420 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe f8e9 	bl	8000578 <__aeabi_f2d>
 80023a6:	a31c      	add	r3, pc, #112	; (adr r3, 8002418 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	f7fe f93c 	bl	8000628 <__aeabi_dmul>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4620      	mov	r0, r4
 80023b6:	4629      	mov	r1, r5
 80023b8:	f7fd ff80 	bl	80002bc <__adddf3>
 80023bc:	4603      	mov	r3, r0
 80023be:	460c      	mov	r4, r1
 80023c0:	461a      	mov	r2, r3
 80023c2:	4623      	mov	r3, r4
 80023c4:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	f7fe fc24 	bl	8000c18 <__aeabi_d2f>
 80023d0:	4601      	mov	r1, r0
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 80023de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	490e      	ldr	r1, [pc, #56]	; (8002420 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80023ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023f0:	3301      	adds	r3, #1
 80023f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023f6:	e742      	b.n	800227e <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80023fe:	4a09      	ldr	r2, [pc, #36]	; (8002424 <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002400:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002408:	4a07      	ldr	r2, [pc, #28]	; (8002428 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 800240a:	6013      	str	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	3738      	adds	r7, #56	; 0x38
 8002410:	46bd      	mov	sp, r7
 8002412:	bdb0      	pop	{r4, r5, r7, pc}
 8002414:	f3af 8000 	nop.w
 8002418:	66666666 	.word	0x66666666
 800241c:	3fee6666 	.word	0x3fee6666
 8002420:	20000220 	.word	0x20000220
 8002424:	20000214 	.word	0x20000214
 8002428:	20000218 	.word	0x20000218
 800242c:	9999999a 	.word	0x9999999a
 8002430:	3fa99999 	.word	0x3fa99999

08002434 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b0a0      	sub	sp, #128	; 0x80
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 800243c:	2064      	movs	r0, #100	; 0x64
 800243e:	f006 fca3 	bl	8008d88 <HAL_Delay>

	lcd_clear();
 8002442:	f7fe fe2d 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8002446:	2100      	movs	r1, #0
 8002448:	2000      	movs	r0, #0
 800244a:	f7fe fe39 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 800244e:	4886      	ldr	r0, [pc, #536]	; (8002668 <_ZN10LineSensor11calibrationEv+0x234>)
 8002450:	f7fe fe60 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002454:	2101      	movs	r1, #1
 8002456:	2000      	movs	r0, #0
 8002458:	f7fe fe32 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 800245c:	4883      	ldr	r0, [pc, #524]	; (800266c <_ZN10LineSensor11calibrationEv+0x238>)
 800245e:	f7fe fe59 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002462:	2300      	movs	r3, #0
 8002464:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002468:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800246c:	2b0d      	cmp	r3, #13
 800246e:	d823      	bhi.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002470:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002474:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	32b0      	adds	r2, #176	; 0xb0
 800247c:	0092      	lsls	r2, r2, #2
 800247e:	440a      	add	r2, r1
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002488:	440b      	add	r3, r1
 800248a:	3b40      	subs	r3, #64	; 0x40
 800248c:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800248e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002492:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	32b0      	adds	r2, #176	; 0xb0
 800249a:	0092      	lsls	r2, r2, #2
 800249c:	440a      	add	r2, r1
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80024a6:	440b      	add	r3, r1
 80024a8:	3b78      	subs	r3, #120	; 0x78
 80024aa:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024ac:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80024b0:	3301      	adds	r3, #1
 80024b2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80024b6:	e7d7      	b.n	8002468 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fcb8 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	bf14      	ite	ne
 80024ca:	2301      	movne	r3, #1
 80024cc:	2300      	moveq	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d079      	beq.n	80025c8 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80024da:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024de:	2b0d      	cmp	r3, #13
 80024e0:	d850      	bhi.n	8002584 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80024e2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024ec:	4413      	add	r3, r2
 80024ee:	3b40      	subs	r3, #64	; 0x40
 80024f0:	ed93 7a00 	vldr	s14, [r3]
 80024f4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	33b0      	adds	r3, #176	; 0xb0
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	d50f      	bpl.n	800252e <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 800250e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002512:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	32b0      	adds	r2, #176	; 0xb0
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	440a      	add	r2, r1
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002526:	440b      	add	r3, r1
 8002528:	3b40      	subs	r3, #64	; 0x40
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e024      	b.n	8002578 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 800252e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002538:	4413      	add	r3, r2
 800253a:	3b78      	subs	r3, #120	; 0x78
 800253c:	ed93 7a00 	vldr	s14, [r3]
 8002540:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	33b0      	adds	r3, #176	; 0xb0
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	edd3 7a00 	vldr	s15, [r3]
 8002550:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002558:	dd0e      	ble.n	8002578 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800255a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800255e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	32b0      	adds	r2, #176	; 0xb0
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	440a      	add	r2, r1
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002572:	440b      	add	r3, r1
 8002574:	3b78      	subs	r3, #120	; 0x78
 8002576:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002578:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800257c:	3301      	adds	r3, #1
 800257e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002582:	e7aa      	b.n	80024da <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800258a:	4618      	mov	r0, r3
 800258c:	f002 fc16 	bl	8004dbc <_ZN12RotarySwitch8getValueEv>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf0c      	ite	eq
 8002596:	2301      	moveq	r3, #1
 8002598:	2300      	movne	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025a6:	2201      	movs	r2, #1
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fd61 	bl	8002074 <_ZN3LED2LREaa>
 80025b2:	e781      	b.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025ba:	2200      	movs	r2, #0
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fd57 	bl	8002074 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80025c6:	e777      	b.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80025ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025d2:	2b0d      	cmp	r3, #13
 80025d4:	d826      	bhi.n	8002624 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80025d6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025e0:	4413      	add	r3, r2
 80025e2:	3b40      	subs	r3, #64	; 0x40
 80025e4:	ed93 7a00 	vldr	s14, [r3]
 80025e8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025f2:	4413      	add	r3, r2
 80025f4:	3b78      	subs	r3, #120	; 0x78
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025fe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002602:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002670 <_ZN10LineSensor11calibrationEv+0x23c>
 8002606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	3392      	adds	r3, #146	; 0x92
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	3304      	adds	r3, #4
 8002614:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002618:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800261c:	3301      	adds	r3, #1
 800261e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002622:	e7d4      	b.n	80025ce <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002624:	2300      	movs	r3, #0
 8002626:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800262a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800262e:	2b0d      	cmp	r3, #13
 8002630:	d815      	bhi.n	800265e <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 8002632:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8002636:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800263a:	0092      	lsls	r2, r2, #2
 800263c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002640:	440a      	add	r2, r1
 8002642:	3a78      	subs	r2, #120	; 0x78
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	33a0      	adds	r3, #160	; 0xa0
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	3304      	adds	r3, #4
 8002650:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002652:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002656:	3301      	adds	r3, #1
 8002658:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800265c:	e7e5      	b.n	800262a <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 800265e:	bf00      	nop
 8002660:	3780      	adds	r7, #128	; 0x80
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	0801906c 	.word	0x0801906c
 800266c:	08019078 	.word	0x08019078
 8002670:	447a0000 	.word	0x447a0000

08002674 <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3338      	adds	r3, #56	; 0x38
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	429a      	cmp	r2, r3
 8002698:	d012      	beq.n	80026c0 <_ZN10LineSensor13emergencyStopEv+0x4c>
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	60fb      	str	r3, [r7, #12]
		if(s >= 700) out_cnt++;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	edd3 7a00 	vldr	s15, [r3]
 80026a4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002714 <_ZN10LineSensor13emergencyStopEv+0xa0>
 80026a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b0:	db02      	blt.n	80026b8 <_ZN10LineSensor13emergencyStopEv+0x44>
 80026b2:	8bfb      	ldrh	r3, [r7, #30]
 80026b4:	3301      	adds	r3, #1
 80026b6:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	3304      	adds	r3, #4
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	e7e8      	b.n	8002692 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 80026c0:	8bfb      	ldrh	r3, [r7, #30]
 80026c2:	2b0d      	cmp	r3, #13
 80026c4:	d906      	bls.n	80026d4 <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 80026c6:	4b14      	ldr	r3, [pc, #80]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	3301      	adds	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026d0:	801a      	strh	r2, [r3, #0]
 80026d2:	e002      	b.n	80026da <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	2b31      	cmp	r3, #49	; 0x31
 80026e0:	d903      	bls.n	80026ea <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	e002      	b.n	80026f0 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d903      	bls.n	8002704 <_ZN10LineSensor13emergencyStopEv+0x90>
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8002702:	801a      	strh	r2, [r3, #0]

	return flag;
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 8002706:	781b      	ldrb	r3, [r3, #0]

}
 8002708:	4618      	mov	r0, r3
 800270a:	3724      	adds	r7, #36	; 0x24
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	442f0000 	.word	0x442f0000
 8002718:	20000258 	.word	0x20000258
 800271c:	2000025a 	.word	0x2000025a

08002720 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	ed87 0a01 	vstr	s0, [r7, #4]
 800272a:	edd7 7a01 	vldr	s15, [r7, #4]
 800272e:	eef0 7ae7 	vabs.f32	s15, s15
 8002732:	eeb0 0a67 	vmov.f32	s0, s15
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>:
float mon_ave_l, mon_ave_r;
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu) :
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), correction_check_cnt_(0)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	625a      	str	r2, [r3, #36]	; 0x24
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	629a      	str	r2, [r3, #40]	; 0x28
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	62da      	str	r2, [r3, #44]	; 0x2c
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	635a      	str	r2, [r3, #52]	; 0x34
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	639a      	str	r2, [r3, #56]	; 0x38
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	679a      	str	r2, [r3, #120]	; 0x78
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	67da      	str	r2, [r3, #124]	; 0x7c
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80027d2:	3350      	adds	r3, #80	; 0x50
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027e0:	3314      	adds	r3, #20
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027ec:	3316      	adds	r3, #22
 80027ee:	2200      	movs	r2, #0
 80027f0:	801a      	strh	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027f8:	3318      	adds	r3, #24
 80027fa:	2200      	movs	r2, #0
 80027fc:	801a      	strh	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002804:	334c      	adds	r3, #76	; 0x4c
 8002806:	2200      	movs	r2, #0
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002810:	334e      	adds	r3, #78	; 0x4e
 8002812:	2200      	movs	r2, #0
 8002814:	801a      	strh	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800281c:	3350      	adds	r3, #80	; 0x50
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002828:	3351      	adds	r3, #81	; 0x51
 800282a:	2200      	movs	r2, #0
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002834:	3352      	adds	r3, #82	; 0x52
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002840:	3354      	adds	r3, #84	; 0x54
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800284e:	3358      	adds	r3, #88	; 0x58
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800285c:	335c      	adds	r3, #92	; 0x5c
 800285e:	2200      	movs	r2, #0
 8002860:	801a      	strh	r2, [r3, #0]

{
	motor_ = motor;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a3a      	ldr	r2, [r7, #32]
 8002878:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287e:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002884:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800288a:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002890:	621a      	str	r2, [r3, #32]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002892:	2300      	movs	r3, #0
 8002894:	82fb      	strh	r3, [r7, #22]
 8002896:	8afb      	ldrh	r3, [r7, #22]
 8002898:	f241 726f 	movw	r2, #5999	; 0x176f
 800289c:	4293      	cmp	r3, r2
 800289e:	d80e      	bhi.n	80028be <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x17e>
		velocity_table_[i] = 0;
 80028a0:	8afb      	ldrh	r3, [r7, #22]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80028a8:	3314      	adds	r3, #20
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	3304      	adds	r3, #4
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80028b6:	8afb      	ldrh	r3, [r7, #22]
 80028b8:	3301      	adds	r3, #1
 80028ba:	82fb      	strh	r3, [r7, #22]
 80028bc:	e7eb      	b.n	8002896 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x156>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80028be:	2300      	movs	r3, #0
 80028c0:	82bb      	strh	r3, [r7, #20]
 80028c2:	8abb      	ldrh	r3, [r7, #20]
 80028c4:	2b63      	cmp	r3, #99	; 0x63
 80028c6:	d80e      	bhi.n	80028e6 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1a6>
		crossline_distance_[i] = 0;
 80028c8:	8abb      	ldrh	r3, [r7, #20]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80028d0:	3306      	adds	r3, #6
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	3304      	adds	r3, #4
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80028de:	8abb      	ldrh	r3, [r7, #20]
 80028e0:	3301      	adds	r3, #1
 80028e2:	82bb      	strh	r3, [r7, #20]
 80028e4:	e7ed      	b.n	80028c2 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x182>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028e6:	2300      	movs	r3, #0
 80028e8:	827b      	strh	r3, [r7, #18]
 80028ea:	8a7b      	ldrh	r3, [r7, #18]
 80028ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028f0:	d20e      	bcs.n	8002910 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1d0>
		sideline_distance_[i] = 0;
 80028f2:	8a7b      	ldrh	r3, [r7, #18]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80028fa:	332a      	adds	r3, #42	; 0x2a
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	3304      	adds	r3, #4
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002908:	8a7b      	ldrh	r3, [r7, #18]
 800290a:	3301      	adds	r3, #1
 800290c:	827b      	strh	r3, [r7, #18]
 800290e:	e7ec      	b.n	80028ea <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1aa>
	}
}
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4618      	mov	r0, r3
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002920:	b5b0      	push	{r4, r5, r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002938:	ee37 7a27 	vadd.f32	s14, s14, s15
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002944:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002950:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800295c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002968:	ee37 7a27 	vadd.f32	s14, s14, s15
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002974:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002988:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002994:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 80029a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 80029ac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80029b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80029c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029c8:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80029cc:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4a1f      	ldr	r2, [pc, #124]	; (8002a50 <_ZN9LineTrace9calcErrorEv+0x130>)
 80029d4:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fd fdcd 	bl	8000578 <__aeabi_f2d>
 80029de:	a318      	add	r3, pc, #96	; (adr r3, 8002a40 <_ZN9LineTrace9calcErrorEv+0x120>)
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	f7fd fe20 	bl	8000628 <__aeabi_dmul>
 80029e8:	4603      	mov	r3, r0
 80029ea:	460c      	mov	r4, r1
 80029ec:	4625      	mov	r5, r4
 80029ee:	461c      	mov	r4, r3
 80029f0:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <_ZN9LineTrace9calcErrorEv+0x134>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fd fdbf 	bl	8000578 <__aeabi_f2d>
 80029fa:	a313      	add	r3, pc, #76	; (adr r3, 8002a48 <_ZN9LineTrace9calcErrorEv+0x128>)
 80029fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a00:	f7fd fe12 	bl	8000628 <__aeabi_dmul>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4620      	mov	r0, r4
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	f7fd fc56 	bl	80002bc <__adddf3>
 8002a10:	4603      	mov	r3, r0
 8002a12:	460c      	mov	r4, r1
 8002a14:	4618      	mov	r0, r3
 8002a16:	4621      	mov	r1, r4
 8002a18:	f7fe f8fe 	bl	8000c18 <__aeabi_d2f>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4a0d      	ldr	r2, [pc, #52]	; (8002a58 <_ZN9LineTrace9calcErrorEv+0x138>)
 8002a24:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <_ZN9LineTrace9calcErrorEv+0x134>)
 8002a2a:	6013      	str	r3, [r2, #0]

	return diff;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	ee07 3a90 	vmov	s15, r3

}
 8002a32:	eeb0 0a67 	vmov.f32	s0, s15
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a3c:	f3af 8000 	nop.w
 8002a40:	47ae147b 	.word	0x47ae147b
 8002a44:	3fb47ae1 	.word	0x3fb47ae1
 8002a48:	d70a3d71 	.word	0xd70a3d71
 8002a4c:	3fed70a3 	.word	0x3fed70a3
 8002a50:	2000025c 	.word	0x2000025c
 8002a54:	20000280 	.word	0x20000280
 8002a58:	20000260 	.word	0x20000260
 8002a5c:	00000000 	.word	0x00000000

08002a60 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 8002a60:	b5b0      	push	{r4, r5, r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ff59 	bl	8002920 <_ZN9LineTrace9calcErrorEv>
 8002a6e:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d007      	beq.n	8002a8c <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002a7c:	4b3c      	ldr	r3, [pc, #240]	; (8002b70 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	}

	p = kp_ * diff;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a92:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a9a:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002aa4:	4b33      	ldr	r3, [pc, #204]	; (8002b74 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	edd7 6a05 	vldr	s13, [r7, #20]
 8002aae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab6:	ee17 0a90 	vmov	r0, s15
 8002aba:	f7fd fd5d 	bl	8000578 <__aeabi_f2d>
 8002abe:	a32a      	add	r3, pc, #168	; (adr r3, 8002b68 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac4:	f7fd feda 	bl	800087c <__aeabi_ddiv>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	460c      	mov	r4, r1
 8002acc:	4618      	mov	r0, r3
 8002ace:	4621      	mov	r1, r4
 8002ad0:	f7fe f8a2 	bl	8000c18 <__aeabi_d2f>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002ad8:	4b25      	ldr	r3, [pc, #148]	; (8002b70 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fd4b 	bl	8000578 <__aeabi_f2d>
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	460d      	mov	r5, r1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002aec:	edd7 7a05 	vldr	s15, [r7, #20]
 8002af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af4:	ee17 0a90 	vmov	r0, s15
 8002af8:	f7fd fd3e 	bl	8000578 <__aeabi_f2d>
 8002afc:	a31a      	add	r3, pc, #104	; (adr r3, 8002b68 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b02:	f7fd fd91 	bl	8000628 <__aeabi_dmul>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	4629      	mov	r1, r5
 8002b0e:	f7fd fbd5 	bl	80002bc <__adddf3>
 8002b12:	4603      	mov	r3, r0
 8002b14:	460c      	mov	r4, r1
 8002b16:	4618      	mov	r0, r3
 8002b18:	4621      	mov	r1, r4
 8002b1a:	f7fe f87d 	bl	8000c18 <__aeabi_d2f>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002b22:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002b24:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b28:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b30:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002b32:	edd3 7a00 	vldr	s15, [r3]
 8002b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3a:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002b48:	edd7 0a02 	vldr	s1, [r7, #8]
 8002b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b50:	4610      	mov	r0, r2
 8002b52:	f002 fd15 	bl	8005580 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002b56:	4a07      	ldr	r2, [pc, #28]	; (8002b74 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	6013      	str	r3, [r2, #0]

}
 8002b5c:	bf00      	nop
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bdb0      	pop	{r4, r5, r7, pc}
 8002b64:	f3af 8000 	nop.w
 8002b68:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b6c:	3f50624d 	.word	0x3f50624d
 8002b70:	20000288 	.word	0x20000288
 8002b74:	20000284 	.word	0x20000284

08002b78 <_ZN9LineTrace11loggerStartEv>:
	monitor_target_omega = target_omega;
	monitor_r = r;
}

void LineTrace::loggerStart()
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe fc8f 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f001 ffd6 	bl	8004b40 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f001 fd01 	bl	80045a0 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f001 fd66 	bl	800468c <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002be8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002bf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002bfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c00:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002c14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002c20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c24:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002c28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c2c:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8002c30:	4a40      	ldr	r2, [pc, #256]	; (8002d34 <_ZN9LineTrace11isCrossLineEv+0x164>)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8002c36:	4a40      	ldr	r2, [pc, #256]	; (8002d38 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8002c3c:	4b3f      	ldr	r3, [pc, #252]	; (8002d3c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	f083 0301 	eor.w	r3, r3, #1
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d044      	beq.n	8002cd4 <_ZN9LineTrace11isCrossLineEv+0x104>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8002c4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c4e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002d40 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5a:	d50f      	bpl.n	8002c7c <_ZN9LineTrace11isCrossLineEv+0xac>
 8002c5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c60:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002d40 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6c:	d506      	bpl.n	8002c7c <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 8002c6e:	4b35      	ldr	r3, [pc, #212]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	3301      	adds	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	4b33      	ldr	r3, [pc, #204]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c78:	801a      	strh	r2, [r3, #0]
 8002c7a:	e002      	b.n	8002c82 <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8002c7c:	4b31      	ldr	r3, [pc, #196]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8002c82:	4b30      	ldr	r3, [pc, #192]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d94d      	bls.n	8002d26 <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = true;
 8002c8a:	4b2f      	ldr	r3, [pc, #188]	; (8002d48 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8002c90:	4b2a      	ldr	r3, [pc, #168]	; (8002d3c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002c96:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ca2:	3352      	adds	r3, #82	; 0x52
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002cae:	3318      	adds	r3, #24
 8002cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d103      	bne.n	8002cc0 <_ZN9LineTrace11isCrossLineEv+0xf0>
				storeCrossLineDistance();
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f001 f953 	bl	8003f64 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8002cbe:	e032      	b.n	8002d26 <_ZN9LineTrace11isCrossLineEv+0x156>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f001 f9bf 	bl	8004044 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				correction_check_cnt_ = 0;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ccc:	335c      	adds	r3, #92	; 0x5c
 8002cce:	2200      	movs	r2, #0
 8002cd0:	801a      	strh	r2, [r3, #0]
 8002cd2:	e028      	b.n	8002d26 <_ZN9LineTrace11isCrossLineEv+0x156>

			//led_.LR(-1, 1);
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8002cd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cd8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002d4c <_ZN9LineTrace11isCrossLineEv+0x17c>
 8002cdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce4:	dd0f      	ble.n	8002d06 <_ZN9LineTrace11isCrossLineEv+0x136>
 8002ce6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cea:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002d4c <_ZN9LineTrace11isCrossLineEv+0x17c>
 8002cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf6:	dd06      	ble.n	8002d06 <_ZN9LineTrace11isCrossLineEv+0x136>
			cnt++;
 8002cf8:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002d02:	801a      	strh	r2, [r3, #0]
 8002d04:	e002      	b.n	8002d0c <_ZN9LineTrace11isCrossLineEv+0x13c>
		}
		else{
			cnt = 0;
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8002d0c:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	2b09      	cmp	r3, #9
 8002d12:	d908      	bls.n	8002d26 <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = false;
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8002d1a:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	801a      	strh	r2, [r3, #0]
			//led_.LR(-1, 0);
		}

	}

	return flag;
 8002d26:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000268 	.word	0x20000268
 8002d38:	2000026c 	.word	0x2000026c
 8002d3c:	2000028f 	.word	0x2000028f
 8002d40:	44160000 	.word	0x44160000
 8002d44:	2000028c 	.word	0x2000028c
 8002d48:	2000028e 	.word	0x2000028e
 8002d4c:	43fa0000 	.word	0x43fa0000

08002d50 <_ZN9LineTrace18radius2VelocityFncEf>:

	return velocity;
}

float LineTrace::radius2VelocityFnc(float radius)
{
 8002d50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d54:	b086      	sub	sp, #24
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	ed87 0a00 	vstr	s0, [r7]
	float a =       2.162;
 8002d5e:	4b2b      	ldr	r3, [pc, #172]	; (8002e0c <_ZN9LineTrace18radius2VelocityFncEf+0xbc>)
 8002d60:	617b      	str	r3, [r7, #20]
	float b =   2.94e-05;
 8002d62:	4b2b      	ldr	r3, [pc, #172]	; (8002e10 <_ZN9LineTrace18radius2VelocityFncEf+0xc0>)
 8002d64:	613b      	str	r3, [r7, #16]
	float c =      -0.9206;
 8002d66:	4b2b      	ldr	r3, [pc, #172]	; (8002e14 <_ZN9LineTrace18radius2VelocityFncEf+0xc4>)
 8002d68:	60fb      	str	r3, [r7, #12]
	float d =   -0.001755;
 8002d6a:	4b2b      	ldr	r3, [pc, #172]	; (8002e18 <_ZN9LineTrace18radius2VelocityFncEf+0xc8>)
 8002d6c:	60bb      	str	r3, [r7, #8]

	return a * exp(b * radius) + c * exp(d * radius);
 8002d6e:	6978      	ldr	r0, [r7, #20]
 8002d70:	f7fd fc02 	bl	8000578 <__aeabi_f2d>
 8002d74:	4604      	mov	r4, r0
 8002d76:	460d      	mov	r5, r1
 8002d78:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d7c:	edd7 7a00 	vldr	s15, [r7]
 8002d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d84:	ee17 0a90 	vmov	r0, s15
 8002d88:	f7fd fbf6 	bl	8000578 <__aeabi_f2d>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	ec43 2b10 	vmov	d0, r2, r3
 8002d94:	f010 fd78 	bl	8013888 <exp>
 8002d98:	ec53 2b10 	vmov	r2, r3, d0
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	4629      	mov	r1, r5
 8002da0:	f7fd fc42 	bl	8000628 <__aeabi_dmul>
 8002da4:	4603      	mov	r3, r0
 8002da6:	460c      	mov	r4, r1
 8002da8:	4625      	mov	r5, r4
 8002daa:	461c      	mov	r4, r3
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f7fd fbe3 	bl	8000578 <__aeabi_f2d>
 8002db2:	4680      	mov	r8, r0
 8002db4:	4689      	mov	r9, r1
 8002db6:	ed97 7a02 	vldr	s14, [r7, #8]
 8002dba:	edd7 7a00 	vldr	s15, [r7]
 8002dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dc2:	ee17 0a90 	vmov	r0, s15
 8002dc6:	f7fd fbd7 	bl	8000578 <__aeabi_f2d>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	ec43 2b10 	vmov	d0, r2, r3
 8002dd2:	f010 fd59 	bl	8013888 <exp>
 8002dd6:	ec53 2b10 	vmov	r2, r3, d0
 8002dda:	4640      	mov	r0, r8
 8002ddc:	4649      	mov	r1, r9
 8002dde:	f7fd fc23 	bl	8000628 <__aeabi_dmul>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4620      	mov	r0, r4
 8002de8:	4629      	mov	r1, r5
 8002dea:	f7fd fa67 	bl	80002bc <__adddf3>
 8002dee:	4603      	mov	r3, r0
 8002df0:	460c      	mov	r4, r1
 8002df2:	4618      	mov	r0, r3
 8002df4:	4621      	mov	r1, r4
 8002df6:	f7fd ff0f 	bl	8000c18 <__aeabi_d2f>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	ee07 3a90 	vmov	s15, r3
}
 8002e00:	eeb0 0a67 	vmov.f32	s0, s15
 8002e04:	3718      	adds	r7, #24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e0c:	400a5e35 	.word	0x400a5e35
 8002e10:	37f6a005 	.word	0x37f6a005
 8002e14:	bf6bac71 	.word	0xbf6bac71
 8002e18:	bae60807 	.word	0xbae60807

08002e1c <_ZN9LineTrace20createVelocityTabeleEv>:

void LineTrace::createVelocityTabele()
{
 8002e1c:	b590      	push	{r4, r7, lr}
 8002e1e:	b08b      	sub	sp, #44	; 0x2c
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f001 fb14 	bl	8004456 <_ZN6Logger23getDistanceArrayPointerEv>
 8002e2e:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f001 fb1a 	bl	800446e <_ZN6Logger20getThetaArrayPointerEv>
 8002e3a:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	837b      	strh	r3, [r7, #26]
 8002e40:	8b7b      	ldrh	r3, [r7, #26]
 8002e42:	f241 726f 	movw	r2, #5999	; 0x176f
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d84b      	bhi.n	8002ee2 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8002e4a:	8b7b      	ldrh	r3, [r7, #26]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4413      	add	r3, r2
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002e56:	8b7b      	ldrh	r3, [r7, #26]
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002e62:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6e:	d101      	bne.n	8002e74 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8002e70:	4b30      	ldr	r3, [pc, #192]	; (8002f34 <_ZN9LineTrace20createVelocityTabeleEv+0x118>)
 8002e72:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002e74:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e78:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e7c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e80:	eeb0 0a66 	vmov.f32	s0, s13
 8002e84:	f7ff fc4c 	bl	8002720 <_ZSt3absf>
 8002e88:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002e8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e90:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002f38 <_ZN9LineTrace20createVelocityTabeleEv+0x11c>
 8002e94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9c:	db01      	blt.n	8002ea2 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8002e9e:	4b27      	ldr	r3, [pc, #156]	; (8002f3c <_ZN9LineTrace20createVelocityTabeleEv+0x120>)
 8002ea0:	617b      	str	r3, [r7, #20]

		//velocity_table_[i] = radius2Velocity(radius);
		velocity_table_[i] = radius2VelocityFnc(radius);
 8002ea2:	8b7c      	ldrh	r4, [r7, #26]
 8002ea4:	ed97 0a05 	vldr	s0, [r7, #20]
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff ff51 	bl	8002d50 <_ZN9LineTrace18radius2VelocityFncEf>
 8002eae:	eef0 7a40 	vmov.f32	s15, s0
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8002eb8:	3314      	adds	r3, #20
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8002ec4:	8b7b      	ldrh	r3, [r7, #26]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	441a      	add	r2, r3
 8002ecc:	8b7b      	ldrh	r3, [r7, #26]
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	3324      	adds	r3, #36	; 0x24
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002eda:	8b7b      	ldrh	r3, [r7, #26]
 8002edc:	3301      	adds	r3, #1
 8002ede:	837b      	strh	r3, [r7, #26]
 8002ee0:	e7ae      	b.n	8002e40 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}

	// ----- Decelerate processing -----//
	decelerateProcessing(max_dec_, p_distance);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ee8:	3358      	adds	r3, #88	; 0x58
 8002eea:	edd3 7a00 	vldr	s15, [r3]
 8002eee:	6939      	ldr	r1, [r7, #16]
 8002ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f933 	bl	8003160 <_ZN9LineTrace20decelerateProcessingEfPKf>
	// ----- Accelerate processing -----//
	accelerateProcessing(max_acc_, p_distance);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f00:	3354      	adds	r3, #84	; 0x54
 8002f02:	edd3 7a00 	vldr	s15, [r3]
 8002f06:	6939      	ldr	r1, [r7, #16]
 8002f08:	eeb0 0a67 	vmov.f32	s0, s15
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f9cf 	bl	80032b0 <_ZN9LineTrace20accelerateProcessingEfPKf>

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002f18:	3354      	adds	r3, #84	; 0x54
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	9200      	str	r2, [sp, #0]
 8002f1e:	f241 7270 	movw	r2, #6000	; 0x1770
 8002f22:	4907      	ldr	r1, [pc, #28]	; (8002f40 <_ZN9LineTrace20createVelocityTabeleEv+0x124>)
 8002f24:	4807      	ldr	r0, [pc, #28]	; (8002f44 <_ZN9LineTrace20createVelocityTabeleEv+0x128>)
 8002f26:	f7fe fb6d 	bl	8001604 <sd_write_array_float>

}
 8002f2a:	bf00      	nop
 8002f2c:	3724      	adds	r7, #36	; 0x24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd90      	pop	{r4, r7, pc}
 8002f32:	bf00      	nop
 8002f34:	3727c5ac 	.word	0x3727c5ac
 8002f38:	459c4000 	.word	0x459c4000
 8002f3c:	459c4000 	.word	0x459c4000
 8002f40:	080190bc 	.word	0x080190bc
 8002f44:	080190cc 	.word	0x080190cc

08002f48 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

//float mon_crossdis;
void LineTrace::createVelocityTabeleFromSD()
{
 8002f48:	b5b0      	push	{r4, r5, r7, lr}
 8002f4a:	b08c      	sub	sp, #48	; 0x30
 8002f4c:	af02      	add	r7, sp, #8
 8002f4e:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69d8      	ldr	r0, [r3, #28]
 8002f54:	4b78      	ldr	r3, [pc, #480]	; (8003138 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1f0>)
 8002f56:	4a79      	ldr	r2, [pc, #484]	; (800313c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1f4>)
 8002f58:	4979      	ldr	r1, [pc, #484]	; (8003140 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1f8>)
 8002f5a:	f001 fb04 	bl	8004566 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002f64:	331c      	adds	r3, #28
 8002f66:	2264      	movs	r2, #100	; 0x64
 8002f68:	4976      	ldr	r1, [pc, #472]	; (8003144 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1fc>)
 8002f6a:	4875      	ldr	r0, [pc, #468]	; (8003140 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1f8>)
 8002f6c:	f7fe fbb0 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8002f76:	33ac      	adds	r3, #172	; 0xac
 8002f78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f7c:	4972      	ldr	r1, [pc, #456]	; (8003148 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x200>)
 8002f7e:	4870      	ldr	r0, [pc, #448]	; (8003140 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1f8>)
 8002f80:	f7fe fba6 	bl	80016d0 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f001 fa64 	bl	8004456 <_ZN6Logger23getDistanceArrayPointerEv>
 8002f8e:	6178      	str	r0, [r7, #20]
	p_theta= logger_->getThetaArrayPointer();
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f001 fa6a 	bl	800446e <_ZN6Logger20getThetaArrayPointerEv>
 8002f9a:	6138      	str	r0, [r7, #16]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002fa0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002fa2:	f241 726f 	movw	r2, #5999	; 0x176f
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d84b      	bhi.n	8003042 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>
		temp_distance = p_distance[i];
 8002faa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60fb      	str	r3, [r7, #12]
		temp_theta = p_theta[i];
 8002fb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24

		if(temp_theta == 0) temp_theta = 0.00001;
 8002fc2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002fc6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fce:	d101      	bne.n	8002fd4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8002fd0:	4b5e      	ldr	r3, [pc, #376]	; (800314c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x204>)
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
		float radius = abs(temp_distance / temp_theta);
 8002fd4:	ed97 7a03 	vldr	s14, [r7, #12]
 8002fd8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002fdc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002fe0:	eeb0 0a66 	vmov.f32	s0, s13
 8002fe4:	f7ff fb9c 	bl	8002720 <_ZSt3absf>
 8002fe8:	ed87 0a07 	vstr	s0, [r7, #28]
		if(radius >= 5000) radius = 5000;
 8002fec:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ff0:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8003150 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x208>
 8002ff4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffc:	db01      	blt.n	8003002 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 8002ffe:	4b55      	ldr	r3, [pc, #340]	; (8003154 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x20c>)
 8003000:	61fb      	str	r3, [r7, #28]

		//velocity_table_[i] = radius2Velocity(radius);
		velocity_table_[i] = radius2VelocityFnc(radius);
 8003002:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8003004:	ed97 0a07 	vldr	s0, [r7, #28]
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff fea1 	bl	8002d50 <_ZN9LineTrace18radius2VelocityFncEf>
 800300e:	eef0 7a40 	vmov.f32	s15, s0
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8003018:	3314      	adds	r3, #20
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	3304      	adds	r3, #4
 8003020:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8003024:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	441a      	add	r2, r3
 800302c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	3324      	adds	r3, #36	; 0x24
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800303a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800303c:	3301      	adds	r3, #1
 800303e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003040:	e7ae      	b.n	8002fa0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	// ----- Decelerate processing -----//
	decelerateProcessing(max_dec_, p_distance);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003048:	3358      	adds	r3, #88	; 0x58
 800304a:	edd3 7a00 	vldr	s15, [r3]
 800304e:	6979      	ldr	r1, [r7, #20]
 8003050:	eeb0 0a67 	vmov.f32	s0, s15
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f883 	bl	8003160 <_ZN9LineTrace20decelerateProcessingEfPKf>
	// ----- Accelerate processing -----//
	accelerateProcessing(max_acc_, p_distance);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003060:	3354      	adds	r3, #84	; 0x54
 8003062:	edd3 7a00 	vldr	s15, [r3]
 8003066:	6979      	ldr	r1, [r7, #20]
 8003068:	eeb0 0a67 	vmov.f32	s0, s15
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f91f 	bl	80032b0 <_ZN9LineTrace20accelerateProcessingEfPKf>

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS - 1; i++){
 8003072:	2300      	movs	r3, #0
 8003074:	837b      	strh	r3, [r7, #26]
 8003076:	8b7b      	ldrh	r3, [r7, #26]
 8003078:	f241 726e 	movw	r2, #5998	; 0x176e
 800307c:	4293      	cmp	r3, r2
 800307e:	d842      	bhi.n	8003106 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1be>
		velocity_table_[i] = ((R_VELTABLE)*(velocity_table_[i + 1]) + (1.0 - (R_VELTABLE))* (velocity_table_[i]));
 8003080:	8b7b      	ldrh	r3, [r7, #26]
 8003082:	3301      	adds	r3, #1
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800308a:	3314      	adds	r3, #20
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	3304      	adds	r3, #4
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f7fd fa6f 	bl	8000578 <__aeabi_f2d>
 800309a:	a323      	add	r3, pc, #140	; (adr r3, 8003128 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1e0>)
 800309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a0:	f7fd fac2 	bl	8000628 <__aeabi_dmul>
 80030a4:	4603      	mov	r3, r0
 80030a6:	460c      	mov	r4, r1
 80030a8:	4625      	mov	r5, r4
 80030aa:	461c      	mov	r4, r3
 80030ac:	8b7b      	ldrh	r3, [r7, #26]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80030b4:	3314      	adds	r3, #20
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	3304      	adds	r3, #4
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fd fa5a 	bl	8000578 <__aeabi_f2d>
 80030c4:	a31a      	add	r3, pc, #104	; (adr r3, 8003130 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1e8>)
 80030c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ca:	f7fd faad 	bl	8000628 <__aeabi_dmul>
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	4620      	mov	r0, r4
 80030d4:	4629      	mov	r1, r5
 80030d6:	f7fd f8f1 	bl	80002bc <__adddf3>
 80030da:	4603      	mov	r3, r0
 80030dc:	460c      	mov	r4, r1
 80030de:	461a      	mov	r2, r3
 80030e0:	4623      	mov	r3, r4
 80030e2:	8b7c      	ldrh	r4, [r7, #26]
 80030e4:	4610      	mov	r0, r2
 80030e6:	4619      	mov	r1, r3
 80030e8:	f7fd fd96 	bl	8000c18 <__aeabi_d2f>
 80030ec:	4601      	mov	r1, r0
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 80030f4:	3314      	adds	r3, #20
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	3304      	adds	r3, #4
 80030fc:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS - 1; i++){
 80030fe:	8b7b      	ldrh	r3, [r7, #26]
 8003100:	3301      	adds	r3, #1
 8003102:	837b      	strh	r3, [r7, #26]
 8003104:	e7b7      	b.n	8003076 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x12e>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800310c:	3354      	adds	r3, #84	; 0x54
 800310e:	2200      	movs	r2, #0
 8003110:	9200      	str	r2, [sp, #0]
 8003112:	f241 7270 	movw	r2, #6000	; 0x1770
 8003116:	4910      	ldr	r1, [pc, #64]	; (8003158 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x210>)
 8003118:	4809      	ldr	r0, [pc, #36]	; (8003140 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1f8>)
 800311a:	f7fe fa73 	bl	8001604 <sd_write_array_float>

}
 800311e:	bf00      	nop
 8003120:	3728      	adds	r7, #40	; 0x28
 8003122:	46bd      	mov	sp, r7
 8003124:	bdb0      	pop	{r4, r5, r7, pc}
 8003126:	bf00      	nop
 8003128:	9999999a 	.word	0x9999999a
 800312c:	3fb99999 	.word	0x3fb99999
 8003130:	cccccccd 	.word	0xcccccccd
 8003134:	3feccccc 	.word	0x3feccccc
 8003138:	080190d8 	.word	0x080190d8
 800313c:	080190e4 	.word	0x080190e4
 8003140:	080190cc 	.word	0x080190cc
 8003144:	080190f4 	.word	0x080190f4
 8003148:	08019104 	.word	0x08019104
 800314c:	3727c5ac 	.word	0x3727c5ac
 8003150:	459c4000 	.word	0x459c4000
 8003154:	459c4000 	.word	0x459c4000
 8003158:	080190bc 	.word	0x080190bc
 800315c:	00000000 	.word	0x00000000

08003160 <_ZN9LineTrace20decelerateProcessingEfPKf>:

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003160:	b5b0      	push	{r4, r5, r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	ed87 0a02 	vstr	s0, [r7, #8]
 800316c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800316e:	f241 736f 	movw	r3, #5999	; 0x176f
 8003172:	83fb      	strh	r3, [r7, #30]
 8003174:	8bfb      	ldrh	r3, [r7, #30]
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 8091 	beq.w	800329e <_ZN9LineTrace20decelerateProcessingEfPKf+0x13e>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 800317c:	8bfb      	ldrh	r3, [r7, #30]
 800317e:	3b01      	subs	r3, #1
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003186:	3314      	adds	r3, #20
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	3304      	adds	r3, #4
 800318e:	ed93 7a00 	vldr	s14, [r3]
 8003192:	8bfb      	ldrh	r3, [r7, #30]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800319a:	3314      	adds	r3, #20
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	3304      	adds	r3, #4
 80031a2:	edd3 7a00 	vldr	s15, [r3]
 80031a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031aa:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80031ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80031b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ba:	dd6c      	ble.n	8003296 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
			float t = p_distance[i]*1e-3 / v_diff;
 80031bc:	8bfb      	ldrh	r3, [r7, #30]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	4413      	add	r3, r2
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fd f9d6 	bl	8000578 <__aeabi_f2d>
 80031cc:	a336      	add	r3, pc, #216	; (adr r3, 80032a8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x148>)
 80031ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d2:	f7fd fa29 	bl	8000628 <__aeabi_dmul>
 80031d6:	4603      	mov	r3, r0
 80031d8:	460c      	mov	r4, r1
 80031da:	4625      	mov	r5, r4
 80031dc:	461c      	mov	r4, r3
 80031de:	69b8      	ldr	r0, [r7, #24]
 80031e0:	f7fd f9ca 	bl	8000578 <__aeabi_f2d>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4620      	mov	r0, r4
 80031ea:	4629      	mov	r1, r5
 80031ec:	f7fd fb46 	bl	800087c <__aeabi_ddiv>
 80031f0:	4603      	mov	r3, r0
 80031f2:	460c      	mov	r4, r1
 80031f4:	4618      	mov	r0, r3
 80031f6:	4621      	mov	r1, r4
 80031f8:	f7fd fd0e 	bl	8000c18 <__aeabi_d2f>
 80031fc:	4603      	mov	r3, r0
 80031fe:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003200:	edd7 6a06 	vldr	s13, [r7, #24]
 8003204:	ed97 7a05 	vldr	s14, [r7, #20]
 8003208:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800320c:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003210:	ed97 7a04 	vldr	s14, [r7, #16]
 8003214:	edd7 7a02 	vldr	s15, [r7, #8]
 8003218:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800321c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003220:	dd39      	ble.n	8003296 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003222:	8bfb      	ldrh	r3, [r7, #30]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800322a:	3314      	adds	r3, #20
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	3304      	adds	r3, #4
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7fd f99f 	bl	8000578 <__aeabi_f2d>
 800323a:	4604      	mov	r4, r0
 800323c:	460d      	mov	r5, r1
 800323e:	8bfb      	ldrh	r3, [r7, #30]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	4413      	add	r3, r2
 8003246:	ed93 7a00 	vldr	s14, [r3]
 800324a:	edd7 7a02 	vldr	s15, [r7, #8]
 800324e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003252:	ee17 0a90 	vmov	r0, s15
 8003256:	f7fd f98f 	bl	8000578 <__aeabi_f2d>
 800325a:	a313      	add	r3, pc, #76	; (adr r3, 80032a8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x148>)
 800325c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003260:	f7fd f9e2 	bl	8000628 <__aeabi_dmul>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4620      	mov	r0, r4
 800326a:	4629      	mov	r1, r5
 800326c:	f7fd f826 	bl	80002bc <__adddf3>
 8003270:	4603      	mov	r3, r0
 8003272:	460c      	mov	r4, r1
 8003274:	4619      	mov	r1, r3
 8003276:	4622      	mov	r2, r4
 8003278:	8bfb      	ldrh	r3, [r7, #30]
 800327a:	1e5c      	subs	r4, r3, #1
 800327c:	4608      	mov	r0, r1
 800327e:	4611      	mov	r1, r2
 8003280:	f7fd fcca 	bl	8000c18 <__aeabi_d2f>
 8003284:	4601      	mov	r1, r0
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 800328c:	3314      	adds	r3, #20
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	3304      	adds	r3, #4
 8003294:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003296:	8bfb      	ldrh	r3, [r7, #30]
 8003298:	3b01      	subs	r3, #1
 800329a:	83fb      	strh	r3, [r7, #30]
 800329c:	e76a      	b.n	8003174 <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 800329e:	bf00      	nop
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bdb0      	pop	{r4, r5, r7, pc}
 80032a6:	bf00      	nop
 80032a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80032ac:	3f50624d 	.word	0x3f50624d

080032b0 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 80032b0:	b5b0      	push	{r4, r5, r7, lr}
 80032b2:	b088      	sub	sp, #32
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80032bc:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80032be:	2300      	movs	r3, #0
 80032c0:	83fb      	strh	r3, [r7, #30]
 80032c2:	8bfb      	ldrh	r3, [r7, #30]
 80032c4:	f241 726f 	movw	r2, #5999	; 0x176f
 80032c8:	4293      	cmp	r3, r2
 80032ca:	f200 8091 	bhi.w	80033f0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 80032ce:	8bfb      	ldrh	r3, [r7, #30]
 80032d0:	3301      	adds	r3, #1
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80032d8:	3314      	adds	r3, #20
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	3304      	adds	r3, #4
 80032e0:	ed93 7a00 	vldr	s14, [r3]
 80032e4:	8bfb      	ldrh	r3, [r7, #30]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80032ec:	3314      	adds	r3, #20
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	3304      	adds	r3, #4
 80032f4:	edd3 7a00 	vldr	s15, [r3]
 80032f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032fc:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003300:	edd7 7a06 	vldr	s15, [r7, #24]
 8003304:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800330c:	dd6c      	ble.n	80033e8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
			float t = p_distance[i]*1e-3 / v_diff;
 800330e:	8bfb      	ldrh	r3, [r7, #30]
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	4413      	add	r3, r2
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f7fd f92d 	bl	8000578 <__aeabi_f2d>
 800331e:	a336      	add	r3, pc, #216	; (adr r3, 80033f8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x148>)
 8003320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003324:	f7fd f980 	bl	8000628 <__aeabi_dmul>
 8003328:	4603      	mov	r3, r0
 800332a:	460c      	mov	r4, r1
 800332c:	4625      	mov	r5, r4
 800332e:	461c      	mov	r4, r3
 8003330:	69b8      	ldr	r0, [r7, #24]
 8003332:	f7fd f921 	bl	8000578 <__aeabi_f2d>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	4620      	mov	r0, r4
 800333c:	4629      	mov	r1, r5
 800333e:	f7fd fa9d 	bl	800087c <__aeabi_ddiv>
 8003342:	4603      	mov	r3, r0
 8003344:	460c      	mov	r4, r1
 8003346:	4618      	mov	r0, r3
 8003348:	4621      	mov	r1, r4
 800334a:	f7fd fc65 	bl	8000c18 <__aeabi_d2f>
 800334e:	4603      	mov	r3, r0
 8003350:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003352:	edd7 6a06 	vldr	s13, [r7, #24]
 8003356:	ed97 7a05 	vldr	s14, [r7, #20]
 800335a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800335e:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003362:	ed97 7a04 	vldr	s14, [r7, #16]
 8003366:	edd7 7a02 	vldr	s15, [r7, #8]
 800336a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800336e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003372:	dd39      	ble.n	80033e8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003374:	8bfb      	ldrh	r3, [r7, #30]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800337c:	3314      	adds	r3, #20
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	3304      	adds	r3, #4
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd f8f6 	bl	8000578 <__aeabi_f2d>
 800338c:	4604      	mov	r4, r0
 800338e:	460d      	mov	r5, r1
 8003390:	8bfb      	ldrh	r3, [r7, #30]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	4413      	add	r3, r2
 8003398:	ed93 7a00 	vldr	s14, [r3]
 800339c:	edd7 7a02 	vldr	s15, [r7, #8]
 80033a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a4:	ee17 0a90 	vmov	r0, s15
 80033a8:	f7fd f8e6 	bl	8000578 <__aeabi_f2d>
 80033ac:	a312      	add	r3, pc, #72	; (adr r3, 80033f8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x148>)
 80033ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b2:	f7fd f939 	bl	8000628 <__aeabi_dmul>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	4620      	mov	r0, r4
 80033bc:	4629      	mov	r1, r5
 80033be:	f7fc ff7d 	bl	80002bc <__adddf3>
 80033c2:	4603      	mov	r3, r0
 80033c4:	460c      	mov	r4, r1
 80033c6:	4619      	mov	r1, r3
 80033c8:	4622      	mov	r2, r4
 80033ca:	8bfb      	ldrh	r3, [r7, #30]
 80033cc:	1c5c      	adds	r4, r3, #1
 80033ce:	4608      	mov	r0, r1
 80033d0:	4611      	mov	r1, r2
 80033d2:	f7fd fc21 	bl	8000c18 <__aeabi_d2f>
 80033d6:	4601      	mov	r1, r0
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 80033de:	3314      	adds	r3, #20
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	3304      	adds	r3, #4
 80033e6:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80033e8:	8bfb      	ldrh	r3, [r7, #30]
 80033ea:	3301      	adds	r3, #1
 80033ec:	83fb      	strh	r3, [r7, #30]
 80033ee:	e768      	b.n	80032c2 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 80033f0:	bf00      	nop
 80033f2:	3720      	adds	r7, #32
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bdb0      	pop	{r4, r5, r7, pc}
 80033f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80033fc:	3f50624d 	.word	0x3f50624d

08003400 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800340e:	3314      	adds	r3, #20
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 8087 	beq.w	8003526 <_ZN9LineTrace20updateTargetVelocityEv+0x126>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	4618      	mov	r0, r3
 800341e:	f7fe f825 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8003422:	eeb0 7a40 	vmov.f32	s14, s0
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800342c:	3350      	adds	r3, #80	; 0x50
 800342e:	edd3 7a00 	vldr	s15, [r3]
 8003432:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343a:	bfac      	ite	ge
 800343c:	2301      	movge	r3, #1
 800343e:	2300      	movlt	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d025      	beq.n	8003492 <_ZN9LineTrace20updateTargetVelocityEv+0x92>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800344c:	3350      	adds	r3, #80	; 0x50
 800344e:	ed93 7a00 	vldr	s14, [r3]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003458:	3316      	adds	r3, #22
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	3324      	adds	r3, #36	; 0x24
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	edd3 7a00 	vldr	s15, [r3]
 8003468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003472:	3350      	adds	r3, #80	; 0x50
 8003474:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800347e:	3316      	adds	r3, #22
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	3301      	adds	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800348c:	3316      	adds	r3, #22
 800348e:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 8003490:	e7c2      	b.n	8003418 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003498:	3316      	adds	r3, #22
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	f241 726f 	movw	r2, #5999	; 0x176f
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d906      	bls.n	80034b2 <_ZN9LineTrace20updateTargetVelocityEv+0xb2>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034aa:	3316      	adds	r3, #22
 80034ac:	f241 726f 	movw	r2, #5999	; 0x176f
 80034b0:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80034b8:	3350      	adds	r3, #80	; 0x50
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a1c      	ldr	r2, [pc, #112]	; (8003530 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 80034be:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fd ffd1 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 80034ca:	eef0 7a40 	vmov.f32	s15, s0
 80034ce:	4b19      	ldr	r3, [pc, #100]	; (8003534 <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 80034d0:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034da:	3316      	adds	r3, #22
 80034dc:	881a      	ldrh	r2, [r3, #0]
 80034de:	4b16      	ldr	r3, [pc, #88]	; (8003538 <_ZN9LineTrace20updateTargetVelocityEv+0x138>)
 80034e0:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034e8:	3316      	adds	r3, #22
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80034f2:	3314      	adds	r3, #20
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	3304      	adds	r3, #4
 80034fa:	edd3 7a00 	vldr	s15, [r3]
 80034fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f985 	bl	8003812 <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800350e:	3316      	adds	r3, #22
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003518:	3314      	adds	r3, #20
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	3304      	adds	r3, #4
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a06      	ldr	r2, [pc, #24]	; (800353c <_ZN9LineTrace20updateTargetVelocityEv+0x13c>)
 8003524:	6013      	str	r3, [r2, #0]

	}
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000270 	.word	0x20000270
 8003534:	20000274 	.word	0x20000274
 8003538:	20000278 	.word	0x20000278
 800353c:	2000027c 	.word	0x2000027c

08003540 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003548:	2300      	movs	r3, #0
 800354a:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	4618      	mov	r0, r3
 8003552:	f7fd ff7c 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8003556:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	4618      	mov	r0, r3
 8003560:	f001 fadd 	bl	8004b1e <_ZN8Odometry8getThetaEv>
 8003564:	ec54 3b10 	vmov	r3, r4, d0
 8003568:	4618      	mov	r0, r3
 800356a:	4621      	mov	r1, r4
 800356c:	f7fd fb54 	bl	8000c18 <__aeabi_d2f>
 8003570:	4603      	mov	r3, r0
 8003572:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003574:	edd7 7a04 	vldr	s15, [r7, #16]
 8003578:	eef5 7a40 	vcmp.f32	s15, #0.0
 800357c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003580:	d101      	bne.n	8003586 <_ZN9LineTrace8isStableEv+0x46>
 8003582:	4b23      	ldr	r3, [pc, #140]	; (8003610 <_ZN9LineTrace8isStableEv+0xd0>)
 8003584:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 8003586:	ed97 7a02 	vldr	s14, [r7, #8]
 800358a:	edd7 7a04 	vldr	s15, [r7, #16]
 800358e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003592:	eeb0 0a66 	vmov.f32	s0, s13
 8003596:	f7ff f8c3 	bl	8002720 <_ZSt3absf>
 800359a:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 800359e:	edd7 7a03 	vldr	s15, [r7, #12]
 80035a2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003614 <_ZN9LineTrace8isStableEv+0xd4>
 80035a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ae:	db01      	blt.n	80035b4 <_ZN9LineTrace8isStableEv+0x74>
 80035b0:	4b19      	ldr	r3, [pc, #100]	; (8003618 <_ZN9LineTrace8isStableEv+0xd8>)
 80035b2:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80035ba:	3352      	adds	r3, #82	; 0x52
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d008      	beq.n	80035d4 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 80035c2:	4b16      	ldr	r3, [pc, #88]	; (800361c <_ZN9LineTrace8isStableEv+0xdc>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80035ce:	3352      	adds	r3, #82	; 0x52
 80035d0:	2200      	movs	r2, #0
 80035d2:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){ //150
 80035d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80035d8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003620 <_ZN9LineTrace8isStableEv+0xe0>
 80035dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e4:	db06      	blt.n	80035f4 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 80035e6:	4b0d      	ldr	r3, [pc, #52]	; (800361c <_ZN9LineTrace8isStableEv+0xdc>)
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	3301      	adds	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	4b0b      	ldr	r3, [pc, #44]	; (800361c <_ZN9LineTrace8isStableEv+0xdc>)
 80035f0:	801a      	strh	r2, [r3, #0]
 80035f2:	e002      	b.n	80035fa <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 80035f4:	4b09      	ldr	r3, [pc, #36]	; (800361c <_ZN9LineTrace8isStableEv+0xdc>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 23){ //230mm
 80035fa:	4b08      	ldr	r3, [pc, #32]	; (800361c <_ZN9LineTrace8isStableEv+0xdc>)
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	2b16      	cmp	r3, #22
 8003600:	d901      	bls.n	8003606 <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 8003602:	2301      	movs	r3, #1
 8003604:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003606:	7dfb      	ldrb	r3, [r7, #23]
}
 8003608:	4618      	mov	r0, r3
 800360a:	371c      	adds	r7, #28
 800360c:	46bd      	mov	sp, r7
 800360e:	bd90      	pop	{r4, r7, pc}
 8003610:	3727c5ac 	.word	0x3727c5ac
 8003614:	459c4000 	.word	0x459c4000
 8003618:	459c4000 	.word	0x459c4000
 800361c:	20000290 	.word	0x20000290
 8003620:	44fa0000 	.word	0x44fa0000

08003624 <_ZN9LineTrace4initEv>:

// -------public---------- //
void LineTrace::init()
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08c      	sub	sp, #48	; 0x30
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 800362c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003630:	2201      	movs	r2, #1
 8003632:	4942      	ldr	r1, [pc, #264]	; (800373c <_ZN9LineTrace4initEv+0x118>)
 8003634:	4842      	ldr	r0, [pc, #264]	; (8003740 <_ZN9LineTrace4initEv+0x11c>)
 8003636:	f7fe f84b 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 800363a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800363e:	2201      	movs	r2, #1
 8003640:	4940      	ldr	r1, [pc, #256]	; (8003744 <_ZN9LineTrace4initEv+0x120>)
 8003642:	483f      	ldr	r0, [pc, #252]	; (8003740 <_ZN9LineTrace4initEv+0x11c>)
 8003644:	f7fe f844 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800364c:	2201      	movs	r2, #1
 800364e:	493e      	ldr	r1, [pc, #248]	; (8003748 <_ZN9LineTrace4initEv+0x124>)
 8003650:	483b      	ldr	r0, [pc, #236]	; (8003740 <_ZN9LineTrace4initEv+0x11c>)
 8003652:	f7fe f83d 	bl	80016d0 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003656:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800365a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800365e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003662:	eeb0 1a66 	vmov.f32	s2, s13
 8003666:	eef0 0a47 	vmov.f32	s1, s14
 800366a:	eeb0 0a67 	vmov.f32	s0, s15
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f87a 	bl	8003768 <_ZN9LineTrace7setGainEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003674:	f107 0320 	add.w	r3, r7, #32
 8003678:	2201      	movs	r2, #1
 800367a:	4934      	ldr	r1, [pc, #208]	; (800374c <_ZN9LineTrace4initEv+0x128>)
 800367c:	4830      	ldr	r0, [pc, #192]	; (8003740 <_ZN9LineTrace4initEv+0x11c>)
 800367e:	f7fe f827 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003682:	f107 031c 	add.w	r3, r7, #28
 8003686:	2201      	movs	r2, #1
 8003688:	4931      	ldr	r1, [pc, #196]	; (8003750 <_ZN9LineTrace4initEv+0x12c>)
 800368a:	482d      	ldr	r0, [pc, #180]	; (8003740 <_ZN9LineTrace4initEv+0x11c>)
 800368c:	f7fe f820 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003690:	f107 0318 	add.w	r3, r7, #24
 8003694:	2201      	movs	r2, #1
 8003696:	492f      	ldr	r1, [pc, #188]	; (8003754 <_ZN9LineTrace4initEv+0x130>)
 8003698:	4829      	ldr	r0, [pc, #164]	; (8003740 <_ZN9LineTrace4initEv+0x11c>)
 800369a:	f7fe f819 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 800369e:	f107 0314 	add.w	r3, r7, #20
 80036a2:	2201      	movs	r2, #1
 80036a4:	492c      	ldr	r1, [pc, #176]	; (8003758 <_ZN9LineTrace4initEv+0x134>)
 80036a6:	4826      	ldr	r0, [pc, #152]	; (8003740 <_ZN9LineTrace4initEv+0x11c>)
 80036a8:	f7fe f812 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 80036ac:	f107 0310 	add.w	r3, r7, #16
 80036b0:	2201      	movs	r2, #1
 80036b2:	492a      	ldr	r1, [pc, #168]	; (800375c <_ZN9LineTrace4initEv+0x138>)
 80036b4:	4822      	ldr	r0, [pc, #136]	; (8003740 <_ZN9LineTrace4initEv+0x11c>)
 80036b6:	f7fe f80b 	bl	80016d0 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 80036ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80036be:	eeb0 0a67 	vmov.f32	s0, s15
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f8a5 	bl	8003812 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 80036c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80036cc:	eeb0 0a67 	vmov.f32	s0, s15
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f8ad 	bl	8003830 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 80036d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80036da:	eeb0 0a67 	vmov.f32	s0, s15
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f8b5 	bl	800384e <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 80036e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80036e8:	eeb0 0a67 	vmov.f32	s0, s15
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f8be 	bl	800386e <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 80036f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80036f6:	eeb0 0a67 	vmov.f32	s0, s15
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f8c7 	bl	800388e <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003700:	f107 030c 	add.w	r3, r7, #12
 8003704:	2201      	movs	r2, #1
 8003706:	4916      	ldr	r1, [pc, #88]	; (8003760 <_ZN9LineTrace4initEv+0x13c>)
 8003708:	480d      	ldr	r0, [pc, #52]	; (8003740 <_ZN9LineTrace4initEv+0x11c>)
 800370a:	f7fd ffe1 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 800370e:	f107 0308 	add.w	r3, r7, #8
 8003712:	2201      	movs	r2, #1
 8003714:	4913      	ldr	r1, [pc, #76]	; (8003764 <_ZN9LineTrace4initEv+0x140>)
 8003716:	480a      	ldr	r0, [pc, #40]	; (8003740 <_ZN9LineTrace4initEv+0x11c>)
 8003718:	f7fd ffda 	bl	80016d0 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 800371c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003720:	ed97 7a02 	vldr	s14, [r7, #8]
 8003724:	eef0 0a47 	vmov.f32	s1, s14
 8003728:	eeb0 0a67 	vmov.f32	s0, s15
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f90c 	bl	800394a <_ZN9LineTrace12setMaxAccDecEff>
}
 8003732:	bf00      	nop
 8003734:	3730      	adds	r7, #48	; 0x30
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	08019110 	.word	0x08019110
 8003740:	08019118 	.word	0x08019118
 8003744:	08019120 	.word	0x08019120
 8003748:	08019128 	.word	0x08019128
 800374c:	08019130 	.word	0x08019130
 8003750:	0801913c 	.word	0x0801913c
 8003754:	08019148 	.word	0x08019148
 8003758:	08019154 	.word	0x08019154
 800375c:	08019160 	.word	0x08019160
 8003760:	0801916c 	.word	0x0801916c
 8003764:	08019174 	.word	0x08019174

08003768 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	ed87 0a02 	vstr	s0, [r7, #8]
 8003774:	edc7 0a01 	vstr	s1, [r7, #4]
 8003778:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	625a      	str	r2, [r3, #36]	; 0x24
	ki_ = ki;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	62da      	str	r2, [r3, #44]	; 0x2c
	kd_ = kd;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800378e:	bf00      	nop
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
	return kp_;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	ee07 3a90 	vmov	s15, r3
}
 80037aa:	eeb0 0a67 	vmov.f32	s0, s15
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
	return ki_;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	ee07 3a90 	vmov	s15, r3
}
 80037c8:	eeb0 0a67 	vmov.f32	s0, s15
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
	return kd_;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e2:	ee07 3a90 	vmov	s15, r3
}
 80037e6:	eeb0 0a67 	vmov.f32	s0, s15
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <_ZN9LineTrace14setNormalRatioEf>:
{
	return kd_velo_;
}

void LineTrace::setNormalRatio(float ratio)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
 800381a:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <_ZN9LineTrace17getTargetVelocityEv>:
float LineTrace::getTargetVelocity()
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ba:	ee07 3a90 	vmov	s15, r3
}
 80038be:	eeb0 0a67 	vmov.f32	s0, s15
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038d8:	ee07 3a90 	vmov	s15, r3
}
 80038dc:	eeb0 0a67 	vmov.f32	s0, s15
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 80038ea:	b480      	push	{r7}
 80038ec:	b083      	sub	sp, #12
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038f8:	ee07 3a90 	vmov	s15, r3
}
 80038fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003918:	ee07 3a90 	vmov	s15, r3
}
 800391c:	eeb0 0a67 	vmov.f32	s0, s15
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003938:	ee07 3a90 	vmov	s15, r3
}
 800393c:	eeb0 0a67 	vmov.f32	s0, s15
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <_ZN9LineTrace12setMaxAccDecEff>:
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 800394a:	b480      	push	{r7}
 800394c:	b085      	sub	sp, #20
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	ed87 0a02 	vstr	s0, [r7, #8]
 8003956:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003960:	3354      	adds	r3, #84	; 0x54
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800396c:	3358      	adds	r3, #88	; 0x58
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	601a      	str	r2, [r3, #0]
}
 8003972:	bf00      	nop
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800398c:	3354      	adds	r3, #84	; 0x54
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	ee07 3a90 	vmov	s15, r3
}
 8003994:	eeb0 0a67 	vmov.f32	s0, s15
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
	return max_dec_;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80039b0:	3358      	adds	r3, #88	; 0x58
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	ee07 3a90 	vmov	s15, r3
}
 80039b8:	eeb0 0a67 	vmov.f32	s0, s15
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
	...

080039c8 <_ZN9LineTrace4flipEv>:
void LineTrace::flip()
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 80fc 	beq.w	8003bd4 <_ZN9LineTrace4flipEv+0x20c>
		// ---- line following processing -----//
		pidTrace();
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff f83f 	bl	8002a60 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();


		if(isTargetDistance(10) == true){
 80039e2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fa9a 	bl	8003f20 <_ZN9LineTrace16isTargetDistanceEf>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d028      	beq.n	8003a44 <_ZN9LineTrace4flipEv+0x7c>
			// ---- Store Logs ------//
			storeLogs();
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f9f8 	bl	8003de8 <_ZN9LineTrace9storeLogsEv>

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){ // Stabilizing and side sensor is black
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff fda1 	bl	8003540 <_ZN9LineTrace8isStableEv>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00c      	beq.n	8003a1e <_ZN9LineTrace4flipEv+0x56>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f001 fb27 	bl	800505c <_ZN10SideSensor9getStatusEv>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	43db      	mvns	r3, r3
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d101      	bne.n	8003a1e <_ZN9LineTrace4flipEv+0x56>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <_ZN9LineTrace4flipEv+0x58>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <_ZN9LineTrace4flipEv+0x68>
				stable_flag_ = true;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a2a:	3351      	adds	r3, #81	; 0x51
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fd fd37 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f001 f87e 	bl	8004b40 <_ZN8Odometry13clearPotitionEv>
		}

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff fcdb 	bl	8003400 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff f8c0 	bl	8002bd0 <_ZN9LineTrace11isCrossLineEv>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <_ZN9LineTrace4flipEv+0xa2>
			side_sensor_->enableIgnore();
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f001 fb26 	bl	80050ac <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7fd fd4a 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f001 fb36 	bl	80050e0 <_ZN10SideSensor13getIgnoreFlagEv>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00f      	beq.n	8003a9a <_ZN9LineTrace4flipEv+0xd2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fd fd2e 	bl	80014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003a84:	eeb0 7a40 	vmov.f32	s14, s0
 8003a88:	eddf 7a54 	vldr	s15, [pc, #336]	; 8003bdc <_ZN9LineTrace4flipEv+0x214>
 8003a8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a94:	db01      	blt.n	8003a9a <_ZN9LineTrace4flipEv+0xd2>
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <_ZN9LineTrace4flipEv+0xd4>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d004      	beq.n	8003aaa <_ZN9LineTrace4flipEv+0xe2>
			side_sensor_->disableIgnore();
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f001 fb0e 	bl	80050c6 <_ZN10SideSensor13disableIgnoreEv>

		}

		// ------- Store side line distance ------//
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x02) == 0x02){ //stabilizing and side sensor is white
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ab0:	3351      	adds	r3, #81	; 0x51
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00b      	beq.n	8003ad0 <_ZN9LineTrace4flipEv+0x108>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f001 facd 	bl	800505c <_ZN10SideSensor9getStatusEv>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d101      	bne.n	8003ad0 <_ZN9LineTrace4flipEv+0x108>
 8003acc:	2301      	movs	r3, #1
 8003ace:	e000      	b.n	8003ad2 <_ZN9LineTrace4flipEv+0x10a>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d020      	beq.n	8003b18 <_ZN9LineTrace4flipEv+0x150>
			//storeSideLineDistance();
			if(mode_selector_ == FIRST_RUNNING){
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003adc:	3318      	adds	r3, #24
 8003ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d103      	bne.n	8003aee <_ZN9LineTrace4flipEv+0x126>
				storeSideLineDistance();
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fa73 	bl	8003fd2 <_ZN9LineTrace21storeSideLineDistanceEv>
 8003aec:	e008      	b.n	8003b00 <_ZN9LineTrace4flipEv+0x138>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fade 	bl	80040b0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				correction_check_cnt_ = 0;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003afa:	335c      	adds	r3, #92	; 0x5c
 8003afc:	2200      	movs	r2, #0
 8003afe:	801a      	strh	r2, [r3, #0]
			}

			stable_flag_ = false;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b06:	3351      	adds	r3, #81	; 0x51
 8003b08:	2200      	movs	r2, #0
 8003b0a:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b12:	3352      	adds	r3, #82	; 0x52
 8003b14:	2201      	movs	r2, #1
 8003b16:	701a      	strb	r2, [r3, #0]
		}

		if(stable_flag_ == true) led_.LR(-1, 1);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b1e:	3351      	adds	r3, #81	; 0x51
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d008      	beq.n	8003b38 <_ZN9LineTrace4flipEv+0x170>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	330c      	adds	r3, #12
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fe fa9f 	bl	8002074 <_ZN3LED2LREaa>
 8003b36:	e007      	b.n	8003b48 <_ZN9LineTrace4flipEv+0x180>
		else led_.LR(-1, 0);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	330c      	adds	r3, #12
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f04f 31ff 	mov.w	r1, #4294967295
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fe fa96 	bl	8002074 <_ZN3LED2LREaa>

		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fe fd91 	bl	8002674 <_ZN10LineSensor13emergencyStopEv>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <_ZN9LineTrace4flipEv+0x1a2>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	eddf 0a20 	vldr	s1, [pc, #128]	; 8003be0 <_ZN9LineTrace4flipEv+0x218>
 8003b60:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8003be0 <_ZN9LineTrace4flipEv+0x218>
 8003b64:	4618      	mov	r0, r3
 8003b66:	f001 fd0b 	bl	8005580 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}

		correction_check_cnt_++;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b70:	335c      	adds	r3, #92	; 0x5c
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	3301      	adds	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b7e:	335c      	adds	r3, #92	; 0x5c
 8003b80:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b88:	335c      	adds	r3, #92	; 0x5c
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d906      	bls.n	8003ba2 <_ZN9LineTrace4flipEv+0x1da>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b9a:	335c      	adds	r3, #92	; 0x5c
 8003b9c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ba0:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 500) led_.LR(-1, 1);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ba8:	335c      	adds	r3, #92	; 0x5c
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003bb0:	d808      	bhi.n	8003bc4 <_ZN9LineTrace4flipEv+0x1fc>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	330c      	adds	r3, #12
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fe fa59 	bl	8002074 <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 8003bc2:	e007      	b.n	8003bd4 <_ZN9LineTrace4flipEv+0x20c>
		else led_.LR(-1, 0);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	330c      	adds	r3, #12
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f04f 31ff 	mov.w	r1, #4294967295
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fe fa50 	bl	8002074 <_ZN3LED2LREaa>
}
 8003bd4:	bf00      	nop
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	43480000 	.word	0x43480000
 8003be0:	00000000 	.word	0x00000000

08003be4 <_ZN9LineTrace5startEv>:
		odometry_->clearPotition();
	}
}

void LineTrace::start()
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	i_reset_flag_ = true;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	velocity_ctrl_->start();
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f001 fd16 	bl	8005632 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f001 fa3e 	bl	800508c <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c16:	334c      	adds	r3, #76	; 0x4c
 8003c18:	2200      	movs	r2, #0
 8003c1a:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c22:	334e      	adds	r3, #78	; 0x4e
 8003c24:	2200      	movs	r2, #0
 8003c26:	801a      	strh	r2, [r3, #0]
}
 8003c28:	bf00      	nop
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	velocity_ctrl_->stop();
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f001 fd07 	bl	8005658 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	330c      	adds	r3, #12
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f04f 31ff 	mov.w	r1, #4294967295
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fe fa0d 	bl	8002074 <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003c60:	3318      	adds	r3, #24
 8003c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d107      	bne.n	8003c7a <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69d8      	ldr	r0, [r3, #28]
 8003c6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ce4 <_ZN9LineTrace4stopEv+0xb4>)
 8003c70:	4a1d      	ldr	r2, [pc, #116]	; (8003ce8 <_ZN9LineTrace4stopEv+0xb8>)
 8003c72:	491e      	ldr	r1, [pc, #120]	; (8003cec <_ZN9LineTrace4stopEv+0xbc>)
 8003c74:	f000 fc30 	bl	80044d8 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 8003c78:	e006      	b.n	8003c88 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69d8      	ldr	r0, [r3, #28]
 8003c7e:	4b1c      	ldr	r3, [pc, #112]	; (8003cf0 <_ZN9LineTrace4stopEv+0xc0>)
 8003c80:	4a1c      	ldr	r2, [pc, #112]	; (8003cf4 <_ZN9LineTrace4stopEv+0xc4>)
 8003c82:	491a      	ldr	r1, [pc, #104]	; (8003cec <_ZN9LineTrace4stopEv+0xbc>)
 8003c84:	f000 fc4b 	bl	800451e <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003c8e:	331c      	adds	r3, #28
 8003c90:	2200      	movs	r2, #0
 8003c92:	9200      	str	r2, [sp, #0]
 8003c94:	2264      	movs	r2, #100	; 0x64
 8003c96:	4918      	ldr	r1, [pc, #96]	; (8003cf8 <_ZN9LineTrace4stopEv+0xc8>)
 8003c98:	4814      	ldr	r0, [pc, #80]	; (8003cec <_ZN9LineTrace4stopEv+0xbc>)
 8003c9a:	f7fd fcb3 	bl	8001604 <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8003ca4:	33ac      	adds	r3, #172	; 0xac
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	9200      	str	r2, [sp, #0]
 8003caa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cae:	4913      	ldr	r1, [pc, #76]	; (8003cfc <_ZN9LineTrace4stopEv+0xcc>)
 8003cb0:	480e      	ldr	r0, [pc, #56]	; (8003cec <_ZN9LineTrace4stopEv+0xbc>)
 8003cb2:	f7fd fca7 	bl	8001604 <sd_write_array_float>

	led_.LR(-1, 0);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	330c      	adds	r3, #12
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fe f9d7 	bl	8002074 <_ZN3LED2LREaa>

	logger_->resetIdx();
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fcb5 	bl	800463a <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fc63 	bl	80045a0 <_ZN6Logger10resetLogs2Ev>
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	080190d8 	.word	0x080190d8
 8003ce8:	080190e4 	.word	0x080190e4
 8003cec:	080190cc 	.word	0x080190cc
 8003cf0:	0801917c 	.word	0x0801917c
 8003cf4:	08019188 	.word	0x08019188
 8003cf8:	080190f4 	.word	0x080190f4
 8003cfc:	08019104 	.word	0x08019104

08003d00 <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	737b      	strb	r3, [r7, #13]
	start();
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff ff67 	bl	8003be4 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 8003d16:	7b7b      	ldrb	r3, [r7, #13]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d15b      	bne.n	8003dd4 <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 8003d1c:	89fb      	ldrh	r3, [r7, #14]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <_ZN9LineTrace7runningEv+0x28>
 8003d22:	2b0a      	cmp	r3, #10
 8003d24:	d030      	beq.n	8003d88 <_ZN9LineTrace7runningEv+0x88>
 8003d26:	e054      	b.n	8003dd2 <_ZN9LineTrace7runningEv+0xd2>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f001 f9a1 	bl	8005074 <_ZN10SideSensor16getWhiteLineCntREv>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	bf0c      	ite	eq
 8003d38:	2301      	moveq	r3, #1
 8003d3a:	2300      	movne	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d044      	beq.n	8003dcc <_ZN9LineTrace7runningEv+0xcc>
				}
				else{ // Other than first running
					startVelocityPlay();
				}
				*/
				loggerStart();
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fe ff18 	bl	8002b78 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003d4e:	3318      	adds	r3, #24
 8003d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f89f 	bl	8003e9c <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fd fbcb 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fd fba9 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	330c      	adds	r3, #12
 8003d76:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fe f979 	bl	8002074 <_ZN3LED2LREaa>
				stage = 10;
 8003d82:	230a      	movs	r3, #10
 8003d84:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8003d86:	e021      	b.n	8003dcc <_ZN9LineTrace7runningEv+0xcc>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f001 f971 	bl	8005074 <_ZN10SideSensor16getWhiteLineCntREv>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	bf0c      	ite	eq
 8003d98:	2301      	moveq	r3, #1
 8003d9a:	2300      	movne	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d016      	beq.n	8003dd0 <_ZN9LineTrace7runningEv+0xd0>
				loggerStop();
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fe ff03 	bl	8002bae <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f88a 	bl	8003ec2 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8003dae:	2064      	movs	r0, #100	; 0x64
 8003db0:	f004 ffea 	bl	8008d88 <HAL_Delay>

				setTargetVelocity(0);
 8003db4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003de4 <_ZN9LineTrace7runningEv+0xe4>
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff fd2a 	bl	8003812 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8003dbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003dc2:	f004 ffe1 	bl	8008d88 <HAL_Delay>

				goal_flag = true;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	737b      	strb	r3, [r7, #13]

			}

			break;
 8003dca:	e001      	b.n	8003dd0 <_ZN9LineTrace7runningEv+0xd0>
			break;
 8003dcc:	bf00      	nop
 8003dce:	e7a2      	b.n	8003d16 <_ZN9LineTrace7runningEv+0x16>
			break;
 8003dd0:	bf00      	nop
	while(goal_flag == false){
 8003dd2:	e7a0      	b.n	8003d16 <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff ff2b 	bl	8003c30 <_ZN9LineTrace4stopEv>
}
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	00000000 	.word	0x00000000

08003de8 <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 8003de8:	b590      	push	{r4, r7, lr}
 8003dea:	ed2d 8b02 	vpush	{d8}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d046      	beq.n	8003e8c <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003e04:	3318      	adds	r3, #24
 8003e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d11c      	bne.n	8003e48 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69dc      	ldr	r4, [r3, #28]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fd fb19 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8003e1c:	eeb0 8a40 	vmov.f32	s16, s0
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 fe7a 	bl	8004b1e <_ZN8Odometry8getThetaEv>
 8003e2a:	ec53 2b10 	vmov	r2, r3, d0
 8003e2e:	4610      	mov	r0, r2
 8003e30:	4619      	mov	r1, r3
 8003e32:	f7fc fef1 	bl	8000c18 <__aeabi_d2f>
 8003e36:	4603      	mov	r3, r0
 8003e38:	ee00 3a90 	vmov	s1, r3
 8003e3c:	eeb0 0a48 	vmov.f32	s0, s16
 8003e40:	4620      	mov	r0, r4
 8003e42:	f000 fa78 	bl	8004336 <_ZN6Logger21storeDistanceAndThetaEff>
 8003e46:	e01b      	b.n	8003e80 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(velocity_ctrl_->getCurrentVelocity(), odometry_->getTheta());
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69dc      	ldr	r4, [r3, #28]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f001 fc1d 	bl	8005690 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8003e56:	eeb0 8a40 	vmov.f32	s16, s0
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fe5d 	bl	8004b1e <_ZN8Odometry8getThetaEv>
 8003e64:	ec53 2b10 	vmov	r2, r3, d0
 8003e68:	4610      	mov	r0, r2
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	f7fc fed4 	bl	8000c18 <__aeabi_d2f>
 8003e70:	4603      	mov	r3, r0
 8003e72:	ee00 3a90 	vmov	s1, r3
 8003e76:	eeb0 0a48 	vmov.f32	s0, s16
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	f000 faa2 	bl	80043c4 <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	3301      	adds	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	4b03      	ldr	r3, [pc, #12]	; (8003e98 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003e8a:	801a      	strh	r2, [r3, #0]
	}
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	ecbd 8b02 	vpop	{d8}
 8003e96:	bd90      	pop	{r4, r7, pc}
 8003e98:	20000264 	.word	0x20000264

08003e9c <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fd fb0b 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003eb4:	3314      	adds	r3, #20
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	701a      	strb	r2, [r3, #0]
}
 8003eba:	bf00      	nop
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003ed0:	3314      	adds	r3, #20
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003edc:	3316      	adds	r3, #22
 8003ede:	2200      	movs	r2, #0
 8003ee0:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003ee8:	3350      	adds	r3, #80	; 0x50
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <_ZN9LineTrace7setModeEs>:

void LineTrace::setMode(int16_t mode)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f0e:	3318      	adds	r3, #24
 8003f10:	887a      	ldrh	r2, [r7, #2]
 8003f12:	801a      	strh	r2, [r3, #0]
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fd fa8a 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8003f3a:	eeb0 7a40 	vmov.f32	s14, s0
 8003f3e:	edd7 7a00 	vldr	s15, [r7]
 8003f42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f4a:	bf94      	ite	ls
 8003f4c:	2301      	movls	r3, #1
 8003f4e:	2300      	movhi	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 8003f56:	2301      	movs	r3, #1
 8003f58:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8003f64:	b590      	push	{r4, r7, lr}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f76:	334c      	adds	r3, #76	; 0x4c
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	461c      	mov	r4, r3
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	f7fd fa75 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8003f82:	eef0 7a40 	vmov.f32	s15, s0
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8003f8c:	3306      	adds	r3, #6
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	3304      	adds	r3, #4
 8003f94:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f9e:	334c      	adds	r3, #76	; 0x4c
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003fac:	334c      	adds	r3, #76	; 0x4c
 8003fae:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003fb6:	334c      	adds	r3, #76	; 0x4c
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	2b63      	cmp	r3, #99	; 0x63
 8003fbc:	d905      	bls.n	8003fca <_ZN9LineTrace22storeCrossLineDistanceEv+0x66>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003fc4:	334c      	adds	r3, #76	; 0x4c
 8003fc6:	2263      	movs	r2, #99	; 0x63
 8003fc8:	801a      	strh	r2, [r3, #0]
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd90      	pop	{r4, r7, pc}

08003fd2 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8003fd2:	b590      	push	{r4, r7, lr}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695a      	ldr	r2, [r3, #20]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003fe4:	334e      	adds	r3, #78	; 0x4e
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	461c      	mov	r4, r3
 8003fea:	4610      	mov	r0, r2
 8003fec:	f7fd fa3e 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8003ff0:	eef0 7a40 	vmov.f32	s15, s0
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8003ffa:	332a      	adds	r3, #42	; 0x2a
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	3304      	adds	r3, #4
 8004002:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800400c:	334e      	adds	r3, #78	; 0x4e
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	3301      	adds	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800401a:	334e      	adds	r3, #78	; 0x4e
 800401c:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004024:	334e      	adds	r3, #78	; 0x4e
 8004026:	881b      	ldrh	r3, [r3, #0]
 8004028:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800402c:	d306      	bcc.n	800403c <_ZN9LineTrace21storeSideLineDistanceEv+0x6a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004034:	334e      	adds	r3, #78	; 0x4e
 8004036:	f240 32e7 	movw	r2, #999	; 0x3e7
 800403a:	801a      	strh	r2, [r3, #0]
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	bd90      	pop	{r4, r7, pc}

08004044 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6959      	ldr	r1, [r3, #20]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004056:	334c      	adds	r3, #76	; 0x4c
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8004060:	3306      	adds	r3, #6
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	3304      	adds	r3, #4
 8004068:	edd3 7a00 	vldr	s15, [r3]
 800406c:	eeb0 0a67 	vmov.f32	s0, s15
 8004070:	4608      	mov	r0, r1
 8004072:	f7fd fa0a 	bl	800148a <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800407c:	334c      	adds	r3, #76	; 0x4c
 800407e:	881b      	ldrh	r3, [r3, #0]
 8004080:	3301      	adds	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800408a:	334c      	adds	r3, #76	; 0x4c
 800408c:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004094:	334c      	adds	r3, #76	; 0x4c
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	2b63      	cmp	r3, #99	; 0x63
 800409a:	d905      	bls.n	80040a8 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x64>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040a2:	334c      	adds	r3, #76	; 0x4c
 80040a4:	2263      	movs	r2, #99	; 0x63
 80040a6:	801a      	strh	r2, [r3, #0]

}
 80040a8:	bf00      	nop
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80040b8:	2300      	movs	r3, #0
 80040ba:	82fb      	strh	r3, [r7, #22]
 80040bc:	8afb      	ldrh	r3, [r7, #22]
 80040be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040c2:	d239      	bcs.n	8004138 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
		float temp_sideline_distance = sideline_distance_[i];
 80040c4:	8afb      	ldrh	r3, [r7, #22]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80040cc:	332a      	adds	r3, #42	; 0x2a
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	3304      	adds	r3, #4
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - encoder_->getTotalDistance());
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fd f9c5 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 80040e2:	eeb0 7a40 	vmov.f32	s14, s0
 80040e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80040ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040ee:	eeb0 0a67 	vmov.f32	s0, s15
 80040f2:	f7fe fb15 	bl	8002720 <_ZSt3absf>
 80040f6:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 80){
 80040fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80040fe:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004160 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb0>
 8004102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800410a:	d811      	bhi.n	8004130 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x80>
			encoder_->setTotalDistance(sideline_distance_[i]);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6959      	ldr	r1, [r3, #20]
 8004110:	8afb      	ldrh	r3, [r7, #22]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8004118:	332a      	adds	r3, #42	; 0x2a
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	3304      	adds	r3, #4
 8004120:	edd3 7a00 	vldr	s15, [r3]
 8004124:	eeb0 0a67 	vmov.f32	s0, s15
 8004128:	4608      	mov	r0, r1
 800412a:	f7fd f9ae 	bl	800148a <_ZN7Encoder16setTotalDistanceEf>
			break;
 800412e:	e003      	b.n	8004138 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8004130:	8afb      	ldrh	r3, [r7, #22]
 8004132:	3301      	adds	r3, #1
 8004134:	82fb      	strh	r3, [r7, #22]
 8004136:	e7c1      	b.n	80040bc <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
	}

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800413e:	334e      	adds	r3, #78	; 0x4e
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004146:	d306      	bcc.n	8004156 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xa6>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800414e:	334e      	adds	r3, #78	; 0x4e
 8004150:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004154:	801a      	strh	r2, [r3, #0]

}
 8004156:	bf00      	nop
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	42a00000 	.word	0x42a00000

08004164 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004172:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004176:	2200      	movs	r2, #0
 8004178:	701a      	strb	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004180:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004184:	2200      	movs	r2, #0
 8004186:	801a      	strh	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800418e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004192:	2200      	movs	r2, #0
 8004194:	801a      	strh	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800419c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80041a0:	2200      	movs	r2, #0
 80041a2:	801a      	strh	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4618      	mov	r0, r3
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
	...

080041b4 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80041bc:	2300      	movs	r3, #0
 80041be:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 80041c0:	f7fd fb12 	bl	80017e8 <sd_mount>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	bf0c      	ite	eq
 80041ca:	2301      	moveq	r3, #1
 80041cc:	2300      	movne	r3, #0
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d016      	beq.n	8004202 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 80041d4:	f7fc ff64 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80041d8:	2100      	movs	r1, #0
 80041da:	2000      	movs	r0, #0
 80041dc:	f7fc ff70 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80041e0:	4815      	ldr	r0, [pc, #84]	; (8004238 <_ZN6Logger10sdCardInitEv+0x84>)
 80041e2:	f7fc ff97 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80041e6:	2101      	movs	r1, #1
 80041e8:	2000      	movs	r0, #0
 80041ea:	f7fc ff69 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 80041ee:	4813      	ldr	r0, [pc, #76]	; (800423c <_ZN6Logger10sdCardInitEv+0x88>)
 80041f0:	f7fc ff90 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 80041f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041f8:	f004 fdc6 	bl	8008d88 <HAL_Delay>

	  ret = true;
 80041fc:	2301      	movs	r3, #1
 80041fe:	73fb      	strb	r3, [r7, #15]
 8004200:	e015      	b.n	800422e <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 8004202:	f7fc ff4d 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004206:	2100      	movs	r1, #0
 8004208:	2000      	movs	r0, #0
 800420a:	f7fc ff59 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 800420e:	480a      	ldr	r0, [pc, #40]	; (8004238 <_ZN6Logger10sdCardInitEv+0x84>)
 8004210:	f7fc ff80 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004214:	2101      	movs	r1, #1
 8004216:	2000      	movs	r0, #0
 8004218:	f7fc ff52 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 800421c:	4808      	ldr	r0, [pc, #32]	; (8004240 <_ZN6Logger10sdCardInitEv+0x8c>)
 800421e:	f7fc ff79 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8004222:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004226:	f004 fdaf 	bl	8008d88 <HAL_Delay>

	  ret = false;
 800422a:	2300      	movs	r3, #0
 800422c:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 800422e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	08019198 	.word	0x08019198
 800423c:	080191a4 	.word	0x080191a4
 8004240:	080191ac 	.word	0x080191ac

08004244 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004256:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d027      	beq.n	80042b0 <_ZN6Logger8storeLogEf+0x6c>
		store_data_float_[log_index_tim_] = data;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004266:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800427c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	3301      	adds	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800428c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004290:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004298:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d006      	beq.n	80042b0 <_ZN6Logger8storeLogEf+0x6c>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80042a8:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80042ac:	2200      	movs	r2, #0
 80042ae:	801a      	strh	r2, [r3, #0]
	}
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80042ce:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d028      	beq.n	800432a <_ZN6Logger9storeLog2Ef+0x6e>
		store_data_float2_[log_index_tim2_] = data;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80042de:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	3304      	adds	r3, #4
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80042f6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	3301      	adds	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004306:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800430a:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004312:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004316:	881b      	ldrh	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d006      	beq.n	800432a <_ZN6Logger9storeLog2Ef+0x6e>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004322:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004326:	2200      	movs	r2, #0
 8004328:	801a      	strh	r2, [r3, #0]
	}
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004336:	b480      	push	{r7}
 8004338:	b085      	sub	sp, #20
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	ed87 0a02 	vstr	s0, [r7, #8]
 8004342:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800434c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	3302      	adds	r3, #2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004364:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004370:	3312      	adds	r3, #18
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004380:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	3301      	adds	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004390:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004394:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800439c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	f241 726f 	movw	r2, #5999	; 0x176f
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d906      	bls.n	80043b8 <_ZN6Logger21storeDistanceAndThetaEff+0x82>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80043b0:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80043b4:	2200      	movs	r2, #0
 80043b6:	801a      	strh	r2, [r3, #0]
	//}
}
 80043b8:	bf00      	nop
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80043d0:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80043da:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80043e6:	3322      	adds	r3, #34	; 0x22
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80043f6:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8004402:	3352      	adds	r3, #82	; 0x52
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004412:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	3301      	adds	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004422:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004426:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800442e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	f241 726f 	movw	r2, #5999	; 0x176f
 8004438:	4293      	cmp	r3, r2
 800443a:	d906      	bls.n	800444a <_ZN6Logger22storeDistanceAndTheta2Eff+0x86>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004442:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004446:	2200      	movs	r2, #0
 8004448:	801a      	strh	r2, [r3, #0]
	//}
}
 800444a:	bf00      	nop
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
	return store_distance_;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	3308      	adds	r3, #8
}
 8004462:	4618      	mov	r0, r3
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800447c:	3348      	adds	r3, #72	; 0x48
}
 800447e:	4618      	mov	r0, r3
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b086      	sub	sp, #24
 800448e:	af02      	add	r7, sp, #8
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	2300      	movs	r3, #0
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	4613      	mov	r3, r2
 800449e:	2201      	movs	r2, #1
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	68b8      	ldr	r0, [r7, #8]
 80044a4:	f7fd f8ae 	bl	8001604 <sd_write_array_float>
}
 80044a8:	bf00      	nop
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af02      	add	r7, sp, #8
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	1d1a      	adds	r2, r3, #4
 80044c0:	2300      	movs	r3, #0
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	4613      	mov	r3, r2
 80044c6:	2201      	movs	r2, #1
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	68b8      	ldr	r0, [r7, #8]
 80044cc:	f7fd f89a 	bl	8001604 <sd_write_array_float>
}
 80044d0:	bf00      	nop
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
 80044e4:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f103 0208 	add.w	r2, r3, #8
 80044ec:	2300      	movs	r3, #0
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	4613      	mov	r3, r2
 80044f2:	f241 7270 	movw	r2, #6000	; 0x1770
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	68b8      	ldr	r0, [r7, #8]
 80044fa:	f7fd f883 	bl	8001604 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004504:	3348      	adds	r3, #72	; 0x48
 8004506:	2200      	movs	r2, #0
 8004508:	9200      	str	r2, [sp, #0]
 800450a:	f241 7270 	movw	r2, #6000	; 0x1770
 800450e:	6839      	ldr	r1, [r7, #0]
 8004510:	68b8      	ldr	r0, [r7, #8]
 8004512:	f7fd f877 	bl	8001604 <sd_write_array_float>
}
 8004516:	bf00      	nop
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b086      	sub	sp, #24
 8004522:	af02      	add	r7, sp, #8
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	607a      	str	r2, [r7, #4]
 800452a:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004532:	3388      	adds	r3, #136	; 0x88
 8004534:	2200      	movs	r2, #0
 8004536:	9200      	str	r2, [sp, #0]
 8004538:	f241 7270 	movw	r2, #6000	; 0x1770
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	68b8      	ldr	r0, [r7, #8]
 8004540:	f7fd f860 	bl	8001604 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800454a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800454e:	2200      	movs	r2, #0
 8004550:	9200      	str	r2, [sp, #0]
 8004552:	f241 7270 	movw	r2, #6000	; 0x1770
 8004556:	6839      	ldr	r1, [r7, #0]
 8004558:	68b8      	ldr	r0, [r7, #8]
 800455a:	f7fd f853 	bl	8001604 <sd_write_array_float>
}
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	60f8      	str	r0, [r7, #12]
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	607a      	str	r2, [r7, #4]
 8004572:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	3308      	adds	r3, #8
 8004578:	f241 7270 	movw	r2, #6000	; 0x1770
 800457c:	6879      	ldr	r1, [r7, #4]
 800457e:	68b8      	ldr	r0, [r7, #8]
 8004580:	f7fd f8a6 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800458a:	3348      	adds	r3, #72	; 0x48
 800458c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004590:	6839      	ldr	r1, [r7, #0]
 8004592:	68b8      	ldr	r0, [r7, #8]
 8004594:	f7fd f89c 	bl	80016d0 <sd_read_array_float>
}
 8004598:	bf00      	nop
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 80045a0:	b480      	push	{r7}
 80045a2:	b08b      	sub	sp, #44	; 0x2c
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 80045ae:	3388      	adds	r3, #136	; 0x88
 80045b0:	61fb      	str	r3, [r7, #28]
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80045bc:	3340      	adds	r3, #64	; 0x40
 80045be:	61bb      	str	r3, [r7, #24]
 80045c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d009      	beq.n	80045dc <_ZN6Logger10resetLogs2Ev+0x3c>
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	617b      	str	r3, [r7, #20]
		log = 0;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	3304      	adds	r3, #4
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
 80045da:	e7f1      	b.n	80045c0 <_ZN6Logger10resetLogs2Ev+0x20>
	}
	for(auto &log : store_theta2_){
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80045e2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	623b      	str	r3, [r7, #32]
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80045f2:	3340      	adds	r3, #64	; 0x40
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	6a3a      	ldr	r2, [r7, #32]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d009      	beq.n	8004612 <_ZN6Logger10resetLogs2Ev+0x72>
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	3304      	adds	r3, #4
 800460e:	623b      	str	r3, [r7, #32]
 8004610:	e7f1      	b.n	80045f6 <_ZN6Logger10resetLogs2Ev+0x56>
	}

	log_index_tim_ = 0;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004618:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800461c:	2200      	movs	r2, #0
 800461e:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004626:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800462a:	2200      	movs	r2, #0
 800462c:	801a      	strh	r2, [r3, #0]
}
 800462e:	bf00      	nop
 8004630:	372c      	adds	r7, #44	; 0x2c
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004648:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800464c:	2200      	movs	r2, #0
 800464e:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004656:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800465a:	2200      	movs	r2, #0
 800465c:	801a      	strh	r2, [r3, #0]
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <_ZN6Logger5startEv>:

void Logger::start()
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004678:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800467c:	2201      	movs	r2, #1
 800467e:	701a      	strb	r2, [r3, #0]
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <_ZN6Logger4stopEv>:

void Logger::stop()
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800469a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800469e:	2200      	movs	r2, #0
 80046a0:	701a      	strb	r2, [r3, #0]
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	801a      	strh	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	805a      	strh	r2, [r3, #2]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4618      	mov	r0, r3
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <_ZN5Motor4initEv>:

void Motor::init()
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80046d8:	2108      	movs	r1, #8
 80046da:	4805      	ldr	r0, [pc, #20]	; (80046f0 <_ZN5Motor4initEv+0x20>)
 80046dc:	f009 fd04 	bl	800e0e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80046e0:	210c      	movs	r1, #12
 80046e2:	4803      	ldr	r0, [pc, #12]	; (80046f0 <_ZN5Motor4initEv+0x20>)
 80046e4:	f009 fd00 	bl	800e0e8 <HAL_TIM_PWM_Start>

}
 80046e8:	bf00      	nop
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	2003e8e0 	.word	0x2003e8e0

080046f4 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004702:	2b00      	cmp	r3, #0
 8004704:	da0d      	bge.n	8004722 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004706:	2200      	movs	r2, #0
 8004708:	f44f 7100 	mov.w	r1, #512	; 0x200
 800470c:	481f      	ldr	r0, [pc, #124]	; (800478c <_ZN5Motor9motorCtrlEv+0x98>)
 800470e:	f005 fdd1 	bl	800a2b4 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004718:	b29b      	uxth	r3, r3
 800471a:	425b      	negs	r3, r3
 800471c:	b29b      	uxth	r3, r3
 800471e:	81fb      	strh	r3, [r7, #14]
 8004720:	e00a      	b.n	8004738 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004722:	2201      	movs	r2, #1
 8004724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004728:	4818      	ldr	r0, [pc, #96]	; (800478c <_ZN5Motor9motorCtrlEv+0x98>)
 800472a:	f005 fdc3 	bl	800a2b4 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004734:	b29b      	uxth	r3, r3
 8004736:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800473e:	2b00      	cmp	r3, #0
 8004740:	da0d      	bge.n	800475e <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004742:	2201      	movs	r2, #1
 8004744:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004748:	4810      	ldr	r0, [pc, #64]	; (800478c <_ZN5Motor9motorCtrlEv+0x98>)
 800474a:	f005 fdb3 	bl	800a2b4 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004754:	b29b      	uxth	r3, r3
 8004756:	425b      	negs	r3, r3
 8004758:	b29b      	uxth	r3, r3
 800475a:	81bb      	strh	r3, [r7, #12]
 800475c:	e00a      	b.n	8004774 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 800475e:	2200      	movs	r2, #0
 8004760:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004764:	4809      	ldr	r0, [pc, #36]	; (800478c <_ZN5Motor9motorCtrlEv+0x98>)
 8004766:	f005 fda5 	bl	800a2b4 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004770:	b29b      	uxth	r3, r3
 8004772:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004774:	89fa      	ldrh	r2, [r7, #14]
 8004776:	4b06      	ldr	r3, [pc, #24]	; (8004790 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 800477c:	89ba      	ldrh	r2, [r7, #12]
 800477e:	4b04      	ldr	r3, [pc, #16]	; (8004790 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004784:	bf00      	nop
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	40020c00 	.word	0x40020c00
 8004790:	2003e8e0 	.word	0x2003e8e0

08004794 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004794:	b590      	push	{r4, r7, lr}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	6178      	str	r0, [r7, #20]
 800479c:	ed87 0b02 	vstr	d0, [r7, #8]
 80047a0:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	4b30      	ldr	r3, [pc, #192]	; (800486c <_ZN5Motor8setRatioEdd+0xd8>)
 80047aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047ae:	f7fc f9cb 	bl	8000b48 <__aeabi_dcmpgt>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d005      	beq.n	80047c4 <_ZN5Motor8setRatioEdd+0x30>
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	4c2b      	ldr	r4, [pc, #172]	; (800486c <_ZN5Motor8setRatioEdd+0xd8>)
 80047be:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80047c2:	e00e      	b.n	80047e2 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	4b29      	ldr	r3, [pc, #164]	; (8004870 <_ZN5Motor8setRatioEdd+0xdc>)
 80047ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047ce:	f7fc f99d 	bl	8000b0c <__aeabi_dcmplt>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d004      	beq.n	80047e2 <_ZN5Motor8setRatioEdd+0x4e>
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	4c24      	ldr	r4, [pc, #144]	; (8004870 <_ZN5Motor8setRatioEdd+0xdc>)
 80047de:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 80047e2:	f04f 0200 	mov.w	r2, #0
 80047e6:	4b21      	ldr	r3, [pc, #132]	; (800486c <_ZN5Motor8setRatioEdd+0xd8>)
 80047e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047ec:	f7fc f9ac 	bl	8000b48 <__aeabi_dcmpgt>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d005      	beq.n	8004802 <_ZN5Motor8setRatioEdd+0x6e>
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	4c1c      	ldr	r4, [pc, #112]	; (800486c <_ZN5Motor8setRatioEdd+0xd8>)
 80047fc:	e9c7 3400 	strd	r3, r4, [r7]
 8004800:	e00e      	b.n	8004820 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004802:	f04f 0200 	mov.w	r2, #0
 8004806:	4b1a      	ldr	r3, [pc, #104]	; (8004870 <_ZN5Motor8setRatioEdd+0xdc>)
 8004808:	e9d7 0100 	ldrd	r0, r1, [r7]
 800480c:	f7fc f97e 	bl	8000b0c <__aeabi_dcmplt>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d004      	beq.n	8004820 <_ZN5Motor8setRatioEdd+0x8c>
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	4c15      	ldr	r4, [pc, #84]	; (8004870 <_ZN5Motor8setRatioEdd+0xdc>)
 800481c:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	4b13      	ldr	r3, [pc, #76]	; (8004874 <_ZN5Motor8setRatioEdd+0xe0>)
 8004826:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800482a:	f7fb fefd 	bl	8000628 <__aeabi_dmul>
 800482e:	4603      	mov	r3, r0
 8004830:	460c      	mov	r4, r1
 8004832:	4618      	mov	r0, r3
 8004834:	4621      	mov	r1, r4
 8004836:	f7fc f9a7 	bl	8000b88 <__aeabi_d2iz>
 800483a:	4603      	mov	r3, r0
 800483c:	b21a      	sxth	r2, r3
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <_ZN5Motor8setRatioEdd+0xe0>)
 8004848:	e9d7 0100 	ldrd	r0, r1, [r7]
 800484c:	f7fb feec 	bl	8000628 <__aeabi_dmul>
 8004850:	4603      	mov	r3, r0
 8004852:	460c      	mov	r4, r1
 8004854:	4618      	mov	r0, r3
 8004856:	4621      	mov	r1, r4
 8004858:	f7fc f996 	bl	8000b88 <__aeabi_d2iz>
 800485c:	4603      	mov	r3, r0
 800485e:	b21a      	sxth	r2, r3
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	805a      	strh	r2, [r3, #2]

}
 8004864:	bf00      	nop
 8004866:	371c      	adds	r7, #28
 8004868:	46bd      	mov	sp, r7
 800486a:	bd90      	pop	{r4, r7, pc}
 800486c:	3ff00000 	.word	0x3ff00000
 8004870:	bff00000 	.word	0xbff00000
 8004874:	409c2000 	.word	0x409c2000

08004878 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004878:	b490      	push	{r4, r7}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	603b      	str	r3, [r7, #0]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	f04f 0300 	mov.w	r3, #0
 800488c:	f04f 0400 	mov.w	r4, #0
 8004890:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	f04f 0400 	mov.w	r4, #0
 800489e:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	f04f 0400 	mov.w	r4, #0
 80048ac:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	f04f 0400 	mov.w	r4, #0
 80048ba:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	f04f 0300 	mov.w	r3, #0
 80048c4:	f04f 0400 	mov.w	r4, #0
 80048c8:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	609a      	str	r2, [r3, #8]
}
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc90      	pop	{r4, r7}
 80048e8:	4770      	bx	lr
 80048ea:	0000      	movs	r0, r0
 80048ec:	0000      	movs	r0, r0
	...

080048f0 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 80048f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048f4:	b086      	sub	sp, #24
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fd f93a 	bl	8001b78 <_ZN3IMU8getOmegaEv>
 8004904:	ee10 3a10 	vmov	r3, s0
 8004908:	4618      	mov	r0, r3
 800490a:	f7fb fe35 	bl	8000578 <__aeabi_f2d>
 800490e:	4603      	mov	r3, r0
 8004910:	460c      	mov	r4, r1
 8004912:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f7fc fd88 	bl	8001430 <_ZN7Encoder11getDistanceEv>
 8004920:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004924:	a376      	add	r3, pc, #472	; (adr r3, 8004b00 <_ZN8Odometry12calcPotitionEv+0x210>)
 8004926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800492e:	f7fb fe7b 	bl	8000628 <__aeabi_dmul>
 8004932:	4603      	mov	r3, r0
 8004934:	460c      	mov	r4, r1
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f7fb fe18 	bl	8000578 <__aeabi_f2d>
 8004948:	4682      	mov	sl, r0
 800494a:	468b      	mov	fp, r1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004960:	f7fb ff8c 	bl	800087c <__aeabi_ddiv>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4640      	mov	r0, r8
 800496a:	4649      	mov	r1, r9
 800496c:	f7fb fca6 	bl	80002bc <__adddf3>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	ec43 2b17 	vmov	d7, r2, r3
 8004978:	eeb0 0a47 	vmov.f32	s0, s14
 800497c:	eef0 0a67 	vmov.f32	s1, s15
 8004980:	f00e fef6 	bl	8013770 <cos>
 8004984:	ec53 2b10 	vmov	r2, r3, d0
 8004988:	4650      	mov	r0, sl
 800498a:	4659      	mov	r1, fp
 800498c:	f7fb fe4c 	bl	8000628 <__aeabi_dmul>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4620      	mov	r0, r4
 8004996:	4629      	mov	r1, r5
 8004998:	f7fb fc90 	bl	80002bc <__adddf3>
 800499c:	4603      	mov	r3, r0
 800499e:	460c      	mov	r4, r1
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f7fb fde3 	bl	8000578 <__aeabi_f2d>
 80049b2:	4682      	mov	sl, r0
 80049b4:	468b      	mov	fp, r1
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80049ca:	f7fb ff57 	bl	800087c <__aeabi_ddiv>
 80049ce:	4602      	mov	r2, r0
 80049d0:	460b      	mov	r3, r1
 80049d2:	4640      	mov	r0, r8
 80049d4:	4649      	mov	r1, r9
 80049d6:	f7fb fc71 	bl	80002bc <__adddf3>
 80049da:	4602      	mov	r2, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	ec43 2b17 	vmov	d7, r2, r3
 80049e2:	eeb0 0a47 	vmov.f32	s0, s14
 80049e6:	eef0 0a67 	vmov.f32	s1, s15
 80049ea:	f00e ff05 	bl	80137f8 <sin>
 80049ee:	ec53 2b10 	vmov	r2, r3, d0
 80049f2:	4650      	mov	r0, sl
 80049f4:	4659      	mov	r1, fp
 80049f6:	f7fb fe17 	bl	8000628 <__aeabi_dmul>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	4620      	mov	r0, r4
 8004a00:	4629      	mov	r1, r5
 8004a02:	f7fb fc5b 	bl	80002bc <__adddf3>
 8004a06:	4603      	mov	r3, r0
 8004a08:	460c      	mov	r4, r1
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	4623      	mov	r3, r4
 8004a20:	f7fb fc4c 	bl	80002bc <__adddf3>
 8004a24:	4603      	mov	r3, r0
 8004a26:	460c      	mov	r4, r1
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	ed93 7b08 	vldr	d7, [r3, #32]
 8004a3a:	eeb0 0a47 	vmov.f32	s0, s14
 8004a3e:	eef0 0a67 	vmov.f32	s1, s15
 8004a42:	f00e fe95 	bl	8013770 <cos>
 8004a46:	ec51 0b10 	vmov	r0, r1, d0
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	4b28      	ldr	r3, [pc, #160]	; (8004af0 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004a50:	f7fb fdea 	bl	8000628 <__aeabi_dmul>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4620      	mov	r0, r4
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	f7fb fc2e 	bl	80002bc <__adddf3>
 8004a60:	4603      	mov	r3, r0
 8004a62:	460c      	mov	r4, r1
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	ed93 7b08 	vldr	d7, [r3, #32]
 8004a76:	eeb0 0a47 	vmov.f32	s0, s14
 8004a7a:	eef0 0a67 	vmov.f32	s1, s15
 8004a7e:	f00e febb 	bl	80137f8 <sin>
 8004a82:	ec51 0b10 	vmov	r0, r1, d0
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	4b19      	ldr	r3, [pc, #100]	; (8004af0 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004a8c:	f7fb fdcc 	bl	8000628 <__aeabi_dmul>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4620      	mov	r0, r4
 8004a96:	4629      	mov	r1, r5
 8004a98:	f7fb fc10 	bl	80002bc <__adddf3>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	460c      	mov	r4, r1
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004aac:	4618      	mov	r0, r3
 8004aae:	4621      	mov	r1, r4
 8004ab0:	f7fc f8b2 	bl	8000c18 <__aeabi_d2f>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	4b0f      	ldr	r3, [pc, #60]	; (8004af4 <_ZN8Odometry12calcPotitionEv+0x204>)
 8004ab8:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	4621      	mov	r1, r4
 8004ac4:	f7fc f8a8 	bl	8000c18 <__aeabi_d2f>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <_ZN8Odometry12calcPotitionEv+0x208>)
 8004acc:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	4621      	mov	r1, r4
 8004ad8:	f7fc f89e 	bl	8000c18 <__aeabi_d2f>
 8004adc:	4602      	mov	r2, r0
 8004ade:	4b07      	ldr	r3, [pc, #28]	; (8004afc <_ZN8Odometry12calcPotitionEv+0x20c>)
 8004ae0:	601a      	str	r2, [r3, #0]
}
 8004ae2:	bf00      	nop
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aec:	f3af 8000 	nop.w
 8004af0:	405b8000 	.word	0x405b8000
 8004af4:	20000294 	.word	0x20000294
 8004af8:	20000298 	.word	0x20000298
 8004afc:	2000029c 	.word	0x2000029c
 8004b00:	d2f1a9fc 	.word	0xd2f1a9fc
 8004b04:	3f50624d 	.word	0x3f50624d

08004b08 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
	calcPotition();
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff feed 	bl	80048f0 <_ZN8Odometry12calcPotitionEv>
}
 8004b16:	bf00      	nop
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8004b1e:	b490      	push	{r4, r7}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
	return theta_;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004b2c:	ec44 3b17 	vmov	d7, r3, r4
}
 8004b30:	eeb0 0a47 	vmov.f32	s0, s14
 8004b34:	eef0 0a67 	vmov.f32	s1, s15
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc90      	pop	{r4, r7}
 8004b3e:	4770      	bx	lr

08004b40 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8004b40:	b490      	push	{r4, r7}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	f04f 0400 	mov.w	r4, #0
 8004b52:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	f04f 0400 	mov.w	r4, #0
 8004b60:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	f04f 0300 	mov.w	r3, #0
 8004b6a:	f04f 0400 	mov.w	r4, #0
 8004b6e:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8004b72:	bf00      	nop
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc90      	pop	{r4, r7}
 8004b7a:	4770      	bx	lr

08004b7c <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8004b7c:	b490      	push	{r4, r7}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	f04f 0400 	mov.w	r4, #0
 8004b94:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	f04f 0300 	mov.w	r3, #0
 8004b9e:	f04f 0400 	mov.w	r4, #0
 8004ba2:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	f04f 0300 	mov.w	r3, #0
 8004bac:	f04f 0400 	mov.w	r4, #0
 8004bb0:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004bba:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8004bc2:	4a29      	ldr	r2, [pc, #164]	; (8004c68 <_ZN13PathFollowingC1Ev+0xec>)
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	f04f 0400 	mov.w	r4, #0
 8004bcc:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8004bd0:	4a25      	ldr	r2, [pc, #148]	; (8004c68 <_ZN13PathFollowingC1Ev+0xec>)
 8004bd2:	f04f 0300 	mov.w	r3, #0
 8004bd6:	f04f 0400 	mov.w	r4, #0
 8004bda:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8004bde:	4a22      	ldr	r2, [pc, #136]	; (8004c68 <_ZN13PathFollowingC1Ev+0xec>)
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	f04f 0400 	mov.w	r4, #0
 8004be8:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8004bec:	4a1f      	ldr	r2, [pc, #124]	; (8004c6c <_ZN13PathFollowingC1Ev+0xf0>)
 8004bee:	f04f 0300 	mov.w	r3, #0
 8004bf2:	f04f 0400 	mov.w	r4, #0
 8004bf6:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8004bfa:	4a1c      	ldr	r2, [pc, #112]	; (8004c6c <_ZN13PathFollowingC1Ev+0xf0>)
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	f04f 0400 	mov.w	r4, #0
 8004c04:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8004c08:	4a18      	ldr	r2, [pc, #96]	; (8004c6c <_ZN13PathFollowingC1Ev+0xf0>)
 8004c0a:	f04f 0300 	mov.w	r3, #0
 8004c0e:	f04f 0400 	mov.w	r4, #0
 8004c12:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8004c16:	4a15      	ldr	r2, [pc, #84]	; (8004c6c <_ZN13PathFollowingC1Ev+0xf0>)
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	f04f 0400 	mov.w	r4, #0
 8004c20:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8004c24:	4a11      	ldr	r2, [pc, #68]	; (8004c6c <_ZN13PathFollowingC1Ev+0xf0>)
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	f04f 0400 	mov.w	r4, #0
 8004c2e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8004c32:	4a0e      	ldr	r2, [pc, #56]	; (8004c6c <_ZN13PathFollowingC1Ev+0xf0>)
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	f04f 0400 	mov.w	r4, #0
 8004c3c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8004c40:	4a0b      	ldr	r2, [pc, #44]	; (8004c70 <_ZN13PathFollowingC1Ev+0xf4>)
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	f04f 0400 	mov.w	r4, #0
 8004c4a:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8004c4e:	4a08      	ldr	r2, [pc, #32]	; (8004c70 <_ZN13PathFollowingC1Ev+0xf4>)
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	f04f 0400 	mov.w	r4, #0
 8004c58:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc90      	pop	{r4, r7}
 8004c66:	4770      	bx	lr
 8004c68:	2003ede0 	.word	0x2003ede0
 8004c6c:	2003ed70 	.word	0x2003ed70
 8004c70:	2003edd0 	.word	0x2003edd0

08004c74 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b088      	sub	sp, #32
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8004c7c:	f001 fc92 	bl	80065a4 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8004c80:	f107 0318 	add.w	r3, r7, #24
 8004c84:	2201      	movs	r2, #1
 8004c86:	4915      	ldr	r1, [pc, #84]	; (8004cdc <_ZN13PathFollowing4initEv+0x68>)
 8004c88:	4815      	ldr	r0, [pc, #84]	; (8004ce0 <_ZN13PathFollowing4initEv+0x6c>)
 8004c8a:	f7fc fd67 	bl	800175c <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8004c8e:	f107 0310 	add.w	r3, r7, #16
 8004c92:	2201      	movs	r2, #1
 8004c94:	4913      	ldr	r1, [pc, #76]	; (8004ce4 <_ZN13PathFollowing4initEv+0x70>)
 8004c96:	4812      	ldr	r0, [pc, #72]	; (8004ce0 <_ZN13PathFollowing4initEv+0x6c>)
 8004c98:	f7fc fd60 	bl	800175c <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8004c9c:	f107 0308 	add.w	r3, r7, #8
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	4911      	ldr	r1, [pc, #68]	; (8004ce8 <_ZN13PathFollowing4initEv+0x74>)
 8004ca4:	480e      	ldr	r0, [pc, #56]	; (8004ce0 <_ZN13PathFollowing4initEv+0x6c>)
 8004ca6:	f7fc fd59 	bl	800175c <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8004caa:	ed97 7b06 	vldr	d7, [r7, #24]
 8004cae:	ed97 6b04 	vldr	d6, [r7, #16]
 8004cb2:	ed97 5b02 	vldr	d5, [r7, #8]
 8004cb6:	eeb0 2a45 	vmov.f32	s4, s10
 8004cba:	eef0 2a65 	vmov.f32	s5, s11
 8004cbe:	eeb0 1a46 	vmov.f32	s2, s12
 8004cc2:	eef0 1a66 	vmov.f32	s3, s13
 8004cc6:	eeb0 0a47 	vmov.f32	s0, s14
 8004cca:	eef0 0a67 	vmov.f32	s1, s15
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f80c 	bl	8004cec <_ZN13PathFollowing7setGainEddd>
}
 8004cd4:	bf00      	nop
 8004cd6:	3720      	adds	r7, #32
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	080191b4 	.word	0x080191b4
 8004ce0:	080191bc 	.word	0x080191bc
 8004ce4:	080191c4 	.word	0x080191c4
 8004ce8:	080191cc 	.word	0x080191cc

08004cec <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8004cec:	b490      	push	{r4, r7}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	61f8      	str	r0, [r7, #28]
 8004cf4:	ed87 0b04 	vstr	d0, [r7, #16]
 8004cf8:	ed87 1b02 	vstr	d1, [r7, #8]
 8004cfc:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8004d00:	4a09      	ldr	r2, [pc, #36]	; (8004d28 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004d02:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004d06:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8004d0a:	4a07      	ldr	r2, [pc, #28]	; (8004d28 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004d0c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004d10:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8004d14:	4a04      	ldr	r2, [pc, #16]	; (8004d28 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004d16:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004d1a:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8004d1e:	bf00      	nop
 8004d20:	3720      	adds	r7, #32
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bc90      	pop	{r4, r7}
 8004d26:	4770      	bx	lr
 8004d28:	2003ede0 	.word	0x2003ede0

08004d2c <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8004d34:	2088      	movs	r0, #136	; 0x88
 8004d36:	f7fd f862 	bl	8001dfe <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8004d3a:	2080      	movs	r0, #128	; 0x80
 8004d3c:	f7fd f85f 	bl	8001dfe <INA260_init>
}
 8004d40:	bf00      	nop
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8004d48:	b590      	push	{r4, r7, lr}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8004d50:	2188      	movs	r1, #136	; 0x88
 8004d52:	2002      	movs	r0, #2
 8004d54:	f7fc fff0 	bl	8001d38 <INA260_read>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fb fbfa 	bl	8000554 <__aeabi_i2d>
 8004d60:	a30c      	add	r3, pc, #48	; (adr r3, 8004d94 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8004d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d66:	f7fb fc5f 	bl	8000628 <__aeabi_dmul>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	460c      	mov	r4, r1
 8004d6e:	4618      	mov	r0, r3
 8004d70:	4621      	mov	r1, r4
 8004d72:	f7fb ff51 	bl	8000c18 <__aeabi_d2f>
 8004d76:	4602      	mov	r2, r0
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	4a03      	ldr	r2, [pc, #12]	; (8004d90 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8004d82:	6013      	str	r3, [r2, #0]
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd90      	pop	{r4, r7, pc}
 8004d8c:	f3af 8000 	nop.w
 8004d90:	200002a0 	.word	0x200002a0
 8004d94:	47ae147b 	.word	0x47ae147b
 8004d98:	3f547ae1 	.word	0x3f547ae1

08004d9c <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	ee07 3a90 	vmov	s15, r3

}
 8004dac:	eeb0 0a67 	vmov.f32	s0, s15
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
	...

08004dbc <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8004dc8:	2102      	movs	r1, #2
 8004dca:	4822      	ldr	r0, [pc, #136]	; (8004e54 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004dcc:	f005 fa5a 	bl	800a284 <HAL_GPIO_ReadPin>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	bf0c      	ite	eq
 8004dd6:	2301      	moveq	r3, #1
 8004dd8:	2300      	movne	r3, #0
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d003      	beq.n	8004de8 <_ZN12RotarySwitch8getValueEv+0x2c>
 8004de0:	89fb      	ldrh	r3, [r7, #14]
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8004de8:	2108      	movs	r1, #8
 8004dea:	481a      	ldr	r0, [pc, #104]	; (8004e54 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004dec:	f005 fa4a 	bl	800a284 <HAL_GPIO_ReadPin>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	bf0c      	ite	eq
 8004df6:	2301      	moveq	r3, #1
 8004df8:	2300      	movne	r3, #0
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <_ZN12RotarySwitch8getValueEv+0x4c>
 8004e00:	89fb      	ldrh	r3, [r7, #14]
 8004e02:	f043 0302 	orr.w	r3, r3, #2
 8004e06:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8004e08:	2110      	movs	r1, #16
 8004e0a:	4812      	ldr	r0, [pc, #72]	; (8004e54 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004e0c:	f005 fa3a 	bl	800a284 <HAL_GPIO_ReadPin>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	bf0c      	ite	eq
 8004e16:	2301      	moveq	r3, #1
 8004e18:	2300      	movne	r3, #0
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <_ZN12RotarySwitch8getValueEv+0x6c>
 8004e20:	89fb      	ldrh	r3, [r7, #14]
 8004e22:	f043 0304 	orr.w	r3, r3, #4
 8004e26:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8004e28:	2180      	movs	r1, #128	; 0x80
 8004e2a:	480a      	ldr	r0, [pc, #40]	; (8004e54 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004e2c:	f005 fa2a 	bl	800a284 <HAL_GPIO_ReadPin>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	bf0c      	ite	eq
 8004e36:	2301      	moveq	r3, #1
 8004e38:	2300      	movne	r3, #0
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <_ZN12RotarySwitch8getValueEv+0x8c>
 8004e40:	89fb      	ldrh	r3, [r7, #14]
 8004e42:	f043 0308 	orr.w	r3, r3, #8
 8004e46:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8004e48:	89fb      	ldrh	r3, [r7, #14]

}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	40020c00 	.word	0x40020c00

08004e58 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	801a      	strh	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	805a      	strh	r2, [r3, #2]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	809a      	strh	r2, [r3, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	719a      	strb	r2, [r3, #6]
{

}
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
	...

08004e88 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	799b      	ldrb	r3, [r3, #6]
 8004e94:	f083 0301 	eor.w	r3, r3, #1
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 80c7 	beq.w	800502e <_ZN10SideSensor12updateStatusEv+0x1a6>

		if(white_flag1 == false){
 8004ea0:	4b65      	ldr	r3, [pc, #404]	; (8005038 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	f083 0301 	eor.w	r3, r3, #1
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d027      	beq.n	8004efe <_ZN10SideSensor12updateStatusEv+0x76>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8004eae:	2104      	movs	r1, #4
 8004eb0:	4862      	ldr	r0, [pc, #392]	; (800503c <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8004eb2:	f005 f9e7 	bl	800a284 <HAL_GPIO_ReadPin>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	bf0c      	ite	eq
 8004ebc:	2301      	moveq	r3, #1
 8004ebe:	2300      	movne	r3, #0
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d006      	beq.n	8004ed4 <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 8004ec6:	4b5e      	ldr	r3, [pc, #376]	; (8005040 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	4b5c      	ldr	r3, [pc, #368]	; (8005040 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004ed0:	801a      	strh	r2, [r3, #0]
 8004ed2:	e002      	b.n	8004eda <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 8004ed4:	4b5a      	ldr	r3, [pc, #360]	; (8005040 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004eda:	4b59      	ldr	r3, [pc, #356]	; (8005040 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d93f      	bls.n	8004f62 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ |= 0x01;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	f043 0301 	orr.w	r3, r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 8004ef0:	4b51      	ldr	r3, [pc, #324]	; (8005038 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8004ef6:	4b52      	ldr	r3, [pc, #328]	; (8005040 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	801a      	strh	r2, [r3, #0]
 8004efc:	e031      	b.n	8004f62 <_ZN10SideSensor12updateStatusEv+0xda>
			}

		}
		else if(white_flag1 == true){
 8004efe:	4b4e      	ldr	r3, [pc, #312]	; (8005038 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d02d      	beq.n	8004f62 <_ZN10SideSensor12updateStatusEv+0xda>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8004f06:	2104      	movs	r1, #4
 8004f08:	484c      	ldr	r0, [pc, #304]	; (800503c <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8004f0a:	f005 f9bb 	bl	800a284 <HAL_GPIO_ReadPin>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	bf14      	ite	ne
 8004f14:	2301      	movne	r3, #1
 8004f16:	2300      	moveq	r3, #0
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d006      	beq.n	8004f2c <_ZN10SideSensor12updateStatusEv+0xa4>
				cnt_r++;
 8004f1e:	4b48      	ldr	r3, [pc, #288]	; (8005040 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	3301      	adds	r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	4b46      	ldr	r3, [pc, #280]	; (8005040 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004f28:	801a      	strh	r2, [r3, #0]
 8004f2a:	e002      	b.n	8004f32 <_ZN10SideSensor12updateStatusEv+0xaa>
			}
			else{
				cnt_r = 0;
 8004f2c:	4b44      	ldr	r3, [pc, #272]	; (8005040 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004f32:	4b43      	ldr	r3, [pc, #268]	; (8005040 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d913      	bls.n	8004f62 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ ^= 0x01;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	f083 0301 	eor.w	r3, r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 8004f48:	4b3b      	ldr	r3, [pc, #236]	; (8005038 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	889b      	ldrh	r3, [r3, #4]
 8004f52:	3301      	adds	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	889a      	ldrh	r2, [r3, #4]
 8004f5e:	4b39      	ldr	r3, [pc, #228]	; (8005044 <_ZN10SideSensor12updateStatusEv+0x1bc>)
 8004f60:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 8004f62:	4b39      	ldr	r3, [pc, #228]	; (8005048 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	f083 0301 	eor.w	r3, r3, #1
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d027      	beq.n	8004fc0 <_ZN10SideSensor12updateStatusEv+0x138>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8004f70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f74:	4835      	ldr	r0, [pc, #212]	; (800504c <_ZN10SideSensor12updateStatusEv+0x1c4>)
 8004f76:	f005 f985 	bl	800a284 <HAL_GPIO_ReadPin>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	bf0c      	ite	eq
 8004f80:	2301      	moveq	r3, #1
 8004f82:	2300      	movne	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d006      	beq.n	8004f98 <_ZN10SideSensor12updateStatusEv+0x110>
				cnt_l++;
 8004f8a:	4b31      	ldr	r3, [pc, #196]	; (8005050 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	4b2f      	ldr	r3, [pc, #188]	; (8005050 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004f94:	801a      	strh	r2, [r3, #0]
 8004f96:	e002      	b.n	8004f9e <_ZN10SideSensor12updateStatusEv+0x116>
			}
			else{
				cnt_l = 0;
 8004f98:	4b2d      	ldr	r3, [pc, #180]	; (8005050 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8004f9e:	4b2c      	ldr	r3, [pc, #176]	; (8005050 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	2b04      	cmp	r3, #4
 8004fa4:	d90c      	bls.n	8004fc0 <_ZN10SideSensor12updateStatusEv+0x138>
				status_ |= 0x02;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	f043 0302 	orr.w	r3, r3, #2
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 8004fb4:	4b24      	ldr	r3, [pc, #144]	; (8005048 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 8004fba:	4b25      	ldr	r3, [pc, #148]	; (8005050 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8004fc0:	4b21      	ldr	r3, [pc, #132]	; (8005048 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d02e      	beq.n	8005026 <_ZN10SideSensor12updateStatusEv+0x19e>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8004fc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004fcc:	481f      	ldr	r0, [pc, #124]	; (800504c <_ZN10SideSensor12updateStatusEv+0x1c4>)
 8004fce:	f005 f959 	bl	800a284 <HAL_GPIO_ReadPin>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	bf14      	ite	ne
 8004fd8:	2301      	movne	r3, #1
 8004fda:	2300      	moveq	r3, #0
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d006      	beq.n	8004ff0 <_ZN10SideSensor12updateStatusEv+0x168>
				cnt_l++;
 8004fe2:	4b1b      	ldr	r3, [pc, #108]	; (8005050 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	4b19      	ldr	r3, [pc, #100]	; (8005050 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004fec:	801a      	strh	r2, [r3, #0]
 8004fee:	e002      	b.n	8004ff6 <_ZN10SideSensor12updateStatusEv+0x16e>
			}
			else{
				cnt_l = 0;
 8004ff0:	4b17      	ldr	r3, [pc, #92]	; (8005050 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8004ff6:	4b16      	ldr	r3, [pc, #88]	; (8005050 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	d913      	bls.n	8005026 <_ZN10SideSensor12updateStatusEv+0x19e>
				status_ ^= 0x02;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	f083 0302 	eor.w	r3, r3, #2
 8005006:	b29a      	uxth	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 800500c:	4b0e      	ldr	r3, [pc, #56]	; (8005048 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 800500e:	2200      	movs	r2, #0
 8005010:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	885b      	ldrh	r3, [r3, #2]
 8005016:	3301      	adds	r3, #1
 8005018:	b29a      	uxth	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	885a      	ldrh	r2, [r3, #2]
 8005022:	4b0c      	ldr	r3, [pc, #48]	; (8005054 <_ZN10SideSensor12updateStatusEv+0x1cc>)
 8005024:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	881a      	ldrh	r2, [r3, #0]
 800502a:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <_ZN10SideSensor12updateStatusEv+0x1d0>)
 800502c:	801a      	strh	r2, [r3, #0]
	}

}
 800502e:	bf00      	nop
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	200002aa 	.word	0x200002aa
 800503c:	40021000 	.word	0x40021000
 8005040:	200002ae 	.word	0x200002ae
 8005044:	200002a8 	.word	0x200002a8
 8005048:	200002ab 	.word	0x200002ab
 800504c:	40020c00 	.word	0x40020c00
 8005050:	200002ac 	.word	0x200002ac
 8005054:	200002a6 	.word	0x200002a6
 8005058:	200002a4 	.word	0x200002a4

0800505c <_ZN10SideSensor9getStatusEv>:
uint16_t SideSensor::getStatus()
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
	return status_;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	881b      	ldrh	r3, [r3, #0]
}
 8005068:	4618      	mov	r0, r3
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	889b      	ldrh	r3, [r3, #4]
}
 8005080:	4618      	mov	r0, r3
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	809a      	strh	r2, [r3, #4]
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	719a      	strb	r2, [r3, #6]
}
 80050ba:	bf00      	nop
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	719a      	strb	r2, [r3, #6]
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	799b      	ldrb	r3, [r3, #6]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4a10      	ldr	r2, [pc, #64]	; (8005148 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 8005108:	3308      	adds	r3, #8
 800510a:	4611      	mov	r1, r2
 800510c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005110:	4618      	mov	r0, r3
 8005112:	f00f fda5 	bl	8014c60 <memcpy>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	080191f0 	.word	0x080191f0

0800514c <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800515e:	2b00      	cmp	r3, #0
 8005160:	d010      	beq.n	8005184 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	ed97 0a00 	vldr	s0, [r7]
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff f86a 	bl	8004244 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 800517a:	eeb0 0a67 	vmov.f32	s0, s15
 800517e:	4610      	mov	r0, r2
 8005180:	f7ff f89c 	bl	80042bc <_ZN6Logger9storeLog2Ef>
	}

}
 8005184:	bf00      	nop
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a07      	ldr	r2, [pc, #28]	; (80051b8 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 800519a:	4908      	ldr	r1, [pc, #32]	; (80051bc <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff f974 	bl	800448a <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a06      	ldr	r2, [pc, #24]	; (80051c0 <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 80051a8:	4904      	ldr	r1, [pc, #16]	; (80051bc <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff f980 	bl	80044b0 <_ZN6Logger9saveLogs2EPKcS1_>
}
 80051b0:	bf00      	nop
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	080193e4 	.word	0x080193e4
 80051bc:	080193f0 	.word	0x080193f0
 80051c0:	080193fc 	.word	0x080193fc

080051c4 <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 80051c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d046      	beq.n	8005264 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80051e2:	461a      	mov	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3204      	adds	r2, #4
 80051e8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80051ec:	ee07 3a90 	vmov	s15, r3
 80051f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005204:	3301      	adds	r3, #1
 8005206:	b29a      	uxth	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005214:	4a15      	ldr	r2, [pc, #84]	; (800526c <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 8005216:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800521e:	2bf9      	cmp	r3, #249	; 0xf9
 8005220:	d903      	bls.n	800522a <_ZN20SystemIdentification10updateMsigEv+0x66>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	22fa      	movs	r2, #250	; 0xfa
 8005226:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685c      	ldr	r4, [r3, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005234:	4618      	mov	r0, r3
 8005236:	f7fb f99f 	bl	8000578 <__aeabi_f2d>
 800523a:	4605      	mov	r5, r0
 800523c:	460e      	mov	r6, r1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8005244:	eef1 7a67 	vneg.f32	s15, s15
 8005248:	ee17 3a90 	vmov	r3, s15
 800524c:	4618      	mov	r0, r3
 800524e:	f7fb f993 	bl	8000578 <__aeabi_f2d>
 8005252:	4602      	mov	r2, r0
 8005254:	460b      	mov	r3, r1
 8005256:	ec43 2b11 	vmov	d1, r2, r3
 800525a:	ec46 5b10 	vmov	d0, r5, r6
 800525e:	4620      	mov	r0, r4
 8005260:	f7ff fa98 	bl	8004794 <_ZN5Motor8setRatioEdd>

	}

}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800526c:	200002b0 	.word	0x200002b0

08005270 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4618      	mov	r0, r3
 800529e:	f7ff f9e4 	bl	800466a <_ZN6Logger5startEv>
	processing_flag_ = true;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 80052aa:	bf00      	nop
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	0000      	movs	r0, r0
 80052b4:	0000      	movs	r0, r0
	...

080052b8 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
	logger_->stop();
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff f9e1 	bl	800468c <_ZN6Logger4stopEv>
	processing_flag_ = false;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80052f8 <_ZN20SystemIdentification4stopEv+0x40>
 80052e2:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80052f8 <_ZN20SystemIdentification4stopEv+0x40>
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff fa54 	bl	8004794 <_ZN5Motor8setRatioEdd>
}
 80052ec:	bf00      	nop
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	f3af 8000 	nop.w
	...

08005300 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	605a      	str	r2, [r3, #4]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f04f 0200 	mov.w	r2, #0
 8005324:	609a      	str	r2, [r3, #8]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f04f 0200 	mov.w	r2, #0
 800532c:	60da      	str	r2, [r3, #12]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f04f 0200 	mov.w	r2, #0
 8005334:	611a      	str	r2, [r3, #16]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f04f 0200 	mov.w	r2, #0
 800533c:	615a      	str	r2, [r3, #20]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	619a      	str	r2, [r3, #24]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	61da      	str	r2, [r3, #28]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f04f 0200 	mov.w	r2, #0
 8005354:	621a      	str	r2, [r3, #32]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f04f 0200 	mov.w	r2, #0
 800535c:	625a      	str	r2, [r3, #36]	; 0x24
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
	...

08005398 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005398:	b590      	push	{r4, r7, lr}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a4:	f107 020c 	add.w	r2, r7, #12
 80053a8:	f107 0110 	add.w	r1, r7, #16
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fc f82b 	bl	8001408 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 80053b2:	ed97 7a04 	vldr	s14, [r7, #16]
 80053b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80053ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053be:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80053c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053c6:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 80053ca:	6978      	ldr	r0, [r7, #20]
 80053cc:	f7fb f8d4 	bl	8000578 <__aeabi_f2d>
 80053d0:	a30b      	add	r3, pc, #44	; (adr r3, 8005400 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 80053d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d6:	f7fb f927 	bl	8000628 <__aeabi_dmul>
 80053da:	4603      	mov	r3, r0
 80053dc:	460c      	mov	r4, r1
 80053de:	4618      	mov	r0, r3
 80053e0:	4621      	mov	r1, r4
 80053e2:	f7fb fc19 	bl	8000c18 <__aeabi_d2f>
 80053e6:	4602      	mov	r2, r0
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	ee07 3a90 	vmov	s15, r3
}
 80053f4:	eeb0 0a67 	vmov.f32	s0, s15
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd90      	pop	{r4, r7, pc}
 80053fe:	bf00      	nop
 8005400:	1ab1d998 	.word	0x1ab1d998
 8005404:	3f7830b5 	.word	0x3f7830b5

08005408 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	ed93 7a00 	vldr	s14, [r3]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	edd3 7a02 	vldr	s15, [r3, #8]
 800541c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005420:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800542a:	2b00      	cmp	r3, #0
 800542c:	d007      	beq.n	800543e <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 800542e:	4b48      	ldr	r3, [pc, #288]	; (8005550 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005430:	f04f 0200 	mov.w	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	edd3 7a04 	vldr	s15, [r3, #16]
 8005444:	ed97 7a05 	vldr	s14, [r7, #20]
 8005448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544c:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005450:	4b3f      	ldr	r3, [pc, #252]	; (8005550 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4618      	mov	r0, r3
 8005456:	f7fb f88f 	bl	8000578 <__aeabi_f2d>
 800545a:	4604      	mov	r4, r0
 800545c:	460d      	mov	r5, r1
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	ed93 7a06 	vldr	s14, [r3, #24]
 8005464:	edd7 7a05 	vldr	s15, [r7, #20]
 8005468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800546c:	ee17 0a90 	vmov	r0, s15
 8005470:	f7fb f882 	bl	8000578 <__aeabi_f2d>
 8005474:	a334      	add	r3, pc, #208	; (adr r3, 8005548 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547a:	f7fb f8d5 	bl	8000628 <__aeabi_dmul>
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	4620      	mov	r0, r4
 8005484:	4629      	mov	r1, r5
 8005486:	f7fa ff19 	bl	80002bc <__adddf3>
 800548a:	4603      	mov	r3, r0
 800548c:	460c      	mov	r4, r1
 800548e:	4618      	mov	r0, r3
 8005490:	4621      	mov	r1, r4
 8005492:	f7fb fbc1 	bl	8000c18 <__aeabi_d2f>
 8005496:	4602      	mov	r2, r0
 8005498:	4b2d      	ldr	r3, [pc, #180]	; (8005550 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800549a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	ed93 7a05 	vldr	s14, [r3, #20]
 80054a2:	4b2c      	ldr	r3, [pc, #176]	; (8005554 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 80054a4:	edd3 7a00 	vldr	s15, [r3]
 80054a8:	edd7 6a05 	vldr	s13, [r7, #20]
 80054ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80054b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b4:	ee17 0a90 	vmov	r0, s15
 80054b8:	f7fb f85e 	bl	8000578 <__aeabi_f2d>
 80054bc:	a322      	add	r3, pc, #136	; (adr r3, 8005548 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 80054be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c2:	f7fb f9db 	bl	800087c <__aeabi_ddiv>
 80054c6:	4603      	mov	r3, r0
 80054c8:	460c      	mov	r4, r1
 80054ca:	4618      	mov	r0, r3
 80054cc:	4621      	mov	r1, r4
 80054ce:	f7fb fba3 	bl	8000c18 <__aeabi_d2f>
 80054d2:	4603      	mov	r3, r0
 80054d4:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 80054d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80054da:	edd7 7a03 	vldr	s15, [r7, #12]
 80054de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054e2:	4b1b      	ldr	r3, [pc, #108]	; (8005550 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80054e4:	edd3 7a00 	vldr	s15, [r3]
 80054e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054ec:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80054fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80054fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005502:	ee17 0a90 	vmov	r0, s15
 8005506:	f7fb f837 	bl	8000578 <__aeabi_f2d>
 800550a:	4605      	mov	r5, r0
 800550c:	460e      	mov	r6, r1
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005514:	ed97 7a02 	vldr	s14, [r7, #8]
 8005518:	ee77 7a67 	vsub.f32	s15, s14, s15
 800551c:	ee17 0a90 	vmov	r0, s15
 8005520:	f7fb f82a 	bl	8000578 <__aeabi_f2d>
 8005524:	4602      	mov	r2, r0
 8005526:	460b      	mov	r3, r1
 8005528:	ec43 2b11 	vmov	d1, r2, r3
 800552c:	ec46 5b10 	vmov	d0, r5, r6
 8005530:	4620      	mov	r0, r4
 8005532:	f7ff f92f 	bl	8004794 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005536:	4a07      	ldr	r2, [pc, #28]	; (8005554 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	6013      	str	r3, [r2, #0]
}
 800553c:	bf00      	nop
 800553e:	371c      	adds	r7, #28
 8005540:	46bd      	mov	sp, r7
 8005542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005544:	f3af 8000 	nop.w
 8005548:	d2f1a9fc 	.word	0xd2f1a9fc
 800554c:	3f50624d 	.word	0x3f50624d
 8005550:	200002b8 	.word	0x200002b8
 8005554:	200002b4 	.word	0x200002b4

08005558 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	ed87 0a02 	vstr	s0, [r7, #8]
 8005564:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	605a      	str	r2, [r3, #4]
}
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	ed87 0a02 	vstr	s0, [r7, #8]
 800558c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800559c:	bf00      	nop
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80055b4:	edc7 0a01 	vstr	s1, [r7, #4]
 80055b8:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	615a      	str	r2, [r3, #20]
}
 80055ce:	bf00      	nop
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 80055da:	b480      	push	{r7}
 80055dc:	b085      	sub	sp, #20
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	ed87 0a02 	vstr	s0, [r7, #8]
 80055e6:	edc7 0a01 	vstr	s1, [r7, #4]
 80055ea:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	621a      	str	r2, [r3, #32]
}
 8005600:	bf00      	nop
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7ff febf 	bl	8005398 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7ff feef 	bl	8005408 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 800562a:	bf00      	nop
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005632:	b480      	push	{r7}
 8005634:	b083      	sub	sp, #12
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
	...

08005658 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005688 <_ZN12VelocityCtrl4stopEv+0x30>
 8005670:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005688 <_ZN12VelocityCtrl4stopEv+0x30>
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff f88d 	bl	8004794 <_ZN5Motor8setRatioEdd>

}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	f3af 8000 	nop.w
	...

08005690 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	ee07 3a90 	vmov	s15, r3
}
 80056a0:	eeb0 0a67 	vmov.f32	s0, s15
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
	...

080056b0 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a1e      	ldr	r2, [pc, #120]	; (8005738 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d10e      	bne.n	80056e0 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 80056c2:	f001 fe27 	bl	8007314 <cppFlip100ns>

		tim7_timer++;
 80056c6:	4b1d      	ldr	r3, [pc, #116]	; (800573c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3301      	adds	r3, #1
 80056cc:	4a1b      	ldr	r2, [pc, #108]	; (800573c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80056ce:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 80056d0:	4b1a      	ldr	r3, [pc, #104]	; (800573c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a1a      	ldr	r2, [pc, #104]	; (8005740 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d902      	bls.n	80056e0 <HAL_TIM_PeriodElapsedCallback+0x30>
 80056da:	4b18      	ldr	r3, [pc, #96]	; (800573c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a17      	ldr	r2, [pc, #92]	; (8005744 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d10e      	bne.n	8005708 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 80056ea:	f001 fdc9 	bl	8007280 <cppFlip1ms>

		tim6_timer++;
 80056ee:	4b16      	ldr	r3, [pc, #88]	; (8005748 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3301      	adds	r3, #1
 80056f4:	4a14      	ldr	r2, [pc, #80]	; (8005748 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80056f6:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 80056f8:	4b13      	ldr	r3, [pc, #76]	; (8005748 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a10      	ldr	r2, [pc, #64]	; (8005740 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d902      	bls.n	8005708 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005702:	4b11      	ldr	r3, [pc, #68]	; (8005748 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005704:	2200      	movs	r2, #0
 8005706:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a0f      	ldr	r2, [pc, #60]	; (800574c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d10e      	bne.n	8005730 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005712:	f001 fe09 	bl	8007328 <cppFlip10ms>

		tim13_timer++;
 8005716:	4b0e      	ldr	r3, [pc, #56]	; (8005750 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	3301      	adds	r3, #1
 800571c:	4a0c      	ldr	r2, [pc, #48]	; (8005750 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800571e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005720:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a06      	ldr	r2, [pc, #24]	; (8005740 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d902      	bls.n	8005730 <HAL_TIM_PeriodElapsedCallback+0x80>
 800572a:	4b09      	ldr	r3, [pc, #36]	; (8005750 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]
	}

}
 8005730:	bf00      	nop
 8005732:	3708      	adds	r7, #8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40001400 	.word	0x40001400
 800573c:	2003ea94 	.word	0x2003ea94
 8005740:	0001869f 	.word	0x0001869f
 8005744:	40001000 	.word	0x40001000
 8005748:	2003ea50 	.word	0x2003ea50
 800574c:	40001c00 	.word	0x40001c00
 8005750:	2003ea98 	.word	0x2003ea98

08005754 <init>:

void init()
{
 8005754:	b580      	push	{r7, lr}
 8005756:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005758:	2201      	movs	r2, #1
 800575a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800575e:	4808      	ldr	r0, [pc, #32]	; (8005780 <init+0x2c>)
 8005760:	f004 fda8 	bl	800a2b4 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005764:	4807      	ldr	r0, [pc, #28]	; (8005784 <init+0x30>)
 8005766:	f008 fc70 	bl	800e04a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 800576a:	4807      	ldr	r0, [pc, #28]	; (8005788 <init+0x34>)
 800576c:	f008 fc6d 	bl	800e04a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005770:	4806      	ldr	r0, [pc, #24]	; (800578c <init+0x38>)
 8005772:	f008 fc6a 	bl	800e04a <HAL_TIM_Base_Start_IT>

	cppInit();
 8005776:	f001 fce3 	bl	8007140 <cppInit>

	//path_following_initialize();

}
 800577a:	bf00      	nop
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	40021000 	.word	0x40021000
 8005784:	2003eb7c 	.word	0x2003eb7c
 8005788:	2003ed20 	.word	0x2003ed20
 800578c:	2003ea9c 	.word	0x2003ea9c

08005790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005794:	f003 fa86 	bl	8008ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005798:	f000 f82a 	bl	80057f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800579c:	f000 fdbc 	bl	8006318 <MX_GPIO_Init>
  MX_DMA_Init();
 80057a0:	f000 fd8a 	bl	80062b8 <MX_DMA_Init>
  MX_I2C2_Init();
 80057a4:	f000 f9e8 	bl	8005b78 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 80057a8:	f000 fa14 	bl	8005bd4 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 80057ac:	f000 fa32 	bl	8005c14 <MX_SPI2_Init>
  MX_TIM1_Init();
 80057b0:	f000 fa66 	bl	8005c80 <MX_TIM1_Init>
  MX_TIM4_Init();
 80057b4:	f000 fb70 	bl	8005e98 <MX_TIM4_Init>
  MX_TIM8_Init();
 80057b8:	f000 fc3c 	bl	8006034 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80057bc:	f000 fd52 	bl	8006264 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80057c0:	f00a fc16 	bl	800fff0 <MX_FATFS_Init>
  MX_TIM6_Init();
 80057c4:	f000 fbcc 	bl	8005f60 <MX_TIM6_Init>
  MX_I2C1_Init();
 80057c8:	f000 f9a8 	bl	8005b1c <MX_I2C1_Init>
  MX_TIM3_Init();
 80057cc:	f000 fb00 	bl	8005dd0 <MX_TIM3_Init>
  MX_TIM10_Init();
 80057d0:	f000 fc88 	bl	80060e4 <MX_TIM10_Init>
  MX_TIM11_Init();
 80057d4:	f000 fcd4 	bl	8006180 <MX_TIM11_Init>
  MX_ADC2_Init();
 80057d8:	f000 f898 	bl	800590c <MX_ADC2_Init>
  MX_TIM7_Init();
 80057dc:	f000 fbf6 	bl	8005fcc <MX_TIM7_Init>
  MX_TIM13_Init();
 80057e0:	f000 fd1c 	bl	800621c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 80057e4:	f7ff ffb6 	bl	8005754 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 80057e8:	f001 fdb6 	bl	8007358 <cppLoop>
 80057ec:	e7fc      	b.n	80057e8 <main+0x58>
	...

080057f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b0a4      	sub	sp, #144	; 0x90
 80057f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80057f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80057fa:	2234      	movs	r2, #52	; 0x34
 80057fc:	2100      	movs	r1, #0
 80057fe:	4618      	mov	r0, r3
 8005800:	f00f fa39 	bl	8014c76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005804:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	605a      	str	r2, [r3, #4]
 800580e:	609a      	str	r2, [r3, #8]
 8005810:	60da      	str	r2, [r3, #12]
 8005812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005814:	f107 030c 	add.w	r3, r7, #12
 8005818:	223c      	movs	r2, #60	; 0x3c
 800581a:	2100      	movs	r1, #0
 800581c:	4618      	mov	r0, r3
 800581e:	f00f fa2a 	bl	8014c76 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005822:	2300      	movs	r3, #0
 8005824:	60bb      	str	r3, [r7, #8]
 8005826:	4b37      	ldr	r3, [pc, #220]	; (8005904 <SystemClock_Config+0x114>)
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	4a36      	ldr	r2, [pc, #216]	; (8005904 <SystemClock_Config+0x114>)
 800582c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005830:	6413      	str	r3, [r2, #64]	; 0x40
 8005832:	4b34      	ldr	r3, [pc, #208]	; (8005904 <SystemClock_Config+0x114>)
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800583a:	60bb      	str	r3, [r7, #8]
 800583c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800583e:	2300      	movs	r3, #0
 8005840:	607b      	str	r3, [r7, #4]
 8005842:	4b31      	ldr	r3, [pc, #196]	; (8005908 <SystemClock_Config+0x118>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a30      	ldr	r2, [pc, #192]	; (8005908 <SystemClock_Config+0x118>)
 8005848:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	4b2e      	ldr	r3, [pc, #184]	; (8005908 <SystemClock_Config+0x118>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005856:	607b      	str	r3, [r7, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800585a:	2301      	movs	r3, #1
 800585c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800585e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005862:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005864:	2302      	movs	r3, #2
 8005866:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005868:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800586c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 800586e:	2308      	movs	r3, #8
 8005870:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005872:	23b4      	movs	r3, #180	; 0xb4
 8005874:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005878:	2302      	movs	r3, #2
 800587a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800587e:	2308      	movs	r3, #8
 8005880:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005884:	2302      	movs	r3, #2
 8005886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800588a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800588e:	4618      	mov	r0, r3
 8005890:	f006 f932 	bl	800baf8 <HAL_RCC_OscConfig>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800589a:	f000 fe7f 	bl	800659c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800589e:	f005 fcad 	bl	800b1fc <HAL_PWREx_EnableOverDrive>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80058a8:	f000 fe78 	bl	800659c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80058ac:	230f      	movs	r3, #15
 80058ae:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80058b0:	2302      	movs	r3, #2
 80058b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80058b4:	2300      	movs	r3, #0
 80058b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80058b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80058bc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80058be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058c2:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80058c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80058c8:	2105      	movs	r1, #5
 80058ca:	4618      	mov	r0, r3
 80058cc:	f005 fce6 	bl	800b29c <HAL_RCC_ClockConfig>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <SystemClock_Config+0xea>
  {
    Error_Handler();
 80058d6:	f000 fe61 	bl	800659c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80058da:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80058de:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80058e0:	2300      	movs	r3, #0
 80058e2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80058e4:	2300      	movs	r3, #0
 80058e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80058e8:	f107 030c 	add.w	r3, r7, #12
 80058ec:	4618      	mov	r0, r3
 80058ee:	f005 fec5 	bl	800b67c <HAL_RCCEx_PeriphCLKConfig>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80058f8:	f000 fe50 	bl	800659c <Error_Handler>
  }
}
 80058fc:	bf00      	nop
 80058fe:	3790      	adds	r7, #144	; 0x90
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	40023800 	.word	0x40023800
 8005908:	40007000 	.word	0x40007000

0800590c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005912:	463b      	mov	r3, r7
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	605a      	str	r2, [r3, #4]
 800591a:	609a      	str	r2, [r3, #8]
 800591c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800591e:	4b7c      	ldr	r3, [pc, #496]	; (8005b10 <MX_ADC2_Init+0x204>)
 8005920:	4a7c      	ldr	r2, [pc, #496]	; (8005b14 <MX_ADC2_Init+0x208>)
 8005922:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005924:	4b7a      	ldr	r3, [pc, #488]	; (8005b10 <MX_ADC2_Init+0x204>)
 8005926:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800592a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800592c:	4b78      	ldr	r3, [pc, #480]	; (8005b10 <MX_ADC2_Init+0x204>)
 800592e:	2200      	movs	r2, #0
 8005930:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005932:	4b77      	ldr	r3, [pc, #476]	; (8005b10 <MX_ADC2_Init+0x204>)
 8005934:	2201      	movs	r2, #1
 8005936:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005938:	4b75      	ldr	r3, [pc, #468]	; (8005b10 <MX_ADC2_Init+0x204>)
 800593a:	2201      	movs	r2, #1
 800593c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800593e:	4b74      	ldr	r3, [pc, #464]	; (8005b10 <MX_ADC2_Init+0x204>)
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005946:	4b72      	ldr	r3, [pc, #456]	; (8005b10 <MX_ADC2_Init+0x204>)
 8005948:	2200      	movs	r2, #0
 800594a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800594c:	4b70      	ldr	r3, [pc, #448]	; (8005b10 <MX_ADC2_Init+0x204>)
 800594e:	4a72      	ldr	r2, [pc, #456]	; (8005b18 <MX_ADC2_Init+0x20c>)
 8005950:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005952:	4b6f      	ldr	r3, [pc, #444]	; (8005b10 <MX_ADC2_Init+0x204>)
 8005954:	2200      	movs	r2, #0
 8005956:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8005958:	4b6d      	ldr	r3, [pc, #436]	; (8005b10 <MX_ADC2_Init+0x204>)
 800595a:	220e      	movs	r2, #14
 800595c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800595e:	4b6c      	ldr	r3, [pc, #432]	; (8005b10 <MX_ADC2_Init+0x204>)
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005966:	4b6a      	ldr	r3, [pc, #424]	; (8005b10 <MX_ADC2_Init+0x204>)
 8005968:	2201      	movs	r2, #1
 800596a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800596c:	4868      	ldr	r0, [pc, #416]	; (8005b10 <MX_ADC2_Init+0x204>)
 800596e:	f003 fa2d 	bl	8008dcc <HAL_ADC_Init>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005978:	f000 fe10 	bl	800659c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800597c:	230a      	movs	r3, #10
 800597e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005980:	2301      	movs	r3, #1
 8005982:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005984:	2306      	movs	r3, #6
 8005986:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005988:	463b      	mov	r3, r7
 800598a:	4619      	mov	r1, r3
 800598c:	4860      	ldr	r0, [pc, #384]	; (8005b10 <MX_ADC2_Init+0x204>)
 800598e:	f003 fb71 	bl	8009074 <HAL_ADC_ConfigChannel>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005998:	f000 fe00 	bl	800659c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800599c:	230b      	movs	r3, #11
 800599e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80059a0:	2302      	movs	r3, #2
 80059a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80059a4:	463b      	mov	r3, r7
 80059a6:	4619      	mov	r1, r3
 80059a8:	4859      	ldr	r0, [pc, #356]	; (8005b10 <MX_ADC2_Init+0x204>)
 80059aa:	f003 fb63 	bl	8009074 <HAL_ADC_ConfigChannel>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80059b4:	f000 fdf2 	bl	800659c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80059b8:	230c      	movs	r3, #12
 80059ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80059bc:	2303      	movs	r3, #3
 80059be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80059c0:	463b      	mov	r3, r7
 80059c2:	4619      	mov	r1, r3
 80059c4:	4852      	ldr	r0, [pc, #328]	; (8005b10 <MX_ADC2_Init+0x204>)
 80059c6:	f003 fb55 	bl	8009074 <HAL_ADC_ConfigChannel>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d001      	beq.n	80059d4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80059d0:	f000 fde4 	bl	800659c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80059d4:	230d      	movs	r3, #13
 80059d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80059d8:	2304      	movs	r3, #4
 80059da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80059dc:	463b      	mov	r3, r7
 80059de:	4619      	mov	r1, r3
 80059e0:	484b      	ldr	r0, [pc, #300]	; (8005b10 <MX_ADC2_Init+0x204>)
 80059e2:	f003 fb47 	bl	8009074 <HAL_ADC_ConfigChannel>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80059ec:	f000 fdd6 	bl	800659c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80059f0:	2300      	movs	r3, #0
 80059f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80059f4:	2305      	movs	r3, #5
 80059f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80059f8:	463b      	mov	r3, r7
 80059fa:	4619      	mov	r1, r3
 80059fc:	4844      	ldr	r0, [pc, #272]	; (8005b10 <MX_ADC2_Init+0x204>)
 80059fe:	f003 fb39 	bl	8009074 <HAL_ADC_ConfigChannel>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005a08:	f000 fdc8 	bl	800659c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005a10:	2306      	movs	r3, #6
 8005a12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a14:	463b      	mov	r3, r7
 8005a16:	4619      	mov	r1, r3
 8005a18:	483d      	ldr	r0, [pc, #244]	; (8005b10 <MX_ADC2_Init+0x204>)
 8005a1a:	f003 fb2b 	bl	8009074 <HAL_ADC_ConfigChannel>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8005a24:	f000 fdba 	bl	800659c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005a28:	2302      	movs	r3, #2
 8005a2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005a2c:	2307      	movs	r3, #7
 8005a2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a30:	463b      	mov	r3, r7
 8005a32:	4619      	mov	r1, r3
 8005a34:	4836      	ldr	r0, [pc, #216]	; (8005b10 <MX_ADC2_Init+0x204>)
 8005a36:	f003 fb1d 	bl	8009074 <HAL_ADC_ConfigChannel>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8005a40:	f000 fdac 	bl	800659c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005a44:	2303      	movs	r3, #3
 8005a46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005a48:	2308      	movs	r3, #8
 8005a4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a4c:	463b      	mov	r3, r7
 8005a4e:	4619      	mov	r1, r3
 8005a50:	482f      	ldr	r0, [pc, #188]	; (8005b10 <MX_ADC2_Init+0x204>)
 8005a52:	f003 fb0f 	bl	8009074 <HAL_ADC_ConfigChannel>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8005a5c:	f000 fd9e 	bl	800659c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005a60:	2304      	movs	r3, #4
 8005a62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8005a64:	2309      	movs	r3, #9
 8005a66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a68:	463b      	mov	r3, r7
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4828      	ldr	r0, [pc, #160]	; (8005b10 <MX_ADC2_Init+0x204>)
 8005a6e:	f003 fb01 	bl	8009074 <HAL_ADC_ConfigChannel>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8005a78:	f000 fd90 	bl	800659c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005a7c:	2305      	movs	r3, #5
 8005a7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8005a80:	230a      	movs	r3, #10
 8005a82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a84:	463b      	mov	r3, r7
 8005a86:	4619      	mov	r1, r3
 8005a88:	4821      	ldr	r0, [pc, #132]	; (8005b10 <MX_ADC2_Init+0x204>)
 8005a8a:	f003 faf3 	bl	8009074 <HAL_ADC_ConfigChannel>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8005a94:	f000 fd82 	bl	800659c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005a98:	2306      	movs	r3, #6
 8005a9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8005a9c:	230b      	movs	r3, #11
 8005a9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005aa0:	463b      	mov	r3, r7
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	481a      	ldr	r0, [pc, #104]	; (8005b10 <MX_ADC2_Init+0x204>)
 8005aa6:	f003 fae5 	bl	8009074 <HAL_ADC_ConfigChannel>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d001      	beq.n	8005ab4 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8005ab0:	f000 fd74 	bl	800659c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005ab4:	2307      	movs	r3, #7
 8005ab6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8005ab8:	230c      	movs	r3, #12
 8005aba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005abc:	463b      	mov	r3, r7
 8005abe:	4619      	mov	r1, r3
 8005ac0:	4813      	ldr	r0, [pc, #76]	; (8005b10 <MX_ADC2_Init+0x204>)
 8005ac2:	f003 fad7 	bl	8009074 <HAL_ADC_ConfigChannel>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8005acc:	f000 fd66 	bl	800659c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005ad0:	2308      	movs	r3, #8
 8005ad2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8005ad4:	230d      	movs	r3, #13
 8005ad6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ad8:	463b      	mov	r3, r7
 8005ada:	4619      	mov	r1, r3
 8005adc:	480c      	ldr	r0, [pc, #48]	; (8005b10 <MX_ADC2_Init+0x204>)
 8005ade:	f003 fac9 	bl	8009074 <HAL_ADC_ConfigChannel>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8005ae8:	f000 fd58 	bl	800659c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005aec:	2309      	movs	r3, #9
 8005aee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8005af0:	230e      	movs	r3, #14
 8005af2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005af4:	463b      	mov	r3, r7
 8005af6:	4619      	mov	r1, r3
 8005af8:	4805      	ldr	r0, [pc, #20]	; (8005b10 <MX_ADC2_Init+0x204>)
 8005afa:	f003 fabb 	bl	8009074 <HAL_ADC_ConfigChannel>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8005b04:	f000 fd4a 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005b08:	bf00      	nop
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	2003e920 	.word	0x2003e920
 8005b14:	40012100 	.word	0x40012100
 8005b18:	0f000001 	.word	0x0f000001

08005b1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005b20:	4b12      	ldr	r3, [pc, #72]	; (8005b6c <MX_I2C1_Init+0x50>)
 8005b22:	4a13      	ldr	r2, [pc, #76]	; (8005b70 <MX_I2C1_Init+0x54>)
 8005b24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005b26:	4b11      	ldr	r3, [pc, #68]	; (8005b6c <MX_I2C1_Init+0x50>)
 8005b28:	4a12      	ldr	r2, [pc, #72]	; (8005b74 <MX_I2C1_Init+0x58>)
 8005b2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005b2c:	4b0f      	ldr	r3, [pc, #60]	; (8005b6c <MX_I2C1_Init+0x50>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005b32:	4b0e      	ldr	r3, [pc, #56]	; (8005b6c <MX_I2C1_Init+0x50>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005b38:	4b0c      	ldr	r3, [pc, #48]	; (8005b6c <MX_I2C1_Init+0x50>)
 8005b3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005b40:	4b0a      	ldr	r3, [pc, #40]	; (8005b6c <MX_I2C1_Init+0x50>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005b46:	4b09      	ldr	r3, [pc, #36]	; (8005b6c <MX_I2C1_Init+0x50>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005b4c:	4b07      	ldr	r3, [pc, #28]	; (8005b6c <MX_I2C1_Init+0x50>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005b52:	4b06      	ldr	r3, [pc, #24]	; (8005b6c <MX_I2C1_Init+0x50>)
 8005b54:	2280      	movs	r2, #128	; 0x80
 8005b56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005b58:	4804      	ldr	r0, [pc, #16]	; (8005b6c <MX_I2C1_Init+0x50>)
 8005b5a:	f004 fbc5 	bl	800a2e8 <HAL_I2C_Init>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005b64:	f000 fd1a 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005b68:	bf00      	nop
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	2003e968 	.word	0x2003e968
 8005b70:	40005400 	.word	0x40005400
 8005b74:	000186a0 	.word	0x000186a0

08005b78 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005b7c:	4b12      	ldr	r3, [pc, #72]	; (8005bc8 <MX_I2C2_Init+0x50>)
 8005b7e:	4a13      	ldr	r2, [pc, #76]	; (8005bcc <MX_I2C2_Init+0x54>)
 8005b80:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005b82:	4b11      	ldr	r3, [pc, #68]	; (8005bc8 <MX_I2C2_Init+0x50>)
 8005b84:	4a12      	ldr	r2, [pc, #72]	; (8005bd0 <MX_I2C2_Init+0x58>)
 8005b86:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005b88:	4b0f      	ldr	r3, [pc, #60]	; (8005bc8 <MX_I2C2_Init+0x50>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005b8e:	4b0e      	ldr	r3, [pc, #56]	; (8005bc8 <MX_I2C2_Init+0x50>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005b94:	4b0c      	ldr	r3, [pc, #48]	; (8005bc8 <MX_I2C2_Init+0x50>)
 8005b96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b9a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005b9c:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <MX_I2C2_Init+0x50>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005ba2:	4b09      	ldr	r3, [pc, #36]	; (8005bc8 <MX_I2C2_Init+0x50>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005ba8:	4b07      	ldr	r3, [pc, #28]	; (8005bc8 <MX_I2C2_Init+0x50>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005bae:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <MX_I2C2_Init+0x50>)
 8005bb0:	2280      	movs	r2, #128	; 0x80
 8005bb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005bb4:	4804      	ldr	r0, [pc, #16]	; (8005bc8 <MX_I2C2_Init+0x50>)
 8005bb6:	f004 fb97 	bl	800a2e8 <HAL_I2C_Init>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005bc0:	f000 fcec 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005bc4:	bf00      	nop
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	2003e9fc 	.word	0x2003e9fc
 8005bcc:	40005800 	.word	0x40005800
 8005bd0:	000186a0 	.word	0x000186a0

08005bd4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8005bd8:	4b0c      	ldr	r3, [pc, #48]	; (8005c0c <MX_SDIO_SD_Init+0x38>)
 8005bda:	4a0d      	ldr	r2, [pc, #52]	; (8005c10 <MX_SDIO_SD_Init+0x3c>)
 8005bdc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8005bde:	4b0b      	ldr	r3, [pc, #44]	; (8005c0c <MX_SDIO_SD_Init+0x38>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8005be4:	4b09      	ldr	r3, [pc, #36]	; (8005c0c <MX_SDIO_SD_Init+0x38>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005bea:	4b08      	ldr	r3, [pc, #32]	; (8005c0c <MX_SDIO_SD_Init+0x38>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8005bf0:	4b06      	ldr	r3, [pc, #24]	; (8005c0c <MX_SDIO_SD_Init+0x38>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005bf6:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <MX_SDIO_SD_Init+0x38>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8005bfc:	4b03      	ldr	r3, [pc, #12]	; (8005c0c <MX_SDIO_SD_Init+0x38>)
 8005bfe:	2202      	movs	r2, #2
 8005c00:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8005c02:	bf00      	nop
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	2003ebfc 	.word	0x2003ebfc
 8005c10:	40012c00 	.word	0x40012c00

08005c14 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005c18:	4b17      	ldr	r3, [pc, #92]	; (8005c78 <MX_SPI2_Init+0x64>)
 8005c1a:	4a18      	ldr	r2, [pc, #96]	; (8005c7c <MX_SPI2_Init+0x68>)
 8005c1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005c1e:	4b16      	ldr	r3, [pc, #88]	; (8005c78 <MX_SPI2_Init+0x64>)
 8005c20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005c24:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005c26:	4b14      	ldr	r3, [pc, #80]	; (8005c78 <MX_SPI2_Init+0x64>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005c2c:	4b12      	ldr	r3, [pc, #72]	; (8005c78 <MX_SPI2_Init+0x64>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005c32:	4b11      	ldr	r3, [pc, #68]	; (8005c78 <MX_SPI2_Init+0x64>)
 8005c34:	2202      	movs	r2, #2
 8005c36:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005c38:	4b0f      	ldr	r3, [pc, #60]	; (8005c78 <MX_SPI2_Init+0x64>)
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005c3e:	4b0e      	ldr	r3, [pc, #56]	; (8005c78 <MX_SPI2_Init+0x64>)
 8005c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c44:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005c46:	4b0c      	ldr	r3, [pc, #48]	; (8005c78 <MX_SPI2_Init+0x64>)
 8005c48:	2228      	movs	r2, #40	; 0x28
 8005c4a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	; (8005c78 <MX_SPI2_Init+0x64>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005c52:	4b09      	ldr	r3, [pc, #36]	; (8005c78 <MX_SPI2_Init+0x64>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c58:	4b07      	ldr	r3, [pc, #28]	; (8005c78 <MX_SPI2_Init+0x64>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005c5e:	4b06      	ldr	r3, [pc, #24]	; (8005c78 <MX_SPI2_Init+0x64>)
 8005c60:	220a      	movs	r2, #10
 8005c62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005c64:	4804      	ldr	r0, [pc, #16]	; (8005c78 <MX_SPI2_Init+0x64>)
 8005c66:	f007 fc71 	bl	800d54c <HAL_SPI_Init>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005c70:	f000 fc94 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005c74:	bf00      	nop
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	2003e848 	.word	0x2003e848
 8005c7c:	40003800 	.word	0x40003800

08005c80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b09a      	sub	sp, #104	; 0x68
 8005c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005c86:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005c8a:	2224      	movs	r2, #36	; 0x24
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f00e fff1 	bl	8014c76 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c9e:	f107 0320 	add.w	r3, r7, #32
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	605a      	str	r2, [r3, #4]
 8005ca8:	609a      	str	r2, [r3, #8]
 8005caa:	60da      	str	r2, [r3, #12]
 8005cac:	611a      	str	r2, [r3, #16]
 8005cae:	615a      	str	r2, [r3, #20]
 8005cb0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005cb2:	463b      	mov	r3, r7
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	2100      	movs	r1, #0
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f00e ffdc 	bl	8014c76 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005cbe:	4b42      	ldr	r3, [pc, #264]	; (8005dc8 <MX_TIM1_Init+0x148>)
 8005cc0:	4a42      	ldr	r2, [pc, #264]	; (8005dcc <MX_TIM1_Init+0x14c>)
 8005cc2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005cc4:	4b40      	ldr	r3, [pc, #256]	; (8005dc8 <MX_TIM1_Init+0x148>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cca:	4b3f      	ldr	r3, [pc, #252]	; (8005dc8 <MX_TIM1_Init+0x148>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005cd0:	4b3d      	ldr	r3, [pc, #244]	; (8005dc8 <MX_TIM1_Init+0x148>)
 8005cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cd6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cd8:	4b3b      	ldr	r3, [pc, #236]	; (8005dc8 <MX_TIM1_Init+0x148>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005cde:	4b3a      	ldr	r3, [pc, #232]	; (8005dc8 <MX_TIM1_Init+0x148>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ce4:	4b38      	ldr	r3, [pc, #224]	; (8005dc8 <MX_TIM1_Init+0x148>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005cea:	4837      	ldr	r0, [pc, #220]	; (8005dc8 <MX_TIM1_Init+0x148>)
 8005cec:	f008 f9d1 	bl	800e092 <HAL_TIM_PWM_Init>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8005cf6:	f000 fc51 	bl	800659c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005d02:	2301      	movs	r3, #1
 8005d04:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005d06:	2300      	movs	r3, #0
 8005d08:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005d12:	2301      	movs	r3, #1
 8005d14:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005d16:	2300      	movs	r3, #0
 8005d18:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005d1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005d22:	4619      	mov	r1, r3
 8005d24:	4828      	ldr	r0, [pc, #160]	; (8005dc8 <MX_TIM1_Init+0x148>)
 8005d26:	f008 fa1d 	bl	800e164 <HAL_TIM_Encoder_Init>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8005d30:	f000 fc34 	bl	800659c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d34:	2300      	movs	r3, #0
 8005d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005d3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005d40:	4619      	mov	r1, r3
 8005d42:	4821      	ldr	r0, [pc, #132]	; (8005dc8 <MX_TIM1_Init+0x148>)
 8005d44:	f008 ff44 	bl	800ebd0 <HAL_TIMEx_MasterConfigSynchronization>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8005d4e:	f000 fc25 	bl	800659c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005d52:	2360      	movs	r3, #96	; 0x60
 8005d54:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8005d56:	2300      	movs	r3, #0
 8005d58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d62:	2300      	movs	r3, #0
 8005d64:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005d66:	2300      	movs	r3, #0
 8005d68:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005d6e:	f107 0320 	add.w	r3, r7, #32
 8005d72:	2208      	movs	r2, #8
 8005d74:	4619      	mov	r1, r3
 8005d76:	4814      	ldr	r0, [pc, #80]	; (8005dc8 <MX_TIM1_Init+0x148>)
 8005d78:	f008 fbc6 	bl	800e508 <HAL_TIM_PWM_ConfigChannel>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8005d82:	f000 fc0b 	bl	800659c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005d86:	2300      	movs	r3, #0
 8005d88:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005d92:	2300      	movs	r3, #0
 8005d94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005d96:	2300      	movs	r3, #0
 8005d98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005d9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d9e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005da0:	2300      	movs	r3, #0
 8005da2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005da4:	463b      	mov	r3, r7
 8005da6:	4619      	mov	r1, r3
 8005da8:	4807      	ldr	r0, [pc, #28]	; (8005dc8 <MX_TIM1_Init+0x148>)
 8005daa:	f008 ff8d 	bl	800ecc8 <HAL_TIMEx_ConfigBreakDeadTime>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8005db4:	f000 fbf2 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005db8:	4803      	ldr	r0, [pc, #12]	; (8005dc8 <MX_TIM1_Init+0x148>)
 8005dba:	f000 ffdf 	bl	8006d7c <HAL_TIM_MspPostInit>

}
 8005dbe:	bf00      	nop
 8005dc0:	3768      	adds	r7, #104	; 0x68
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	2003ebbc 	.word	0x2003ebbc
 8005dcc:	40010000 	.word	0x40010000

08005dd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08a      	sub	sp, #40	; 0x28
 8005dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005dd6:	f107 0320 	add.w	r3, r7, #32
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005de0:	1d3b      	adds	r3, r7, #4
 8005de2:	2200      	movs	r2, #0
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	605a      	str	r2, [r3, #4]
 8005de8:	609a      	str	r2, [r3, #8]
 8005dea:	60da      	str	r2, [r3, #12]
 8005dec:	611a      	str	r2, [r3, #16]
 8005dee:	615a      	str	r2, [r3, #20]
 8005df0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005df2:	4b27      	ldr	r3, [pc, #156]	; (8005e90 <MX_TIM3_Init+0xc0>)
 8005df4:	4a27      	ldr	r2, [pc, #156]	; (8005e94 <MX_TIM3_Init+0xc4>)
 8005df6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005df8:	4b25      	ldr	r3, [pc, #148]	; (8005e90 <MX_TIM3_Init+0xc0>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dfe:	4b24      	ldr	r3, [pc, #144]	; (8005e90 <MX_TIM3_Init+0xc0>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005e04:	4b22      	ldr	r3, [pc, #136]	; (8005e90 <MX_TIM3_Init+0xc0>)
 8005e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e0c:	4b20      	ldr	r3, [pc, #128]	; (8005e90 <MX_TIM3_Init+0xc0>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e12:	4b1f      	ldr	r3, [pc, #124]	; (8005e90 <MX_TIM3_Init+0xc0>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005e18:	481d      	ldr	r0, [pc, #116]	; (8005e90 <MX_TIM3_Init+0xc0>)
 8005e1a:	f008 f93a 	bl	800e092 <HAL_TIM_PWM_Init>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005e24:	f000 fbba 	bl	800659c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005e30:	f107 0320 	add.w	r3, r7, #32
 8005e34:	4619      	mov	r1, r3
 8005e36:	4816      	ldr	r0, [pc, #88]	; (8005e90 <MX_TIM3_Init+0xc0>)
 8005e38:	f008 feca 	bl	800ebd0 <HAL_TIMEx_MasterConfigSynchronization>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8005e42:	f000 fbab 	bl	800659c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e46:	2360      	movs	r3, #96	; 0x60
 8005e48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e52:	2300      	movs	r3, #0
 8005e54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005e56:	1d3b      	adds	r3, r7, #4
 8005e58:	2200      	movs	r2, #0
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	480c      	ldr	r0, [pc, #48]	; (8005e90 <MX_TIM3_Init+0xc0>)
 8005e5e:	f008 fb53 	bl	800e508 <HAL_TIM_PWM_ConfigChannel>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8005e68:	f000 fb98 	bl	800659c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005e6c:	1d3b      	adds	r3, r7, #4
 8005e6e:	2204      	movs	r2, #4
 8005e70:	4619      	mov	r1, r3
 8005e72:	4807      	ldr	r0, [pc, #28]	; (8005e90 <MX_TIM3_Init+0xc0>)
 8005e74:	f008 fb48 	bl	800e508 <HAL_TIM_PWM_ConfigChannel>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005e7e:	f000 fb8d 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005e82:	4803      	ldr	r0, [pc, #12]	; (8005e90 <MX_TIM3_Init+0xc0>)
 8005e84:	f000 ff7a 	bl	8006d7c <HAL_TIM_MspPostInit>

}
 8005e88:	bf00      	nop
 8005e8a:	3728      	adds	r7, #40	; 0x28
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	2003ea54 	.word	0x2003ea54
 8005e94:	40000400 	.word	0x40000400

08005e98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08a      	sub	sp, #40	; 0x28
 8005e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e9e:	f107 0320 	add.w	r3, r7, #32
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005ea8:	1d3b      	adds	r3, r7, #4
 8005eaa:	2200      	movs	r2, #0
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	605a      	str	r2, [r3, #4]
 8005eb0:	609a      	str	r2, [r3, #8]
 8005eb2:	60da      	str	r2, [r3, #12]
 8005eb4:	611a      	str	r2, [r3, #16]
 8005eb6:	615a      	str	r2, [r3, #20]
 8005eb8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005eba:	4b27      	ldr	r3, [pc, #156]	; (8005f58 <MX_TIM4_Init+0xc0>)
 8005ebc:	4a27      	ldr	r2, [pc, #156]	; (8005f5c <MX_TIM4_Init+0xc4>)
 8005ebe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005ec0:	4b25      	ldr	r3, [pc, #148]	; (8005f58 <MX_TIM4_Init+0xc0>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ec6:	4b24      	ldr	r3, [pc, #144]	; (8005f58 <MX_TIM4_Init+0xc0>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8005ecc:	4b22      	ldr	r3, [pc, #136]	; (8005f58 <MX_TIM4_Init+0xc0>)
 8005ece:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8005ed2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ed4:	4b20      	ldr	r3, [pc, #128]	; (8005f58 <MX_TIM4_Init+0xc0>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005eda:	4b1f      	ldr	r3, [pc, #124]	; (8005f58 <MX_TIM4_Init+0xc0>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005ee0:	481d      	ldr	r0, [pc, #116]	; (8005f58 <MX_TIM4_Init+0xc0>)
 8005ee2:	f008 f8d6 	bl	800e092 <HAL_TIM_PWM_Init>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8005eec:	f000 fb56 	bl	800659c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005ef8:	f107 0320 	add.w	r3, r7, #32
 8005efc:	4619      	mov	r1, r3
 8005efe:	4816      	ldr	r0, [pc, #88]	; (8005f58 <MX_TIM4_Init+0xc0>)
 8005f00:	f008 fe66 	bl	800ebd0 <HAL_TIMEx_MasterConfigSynchronization>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8005f0a:	f000 fb47 	bl	800659c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005f0e:	2360      	movs	r3, #96	; 0x60
 8005f10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005f12:	2300      	movs	r3, #0
 8005f14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005f16:	2300      	movs	r3, #0
 8005f18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005f1e:	1d3b      	adds	r3, r7, #4
 8005f20:	2208      	movs	r2, #8
 8005f22:	4619      	mov	r1, r3
 8005f24:	480c      	ldr	r0, [pc, #48]	; (8005f58 <MX_TIM4_Init+0xc0>)
 8005f26:	f008 faef 	bl	800e508 <HAL_TIM_PWM_ConfigChannel>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8005f30:	f000 fb34 	bl	800659c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005f34:	1d3b      	adds	r3, r7, #4
 8005f36:	220c      	movs	r2, #12
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4807      	ldr	r0, [pc, #28]	; (8005f58 <MX_TIM4_Init+0xc0>)
 8005f3c:	f008 fae4 	bl	800e508 <HAL_TIM_PWM_ConfigChannel>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005f46:	f000 fb29 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005f4a:	4803      	ldr	r0, [pc, #12]	; (8005f58 <MX_TIM4_Init+0xc0>)
 8005f4c:	f000 ff16 	bl	8006d7c <HAL_TIM_MspPostInit>

}
 8005f50:	bf00      	nop
 8005f52:	3728      	adds	r7, #40	; 0x28
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	2003e8e0 	.word	0x2003e8e0
 8005f5c:	40000800 	.word	0x40000800

08005f60 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f66:	463b      	mov	r3, r7
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005f6e:	4b15      	ldr	r3, [pc, #84]	; (8005fc4 <MX_TIM6_Init+0x64>)
 8005f70:	4a15      	ldr	r2, [pc, #84]	; (8005fc8 <MX_TIM6_Init+0x68>)
 8005f72:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8005f74:	4b13      	ldr	r3, [pc, #76]	; (8005fc4 <MX_TIM6_Init+0x64>)
 8005f76:	2259      	movs	r2, #89	; 0x59
 8005f78:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f7a:	4b12      	ldr	r3, [pc, #72]	; (8005fc4 <MX_TIM6_Init+0x64>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8005f80:	4b10      	ldr	r3, [pc, #64]	; (8005fc4 <MX_TIM6_Init+0x64>)
 8005f82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005f86:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005f88:	4b0e      	ldr	r3, [pc, #56]	; (8005fc4 <MX_TIM6_Init+0x64>)
 8005f8a:	2280      	movs	r2, #128	; 0x80
 8005f8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005f8e:	480d      	ldr	r0, [pc, #52]	; (8005fc4 <MX_TIM6_Init+0x64>)
 8005f90:	f008 f830 	bl	800dff4 <HAL_TIM_Base_Init>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005f9a:	f000 faff 	bl	800659c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005fa6:	463b      	mov	r3, r7
 8005fa8:	4619      	mov	r1, r3
 8005faa:	4806      	ldr	r0, [pc, #24]	; (8005fc4 <MX_TIM6_Init+0x64>)
 8005fac:	f008 fe10 	bl	800ebd0 <HAL_TIMEx_MasterConfigSynchronization>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8005fb6:	f000 faf1 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005fba:	bf00      	nop
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	2003eb7c 	.word	0x2003eb7c
 8005fc8:	40001000 	.word	0x40001000

08005fcc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005fd2:	463b      	mov	r3, r7
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005fda:	4b14      	ldr	r3, [pc, #80]	; (800602c <MX_TIM7_Init+0x60>)
 8005fdc:	4a14      	ldr	r2, [pc, #80]	; (8006030 <MX_TIM7_Init+0x64>)
 8005fde:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8005fe0:	4b12      	ldr	r3, [pc, #72]	; (800602c <MX_TIM7_Init+0x60>)
 8005fe2:	22b3      	movs	r2, #179	; 0xb3
 8005fe4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005fe6:	4b11      	ldr	r3, [pc, #68]	; (800602c <MX_TIM7_Init+0x60>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8005fec:	4b0f      	ldr	r3, [pc, #60]	; (800602c <MX_TIM7_Init+0x60>)
 8005fee:	2231      	movs	r2, #49	; 0x31
 8005ff0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005ff2:	4b0e      	ldr	r3, [pc, #56]	; (800602c <MX_TIM7_Init+0x60>)
 8005ff4:	2280      	movs	r2, #128	; 0x80
 8005ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005ff8:	480c      	ldr	r0, [pc, #48]	; (800602c <MX_TIM7_Init+0x60>)
 8005ffa:	f007 fffb 	bl	800dff4 <HAL_TIM_Base_Init>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8006004:	f000 faca 	bl	800659c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006008:	2300      	movs	r3, #0
 800600a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800600c:	2300      	movs	r3, #0
 800600e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006010:	463b      	mov	r3, r7
 8006012:	4619      	mov	r1, r3
 8006014:	4805      	ldr	r0, [pc, #20]	; (800602c <MX_TIM7_Init+0x60>)
 8006016:	f008 fddb 	bl	800ebd0 <HAL_TIMEx_MasterConfigSynchronization>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d001      	beq.n	8006024 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006020:	f000 fabc 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006024:	bf00      	nop
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	2003ed20 	.word	0x2003ed20
 8006030:	40001400 	.word	0x40001400

08006034 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b08c      	sub	sp, #48	; 0x30
 8006038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800603a:	f107 030c 	add.w	r3, r7, #12
 800603e:	2224      	movs	r2, #36	; 0x24
 8006040:	2100      	movs	r1, #0
 8006042:	4618      	mov	r0, r3
 8006044:	f00e fe17 	bl	8014c76 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006048:	1d3b      	adds	r3, r7, #4
 800604a:	2200      	movs	r2, #0
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006050:	4b22      	ldr	r3, [pc, #136]	; (80060dc <MX_TIM8_Init+0xa8>)
 8006052:	4a23      	ldr	r2, [pc, #140]	; (80060e0 <MX_TIM8_Init+0xac>)
 8006054:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006056:	4b21      	ldr	r3, [pc, #132]	; (80060dc <MX_TIM8_Init+0xa8>)
 8006058:	2200      	movs	r2, #0
 800605a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800605c:	4b1f      	ldr	r3, [pc, #124]	; (80060dc <MX_TIM8_Init+0xa8>)
 800605e:	2210      	movs	r2, #16
 8006060:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006062:	4b1e      	ldr	r3, [pc, #120]	; (80060dc <MX_TIM8_Init+0xa8>)
 8006064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006068:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800606a:	4b1c      	ldr	r3, [pc, #112]	; (80060dc <MX_TIM8_Init+0xa8>)
 800606c:	2200      	movs	r2, #0
 800606e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006070:	4b1a      	ldr	r3, [pc, #104]	; (80060dc <MX_TIM8_Init+0xa8>)
 8006072:	2200      	movs	r2, #0
 8006074:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006076:	4b19      	ldr	r3, [pc, #100]	; (80060dc <MX_TIM8_Init+0xa8>)
 8006078:	2200      	movs	r2, #0
 800607a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800607c:	2303      	movs	r3, #3
 800607e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006080:	2300      	movs	r3, #0
 8006082:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006084:	2301      	movs	r3, #1
 8006086:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006088:	2300      	movs	r3, #0
 800608a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800608c:	2300      	movs	r3, #0
 800608e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006090:	2300      	movs	r3, #0
 8006092:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006094:	2301      	movs	r3, #1
 8006096:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006098:	2300      	movs	r3, #0
 800609a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800609c:	2300      	movs	r3, #0
 800609e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80060a0:	f107 030c 	add.w	r3, r7, #12
 80060a4:	4619      	mov	r1, r3
 80060a6:	480d      	ldr	r0, [pc, #52]	; (80060dc <MX_TIM8_Init+0xa8>)
 80060a8:	f008 f85c 	bl	800e164 <HAL_TIM_Encoder_Init>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d001      	beq.n	80060b6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80060b2:	f000 fa73 	bl	800659c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80060b6:	2300      	movs	r3, #0
 80060b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80060be:	1d3b      	adds	r3, r7, #4
 80060c0:	4619      	mov	r1, r3
 80060c2:	4806      	ldr	r0, [pc, #24]	; (80060dc <MX_TIM8_Init+0xa8>)
 80060c4:	f008 fd84 	bl	800ebd0 <HAL_TIMEx_MasterConfigSynchronization>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80060ce:	f000 fa65 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80060d2:	bf00      	nop
 80060d4:	3730      	adds	r7, #48	; 0x30
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	2003e8a0 	.word	0x2003e8a0
 80060e0:	40010400 	.word	0x40010400

080060e4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80060ea:	1d3b      	adds	r3, r7, #4
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	605a      	str	r2, [r3, #4]
 80060f2:	609a      	str	r2, [r3, #8]
 80060f4:	60da      	str	r2, [r3, #12]
 80060f6:	611a      	str	r2, [r3, #16]
 80060f8:	615a      	str	r2, [r3, #20]
 80060fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80060fc:	4b1e      	ldr	r3, [pc, #120]	; (8006178 <MX_TIM10_Init+0x94>)
 80060fe:	4a1f      	ldr	r2, [pc, #124]	; (800617c <MX_TIM10_Init+0x98>)
 8006100:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8006102:	4b1d      	ldr	r3, [pc, #116]	; (8006178 <MX_TIM10_Init+0x94>)
 8006104:	2200      	movs	r2, #0
 8006106:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006108:	4b1b      	ldr	r3, [pc, #108]	; (8006178 <MX_TIM10_Init+0x94>)
 800610a:	2200      	movs	r2, #0
 800610c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800610e:	4b1a      	ldr	r3, [pc, #104]	; (8006178 <MX_TIM10_Init+0x94>)
 8006110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006114:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006116:	4b18      	ldr	r3, [pc, #96]	; (8006178 <MX_TIM10_Init+0x94>)
 8006118:	2200      	movs	r2, #0
 800611a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800611c:	4b16      	ldr	r3, [pc, #88]	; (8006178 <MX_TIM10_Init+0x94>)
 800611e:	2200      	movs	r2, #0
 8006120:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006122:	4815      	ldr	r0, [pc, #84]	; (8006178 <MX_TIM10_Init+0x94>)
 8006124:	f007 ff66 	bl	800dff4 <HAL_TIM_Base_Init>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d001      	beq.n	8006132 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800612e:	f000 fa35 	bl	800659c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006132:	4811      	ldr	r0, [pc, #68]	; (8006178 <MX_TIM10_Init+0x94>)
 8006134:	f007 ffad 	bl	800e092 <HAL_TIM_PWM_Init>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800613e:	f000 fa2d 	bl	800659c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006142:	2360      	movs	r3, #96	; 0x60
 8006144:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006146:	2300      	movs	r3, #0
 8006148:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800614a:	2300      	movs	r3, #0
 800614c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800614e:	2300      	movs	r3, #0
 8006150:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006152:	1d3b      	adds	r3, r7, #4
 8006154:	2200      	movs	r2, #0
 8006156:	4619      	mov	r1, r3
 8006158:	4807      	ldr	r0, [pc, #28]	; (8006178 <MX_TIM10_Init+0x94>)
 800615a:	f008 f9d5 	bl	800e508 <HAL_TIM_PWM_ConfigChannel>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006164:	f000 fa1a 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006168:	4803      	ldr	r0, [pc, #12]	; (8006178 <MX_TIM10_Init+0x94>)
 800616a:	f000 fe07 	bl	8006d7c <HAL_TIM_MspPostInit>

}
 800616e:	bf00      	nop
 8006170:	3720      	adds	r7, #32
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	2003e9bc 	.word	0x2003e9bc
 800617c:	40014400 	.word	0x40014400

08006180 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b088      	sub	sp, #32
 8006184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006186:	1d3b      	adds	r3, r7, #4
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	605a      	str	r2, [r3, #4]
 800618e:	609a      	str	r2, [r3, #8]
 8006190:	60da      	str	r2, [r3, #12]
 8006192:	611a      	str	r2, [r3, #16]
 8006194:	615a      	str	r2, [r3, #20]
 8006196:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006198:	4b1e      	ldr	r3, [pc, #120]	; (8006214 <MX_TIM11_Init+0x94>)
 800619a:	4a1f      	ldr	r2, [pc, #124]	; (8006218 <MX_TIM11_Init+0x98>)
 800619c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800619e:	4b1d      	ldr	r3, [pc, #116]	; (8006214 <MX_TIM11_Init+0x94>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061a4:	4b1b      	ldr	r3, [pc, #108]	; (8006214 <MX_TIM11_Init+0x94>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80061aa:	4b1a      	ldr	r3, [pc, #104]	; (8006214 <MX_TIM11_Init+0x94>)
 80061ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061b0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80061b2:	4b18      	ldr	r3, [pc, #96]	; (8006214 <MX_TIM11_Init+0x94>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80061b8:	4b16      	ldr	r3, [pc, #88]	; (8006214 <MX_TIM11_Init+0x94>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80061be:	4815      	ldr	r0, [pc, #84]	; (8006214 <MX_TIM11_Init+0x94>)
 80061c0:	f007 ff18 	bl	800dff4 <HAL_TIM_Base_Init>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80061ca:	f000 f9e7 	bl	800659c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80061ce:	4811      	ldr	r0, [pc, #68]	; (8006214 <MX_TIM11_Init+0x94>)
 80061d0:	f007 ff5f 	bl	800e092 <HAL_TIM_PWM_Init>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80061da:	f000 f9df 	bl	800659c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80061de:	2360      	movs	r3, #96	; 0x60
 80061e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80061e2:	2300      	movs	r3, #0
 80061e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80061e6:	2300      	movs	r3, #0
 80061e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80061ea:	2300      	movs	r3, #0
 80061ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80061ee:	1d3b      	adds	r3, r7, #4
 80061f0:	2200      	movs	r2, #0
 80061f2:	4619      	mov	r1, r3
 80061f4:	4807      	ldr	r0, [pc, #28]	; (8006214 <MX_TIM11_Init+0x94>)
 80061f6:	f008 f987 	bl	800e508 <HAL_TIM_PWM_ConfigChannel>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8006200:	f000 f9cc 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8006204:	4803      	ldr	r0, [pc, #12]	; (8006214 <MX_TIM11_Init+0x94>)
 8006206:	f000 fdb9 	bl	8006d7c <HAL_TIM_MspPostInit>

}
 800620a:	bf00      	nop
 800620c:	3720      	adds	r7, #32
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	2003eadc 	.word	0x2003eadc
 8006218:	40014800 	.word	0x40014800

0800621c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006220:	4b0e      	ldr	r3, [pc, #56]	; (800625c <MX_TIM13_Init+0x40>)
 8006222:	4a0f      	ldr	r2, [pc, #60]	; (8006260 <MX_TIM13_Init+0x44>)
 8006224:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8006226:	4b0d      	ldr	r3, [pc, #52]	; (800625c <MX_TIM13_Init+0x40>)
 8006228:	2259      	movs	r2, #89	; 0x59
 800622a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800622c:	4b0b      	ldr	r3, [pc, #44]	; (800625c <MX_TIM13_Init+0x40>)
 800622e:	2200      	movs	r2, #0
 8006230:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006232:	4b0a      	ldr	r3, [pc, #40]	; (800625c <MX_TIM13_Init+0x40>)
 8006234:	f242 720f 	movw	r2, #9999	; 0x270f
 8006238:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800623a:	4b08      	ldr	r3, [pc, #32]	; (800625c <MX_TIM13_Init+0x40>)
 800623c:	2200      	movs	r2, #0
 800623e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006240:	4b06      	ldr	r3, [pc, #24]	; (800625c <MX_TIM13_Init+0x40>)
 8006242:	2280      	movs	r2, #128	; 0x80
 8006244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006246:	4805      	ldr	r0, [pc, #20]	; (800625c <MX_TIM13_Init+0x40>)
 8006248:	f007 fed4 	bl	800dff4 <HAL_TIM_Base_Init>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006252:	f000 f9a3 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006256:	bf00      	nop
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	2003ea9c 	.word	0x2003ea9c
 8006260:	40001c00 	.word	0x40001c00

08006264 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006268:	4b11      	ldr	r3, [pc, #68]	; (80062b0 <MX_USART2_UART_Init+0x4c>)
 800626a:	4a12      	ldr	r2, [pc, #72]	; (80062b4 <MX_USART2_UART_Init+0x50>)
 800626c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800626e:	4b10      	ldr	r3, [pc, #64]	; (80062b0 <MX_USART2_UART_Init+0x4c>)
 8006270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006274:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006276:	4b0e      	ldr	r3, [pc, #56]	; (80062b0 <MX_USART2_UART_Init+0x4c>)
 8006278:	2200      	movs	r2, #0
 800627a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800627c:	4b0c      	ldr	r3, [pc, #48]	; (80062b0 <MX_USART2_UART_Init+0x4c>)
 800627e:	2200      	movs	r2, #0
 8006280:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006282:	4b0b      	ldr	r3, [pc, #44]	; (80062b0 <MX_USART2_UART_Init+0x4c>)
 8006284:	2200      	movs	r2, #0
 8006286:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006288:	4b09      	ldr	r3, [pc, #36]	; (80062b0 <MX_USART2_UART_Init+0x4c>)
 800628a:	220c      	movs	r2, #12
 800628c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800628e:	4b08      	ldr	r3, [pc, #32]	; (80062b0 <MX_USART2_UART_Init+0x4c>)
 8006290:	2200      	movs	r2, #0
 8006292:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006294:	4b06      	ldr	r3, [pc, #24]	; (80062b0 <MX_USART2_UART_Init+0x4c>)
 8006296:	2200      	movs	r2, #0
 8006298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800629a:	4805      	ldr	r0, [pc, #20]	; (80062b0 <MX_USART2_UART_Init+0x4c>)
 800629c:	f008 fd7a 	bl	800ed94 <HAL_UART_Init>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80062a6:	f000 f979 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80062aa:	bf00      	nop
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	2003ec80 	.word	0x2003ec80
 80062b4:	40004400 	.word	0x40004400

080062b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80062be:	2300      	movs	r3, #0
 80062c0:	607b      	str	r3, [r7, #4]
 80062c2:	4b14      	ldr	r3, [pc, #80]	; (8006314 <MX_DMA_Init+0x5c>)
 80062c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c6:	4a13      	ldr	r2, [pc, #76]	; (8006314 <MX_DMA_Init+0x5c>)
 80062c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80062cc:	6313      	str	r3, [r2, #48]	; 0x30
 80062ce:	4b11      	ldr	r3, [pc, #68]	; (8006314 <MX_DMA_Init+0x5c>)
 80062d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062d6:	607b      	str	r3, [r7, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80062da:	2200      	movs	r2, #0
 80062dc:	2100      	movs	r1, #0
 80062de:	203a      	movs	r0, #58	; 0x3a
 80062e0:	f003 fa53 	bl	800978a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80062e4:	203a      	movs	r0, #58	; 0x3a
 80062e6:	f003 fa6c 	bl	80097c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80062ea:	2200      	movs	r2, #0
 80062ec:	2100      	movs	r1, #0
 80062ee:	203b      	movs	r0, #59	; 0x3b
 80062f0:	f003 fa4b 	bl	800978a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80062f4:	203b      	movs	r0, #59	; 0x3b
 80062f6:	f003 fa64 	bl	80097c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80062fa:	2200      	movs	r2, #0
 80062fc:	2100      	movs	r1, #0
 80062fe:	2045      	movs	r0, #69	; 0x45
 8006300:	f003 fa43 	bl	800978a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006304:	2045      	movs	r0, #69	; 0x45
 8006306:	f003 fa5c 	bl	80097c2 <HAL_NVIC_EnableIRQ>

}
 800630a:	bf00      	nop
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	40023800 	.word	0x40023800

08006318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b08c      	sub	sp, #48	; 0x30
 800631c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800631e:	f107 031c 	add.w	r3, r7, #28
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	605a      	str	r2, [r3, #4]
 8006328:	609a      	str	r2, [r3, #8]
 800632a:	60da      	str	r2, [r3, #12]
 800632c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800632e:	2300      	movs	r3, #0
 8006330:	61bb      	str	r3, [r7, #24]
 8006332:	4b94      	ldr	r3, [pc, #592]	; (8006584 <MX_GPIO_Init+0x26c>)
 8006334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006336:	4a93      	ldr	r2, [pc, #588]	; (8006584 <MX_GPIO_Init+0x26c>)
 8006338:	f043 0310 	orr.w	r3, r3, #16
 800633c:	6313      	str	r3, [r2, #48]	; 0x30
 800633e:	4b91      	ldr	r3, [pc, #580]	; (8006584 <MX_GPIO_Init+0x26c>)
 8006340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006342:	f003 0310 	and.w	r3, r3, #16
 8006346:	61bb      	str	r3, [r7, #24]
 8006348:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800634a:	2300      	movs	r3, #0
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	4b8d      	ldr	r3, [pc, #564]	; (8006584 <MX_GPIO_Init+0x26c>)
 8006350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006352:	4a8c      	ldr	r2, [pc, #560]	; (8006584 <MX_GPIO_Init+0x26c>)
 8006354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006358:	6313      	str	r3, [r2, #48]	; 0x30
 800635a:	4b8a      	ldr	r3, [pc, #552]	; (8006584 <MX_GPIO_Init+0x26c>)
 800635c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006362:	617b      	str	r3, [r7, #20]
 8006364:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006366:	2300      	movs	r3, #0
 8006368:	613b      	str	r3, [r7, #16]
 800636a:	4b86      	ldr	r3, [pc, #536]	; (8006584 <MX_GPIO_Init+0x26c>)
 800636c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636e:	4a85      	ldr	r2, [pc, #532]	; (8006584 <MX_GPIO_Init+0x26c>)
 8006370:	f043 0304 	orr.w	r3, r3, #4
 8006374:	6313      	str	r3, [r2, #48]	; 0x30
 8006376:	4b83      	ldr	r3, [pc, #524]	; (8006584 <MX_GPIO_Init+0x26c>)
 8006378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637a:	f003 0304 	and.w	r3, r3, #4
 800637e:	613b      	str	r3, [r7, #16]
 8006380:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006382:	2300      	movs	r3, #0
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	4b7f      	ldr	r3, [pc, #508]	; (8006584 <MX_GPIO_Init+0x26c>)
 8006388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638a:	4a7e      	ldr	r2, [pc, #504]	; (8006584 <MX_GPIO_Init+0x26c>)
 800638c:	f043 0301 	orr.w	r3, r3, #1
 8006390:	6313      	str	r3, [r2, #48]	; 0x30
 8006392:	4b7c      	ldr	r3, [pc, #496]	; (8006584 <MX_GPIO_Init+0x26c>)
 8006394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800639e:	2300      	movs	r3, #0
 80063a0:	60bb      	str	r3, [r7, #8]
 80063a2:	4b78      	ldr	r3, [pc, #480]	; (8006584 <MX_GPIO_Init+0x26c>)
 80063a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a6:	4a77      	ldr	r2, [pc, #476]	; (8006584 <MX_GPIO_Init+0x26c>)
 80063a8:	f043 0302 	orr.w	r3, r3, #2
 80063ac:	6313      	str	r3, [r2, #48]	; 0x30
 80063ae:	4b75      	ldr	r3, [pc, #468]	; (8006584 <MX_GPIO_Init+0x26c>)
 80063b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	60bb      	str	r3, [r7, #8]
 80063b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80063ba:	2300      	movs	r3, #0
 80063bc:	607b      	str	r3, [r7, #4]
 80063be:	4b71      	ldr	r3, [pc, #452]	; (8006584 <MX_GPIO_Init+0x26c>)
 80063c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c2:	4a70      	ldr	r2, [pc, #448]	; (8006584 <MX_GPIO_Init+0x26c>)
 80063c4:	f043 0308 	orr.w	r3, r3, #8
 80063c8:	6313      	str	r3, [r2, #48]	; 0x30
 80063ca:	4b6e      	ldr	r3, [pc, #440]	; (8006584 <MX_GPIO_Init+0x26c>)
 80063cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ce:	f003 0308 	and.w	r3, r3, #8
 80063d2:	607b      	str	r3, [r7, #4]
 80063d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80063d6:	2200      	movs	r2, #0
 80063d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80063dc:	486a      	ldr	r0, [pc, #424]	; (8006588 <MX_GPIO_Init+0x270>)
 80063de:	f003 ff69 	bl	800a2b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80063e2:	2200      	movs	r2, #0
 80063e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80063e8:	4868      	ldr	r0, [pc, #416]	; (800658c <MX_GPIO_Init+0x274>)
 80063ea:	f003 ff63 	bl	800a2b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80063ee:	2200      	movs	r2, #0
 80063f0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80063f4:	4866      	ldr	r0, [pc, #408]	; (8006590 <MX_GPIO_Init+0x278>)
 80063f6:	f003 ff5d 	bl	800a2b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80063fa:	2200      	movs	r2, #0
 80063fc:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006400:	4864      	ldr	r0, [pc, #400]	; (8006594 <MX_GPIO_Init+0x27c>)
 8006402:	f003 ff57 	bl	800a2b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006406:	2304      	movs	r3, #4
 8006408:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800640a:	2300      	movs	r3, #0
 800640c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800640e:	2300      	movs	r3, #0
 8006410:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006412:	f107 031c 	add.w	r3, r7, #28
 8006416:	4619      	mov	r1, r3
 8006418:	485b      	ldr	r0, [pc, #364]	; (8006588 <MX_GPIO_Init+0x270>)
 800641a:	f003 fd89 	bl	8009f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800641e:	230f      	movs	r3, #15
 8006420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006422:	2303      	movs	r3, #3
 8006424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006426:	2300      	movs	r3, #0
 8006428:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800642a:	f107 031c 	add.w	r3, r7, #28
 800642e:	4619      	mov	r1, r3
 8006430:	4859      	ldr	r0, [pc, #356]	; (8006598 <MX_GPIO_Init+0x280>)
 8006432:	f003 fd7d 	bl	8009f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006436:	23e1      	movs	r3, #225	; 0xe1
 8006438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800643a:	2303      	movs	r3, #3
 800643c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800643e:	2300      	movs	r3, #0
 8006440:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006442:	f107 031c 	add.w	r3, r7, #28
 8006446:	4619      	mov	r1, r3
 8006448:	4852      	ldr	r0, [pc, #328]	; (8006594 <MX_GPIO_Init+0x27c>)
 800644a:	f003 fd71 	bl	8009f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800644e:	2303      	movs	r3, #3
 8006450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006452:	2303      	movs	r3, #3
 8006454:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006456:	2300      	movs	r3, #0
 8006458:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800645a:	f107 031c 	add.w	r3, r7, #28
 800645e:	4619      	mov	r1, r3
 8006460:	484a      	ldr	r0, [pc, #296]	; (800658c <MX_GPIO_Init+0x274>)
 8006462:	f003 fd65 	bl	8009f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006466:	2304      	movs	r3, #4
 8006468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800646a:	2300      	movs	r3, #0
 800646c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800646e:	2301      	movs	r3, #1
 8006470:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006472:	f107 031c 	add.w	r3, r7, #28
 8006476:	4619      	mov	r1, r3
 8006478:	4844      	ldr	r0, [pc, #272]	; (800658c <MX_GPIO_Init+0x274>)
 800647a:	f003 fd59 	bl	8009f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 800647e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006484:	2300      	movs	r3, #0
 8006486:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006488:	2301      	movs	r3, #1
 800648a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800648c:	f107 031c 	add.w	r3, r7, #28
 8006490:	4619      	mov	r1, r3
 8006492:	483d      	ldr	r0, [pc, #244]	; (8006588 <MX_GPIO_Init+0x270>)
 8006494:	f003 fd4c 	bl	8009f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006498:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800649c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800649e:	2301      	movs	r3, #1
 80064a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064a2:	2300      	movs	r3, #0
 80064a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064a6:	2300      	movs	r3, #0
 80064a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80064aa:	f107 031c 	add.w	r3, r7, #28
 80064ae:	4619      	mov	r1, r3
 80064b0:	4835      	ldr	r0, [pc, #212]	; (8006588 <MX_GPIO_Init+0x270>)
 80064b2:	f003 fd3d 	bl	8009f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80064b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064bc:	2301      	movs	r3, #1
 80064be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064c0:	2300      	movs	r3, #0
 80064c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064c4:	2300      	movs	r3, #0
 80064c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064c8:	f107 031c 	add.w	r3, r7, #28
 80064cc:	4619      	mov	r1, r3
 80064ce:	482f      	ldr	r0, [pc, #188]	; (800658c <MX_GPIO_Init+0x274>)
 80064d0:	f003 fd2e 	bl	8009f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80064d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064da:	2300      	movs	r3, #0
 80064dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064de:	2300      	movs	r3, #0
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064e2:	f107 031c 	add.w	r3, r7, #28
 80064e6:	4619      	mov	r1, r3
 80064e8:	4829      	ldr	r0, [pc, #164]	; (8006590 <MX_GPIO_Init+0x278>)
 80064ea:	f003 fd21 	bl	8009f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80064ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064f4:	2301      	movs	r3, #1
 80064f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064f8:	2300      	movs	r3, #0
 80064fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064fc:	2300      	movs	r3, #0
 80064fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006500:	f107 031c 	add.w	r3, r7, #28
 8006504:	4619      	mov	r1, r3
 8006506:	4822      	ldr	r0, [pc, #136]	; (8006590 <MX_GPIO_Init+0x278>)
 8006508:	f003 fd12 	bl	8009f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800650c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006512:	2301      	movs	r3, #1
 8006514:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006516:	2301      	movs	r3, #1
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800651a:	2300      	movs	r3, #0
 800651c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800651e:	f107 031c 	add.w	r3, r7, #28
 8006522:	4619      	mov	r1, r3
 8006524:	481a      	ldr	r0, [pc, #104]	; (8006590 <MX_GPIO_Init+0x278>)
 8006526:	f003 fd03 	bl	8009f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800652a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800652e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006530:	2301      	movs	r3, #1
 8006532:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006534:	2300      	movs	r3, #0
 8006536:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006538:	2300      	movs	r3, #0
 800653a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800653c:	f107 031c 	add.w	r3, r7, #28
 8006540:	4619      	mov	r1, r3
 8006542:	4814      	ldr	r0, [pc, #80]	; (8006594 <MX_GPIO_Init+0x27c>)
 8006544:	f003 fcf4 	bl	8009f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006548:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800654c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800654e:	2300      	movs	r3, #0
 8006550:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006552:	2300      	movs	r3, #0
 8006554:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006556:	f107 031c 	add.w	r3, r7, #28
 800655a:	4619      	mov	r1, r3
 800655c:	480d      	ldr	r0, [pc, #52]	; (8006594 <MX_GPIO_Init+0x27c>)
 800655e:	f003 fce7 	bl	8009f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006562:	239b      	movs	r3, #155	; 0x9b
 8006564:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006566:	2300      	movs	r3, #0
 8006568:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800656a:	2301      	movs	r3, #1
 800656c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800656e:	f107 031c 	add.w	r3, r7, #28
 8006572:	4619      	mov	r1, r3
 8006574:	4806      	ldr	r0, [pc, #24]	; (8006590 <MX_GPIO_Init+0x278>)
 8006576:	f003 fcdb 	bl	8009f30 <HAL_GPIO_Init>

}
 800657a:	bf00      	nop
 800657c:	3730      	adds	r7, #48	; 0x30
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	40023800 	.word	0x40023800
 8006588:	40021000 	.word	0x40021000
 800658c:	40020400 	.word	0x40020400
 8006590:	40020c00 	.word	0x40020c00
 8006594:	40020000 	.word	0x40020000
 8006598:	40020800 	.word	0x40020800

0800659c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80065a0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80065a2:	e7fe      	b.n	80065a2 <Error_Handler+0x6>

080065a4 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 80065a4:	b480      	push	{r7}
 80065a6:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 80065a8:	bf00      	nop
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
	...

080065b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065ba:	2300      	movs	r3, #0
 80065bc:	607b      	str	r3, [r7, #4]
 80065be:	4b10      	ldr	r3, [pc, #64]	; (8006600 <HAL_MspInit+0x4c>)
 80065c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c2:	4a0f      	ldr	r2, [pc, #60]	; (8006600 <HAL_MspInit+0x4c>)
 80065c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065c8:	6453      	str	r3, [r2, #68]	; 0x44
 80065ca:	4b0d      	ldr	r3, [pc, #52]	; (8006600 <HAL_MspInit+0x4c>)
 80065cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065d2:	607b      	str	r3, [r7, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80065d6:	2300      	movs	r3, #0
 80065d8:	603b      	str	r3, [r7, #0]
 80065da:	4b09      	ldr	r3, [pc, #36]	; (8006600 <HAL_MspInit+0x4c>)
 80065dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065de:	4a08      	ldr	r2, [pc, #32]	; (8006600 <HAL_MspInit+0x4c>)
 80065e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065e4:	6413      	str	r3, [r2, #64]	; 0x40
 80065e6:	4b06      	ldr	r3, [pc, #24]	; (8006600 <HAL_MspInit+0x4c>)
 80065e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ee:	603b      	str	r3, [r7, #0]
 80065f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80065f2:	bf00      	nop
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	40023800 	.word	0x40023800

08006604 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b08c      	sub	sp, #48	; 0x30
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800660c:	f107 031c 	add.w	r3, r7, #28
 8006610:	2200      	movs	r2, #0
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	605a      	str	r2, [r3, #4]
 8006616:	609a      	str	r2, [r3, #8]
 8006618:	60da      	str	r2, [r3, #12]
 800661a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a4a      	ldr	r2, [pc, #296]	; (800674c <HAL_ADC_MspInit+0x148>)
 8006622:	4293      	cmp	r3, r2
 8006624:	f040 808e 	bne.w	8006744 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006628:	2300      	movs	r3, #0
 800662a:	61bb      	str	r3, [r7, #24]
 800662c:	4b48      	ldr	r3, [pc, #288]	; (8006750 <HAL_ADC_MspInit+0x14c>)
 800662e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006630:	4a47      	ldr	r2, [pc, #284]	; (8006750 <HAL_ADC_MspInit+0x14c>)
 8006632:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006636:	6453      	str	r3, [r2, #68]	; 0x44
 8006638:	4b45      	ldr	r3, [pc, #276]	; (8006750 <HAL_ADC_MspInit+0x14c>)
 800663a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800663c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006640:	61bb      	str	r3, [r7, #24]
 8006642:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006644:	2300      	movs	r3, #0
 8006646:	617b      	str	r3, [r7, #20]
 8006648:	4b41      	ldr	r3, [pc, #260]	; (8006750 <HAL_ADC_MspInit+0x14c>)
 800664a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664c:	4a40      	ldr	r2, [pc, #256]	; (8006750 <HAL_ADC_MspInit+0x14c>)
 800664e:	f043 0304 	orr.w	r3, r3, #4
 8006652:	6313      	str	r3, [r2, #48]	; 0x30
 8006654:	4b3e      	ldr	r3, [pc, #248]	; (8006750 <HAL_ADC_MspInit+0x14c>)
 8006656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	617b      	str	r3, [r7, #20]
 800665e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006660:	2300      	movs	r3, #0
 8006662:	613b      	str	r3, [r7, #16]
 8006664:	4b3a      	ldr	r3, [pc, #232]	; (8006750 <HAL_ADC_MspInit+0x14c>)
 8006666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006668:	4a39      	ldr	r2, [pc, #228]	; (8006750 <HAL_ADC_MspInit+0x14c>)
 800666a:	f043 0301 	orr.w	r3, r3, #1
 800666e:	6313      	str	r3, [r2, #48]	; 0x30
 8006670:	4b37      	ldr	r3, [pc, #220]	; (8006750 <HAL_ADC_MspInit+0x14c>)
 8006672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	613b      	str	r3, [r7, #16]
 800667a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800667c:	2300      	movs	r3, #0
 800667e:	60fb      	str	r3, [r7, #12]
 8006680:	4b33      	ldr	r3, [pc, #204]	; (8006750 <HAL_ADC_MspInit+0x14c>)
 8006682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006684:	4a32      	ldr	r2, [pc, #200]	; (8006750 <HAL_ADC_MspInit+0x14c>)
 8006686:	f043 0302 	orr.w	r3, r3, #2
 800668a:	6313      	str	r3, [r2, #48]	; 0x30
 800668c:	4b30      	ldr	r3, [pc, #192]	; (8006750 <HAL_ADC_MspInit+0x14c>)
 800668e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	60fb      	str	r3, [r7, #12]
 8006696:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006698:	230f      	movs	r3, #15
 800669a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800669c:	2303      	movs	r3, #3
 800669e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066a0:	2300      	movs	r3, #0
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066a4:	f107 031c 	add.w	r3, r7, #28
 80066a8:	4619      	mov	r1, r3
 80066aa:	482a      	ldr	r0, [pc, #168]	; (8006754 <HAL_ADC_MspInit+0x150>)
 80066ac:	f003 fc40 	bl	8009f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80066b0:	23ff      	movs	r3, #255	; 0xff
 80066b2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80066b4:	2303      	movs	r3, #3
 80066b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066b8:	2300      	movs	r3, #0
 80066ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066bc:	f107 031c 	add.w	r3, r7, #28
 80066c0:	4619      	mov	r1, r3
 80066c2:	4825      	ldr	r0, [pc, #148]	; (8006758 <HAL_ADC_MspInit+0x154>)
 80066c4:	f003 fc34 	bl	8009f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80066c8:	2303      	movs	r3, #3
 80066ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80066cc:	2303      	movs	r3, #3
 80066ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066d0:	2300      	movs	r3, #0
 80066d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066d4:	f107 031c 	add.w	r3, r7, #28
 80066d8:	4619      	mov	r1, r3
 80066da:	4820      	ldr	r0, [pc, #128]	; (800675c <HAL_ADC_MspInit+0x158>)
 80066dc:	f003 fc28 	bl	8009f30 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80066e0:	4b1f      	ldr	r3, [pc, #124]	; (8006760 <HAL_ADC_MspInit+0x15c>)
 80066e2:	4a20      	ldr	r2, [pc, #128]	; (8006764 <HAL_ADC_MspInit+0x160>)
 80066e4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80066e6:	4b1e      	ldr	r3, [pc, #120]	; (8006760 <HAL_ADC_MspInit+0x15c>)
 80066e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80066ec:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066ee:	4b1c      	ldr	r3, [pc, #112]	; (8006760 <HAL_ADC_MspInit+0x15c>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80066f4:	4b1a      	ldr	r3, [pc, #104]	; (8006760 <HAL_ADC_MspInit+0x15c>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80066fa:	4b19      	ldr	r3, [pc, #100]	; (8006760 <HAL_ADC_MspInit+0x15c>)
 80066fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006700:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006702:	4b17      	ldr	r3, [pc, #92]	; (8006760 <HAL_ADC_MspInit+0x15c>)
 8006704:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006708:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800670a:	4b15      	ldr	r3, [pc, #84]	; (8006760 <HAL_ADC_MspInit+0x15c>)
 800670c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006710:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006712:	4b13      	ldr	r3, [pc, #76]	; (8006760 <HAL_ADC_MspInit+0x15c>)
 8006714:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006718:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800671a:	4b11      	ldr	r3, [pc, #68]	; (8006760 <HAL_ADC_MspInit+0x15c>)
 800671c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006720:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006722:	4b0f      	ldr	r3, [pc, #60]	; (8006760 <HAL_ADC_MspInit+0x15c>)
 8006724:	2200      	movs	r2, #0
 8006726:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006728:	480d      	ldr	r0, [pc, #52]	; (8006760 <HAL_ADC_MspInit+0x15c>)
 800672a:	f003 f865 	bl	80097f8 <HAL_DMA_Init>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006734:	f7ff ff32 	bl	800659c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a09      	ldr	r2, [pc, #36]	; (8006760 <HAL_ADC_MspInit+0x15c>)
 800673c:	639a      	str	r2, [r3, #56]	; 0x38
 800673e:	4a08      	ldr	r2, [pc, #32]	; (8006760 <HAL_ADC_MspInit+0x15c>)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006744:	bf00      	nop
 8006746:	3730      	adds	r7, #48	; 0x30
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	40012100 	.word	0x40012100
 8006750:	40023800 	.word	0x40023800
 8006754:	40020800 	.word	0x40020800
 8006758:	40020000 	.word	0x40020000
 800675c:	40020400 	.word	0x40020400
 8006760:	2003ecc0 	.word	0x2003ecc0
 8006764:	40026440 	.word	0x40026440

08006768 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b08c      	sub	sp, #48	; 0x30
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006770:	f107 031c 	add.w	r3, r7, #28
 8006774:	2200      	movs	r2, #0
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	605a      	str	r2, [r3, #4]
 800677a:	609a      	str	r2, [r3, #8]
 800677c:	60da      	str	r2, [r3, #12]
 800677e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a32      	ldr	r2, [pc, #200]	; (8006850 <HAL_I2C_MspInit+0xe8>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d12c      	bne.n	80067e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800678a:	2300      	movs	r3, #0
 800678c:	61bb      	str	r3, [r7, #24]
 800678e:	4b31      	ldr	r3, [pc, #196]	; (8006854 <HAL_I2C_MspInit+0xec>)
 8006790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006792:	4a30      	ldr	r2, [pc, #192]	; (8006854 <HAL_I2C_MspInit+0xec>)
 8006794:	f043 0302 	orr.w	r3, r3, #2
 8006798:	6313      	str	r3, [r2, #48]	; 0x30
 800679a:	4b2e      	ldr	r3, [pc, #184]	; (8006854 <HAL_I2C_MspInit+0xec>)
 800679c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679e:	f003 0302 	and.w	r3, r3, #2
 80067a2:	61bb      	str	r3, [r7, #24]
 80067a4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80067a6:	23c0      	movs	r3, #192	; 0xc0
 80067a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80067aa:	2312      	movs	r3, #18
 80067ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80067ae:	2301      	movs	r3, #1
 80067b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067b2:	2303      	movs	r3, #3
 80067b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80067b6:	2304      	movs	r3, #4
 80067b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067ba:	f107 031c 	add.w	r3, r7, #28
 80067be:	4619      	mov	r1, r3
 80067c0:	4825      	ldr	r0, [pc, #148]	; (8006858 <HAL_I2C_MspInit+0xf0>)
 80067c2:	f003 fbb5 	bl	8009f30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80067c6:	2300      	movs	r3, #0
 80067c8:	617b      	str	r3, [r7, #20]
 80067ca:	4b22      	ldr	r3, [pc, #136]	; (8006854 <HAL_I2C_MspInit+0xec>)
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	4a21      	ldr	r2, [pc, #132]	; (8006854 <HAL_I2C_MspInit+0xec>)
 80067d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067d4:	6413      	str	r3, [r2, #64]	; 0x40
 80067d6:	4b1f      	ldr	r3, [pc, #124]	; (8006854 <HAL_I2C_MspInit+0xec>)
 80067d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067de:	617b      	str	r3, [r7, #20]
 80067e0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80067e2:	e031      	b.n	8006848 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a1c      	ldr	r2, [pc, #112]	; (800685c <HAL_I2C_MspInit+0xf4>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d12c      	bne.n	8006848 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067ee:	2300      	movs	r3, #0
 80067f0:	613b      	str	r3, [r7, #16]
 80067f2:	4b18      	ldr	r3, [pc, #96]	; (8006854 <HAL_I2C_MspInit+0xec>)
 80067f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f6:	4a17      	ldr	r2, [pc, #92]	; (8006854 <HAL_I2C_MspInit+0xec>)
 80067f8:	f043 0302 	orr.w	r3, r3, #2
 80067fc:	6313      	str	r3, [r2, #48]	; 0x30
 80067fe:	4b15      	ldr	r3, [pc, #84]	; (8006854 <HAL_I2C_MspInit+0xec>)
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	613b      	str	r3, [r7, #16]
 8006808:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800680a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800680e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006810:	2312      	movs	r3, #18
 8006812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006814:	2301      	movs	r3, #1
 8006816:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006818:	2303      	movs	r3, #3
 800681a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800681c:	2304      	movs	r3, #4
 800681e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006820:	f107 031c 	add.w	r3, r7, #28
 8006824:	4619      	mov	r1, r3
 8006826:	480c      	ldr	r0, [pc, #48]	; (8006858 <HAL_I2C_MspInit+0xf0>)
 8006828:	f003 fb82 	bl	8009f30 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800682c:	2300      	movs	r3, #0
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	4b08      	ldr	r3, [pc, #32]	; (8006854 <HAL_I2C_MspInit+0xec>)
 8006832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006834:	4a07      	ldr	r2, [pc, #28]	; (8006854 <HAL_I2C_MspInit+0xec>)
 8006836:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800683a:	6413      	str	r3, [r2, #64]	; 0x40
 800683c:	4b05      	ldr	r3, [pc, #20]	; (8006854 <HAL_I2C_MspInit+0xec>)
 800683e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	68fb      	ldr	r3, [r7, #12]
}
 8006848:	bf00      	nop
 800684a:	3730      	adds	r7, #48	; 0x30
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	40005400 	.word	0x40005400
 8006854:	40023800 	.word	0x40023800
 8006858:	40020400 	.word	0x40020400
 800685c:	40005800 	.word	0x40005800

08006860 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b08a      	sub	sp, #40	; 0x28
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006868:	f107 0314 	add.w	r3, r7, #20
 800686c:	2200      	movs	r2, #0
 800686e:	601a      	str	r2, [r3, #0]
 8006870:	605a      	str	r2, [r3, #4]
 8006872:	609a      	str	r2, [r3, #8]
 8006874:	60da      	str	r2, [r3, #12]
 8006876:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a69      	ldr	r2, [pc, #420]	; (8006a24 <HAL_SD_MspInit+0x1c4>)
 800687e:	4293      	cmp	r3, r2
 8006880:	f040 80cb 	bne.w	8006a1a <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006884:	2300      	movs	r3, #0
 8006886:	613b      	str	r3, [r7, #16]
 8006888:	4b67      	ldr	r3, [pc, #412]	; (8006a28 <HAL_SD_MspInit+0x1c8>)
 800688a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688c:	4a66      	ldr	r2, [pc, #408]	; (8006a28 <HAL_SD_MspInit+0x1c8>)
 800688e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006892:	6453      	str	r3, [r2, #68]	; 0x44
 8006894:	4b64      	ldr	r3, [pc, #400]	; (8006a28 <HAL_SD_MspInit+0x1c8>)
 8006896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800689c:	613b      	str	r3, [r7, #16]
 800689e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068a0:	2300      	movs	r3, #0
 80068a2:	60fb      	str	r3, [r7, #12]
 80068a4:	4b60      	ldr	r3, [pc, #384]	; (8006a28 <HAL_SD_MspInit+0x1c8>)
 80068a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a8:	4a5f      	ldr	r2, [pc, #380]	; (8006a28 <HAL_SD_MspInit+0x1c8>)
 80068aa:	f043 0304 	orr.w	r3, r3, #4
 80068ae:	6313      	str	r3, [r2, #48]	; 0x30
 80068b0:	4b5d      	ldr	r3, [pc, #372]	; (8006a28 <HAL_SD_MspInit+0x1c8>)
 80068b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b4:	f003 0304 	and.w	r3, r3, #4
 80068b8:	60fb      	str	r3, [r7, #12]
 80068ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80068bc:	2300      	movs	r3, #0
 80068be:	60bb      	str	r3, [r7, #8]
 80068c0:	4b59      	ldr	r3, [pc, #356]	; (8006a28 <HAL_SD_MspInit+0x1c8>)
 80068c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c4:	4a58      	ldr	r2, [pc, #352]	; (8006a28 <HAL_SD_MspInit+0x1c8>)
 80068c6:	f043 0308 	orr.w	r3, r3, #8
 80068ca:	6313      	str	r3, [r2, #48]	; 0x30
 80068cc:	4b56      	ldr	r3, [pc, #344]	; (8006a28 <HAL_SD_MspInit+0x1c8>)
 80068ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d0:	f003 0308 	and.w	r3, r3, #8
 80068d4:	60bb      	str	r3, [r7, #8]
 80068d6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80068d8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80068dc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068de:	2302      	movs	r3, #2
 80068e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068e2:	2300      	movs	r3, #0
 80068e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068e6:	2303      	movs	r3, #3
 80068e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80068ea:	230c      	movs	r3, #12
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068ee:	f107 0314 	add.w	r3, r7, #20
 80068f2:	4619      	mov	r1, r3
 80068f4:	484d      	ldr	r0, [pc, #308]	; (8006a2c <HAL_SD_MspInit+0x1cc>)
 80068f6:	f003 fb1b 	bl	8009f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80068fa:	2304      	movs	r3, #4
 80068fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068fe:	2302      	movs	r3, #2
 8006900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006902:	2300      	movs	r3, #0
 8006904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006906:	2303      	movs	r3, #3
 8006908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800690a:	230c      	movs	r3, #12
 800690c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800690e:	f107 0314 	add.w	r3, r7, #20
 8006912:	4619      	mov	r1, r3
 8006914:	4846      	ldr	r0, [pc, #280]	; (8006a30 <HAL_SD_MspInit+0x1d0>)
 8006916:	f003 fb0b 	bl	8009f30 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800691a:	4b46      	ldr	r3, [pc, #280]	; (8006a34 <HAL_SD_MspInit+0x1d4>)
 800691c:	4a46      	ldr	r2, [pc, #280]	; (8006a38 <HAL_SD_MspInit+0x1d8>)
 800691e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006920:	4b44      	ldr	r3, [pc, #272]	; (8006a34 <HAL_SD_MspInit+0x1d4>)
 8006922:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006926:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006928:	4b42      	ldr	r3, [pc, #264]	; (8006a34 <HAL_SD_MspInit+0x1d4>)
 800692a:	2200      	movs	r2, #0
 800692c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800692e:	4b41      	ldr	r3, [pc, #260]	; (8006a34 <HAL_SD_MspInit+0x1d4>)
 8006930:	2200      	movs	r2, #0
 8006932:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006934:	4b3f      	ldr	r3, [pc, #252]	; (8006a34 <HAL_SD_MspInit+0x1d4>)
 8006936:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800693a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800693c:	4b3d      	ldr	r3, [pc, #244]	; (8006a34 <HAL_SD_MspInit+0x1d4>)
 800693e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006942:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006944:	4b3b      	ldr	r3, [pc, #236]	; (8006a34 <HAL_SD_MspInit+0x1d4>)
 8006946:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800694a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800694c:	4b39      	ldr	r3, [pc, #228]	; (8006a34 <HAL_SD_MspInit+0x1d4>)
 800694e:	2220      	movs	r2, #32
 8006950:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006952:	4b38      	ldr	r3, [pc, #224]	; (8006a34 <HAL_SD_MspInit+0x1d4>)
 8006954:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006958:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800695a:	4b36      	ldr	r3, [pc, #216]	; (8006a34 <HAL_SD_MspInit+0x1d4>)
 800695c:	2204      	movs	r2, #4
 800695e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006960:	4b34      	ldr	r3, [pc, #208]	; (8006a34 <HAL_SD_MspInit+0x1d4>)
 8006962:	2203      	movs	r2, #3
 8006964:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006966:	4b33      	ldr	r3, [pc, #204]	; (8006a34 <HAL_SD_MspInit+0x1d4>)
 8006968:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800696c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800696e:	4b31      	ldr	r3, [pc, #196]	; (8006a34 <HAL_SD_MspInit+0x1d4>)
 8006970:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006974:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006976:	482f      	ldr	r0, [pc, #188]	; (8006a34 <HAL_SD_MspInit+0x1d4>)
 8006978:	f002 ff3e 	bl	80097f8 <HAL_DMA_Init>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8006982:	f7ff fe0b 	bl	800659c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a2a      	ldr	r2, [pc, #168]	; (8006a34 <HAL_SD_MspInit+0x1d4>)
 800698a:	641a      	str	r2, [r3, #64]	; 0x40
 800698c:	4a29      	ldr	r2, [pc, #164]	; (8006a34 <HAL_SD_MspInit+0x1d4>)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006992:	4b2a      	ldr	r3, [pc, #168]	; (8006a3c <HAL_SD_MspInit+0x1dc>)
 8006994:	4a2a      	ldr	r2, [pc, #168]	; (8006a40 <HAL_SD_MspInit+0x1e0>)
 8006996:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006998:	4b28      	ldr	r3, [pc, #160]	; (8006a3c <HAL_SD_MspInit+0x1dc>)
 800699a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800699e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80069a0:	4b26      	ldr	r3, [pc, #152]	; (8006a3c <HAL_SD_MspInit+0x1dc>)
 80069a2:	2240      	movs	r2, #64	; 0x40
 80069a4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80069a6:	4b25      	ldr	r3, [pc, #148]	; (8006a3c <HAL_SD_MspInit+0x1dc>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80069ac:	4b23      	ldr	r3, [pc, #140]	; (8006a3c <HAL_SD_MspInit+0x1dc>)
 80069ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069b2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80069b4:	4b21      	ldr	r3, [pc, #132]	; (8006a3c <HAL_SD_MspInit+0x1dc>)
 80069b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80069ba:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80069bc:	4b1f      	ldr	r3, [pc, #124]	; (8006a3c <HAL_SD_MspInit+0x1dc>)
 80069be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80069c2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80069c4:	4b1d      	ldr	r3, [pc, #116]	; (8006a3c <HAL_SD_MspInit+0x1dc>)
 80069c6:	2220      	movs	r2, #32
 80069c8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80069ca:	4b1c      	ldr	r3, [pc, #112]	; (8006a3c <HAL_SD_MspInit+0x1dc>)
 80069cc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80069d0:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80069d2:	4b1a      	ldr	r3, [pc, #104]	; (8006a3c <HAL_SD_MspInit+0x1dc>)
 80069d4:	2204      	movs	r2, #4
 80069d6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80069d8:	4b18      	ldr	r3, [pc, #96]	; (8006a3c <HAL_SD_MspInit+0x1dc>)
 80069da:	2203      	movs	r2, #3
 80069dc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80069de:	4b17      	ldr	r3, [pc, #92]	; (8006a3c <HAL_SD_MspInit+0x1dc>)
 80069e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80069e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80069e6:	4b15      	ldr	r3, [pc, #84]	; (8006a3c <HAL_SD_MspInit+0x1dc>)
 80069e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80069ec:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80069ee:	4813      	ldr	r0, [pc, #76]	; (8006a3c <HAL_SD_MspInit+0x1dc>)
 80069f0:	f002 ff02 	bl	80097f8 <HAL_DMA_Init>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80069fa:	f7ff fdcf 	bl	800659c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a0e      	ldr	r2, [pc, #56]	; (8006a3c <HAL_SD_MspInit+0x1dc>)
 8006a02:	63da      	str	r2, [r3, #60]	; 0x3c
 8006a04:	4a0d      	ldr	r2, [pc, #52]	; (8006a3c <HAL_SD_MspInit+0x1dc>)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	2031      	movs	r0, #49	; 0x31
 8006a10:	f002 febb 	bl	800978a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006a14:	2031      	movs	r0, #49	; 0x31
 8006a16:	f002 fed4 	bl	80097c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006a1a:	bf00      	nop
 8006a1c:	3728      	adds	r7, #40	; 0x28
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	40012c00 	.word	0x40012c00
 8006a28:	40023800 	.word	0x40023800
 8006a2c:	40020800 	.word	0x40020800
 8006a30:	40020c00 	.word	0x40020c00
 8006a34:	2003e7e8 	.word	0x2003e7e8
 8006a38:	40026458 	.word	0x40026458
 8006a3c:	2003eb1c 	.word	0x2003eb1c
 8006a40:	400264a0 	.word	0x400264a0

08006a44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b08a      	sub	sp, #40	; 0x28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a4c:	f107 0314 	add.w	r3, r7, #20
 8006a50:	2200      	movs	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	605a      	str	r2, [r3, #4]
 8006a56:	609a      	str	r2, [r3, #8]
 8006a58:	60da      	str	r2, [r3, #12]
 8006a5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a19      	ldr	r2, [pc, #100]	; (8006ac8 <HAL_SPI_MspInit+0x84>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d12c      	bne.n	8006ac0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006a66:	2300      	movs	r3, #0
 8006a68:	613b      	str	r3, [r7, #16]
 8006a6a:	4b18      	ldr	r3, [pc, #96]	; (8006acc <HAL_SPI_MspInit+0x88>)
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	4a17      	ldr	r2, [pc, #92]	; (8006acc <HAL_SPI_MspInit+0x88>)
 8006a70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a74:	6413      	str	r3, [r2, #64]	; 0x40
 8006a76:	4b15      	ldr	r3, [pc, #84]	; (8006acc <HAL_SPI_MspInit+0x88>)
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a7e:	613b      	str	r3, [r7, #16]
 8006a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]
 8006a86:	4b11      	ldr	r3, [pc, #68]	; (8006acc <HAL_SPI_MspInit+0x88>)
 8006a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8a:	4a10      	ldr	r2, [pc, #64]	; (8006acc <HAL_SPI_MspInit+0x88>)
 8006a8c:	f043 0302 	orr.w	r3, r3, #2
 8006a90:	6313      	str	r3, [r2, #48]	; 0x30
 8006a92:	4b0e      	ldr	r3, [pc, #56]	; (8006acc <HAL_SPI_MspInit+0x88>)
 8006a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a96:	f003 0302 	and.w	r3, r3, #2
 8006a9a:	60fb      	str	r3, [r7, #12]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006a9e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006aac:	2303      	movs	r3, #3
 8006aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006ab0:	2305      	movs	r3, #5
 8006ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ab4:	f107 0314 	add.w	r3, r7, #20
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4805      	ldr	r0, [pc, #20]	; (8006ad0 <HAL_SPI_MspInit+0x8c>)
 8006abc:	f003 fa38 	bl	8009f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006ac0:	bf00      	nop
 8006ac2:	3728      	adds	r7, #40	; 0x28
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	40003800 	.word	0x40003800
 8006acc:	40023800 	.word	0x40023800
 8006ad0:	40020400 	.word	0x40020400

08006ad4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b08c      	sub	sp, #48	; 0x30
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006adc:	f107 031c 	add.w	r3, r7, #28
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	605a      	str	r2, [r3, #4]
 8006ae6:	609a      	str	r2, [r3, #8]
 8006ae8:	60da      	str	r2, [r3, #12]
 8006aea:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a2d      	ldr	r2, [pc, #180]	; (8006ba8 <HAL_TIM_PWM_MspInit+0xd4>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d12d      	bne.n	8006b52 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006af6:	2300      	movs	r3, #0
 8006af8:	61bb      	str	r3, [r7, #24]
 8006afa:	4b2c      	ldr	r3, [pc, #176]	; (8006bac <HAL_TIM_PWM_MspInit+0xd8>)
 8006afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afe:	4a2b      	ldr	r2, [pc, #172]	; (8006bac <HAL_TIM_PWM_MspInit+0xd8>)
 8006b00:	f043 0301 	orr.w	r3, r3, #1
 8006b04:	6453      	str	r3, [r2, #68]	; 0x44
 8006b06:	4b29      	ldr	r3, [pc, #164]	; (8006bac <HAL_TIM_PWM_MspInit+0xd8>)
 8006b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	61bb      	str	r3, [r7, #24]
 8006b10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b12:	2300      	movs	r3, #0
 8006b14:	617b      	str	r3, [r7, #20]
 8006b16:	4b25      	ldr	r3, [pc, #148]	; (8006bac <HAL_TIM_PWM_MspInit+0xd8>)
 8006b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1a:	4a24      	ldr	r2, [pc, #144]	; (8006bac <HAL_TIM_PWM_MspInit+0xd8>)
 8006b1c:	f043 0310 	orr.w	r3, r3, #16
 8006b20:	6313      	str	r3, [r2, #48]	; 0x30
 8006b22:	4b22      	ldr	r3, [pc, #136]	; (8006bac <HAL_TIM_PWM_MspInit+0xd8>)
 8006b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b26:	f003 0310 	and.w	r3, r3, #16
 8006b2a:	617b      	str	r3, [r7, #20]
 8006b2c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006b2e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b34:	2302      	movs	r3, #2
 8006b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006b40:	2301      	movs	r3, #1
 8006b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b44:	f107 031c 	add.w	r3, r7, #28
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4819      	ldr	r0, [pc, #100]	; (8006bb0 <HAL_TIM_PWM_MspInit+0xdc>)
 8006b4c:	f003 f9f0 	bl	8009f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006b50:	e026      	b.n	8006ba0 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a17      	ldr	r2, [pc, #92]	; (8006bb4 <HAL_TIM_PWM_MspInit+0xe0>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d10e      	bne.n	8006b7a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	613b      	str	r3, [r7, #16]
 8006b60:	4b12      	ldr	r3, [pc, #72]	; (8006bac <HAL_TIM_PWM_MspInit+0xd8>)
 8006b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b64:	4a11      	ldr	r2, [pc, #68]	; (8006bac <HAL_TIM_PWM_MspInit+0xd8>)
 8006b66:	f043 0302 	orr.w	r3, r3, #2
 8006b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8006b6c:	4b0f      	ldr	r3, [pc, #60]	; (8006bac <HAL_TIM_PWM_MspInit+0xd8>)
 8006b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	613b      	str	r3, [r7, #16]
 8006b76:	693b      	ldr	r3, [r7, #16]
}
 8006b78:	e012      	b.n	8006ba0 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a0e      	ldr	r2, [pc, #56]	; (8006bb8 <HAL_TIM_PWM_MspInit+0xe4>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d10d      	bne.n	8006ba0 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006b84:	2300      	movs	r3, #0
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	4b08      	ldr	r3, [pc, #32]	; (8006bac <HAL_TIM_PWM_MspInit+0xd8>)
 8006b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8c:	4a07      	ldr	r2, [pc, #28]	; (8006bac <HAL_TIM_PWM_MspInit+0xd8>)
 8006b8e:	f043 0304 	orr.w	r3, r3, #4
 8006b92:	6413      	str	r3, [r2, #64]	; 0x40
 8006b94:	4b05      	ldr	r3, [pc, #20]	; (8006bac <HAL_TIM_PWM_MspInit+0xd8>)
 8006b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b98:	f003 0304 	and.w	r3, r3, #4
 8006b9c:	60fb      	str	r3, [r7, #12]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
}
 8006ba0:	bf00      	nop
 8006ba2:	3730      	adds	r7, #48	; 0x30
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	40010000 	.word	0x40010000
 8006bac:	40023800 	.word	0x40023800
 8006bb0:	40021000 	.word	0x40021000
 8006bb4:	40000400 	.word	0x40000400
 8006bb8:	40000800 	.word	0x40000800

08006bbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b088      	sub	sp, #32
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a3e      	ldr	r2, [pc, #248]	; (8006cc4 <HAL_TIM_Base_MspInit+0x108>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d116      	bne.n	8006bfc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006bce:	2300      	movs	r3, #0
 8006bd0:	61fb      	str	r3, [r7, #28]
 8006bd2:	4b3d      	ldr	r3, [pc, #244]	; (8006cc8 <HAL_TIM_Base_MspInit+0x10c>)
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd6:	4a3c      	ldr	r2, [pc, #240]	; (8006cc8 <HAL_TIM_Base_MspInit+0x10c>)
 8006bd8:	f043 0310 	orr.w	r3, r3, #16
 8006bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8006bde:	4b3a      	ldr	r3, [pc, #232]	; (8006cc8 <HAL_TIM_Base_MspInit+0x10c>)
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	f003 0310 	and.w	r3, r3, #16
 8006be6:	61fb      	str	r3, [r7, #28]
 8006be8:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006bea:	2200      	movs	r2, #0
 8006bec:	2101      	movs	r1, #1
 8006bee:	2036      	movs	r0, #54	; 0x36
 8006bf0:	f002 fdcb 	bl	800978a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006bf4:	2036      	movs	r0, #54	; 0x36
 8006bf6:	f002 fde4 	bl	80097c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8006bfa:	e05e      	b.n	8006cba <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a32      	ldr	r2, [pc, #200]	; (8006ccc <HAL_TIM_Base_MspInit+0x110>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d116      	bne.n	8006c34 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006c06:	2300      	movs	r3, #0
 8006c08:	61bb      	str	r3, [r7, #24]
 8006c0a:	4b2f      	ldr	r3, [pc, #188]	; (8006cc8 <HAL_TIM_Base_MspInit+0x10c>)
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	4a2e      	ldr	r2, [pc, #184]	; (8006cc8 <HAL_TIM_Base_MspInit+0x10c>)
 8006c10:	f043 0320 	orr.w	r3, r3, #32
 8006c14:	6413      	str	r3, [r2, #64]	; 0x40
 8006c16:	4b2c      	ldr	r3, [pc, #176]	; (8006cc8 <HAL_TIM_Base_MspInit+0x10c>)
 8006c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1a:	f003 0320 	and.w	r3, r3, #32
 8006c1e:	61bb      	str	r3, [r7, #24]
 8006c20:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006c22:	2200      	movs	r2, #0
 8006c24:	2100      	movs	r1, #0
 8006c26:	2037      	movs	r0, #55	; 0x37
 8006c28:	f002 fdaf 	bl	800978a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006c2c:	2037      	movs	r0, #55	; 0x37
 8006c2e:	f002 fdc8 	bl	80097c2 <HAL_NVIC_EnableIRQ>
}
 8006c32:	e042      	b.n	8006cba <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a25      	ldr	r2, [pc, #148]	; (8006cd0 <HAL_TIM_Base_MspInit+0x114>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d10e      	bne.n	8006c5c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006c3e:	2300      	movs	r3, #0
 8006c40:	617b      	str	r3, [r7, #20]
 8006c42:	4b21      	ldr	r3, [pc, #132]	; (8006cc8 <HAL_TIM_Base_MspInit+0x10c>)
 8006c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c46:	4a20      	ldr	r2, [pc, #128]	; (8006cc8 <HAL_TIM_Base_MspInit+0x10c>)
 8006c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8006c4e:	4b1e      	ldr	r3, [pc, #120]	; (8006cc8 <HAL_TIM_Base_MspInit+0x10c>)
 8006c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	697b      	ldr	r3, [r7, #20]
}
 8006c5a:	e02e      	b.n	8006cba <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a1c      	ldr	r2, [pc, #112]	; (8006cd4 <HAL_TIM_Base_MspInit+0x118>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d10e      	bne.n	8006c84 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006c66:	2300      	movs	r3, #0
 8006c68:	613b      	str	r3, [r7, #16]
 8006c6a:	4b17      	ldr	r3, [pc, #92]	; (8006cc8 <HAL_TIM_Base_MspInit+0x10c>)
 8006c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c6e:	4a16      	ldr	r2, [pc, #88]	; (8006cc8 <HAL_TIM_Base_MspInit+0x10c>)
 8006c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c74:	6453      	str	r3, [r2, #68]	; 0x44
 8006c76:	4b14      	ldr	r3, [pc, #80]	; (8006cc8 <HAL_TIM_Base_MspInit+0x10c>)
 8006c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c7e:	613b      	str	r3, [r7, #16]
 8006c80:	693b      	ldr	r3, [r7, #16]
}
 8006c82:	e01a      	b.n	8006cba <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a13      	ldr	r2, [pc, #76]	; (8006cd8 <HAL_TIM_Base_MspInit+0x11c>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d115      	bne.n	8006cba <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]
 8006c92:	4b0d      	ldr	r3, [pc, #52]	; (8006cc8 <HAL_TIM_Base_MspInit+0x10c>)
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	4a0c      	ldr	r2, [pc, #48]	; (8006cc8 <HAL_TIM_Base_MspInit+0x10c>)
 8006c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c9e:	4b0a      	ldr	r3, [pc, #40]	; (8006cc8 <HAL_TIM_Base_MspInit+0x10c>)
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006caa:	2200      	movs	r2, #0
 8006cac:	2100      	movs	r1, #0
 8006cae:	202c      	movs	r0, #44	; 0x2c
 8006cb0:	f002 fd6b 	bl	800978a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006cb4:	202c      	movs	r0, #44	; 0x2c
 8006cb6:	f002 fd84 	bl	80097c2 <HAL_NVIC_EnableIRQ>
}
 8006cba:	bf00      	nop
 8006cbc:	3720      	adds	r7, #32
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	40001000 	.word	0x40001000
 8006cc8:	40023800 	.word	0x40023800
 8006ccc:	40001400 	.word	0x40001400
 8006cd0:	40014400 	.word	0x40014400
 8006cd4:	40014800 	.word	0x40014800
 8006cd8:	40001c00 	.word	0x40001c00

08006cdc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08a      	sub	sp, #40	; 0x28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ce4:	f107 0314 	add.w	r3, r7, #20
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	605a      	str	r2, [r3, #4]
 8006cee:	609a      	str	r2, [r3, #8]
 8006cf0:	60da      	str	r2, [r3, #12]
 8006cf2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a1d      	ldr	r2, [pc, #116]	; (8006d70 <HAL_TIM_Encoder_MspInit+0x94>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d133      	bne.n	8006d66 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006cfe:	2300      	movs	r3, #0
 8006d00:	613b      	str	r3, [r7, #16]
 8006d02:	4b1c      	ldr	r3, [pc, #112]	; (8006d74 <HAL_TIM_Encoder_MspInit+0x98>)
 8006d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d06:	4a1b      	ldr	r2, [pc, #108]	; (8006d74 <HAL_TIM_Encoder_MspInit+0x98>)
 8006d08:	f043 0302 	orr.w	r3, r3, #2
 8006d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8006d0e:	4b19      	ldr	r3, [pc, #100]	; (8006d74 <HAL_TIM_Encoder_MspInit+0x98>)
 8006d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	613b      	str	r3, [r7, #16]
 8006d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60fb      	str	r3, [r7, #12]
 8006d1e:	4b15      	ldr	r3, [pc, #84]	; (8006d74 <HAL_TIM_Encoder_MspInit+0x98>)
 8006d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d22:	4a14      	ldr	r2, [pc, #80]	; (8006d74 <HAL_TIM_Encoder_MspInit+0x98>)
 8006d24:	f043 0304 	orr.w	r3, r3, #4
 8006d28:	6313      	str	r3, [r2, #48]	; 0x30
 8006d2a:	4b12      	ldr	r3, [pc, #72]	; (8006d74 <HAL_TIM_Encoder_MspInit+0x98>)
 8006d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2e:	f003 0304 	and.w	r3, r3, #4
 8006d32:	60fb      	str	r3, [r7, #12]
 8006d34:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006d36:	23c0      	movs	r3, #192	; 0xc0
 8006d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d42:	2300      	movs	r3, #0
 8006d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006d46:	2303      	movs	r3, #3
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d4a:	f107 0314 	add.w	r3, r7, #20
 8006d4e:	4619      	mov	r1, r3
 8006d50:	4809      	ldr	r0, [pc, #36]	; (8006d78 <HAL_TIM_Encoder_MspInit+0x9c>)
 8006d52:	f003 f8ed 	bl	8009f30 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006d56:	2200      	movs	r2, #0
 8006d58:	2100      	movs	r1, #0
 8006d5a:	202c      	movs	r0, #44	; 0x2c
 8006d5c:	f002 fd15 	bl	800978a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006d60:	202c      	movs	r0, #44	; 0x2c
 8006d62:	f002 fd2e 	bl	80097c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006d66:	bf00      	nop
 8006d68:	3728      	adds	r7, #40	; 0x28
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	40010400 	.word	0x40010400
 8006d74:	40023800 	.word	0x40023800
 8006d78:	40020800 	.word	0x40020800

08006d7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b08c      	sub	sp, #48	; 0x30
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d84:	f107 031c 	add.w	r3, r7, #28
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	605a      	str	r2, [r3, #4]
 8006d8e:	609a      	str	r2, [r3, #8]
 8006d90:	60da      	str	r2, [r3, #12]
 8006d92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a5c      	ldr	r2, [pc, #368]	; (8006f0c <HAL_TIM_MspPostInit+0x190>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d11f      	bne.n	8006dde <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006d9e:	2300      	movs	r3, #0
 8006da0:	61bb      	str	r3, [r7, #24]
 8006da2:	4b5b      	ldr	r3, [pc, #364]	; (8006f10 <HAL_TIM_MspPostInit+0x194>)
 8006da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da6:	4a5a      	ldr	r2, [pc, #360]	; (8006f10 <HAL_TIM_MspPostInit+0x194>)
 8006da8:	f043 0310 	orr.w	r3, r3, #16
 8006dac:	6313      	str	r3, [r2, #48]	; 0x30
 8006dae:	4b58      	ldr	r3, [pc, #352]	; (8006f10 <HAL_TIM_MspPostInit+0x194>)
 8006db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db2:	f003 0310 	and.w	r3, r3, #16
 8006db6:	61bb      	str	r3, [r7, #24]
 8006db8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006dba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006dd0:	f107 031c 	add.w	r3, r7, #28
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	484f      	ldr	r0, [pc, #316]	; (8006f14 <HAL_TIM_MspPostInit+0x198>)
 8006dd8:	f003 f8aa 	bl	8009f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8006ddc:	e091      	b.n	8006f02 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a4d      	ldr	r2, [pc, #308]	; (8006f18 <HAL_TIM_MspPostInit+0x19c>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d11e      	bne.n	8006e26 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006de8:	2300      	movs	r3, #0
 8006dea:	617b      	str	r3, [r7, #20]
 8006dec:	4b48      	ldr	r3, [pc, #288]	; (8006f10 <HAL_TIM_MspPostInit+0x194>)
 8006dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df0:	4a47      	ldr	r2, [pc, #284]	; (8006f10 <HAL_TIM_MspPostInit+0x194>)
 8006df2:	f043 0302 	orr.w	r3, r3, #2
 8006df6:	6313      	str	r3, [r2, #48]	; 0x30
 8006df8:	4b45      	ldr	r3, [pc, #276]	; (8006f10 <HAL_TIM_MspPostInit+0x194>)
 8006dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfc:	f003 0302 	and.w	r3, r3, #2
 8006e00:	617b      	str	r3, [r7, #20]
 8006e02:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006e04:	2330      	movs	r3, #48	; 0x30
 8006e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e08:	2302      	movs	r3, #2
 8006e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e10:	2300      	movs	r3, #0
 8006e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006e14:	2302      	movs	r3, #2
 8006e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e18:	f107 031c 	add.w	r3, r7, #28
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	483f      	ldr	r0, [pc, #252]	; (8006f1c <HAL_TIM_MspPostInit+0x1a0>)
 8006e20:	f003 f886 	bl	8009f30 <HAL_GPIO_Init>
}
 8006e24:	e06d      	b.n	8006f02 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a3d      	ldr	r2, [pc, #244]	; (8006f20 <HAL_TIM_MspPostInit+0x1a4>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d11f      	bne.n	8006e70 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e30:	2300      	movs	r3, #0
 8006e32:	613b      	str	r3, [r7, #16]
 8006e34:	4b36      	ldr	r3, [pc, #216]	; (8006f10 <HAL_TIM_MspPostInit+0x194>)
 8006e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e38:	4a35      	ldr	r2, [pc, #212]	; (8006f10 <HAL_TIM_MspPostInit+0x194>)
 8006e3a:	f043 0308 	orr.w	r3, r3, #8
 8006e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8006e40:	4b33      	ldr	r3, [pc, #204]	; (8006f10 <HAL_TIM_MspPostInit+0x194>)
 8006e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e44:	f003 0308 	and.w	r3, r3, #8
 8006e48:	613b      	str	r3, [r7, #16]
 8006e4a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8006e4c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e52:	2302      	movs	r3, #2
 8006e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e56:	2300      	movs	r3, #0
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006e5e:	2302      	movs	r3, #2
 8006e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e62:	f107 031c 	add.w	r3, r7, #28
 8006e66:	4619      	mov	r1, r3
 8006e68:	482e      	ldr	r0, [pc, #184]	; (8006f24 <HAL_TIM_MspPostInit+0x1a8>)
 8006e6a:	f003 f861 	bl	8009f30 <HAL_GPIO_Init>
}
 8006e6e:	e048      	b.n	8006f02 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a2c      	ldr	r2, [pc, #176]	; (8006f28 <HAL_TIM_MspPostInit+0x1ac>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d11f      	bne.n	8006eba <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	4b24      	ldr	r3, [pc, #144]	; (8006f10 <HAL_TIM_MspPostInit+0x194>)
 8006e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e82:	4a23      	ldr	r2, [pc, #140]	; (8006f10 <HAL_TIM_MspPostInit+0x194>)
 8006e84:	f043 0302 	orr.w	r3, r3, #2
 8006e88:	6313      	str	r3, [r2, #48]	; 0x30
 8006e8a:	4b21      	ldr	r3, [pc, #132]	; (8006f10 <HAL_TIM_MspPostInit+0x194>)
 8006e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006eac:	f107 031c 	add.w	r3, r7, #28
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	481a      	ldr	r0, [pc, #104]	; (8006f1c <HAL_TIM_MspPostInit+0x1a0>)
 8006eb4:	f003 f83c 	bl	8009f30 <HAL_GPIO_Init>
}
 8006eb8:	e023      	b.n	8006f02 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a1b      	ldr	r2, [pc, #108]	; (8006f2c <HAL_TIM_MspPostInit+0x1b0>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d11e      	bne.n	8006f02 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	60bb      	str	r3, [r7, #8]
 8006ec8:	4b11      	ldr	r3, [pc, #68]	; (8006f10 <HAL_TIM_MspPostInit+0x194>)
 8006eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ecc:	4a10      	ldr	r2, [pc, #64]	; (8006f10 <HAL_TIM_MspPostInit+0x194>)
 8006ece:	f043 0302 	orr.w	r3, r3, #2
 8006ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8006ed4:	4b0e      	ldr	r3, [pc, #56]	; (8006f10 <HAL_TIM_MspPostInit+0x194>)
 8006ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	60bb      	str	r3, [r7, #8]
 8006ede:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ef6:	f107 031c 	add.w	r3, r7, #28
 8006efa:	4619      	mov	r1, r3
 8006efc:	4807      	ldr	r0, [pc, #28]	; (8006f1c <HAL_TIM_MspPostInit+0x1a0>)
 8006efe:	f003 f817 	bl	8009f30 <HAL_GPIO_Init>
}
 8006f02:	bf00      	nop
 8006f04:	3730      	adds	r7, #48	; 0x30
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	40010000 	.word	0x40010000
 8006f10:	40023800 	.word	0x40023800
 8006f14:	40021000 	.word	0x40021000
 8006f18:	40000400 	.word	0x40000400
 8006f1c:	40020400 	.word	0x40020400
 8006f20:	40000800 	.word	0x40000800
 8006f24:	40020c00 	.word	0x40020c00
 8006f28:	40014400 	.word	0x40014400
 8006f2c:	40014800 	.word	0x40014800

08006f30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08a      	sub	sp, #40	; 0x28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f38:	f107 0314 	add.w	r3, r7, #20
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	605a      	str	r2, [r3, #4]
 8006f42:	609a      	str	r2, [r3, #8]
 8006f44:	60da      	str	r2, [r3, #12]
 8006f46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a19      	ldr	r2, [pc, #100]	; (8006fb4 <HAL_UART_MspInit+0x84>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d12b      	bne.n	8006faa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006f52:	2300      	movs	r3, #0
 8006f54:	613b      	str	r3, [r7, #16]
 8006f56:	4b18      	ldr	r3, [pc, #96]	; (8006fb8 <HAL_UART_MspInit+0x88>)
 8006f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5a:	4a17      	ldr	r2, [pc, #92]	; (8006fb8 <HAL_UART_MspInit+0x88>)
 8006f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f60:	6413      	str	r3, [r2, #64]	; 0x40
 8006f62:	4b15      	ldr	r3, [pc, #84]	; (8006fb8 <HAL_UART_MspInit+0x88>)
 8006f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f6a:	613b      	str	r3, [r7, #16]
 8006f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60fb      	str	r3, [r7, #12]
 8006f72:	4b11      	ldr	r3, [pc, #68]	; (8006fb8 <HAL_UART_MspInit+0x88>)
 8006f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f76:	4a10      	ldr	r2, [pc, #64]	; (8006fb8 <HAL_UART_MspInit+0x88>)
 8006f78:	f043 0308 	orr.w	r3, r3, #8
 8006f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f7e:	4b0e      	ldr	r3, [pc, #56]	; (8006fb8 <HAL_UART_MspInit+0x88>)
 8006f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f82:	f003 0308 	and.w	r3, r3, #8
 8006f86:	60fb      	str	r3, [r7, #12]
 8006f88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006f8a:	2360      	movs	r3, #96	; 0x60
 8006f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f8e:	2302      	movs	r3, #2
 8006f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f92:	2300      	movs	r3, #0
 8006f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f96:	2303      	movs	r3, #3
 8006f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006f9a:	2307      	movs	r3, #7
 8006f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f9e:	f107 0314 	add.w	r3, r7, #20
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	4805      	ldr	r0, [pc, #20]	; (8006fbc <HAL_UART_MspInit+0x8c>)
 8006fa6:	f002 ffc3 	bl	8009f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006faa:	bf00      	nop
 8006fac:	3728      	adds	r7, #40	; 0x28
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	40004400 	.word	0x40004400
 8006fb8:	40023800 	.word	0x40023800
 8006fbc:	40020c00 	.word	0x40020c00

08006fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006fc4:	e7fe      	b.n	8006fc4 <NMI_Handler+0x4>

08006fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006fca:	e7fe      	b.n	8006fca <HardFault_Handler+0x4>

08006fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006fd0:	e7fe      	b.n	8006fd0 <MemManage_Handler+0x4>

08006fd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006fd6:	e7fe      	b.n	8006fd6 <BusFault_Handler+0x4>

08006fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006fdc:	e7fe      	b.n	8006fdc <UsageFault_Handler+0x4>

08006fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006fe2:	bf00      	nop
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006fec:	b480      	push	{r7}
 8006fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006ff0:	bf00      	nop
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr

08006ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006ffe:	bf00      	nop
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800700c:	f001 fe9c 	bl	8008d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007010:	bf00      	nop
 8007012:	bd80      	pop	{r7, pc}

08007014 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007018:	4803      	ldr	r0, [pc, #12]	; (8007028 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800701a:	f007 f96c 	bl	800e2f6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800701e:	4803      	ldr	r0, [pc, #12]	; (800702c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007020:	f007 f969 	bl	800e2f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007024:	bf00      	nop
 8007026:	bd80      	pop	{r7, pc}
 8007028:	2003e8a0 	.word	0x2003e8a0
 800702c:	2003ea9c 	.word	0x2003ea9c

08007030 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8007034:	4802      	ldr	r0, [pc, #8]	; (8007040 <SDIO_IRQHandler+0x10>)
 8007036:	f005 fa05 	bl	800c444 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800703a:	bf00      	nop
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	2003ebfc 	.word	0x2003ebfc

08007044 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007048:	4802      	ldr	r0, [pc, #8]	; (8007054 <TIM6_DAC_IRQHandler+0x10>)
 800704a:	f007 f954 	bl	800e2f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800704e:	bf00      	nop
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	2003eb7c 	.word	0x2003eb7c

08007058 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800705c:	4802      	ldr	r0, [pc, #8]	; (8007068 <TIM7_IRQHandler+0x10>)
 800705e:	f007 f94a 	bl	800e2f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007062:	bf00      	nop
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	2003ed20 	.word	0x2003ed20

0800706c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007070:	4802      	ldr	r0, [pc, #8]	; (800707c <DMA2_Stream2_IRQHandler+0x10>)
 8007072:	f002 fce9 	bl	8009a48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007076:	bf00      	nop
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	2003ecc0 	.word	0x2003ecc0

08007080 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007084:	4802      	ldr	r0, [pc, #8]	; (8007090 <DMA2_Stream3_IRQHandler+0x10>)
 8007086:	f002 fcdf 	bl	8009a48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800708a:	bf00      	nop
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	2003e7e8 	.word	0x2003e7e8

08007094 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007098:	4802      	ldr	r0, [pc, #8]	; (80070a4 <DMA2_Stream6_IRQHandler+0x10>)
 800709a:	f002 fcd5 	bl	8009a48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800709e:	bf00      	nop
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	2003eb1c 	.word	0x2003eb1c

080070a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80070b0:	4a14      	ldr	r2, [pc, #80]	; (8007104 <_sbrk+0x5c>)
 80070b2:	4b15      	ldr	r3, [pc, #84]	; (8007108 <_sbrk+0x60>)
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80070bc:	4b13      	ldr	r3, [pc, #76]	; (800710c <_sbrk+0x64>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d102      	bne.n	80070ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80070c4:	4b11      	ldr	r3, [pc, #68]	; (800710c <_sbrk+0x64>)
 80070c6:	4a12      	ldr	r2, [pc, #72]	; (8007110 <_sbrk+0x68>)
 80070c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80070ca:	4b10      	ldr	r3, [pc, #64]	; (800710c <_sbrk+0x64>)
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4413      	add	r3, r2
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d207      	bcs.n	80070e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80070d8:	f00d fd98 	bl	8014c0c <__errno>
 80070dc:	4602      	mov	r2, r0
 80070de:	230c      	movs	r3, #12
 80070e0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80070e2:	f04f 33ff 	mov.w	r3, #4294967295
 80070e6:	e009      	b.n	80070fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80070e8:	4b08      	ldr	r3, [pc, #32]	; (800710c <_sbrk+0x64>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80070ee:	4b07      	ldr	r3, [pc, #28]	; (800710c <_sbrk+0x64>)
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4413      	add	r3, r2
 80070f6:	4a05      	ldr	r2, [pc, #20]	; (800710c <_sbrk+0x64>)
 80070f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80070fa:	68fb      	ldr	r3, [r7, #12]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	20050000 	.word	0x20050000
 8007108:	00000800 	.word	0x00000800
 800710c:	200002bc 	.word	0x200002bc
 8007110:	20040e70 	.word	0x20040e70

08007114 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007114:	b480      	push	{r7}
 8007116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007118:	4b08      	ldr	r3, [pc, #32]	; (800713c <SystemInit+0x28>)
 800711a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800711e:	4a07      	ldr	r2, [pc, #28]	; (800713c <SystemInit+0x28>)
 8007120:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007124:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007128:	4b04      	ldr	r3, [pc, #16]	; (800713c <SystemInit+0x28>)
 800712a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800712e:	609a      	str	r2, [r3, #8]
#endif
}
 8007130:	bf00      	nop
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	e000ed00 	.word	0xe000ed00

08007140 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007140:	b598      	push	{r3, r4, r7, lr}
 8007142:	af00      	add	r7, sp, #0
	lcd_init();
 8007144:	f7f9 ff68 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007148:	483a      	ldr	r0, [pc, #232]	; (8007234 <cppInit+0xf4>)
 800714a:	f7fd fdef 	bl	8004d2c <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 800714e:	2064      	movs	r0, #100	; 0x64
 8007150:	f001 fe1a 	bl	8008d88 <HAL_Delay>
	power_sensor.updateValues();
 8007154:	4837      	ldr	r0, [pc, #220]	; (8007234 <cppInit+0xf4>)
 8007156:	f7fd fdf7 	bl	8004d48 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 800715a:	f7f9 ffa1 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800715e:	2100      	movs	r1, #0
 8007160:	2000      	movs	r0, #0
 8007162:	f7f9 ffad 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8007166:	4834      	ldr	r0, [pc, #208]	; (8007238 <cppInit+0xf8>)
 8007168:	f7f9 ffd4 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800716c:	2101      	movs	r1, #1
 800716e:	2000      	movs	r0, #0
 8007170:	f7f9 ffa6 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8007174:	482f      	ldr	r0, [pc, #188]	; (8007234 <cppInit+0xf4>)
 8007176:	f7fd fe11 	bl	8004d9c <_ZN11PowerSensor17getButteryVoltageEv>
 800717a:	ee10 3a10 	vmov	r3, s0
 800717e:	4618      	mov	r0, r3
 8007180:	f7f9 f9fa 	bl	8000578 <__aeabi_f2d>
 8007184:	4603      	mov	r3, r0
 8007186:	460c      	mov	r4, r1
 8007188:	461a      	mov	r2, r3
 800718a:	4623      	mov	r3, r4
 800718c:	482b      	ldr	r0, [pc, #172]	; (800723c <cppInit+0xfc>)
 800718e:	f7f9 ffc1 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8007192:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007196:	f001 fdf7 	bl	8008d88 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 800719a:	4829      	ldr	r0, [pc, #164]	; (8007240 <cppInit+0x100>)
 800719c:	f7fd f80a 	bl	80041b4 <_ZN6Logger10sdCardInitEv>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d007      	beq.n	80071b6 <cppInit+0x76>
		led.fullColor('G');
 80071a6:	2147      	movs	r1, #71	; 0x47
 80071a8:	4826      	ldr	r0, [pc, #152]	; (8007244 <cppInit+0x104>)
 80071aa:	f7fa fea7 	bl	8001efc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80071ae:	2064      	movs	r0, #100	; 0x64
 80071b0:	f001 fdea 	bl	8008d88 <HAL_Delay>
 80071b4:	e006      	b.n	80071c4 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 80071b6:	2152      	movs	r1, #82	; 0x52
 80071b8:	4822      	ldr	r0, [pc, #136]	; (8007244 <cppInit+0x104>)
 80071ba:	f7fa fe9f 	bl	8001efc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80071be:	2064      	movs	r0, #100	; 0x64
 80071c0:	f001 fde2 	bl	8008d88 <HAL_Delay>
	}

	line_sensor.ADCStart();
 80071c4:	4820      	ldr	r0, [pc, #128]	; (8007248 <cppInit+0x108>)
 80071c6:	f7fa fff5 	bl	80021b4 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 80071ca:	4820      	ldr	r0, [pc, #128]	; (800724c <cppInit+0x10c>)
 80071cc:	f7fd fa80 	bl	80046d0 <_ZN5Motor4initEv>
	encoder.init();
 80071d0:	481f      	ldr	r0, [pc, #124]	; (8007250 <cppInit+0x110>)
 80071d2:	f7f9 ffeb 	bl	80011ac <_ZN7Encoder4initEv>
	imu.init();
 80071d6:	481f      	ldr	r0, [pc, #124]	; (8007254 <cppInit+0x114>)
 80071d8:	f7fa fc4e 	bl	8001a78 <_ZN3IMU4initEv>
	line_trace.init();
 80071dc:	481e      	ldr	r0, [pc, #120]	; (8007258 <cppInit+0x118>)
 80071de:	f7fc fa21 	bl	8003624 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 80071e2:	4819      	ldr	r0, [pc, #100]	; (8007248 <cppInit+0x108>)
 80071e4:	f7fb f926 	bl	8002434 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 80071e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071ec:	f001 fdcc 	bl	8008d88 <HAL_Delay>

	led.fullColor('M');
 80071f0:	214d      	movs	r1, #77	; 0x4d
 80071f2:	4814      	ldr	r0, [pc, #80]	; (8007244 <cppInit+0x104>)
 80071f4:	f7fa fe82 	bl	8001efc <_ZN3LED9fullColorEc>
	imu.calibration();
 80071f8:	4816      	ldr	r0, [pc, #88]	; (8007254 <cppInit+0x114>)
 80071fa:	f7fa fd07 	bl	8001c0c <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 80071fe:	ed9f 1a17 	vldr	s2, [pc, #92]	; 800725c <cppInit+0x11c>
 8007202:	eddf 0a17 	vldr	s1, [pc, #92]	; 8007260 <cppInit+0x120>
 8007206:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007264 <cppInit+0x124>
 800720a:	4817      	ldr	r0, [pc, #92]	; (8007268 <cppInit+0x128>)
 800720c:	f7fe f9cc 	bl	80055a8 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 8007210:	ed9f 1a16 	vldr	s2, [pc, #88]	; 800726c <cppInit+0x12c>
 8007214:	eddf 0a16 	vldr	s1, [pc, #88]	; 8007270 <cppInit+0x130>
 8007218:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8007274 <cppInit+0x134>
 800721c:	4812      	ldr	r0, [pc, #72]	; (8007268 <cppInit+0x128>)
 800721e:	f7fe f9dc 	bl	80055da <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	//encoder.clearDistance();
	odometry.clearPotition();
 8007222:	4815      	ldr	r0, [pc, #84]	; (8007278 <cppInit+0x138>)
 8007224:	f7fd fc8c 	bl	8004b40 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007228:	4814      	ldr	r0, [pc, #80]	; (800727c <cppInit+0x13c>)
 800722a:	f7fd fd23 	bl	8004c74 <_ZN13PathFollowing4initEv>

}
 800722e:	bf00      	nop
 8007230:	bd98      	pop	{r3, r4, r7, pc}
 8007232:	bf00      	nop
 8007234:	200005d0 	.word	0x200005d0
 8007238:	08019414 	.word	0x08019414
 800723c:	0801941c 	.word	0x0801941c
 8007240:	200005f0 	.word	0x200005f0
 8007244:	200005cc 	.word	0x200005cc
 8007248:	200002c0 	.word	0x200002c0
 800724c:	200005c8 	.word	0x200005c8
 8007250:	20017d00 	.word	0x20017d00
 8007254:	200005dc 	.word	0x200005dc
 8007258:	20017da0 	.word	0x20017da0
 800725c:	3cceca68 	.word	0x3cceca68
 8007260:	4180f06f 	.word	0x4180f06f
 8007264:	3fea2d0e 	.word	0x3fea2d0e
 8007268:	20017d20 	.word	0x20017d20
 800726c:	3ab7dacd 	.word	0x3ab7dacd
 8007270:	3f5e3fbc 	.word	0x3f5e3fbc
 8007274:	3d8eefa2 	.word	0x3d8eefa2
 8007278:	20017d60 	.word	0x20017d60
 800727c:	20024d10 	.word	0x20024d10

08007280 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007284:	4819      	ldr	r0, [pc, #100]	; (80072ec <cppFlip1ms+0x6c>)
 8007286:	f7fa fff3 	bl	8002270 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 800728a:	4819      	ldr	r0, [pc, #100]	; (80072f0 <cppFlip1ms+0x70>)
 800728c:	f7fa fc1c 	bl	8001ac8 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007290:	4818      	ldr	r0, [pc, #96]	; (80072f4 <cppFlip1ms+0x74>)
 8007292:	f7f9 ffad 	bl	80011f0 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007296:	4818      	ldr	r0, [pc, #96]	; (80072f8 <cppFlip1ms+0x78>)
 8007298:	f7fc fb96 	bl	80039c8 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 800729c:	4817      	ldr	r0, [pc, #92]	; (80072fc <cppFlip1ms+0x7c>)
 800729e:	f7fe f9b5 	bl	800560c <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 80072a2:	4817      	ldr	r0, [pc, #92]	; (8007300 <cppFlip1ms+0x80>)
 80072a4:	f7fd fc30 	bl	8004b08 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 80072a8:	4816      	ldr	r0, [pc, #88]	; (8007304 <cppFlip1ms+0x84>)
 80072aa:	f7fd fded 	bl	8004e88 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 80072ae:	4816      	ldr	r0, [pc, #88]	; (8007308 <cppFlip1ms+0x88>)
 80072b0:	f7fd fa20 	bl	80046f4 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 80072b4:	4b15      	ldr	r3, [pc, #84]	; (800730c <cppFlip1ms+0x8c>)
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	3301      	adds	r3, #1
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	4b13      	ldr	r3, [pc, #76]	; (800730c <cppFlip1ms+0x8c>)
 80072be:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 80072c0:	4b12      	ldr	r3, [pc, #72]	; (800730c <cppFlip1ms+0x8c>)
 80072c2:	881b      	ldrh	r3, [r3, #0]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d90c      	bls.n	80072e2 <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 80072c8:	4809      	ldr	r0, [pc, #36]	; (80072f0 <cppFlip1ms+0x70>)
 80072ca:	f7fa fc55 	bl	8001b78 <_ZN3IMU8getOmegaEv>
 80072ce:	eef0 7a40 	vmov.f32	s15, s0
 80072d2:	eeb0 0a67 	vmov.f32	s0, s15
 80072d6:	480e      	ldr	r0, [pc, #56]	; (8007310 <cppFlip1ms+0x90>)
 80072d8:	f7fd ff38 	bl	800514c <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 80072dc:	4b0b      	ldr	r3, [pc, #44]	; (800730c <cppFlip1ms+0x8c>)
 80072de:	2200      	movs	r2, #0
 80072e0:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 80072e2:	4804      	ldr	r0, [pc, #16]	; (80072f4 <cppFlip1ms+0x74>)
 80072e4:	f7fa f86e 	bl	80013c4 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 80072e8:	bf00      	nop
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	200002c0 	.word	0x200002c0
 80072f0:	200005dc 	.word	0x200005dc
 80072f4:	20017d00 	.word	0x20017d00
 80072f8:	20017da0 	.word	0x20017da0
 80072fc:	20017d20 	.word	0x20017d20
 8007300:	20017d60 	.word	0x20017d60
 8007304:	200005b8 	.word	0x200005b8
 8007308:	200005c8 	.word	0x200005c8
 800730c:	2003c438 	.word	0x2003c438
 8007310:	20024b00 	.word	0x20024b00

08007314 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007318:	4802      	ldr	r0, [pc, #8]	; (8007324 <cppFlip100ns+0x10>)
 800731a:	f7fa ff5b 	bl	80021d4 <_ZN10LineSensor17storeSensorValuesEv>
	//line_trace.flip100ns();
}
 800731e:	bf00      	nop
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	200002c0 	.word	0x200002c0

08007328 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 800732c:	4b08      	ldr	r3, [pc, #32]	; (8007350 <cppFlip10ms+0x28>)
 800732e:	881b      	ldrh	r3, [r3, #0]
 8007330:	3301      	adds	r3, #1
 8007332:	b29a      	uxth	r2, r3
 8007334:	4b06      	ldr	r3, [pc, #24]	; (8007350 <cppFlip10ms+0x28>)
 8007336:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 8007338:	4b05      	ldr	r3, [pc, #20]	; (8007350 <cppFlip10ms+0x28>)
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	2b06      	cmp	r3, #6
 800733e:	d905      	bls.n	800734c <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8007340:	4804      	ldr	r0, [pc, #16]	; (8007354 <cppFlip10ms+0x2c>)
 8007342:	f7fd ff3f 	bl	80051c4 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8007346:	4b02      	ldr	r3, [pc, #8]	; (8007350 <cppFlip10ms+0x28>)
 8007348:	2200      	movs	r2, #0
 800734a:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 800734c:	bf00      	nop
 800734e:	bd80      	pop	{r7, pc}
 8007350:	2003c43a 	.word	0x2003c43a
 8007354:	20024b00 	.word	0x20024b00

08007358 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800735a:	b087      	sub	sp, #28
 800735c:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 800735e:	4baf      	ldr	r3, [pc, #700]	; (800761c <cppLoop+0x2c4>)
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	f3bf 8f5b 	dmb	ish
 8007366:	b2db      	uxtb	r3, r3
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b00      	cmp	r3, #0
 800736e:	bf0c      	ite	eq
 8007370:	2301      	moveq	r3, #1
 8007372:	2300      	movne	r3, #0
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d015      	beq.n	80073a6 <cppLoop+0x4e>
 800737a:	48a8      	ldr	r0, [pc, #672]	; (800761c <cppLoop+0x2c4>)
 800737c:	f00c f9e9 	bl	8013752 <__cxa_guard_acquire>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	bf14      	ite	ne
 8007386:	2301      	movne	r3, #1
 8007388:	2300      	moveq	r3, #0
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00a      	beq.n	80073a6 <cppLoop+0x4e>
 8007390:	48a3      	ldr	r0, [pc, #652]	; (8007620 <cppLoop+0x2c8>)
 8007392:	f7fc fa02 	bl	800379a <_ZN9LineTrace5getKpEv>
 8007396:	eef0 7a40 	vmov.f32	s15, s0
 800739a:	4ba2      	ldr	r3, [pc, #648]	; (8007624 <cppLoop+0x2cc>)
 800739c:	edc3 7a00 	vstr	s15, [r3]
 80073a0:	489e      	ldr	r0, [pc, #632]	; (800761c <cppLoop+0x2c4>)
 80073a2:	f00c f9e2 	bl	801376a <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 80073a6:	4ba0      	ldr	r3, [pc, #640]	; (8007628 <cppLoop+0x2d0>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	f3bf 8f5b 	dmb	ish
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	bf0c      	ite	eq
 80073b8:	2301      	moveq	r3, #1
 80073ba:	2300      	movne	r3, #0
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d015      	beq.n	80073ee <cppLoop+0x96>
 80073c2:	4899      	ldr	r0, [pc, #612]	; (8007628 <cppLoop+0x2d0>)
 80073c4:	f00c f9c5 	bl	8013752 <__cxa_guard_acquire>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	bf14      	ite	ne
 80073ce:	2301      	movne	r3, #1
 80073d0:	2300      	moveq	r3, #0
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00a      	beq.n	80073ee <cppLoop+0x96>
 80073d8:	4891      	ldr	r0, [pc, #580]	; (8007620 <cppLoop+0x2c8>)
 80073da:	f7fc f9ed 	bl	80037b8 <_ZN9LineTrace5getKiEv>
 80073de:	eef0 7a40 	vmov.f32	s15, s0
 80073e2:	4b92      	ldr	r3, [pc, #584]	; (800762c <cppLoop+0x2d4>)
 80073e4:	edc3 7a00 	vstr	s15, [r3]
 80073e8:	488f      	ldr	r0, [pc, #572]	; (8007628 <cppLoop+0x2d0>)
 80073ea:	f00c f9be 	bl	801376a <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 80073ee:	4b90      	ldr	r3, [pc, #576]	; (8007630 <cppLoop+0x2d8>)
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	f3bf 8f5b 	dmb	ish
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	bf0c      	ite	eq
 8007400:	2301      	moveq	r3, #1
 8007402:	2300      	movne	r3, #0
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d015      	beq.n	8007436 <cppLoop+0xde>
 800740a:	4889      	ldr	r0, [pc, #548]	; (8007630 <cppLoop+0x2d8>)
 800740c:	f00c f9a1 	bl	8013752 <__cxa_guard_acquire>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	bf14      	ite	ne
 8007416:	2301      	movne	r3, #1
 8007418:	2300      	moveq	r3, #0
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00a      	beq.n	8007436 <cppLoop+0xde>
 8007420:	487f      	ldr	r0, [pc, #508]	; (8007620 <cppLoop+0x2c8>)
 8007422:	f7fc f9d8 	bl	80037d6 <_ZN9LineTrace5getKdEv>
 8007426:	eef0 7a40 	vmov.f32	s15, s0
 800742a:	4b82      	ldr	r3, [pc, #520]	; (8007634 <cppLoop+0x2dc>)
 800742c:	edc3 7a00 	vstr	s15, [r3]
 8007430:	487f      	ldr	r0, [pc, #508]	; (8007630 <cppLoop+0x2d8>)
 8007432:	f00c f99a 	bl	801376a <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007436:	4b80      	ldr	r3, [pc, #512]	; (8007638 <cppLoop+0x2e0>)
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	f3bf 8f5b 	dmb	ish
 800743e:	b2db      	uxtb	r3, r3
 8007440:	f003 0301 	and.w	r3, r3, #1
 8007444:	2b00      	cmp	r3, #0
 8007446:	bf0c      	ite	eq
 8007448:	2301      	moveq	r3, #1
 800744a:	2300      	movne	r3, #0
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d015      	beq.n	800747e <cppLoop+0x126>
 8007452:	4879      	ldr	r0, [pc, #484]	; (8007638 <cppLoop+0x2e0>)
 8007454:	f00c f97d 	bl	8013752 <__cxa_guard_acquire>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	bf14      	ite	ne
 800745e:	2301      	movne	r3, #1
 8007460:	2300      	moveq	r3, #0
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00a      	beq.n	800747e <cppLoop+0x126>
 8007468:	486d      	ldr	r0, [pc, #436]	; (8007620 <cppLoop+0x2c8>)
 800746a:	f7fc fa20 	bl	80038ae <_ZN9LineTrace17getTargetVelocityEv>
 800746e:	eef0 7a40 	vmov.f32	s15, s0
 8007472:	4b72      	ldr	r3, [pc, #456]	; (800763c <cppLoop+0x2e4>)
 8007474:	edc3 7a00 	vstr	s15, [r3]
 8007478:	486f      	ldr	r0, [pc, #444]	; (8007638 <cppLoop+0x2e0>)
 800747a:	f00c f976 	bl	801376a <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 800747e:	4b70      	ldr	r3, [pc, #448]	; (8007640 <cppLoop+0x2e8>)
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	f3bf 8f5b 	dmb	ish
 8007486:	b2db      	uxtb	r3, r3
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	2b00      	cmp	r3, #0
 800748e:	bf0c      	ite	eq
 8007490:	2301      	moveq	r3, #1
 8007492:	2300      	movne	r3, #0
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d015      	beq.n	80074c6 <cppLoop+0x16e>
 800749a:	4869      	ldr	r0, [pc, #420]	; (8007640 <cppLoop+0x2e8>)
 800749c:	f00c f959 	bl	8013752 <__cxa_guard_acquire>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	bf14      	ite	ne
 80074a6:	2301      	movne	r3, #1
 80074a8:	2300      	moveq	r3, #0
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00a      	beq.n	80074c6 <cppLoop+0x16e>
 80074b0:	485b      	ldr	r0, [pc, #364]	; (8007620 <cppLoop+0x2c8>)
 80074b2:	f7fc fa0b 	bl	80038cc <_ZN9LineTrace14getMaxVelocityEv>
 80074b6:	eef0 7a40 	vmov.f32	s15, s0
 80074ba:	4b62      	ldr	r3, [pc, #392]	; (8007644 <cppLoop+0x2ec>)
 80074bc:	edc3 7a00 	vstr	s15, [r3]
 80074c0:	485f      	ldr	r0, [pc, #380]	; (8007640 <cppLoop+0x2e8>)
 80074c2:	f00c f952 	bl	801376a <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 80074c6:	4b60      	ldr	r3, [pc, #384]	; (8007648 <cppLoop+0x2f0>)
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	f3bf 8f5b 	dmb	ish
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	f003 0301 	and.w	r3, r3, #1
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	bf0c      	ite	eq
 80074d8:	2301      	moveq	r3, #1
 80074da:	2300      	movne	r3, #0
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d015      	beq.n	800750e <cppLoop+0x1b6>
 80074e2:	4859      	ldr	r0, [pc, #356]	; (8007648 <cppLoop+0x2f0>)
 80074e4:	f00c f935 	bl	8013752 <__cxa_guard_acquire>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	bf14      	ite	ne
 80074ee:	2301      	movne	r3, #1
 80074f0:	2300      	moveq	r3, #0
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00a      	beq.n	800750e <cppLoop+0x1b6>
 80074f8:	4849      	ldr	r0, [pc, #292]	; (8007620 <cppLoop+0x2c8>)
 80074fa:	f7fc f9f6 	bl	80038ea <_ZN9LineTrace15getMaxVelocity2Ev>
 80074fe:	eef0 7a40 	vmov.f32	s15, s0
 8007502:	4b52      	ldr	r3, [pc, #328]	; (800764c <cppLoop+0x2f4>)
 8007504:	edc3 7a00 	vstr	s15, [r3]
 8007508:	484f      	ldr	r0, [pc, #316]	; (8007648 <cppLoop+0x2f0>)
 800750a:	f00c f92e 	bl	801376a <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 800750e:	4b50      	ldr	r3, [pc, #320]	; (8007650 <cppLoop+0x2f8>)
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	f3bf 8f5b 	dmb	ish
 8007516:	b2db      	uxtb	r3, r3
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	2b00      	cmp	r3, #0
 800751e:	bf0c      	ite	eq
 8007520:	2301      	moveq	r3, #1
 8007522:	2300      	movne	r3, #0
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d015      	beq.n	8007556 <cppLoop+0x1fe>
 800752a:	4849      	ldr	r0, [pc, #292]	; (8007650 <cppLoop+0x2f8>)
 800752c:	f00c f911 	bl	8013752 <__cxa_guard_acquire>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	bf14      	ite	ne
 8007536:	2301      	movne	r3, #1
 8007538:	2300      	moveq	r3, #0
 800753a:	b2db      	uxtb	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00a      	beq.n	8007556 <cppLoop+0x1fe>
 8007540:	4837      	ldr	r0, [pc, #220]	; (8007620 <cppLoop+0x2c8>)
 8007542:	f7fc f9e2 	bl	800390a <_ZN9LineTrace14getMinVelocityEv>
 8007546:	eef0 7a40 	vmov.f32	s15, s0
 800754a:	4b42      	ldr	r3, [pc, #264]	; (8007654 <cppLoop+0x2fc>)
 800754c:	edc3 7a00 	vstr	s15, [r3]
 8007550:	483f      	ldr	r0, [pc, #252]	; (8007650 <cppLoop+0x2f8>)
 8007552:	f00c f90a 	bl	801376a <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007556:	4b40      	ldr	r3, [pc, #256]	; (8007658 <cppLoop+0x300>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	f3bf 8f5b 	dmb	ish
 800755e:	b2db      	uxtb	r3, r3
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	bf0c      	ite	eq
 8007568:	2301      	moveq	r3, #1
 800756a:	2300      	movne	r3, #0
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d015      	beq.n	800759e <cppLoop+0x246>
 8007572:	4839      	ldr	r0, [pc, #228]	; (8007658 <cppLoop+0x300>)
 8007574:	f00c f8ed 	bl	8013752 <__cxa_guard_acquire>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	bf14      	ite	ne
 800757e:	2301      	movne	r3, #1
 8007580:	2300      	moveq	r3, #0
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00a      	beq.n	800759e <cppLoop+0x246>
 8007588:	4825      	ldr	r0, [pc, #148]	; (8007620 <cppLoop+0x2c8>)
 800758a:	f7fc f9ce 	bl	800392a <_ZN9LineTrace15getMinVelocity2Ev>
 800758e:	eef0 7a40 	vmov.f32	s15, s0
 8007592:	4b32      	ldr	r3, [pc, #200]	; (800765c <cppLoop+0x304>)
 8007594:	edc3 7a00 	vstr	s15, [r3]
 8007598:	482f      	ldr	r0, [pc, #188]	; (8007658 <cppLoop+0x300>)
 800759a:	f00c f8e6 	bl	801376a <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 800759e:	4b30      	ldr	r3, [pc, #192]	; (8007660 <cppLoop+0x308>)
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	f3bf 8f5b 	dmb	ish
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	f003 0301 	and.w	r3, r3, #1
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	bf0c      	ite	eq
 80075b0:	2301      	moveq	r3, #1
 80075b2:	2300      	movne	r3, #0
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d015      	beq.n	80075e6 <cppLoop+0x28e>
 80075ba:	4829      	ldr	r0, [pc, #164]	; (8007660 <cppLoop+0x308>)
 80075bc:	f00c f8c9 	bl	8013752 <__cxa_guard_acquire>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	bf14      	ite	ne
 80075c6:	2301      	movne	r3, #1
 80075c8:	2300      	moveq	r3, #0
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00a      	beq.n	80075e6 <cppLoop+0x28e>
 80075d0:	4813      	ldr	r0, [pc, #76]	; (8007620 <cppLoop+0x2c8>)
 80075d2:	f7fc f9d4 	bl	800397e <_ZN9LineTrace9getMaxAccEv>
 80075d6:	eef0 7a40 	vmov.f32	s15, s0
 80075da:	4b22      	ldr	r3, [pc, #136]	; (8007664 <cppLoop+0x30c>)
 80075dc:	edc3 7a00 	vstr	s15, [r3]
 80075e0:	481f      	ldr	r0, [pc, #124]	; (8007660 <cppLoop+0x308>)
 80075e2:	f00c f8c2 	bl	801376a <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 80075e6:	4b20      	ldr	r3, [pc, #128]	; (8007668 <cppLoop+0x310>)
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	f3bf 8f5b 	dmb	ish
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	bf0c      	ite	eq
 80075f8:	2301      	moveq	r3, #1
 80075fa:	2300      	movne	r3, #0
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d03f      	beq.n	8007682 <cppLoop+0x32a>
 8007602:	4819      	ldr	r0, [pc, #100]	; (8007668 <cppLoop+0x310>)
 8007604:	f00c f8a5 	bl	8013752 <__cxa_guard_acquire>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	bf14      	ite	ne
 800760e:	2301      	movne	r3, #1
 8007610:	2300      	moveq	r3, #0
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b00      	cmp	r3, #0
 8007616:	d034      	beq.n	8007682 <cppLoop+0x32a>
 8007618:	e028      	b.n	800766c <cppLoop+0x314>
 800761a:	bf00      	nop
 800761c:	2003c448 	.word	0x2003c448
 8007620:	20017da0 	.word	0x20017da0
 8007624:	2003c444 	.word	0x2003c444
 8007628:	2003c450 	.word	0x2003c450
 800762c:	2003c44c 	.word	0x2003c44c
 8007630:	2003c458 	.word	0x2003c458
 8007634:	2003c454 	.word	0x2003c454
 8007638:	2003c460 	.word	0x2003c460
 800763c:	2003c45c 	.word	0x2003c45c
 8007640:	2003c468 	.word	0x2003c468
 8007644:	2003c464 	.word	0x2003c464
 8007648:	2003c470 	.word	0x2003c470
 800764c:	2003c46c 	.word	0x2003c46c
 8007650:	2003c478 	.word	0x2003c478
 8007654:	2003c474 	.word	0x2003c474
 8007658:	2003c480 	.word	0x2003c480
 800765c:	2003c47c 	.word	0x2003c47c
 8007660:	2003c488 	.word	0x2003c488
 8007664:	2003c484 	.word	0x2003c484
 8007668:	2003c490 	.word	0x2003c490
 800766c:	48c0      	ldr	r0, [pc, #768]	; (8007970 <cppLoop+0x618>)
 800766e:	f7fc f998 	bl	80039a2 <_ZN9LineTrace9getMaxDecEv>
 8007672:	eef0 7a40 	vmov.f32	s15, s0
 8007676:	4bbf      	ldr	r3, [pc, #764]	; (8007974 <cppLoop+0x61c>)
 8007678:	edc3 7a00 	vstr	s15, [r3]
 800767c:	48be      	ldr	r0, [pc, #760]	; (8007978 <cppLoop+0x620>)
 800767e:	f00c f874 	bl	801376a <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007682:	48be      	ldr	r0, [pc, #760]	; (800797c <cppLoop+0x624>)
 8007684:	f7fd fb9a 	bl	8004dbc <_ZN12RotarySwitch8getValueEv>
 8007688:	4603      	mov	r3, r0
 800768a:	2b0f      	cmp	r3, #15
 800768c:	f201 823f 	bhi.w	8008b0e <cppLoop+0x17b6>
 8007690:	a201      	add	r2, pc, #4	; (adr r2, 8007698 <cppLoop+0x340>)
 8007692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007696:	bf00      	nop
 8007698:	080076d9 	.word	0x080076d9
 800769c:	08007acf 	.word	0x08007acf
 80076a0:	08007b63 	.word	0x08007b63
 80076a4:	08007cfd 	.word	0x08007cfd
 80076a8:	08007dc9 	.word	0x08007dc9
 80076ac:	08008049 	.word	0x08008049
 80076b0:	08008115 	.word	0x08008115
 80076b4:	080083a7 	.word	0x080083a7
 80076b8:	0800862d 	.word	0x0800862d
 80076bc:	08008657 	.word	0x08008657
 80076c0:	08008713 	.word	0x08008713
 80076c4:	08008783 	.word	0x08008783
 80076c8:	0800881f 	.word	0x0800881f
 80076cc:	080088b9 	.word	0x080088b9
 80076d0:	080089c1 	.word	0x080089c1
 80076d4:	08008a69 	.word	0x08008a69
	case 0:
		led.fullColor('W');
 80076d8:	2157      	movs	r1, #87	; 0x57
 80076da:	48a9      	ldr	r0, [pc, #676]	; (8007980 <cppLoop+0x628>)
 80076dc:	f7fa fc0e 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80076e0:	f7f9 fcde 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80076e4:	2100      	movs	r1, #0
 80076e6:	2000      	movs	r0, #0
 80076e8:	f7f9 fcea 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 80076ec:	48a0      	ldr	r0, [pc, #640]	; (8007970 <cppLoop+0x618>)
 80076ee:	f7fc f854 	bl	800379a <_ZN9LineTrace5getKpEv>
 80076f2:	eeb0 7a40 	vmov.f32	s14, s0
 80076f6:	eddf 7aa3 	vldr	s15, [pc, #652]	; 8007984 <cppLoop+0x62c>
 80076fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076fe:	ee17 0a90 	vmov	r0, s15
 8007702:	f7f8 ff39 	bl	8000578 <__aeabi_f2d>
 8007706:	4603      	mov	r3, r0
 8007708:	460c      	mov	r4, r1
 800770a:	461a      	mov	r2, r3
 800770c:	4623      	mov	r3, r4
 800770e:	489e      	ldr	r0, [pc, #632]	; (8007988 <cppLoop+0x630>)
 8007710:	f7f9 fd00 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007714:	2101      	movs	r1, #1
 8007716:	2000      	movs	r0, #0
 8007718:	f7f9 fcd2 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 800771c:	4894      	ldr	r0, [pc, #592]	; (8007970 <cppLoop+0x618>)
 800771e:	f7fc f84b 	bl	80037b8 <_ZN9LineTrace5getKiEv>
 8007722:	eeb0 7a40 	vmov.f32	s14, s0
 8007726:	eddf 7a99 	vldr	s15, [pc, #612]	; 800798c <cppLoop+0x634>
 800772a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800772e:	ee17 0a90 	vmov	r0, s15
 8007732:	f7f8 ff21 	bl	8000578 <__aeabi_f2d>
 8007736:	4605      	mov	r5, r0
 8007738:	460e      	mov	r6, r1
 800773a:	488d      	ldr	r0, [pc, #564]	; (8007970 <cppLoop+0x618>)
 800773c:	f7fc f84b 	bl	80037d6 <_ZN9LineTrace5getKdEv>
 8007740:	eeb0 7a40 	vmov.f32	s14, s0
 8007744:	eddf 7a92 	vldr	s15, [pc, #584]	; 8007990 <cppLoop+0x638>
 8007748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800774c:	ee17 0a90 	vmov	r0, s15
 8007750:	f7f8 ff12 	bl	8000578 <__aeabi_f2d>
 8007754:	4603      	mov	r3, r0
 8007756:	460c      	mov	r4, r1
 8007758:	e9cd 3400 	strd	r3, r4, [sp]
 800775c:	462a      	mov	r2, r5
 800775e:	4633      	mov	r3, r6
 8007760:	488c      	ldr	r0, [pc, #560]	; (8007994 <cppLoop+0x63c>)
 8007762:	f7f9 fcd7 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007766:	488c      	ldr	r0, [pc, #560]	; (8007998 <cppLoop+0x640>)
 8007768:	f7fa fb64 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800776c:	4603      	mov	r3, r0
 800776e:	2b08      	cmp	r3, #8
 8007770:	bf0c      	ite	eq
 8007772:	2301      	moveq	r3, #1
 8007774:	2300      	movne	r3, #0
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2b00      	cmp	r3, #0
 800777a:	d022      	beq.n	80077c2 <cppLoop+0x46a>
			led.LR(-1, 1);
 800777c:	2201      	movs	r2, #1
 800777e:	f04f 31ff 	mov.w	r1, #4294967295
 8007782:	487f      	ldr	r0, [pc, #508]	; (8007980 <cppLoop+0x628>)
 8007784:	f7fa fc76 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007788:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800778c:	f001 fafc 	bl	8008d88 <HAL_Delay>

			selector++;
 8007790:	4b82      	ldr	r3, [pc, #520]	; (800799c <cppLoop+0x644>)
 8007792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007796:	b29b      	uxth	r3, r3
 8007798:	3301      	adds	r3, #1
 800779a:	b29b      	uxth	r3, r3
 800779c:	b21a      	sxth	r2, r3
 800779e:	4b7f      	ldr	r3, [pc, #508]	; (800799c <cppLoop+0x644>)
 80077a0:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80077a2:	4b7e      	ldr	r3, [pc, #504]	; (800799c <cppLoop+0x644>)
 80077a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	dd02      	ble.n	80077b2 <cppLoop+0x45a>
 80077ac:	4b7b      	ldr	r3, [pc, #492]	; (800799c <cppLoop+0x644>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80077b2:	2200      	movs	r2, #0
 80077b4:	f04f 31ff 	mov.w	r1, #4294967295
 80077b8:	4871      	ldr	r0, [pc, #452]	; (8007980 <cppLoop+0x628>)
 80077ba:	f7fa fc5b 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 80077be:	f001 b9a8 	b.w	8008b12 <cppLoop+0x17ba>
		else if(joy_stick.getValue() == JOY_R){
 80077c2:	4875      	ldr	r0, [pc, #468]	; (8007998 <cppLoop+0x640>)
 80077c4:	f7fa fb36 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b10      	cmp	r3, #16
 80077cc:	bf0c      	ite	eq
 80077ce:	2301      	moveq	r3, #1
 80077d0:	2300      	movne	r3, #0
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d059      	beq.n	800788c <cppLoop+0x534>
			led.LR(-1, 1);
 80077d8:	2201      	movs	r2, #1
 80077da:	f04f 31ff 	mov.w	r1, #4294967295
 80077de:	4868      	ldr	r0, [pc, #416]	; (8007980 <cppLoop+0x628>)
 80077e0:	f7fa fc48 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80077e4:	2064      	movs	r0, #100	; 0x64
 80077e6:	f001 facf 	bl	8008d88 <HAL_Delay>
			if(selector == 0){
 80077ea:	4b6c      	ldr	r3, [pc, #432]	; (800799c <cppLoop+0x644>)
 80077ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d113      	bne.n	800781c <cppLoop+0x4c4>
				adj_kp = adj_kp + 0.00001;
 80077f4:	4b6a      	ldr	r3, [pc, #424]	; (80079a0 <cppLoop+0x648>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7f8 febd 	bl	8000578 <__aeabi_f2d>
 80077fe:	a356      	add	r3, pc, #344	; (adr r3, 8007958 <cppLoop+0x600>)
 8007800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007804:	f7f8 fd5a 	bl	80002bc <__adddf3>
 8007808:	4603      	mov	r3, r0
 800780a:	460c      	mov	r4, r1
 800780c:	4618      	mov	r0, r3
 800780e:	4621      	mov	r1, r4
 8007810:	f7f9 fa02 	bl	8000c18 <__aeabi_d2f>
 8007814:	4602      	mov	r2, r0
 8007816:	4b62      	ldr	r3, [pc, #392]	; (80079a0 <cppLoop+0x648>)
 8007818:	601a      	str	r2, [r3, #0]
 800781a:	e02b      	b.n	8007874 <cppLoop+0x51c>
			else if(selector == 1){
 800781c:	4b5f      	ldr	r3, [pc, #380]	; (800799c <cppLoop+0x644>)
 800781e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d113      	bne.n	800784e <cppLoop+0x4f6>
				adj_ki = adj_ki + 0.0001;
 8007826:	4b5f      	ldr	r3, [pc, #380]	; (80079a4 <cppLoop+0x64c>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4618      	mov	r0, r3
 800782c:	f7f8 fea4 	bl	8000578 <__aeabi_f2d>
 8007830:	a34b      	add	r3, pc, #300	; (adr r3, 8007960 <cppLoop+0x608>)
 8007832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007836:	f7f8 fd41 	bl	80002bc <__adddf3>
 800783a:	4603      	mov	r3, r0
 800783c:	460c      	mov	r4, r1
 800783e:	4618      	mov	r0, r3
 8007840:	4621      	mov	r1, r4
 8007842:	f7f9 f9e9 	bl	8000c18 <__aeabi_d2f>
 8007846:	4602      	mov	r2, r0
 8007848:	4b56      	ldr	r3, [pc, #344]	; (80079a4 <cppLoop+0x64c>)
 800784a:	601a      	str	r2, [r3, #0]
 800784c:	e012      	b.n	8007874 <cppLoop+0x51c>
				adj_kd = adj_kd + 0.000001;
 800784e:	4b56      	ldr	r3, [pc, #344]	; (80079a8 <cppLoop+0x650>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4618      	mov	r0, r3
 8007854:	f7f8 fe90 	bl	8000578 <__aeabi_f2d>
 8007858:	a343      	add	r3, pc, #268	; (adr r3, 8007968 <cppLoop+0x610>)
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	f7f8 fd2d 	bl	80002bc <__adddf3>
 8007862:	4603      	mov	r3, r0
 8007864:	460c      	mov	r4, r1
 8007866:	4618      	mov	r0, r3
 8007868:	4621      	mov	r1, r4
 800786a:	f7f9 f9d5 	bl	8000c18 <__aeabi_d2f>
 800786e:	4602      	mov	r2, r0
 8007870:	4b4d      	ldr	r3, [pc, #308]	; (80079a8 <cppLoop+0x650>)
 8007872:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007874:	2152      	movs	r1, #82	; 0x52
 8007876:	4842      	ldr	r0, [pc, #264]	; (8007980 <cppLoop+0x628>)
 8007878:	f7fa fb40 	bl	8001efc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800787c:	2200      	movs	r2, #0
 800787e:	f04f 31ff 	mov.w	r1, #4294967295
 8007882:	483f      	ldr	r0, [pc, #252]	; (8007980 <cppLoop+0x628>)
 8007884:	f7fa fbf6 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007888:	f001 b943 	b.w	8008b12 <cppLoop+0x17ba>
		else if(joy_stick.getValue() == JOY_L){
 800788c:	4842      	ldr	r0, [pc, #264]	; (8007998 <cppLoop+0x640>)
 800788e:	f7fa fad1 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007892:	4603      	mov	r3, r0
 8007894:	2b01      	cmp	r3, #1
 8007896:	bf0c      	ite	eq
 8007898:	2301      	moveq	r3, #1
 800789a:	2300      	movne	r3, #0
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f000 8084 	beq.w	80079ac <cppLoop+0x654>
			led.LR(-1, 1);
 80078a4:	2201      	movs	r2, #1
 80078a6:	f04f 31ff 	mov.w	r1, #4294967295
 80078aa:	4835      	ldr	r0, [pc, #212]	; (8007980 <cppLoop+0x628>)
 80078ac:	f7fa fbe2 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80078b0:	2064      	movs	r0, #100	; 0x64
 80078b2:	f001 fa69 	bl	8008d88 <HAL_Delay>
			if(selector == 0){
 80078b6:	4b39      	ldr	r3, [pc, #228]	; (800799c <cppLoop+0x644>)
 80078b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d113      	bne.n	80078e8 <cppLoop+0x590>
				adj_kp = adj_kp - 0.00001;
 80078c0:	4b37      	ldr	r3, [pc, #220]	; (80079a0 <cppLoop+0x648>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7f8 fe57 	bl	8000578 <__aeabi_f2d>
 80078ca:	a323      	add	r3, pc, #140	; (adr r3, 8007958 <cppLoop+0x600>)
 80078cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d0:	f7f8 fcf2 	bl	80002b8 <__aeabi_dsub>
 80078d4:	4603      	mov	r3, r0
 80078d6:	460c      	mov	r4, r1
 80078d8:	4618      	mov	r0, r3
 80078da:	4621      	mov	r1, r4
 80078dc:	f7f9 f99c 	bl	8000c18 <__aeabi_d2f>
 80078e0:	4602      	mov	r2, r0
 80078e2:	4b2f      	ldr	r3, [pc, #188]	; (80079a0 <cppLoop+0x648>)
 80078e4:	601a      	str	r2, [r3, #0]
 80078e6:	e02b      	b.n	8007940 <cppLoop+0x5e8>
			else if(selector == 1){
 80078e8:	4b2c      	ldr	r3, [pc, #176]	; (800799c <cppLoop+0x644>)
 80078ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d113      	bne.n	800791a <cppLoop+0x5c2>
				adj_ki = adj_ki - 0.0001;
 80078f2:	4b2c      	ldr	r3, [pc, #176]	; (80079a4 <cppLoop+0x64c>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7f8 fe3e 	bl	8000578 <__aeabi_f2d>
 80078fc:	a318      	add	r3, pc, #96	; (adr r3, 8007960 <cppLoop+0x608>)
 80078fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007902:	f7f8 fcd9 	bl	80002b8 <__aeabi_dsub>
 8007906:	4603      	mov	r3, r0
 8007908:	460c      	mov	r4, r1
 800790a:	4618      	mov	r0, r3
 800790c:	4621      	mov	r1, r4
 800790e:	f7f9 f983 	bl	8000c18 <__aeabi_d2f>
 8007912:	4602      	mov	r2, r0
 8007914:	4b23      	ldr	r3, [pc, #140]	; (80079a4 <cppLoop+0x64c>)
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	e012      	b.n	8007940 <cppLoop+0x5e8>
				adj_kd = adj_kd - 0.000001;
 800791a:	4b23      	ldr	r3, [pc, #140]	; (80079a8 <cppLoop+0x650>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4618      	mov	r0, r3
 8007920:	f7f8 fe2a 	bl	8000578 <__aeabi_f2d>
 8007924:	a310      	add	r3, pc, #64	; (adr r3, 8007968 <cppLoop+0x610>)
 8007926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792a:	f7f8 fcc5 	bl	80002b8 <__aeabi_dsub>
 800792e:	4603      	mov	r3, r0
 8007930:	460c      	mov	r4, r1
 8007932:	4618      	mov	r0, r3
 8007934:	4621      	mov	r1, r4
 8007936:	f7f9 f96f 	bl	8000c18 <__aeabi_d2f>
 800793a:	4602      	mov	r2, r0
 800793c:	4b1a      	ldr	r3, [pc, #104]	; (80079a8 <cppLoop+0x650>)
 800793e:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007940:	2152      	movs	r1, #82	; 0x52
 8007942:	480f      	ldr	r0, [pc, #60]	; (8007980 <cppLoop+0x628>)
 8007944:	f7fa fada 	bl	8001efc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007948:	2200      	movs	r2, #0
 800794a:	f04f 31ff 	mov.w	r1, #4294967295
 800794e:	480c      	ldr	r0, [pc, #48]	; (8007980 <cppLoop+0x628>)
 8007950:	f7fa fb90 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007954:	f001 b8dd 	b.w	8008b12 <cppLoop+0x17ba>
 8007958:	88e368f1 	.word	0x88e368f1
 800795c:	3ee4f8b5 	.word	0x3ee4f8b5
 8007960:	eb1c432d 	.word	0xeb1c432d
 8007964:	3f1a36e2 	.word	0x3f1a36e2
 8007968:	a0b5ed8d 	.word	0xa0b5ed8d
 800796c:	3eb0c6f7 	.word	0x3eb0c6f7
 8007970:	20017da0 	.word	0x20017da0
 8007974:	2003c48c 	.word	0x2003c48c
 8007978:	2003c490 	.word	0x2003c490
 800797c:	200005c4 	.word	0x200005c4
 8007980:	200005cc 	.word	0x200005cc
 8007984:	447a0000 	.word	0x447a0000
 8007988:	08019420 	.word	0x08019420
 800798c:	42c80000 	.word	0x42c80000
 8007990:	461c4000 	.word	0x461c4000
 8007994:	0801942c 	.word	0x0801942c
 8007998:	200005c0 	.word	0x200005c0
 800799c:	2003c43c 	.word	0x2003c43c
 80079a0:	2003c444 	.word	0x2003c444
 80079a4:	2003c44c 	.word	0x2003c44c
 80079a8:	2003c454 	.word	0x2003c454
		else if(joy_stick.getValue() == JOY_D){
 80079ac:	48c4      	ldr	r0, [pc, #784]	; (8007cc0 <cppLoop+0x968>)
 80079ae:	f7fa fa41 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b04      	cmp	r3, #4
 80079b6:	bf0c      	ite	eq
 80079b8:	2301      	moveq	r3, #1
 80079ba:	2300      	movne	r3, #0
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d03d      	beq.n	8007a3e <cppLoop+0x6e6>
			led.LR(-1, 1);
 80079c2:	2201      	movs	r2, #1
 80079c4:	f04f 31ff 	mov.w	r1, #4294967295
 80079c8:	48be      	ldr	r0, [pc, #760]	; (8007cc4 <cppLoop+0x96c>)
 80079ca:	f7fa fb53 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80079ce:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80079d2:	f001 f9d9 	bl	8008d88 <HAL_Delay>
			sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80079d6:	f107 030c 	add.w	r3, r7, #12
 80079da:	2201      	movs	r2, #1
 80079dc:	49ba      	ldr	r1, [pc, #744]	; (8007cc8 <cppLoop+0x970>)
 80079de:	48bb      	ldr	r0, [pc, #748]	; (8007ccc <cppLoop+0x974>)
 80079e0:	f7f9 fe76 	bl	80016d0 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 80079e4:	f107 0308 	add.w	r3, r7, #8
 80079e8:	2201      	movs	r2, #1
 80079ea:	49b9      	ldr	r1, [pc, #740]	; (8007cd0 <cppLoop+0x978>)
 80079ec:	48b7      	ldr	r0, [pc, #732]	; (8007ccc <cppLoop+0x974>)
 80079ee:	f7f9 fe6f 	bl	80016d0 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 80079f2:	1d3b      	adds	r3, r7, #4
 80079f4:	2201      	movs	r2, #1
 80079f6:	49b7      	ldr	r1, [pc, #732]	; (8007cd4 <cppLoop+0x97c>)
 80079f8:	48b4      	ldr	r0, [pc, #720]	; (8007ccc <cppLoop+0x974>)
 80079fa:	f7f9 fe69 	bl	80016d0 <sd_read_array_float>
			line_trace.setGain(temp_kp, temp_ki, temp_kd);
 80079fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8007a02:	ed97 7a02 	vldr	s14, [r7, #8]
 8007a06:	edd7 6a01 	vldr	s13, [r7, #4]
 8007a0a:	eeb0 1a66 	vmov.f32	s2, s13
 8007a0e:	eef0 0a47 	vmov.f32	s1, s14
 8007a12:	eeb0 0a67 	vmov.f32	s0, s15
 8007a16:	48b0      	ldr	r0, [pc, #704]	; (8007cd8 <cppLoop+0x980>)
 8007a18:	f7fb fea6 	bl	8003768 <_ZN9LineTrace7setGainEfff>
			adj_kp = temp_kp;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4aaf      	ldr	r2, [pc, #700]	; (8007cdc <cppLoop+0x984>)
 8007a20:	6013      	str	r3, [r2, #0]
			adj_ki = temp_kp;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	4aae      	ldr	r2, [pc, #696]	; (8007ce0 <cppLoop+0x988>)
 8007a26:	6013      	str	r3, [r2, #0]
			adj_kd = temp_kp;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	4aae      	ldr	r2, [pc, #696]	; (8007ce4 <cppLoop+0x98c>)
 8007a2c:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f04f 31ff 	mov.w	r1, #4294967295
 8007a34:	48a3      	ldr	r0, [pc, #652]	; (8007cc4 <cppLoop+0x96c>)
 8007a36:	f7fa fb1d 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007a3a:	f001 b86a 	b.w	8008b12 <cppLoop+0x17ba>
		else if(joy_stick.getValue() == JOY_C){
 8007a3e:	48a0      	ldr	r0, [pc, #640]	; (8007cc0 <cppLoop+0x968>)
 8007a40:	f7fa f9f8 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	bf0c      	ite	eq
 8007a4a:	2301      	moveq	r3, #1
 8007a4c:	2300      	movne	r3, #0
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f001 805e 	beq.w	8008b12 <cppLoop+0x17ba>
			led.LR(-1, 1);
 8007a56:	2201      	movs	r2, #1
 8007a58:	f04f 31ff 	mov.w	r1, #4294967295
 8007a5c:	4899      	ldr	r0, [pc, #612]	; (8007cc4 <cppLoop+0x96c>)
 8007a5e:	f7fa fb09 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007a62:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007a66:	f001 f98f 	bl	8008d88 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	4b9b      	ldr	r3, [pc, #620]	; (8007cdc <cppLoop+0x984>)
 8007a70:	2201      	movs	r2, #1
 8007a72:	4995      	ldr	r1, [pc, #596]	; (8007cc8 <cppLoop+0x970>)
 8007a74:	4895      	ldr	r0, [pc, #596]	; (8007ccc <cppLoop+0x974>)
 8007a76:	f7f9 fdc5 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	4b98      	ldr	r3, [pc, #608]	; (8007ce0 <cppLoop+0x988>)
 8007a80:	2201      	movs	r2, #1
 8007a82:	4993      	ldr	r1, [pc, #588]	; (8007cd0 <cppLoop+0x978>)
 8007a84:	4891      	ldr	r0, [pc, #580]	; (8007ccc <cppLoop+0x974>)
 8007a86:	f7f9 fdbd 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	4b95      	ldr	r3, [pc, #596]	; (8007ce4 <cppLoop+0x98c>)
 8007a90:	2201      	movs	r2, #1
 8007a92:	4990      	ldr	r1, [pc, #576]	; (8007cd4 <cppLoop+0x97c>)
 8007a94:	488d      	ldr	r0, [pc, #564]	; (8007ccc <cppLoop+0x974>)
 8007a96:	f7f9 fdb5 	bl	8001604 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8007a9a:	4b90      	ldr	r3, [pc, #576]	; (8007cdc <cppLoop+0x984>)
 8007a9c:	edd3 7a00 	vldr	s15, [r3]
 8007aa0:	4b8f      	ldr	r3, [pc, #572]	; (8007ce0 <cppLoop+0x988>)
 8007aa2:	ed93 7a00 	vldr	s14, [r3]
 8007aa6:	4b8f      	ldr	r3, [pc, #572]	; (8007ce4 <cppLoop+0x98c>)
 8007aa8:	edd3 6a00 	vldr	s13, [r3]
 8007aac:	eeb0 1a66 	vmov.f32	s2, s13
 8007ab0:	eef0 0a47 	vmov.f32	s1, s14
 8007ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8007ab8:	4887      	ldr	r0, [pc, #540]	; (8007cd8 <cppLoop+0x980>)
 8007aba:	f7fb fe55 	bl	8003768 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8007ac4:	487f      	ldr	r0, [pc, #508]	; (8007cc4 <cppLoop+0x96c>)
 8007ac6:	f7fa fad5 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007aca:	f001 b822 	b.w	8008b12 <cppLoop+0x17ba>

	case 1:
		led.fullColor('C');
 8007ace:	2143      	movs	r1, #67	; 0x43
 8007ad0:	487c      	ldr	r0, [pc, #496]	; (8007cc4 <cppLoop+0x96c>)
 8007ad2:	f7fa fa13 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007ad6:	f7f9 fae3 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007ada:	2100      	movs	r1, #0
 8007adc:	2000      	movs	r0, #0
 8007ade:	f7f9 faef 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007ae2:	4881      	ldr	r0, [pc, #516]	; (8007ce8 <cppLoop+0x990>)
 8007ae4:	f7f9 fb16 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007ae8:	2101      	movs	r1, #1
 8007aea:	2000      	movs	r0, #0
 8007aec:	f7f9 fae8 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 8007af0:	4b7e      	ldr	r3, [pc, #504]	; (8007cec <cppLoop+0x994>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7f8 fd3f 	bl	8000578 <__aeabi_f2d>
 8007afa:	4603      	mov	r3, r0
 8007afc:	460c      	mov	r4, r1
 8007afe:	461a      	mov	r2, r3
 8007b00:	4623      	mov	r3, r4
 8007b02:	487b      	ldr	r0, [pc, #492]	; (8007cf0 <cppLoop+0x998>)
 8007b04:	f7f9 fb06 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007b08:	486d      	ldr	r0, [pc, #436]	; (8007cc0 <cppLoop+0x968>)
 8007b0a:	f7fa f993 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	bf0c      	ite	eq
 8007b14:	2301      	moveq	r3, #1
 8007b16:	2300      	movne	r3, #0
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 87fb 	beq.w	8008b16 <cppLoop+0x17be>
			HAL_Delay(500);
 8007b20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007b24:	f001 f930 	bl	8008d88 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 8007b28:	4b70      	ldr	r3, [pc, #448]	; (8007cec <cppLoop+0x994>)
 8007b2a:	edd3 7a00 	vldr	s15, [r3]
 8007b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8007b32:	4869      	ldr	r0, [pc, #420]	; (8007cd8 <cppLoop+0x980>)
 8007b34:	f7fb fe6d 	bl	8003812 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8007b38:	f04f 32ff 	mov.w	r2, #4294967295
 8007b3c:	2101      	movs	r1, #1
 8007b3e:	4861      	ldr	r0, [pc, #388]	; (8007cc4 <cppLoop+0x96c>)
 8007b40:	f7fa fa98 	bl	8002074 <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 8007b44:	2100      	movs	r1, #0
 8007b46:	4864      	ldr	r0, [pc, #400]	; (8007cd8 <cppLoop+0x980>)
 8007b48:	f7fc f9d8 	bl	8003efc <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8007b4c:	4862      	ldr	r0, [pc, #392]	; (8007cd8 <cppLoop+0x980>)
 8007b4e:	f7fc f8d7 	bl	8003d00 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007b52:	f04f 32ff 	mov.w	r2, #4294967295
 8007b56:	2100      	movs	r1, #0
 8007b58:	485a      	ldr	r0, [pc, #360]	; (8007cc4 <cppLoop+0x96c>)
 8007b5a:	f7fa fa8b 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8007b5e:	f000 bfda 	b.w	8008b16 <cppLoop+0x17be>

	case 2:
		led.fullColor('B');
 8007b62:	2142      	movs	r1, #66	; 0x42
 8007b64:	4857      	ldr	r0, [pc, #348]	; (8007cc4 <cppLoop+0x96c>)
 8007b66:	f7fa f9c9 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007b6a:	f7f9 fa99 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007b6e:	2100      	movs	r1, #0
 8007b70:	2000      	movs	r0, #0
 8007b72:	f7f9 faa5 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007b76:	485c      	ldr	r0, [pc, #368]	; (8007ce8 <cppLoop+0x990>)
 8007b78:	f7f9 facc 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007b7c:	2101      	movs	r1, #1
 8007b7e:	2000      	movs	r0, #0
 8007b80:	f7f9 fa9e 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 8007b84:	4b59      	ldr	r3, [pc, #356]	; (8007cec <cppLoop+0x994>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7f8 fcf5 	bl	8000578 <__aeabi_f2d>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	460c      	mov	r4, r1
 8007b92:	461a      	mov	r2, r3
 8007b94:	4623      	mov	r3, r4
 8007b96:	4857      	ldr	r0, [pc, #348]	; (8007cf4 <cppLoop+0x99c>)
 8007b98:	f7f9 fabc 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 8007b9c:	4848      	ldr	r0, [pc, #288]	; (8007cc0 <cppLoop+0x968>)
 8007b9e:	f7fa f949 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b10      	cmp	r3, #16
 8007ba6:	bf0c      	ite	eq
 8007ba8:	2301      	moveq	r3, #1
 8007baa:	2300      	movne	r3, #0
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d023      	beq.n	8007bfa <cppLoop+0x8a2>
			led.LR(-1, 1);
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8007bb8:	4842      	ldr	r0, [pc, #264]	; (8007cc4 <cppLoop+0x96c>)
 8007bba:	f7fa fa5b 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007bbe:	2064      	movs	r0, #100	; 0x64
 8007bc0:	f001 f8e2 	bl	8008d88 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 8007bc4:	4b49      	ldr	r3, [pc, #292]	; (8007cec <cppLoop+0x994>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7f8 fcd5 	bl	8000578 <__aeabi_f2d>
 8007bce:	a33a      	add	r3, pc, #232	; (adr r3, 8007cb8 <cppLoop+0x960>)
 8007bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd4:	f7f8 fb72 	bl	80002bc <__adddf3>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	460c      	mov	r4, r1
 8007bdc:	4618      	mov	r0, r3
 8007bde:	4621      	mov	r1, r4
 8007be0:	f7f9 f81a 	bl	8000c18 <__aeabi_d2f>
 8007be4:	4602      	mov	r2, r0
 8007be6:	4b41      	ldr	r3, [pc, #260]	; (8007cec <cppLoop+0x994>)
 8007be8:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8007bea:	2200      	movs	r2, #0
 8007bec:	f04f 31ff 	mov.w	r1, #4294967295
 8007bf0:	4834      	ldr	r0, [pc, #208]	; (8007cc4 <cppLoop+0x96c>)
 8007bf2:	f7fa fa3f 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 8007bf6:	f000 bf90 	b.w	8008b1a <cppLoop+0x17c2>
		else if(joy_stick.getValue() == JOY_L){
 8007bfa:	4831      	ldr	r0, [pc, #196]	; (8007cc0 <cppLoop+0x968>)
 8007bfc:	f7fa f91a 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	bf0c      	ite	eq
 8007c06:	2301      	moveq	r3, #1
 8007c08:	2300      	movne	r3, #0
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d023      	beq.n	8007c58 <cppLoop+0x900>
			led.LR(-1, 1);
 8007c10:	2201      	movs	r2, #1
 8007c12:	f04f 31ff 	mov.w	r1, #4294967295
 8007c16:	482b      	ldr	r0, [pc, #172]	; (8007cc4 <cppLoop+0x96c>)
 8007c18:	f7fa fa2c 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007c1c:	2064      	movs	r0, #100	; 0x64
 8007c1e:	f001 f8b3 	bl	8008d88 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8007c22:	4b32      	ldr	r3, [pc, #200]	; (8007cec <cppLoop+0x994>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7f8 fca6 	bl	8000578 <__aeabi_f2d>
 8007c2c:	a322      	add	r3, pc, #136	; (adr r3, 8007cb8 <cppLoop+0x960>)
 8007c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c32:	f7f8 fb41 	bl	80002b8 <__aeabi_dsub>
 8007c36:	4603      	mov	r3, r0
 8007c38:	460c      	mov	r4, r1
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	f7f8 ffeb 	bl	8000c18 <__aeabi_d2f>
 8007c42:	4602      	mov	r2, r0
 8007c44:	4b29      	ldr	r3, [pc, #164]	; (8007cec <cppLoop+0x994>)
 8007c46:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f04f 31ff 	mov.w	r1, #4294967295
 8007c4e:	481d      	ldr	r0, [pc, #116]	; (8007cc4 <cppLoop+0x96c>)
 8007c50:	f7fa fa10 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007c54:	f000 bf61 	b.w	8008b1a <cppLoop+0x17c2>
		else if(joy_stick.getValue() == JOY_C){
 8007c58:	4819      	ldr	r0, [pc, #100]	; (8007cc0 <cppLoop+0x968>)
 8007c5a:	f7fa f8eb 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	bf0c      	ite	eq
 8007c64:	2301      	moveq	r3, #1
 8007c66:	2300      	movne	r3, #0
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f000 8755 	beq.w	8008b1a <cppLoop+0x17c2>
			led.LR(-1, 1);
 8007c70:	2201      	movs	r2, #1
 8007c72:	f04f 31ff 	mov.w	r1, #4294967295
 8007c76:	4813      	ldr	r0, [pc, #76]	; (8007cc4 <cppLoop+0x96c>)
 8007c78:	f7fa f9fc 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007c7c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007c80:	f001 f882 	bl	8008d88 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 8007c84:	2300      	movs	r3, #0
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	4b18      	ldr	r3, [pc, #96]	; (8007cec <cppLoop+0x994>)
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	491a      	ldr	r1, [pc, #104]	; (8007cf8 <cppLoop+0x9a0>)
 8007c8e:	480f      	ldr	r0, [pc, #60]	; (8007ccc <cppLoop+0x974>)
 8007c90:	f7f9 fcb8 	bl	8001604 <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 8007c94:	4b15      	ldr	r3, [pc, #84]	; (8007cec <cppLoop+0x994>)
 8007c96:	edd3 7a00 	vldr	s15, [r3]
 8007c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8007c9e:	480e      	ldr	r0, [pc, #56]	; (8007cd8 <cppLoop+0x980>)
 8007ca0:	f7fb fdb7 	bl	8003812 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f04f 31ff 	mov.w	r1, #4294967295
 8007caa:	4806      	ldr	r0, [pc, #24]	; (8007cc4 <cppLoop+0x96c>)
 8007cac:	f7fa f9e2 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007cb0:	f000 bf33 	b.w	8008b1a <cppLoop+0x17c2>
 8007cb4:	f3af 8000 	nop.w
 8007cb8:	9999999a 	.word	0x9999999a
 8007cbc:	3fb99999 	.word	0x3fb99999
 8007cc0:	200005c0 	.word	0x200005c0
 8007cc4:	200005cc 	.word	0x200005cc
 8007cc8:	0801943c 	.word	0x0801943c
 8007ccc:	08019444 	.word	0x08019444
 8007cd0:	0801944c 	.word	0x0801944c
 8007cd4:	08019454 	.word	0x08019454
 8007cd8:	20017da0 	.word	0x20017da0
 8007cdc:	2003c444 	.word	0x2003c444
 8007ce0:	2003c44c 	.word	0x2003c44c
 8007ce4:	2003c454 	.word	0x2003c454
 8007ce8:	0801945c 	.word	0x0801945c
 8007cec:	2003c45c 	.word	0x2003c45c
 8007cf0:	08019468 	.word	0x08019468
 8007cf4:	08019474 	.word	0x08019474
 8007cf8:	08019480 	.word	0x08019480

	case 3:
		led.fullColor('Y');
 8007cfc:	2159      	movs	r1, #89	; 0x59
 8007cfe:	48aa      	ldr	r0, [pc, #680]	; (8007fa8 <cppLoop+0xc50>)
 8007d00:	f7fa f8fc 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007d04:	f7f9 f9cc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007d08:	2100      	movs	r1, #0
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	f7f9 f9d8 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 8007d10:	4ba6      	ldr	r3, [pc, #664]	; (8007fac <cppLoop+0xc54>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7f8 fc2f 	bl	8000578 <__aeabi_f2d>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	460c      	mov	r4, r1
 8007d1e:	461a      	mov	r2, r3
 8007d20:	4623      	mov	r3, r4
 8007d22:	48a3      	ldr	r0, [pc, #652]	; (8007fb0 <cppLoop+0xc58>)
 8007d24:	f7f9 f9f6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007d28:	2101      	movs	r1, #1
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	f7f9 f9c8 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 8007d30:	4ba0      	ldr	r3, [pc, #640]	; (8007fb4 <cppLoop+0xc5c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7f8 fc1f 	bl	8000578 <__aeabi_f2d>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	460c      	mov	r4, r1
 8007d3e:	461a      	mov	r2, r3
 8007d40:	4623      	mov	r3, r4
 8007d42:	489d      	ldr	r0, [pc, #628]	; (8007fb8 <cppLoop+0xc60>)
 8007d44:	f7f9 f9e6 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007d48:	489c      	ldr	r0, [pc, #624]	; (8007fbc <cppLoop+0xc64>)
 8007d4a:	f7fa f873 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	bf0c      	ite	eq
 8007d54:	2301      	moveq	r3, #1
 8007d56:	2300      	movne	r3, #0
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f000 86df 	beq.w	8008b1e <cppLoop+0x17c6>
			HAL_Delay(500);
 8007d60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007d64:	f001 f810 	bl	8008d88 <HAL_Delay>

			led.LR(1, -1);
 8007d68:	f04f 32ff 	mov.w	r2, #4294967295
 8007d6c:	2101      	movs	r1, #1
 8007d6e:	488e      	ldr	r0, [pc, #568]	; (8007fa8 <cppLoop+0xc50>)
 8007d70:	f7fa f980 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8007d74:	2101      	movs	r1, #1
 8007d76:	4892      	ldr	r0, [pc, #584]	; (8007fc0 <cppLoop+0xc68>)
 8007d78:	f7fc f8c0 	bl	8003efc <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8007d7c:	4b8d      	ldr	r3, [pc, #564]	; (8007fb4 <cppLoop+0xc5c>)
 8007d7e:	edd3 7a00 	vldr	s15, [r3]
 8007d82:	eeb0 0a67 	vmov.f32	s0, s15
 8007d86:	488e      	ldr	r0, [pc, #568]	; (8007fc0 <cppLoop+0xc68>)
 8007d88:	f7fb fd43 	bl	8003812 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8007d8c:	4b87      	ldr	r3, [pc, #540]	; (8007fac <cppLoop+0xc54>)
 8007d8e:	edd3 7a00 	vldr	s15, [r3]
 8007d92:	eeb0 0a67 	vmov.f32	s0, s15
 8007d96:	488a      	ldr	r0, [pc, #552]	; (8007fc0 <cppLoop+0xc68>)
 8007d98:	f7fb fd4a 	bl	8003830 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8007d9c:	4b85      	ldr	r3, [pc, #532]	; (8007fb4 <cppLoop+0xc5c>)
 8007d9e:	edd3 7a00 	vldr	s15, [r3]
 8007da2:	eeb0 0a67 	vmov.f32	s0, s15
 8007da6:	4886      	ldr	r0, [pc, #536]	; (8007fc0 <cppLoop+0xc68>)
 8007da8:	f7fb fd61 	bl	800386e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 8007dac:	4884      	ldr	r0, [pc, #528]	; (8007fc0 <cppLoop+0xc68>)
 8007dae:	f7fb f835 	bl	8002e1c <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8007db2:	4883      	ldr	r0, [pc, #524]	; (8007fc0 <cppLoop+0xc68>)
 8007db4:	f7fb ffa4 	bl	8003d00 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007db8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	487a      	ldr	r0, [pc, #488]	; (8007fa8 <cppLoop+0xc50>)
 8007dc0:	f7fa f958 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8007dc4:	f000 beab 	b.w	8008b1e <cppLoop+0x17c6>

	case 4:
		led.fullColor('G');
 8007dc8:	2147      	movs	r1, #71	; 0x47
 8007dca:	4877      	ldr	r0, [pc, #476]	; (8007fa8 <cppLoop+0xc50>)
 8007dcc:	f7fa f896 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007dd0:	f7f9 f966 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	f7f9 f972 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 8007ddc:	4878      	ldr	r0, [pc, #480]	; (8007fc0 <cppLoop+0xc68>)
 8007dde:	f7fb fd75 	bl	80038cc <_ZN9LineTrace14getMaxVelocityEv>
 8007de2:	ee10 3a10 	vmov	r3, s0
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7f8 fbc6 	bl	8000578 <__aeabi_f2d>
 8007dec:	4603      	mov	r3, r0
 8007dee:	460c      	mov	r4, r1
 8007df0:	461a      	mov	r2, r3
 8007df2:	4623      	mov	r3, r4
 8007df4:	486e      	ldr	r0, [pc, #440]	; (8007fb0 <cppLoop+0xc58>)
 8007df6:	f7f9 f98d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007dfa:	2101      	movs	r1, #1
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	f7f9 f95f 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 8007e02:	486f      	ldr	r0, [pc, #444]	; (8007fc0 <cppLoop+0xc68>)
 8007e04:	f7fb fd81 	bl	800390a <_ZN9LineTrace14getMinVelocityEv>
 8007e08:	ee10 3a10 	vmov	r3, s0
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7f8 fbb3 	bl	8000578 <__aeabi_f2d>
 8007e12:	4603      	mov	r3, r0
 8007e14:	460c      	mov	r4, r1
 8007e16:	461a      	mov	r2, r3
 8007e18:	4623      	mov	r3, r4
 8007e1a:	486a      	ldr	r0, [pc, #424]	; (8007fc4 <cppLoop+0xc6c>)
 8007e1c:	f7f9 f97a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007e20:	4866      	ldr	r0, [pc, #408]	; (8007fbc <cppLoop+0xc64>)
 8007e22:	f7fa f807 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b08      	cmp	r3, #8
 8007e2a:	bf0c      	ite	eq
 8007e2c:	2301      	moveq	r3, #1
 8007e2e:	2300      	movne	r3, #0
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d022      	beq.n	8007e7c <cppLoop+0xb24>
			led.LR(-1, 1);
 8007e36:	2201      	movs	r2, #1
 8007e38:	f04f 31ff 	mov.w	r1, #4294967295
 8007e3c:	485a      	ldr	r0, [pc, #360]	; (8007fa8 <cppLoop+0xc50>)
 8007e3e:	f7fa f919 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007e42:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e46:	f000 ff9f 	bl	8008d88 <HAL_Delay>

			selector_vel++;
 8007e4a:	4b5f      	ldr	r3, [pc, #380]	; (8007fc8 <cppLoop+0xc70>)
 8007e4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	3301      	adds	r3, #1
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	b21a      	sxth	r2, r3
 8007e58:	4b5b      	ldr	r3, [pc, #364]	; (8007fc8 <cppLoop+0xc70>)
 8007e5a:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 8007e5c:	4b5a      	ldr	r3, [pc, #360]	; (8007fc8 <cppLoop+0xc70>)
 8007e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	dd02      	ble.n	8007e6c <cppLoop+0xb14>
 8007e66:	4b58      	ldr	r3, [pc, #352]	; (8007fc8 <cppLoop+0xc70>)
 8007e68:	2200      	movs	r2, #0
 8007e6a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f04f 31ff 	mov.w	r1, #4294967295
 8007e72:	484d      	ldr	r0, [pc, #308]	; (8007fa8 <cppLoop+0xc50>)
 8007e74:	f7fa f8fe 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 8007e78:	f000 be53 	b.w	8008b22 <cppLoop+0x17ca>
		else if(joy_stick.getValue() == JOY_R){
 8007e7c:	484f      	ldr	r0, [pc, #316]	; (8007fbc <cppLoop+0xc64>)
 8007e7e:	f7f9 ffd9 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b10      	cmp	r3, #16
 8007e86:	bf0c      	ite	eq
 8007e88:	2301      	moveq	r3, #1
 8007e8a:	2300      	movne	r3, #0
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d03c      	beq.n	8007f0c <cppLoop+0xbb4>
			led.LR(-1, 1);
 8007e92:	2201      	movs	r2, #1
 8007e94:	f04f 31ff 	mov.w	r1, #4294967295
 8007e98:	4843      	ldr	r0, [pc, #268]	; (8007fa8 <cppLoop+0xc50>)
 8007e9a:	f7fa f8eb 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007e9e:	2064      	movs	r0, #100	; 0x64
 8007ea0:	f000 ff72 	bl	8008d88 <HAL_Delay>
			if(selector_vel == 0)
 8007ea4:	4b48      	ldr	r3, [pc, #288]	; (8007fc8 <cppLoop+0xc70>)
 8007ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d113      	bne.n	8007ed6 <cppLoop+0xb7e>
				adj_max_velocity = adj_max_velocity + 0.1;
 8007eae:	4b3f      	ldr	r3, [pc, #252]	; (8007fac <cppLoop+0xc54>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7f8 fb60 	bl	8000578 <__aeabi_f2d>
 8007eb8:	a339      	add	r3, pc, #228	; (adr r3, 8007fa0 <cppLoop+0xc48>)
 8007eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebe:	f7f8 f9fd 	bl	80002bc <__adddf3>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	460c      	mov	r4, r1
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	4621      	mov	r1, r4
 8007eca:	f7f8 fea5 	bl	8000c18 <__aeabi_d2f>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	4b36      	ldr	r3, [pc, #216]	; (8007fac <cppLoop+0xc54>)
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	e012      	b.n	8007efc <cppLoop+0xba4>
				adj_min_velocity = adj_min_velocity + 0.1;
 8007ed6:	4b37      	ldr	r3, [pc, #220]	; (8007fb4 <cppLoop+0xc5c>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7f8 fb4c 	bl	8000578 <__aeabi_f2d>
 8007ee0:	a32f      	add	r3, pc, #188	; (adr r3, 8007fa0 <cppLoop+0xc48>)
 8007ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee6:	f7f8 f9e9 	bl	80002bc <__adddf3>
 8007eea:	4603      	mov	r3, r0
 8007eec:	460c      	mov	r4, r1
 8007eee:	4618      	mov	r0, r3
 8007ef0:	4621      	mov	r1, r4
 8007ef2:	f7f8 fe91 	bl	8000c18 <__aeabi_d2f>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	4b2e      	ldr	r3, [pc, #184]	; (8007fb4 <cppLoop+0xc5c>)
 8007efa:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007efc:	2200      	movs	r2, #0
 8007efe:	f04f 31ff 	mov.w	r1, #4294967295
 8007f02:	4829      	ldr	r0, [pc, #164]	; (8007fa8 <cppLoop+0xc50>)
 8007f04:	f7fa f8b6 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007f08:	f000 be0b 	b.w	8008b22 <cppLoop+0x17ca>
		else if(joy_stick.getValue() == JOY_L){
 8007f0c:	482b      	ldr	r0, [pc, #172]	; (8007fbc <cppLoop+0xc64>)
 8007f0e:	f7f9 ff91 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	bf0c      	ite	eq
 8007f18:	2301      	moveq	r3, #1
 8007f1a:	2300      	movne	r3, #0
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d054      	beq.n	8007fcc <cppLoop+0xc74>
			led.LR(-1, 1);
 8007f22:	2201      	movs	r2, #1
 8007f24:	f04f 31ff 	mov.w	r1, #4294967295
 8007f28:	481f      	ldr	r0, [pc, #124]	; (8007fa8 <cppLoop+0xc50>)
 8007f2a:	f7fa f8a3 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007f2e:	2064      	movs	r0, #100	; 0x64
 8007f30:	f000 ff2a 	bl	8008d88 <HAL_Delay>
			if(selector_vel == 0)
 8007f34:	4b24      	ldr	r3, [pc, #144]	; (8007fc8 <cppLoop+0xc70>)
 8007f36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d113      	bne.n	8007f66 <cppLoop+0xc0e>
				adj_max_velocity = adj_max_velocity - 0.1;
 8007f3e:	4b1b      	ldr	r3, [pc, #108]	; (8007fac <cppLoop+0xc54>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7f8 fb18 	bl	8000578 <__aeabi_f2d>
 8007f48:	a315      	add	r3, pc, #84	; (adr r3, 8007fa0 <cppLoop+0xc48>)
 8007f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4e:	f7f8 f9b3 	bl	80002b8 <__aeabi_dsub>
 8007f52:	4603      	mov	r3, r0
 8007f54:	460c      	mov	r4, r1
 8007f56:	4618      	mov	r0, r3
 8007f58:	4621      	mov	r1, r4
 8007f5a:	f7f8 fe5d 	bl	8000c18 <__aeabi_d2f>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	4b12      	ldr	r3, [pc, #72]	; (8007fac <cppLoop+0xc54>)
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	e012      	b.n	8007f8c <cppLoop+0xc34>
				adj_min_velocity = adj_min_velocity - 0.1;
 8007f66:	4b13      	ldr	r3, [pc, #76]	; (8007fb4 <cppLoop+0xc5c>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7f8 fb04 	bl	8000578 <__aeabi_f2d>
 8007f70:	a30b      	add	r3, pc, #44	; (adr r3, 8007fa0 <cppLoop+0xc48>)
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	f7f8 f99f 	bl	80002b8 <__aeabi_dsub>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	460c      	mov	r4, r1
 8007f7e:	4618      	mov	r0, r3
 8007f80:	4621      	mov	r1, r4
 8007f82:	f7f8 fe49 	bl	8000c18 <__aeabi_d2f>
 8007f86:	4602      	mov	r2, r0
 8007f88:	4b0a      	ldr	r3, [pc, #40]	; (8007fb4 <cppLoop+0xc5c>)
 8007f8a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f04f 31ff 	mov.w	r1, #4294967295
 8007f92:	4805      	ldr	r0, [pc, #20]	; (8007fa8 <cppLoop+0xc50>)
 8007f94:	f7fa f86e 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007f98:	f000 bdc3 	b.w	8008b22 <cppLoop+0x17ca>
 8007f9c:	f3af 8000 	nop.w
 8007fa0:	9999999a 	.word	0x9999999a
 8007fa4:	3fb99999 	.word	0x3fb99999
 8007fa8:	200005cc 	.word	0x200005cc
 8007fac:	2003c464 	.word	0x2003c464
 8007fb0:	0801948c 	.word	0x0801948c
 8007fb4:	2003c474 	.word	0x2003c474
 8007fb8:	08019468 	.word	0x08019468
 8007fbc:	200005c0 	.word	0x200005c0
 8007fc0:	20017da0 	.word	0x20017da0
 8007fc4:	08019474 	.word	0x08019474
 8007fc8:	2003c440 	.word	0x2003c440
		else if(joy_stick.getValue() == JOY_C){
 8007fcc:	48bc      	ldr	r0, [pc, #752]	; (80082c0 <cppLoop+0xf68>)
 8007fce:	f7f9 ff31 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	bf0c      	ite	eq
 8007fd8:	2301      	moveq	r3, #1
 8007fda:	2300      	movne	r3, #0
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	f000 859f 	beq.w	8008b22 <cppLoop+0x17ca>
			led.LR(-1, 1);
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f04f 31ff 	mov.w	r1, #4294967295
 8007fea:	48b6      	ldr	r0, [pc, #728]	; (80082c4 <cppLoop+0xf6c>)
 8007fec:	f7fa f842 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007ff0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007ff4:	f000 fec8 	bl	8008d88 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	4bb2      	ldr	r3, [pc, #712]	; (80082c8 <cppLoop+0xf70>)
 8007ffe:	2201      	movs	r2, #1
 8008000:	49b2      	ldr	r1, [pc, #712]	; (80082cc <cppLoop+0xf74>)
 8008002:	48b3      	ldr	r0, [pc, #716]	; (80082d0 <cppLoop+0xf78>)
 8008004:	f7f9 fafe 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008008:	2300      	movs	r3, #0
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	4bb1      	ldr	r3, [pc, #708]	; (80082d4 <cppLoop+0xf7c>)
 800800e:	2201      	movs	r2, #1
 8008010:	49b1      	ldr	r1, [pc, #708]	; (80082d8 <cppLoop+0xf80>)
 8008012:	48af      	ldr	r0, [pc, #700]	; (80082d0 <cppLoop+0xf78>)
 8008014:	f7f9 faf6 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008018:	4bab      	ldr	r3, [pc, #684]	; (80082c8 <cppLoop+0xf70>)
 800801a:	edd3 7a00 	vldr	s15, [r3]
 800801e:	eeb0 0a67 	vmov.f32	s0, s15
 8008022:	48ae      	ldr	r0, [pc, #696]	; (80082dc <cppLoop+0xf84>)
 8008024:	f7fb fc04 	bl	8003830 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008028:	4baa      	ldr	r3, [pc, #680]	; (80082d4 <cppLoop+0xf7c>)
 800802a:	edd3 7a00 	vldr	s15, [r3]
 800802e:	eeb0 0a67 	vmov.f32	s0, s15
 8008032:	48aa      	ldr	r0, [pc, #680]	; (80082dc <cppLoop+0xf84>)
 8008034:	f7fb fc1b 	bl	800386e <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008038:	2200      	movs	r2, #0
 800803a:	f04f 31ff 	mov.w	r1, #4294967295
 800803e:	48a1      	ldr	r0, [pc, #644]	; (80082c4 <cppLoop+0xf6c>)
 8008040:	f7fa f818 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8008044:	f000 bd6d 	b.w	8008b22 <cppLoop+0x17ca>

	case 5:
		led.fullColor('M');
 8008048:	214d      	movs	r1, #77	; 0x4d
 800804a:	489e      	ldr	r0, [pc, #632]	; (80082c4 <cppLoop+0xf6c>)
 800804c:	f7f9 ff56 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008050:	f7f9 f826 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008054:	2100      	movs	r1, #0
 8008056:	2000      	movs	r0, #0
 8008058:	f7f9 f832 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 800805c:	4ba0      	ldr	r3, [pc, #640]	; (80082e0 <cppLoop+0xf88>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4618      	mov	r0, r3
 8008062:	f7f8 fa89 	bl	8000578 <__aeabi_f2d>
 8008066:	4603      	mov	r3, r0
 8008068:	460c      	mov	r4, r1
 800806a:	461a      	mov	r2, r3
 800806c:	4623      	mov	r3, r4
 800806e:	489d      	ldr	r0, [pc, #628]	; (80082e4 <cppLoop+0xf8c>)
 8008070:	f7f9 f850 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008074:	2101      	movs	r1, #1
 8008076:	2000      	movs	r0, #0
 8008078:	f7f9 f822 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 800807c:	4b9a      	ldr	r3, [pc, #616]	; (80082e8 <cppLoop+0xf90>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4618      	mov	r0, r3
 8008082:	f7f8 fa79 	bl	8000578 <__aeabi_f2d>
 8008086:	4603      	mov	r3, r0
 8008088:	460c      	mov	r4, r1
 800808a:	461a      	mov	r2, r3
 800808c:	4623      	mov	r3, r4
 800808e:	4897      	ldr	r0, [pc, #604]	; (80082ec <cppLoop+0xf94>)
 8008090:	f7f9 f840 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008094:	488a      	ldr	r0, [pc, #552]	; (80082c0 <cppLoop+0xf68>)
 8008096:	f7f9 fecd 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800809a:	4603      	mov	r3, r0
 800809c:	2b02      	cmp	r3, #2
 800809e:	bf0c      	ite	eq
 80080a0:	2301      	moveq	r3, #1
 80080a2:	2300      	movne	r3, #0
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f000 853d 	beq.w	8008b26 <cppLoop+0x17ce>
			HAL_Delay(500);
 80080ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80080b0:	f000 fe6a 	bl	8008d88 <HAL_Delay>

			led.LR(1, -1);
 80080b4:	f04f 32ff 	mov.w	r2, #4294967295
 80080b8:	2101      	movs	r1, #1
 80080ba:	4882      	ldr	r0, [pc, #520]	; (80082c4 <cppLoop+0xf6c>)
 80080bc:	f7f9 ffda 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 80080c0:	2102      	movs	r1, #2
 80080c2:	4886      	ldr	r0, [pc, #536]	; (80082dc <cppLoop+0xf84>)
 80080c4:	f7fb ff1a 	bl	8003efc <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 80080c8:	4b87      	ldr	r3, [pc, #540]	; (80082e8 <cppLoop+0xf90>)
 80080ca:	edd3 7a00 	vldr	s15, [r3]
 80080ce:	eeb0 0a67 	vmov.f32	s0, s15
 80080d2:	4882      	ldr	r0, [pc, #520]	; (80082dc <cppLoop+0xf84>)
 80080d4:	f7fb fb9d 	bl	8003812 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80080d8:	4b81      	ldr	r3, [pc, #516]	; (80082e0 <cppLoop+0xf88>)
 80080da:	edd3 7a00 	vldr	s15, [r3]
 80080de:	eeb0 0a67 	vmov.f32	s0, s15
 80080e2:	487e      	ldr	r0, [pc, #504]	; (80082dc <cppLoop+0xf84>)
 80080e4:	f7fb fbb3 	bl	800384e <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 80080e8:	4b7f      	ldr	r3, [pc, #508]	; (80082e8 <cppLoop+0xf90>)
 80080ea:	edd3 7a00 	vldr	s15, [r3]
 80080ee:	eeb0 0a67 	vmov.f32	s0, s15
 80080f2:	487a      	ldr	r0, [pc, #488]	; (80082dc <cppLoop+0xf84>)
 80080f4:	f7fb fbcb 	bl	800388e <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 80080f8:	4878      	ldr	r0, [pc, #480]	; (80082dc <cppLoop+0xf84>)
 80080fa:	f7fa fe8f 	bl	8002e1c <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 80080fe:	4877      	ldr	r0, [pc, #476]	; (80082dc <cppLoop+0xf84>)
 8008100:	f7fb fdfe 	bl	8003d00 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008104:	f04f 32ff 	mov.w	r2, #4294967295
 8008108:	2100      	movs	r1, #0
 800810a:	486e      	ldr	r0, [pc, #440]	; (80082c4 <cppLoop+0xf6c>)
 800810c:	f7f9 ffb2 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8008110:	f000 bd09 	b.w	8008b26 <cppLoop+0x17ce>

	case 6:
		led.fullColor('R');
 8008114:	2152      	movs	r1, #82	; 0x52
 8008116:	486b      	ldr	r0, [pc, #428]	; (80082c4 <cppLoop+0xf6c>)
 8008118:	f7f9 fef0 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800811c:	f7f8 ffc0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008120:	2100      	movs	r1, #0
 8008122:	2000      	movs	r0, #0
 8008124:	f7f8 ffcc 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008128:	486c      	ldr	r0, [pc, #432]	; (80082dc <cppLoop+0xf84>)
 800812a:	f7fb fbde 	bl	80038ea <_ZN9LineTrace15getMaxVelocity2Ev>
 800812e:	ee10 3a10 	vmov	r3, s0
 8008132:	4618      	mov	r0, r3
 8008134:	f7f8 fa20 	bl	8000578 <__aeabi_f2d>
 8008138:	4603      	mov	r3, r0
 800813a:	460c      	mov	r4, r1
 800813c:	461a      	mov	r2, r3
 800813e:	4623      	mov	r3, r4
 8008140:	4868      	ldr	r0, [pc, #416]	; (80082e4 <cppLoop+0xf8c>)
 8008142:	f7f8 ffe7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008146:	2101      	movs	r1, #1
 8008148:	2000      	movs	r0, #0
 800814a:	f7f8 ffb9 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 800814e:	4863      	ldr	r0, [pc, #396]	; (80082dc <cppLoop+0xf84>)
 8008150:	f7fb fbeb 	bl	800392a <_ZN9LineTrace15getMinVelocity2Ev>
 8008154:	ee10 3a10 	vmov	r3, s0
 8008158:	4618      	mov	r0, r3
 800815a:	f7f8 fa0d 	bl	8000578 <__aeabi_f2d>
 800815e:	4603      	mov	r3, r0
 8008160:	460c      	mov	r4, r1
 8008162:	461a      	mov	r2, r3
 8008164:	4623      	mov	r3, r4
 8008166:	4862      	ldr	r0, [pc, #392]	; (80082f0 <cppLoop+0xf98>)
 8008168:	f7f8 ffd4 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 800816c:	4854      	ldr	r0, [pc, #336]	; (80082c0 <cppLoop+0xf68>)
 800816e:	f7f9 fe61 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008172:	4603      	mov	r3, r0
 8008174:	2b08      	cmp	r3, #8
 8008176:	bf0c      	ite	eq
 8008178:	2301      	moveq	r3, #1
 800817a:	2300      	movne	r3, #0
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	d022      	beq.n	80081c8 <cppLoop+0xe70>
			led.LR(-1, 1);
 8008182:	2201      	movs	r2, #1
 8008184:	f04f 31ff 	mov.w	r1, #4294967295
 8008188:	484e      	ldr	r0, [pc, #312]	; (80082c4 <cppLoop+0xf6c>)
 800818a:	f7f9 ff73 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800818e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008192:	f000 fdf9 	bl	8008d88 <HAL_Delay>

			selector_vel2++;
 8008196:	4b57      	ldr	r3, [pc, #348]	; (80082f4 <cppLoop+0xf9c>)
 8008198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800819c:	b29b      	uxth	r3, r3
 800819e:	3301      	adds	r3, #1
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	b21a      	sxth	r2, r3
 80081a4:	4b53      	ldr	r3, [pc, #332]	; (80082f4 <cppLoop+0xf9c>)
 80081a6:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 80081a8:	4b52      	ldr	r3, [pc, #328]	; (80082f4 <cppLoop+0xf9c>)
 80081aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	dd02      	ble.n	80081b8 <cppLoop+0xe60>
 80081b2:	4b50      	ldr	r3, [pc, #320]	; (80082f4 <cppLoop+0xf9c>)
 80081b4:	2200      	movs	r2, #0
 80081b6:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80081b8:	2200      	movs	r2, #0
 80081ba:	f04f 31ff 	mov.w	r1, #4294967295
 80081be:	4841      	ldr	r0, [pc, #260]	; (80082c4 <cppLoop+0xf6c>)
 80081c0:	f7f9 ff58 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 80081c4:	f000 bcb1 	b.w	8008b2a <cppLoop+0x17d2>
		else if(joy_stick.getValue() == JOY_R){
 80081c8:	483d      	ldr	r0, [pc, #244]	; (80082c0 <cppLoop+0xf68>)
 80081ca:	f7f9 fe33 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b10      	cmp	r3, #16
 80081d2:	bf0c      	ite	eq
 80081d4:	2301      	moveq	r3, #1
 80081d6:	2300      	movne	r3, #0
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d03c      	beq.n	8008258 <cppLoop+0xf00>
			led.LR(-1, 1);
 80081de:	2201      	movs	r2, #1
 80081e0:	f04f 31ff 	mov.w	r1, #4294967295
 80081e4:	4837      	ldr	r0, [pc, #220]	; (80082c4 <cppLoop+0xf6c>)
 80081e6:	f7f9 ff45 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80081ea:	2064      	movs	r0, #100	; 0x64
 80081ec:	f000 fdcc 	bl	8008d88 <HAL_Delay>
			if(selector_vel2 == 0)
 80081f0:	4b40      	ldr	r3, [pc, #256]	; (80082f4 <cppLoop+0xf9c>)
 80081f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d113      	bne.n	8008222 <cppLoop+0xeca>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 80081fa:	4b39      	ldr	r3, [pc, #228]	; (80082e0 <cppLoop+0xf88>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4618      	mov	r0, r3
 8008200:	f7f8 f9ba 	bl	8000578 <__aeabi_f2d>
 8008204:	a32c      	add	r3, pc, #176	; (adr r3, 80082b8 <cppLoop+0xf60>)
 8008206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820a:	f7f8 f857 	bl	80002bc <__adddf3>
 800820e:	4603      	mov	r3, r0
 8008210:	460c      	mov	r4, r1
 8008212:	4618      	mov	r0, r3
 8008214:	4621      	mov	r1, r4
 8008216:	f7f8 fcff 	bl	8000c18 <__aeabi_d2f>
 800821a:	4602      	mov	r2, r0
 800821c:	4b30      	ldr	r3, [pc, #192]	; (80082e0 <cppLoop+0xf88>)
 800821e:	601a      	str	r2, [r3, #0]
 8008220:	e012      	b.n	8008248 <cppLoop+0xef0>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8008222:	4b31      	ldr	r3, [pc, #196]	; (80082e8 <cppLoop+0xf90>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4618      	mov	r0, r3
 8008228:	f7f8 f9a6 	bl	8000578 <__aeabi_f2d>
 800822c:	a322      	add	r3, pc, #136	; (adr r3, 80082b8 <cppLoop+0xf60>)
 800822e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008232:	f7f8 f843 	bl	80002bc <__adddf3>
 8008236:	4603      	mov	r3, r0
 8008238:	460c      	mov	r4, r1
 800823a:	4618      	mov	r0, r3
 800823c:	4621      	mov	r1, r4
 800823e:	f7f8 fceb 	bl	8000c18 <__aeabi_d2f>
 8008242:	4602      	mov	r2, r0
 8008244:	4b28      	ldr	r3, [pc, #160]	; (80082e8 <cppLoop+0xf90>)
 8008246:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008248:	2200      	movs	r2, #0
 800824a:	f04f 31ff 	mov.w	r1, #4294967295
 800824e:	481d      	ldr	r0, [pc, #116]	; (80082c4 <cppLoop+0xf6c>)
 8008250:	f7f9 ff10 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8008254:	f000 bc69 	b.w	8008b2a <cppLoop+0x17d2>
		else if(joy_stick.getValue() == JOY_L){
 8008258:	4819      	ldr	r0, [pc, #100]	; (80082c0 <cppLoop+0xf68>)
 800825a:	f7f9 fdeb 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800825e:	4603      	mov	r3, r0
 8008260:	2b01      	cmp	r3, #1
 8008262:	bf0c      	ite	eq
 8008264:	2301      	moveq	r3, #1
 8008266:	2300      	movne	r3, #0
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d05e      	beq.n	800832c <cppLoop+0xfd4>
			led.LR(-1, 1);
 800826e:	2201      	movs	r2, #1
 8008270:	f04f 31ff 	mov.w	r1, #4294967295
 8008274:	4813      	ldr	r0, [pc, #76]	; (80082c4 <cppLoop+0xf6c>)
 8008276:	f7f9 fefd 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800827a:	2064      	movs	r0, #100	; 0x64
 800827c:	f000 fd84 	bl	8008d88 <HAL_Delay>
			if(selector_vel2 == 0)
 8008280:	4b1c      	ldr	r3, [pc, #112]	; (80082f4 <cppLoop+0xf9c>)
 8008282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d136      	bne.n	80082f8 <cppLoop+0xfa0>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 800828a:	4b15      	ldr	r3, [pc, #84]	; (80082e0 <cppLoop+0xf88>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4618      	mov	r0, r3
 8008290:	f7f8 f972 	bl	8000578 <__aeabi_f2d>
 8008294:	a308      	add	r3, pc, #32	; (adr r3, 80082b8 <cppLoop+0xf60>)
 8008296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829a:	f7f8 f80d 	bl	80002b8 <__aeabi_dsub>
 800829e:	4603      	mov	r3, r0
 80082a0:	460c      	mov	r4, r1
 80082a2:	4618      	mov	r0, r3
 80082a4:	4621      	mov	r1, r4
 80082a6:	f7f8 fcb7 	bl	8000c18 <__aeabi_d2f>
 80082aa:	4602      	mov	r2, r0
 80082ac:	4b0c      	ldr	r3, [pc, #48]	; (80082e0 <cppLoop+0xf88>)
 80082ae:	601a      	str	r2, [r3, #0]
 80082b0:	e035      	b.n	800831e <cppLoop+0xfc6>
 80082b2:	bf00      	nop
 80082b4:	f3af 8000 	nop.w
 80082b8:	9999999a 	.word	0x9999999a
 80082bc:	3fb99999 	.word	0x3fb99999
 80082c0:	200005c0 	.word	0x200005c0
 80082c4:	200005cc 	.word	0x200005cc
 80082c8:	2003c464 	.word	0x2003c464
 80082cc:	08019498 	.word	0x08019498
 80082d0:	08019444 	.word	0x08019444
 80082d4:	2003c474 	.word	0x2003c474
 80082d8:	080194a4 	.word	0x080194a4
 80082dc:	20017da0 	.word	0x20017da0
 80082e0:	2003c46c 	.word	0x2003c46c
 80082e4:	080194b0 	.word	0x080194b0
 80082e8:	2003c47c 	.word	0x2003c47c
 80082ec:	08019468 	.word	0x08019468
 80082f0:	08019474 	.word	0x08019474
 80082f4:	2003c442 	.word	0x2003c442
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 80082f8:	4bbd      	ldr	r3, [pc, #756]	; (80085f0 <cppLoop+0x1298>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7f8 f93b 	bl	8000578 <__aeabi_f2d>
 8008302:	a3b9      	add	r3, pc, #740	; (adr r3, 80085e8 <cppLoop+0x1290>)
 8008304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008308:	f7f7 ffd6 	bl	80002b8 <__aeabi_dsub>
 800830c:	4603      	mov	r3, r0
 800830e:	460c      	mov	r4, r1
 8008310:	4618      	mov	r0, r3
 8008312:	4621      	mov	r1, r4
 8008314:	f7f8 fc80 	bl	8000c18 <__aeabi_d2f>
 8008318:	4602      	mov	r2, r0
 800831a:	4bb5      	ldr	r3, [pc, #724]	; (80085f0 <cppLoop+0x1298>)
 800831c:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800831e:	2200      	movs	r2, #0
 8008320:	f04f 31ff 	mov.w	r1, #4294967295
 8008324:	48b3      	ldr	r0, [pc, #716]	; (80085f4 <cppLoop+0x129c>)
 8008326:	f7f9 fea5 	bl	8002074 <_ZN3LED2LREaa>
		break;
 800832a:	e3fe      	b.n	8008b2a <cppLoop+0x17d2>
		else if(joy_stick.getValue() == JOY_C){
 800832c:	48b2      	ldr	r0, [pc, #712]	; (80085f8 <cppLoop+0x12a0>)
 800832e:	f7f9 fd81 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008332:	4603      	mov	r3, r0
 8008334:	2b02      	cmp	r3, #2
 8008336:	bf0c      	ite	eq
 8008338:	2301      	moveq	r3, #1
 800833a:	2300      	movne	r3, #0
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	f000 83f3 	beq.w	8008b2a <cppLoop+0x17d2>
			led.LR(-1, 1);
 8008344:	2201      	movs	r2, #1
 8008346:	f04f 31ff 	mov.w	r1, #4294967295
 800834a:	48aa      	ldr	r0, [pc, #680]	; (80085f4 <cppLoop+0x129c>)
 800834c:	f7f9 fe92 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008350:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008354:	f000 fd18 	bl	8008d88 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008358:	2300      	movs	r3, #0
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	4ba7      	ldr	r3, [pc, #668]	; (80085fc <cppLoop+0x12a4>)
 800835e:	2201      	movs	r2, #1
 8008360:	49a7      	ldr	r1, [pc, #668]	; (8008600 <cppLoop+0x12a8>)
 8008362:	48a8      	ldr	r0, [pc, #672]	; (8008604 <cppLoop+0x12ac>)
 8008364:	f7f9 f94e 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8008368:	2300      	movs	r3, #0
 800836a:	9300      	str	r3, [sp, #0]
 800836c:	4ba0      	ldr	r3, [pc, #640]	; (80085f0 <cppLoop+0x1298>)
 800836e:	2201      	movs	r2, #1
 8008370:	49a5      	ldr	r1, [pc, #660]	; (8008608 <cppLoop+0x12b0>)
 8008372:	48a4      	ldr	r0, [pc, #656]	; (8008604 <cppLoop+0x12ac>)
 8008374:	f7f9 f946 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008378:	4ba0      	ldr	r3, [pc, #640]	; (80085fc <cppLoop+0x12a4>)
 800837a:	edd3 7a00 	vldr	s15, [r3]
 800837e:	eeb0 0a67 	vmov.f32	s0, s15
 8008382:	48a2      	ldr	r0, [pc, #648]	; (800860c <cppLoop+0x12b4>)
 8008384:	f7fb fa63 	bl	800384e <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008388:	4b99      	ldr	r3, [pc, #612]	; (80085f0 <cppLoop+0x1298>)
 800838a:	edd3 7a00 	vldr	s15, [r3]
 800838e:	eeb0 0a67 	vmov.f32	s0, s15
 8008392:	489e      	ldr	r0, [pc, #632]	; (800860c <cppLoop+0x12b4>)
 8008394:	f7fb fa7b 	bl	800388e <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008398:	2200      	movs	r2, #0
 800839a:	f04f 31ff 	mov.w	r1, #4294967295
 800839e:	4895      	ldr	r0, [pc, #596]	; (80085f4 <cppLoop+0x129c>)
 80083a0:	f7f9 fe68 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80083a4:	e3c1      	b.n	8008b2a <cppLoop+0x17d2>

	case 7:
		led.fullColor('W');
 80083a6:	2157      	movs	r1, #87	; 0x57
 80083a8:	4892      	ldr	r0, [pc, #584]	; (80085f4 <cppLoop+0x129c>)
 80083aa:	f7f9 fda7 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80083ae:	f7f8 fe77 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80083b2:	2100      	movs	r1, #0
 80083b4:	2000      	movs	r0, #0
 80083b6:	f7f8 fe83 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 80083ba:	4894      	ldr	r0, [pc, #592]	; (800860c <cppLoop+0x12b4>)
 80083bc:	f7fb fadf 	bl	800397e <_ZN9LineTrace9getMaxAccEv>
 80083c0:	ee10 3a10 	vmov	r3, s0
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7f8 f8d7 	bl	8000578 <__aeabi_f2d>
 80083ca:	4603      	mov	r3, r0
 80083cc:	460c      	mov	r4, r1
 80083ce:	461a      	mov	r2, r3
 80083d0:	4623      	mov	r3, r4
 80083d2:	488f      	ldr	r0, [pc, #572]	; (8008610 <cppLoop+0x12b8>)
 80083d4:	f7f8 fe9e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80083d8:	2101      	movs	r1, #1
 80083da:	2000      	movs	r0, #0
 80083dc:	f7f8 fe70 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 80083e0:	488a      	ldr	r0, [pc, #552]	; (800860c <cppLoop+0x12b4>)
 80083e2:	f7fb fade 	bl	80039a2 <_ZN9LineTrace9getMaxDecEv>
 80083e6:	ee10 3a10 	vmov	r3, s0
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7f8 f8c4 	bl	8000578 <__aeabi_f2d>
 80083f0:	4603      	mov	r3, r0
 80083f2:	460c      	mov	r4, r1
 80083f4:	461a      	mov	r2, r3
 80083f6:	4623      	mov	r3, r4
 80083f8:	4886      	ldr	r0, [pc, #536]	; (8008614 <cppLoop+0x12bc>)
 80083fa:	f7f8 fe8b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80083fe:	487e      	ldr	r0, [pc, #504]	; (80085f8 <cppLoop+0x12a0>)
 8008400:	f7f9 fd18 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008404:	4603      	mov	r3, r0
 8008406:	2b08      	cmp	r3, #8
 8008408:	bf0c      	ite	eq
 800840a:	2301      	moveq	r3, #1
 800840c:	2300      	movne	r3, #0
 800840e:	b2db      	uxtb	r3, r3
 8008410:	2b00      	cmp	r3, #0
 8008412:	d021      	beq.n	8008458 <cppLoop+0x1100>
			led.LR(-1, 1);
 8008414:	2201      	movs	r2, #1
 8008416:	f04f 31ff 	mov.w	r1, #4294967295
 800841a:	4876      	ldr	r0, [pc, #472]	; (80085f4 <cppLoop+0x129c>)
 800841c:	f7f9 fe2a 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008420:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008424:	f000 fcb0 	bl	8008d88 <HAL_Delay>

			selector_acc++;
 8008428:	4b7b      	ldr	r3, [pc, #492]	; (8008618 <cppLoop+0x12c0>)
 800842a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800842e:	b29b      	uxth	r3, r3
 8008430:	3301      	adds	r3, #1
 8008432:	b29b      	uxth	r3, r3
 8008434:	b21a      	sxth	r2, r3
 8008436:	4b78      	ldr	r3, [pc, #480]	; (8008618 <cppLoop+0x12c0>)
 8008438:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 800843a:	4b77      	ldr	r3, [pc, #476]	; (8008618 <cppLoop+0x12c0>)
 800843c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008440:	2b01      	cmp	r3, #1
 8008442:	dd02      	ble.n	800844a <cppLoop+0x10f2>
 8008444:	4b74      	ldr	r3, [pc, #464]	; (8008618 <cppLoop+0x12c0>)
 8008446:	2200      	movs	r2, #0
 8008448:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800844a:	2200      	movs	r2, #0
 800844c:	f04f 31ff 	mov.w	r1, #4294967295
 8008450:	4868      	ldr	r0, [pc, #416]	; (80085f4 <cppLoop+0x129c>)
 8008452:	f7f9 fe0f 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8008456:	e36a      	b.n	8008b2e <cppLoop+0x17d6>
		else if(joy_stick.getValue() == JOY_R){
 8008458:	4867      	ldr	r0, [pc, #412]	; (80085f8 <cppLoop+0x12a0>)
 800845a:	f7f9 fceb 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800845e:	4603      	mov	r3, r0
 8008460:	2b10      	cmp	r3, #16
 8008462:	bf0c      	ite	eq
 8008464:	2301      	moveq	r3, #1
 8008466:	2300      	movne	r3, #0
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d03b      	beq.n	80084e6 <cppLoop+0x118e>
			led.LR(-1, 1);
 800846e:	2201      	movs	r2, #1
 8008470:	f04f 31ff 	mov.w	r1, #4294967295
 8008474:	485f      	ldr	r0, [pc, #380]	; (80085f4 <cppLoop+0x129c>)
 8008476:	f7f9 fdfd 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800847a:	2064      	movs	r0, #100	; 0x64
 800847c:	f000 fc84 	bl	8008d88 <HAL_Delay>
			if(selector_acc == 0){
 8008480:	4b65      	ldr	r3, [pc, #404]	; (8008618 <cppLoop+0x12c0>)
 8008482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d113      	bne.n	80084b2 <cppLoop+0x115a>
				adj_acc = adj_acc + 0.1;
 800848a:	4b64      	ldr	r3, [pc, #400]	; (800861c <cppLoop+0x12c4>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4618      	mov	r0, r3
 8008490:	f7f8 f872 	bl	8000578 <__aeabi_f2d>
 8008494:	a354      	add	r3, pc, #336	; (adr r3, 80085e8 <cppLoop+0x1290>)
 8008496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849a:	f7f7 ff0f 	bl	80002bc <__adddf3>
 800849e:	4603      	mov	r3, r0
 80084a0:	460c      	mov	r4, r1
 80084a2:	4618      	mov	r0, r3
 80084a4:	4621      	mov	r1, r4
 80084a6:	f7f8 fbb7 	bl	8000c18 <__aeabi_d2f>
 80084aa:	4602      	mov	r2, r0
 80084ac:	4b5b      	ldr	r3, [pc, #364]	; (800861c <cppLoop+0x12c4>)
 80084ae:	601a      	str	r2, [r3, #0]
 80084b0:	e012      	b.n	80084d8 <cppLoop+0x1180>
				adj_dec = adj_dec + 0.1;
 80084b2:	4b5b      	ldr	r3, [pc, #364]	; (8008620 <cppLoop+0x12c8>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7f8 f85e 	bl	8000578 <__aeabi_f2d>
 80084bc:	a34a      	add	r3, pc, #296	; (adr r3, 80085e8 <cppLoop+0x1290>)
 80084be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c2:	f7f7 fefb 	bl	80002bc <__adddf3>
 80084c6:	4603      	mov	r3, r0
 80084c8:	460c      	mov	r4, r1
 80084ca:	4618      	mov	r0, r3
 80084cc:	4621      	mov	r1, r4
 80084ce:	f7f8 fba3 	bl	8000c18 <__aeabi_d2f>
 80084d2:	4602      	mov	r2, r0
 80084d4:	4b52      	ldr	r3, [pc, #328]	; (8008620 <cppLoop+0x12c8>)
 80084d6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80084d8:	2200      	movs	r2, #0
 80084da:	f04f 31ff 	mov.w	r1, #4294967295
 80084de:	4845      	ldr	r0, [pc, #276]	; (80085f4 <cppLoop+0x129c>)
 80084e0:	f7f9 fdc8 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80084e4:	e323      	b.n	8008b2e <cppLoop+0x17d6>
		else if(joy_stick.getValue() == JOY_L){
 80084e6:	4844      	ldr	r0, [pc, #272]	; (80085f8 <cppLoop+0x12a0>)
 80084e8:	f7f9 fca4 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	bf0c      	ite	eq
 80084f2:	2301      	moveq	r3, #1
 80084f4:	2300      	movne	r3, #0
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d03b      	beq.n	8008574 <cppLoop+0x121c>
			led.LR(-1, 1);
 80084fc:	2201      	movs	r2, #1
 80084fe:	f04f 31ff 	mov.w	r1, #4294967295
 8008502:	483c      	ldr	r0, [pc, #240]	; (80085f4 <cppLoop+0x129c>)
 8008504:	f7f9 fdb6 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008508:	2064      	movs	r0, #100	; 0x64
 800850a:	f000 fc3d 	bl	8008d88 <HAL_Delay>
			if(selector_acc == 0){
 800850e:	4b42      	ldr	r3, [pc, #264]	; (8008618 <cppLoop+0x12c0>)
 8008510:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d113      	bne.n	8008540 <cppLoop+0x11e8>
				adj_acc = adj_acc - 0.1;
 8008518:	4b40      	ldr	r3, [pc, #256]	; (800861c <cppLoop+0x12c4>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4618      	mov	r0, r3
 800851e:	f7f8 f82b 	bl	8000578 <__aeabi_f2d>
 8008522:	a331      	add	r3, pc, #196	; (adr r3, 80085e8 <cppLoop+0x1290>)
 8008524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008528:	f7f7 fec6 	bl	80002b8 <__aeabi_dsub>
 800852c:	4603      	mov	r3, r0
 800852e:	460c      	mov	r4, r1
 8008530:	4618      	mov	r0, r3
 8008532:	4621      	mov	r1, r4
 8008534:	f7f8 fb70 	bl	8000c18 <__aeabi_d2f>
 8008538:	4602      	mov	r2, r0
 800853a:	4b38      	ldr	r3, [pc, #224]	; (800861c <cppLoop+0x12c4>)
 800853c:	601a      	str	r2, [r3, #0]
 800853e:	e012      	b.n	8008566 <cppLoop+0x120e>
				adj_dec = adj_dec - 0.1;
 8008540:	4b37      	ldr	r3, [pc, #220]	; (8008620 <cppLoop+0x12c8>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4618      	mov	r0, r3
 8008546:	f7f8 f817 	bl	8000578 <__aeabi_f2d>
 800854a:	a327      	add	r3, pc, #156	; (adr r3, 80085e8 <cppLoop+0x1290>)
 800854c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008550:	f7f7 feb2 	bl	80002b8 <__aeabi_dsub>
 8008554:	4603      	mov	r3, r0
 8008556:	460c      	mov	r4, r1
 8008558:	4618      	mov	r0, r3
 800855a:	4621      	mov	r1, r4
 800855c:	f7f8 fb5c 	bl	8000c18 <__aeabi_d2f>
 8008560:	4602      	mov	r2, r0
 8008562:	4b2f      	ldr	r3, [pc, #188]	; (8008620 <cppLoop+0x12c8>)
 8008564:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008566:	2200      	movs	r2, #0
 8008568:	f04f 31ff 	mov.w	r1, #4294967295
 800856c:	4821      	ldr	r0, [pc, #132]	; (80085f4 <cppLoop+0x129c>)
 800856e:	f7f9 fd81 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8008572:	e2dc      	b.n	8008b2e <cppLoop+0x17d6>
		else if(joy_stick.getValue() == JOY_C){
 8008574:	4820      	ldr	r0, [pc, #128]	; (80085f8 <cppLoop+0x12a0>)
 8008576:	f7f9 fc5d 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800857a:	4603      	mov	r3, r0
 800857c:	2b02      	cmp	r3, #2
 800857e:	bf0c      	ite	eq
 8008580:	2301      	moveq	r3, #1
 8008582:	2300      	movne	r3, #0
 8008584:	b2db      	uxtb	r3, r3
 8008586:	2b00      	cmp	r3, #0
 8008588:	f000 82d1 	beq.w	8008b2e <cppLoop+0x17d6>
			led.LR(-1, 1);
 800858c:	2201      	movs	r2, #1
 800858e:	f04f 31ff 	mov.w	r1, #4294967295
 8008592:	4818      	ldr	r0, [pc, #96]	; (80085f4 <cppLoop+0x129c>)
 8008594:	f7f9 fd6e 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008598:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800859c:	f000 fbf4 	bl	8008d88 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 80085a0:	2300      	movs	r3, #0
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	4b1d      	ldr	r3, [pc, #116]	; (800861c <cppLoop+0x12c4>)
 80085a6:	2201      	movs	r2, #1
 80085a8:	491e      	ldr	r1, [pc, #120]	; (8008624 <cppLoop+0x12cc>)
 80085aa:	4816      	ldr	r0, [pc, #88]	; (8008604 <cppLoop+0x12ac>)
 80085ac:	f7f9 f82a 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 80085b0:	2300      	movs	r3, #0
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	4b1a      	ldr	r3, [pc, #104]	; (8008620 <cppLoop+0x12c8>)
 80085b6:	2201      	movs	r2, #1
 80085b8:	491b      	ldr	r1, [pc, #108]	; (8008628 <cppLoop+0x12d0>)
 80085ba:	4812      	ldr	r0, [pc, #72]	; (8008604 <cppLoop+0x12ac>)
 80085bc:	f7f9 f822 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 80085c0:	4b16      	ldr	r3, [pc, #88]	; (800861c <cppLoop+0x12c4>)
 80085c2:	edd3 7a00 	vldr	s15, [r3]
 80085c6:	4b16      	ldr	r3, [pc, #88]	; (8008620 <cppLoop+0x12c8>)
 80085c8:	ed93 7a00 	vldr	s14, [r3]
 80085cc:	eef0 0a47 	vmov.f32	s1, s14
 80085d0:	eeb0 0a67 	vmov.f32	s0, s15
 80085d4:	480d      	ldr	r0, [pc, #52]	; (800860c <cppLoop+0x12b4>)
 80085d6:	f7fb f9b8 	bl	800394a <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 80085da:	2200      	movs	r2, #0
 80085dc:	f04f 31ff 	mov.w	r1, #4294967295
 80085e0:	4804      	ldr	r0, [pc, #16]	; (80085f4 <cppLoop+0x129c>)
 80085e2:	f7f9 fd47 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80085e6:	e2a2      	b.n	8008b2e <cppLoop+0x17d6>
 80085e8:	9999999a 	.word	0x9999999a
 80085ec:	3fb99999 	.word	0x3fb99999
 80085f0:	2003c47c 	.word	0x2003c47c
 80085f4:	200005cc 	.word	0x200005cc
 80085f8:	200005c0 	.word	0x200005c0
 80085fc:	2003c46c 	.word	0x2003c46c
 8008600:	080194bc 	.word	0x080194bc
 8008604:	08019444 	.word	0x08019444
 8008608:	080194c8 	.word	0x080194c8
 800860c:	20017da0 	.word	0x20017da0
 8008610:	080194d4 	.word	0x080194d4
 8008614:	080194e0 	.word	0x080194e0
 8008618:	2003c43e 	.word	0x2003c43e
 800861c:	2003c484 	.word	0x2003c484
 8008620:	2003c48c 	.word	0x2003c48c
 8008624:	080194ec 	.word	0x080194ec
 8008628:	080194f4 	.word	0x080194f4

	case 8:
		led.fullColor('~');
 800862c:	217e      	movs	r1, #126	; 0x7e
 800862e:	48ca      	ldr	r0, [pc, #808]	; (8008958 <cppLoop+0x1600>)
 8008630:	f7f9 fc64 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008634:	f7f8 fd34 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008638:	2100      	movs	r1, #0
 800863a:	2000      	movs	r0, #0
 800863c:	f7f8 fd40 	bl	80010c0 <lcd_locate>
		lcd_printf("08      ");
 8008640:	48c6      	ldr	r0, [pc, #792]	; (800895c <cppLoop+0x1604>)
 8008642:	f7f8 fd67 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008646:	2101      	movs	r1, #1
 8008648:	2000      	movs	r0, #0
 800864a:	f7f8 fd39 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 800864e:	48c4      	ldr	r0, [pc, #784]	; (8008960 <cppLoop+0x1608>)
 8008650:	f7f8 fd60 	bl	8001114 <lcd_printf>

		break;
 8008654:	e27a      	b.n	8008b4c <cppLoop+0x17f4>

	case 9:
		led.fullColor('~');
 8008656:	217e      	movs	r1, #126	; 0x7e
 8008658:	48bf      	ldr	r0, [pc, #764]	; (8008958 <cppLoop+0x1600>)
 800865a:	f7f9 fc4f 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800865e:	f7f8 fd1f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008662:	2100      	movs	r1, #0
 8008664:	2000      	movs	r0, #0
 8008666:	f7f8 fd2b 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 800866a:	48be      	ldr	r0, [pc, #760]	; (8008964 <cppLoop+0x160c>)
 800866c:	f7f8 fd52 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008670:	2101      	movs	r1, #1
 8008672:	2000      	movs	r0, #0
 8008674:	f7f8 fd24 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8008678:	48bb      	ldr	r0, [pc, #748]	; (8008968 <cppLoop+0x1610>)
 800867a:	f7f8 fd4b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800867e:	48bb      	ldr	r0, [pc, #748]	; (800896c <cppLoop+0x1614>)
 8008680:	f7f9 fbd8 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008684:	4603      	mov	r3, r0
 8008686:	2b02      	cmp	r3, #2
 8008688:	bf0c      	ite	eq
 800868a:	2301      	moveq	r3, #1
 800868c:	2300      	movne	r3, #0
 800868e:	b2db      	uxtb	r3, r3
 8008690:	2b00      	cmp	r3, #0
 8008692:	f000 824e 	beq.w	8008b32 <cppLoop+0x17da>
			led.LR(-1, 1);
 8008696:	2201      	movs	r2, #1
 8008698:	f04f 31ff 	mov.w	r1, #4294967295
 800869c:	48ae      	ldr	r0, [pc, #696]	; (8008958 <cppLoop+0x1600>)
 800869e:	f7f9 fce9 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(500);
 80086a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80086a6:	f000 fb6f 	bl	8008d88 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 80086aa:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8008970 <cppLoop+0x1618>
 80086ae:	48b1      	ldr	r0, [pc, #708]	; (8008974 <cppLoop+0x161c>)
 80086b0:	f7fb f8a0 	bl	80037f4 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80086b4:	48af      	ldr	r0, [pc, #700]	; (8008974 <cppLoop+0x161c>)
 80086b6:	f7fb fa95 	bl	8003be4 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 80086ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80086be:	f000 fb63 	bl	8008d88 <HAL_Delay>

			led.fullColor('R');
 80086c2:	2152      	movs	r1, #82	; 0x52
 80086c4:	48a4      	ldr	r0, [pc, #656]	; (8008958 <cppLoop+0x1600>)
 80086c6:	f7f9 fc19 	bl	8001efc <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 80086ca:	48ab      	ldr	r0, [pc, #684]	; (8008978 <cppLoop+0x1620>)
 80086cc:	f7f8 feec 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 80086d0:	f242 7010 	movw	r0, #10000	; 0x2710
 80086d4:	f000 fb58 	bl	8008d88 <HAL_Delay>

			line_trace.stop();
 80086d8:	48a6      	ldr	r0, [pc, #664]	; (8008974 <cppLoop+0x161c>)
 80086da:	f7fb faa9 	bl	8003c30 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 80086de:	49a7      	ldr	r1, [pc, #668]	; (800897c <cppLoop+0x1624>)
 80086e0:	48a7      	ldr	r0, [pc, #668]	; (8008980 <cppLoop+0x1628>)
 80086e2:	f7f8 ff1a 	bl	800151a <user_fopen>
			float d = encoder.getDistance();
 80086e6:	48a4      	ldr	r0, [pc, #656]	; (8008978 <cppLoop+0x1620>)
 80086e8:	f7f8 fea2 	bl	8001430 <_ZN7Encoder11getDistanceEv>
 80086ec:	eef0 7a40 	vmov.f32	s15, s0
 80086f0:	edc7 7a00 	vstr	s15, [r7]
			sd_write_float(1, &d, ADD_WRITE);
 80086f4:	463b      	mov	r3, r7
 80086f6:	2201      	movs	r2, #1
 80086f8:	4619      	mov	r1, r3
 80086fa:	2001      	movs	r0, #1
 80086fc:	f7f8 ff30 	bl	8001560 <sd_write_float>
			user_fclose();
 8008700:	f7f8 ff1e 	bl	8001540 <user_fclose>

			led.LR(-1, 0);
 8008704:	2200      	movs	r2, #0
 8008706:	f04f 31ff 	mov.w	r1, #4294967295
 800870a:	4893      	ldr	r0, [pc, #588]	; (8008958 <cppLoop+0x1600>)
 800870c:	f7f9 fcb2 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8008710:	e20f      	b.n	8008b32 <cppLoop+0x17da>

	case 10:
		led.fullColor('~');
 8008712:	217e      	movs	r1, #126	; 0x7e
 8008714:	4890      	ldr	r0, [pc, #576]	; (8008958 <cppLoop+0x1600>)
 8008716:	f7f9 fbf1 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800871a:	f7f8 fcc1 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800871e:	2100      	movs	r1, #0
 8008720:	2000      	movs	r0, #0
 8008722:	f7f8 fccd 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 8008726:	4897      	ldr	r0, [pc, #604]	; (8008984 <cppLoop+0x162c>)
 8008728:	f7f8 fcf4 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800872c:	2101      	movs	r1, #1
 800872e:	2000      	movs	r0, #0
 8008730:	f7f8 fcc6 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8008734:	4894      	ldr	r0, [pc, #592]	; (8008988 <cppLoop+0x1630>)
 8008736:	f7f8 fced 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 800873a:	488c      	ldr	r0, [pc, #560]	; (800896c <cppLoop+0x1614>)
 800873c:	f7f9 fb7a 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008740:	4603      	mov	r3, r0
 8008742:	2b02      	cmp	r3, #2
 8008744:	bf0c      	ite	eq
 8008746:	2301      	moveq	r3, #1
 8008748:	2300      	movne	r3, #0
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	f000 81f2 	beq.w	8008b36 <cppLoop+0x17de>
			HAL_Delay(500);
 8008752:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008756:	f000 fb17 	bl	8008d88 <HAL_Delay>
			led.LR(-1, 1);
 800875a:	2201      	movs	r2, #1
 800875c:	f04f 31ff 	mov.w	r1, #4294967295
 8008760:	487d      	ldr	r0, [pc, #500]	; (8008958 <cppLoop+0x1600>)
 8008762:	f7f9 fc87 	bl	8002074 <_ZN3LED2LREaa>

			line_trace.setMode(SECOND_RUNNING);
 8008766:	2101      	movs	r1, #1
 8008768:	4882      	ldr	r0, [pc, #520]	; (8008974 <cppLoop+0x161c>)
 800876a:	f7fb fbc7 	bl	8003efc <_ZN9LineTrace7setModeEs>
			line_trace.createVelocityTabeleFromSD();
 800876e:	4881      	ldr	r0, [pc, #516]	; (8008974 <cppLoop+0x161c>)
 8008770:	f7fa fbea 	bl	8002f48 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 8008774:	2200      	movs	r2, #0
 8008776:	f04f 31ff 	mov.w	r1, #4294967295
 800877a:	4877      	ldr	r0, [pc, #476]	; (8008958 <cppLoop+0x1600>)
 800877c:	f7f9 fc7a 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8008780:	e1d9      	b.n	8008b36 <cppLoop+0x17de>

	case 11:
		led.fullColor('~');
 8008782:	217e      	movs	r1, #126	; 0x7e
 8008784:	4874      	ldr	r0, [pc, #464]	; (8008958 <cppLoop+0x1600>)
 8008786:	f7f9 fbb9 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800878a:	f7f8 fc89 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800878e:	2100      	movs	r1, #0
 8008790:	2000      	movs	r0, #0
 8008792:	f7f8 fc95 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 8008796:	487d      	ldr	r0, [pc, #500]	; (800898c <cppLoop+0x1634>)
 8008798:	f7f8 fcbc 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800879c:	2101      	movs	r1, #1
 800879e:	2000      	movs	r0, #0
 80087a0:	f7f8 fc8e 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 80087a4:	487a      	ldr	r0, [pc, #488]	; (8008990 <cppLoop+0x1638>)
 80087a6:	f7f8 fcb5 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80087aa:	4870      	ldr	r0, [pc, #448]	; (800896c <cppLoop+0x1614>)
 80087ac:	f7f9 fb42 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	bf0c      	ite	eq
 80087b6:	2301      	moveq	r3, #1
 80087b8:	2300      	movne	r3, #0
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f000 81bc 	beq.w	8008b3a <cppLoop+0x17e2>
			HAL_Delay(1500);
 80087c2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80087c6:	f000 fadf 	bl	8008d88 <HAL_Delay>
			led.LR(-1, 1);
 80087ca:	2201      	movs	r2, #1
 80087cc:	f04f 31ff 	mov.w	r1, #4294967295
 80087d0:	4861      	ldr	r0, [pc, #388]	; (8008958 <cppLoop+0x1600>)
 80087d2:	f7f9 fc4f 	bl	8002074 <_ZN3LED2LREaa>

			logger.start();
 80087d6:	486f      	ldr	r0, [pc, #444]	; (8008994 <cppLoop+0x163c>)
 80087d8:	f7fb ff47 	bl	800466a <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 80087dc:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8008940 <cppLoop+0x15e8>
 80087e0:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8008948 <cppLoop+0x15f0>
 80087e4:	486c      	ldr	r0, [pc, #432]	; (8008998 <cppLoop+0x1640>)
 80087e6:	f7fb ffd5 	bl	8004794 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 80087ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80087ee:	f000 facb 	bl	8008d88 <HAL_Delay>

			logger.stop();
 80087f2:	4868      	ldr	r0, [pc, #416]	; (8008994 <cppLoop+0x163c>)
 80087f4:	f7fb ff4a 	bl	800468c <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 80087f8:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8008950 <cppLoop+0x15f8>
 80087fc:	ed9f 0b54 	vldr	d0, [pc, #336]	; 8008950 <cppLoop+0x15f8>
 8008800:	4865      	ldr	r0, [pc, #404]	; (8008998 <cppLoop+0x1640>)
 8008802:	f7fb ffc7 	bl	8004794 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 8008806:	4a65      	ldr	r2, [pc, #404]	; (800899c <cppLoop+0x1644>)
 8008808:	4965      	ldr	r1, [pc, #404]	; (80089a0 <cppLoop+0x1648>)
 800880a:	4862      	ldr	r0, [pc, #392]	; (8008994 <cppLoop+0x163c>)
 800880c:	f7fb fe3d 	bl	800448a <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8008810:	2200      	movs	r2, #0
 8008812:	f04f 31ff 	mov.w	r1, #4294967295
 8008816:	4850      	ldr	r0, [pc, #320]	; (8008958 <cppLoop+0x1600>)
 8008818:	f7f9 fc2c 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 800881c:	e18d      	b.n	8008b3a <cppLoop+0x17e2>

	case 12:
		led.fullColor('~');
 800881e:	217e      	movs	r1, #126	; 0x7e
 8008820:	484d      	ldr	r0, [pc, #308]	; (8008958 <cppLoop+0x1600>)
 8008822:	f7f9 fb6b 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008826:	f7f8 fc3b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800882a:	2100      	movs	r1, #0
 800882c:	2000      	movs	r0, #0
 800882e:	f7f8 fc47 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8008832:	485c      	ldr	r0, [pc, #368]	; (80089a4 <cppLoop+0x164c>)
 8008834:	f7f8 fc6e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008838:	2101      	movs	r1, #1
 800883a:	2000      	movs	r0, #0
 800883c:	f7f8 fc40 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8008840:	4859      	ldr	r0, [pc, #356]	; (80089a8 <cppLoop+0x1650>)
 8008842:	f7f8 fc67 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008846:	4849      	ldr	r0, [pc, #292]	; (800896c <cppLoop+0x1614>)
 8008848:	f7f9 faf4 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800884c:	4603      	mov	r3, r0
 800884e:	2b02      	cmp	r3, #2
 8008850:	bf0c      	ite	eq
 8008852:	2301      	moveq	r3, #1
 8008854:	2300      	movne	r3, #0
 8008856:	b2db      	uxtb	r3, r3
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 8170 	beq.w	8008b3e <cppLoop+0x17e6>
			HAL_Delay(1500);
 800885e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8008862:	f000 fa91 	bl	8008d88 <HAL_Delay>
			led.LR(-1, 1);
 8008866:	2201      	movs	r2, #1
 8008868:	f04f 31ff 	mov.w	r1, #4294967295
 800886c:	483a      	ldr	r0, [pc, #232]	; (8008958 <cppLoop+0x1600>)
 800886e:	f7f9 fc01 	bl	8002074 <_ZN3LED2LREaa>

			logger.start();
 8008872:	4848      	ldr	r0, [pc, #288]	; (8008994 <cppLoop+0x163c>)
 8008874:	f7fb fef9 	bl	800466a <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8008878:	484c      	ldr	r0, [pc, #304]	; (80089ac <cppLoop+0x1654>)
 800887a:	f7fc feda 	bl	8005632 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 800887e:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8008970 <cppLoop+0x1618>
 8008882:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008886:	4849      	ldr	r0, [pc, #292]	; (80089ac <cppLoop+0x1654>)
 8008888:	f7fc fe66 	bl	8005558 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 800888c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008890:	f000 fa7a 	bl	8008d88 <HAL_Delay>

			logger.stop();
 8008894:	483f      	ldr	r0, [pc, #252]	; (8008994 <cppLoop+0x163c>)
 8008896:	f7fb fef9 	bl	800468c <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 800889a:	4844      	ldr	r0, [pc, #272]	; (80089ac <cppLoop+0x1654>)
 800889c:	f7fc fedc 	bl	8005658 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 80088a0:	4a43      	ldr	r2, [pc, #268]	; (80089b0 <cppLoop+0x1658>)
 80088a2:	493f      	ldr	r1, [pc, #252]	; (80089a0 <cppLoop+0x1648>)
 80088a4:	483b      	ldr	r0, [pc, #236]	; (8008994 <cppLoop+0x163c>)
 80088a6:	f7fb fdf0 	bl	800448a <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80088aa:	2200      	movs	r2, #0
 80088ac:	f04f 31ff 	mov.w	r1, #4294967295
 80088b0:	4829      	ldr	r0, [pc, #164]	; (8008958 <cppLoop+0x1600>)
 80088b2:	f7f9 fbdf 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 80088b6:	e142      	b.n	8008b3e <cppLoop+0x17e6>

	case 13:
		led.fullColor('~');
 80088b8:	217e      	movs	r1, #126	; 0x7e
 80088ba:	4827      	ldr	r0, [pc, #156]	; (8008958 <cppLoop+0x1600>)
 80088bc:	f7f9 fb1e 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80088c0:	f7f8 fbee 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80088c4:	2100      	movs	r1, #0
 80088c6:	2000      	movs	r0, #0
 80088c8:	f7f8 fbfa 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 80088cc:	4839      	ldr	r0, [pc, #228]	; (80089b4 <cppLoop+0x165c>)
 80088ce:	f7f8 fc21 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80088d2:	2101      	movs	r1, #1
 80088d4:	2000      	movs	r0, #0
 80088d6:	f7f8 fbf3 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 80088da:	482d      	ldr	r0, [pc, #180]	; (8008990 <cppLoop+0x1638>)
 80088dc:	f7f8 fc1a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80088e0:	4822      	ldr	r0, [pc, #136]	; (800896c <cppLoop+0x1614>)
 80088e2:	f7f9 faa7 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	bf0c      	ite	eq
 80088ec:	2301      	moveq	r3, #1
 80088ee:	2300      	movne	r3, #0
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f000 8125 	beq.w	8008b42 <cppLoop+0x17ea>
			led.LR(-1, 1);
 80088f8:	2201      	movs	r2, #1
 80088fa:	f04f 31ff 	mov.w	r1, #4294967295
 80088fe:	4816      	ldr	r0, [pc, #88]	; (8008958 <cppLoop+0x1600>)
 8008900:	f7f9 fbb8 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(1500);
 8008904:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8008908:	f000 fa3e 	bl	8008d88 <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 800890c:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80089b8 <cppLoop+0x1660>
 8008910:	482a      	ldr	r0, [pc, #168]	; (80089bc <cppLoop+0x1664>)
 8008912:	f7fc fcad 	bl	8005270 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 8008916:	4829      	ldr	r0, [pc, #164]	; (80089bc <cppLoop+0x1664>)
 8008918:	f7fc fcba 	bl	8005290 <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 800891c:	f244 405c 	movw	r0, #17500	; 0x445c
 8008920:	f000 fa32 	bl	8008d88 <HAL_Delay>
			sys_ident.stop();
 8008924:	4825      	ldr	r0, [pc, #148]	; (80089bc <cppLoop+0x1664>)
 8008926:	f7fc fcc7 	bl	80052b8 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 800892a:	4824      	ldr	r0, [pc, #144]	; (80089bc <cppLoop+0x1664>)
 800892c:	f7fc fc2e 	bl	800518c <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 8008930:	2200      	movs	r2, #0
 8008932:	f04f 31ff 	mov.w	r1, #4294967295
 8008936:	4808      	ldr	r0, [pc, #32]	; (8008958 <cppLoop+0x1600>)
 8008938:	f7f9 fb9c 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 800893c:	e101      	b.n	8008b42 <cppLoop+0x17ea>
 800893e:	bf00      	nop
 8008940:	33333333 	.word	0x33333333
 8008944:	bfd33333 	.word	0xbfd33333
 8008948:	33333333 	.word	0x33333333
 800894c:	3fd33333 	.word	0x3fd33333
	...
 8008958:	200005cc 	.word	0x200005cc
 800895c:	080194fc 	.word	0x080194fc
 8008960:	08019508 	.word	0x08019508
 8008964:	08019514 	.word	0x08019514
 8008968:	0801951c 	.word	0x0801951c
 800896c:	200005c0 	.word	0x200005c0
 8008970:	00000000 	.word	0x00000000
 8008974:	20017da0 	.word	0x20017da0
 8008978:	20017d00 	.word	0x20017d00
 800897c:	08019528 	.word	0x08019528
 8008980:	08019530 	.word	0x08019530
 8008984:	0801953c 	.word	0x0801953c
 8008988:	08019548 	.word	0x08019548
 800898c:	08019554 	.word	0x08019554
 8008990:	0801955c 	.word	0x0801955c
 8008994:	200005f0 	.word	0x200005f0
 8008998:	200005c8 	.word	0x200005c8
 800899c:	08019564 	.word	0x08019564
 80089a0:	08019570 	.word	0x08019570
 80089a4:	0801957c 	.word	0x0801957c
 80089a8:	08019580 	.word	0x08019580
 80089ac:	20017d20 	.word	0x20017d20
 80089b0:	0801958c 	.word	0x0801958c
 80089b4:	08019598 	.word	0x08019598
 80089b8:	3e99999a 	.word	0x3e99999a
 80089bc:	20024b00 	.word	0x20024b00

	case 14:
		led.fullColor('W');
 80089c0:	2157      	movs	r1, #87	; 0x57
 80089c2:	4866      	ldr	r0, [pc, #408]	; (8008b5c <cppLoop+0x1804>)
 80089c4:	f7f9 fa9a 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80089c8:	f7f8 fb6a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80089cc:	2100      	movs	r1, #0
 80089ce:	2000      	movs	r0, #0
 80089d0:	f7f8 fb76 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 80089d4:	4862      	ldr	r0, [pc, #392]	; (8008b60 <cppLoop+0x1808>)
 80089d6:	f7f8 fb9d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80089da:	2101      	movs	r1, #1
 80089dc:	2000      	movs	r0, #0
 80089de:	f7f8 fb6f 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 80089e2:	4b60      	ldr	r3, [pc, #384]	; (8008b64 <cppLoop+0x180c>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7f7 fdc6 	bl	8000578 <__aeabi_f2d>
 80089ec:	4603      	mov	r3, r0
 80089ee:	460c      	mov	r4, r1
 80089f0:	461a      	mov	r2, r3
 80089f2:	4623      	mov	r3, r4
 80089f4:	485c      	ldr	r0, [pc, #368]	; (8008b68 <cppLoop+0x1810>)
 80089f6:	f7f8 fb8d 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80089fa:	485c      	ldr	r0, [pc, #368]	; (8008b6c <cppLoop+0x1814>)
 80089fc:	f7f9 fa1a 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	bf0c      	ite	eq
 8008a06:	2301      	moveq	r3, #1
 8008a08:	2300      	movne	r3, #0
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f000 809a 	beq.w	8008b46 <cppLoop+0x17ee>
			HAL_Delay(500);
 8008a12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008a16:	f000 f9b7 	bl	8008d88 <HAL_Delay>

			led.LR(1, -1);
 8008a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a1e:	2101      	movs	r1, #1
 8008a20:	484e      	ldr	r0, [pc, #312]	; (8008b5c <cppLoop+0x1804>)
 8008a22:	f7f9 fb27 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8008a26:	2102      	movs	r1, #2
 8008a28:	4851      	ldr	r0, [pc, #324]	; (8008b70 <cppLoop+0x1818>)
 8008a2a:	f7fb fa67 	bl	8003efc <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8008a2e:	4b4d      	ldr	r3, [pc, #308]	; (8008b64 <cppLoop+0x180c>)
 8008a30:	edd3 7a00 	vldr	s15, [r3]
 8008a34:	eeb0 0a67 	vmov.f32	s0, s15
 8008a38:	484d      	ldr	r0, [pc, #308]	; (8008b70 <cppLoop+0x1818>)
 8008a3a:	f7fa feea 	bl	8003812 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8008a3e:	4b49      	ldr	r3, [pc, #292]	; (8008b64 <cppLoop+0x180c>)
 8008a40:	edd3 7a00 	vldr	s15, [r3]
 8008a44:	eeb0 0a67 	vmov.f32	s0, s15
 8008a48:	4849      	ldr	r0, [pc, #292]	; (8008b70 <cppLoop+0x1818>)
 8008a4a:	f7fa fef1 	bl	8003830 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8008a4e:	4848      	ldr	r0, [pc, #288]	; (8008b70 <cppLoop+0x1818>)
 8008a50:	f7fa fa7a 	bl	8002f48 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8008a54:	4846      	ldr	r0, [pc, #280]	; (8008b70 <cppLoop+0x1818>)
 8008a56:	f7fb f953 	bl	8003d00 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a5e:	2100      	movs	r1, #0
 8008a60:	483e      	ldr	r0, [pc, #248]	; (8008b5c <cppLoop+0x1804>)
 8008a62:	f7f9 fb07 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8008a66:	e06e      	b.n	8008b46 <cppLoop+0x17ee>

	case 15:
		led.fullColor('W');
 8008a68:	2157      	movs	r1, #87	; 0x57
 8008a6a:	483c      	ldr	r0, [pc, #240]	; (8008b5c <cppLoop+0x1804>)
 8008a6c:	f7f9 fa46 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008a70:	f7f8 fb16 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008a74:	2100      	movs	r1, #0
 8008a76:	2000      	movs	r0, #0
 8008a78:	f7f8 fb22 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 8008a7c:	483d      	ldr	r0, [pc, #244]	; (8008b74 <cppLoop+0x181c>)
 8008a7e:	f7f8 fb49 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008a82:	2101      	movs	r1, #1
 8008a84:	2000      	movs	r0, #0
 8008a86:	f7f8 fb1b 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 8008a8a:	4b3b      	ldr	r3, [pc, #236]	; (8008b78 <cppLoop+0x1820>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7f7 fd72 	bl	8000578 <__aeabi_f2d>
 8008a94:	4603      	mov	r3, r0
 8008a96:	460c      	mov	r4, r1
 8008a98:	461a      	mov	r2, r3
 8008a9a:	4623      	mov	r3, r4
 8008a9c:	4832      	ldr	r0, [pc, #200]	; (8008b68 <cppLoop+0x1810>)
 8008a9e:	f7f8 fb39 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008aa2:	4832      	ldr	r0, [pc, #200]	; (8008b6c <cppLoop+0x1814>)
 8008aa4:	f7f9 f9c6 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	bf0c      	ite	eq
 8008aae:	2301      	moveq	r3, #1
 8008ab0:	2300      	movne	r3, #0
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d048      	beq.n	8008b4a <cppLoop+0x17f2>
			HAL_Delay(500);
 8008ab8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008abc:	f000 f964 	bl	8008d88 <HAL_Delay>

			led.LR(1, -1);
 8008ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	4825      	ldr	r0, [pc, #148]	; (8008b5c <cppLoop+0x1804>)
 8008ac8:	f7f9 fad4 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8008acc:	2101      	movs	r1, #1
 8008ace:	4828      	ldr	r0, [pc, #160]	; (8008b70 <cppLoop+0x1818>)
 8008ad0:	f7fb fa14 	bl	8003efc <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity);
 8008ad4:	4b28      	ldr	r3, [pc, #160]	; (8008b78 <cppLoop+0x1820>)
 8008ad6:	edd3 7a00 	vldr	s15, [r3]
 8008ada:	eeb0 0a67 	vmov.f32	s0, s15
 8008ade:	4824      	ldr	r0, [pc, #144]	; (8008b70 <cppLoop+0x1818>)
 8008ae0:	f7fa fe97 	bl	8003812 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008ae4:	4b24      	ldr	r3, [pc, #144]	; (8008b78 <cppLoop+0x1820>)
 8008ae6:	edd3 7a00 	vldr	s15, [r3]
 8008aea:	eeb0 0a67 	vmov.f32	s0, s15
 8008aee:	4820      	ldr	r0, [pc, #128]	; (8008b70 <cppLoop+0x1818>)
 8008af0:	f7fa fe9e 	bl	8003830 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8008af4:	481e      	ldr	r0, [pc, #120]	; (8008b70 <cppLoop+0x1818>)
 8008af6:	f7fa fa27 	bl	8002f48 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8008afa:	481d      	ldr	r0, [pc, #116]	; (8008b70 <cppLoop+0x1818>)
 8008afc:	f7fb f900 	bl	8003d00 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008b00:	f04f 32ff 	mov.w	r2, #4294967295
 8008b04:	2100      	movs	r1, #0
 8008b06:	4815      	ldr	r0, [pc, #84]	; (8008b5c <cppLoop+0x1804>)
 8008b08:	f7f9 fab4 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8008b0c:	e01d      	b.n	8008b4a <cppLoop+0x17f2>

	default:
		break;
 8008b0e:	bf00      	nop
 8008b10:	e01c      	b.n	8008b4c <cppLoop+0x17f4>
		break;
 8008b12:	bf00      	nop
 8008b14:	e01a      	b.n	8008b4c <cppLoop+0x17f4>
		break;
 8008b16:	bf00      	nop
 8008b18:	e018      	b.n	8008b4c <cppLoop+0x17f4>
		break;
 8008b1a:	bf00      	nop
 8008b1c:	e016      	b.n	8008b4c <cppLoop+0x17f4>
		break;
 8008b1e:	bf00      	nop
 8008b20:	e014      	b.n	8008b4c <cppLoop+0x17f4>
		break;
 8008b22:	bf00      	nop
 8008b24:	e012      	b.n	8008b4c <cppLoop+0x17f4>
		break;
 8008b26:	bf00      	nop
 8008b28:	e010      	b.n	8008b4c <cppLoop+0x17f4>
		break;
 8008b2a:	bf00      	nop
 8008b2c:	e00e      	b.n	8008b4c <cppLoop+0x17f4>
		break;
 8008b2e:	bf00      	nop
 8008b30:	e00c      	b.n	8008b4c <cppLoop+0x17f4>
		break;
 8008b32:	bf00      	nop
 8008b34:	e00a      	b.n	8008b4c <cppLoop+0x17f4>
		break;
 8008b36:	bf00      	nop
 8008b38:	e008      	b.n	8008b4c <cppLoop+0x17f4>
		break;
 8008b3a:	bf00      	nop
 8008b3c:	e006      	b.n	8008b4c <cppLoop+0x17f4>
		break;
 8008b3e:	bf00      	nop
 8008b40:	e004      	b.n	8008b4c <cppLoop+0x17f4>
		break;
 8008b42:	bf00      	nop
 8008b44:	e002      	b.n	8008b4c <cppLoop+0x17f4>
		break;
 8008b46:	bf00      	nop
 8008b48:	e000      	b.n	8008b4c <cppLoop+0x17f4>
		break;
 8008b4a:	bf00      	nop

	}

	HAL_Delay(30);
 8008b4c:	201e      	movs	r0, #30
 8008b4e:	f000 f91b 	bl	8008d88 <HAL_Delay>

}
 8008b52:	bf00      	nop
 8008b54:	3714      	adds	r7, #20
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	200005cc 	.word	0x200005cc
 8008b60:	080195a0 	.word	0x080195a0
 8008b64:	2003c46c 	.word	0x2003c46c
 8008b68:	08019468 	.word	0x08019468
 8008b6c:	200005c0 	.word	0x200005c0
 8008b70:	20017da0 	.word	0x20017da0
 8008b74:	080195ac 	.word	0x080195ac
 8008b78:	2003c464 	.word	0x2003c464

08008b7c <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b088      	sub	sp, #32
 8008b80:	af06      	add	r7, sp, #24
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d13d      	bne.n	8008c08 <_Z41__static_initialization_and_destruction_0ii+0x8c>
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d138      	bne.n	8008c08 <_Z41__static_initialization_and_destruction_0ii+0x8c>
LineSensor line_sensor;
 8008b96:	481e      	ldr	r0, [pc, #120]	; (8008c10 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8008b98:	f7f9 faa4 	bl	80020e4 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8008b9c:	481d      	ldr	r0, [pc, #116]	; (8008c14 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8008b9e:	f7fc f95b 	bl	8004e58 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8008ba2:	481d      	ldr	r0, [pc, #116]	; (8008c18 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8008ba4:	f7f9 f93a 	bl	8001e1c <_ZN8JoyStickC1Ev>
Motor motor;
 8008ba8:	481c      	ldr	r0, [pc, #112]	; (8008c1c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008baa:	f7fb fd80 	bl	80046ae <_ZN5MotorC1Ev>
IMU imu;
 8008bae:	481c      	ldr	r0, [pc, #112]	; (8008c20 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008bb0:	f7f8 ff40 	bl	8001a34 <_ZN3IMUC1Ev>
Logger logger;
 8008bb4:	481b      	ldr	r0, [pc, #108]	; (8008c24 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8008bb6:	f7fb fad5 	bl	8004164 <_ZN6LoggerC1Ev>
Encoder encoder;
 8008bba:	481b      	ldr	r0, [pc, #108]	; (8008c28 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008bbc:	f7f8 faca 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8008bc0:	4b17      	ldr	r3, [pc, #92]	; (8008c20 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008bc2:	4a19      	ldr	r2, [pc, #100]	; (8008c28 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008bc4:	4915      	ldr	r1, [pc, #84]	; (8008c1c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008bc6:	4819      	ldr	r0, [pc, #100]	; (8008c2c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8008bc8:	f7fc fb9a 	bl	8005300 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8008bcc:	4b17      	ldr	r3, [pc, #92]	; (8008c2c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8008bce:	4a14      	ldr	r2, [pc, #80]	; (8008c20 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008bd0:	4915      	ldr	r1, [pc, #84]	; (8008c28 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008bd2:	4817      	ldr	r0, [pc, #92]	; (8008c30 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8008bd4:	f7fb fe50 	bl	8004878 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu);
 8008bd8:	4b11      	ldr	r3, [pc, #68]	; (8008c20 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008bda:	9304      	str	r3, [sp, #16]
 8008bdc:	4b11      	ldr	r3, [pc, #68]	; (8008c24 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8008bde:	9303      	str	r3, [sp, #12]
 8008be0:	4b13      	ldr	r3, [pc, #76]	; (8008c30 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8008be2:	9302      	str	r3, [sp, #8]
 8008be4:	4b10      	ldr	r3, [pc, #64]	; (8008c28 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008be6:	9301      	str	r3, [sp, #4]
 8008be8:	4b0a      	ldr	r3, [pc, #40]	; (8008c14 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	4b0f      	ldr	r3, [pc, #60]	; (8008c2c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8008bee:	4a08      	ldr	r2, [pc, #32]	; (8008c10 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8008bf0:	490a      	ldr	r1, [pc, #40]	; (8008c1c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008bf2:	4810      	ldr	r0, [pc, #64]	; (8008c34 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8008bf4:	f7f9 fda4 	bl	8002740 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>
SystemIdentification sys_ident(&logger, &motor);
 8008bf8:	4a08      	ldr	r2, [pc, #32]	; (8008c1c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008bfa:	490a      	ldr	r1, [pc, #40]	; (8008c24 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8008bfc:	480e      	ldr	r0, [pc, #56]	; (8008c38 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8008bfe:	f7fc fa7b 	bl	80050f8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8008c02:	480e      	ldr	r0, [pc, #56]	; (8008c3c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8008c04:	f7fb ffba 	bl	8004b7c <_ZN13PathFollowingC1Ev>
}
 8008c08:	bf00      	nop
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	200002c0 	.word	0x200002c0
 8008c14:	200005b8 	.word	0x200005b8
 8008c18:	200005c0 	.word	0x200005c0
 8008c1c:	200005c8 	.word	0x200005c8
 8008c20:	200005dc 	.word	0x200005dc
 8008c24:	200005f0 	.word	0x200005f0
 8008c28:	20017d00 	.word	0x20017d00
 8008c2c:	20017d20 	.word	0x20017d20
 8008c30:	20017d60 	.word	0x20017d60
 8008c34:	20017da0 	.word	0x20017da0
 8008c38:	20024b00 	.word	0x20024b00
 8008c3c:	20024d10 	.word	0x20024d10

08008c40 <_GLOBAL__sub_I_line_sensor>:
 8008c40:	b580      	push	{r7, lr}
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008c48:	2001      	movs	r0, #1
 8008c4a:	f7ff ff97 	bl	8008b7c <_Z41__static_initialization_and_destruction_0ii>
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008c88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008c54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008c56:	e003      	b.n	8008c60 <LoopCopyDataInit>

08008c58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008c58:	4b0c      	ldr	r3, [pc, #48]	; (8008c8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008c5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008c5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008c5e:	3104      	adds	r1, #4

08008c60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008c60:	480b      	ldr	r0, [pc, #44]	; (8008c90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008c62:	4b0c      	ldr	r3, [pc, #48]	; (8008c94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008c64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008c66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008c68:	d3f6      	bcc.n	8008c58 <CopyDataInit>
  ldr  r2, =_sbss
 8008c6a:	4a0b      	ldr	r2, [pc, #44]	; (8008c98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008c6c:	e002      	b.n	8008c74 <LoopFillZerobss>

08008c6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008c6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008c70:	f842 3b04 	str.w	r3, [r2], #4

08008c74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008c74:	4b09      	ldr	r3, [pc, #36]	; (8008c9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008c76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008c78:	d3f9      	bcc.n	8008c6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008c7a:	f7fe fa4b 	bl	8007114 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008c7e:	f00b ffcb 	bl	8014c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008c82:	f7fc fd85 	bl	8005790 <main>
  bx  lr    
 8008c86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008c88:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8008c8c:	08019be0 	.word	0x08019be0
  ldr  r0, =_sdata
 8008c90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008c94:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8008c98:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8008c9c:	20040e70 	.word	0x20040e70

08008ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008ca0:	e7fe      	b.n	8008ca0 <ADC_IRQHandler>
	...

08008ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008ca8:	4b0e      	ldr	r3, [pc, #56]	; (8008ce4 <HAL_Init+0x40>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a0d      	ldr	r2, [pc, #52]	; (8008ce4 <HAL_Init+0x40>)
 8008cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008cb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008cb4:	4b0b      	ldr	r3, [pc, #44]	; (8008ce4 <HAL_Init+0x40>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a0a      	ldr	r2, [pc, #40]	; (8008ce4 <HAL_Init+0x40>)
 8008cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008cbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008cc0:	4b08      	ldr	r3, [pc, #32]	; (8008ce4 <HAL_Init+0x40>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a07      	ldr	r2, [pc, #28]	; (8008ce4 <HAL_Init+0x40>)
 8008cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008ccc:	2003      	movs	r0, #3
 8008cce:	f000 fd51 	bl	8009774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008cd2:	2000      	movs	r0, #0
 8008cd4:	f000 f808 	bl	8008ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008cd8:	f7fd fc6c 	bl	80065b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	40023c00 	.word	0x40023c00

08008ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008cf0:	4b12      	ldr	r3, [pc, #72]	; (8008d3c <HAL_InitTick+0x54>)
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	4b12      	ldr	r3, [pc, #72]	; (8008d40 <HAL_InitTick+0x58>)
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 fd69 	bl	80097de <HAL_SYSTICK_Config>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e00e      	b.n	8008d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2b0f      	cmp	r3, #15
 8008d1a:	d80a      	bhi.n	8008d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	6879      	ldr	r1, [r7, #4]
 8008d20:	f04f 30ff 	mov.w	r0, #4294967295
 8008d24:	f000 fd31 	bl	800978a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008d28:	4a06      	ldr	r2, [pc, #24]	; (8008d44 <HAL_InitTick+0x5c>)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	e000      	b.n	8008d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	20000000 	.word	0x20000000
 8008d40:	20000008 	.word	0x20000008
 8008d44:	20000004 	.word	0x20000004

08008d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008d4c:	4b06      	ldr	r3, [pc, #24]	; (8008d68 <HAL_IncTick+0x20>)
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	461a      	mov	r2, r3
 8008d52:	4b06      	ldr	r3, [pc, #24]	; (8008d6c <HAL_IncTick+0x24>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4413      	add	r3, r2
 8008d58:	4a04      	ldr	r2, [pc, #16]	; (8008d6c <HAL_IncTick+0x24>)
 8008d5a:	6013      	str	r3, [r2, #0]
}
 8008d5c:	bf00      	nop
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	20000008 	.word	0x20000008
 8008d6c:	2003edf8 	.word	0x2003edf8

08008d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008d70:	b480      	push	{r7}
 8008d72:	af00      	add	r7, sp, #0
  return uwTick;
 8008d74:	4b03      	ldr	r3, [pc, #12]	; (8008d84 <HAL_GetTick+0x14>)
 8008d76:	681b      	ldr	r3, [r3, #0]
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	2003edf8 	.word	0x2003edf8

08008d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008d90:	f7ff ffee 	bl	8008d70 <HAL_GetTick>
 8008d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da0:	d005      	beq.n	8008dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008da2:	4b09      	ldr	r3, [pc, #36]	; (8008dc8 <HAL_Delay+0x40>)
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	461a      	mov	r2, r3
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	4413      	add	r3, r2
 8008dac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008dae:	bf00      	nop
 8008db0:	f7ff ffde 	bl	8008d70 <HAL_GetTick>
 8008db4:	4602      	mov	r2, r0
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	1ad3      	subs	r3, r2, r3
 8008dba:	68fa      	ldr	r2, [r7, #12]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d8f7      	bhi.n	8008db0 <HAL_Delay+0x28>
  {
  }
}
 8008dc0:	bf00      	nop
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	20000008 	.word	0x20000008

08008dcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d101      	bne.n	8008de2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e033      	b.n	8008e4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d109      	bne.n	8008dfe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7fd fc0a 	bl	8006604 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e02:	f003 0310 	and.w	r3, r3, #16
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d118      	bne.n	8008e3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008e12:	f023 0302 	bic.w	r3, r3, #2
 8008e16:	f043 0202 	orr.w	r2, r3, #2
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fa5a 	bl	80092d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2e:	f023 0303 	bic.w	r3, r3, #3
 8008e32:	f043 0201 	orr.w	r2, r3, #1
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	641a      	str	r2, [r3, #64]	; 0x40
 8008e3a:	e001      	b.n	8008e40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
	...

08008e54 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b086      	sub	sp, #24
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008e60:	2300      	movs	r3, #0
 8008e62:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d101      	bne.n	8008e72 <HAL_ADC_Start_DMA+0x1e>
 8008e6e:	2302      	movs	r3, #2
 8008e70:	e0cc      	b.n	800900c <HAL_ADC_Start_DMA+0x1b8>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	f003 0301 	and.w	r3, r3, #1
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d018      	beq.n	8008eba <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	689a      	ldr	r2, [r3, #8]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f042 0201 	orr.w	r2, r2, #1
 8008e96:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008e98:	4b5e      	ldr	r3, [pc, #376]	; (8009014 <HAL_ADC_Start_DMA+0x1c0>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a5e      	ldr	r2, [pc, #376]	; (8009018 <HAL_ADC_Start_DMA+0x1c4>)
 8008e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea2:	0c9a      	lsrs	r2, r3, #18
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	005b      	lsls	r3, r3, #1
 8008ea8:	4413      	add	r3, r2
 8008eaa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008eac:	e002      	b.n	8008eb4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1f9      	bne.n	8008eae <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	f003 0301 	and.w	r3, r3, #1
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	f040 80a0 	bne.w	800900a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ece:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008ed2:	f023 0301 	bic.w	r3, r3, #1
 8008ed6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d007      	beq.n	8008efc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008ef4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f08:	d106      	bne.n	8008f18 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f0e:	f023 0206 	bic.w	r2, r3, #6
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	645a      	str	r2, [r3, #68]	; 0x44
 8008f16:	e002      	b.n	8008f1e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008f26:	4b3d      	ldr	r3, [pc, #244]	; (800901c <HAL_ADC_Start_DMA+0x1c8>)
 8008f28:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2e:	4a3c      	ldr	r2, [pc, #240]	; (8009020 <HAL_ADC_Start_DMA+0x1cc>)
 8008f30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f36:	4a3b      	ldr	r2, [pc, #236]	; (8009024 <HAL_ADC_Start_DMA+0x1d0>)
 8008f38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3e:	4a3a      	ldr	r2, [pc, #232]	; (8009028 <HAL_ADC_Start_DMA+0x1d4>)
 8008f40:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008f4a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	685a      	ldr	r2, [r3, #4]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008f5a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	689a      	ldr	r2, [r3, #8]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f6a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	334c      	adds	r3, #76	; 0x4c
 8008f76:	4619      	mov	r1, r3
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f000 fcea 	bl	8009954 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	f003 031f 	and.w	r3, r3, #31
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d12a      	bne.n	8008fe2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a26      	ldr	r2, [pc, #152]	; (800902c <HAL_ADC_Start_DMA+0x1d8>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d015      	beq.n	8008fc2 <HAL_ADC_Start_DMA+0x16e>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a25      	ldr	r2, [pc, #148]	; (8009030 <HAL_ADC_Start_DMA+0x1dc>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d105      	bne.n	8008fac <HAL_ADC_Start_DMA+0x158>
 8008fa0:	4b1e      	ldr	r3, [pc, #120]	; (800901c <HAL_ADC_Start_DMA+0x1c8>)
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	f003 031f 	and.w	r3, r3, #31
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00a      	beq.n	8008fc2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a20      	ldr	r2, [pc, #128]	; (8009034 <HAL_ADC_Start_DMA+0x1e0>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d129      	bne.n	800900a <HAL_ADC_Start_DMA+0x1b6>
 8008fb6:	4b19      	ldr	r3, [pc, #100]	; (800901c <HAL_ADC_Start_DMA+0x1c8>)
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	f003 031f 	and.w	r3, r3, #31
 8008fbe:	2b0f      	cmp	r3, #15
 8008fc0:	d823      	bhi.n	800900a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d11c      	bne.n	800900a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	689a      	ldr	r2, [r3, #8]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008fde:	609a      	str	r2, [r3, #8]
 8008fe0:	e013      	b.n	800900a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a11      	ldr	r2, [pc, #68]	; (800902c <HAL_ADC_Start_DMA+0x1d8>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d10e      	bne.n	800900a <HAL_ADC_Start_DMA+0x1b6>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d107      	bne.n	800900a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	689a      	ldr	r2, [r3, #8]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009008:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3718      	adds	r7, #24
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	20000000 	.word	0x20000000
 8009018:	431bde83 	.word	0x431bde83
 800901c:	40012300 	.word	0x40012300
 8009020:	080094d1 	.word	0x080094d1
 8009024:	0800958b 	.word	0x0800958b
 8009028:	080095a7 	.word	0x080095a7
 800902c:	40012000 	.word	0x40012000
 8009030:	40012100 	.word	0x40012100
 8009034:	40012200 	.word	0x40012200

08009038 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009068:	bf00      	nop
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800907e:	2300      	movs	r3, #0
 8009080:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009088:	2b01      	cmp	r3, #1
 800908a:	d101      	bne.n	8009090 <HAL_ADC_ConfigChannel+0x1c>
 800908c:	2302      	movs	r3, #2
 800908e:	e113      	b.n	80092b8 <HAL_ADC_ConfigChannel+0x244>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b09      	cmp	r3, #9
 800909e:	d925      	bls.n	80090ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	68d9      	ldr	r1, [r3, #12]
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	461a      	mov	r2, r3
 80090ae:	4613      	mov	r3, r2
 80090b0:	005b      	lsls	r3, r3, #1
 80090b2:	4413      	add	r3, r2
 80090b4:	3b1e      	subs	r3, #30
 80090b6:	2207      	movs	r2, #7
 80090b8:	fa02 f303 	lsl.w	r3, r2, r3
 80090bc:	43da      	mvns	r2, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	400a      	ands	r2, r1
 80090c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68d9      	ldr	r1, [r3, #12]
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	689a      	ldr	r2, [r3, #8]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	4618      	mov	r0, r3
 80090d8:	4603      	mov	r3, r0
 80090da:	005b      	lsls	r3, r3, #1
 80090dc:	4403      	add	r3, r0
 80090de:	3b1e      	subs	r3, #30
 80090e0:	409a      	lsls	r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	430a      	orrs	r2, r1
 80090e8:	60da      	str	r2, [r3, #12]
 80090ea:	e022      	b.n	8009132 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	6919      	ldr	r1, [r3, #16]
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	461a      	mov	r2, r3
 80090fa:	4613      	mov	r3, r2
 80090fc:	005b      	lsls	r3, r3, #1
 80090fe:	4413      	add	r3, r2
 8009100:	2207      	movs	r2, #7
 8009102:	fa02 f303 	lsl.w	r3, r2, r3
 8009106:	43da      	mvns	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	400a      	ands	r2, r1
 800910e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	6919      	ldr	r1, [r3, #16]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	689a      	ldr	r2, [r3, #8]
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	b29b      	uxth	r3, r3
 8009120:	4618      	mov	r0, r3
 8009122:	4603      	mov	r3, r0
 8009124:	005b      	lsls	r3, r3, #1
 8009126:	4403      	add	r3, r0
 8009128:	409a      	lsls	r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	430a      	orrs	r2, r1
 8009130:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	2b06      	cmp	r3, #6
 8009138:	d824      	bhi.n	8009184 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	685a      	ldr	r2, [r3, #4]
 8009144:	4613      	mov	r3, r2
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	4413      	add	r3, r2
 800914a:	3b05      	subs	r3, #5
 800914c:	221f      	movs	r2, #31
 800914e:	fa02 f303 	lsl.w	r3, r2, r3
 8009152:	43da      	mvns	r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	400a      	ands	r2, r1
 800915a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	b29b      	uxth	r3, r3
 8009168:	4618      	mov	r0, r3
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	685a      	ldr	r2, [r3, #4]
 800916e:	4613      	mov	r3, r2
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	4413      	add	r3, r2
 8009174:	3b05      	subs	r3, #5
 8009176:	fa00 f203 	lsl.w	r2, r0, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	430a      	orrs	r2, r1
 8009180:	635a      	str	r2, [r3, #52]	; 0x34
 8009182:	e04c      	b.n	800921e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	2b0c      	cmp	r3, #12
 800918a:	d824      	bhi.n	80091d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	685a      	ldr	r2, [r3, #4]
 8009196:	4613      	mov	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	4413      	add	r3, r2
 800919c:	3b23      	subs	r3, #35	; 0x23
 800919e:	221f      	movs	r2, #31
 80091a0:	fa02 f303 	lsl.w	r3, r2, r3
 80091a4:	43da      	mvns	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	400a      	ands	r2, r1
 80091ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	4618      	mov	r0, r3
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	685a      	ldr	r2, [r3, #4]
 80091c0:	4613      	mov	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4413      	add	r3, r2
 80091c6:	3b23      	subs	r3, #35	; 0x23
 80091c8:	fa00 f203 	lsl.w	r2, r0, r3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	430a      	orrs	r2, r1
 80091d2:	631a      	str	r2, [r3, #48]	; 0x30
 80091d4:	e023      	b.n	800921e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	685a      	ldr	r2, [r3, #4]
 80091e0:	4613      	mov	r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	4413      	add	r3, r2
 80091e6:	3b41      	subs	r3, #65	; 0x41
 80091e8:	221f      	movs	r2, #31
 80091ea:	fa02 f303 	lsl.w	r3, r2, r3
 80091ee:	43da      	mvns	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	400a      	ands	r2, r1
 80091f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	b29b      	uxth	r3, r3
 8009204:	4618      	mov	r0, r3
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	685a      	ldr	r2, [r3, #4]
 800920a:	4613      	mov	r3, r2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	4413      	add	r3, r2
 8009210:	3b41      	subs	r3, #65	; 0x41
 8009212:	fa00 f203 	lsl.w	r2, r0, r3
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	430a      	orrs	r2, r1
 800921c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800921e:	4b29      	ldr	r3, [pc, #164]	; (80092c4 <HAL_ADC_ConfigChannel+0x250>)
 8009220:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a28      	ldr	r2, [pc, #160]	; (80092c8 <HAL_ADC_ConfigChannel+0x254>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d10f      	bne.n	800924c <HAL_ADC_ConfigChannel+0x1d8>
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b12      	cmp	r3, #18
 8009232:	d10b      	bne.n	800924c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a1d      	ldr	r2, [pc, #116]	; (80092c8 <HAL_ADC_ConfigChannel+0x254>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d12b      	bne.n	80092ae <HAL_ADC_ConfigChannel+0x23a>
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a1c      	ldr	r2, [pc, #112]	; (80092cc <HAL_ADC_ConfigChannel+0x258>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d003      	beq.n	8009268 <HAL_ADC_ConfigChannel+0x1f4>
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b11      	cmp	r3, #17
 8009266:	d122      	bne.n	80092ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a11      	ldr	r2, [pc, #68]	; (80092cc <HAL_ADC_ConfigChannel+0x258>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d111      	bne.n	80092ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800928a:	4b11      	ldr	r3, [pc, #68]	; (80092d0 <HAL_ADC_ConfigChannel+0x25c>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a11      	ldr	r2, [pc, #68]	; (80092d4 <HAL_ADC_ConfigChannel+0x260>)
 8009290:	fba2 2303 	umull	r2, r3, r2, r3
 8009294:	0c9a      	lsrs	r2, r3, #18
 8009296:	4613      	mov	r3, r2
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	4413      	add	r3, r2
 800929c:	005b      	lsls	r3, r3, #1
 800929e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80092a0:	e002      	b.n	80092a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	3b01      	subs	r3, #1
 80092a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1f9      	bne.n	80092a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr
 80092c4:	40012300 	.word	0x40012300
 80092c8:	40012000 	.word	0x40012000
 80092cc:	10000012 	.word	0x10000012
 80092d0:	20000000 	.word	0x20000000
 80092d4:	431bde83 	.word	0x431bde83

080092d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80092e0:	4b79      	ldr	r3, [pc, #484]	; (80094c8 <ADC_Init+0x1f0>)
 80092e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	685a      	ldr	r2, [r3, #4]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	431a      	orrs	r2, r3
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	685a      	ldr	r2, [r3, #4]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800930c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	6859      	ldr	r1, [r3, #4]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	021a      	lsls	r2, r3, #8
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	430a      	orrs	r2, r1
 8009320:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	685a      	ldr	r2, [r3, #4]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009330:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	6859      	ldr	r1, [r3, #4]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	689a      	ldr	r2, [r3, #8]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	430a      	orrs	r2, r1
 8009342:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	689a      	ldr	r2, [r3, #8]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009352:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	6899      	ldr	r1, [r3, #8]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	68da      	ldr	r2, [r3, #12]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	430a      	orrs	r2, r1
 8009364:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800936a:	4a58      	ldr	r2, [pc, #352]	; (80094cc <ADC_Init+0x1f4>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d022      	beq.n	80093b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	689a      	ldr	r2, [r3, #8]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800937e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	6899      	ldr	r1, [r3, #8]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	430a      	orrs	r2, r1
 8009390:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	689a      	ldr	r2, [r3, #8]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80093a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	6899      	ldr	r1, [r3, #8]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	430a      	orrs	r2, r1
 80093b2:	609a      	str	r2, [r3, #8]
 80093b4:	e00f      	b.n	80093d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	689a      	ldr	r2, [r3, #8]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80093c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	689a      	ldr	r2, [r3, #8]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80093d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	689a      	ldr	r2, [r3, #8]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f022 0202 	bic.w	r2, r2, #2
 80093e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	6899      	ldr	r1, [r3, #8]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	7e1b      	ldrb	r3, [r3, #24]
 80093f0:	005a      	lsls	r2, r3, #1
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	430a      	orrs	r2, r1
 80093f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d01b      	beq.n	800943c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	685a      	ldr	r2, [r3, #4]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009412:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	685a      	ldr	r2, [r3, #4]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009422:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	6859      	ldr	r1, [r3, #4]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942e:	3b01      	subs	r3, #1
 8009430:	035a      	lsls	r2, r3, #13
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	430a      	orrs	r2, r1
 8009438:	605a      	str	r2, [r3, #4]
 800943a:	e007      	b.n	800944c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	685a      	ldr	r2, [r3, #4]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800944a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800945a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	69db      	ldr	r3, [r3, #28]
 8009466:	3b01      	subs	r3, #1
 8009468:	051a      	lsls	r2, r3, #20
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	430a      	orrs	r2, r1
 8009470:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	689a      	ldr	r2, [r3, #8]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009480:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	6899      	ldr	r1, [r3, #8]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800948e:	025a      	lsls	r2, r3, #9
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	430a      	orrs	r2, r1
 8009496:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	689a      	ldr	r2, [r3, #8]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6899      	ldr	r1, [r3, #8]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	695b      	ldr	r3, [r3, #20]
 80094b2:	029a      	lsls	r2, r3, #10
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	430a      	orrs	r2, r1
 80094ba:	609a      	str	r2, [r3, #8]
}
 80094bc:	bf00      	nop
 80094be:	3714      	adds	r7, #20
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr
 80094c8:	40012300 	.word	0x40012300
 80094cc:	0f000001 	.word	0x0f000001

080094d0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094dc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d13c      	bne.n	8009564 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009500:	2b00      	cmp	r3, #0
 8009502:	d12b      	bne.n	800955c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009508:	2b00      	cmp	r3, #0
 800950a:	d127      	bne.n	800955c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009512:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009516:	2b00      	cmp	r3, #0
 8009518:	d006      	beq.n	8009528 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009524:	2b00      	cmp	r3, #0
 8009526:	d119      	bne.n	800955c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685a      	ldr	r2, [r3, #4]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f022 0220 	bic.w	r2, r2, #32
 8009536:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800954c:	2b00      	cmp	r3, #0
 800954e:	d105      	bne.n	800955c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009554:	f043 0201 	orr.w	r2, r3, #1
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800955c:	68f8      	ldr	r0, [r7, #12]
 800955e:	f7ff fd6b 	bl	8009038 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009562:	e00e      	b.n	8009582 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009568:	f003 0310 	and.w	r3, r3, #16
 800956c:	2b00      	cmp	r3, #0
 800956e:	d003      	beq.n	8009578 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f7ff fd75 	bl	8009060 <HAL_ADC_ErrorCallback>
}
 8009576:	e004      	b.n	8009582 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	4798      	blx	r3
}
 8009582:	bf00      	nop
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b084      	sub	sp, #16
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009596:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f7ff fd57 	bl	800904c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800959e:	bf00      	nop
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b084      	sub	sp, #16
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2240      	movs	r2, #64	; 0x40
 80095b8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095be:	f043 0204 	orr.w	r2, r3, #4
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f7ff fd4a 	bl	8009060 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80095cc:	bf00      	nop
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f003 0307 	and.w	r3, r3, #7
 80095e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80095e4:	4b0c      	ldr	r3, [pc, #48]	; (8009618 <__NVIC_SetPriorityGrouping+0x44>)
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80095ea:	68ba      	ldr	r2, [r7, #8]
 80095ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80095f0:	4013      	ands	r3, r2
 80095f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80095fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009606:	4a04      	ldr	r2, [pc, #16]	; (8009618 <__NVIC_SetPriorityGrouping+0x44>)
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	60d3      	str	r3, [r2, #12]
}
 800960c:	bf00      	nop
 800960e:	3714      	adds	r7, #20
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr
 8009618:	e000ed00 	.word	0xe000ed00

0800961c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800961c:	b480      	push	{r7}
 800961e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009620:	4b04      	ldr	r3, [pc, #16]	; (8009634 <__NVIC_GetPriorityGrouping+0x18>)
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	0a1b      	lsrs	r3, r3, #8
 8009626:	f003 0307 	and.w	r3, r3, #7
}
 800962a:	4618      	mov	r0, r3
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr
 8009634:	e000ed00 	.word	0xe000ed00

08009638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	4603      	mov	r3, r0
 8009640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009646:	2b00      	cmp	r3, #0
 8009648:	db0b      	blt.n	8009662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800964a:	79fb      	ldrb	r3, [r7, #7]
 800964c:	f003 021f 	and.w	r2, r3, #31
 8009650:	4907      	ldr	r1, [pc, #28]	; (8009670 <__NVIC_EnableIRQ+0x38>)
 8009652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009656:	095b      	lsrs	r3, r3, #5
 8009658:	2001      	movs	r0, #1
 800965a:	fa00 f202 	lsl.w	r2, r0, r2
 800965e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009662:	bf00      	nop
 8009664:	370c      	adds	r7, #12
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	e000e100 	.word	0xe000e100

08009674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	4603      	mov	r3, r0
 800967c:	6039      	str	r1, [r7, #0]
 800967e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009684:	2b00      	cmp	r3, #0
 8009686:	db0a      	blt.n	800969e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	b2da      	uxtb	r2, r3
 800968c:	490c      	ldr	r1, [pc, #48]	; (80096c0 <__NVIC_SetPriority+0x4c>)
 800968e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009692:	0112      	lsls	r2, r2, #4
 8009694:	b2d2      	uxtb	r2, r2
 8009696:	440b      	add	r3, r1
 8009698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800969c:	e00a      	b.n	80096b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	b2da      	uxtb	r2, r3
 80096a2:	4908      	ldr	r1, [pc, #32]	; (80096c4 <__NVIC_SetPriority+0x50>)
 80096a4:	79fb      	ldrb	r3, [r7, #7]
 80096a6:	f003 030f 	and.w	r3, r3, #15
 80096aa:	3b04      	subs	r3, #4
 80096ac:	0112      	lsls	r2, r2, #4
 80096ae:	b2d2      	uxtb	r2, r2
 80096b0:	440b      	add	r3, r1
 80096b2:	761a      	strb	r2, [r3, #24]
}
 80096b4:	bf00      	nop
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr
 80096c0:	e000e100 	.word	0xe000e100
 80096c4:	e000ed00 	.word	0xe000ed00

080096c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b089      	sub	sp, #36	; 0x24
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f003 0307 	and.w	r3, r3, #7
 80096da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	f1c3 0307 	rsb	r3, r3, #7
 80096e2:	2b04      	cmp	r3, #4
 80096e4:	bf28      	it	cs
 80096e6:	2304      	movcs	r3, #4
 80096e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	3304      	adds	r3, #4
 80096ee:	2b06      	cmp	r3, #6
 80096f0:	d902      	bls.n	80096f8 <NVIC_EncodePriority+0x30>
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	3b03      	subs	r3, #3
 80096f6:	e000      	b.n	80096fa <NVIC_EncodePriority+0x32>
 80096f8:	2300      	movs	r3, #0
 80096fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80096fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	fa02 f303 	lsl.w	r3, r2, r3
 8009706:	43da      	mvns	r2, r3
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	401a      	ands	r2, r3
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009710:	f04f 31ff 	mov.w	r1, #4294967295
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	fa01 f303 	lsl.w	r3, r1, r3
 800971a:	43d9      	mvns	r1, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009720:	4313      	orrs	r3, r2
         );
}
 8009722:	4618      	mov	r0, r3
 8009724:	3724      	adds	r7, #36	; 0x24
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
	...

08009730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	3b01      	subs	r3, #1
 800973c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009740:	d301      	bcc.n	8009746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009742:	2301      	movs	r3, #1
 8009744:	e00f      	b.n	8009766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009746:	4a0a      	ldr	r2, [pc, #40]	; (8009770 <SysTick_Config+0x40>)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	3b01      	subs	r3, #1
 800974c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800974e:	210f      	movs	r1, #15
 8009750:	f04f 30ff 	mov.w	r0, #4294967295
 8009754:	f7ff ff8e 	bl	8009674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009758:	4b05      	ldr	r3, [pc, #20]	; (8009770 <SysTick_Config+0x40>)
 800975a:	2200      	movs	r2, #0
 800975c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800975e:	4b04      	ldr	r3, [pc, #16]	; (8009770 <SysTick_Config+0x40>)
 8009760:	2207      	movs	r2, #7
 8009762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	e000e010 	.word	0xe000e010

08009774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f7ff ff29 	bl	80095d4 <__NVIC_SetPriorityGrouping>
}
 8009782:	bf00      	nop
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800978a:	b580      	push	{r7, lr}
 800978c:	b086      	sub	sp, #24
 800978e:	af00      	add	r7, sp, #0
 8009790:	4603      	mov	r3, r0
 8009792:	60b9      	str	r1, [r7, #8]
 8009794:	607a      	str	r2, [r7, #4]
 8009796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009798:	2300      	movs	r3, #0
 800979a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800979c:	f7ff ff3e 	bl	800961c <__NVIC_GetPriorityGrouping>
 80097a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	68b9      	ldr	r1, [r7, #8]
 80097a6:	6978      	ldr	r0, [r7, #20]
 80097a8:	f7ff ff8e 	bl	80096c8 <NVIC_EncodePriority>
 80097ac:	4602      	mov	r2, r0
 80097ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097b2:	4611      	mov	r1, r2
 80097b4:	4618      	mov	r0, r3
 80097b6:	f7ff ff5d 	bl	8009674 <__NVIC_SetPriority>
}
 80097ba:	bf00      	nop
 80097bc:	3718      	adds	r7, #24
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b082      	sub	sp, #8
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	4603      	mov	r3, r0
 80097ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80097cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7ff ff31 	bl	8009638 <__NVIC_EnableIRQ>
}
 80097d6:	bf00      	nop
 80097d8:	3708      	adds	r7, #8
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b082      	sub	sp, #8
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f7ff ffa2 	bl	8009730 <SysTick_Config>
 80097ec:	4603      	mov	r3, r0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
	...

080097f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b086      	sub	sp, #24
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009800:	2300      	movs	r3, #0
 8009802:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009804:	f7ff fab4 	bl	8008d70 <HAL_GetTick>
 8009808:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d101      	bne.n	8009814 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	e099      	b.n	8009948 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2202      	movs	r2, #2
 8009820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f022 0201 	bic.w	r2, r2, #1
 8009832:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009834:	e00f      	b.n	8009856 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009836:	f7ff fa9b 	bl	8008d70 <HAL_GetTick>
 800983a:	4602      	mov	r2, r0
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	1ad3      	subs	r3, r2, r3
 8009840:	2b05      	cmp	r3, #5
 8009842:	d908      	bls.n	8009856 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2220      	movs	r2, #32
 8009848:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2203      	movs	r2, #3
 800984e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009852:	2303      	movs	r3, #3
 8009854:	e078      	b.n	8009948 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 0301 	and.w	r3, r3, #1
 8009860:	2b00      	cmp	r3, #0
 8009862:	d1e8      	bne.n	8009836 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800986c:	697a      	ldr	r2, [r7, #20]
 800986e:	4b38      	ldr	r3, [pc, #224]	; (8009950 <HAL_DMA_Init+0x158>)
 8009870:	4013      	ands	r3, r2
 8009872:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	685a      	ldr	r2, [r3, #4]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	689b      	ldr	r3, [r3, #8]
 800987c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009882:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800988e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	699b      	ldr	r3, [r3, #24]
 8009894:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800989a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a1b      	ldr	r3, [r3, #32]
 80098a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80098a2:	697a      	ldr	r2, [r7, #20]
 80098a4:	4313      	orrs	r3, r2
 80098a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ac:	2b04      	cmp	r3, #4
 80098ae:	d107      	bne.n	80098c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b8:	4313      	orrs	r3, r2
 80098ba:	697a      	ldr	r2, [r7, #20]
 80098bc:	4313      	orrs	r3, r2
 80098be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	695b      	ldr	r3, [r3, #20]
 80098ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	f023 0307 	bic.w	r3, r3, #7
 80098d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098dc:	697a      	ldr	r2, [r7, #20]
 80098de:	4313      	orrs	r3, r2
 80098e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e6:	2b04      	cmp	r3, #4
 80098e8:	d117      	bne.n	800991a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ee:	697a      	ldr	r2, [r7, #20]
 80098f0:	4313      	orrs	r3, r2
 80098f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00e      	beq.n	800991a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fa9d 	bl	8009e3c <DMA_CheckFifoParam>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d008      	beq.n	800991a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2240      	movs	r2, #64	; 0x40
 800990c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009916:	2301      	movs	r3, #1
 8009918:	e016      	b.n	8009948 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	697a      	ldr	r2, [r7, #20]
 8009920:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 fa54 	bl	8009dd0 <DMA_CalcBaseAndBitshift>
 8009928:	4603      	mov	r3, r0
 800992a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009930:	223f      	movs	r2, #63	; 0x3f
 8009932:	409a      	lsls	r2, r3
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2201      	movs	r2, #1
 8009942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3718      	adds	r7, #24
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}
 8009950:	f010803f 	.word	0xf010803f

08009954 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b086      	sub	sp, #24
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	607a      	str	r2, [r7, #4]
 8009960:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009962:	2300      	movs	r3, #0
 8009964:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800996a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009972:	2b01      	cmp	r3, #1
 8009974:	d101      	bne.n	800997a <HAL_DMA_Start_IT+0x26>
 8009976:	2302      	movs	r3, #2
 8009978:	e040      	b.n	80099fc <HAL_DMA_Start_IT+0xa8>
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2201      	movs	r2, #1
 800997e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b01      	cmp	r3, #1
 800998c:	d12f      	bne.n	80099ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2202      	movs	r2, #2
 8009992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2200      	movs	r2, #0
 800999a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	68b9      	ldr	r1, [r7, #8]
 80099a2:	68f8      	ldr	r0, [r7, #12]
 80099a4:	f000 f9e6 	bl	8009d74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099ac:	223f      	movs	r2, #63	; 0x3f
 80099ae:	409a      	lsls	r2, r3
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f042 0216 	orr.w	r2, r2, #22
 80099c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d007      	beq.n	80099dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f042 0208 	orr.w	r2, r2, #8
 80099da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f042 0201 	orr.w	r2, r2, #1
 80099ea:	601a      	str	r2, [r3, #0]
 80099ec:	e005      	b.n	80099fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80099f6:	2302      	movs	r3, #2
 80099f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80099fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3718      	adds	r7, #24
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	2b02      	cmp	r3, #2
 8009a16:	d004      	beq.n	8009a22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2280      	movs	r2, #128	; 0x80
 8009a1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e00c      	b.n	8009a3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2205      	movs	r2, #5
 8009a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f022 0201 	bic.w	r2, r2, #1
 8009a38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b086      	sub	sp, #24
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009a50:	2300      	movs	r3, #0
 8009a52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009a54:	4b92      	ldr	r3, [pc, #584]	; (8009ca0 <HAL_DMA_IRQHandler+0x258>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a92      	ldr	r2, [pc, #584]	; (8009ca4 <HAL_DMA_IRQHandler+0x25c>)
 8009a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a5e:	0a9b      	lsrs	r3, r3, #10
 8009a60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a72:	2208      	movs	r2, #8
 8009a74:	409a      	lsls	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	4013      	ands	r3, r2
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d01a      	beq.n	8009ab4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f003 0304 	and.w	r3, r3, #4
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d013      	beq.n	8009ab4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f022 0204 	bic.w	r2, r2, #4
 8009a9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aa0:	2208      	movs	r2, #8
 8009aa2:	409a      	lsls	r2, r3
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aac:	f043 0201 	orr.w	r2, r3, #1
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ab8:	2201      	movs	r2, #1
 8009aba:	409a      	lsls	r2, r3
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	4013      	ands	r3, r2
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d012      	beq.n	8009aea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	695b      	ldr	r3, [r3, #20]
 8009aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00b      	beq.n	8009aea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	409a      	lsls	r2, r3
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ae2:	f043 0202 	orr.w	r2, r3, #2
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aee:	2204      	movs	r2, #4
 8009af0:	409a      	lsls	r2, r3
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	4013      	ands	r3, r2
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d012      	beq.n	8009b20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 0302 	and.w	r3, r3, #2
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00b      	beq.n	8009b20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b0c:	2204      	movs	r2, #4
 8009b0e:	409a      	lsls	r2, r3
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b18:	f043 0204 	orr.w	r2, r3, #4
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b24:	2210      	movs	r2, #16
 8009b26:	409a      	lsls	r2, r3
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	4013      	ands	r3, r2
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d043      	beq.n	8009bb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f003 0308 	and.w	r3, r3, #8
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d03c      	beq.n	8009bb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b42:	2210      	movs	r2, #16
 8009b44:	409a      	lsls	r2, r3
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d018      	beq.n	8009b8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d108      	bne.n	8009b78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d024      	beq.n	8009bb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	4798      	blx	r3
 8009b76:	e01f      	b.n	8009bb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d01b      	beq.n	8009bb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	4798      	blx	r3
 8009b88:	e016      	b.n	8009bb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d107      	bne.n	8009ba8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f022 0208 	bic.w	r2, r2, #8
 8009ba6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d003      	beq.n	8009bb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bbc:	2220      	movs	r2, #32
 8009bbe:	409a      	lsls	r2, r3
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	4013      	ands	r3, r2
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f000 808e 	beq.w	8009ce6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f003 0310 	and.w	r3, r3, #16
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	f000 8086 	beq.w	8009ce6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bde:	2220      	movs	r2, #32
 8009be0:	409a      	lsls	r2, r3
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	2b05      	cmp	r3, #5
 8009bf0:	d136      	bne.n	8009c60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f022 0216 	bic.w	r2, r2, #22
 8009c00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	695a      	ldr	r2, [r3, #20]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d103      	bne.n	8009c22 <HAL_DMA_IRQHandler+0x1da>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d007      	beq.n	8009c32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f022 0208 	bic.w	r2, r2, #8
 8009c30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c36:	223f      	movs	r2, #63	; 0x3f
 8009c38:	409a      	lsls	r2, r3
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d07d      	beq.n	8009d52 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	4798      	blx	r3
        }
        return;
 8009c5e:	e078      	b.n	8009d52 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d01c      	beq.n	8009ca8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d108      	bne.n	8009c8e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d030      	beq.n	8009ce6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	4798      	blx	r3
 8009c8c:	e02b      	b.n	8009ce6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d027      	beq.n	8009ce6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	4798      	blx	r3
 8009c9e:	e022      	b.n	8009ce6 <HAL_DMA_IRQHandler+0x29e>
 8009ca0:	20000000 	.word	0x20000000
 8009ca4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d10f      	bne.n	8009cd6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f022 0210 	bic.w	r2, r2, #16
 8009cc4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d003      	beq.n	8009ce6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d032      	beq.n	8009d54 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf2:	f003 0301 	and.w	r3, r3, #1
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d022      	beq.n	8009d40 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2205      	movs	r2, #5
 8009cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f022 0201 	bic.w	r2, r2, #1
 8009d10:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	3301      	adds	r3, #1
 8009d16:	60bb      	str	r3, [r7, #8]
 8009d18:	697a      	ldr	r2, [r7, #20]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d307      	bcc.n	8009d2e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f003 0301 	and.w	r3, r3, #1
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1f2      	bne.n	8009d12 <HAL_DMA_IRQHandler+0x2ca>
 8009d2c:	e000      	b.n	8009d30 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009d2e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d005      	beq.n	8009d54 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	4798      	blx	r3
 8009d50:	e000      	b.n	8009d54 <HAL_DMA_IRQHandler+0x30c>
        return;
 8009d52:	bf00      	nop
    }
  }
}
 8009d54:	3718      	adds	r7, #24
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop

08009d5c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
 8009d80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009d90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	683a      	ldr	r2, [r7, #0]
 8009d98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	2b40      	cmp	r3, #64	; 0x40
 8009da0:	d108      	bne.n	8009db4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009db2:	e007      	b.n	8009dc4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	60da      	str	r2, [r3, #12]
}
 8009dc4:	bf00      	nop
 8009dc6:	3714      	adds	r7, #20
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b085      	sub	sp, #20
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	3b10      	subs	r3, #16
 8009de0:	4a14      	ldr	r2, [pc, #80]	; (8009e34 <DMA_CalcBaseAndBitshift+0x64>)
 8009de2:	fba2 2303 	umull	r2, r3, r2, r3
 8009de6:	091b      	lsrs	r3, r3, #4
 8009de8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009dea:	4a13      	ldr	r2, [pc, #76]	; (8009e38 <DMA_CalcBaseAndBitshift+0x68>)
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	4413      	add	r3, r2
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	461a      	mov	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2b03      	cmp	r3, #3
 8009dfc:	d909      	bls.n	8009e12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009e06:	f023 0303 	bic.w	r3, r3, #3
 8009e0a:	1d1a      	adds	r2, r3, #4
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	659a      	str	r2, [r3, #88]	; 0x58
 8009e10:	e007      	b.n	8009e22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009e1a:	f023 0303 	bic.w	r3, r3, #3
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3714      	adds	r7, #20
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	aaaaaaab 	.word	0xaaaaaaab
 8009e38:	080195ec 	.word	0x080195ec

08009e3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e44:	2300      	movs	r3, #0
 8009e46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	699b      	ldr	r3, [r3, #24]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d11f      	bne.n	8009e96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	2b03      	cmp	r3, #3
 8009e5a:	d855      	bhi.n	8009f08 <DMA_CheckFifoParam+0xcc>
 8009e5c:	a201      	add	r2, pc, #4	; (adr r2, 8009e64 <DMA_CheckFifoParam+0x28>)
 8009e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e62:	bf00      	nop
 8009e64:	08009e75 	.word	0x08009e75
 8009e68:	08009e87 	.word	0x08009e87
 8009e6c:	08009e75 	.word	0x08009e75
 8009e70:	08009f09 	.word	0x08009f09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d045      	beq.n	8009f0c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009e84:	e042      	b.n	8009f0c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009e8e:	d13f      	bne.n	8009f10 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009e94:	e03c      	b.n	8009f10 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	699b      	ldr	r3, [r3, #24]
 8009e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e9e:	d121      	bne.n	8009ee4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	2b03      	cmp	r3, #3
 8009ea4:	d836      	bhi.n	8009f14 <DMA_CheckFifoParam+0xd8>
 8009ea6:	a201      	add	r2, pc, #4	; (adr r2, 8009eac <DMA_CheckFifoParam+0x70>)
 8009ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eac:	08009ebd 	.word	0x08009ebd
 8009eb0:	08009ec3 	.word	0x08009ec3
 8009eb4:	08009ebd 	.word	0x08009ebd
 8009eb8:	08009ed5 	.word	0x08009ed5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8009ec0:	e02f      	b.n	8009f22 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d024      	beq.n	8009f18 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009ed2:	e021      	b.n	8009f18 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009edc:	d11e      	bne.n	8009f1c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009ee2:	e01b      	b.n	8009f1c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d902      	bls.n	8009ef0 <DMA_CheckFifoParam+0xb4>
 8009eea:	2b03      	cmp	r3, #3
 8009eec:	d003      	beq.n	8009ef6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009eee:	e018      	b.n	8009f22 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8009ef4:	e015      	b.n	8009f22 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00e      	beq.n	8009f20 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	73fb      	strb	r3, [r7, #15]
      break;
 8009f06:	e00b      	b.n	8009f20 <DMA_CheckFifoParam+0xe4>
      break;
 8009f08:	bf00      	nop
 8009f0a:	e00a      	b.n	8009f22 <DMA_CheckFifoParam+0xe6>
      break;
 8009f0c:	bf00      	nop
 8009f0e:	e008      	b.n	8009f22 <DMA_CheckFifoParam+0xe6>
      break;
 8009f10:	bf00      	nop
 8009f12:	e006      	b.n	8009f22 <DMA_CheckFifoParam+0xe6>
      break;
 8009f14:	bf00      	nop
 8009f16:	e004      	b.n	8009f22 <DMA_CheckFifoParam+0xe6>
      break;
 8009f18:	bf00      	nop
 8009f1a:	e002      	b.n	8009f22 <DMA_CheckFifoParam+0xe6>
      break;   
 8009f1c:	bf00      	nop
 8009f1e:	e000      	b.n	8009f22 <DMA_CheckFifoParam+0xe6>
      break;
 8009f20:	bf00      	nop
    }
  } 
  
  return status; 
 8009f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3714      	adds	r7, #20
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b089      	sub	sp, #36	; 0x24
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009f42:	2300      	movs	r3, #0
 8009f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009f46:	2300      	movs	r3, #0
 8009f48:	61fb      	str	r3, [r7, #28]
 8009f4a:	e177      	b.n	800a23c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	fa02 f303 	lsl.w	r3, r2, r3
 8009f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	697a      	ldr	r2, [r7, #20]
 8009f5c:	4013      	ands	r3, r2
 8009f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	f040 8166 	bne.w	800a236 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d00b      	beq.n	8009f8a <HAL_GPIO_Init+0x5a>
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	d007      	beq.n	8009f8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009f7e:	2b11      	cmp	r3, #17
 8009f80:	d003      	beq.n	8009f8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	2b12      	cmp	r3, #18
 8009f88:	d130      	bne.n	8009fec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	005b      	lsls	r3, r3, #1
 8009f94:	2203      	movs	r2, #3
 8009f96:	fa02 f303 	lsl.w	r3, r2, r3
 8009f9a:	43db      	mvns	r3, r3
 8009f9c:	69ba      	ldr	r2, [r7, #24]
 8009f9e:	4013      	ands	r3, r2
 8009fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	68da      	ldr	r2, [r3, #12]
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	005b      	lsls	r3, r3, #1
 8009faa:	fa02 f303 	lsl.w	r3, r2, r3
 8009fae:	69ba      	ldr	r2, [r7, #24]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	69ba      	ldr	r2, [r7, #24]
 8009fb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc8:	43db      	mvns	r3, r3
 8009fca:	69ba      	ldr	r2, [r7, #24]
 8009fcc:	4013      	ands	r3, r2
 8009fce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	091b      	lsrs	r3, r3, #4
 8009fd6:	f003 0201 	and.w	r2, r3, #1
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8009fe0:	69ba      	ldr	r2, [r7, #24]
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	69ba      	ldr	r2, [r7, #24]
 8009fea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	005b      	lsls	r3, r3, #1
 8009ff6:	2203      	movs	r2, #3
 8009ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8009ffc:	43db      	mvns	r3, r3
 8009ffe:	69ba      	ldr	r2, [r7, #24]
 800a000:	4013      	ands	r3, r2
 800a002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	689a      	ldr	r2, [r3, #8]
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	005b      	lsls	r3, r3, #1
 800a00c:	fa02 f303 	lsl.w	r3, r2, r3
 800a010:	69ba      	ldr	r2, [r7, #24]
 800a012:	4313      	orrs	r3, r2
 800a014:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	69ba      	ldr	r2, [r7, #24]
 800a01a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	2b02      	cmp	r3, #2
 800a022:	d003      	beq.n	800a02c <HAL_GPIO_Init+0xfc>
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	2b12      	cmp	r3, #18
 800a02a:	d123      	bne.n	800a074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	08da      	lsrs	r2, r3, #3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	3208      	adds	r2, #8
 800a034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a03a:	69fb      	ldr	r3, [r7, #28]
 800a03c:	f003 0307 	and.w	r3, r3, #7
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	220f      	movs	r2, #15
 800a044:	fa02 f303 	lsl.w	r3, r2, r3
 800a048:	43db      	mvns	r3, r3
 800a04a:	69ba      	ldr	r2, [r7, #24]
 800a04c:	4013      	ands	r3, r2
 800a04e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	691a      	ldr	r2, [r3, #16]
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	f003 0307 	and.w	r3, r3, #7
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	fa02 f303 	lsl.w	r3, r2, r3
 800a060:	69ba      	ldr	r2, [r7, #24]
 800a062:	4313      	orrs	r3, r2
 800a064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	08da      	lsrs	r2, r3, #3
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	3208      	adds	r2, #8
 800a06e:	69b9      	ldr	r1, [r7, #24]
 800a070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	005b      	lsls	r3, r3, #1
 800a07e:	2203      	movs	r2, #3
 800a080:	fa02 f303 	lsl.w	r3, r2, r3
 800a084:	43db      	mvns	r3, r3
 800a086:	69ba      	ldr	r2, [r7, #24]
 800a088:	4013      	ands	r3, r2
 800a08a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	f003 0203 	and.w	r2, r3, #3
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	005b      	lsls	r3, r3, #1
 800a098:	fa02 f303 	lsl.w	r3, r2, r3
 800a09c:	69ba      	ldr	r2, [r7, #24]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	69ba      	ldr	r2, [r7, #24]
 800a0a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	f000 80c0 	beq.w	800a236 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	60fb      	str	r3, [r7, #12]
 800a0ba:	4b65      	ldr	r3, [pc, #404]	; (800a250 <HAL_GPIO_Init+0x320>)
 800a0bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0be:	4a64      	ldr	r2, [pc, #400]	; (800a250 <HAL_GPIO_Init+0x320>)
 800a0c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a0c4:	6453      	str	r3, [r2, #68]	; 0x44
 800a0c6:	4b62      	ldr	r3, [pc, #392]	; (800a250 <HAL_GPIO_Init+0x320>)
 800a0c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0ce:	60fb      	str	r3, [r7, #12]
 800a0d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a0d2:	4a60      	ldr	r2, [pc, #384]	; (800a254 <HAL_GPIO_Init+0x324>)
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	089b      	lsrs	r3, r3, #2
 800a0d8:	3302      	adds	r3, #2
 800a0da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	f003 0303 	and.w	r3, r3, #3
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	220f      	movs	r2, #15
 800a0ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ee:	43db      	mvns	r3, r3
 800a0f0:	69ba      	ldr	r2, [r7, #24]
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4a57      	ldr	r2, [pc, #348]	; (800a258 <HAL_GPIO_Init+0x328>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d037      	beq.n	800a16e <HAL_GPIO_Init+0x23e>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	4a56      	ldr	r2, [pc, #344]	; (800a25c <HAL_GPIO_Init+0x32c>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d031      	beq.n	800a16a <HAL_GPIO_Init+0x23a>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	4a55      	ldr	r2, [pc, #340]	; (800a260 <HAL_GPIO_Init+0x330>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d02b      	beq.n	800a166 <HAL_GPIO_Init+0x236>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4a54      	ldr	r2, [pc, #336]	; (800a264 <HAL_GPIO_Init+0x334>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d025      	beq.n	800a162 <HAL_GPIO_Init+0x232>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4a53      	ldr	r2, [pc, #332]	; (800a268 <HAL_GPIO_Init+0x338>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d01f      	beq.n	800a15e <HAL_GPIO_Init+0x22e>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a52      	ldr	r2, [pc, #328]	; (800a26c <HAL_GPIO_Init+0x33c>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d019      	beq.n	800a15a <HAL_GPIO_Init+0x22a>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4a51      	ldr	r2, [pc, #324]	; (800a270 <HAL_GPIO_Init+0x340>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d013      	beq.n	800a156 <HAL_GPIO_Init+0x226>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a50      	ldr	r2, [pc, #320]	; (800a274 <HAL_GPIO_Init+0x344>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d00d      	beq.n	800a152 <HAL_GPIO_Init+0x222>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a4f      	ldr	r2, [pc, #316]	; (800a278 <HAL_GPIO_Init+0x348>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d007      	beq.n	800a14e <HAL_GPIO_Init+0x21e>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a4e      	ldr	r2, [pc, #312]	; (800a27c <HAL_GPIO_Init+0x34c>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d101      	bne.n	800a14a <HAL_GPIO_Init+0x21a>
 800a146:	2309      	movs	r3, #9
 800a148:	e012      	b.n	800a170 <HAL_GPIO_Init+0x240>
 800a14a:	230a      	movs	r3, #10
 800a14c:	e010      	b.n	800a170 <HAL_GPIO_Init+0x240>
 800a14e:	2308      	movs	r3, #8
 800a150:	e00e      	b.n	800a170 <HAL_GPIO_Init+0x240>
 800a152:	2307      	movs	r3, #7
 800a154:	e00c      	b.n	800a170 <HAL_GPIO_Init+0x240>
 800a156:	2306      	movs	r3, #6
 800a158:	e00a      	b.n	800a170 <HAL_GPIO_Init+0x240>
 800a15a:	2305      	movs	r3, #5
 800a15c:	e008      	b.n	800a170 <HAL_GPIO_Init+0x240>
 800a15e:	2304      	movs	r3, #4
 800a160:	e006      	b.n	800a170 <HAL_GPIO_Init+0x240>
 800a162:	2303      	movs	r3, #3
 800a164:	e004      	b.n	800a170 <HAL_GPIO_Init+0x240>
 800a166:	2302      	movs	r3, #2
 800a168:	e002      	b.n	800a170 <HAL_GPIO_Init+0x240>
 800a16a:	2301      	movs	r3, #1
 800a16c:	e000      	b.n	800a170 <HAL_GPIO_Init+0x240>
 800a16e:	2300      	movs	r3, #0
 800a170:	69fa      	ldr	r2, [r7, #28]
 800a172:	f002 0203 	and.w	r2, r2, #3
 800a176:	0092      	lsls	r2, r2, #2
 800a178:	4093      	lsls	r3, r2
 800a17a:	69ba      	ldr	r2, [r7, #24]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a180:	4934      	ldr	r1, [pc, #208]	; (800a254 <HAL_GPIO_Init+0x324>)
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	089b      	lsrs	r3, r3, #2
 800a186:	3302      	adds	r3, #2
 800a188:	69ba      	ldr	r2, [r7, #24]
 800a18a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a18e:	4b3c      	ldr	r3, [pc, #240]	; (800a280 <HAL_GPIO_Init+0x350>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	43db      	mvns	r3, r3
 800a198:	69ba      	ldr	r2, [r7, #24]
 800a19a:	4013      	ands	r3, r2
 800a19c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d003      	beq.n	800a1b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a1aa:	69ba      	ldr	r2, [r7, #24]
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a1b2:	4a33      	ldr	r2, [pc, #204]	; (800a280 <HAL_GPIO_Init+0x350>)
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a1b8:	4b31      	ldr	r3, [pc, #196]	; (800a280 <HAL_GPIO_Init+0x350>)
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	43db      	mvns	r3, r3
 800a1c2:	69ba      	ldr	r2, [r7, #24]
 800a1c4:	4013      	ands	r3, r2
 800a1c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d003      	beq.n	800a1dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a1d4:	69ba      	ldr	r2, [r7, #24]
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a1dc:	4a28      	ldr	r2, [pc, #160]	; (800a280 <HAL_GPIO_Init+0x350>)
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a1e2:	4b27      	ldr	r3, [pc, #156]	; (800a280 <HAL_GPIO_Init+0x350>)
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	43db      	mvns	r3, r3
 800a1ec:	69ba      	ldr	r2, [r7, #24]
 800a1ee:	4013      	ands	r3, r2
 800a1f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d003      	beq.n	800a206 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a1fe:	69ba      	ldr	r2, [r7, #24]
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	4313      	orrs	r3, r2
 800a204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a206:	4a1e      	ldr	r2, [pc, #120]	; (800a280 <HAL_GPIO_Init+0x350>)
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a20c:	4b1c      	ldr	r3, [pc, #112]	; (800a280 <HAL_GPIO_Init+0x350>)
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	43db      	mvns	r3, r3
 800a216:	69ba      	ldr	r2, [r7, #24]
 800a218:	4013      	ands	r3, r2
 800a21a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a224:	2b00      	cmp	r3, #0
 800a226:	d003      	beq.n	800a230 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800a228:	69ba      	ldr	r2, [r7, #24]
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	4313      	orrs	r3, r2
 800a22e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a230:	4a13      	ldr	r2, [pc, #76]	; (800a280 <HAL_GPIO_Init+0x350>)
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	3301      	adds	r3, #1
 800a23a:	61fb      	str	r3, [r7, #28]
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	2b0f      	cmp	r3, #15
 800a240:	f67f ae84 	bls.w	8009f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a244:	bf00      	nop
 800a246:	3724      	adds	r7, #36	; 0x24
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr
 800a250:	40023800 	.word	0x40023800
 800a254:	40013800 	.word	0x40013800
 800a258:	40020000 	.word	0x40020000
 800a25c:	40020400 	.word	0x40020400
 800a260:	40020800 	.word	0x40020800
 800a264:	40020c00 	.word	0x40020c00
 800a268:	40021000 	.word	0x40021000
 800a26c:	40021400 	.word	0x40021400
 800a270:	40021800 	.word	0x40021800
 800a274:	40021c00 	.word	0x40021c00
 800a278:	40022000 	.word	0x40022000
 800a27c:	40022400 	.word	0x40022400
 800a280:	40013c00 	.word	0x40013c00

0800a284 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a284:	b480      	push	{r7}
 800a286:	b085      	sub	sp, #20
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	460b      	mov	r3, r1
 800a28e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	691a      	ldr	r2, [r3, #16]
 800a294:	887b      	ldrh	r3, [r7, #2]
 800a296:	4013      	ands	r3, r2
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d002      	beq.n	800a2a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a29c:	2301      	movs	r3, #1
 800a29e:	73fb      	strb	r3, [r7, #15]
 800a2a0:	e001      	b.n	800a2a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a2a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3714      	adds	r7, #20
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	460b      	mov	r3, r1
 800a2be:	807b      	strh	r3, [r7, #2]
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a2c4:	787b      	ldrb	r3, [r7, #1]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d003      	beq.n	800a2d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a2ca:	887a      	ldrh	r2, [r7, #2]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a2d0:	e003      	b.n	800a2da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a2d2:	887b      	ldrh	r3, [r7, #2]
 800a2d4:	041a      	lsls	r2, r3, #16
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	619a      	str	r2, [r3, #24]
}
 800a2da:	bf00      	nop
 800a2dc:	370c      	adds	r7, #12
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
	...

0800a2e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d101      	bne.n	800a2fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e11f      	b.n	800a53a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a300:	b2db      	uxtb	r3, r3
 800a302:	2b00      	cmp	r3, #0
 800a304:	d106      	bne.n	800a314 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f7fc fa2a 	bl	8006768 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2224      	movs	r2, #36	; 0x24
 800a318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f022 0201 	bic.w	r2, r2, #1
 800a32a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a33a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a34a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a34c:	f001 f96e 	bl	800b62c <HAL_RCC_GetPCLK1Freq>
 800a350:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	4a7b      	ldr	r2, [pc, #492]	; (800a544 <HAL_I2C_Init+0x25c>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d807      	bhi.n	800a36c <HAL_I2C_Init+0x84>
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	4a7a      	ldr	r2, [pc, #488]	; (800a548 <HAL_I2C_Init+0x260>)
 800a360:	4293      	cmp	r3, r2
 800a362:	bf94      	ite	ls
 800a364:	2301      	movls	r3, #1
 800a366:	2300      	movhi	r3, #0
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	e006      	b.n	800a37a <HAL_I2C_Init+0x92>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	4a77      	ldr	r2, [pc, #476]	; (800a54c <HAL_I2C_Init+0x264>)
 800a370:	4293      	cmp	r3, r2
 800a372:	bf94      	ite	ls
 800a374:	2301      	movls	r3, #1
 800a376:	2300      	movhi	r3, #0
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d001      	beq.n	800a382 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e0db      	b.n	800a53a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	4a72      	ldr	r2, [pc, #456]	; (800a550 <HAL_I2C_Init+0x268>)
 800a386:	fba2 2303 	umull	r2, r3, r2, r3
 800a38a:	0c9b      	lsrs	r3, r3, #18
 800a38c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	430a      	orrs	r2, r1
 800a3a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	6a1b      	ldr	r3, [r3, #32]
 800a3a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	4a64      	ldr	r2, [pc, #400]	; (800a544 <HAL_I2C_Init+0x25c>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d802      	bhi.n	800a3bc <HAL_I2C_Init+0xd4>
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	e009      	b.n	800a3d0 <HAL_I2C_Init+0xe8>
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a3c2:	fb02 f303 	mul.w	r3, r2, r3
 800a3c6:	4a63      	ldr	r2, [pc, #396]	; (800a554 <HAL_I2C_Init+0x26c>)
 800a3c8:	fba2 2303 	umull	r2, r3, r2, r3
 800a3cc:	099b      	lsrs	r3, r3, #6
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	6812      	ldr	r2, [r2, #0]
 800a3d4:	430b      	orrs	r3, r1
 800a3d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	69db      	ldr	r3, [r3, #28]
 800a3de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a3e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	4956      	ldr	r1, [pc, #344]	; (800a544 <HAL_I2C_Init+0x25c>)
 800a3ec:	428b      	cmp	r3, r1
 800a3ee:	d80d      	bhi.n	800a40c <HAL_I2C_Init+0x124>
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	1e59      	subs	r1, r3, #1
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	005b      	lsls	r3, r3, #1
 800a3fa:	fbb1 f3f3 	udiv	r3, r1, r3
 800a3fe:	3301      	adds	r3, #1
 800a400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a404:	2b04      	cmp	r3, #4
 800a406:	bf38      	it	cc
 800a408:	2304      	movcc	r3, #4
 800a40a:	e04f      	b.n	800a4ac <HAL_I2C_Init+0x1c4>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d111      	bne.n	800a438 <HAL_I2C_Init+0x150>
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	1e58      	subs	r0, r3, #1
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6859      	ldr	r1, [r3, #4]
 800a41c:	460b      	mov	r3, r1
 800a41e:	005b      	lsls	r3, r3, #1
 800a420:	440b      	add	r3, r1
 800a422:	fbb0 f3f3 	udiv	r3, r0, r3
 800a426:	3301      	adds	r3, #1
 800a428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	bf0c      	ite	eq
 800a430:	2301      	moveq	r3, #1
 800a432:	2300      	movne	r3, #0
 800a434:	b2db      	uxtb	r3, r3
 800a436:	e012      	b.n	800a45e <HAL_I2C_Init+0x176>
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	1e58      	subs	r0, r3, #1
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6859      	ldr	r1, [r3, #4]
 800a440:	460b      	mov	r3, r1
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	440b      	add	r3, r1
 800a446:	0099      	lsls	r1, r3, #2
 800a448:	440b      	add	r3, r1
 800a44a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a44e:	3301      	adds	r3, #1
 800a450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a454:	2b00      	cmp	r3, #0
 800a456:	bf0c      	ite	eq
 800a458:	2301      	moveq	r3, #1
 800a45a:	2300      	movne	r3, #0
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d001      	beq.n	800a466 <HAL_I2C_Init+0x17e>
 800a462:	2301      	movs	r3, #1
 800a464:	e022      	b.n	800a4ac <HAL_I2C_Init+0x1c4>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	689b      	ldr	r3, [r3, #8]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10e      	bne.n	800a48c <HAL_I2C_Init+0x1a4>
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	1e58      	subs	r0, r3, #1
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6859      	ldr	r1, [r3, #4]
 800a476:	460b      	mov	r3, r1
 800a478:	005b      	lsls	r3, r3, #1
 800a47a:	440b      	add	r3, r1
 800a47c:	fbb0 f3f3 	udiv	r3, r0, r3
 800a480:	3301      	adds	r3, #1
 800a482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a48a:	e00f      	b.n	800a4ac <HAL_I2C_Init+0x1c4>
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	1e58      	subs	r0, r3, #1
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6859      	ldr	r1, [r3, #4]
 800a494:	460b      	mov	r3, r1
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	440b      	add	r3, r1
 800a49a:	0099      	lsls	r1, r3, #2
 800a49c:	440b      	add	r3, r1
 800a49e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a4ac:	6879      	ldr	r1, [r7, #4]
 800a4ae:	6809      	ldr	r1, [r1, #0]
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	69da      	ldr	r2, [r3, #28]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a1b      	ldr	r3, [r3, #32]
 800a4c6:	431a      	orrs	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	430a      	orrs	r2, r1
 800a4ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a4da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	6911      	ldr	r1, [r2, #16]
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	68d2      	ldr	r2, [r2, #12]
 800a4e6:	4311      	orrs	r1, r2
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	6812      	ldr	r2, [r2, #0]
 800a4ec:	430b      	orrs	r3, r1
 800a4ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	695a      	ldr	r2, [r3, #20]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	699b      	ldr	r3, [r3, #24]
 800a502:	431a      	orrs	r2, r3
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	430a      	orrs	r2, r1
 800a50a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f042 0201 	orr.w	r2, r2, #1
 800a51a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2220      	movs	r2, #32
 800a526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	000186a0 	.word	0x000186a0
 800a548:	001e847f 	.word	0x001e847f
 800a54c:	003d08ff 	.word	0x003d08ff
 800a550:	431bde83 	.word	0x431bde83
 800a554:	10624dd3 	.word	0x10624dd3

0800a558 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b088      	sub	sp, #32
 800a55c:	af02      	add	r7, sp, #8
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	607a      	str	r2, [r7, #4]
 800a562:	461a      	mov	r2, r3
 800a564:	460b      	mov	r3, r1
 800a566:	817b      	strh	r3, [r7, #10]
 800a568:	4613      	mov	r3, r2
 800a56a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a56c:	f7fe fc00 	bl	8008d70 <HAL_GetTick>
 800a570:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	2b20      	cmp	r3, #32
 800a57c:	f040 80e0 	bne.w	800a740 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	9300      	str	r3, [sp, #0]
 800a584:	2319      	movs	r3, #25
 800a586:	2201      	movs	r2, #1
 800a588:	4970      	ldr	r1, [pc, #448]	; (800a74c <HAL_I2C_Master_Transmit+0x1f4>)
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f000 fc58 	bl	800ae40 <I2C_WaitOnFlagUntilTimeout>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d001      	beq.n	800a59a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a596:	2302      	movs	r3, #2
 800a598:	e0d3      	b.n	800a742 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d101      	bne.n	800a5a8 <HAL_I2C_Master_Transmit+0x50>
 800a5a4:	2302      	movs	r3, #2
 800a5a6:	e0cc      	b.n	800a742 <HAL_I2C_Master_Transmit+0x1ea>
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f003 0301 	and.w	r3, r3, #1
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d007      	beq.n	800a5ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f042 0201 	orr.w	r2, r2, #1
 800a5cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a5dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2221      	movs	r2, #33	; 0x21
 800a5e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2210      	movs	r2, #16
 800a5ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	893a      	ldrh	r2, [r7, #8]
 800a5fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a604:	b29a      	uxth	r2, r3
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	4a50      	ldr	r2, [pc, #320]	; (800a750 <HAL_I2C_Master_Transmit+0x1f8>)
 800a60e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a610:	8979      	ldrh	r1, [r7, #10]
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	6a3a      	ldr	r2, [r7, #32]
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f000 fac2 	bl	800aba0 <I2C_MasterRequestWrite>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d001      	beq.n	800a626 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	e08d      	b.n	800a742 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a626:	2300      	movs	r3, #0
 800a628:	613b      	str	r3, [r7, #16]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	695b      	ldr	r3, [r3, #20]
 800a630:	613b      	str	r3, [r7, #16]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	699b      	ldr	r3, [r3, #24]
 800a638:	613b      	str	r3, [r7, #16]
 800a63a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a63c:	e066      	b.n	800a70c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a63e:	697a      	ldr	r2, [r7, #20]
 800a640:	6a39      	ldr	r1, [r7, #32]
 800a642:	68f8      	ldr	r0, [r7, #12]
 800a644:	f000 fcd2 	bl	800afec <I2C_WaitOnTXEFlagUntilTimeout>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d00d      	beq.n	800a66a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a652:	2b04      	cmp	r3, #4
 800a654:	d107      	bne.n	800a666 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a664:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a666:	2301      	movs	r3, #1
 800a668:	e06b      	b.n	800a742 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66e:	781a      	ldrb	r2, [r3, #0]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67a:	1c5a      	adds	r2, r3, #1
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a684:	b29b      	uxth	r3, r3
 800a686:	3b01      	subs	r3, #1
 800a688:	b29a      	uxth	r2, r3
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a692:	3b01      	subs	r3, #1
 800a694:	b29a      	uxth	r2, r3
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	695b      	ldr	r3, [r3, #20]
 800a6a0:	f003 0304 	and.w	r3, r3, #4
 800a6a4:	2b04      	cmp	r3, #4
 800a6a6:	d11b      	bne.n	800a6e0 <HAL_I2C_Master_Transmit+0x188>
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d017      	beq.n	800a6e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b4:	781a      	ldrb	r2, [r3, #0]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c0:	1c5a      	adds	r2, r3, #1
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	3b01      	subs	r3, #1
 800a6ce:	b29a      	uxth	r2, r3
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	b29a      	uxth	r2, r3
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a6e0:	697a      	ldr	r2, [r7, #20]
 800a6e2:	6a39      	ldr	r1, [r7, #32]
 800a6e4:	68f8      	ldr	r0, [r7, #12]
 800a6e6:	f000 fcc2 	bl	800b06e <I2C_WaitOnBTFFlagUntilTimeout>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d00d      	beq.n	800a70c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f4:	2b04      	cmp	r3, #4
 800a6f6:	d107      	bne.n	800a708 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a706:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	e01a      	b.n	800a742 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a710:	2b00      	cmp	r3, #0
 800a712:	d194      	bne.n	800a63e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2220      	movs	r2, #32
 800a728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2200      	movs	r2, #0
 800a730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2200      	movs	r2, #0
 800a738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a73c:	2300      	movs	r3, #0
 800a73e:	e000      	b.n	800a742 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a740:	2302      	movs	r3, #2
  }
}
 800a742:	4618      	mov	r0, r3
 800a744:	3718      	adds	r7, #24
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	00100002 	.word	0x00100002
 800a750:	ffff0000 	.word	0xffff0000

0800a754 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b08c      	sub	sp, #48	; 0x30
 800a758:	af02      	add	r7, sp, #8
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	607a      	str	r2, [r7, #4]
 800a75e:	461a      	mov	r2, r3
 800a760:	460b      	mov	r3, r1
 800a762:	817b      	strh	r3, [r7, #10]
 800a764:	4613      	mov	r3, r2
 800a766:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a768:	f7fe fb02 	bl	8008d70 <HAL_GetTick>
 800a76c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a774:	b2db      	uxtb	r3, r3
 800a776:	2b20      	cmp	r3, #32
 800a778:	f040 820b 	bne.w	800ab92 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77e:	9300      	str	r3, [sp, #0]
 800a780:	2319      	movs	r3, #25
 800a782:	2201      	movs	r2, #1
 800a784:	497c      	ldr	r1, [pc, #496]	; (800a978 <HAL_I2C_Master_Receive+0x224>)
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f000 fb5a 	bl	800ae40 <I2C_WaitOnFlagUntilTimeout>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d001      	beq.n	800a796 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800a792:	2302      	movs	r3, #2
 800a794:	e1fe      	b.n	800ab94 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d101      	bne.n	800a7a4 <HAL_I2C_Master_Receive+0x50>
 800a7a0:	2302      	movs	r3, #2
 800a7a2:	e1f7      	b.n	800ab94 <HAL_I2C_Master_Receive+0x440>
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f003 0301 	and.w	r3, r3, #1
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d007      	beq.n	800a7ca <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f042 0201 	orr.w	r2, r2, #1
 800a7c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a7d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2222      	movs	r2, #34	; 0x22
 800a7de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2210      	movs	r2, #16
 800a7e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	893a      	ldrh	r2, [r7, #8]
 800a7fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a800:	b29a      	uxth	r2, r3
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	4a5c      	ldr	r2, [pc, #368]	; (800a97c <HAL_I2C_Master_Receive+0x228>)
 800a80a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a80c:	8979      	ldrh	r1, [r7, #10]
 800a80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a812:	68f8      	ldr	r0, [r7, #12]
 800a814:	f000 fa46 	bl	800aca4 <I2C_MasterRequestRead>
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d001      	beq.n	800a822 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	e1b8      	b.n	800ab94 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a826:	2b00      	cmp	r3, #0
 800a828:	d113      	bne.n	800a852 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a82a:	2300      	movs	r3, #0
 800a82c:	623b      	str	r3, [r7, #32]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	695b      	ldr	r3, [r3, #20]
 800a834:	623b      	str	r3, [r7, #32]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	699b      	ldr	r3, [r3, #24]
 800a83c:	623b      	str	r3, [r7, #32]
 800a83e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a84e:	601a      	str	r2, [r3, #0]
 800a850:	e18c      	b.n	800ab6c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a856:	2b01      	cmp	r3, #1
 800a858:	d11b      	bne.n	800a892 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a868:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a86a:	2300      	movs	r3, #0
 800a86c:	61fb      	str	r3, [r7, #28]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	695b      	ldr	r3, [r3, #20]
 800a874:	61fb      	str	r3, [r7, #28]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	699b      	ldr	r3, [r3, #24]
 800a87c:	61fb      	str	r3, [r7, #28]
 800a87e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a88e:	601a      	str	r2, [r3, #0]
 800a890:	e16c      	b.n	800ab6c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a896:	2b02      	cmp	r3, #2
 800a898:	d11b      	bne.n	800a8d2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	61bb      	str	r3, [r7, #24]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	695b      	ldr	r3, [r3, #20]
 800a8c4:	61bb      	str	r3, [r7, #24]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	699b      	ldr	r3, [r3, #24]
 800a8cc:	61bb      	str	r3, [r7, #24]
 800a8ce:	69bb      	ldr	r3, [r7, #24]
 800a8d0:	e14c      	b.n	800ab6c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a8e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	617b      	str	r3, [r7, #20]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	695b      	ldr	r3, [r3, #20]
 800a8ec:	617b      	str	r3, [r7, #20]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	699b      	ldr	r3, [r3, #24]
 800a8f4:	617b      	str	r3, [r7, #20]
 800a8f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a8f8:	e138      	b.n	800ab6c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8fe:	2b03      	cmp	r3, #3
 800a900:	f200 80f1 	bhi.w	800aae6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d123      	bne.n	800a954 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a90c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a90e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a910:	68f8      	ldr	r0, [r7, #12]
 800a912:	f000 fbed 	bl	800b0f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a916:	4603      	mov	r3, r0
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d001      	beq.n	800a920 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800a91c:	2301      	movs	r3, #1
 800a91e:	e139      	b.n	800ab94 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	691a      	ldr	r2, [r3, #16]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92a:	b2d2      	uxtb	r2, r2
 800a92c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a932:	1c5a      	adds	r2, r3, #1
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a93c:	3b01      	subs	r3, #1
 800a93e:	b29a      	uxth	r2, r3
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a948:	b29b      	uxth	r3, r3
 800a94a:	3b01      	subs	r3, #1
 800a94c:	b29a      	uxth	r2, r3
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a952:	e10b      	b.n	800ab6c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d14e      	bne.n	800a9fa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95e:	9300      	str	r3, [sp, #0]
 800a960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a962:	2200      	movs	r2, #0
 800a964:	4906      	ldr	r1, [pc, #24]	; (800a980 <HAL_I2C_Master_Receive+0x22c>)
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f000 fa6a 	bl	800ae40 <I2C_WaitOnFlagUntilTimeout>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d008      	beq.n	800a984 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	e10e      	b.n	800ab94 <HAL_I2C_Master_Receive+0x440>
 800a976:	bf00      	nop
 800a978:	00100002 	.word	0x00100002
 800a97c:	ffff0000 	.word	0xffff0000
 800a980:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a992:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	691a      	ldr	r2, [r3, #16]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99e:	b2d2      	uxtb	r2, r2
 800a9a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a6:	1c5a      	adds	r2, r3, #1
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	691a      	ldr	r2, [r3, #16]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d0:	b2d2      	uxtb	r2, r2
 800a9d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d8:	1c5a      	adds	r2, r3, #1
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9e2:	3b01      	subs	r3, #1
 800a9e4:	b29a      	uxth	r2, r3
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	b29a      	uxth	r2, r3
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a9f8:	e0b8      	b.n	800ab6c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fc:	9300      	str	r3, [sp, #0]
 800a9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa00:	2200      	movs	r2, #0
 800aa02:	4966      	ldr	r1, [pc, #408]	; (800ab9c <HAL_I2C_Master_Receive+0x448>)
 800aa04:	68f8      	ldr	r0, [r7, #12]
 800aa06:	f000 fa1b 	bl	800ae40 <I2C_WaitOnFlagUntilTimeout>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d001      	beq.n	800aa14 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800aa10:	2301      	movs	r3, #1
 800aa12:	e0bf      	b.n	800ab94 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	691a      	ldr	r2, [r3, #16]
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2e:	b2d2      	uxtb	r2, r2
 800aa30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa36:	1c5a      	adds	r2, r3, #1
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa40:	3b01      	subs	r3, #1
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	b29a      	uxth	r2, r3
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aa56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa58:	9300      	str	r3, [sp, #0]
 800aa5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	494f      	ldr	r1, [pc, #316]	; (800ab9c <HAL_I2C_Master_Receive+0x448>)
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f000 f9ed 	bl	800ae40 <I2C_WaitOnFlagUntilTimeout>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d001      	beq.n	800aa70 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e091      	b.n	800ab94 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	691a      	ldr	r2, [r3, #16]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8a:	b2d2      	uxtb	r2, r2
 800aa8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa92:	1c5a      	adds	r2, r3, #1
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	b29a      	uxth	r2, r3
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	b29a      	uxth	r2, r3
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	691a      	ldr	r2, [r3, #16]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aabc:	b2d2      	uxtb	r2, r2
 800aabe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac4:	1c5a      	adds	r2, r3, #1
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aace:	3b01      	subs	r3, #1
 800aad0:	b29a      	uxth	r2, r3
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aada:	b29b      	uxth	r3, r3
 800aadc:	3b01      	subs	r3, #1
 800aade:	b29a      	uxth	r2, r3
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aae4:	e042      	b.n	800ab6c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aae8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aaea:	68f8      	ldr	r0, [r7, #12]
 800aaec:	f000 fb00 	bl	800b0f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d001      	beq.n	800aafa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e04c      	b.n	800ab94 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	691a      	ldr	r2, [r3, #16]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab04:	b2d2      	uxtb	r2, r2
 800ab06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0c:	1c5a      	adds	r2, r3, #1
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab16:	3b01      	subs	r3, #1
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	3b01      	subs	r3, #1
 800ab26:	b29a      	uxth	r2, r3
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	695b      	ldr	r3, [r3, #20]
 800ab32:	f003 0304 	and.w	r3, r3, #4
 800ab36:	2b04      	cmp	r3, #4
 800ab38:	d118      	bne.n	800ab6c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	691a      	ldr	r2, [r3, #16]
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab44:	b2d2      	uxtb	r2, r2
 800ab46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab4c:	1c5a      	adds	r2, r3, #1
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab56:	3b01      	subs	r3, #1
 800ab58:	b29a      	uxth	r2, r3
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	3b01      	subs	r3, #1
 800ab66:	b29a      	uxth	r2, r3
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	f47f aec2 	bne.w	800a8fa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2220      	movs	r2, #32
 800ab7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2200      	movs	r2, #0
 800ab82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	e000      	b.n	800ab94 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800ab92:	2302      	movs	r3, #2
  }
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3728      	adds	r7, #40	; 0x28
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}
 800ab9c:	00010004 	.word	0x00010004

0800aba0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b088      	sub	sp, #32
 800aba4:	af02      	add	r7, sp, #8
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	607a      	str	r2, [r7, #4]
 800abaa:	603b      	str	r3, [r7, #0]
 800abac:	460b      	mov	r3, r1
 800abae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	2b08      	cmp	r3, #8
 800abba:	d006      	beq.n	800abca <I2C_MasterRequestWrite+0x2a>
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d003      	beq.n	800abca <I2C_MasterRequestWrite+0x2a>
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800abc8:	d108      	bne.n	800abdc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abd8:	601a      	str	r2, [r3, #0]
 800abda:	e00b      	b.n	800abf4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe0:	2b12      	cmp	r3, #18
 800abe2:	d107      	bne.n	800abf4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abf2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	9300      	str	r3, [sp, #0]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	f000 f91d 	bl	800ae40 <I2C_WaitOnFlagUntilTimeout>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d00d      	beq.n	800ac28 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac1a:	d103      	bne.n	800ac24 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ac24:	2303      	movs	r3, #3
 800ac26:	e035      	b.n	800ac94 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	691b      	ldr	r3, [r3, #16]
 800ac2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac30:	d108      	bne.n	800ac44 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ac32:	897b      	ldrh	r3, [r7, #10]
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	461a      	mov	r2, r3
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ac40:	611a      	str	r2, [r3, #16]
 800ac42:	e01b      	b.n	800ac7c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ac44:	897b      	ldrh	r3, [r7, #10]
 800ac46:	11db      	asrs	r3, r3, #7
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	f003 0306 	and.w	r3, r3, #6
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	f063 030f 	orn	r3, r3, #15
 800ac54:	b2da      	uxtb	r2, r3
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	490e      	ldr	r1, [pc, #56]	; (800ac9c <I2C_MasterRequestWrite+0xfc>)
 800ac62:	68f8      	ldr	r0, [r7, #12]
 800ac64:	f000 f943 	bl	800aeee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d001      	beq.n	800ac72 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e010      	b.n	800ac94 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ac72:	897b      	ldrh	r3, [r7, #10]
 800ac74:	b2da      	uxtb	r2, r3
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	4907      	ldr	r1, [pc, #28]	; (800aca0 <I2C_MasterRequestWrite+0x100>)
 800ac82:	68f8      	ldr	r0, [r7, #12]
 800ac84:	f000 f933 	bl	800aeee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d001      	beq.n	800ac92 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e000      	b.n	800ac94 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ac92:	2300      	movs	r3, #0
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3718      	adds	r7, #24
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	00010008 	.word	0x00010008
 800aca0:	00010002 	.word	0x00010002

0800aca4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b088      	sub	sp, #32
 800aca8:	af02      	add	r7, sp, #8
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	607a      	str	r2, [r7, #4]
 800acae:	603b      	str	r3, [r7, #0]
 800acb0:	460b      	mov	r3, r1
 800acb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800acc8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	2b08      	cmp	r3, #8
 800acce:	d006      	beq.n	800acde <I2C_MasterRequestRead+0x3a>
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d003      	beq.n	800acde <I2C_MasterRequestRead+0x3a>
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800acdc:	d108      	bne.n	800acf0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800acec:	601a      	str	r2, [r3, #0]
 800acee:	e00b      	b.n	800ad08 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acf4:	2b11      	cmp	r3, #17
 800acf6:	d107      	bne.n	800ad08 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	9300      	str	r3, [sp, #0]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f000 f893 	bl	800ae40 <I2C_WaitOnFlagUntilTimeout>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d00d      	beq.n	800ad3c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad2e:	d103      	bne.n	800ad38 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ad38:	2303      	movs	r3, #3
 800ad3a:	e079      	b.n	800ae30 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	691b      	ldr	r3, [r3, #16]
 800ad40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad44:	d108      	bne.n	800ad58 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ad46:	897b      	ldrh	r3, [r7, #10]
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	f043 0301 	orr.w	r3, r3, #1
 800ad4e:	b2da      	uxtb	r2, r3
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	611a      	str	r2, [r3, #16]
 800ad56:	e05f      	b.n	800ae18 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ad58:	897b      	ldrh	r3, [r7, #10]
 800ad5a:	11db      	asrs	r3, r3, #7
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	f003 0306 	and.w	r3, r3, #6
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	f063 030f 	orn	r3, r3, #15
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	4930      	ldr	r1, [pc, #192]	; (800ae38 <I2C_MasterRequestRead+0x194>)
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f000 f8b9 	bl	800aeee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d001      	beq.n	800ad86 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	e054      	b.n	800ae30 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ad86:	897b      	ldrh	r3, [r7, #10]
 800ad88:	b2da      	uxtb	r2, r3
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	4929      	ldr	r1, [pc, #164]	; (800ae3c <I2C_MasterRequestRead+0x198>)
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f000 f8a9 	bl	800aeee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d001      	beq.n	800ada6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	e044      	b.n	800ae30 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ada6:	2300      	movs	r3, #0
 800ada8:	613b      	str	r3, [r7, #16]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	695b      	ldr	r3, [r3, #20]
 800adb0:	613b      	str	r3, [r7, #16]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	699b      	ldr	r3, [r3, #24]
 800adb8:	613b      	str	r3, [r7, #16]
 800adba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800adca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	9300      	str	r3, [sp, #0]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f000 f831 	bl	800ae40 <I2C_WaitOnFlagUntilTimeout>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d00d      	beq.n	800ae00 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adf2:	d103      	bne.n	800adfc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800adfa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800adfc:	2303      	movs	r3, #3
 800adfe:	e017      	b.n	800ae30 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800ae00:	897b      	ldrh	r3, [r7, #10]
 800ae02:	11db      	asrs	r3, r3, #7
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	f003 0306 	and.w	r3, r3, #6
 800ae0a:	b2db      	uxtb	r3, r3
 800ae0c:	f063 030e 	orn	r3, r3, #14
 800ae10:	b2da      	uxtb	r2, r3
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	4907      	ldr	r1, [pc, #28]	; (800ae3c <I2C_MasterRequestRead+0x198>)
 800ae1e:	68f8      	ldr	r0, [r7, #12]
 800ae20:	f000 f865 	bl	800aeee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d001      	beq.n	800ae2e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e000      	b.n	800ae30 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800ae2e:	2300      	movs	r3, #0
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3718      	adds	r7, #24
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	00010008 	.word	0x00010008
 800ae3c:	00010002 	.word	0x00010002

0800ae40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	603b      	str	r3, [r7, #0]
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae50:	e025      	b.n	800ae9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae58:	d021      	beq.n	800ae9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae5a:	f7fd ff89 	bl	8008d70 <HAL_GetTick>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	69bb      	ldr	r3, [r7, #24]
 800ae62:	1ad3      	subs	r3, r2, r3
 800ae64:	683a      	ldr	r2, [r7, #0]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d302      	bcc.n	800ae70 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d116      	bne.n	800ae9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2200      	movs	r2, #0
 800ae74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2220      	movs	r2, #32
 800ae7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae8a:	f043 0220 	orr.w	r2, r3, #32
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e023      	b.n	800aee6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	0c1b      	lsrs	r3, r3, #16
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d10d      	bne.n	800aec4 <I2C_WaitOnFlagUntilTimeout+0x84>
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	695b      	ldr	r3, [r3, #20]
 800aeae:	43da      	mvns	r2, r3
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	4013      	ands	r3, r2
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	bf0c      	ite	eq
 800aeba:	2301      	moveq	r3, #1
 800aebc:	2300      	movne	r3, #0
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	461a      	mov	r2, r3
 800aec2:	e00c      	b.n	800aede <I2C_WaitOnFlagUntilTimeout+0x9e>
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	699b      	ldr	r3, [r3, #24]
 800aeca:	43da      	mvns	r2, r3
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	4013      	ands	r3, r2
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	bf0c      	ite	eq
 800aed6:	2301      	moveq	r3, #1
 800aed8:	2300      	movne	r3, #0
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	461a      	mov	r2, r3
 800aede:	79fb      	ldrb	r3, [r7, #7]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d0b6      	beq.n	800ae52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aee4:	2300      	movs	r3, #0
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3710      	adds	r7, #16
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b084      	sub	sp, #16
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	60f8      	str	r0, [r7, #12]
 800aef6:	60b9      	str	r1, [r7, #8]
 800aef8:	607a      	str	r2, [r7, #4]
 800aefa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aefc:	e051      	b.n	800afa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	695b      	ldr	r3, [r3, #20]
 800af04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af0c:	d123      	bne.n	800af56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800af26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2200      	movs	r2, #0
 800af2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2220      	movs	r2, #32
 800af32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2200      	movs	r2, #0
 800af3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af42:	f043 0204 	orr.w	r2, r3, #4
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2200      	movs	r2, #0
 800af4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800af52:	2301      	movs	r3, #1
 800af54:	e046      	b.n	800afe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af5c:	d021      	beq.n	800afa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af5e:	f7fd ff07 	bl	8008d70 <HAL_GetTick>
 800af62:	4602      	mov	r2, r0
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	1ad3      	subs	r3, r2, r3
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d302      	bcc.n	800af74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d116      	bne.n	800afa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2200      	movs	r2, #0
 800af78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2220      	movs	r2, #32
 800af7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2200      	movs	r2, #0
 800af86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8e:	f043 0220 	orr.w	r2, r3, #32
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2200      	movs	r2, #0
 800af9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800af9e:	2301      	movs	r3, #1
 800afa0:	e020      	b.n	800afe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	0c1b      	lsrs	r3, r3, #16
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d10c      	bne.n	800afc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	695b      	ldr	r3, [r3, #20]
 800afb2:	43da      	mvns	r2, r3
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	4013      	ands	r3, r2
 800afb8:	b29b      	uxth	r3, r3
 800afba:	2b00      	cmp	r3, #0
 800afbc:	bf14      	ite	ne
 800afbe:	2301      	movne	r3, #1
 800afc0:	2300      	moveq	r3, #0
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	e00b      	b.n	800afde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	699b      	ldr	r3, [r3, #24]
 800afcc:	43da      	mvns	r2, r3
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	4013      	ands	r3, r2
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	bf14      	ite	ne
 800afd8:	2301      	movne	r3, #1
 800afda:	2300      	moveq	r3, #0
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d18d      	bne.n	800aefe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800afe2:	2300      	movs	r3, #0
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3710      	adds	r7, #16
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aff8:	e02d      	b.n	800b056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	f000 f8ce 	bl	800b19c <I2C_IsAcknowledgeFailed>
 800b000:	4603      	mov	r3, r0
 800b002:	2b00      	cmp	r3, #0
 800b004:	d001      	beq.n	800b00a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b006:	2301      	movs	r3, #1
 800b008:	e02d      	b.n	800b066 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b010:	d021      	beq.n	800b056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b012:	f7fd fead 	bl	8008d70 <HAL_GetTick>
 800b016:	4602      	mov	r2, r0
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	1ad3      	subs	r3, r2, r3
 800b01c:	68ba      	ldr	r2, [r7, #8]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d302      	bcc.n	800b028 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d116      	bne.n	800b056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2200      	movs	r2, #0
 800b02c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2220      	movs	r2, #32
 800b032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2200      	movs	r2, #0
 800b03a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b042:	f043 0220 	orr.w	r2, r3, #32
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2200      	movs	r2, #0
 800b04e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b052:	2301      	movs	r3, #1
 800b054:	e007      	b.n	800b066 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	695b      	ldr	r3, [r3, #20]
 800b05c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b060:	2b80      	cmp	r3, #128	; 0x80
 800b062:	d1ca      	bne.n	800affa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b064:	2300      	movs	r3, #0
}
 800b066:	4618      	mov	r0, r3
 800b068:	3710      	adds	r7, #16
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b084      	sub	sp, #16
 800b072:	af00      	add	r7, sp, #0
 800b074:	60f8      	str	r0, [r7, #12]
 800b076:	60b9      	str	r1, [r7, #8]
 800b078:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b07a:	e02d      	b.n	800b0d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	f000 f88d 	bl	800b19c <I2C_IsAcknowledgeFailed>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d001      	beq.n	800b08c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	e02d      	b.n	800b0e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b092:	d021      	beq.n	800b0d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b094:	f7fd fe6c 	bl	8008d70 <HAL_GetTick>
 800b098:	4602      	mov	r2, r0
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	1ad3      	subs	r3, r2, r3
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d302      	bcc.n	800b0aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d116      	bne.n	800b0d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2220      	movs	r2, #32
 800b0b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c4:	f043 0220 	orr.w	r2, r3, #32
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	e007      	b.n	800b0e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	695b      	ldr	r3, [r3, #20]
 800b0de:	f003 0304 	and.w	r3, r3, #4
 800b0e2:	2b04      	cmp	r3, #4
 800b0e4:	d1ca      	bne.n	800b07c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b0e6:	2300      	movs	r3, #0
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3710      	adds	r7, #16
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b0fc:	e042      	b.n	800b184 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	695b      	ldr	r3, [r3, #20]
 800b104:	f003 0310 	and.w	r3, r3, #16
 800b108:	2b10      	cmp	r3, #16
 800b10a:	d119      	bne.n	800b140 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f06f 0210 	mvn.w	r2, #16
 800b114:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2200      	movs	r2, #0
 800b11a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2220      	movs	r2, #32
 800b120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2200      	movs	r2, #0
 800b128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2200      	movs	r2, #0
 800b138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b13c:	2301      	movs	r3, #1
 800b13e:	e029      	b.n	800b194 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b140:	f7fd fe16 	bl	8008d70 <HAL_GetTick>
 800b144:	4602      	mov	r2, r0
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	68ba      	ldr	r2, [r7, #8]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d302      	bcc.n	800b156 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d116      	bne.n	800b184 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2200      	movs	r2, #0
 800b15a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2220      	movs	r2, #32
 800b160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2200      	movs	r2, #0
 800b168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b170:	f043 0220 	orr.w	r2, r3, #32
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b180:	2301      	movs	r3, #1
 800b182:	e007      	b.n	800b194 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	695b      	ldr	r3, [r3, #20]
 800b18a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b18e:	2b40      	cmp	r3, #64	; 0x40
 800b190:	d1b5      	bne.n	800b0fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b192:	2300      	movs	r3, #0
}
 800b194:	4618      	mov	r0, r3
 800b196:	3710      	adds	r7, #16
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	695b      	ldr	r3, [r3, #20]
 800b1aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1b2:	d11b      	bne.n	800b1ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b1bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2220      	movs	r2, #32
 800b1c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d8:	f043 0204 	orr.w	r2, r3, #4
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e000      	b.n	800b1ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b1ec:	2300      	movs	r3, #0
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr
	...

0800b1fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800b202:	2300      	movs	r3, #0
 800b204:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b206:	2300      	movs	r3, #0
 800b208:	603b      	str	r3, [r7, #0]
 800b20a:	4b20      	ldr	r3, [pc, #128]	; (800b28c <HAL_PWREx_EnableOverDrive+0x90>)
 800b20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b20e:	4a1f      	ldr	r2, [pc, #124]	; (800b28c <HAL_PWREx_EnableOverDrive+0x90>)
 800b210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b214:	6413      	str	r3, [r2, #64]	; 0x40
 800b216:	4b1d      	ldr	r3, [pc, #116]	; (800b28c <HAL_PWREx_EnableOverDrive+0x90>)
 800b218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b21a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b21e:	603b      	str	r3, [r7, #0]
 800b220:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b222:	4b1b      	ldr	r3, [pc, #108]	; (800b290 <HAL_PWREx_EnableOverDrive+0x94>)
 800b224:	2201      	movs	r2, #1
 800b226:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b228:	f7fd fda2 	bl	8008d70 <HAL_GetTick>
 800b22c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b22e:	e009      	b.n	800b244 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b230:	f7fd fd9e 	bl	8008d70 <HAL_GetTick>
 800b234:	4602      	mov	r2, r0
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	1ad3      	subs	r3, r2, r3
 800b23a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b23e:	d901      	bls.n	800b244 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800b240:	2303      	movs	r3, #3
 800b242:	e01f      	b.n	800b284 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b244:	4b13      	ldr	r3, [pc, #76]	; (800b294 <HAL_PWREx_EnableOverDrive+0x98>)
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b24c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b250:	d1ee      	bne.n	800b230 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b252:	4b11      	ldr	r3, [pc, #68]	; (800b298 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b254:	2201      	movs	r2, #1
 800b256:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b258:	f7fd fd8a 	bl	8008d70 <HAL_GetTick>
 800b25c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b25e:	e009      	b.n	800b274 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b260:	f7fd fd86 	bl	8008d70 <HAL_GetTick>
 800b264:	4602      	mov	r2, r0
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	1ad3      	subs	r3, r2, r3
 800b26a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b26e:	d901      	bls.n	800b274 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800b270:	2303      	movs	r3, #3
 800b272:	e007      	b.n	800b284 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b274:	4b07      	ldr	r3, [pc, #28]	; (800b294 <HAL_PWREx_EnableOverDrive+0x98>)
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b27c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b280:	d1ee      	bne.n	800b260 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800b282:	2300      	movs	r3, #0
}
 800b284:	4618      	mov	r0, r3
 800b286:	3708      	adds	r7, #8
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}
 800b28c:	40023800 	.word	0x40023800
 800b290:	420e0040 	.word	0x420e0040
 800b294:	40007000 	.word	0x40007000
 800b298:	420e0044 	.word	0x420e0044

0800b29c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d101      	bne.n	800b2b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	e0cc      	b.n	800b44a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b2b0:	4b68      	ldr	r3, [pc, #416]	; (800b454 <HAL_RCC_ClockConfig+0x1b8>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f003 030f 	and.w	r3, r3, #15
 800b2b8:	683a      	ldr	r2, [r7, #0]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d90c      	bls.n	800b2d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2be:	4b65      	ldr	r3, [pc, #404]	; (800b454 <HAL_RCC_ClockConfig+0x1b8>)
 800b2c0:	683a      	ldr	r2, [r7, #0]
 800b2c2:	b2d2      	uxtb	r2, r2
 800b2c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2c6:	4b63      	ldr	r3, [pc, #396]	; (800b454 <HAL_RCC_ClockConfig+0x1b8>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f003 030f 	and.w	r3, r3, #15
 800b2ce:	683a      	ldr	r2, [r7, #0]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d001      	beq.n	800b2d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	e0b8      	b.n	800b44a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f003 0302 	and.w	r3, r3, #2
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d020      	beq.n	800b326 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f003 0304 	and.w	r3, r3, #4
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d005      	beq.n	800b2fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b2f0:	4b59      	ldr	r3, [pc, #356]	; (800b458 <HAL_RCC_ClockConfig+0x1bc>)
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	4a58      	ldr	r2, [pc, #352]	; (800b458 <HAL_RCC_ClockConfig+0x1bc>)
 800b2f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b2fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f003 0308 	and.w	r3, r3, #8
 800b304:	2b00      	cmp	r3, #0
 800b306:	d005      	beq.n	800b314 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b308:	4b53      	ldr	r3, [pc, #332]	; (800b458 <HAL_RCC_ClockConfig+0x1bc>)
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	4a52      	ldr	r2, [pc, #328]	; (800b458 <HAL_RCC_ClockConfig+0x1bc>)
 800b30e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b312:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b314:	4b50      	ldr	r3, [pc, #320]	; (800b458 <HAL_RCC_ClockConfig+0x1bc>)
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	494d      	ldr	r1, [pc, #308]	; (800b458 <HAL_RCC_ClockConfig+0x1bc>)
 800b322:	4313      	orrs	r3, r2
 800b324:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f003 0301 	and.w	r3, r3, #1
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d044      	beq.n	800b3bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	2b01      	cmp	r3, #1
 800b338:	d107      	bne.n	800b34a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b33a:	4b47      	ldr	r3, [pc, #284]	; (800b458 <HAL_RCC_ClockConfig+0x1bc>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b342:	2b00      	cmp	r3, #0
 800b344:	d119      	bne.n	800b37a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b346:	2301      	movs	r3, #1
 800b348:	e07f      	b.n	800b44a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	2b02      	cmp	r3, #2
 800b350:	d003      	beq.n	800b35a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b356:	2b03      	cmp	r3, #3
 800b358:	d107      	bne.n	800b36a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b35a:	4b3f      	ldr	r3, [pc, #252]	; (800b458 <HAL_RCC_ClockConfig+0x1bc>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b362:	2b00      	cmp	r3, #0
 800b364:	d109      	bne.n	800b37a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	e06f      	b.n	800b44a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b36a:	4b3b      	ldr	r3, [pc, #236]	; (800b458 <HAL_RCC_ClockConfig+0x1bc>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f003 0302 	and.w	r3, r3, #2
 800b372:	2b00      	cmp	r3, #0
 800b374:	d101      	bne.n	800b37a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	e067      	b.n	800b44a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b37a:	4b37      	ldr	r3, [pc, #220]	; (800b458 <HAL_RCC_ClockConfig+0x1bc>)
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	f023 0203 	bic.w	r2, r3, #3
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	4934      	ldr	r1, [pc, #208]	; (800b458 <HAL_RCC_ClockConfig+0x1bc>)
 800b388:	4313      	orrs	r3, r2
 800b38a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b38c:	f7fd fcf0 	bl	8008d70 <HAL_GetTick>
 800b390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b392:	e00a      	b.n	800b3aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b394:	f7fd fcec 	bl	8008d70 <HAL_GetTick>
 800b398:	4602      	mov	r2, r0
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	1ad3      	subs	r3, r2, r3
 800b39e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d901      	bls.n	800b3aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b3a6:	2303      	movs	r3, #3
 800b3a8:	e04f      	b.n	800b44a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b3aa:	4b2b      	ldr	r3, [pc, #172]	; (800b458 <HAL_RCC_ClockConfig+0x1bc>)
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	f003 020c 	and.w	r2, r3, #12
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d1eb      	bne.n	800b394 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b3bc:	4b25      	ldr	r3, [pc, #148]	; (800b454 <HAL_RCC_ClockConfig+0x1b8>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f003 030f 	and.w	r3, r3, #15
 800b3c4:	683a      	ldr	r2, [r7, #0]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d20c      	bcs.n	800b3e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3ca:	4b22      	ldr	r3, [pc, #136]	; (800b454 <HAL_RCC_ClockConfig+0x1b8>)
 800b3cc:	683a      	ldr	r2, [r7, #0]
 800b3ce:	b2d2      	uxtb	r2, r2
 800b3d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3d2:	4b20      	ldr	r3, [pc, #128]	; (800b454 <HAL_RCC_ClockConfig+0x1b8>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f003 030f 	and.w	r3, r3, #15
 800b3da:	683a      	ldr	r2, [r7, #0]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d001      	beq.n	800b3e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	e032      	b.n	800b44a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f003 0304 	and.w	r3, r3, #4
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d008      	beq.n	800b402 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b3f0:	4b19      	ldr	r3, [pc, #100]	; (800b458 <HAL_RCC_ClockConfig+0x1bc>)
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	68db      	ldr	r3, [r3, #12]
 800b3fc:	4916      	ldr	r1, [pc, #88]	; (800b458 <HAL_RCC_ClockConfig+0x1bc>)
 800b3fe:	4313      	orrs	r3, r2
 800b400:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f003 0308 	and.w	r3, r3, #8
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d009      	beq.n	800b422 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b40e:	4b12      	ldr	r3, [pc, #72]	; (800b458 <HAL_RCC_ClockConfig+0x1bc>)
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	691b      	ldr	r3, [r3, #16]
 800b41a:	00db      	lsls	r3, r3, #3
 800b41c:	490e      	ldr	r1, [pc, #56]	; (800b458 <HAL_RCC_ClockConfig+0x1bc>)
 800b41e:	4313      	orrs	r3, r2
 800b420:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b422:	f000 f821 	bl	800b468 <HAL_RCC_GetSysClockFreq>
 800b426:	4601      	mov	r1, r0
 800b428:	4b0b      	ldr	r3, [pc, #44]	; (800b458 <HAL_RCC_ClockConfig+0x1bc>)
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	091b      	lsrs	r3, r3, #4
 800b42e:	f003 030f 	and.w	r3, r3, #15
 800b432:	4a0a      	ldr	r2, [pc, #40]	; (800b45c <HAL_RCC_ClockConfig+0x1c0>)
 800b434:	5cd3      	ldrb	r3, [r2, r3]
 800b436:	fa21 f303 	lsr.w	r3, r1, r3
 800b43a:	4a09      	ldr	r2, [pc, #36]	; (800b460 <HAL_RCC_ClockConfig+0x1c4>)
 800b43c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b43e:	4b09      	ldr	r3, [pc, #36]	; (800b464 <HAL_RCC_ClockConfig+0x1c8>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	4618      	mov	r0, r3
 800b444:	f7fd fc50 	bl	8008ce8 <HAL_InitTick>

  return HAL_OK;
 800b448:	2300      	movs	r3, #0
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3710      	adds	r7, #16
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	40023c00 	.word	0x40023c00
 800b458:	40023800 	.word	0x40023800
 800b45c:	080195d4 	.word	0x080195d4
 800b460:	20000000 	.word	0x20000000
 800b464:	20000004 	.word	0x20000004

0800b468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b46e:	2300      	movs	r3, #0
 800b470:	607b      	str	r3, [r7, #4]
 800b472:	2300      	movs	r3, #0
 800b474:	60fb      	str	r3, [r7, #12]
 800b476:	2300      	movs	r3, #0
 800b478:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b47a:	2300      	movs	r3, #0
 800b47c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b47e:	4b63      	ldr	r3, [pc, #396]	; (800b60c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b480:	689b      	ldr	r3, [r3, #8]
 800b482:	f003 030c 	and.w	r3, r3, #12
 800b486:	2b04      	cmp	r3, #4
 800b488:	d007      	beq.n	800b49a <HAL_RCC_GetSysClockFreq+0x32>
 800b48a:	2b08      	cmp	r3, #8
 800b48c:	d008      	beq.n	800b4a0 <HAL_RCC_GetSysClockFreq+0x38>
 800b48e:	2b00      	cmp	r3, #0
 800b490:	f040 80b4 	bne.w	800b5fc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b494:	4b5e      	ldr	r3, [pc, #376]	; (800b610 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b496:	60bb      	str	r3, [r7, #8]
       break;
 800b498:	e0b3      	b.n	800b602 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b49a:	4b5d      	ldr	r3, [pc, #372]	; (800b610 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b49c:	60bb      	str	r3, [r7, #8]
      break;
 800b49e:	e0b0      	b.n	800b602 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b4a0:	4b5a      	ldr	r3, [pc, #360]	; (800b60c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b4aa:	4b58      	ldr	r3, [pc, #352]	; (800b60c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d04a      	beq.n	800b54c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b4b6:	4b55      	ldr	r3, [pc, #340]	; (800b60c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	099b      	lsrs	r3, r3, #6
 800b4bc:	f04f 0400 	mov.w	r4, #0
 800b4c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b4c4:	f04f 0200 	mov.w	r2, #0
 800b4c8:	ea03 0501 	and.w	r5, r3, r1
 800b4cc:	ea04 0602 	and.w	r6, r4, r2
 800b4d0:	4629      	mov	r1, r5
 800b4d2:	4632      	mov	r2, r6
 800b4d4:	f04f 0300 	mov.w	r3, #0
 800b4d8:	f04f 0400 	mov.w	r4, #0
 800b4dc:	0154      	lsls	r4, r2, #5
 800b4de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b4e2:	014b      	lsls	r3, r1, #5
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	4622      	mov	r2, r4
 800b4e8:	1b49      	subs	r1, r1, r5
 800b4ea:	eb62 0206 	sbc.w	r2, r2, r6
 800b4ee:	f04f 0300 	mov.w	r3, #0
 800b4f2:	f04f 0400 	mov.w	r4, #0
 800b4f6:	0194      	lsls	r4, r2, #6
 800b4f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b4fc:	018b      	lsls	r3, r1, #6
 800b4fe:	1a5b      	subs	r3, r3, r1
 800b500:	eb64 0402 	sbc.w	r4, r4, r2
 800b504:	f04f 0100 	mov.w	r1, #0
 800b508:	f04f 0200 	mov.w	r2, #0
 800b50c:	00e2      	lsls	r2, r4, #3
 800b50e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b512:	00d9      	lsls	r1, r3, #3
 800b514:	460b      	mov	r3, r1
 800b516:	4614      	mov	r4, r2
 800b518:	195b      	adds	r3, r3, r5
 800b51a:	eb44 0406 	adc.w	r4, r4, r6
 800b51e:	f04f 0100 	mov.w	r1, #0
 800b522:	f04f 0200 	mov.w	r2, #0
 800b526:	02a2      	lsls	r2, r4, #10
 800b528:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b52c:	0299      	lsls	r1, r3, #10
 800b52e:	460b      	mov	r3, r1
 800b530:	4614      	mov	r4, r2
 800b532:	4618      	mov	r0, r3
 800b534:	4621      	mov	r1, r4
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f04f 0400 	mov.w	r4, #0
 800b53c:	461a      	mov	r2, r3
 800b53e:	4623      	mov	r3, r4
 800b540:	f7f5 fbba 	bl	8000cb8 <__aeabi_uldivmod>
 800b544:	4603      	mov	r3, r0
 800b546:	460c      	mov	r4, r1
 800b548:	60fb      	str	r3, [r7, #12]
 800b54a:	e049      	b.n	800b5e0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b54c:	4b2f      	ldr	r3, [pc, #188]	; (800b60c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	099b      	lsrs	r3, r3, #6
 800b552:	f04f 0400 	mov.w	r4, #0
 800b556:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b55a:	f04f 0200 	mov.w	r2, #0
 800b55e:	ea03 0501 	and.w	r5, r3, r1
 800b562:	ea04 0602 	and.w	r6, r4, r2
 800b566:	4629      	mov	r1, r5
 800b568:	4632      	mov	r2, r6
 800b56a:	f04f 0300 	mov.w	r3, #0
 800b56e:	f04f 0400 	mov.w	r4, #0
 800b572:	0154      	lsls	r4, r2, #5
 800b574:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b578:	014b      	lsls	r3, r1, #5
 800b57a:	4619      	mov	r1, r3
 800b57c:	4622      	mov	r2, r4
 800b57e:	1b49      	subs	r1, r1, r5
 800b580:	eb62 0206 	sbc.w	r2, r2, r6
 800b584:	f04f 0300 	mov.w	r3, #0
 800b588:	f04f 0400 	mov.w	r4, #0
 800b58c:	0194      	lsls	r4, r2, #6
 800b58e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b592:	018b      	lsls	r3, r1, #6
 800b594:	1a5b      	subs	r3, r3, r1
 800b596:	eb64 0402 	sbc.w	r4, r4, r2
 800b59a:	f04f 0100 	mov.w	r1, #0
 800b59e:	f04f 0200 	mov.w	r2, #0
 800b5a2:	00e2      	lsls	r2, r4, #3
 800b5a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b5a8:	00d9      	lsls	r1, r3, #3
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	4614      	mov	r4, r2
 800b5ae:	195b      	adds	r3, r3, r5
 800b5b0:	eb44 0406 	adc.w	r4, r4, r6
 800b5b4:	f04f 0100 	mov.w	r1, #0
 800b5b8:	f04f 0200 	mov.w	r2, #0
 800b5bc:	02a2      	lsls	r2, r4, #10
 800b5be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b5c2:	0299      	lsls	r1, r3, #10
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	4614      	mov	r4, r2
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f04f 0400 	mov.w	r4, #0
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	4623      	mov	r3, r4
 800b5d6:	f7f5 fb6f 	bl	8000cb8 <__aeabi_uldivmod>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	460c      	mov	r4, r1
 800b5de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b5e0:	4b0a      	ldr	r3, [pc, #40]	; (800b60c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	0c1b      	lsrs	r3, r3, #16
 800b5e6:	f003 0303 	and.w	r3, r3, #3
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	005b      	lsls	r3, r3, #1
 800b5ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b5f0:	68fa      	ldr	r2, [r7, #12]
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5f8:	60bb      	str	r3, [r7, #8]
      break;
 800b5fa:	e002      	b.n	800b602 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b5fc:	4b04      	ldr	r3, [pc, #16]	; (800b610 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b5fe:	60bb      	str	r3, [r7, #8]
      break;
 800b600:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b602:	68bb      	ldr	r3, [r7, #8]
}
 800b604:	4618      	mov	r0, r3
 800b606:	3714      	adds	r7, #20
 800b608:	46bd      	mov	sp, r7
 800b60a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b60c:	40023800 	.word	0x40023800
 800b610:	00f42400 	.word	0x00f42400

0800b614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b614:	b480      	push	{r7}
 800b616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b618:	4b03      	ldr	r3, [pc, #12]	; (800b628 <HAL_RCC_GetHCLKFreq+0x14>)
 800b61a:	681b      	ldr	r3, [r3, #0]
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr
 800b626:	bf00      	nop
 800b628:	20000000 	.word	0x20000000

0800b62c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b630:	f7ff fff0 	bl	800b614 <HAL_RCC_GetHCLKFreq>
 800b634:	4601      	mov	r1, r0
 800b636:	4b05      	ldr	r3, [pc, #20]	; (800b64c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b638:	689b      	ldr	r3, [r3, #8]
 800b63a:	0a9b      	lsrs	r3, r3, #10
 800b63c:	f003 0307 	and.w	r3, r3, #7
 800b640:	4a03      	ldr	r2, [pc, #12]	; (800b650 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b642:	5cd3      	ldrb	r3, [r2, r3]
 800b644:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b648:	4618      	mov	r0, r3
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	40023800 	.word	0x40023800
 800b650:	080195e4 	.word	0x080195e4

0800b654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b658:	f7ff ffdc 	bl	800b614 <HAL_RCC_GetHCLKFreq>
 800b65c:	4601      	mov	r1, r0
 800b65e:	4b05      	ldr	r3, [pc, #20]	; (800b674 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	0b5b      	lsrs	r3, r3, #13
 800b664:	f003 0307 	and.w	r3, r3, #7
 800b668:	4a03      	ldr	r2, [pc, #12]	; (800b678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b66a:	5cd3      	ldrb	r3, [r2, r3]
 800b66c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b670:	4618      	mov	r0, r3
 800b672:	bd80      	pop	{r7, pc}
 800b674:	40023800 	.word	0x40023800
 800b678:	080195e4 	.word	0x080195e4

0800b67c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b088      	sub	sp, #32
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b684:	2300      	movs	r3, #0
 800b686:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800b688:	2300      	movs	r3, #0
 800b68a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800b68c:	2300      	movs	r3, #0
 800b68e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800b690:	2300      	movs	r3, #0
 800b692:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800b694:	2300      	movs	r3, #0
 800b696:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d00a      	beq.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b6a4:	4b66      	ldr	r3, [pc, #408]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b6a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6aa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6b2:	4963      	ldr	r1, [pc, #396]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d00a      	beq.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800b6c6:	4b5e      	ldr	r3, [pc, #376]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b6c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6cc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d4:	495a      	ldr	r1, [pc, #360]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f003 0301 	and.w	r3, r3, #1
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d10b      	bne.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d105      	bne.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d075      	beq.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b700:	4b50      	ldr	r3, [pc, #320]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800b702:	2200      	movs	r2, #0
 800b704:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b706:	f7fd fb33 	bl	8008d70 <HAL_GetTick>
 800b70a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b70c:	e008      	b.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b70e:	f7fd fb2f 	bl	8008d70 <HAL_GetTick>
 800b712:	4602      	mov	r2, r0
 800b714:	69fb      	ldr	r3, [r7, #28]
 800b716:	1ad3      	subs	r3, r2, r3
 800b718:	2b02      	cmp	r3, #2
 800b71a:	d901      	bls.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b71c:	2303      	movs	r3, #3
 800b71e:	e1dc      	b.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b720:	4b47      	ldr	r3, [pc, #284]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d1f0      	bne.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f003 0301 	and.w	r3, r3, #1
 800b734:	2b00      	cmp	r3, #0
 800b736:	d009      	beq.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	019a      	lsls	r2, r3, #6
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	071b      	lsls	r3, r3, #28
 800b744:	493e      	ldr	r1, [pc, #248]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b746:	4313      	orrs	r3, r2
 800b748:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f003 0302 	and.w	r3, r3, #2
 800b754:	2b00      	cmp	r3, #0
 800b756:	d01f      	beq.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b758:	4b39      	ldr	r3, [pc, #228]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b75a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b75e:	0f1b      	lsrs	r3, r3, #28
 800b760:	f003 0307 	and.w	r3, r3, #7
 800b764:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	019a      	lsls	r2, r3, #6
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	68db      	ldr	r3, [r3, #12]
 800b770:	061b      	lsls	r3, r3, #24
 800b772:	431a      	orrs	r2, r3
 800b774:	69bb      	ldr	r3, [r7, #24]
 800b776:	071b      	lsls	r3, r3, #28
 800b778:	4931      	ldr	r1, [pc, #196]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b77a:	4313      	orrs	r3, r2
 800b77c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b780:	4b2f      	ldr	r3, [pc, #188]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b786:	f023 021f 	bic.w	r2, r3, #31
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a1b      	ldr	r3, [r3, #32]
 800b78e:	3b01      	subs	r3, #1
 800b790:	492b      	ldr	r1, [pc, #172]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b792:	4313      	orrs	r3, r2
 800b794:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d00d      	beq.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	019a      	lsls	r2, r3, #6
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	68db      	ldr	r3, [r3, #12]
 800b7ae:	061b      	lsls	r3, r3, #24
 800b7b0:	431a      	orrs	r2, r3
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	071b      	lsls	r3, r3, #28
 800b7b8:	4921      	ldr	r1, [pc, #132]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b7c0:	4b20      	ldr	r3, [pc, #128]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b7c6:	f7fd fad3 	bl	8008d70 <HAL_GetTick>
 800b7ca:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b7cc:	e008      	b.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b7ce:	f7fd facf 	bl	8008d70 <HAL_GetTick>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	69fb      	ldr	r3, [r7, #28]
 800b7d6:	1ad3      	subs	r3, r2, r3
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d901      	bls.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	e17c      	b.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b7e0:	4b17      	ldr	r3, [pc, #92]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d0f0      	beq.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f003 0304 	and.w	r3, r3, #4
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d112      	bne.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b800:	2b00      	cmp	r3, #0
 800b802:	d10c      	bne.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f000 80ce 	beq.w	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800b816:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b81a:	f040 80c8 	bne.w	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b81e:	4b0a      	ldr	r3, [pc, #40]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b820:	2200      	movs	r2, #0
 800b822:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b824:	f7fd faa4 	bl	8008d70 <HAL_GetTick>
 800b828:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b82a:	e00f      	b.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b82c:	f7fd faa0 	bl	8008d70 <HAL_GetTick>
 800b830:	4602      	mov	r2, r0
 800b832:	69fb      	ldr	r3, [r7, #28]
 800b834:	1ad3      	subs	r3, r2, r3
 800b836:	2b02      	cmp	r3, #2
 800b838:	d908      	bls.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b83a:	2303      	movs	r3, #3
 800b83c:	e14d      	b.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800b83e:	bf00      	nop
 800b840:	40023800 	.word	0x40023800
 800b844:	42470068 	.word	0x42470068
 800b848:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b84c:	4ba5      	ldr	r3, [pc, #660]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b858:	d0e8      	beq.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f003 0304 	and.w	r3, r3, #4
 800b862:	2b00      	cmp	r3, #0
 800b864:	d02e      	beq.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800b866:	4b9f      	ldr	r3, [pc, #636]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b86c:	0c1b      	lsrs	r3, r3, #16
 800b86e:	f003 0303 	and.w	r3, r3, #3
 800b872:	3301      	adds	r3, #1
 800b874:	005b      	lsls	r3, r3, #1
 800b876:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b878:	4b9a      	ldr	r3, [pc, #616]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b87a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b87e:	0f1b      	lsrs	r3, r3, #28
 800b880:	f003 0307 	and.w	r3, r3, #7
 800b884:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	691b      	ldr	r3, [r3, #16]
 800b88a:	019a      	lsls	r2, r3, #6
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	085b      	lsrs	r3, r3, #1
 800b890:	3b01      	subs	r3, #1
 800b892:	041b      	lsls	r3, r3, #16
 800b894:	431a      	orrs	r2, r3
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	699b      	ldr	r3, [r3, #24]
 800b89a:	061b      	lsls	r3, r3, #24
 800b89c:	431a      	orrs	r2, r3
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	071b      	lsls	r3, r3, #28
 800b8a2:	4990      	ldr	r1, [pc, #576]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b8aa:	4b8e      	ldr	r3, [pc, #568]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b8ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	021b      	lsls	r3, r3, #8
 800b8bc:	4989      	ldr	r1, [pc, #548]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f003 0308 	and.w	r3, r3, #8
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d02c      	beq.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800b8d0:	4b84      	ldr	r3, [pc, #528]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b8d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8d6:	0c1b      	lsrs	r3, r3, #16
 800b8d8:	f003 0303 	and.w	r3, r3, #3
 800b8dc:	3301      	adds	r3, #1
 800b8de:	005b      	lsls	r3, r3, #1
 800b8e0:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b8e2:	4b80      	ldr	r3, [pc, #512]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b8e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8e8:	0e1b      	lsrs	r3, r3, #24
 800b8ea:	f003 030f 	and.w	r3, r3, #15
 800b8ee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	691b      	ldr	r3, [r3, #16]
 800b8f4:	019a      	lsls	r2, r3, #6
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	085b      	lsrs	r3, r3, #1
 800b8fa:	3b01      	subs	r3, #1
 800b8fc:	041b      	lsls	r3, r3, #16
 800b8fe:	431a      	orrs	r2, r3
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	061b      	lsls	r3, r3, #24
 800b904:	431a      	orrs	r2, r3
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	69db      	ldr	r3, [r3, #28]
 800b90a:	071b      	lsls	r3, r3, #28
 800b90c:	4975      	ldr	r1, [pc, #468]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b90e:	4313      	orrs	r3, r2
 800b910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b914:	4b73      	ldr	r3, [pc, #460]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b916:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b91a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b922:	4970      	ldr	r1, [pc, #448]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b924:	4313      	orrs	r3, r2
 800b926:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b932:	2b00      	cmp	r3, #0
 800b934:	d024      	beq.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800b93a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b93e:	d11f      	bne.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b940:	4b68      	ldr	r3, [pc, #416]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b946:	0e1b      	lsrs	r3, r3, #24
 800b948:	f003 030f 	and.w	r3, r3, #15
 800b94c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b94e:	4b65      	ldr	r3, [pc, #404]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b954:	0f1b      	lsrs	r3, r3, #28
 800b956:	f003 0307 	and.w	r3, r3, #7
 800b95a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	691b      	ldr	r3, [r3, #16]
 800b960:	019a      	lsls	r2, r3, #6
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	695b      	ldr	r3, [r3, #20]
 800b966:	085b      	lsrs	r3, r3, #1
 800b968:	3b01      	subs	r3, #1
 800b96a:	041b      	lsls	r3, r3, #16
 800b96c:	431a      	orrs	r2, r3
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	061b      	lsls	r3, r3, #24
 800b972:	431a      	orrs	r2, r3
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	071b      	lsls	r3, r3, #28
 800b978:	495a      	ldr	r1, [pc, #360]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b97a:	4313      	orrs	r3, r2
 800b97c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b980:	4b59      	ldr	r3, [pc, #356]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800b982:	2201      	movs	r2, #1
 800b984:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b986:	f7fd f9f3 	bl	8008d70 <HAL_GetTick>
 800b98a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b98c:	e008      	b.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b98e:	f7fd f9ef 	bl	8008d70 <HAL_GetTick>
 800b992:	4602      	mov	r2, r0
 800b994:	69fb      	ldr	r3, [r7, #28]
 800b996:	1ad3      	subs	r3, r2, r3
 800b998:	2b02      	cmp	r3, #2
 800b99a:	d901      	bls.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b99c:	2303      	movs	r3, #3
 800b99e:	e09c      	b.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b9a0:	4b50      	ldr	r3, [pc, #320]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9ac:	d1ef      	bne.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f003 0320 	and.w	r3, r3, #32
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	f000 8083 	beq.w	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b9bc:	2300      	movs	r3, #0
 800b9be:	60bb      	str	r3, [r7, #8]
 800b9c0:	4b48      	ldr	r3, [pc, #288]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b9c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9c4:	4a47      	ldr	r2, [pc, #284]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b9c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9ca:	6413      	str	r3, [r2, #64]	; 0x40
 800b9cc:	4b45      	ldr	r3, [pc, #276]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b9ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9d4:	60bb      	str	r3, [r7, #8]
 800b9d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b9d8:	4b44      	ldr	r3, [pc, #272]	; (800baec <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a43      	ldr	r2, [pc, #268]	; (800baec <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800b9de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9e2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b9e4:	f7fd f9c4 	bl	8008d70 <HAL_GetTick>
 800b9e8:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b9ea:	e008      	b.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b9ec:	f7fd f9c0 	bl	8008d70 <HAL_GetTick>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	69fb      	ldr	r3, [r7, #28]
 800b9f4:	1ad3      	subs	r3, r2, r3
 800b9f6:	2b02      	cmp	r3, #2
 800b9f8:	d901      	bls.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800b9fa:	2303      	movs	r3, #3
 800b9fc:	e06d      	b.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b9fe:	4b3b      	ldr	r3, [pc, #236]	; (800baec <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d0f0      	beq.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ba0a:	4b36      	ldr	r3, [pc, #216]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba12:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ba14:	69bb      	ldr	r3, [r7, #24]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d02f      	beq.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba22:	69ba      	ldr	r2, [r7, #24]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d028      	beq.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ba28:	4b2e      	ldr	r3, [pc, #184]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba30:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ba32:	4b2f      	ldr	r3, [pc, #188]	; (800baf0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ba34:	2201      	movs	r2, #1
 800ba36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ba38:	4b2d      	ldr	r3, [pc, #180]	; (800baf0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800ba3e:	4a29      	ldr	r2, [pc, #164]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba40:	69bb      	ldr	r3, [r7, #24]
 800ba42:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ba44:	4b27      	ldr	r3, [pc, #156]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba48:	f003 0301 	and.w	r3, r3, #1
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d114      	bne.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800ba50:	f7fd f98e 	bl	8008d70 <HAL_GetTick>
 800ba54:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba56:	e00a      	b.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ba58:	f7fd f98a 	bl	8008d70 <HAL_GetTick>
 800ba5c:	4602      	mov	r2, r0
 800ba5e:	69fb      	ldr	r3, [r7, #28]
 800ba60:	1ad3      	subs	r3, r2, r3
 800ba62:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d901      	bls.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800ba6a:	2303      	movs	r3, #3
 800ba6c:	e035      	b.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba6e:	4b1d      	ldr	r3, [pc, #116]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba72:	f003 0302 	and.w	r3, r3, #2
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d0ee      	beq.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba86:	d10d      	bne.n	800baa4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800ba88:	4b16      	ldr	r3, [pc, #88]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba94:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ba98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba9c:	4911      	ldr	r1, [pc, #68]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	608b      	str	r3, [r1, #8]
 800baa2:	e005      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800baa4:	4b0f      	ldr	r3, [pc, #60]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	4a0e      	ldr	r2, [pc, #56]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800baaa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800baae:	6093      	str	r3, [r2, #8]
 800bab0:	4b0c      	ldr	r3, [pc, #48]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bab2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800babc:	4909      	ldr	r1, [pc, #36]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800babe:	4313      	orrs	r3, r2
 800bac0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f003 0310 	and.w	r3, r3, #16
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d004      	beq.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800bad4:	4b07      	ldr	r3, [pc, #28]	; (800baf4 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800bad6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800bad8:	2300      	movs	r3, #0
}
 800bada:	4618      	mov	r0, r3
 800badc:	3720      	adds	r7, #32
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	40023800 	.word	0x40023800
 800bae8:	42470070 	.word	0x42470070
 800baec:	40007000 	.word	0x40007000
 800baf0:	42470e40 	.word	0x42470e40
 800baf4:	424711e0 	.word	0x424711e0

0800baf8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b086      	sub	sp, #24
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bb00:	2300      	movs	r3, #0
 800bb02:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f003 0301 	and.w	r3, r3, #1
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d075      	beq.n	800bbfc <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800bb10:	4ba2      	ldr	r3, [pc, #648]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	f003 030c 	and.w	r3, r3, #12
 800bb18:	2b04      	cmp	r3, #4
 800bb1a:	d00c      	beq.n	800bb36 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bb1c:	4b9f      	ldr	r3, [pc, #636]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800bb24:	2b08      	cmp	r3, #8
 800bb26:	d112      	bne.n	800bb4e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bb28:	4b9c      	ldr	r3, [pc, #624]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb34:	d10b      	bne.n	800bb4e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bb36:	4b99      	ldr	r3, [pc, #612]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d05b      	beq.n	800bbfa <HAL_RCC_OscConfig+0x102>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d157      	bne.n	800bbfa <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e20b      	b.n	800bf66 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb56:	d106      	bne.n	800bb66 <HAL_RCC_OscConfig+0x6e>
 800bb58:	4b90      	ldr	r3, [pc, #576]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4a8f      	ldr	r2, [pc, #572]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bb5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb62:	6013      	str	r3, [r2, #0]
 800bb64:	e01d      	b.n	800bba2 <HAL_RCC_OscConfig+0xaa>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb6e:	d10c      	bne.n	800bb8a <HAL_RCC_OscConfig+0x92>
 800bb70:	4b8a      	ldr	r3, [pc, #552]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4a89      	ldr	r2, [pc, #548]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bb76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bb7a:	6013      	str	r3, [r2, #0]
 800bb7c:	4b87      	ldr	r3, [pc, #540]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a86      	ldr	r2, [pc, #536]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bb82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb86:	6013      	str	r3, [r2, #0]
 800bb88:	e00b      	b.n	800bba2 <HAL_RCC_OscConfig+0xaa>
 800bb8a:	4b84      	ldr	r3, [pc, #528]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4a83      	ldr	r2, [pc, #524]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bb90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb94:	6013      	str	r3, [r2, #0]
 800bb96:	4b81      	ldr	r3, [pc, #516]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4a80      	ldr	r2, [pc, #512]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bb9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bba0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d013      	beq.n	800bbd2 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbaa:	f7fd f8e1 	bl	8008d70 <HAL_GetTick>
 800bbae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bbb0:	e008      	b.n	800bbc4 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bbb2:	f7fd f8dd 	bl	8008d70 <HAL_GetTick>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	1ad3      	subs	r3, r2, r3
 800bbbc:	2b64      	cmp	r3, #100	; 0x64
 800bbbe:	d901      	bls.n	800bbc4 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800bbc0:	2303      	movs	r3, #3
 800bbc2:	e1d0      	b.n	800bf66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bbc4:	4b75      	ldr	r3, [pc, #468]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d0f0      	beq.n	800bbb2 <HAL_RCC_OscConfig+0xba>
 800bbd0:	e014      	b.n	800bbfc <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbd2:	f7fd f8cd 	bl	8008d70 <HAL_GetTick>
 800bbd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bbd8:	e008      	b.n	800bbec <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bbda:	f7fd f8c9 	bl	8008d70 <HAL_GetTick>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	2b64      	cmp	r3, #100	; 0x64
 800bbe6:	d901      	bls.n	800bbec <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800bbe8:	2303      	movs	r3, #3
 800bbea:	e1bc      	b.n	800bf66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bbec:	4b6b      	ldr	r3, [pc, #428]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d1f0      	bne.n	800bbda <HAL_RCC_OscConfig+0xe2>
 800bbf8:	e000      	b.n	800bbfc <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bbfa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f003 0302 	and.w	r3, r3, #2
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d063      	beq.n	800bcd0 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800bc08:	4b64      	ldr	r3, [pc, #400]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	f003 030c 	and.w	r3, r3, #12
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d00b      	beq.n	800bc2c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bc14:	4b61      	ldr	r3, [pc, #388]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bc16:	689b      	ldr	r3, [r3, #8]
 800bc18:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800bc1c:	2b08      	cmp	r3, #8
 800bc1e:	d11c      	bne.n	800bc5a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bc20:	4b5e      	ldr	r3, [pc, #376]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d116      	bne.n	800bc5a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bc2c:	4b5b      	ldr	r3, [pc, #364]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f003 0302 	and.w	r3, r3, #2
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d005      	beq.n	800bc44 <HAL_RCC_OscConfig+0x14c>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	68db      	ldr	r3, [r3, #12]
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d001      	beq.n	800bc44 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800bc40:	2301      	movs	r3, #1
 800bc42:	e190      	b.n	800bf66 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc44:	4b55      	ldr	r3, [pc, #340]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	691b      	ldr	r3, [r3, #16]
 800bc50:	00db      	lsls	r3, r3, #3
 800bc52:	4952      	ldr	r1, [pc, #328]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bc54:	4313      	orrs	r3, r2
 800bc56:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bc58:	e03a      	b.n	800bcd0 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	68db      	ldr	r3, [r3, #12]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d020      	beq.n	800bca4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bc62:	4b4f      	ldr	r3, [pc, #316]	; (800bda0 <HAL_RCC_OscConfig+0x2a8>)
 800bc64:	2201      	movs	r2, #1
 800bc66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc68:	f7fd f882 	bl	8008d70 <HAL_GetTick>
 800bc6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc6e:	e008      	b.n	800bc82 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bc70:	f7fd f87e 	bl	8008d70 <HAL_GetTick>
 800bc74:	4602      	mov	r2, r0
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	1ad3      	subs	r3, r2, r3
 800bc7a:	2b02      	cmp	r3, #2
 800bc7c:	d901      	bls.n	800bc82 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800bc7e:	2303      	movs	r3, #3
 800bc80:	e171      	b.n	800bf66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc82:	4b46      	ldr	r3, [pc, #280]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f003 0302 	and.w	r3, r3, #2
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d0f0      	beq.n	800bc70 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc8e:	4b43      	ldr	r3, [pc, #268]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	691b      	ldr	r3, [r3, #16]
 800bc9a:	00db      	lsls	r3, r3, #3
 800bc9c:	493f      	ldr	r1, [pc, #252]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	600b      	str	r3, [r1, #0]
 800bca2:	e015      	b.n	800bcd0 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bca4:	4b3e      	ldr	r3, [pc, #248]	; (800bda0 <HAL_RCC_OscConfig+0x2a8>)
 800bca6:	2200      	movs	r2, #0
 800bca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcaa:	f7fd f861 	bl	8008d70 <HAL_GetTick>
 800bcae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bcb0:	e008      	b.n	800bcc4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bcb2:	f7fd f85d 	bl	8008d70 <HAL_GetTick>
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	1ad3      	subs	r3, r2, r3
 800bcbc:	2b02      	cmp	r3, #2
 800bcbe:	d901      	bls.n	800bcc4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800bcc0:	2303      	movs	r3, #3
 800bcc2:	e150      	b.n	800bf66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bcc4:	4b35      	ldr	r3, [pc, #212]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f003 0302 	and.w	r3, r3, #2
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d1f0      	bne.n	800bcb2 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f003 0308 	and.w	r3, r3, #8
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d030      	beq.n	800bd3e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	695b      	ldr	r3, [r3, #20]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d016      	beq.n	800bd12 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bce4:	4b2f      	ldr	r3, [pc, #188]	; (800bda4 <HAL_RCC_OscConfig+0x2ac>)
 800bce6:	2201      	movs	r2, #1
 800bce8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bcea:	f7fd f841 	bl	8008d70 <HAL_GetTick>
 800bcee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bcf0:	e008      	b.n	800bd04 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bcf2:	f7fd f83d 	bl	8008d70 <HAL_GetTick>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	1ad3      	subs	r3, r2, r3
 800bcfc:	2b02      	cmp	r3, #2
 800bcfe:	d901      	bls.n	800bd04 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800bd00:	2303      	movs	r3, #3
 800bd02:	e130      	b.n	800bf66 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bd04:	4b25      	ldr	r3, [pc, #148]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bd06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd08:	f003 0302 	and.w	r3, r3, #2
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d0f0      	beq.n	800bcf2 <HAL_RCC_OscConfig+0x1fa>
 800bd10:	e015      	b.n	800bd3e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bd12:	4b24      	ldr	r3, [pc, #144]	; (800bda4 <HAL_RCC_OscConfig+0x2ac>)
 800bd14:	2200      	movs	r2, #0
 800bd16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd18:	f7fd f82a 	bl	8008d70 <HAL_GetTick>
 800bd1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bd1e:	e008      	b.n	800bd32 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bd20:	f7fd f826 	bl	8008d70 <HAL_GetTick>
 800bd24:	4602      	mov	r2, r0
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	1ad3      	subs	r3, r2, r3
 800bd2a:	2b02      	cmp	r3, #2
 800bd2c:	d901      	bls.n	800bd32 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800bd2e:	2303      	movs	r3, #3
 800bd30:	e119      	b.n	800bf66 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bd32:	4b1a      	ldr	r3, [pc, #104]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bd34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd36:	f003 0302 	and.w	r3, r3, #2
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d1f0      	bne.n	800bd20 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f003 0304 	and.w	r3, r3, #4
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	f000 809f 	beq.w	800be8a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bd50:	4b12      	ldr	r3, [pc, #72]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bd52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d10f      	bne.n	800bd7c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	60fb      	str	r3, [r7, #12]
 800bd60:	4b0e      	ldr	r3, [pc, #56]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bd62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd64:	4a0d      	ldr	r2, [pc, #52]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bd66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd6a:	6413      	str	r3, [r2, #64]	; 0x40
 800bd6c:	4b0b      	ldr	r3, [pc, #44]	; (800bd9c <HAL_RCC_OscConfig+0x2a4>)
 800bd6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd74:	60fb      	str	r3, [r7, #12]
 800bd76:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd7c:	4b0a      	ldr	r3, [pc, #40]	; (800bda8 <HAL_RCC_OscConfig+0x2b0>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d120      	bne.n	800bdca <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bd88:	4b07      	ldr	r3, [pc, #28]	; (800bda8 <HAL_RCC_OscConfig+0x2b0>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4a06      	ldr	r2, [pc, #24]	; (800bda8 <HAL_RCC_OscConfig+0x2b0>)
 800bd8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bd94:	f7fc ffec 	bl	8008d70 <HAL_GetTick>
 800bd98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd9a:	e010      	b.n	800bdbe <HAL_RCC_OscConfig+0x2c6>
 800bd9c:	40023800 	.word	0x40023800
 800bda0:	42470000 	.word	0x42470000
 800bda4:	42470e80 	.word	0x42470e80
 800bda8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bdac:	f7fc ffe0 	bl	8008d70 <HAL_GetTick>
 800bdb0:	4602      	mov	r2, r0
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	1ad3      	subs	r3, r2, r3
 800bdb6:	2b02      	cmp	r3, #2
 800bdb8:	d901      	bls.n	800bdbe <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800bdba:	2303      	movs	r3, #3
 800bdbc:	e0d3      	b.n	800bf66 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bdbe:	4b6c      	ldr	r3, [pc, #432]	; (800bf70 <HAL_RCC_OscConfig+0x478>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d0f0      	beq.n	800bdac <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	689b      	ldr	r3, [r3, #8]
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d106      	bne.n	800bde0 <HAL_RCC_OscConfig+0x2e8>
 800bdd2:	4b68      	ldr	r3, [pc, #416]	; (800bf74 <HAL_RCC_OscConfig+0x47c>)
 800bdd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdd6:	4a67      	ldr	r2, [pc, #412]	; (800bf74 <HAL_RCC_OscConfig+0x47c>)
 800bdd8:	f043 0301 	orr.w	r3, r3, #1
 800bddc:	6713      	str	r3, [r2, #112]	; 0x70
 800bdde:	e01c      	b.n	800be1a <HAL_RCC_OscConfig+0x322>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	689b      	ldr	r3, [r3, #8]
 800bde4:	2b05      	cmp	r3, #5
 800bde6:	d10c      	bne.n	800be02 <HAL_RCC_OscConfig+0x30a>
 800bde8:	4b62      	ldr	r3, [pc, #392]	; (800bf74 <HAL_RCC_OscConfig+0x47c>)
 800bdea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdec:	4a61      	ldr	r2, [pc, #388]	; (800bf74 <HAL_RCC_OscConfig+0x47c>)
 800bdee:	f043 0304 	orr.w	r3, r3, #4
 800bdf2:	6713      	str	r3, [r2, #112]	; 0x70
 800bdf4:	4b5f      	ldr	r3, [pc, #380]	; (800bf74 <HAL_RCC_OscConfig+0x47c>)
 800bdf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdf8:	4a5e      	ldr	r2, [pc, #376]	; (800bf74 <HAL_RCC_OscConfig+0x47c>)
 800bdfa:	f043 0301 	orr.w	r3, r3, #1
 800bdfe:	6713      	str	r3, [r2, #112]	; 0x70
 800be00:	e00b      	b.n	800be1a <HAL_RCC_OscConfig+0x322>
 800be02:	4b5c      	ldr	r3, [pc, #368]	; (800bf74 <HAL_RCC_OscConfig+0x47c>)
 800be04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be06:	4a5b      	ldr	r2, [pc, #364]	; (800bf74 <HAL_RCC_OscConfig+0x47c>)
 800be08:	f023 0301 	bic.w	r3, r3, #1
 800be0c:	6713      	str	r3, [r2, #112]	; 0x70
 800be0e:	4b59      	ldr	r3, [pc, #356]	; (800bf74 <HAL_RCC_OscConfig+0x47c>)
 800be10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be12:	4a58      	ldr	r2, [pc, #352]	; (800bf74 <HAL_RCC_OscConfig+0x47c>)
 800be14:	f023 0304 	bic.w	r3, r3, #4
 800be18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	689b      	ldr	r3, [r3, #8]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d015      	beq.n	800be4e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be22:	f7fc ffa5 	bl	8008d70 <HAL_GetTick>
 800be26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be28:	e00a      	b.n	800be40 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800be2a:	f7fc ffa1 	bl	8008d70 <HAL_GetTick>
 800be2e:	4602      	mov	r2, r0
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	1ad3      	subs	r3, r2, r3
 800be34:	f241 3288 	movw	r2, #5000	; 0x1388
 800be38:	4293      	cmp	r3, r2
 800be3a:	d901      	bls.n	800be40 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800be3c:	2303      	movs	r3, #3
 800be3e:	e092      	b.n	800bf66 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be40:	4b4c      	ldr	r3, [pc, #304]	; (800bf74 <HAL_RCC_OscConfig+0x47c>)
 800be42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be44:	f003 0302 	and.w	r3, r3, #2
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d0ee      	beq.n	800be2a <HAL_RCC_OscConfig+0x332>
 800be4c:	e014      	b.n	800be78 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be4e:	f7fc ff8f 	bl	8008d70 <HAL_GetTick>
 800be52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800be54:	e00a      	b.n	800be6c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800be56:	f7fc ff8b 	bl	8008d70 <HAL_GetTick>
 800be5a:	4602      	mov	r2, r0
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	1ad3      	subs	r3, r2, r3
 800be60:	f241 3288 	movw	r2, #5000	; 0x1388
 800be64:	4293      	cmp	r3, r2
 800be66:	d901      	bls.n	800be6c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800be68:	2303      	movs	r3, #3
 800be6a:	e07c      	b.n	800bf66 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800be6c:	4b41      	ldr	r3, [pc, #260]	; (800bf74 <HAL_RCC_OscConfig+0x47c>)
 800be6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be70:	f003 0302 	and.w	r3, r3, #2
 800be74:	2b00      	cmp	r3, #0
 800be76:	d1ee      	bne.n	800be56 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800be78:	7dfb      	ldrb	r3, [r7, #23]
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	d105      	bne.n	800be8a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800be7e:	4b3d      	ldr	r3, [pc, #244]	; (800bf74 <HAL_RCC_OscConfig+0x47c>)
 800be80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be82:	4a3c      	ldr	r2, [pc, #240]	; (800bf74 <HAL_RCC_OscConfig+0x47c>)
 800be84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	699b      	ldr	r3, [r3, #24]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d068      	beq.n	800bf64 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800be92:	4b38      	ldr	r3, [pc, #224]	; (800bf74 <HAL_RCC_OscConfig+0x47c>)
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	f003 030c 	and.w	r3, r3, #12
 800be9a:	2b08      	cmp	r3, #8
 800be9c:	d060      	beq.n	800bf60 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	699b      	ldr	r3, [r3, #24]
 800bea2:	2b02      	cmp	r3, #2
 800bea4:	d145      	bne.n	800bf32 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bea6:	4b34      	ldr	r3, [pc, #208]	; (800bf78 <HAL_RCC_OscConfig+0x480>)
 800bea8:	2200      	movs	r2, #0
 800beaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800beac:	f7fc ff60 	bl	8008d70 <HAL_GetTick>
 800beb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800beb2:	e008      	b.n	800bec6 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800beb4:	f7fc ff5c 	bl	8008d70 <HAL_GetTick>
 800beb8:	4602      	mov	r2, r0
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	1ad3      	subs	r3, r2, r3
 800bebe:	2b02      	cmp	r3, #2
 800bec0:	d901      	bls.n	800bec6 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800bec2:	2303      	movs	r3, #3
 800bec4:	e04f      	b.n	800bf66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bec6:	4b2b      	ldr	r3, [pc, #172]	; (800bf74 <HAL_RCC_OscConfig+0x47c>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d1f0      	bne.n	800beb4 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	69da      	ldr	r2, [r3, #28]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6a1b      	ldr	r3, [r3, #32]
 800beda:	431a      	orrs	r2, r3
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee0:	019b      	lsls	r3, r3, #6
 800bee2:	431a      	orrs	r2, r3
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bee8:	085b      	lsrs	r3, r3, #1
 800beea:	3b01      	subs	r3, #1
 800beec:	041b      	lsls	r3, r3, #16
 800beee:	431a      	orrs	r2, r3
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef4:	061b      	lsls	r3, r3, #24
 800bef6:	431a      	orrs	r2, r3
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800befc:	071b      	lsls	r3, r3, #28
 800befe:	491d      	ldr	r1, [pc, #116]	; (800bf74 <HAL_RCC_OscConfig+0x47c>)
 800bf00:	4313      	orrs	r3, r2
 800bf02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bf04:	4b1c      	ldr	r3, [pc, #112]	; (800bf78 <HAL_RCC_OscConfig+0x480>)
 800bf06:	2201      	movs	r2, #1
 800bf08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf0a:	f7fc ff31 	bl	8008d70 <HAL_GetTick>
 800bf0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf10:	e008      	b.n	800bf24 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bf12:	f7fc ff2d 	bl	8008d70 <HAL_GetTick>
 800bf16:	4602      	mov	r2, r0
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	1ad3      	subs	r3, r2, r3
 800bf1c:	2b02      	cmp	r3, #2
 800bf1e:	d901      	bls.n	800bf24 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800bf20:	2303      	movs	r3, #3
 800bf22:	e020      	b.n	800bf66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf24:	4b13      	ldr	r3, [pc, #76]	; (800bf74 <HAL_RCC_OscConfig+0x47c>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d0f0      	beq.n	800bf12 <HAL_RCC_OscConfig+0x41a>
 800bf30:	e018      	b.n	800bf64 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf32:	4b11      	ldr	r3, [pc, #68]	; (800bf78 <HAL_RCC_OscConfig+0x480>)
 800bf34:	2200      	movs	r2, #0
 800bf36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf38:	f7fc ff1a 	bl	8008d70 <HAL_GetTick>
 800bf3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf3e:	e008      	b.n	800bf52 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bf40:	f7fc ff16 	bl	8008d70 <HAL_GetTick>
 800bf44:	4602      	mov	r2, r0
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	1ad3      	subs	r3, r2, r3
 800bf4a:	2b02      	cmp	r3, #2
 800bf4c:	d901      	bls.n	800bf52 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800bf4e:	2303      	movs	r3, #3
 800bf50:	e009      	b.n	800bf66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf52:	4b08      	ldr	r3, [pc, #32]	; (800bf74 <HAL_RCC_OscConfig+0x47c>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d1f0      	bne.n	800bf40 <HAL_RCC_OscConfig+0x448>
 800bf5e:	e001      	b.n	800bf64 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800bf60:	2301      	movs	r3, #1
 800bf62:	e000      	b.n	800bf66 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800bf64:	2300      	movs	r3, #0
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3718      	adds	r7, #24
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	40007000 	.word	0x40007000
 800bf74:	40023800 	.word	0x40023800
 800bf78:	42470060 	.word	0x42470060

0800bf7c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d101      	bne.n	800bf8e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	e022      	b.n	800bfd4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d105      	bne.n	800bfa6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f7fa fc5d 	bl	8006860 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2203      	movs	r2, #3
 800bfaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 f814 	bl	800bfdc <HAL_SD_InitCard>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d001      	beq.n	800bfbe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e00a      	b.n	800bfd4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2201      	movs	r2, #1
 800bfce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bfd2:	2300      	movs	r3, #0
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3708      	adds	r7, #8
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bfdc:	b5b0      	push	{r4, r5, r7, lr}
 800bfde:	b08e      	sub	sp, #56	; 0x38
 800bfe0:	af04      	add	r7, sp, #16
 800bfe2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800bfec:	2300      	movs	r3, #0
 800bfee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800bff0:	2300      	movs	r3, #0
 800bff2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800bff4:	2300      	movs	r3, #0
 800bff6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800bff8:	2376      	movs	r3, #118	; 0x76
 800bffa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681d      	ldr	r5, [r3, #0]
 800c000:	466c      	mov	r4, sp
 800c002:	f107 0314 	add.w	r3, r7, #20
 800c006:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c00a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c00e:	f107 0308 	add.w	r3, r7, #8
 800c012:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c014:	4628      	mov	r0, r5
 800c016:	f003 fa87 	bl	800f528 <SDIO_Init>
 800c01a:	4603      	mov	r3, r0
 800c01c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c024:	2b00      	cmp	r3, #0
 800c026:	d001      	beq.n	800c02c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800c028:	2301      	movs	r3, #1
 800c02a:	e031      	b.n	800c090 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800c02c:	4b1a      	ldr	r3, [pc, #104]	; (800c098 <HAL_SD_InitCard+0xbc>)
 800c02e:	2200      	movs	r2, #0
 800c030:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4618      	mov	r0, r3
 800c038:	f003 fabf 	bl	800f5ba <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800c03c:	4b16      	ldr	r3, [pc, #88]	; (800c098 <HAL_SD_InitCard+0xbc>)
 800c03e:	2201      	movs	r2, #1
 800c040:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 ffc6 	bl	800cfd4 <SD_PowerON>
 800c048:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c04a:	6a3b      	ldr	r3, [r7, #32]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d00b      	beq.n	800c068 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2201      	movs	r2, #1
 800c054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c05c:	6a3b      	ldr	r3, [r7, #32]
 800c05e:	431a      	orrs	r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c064:	2301      	movs	r3, #1
 800c066:	e013      	b.n	800c090 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 fee5 	bl	800ce38 <SD_InitCard>
 800c06e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c070:	6a3b      	ldr	r3, [r7, #32]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d00b      	beq.n	800c08e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2201      	movs	r2, #1
 800c07a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c082:	6a3b      	ldr	r3, [r7, #32]
 800c084:	431a      	orrs	r2, r3
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c08a:	2301      	movs	r3, #1
 800c08c:	e000      	b.n	800c090 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800c08e:	2300      	movs	r3, #0
}
 800c090:	4618      	mov	r0, r3
 800c092:	3728      	adds	r7, #40	; 0x28
 800c094:	46bd      	mov	sp, r7
 800c096:	bdb0      	pop	{r4, r5, r7, pc}
 800c098:	422580a0 	.word	0x422580a0

0800c09c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b08c      	sub	sp, #48	; 0x30
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	607a      	str	r2, [r7, #4]
 800c0a8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d107      	bne.n	800c0c4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	e0c7      	b.n	800c254 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c0ca:	b2db      	uxtb	r3, r3
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	f040 80c0 	bne.w	800c252 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c0d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	441a      	add	r2, r3
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d907      	bls.n	800c0f6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	e0ae      	b.n	800c254 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2203      	movs	r2, #3
 800c0fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	2200      	movs	r2, #0
 800c104:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c114:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c11a:	4a50      	ldr	r2, [pc, #320]	; (800c25c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c11c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c122:	4a4f      	ldr	r2, [pc, #316]	; (800c260 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800c124:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c12a:	2200      	movs	r2, #0
 800c12c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	3380      	adds	r3, #128	; 0x80
 800c138:	4619      	mov	r1, r3
 800c13a:	68ba      	ldr	r2, [r7, #8]
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	025b      	lsls	r3, r3, #9
 800c140:	089b      	lsrs	r3, r3, #2
 800c142:	f7fd fc07 	bl	8009954 <HAL_DMA_Start_IT>
 800c146:	4603      	mov	r3, r0
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d017      	beq.n	800c17c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800c15a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a40      	ldr	r2, [pc, #256]	; (800c264 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c162:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c168:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2201      	movs	r2, #1
 800c174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c178:	2301      	movs	r3, #1
 800c17a:	e06b      	b.n	800c254 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800c17c:	4b3a      	ldr	r3, [pc, #232]	; (800c268 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800c17e:	2201      	movs	r2, #1
 800c180:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c186:	2b01      	cmp	r3, #1
 800c188:	d002      	beq.n	800c190 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800c18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18c:	025b      	lsls	r3, r3, #9
 800c18e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c198:	4618      	mov	r0, r3
 800c19a:	f003 faa1 	bl	800f6e0 <SDMMC_CmdBlockLength>
 800c19e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800c1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d00f      	beq.n	800c1c6 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4a2e      	ldr	r2, [pc, #184]	; (800c264 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c1ac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b4:	431a      	orrs	r2, r3
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2201      	movs	r2, #1
 800c1be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e046      	b.n	800c254 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c1c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ca:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	025b      	lsls	r3, r3, #9
 800c1d0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c1d2:	2390      	movs	r3, #144	; 0x90
 800c1d4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800c1d6:	2302      	movs	r3, #2
 800c1d8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f107 0210 	add.w	r2, r7, #16
 800c1ea:	4611      	mov	r1, r2
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f003 fa4b 	bl	800f688 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d90a      	bls.n	800c20e <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2282      	movs	r2, #130	; 0x82
 800c1fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c204:	4618      	mov	r0, r3
 800c206:	f003 faaf 	bl	800f768 <SDMMC_CmdReadMultiBlock>
 800c20a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c20c:	e009      	b.n	800c222 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2281      	movs	r2, #129	; 0x81
 800c212:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c21a:	4618      	mov	r0, r3
 800c21c:	f003 fa82 	bl	800f724 <SDMMC_CmdReadSingleBlock>
 800c220:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800c222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c224:	2b00      	cmp	r3, #0
 800c226:	d012      	beq.n	800c24e <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a0d      	ldr	r2, [pc, #52]	; (800c264 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c22e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c236:	431a      	orrs	r2, r3
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2201      	movs	r2, #1
 800c240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2200      	movs	r2, #0
 800c248:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800c24a:	2301      	movs	r3, #1
 800c24c:	e002      	b.n	800c254 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800c24e:	2300      	movs	r3, #0
 800c250:	e000      	b.n	800c254 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800c252:	2302      	movs	r3, #2
  }
}
 800c254:	4618      	mov	r0, r3
 800c256:	3730      	adds	r7, #48	; 0x30
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	0800cc47 	.word	0x0800cc47
 800c260:	0800ccb9 	.word	0x0800ccb9
 800c264:	004005ff 	.word	0x004005ff
 800c268:	4225858c 	.word	0x4225858c

0800c26c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b08c      	sub	sp, #48	; 0x30
 800c270:	af00      	add	r7, sp, #0
 800c272:	60f8      	str	r0, [r7, #12]
 800c274:	60b9      	str	r1, [r7, #8]
 800c276:	607a      	str	r2, [r7, #4]
 800c278:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d107      	bne.n	800c294 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c288:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c290:	2301      	movs	r3, #1
 800c292:	e0ca      	b.n	800c42a <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c29a:	b2db      	uxtb	r3, r3
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	f040 80c3 	bne.w	800c428 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c2a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	441a      	add	r2, r3
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d907      	bls.n	800c2c6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e0b1      	b.n	800c42a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2203      	movs	r2, #3
 800c2ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f042 021a 	orr.w	r2, r2, #26
 800c2e4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2ea:	4a52      	ldr	r2, [pc, #328]	; (800c434 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800c2ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2f2:	4a51      	ldr	r2, [pc, #324]	; (800c438 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800c2f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c302:	2b01      	cmp	r3, #1
 800c304:	d002      	beq.n	800c30c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800c306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c308:	025b      	lsls	r3, r3, #9
 800c30a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c314:	4618      	mov	r0, r3
 800c316:	f003 f9e3 	bl	800f6e0 <SDMMC_CmdBlockLength>
 800c31a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d00f      	beq.n	800c342 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4a45      	ldr	r2, [pc, #276]	; (800c43c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800c328:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c330:	431a      	orrs	r2, r3
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2201      	movs	r2, #1
 800c33a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c33e:	2301      	movs	r3, #1
 800c340:	e073      	b.n	800c42a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	2b01      	cmp	r3, #1
 800c346:	d90a      	bls.n	800c35e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	22a0      	movs	r2, #160	; 0xa0
 800c34c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c354:	4618      	mov	r0, r3
 800c356:	f003 fa4b 	bl	800f7f0 <SDMMC_CmdWriteMultiBlock>
 800c35a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c35c:	e009      	b.n	800c372 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2290      	movs	r2, #144	; 0x90
 800c362:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c36a:	4618      	mov	r0, r3
 800c36c:	f003 fa1e 	bl	800f7ac <SDMMC_CmdWriteSingleBlock>
 800c370:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c374:	2b00      	cmp	r3, #0
 800c376:	d012      	beq.n	800c39e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4a2f      	ldr	r2, [pc, #188]	; (800c43c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800c37e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c386:	431a      	orrs	r2, r3
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2201      	movs	r2, #1
 800c390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	2200      	movs	r2, #0
 800c398:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c39a:	2301      	movs	r3, #1
 800c39c:	e045      	b.n	800c42a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800c39e:	4b28      	ldr	r3, [pc, #160]	; (800c440 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c3a8:	68b9      	ldr	r1, [r7, #8]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	3380      	adds	r3, #128	; 0x80
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	025b      	lsls	r3, r3, #9
 800c3b6:	089b      	lsrs	r3, r3, #2
 800c3b8:	f7fd facc 	bl	8009954 <HAL_DMA_Start_IT>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d01a      	beq.n	800c3f8 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f022 021a 	bic.w	r2, r2, #26
 800c3d0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	4a19      	ldr	r2, [pc, #100]	; (800c43c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800c3d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	e018      	b.n	800c42a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c3f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c3fc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	025b      	lsls	r3, r3, #9
 800c402:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c404:	2390      	movs	r3, #144	; 0x90
 800c406:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800c408:	2300      	movs	r3, #0
 800c40a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c40c:	2300      	movs	r3, #0
 800c40e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800c410:	2301      	movs	r3, #1
 800c412:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f107 0210 	add.w	r2, r7, #16
 800c41c:	4611      	mov	r1, r2
 800c41e:	4618      	mov	r0, r3
 800c420:	f003 f932 	bl	800f688 <SDIO_ConfigData>

      return HAL_OK;
 800c424:	2300      	movs	r3, #0
 800c426:	e000      	b.n	800c42a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800c428:	2302      	movs	r3, #2
  }
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3730      	adds	r7, #48	; 0x30
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	0800cc1d 	.word	0x0800cc1d
 800c438:	0800ccb9 	.word	0x0800ccb9
 800c43c:	004005ff 	.word	0x004005ff
 800c440:	4225858c 	.word	0x4225858c

0800c444 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c450:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d008      	beq.n	800c472 <HAL_SD_IRQHandler+0x2e>
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f003 0308 	and.w	r3, r3, #8
 800c466:	2b00      	cmp	r3, #0
 800c468:	d003      	beq.n	800c472 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f000 ffc8 	bl	800d400 <SD_Read_IT>
 800c470:	e155      	b.n	800c71e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f000 808f 	beq.w	800c5a0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c48a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	6812      	ldr	r2, [r2, #0]
 800c496:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800c49a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800c49e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f022 0201 	bic.w	r2, r2, #1
 800c4ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	f003 0308 	and.w	r3, r3, #8
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d039      	beq.n	800c52e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f003 0302 	and.w	r3, r3, #2
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d104      	bne.n	800c4ce <HAL_SD_IRQHandler+0x8a>
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	f003 0320 	and.w	r3, r3, #32
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d011      	beq.n	800c4f2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f003 f9ae 	bl	800f834 <SDMMC_CmdStopTransfer>
 800c4d8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d008      	beq.n	800c4f2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	431a      	orrs	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f000 f91f 	bl	800c730 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f240 523a 	movw	r2, #1338	; 0x53a
 800c4fa:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2201      	movs	r2, #1
 800c500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f003 0301 	and.w	r3, r3, #1
 800c510:	2b00      	cmp	r3, #0
 800c512:	d104      	bne.n	800c51e <HAL_SD_IRQHandler+0xda>
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f003 0302 	and.w	r3, r3, #2
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d003      	beq.n	800c526 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f003 fe04 	bl	801012c <HAL_SD_RxCpltCallback>
 800c524:	e0fb      	b.n	800c71e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f003 fdf6 	bl	8010118 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c52c:	e0f7      	b.n	800c71e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c534:	2b00      	cmp	r3, #0
 800c536:	f000 80f2 	beq.w	800c71e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	f003 0320 	and.w	r3, r3, #32
 800c540:	2b00      	cmp	r3, #0
 800c542:	d011      	beq.n	800c568 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4618      	mov	r0, r3
 800c54a:	f003 f973 	bl	800f834 <SDMMC_CmdStopTransfer>
 800c54e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d008      	beq.n	800c568 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	431a      	orrs	r2, r3
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f000 f8e4 	bl	800c730 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f003 0301 	and.w	r3, r3, #1
 800c56e:	2b00      	cmp	r3, #0
 800c570:	f040 80d5 	bne.w	800c71e <HAL_SD_IRQHandler+0x2da>
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f003 0302 	and.w	r3, r3, #2
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	f040 80cf 	bne.w	800c71e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f022 0208 	bic.w	r2, r2, #8
 800c58e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2201      	movs	r2, #1
 800c594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f003 fdbd 	bl	8010118 <HAL_SD_TxCpltCallback>
}
 800c59e:	e0be      	b.n	800c71e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d008      	beq.n	800c5c0 <HAL_SD_IRQHandler+0x17c>
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f003 0308 	and.w	r3, r3, #8
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d003      	beq.n	800c5c0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f000 ff72 	bl	800d4a2 <SD_Write_IT>
 800c5be:	e0ae      	b.n	800c71e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5c6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	f000 80a7 	beq.w	800c71e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5d6:	f003 0302 	and.w	r3, r3, #2
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d005      	beq.n	800c5ea <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5e2:	f043 0202 	orr.w	r2, r3, #2
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5f0:	f003 0308 	and.w	r3, r3, #8
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d005      	beq.n	800c604 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5fc:	f043 0208 	orr.w	r2, r3, #8
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c60a:	f003 0320 	and.w	r3, r3, #32
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d005      	beq.n	800c61e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c616:	f043 0220 	orr.w	r2, r3, #32
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c624:	f003 0310 	and.w	r3, r3, #16
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d005      	beq.n	800c638 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c630:	f043 0210 	orr.w	r2, r3, #16
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f240 523a 	movw	r2, #1338	; 0x53a
 800c640:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c650:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4618      	mov	r0, r3
 800c658:	f003 f8ec 	bl	800f834 <SDMMC_CmdStopTransfer>
 800c65c:	4602      	mov	r2, r0
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c662:	431a      	orrs	r2, r3
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f003 0308 	and.w	r3, r3, #8
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d00a      	beq.n	800c688 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2201      	movs	r2, #1
 800c676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2200      	movs	r2, #0
 800c67e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 f855 	bl	800c730 <HAL_SD_ErrorCallback>
}
 800c686:	e04a      	b.n	800c71e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d045      	beq.n	800c71e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	f003 0310 	and.w	r3, r3, #16
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d104      	bne.n	800c6a6 <HAL_SD_IRQHandler+0x262>
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f003 0320 	and.w	r3, r3, #32
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d011      	beq.n	800c6ca <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6aa:	4a1f      	ldr	r2, [pc, #124]	; (800c728 <HAL_SD_IRQHandler+0x2e4>)
 800c6ac:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7fd f9a6 	bl	8009a04 <HAL_DMA_Abort_IT>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d02f      	beq.n	800c71e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f000 fb4a 	bl	800cd5c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c6c8:	e029      	b.n	800c71e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	f003 0301 	and.w	r3, r3, #1
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d104      	bne.n	800c6de <HAL_SD_IRQHandler+0x29a>
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f003 0302 	and.w	r3, r3, #2
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d011      	beq.n	800c702 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6e2:	4a12      	ldr	r2, [pc, #72]	; (800c72c <HAL_SD_IRQHandler+0x2e8>)
 800c6e4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7fd f98a 	bl	8009a04 <HAL_DMA_Abort_IT>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d013      	beq.n	800c71e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f000 fb65 	bl	800cdca <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c700:	e00d      	b.n	800c71e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2201      	movs	r2, #1
 800c70c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2200      	movs	r2, #0
 800c714:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f003 fcf4 	bl	8010104 <HAL_SD_AbortCallback>
}
 800c71c:	e7ff      	b.n	800c71e <HAL_SD_IRQHandler+0x2da>
 800c71e:	bf00      	nop
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	0800cd5d 	.word	0x0800cd5d
 800c72c:	0800cdcb 	.word	0x0800cdcb

0800c730 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c738:	bf00      	nop
 800c73a:	370c      	adds	r7, #12
 800c73c:	46bd      	mov	sp, r7
 800c73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c742:	4770      	bx	lr

0800c744 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c744:	b480      	push	{r7}
 800c746:	b083      	sub	sp, #12
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c752:	0f9b      	lsrs	r3, r3, #30
 800c754:	b2da      	uxtb	r2, r3
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c75e:	0e9b      	lsrs	r3, r3, #26
 800c760:	b2db      	uxtb	r3, r3
 800c762:	f003 030f 	and.w	r3, r3, #15
 800c766:	b2da      	uxtb	r2, r3
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c770:	0e1b      	lsrs	r3, r3, #24
 800c772:	b2db      	uxtb	r3, r3
 800c774:	f003 0303 	and.w	r3, r3, #3
 800c778:	b2da      	uxtb	r2, r3
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c782:	0c1b      	lsrs	r3, r3, #16
 800c784:	b2da      	uxtb	r2, r3
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c78e:	0a1b      	lsrs	r3, r3, #8
 800c790:	b2da      	uxtb	r2, r3
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c79a:	b2da      	uxtb	r2, r3
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7a4:	0d1b      	lsrs	r3, r3, #20
 800c7a6:	b29a      	uxth	r2, r3
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7b0:	0c1b      	lsrs	r3, r3, #16
 800c7b2:	b2db      	uxtb	r3, r3
 800c7b4:	f003 030f 	and.w	r3, r3, #15
 800c7b8:	b2da      	uxtb	r2, r3
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7c2:	0bdb      	lsrs	r3, r3, #15
 800c7c4:	b2db      	uxtb	r3, r3
 800c7c6:	f003 0301 	and.w	r3, r3, #1
 800c7ca:	b2da      	uxtb	r2, r3
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7d4:	0b9b      	lsrs	r3, r3, #14
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	f003 0301 	and.w	r3, r3, #1
 800c7dc:	b2da      	uxtb	r2, r3
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7e6:	0b5b      	lsrs	r3, r3, #13
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	f003 0301 	and.w	r3, r3, #1
 800c7ee:	b2da      	uxtb	r2, r3
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7f8:	0b1b      	lsrs	r3, r3, #12
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	f003 0301 	and.w	r3, r3, #1
 800c800:	b2da      	uxtb	r2, r3
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	2200      	movs	r2, #0
 800c80a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c810:	2b00      	cmp	r3, #0
 800c812:	d163      	bne.n	800c8dc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c818:	009a      	lsls	r2, r3, #2
 800c81a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c81e:	4013      	ands	r3, r2
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800c824:	0f92      	lsrs	r2, r2, #30
 800c826:	431a      	orrs	r2, r3
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c830:	0edb      	lsrs	r3, r3, #27
 800c832:	b2db      	uxtb	r3, r3
 800c834:	f003 0307 	and.w	r3, r3, #7
 800c838:	b2da      	uxtb	r2, r3
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c842:	0e1b      	lsrs	r3, r3, #24
 800c844:	b2db      	uxtb	r3, r3
 800c846:	f003 0307 	and.w	r3, r3, #7
 800c84a:	b2da      	uxtb	r2, r3
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c854:	0d5b      	lsrs	r3, r3, #21
 800c856:	b2db      	uxtb	r3, r3
 800c858:	f003 0307 	and.w	r3, r3, #7
 800c85c:	b2da      	uxtb	r2, r3
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c866:	0c9b      	lsrs	r3, r3, #18
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	f003 0307 	and.w	r3, r3, #7
 800c86e:	b2da      	uxtb	r2, r3
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c878:	0bdb      	lsrs	r3, r3, #15
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	f003 0307 	and.w	r3, r3, #7
 800c880:	b2da      	uxtb	r2, r3
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	691b      	ldr	r3, [r3, #16]
 800c88a:	1c5a      	adds	r2, r3, #1
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	7e1b      	ldrb	r3, [r3, #24]
 800c894:	b2db      	uxtb	r3, r3
 800c896:	f003 0307 	and.w	r3, r3, #7
 800c89a:	3302      	adds	r3, #2
 800c89c:	2201      	movs	r2, #1
 800c89e:	fa02 f303 	lsl.w	r3, r2, r3
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800c8a6:	fb02 f203 	mul.w	r2, r2, r3
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	7a1b      	ldrb	r3, [r3, #8]
 800c8b2:	b2db      	uxtb	r3, r3
 800c8b4:	f003 030f 	and.w	r3, r3, #15
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	409a      	lsls	r2, r3
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8c4:	687a      	ldr	r2, [r7, #4]
 800c8c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800c8c8:	0a52      	lsrs	r2, r2, #9
 800c8ca:	fb02 f203 	mul.w	r2, r2, r3
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c8d8:	661a      	str	r2, [r3, #96]	; 0x60
 800c8da:	e031      	b.n	800c940 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d11d      	bne.n	800c920 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8e8:	041b      	lsls	r3, r3, #16
 800c8ea:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8f2:	0c1b      	lsrs	r3, r3, #16
 800c8f4:	431a      	orrs	r2, r3
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	691b      	ldr	r3, [r3, #16]
 800c8fe:	3301      	adds	r3, #1
 800c900:	029a      	lsls	r2, r3, #10
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c914:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	661a      	str	r2, [r3, #96]	; 0x60
 800c91e:	e00f      	b.n	800c940 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	4a58      	ldr	r2, [pc, #352]	; (800ca88 <HAL_SD_GetCardCSD+0x344>)
 800c926:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c92c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2201      	movs	r2, #1
 800c938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c93c:	2301      	movs	r3, #1
 800c93e:	e09d      	b.n	800ca7c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c944:	0b9b      	lsrs	r3, r3, #14
 800c946:	b2db      	uxtb	r3, r3
 800c948:	f003 0301 	and.w	r3, r3, #1
 800c94c:	b2da      	uxtb	r2, r3
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c956:	09db      	lsrs	r3, r3, #7
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c95e:	b2da      	uxtb	r2, r3
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c96e:	b2da      	uxtb	r2, r3
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c978:	0fdb      	lsrs	r3, r3, #31
 800c97a:	b2da      	uxtb	r2, r3
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c984:	0f5b      	lsrs	r3, r3, #29
 800c986:	b2db      	uxtb	r3, r3
 800c988:	f003 0303 	and.w	r3, r3, #3
 800c98c:	b2da      	uxtb	r2, r3
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c996:	0e9b      	lsrs	r3, r3, #26
 800c998:	b2db      	uxtb	r3, r3
 800c99a:	f003 0307 	and.w	r3, r3, #7
 800c99e:	b2da      	uxtb	r2, r3
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9a8:	0d9b      	lsrs	r3, r3, #22
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	f003 030f 	and.w	r3, r3, #15
 800c9b0:	b2da      	uxtb	r2, r3
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9ba:	0d5b      	lsrs	r3, r3, #21
 800c9bc:	b2db      	uxtb	r3, r3
 800c9be:	f003 0301 	and.w	r3, r3, #1
 800c9c2:	b2da      	uxtb	r2, r3
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9d6:	0c1b      	lsrs	r3, r3, #16
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	f003 0301 	and.w	r3, r3, #1
 800c9de:	b2da      	uxtb	r2, r3
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9ea:	0bdb      	lsrs	r3, r3, #15
 800c9ec:	b2db      	uxtb	r3, r3
 800c9ee:	f003 0301 	and.w	r3, r3, #1
 800c9f2:	b2da      	uxtb	r2, r3
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9fe:	0b9b      	lsrs	r3, r3, #14
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	f003 0301 	and.w	r3, r3, #1
 800ca06:	b2da      	uxtb	r2, r3
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca12:	0b5b      	lsrs	r3, r3, #13
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	f003 0301 	and.w	r3, r3, #1
 800ca1a:	b2da      	uxtb	r2, r3
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca26:	0b1b      	lsrs	r3, r3, #12
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	f003 0301 	and.w	r3, r3, #1
 800ca2e:	b2da      	uxtb	r2, r3
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca3a:	0a9b      	lsrs	r3, r3, #10
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	f003 0303 	and.w	r3, r3, #3
 800ca42:	b2da      	uxtb	r2, r3
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca4e:	0a1b      	lsrs	r3, r3, #8
 800ca50:	b2db      	uxtb	r3, r3
 800ca52:	f003 0303 	and.w	r3, r3, #3
 800ca56:	b2da      	uxtb	r2, r3
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca62:	085b      	lsrs	r3, r3, #1
 800ca64:	b2db      	uxtb	r3, r3
 800ca66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca6a:	b2da      	uxtb	r2, r3
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	2201      	movs	r2, #1
 800ca76:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ca7a:	2300      	movs	r3, #0
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	370c      	adds	r7, #12
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr
 800ca88:	004005ff 	.word	0x004005ff

0800ca8c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b083      	sub	sp, #12
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cad6:	2300      	movs	r3, #0
}
 800cad8:	4618      	mov	r0, r3
 800cada:	370c      	adds	r7, #12
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr

0800cae4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cae4:	b5b0      	push	{r4, r5, r7, lr}
 800cae6:	b08e      	sub	sp, #56	; 0x38
 800cae8:	af04      	add	r7, sp, #16
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2203      	movs	r2, #3
 800caf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cafa:	2b03      	cmp	r3, #3
 800cafc:	d02e      	beq.n	800cb5c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb04:	d106      	bne.n	800cb14 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb0a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	639a      	str	r2, [r3, #56]	; 0x38
 800cb12:	e029      	b.n	800cb68 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb1a:	d10a      	bne.n	800cb32 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f000 fb0f 	bl	800d140 <SD_WideBus_Enable>
 800cb22:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2a:	431a      	orrs	r2, r3
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	639a      	str	r2, [r3, #56]	; 0x38
 800cb30:	e01a      	b.n	800cb68 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d10a      	bne.n	800cb4e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f000 fb4c 	bl	800d1d6 <SD_WideBus_Disable>
 800cb3e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb46:	431a      	orrs	r2, r3
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	639a      	str	r2, [r3, #56]	; 0x38
 800cb4c:	e00c      	b.n	800cb68 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb52:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	639a      	str	r2, [r3, #56]	; 0x38
 800cb5a:	e005      	b.n	800cb68 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d009      	beq.n	800cb84 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4a18      	ldr	r2, [pc, #96]	; (800cbd8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800cb76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cb80:	2301      	movs	r3, #1
 800cb82:	e024      	b.n	800cbce <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	689b      	ldr	r3, [r3, #8]
 800cb8e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	695b      	ldr	r3, [r3, #20]
 800cb9e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	699b      	ldr	r3, [r3, #24]
 800cba4:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681d      	ldr	r5, [r3, #0]
 800cbaa:	466c      	mov	r4, sp
 800cbac:	f107 0318 	add.w	r3, r7, #24
 800cbb0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cbb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cbb8:	f107 030c 	add.w	r3, r7, #12
 800cbbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cbbe:	4628      	mov	r0, r5
 800cbc0:	f002 fcb2 	bl	800f528 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cbcc:	2300      	movs	r3, #0
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3728      	adds	r7, #40	; 0x28
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bdb0      	pop	{r4, r5, r7, pc}
 800cbd6:	bf00      	nop
 800cbd8:	004005ff 	.word	0x004005ff

0800cbdc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b086      	sub	sp, #24
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cbe8:	f107 030c 	add.w	r3, r7, #12
 800cbec:	4619      	mov	r1, r3
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f000 fa7e 	bl	800d0f0 <SD_SendStatus>
 800cbf4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cbf6:	697b      	ldr	r3, [r7, #20]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d005      	beq.n	800cc08 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	431a      	orrs	r2, r3
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	0a5b      	lsrs	r3, r3, #9
 800cc0c:	f003 030f 	and.w	r3, r3, #15
 800cc10:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cc12:	693b      	ldr	r3, [r7, #16]
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3718      	adds	r7, #24
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b085      	sub	sp, #20
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc28:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cc38:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800cc3a:	bf00      	nop
 800cc3c:	3714      	adds	r7, #20
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc44:	4770      	bx	lr

0800cc46 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cc46:	b580      	push	{r7, lr}
 800cc48:	b084      	sub	sp, #16
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc52:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc58:	2b82      	cmp	r3, #130	; 0x82
 800cc5a:	d111      	bne.n	800cc80 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4618      	mov	r0, r3
 800cc62:	f002 fde7 	bl	800f834 <SDMMC_CmdStopTransfer>
 800cc66:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d008      	beq.n	800cc80 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	431a      	orrs	r2, r3
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800cc7a:	68f8      	ldr	r0, [r7, #12]
 800cc7c:	f7ff fd58 	bl	800c730 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f022 0208 	bic.w	r2, r2, #8
 800cc8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f240 523a 	movw	r2, #1338	; 0x53a
 800cc98:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2200      	movs	r2, #0
 800cca6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800cca8:	68f8      	ldr	r0, [r7, #12]
 800ccaa:	f003 fa3f 	bl	801012c <HAL_SD_RxCpltCallback>
#endif
}
 800ccae:	bf00      	nop
 800ccb0:	3710      	adds	r7, #16
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
	...

0800ccb8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b086      	sub	sp, #24
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccc4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f7fd f848 	bl	8009d5c <HAL_DMA_GetError>
 800cccc:	4603      	mov	r3, r0
 800ccce:	2b02      	cmp	r3, #2
 800ccd0:	d03e      	beq.n	800cd50 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccd8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cce0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	d002      	beq.n	800ccee <SD_DMAError+0x36>
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2b01      	cmp	r3, #1
 800ccec:	d12d      	bne.n	800cd4a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	4a19      	ldr	r2, [pc, #100]	; (800cd58 <SD_DMAError+0xa0>)
 800ccf4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800cd04:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd0a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800cd12:	6978      	ldr	r0, [r7, #20]
 800cd14:	f7ff ff62 	bl	800cbdc <HAL_SD_GetCardState>
 800cd18:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	2b06      	cmp	r3, #6
 800cd1e:	d002      	beq.n	800cd26 <SD_DMAError+0x6e>
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	2b05      	cmp	r3, #5
 800cd24:	d10a      	bne.n	800cd3c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f002 fd82 	bl	800f834 <SDMMC_CmdStopTransfer>
 800cd30:	4602      	mov	r2, r0
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd36:	431a      	orrs	r2, r3
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	2201      	movs	r2, #1
 800cd40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	2200      	movs	r2, #0
 800cd48:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800cd4a:	6978      	ldr	r0, [r7, #20]
 800cd4c:	f7ff fcf0 	bl	800c730 <HAL_SD_ErrorCallback>
#endif
  }
}
 800cd50:	bf00      	nop
 800cd52:	3718      	adds	r7, #24
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}
 800cd58:	004005ff 	.word	0x004005ff

0800cd5c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b084      	sub	sp, #16
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd68:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f240 523a 	movw	r2, #1338	; 0x53a
 800cd72:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800cd74:	68f8      	ldr	r0, [r7, #12]
 800cd76:	f7ff ff31 	bl	800cbdc <HAL_SD_GetCardState>
 800cd7a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2201      	movs	r2, #1
 800cd80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2200      	movs	r2, #0
 800cd88:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	2b06      	cmp	r3, #6
 800cd8e:	d002      	beq.n	800cd96 <SD_DMATxAbort+0x3a>
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	2b05      	cmp	r3, #5
 800cd94:	d10a      	bne.n	800cdac <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f002 fd4a 	bl	800f834 <SDMMC_CmdStopTransfer>
 800cda0:	4602      	mov	r2, r0
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cda6:	431a      	orrs	r2, r3
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d103      	bne.n	800cdbc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800cdb4:	68f8      	ldr	r0, [r7, #12]
 800cdb6:	f003 f9a5 	bl	8010104 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800cdba:	e002      	b.n	800cdc2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800cdbc:	68f8      	ldr	r0, [r7, #12]
 800cdbe:	f7ff fcb7 	bl	800c730 <HAL_SD_ErrorCallback>
}
 800cdc2:	bf00      	nop
 800cdc4:	3710      	adds	r7, #16
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}

0800cdca <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800cdca:	b580      	push	{r7, lr}
 800cdcc:	b084      	sub	sp, #16
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdd6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f240 523a 	movw	r2, #1338	; 0x53a
 800cde0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800cde2:	68f8      	ldr	r0, [r7, #12]
 800cde4:	f7ff fefa 	bl	800cbdc <HAL_SD_GetCardState>
 800cde8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2201      	movs	r2, #1
 800cdee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	2b06      	cmp	r3, #6
 800cdfc:	d002      	beq.n	800ce04 <SD_DMARxAbort+0x3a>
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	2b05      	cmp	r3, #5
 800ce02:	d10a      	bne.n	800ce1a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f002 fd13 	bl	800f834 <SDMMC_CmdStopTransfer>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce14:	431a      	orrs	r2, r3
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d103      	bne.n	800ce2a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ce22:	68f8      	ldr	r0, [r7, #12]
 800ce24:	f003 f96e 	bl	8010104 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ce28:	e002      	b.n	800ce30 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ce2a:	68f8      	ldr	r0, [r7, #12]
 800ce2c:	f7ff fc80 	bl	800c730 <HAL_SD_ErrorCallback>
}
 800ce30:	bf00      	nop
 800ce32:	3710      	adds	r7, #16
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ce38:	b5b0      	push	{r4, r5, r7, lr}
 800ce3a:	b094      	sub	sp, #80	; 0x50
 800ce3c:	af04      	add	r7, sp, #16
 800ce3e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ce40:	2301      	movs	r3, #1
 800ce42:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f002 fbc5 	bl	800f5d8 <SDIO_GetPowerState>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d102      	bne.n	800ce5a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ce54:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ce58:	e0b7      	b.n	800cfca <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce5e:	2b03      	cmp	r3, #3
 800ce60:	d02f      	beq.n	800cec2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	4618      	mov	r0, r3
 800ce68:	f002 fdee 	bl	800fa48 <SDMMC_CmdSendCID>
 800ce6c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ce6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d001      	beq.n	800ce78 <SD_InitCard+0x40>
    {
      return errorstate;
 800ce74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce76:	e0a8      	b.n	800cfca <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	2100      	movs	r1, #0
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f002 fbef 	bl	800f662 <SDIO_GetResponse>
 800ce84:	4602      	mov	r2, r0
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2104      	movs	r1, #4
 800ce90:	4618      	mov	r0, r3
 800ce92:	f002 fbe6 	bl	800f662 <SDIO_GetResponse>
 800ce96:	4602      	mov	r2, r0
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	2108      	movs	r1, #8
 800cea2:	4618      	mov	r0, r3
 800cea4:	f002 fbdd 	bl	800f662 <SDIO_GetResponse>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	210c      	movs	r1, #12
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f002 fbd4 	bl	800f662 <SDIO_GetResponse>
 800ceba:	4602      	mov	r2, r0
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cec6:	2b03      	cmp	r3, #3
 800cec8:	d00d      	beq.n	800cee6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f107 020e 	add.w	r2, r7, #14
 800ced2:	4611      	mov	r1, r2
 800ced4:	4618      	mov	r0, r3
 800ced6:	f002 fdf4 	bl	800fac2 <SDMMC_CmdSetRelAdd>
 800ceda:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cedc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d001      	beq.n	800cee6 <SD_InitCard+0xae>
    {
      return errorstate;
 800cee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cee4:	e071      	b.n	800cfca <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceea:	2b03      	cmp	r3, #3
 800ceec:	d036      	beq.n	800cf5c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ceee:	89fb      	ldrh	r3, [r7, #14]
 800cef0:	461a      	mov	r2, r3
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cefe:	041b      	lsls	r3, r3, #16
 800cf00:	4619      	mov	r1, r3
 800cf02:	4610      	mov	r0, r2
 800cf04:	f002 fdbe 	bl	800fa84 <SDMMC_CmdSendCSD>
 800cf08:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d001      	beq.n	800cf14 <SD_InitCard+0xdc>
    {
      return errorstate;
 800cf10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf12:	e05a      	b.n	800cfca <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	2100      	movs	r1, #0
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f002 fba1 	bl	800f662 <SDIO_GetResponse>
 800cf20:	4602      	mov	r2, r0
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	2104      	movs	r1, #4
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f002 fb98 	bl	800f662 <SDIO_GetResponse>
 800cf32:	4602      	mov	r2, r0
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2108      	movs	r1, #8
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f002 fb8f 	bl	800f662 <SDIO_GetResponse>
 800cf44:	4602      	mov	r2, r0
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	210c      	movs	r1, #12
 800cf50:	4618      	mov	r0, r3
 800cf52:	f002 fb86 	bl	800f662 <SDIO_GetResponse>
 800cf56:	4602      	mov	r2, r0
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	2104      	movs	r1, #4
 800cf62:	4618      	mov	r0, r3
 800cf64:	f002 fb7d 	bl	800f662 <SDIO_GetResponse>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	0d1a      	lsrs	r2, r3, #20
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800cf70:	f107 0310 	add.w	r3, r7, #16
 800cf74:	4619      	mov	r1, r3
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f7ff fbe4 	bl	800c744 <HAL_SD_GetCardCSD>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d002      	beq.n	800cf88 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cf82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cf86:	e020      	b.n	800cfca <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6819      	ldr	r1, [r3, #0]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf90:	041b      	lsls	r3, r3, #16
 800cf92:	f04f 0400 	mov.w	r4, #0
 800cf96:	461a      	mov	r2, r3
 800cf98:	4623      	mov	r3, r4
 800cf9a:	4608      	mov	r0, r1
 800cf9c:	f002 fc6c 	bl	800f878 <SDMMC_CmdSelDesel>
 800cfa0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800cfa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d001      	beq.n	800cfac <SD_InitCard+0x174>
  {
    return errorstate;
 800cfa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfaa:	e00e      	b.n	800cfca <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681d      	ldr	r5, [r3, #0]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	466c      	mov	r4, sp
 800cfb4:	f103 0210 	add.w	r2, r3, #16
 800cfb8:	ca07      	ldmia	r2, {r0, r1, r2}
 800cfba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cfbe:	3304      	adds	r3, #4
 800cfc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cfc2:	4628      	mov	r0, r5
 800cfc4:	f002 fab0 	bl	800f528 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800cfc8:	2300      	movs	r3, #0
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3740      	adds	r7, #64	; 0x40
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800cfd4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b086      	sub	sp, #24
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	617b      	str	r3, [r7, #20]
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	4618      	mov	r0, r3
 800cfee:	f002 fc66 	bl	800f8be <SDMMC_CmdGoIdleState>
 800cff2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d001      	beq.n	800cffe <SD_PowerON+0x2a>
  {
    return errorstate;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	e072      	b.n	800d0e4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4618      	mov	r0, r3
 800d004:	f002 fc79 	bl	800f8fa <SDMMC_CmdOperCond>
 800d008:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d00d      	beq.n	800d02c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2200      	movs	r2, #0
 800d014:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	4618      	mov	r0, r3
 800d01c:	f002 fc4f 	bl	800f8be <SDMMC_CmdGoIdleState>
 800d020:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d004      	beq.n	800d032 <SD_PowerON+0x5e>
    {
      return errorstate;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	e05b      	b.n	800d0e4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2201      	movs	r2, #1
 800d030:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d036:	2b01      	cmp	r3, #1
 800d038:	d137      	bne.n	800d0aa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	2100      	movs	r1, #0
 800d040:	4618      	mov	r0, r3
 800d042:	f002 fc79 	bl	800f938 <SDMMC_CmdAppCommand>
 800d046:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d02d      	beq.n	800d0aa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d04e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d052:	e047      	b.n	800d0e4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	2100      	movs	r1, #0
 800d05a:	4618      	mov	r0, r3
 800d05c:	f002 fc6c 	bl	800f938 <SDMMC_CmdAppCommand>
 800d060:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d001      	beq.n	800d06c <SD_PowerON+0x98>
    {
      return errorstate;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	e03b      	b.n	800d0e4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	491e      	ldr	r1, [pc, #120]	; (800d0ec <SD_PowerON+0x118>)
 800d072:	4618      	mov	r0, r3
 800d074:	f002 fc82 	bl	800f97c <SDMMC_CmdAppOperCommand>
 800d078:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d002      	beq.n	800d086 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d080:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d084:	e02e      	b.n	800d0e4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	2100      	movs	r1, #0
 800d08c:	4618      	mov	r0, r3
 800d08e:	f002 fae8 	bl	800f662 <SDIO_GetResponse>
 800d092:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	0fdb      	lsrs	r3, r3, #31
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d101      	bne.n	800d0a0 <SD_PowerON+0xcc>
 800d09c:	2301      	movs	r3, #1
 800d09e:	e000      	b.n	800d0a2 <SD_PowerON+0xce>
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	613b      	str	r3, [r7, #16]

    count++;
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d802      	bhi.n	800d0ba <SD_PowerON+0xe6>
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d0cc      	beq.n	800d054 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d902      	bls.n	800d0ca <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d0c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d0c8:	e00c      	b.n	800d0e4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d003      	beq.n	800d0dc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	645a      	str	r2, [r3, #68]	; 0x44
 800d0da:	e002      	b.n	800d0e2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d0e2:	2300      	movs	r3, #0
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3718      	adds	r7, #24
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}
 800d0ec:	c1100000 	.word	0xc1100000

0800d0f0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b084      	sub	sp, #16
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d102      	bne.n	800d106 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d100:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d104:	e018      	b.n	800d138 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d10e:	041b      	lsls	r3, r3, #16
 800d110:	4619      	mov	r1, r3
 800d112:	4610      	mov	r0, r2
 800d114:	f002 fcf6 	bl	800fb04 <SDMMC_CmdSendStatus>
 800d118:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d001      	beq.n	800d124 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	e009      	b.n	800d138 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	2100      	movs	r1, #0
 800d12a:	4618      	mov	r0, r3
 800d12c:	f002 fa99 	bl	800f662 <SDIO_GetResponse>
 800d130:	4602      	mov	r2, r0
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d136:	2300      	movs	r3, #0
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3710      	adds	r7, #16
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b086      	sub	sp, #24
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d148:	2300      	movs	r3, #0
 800d14a:	60fb      	str	r3, [r7, #12]
 800d14c:	2300      	movs	r3, #0
 800d14e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	2100      	movs	r1, #0
 800d156:	4618      	mov	r0, r3
 800d158:	f002 fa83 	bl	800f662 <SDIO_GetResponse>
 800d15c:	4603      	mov	r3, r0
 800d15e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d162:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d166:	d102      	bne.n	800d16e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d168:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d16c:	e02f      	b.n	800d1ce <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d16e:	f107 030c 	add.w	r3, r7, #12
 800d172:	4619      	mov	r1, r3
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f000 f879 	bl	800d26c <SD_FindSCR>
 800d17a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d001      	beq.n	800d186 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	e023      	b.n	800d1ce <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d01c      	beq.n	800d1ca <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681a      	ldr	r2, [r3, #0]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d198:	041b      	lsls	r3, r3, #16
 800d19a:	4619      	mov	r1, r3
 800d19c:	4610      	mov	r0, r2
 800d19e:	f002 fbcb 	bl	800f938 <SDMMC_CmdAppCommand>
 800d1a2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d001      	beq.n	800d1ae <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	e00f      	b.n	800d1ce <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	2102      	movs	r1, #2
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f002 fc04 	bl	800f9c2 <SDMMC_CmdBusWidth>
 800d1ba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d001      	beq.n	800d1c6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	e003      	b.n	800d1ce <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	e001      	b.n	800d1ce <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d1ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3718      	adds	r7, #24
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}

0800d1d6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d1d6:	b580      	push	{r7, lr}
 800d1d8:	b086      	sub	sp, #24
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d1de:	2300      	movs	r3, #0
 800d1e0:	60fb      	str	r3, [r7, #12]
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	2100      	movs	r1, #0
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f002 fa38 	bl	800f662 <SDIO_GetResponse>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d1fc:	d102      	bne.n	800d204 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d1fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d202:	e02f      	b.n	800d264 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d204:	f107 030c 	add.w	r3, r7, #12
 800d208:	4619      	mov	r1, r3
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 f82e 	bl	800d26c <SD_FindSCR>
 800d210:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d001      	beq.n	800d21c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	e023      	b.n	800d264 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d222:	2b00      	cmp	r3, #0
 800d224:	d01c      	beq.n	800d260 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d22e:	041b      	lsls	r3, r3, #16
 800d230:	4619      	mov	r1, r3
 800d232:	4610      	mov	r0, r2
 800d234:	f002 fb80 	bl	800f938 <SDMMC_CmdAppCommand>
 800d238:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d001      	beq.n	800d244 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	e00f      	b.n	800d264 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	2100      	movs	r1, #0
 800d24a:	4618      	mov	r0, r3
 800d24c:	f002 fbb9 	bl	800f9c2 <SDMMC_CmdBusWidth>
 800d250:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d001      	beq.n	800d25c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	e003      	b.n	800d264 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d25c:	2300      	movs	r3, #0
 800d25e:	e001      	b.n	800d264 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d260:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d264:	4618      	mov	r0, r3
 800d266:	3718      	adds	r7, #24
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d26c:	b590      	push	{r4, r7, lr}
 800d26e:	b08f      	sub	sp, #60	; 0x3c
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d276:	f7fb fd7b 	bl	8008d70 <HAL_GetTick>
 800d27a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d27c:	2300      	movs	r3, #0
 800d27e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800d280:	2300      	movs	r3, #0
 800d282:	60bb      	str	r3, [r7, #8]
 800d284:	2300      	movs	r3, #0
 800d286:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	2108      	movs	r1, #8
 800d292:	4618      	mov	r0, r3
 800d294:	f002 fa24 	bl	800f6e0 <SDMMC_CmdBlockLength>
 800d298:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d001      	beq.n	800d2a4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a2:	e0a9      	b.n	800d3f8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681a      	ldr	r2, [r3, #0]
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2ac:	041b      	lsls	r3, r3, #16
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	4610      	mov	r0, r2
 800d2b2:	f002 fb41 	bl	800f938 <SDMMC_CmdAppCommand>
 800d2b6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d001      	beq.n	800d2c2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800d2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c0:	e09a      	b.n	800d3f8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d2c2:	f04f 33ff 	mov.w	r3, #4294967295
 800d2c6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d2c8:	2308      	movs	r3, #8
 800d2ca:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800d2cc:	2330      	movs	r3, #48	; 0x30
 800d2ce:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d2d0:	2302      	movs	r3, #2
 800d2d2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800d2d8:	2301      	movs	r3, #1
 800d2da:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f107 0210 	add.w	r2, r7, #16
 800d2e4:	4611      	mov	r1, r2
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f002 f9ce 	bl	800f688 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f002 fb88 	bl	800fa06 <SDMMC_CmdSendSCR>
 800d2f6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d022      	beq.n	800d344 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800d2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d300:	e07a      	b.n	800d3f8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d00e      	beq.n	800d32e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6819      	ldr	r1, [r3, #0]
 800d314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d316:	009b      	lsls	r3, r3, #2
 800d318:	f107 0208 	add.w	r2, r7, #8
 800d31c:	18d4      	adds	r4, r2, r3
 800d31e:	4608      	mov	r0, r1
 800d320:	f002 f92d 	bl	800f57e <SDIO_ReadFIFO>
 800d324:	4603      	mov	r3, r0
 800d326:	6023      	str	r3, [r4, #0]
      index++;
 800d328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d32a:	3301      	adds	r3, #1
 800d32c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d32e:	f7fb fd1f 	bl	8008d70 <HAL_GetTick>
 800d332:	4602      	mov	r2, r0
 800d334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d336:	1ad3      	subs	r3, r2, r3
 800d338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d33c:	d102      	bne.n	800d344 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d33e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d342:	e059      	b.n	800d3f8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d34a:	f240 432a 	movw	r3, #1066	; 0x42a
 800d34e:	4013      	ands	r3, r2
 800d350:	2b00      	cmp	r3, #0
 800d352:	d0d6      	beq.n	800d302 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d35a:	f003 0308 	and.w	r3, r3, #8
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d005      	beq.n	800d36e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	2208      	movs	r2, #8
 800d368:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d36a:	2308      	movs	r3, #8
 800d36c:	e044      	b.n	800d3f8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d374:	f003 0302 	and.w	r3, r3, #2
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d005      	beq.n	800d388 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	2202      	movs	r2, #2
 800d382:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d384:	2302      	movs	r3, #2
 800d386:	e037      	b.n	800d3f8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d38e:	f003 0320 	and.w	r3, r3, #32
 800d392:	2b00      	cmp	r3, #0
 800d394:	d005      	beq.n	800d3a2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	2220      	movs	r2, #32
 800d39c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d39e:	2320      	movs	r3, #32
 800d3a0:	e02a      	b.n	800d3f8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f240 523a 	movw	r2, #1338	; 0x53a
 800d3aa:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	061a      	lsls	r2, r3, #24
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	021b      	lsls	r3, r3, #8
 800d3b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d3b8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	0a1b      	lsrs	r3, r3, #8
 800d3be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d3c2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	0e1b      	lsrs	r3, r3, #24
 800d3c8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3cc:	601a      	str	r2, [r3, #0]
    scr++;
 800d3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d0:	3304      	adds	r3, #4
 800d3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	061a      	lsls	r2, r3, #24
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	021b      	lsls	r3, r3, #8
 800d3dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d3e0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	0a1b      	lsrs	r3, r3, #8
 800d3e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d3ea:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	0e1b      	lsrs	r3, r3, #24
 800d3f0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d3f6:	2300      	movs	r3, #0
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	373c      	adds	r7, #60	; 0x3c
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd90      	pop	{r4, r7, pc}

0800d400 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b086      	sub	sp, #24
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d40c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d412:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d03f      	beq.n	800d49a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800d41a:	2300      	movs	r3, #0
 800d41c:	617b      	str	r3, [r7, #20]
 800d41e:	e033      	b.n	800d488 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4618      	mov	r0, r3
 800d426:	f002 f8aa 	bl	800f57e <SDIO_ReadFIFO>
 800d42a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	b2da      	uxtb	r2, r3
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	3301      	adds	r3, #1
 800d438:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	3b01      	subs	r3, #1
 800d43e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	0a1b      	lsrs	r3, r3, #8
 800d444:	b2da      	uxtb	r2, r3
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	3301      	adds	r3, #1
 800d44e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	3b01      	subs	r3, #1
 800d454:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	0c1b      	lsrs	r3, r3, #16
 800d45a:	b2da      	uxtb	r2, r3
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	3301      	adds	r3, #1
 800d464:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	3b01      	subs	r3, #1
 800d46a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	0e1b      	lsrs	r3, r3, #24
 800d470:	b2da      	uxtb	r2, r3
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	3301      	adds	r3, #1
 800d47a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	3b01      	subs	r3, #1
 800d480:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	3301      	adds	r3, #1
 800d486:	617b      	str	r3, [r7, #20]
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	2b07      	cmp	r3, #7
 800d48c:	d9c8      	bls.n	800d420 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	68fa      	ldr	r2, [r7, #12]
 800d492:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	693a      	ldr	r2, [r7, #16]
 800d498:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800d49a:	bf00      	nop
 800d49c:	3718      	adds	r7, #24
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}

0800d4a2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d4a2:	b580      	push	{r7, lr}
 800d4a4:	b086      	sub	sp, #24
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6a1b      	ldr	r3, [r3, #32]
 800d4ae:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4b4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d043      	beq.n	800d544 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800d4bc:	2300      	movs	r3, #0
 800d4be:	617b      	str	r3, [r7, #20]
 800d4c0:	e037      	b.n	800d532 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	3b01      	subs	r3, #1
 800d4d2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	021a      	lsls	r2, r3, #8
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	4313      	orrs	r3, r2
 800d4de:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	3b01      	subs	r3, #1
 800d4ea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	041a      	lsls	r2, r3, #16
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	4313      	orrs	r3, r2
 800d4f6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	3301      	adds	r3, #1
 800d4fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	3b01      	subs	r3, #1
 800d502:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	061a      	lsls	r2, r3, #24
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	4313      	orrs	r3, r2
 800d50e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	3301      	adds	r3, #1
 800d514:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	3b01      	subs	r3, #1
 800d51a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f107 0208 	add.w	r2, r7, #8
 800d524:	4611      	mov	r1, r2
 800d526:	4618      	mov	r0, r3
 800d528:	f002 f836 	bl	800f598 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	3301      	adds	r3, #1
 800d530:	617b      	str	r3, [r7, #20]
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	2b07      	cmp	r3, #7
 800d536:	d9c4      	bls.n	800d4c2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	68fa      	ldr	r2, [r7, #12]
 800d53c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	693a      	ldr	r2, [r7, #16]
 800d542:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800d544:	bf00      	nop
 800d546:	3718      	adds	r7, #24
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d101      	bne.n	800d55e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d55a:	2301      	movs	r3, #1
 800d55c:	e056      	b.n	800d60c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2200      	movs	r2, #0
 800d562:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d56a:	b2db      	uxtb	r3, r3
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d106      	bne.n	800d57e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2200      	movs	r2, #0
 800d574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f7f9 fa63 	bl	8006a44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2202      	movs	r2, #2
 800d582:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	681a      	ldr	r2, [r3, #0]
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d594:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	685a      	ldr	r2, [r3, #4]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	689b      	ldr	r3, [r3, #8]
 800d59e:	431a      	orrs	r2, r3
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	68db      	ldr	r3, [r3, #12]
 800d5a4:	431a      	orrs	r2, r3
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	691b      	ldr	r3, [r3, #16]
 800d5aa:	431a      	orrs	r2, r3
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	695b      	ldr	r3, [r3, #20]
 800d5b0:	431a      	orrs	r2, r3
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	699b      	ldr	r3, [r3, #24]
 800d5b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d5ba:	431a      	orrs	r2, r3
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	69db      	ldr	r3, [r3, #28]
 800d5c0:	431a      	orrs	r2, r3
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6a1b      	ldr	r3, [r3, #32]
 800d5c6:	ea42 0103 	orr.w	r1, r2, r3
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	430a      	orrs	r2, r1
 800d5d4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	699b      	ldr	r3, [r3, #24]
 800d5da:	0c1b      	lsrs	r3, r3, #16
 800d5dc:	f003 0104 	and.w	r1, r3, #4
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	430a      	orrs	r2, r1
 800d5ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	69da      	ldr	r2, [r3, #28]
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d5fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2200      	movs	r2, #0
 800d600:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2201      	movs	r2, #1
 800d606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d60a:	2300      	movs	r3, #0
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3708      	adds	r7, #8
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b088      	sub	sp, #32
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	603b      	str	r3, [r7, #0]
 800d620:	4613      	mov	r3, r2
 800d622:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d624:	2300      	movs	r3, #0
 800d626:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d62e:	2b01      	cmp	r3, #1
 800d630:	d101      	bne.n	800d636 <HAL_SPI_Transmit+0x22>
 800d632:	2302      	movs	r3, #2
 800d634:	e11e      	b.n	800d874 <HAL_SPI_Transmit+0x260>
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2201      	movs	r2, #1
 800d63a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d63e:	f7fb fb97 	bl	8008d70 <HAL_GetTick>
 800d642:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d644:	88fb      	ldrh	r3, [r7, #6]
 800d646:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d64e:	b2db      	uxtb	r3, r3
 800d650:	2b01      	cmp	r3, #1
 800d652:	d002      	beq.n	800d65a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d654:	2302      	movs	r3, #2
 800d656:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d658:	e103      	b.n	800d862 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d002      	beq.n	800d666 <HAL_SPI_Transmit+0x52>
 800d660:	88fb      	ldrh	r3, [r7, #6]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d102      	bne.n	800d66c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d666:	2301      	movs	r3, #1
 800d668:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d66a:	e0fa      	b.n	800d862 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	2203      	movs	r2, #3
 800d670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	2200      	movs	r2, #0
 800d678:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	68ba      	ldr	r2, [r7, #8]
 800d67e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	88fa      	ldrh	r2, [r7, #6]
 800d684:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	88fa      	ldrh	r2, [r7, #6]
 800d68a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	2200      	movs	r2, #0
 800d690:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	2200      	movs	r2, #0
 800d696:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2200      	movs	r2, #0
 800d69c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	689b      	ldr	r3, [r3, #8]
 800d6ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d6b2:	d107      	bne.n	800d6c4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	681a      	ldr	r2, [r3, #0]
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d6c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6ce:	2b40      	cmp	r3, #64	; 0x40
 800d6d0:	d007      	beq.n	800d6e2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	681a      	ldr	r2, [r3, #0]
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d6e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d6ea:	d14b      	bne.n	800d784 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	685b      	ldr	r3, [r3, #4]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d002      	beq.n	800d6fa <HAL_SPI_Transmit+0xe6>
 800d6f4:	8afb      	ldrh	r3, [r7, #22]
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d13e      	bne.n	800d778 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6fe:	881a      	ldrh	r2, [r3, #0]
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d70a:	1c9a      	adds	r2, r3, #2
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d714:	b29b      	uxth	r3, r3
 800d716:	3b01      	subs	r3, #1
 800d718:	b29a      	uxth	r2, r3
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d71e:	e02b      	b.n	800d778 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	689b      	ldr	r3, [r3, #8]
 800d726:	f003 0302 	and.w	r3, r3, #2
 800d72a:	2b02      	cmp	r3, #2
 800d72c:	d112      	bne.n	800d754 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d732:	881a      	ldrh	r2, [r3, #0]
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d73e:	1c9a      	adds	r2, r3, #2
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d748:	b29b      	uxth	r3, r3
 800d74a:	3b01      	subs	r3, #1
 800d74c:	b29a      	uxth	r2, r3
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	86da      	strh	r2, [r3, #54]	; 0x36
 800d752:	e011      	b.n	800d778 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d754:	f7fb fb0c 	bl	8008d70 <HAL_GetTick>
 800d758:	4602      	mov	r2, r0
 800d75a:	69bb      	ldr	r3, [r7, #24]
 800d75c:	1ad3      	subs	r3, r2, r3
 800d75e:	683a      	ldr	r2, [r7, #0]
 800d760:	429a      	cmp	r2, r3
 800d762:	d803      	bhi.n	800d76c <HAL_SPI_Transmit+0x158>
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d76a:	d102      	bne.n	800d772 <HAL_SPI_Transmit+0x15e>
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d102      	bne.n	800d778 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800d772:	2303      	movs	r3, #3
 800d774:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d776:	e074      	b.n	800d862 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d77c:	b29b      	uxth	r3, r3
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d1ce      	bne.n	800d720 <HAL_SPI_Transmit+0x10c>
 800d782:	e04c      	b.n	800d81e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d002      	beq.n	800d792 <HAL_SPI_Transmit+0x17e>
 800d78c:	8afb      	ldrh	r3, [r7, #22]
 800d78e:	2b01      	cmp	r3, #1
 800d790:	d140      	bne.n	800d814 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	330c      	adds	r3, #12
 800d79c:	7812      	ldrb	r2, [r2, #0]
 800d79e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7a4:	1c5a      	adds	r2, r3, #1
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d7ae:	b29b      	uxth	r3, r3
 800d7b0:	3b01      	subs	r3, #1
 800d7b2:	b29a      	uxth	r2, r3
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d7b8:	e02c      	b.n	800d814 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	689b      	ldr	r3, [r3, #8]
 800d7c0:	f003 0302 	and.w	r3, r3, #2
 800d7c4:	2b02      	cmp	r3, #2
 800d7c6:	d113      	bne.n	800d7f0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	330c      	adds	r3, #12
 800d7d2:	7812      	ldrb	r2, [r2, #0]
 800d7d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7da:	1c5a      	adds	r2, r3, #1
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d7e4:	b29b      	uxth	r3, r3
 800d7e6:	3b01      	subs	r3, #1
 800d7e8:	b29a      	uxth	r2, r3
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	86da      	strh	r2, [r3, #54]	; 0x36
 800d7ee:	e011      	b.n	800d814 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d7f0:	f7fb fabe 	bl	8008d70 <HAL_GetTick>
 800d7f4:	4602      	mov	r2, r0
 800d7f6:	69bb      	ldr	r3, [r7, #24]
 800d7f8:	1ad3      	subs	r3, r2, r3
 800d7fa:	683a      	ldr	r2, [r7, #0]
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d803      	bhi.n	800d808 <HAL_SPI_Transmit+0x1f4>
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d806:	d102      	bne.n	800d80e <HAL_SPI_Transmit+0x1fa>
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d102      	bne.n	800d814 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800d80e:	2303      	movs	r3, #3
 800d810:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d812:	e026      	b.n	800d862 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d818:	b29b      	uxth	r3, r3
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d1cd      	bne.n	800d7ba <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d81e:	69ba      	ldr	r2, [r7, #24]
 800d820:	6839      	ldr	r1, [r7, #0]
 800d822:	68f8      	ldr	r0, [r7, #12]
 800d824:	f000 fba4 	bl	800df70 <SPI_EndRxTxTransaction>
 800d828:	4603      	mov	r3, r0
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d002      	beq.n	800d834 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2220      	movs	r2, #32
 800d832:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	689b      	ldr	r3, [r3, #8]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d10a      	bne.n	800d852 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d83c:	2300      	movs	r3, #0
 800d83e:	613b      	str	r3, [r7, #16]
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	68db      	ldr	r3, [r3, #12]
 800d846:	613b      	str	r3, [r7, #16]
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	689b      	ldr	r3, [r3, #8]
 800d84e:	613b      	str	r3, [r7, #16]
 800d850:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d856:	2b00      	cmp	r3, #0
 800d858:	d002      	beq.n	800d860 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800d85a:	2301      	movs	r3, #1
 800d85c:	77fb      	strb	r3, [r7, #31]
 800d85e:	e000      	b.n	800d862 <HAL_SPI_Transmit+0x24e>
  }

error:
 800d860:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2201      	movs	r2, #1
 800d866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	2200      	movs	r2, #0
 800d86e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d872:	7ffb      	ldrb	r3, [r7, #31]
}
 800d874:	4618      	mov	r0, r3
 800d876:	3720      	adds	r7, #32
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b088      	sub	sp, #32
 800d880:	af02      	add	r7, sp, #8
 800d882:	60f8      	str	r0, [r7, #12]
 800d884:	60b9      	str	r1, [r7, #8]
 800d886:	603b      	str	r3, [r7, #0]
 800d888:	4613      	mov	r3, r2
 800d88a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d88c:	2300      	movs	r3, #0
 800d88e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	685b      	ldr	r3, [r3, #4]
 800d894:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d898:	d112      	bne.n	800d8c0 <HAL_SPI_Receive+0x44>
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	689b      	ldr	r3, [r3, #8]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d10e      	bne.n	800d8c0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	2204      	movs	r2, #4
 800d8a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d8aa:	88fa      	ldrh	r2, [r7, #6]
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	9300      	str	r3, [sp, #0]
 800d8b0:	4613      	mov	r3, r2
 800d8b2:	68ba      	ldr	r2, [r7, #8]
 800d8b4:	68b9      	ldr	r1, [r7, #8]
 800d8b6:	68f8      	ldr	r0, [r7, #12]
 800d8b8:	f000 f8e9 	bl	800da8e <HAL_SPI_TransmitReceive>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	e0e2      	b.n	800da86 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d8c6:	2b01      	cmp	r3, #1
 800d8c8:	d101      	bne.n	800d8ce <HAL_SPI_Receive+0x52>
 800d8ca:	2302      	movs	r3, #2
 800d8cc:	e0db      	b.n	800da86 <HAL_SPI_Receive+0x20a>
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	2201      	movs	r2, #1
 800d8d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d8d6:	f7fb fa4b 	bl	8008d70 <HAL_GetTick>
 800d8da:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d8e2:	b2db      	uxtb	r3, r3
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d002      	beq.n	800d8ee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800d8e8:	2302      	movs	r3, #2
 800d8ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d8ec:	e0c2      	b.n	800da74 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d002      	beq.n	800d8fa <HAL_SPI_Receive+0x7e>
 800d8f4:	88fb      	ldrh	r3, [r7, #6]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d102      	bne.n	800d900 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d8fe:	e0b9      	b.n	800da74 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	2204      	movs	r2, #4
 800d904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	2200      	movs	r2, #0
 800d90c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	68ba      	ldr	r2, [r7, #8]
 800d912:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	88fa      	ldrh	r2, [r7, #6]
 800d918:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	88fa      	ldrh	r2, [r7, #6]
 800d91e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2200      	movs	r2, #0
 800d924:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	2200      	movs	r2, #0
 800d92a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	2200      	movs	r2, #0
 800d930:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2200      	movs	r2, #0
 800d936:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2200      	movs	r2, #0
 800d93c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	689b      	ldr	r3, [r3, #8]
 800d942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d946:	d107      	bne.n	800d958 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d956:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d962:	2b40      	cmp	r3, #64	; 0x40
 800d964:	d007      	beq.n	800d976 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	681a      	ldr	r2, [r3, #0]
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d974:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	68db      	ldr	r3, [r3, #12]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d162      	bne.n	800da44 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d97e:	e02e      	b.n	800d9de <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	689b      	ldr	r3, [r3, #8]
 800d986:	f003 0301 	and.w	r3, r3, #1
 800d98a:	2b01      	cmp	r3, #1
 800d98c:	d115      	bne.n	800d9ba <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	f103 020c 	add.w	r2, r3, #12
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d99a:	7812      	ldrb	r2, [r2, #0]
 800d99c:	b2d2      	uxtb	r2, r2
 800d99e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9a4:	1c5a      	adds	r2, r3, #1
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d9ae:	b29b      	uxth	r3, r3
 800d9b0:	3b01      	subs	r3, #1
 800d9b2:	b29a      	uxth	r2, r3
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d9b8:	e011      	b.n	800d9de <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d9ba:	f7fb f9d9 	bl	8008d70 <HAL_GetTick>
 800d9be:	4602      	mov	r2, r0
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	1ad3      	subs	r3, r2, r3
 800d9c4:	683a      	ldr	r2, [r7, #0]
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d803      	bhi.n	800d9d2 <HAL_SPI_Receive+0x156>
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9d0:	d102      	bne.n	800d9d8 <HAL_SPI_Receive+0x15c>
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d102      	bne.n	800d9de <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800d9d8:	2303      	movs	r3, #3
 800d9da:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d9dc:	e04a      	b.n	800da74 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d9e2:	b29b      	uxth	r3, r3
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d1cb      	bne.n	800d980 <HAL_SPI_Receive+0x104>
 800d9e8:	e031      	b.n	800da4e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	689b      	ldr	r3, [r3, #8]
 800d9f0:	f003 0301 	and.w	r3, r3, #1
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d113      	bne.n	800da20 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	68da      	ldr	r2, [r3, #12]
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da02:	b292      	uxth	r2, r2
 800da04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da0a:	1c9a      	adds	r2, r3, #2
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da14:	b29b      	uxth	r3, r3
 800da16:	3b01      	subs	r3, #1
 800da18:	b29a      	uxth	r2, r3
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800da1e:	e011      	b.n	800da44 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da20:	f7fb f9a6 	bl	8008d70 <HAL_GetTick>
 800da24:	4602      	mov	r2, r0
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	1ad3      	subs	r3, r2, r3
 800da2a:	683a      	ldr	r2, [r7, #0]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d803      	bhi.n	800da38 <HAL_SPI_Receive+0x1bc>
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da36:	d102      	bne.n	800da3e <HAL_SPI_Receive+0x1c2>
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d102      	bne.n	800da44 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800da3e:	2303      	movs	r3, #3
 800da40:	75fb      	strb	r3, [r7, #23]
          goto error;
 800da42:	e017      	b.n	800da74 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da48:	b29b      	uxth	r3, r3
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d1cd      	bne.n	800d9ea <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800da4e:	693a      	ldr	r2, [r7, #16]
 800da50:	6839      	ldr	r1, [r7, #0]
 800da52:	68f8      	ldr	r0, [r7, #12]
 800da54:	f000 fa27 	bl	800dea6 <SPI_EndRxTransaction>
 800da58:	4603      	mov	r3, r0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d002      	beq.n	800da64 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2220      	movs	r2, #32
 800da62:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d002      	beq.n	800da72 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800da6c:	2301      	movs	r3, #1
 800da6e:	75fb      	strb	r3, [r7, #23]
 800da70:	e000      	b.n	800da74 <HAL_SPI_Receive+0x1f8>
  }

error :
 800da72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	2201      	movs	r2, #1
 800da78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	2200      	movs	r2, #0
 800da80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800da84:	7dfb      	ldrb	r3, [r7, #23]
}
 800da86:	4618      	mov	r0, r3
 800da88:	3718      	adds	r7, #24
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}

0800da8e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800da8e:	b580      	push	{r7, lr}
 800da90:	b08c      	sub	sp, #48	; 0x30
 800da92:	af00      	add	r7, sp, #0
 800da94:	60f8      	str	r0, [r7, #12]
 800da96:	60b9      	str	r1, [r7, #8]
 800da98:	607a      	str	r2, [r7, #4]
 800da9a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800da9c:	2301      	movs	r3, #1
 800da9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800daa0:	2300      	movs	r3, #0
 800daa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800daac:	2b01      	cmp	r3, #1
 800daae:	d101      	bne.n	800dab4 <HAL_SPI_TransmitReceive+0x26>
 800dab0:	2302      	movs	r3, #2
 800dab2:	e18a      	b.n	800ddca <HAL_SPI_TransmitReceive+0x33c>
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2201      	movs	r2, #1
 800dab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dabc:	f7fb f958 	bl	8008d70 <HAL_GetTick>
 800dac0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dac8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800dad2:	887b      	ldrh	r3, [r7, #2]
 800dad4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800dad6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dada:	2b01      	cmp	r3, #1
 800dadc:	d00f      	beq.n	800dafe <HAL_SPI_TransmitReceive+0x70>
 800dade:	69fb      	ldr	r3, [r7, #28]
 800dae0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dae4:	d107      	bne.n	800daf6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	689b      	ldr	r3, [r3, #8]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d103      	bne.n	800daf6 <HAL_SPI_TransmitReceive+0x68>
 800daee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800daf2:	2b04      	cmp	r3, #4
 800daf4:	d003      	beq.n	800dafe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800daf6:	2302      	movs	r3, #2
 800daf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800dafc:	e15b      	b.n	800ddb6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d005      	beq.n	800db10 <HAL_SPI_TransmitReceive+0x82>
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d002      	beq.n	800db10 <HAL_SPI_TransmitReceive+0x82>
 800db0a:	887b      	ldrh	r3, [r7, #2]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d103      	bne.n	800db18 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800db10:	2301      	movs	r3, #1
 800db12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800db16:	e14e      	b.n	800ddb6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800db1e:	b2db      	uxtb	r3, r3
 800db20:	2b04      	cmp	r3, #4
 800db22:	d003      	beq.n	800db2c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	2205      	movs	r2, #5
 800db28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	2200      	movs	r2, #0
 800db30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	687a      	ldr	r2, [r7, #4]
 800db36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	887a      	ldrh	r2, [r7, #2]
 800db3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	887a      	ldrh	r2, [r7, #2]
 800db42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	68ba      	ldr	r2, [r7, #8]
 800db48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	887a      	ldrh	r2, [r7, #2]
 800db4e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	887a      	ldrh	r2, [r7, #2]
 800db54:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2200      	movs	r2, #0
 800db5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2200      	movs	r2, #0
 800db60:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db6c:	2b40      	cmp	r3, #64	; 0x40
 800db6e:	d007      	beq.n	800db80 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	681a      	ldr	r2, [r3, #0]
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800db7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	68db      	ldr	r3, [r3, #12]
 800db84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db88:	d178      	bne.n	800dc7c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	685b      	ldr	r3, [r3, #4]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d002      	beq.n	800db98 <HAL_SPI_TransmitReceive+0x10a>
 800db92:	8b7b      	ldrh	r3, [r7, #26]
 800db94:	2b01      	cmp	r3, #1
 800db96:	d166      	bne.n	800dc66 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db9c:	881a      	ldrh	r2, [r3, #0]
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dba8:	1c9a      	adds	r2, r3, #2
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	3b01      	subs	r3, #1
 800dbb6:	b29a      	uxth	r2, r3
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dbbc:	e053      	b.n	800dc66 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	689b      	ldr	r3, [r3, #8]
 800dbc4:	f003 0302 	and.w	r3, r3, #2
 800dbc8:	2b02      	cmp	r3, #2
 800dbca:	d11b      	bne.n	800dc04 <HAL_SPI_TransmitReceive+0x176>
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dbd0:	b29b      	uxth	r3, r3
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d016      	beq.n	800dc04 <HAL_SPI_TransmitReceive+0x176>
 800dbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd8:	2b01      	cmp	r3, #1
 800dbda:	d113      	bne.n	800dc04 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbe0:	881a      	ldrh	r2, [r3, #0]
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbec:	1c9a      	adds	r2, r3, #2
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	3b01      	subs	r3, #1
 800dbfa:	b29a      	uxth	r2, r3
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dc00:	2300      	movs	r3, #0
 800dc02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	689b      	ldr	r3, [r3, #8]
 800dc0a:	f003 0301 	and.w	r3, r3, #1
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	d119      	bne.n	800dc46 <HAL_SPI_TransmitReceive+0x1b8>
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d014      	beq.n	800dc46 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	68da      	ldr	r2, [r3, #12]
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc26:	b292      	uxth	r2, r2
 800dc28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc2e:	1c9a      	adds	r2, r3, #2
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc38:	b29b      	uxth	r3, r3
 800dc3a:	3b01      	subs	r3, #1
 800dc3c:	b29a      	uxth	r2, r3
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dc42:	2301      	movs	r3, #1
 800dc44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800dc46:	f7fb f893 	bl	8008d70 <HAL_GetTick>
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4e:	1ad3      	subs	r3, r2, r3
 800dc50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d807      	bhi.n	800dc66 <HAL_SPI_TransmitReceive+0x1d8>
 800dc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc5c:	d003      	beq.n	800dc66 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800dc5e:	2303      	movs	r3, #3
 800dc60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800dc64:	e0a7      	b.n	800ddb6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc6a:	b29b      	uxth	r3, r3
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d1a6      	bne.n	800dbbe <HAL_SPI_TransmitReceive+0x130>
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc74:	b29b      	uxth	r3, r3
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d1a1      	bne.n	800dbbe <HAL_SPI_TransmitReceive+0x130>
 800dc7a:	e07c      	b.n	800dd76 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	685b      	ldr	r3, [r3, #4]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d002      	beq.n	800dc8a <HAL_SPI_TransmitReceive+0x1fc>
 800dc84:	8b7b      	ldrh	r3, [r7, #26]
 800dc86:	2b01      	cmp	r3, #1
 800dc88:	d16b      	bne.n	800dd62 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	330c      	adds	r3, #12
 800dc94:	7812      	ldrb	r2, [r2, #0]
 800dc96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc9c:	1c5a      	adds	r2, r3, #1
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dca6:	b29b      	uxth	r3, r3
 800dca8:	3b01      	subs	r3, #1
 800dcaa:	b29a      	uxth	r2, r3
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dcb0:	e057      	b.n	800dd62 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	689b      	ldr	r3, [r3, #8]
 800dcb8:	f003 0302 	and.w	r3, r3, #2
 800dcbc:	2b02      	cmp	r3, #2
 800dcbe:	d11c      	bne.n	800dcfa <HAL_SPI_TransmitReceive+0x26c>
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dcc4:	b29b      	uxth	r3, r3
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d017      	beq.n	800dcfa <HAL_SPI_TransmitReceive+0x26c>
 800dcca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	d114      	bne.n	800dcfa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	330c      	adds	r3, #12
 800dcda:	7812      	ldrb	r2, [r2, #0]
 800dcdc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dce2:	1c5a      	adds	r2, r3, #1
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dcec:	b29b      	uxth	r3, r3
 800dcee:	3b01      	subs	r3, #1
 800dcf0:	b29a      	uxth	r2, r3
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	689b      	ldr	r3, [r3, #8]
 800dd00:	f003 0301 	and.w	r3, r3, #1
 800dd04:	2b01      	cmp	r3, #1
 800dd06:	d119      	bne.n	800dd3c <HAL_SPI_TransmitReceive+0x2ae>
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd0c:	b29b      	uxth	r3, r3
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d014      	beq.n	800dd3c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	68da      	ldr	r2, [r3, #12]
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd1c:	b2d2      	uxtb	r2, r2
 800dd1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd24:	1c5a      	adds	r2, r3, #1
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	3b01      	subs	r3, #1
 800dd32:	b29a      	uxth	r2, r3
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dd38:	2301      	movs	r3, #1
 800dd3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800dd3c:	f7fb f818 	bl	8008d70 <HAL_GetTick>
 800dd40:	4602      	mov	r2, r0
 800dd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd44:	1ad3      	subs	r3, r2, r3
 800dd46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d803      	bhi.n	800dd54 <HAL_SPI_TransmitReceive+0x2c6>
 800dd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd52:	d102      	bne.n	800dd5a <HAL_SPI_TransmitReceive+0x2cc>
 800dd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d103      	bne.n	800dd62 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800dd5a:	2303      	movs	r3, #3
 800dd5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800dd60:	e029      	b.n	800ddb6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd66:	b29b      	uxth	r3, r3
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d1a2      	bne.n	800dcb2 <HAL_SPI_TransmitReceive+0x224>
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd70:	b29b      	uxth	r3, r3
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d19d      	bne.n	800dcb2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dd76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dd7a:	68f8      	ldr	r0, [r7, #12]
 800dd7c:	f000 f8f8 	bl	800df70 <SPI_EndRxTxTransaction>
 800dd80:	4603      	mov	r3, r0
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d006      	beq.n	800dd94 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800dd86:	2301      	movs	r3, #1
 800dd88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	2220      	movs	r2, #32
 800dd90:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800dd92:	e010      	b.n	800ddb6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	689b      	ldr	r3, [r3, #8]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d10b      	bne.n	800ddb4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	617b      	str	r3, [r7, #20]
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	68db      	ldr	r3, [r3, #12]
 800dda6:	617b      	str	r3, [r7, #20]
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	689b      	ldr	r3, [r3, #8]
 800ddae:	617b      	str	r3, [r7, #20]
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	e000      	b.n	800ddb6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ddb4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	2201      	movs	r2, #1
 800ddba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ddc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3730      	adds	r7, #48	; 0x30
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}

0800ddd2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ddd2:	b580      	push	{r7, lr}
 800ddd4:	b084      	sub	sp, #16
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	60f8      	str	r0, [r7, #12]
 800ddda:	60b9      	str	r1, [r7, #8]
 800dddc:	603b      	str	r3, [r7, #0]
 800ddde:	4613      	mov	r3, r2
 800dde0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dde2:	e04c      	b.n	800de7e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddea:	d048      	beq.n	800de7e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ddec:	f7fa ffc0 	bl	8008d70 <HAL_GetTick>
 800ddf0:	4602      	mov	r2, r0
 800ddf2:	69bb      	ldr	r3, [r7, #24]
 800ddf4:	1ad3      	subs	r3, r2, r3
 800ddf6:	683a      	ldr	r2, [r7, #0]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d902      	bls.n	800de02 <SPI_WaitFlagStateUntilTimeout+0x30>
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d13d      	bne.n	800de7e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	685a      	ldr	r2, [r3, #4]
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800de10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800de1a:	d111      	bne.n	800de40 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	689b      	ldr	r3, [r3, #8]
 800de20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de24:	d004      	beq.n	800de30 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	689b      	ldr	r3, [r3, #8]
 800de2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de2e:	d107      	bne.n	800de40 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	681a      	ldr	r2, [r3, #0]
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de48:	d10f      	bne.n	800de6a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	681a      	ldr	r2, [r3, #0]
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800de58:	601a      	str	r2, [r3, #0]
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	681a      	ldr	r2, [r3, #0]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800de68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	2201      	movs	r2, #1
 800de6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2200      	movs	r2, #0
 800de76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800de7a:	2303      	movs	r3, #3
 800de7c:	e00f      	b.n	800de9e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	689a      	ldr	r2, [r3, #8]
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	4013      	ands	r3, r2
 800de88:	68ba      	ldr	r2, [r7, #8]
 800de8a:	429a      	cmp	r2, r3
 800de8c:	bf0c      	ite	eq
 800de8e:	2301      	moveq	r3, #1
 800de90:	2300      	movne	r3, #0
 800de92:	b2db      	uxtb	r3, r3
 800de94:	461a      	mov	r2, r3
 800de96:	79fb      	ldrb	r3, [r7, #7]
 800de98:	429a      	cmp	r2, r3
 800de9a:	d1a3      	bne.n	800dde4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800de9c:	2300      	movs	r3, #0
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3710      	adds	r7, #16
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}

0800dea6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800dea6:	b580      	push	{r7, lr}
 800dea8:	b086      	sub	sp, #24
 800deaa:	af02      	add	r7, sp, #8
 800deac:	60f8      	str	r0, [r7, #12]
 800deae:	60b9      	str	r1, [r7, #8]
 800deb0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800deba:	d111      	bne.n	800dee0 <SPI_EndRxTransaction+0x3a>
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	689b      	ldr	r3, [r3, #8]
 800dec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dec4:	d004      	beq.n	800ded0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	689b      	ldr	r3, [r3, #8]
 800deca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dece:	d107      	bne.n	800dee0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	681a      	ldr	r2, [r3, #0]
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dede:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dee8:	d12a      	bne.n	800df40 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	689b      	ldr	r3, [r3, #8]
 800deee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800def2:	d012      	beq.n	800df1a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	9300      	str	r3, [sp, #0]
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	2200      	movs	r2, #0
 800defc:	2180      	movs	r1, #128	; 0x80
 800defe:	68f8      	ldr	r0, [r7, #12]
 800df00:	f7ff ff67 	bl	800ddd2 <SPI_WaitFlagStateUntilTimeout>
 800df04:	4603      	mov	r3, r0
 800df06:	2b00      	cmp	r3, #0
 800df08:	d02d      	beq.n	800df66 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df0e:	f043 0220 	orr.w	r2, r3, #32
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800df16:	2303      	movs	r3, #3
 800df18:	e026      	b.n	800df68 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	9300      	str	r3, [sp, #0]
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	2200      	movs	r2, #0
 800df22:	2101      	movs	r1, #1
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f7ff ff54 	bl	800ddd2 <SPI_WaitFlagStateUntilTimeout>
 800df2a:	4603      	mov	r3, r0
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d01a      	beq.n	800df66 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df34:	f043 0220 	orr.w	r2, r3, #32
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800df3c:	2303      	movs	r3, #3
 800df3e:	e013      	b.n	800df68 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	9300      	str	r3, [sp, #0]
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	2200      	movs	r2, #0
 800df48:	2101      	movs	r1, #1
 800df4a:	68f8      	ldr	r0, [r7, #12]
 800df4c:	f7ff ff41 	bl	800ddd2 <SPI_WaitFlagStateUntilTimeout>
 800df50:	4603      	mov	r3, r0
 800df52:	2b00      	cmp	r3, #0
 800df54:	d007      	beq.n	800df66 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df5a:	f043 0220 	orr.w	r2, r3, #32
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800df62:	2303      	movs	r3, #3
 800df64:	e000      	b.n	800df68 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800df66:	2300      	movs	r3, #0
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3710      	adds	r7, #16
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b088      	sub	sp, #32
 800df74:	af02      	add	r7, sp, #8
 800df76:	60f8      	str	r0, [r7, #12]
 800df78:	60b9      	str	r1, [r7, #8]
 800df7a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800df7c:	4b1b      	ldr	r3, [pc, #108]	; (800dfec <SPI_EndRxTxTransaction+0x7c>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4a1b      	ldr	r2, [pc, #108]	; (800dff0 <SPI_EndRxTxTransaction+0x80>)
 800df82:	fba2 2303 	umull	r2, r3, r2, r3
 800df86:	0d5b      	lsrs	r3, r3, #21
 800df88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800df8c:	fb02 f303 	mul.w	r3, r2, r3
 800df90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df9a:	d112      	bne.n	800dfc2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	9300      	str	r3, [sp, #0]
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	2180      	movs	r1, #128	; 0x80
 800dfa6:	68f8      	ldr	r0, [r7, #12]
 800dfa8:	f7ff ff13 	bl	800ddd2 <SPI_WaitFlagStateUntilTimeout>
 800dfac:	4603      	mov	r3, r0
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d016      	beq.n	800dfe0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfb6:	f043 0220 	orr.w	r2, r3, #32
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800dfbe:	2303      	movs	r3, #3
 800dfc0:	e00f      	b.n	800dfe2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d00a      	beq.n	800dfde <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	3b01      	subs	r3, #1
 800dfcc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	689b      	ldr	r3, [r3, #8]
 800dfd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfd8:	2b80      	cmp	r3, #128	; 0x80
 800dfda:	d0f2      	beq.n	800dfc2 <SPI_EndRxTxTransaction+0x52>
 800dfdc:	e000      	b.n	800dfe0 <SPI_EndRxTxTransaction+0x70>
        break;
 800dfde:	bf00      	nop
  }

  return HAL_OK;
 800dfe0:	2300      	movs	r3, #0
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3718      	adds	r7, #24
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
 800dfea:	bf00      	nop
 800dfec:	20000000 	.word	0x20000000
 800dff0:	165e9f81 	.word	0x165e9f81

0800dff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d101      	bne.n	800e006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e002:	2301      	movs	r3, #1
 800e004:	e01d      	b.n	800e042 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e00c:	b2db      	uxtb	r3, r3
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d106      	bne.n	800e020 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2200      	movs	r2, #0
 800e016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f7f8 fdce 	bl	8006bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2202      	movs	r2, #2
 800e024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681a      	ldr	r2, [r3, #0]
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	3304      	adds	r3, #4
 800e030:	4619      	mov	r1, r3
 800e032:	4610      	mov	r0, r2
 800e034:	f000 fb56 	bl	800e6e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2201      	movs	r2, #1
 800e03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e040:	2300      	movs	r3, #0
}
 800e042:	4618      	mov	r0, r3
 800e044:	3708      	adds	r7, #8
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}

0800e04a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e04a:	b480      	push	{r7}
 800e04c:	b085      	sub	sp, #20
 800e04e:	af00      	add	r7, sp, #0
 800e050:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	68da      	ldr	r2, [r3, #12]
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	f042 0201 	orr.w	r2, r2, #1
 800e060:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	689b      	ldr	r3, [r3, #8]
 800e068:	f003 0307 	and.w	r3, r3, #7
 800e06c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2b06      	cmp	r3, #6
 800e072:	d007      	beq.n	800e084 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	681a      	ldr	r2, [r3, #0]
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	f042 0201 	orr.w	r2, r2, #1
 800e082:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e084:	2300      	movs	r3, #0
}
 800e086:	4618      	mov	r0, r3
 800e088:	3714      	adds	r7, #20
 800e08a:	46bd      	mov	sp, r7
 800e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e090:	4770      	bx	lr

0800e092 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e092:	b580      	push	{r7, lr}
 800e094:	b082      	sub	sp, #8
 800e096:	af00      	add	r7, sp, #0
 800e098:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d101      	bne.n	800e0a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	e01d      	b.n	800e0e0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d106      	bne.n	800e0be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f7f8 fd0b 	bl	8006ad4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2202      	movs	r2, #2
 800e0c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	3304      	adds	r3, #4
 800e0ce:	4619      	mov	r1, r3
 800e0d0:	4610      	mov	r0, r2
 800e0d2:	f000 fb07 	bl	800e6e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2201      	movs	r2, #1
 800e0da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e0de:	2300      	movs	r3, #0
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3708      	adds	r7, #8
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}

0800e0e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b084      	sub	sp, #16
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	2201      	movs	r2, #1
 800e0f8:	6839      	ldr	r1, [r7, #0]
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f000 fd42 	bl	800eb84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	4a15      	ldr	r2, [pc, #84]	; (800e15c <HAL_TIM_PWM_Start+0x74>)
 800e106:	4293      	cmp	r3, r2
 800e108:	d004      	beq.n	800e114 <HAL_TIM_PWM_Start+0x2c>
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	4a14      	ldr	r2, [pc, #80]	; (800e160 <HAL_TIM_PWM_Start+0x78>)
 800e110:	4293      	cmp	r3, r2
 800e112:	d101      	bne.n	800e118 <HAL_TIM_PWM_Start+0x30>
 800e114:	2301      	movs	r3, #1
 800e116:	e000      	b.n	800e11a <HAL_TIM_PWM_Start+0x32>
 800e118:	2300      	movs	r3, #0
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d007      	beq.n	800e12e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e12c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	689b      	ldr	r3, [r3, #8]
 800e134:	f003 0307 	and.w	r3, r3, #7
 800e138:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2b06      	cmp	r3, #6
 800e13e:	d007      	beq.n	800e150 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	681a      	ldr	r2, [r3, #0]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f042 0201 	orr.w	r2, r2, #1
 800e14e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e150:	2300      	movs	r3, #0
}
 800e152:	4618      	mov	r0, r3
 800e154:	3710      	adds	r7, #16
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}
 800e15a:	bf00      	nop
 800e15c:	40010000 	.word	0x40010000
 800e160:	40010400 	.word	0x40010400

0800e164 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b086      	sub	sp, #24
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d101      	bne.n	800e178 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e174:	2301      	movs	r3, #1
 800e176:	e083      	b.n	800e280 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e17e:	b2db      	uxtb	r3, r3
 800e180:	2b00      	cmp	r3, #0
 800e182:	d106      	bne.n	800e192 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2200      	movs	r2, #0
 800e188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f7f8 fda5 	bl	8006cdc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2202      	movs	r2, #2
 800e196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	689b      	ldr	r3, [r3, #8]
 800e1a0:	687a      	ldr	r2, [r7, #4]
 800e1a2:	6812      	ldr	r2, [r2, #0]
 800e1a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e1a8:	f023 0307 	bic.w	r3, r3, #7
 800e1ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681a      	ldr	r2, [r3, #0]
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	3304      	adds	r3, #4
 800e1b6:	4619      	mov	r1, r3
 800e1b8:	4610      	mov	r0, r2
 800e1ba:	f000 fa93 	bl	800e6e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	689b      	ldr	r3, [r3, #8]
 800e1c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	699b      	ldr	r3, [r3, #24]
 800e1cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	6a1b      	ldr	r3, [r3, #32]
 800e1d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	697a      	ldr	r2, [r7, #20]
 800e1dc:	4313      	orrs	r3, r2
 800e1de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e1e6:	f023 0303 	bic.w	r3, r3, #3
 800e1ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	689a      	ldr	r2, [r3, #8]
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	699b      	ldr	r3, [r3, #24]
 800e1f4:	021b      	lsls	r3, r3, #8
 800e1f6:	4313      	orrs	r3, r2
 800e1f8:	693a      	ldr	r2, [r7, #16]
 800e1fa:	4313      	orrs	r3, r2
 800e1fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e204:	f023 030c 	bic.w	r3, r3, #12
 800e208:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e210:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e214:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	68da      	ldr	r2, [r3, #12]
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	69db      	ldr	r3, [r3, #28]
 800e21e:	021b      	lsls	r3, r3, #8
 800e220:	4313      	orrs	r3, r2
 800e222:	693a      	ldr	r2, [r7, #16]
 800e224:	4313      	orrs	r3, r2
 800e226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	691b      	ldr	r3, [r3, #16]
 800e22c:	011a      	lsls	r2, r3, #4
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	6a1b      	ldr	r3, [r3, #32]
 800e232:	031b      	lsls	r3, r3, #12
 800e234:	4313      	orrs	r3, r2
 800e236:	693a      	ldr	r2, [r7, #16]
 800e238:	4313      	orrs	r3, r2
 800e23a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e242:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e24a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	685a      	ldr	r2, [r3, #4]
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	695b      	ldr	r3, [r3, #20]
 800e254:	011b      	lsls	r3, r3, #4
 800e256:	4313      	orrs	r3, r2
 800e258:	68fa      	ldr	r2, [r7, #12]
 800e25a:	4313      	orrs	r3, r2
 800e25c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	697a      	ldr	r2, [r7, #20]
 800e264:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	693a      	ldr	r2, [r7, #16]
 800e26c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	68fa      	ldr	r2, [r7, #12]
 800e274:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2201      	movs	r2, #1
 800e27a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e27e:	2300      	movs	r3, #0
}
 800e280:	4618      	mov	r0, r3
 800e282:	3718      	adds	r7, #24
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}

0800e288 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b082      	sub	sp, #8
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
 800e290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d002      	beq.n	800e29e <HAL_TIM_Encoder_Start+0x16>
 800e298:	2b04      	cmp	r3, #4
 800e29a:	d008      	beq.n	800e2ae <HAL_TIM_Encoder_Start+0x26>
 800e29c:	e00f      	b.n	800e2be <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	2201      	movs	r2, #1
 800e2a4:	2100      	movs	r1, #0
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f000 fc6c 	bl	800eb84 <TIM_CCxChannelCmd>
      break;
 800e2ac:	e016      	b.n	800e2dc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	2104      	movs	r1, #4
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f000 fc64 	bl	800eb84 <TIM_CCxChannelCmd>
      break;
 800e2bc:	e00e      	b.n	800e2dc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	2100      	movs	r1, #0
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f000 fc5c 	bl	800eb84 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	2104      	movs	r1, #4
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f000 fc55 	bl	800eb84 <TIM_CCxChannelCmd>
      break;
 800e2da:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	681a      	ldr	r2, [r3, #0]
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	f042 0201 	orr.w	r2, r2, #1
 800e2ea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e2ec:	2300      	movs	r3, #0
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3708      	adds	r7, #8
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}

0800e2f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e2f6:	b580      	push	{r7, lr}
 800e2f8:	b082      	sub	sp, #8
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	691b      	ldr	r3, [r3, #16]
 800e304:	f003 0302 	and.w	r3, r3, #2
 800e308:	2b02      	cmp	r3, #2
 800e30a:	d122      	bne.n	800e352 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	68db      	ldr	r3, [r3, #12]
 800e312:	f003 0302 	and.w	r3, r3, #2
 800e316:	2b02      	cmp	r3, #2
 800e318:	d11b      	bne.n	800e352 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f06f 0202 	mvn.w	r2, #2
 800e322:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2201      	movs	r2, #1
 800e328:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	699b      	ldr	r3, [r3, #24]
 800e330:	f003 0303 	and.w	r3, r3, #3
 800e334:	2b00      	cmp	r3, #0
 800e336:	d003      	beq.n	800e340 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f000 f9b5 	bl	800e6a8 <HAL_TIM_IC_CaptureCallback>
 800e33e:	e005      	b.n	800e34c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f000 f9a7 	bl	800e694 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f000 f9b8 	bl	800e6bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2200      	movs	r2, #0
 800e350:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	691b      	ldr	r3, [r3, #16]
 800e358:	f003 0304 	and.w	r3, r3, #4
 800e35c:	2b04      	cmp	r3, #4
 800e35e:	d122      	bne.n	800e3a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	68db      	ldr	r3, [r3, #12]
 800e366:	f003 0304 	and.w	r3, r3, #4
 800e36a:	2b04      	cmp	r3, #4
 800e36c:	d11b      	bne.n	800e3a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f06f 0204 	mvn.w	r2, #4
 800e376:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2202      	movs	r2, #2
 800e37c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	699b      	ldr	r3, [r3, #24]
 800e384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d003      	beq.n	800e394 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f000 f98b 	bl	800e6a8 <HAL_TIM_IC_CaptureCallback>
 800e392:	e005      	b.n	800e3a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f000 f97d 	bl	800e694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f000 f98e 	bl	800e6bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	691b      	ldr	r3, [r3, #16]
 800e3ac:	f003 0308 	and.w	r3, r3, #8
 800e3b0:	2b08      	cmp	r3, #8
 800e3b2:	d122      	bne.n	800e3fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	68db      	ldr	r3, [r3, #12]
 800e3ba:	f003 0308 	and.w	r3, r3, #8
 800e3be:	2b08      	cmp	r3, #8
 800e3c0:	d11b      	bne.n	800e3fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f06f 0208 	mvn.w	r2, #8
 800e3ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2204      	movs	r2, #4
 800e3d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	69db      	ldr	r3, [r3, #28]
 800e3d8:	f003 0303 	and.w	r3, r3, #3
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d003      	beq.n	800e3e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f000 f961 	bl	800e6a8 <HAL_TIM_IC_CaptureCallback>
 800e3e6:	e005      	b.n	800e3f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f000 f953 	bl	800e694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f000 f964 	bl	800e6bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	691b      	ldr	r3, [r3, #16]
 800e400:	f003 0310 	and.w	r3, r3, #16
 800e404:	2b10      	cmp	r3, #16
 800e406:	d122      	bne.n	800e44e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	68db      	ldr	r3, [r3, #12]
 800e40e:	f003 0310 	and.w	r3, r3, #16
 800e412:	2b10      	cmp	r3, #16
 800e414:	d11b      	bne.n	800e44e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f06f 0210 	mvn.w	r2, #16
 800e41e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2208      	movs	r2, #8
 800e424:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	69db      	ldr	r3, [r3, #28]
 800e42c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e430:	2b00      	cmp	r3, #0
 800e432:	d003      	beq.n	800e43c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f000 f937 	bl	800e6a8 <HAL_TIM_IC_CaptureCallback>
 800e43a:	e005      	b.n	800e448 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f000 f929 	bl	800e694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f000 f93a 	bl	800e6bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2200      	movs	r2, #0
 800e44c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	691b      	ldr	r3, [r3, #16]
 800e454:	f003 0301 	and.w	r3, r3, #1
 800e458:	2b01      	cmp	r3, #1
 800e45a:	d10e      	bne.n	800e47a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	68db      	ldr	r3, [r3, #12]
 800e462:	f003 0301 	and.w	r3, r3, #1
 800e466:	2b01      	cmp	r3, #1
 800e468:	d107      	bne.n	800e47a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	f06f 0201 	mvn.w	r2, #1
 800e472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f7f7 f91b 	bl	80056b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	691b      	ldr	r3, [r3, #16]
 800e480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e484:	2b80      	cmp	r3, #128	; 0x80
 800e486:	d10e      	bne.n	800e4a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	68db      	ldr	r3, [r3, #12]
 800e48e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e492:	2b80      	cmp	r3, #128	; 0x80
 800e494:	d107      	bne.n	800e4a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e49e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f000 fc6d 	bl	800ed80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	691b      	ldr	r3, [r3, #16]
 800e4ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4b0:	2b40      	cmp	r3, #64	; 0x40
 800e4b2:	d10e      	bne.n	800e4d2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	68db      	ldr	r3, [r3, #12]
 800e4ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4be:	2b40      	cmp	r3, #64	; 0x40
 800e4c0:	d107      	bne.n	800e4d2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e4ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f000 f8ff 	bl	800e6d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	691b      	ldr	r3, [r3, #16]
 800e4d8:	f003 0320 	and.w	r3, r3, #32
 800e4dc:	2b20      	cmp	r3, #32
 800e4de:	d10e      	bne.n	800e4fe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	68db      	ldr	r3, [r3, #12]
 800e4e6:	f003 0320 	and.w	r3, r3, #32
 800e4ea:	2b20      	cmp	r3, #32
 800e4ec:	d107      	bne.n	800e4fe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f06f 0220 	mvn.w	r2, #32
 800e4f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f000 fc37 	bl	800ed6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e4fe:	bf00      	nop
 800e500:	3708      	adds	r7, #8
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
	...

0800e508 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b084      	sub	sp, #16
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	60f8      	str	r0, [r7, #12]
 800e510:	60b9      	str	r1, [r7, #8]
 800e512:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e51a:	2b01      	cmp	r3, #1
 800e51c:	d101      	bne.n	800e522 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e51e:	2302      	movs	r3, #2
 800e520:	e0b4      	b.n	800e68c <HAL_TIM_PWM_ConfigChannel+0x184>
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2201      	movs	r2, #1
 800e526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	2202      	movs	r2, #2
 800e52e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2b0c      	cmp	r3, #12
 800e536:	f200 809f 	bhi.w	800e678 <HAL_TIM_PWM_ConfigChannel+0x170>
 800e53a:	a201      	add	r2, pc, #4	; (adr r2, 800e540 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800e53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e540:	0800e575 	.word	0x0800e575
 800e544:	0800e679 	.word	0x0800e679
 800e548:	0800e679 	.word	0x0800e679
 800e54c:	0800e679 	.word	0x0800e679
 800e550:	0800e5b5 	.word	0x0800e5b5
 800e554:	0800e679 	.word	0x0800e679
 800e558:	0800e679 	.word	0x0800e679
 800e55c:	0800e679 	.word	0x0800e679
 800e560:	0800e5f7 	.word	0x0800e5f7
 800e564:	0800e679 	.word	0x0800e679
 800e568:	0800e679 	.word	0x0800e679
 800e56c:	0800e679 	.word	0x0800e679
 800e570:	0800e637 	.word	0x0800e637
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	68b9      	ldr	r1, [r7, #8]
 800e57a:	4618      	mov	r0, r3
 800e57c:	f000 f952 	bl	800e824 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	699a      	ldr	r2, [r3, #24]
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f042 0208 	orr.w	r2, r2, #8
 800e58e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	699a      	ldr	r2, [r3, #24]
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f022 0204 	bic.w	r2, r2, #4
 800e59e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	6999      	ldr	r1, [r3, #24]
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	691a      	ldr	r2, [r3, #16]
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	430a      	orrs	r2, r1
 800e5b0:	619a      	str	r2, [r3, #24]
      break;
 800e5b2:	e062      	b.n	800e67a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	68b9      	ldr	r1, [r7, #8]
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f000 f9a2 	bl	800e904 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	699a      	ldr	r2, [r3, #24]
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e5ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	699a      	ldr	r2, [r3, #24]
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e5de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	6999      	ldr	r1, [r3, #24]
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	691b      	ldr	r3, [r3, #16]
 800e5ea:	021a      	lsls	r2, r3, #8
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	430a      	orrs	r2, r1
 800e5f2:	619a      	str	r2, [r3, #24]
      break;
 800e5f4:	e041      	b.n	800e67a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	68b9      	ldr	r1, [r7, #8]
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f000 f9f7 	bl	800e9f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	69da      	ldr	r2, [r3, #28]
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	f042 0208 	orr.w	r2, r2, #8
 800e610:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	69da      	ldr	r2, [r3, #28]
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	f022 0204 	bic.w	r2, r2, #4
 800e620:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	69d9      	ldr	r1, [r3, #28]
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	691a      	ldr	r2, [r3, #16]
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	430a      	orrs	r2, r1
 800e632:	61da      	str	r2, [r3, #28]
      break;
 800e634:	e021      	b.n	800e67a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	68b9      	ldr	r1, [r7, #8]
 800e63c:	4618      	mov	r0, r3
 800e63e:	f000 fa4b 	bl	800ead8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	69da      	ldr	r2, [r3, #28]
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	69da      	ldr	r2, [r3, #28]
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	69d9      	ldr	r1, [r3, #28]
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	691b      	ldr	r3, [r3, #16]
 800e66c:	021a      	lsls	r2, r3, #8
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	430a      	orrs	r2, r1
 800e674:	61da      	str	r2, [r3, #28]
      break;
 800e676:	e000      	b.n	800e67a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800e678:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	2201      	movs	r2, #1
 800e67e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	2200      	movs	r2, #0
 800e686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e68a:	2300      	movs	r3, #0
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3710      	adds	r7, #16
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}

0800e694 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e694:	b480      	push	{r7}
 800e696:	b083      	sub	sp, #12
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e69c:	bf00      	nop
 800e69e:	370c      	adds	r7, #12
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b083      	sub	sp, #12
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e6b0:	bf00      	nop
 800e6b2:	370c      	adds	r7, #12
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr

0800e6bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e6c4:	bf00      	nop
 800e6c6:	370c      	adds	r7, #12
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr

0800e6d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e6d0:	b480      	push	{r7}
 800e6d2:	b083      	sub	sp, #12
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e6d8:	bf00      	nop
 800e6da:	370c      	adds	r7, #12
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e2:	4770      	bx	lr

0800e6e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	b085      	sub	sp, #20
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	4a40      	ldr	r2, [pc, #256]	; (800e7f8 <TIM_Base_SetConfig+0x114>)
 800e6f8:	4293      	cmp	r3, r2
 800e6fa:	d013      	beq.n	800e724 <TIM_Base_SetConfig+0x40>
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e702:	d00f      	beq.n	800e724 <TIM_Base_SetConfig+0x40>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	4a3d      	ldr	r2, [pc, #244]	; (800e7fc <TIM_Base_SetConfig+0x118>)
 800e708:	4293      	cmp	r3, r2
 800e70a:	d00b      	beq.n	800e724 <TIM_Base_SetConfig+0x40>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	4a3c      	ldr	r2, [pc, #240]	; (800e800 <TIM_Base_SetConfig+0x11c>)
 800e710:	4293      	cmp	r3, r2
 800e712:	d007      	beq.n	800e724 <TIM_Base_SetConfig+0x40>
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	4a3b      	ldr	r2, [pc, #236]	; (800e804 <TIM_Base_SetConfig+0x120>)
 800e718:	4293      	cmp	r3, r2
 800e71a:	d003      	beq.n	800e724 <TIM_Base_SetConfig+0x40>
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	4a3a      	ldr	r2, [pc, #232]	; (800e808 <TIM_Base_SetConfig+0x124>)
 800e720:	4293      	cmp	r3, r2
 800e722:	d108      	bne.n	800e736 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e72a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	685b      	ldr	r3, [r3, #4]
 800e730:	68fa      	ldr	r2, [r7, #12]
 800e732:	4313      	orrs	r3, r2
 800e734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	4a2f      	ldr	r2, [pc, #188]	; (800e7f8 <TIM_Base_SetConfig+0x114>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d02b      	beq.n	800e796 <TIM_Base_SetConfig+0xb2>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e744:	d027      	beq.n	800e796 <TIM_Base_SetConfig+0xb2>
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	4a2c      	ldr	r2, [pc, #176]	; (800e7fc <TIM_Base_SetConfig+0x118>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d023      	beq.n	800e796 <TIM_Base_SetConfig+0xb2>
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	4a2b      	ldr	r2, [pc, #172]	; (800e800 <TIM_Base_SetConfig+0x11c>)
 800e752:	4293      	cmp	r3, r2
 800e754:	d01f      	beq.n	800e796 <TIM_Base_SetConfig+0xb2>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	4a2a      	ldr	r2, [pc, #168]	; (800e804 <TIM_Base_SetConfig+0x120>)
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d01b      	beq.n	800e796 <TIM_Base_SetConfig+0xb2>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	4a29      	ldr	r2, [pc, #164]	; (800e808 <TIM_Base_SetConfig+0x124>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d017      	beq.n	800e796 <TIM_Base_SetConfig+0xb2>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	4a28      	ldr	r2, [pc, #160]	; (800e80c <TIM_Base_SetConfig+0x128>)
 800e76a:	4293      	cmp	r3, r2
 800e76c:	d013      	beq.n	800e796 <TIM_Base_SetConfig+0xb2>
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	4a27      	ldr	r2, [pc, #156]	; (800e810 <TIM_Base_SetConfig+0x12c>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d00f      	beq.n	800e796 <TIM_Base_SetConfig+0xb2>
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	4a26      	ldr	r2, [pc, #152]	; (800e814 <TIM_Base_SetConfig+0x130>)
 800e77a:	4293      	cmp	r3, r2
 800e77c:	d00b      	beq.n	800e796 <TIM_Base_SetConfig+0xb2>
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	4a25      	ldr	r2, [pc, #148]	; (800e818 <TIM_Base_SetConfig+0x134>)
 800e782:	4293      	cmp	r3, r2
 800e784:	d007      	beq.n	800e796 <TIM_Base_SetConfig+0xb2>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	4a24      	ldr	r2, [pc, #144]	; (800e81c <TIM_Base_SetConfig+0x138>)
 800e78a:	4293      	cmp	r3, r2
 800e78c:	d003      	beq.n	800e796 <TIM_Base_SetConfig+0xb2>
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	4a23      	ldr	r2, [pc, #140]	; (800e820 <TIM_Base_SetConfig+0x13c>)
 800e792:	4293      	cmp	r3, r2
 800e794:	d108      	bne.n	800e7a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e79c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	68db      	ldr	r3, [r3, #12]
 800e7a2:	68fa      	ldr	r2, [r7, #12]
 800e7a4:	4313      	orrs	r3, r2
 800e7a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	695b      	ldr	r3, [r3, #20]
 800e7b2:	4313      	orrs	r3, r2
 800e7b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	68fa      	ldr	r2, [r7, #12]
 800e7ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	689a      	ldr	r2, [r3, #8]
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	681a      	ldr	r2, [r3, #0]
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	4a0a      	ldr	r2, [pc, #40]	; (800e7f8 <TIM_Base_SetConfig+0x114>)
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	d003      	beq.n	800e7dc <TIM_Base_SetConfig+0xf8>
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	4a0c      	ldr	r2, [pc, #48]	; (800e808 <TIM_Base_SetConfig+0x124>)
 800e7d8:	4293      	cmp	r3, r2
 800e7da:	d103      	bne.n	800e7e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	691a      	ldr	r2, [r3, #16]
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2201      	movs	r2, #1
 800e7e8:	615a      	str	r2, [r3, #20]
}
 800e7ea:	bf00      	nop
 800e7ec:	3714      	adds	r7, #20
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f4:	4770      	bx	lr
 800e7f6:	bf00      	nop
 800e7f8:	40010000 	.word	0x40010000
 800e7fc:	40000400 	.word	0x40000400
 800e800:	40000800 	.word	0x40000800
 800e804:	40000c00 	.word	0x40000c00
 800e808:	40010400 	.word	0x40010400
 800e80c:	40014000 	.word	0x40014000
 800e810:	40014400 	.word	0x40014400
 800e814:	40014800 	.word	0x40014800
 800e818:	40001800 	.word	0x40001800
 800e81c:	40001c00 	.word	0x40001c00
 800e820:	40002000 	.word	0x40002000

0800e824 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e824:	b480      	push	{r7}
 800e826:	b087      	sub	sp, #28
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6a1b      	ldr	r3, [r3, #32]
 800e832:	f023 0201 	bic.w	r2, r3, #1
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6a1b      	ldr	r3, [r3, #32]
 800e83e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	685b      	ldr	r3, [r3, #4]
 800e844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	699b      	ldr	r3, [r3, #24]
 800e84a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f023 0303 	bic.w	r3, r3, #3
 800e85a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	68fa      	ldr	r2, [r7, #12]
 800e862:	4313      	orrs	r3, r2
 800e864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	f023 0302 	bic.w	r3, r3, #2
 800e86c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	689b      	ldr	r3, [r3, #8]
 800e872:	697a      	ldr	r2, [r7, #20]
 800e874:	4313      	orrs	r3, r2
 800e876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	4a20      	ldr	r2, [pc, #128]	; (800e8fc <TIM_OC1_SetConfig+0xd8>)
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d003      	beq.n	800e888 <TIM_OC1_SetConfig+0x64>
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	4a1f      	ldr	r2, [pc, #124]	; (800e900 <TIM_OC1_SetConfig+0xdc>)
 800e884:	4293      	cmp	r3, r2
 800e886:	d10c      	bne.n	800e8a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	f023 0308 	bic.w	r3, r3, #8
 800e88e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	68db      	ldr	r3, [r3, #12]
 800e894:	697a      	ldr	r2, [r7, #20]
 800e896:	4313      	orrs	r3, r2
 800e898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	f023 0304 	bic.w	r3, r3, #4
 800e8a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	4a15      	ldr	r2, [pc, #84]	; (800e8fc <TIM_OC1_SetConfig+0xd8>)
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d003      	beq.n	800e8b2 <TIM_OC1_SetConfig+0x8e>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	4a14      	ldr	r2, [pc, #80]	; (800e900 <TIM_OC1_SetConfig+0xdc>)
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d111      	bne.n	800e8d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e8b2:	693b      	ldr	r3, [r7, #16]
 800e8b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e8b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e8c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	695b      	ldr	r3, [r3, #20]
 800e8c6:	693a      	ldr	r2, [r7, #16]
 800e8c8:	4313      	orrs	r3, r2
 800e8ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	699b      	ldr	r3, [r3, #24]
 800e8d0:	693a      	ldr	r2, [r7, #16]
 800e8d2:	4313      	orrs	r3, r2
 800e8d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	693a      	ldr	r2, [r7, #16]
 800e8da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	68fa      	ldr	r2, [r7, #12]
 800e8e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	685a      	ldr	r2, [r3, #4]
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	697a      	ldr	r2, [r7, #20]
 800e8ee:	621a      	str	r2, [r3, #32]
}
 800e8f0:	bf00      	nop
 800e8f2:	371c      	adds	r7, #28
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	4770      	bx	lr
 800e8fc:	40010000 	.word	0x40010000
 800e900:	40010400 	.word	0x40010400

0800e904 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e904:	b480      	push	{r7}
 800e906:	b087      	sub	sp, #28
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
 800e90c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6a1b      	ldr	r3, [r3, #32]
 800e912:	f023 0210 	bic.w	r2, r3, #16
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6a1b      	ldr	r3, [r3, #32]
 800e91e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	685b      	ldr	r3, [r3, #4]
 800e924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	699b      	ldr	r3, [r3, #24]
 800e92a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e93a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	021b      	lsls	r3, r3, #8
 800e942:	68fa      	ldr	r2, [r7, #12]
 800e944:	4313      	orrs	r3, r2
 800e946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	f023 0320 	bic.w	r3, r3, #32
 800e94e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	689b      	ldr	r3, [r3, #8]
 800e954:	011b      	lsls	r3, r3, #4
 800e956:	697a      	ldr	r2, [r7, #20]
 800e958:	4313      	orrs	r3, r2
 800e95a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	4a22      	ldr	r2, [pc, #136]	; (800e9e8 <TIM_OC2_SetConfig+0xe4>)
 800e960:	4293      	cmp	r3, r2
 800e962:	d003      	beq.n	800e96c <TIM_OC2_SetConfig+0x68>
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	4a21      	ldr	r2, [pc, #132]	; (800e9ec <TIM_OC2_SetConfig+0xe8>)
 800e968:	4293      	cmp	r3, r2
 800e96a:	d10d      	bne.n	800e988 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	68db      	ldr	r3, [r3, #12]
 800e978:	011b      	lsls	r3, r3, #4
 800e97a:	697a      	ldr	r2, [r7, #20]
 800e97c:	4313      	orrs	r3, r2
 800e97e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e986:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	4a17      	ldr	r2, [pc, #92]	; (800e9e8 <TIM_OC2_SetConfig+0xe4>)
 800e98c:	4293      	cmp	r3, r2
 800e98e:	d003      	beq.n	800e998 <TIM_OC2_SetConfig+0x94>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	4a16      	ldr	r2, [pc, #88]	; (800e9ec <TIM_OC2_SetConfig+0xe8>)
 800e994:	4293      	cmp	r3, r2
 800e996:	d113      	bne.n	800e9c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e998:	693b      	ldr	r3, [r7, #16]
 800e99a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e99e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e9a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	695b      	ldr	r3, [r3, #20]
 800e9ac:	009b      	lsls	r3, r3, #2
 800e9ae:	693a      	ldr	r2, [r7, #16]
 800e9b0:	4313      	orrs	r3, r2
 800e9b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	699b      	ldr	r3, [r3, #24]
 800e9b8:	009b      	lsls	r3, r3, #2
 800e9ba:	693a      	ldr	r2, [r7, #16]
 800e9bc:	4313      	orrs	r3, r2
 800e9be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	693a      	ldr	r2, [r7, #16]
 800e9c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	68fa      	ldr	r2, [r7, #12]
 800e9ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	685a      	ldr	r2, [r3, #4]
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	697a      	ldr	r2, [r7, #20]
 800e9d8:	621a      	str	r2, [r3, #32]
}
 800e9da:	bf00      	nop
 800e9dc:	371c      	adds	r7, #28
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e4:	4770      	bx	lr
 800e9e6:	bf00      	nop
 800e9e8:	40010000 	.word	0x40010000
 800e9ec:	40010400 	.word	0x40010400

0800e9f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e9f0:	b480      	push	{r7}
 800e9f2:	b087      	sub	sp, #28
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
 800e9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6a1b      	ldr	r3, [r3, #32]
 800e9fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6a1b      	ldr	r3, [r3, #32]
 800ea0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	685b      	ldr	r3, [r3, #4]
 800ea10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	69db      	ldr	r3, [r3, #28]
 800ea16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	f023 0303 	bic.w	r3, r3, #3
 800ea26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	68fa      	ldr	r2, [r7, #12]
 800ea2e:	4313      	orrs	r3, r2
 800ea30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ea38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	689b      	ldr	r3, [r3, #8]
 800ea3e:	021b      	lsls	r3, r3, #8
 800ea40:	697a      	ldr	r2, [r7, #20]
 800ea42:	4313      	orrs	r3, r2
 800ea44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	4a21      	ldr	r2, [pc, #132]	; (800ead0 <TIM_OC3_SetConfig+0xe0>)
 800ea4a:	4293      	cmp	r3, r2
 800ea4c:	d003      	beq.n	800ea56 <TIM_OC3_SetConfig+0x66>
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	4a20      	ldr	r2, [pc, #128]	; (800ead4 <TIM_OC3_SetConfig+0xe4>)
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d10d      	bne.n	800ea72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ea5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	68db      	ldr	r3, [r3, #12]
 800ea62:	021b      	lsls	r3, r3, #8
 800ea64:	697a      	ldr	r2, [r7, #20]
 800ea66:	4313      	orrs	r3, r2
 800ea68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ea70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	4a16      	ldr	r2, [pc, #88]	; (800ead0 <TIM_OC3_SetConfig+0xe0>)
 800ea76:	4293      	cmp	r3, r2
 800ea78:	d003      	beq.n	800ea82 <TIM_OC3_SetConfig+0x92>
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	4a15      	ldr	r2, [pc, #84]	; (800ead4 <TIM_OC3_SetConfig+0xe4>)
 800ea7e:	4293      	cmp	r3, r2
 800ea80:	d113      	bne.n	800eaaa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ea88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ea8a:	693b      	ldr	r3, [r7, #16]
 800ea8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ea90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	695b      	ldr	r3, [r3, #20]
 800ea96:	011b      	lsls	r3, r3, #4
 800ea98:	693a      	ldr	r2, [r7, #16]
 800ea9a:	4313      	orrs	r3, r2
 800ea9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	699b      	ldr	r3, [r3, #24]
 800eaa2:	011b      	lsls	r3, r3, #4
 800eaa4:	693a      	ldr	r2, [r7, #16]
 800eaa6:	4313      	orrs	r3, r2
 800eaa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	693a      	ldr	r2, [r7, #16]
 800eaae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	68fa      	ldr	r2, [r7, #12]
 800eab4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	685a      	ldr	r2, [r3, #4]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	697a      	ldr	r2, [r7, #20]
 800eac2:	621a      	str	r2, [r3, #32]
}
 800eac4:	bf00      	nop
 800eac6:	371c      	adds	r7, #28
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr
 800ead0:	40010000 	.word	0x40010000
 800ead4:	40010400 	.word	0x40010400

0800ead8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ead8:	b480      	push	{r7}
 800eada:	b087      	sub	sp, #28
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
 800eae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6a1b      	ldr	r3, [r3, #32]
 800eae6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6a1b      	ldr	r3, [r3, #32]
 800eaf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	685b      	ldr	r3, [r3, #4]
 800eaf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	69db      	ldr	r3, [r3, #28]
 800eafe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eb06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eb0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	021b      	lsls	r3, r3, #8
 800eb16:	68fa      	ldr	r2, [r7, #12]
 800eb18:	4313      	orrs	r3, r2
 800eb1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800eb1c:	693b      	ldr	r3, [r7, #16]
 800eb1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eb22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	689b      	ldr	r3, [r3, #8]
 800eb28:	031b      	lsls	r3, r3, #12
 800eb2a:	693a      	ldr	r2, [r7, #16]
 800eb2c:	4313      	orrs	r3, r2
 800eb2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	4a12      	ldr	r2, [pc, #72]	; (800eb7c <TIM_OC4_SetConfig+0xa4>)
 800eb34:	4293      	cmp	r3, r2
 800eb36:	d003      	beq.n	800eb40 <TIM_OC4_SetConfig+0x68>
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	4a11      	ldr	r2, [pc, #68]	; (800eb80 <TIM_OC4_SetConfig+0xa8>)
 800eb3c:	4293      	cmp	r3, r2
 800eb3e:	d109      	bne.n	800eb54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eb46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	695b      	ldr	r3, [r3, #20]
 800eb4c:	019b      	lsls	r3, r3, #6
 800eb4e:	697a      	ldr	r2, [r7, #20]
 800eb50:	4313      	orrs	r3, r2
 800eb52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	697a      	ldr	r2, [r7, #20]
 800eb58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	68fa      	ldr	r2, [r7, #12]
 800eb5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	685a      	ldr	r2, [r3, #4]
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	693a      	ldr	r2, [r7, #16]
 800eb6c:	621a      	str	r2, [r3, #32]
}
 800eb6e:	bf00      	nop
 800eb70:	371c      	adds	r7, #28
 800eb72:	46bd      	mov	sp, r7
 800eb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb78:	4770      	bx	lr
 800eb7a:	bf00      	nop
 800eb7c:	40010000 	.word	0x40010000
 800eb80:	40010400 	.word	0x40010400

0800eb84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b087      	sub	sp, #28
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	60f8      	str	r0, [r7, #12]
 800eb8c:	60b9      	str	r1, [r7, #8]
 800eb8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	f003 031f 	and.w	r3, r3, #31
 800eb96:	2201      	movs	r2, #1
 800eb98:	fa02 f303 	lsl.w	r3, r2, r3
 800eb9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	6a1a      	ldr	r2, [r3, #32]
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	43db      	mvns	r3, r3
 800eba6:	401a      	ands	r2, r3
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	6a1a      	ldr	r2, [r3, #32]
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	f003 031f 	and.w	r3, r3, #31
 800ebb6:	6879      	ldr	r1, [r7, #4]
 800ebb8:	fa01 f303 	lsl.w	r3, r1, r3
 800ebbc:	431a      	orrs	r2, r3
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	621a      	str	r2, [r3, #32]
}
 800ebc2:	bf00      	nop
 800ebc4:	371c      	adds	r7, #28
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebcc:	4770      	bx	lr
	...

0800ebd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b085      	sub	sp, #20
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	d101      	bne.n	800ebe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ebe4:	2302      	movs	r3, #2
 800ebe6:	e05a      	b.n	800ec9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2201      	movs	r2, #1
 800ebec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2202      	movs	r2, #2
 800ebf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	685b      	ldr	r3, [r3, #4]
 800ebfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	689b      	ldr	r3, [r3, #8]
 800ec06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	68fa      	ldr	r2, [r7, #12]
 800ec16:	4313      	orrs	r3, r2
 800ec18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	68fa      	ldr	r2, [r7, #12]
 800ec20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	4a21      	ldr	r2, [pc, #132]	; (800ecac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ec28:	4293      	cmp	r3, r2
 800ec2a:	d022      	beq.n	800ec72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec34:	d01d      	beq.n	800ec72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	4a1d      	ldr	r2, [pc, #116]	; (800ecb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ec3c:	4293      	cmp	r3, r2
 800ec3e:	d018      	beq.n	800ec72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	4a1b      	ldr	r2, [pc, #108]	; (800ecb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ec46:	4293      	cmp	r3, r2
 800ec48:	d013      	beq.n	800ec72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	4a1a      	ldr	r2, [pc, #104]	; (800ecb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ec50:	4293      	cmp	r3, r2
 800ec52:	d00e      	beq.n	800ec72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	4a18      	ldr	r2, [pc, #96]	; (800ecbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ec5a:	4293      	cmp	r3, r2
 800ec5c:	d009      	beq.n	800ec72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	4a17      	ldr	r2, [pc, #92]	; (800ecc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d004      	beq.n	800ec72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4a15      	ldr	r2, [pc, #84]	; (800ecc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d10c      	bne.n	800ec8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ec72:	68bb      	ldr	r3, [r7, #8]
 800ec74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	68ba      	ldr	r2, [r7, #8]
 800ec80:	4313      	orrs	r3, r2
 800ec82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	68ba      	ldr	r2, [r7, #8]
 800ec8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2201      	movs	r2, #1
 800ec90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2200      	movs	r2, #0
 800ec98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ec9c:	2300      	movs	r3, #0
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3714      	adds	r7, #20
 800eca2:	46bd      	mov	sp, r7
 800eca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca8:	4770      	bx	lr
 800ecaa:	bf00      	nop
 800ecac:	40010000 	.word	0x40010000
 800ecb0:	40000400 	.word	0x40000400
 800ecb4:	40000800 	.word	0x40000800
 800ecb8:	40000c00 	.word	0x40000c00
 800ecbc:	40010400 	.word	0x40010400
 800ecc0:	40014000 	.word	0x40014000
 800ecc4:	40001800 	.word	0x40001800

0800ecc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b085      	sub	sp, #20
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ecdc:	2b01      	cmp	r3, #1
 800ecde:	d101      	bne.n	800ece4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ece0:	2302      	movs	r3, #2
 800ece2:	e03d      	b.n	800ed60 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2201      	movs	r2, #1
 800ece8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	68db      	ldr	r3, [r3, #12]
 800ecf6:	4313      	orrs	r3, r2
 800ecf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	689b      	ldr	r3, [r3, #8]
 800ed04:	4313      	orrs	r3, r2
 800ed06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	685b      	ldr	r3, [r3, #4]
 800ed12:	4313      	orrs	r3, r2
 800ed14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	4313      	orrs	r3, r2
 800ed22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	691b      	ldr	r3, [r3, #16]
 800ed2e:	4313      	orrs	r3, r2
 800ed30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	695b      	ldr	r3, [r3, #20]
 800ed3c:	4313      	orrs	r3, r2
 800ed3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	69db      	ldr	r3, [r3, #28]
 800ed4a:	4313      	orrs	r3, r2
 800ed4c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	68fa      	ldr	r2, [r7, #12]
 800ed54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2200      	movs	r2, #0
 800ed5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ed5e:	2300      	movs	r3, #0
}
 800ed60:	4618      	mov	r0, r3
 800ed62:	3714      	adds	r7, #20
 800ed64:	46bd      	mov	sp, r7
 800ed66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6a:	4770      	bx	lr

0800ed6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b083      	sub	sp, #12
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ed74:	bf00      	nop
 800ed76:	370c      	adds	r7, #12
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr

0800ed80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ed80:	b480      	push	{r7}
 800ed82:	b083      	sub	sp, #12
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ed88:	bf00      	nop
 800ed8a:	370c      	adds	r7, #12
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed92:	4770      	bx	lr

0800ed94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b082      	sub	sp, #8
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d101      	bne.n	800eda6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eda2:	2301      	movs	r3, #1
 800eda4:	e03f      	b.n	800ee26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800edac:	b2db      	uxtb	r3, r3
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d106      	bne.n	800edc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	2200      	movs	r2, #0
 800edb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f7f8 f8b8 	bl	8006f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2224      	movs	r2, #36	; 0x24
 800edc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	68da      	ldr	r2, [r3, #12]
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800edd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800edd8:	6878      	ldr	r0, [r7, #4]
 800edda:	f000 f829 	bl	800ee30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	691a      	ldr	r2, [r3, #16]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800edec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	695a      	ldr	r2, [r3, #20]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800edfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	68da      	ldr	r2, [r3, #12]
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ee0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2200      	movs	r2, #0
 800ee12:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2220      	movs	r2, #32
 800ee18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2220      	movs	r2, #32
 800ee20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ee24:	2300      	movs	r3, #0
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3708      	adds	r7, #8
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}
	...

0800ee30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ee30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee34:	b085      	sub	sp, #20
 800ee36:	af00      	add	r7, sp, #0
 800ee38:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	691b      	ldr	r3, [r3, #16]
 800ee40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	68da      	ldr	r2, [r3, #12]
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	430a      	orrs	r2, r1
 800ee4e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	689a      	ldr	r2, [r3, #8]
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	691b      	ldr	r3, [r3, #16]
 800ee58:	431a      	orrs	r2, r3
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	695b      	ldr	r3, [r3, #20]
 800ee5e:	431a      	orrs	r2, r3
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	69db      	ldr	r3, [r3, #28]
 800ee64:	4313      	orrs	r3, r2
 800ee66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	68db      	ldr	r3, [r3, #12]
 800ee6e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ee72:	f023 030c 	bic.w	r3, r3, #12
 800ee76:	687a      	ldr	r2, [r7, #4]
 800ee78:	6812      	ldr	r2, [r2, #0]
 800ee7a:	68f9      	ldr	r1, [r7, #12]
 800ee7c:	430b      	orrs	r3, r1
 800ee7e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	695b      	ldr	r3, [r3, #20]
 800ee86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	699a      	ldr	r2, [r3, #24]
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	430a      	orrs	r2, r1
 800ee94:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	69db      	ldr	r3, [r3, #28]
 800ee9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee9e:	f040 818b 	bne.w	800f1b8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	4ac1      	ldr	r2, [pc, #772]	; (800f1ac <UART_SetConfig+0x37c>)
 800eea8:	4293      	cmp	r3, r2
 800eeaa:	d005      	beq.n	800eeb8 <UART_SetConfig+0x88>
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	4abf      	ldr	r2, [pc, #764]	; (800f1b0 <UART_SetConfig+0x380>)
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	f040 80bd 	bne.w	800f032 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800eeb8:	f7fc fbcc 	bl	800b654 <HAL_RCC_GetPCLK2Freq>
 800eebc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	461d      	mov	r5, r3
 800eec2:	f04f 0600 	mov.w	r6, #0
 800eec6:	46a8      	mov	r8, r5
 800eec8:	46b1      	mov	r9, r6
 800eeca:	eb18 0308 	adds.w	r3, r8, r8
 800eece:	eb49 0409 	adc.w	r4, r9, r9
 800eed2:	4698      	mov	r8, r3
 800eed4:	46a1      	mov	r9, r4
 800eed6:	eb18 0805 	adds.w	r8, r8, r5
 800eeda:	eb49 0906 	adc.w	r9, r9, r6
 800eede:	f04f 0100 	mov.w	r1, #0
 800eee2:	f04f 0200 	mov.w	r2, #0
 800eee6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800eeea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800eeee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800eef2:	4688      	mov	r8, r1
 800eef4:	4691      	mov	r9, r2
 800eef6:	eb18 0005 	adds.w	r0, r8, r5
 800eefa:	eb49 0106 	adc.w	r1, r9, r6
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	685b      	ldr	r3, [r3, #4]
 800ef02:	461d      	mov	r5, r3
 800ef04:	f04f 0600 	mov.w	r6, #0
 800ef08:	196b      	adds	r3, r5, r5
 800ef0a:	eb46 0406 	adc.w	r4, r6, r6
 800ef0e:	461a      	mov	r2, r3
 800ef10:	4623      	mov	r3, r4
 800ef12:	f7f1 fed1 	bl	8000cb8 <__aeabi_uldivmod>
 800ef16:	4603      	mov	r3, r0
 800ef18:	460c      	mov	r4, r1
 800ef1a:	461a      	mov	r2, r3
 800ef1c:	4ba5      	ldr	r3, [pc, #660]	; (800f1b4 <UART_SetConfig+0x384>)
 800ef1e:	fba3 2302 	umull	r2, r3, r3, r2
 800ef22:	095b      	lsrs	r3, r3, #5
 800ef24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	461d      	mov	r5, r3
 800ef2c:	f04f 0600 	mov.w	r6, #0
 800ef30:	46a9      	mov	r9, r5
 800ef32:	46b2      	mov	sl, r6
 800ef34:	eb19 0309 	adds.w	r3, r9, r9
 800ef38:	eb4a 040a 	adc.w	r4, sl, sl
 800ef3c:	4699      	mov	r9, r3
 800ef3e:	46a2      	mov	sl, r4
 800ef40:	eb19 0905 	adds.w	r9, r9, r5
 800ef44:	eb4a 0a06 	adc.w	sl, sl, r6
 800ef48:	f04f 0100 	mov.w	r1, #0
 800ef4c:	f04f 0200 	mov.w	r2, #0
 800ef50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ef54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ef58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ef5c:	4689      	mov	r9, r1
 800ef5e:	4692      	mov	sl, r2
 800ef60:	eb19 0005 	adds.w	r0, r9, r5
 800ef64:	eb4a 0106 	adc.w	r1, sl, r6
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	685b      	ldr	r3, [r3, #4]
 800ef6c:	461d      	mov	r5, r3
 800ef6e:	f04f 0600 	mov.w	r6, #0
 800ef72:	196b      	adds	r3, r5, r5
 800ef74:	eb46 0406 	adc.w	r4, r6, r6
 800ef78:	461a      	mov	r2, r3
 800ef7a:	4623      	mov	r3, r4
 800ef7c:	f7f1 fe9c 	bl	8000cb8 <__aeabi_uldivmod>
 800ef80:	4603      	mov	r3, r0
 800ef82:	460c      	mov	r4, r1
 800ef84:	461a      	mov	r2, r3
 800ef86:	4b8b      	ldr	r3, [pc, #556]	; (800f1b4 <UART_SetConfig+0x384>)
 800ef88:	fba3 1302 	umull	r1, r3, r3, r2
 800ef8c:	095b      	lsrs	r3, r3, #5
 800ef8e:	2164      	movs	r1, #100	; 0x64
 800ef90:	fb01 f303 	mul.w	r3, r1, r3
 800ef94:	1ad3      	subs	r3, r2, r3
 800ef96:	00db      	lsls	r3, r3, #3
 800ef98:	3332      	adds	r3, #50	; 0x32
 800ef9a:	4a86      	ldr	r2, [pc, #536]	; (800f1b4 <UART_SetConfig+0x384>)
 800ef9c:	fba2 2303 	umull	r2, r3, r2, r3
 800efa0:	095b      	lsrs	r3, r3, #5
 800efa2:	005b      	lsls	r3, r3, #1
 800efa4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800efa8:	4498      	add	r8, r3
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	461d      	mov	r5, r3
 800efae:	f04f 0600 	mov.w	r6, #0
 800efb2:	46a9      	mov	r9, r5
 800efb4:	46b2      	mov	sl, r6
 800efb6:	eb19 0309 	adds.w	r3, r9, r9
 800efba:	eb4a 040a 	adc.w	r4, sl, sl
 800efbe:	4699      	mov	r9, r3
 800efc0:	46a2      	mov	sl, r4
 800efc2:	eb19 0905 	adds.w	r9, r9, r5
 800efc6:	eb4a 0a06 	adc.w	sl, sl, r6
 800efca:	f04f 0100 	mov.w	r1, #0
 800efce:	f04f 0200 	mov.w	r2, #0
 800efd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800efd6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800efda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800efde:	4689      	mov	r9, r1
 800efe0:	4692      	mov	sl, r2
 800efe2:	eb19 0005 	adds.w	r0, r9, r5
 800efe6:	eb4a 0106 	adc.w	r1, sl, r6
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	685b      	ldr	r3, [r3, #4]
 800efee:	461d      	mov	r5, r3
 800eff0:	f04f 0600 	mov.w	r6, #0
 800eff4:	196b      	adds	r3, r5, r5
 800eff6:	eb46 0406 	adc.w	r4, r6, r6
 800effa:	461a      	mov	r2, r3
 800effc:	4623      	mov	r3, r4
 800effe:	f7f1 fe5b 	bl	8000cb8 <__aeabi_uldivmod>
 800f002:	4603      	mov	r3, r0
 800f004:	460c      	mov	r4, r1
 800f006:	461a      	mov	r2, r3
 800f008:	4b6a      	ldr	r3, [pc, #424]	; (800f1b4 <UART_SetConfig+0x384>)
 800f00a:	fba3 1302 	umull	r1, r3, r3, r2
 800f00e:	095b      	lsrs	r3, r3, #5
 800f010:	2164      	movs	r1, #100	; 0x64
 800f012:	fb01 f303 	mul.w	r3, r1, r3
 800f016:	1ad3      	subs	r3, r2, r3
 800f018:	00db      	lsls	r3, r3, #3
 800f01a:	3332      	adds	r3, #50	; 0x32
 800f01c:	4a65      	ldr	r2, [pc, #404]	; (800f1b4 <UART_SetConfig+0x384>)
 800f01e:	fba2 2303 	umull	r2, r3, r2, r3
 800f022:	095b      	lsrs	r3, r3, #5
 800f024:	f003 0207 	and.w	r2, r3, #7
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	4442      	add	r2, r8
 800f02e:	609a      	str	r2, [r3, #8]
 800f030:	e26f      	b.n	800f512 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f032:	f7fc fafb 	bl	800b62c <HAL_RCC_GetPCLK1Freq>
 800f036:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	461d      	mov	r5, r3
 800f03c:	f04f 0600 	mov.w	r6, #0
 800f040:	46a8      	mov	r8, r5
 800f042:	46b1      	mov	r9, r6
 800f044:	eb18 0308 	adds.w	r3, r8, r8
 800f048:	eb49 0409 	adc.w	r4, r9, r9
 800f04c:	4698      	mov	r8, r3
 800f04e:	46a1      	mov	r9, r4
 800f050:	eb18 0805 	adds.w	r8, r8, r5
 800f054:	eb49 0906 	adc.w	r9, r9, r6
 800f058:	f04f 0100 	mov.w	r1, #0
 800f05c:	f04f 0200 	mov.w	r2, #0
 800f060:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f064:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f068:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f06c:	4688      	mov	r8, r1
 800f06e:	4691      	mov	r9, r2
 800f070:	eb18 0005 	adds.w	r0, r8, r5
 800f074:	eb49 0106 	adc.w	r1, r9, r6
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	685b      	ldr	r3, [r3, #4]
 800f07c:	461d      	mov	r5, r3
 800f07e:	f04f 0600 	mov.w	r6, #0
 800f082:	196b      	adds	r3, r5, r5
 800f084:	eb46 0406 	adc.w	r4, r6, r6
 800f088:	461a      	mov	r2, r3
 800f08a:	4623      	mov	r3, r4
 800f08c:	f7f1 fe14 	bl	8000cb8 <__aeabi_uldivmod>
 800f090:	4603      	mov	r3, r0
 800f092:	460c      	mov	r4, r1
 800f094:	461a      	mov	r2, r3
 800f096:	4b47      	ldr	r3, [pc, #284]	; (800f1b4 <UART_SetConfig+0x384>)
 800f098:	fba3 2302 	umull	r2, r3, r3, r2
 800f09c:	095b      	lsrs	r3, r3, #5
 800f09e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	461d      	mov	r5, r3
 800f0a6:	f04f 0600 	mov.w	r6, #0
 800f0aa:	46a9      	mov	r9, r5
 800f0ac:	46b2      	mov	sl, r6
 800f0ae:	eb19 0309 	adds.w	r3, r9, r9
 800f0b2:	eb4a 040a 	adc.w	r4, sl, sl
 800f0b6:	4699      	mov	r9, r3
 800f0b8:	46a2      	mov	sl, r4
 800f0ba:	eb19 0905 	adds.w	r9, r9, r5
 800f0be:	eb4a 0a06 	adc.w	sl, sl, r6
 800f0c2:	f04f 0100 	mov.w	r1, #0
 800f0c6:	f04f 0200 	mov.w	r2, #0
 800f0ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f0ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f0d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f0d6:	4689      	mov	r9, r1
 800f0d8:	4692      	mov	sl, r2
 800f0da:	eb19 0005 	adds.w	r0, r9, r5
 800f0de:	eb4a 0106 	adc.w	r1, sl, r6
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	685b      	ldr	r3, [r3, #4]
 800f0e6:	461d      	mov	r5, r3
 800f0e8:	f04f 0600 	mov.w	r6, #0
 800f0ec:	196b      	adds	r3, r5, r5
 800f0ee:	eb46 0406 	adc.w	r4, r6, r6
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	4623      	mov	r3, r4
 800f0f6:	f7f1 fddf 	bl	8000cb8 <__aeabi_uldivmod>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	460c      	mov	r4, r1
 800f0fe:	461a      	mov	r2, r3
 800f100:	4b2c      	ldr	r3, [pc, #176]	; (800f1b4 <UART_SetConfig+0x384>)
 800f102:	fba3 1302 	umull	r1, r3, r3, r2
 800f106:	095b      	lsrs	r3, r3, #5
 800f108:	2164      	movs	r1, #100	; 0x64
 800f10a:	fb01 f303 	mul.w	r3, r1, r3
 800f10e:	1ad3      	subs	r3, r2, r3
 800f110:	00db      	lsls	r3, r3, #3
 800f112:	3332      	adds	r3, #50	; 0x32
 800f114:	4a27      	ldr	r2, [pc, #156]	; (800f1b4 <UART_SetConfig+0x384>)
 800f116:	fba2 2303 	umull	r2, r3, r2, r3
 800f11a:	095b      	lsrs	r3, r3, #5
 800f11c:	005b      	lsls	r3, r3, #1
 800f11e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f122:	4498      	add	r8, r3
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	461d      	mov	r5, r3
 800f128:	f04f 0600 	mov.w	r6, #0
 800f12c:	46a9      	mov	r9, r5
 800f12e:	46b2      	mov	sl, r6
 800f130:	eb19 0309 	adds.w	r3, r9, r9
 800f134:	eb4a 040a 	adc.w	r4, sl, sl
 800f138:	4699      	mov	r9, r3
 800f13a:	46a2      	mov	sl, r4
 800f13c:	eb19 0905 	adds.w	r9, r9, r5
 800f140:	eb4a 0a06 	adc.w	sl, sl, r6
 800f144:	f04f 0100 	mov.w	r1, #0
 800f148:	f04f 0200 	mov.w	r2, #0
 800f14c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f150:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f154:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f158:	4689      	mov	r9, r1
 800f15a:	4692      	mov	sl, r2
 800f15c:	eb19 0005 	adds.w	r0, r9, r5
 800f160:	eb4a 0106 	adc.w	r1, sl, r6
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	685b      	ldr	r3, [r3, #4]
 800f168:	461d      	mov	r5, r3
 800f16a:	f04f 0600 	mov.w	r6, #0
 800f16e:	196b      	adds	r3, r5, r5
 800f170:	eb46 0406 	adc.w	r4, r6, r6
 800f174:	461a      	mov	r2, r3
 800f176:	4623      	mov	r3, r4
 800f178:	f7f1 fd9e 	bl	8000cb8 <__aeabi_uldivmod>
 800f17c:	4603      	mov	r3, r0
 800f17e:	460c      	mov	r4, r1
 800f180:	461a      	mov	r2, r3
 800f182:	4b0c      	ldr	r3, [pc, #48]	; (800f1b4 <UART_SetConfig+0x384>)
 800f184:	fba3 1302 	umull	r1, r3, r3, r2
 800f188:	095b      	lsrs	r3, r3, #5
 800f18a:	2164      	movs	r1, #100	; 0x64
 800f18c:	fb01 f303 	mul.w	r3, r1, r3
 800f190:	1ad3      	subs	r3, r2, r3
 800f192:	00db      	lsls	r3, r3, #3
 800f194:	3332      	adds	r3, #50	; 0x32
 800f196:	4a07      	ldr	r2, [pc, #28]	; (800f1b4 <UART_SetConfig+0x384>)
 800f198:	fba2 2303 	umull	r2, r3, r2, r3
 800f19c:	095b      	lsrs	r3, r3, #5
 800f19e:	f003 0207 	and.w	r2, r3, #7
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	4442      	add	r2, r8
 800f1a8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f1aa:	e1b2      	b.n	800f512 <UART_SetConfig+0x6e2>
 800f1ac:	40011000 	.word	0x40011000
 800f1b0:	40011400 	.word	0x40011400
 800f1b4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	4ad7      	ldr	r2, [pc, #860]	; (800f51c <UART_SetConfig+0x6ec>)
 800f1be:	4293      	cmp	r3, r2
 800f1c0:	d005      	beq.n	800f1ce <UART_SetConfig+0x39e>
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	4ad6      	ldr	r2, [pc, #856]	; (800f520 <UART_SetConfig+0x6f0>)
 800f1c8:	4293      	cmp	r3, r2
 800f1ca:	f040 80d1 	bne.w	800f370 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f1ce:	f7fc fa41 	bl	800b654 <HAL_RCC_GetPCLK2Freq>
 800f1d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	469a      	mov	sl, r3
 800f1d8:	f04f 0b00 	mov.w	fp, #0
 800f1dc:	46d0      	mov	r8, sl
 800f1de:	46d9      	mov	r9, fp
 800f1e0:	eb18 0308 	adds.w	r3, r8, r8
 800f1e4:	eb49 0409 	adc.w	r4, r9, r9
 800f1e8:	4698      	mov	r8, r3
 800f1ea:	46a1      	mov	r9, r4
 800f1ec:	eb18 080a 	adds.w	r8, r8, sl
 800f1f0:	eb49 090b 	adc.w	r9, r9, fp
 800f1f4:	f04f 0100 	mov.w	r1, #0
 800f1f8:	f04f 0200 	mov.w	r2, #0
 800f1fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f200:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f204:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f208:	4688      	mov	r8, r1
 800f20a:	4691      	mov	r9, r2
 800f20c:	eb1a 0508 	adds.w	r5, sl, r8
 800f210:	eb4b 0609 	adc.w	r6, fp, r9
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	685b      	ldr	r3, [r3, #4]
 800f218:	4619      	mov	r1, r3
 800f21a:	f04f 0200 	mov.w	r2, #0
 800f21e:	f04f 0300 	mov.w	r3, #0
 800f222:	f04f 0400 	mov.w	r4, #0
 800f226:	0094      	lsls	r4, r2, #2
 800f228:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f22c:	008b      	lsls	r3, r1, #2
 800f22e:	461a      	mov	r2, r3
 800f230:	4623      	mov	r3, r4
 800f232:	4628      	mov	r0, r5
 800f234:	4631      	mov	r1, r6
 800f236:	f7f1 fd3f 	bl	8000cb8 <__aeabi_uldivmod>
 800f23a:	4603      	mov	r3, r0
 800f23c:	460c      	mov	r4, r1
 800f23e:	461a      	mov	r2, r3
 800f240:	4bb8      	ldr	r3, [pc, #736]	; (800f524 <UART_SetConfig+0x6f4>)
 800f242:	fba3 2302 	umull	r2, r3, r3, r2
 800f246:	095b      	lsrs	r3, r3, #5
 800f248:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	469b      	mov	fp, r3
 800f250:	f04f 0c00 	mov.w	ip, #0
 800f254:	46d9      	mov	r9, fp
 800f256:	46e2      	mov	sl, ip
 800f258:	eb19 0309 	adds.w	r3, r9, r9
 800f25c:	eb4a 040a 	adc.w	r4, sl, sl
 800f260:	4699      	mov	r9, r3
 800f262:	46a2      	mov	sl, r4
 800f264:	eb19 090b 	adds.w	r9, r9, fp
 800f268:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f26c:	f04f 0100 	mov.w	r1, #0
 800f270:	f04f 0200 	mov.w	r2, #0
 800f274:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f278:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f27c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f280:	4689      	mov	r9, r1
 800f282:	4692      	mov	sl, r2
 800f284:	eb1b 0509 	adds.w	r5, fp, r9
 800f288:	eb4c 060a 	adc.w	r6, ip, sl
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	685b      	ldr	r3, [r3, #4]
 800f290:	4619      	mov	r1, r3
 800f292:	f04f 0200 	mov.w	r2, #0
 800f296:	f04f 0300 	mov.w	r3, #0
 800f29a:	f04f 0400 	mov.w	r4, #0
 800f29e:	0094      	lsls	r4, r2, #2
 800f2a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f2a4:	008b      	lsls	r3, r1, #2
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	4623      	mov	r3, r4
 800f2aa:	4628      	mov	r0, r5
 800f2ac:	4631      	mov	r1, r6
 800f2ae:	f7f1 fd03 	bl	8000cb8 <__aeabi_uldivmod>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	460c      	mov	r4, r1
 800f2b6:	461a      	mov	r2, r3
 800f2b8:	4b9a      	ldr	r3, [pc, #616]	; (800f524 <UART_SetConfig+0x6f4>)
 800f2ba:	fba3 1302 	umull	r1, r3, r3, r2
 800f2be:	095b      	lsrs	r3, r3, #5
 800f2c0:	2164      	movs	r1, #100	; 0x64
 800f2c2:	fb01 f303 	mul.w	r3, r1, r3
 800f2c6:	1ad3      	subs	r3, r2, r3
 800f2c8:	011b      	lsls	r3, r3, #4
 800f2ca:	3332      	adds	r3, #50	; 0x32
 800f2cc:	4a95      	ldr	r2, [pc, #596]	; (800f524 <UART_SetConfig+0x6f4>)
 800f2ce:	fba2 2303 	umull	r2, r3, r2, r3
 800f2d2:	095b      	lsrs	r3, r3, #5
 800f2d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f2d8:	4498      	add	r8, r3
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	469b      	mov	fp, r3
 800f2de:	f04f 0c00 	mov.w	ip, #0
 800f2e2:	46d9      	mov	r9, fp
 800f2e4:	46e2      	mov	sl, ip
 800f2e6:	eb19 0309 	adds.w	r3, r9, r9
 800f2ea:	eb4a 040a 	adc.w	r4, sl, sl
 800f2ee:	4699      	mov	r9, r3
 800f2f0:	46a2      	mov	sl, r4
 800f2f2:	eb19 090b 	adds.w	r9, r9, fp
 800f2f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f2fa:	f04f 0100 	mov.w	r1, #0
 800f2fe:	f04f 0200 	mov.w	r2, #0
 800f302:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f306:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f30a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f30e:	4689      	mov	r9, r1
 800f310:	4692      	mov	sl, r2
 800f312:	eb1b 0509 	adds.w	r5, fp, r9
 800f316:	eb4c 060a 	adc.w	r6, ip, sl
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	685b      	ldr	r3, [r3, #4]
 800f31e:	4619      	mov	r1, r3
 800f320:	f04f 0200 	mov.w	r2, #0
 800f324:	f04f 0300 	mov.w	r3, #0
 800f328:	f04f 0400 	mov.w	r4, #0
 800f32c:	0094      	lsls	r4, r2, #2
 800f32e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f332:	008b      	lsls	r3, r1, #2
 800f334:	461a      	mov	r2, r3
 800f336:	4623      	mov	r3, r4
 800f338:	4628      	mov	r0, r5
 800f33a:	4631      	mov	r1, r6
 800f33c:	f7f1 fcbc 	bl	8000cb8 <__aeabi_uldivmod>
 800f340:	4603      	mov	r3, r0
 800f342:	460c      	mov	r4, r1
 800f344:	461a      	mov	r2, r3
 800f346:	4b77      	ldr	r3, [pc, #476]	; (800f524 <UART_SetConfig+0x6f4>)
 800f348:	fba3 1302 	umull	r1, r3, r3, r2
 800f34c:	095b      	lsrs	r3, r3, #5
 800f34e:	2164      	movs	r1, #100	; 0x64
 800f350:	fb01 f303 	mul.w	r3, r1, r3
 800f354:	1ad3      	subs	r3, r2, r3
 800f356:	011b      	lsls	r3, r3, #4
 800f358:	3332      	adds	r3, #50	; 0x32
 800f35a:	4a72      	ldr	r2, [pc, #456]	; (800f524 <UART_SetConfig+0x6f4>)
 800f35c:	fba2 2303 	umull	r2, r3, r2, r3
 800f360:	095b      	lsrs	r3, r3, #5
 800f362:	f003 020f 	and.w	r2, r3, #15
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	4442      	add	r2, r8
 800f36c:	609a      	str	r2, [r3, #8]
 800f36e:	e0d0      	b.n	800f512 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f370:	f7fc f95c 	bl	800b62c <HAL_RCC_GetPCLK1Freq>
 800f374:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	469a      	mov	sl, r3
 800f37a:	f04f 0b00 	mov.w	fp, #0
 800f37e:	46d0      	mov	r8, sl
 800f380:	46d9      	mov	r9, fp
 800f382:	eb18 0308 	adds.w	r3, r8, r8
 800f386:	eb49 0409 	adc.w	r4, r9, r9
 800f38a:	4698      	mov	r8, r3
 800f38c:	46a1      	mov	r9, r4
 800f38e:	eb18 080a 	adds.w	r8, r8, sl
 800f392:	eb49 090b 	adc.w	r9, r9, fp
 800f396:	f04f 0100 	mov.w	r1, #0
 800f39a:	f04f 0200 	mov.w	r2, #0
 800f39e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f3a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f3a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f3aa:	4688      	mov	r8, r1
 800f3ac:	4691      	mov	r9, r2
 800f3ae:	eb1a 0508 	adds.w	r5, sl, r8
 800f3b2:	eb4b 0609 	adc.w	r6, fp, r9
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	685b      	ldr	r3, [r3, #4]
 800f3ba:	4619      	mov	r1, r3
 800f3bc:	f04f 0200 	mov.w	r2, #0
 800f3c0:	f04f 0300 	mov.w	r3, #0
 800f3c4:	f04f 0400 	mov.w	r4, #0
 800f3c8:	0094      	lsls	r4, r2, #2
 800f3ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f3ce:	008b      	lsls	r3, r1, #2
 800f3d0:	461a      	mov	r2, r3
 800f3d2:	4623      	mov	r3, r4
 800f3d4:	4628      	mov	r0, r5
 800f3d6:	4631      	mov	r1, r6
 800f3d8:	f7f1 fc6e 	bl	8000cb8 <__aeabi_uldivmod>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	460c      	mov	r4, r1
 800f3e0:	461a      	mov	r2, r3
 800f3e2:	4b50      	ldr	r3, [pc, #320]	; (800f524 <UART_SetConfig+0x6f4>)
 800f3e4:	fba3 2302 	umull	r2, r3, r3, r2
 800f3e8:	095b      	lsrs	r3, r3, #5
 800f3ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	469b      	mov	fp, r3
 800f3f2:	f04f 0c00 	mov.w	ip, #0
 800f3f6:	46d9      	mov	r9, fp
 800f3f8:	46e2      	mov	sl, ip
 800f3fa:	eb19 0309 	adds.w	r3, r9, r9
 800f3fe:	eb4a 040a 	adc.w	r4, sl, sl
 800f402:	4699      	mov	r9, r3
 800f404:	46a2      	mov	sl, r4
 800f406:	eb19 090b 	adds.w	r9, r9, fp
 800f40a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f40e:	f04f 0100 	mov.w	r1, #0
 800f412:	f04f 0200 	mov.w	r2, #0
 800f416:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f41a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f41e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f422:	4689      	mov	r9, r1
 800f424:	4692      	mov	sl, r2
 800f426:	eb1b 0509 	adds.w	r5, fp, r9
 800f42a:	eb4c 060a 	adc.w	r6, ip, sl
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	685b      	ldr	r3, [r3, #4]
 800f432:	4619      	mov	r1, r3
 800f434:	f04f 0200 	mov.w	r2, #0
 800f438:	f04f 0300 	mov.w	r3, #0
 800f43c:	f04f 0400 	mov.w	r4, #0
 800f440:	0094      	lsls	r4, r2, #2
 800f442:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f446:	008b      	lsls	r3, r1, #2
 800f448:	461a      	mov	r2, r3
 800f44a:	4623      	mov	r3, r4
 800f44c:	4628      	mov	r0, r5
 800f44e:	4631      	mov	r1, r6
 800f450:	f7f1 fc32 	bl	8000cb8 <__aeabi_uldivmod>
 800f454:	4603      	mov	r3, r0
 800f456:	460c      	mov	r4, r1
 800f458:	461a      	mov	r2, r3
 800f45a:	4b32      	ldr	r3, [pc, #200]	; (800f524 <UART_SetConfig+0x6f4>)
 800f45c:	fba3 1302 	umull	r1, r3, r3, r2
 800f460:	095b      	lsrs	r3, r3, #5
 800f462:	2164      	movs	r1, #100	; 0x64
 800f464:	fb01 f303 	mul.w	r3, r1, r3
 800f468:	1ad3      	subs	r3, r2, r3
 800f46a:	011b      	lsls	r3, r3, #4
 800f46c:	3332      	adds	r3, #50	; 0x32
 800f46e:	4a2d      	ldr	r2, [pc, #180]	; (800f524 <UART_SetConfig+0x6f4>)
 800f470:	fba2 2303 	umull	r2, r3, r2, r3
 800f474:	095b      	lsrs	r3, r3, #5
 800f476:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f47a:	4498      	add	r8, r3
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	469b      	mov	fp, r3
 800f480:	f04f 0c00 	mov.w	ip, #0
 800f484:	46d9      	mov	r9, fp
 800f486:	46e2      	mov	sl, ip
 800f488:	eb19 0309 	adds.w	r3, r9, r9
 800f48c:	eb4a 040a 	adc.w	r4, sl, sl
 800f490:	4699      	mov	r9, r3
 800f492:	46a2      	mov	sl, r4
 800f494:	eb19 090b 	adds.w	r9, r9, fp
 800f498:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f49c:	f04f 0100 	mov.w	r1, #0
 800f4a0:	f04f 0200 	mov.w	r2, #0
 800f4a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f4a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f4ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f4b0:	4689      	mov	r9, r1
 800f4b2:	4692      	mov	sl, r2
 800f4b4:	eb1b 0509 	adds.w	r5, fp, r9
 800f4b8:	eb4c 060a 	adc.w	r6, ip, sl
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	685b      	ldr	r3, [r3, #4]
 800f4c0:	4619      	mov	r1, r3
 800f4c2:	f04f 0200 	mov.w	r2, #0
 800f4c6:	f04f 0300 	mov.w	r3, #0
 800f4ca:	f04f 0400 	mov.w	r4, #0
 800f4ce:	0094      	lsls	r4, r2, #2
 800f4d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f4d4:	008b      	lsls	r3, r1, #2
 800f4d6:	461a      	mov	r2, r3
 800f4d8:	4623      	mov	r3, r4
 800f4da:	4628      	mov	r0, r5
 800f4dc:	4631      	mov	r1, r6
 800f4de:	f7f1 fbeb 	bl	8000cb8 <__aeabi_uldivmod>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	460c      	mov	r4, r1
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	4b0e      	ldr	r3, [pc, #56]	; (800f524 <UART_SetConfig+0x6f4>)
 800f4ea:	fba3 1302 	umull	r1, r3, r3, r2
 800f4ee:	095b      	lsrs	r3, r3, #5
 800f4f0:	2164      	movs	r1, #100	; 0x64
 800f4f2:	fb01 f303 	mul.w	r3, r1, r3
 800f4f6:	1ad3      	subs	r3, r2, r3
 800f4f8:	011b      	lsls	r3, r3, #4
 800f4fa:	3332      	adds	r3, #50	; 0x32
 800f4fc:	4a09      	ldr	r2, [pc, #36]	; (800f524 <UART_SetConfig+0x6f4>)
 800f4fe:	fba2 2303 	umull	r2, r3, r2, r3
 800f502:	095b      	lsrs	r3, r3, #5
 800f504:	f003 020f 	and.w	r2, r3, #15
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	4442      	add	r2, r8
 800f50e:	609a      	str	r2, [r3, #8]
}
 800f510:	e7ff      	b.n	800f512 <UART_SetConfig+0x6e2>
 800f512:	bf00      	nop
 800f514:	3714      	adds	r7, #20
 800f516:	46bd      	mov	sp, r7
 800f518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f51c:	40011000 	.word	0x40011000
 800f520:	40011400 	.word	0x40011400
 800f524:	51eb851f 	.word	0x51eb851f

0800f528 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800f528:	b084      	sub	sp, #16
 800f52a:	b480      	push	{r7}
 800f52c:	b085      	sub	sp, #20
 800f52e:	af00      	add	r7, sp, #0
 800f530:	6078      	str	r0, [r7, #4]
 800f532:	f107 001c 	add.w	r0, r7, #28
 800f536:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f53a:	2300      	movs	r3, #0
 800f53c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800f53e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800f540:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f542:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800f544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800f546:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f548:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800f54a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800f54e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800f552:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f554:	68fa      	ldr	r2, [r7, #12]
 800f556:	4313      	orrs	r3, r2
 800f558:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	685b      	ldr	r3, [r3, #4]
 800f55e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800f562:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f566:	68fa      	ldr	r2, [r7, #12]
 800f568:	431a      	orrs	r2, r3
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f56e:	2300      	movs	r3, #0
}
 800f570:	4618      	mov	r0, r3
 800f572:	3714      	adds	r7, #20
 800f574:	46bd      	mov	sp, r7
 800f576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57a:	b004      	add	sp, #16
 800f57c:	4770      	bx	lr

0800f57e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800f57e:	b480      	push	{r7}
 800f580:	b083      	sub	sp, #12
 800f582:	af00      	add	r7, sp, #0
 800f584:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	370c      	adds	r7, #12
 800f590:	46bd      	mov	sp, r7
 800f592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f596:	4770      	bx	lr

0800f598 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800f598:	b480      	push	{r7}
 800f59a:	b083      	sub	sp, #12
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
 800f5a0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	681a      	ldr	r2, [r3, #0]
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f5ac:	2300      	movs	r3, #0
}
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	370c      	adds	r7, #12
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b8:	4770      	bx	lr

0800f5ba <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800f5ba:	b580      	push	{r7, lr}
 800f5bc:	b082      	sub	sp, #8
 800f5be:	af00      	add	r7, sp, #0
 800f5c0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2203      	movs	r2, #3
 800f5c6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800f5c8:	2002      	movs	r0, #2
 800f5ca:	f7f9 fbdd 	bl	8008d88 <HAL_Delay>
  
  return HAL_OK;
 800f5ce:	2300      	movs	r3, #0
}
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	3708      	adds	r7, #8
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}

0800f5d8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800f5d8:	b480      	push	{r7}
 800f5da:	b083      	sub	sp, #12
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	f003 0303 	and.w	r3, r3, #3
}
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	370c      	adds	r7, #12
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f2:	4770      	bx	lr

0800f5f4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800f5f4:	b480      	push	{r7}
 800f5f6:	b085      	sub	sp, #20
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
 800f5fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f5fe:	2300      	movs	r3, #0
 800f600:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	681a      	ldr	r2, [r3, #0]
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f612:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f618:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f61e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f620:	68fa      	ldr	r2, [r7, #12]
 800f622:	4313      	orrs	r3, r2
 800f624:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	68db      	ldr	r3, [r3, #12]
 800f62a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f62e:	f023 030f 	bic.w	r3, r3, #15
 800f632:	68fa      	ldr	r2, [r7, #12]
 800f634:	431a      	orrs	r2, r3
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800f63a:	2300      	movs	r3, #0
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	3714      	adds	r7, #20
 800f640:	46bd      	mov	sp, r7
 800f642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f646:	4770      	bx	lr

0800f648 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800f648:	b480      	push	{r7}
 800f64a:	b083      	sub	sp, #12
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	691b      	ldr	r3, [r3, #16]
 800f654:	b2db      	uxtb	r3, r3
}
 800f656:	4618      	mov	r0, r3
 800f658:	370c      	adds	r7, #12
 800f65a:	46bd      	mov	sp, r7
 800f65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f660:	4770      	bx	lr

0800f662 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800f662:	b480      	push	{r7}
 800f664:	b085      	sub	sp, #20
 800f666:	af00      	add	r7, sp, #0
 800f668:	6078      	str	r0, [r7, #4]
 800f66a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	3314      	adds	r3, #20
 800f670:	461a      	mov	r2, r3
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	4413      	add	r3, r2
 800f676:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	681b      	ldr	r3, [r3, #0]
}  
 800f67c:	4618      	mov	r0, r3
 800f67e:	3714      	adds	r7, #20
 800f680:	46bd      	mov	sp, r7
 800f682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f686:	4770      	bx	lr

0800f688 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800f688:	b480      	push	{r7}
 800f68a:	b085      	sub	sp, #20
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f692:	2300      	movs	r3, #0
 800f694:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	681a      	ldr	r2, [r3, #0]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	685a      	ldr	r2, [r3, #4]
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f6ae:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f6b4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f6ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f6bc:	68fa      	ldr	r2, [r7, #12]
 800f6be:	4313      	orrs	r3, r2
 800f6c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6c6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	431a      	orrs	r2, r3
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f6d2:	2300      	movs	r3, #0

}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	3714      	adds	r7, #20
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr

0800f6e0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b088      	sub	sp, #32
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
 800f6e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f6ee:	2310      	movs	r3, #16
 800f6f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f6f2:	2340      	movs	r3, #64	; 0x40
 800f6f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f6fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f700:	f107 0308 	add.w	r3, r7, #8
 800f704:	4619      	mov	r1, r3
 800f706:	6878      	ldr	r0, [r7, #4]
 800f708:	f7ff ff74 	bl	800f5f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800f70c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f710:	2110      	movs	r1, #16
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f000 fa40 	bl	800fb98 <SDMMC_GetCmdResp1>
 800f718:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f71a:	69fb      	ldr	r3, [r7, #28]
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	3720      	adds	r7, #32
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}

0800f724 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b088      	sub	sp, #32
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
 800f72c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f732:	2311      	movs	r3, #17
 800f734:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f736:	2340      	movs	r3, #64	; 0x40
 800f738:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f73a:	2300      	movs	r3, #0
 800f73c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f73e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f742:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f744:	f107 0308 	add.w	r3, r7, #8
 800f748:	4619      	mov	r1, r3
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f7ff ff52 	bl	800f5f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f750:	f241 3288 	movw	r2, #5000	; 0x1388
 800f754:	2111      	movs	r1, #17
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f000 fa1e 	bl	800fb98 <SDMMC_GetCmdResp1>
 800f75c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f75e:	69fb      	ldr	r3, [r7, #28]
}
 800f760:	4618      	mov	r0, r3
 800f762:	3720      	adds	r7, #32
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}

0800f768 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b088      	sub	sp, #32
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
 800f770:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f776:	2312      	movs	r3, #18
 800f778:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f77a:	2340      	movs	r3, #64	; 0x40
 800f77c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f77e:	2300      	movs	r3, #0
 800f780:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f786:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f788:	f107 0308 	add.w	r3, r7, #8
 800f78c:	4619      	mov	r1, r3
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	f7ff ff30 	bl	800f5f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f794:	f241 3288 	movw	r2, #5000	; 0x1388
 800f798:	2112      	movs	r1, #18
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f000 f9fc 	bl	800fb98 <SDMMC_GetCmdResp1>
 800f7a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f7a2:	69fb      	ldr	r3, [r7, #28]
}
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	3720      	adds	r7, #32
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	bd80      	pop	{r7, pc}

0800f7ac <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b088      	sub	sp, #32
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
 800f7b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f7ba:	2318      	movs	r3, #24
 800f7bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f7be:	2340      	movs	r3, #64	; 0x40
 800f7c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f7c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f7cc:	f107 0308 	add.w	r3, r7, #8
 800f7d0:	4619      	mov	r1, r3
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f7ff ff0e 	bl	800f5f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f7d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f7dc:	2118      	movs	r1, #24
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	f000 f9da 	bl	800fb98 <SDMMC_GetCmdResp1>
 800f7e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f7e6:	69fb      	ldr	r3, [r7, #28]
}
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	3720      	adds	r7, #32
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bd80      	pop	{r7, pc}

0800f7f0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b088      	sub	sp, #32
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
 800f7f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f7fe:	2319      	movs	r3, #25
 800f800:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f802:	2340      	movs	r3, #64	; 0x40
 800f804:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f806:	2300      	movs	r3, #0
 800f808:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f80a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f80e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f810:	f107 0308 	add.w	r3, r7, #8
 800f814:	4619      	mov	r1, r3
 800f816:	6878      	ldr	r0, [r7, #4]
 800f818:	f7ff feec 	bl	800f5f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f81c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f820:	2119      	movs	r1, #25
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f000 f9b8 	bl	800fb98 <SDMMC_GetCmdResp1>
 800f828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f82a:	69fb      	ldr	r3, [r7, #28]
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3720      	adds	r7, #32
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}

0800f834 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b088      	sub	sp, #32
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f83c:	2300      	movs	r3, #0
 800f83e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f840:	230c      	movs	r3, #12
 800f842:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f844:	2340      	movs	r3, #64	; 0x40
 800f846:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f848:	2300      	movs	r3, #0
 800f84a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f84c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f850:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f852:	f107 0308 	add.w	r3, r7, #8
 800f856:	4619      	mov	r1, r3
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f7ff fecb 	bl	800f5f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800f85e:	4a05      	ldr	r2, [pc, #20]	; (800f874 <SDMMC_CmdStopTransfer+0x40>)
 800f860:	210c      	movs	r1, #12
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f000 f998 	bl	800fb98 <SDMMC_GetCmdResp1>
 800f868:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f86a:	69fb      	ldr	r3, [r7, #28]
}
 800f86c:	4618      	mov	r0, r3
 800f86e:	3720      	adds	r7, #32
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}
 800f874:	05f5e100 	.word	0x05f5e100

0800f878 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b08a      	sub	sp, #40	; 0x28
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	60f8      	str	r0, [r7, #12]
 800f880:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f888:	2307      	movs	r3, #7
 800f88a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f88c:	2340      	movs	r3, #64	; 0x40
 800f88e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f890:	2300      	movs	r3, #0
 800f892:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f898:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f89a:	f107 0310 	add.w	r3, r7, #16
 800f89e:	4619      	mov	r1, r3
 800f8a0:	68f8      	ldr	r0, [r7, #12]
 800f8a2:	f7ff fea7 	bl	800f5f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800f8a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800f8aa:	2107      	movs	r1, #7
 800f8ac:	68f8      	ldr	r0, [r7, #12]
 800f8ae:	f000 f973 	bl	800fb98 <SDMMC_GetCmdResp1>
 800f8b2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800f8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3728      	adds	r7, #40	; 0x28
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}

0800f8be <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800f8be:	b580      	push	{r7, lr}
 800f8c0:	b088      	sub	sp, #32
 800f8c2:	af00      	add	r7, sp, #0
 800f8c4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f8d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f8dc:	f107 0308 	add.w	r3, r7, #8
 800f8e0:	4619      	mov	r1, r3
 800f8e2:	6878      	ldr	r0, [r7, #4]
 800f8e4:	f7ff fe86 	bl	800f5f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f000 f92d 	bl	800fb48 <SDMMC_GetCmdError>
 800f8ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f8f0:	69fb      	ldr	r3, [r7, #28]
}
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	3720      	adds	r7, #32
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}

0800f8fa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800f8fa:	b580      	push	{r7, lr}
 800f8fc:	b088      	sub	sp, #32
 800f8fe:	af00      	add	r7, sp, #0
 800f900:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f902:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f906:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f908:	2308      	movs	r3, #8
 800f90a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f90c:	2340      	movs	r3, #64	; 0x40
 800f90e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f910:	2300      	movs	r3, #0
 800f912:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f918:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f91a:	f107 0308 	add.w	r3, r7, #8
 800f91e:	4619      	mov	r1, r3
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f7ff fe67 	bl	800f5f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f000 fb16 	bl	800ff58 <SDMMC_GetCmdResp7>
 800f92c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f92e:	69fb      	ldr	r3, [r7, #28]
}
 800f930:	4618      	mov	r0, r3
 800f932:	3720      	adds	r7, #32
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b088      	sub	sp, #32
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
 800f940:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f946:	2337      	movs	r3, #55	; 0x37
 800f948:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f94a:	2340      	movs	r3, #64	; 0x40
 800f94c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f94e:	2300      	movs	r3, #0
 800f950:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f956:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f958:	f107 0308 	add.w	r3, r7, #8
 800f95c:	4619      	mov	r1, r3
 800f95e:	6878      	ldr	r0, [r7, #4]
 800f960:	f7ff fe48 	bl	800f5f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800f964:	f241 3288 	movw	r2, #5000	; 0x1388
 800f968:	2137      	movs	r1, #55	; 0x37
 800f96a:	6878      	ldr	r0, [r7, #4]
 800f96c:	f000 f914 	bl	800fb98 <SDMMC_GetCmdResp1>
 800f970:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f972:	69fb      	ldr	r3, [r7, #28]
}
 800f974:	4618      	mov	r0, r3
 800f976:	3720      	adds	r7, #32
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}

0800f97c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b088      	sub	sp, #32
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
 800f984:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f98c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f990:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f992:	2329      	movs	r3, #41	; 0x29
 800f994:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f996:	2340      	movs	r3, #64	; 0x40
 800f998:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f99a:	2300      	movs	r3, #0
 800f99c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f99e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f9a4:	f107 0308 	add.w	r3, r7, #8
 800f9a8:	4619      	mov	r1, r3
 800f9aa:	6878      	ldr	r0, [r7, #4]
 800f9ac:	f7ff fe22 	bl	800f5f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800f9b0:	6878      	ldr	r0, [r7, #4]
 800f9b2:	f000 fa23 	bl	800fdfc <SDMMC_GetCmdResp3>
 800f9b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f9b8:	69fb      	ldr	r3, [r7, #28]
}
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	3720      	adds	r7, #32
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}

0800f9c2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800f9c2:	b580      	push	{r7, lr}
 800f9c4:	b088      	sub	sp, #32
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	6078      	str	r0, [r7, #4]
 800f9ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f9d0:	2306      	movs	r3, #6
 800f9d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f9d4:	2340      	movs	r3, #64	; 0x40
 800f9d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f9d8:	2300      	movs	r3, #0
 800f9da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f9dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f9e2:	f107 0308 	add.w	r3, r7, #8
 800f9e6:	4619      	mov	r1, r3
 800f9e8:	6878      	ldr	r0, [r7, #4]
 800f9ea:	f7ff fe03 	bl	800f5f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800f9ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800f9f2:	2106      	movs	r1, #6
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f000 f8cf 	bl	800fb98 <SDMMC_GetCmdResp1>
 800f9fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f9fc:	69fb      	ldr	r3, [r7, #28]
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	3720      	adds	r7, #32
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}

0800fa06 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800fa06:	b580      	push	{r7, lr}
 800fa08:	b088      	sub	sp, #32
 800fa0a:	af00      	add	r7, sp, #0
 800fa0c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800fa12:	2333      	movs	r3, #51	; 0x33
 800fa14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fa16:	2340      	movs	r3, #64	; 0x40
 800fa18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fa1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fa24:	f107 0308 	add.w	r3, r7, #8
 800fa28:	4619      	mov	r1, r3
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	f7ff fde2 	bl	800f5f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800fa30:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa34:	2133      	movs	r1, #51	; 0x33
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f000 f8ae 	bl	800fb98 <SDMMC_GetCmdResp1>
 800fa3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa3e:	69fb      	ldr	r3, [r7, #28]
}
 800fa40:	4618      	mov	r0, r3
 800fa42:	3720      	adds	r7, #32
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}

0800fa48 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b088      	sub	sp, #32
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800fa50:	2300      	movs	r3, #0
 800fa52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800fa54:	2302      	movs	r3, #2
 800fa56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800fa58:	23c0      	movs	r3, #192	; 0xc0
 800fa5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fa60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fa66:	f107 0308 	add.w	r3, r7, #8
 800fa6a:	4619      	mov	r1, r3
 800fa6c:	6878      	ldr	r0, [r7, #4]
 800fa6e:	f7ff fdc1 	bl	800f5f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f000 f97c 	bl	800fd70 <SDMMC_GetCmdResp2>
 800fa78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa7a:	69fb      	ldr	r3, [r7, #28]
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	3720      	adds	r7, #32
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}

0800fa84 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b088      	sub	sp, #32
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800fa92:	2309      	movs	r3, #9
 800fa94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800fa96:	23c0      	movs	r3, #192	; 0xc0
 800fa98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fa9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800faa2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800faa4:	f107 0308 	add.w	r3, r7, #8
 800faa8:	4619      	mov	r1, r3
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f7ff fda2 	bl	800f5f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	f000 f95d 	bl	800fd70 <SDMMC_GetCmdResp2>
 800fab6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fab8:	69fb      	ldr	r3, [r7, #28]
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3720      	adds	r7, #32
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}

0800fac2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800fac2:	b580      	push	{r7, lr}
 800fac4:	b088      	sub	sp, #32
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	6078      	str	r0, [r7, #4]
 800faca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800facc:	2300      	movs	r3, #0
 800face:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800fad0:	2303      	movs	r3, #3
 800fad2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fad4:	2340      	movs	r3, #64	; 0x40
 800fad6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fad8:	2300      	movs	r3, #0
 800fada:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fadc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fae0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fae2:	f107 0308 	add.w	r3, r7, #8
 800fae6:	4619      	mov	r1, r3
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f7ff fd83 	bl	800f5f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800faee:	683a      	ldr	r2, [r7, #0]
 800faf0:	2103      	movs	r1, #3
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f000 f9bc 	bl	800fe70 <SDMMC_GetCmdResp6>
 800faf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fafa:	69fb      	ldr	r3, [r7, #28]
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3720      	adds	r7, #32
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}

0800fb04 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b088      	sub	sp, #32
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800fb12:	230d      	movs	r3, #13
 800fb14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fb16:	2340      	movs	r3, #64	; 0x40
 800fb18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fb1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fb24:	f107 0308 	add.w	r3, r7, #8
 800fb28:	4619      	mov	r1, r3
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	f7ff fd62 	bl	800f5f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800fb30:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb34:	210d      	movs	r1, #13
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f000 f82e 	bl	800fb98 <SDMMC_GetCmdResp1>
 800fb3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb3e:	69fb      	ldr	r3, [r7, #28]
}
 800fb40:	4618      	mov	r0, r3
 800fb42:	3720      	adds	r7, #32
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd80      	pop	{r7, pc}

0800fb48 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800fb48:	b490      	push	{r4, r7}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fb50:	4b0f      	ldr	r3, [pc, #60]	; (800fb90 <SDMMC_GetCmdError+0x48>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	4a0f      	ldr	r2, [pc, #60]	; (800fb94 <SDMMC_GetCmdError+0x4c>)
 800fb56:	fba2 2303 	umull	r2, r3, r2, r3
 800fb5a:	0a5b      	lsrs	r3, r3, #9
 800fb5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb60:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fb64:	4623      	mov	r3, r4
 800fb66:	1e5c      	subs	r4, r3, #1
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d102      	bne.n	800fb72 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fb6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fb70:	e009      	b.n	800fb86 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d0f2      	beq.n	800fb64 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	22c5      	movs	r2, #197	; 0xc5
 800fb82:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800fb84:	2300      	movs	r3, #0
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3708      	adds	r7, #8
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bc90      	pop	{r4, r7}
 800fb8e:	4770      	bx	lr
 800fb90:	20000000 	.word	0x20000000
 800fb94:	10624dd3 	.word	0x10624dd3

0800fb98 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800fb98:	b590      	push	{r4, r7, lr}
 800fb9a:	b087      	sub	sp, #28
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	60f8      	str	r0, [r7, #12]
 800fba0:	460b      	mov	r3, r1
 800fba2:	607a      	str	r2, [r7, #4]
 800fba4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800fba6:	4b6f      	ldr	r3, [pc, #444]	; (800fd64 <SDMMC_GetCmdResp1+0x1cc>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	4a6f      	ldr	r2, [pc, #444]	; (800fd68 <SDMMC_GetCmdResp1+0x1d0>)
 800fbac:	fba2 2303 	umull	r2, r3, r2, r3
 800fbb0:	0a5b      	lsrs	r3, r3, #9
 800fbb2:	687a      	ldr	r2, [r7, #4]
 800fbb4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fbb8:	4623      	mov	r3, r4
 800fbba:	1e5c      	subs	r4, r3, #1
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d102      	bne.n	800fbc6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fbc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fbc4:	e0c9      	b.n	800fd5a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbca:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d0f0      	beq.n	800fbb8 <SDMMC_GetCmdResp1+0x20>
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d1eb      	bne.n	800fbb8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbe4:	f003 0304 	and.w	r3, r3, #4
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d004      	beq.n	800fbf6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	2204      	movs	r2, #4
 800fbf0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fbf2:	2304      	movs	r3, #4
 800fbf4:	e0b1      	b.n	800fd5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbfa:	f003 0301 	and.w	r3, r3, #1
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d004      	beq.n	800fc0c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	2201      	movs	r2, #1
 800fc06:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fc08:	2301      	movs	r3, #1
 800fc0a:	e0a6      	b.n	800fd5a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	22c5      	movs	r2, #197	; 0xc5
 800fc10:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800fc12:	68f8      	ldr	r0, [r7, #12]
 800fc14:	f7ff fd18 	bl	800f648 <SDIO_GetCommandResponse>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	461a      	mov	r2, r3
 800fc1c:	7afb      	ldrb	r3, [r7, #11]
 800fc1e:	4293      	cmp	r3, r2
 800fc20:	d001      	beq.n	800fc26 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fc22:	2301      	movs	r3, #1
 800fc24:	e099      	b.n	800fd5a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800fc26:	2100      	movs	r1, #0
 800fc28:	68f8      	ldr	r0, [r7, #12]
 800fc2a:	f7ff fd1a 	bl	800f662 <SDIO_GetResponse>
 800fc2e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800fc30:	693a      	ldr	r2, [r7, #16]
 800fc32:	4b4e      	ldr	r3, [pc, #312]	; (800fd6c <SDMMC_GetCmdResp1+0x1d4>)
 800fc34:	4013      	ands	r3, r2
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d101      	bne.n	800fc3e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	e08d      	b.n	800fd5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800fc3e:	693b      	ldr	r3, [r7, #16]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	da02      	bge.n	800fc4a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800fc44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fc48:	e087      	b.n	800fd5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800fc4a:	693b      	ldr	r3, [r7, #16]
 800fc4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d001      	beq.n	800fc58 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800fc54:	2340      	movs	r3, #64	; 0x40
 800fc56:	e080      	b.n	800fd5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800fc58:	693b      	ldr	r3, [r7, #16]
 800fc5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d001      	beq.n	800fc66 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800fc62:	2380      	movs	r3, #128	; 0x80
 800fc64:	e079      	b.n	800fd5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800fc66:	693b      	ldr	r3, [r7, #16]
 800fc68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d002      	beq.n	800fc76 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800fc70:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fc74:	e071      	b.n	800fd5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800fc76:	693b      	ldr	r3, [r7, #16]
 800fc78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d002      	beq.n	800fc86 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800fc80:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fc84:	e069      	b.n	800fd5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d002      	beq.n	800fc96 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800fc90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc94:	e061      	b.n	800fd5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800fc96:	693b      	ldr	r3, [r7, #16]
 800fc98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d002      	beq.n	800fca6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800fca0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fca4:	e059      	b.n	800fd5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800fca6:	693b      	ldr	r3, [r7, #16]
 800fca8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d002      	beq.n	800fcb6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fcb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fcb4:	e051      	b.n	800fd5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800fcb6:	693b      	ldr	r3, [r7, #16]
 800fcb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d002      	beq.n	800fcc6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fcc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fcc4:	e049      	b.n	800fd5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800fcc6:	693b      	ldr	r3, [r7, #16]
 800fcc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d002      	beq.n	800fcd6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800fcd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fcd4:	e041      	b.n	800fd5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800fcd6:	693b      	ldr	r3, [r7, #16]
 800fcd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d002      	beq.n	800fce6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800fce0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fce4:	e039      	b.n	800fd5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800fce6:	693b      	ldr	r3, [r7, #16]
 800fce8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d002      	beq.n	800fcf6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800fcf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fcf4:	e031      	b.n	800fd5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d002      	beq.n	800fd06 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800fd00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fd04:	e029      	b.n	800fd5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d002      	beq.n	800fd16 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fd10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fd14:	e021      	b.n	800fd5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800fd16:	693b      	ldr	r3, [r7, #16]
 800fd18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d002      	beq.n	800fd26 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fd20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800fd24:	e019      	b.n	800fd5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800fd26:	693b      	ldr	r3, [r7, #16]
 800fd28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d002      	beq.n	800fd36 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800fd30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fd34:	e011      	b.n	800fd5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d002      	beq.n	800fd46 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800fd40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fd44:	e009      	b.n	800fd5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800fd46:	693b      	ldr	r3, [r7, #16]
 800fd48:	f003 0308 	and.w	r3, r3, #8
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d002      	beq.n	800fd56 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800fd50:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fd54:	e001      	b.n	800fd5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fd56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	371c      	adds	r7, #28
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd90      	pop	{r4, r7, pc}
 800fd62:	bf00      	nop
 800fd64:	20000000 	.word	0x20000000
 800fd68:	10624dd3 	.word	0x10624dd3
 800fd6c:	fdffe008 	.word	0xfdffe008

0800fd70 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800fd70:	b490      	push	{r4, r7}
 800fd72:	b084      	sub	sp, #16
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fd78:	4b1e      	ldr	r3, [pc, #120]	; (800fdf4 <SDMMC_GetCmdResp2+0x84>)
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	4a1e      	ldr	r2, [pc, #120]	; (800fdf8 <SDMMC_GetCmdResp2+0x88>)
 800fd7e:	fba2 2303 	umull	r2, r3, r2, r3
 800fd82:	0a5b      	lsrs	r3, r3, #9
 800fd84:	f241 3288 	movw	r2, #5000	; 0x1388
 800fd88:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fd8c:	4623      	mov	r3, r4
 800fd8e:	1e5c      	subs	r4, r3, #1
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d102      	bne.n	800fd9a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fd94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fd98:	e026      	b.n	800fde8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd9e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d0f0      	beq.n	800fd8c <SDMMC_GetCmdResp2+0x1c>
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d1eb      	bne.n	800fd8c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdb8:	f003 0304 	and.w	r3, r3, #4
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d004      	beq.n	800fdca <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2204      	movs	r2, #4
 800fdc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fdc6:	2304      	movs	r3, #4
 800fdc8:	e00e      	b.n	800fde8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdce:	f003 0301 	and.w	r3, r3, #1
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d004      	beq.n	800fde0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2201      	movs	r2, #1
 800fdda:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fddc:	2301      	movs	r3, #1
 800fdde:	e003      	b.n	800fde8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	22c5      	movs	r2, #197	; 0xc5
 800fde4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800fde6:	2300      	movs	r3, #0
}
 800fde8:	4618      	mov	r0, r3
 800fdea:	3710      	adds	r7, #16
 800fdec:	46bd      	mov	sp, r7
 800fdee:	bc90      	pop	{r4, r7}
 800fdf0:	4770      	bx	lr
 800fdf2:	bf00      	nop
 800fdf4:	20000000 	.word	0x20000000
 800fdf8:	10624dd3 	.word	0x10624dd3

0800fdfc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800fdfc:	b490      	push	{r4, r7}
 800fdfe:	b084      	sub	sp, #16
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fe04:	4b18      	ldr	r3, [pc, #96]	; (800fe68 <SDMMC_GetCmdResp3+0x6c>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	4a18      	ldr	r2, [pc, #96]	; (800fe6c <SDMMC_GetCmdResp3+0x70>)
 800fe0a:	fba2 2303 	umull	r2, r3, r2, r3
 800fe0e:	0a5b      	lsrs	r3, r3, #9
 800fe10:	f241 3288 	movw	r2, #5000	; 0x1388
 800fe14:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fe18:	4623      	mov	r3, r4
 800fe1a:	1e5c      	subs	r4, r3, #1
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d102      	bne.n	800fe26 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fe20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fe24:	e01b      	b.n	800fe5e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe2a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d0f0      	beq.n	800fe18 <SDMMC_GetCmdResp3+0x1c>
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d1eb      	bne.n	800fe18 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe44:	f003 0304 	and.w	r3, r3, #4
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d004      	beq.n	800fe56 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2204      	movs	r2, #4
 800fe50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fe52:	2304      	movs	r3, #4
 800fe54:	e003      	b.n	800fe5e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	22c5      	movs	r2, #197	; 0xc5
 800fe5a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fe5c:	2300      	movs	r3, #0
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3710      	adds	r7, #16
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bc90      	pop	{r4, r7}
 800fe66:	4770      	bx	lr
 800fe68:	20000000 	.word	0x20000000
 800fe6c:	10624dd3 	.word	0x10624dd3

0800fe70 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800fe70:	b590      	push	{r4, r7, lr}
 800fe72:	b087      	sub	sp, #28
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	60f8      	str	r0, [r7, #12]
 800fe78:	460b      	mov	r3, r1
 800fe7a:	607a      	str	r2, [r7, #4]
 800fe7c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fe7e:	4b34      	ldr	r3, [pc, #208]	; (800ff50 <SDMMC_GetCmdResp6+0xe0>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	4a34      	ldr	r2, [pc, #208]	; (800ff54 <SDMMC_GetCmdResp6+0xe4>)
 800fe84:	fba2 2303 	umull	r2, r3, r2, r3
 800fe88:	0a5b      	lsrs	r3, r3, #9
 800fe8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800fe8e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fe92:	4623      	mov	r3, r4
 800fe94:	1e5c      	subs	r4, r3, #1
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d102      	bne.n	800fea0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fe9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fe9e:	e052      	b.n	800ff46 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fea4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fea6:	697b      	ldr	r3, [r7, #20]
 800fea8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800feac:	2b00      	cmp	r3, #0
 800feae:	d0f0      	beq.n	800fe92 <SDMMC_GetCmdResp6+0x22>
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d1eb      	bne.n	800fe92 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800febe:	f003 0304 	and.w	r3, r3, #4
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d004      	beq.n	800fed0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	2204      	movs	r2, #4
 800feca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fecc:	2304      	movs	r3, #4
 800fece:	e03a      	b.n	800ff46 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fed4:	f003 0301 	and.w	r3, r3, #1
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d004      	beq.n	800fee6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	2201      	movs	r2, #1
 800fee0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fee2:	2301      	movs	r3, #1
 800fee4:	e02f      	b.n	800ff46 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800fee6:	68f8      	ldr	r0, [r7, #12]
 800fee8:	f7ff fbae 	bl	800f648 <SDIO_GetCommandResponse>
 800feec:	4603      	mov	r3, r0
 800feee:	461a      	mov	r2, r3
 800fef0:	7afb      	ldrb	r3, [r7, #11]
 800fef2:	4293      	cmp	r3, r2
 800fef4:	d001      	beq.n	800fefa <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fef6:	2301      	movs	r3, #1
 800fef8:	e025      	b.n	800ff46 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	22c5      	movs	r2, #197	; 0xc5
 800fefe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ff00:	2100      	movs	r1, #0
 800ff02:	68f8      	ldr	r0, [r7, #12]
 800ff04:	f7ff fbad 	bl	800f662 <SDIO_GetResponse>
 800ff08:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ff0a:	693b      	ldr	r3, [r7, #16]
 800ff0c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d106      	bne.n	800ff22 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	0c1b      	lsrs	r3, r3, #16
 800ff18:	b29a      	uxth	r2, r3
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ff1e:	2300      	movs	r3, #0
 800ff20:	e011      	b.n	800ff46 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d002      	beq.n	800ff32 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ff2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ff30:	e009      	b.n	800ff46 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ff32:	693b      	ldr	r3, [r7, #16]
 800ff34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d002      	beq.n	800ff42 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ff3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff40:	e001      	b.n	800ff46 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ff42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	371c      	adds	r7, #28
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd90      	pop	{r4, r7, pc}
 800ff4e:	bf00      	nop
 800ff50:	20000000 	.word	0x20000000
 800ff54:	10624dd3 	.word	0x10624dd3

0800ff58 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ff58:	b490      	push	{r4, r7}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ff60:	4b21      	ldr	r3, [pc, #132]	; (800ffe8 <SDMMC_GetCmdResp7+0x90>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	4a21      	ldr	r2, [pc, #132]	; (800ffec <SDMMC_GetCmdResp7+0x94>)
 800ff66:	fba2 2303 	umull	r2, r3, r2, r3
 800ff6a:	0a5b      	lsrs	r3, r3, #9
 800ff6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ff70:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ff74:	4623      	mov	r3, r4
 800ff76:	1e5c      	subs	r4, r3, #1
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d102      	bne.n	800ff82 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ff7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ff80:	e02c      	b.n	800ffdc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff86:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d0f0      	beq.n	800ff74 <SDMMC_GetCmdResp7+0x1c>
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d1eb      	bne.n	800ff74 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffa0:	f003 0304 	and.w	r3, r3, #4
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d004      	beq.n	800ffb2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2204      	movs	r2, #4
 800ffac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ffae:	2304      	movs	r3, #4
 800ffb0:	e014      	b.n	800ffdc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffb6:	f003 0301 	and.w	r3, r3, #1
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d004      	beq.n	800ffc8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	2201      	movs	r2, #1
 800ffc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	e009      	b.n	800ffdc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d002      	beq.n	800ffda <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2240      	movs	r2, #64	; 0x40
 800ffd8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ffda:	2300      	movs	r3, #0
  
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3710      	adds	r7, #16
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bc90      	pop	{r4, r7}
 800ffe4:	4770      	bx	lr
 800ffe6:	bf00      	nop
 800ffe8:	20000000 	.word	0x20000000
 800ffec:	10624dd3 	.word	0x10624dd3

0800fff0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fff4:	4904      	ldr	r1, [pc, #16]	; (8010008 <MX_FATFS_Init+0x18>)
 800fff6:	4805      	ldr	r0, [pc, #20]	; (801000c <MX_FATFS_Init+0x1c>)
 800fff8:	f003 fb9c 	bl	8013734 <FATFS_LinkDriver>
 800fffc:	4603      	mov	r3, r0
 800fffe:	461a      	mov	r2, r3
 8010000:	4b03      	ldr	r3, [pc, #12]	; (8010010 <MX_FATFS_Init+0x20>)
 8010002:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010004:	bf00      	nop
 8010006:	bd80      	pop	{r7, pc}
 8010008:	2003ee00 	.word	0x2003ee00
 801000c:	080195f4 	.word	0x080195f4
 8010010:	2003edfc 	.word	0x2003edfc

08010014 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b082      	sub	sp, #8
 8010018:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801001a:	2300      	movs	r3, #0
 801001c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801001e:	f000 f896 	bl	801014e <BSP_SD_IsDetected>
 8010022:	4603      	mov	r3, r0
 8010024:	2b01      	cmp	r3, #1
 8010026:	d001      	beq.n	801002c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010028:	2301      	movs	r3, #1
 801002a:	e012      	b.n	8010052 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 801002c:	480b      	ldr	r0, [pc, #44]	; (801005c <BSP_SD_Init+0x48>)
 801002e:	f7fb ffa5 	bl	800bf7c <HAL_SD_Init>
 8010032:	4603      	mov	r3, r0
 8010034:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010036:	79fb      	ldrb	r3, [r7, #7]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d109      	bne.n	8010050 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 801003c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010040:	4806      	ldr	r0, [pc, #24]	; (801005c <BSP_SD_Init+0x48>)
 8010042:	f7fc fd4f 	bl	800cae4 <HAL_SD_ConfigWideBusOperation>
 8010046:	4603      	mov	r3, r0
 8010048:	2b00      	cmp	r3, #0
 801004a:	d001      	beq.n	8010050 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801004c:	2301      	movs	r3, #1
 801004e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010050:	79fb      	ldrb	r3, [r7, #7]
}
 8010052:	4618      	mov	r0, r3
 8010054:	3708      	adds	r7, #8
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}
 801005a:	bf00      	nop
 801005c:	2003ebfc 	.word	0x2003ebfc

08010060 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b086      	sub	sp, #24
 8010064:	af00      	add	r7, sp, #0
 8010066:	60f8      	str	r0, [r7, #12]
 8010068:	60b9      	str	r1, [r7, #8]
 801006a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801006c:	2300      	movs	r3, #0
 801006e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	68ba      	ldr	r2, [r7, #8]
 8010074:	68f9      	ldr	r1, [r7, #12]
 8010076:	4806      	ldr	r0, [pc, #24]	; (8010090 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010078:	f7fc f810 	bl	800c09c <HAL_SD_ReadBlocks_DMA>
 801007c:	4603      	mov	r3, r0
 801007e:	2b00      	cmp	r3, #0
 8010080:	d001      	beq.n	8010086 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010082:	2301      	movs	r3, #1
 8010084:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010086:	7dfb      	ldrb	r3, [r7, #23]
}
 8010088:	4618      	mov	r0, r3
 801008a:	3718      	adds	r7, #24
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}
 8010090:	2003ebfc 	.word	0x2003ebfc

08010094 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b086      	sub	sp, #24
 8010098:	af00      	add	r7, sp, #0
 801009a:	60f8      	str	r0, [r7, #12]
 801009c:	60b9      	str	r1, [r7, #8]
 801009e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80100a0:	2300      	movs	r3, #0
 80100a2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	68ba      	ldr	r2, [r7, #8]
 80100a8:	68f9      	ldr	r1, [r7, #12]
 80100aa:	4806      	ldr	r0, [pc, #24]	; (80100c4 <BSP_SD_WriteBlocks_DMA+0x30>)
 80100ac:	f7fc f8de 	bl	800c26c <HAL_SD_WriteBlocks_DMA>
 80100b0:	4603      	mov	r3, r0
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d001      	beq.n	80100ba <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80100b6:	2301      	movs	r3, #1
 80100b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80100ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80100bc:	4618      	mov	r0, r3
 80100be:	3718      	adds	r7, #24
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}
 80100c4:	2003ebfc 	.word	0x2003ebfc

080100c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80100cc:	4805      	ldr	r0, [pc, #20]	; (80100e4 <BSP_SD_GetCardState+0x1c>)
 80100ce:	f7fc fd85 	bl	800cbdc <HAL_SD_GetCardState>
 80100d2:	4603      	mov	r3, r0
 80100d4:	2b04      	cmp	r3, #4
 80100d6:	bf14      	ite	ne
 80100d8:	2301      	movne	r3, #1
 80100da:	2300      	moveq	r3, #0
 80100dc:	b2db      	uxtb	r3, r3
}
 80100de:	4618      	mov	r0, r3
 80100e0:	bd80      	pop	{r7, pc}
 80100e2:	bf00      	nop
 80100e4:	2003ebfc 	.word	0x2003ebfc

080100e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b082      	sub	sp, #8
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80100f0:	6879      	ldr	r1, [r7, #4]
 80100f2:	4803      	ldr	r0, [pc, #12]	; (8010100 <BSP_SD_GetCardInfo+0x18>)
 80100f4:	f7fc fcca 	bl	800ca8c <HAL_SD_GetCardInfo>
}
 80100f8:	bf00      	nop
 80100fa:	3708      	adds	r7, #8
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}
 8010100:	2003ebfc 	.word	0x2003ebfc

08010104 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b082      	sub	sp, #8
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 801010c:	f000 f818 	bl	8010140 <BSP_SD_AbortCallback>
}
 8010110:	bf00      	nop
 8010112:	3708      	adds	r7, #8
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}

08010118 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b082      	sub	sp, #8
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010120:	f000 f9a8 	bl	8010474 <BSP_SD_WriteCpltCallback>
}
 8010124:	bf00      	nop
 8010126:	3708      	adds	r7, #8
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}

0801012c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b082      	sub	sp, #8
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010134:	f000 f9aa 	bl	801048c <BSP_SD_ReadCpltCallback>
}
 8010138:	bf00      	nop
 801013a:	3708      	adds	r7, #8
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}

08010140 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010140:	b480      	push	{r7}
 8010142:	af00      	add	r7, sp, #0

}
 8010144:	bf00      	nop
 8010146:	46bd      	mov	sp, r7
 8010148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014c:	4770      	bx	lr

0801014e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801014e:	b580      	push	{r7, lr}
 8010150:	b082      	sub	sp, #8
 8010152:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010154:	2301      	movs	r3, #1
 8010156:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010158:	f000 f80c 	bl	8010174 <BSP_PlatformIsDetected>
 801015c:	4603      	mov	r3, r0
 801015e:	2b00      	cmp	r3, #0
 8010160:	d101      	bne.n	8010166 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010162:	2300      	movs	r3, #0
 8010164:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010166:	79fb      	ldrb	r3, [r7, #7]
 8010168:	b2db      	uxtb	r3, r3
}
 801016a:	4618      	mov	r0, r3
 801016c:	3708      	adds	r7, #8
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}
	...

08010174 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010174:	b580      	push	{r7, lr}
 8010176:	b082      	sub	sp, #8
 8010178:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801017a:	2301      	movs	r3, #1
 801017c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801017e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010182:	4806      	ldr	r0, [pc, #24]	; (801019c <BSP_PlatformIsDetected+0x28>)
 8010184:	f7fa f87e 	bl	800a284 <HAL_GPIO_ReadPin>
 8010188:	4603      	mov	r3, r0
 801018a:	2b00      	cmp	r3, #0
 801018c:	d001      	beq.n	8010192 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801018e:	2300      	movs	r3, #0
 8010190:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010192:	79fb      	ldrb	r3, [r7, #7]
}
 8010194:	4618      	mov	r0, r3
 8010196:	3708      	adds	r7, #8
 8010198:	46bd      	mov	sp, r7
 801019a:	bd80      	pop	{r7, pc}
 801019c:	40020000 	.word	0x40020000

080101a0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b084      	sub	sp, #16
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80101a8:	f7f8 fde2 	bl	8008d70 <HAL_GetTick>
 80101ac:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80101ae:	e006      	b.n	80101be <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80101b0:	f7ff ff8a 	bl	80100c8 <BSP_SD_GetCardState>
 80101b4:	4603      	mov	r3, r0
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d101      	bne.n	80101be <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80101ba:	2300      	movs	r3, #0
 80101bc:	e009      	b.n	80101d2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80101be:	f7f8 fdd7 	bl	8008d70 <HAL_GetTick>
 80101c2:	4602      	mov	r2, r0
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	1ad3      	subs	r3, r2, r3
 80101c8:	687a      	ldr	r2, [r7, #4]
 80101ca:	429a      	cmp	r2, r3
 80101cc:	d8f0      	bhi.n	80101b0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80101ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3710      	adds	r7, #16
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}
	...

080101dc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b082      	sub	sp, #8
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	4603      	mov	r3, r0
 80101e4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80101e6:	4b0b      	ldr	r3, [pc, #44]	; (8010214 <SD_CheckStatus+0x38>)
 80101e8:	2201      	movs	r2, #1
 80101ea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80101ec:	f7ff ff6c 	bl	80100c8 <BSP_SD_GetCardState>
 80101f0:	4603      	mov	r3, r0
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d107      	bne.n	8010206 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80101f6:	4b07      	ldr	r3, [pc, #28]	; (8010214 <SD_CheckStatus+0x38>)
 80101f8:	781b      	ldrb	r3, [r3, #0]
 80101fa:	b2db      	uxtb	r3, r3
 80101fc:	f023 0301 	bic.w	r3, r3, #1
 8010200:	b2da      	uxtb	r2, r3
 8010202:	4b04      	ldr	r3, [pc, #16]	; (8010214 <SD_CheckStatus+0x38>)
 8010204:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010206:	4b03      	ldr	r3, [pc, #12]	; (8010214 <SD_CheckStatus+0x38>)
 8010208:	781b      	ldrb	r3, [r3, #0]
 801020a:	b2db      	uxtb	r3, r3
}
 801020c:	4618      	mov	r0, r3
 801020e:	3708      	adds	r7, #8
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}
 8010214:	20000009 	.word	0x20000009

08010218 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b082      	sub	sp, #8
 801021c:	af00      	add	r7, sp, #0
 801021e:	4603      	mov	r3, r0
 8010220:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010222:	f7ff fef7 	bl	8010014 <BSP_SD_Init>
 8010226:	4603      	mov	r3, r0
 8010228:	2b00      	cmp	r3, #0
 801022a:	d107      	bne.n	801023c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 801022c:	79fb      	ldrb	r3, [r7, #7]
 801022e:	4618      	mov	r0, r3
 8010230:	f7ff ffd4 	bl	80101dc <SD_CheckStatus>
 8010234:	4603      	mov	r3, r0
 8010236:	461a      	mov	r2, r3
 8010238:	4b04      	ldr	r3, [pc, #16]	; (801024c <SD_initialize+0x34>)
 801023a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801023c:	4b03      	ldr	r3, [pc, #12]	; (801024c <SD_initialize+0x34>)
 801023e:	781b      	ldrb	r3, [r3, #0]
 8010240:	b2db      	uxtb	r3, r3
}
 8010242:	4618      	mov	r0, r3
 8010244:	3708      	adds	r7, #8
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}
 801024a:	bf00      	nop
 801024c:	20000009 	.word	0x20000009

08010250 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b082      	sub	sp, #8
 8010254:	af00      	add	r7, sp, #0
 8010256:	4603      	mov	r3, r0
 8010258:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801025a:	79fb      	ldrb	r3, [r7, #7]
 801025c:	4618      	mov	r0, r3
 801025e:	f7ff ffbd 	bl	80101dc <SD_CheckStatus>
 8010262:	4603      	mov	r3, r0
}
 8010264:	4618      	mov	r0, r3
 8010266:	3708      	adds	r7, #8
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}

0801026c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b086      	sub	sp, #24
 8010270:	af00      	add	r7, sp, #0
 8010272:	60b9      	str	r1, [r7, #8]
 8010274:	607a      	str	r2, [r7, #4]
 8010276:	603b      	str	r3, [r7, #0]
 8010278:	4603      	mov	r3, r0
 801027a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801027c:	2301      	movs	r3, #1
 801027e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010280:	f247 5030 	movw	r0, #30000	; 0x7530
 8010284:	f7ff ff8c 	bl	80101a0 <SD_CheckStatusWithTimeout>
 8010288:	4603      	mov	r3, r0
 801028a:	2b00      	cmp	r3, #0
 801028c:	da01      	bge.n	8010292 <SD_read+0x26>
  {
    return res;
 801028e:	7dfb      	ldrb	r3, [r7, #23]
 8010290:	e03b      	b.n	801030a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010292:	683a      	ldr	r2, [r7, #0]
 8010294:	6879      	ldr	r1, [r7, #4]
 8010296:	68b8      	ldr	r0, [r7, #8]
 8010298:	f7ff fee2 	bl	8010060 <BSP_SD_ReadBlocks_DMA>
 801029c:	4603      	mov	r3, r0
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d132      	bne.n	8010308 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80102a2:	4b1c      	ldr	r3, [pc, #112]	; (8010314 <SD_read+0xa8>)
 80102a4:	2200      	movs	r2, #0
 80102a6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80102a8:	f7f8 fd62 	bl	8008d70 <HAL_GetTick>
 80102ac:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80102ae:	bf00      	nop
 80102b0:	4b18      	ldr	r3, [pc, #96]	; (8010314 <SD_read+0xa8>)
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d108      	bne.n	80102ca <SD_read+0x5e>
 80102b8:	f7f8 fd5a 	bl	8008d70 <HAL_GetTick>
 80102bc:	4602      	mov	r2, r0
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	1ad3      	subs	r3, r2, r3
 80102c2:	f247 522f 	movw	r2, #29999	; 0x752f
 80102c6:	4293      	cmp	r3, r2
 80102c8:	d9f2      	bls.n	80102b0 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80102ca:	4b12      	ldr	r3, [pc, #72]	; (8010314 <SD_read+0xa8>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d102      	bne.n	80102d8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80102d2:	2301      	movs	r3, #1
 80102d4:	75fb      	strb	r3, [r7, #23]
 80102d6:	e017      	b.n	8010308 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80102d8:	4b0e      	ldr	r3, [pc, #56]	; (8010314 <SD_read+0xa8>)
 80102da:	2200      	movs	r2, #0
 80102dc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80102de:	f7f8 fd47 	bl	8008d70 <HAL_GetTick>
 80102e2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80102e4:	e007      	b.n	80102f6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80102e6:	f7ff feef 	bl	80100c8 <BSP_SD_GetCardState>
 80102ea:	4603      	mov	r3, r0
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d102      	bne.n	80102f6 <SD_read+0x8a>
          {
            res = RES_OK;
 80102f0:	2300      	movs	r3, #0
 80102f2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80102f4:	e008      	b.n	8010308 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80102f6:	f7f8 fd3b 	bl	8008d70 <HAL_GetTick>
 80102fa:	4602      	mov	r2, r0
 80102fc:	693b      	ldr	r3, [r7, #16]
 80102fe:	1ad3      	subs	r3, r2, r3
 8010300:	f247 522f 	movw	r2, #29999	; 0x752f
 8010304:	4293      	cmp	r3, r2
 8010306:	d9ee      	bls.n	80102e6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010308:	7dfb      	ldrb	r3, [r7, #23]
}
 801030a:	4618      	mov	r0, r3
 801030c:	3718      	adds	r7, #24
 801030e:	46bd      	mov	sp, r7
 8010310:	bd80      	pop	{r7, pc}
 8010312:	bf00      	nop
 8010314:	2003c498 	.word	0x2003c498

08010318 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b086      	sub	sp, #24
 801031c:	af00      	add	r7, sp, #0
 801031e:	60b9      	str	r1, [r7, #8]
 8010320:	607a      	str	r2, [r7, #4]
 8010322:	603b      	str	r3, [r7, #0]
 8010324:	4603      	mov	r3, r0
 8010326:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010328:	2301      	movs	r3, #1
 801032a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801032c:	4b24      	ldr	r3, [pc, #144]	; (80103c0 <SD_write+0xa8>)
 801032e:	2200      	movs	r2, #0
 8010330:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010332:	f247 5030 	movw	r0, #30000	; 0x7530
 8010336:	f7ff ff33 	bl	80101a0 <SD_CheckStatusWithTimeout>
 801033a:	4603      	mov	r3, r0
 801033c:	2b00      	cmp	r3, #0
 801033e:	da01      	bge.n	8010344 <SD_write+0x2c>
  {
    return res;
 8010340:	7dfb      	ldrb	r3, [r7, #23]
 8010342:	e038      	b.n	80103b6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010344:	683a      	ldr	r2, [r7, #0]
 8010346:	6879      	ldr	r1, [r7, #4]
 8010348:	68b8      	ldr	r0, [r7, #8]
 801034a:	f7ff fea3 	bl	8010094 <BSP_SD_WriteBlocks_DMA>
 801034e:	4603      	mov	r3, r0
 8010350:	2b00      	cmp	r3, #0
 8010352:	d12f      	bne.n	80103b4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010354:	f7f8 fd0c 	bl	8008d70 <HAL_GetTick>
 8010358:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801035a:	bf00      	nop
 801035c:	4b18      	ldr	r3, [pc, #96]	; (80103c0 <SD_write+0xa8>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d108      	bne.n	8010376 <SD_write+0x5e>
 8010364:	f7f8 fd04 	bl	8008d70 <HAL_GetTick>
 8010368:	4602      	mov	r2, r0
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	1ad3      	subs	r3, r2, r3
 801036e:	f247 522f 	movw	r2, #29999	; 0x752f
 8010372:	4293      	cmp	r3, r2
 8010374:	d9f2      	bls.n	801035c <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8010376:	4b12      	ldr	r3, [pc, #72]	; (80103c0 <SD_write+0xa8>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d102      	bne.n	8010384 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801037e:	2301      	movs	r3, #1
 8010380:	75fb      	strb	r3, [r7, #23]
 8010382:	e017      	b.n	80103b4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010384:	4b0e      	ldr	r3, [pc, #56]	; (80103c0 <SD_write+0xa8>)
 8010386:	2200      	movs	r2, #0
 8010388:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801038a:	f7f8 fcf1 	bl	8008d70 <HAL_GetTick>
 801038e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010390:	e007      	b.n	80103a2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010392:	f7ff fe99 	bl	80100c8 <BSP_SD_GetCardState>
 8010396:	4603      	mov	r3, r0
 8010398:	2b00      	cmp	r3, #0
 801039a:	d102      	bne.n	80103a2 <SD_write+0x8a>
          {
            res = RES_OK;
 801039c:	2300      	movs	r3, #0
 801039e:	75fb      	strb	r3, [r7, #23]
            break;
 80103a0:	e008      	b.n	80103b4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80103a2:	f7f8 fce5 	bl	8008d70 <HAL_GetTick>
 80103a6:	4602      	mov	r2, r0
 80103a8:	693b      	ldr	r3, [r7, #16]
 80103aa:	1ad3      	subs	r3, r2, r3
 80103ac:	f247 522f 	movw	r2, #29999	; 0x752f
 80103b0:	4293      	cmp	r3, r2
 80103b2:	d9ee      	bls.n	8010392 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80103b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80103b6:	4618      	mov	r0, r3
 80103b8:	3718      	adds	r7, #24
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}
 80103be:	bf00      	nop
 80103c0:	2003c494 	.word	0x2003c494

080103c4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b08c      	sub	sp, #48	; 0x30
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	4603      	mov	r3, r0
 80103cc:	603a      	str	r2, [r7, #0]
 80103ce:	71fb      	strb	r3, [r7, #7]
 80103d0:	460b      	mov	r3, r1
 80103d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80103d4:	2301      	movs	r3, #1
 80103d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80103da:	4b25      	ldr	r3, [pc, #148]	; (8010470 <SD_ioctl+0xac>)
 80103dc:	781b      	ldrb	r3, [r3, #0]
 80103de:	b2db      	uxtb	r3, r3
 80103e0:	f003 0301 	and.w	r3, r3, #1
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d001      	beq.n	80103ec <SD_ioctl+0x28>
 80103e8:	2303      	movs	r3, #3
 80103ea:	e03c      	b.n	8010466 <SD_ioctl+0xa2>

  switch (cmd)
 80103ec:	79bb      	ldrb	r3, [r7, #6]
 80103ee:	2b03      	cmp	r3, #3
 80103f0:	d834      	bhi.n	801045c <SD_ioctl+0x98>
 80103f2:	a201      	add	r2, pc, #4	; (adr r2, 80103f8 <SD_ioctl+0x34>)
 80103f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103f8:	08010409 	.word	0x08010409
 80103fc:	08010411 	.word	0x08010411
 8010400:	08010429 	.word	0x08010429
 8010404:	08010443 	.word	0x08010443
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010408:	2300      	movs	r3, #0
 801040a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801040e:	e028      	b.n	8010462 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010410:	f107 030c 	add.w	r3, r7, #12
 8010414:	4618      	mov	r0, r3
 8010416:	f7ff fe67 	bl	80100e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801041a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010420:	2300      	movs	r3, #0
 8010422:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010426:	e01c      	b.n	8010462 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010428:	f107 030c 	add.w	r3, r7, #12
 801042c:	4618      	mov	r0, r3
 801042e:	f7ff fe5b 	bl	80100e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010434:	b29a      	uxth	r2, r3
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801043a:	2300      	movs	r3, #0
 801043c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010440:	e00f      	b.n	8010462 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010442:	f107 030c 	add.w	r3, r7, #12
 8010446:	4618      	mov	r0, r3
 8010448:	f7ff fe4e 	bl	80100e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801044c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801044e:	0a5a      	lsrs	r2, r3, #9
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010454:	2300      	movs	r3, #0
 8010456:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801045a:	e002      	b.n	8010462 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801045c:	2304      	movs	r3, #4
 801045e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8010462:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010466:	4618      	mov	r0, r3
 8010468:	3730      	adds	r7, #48	; 0x30
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}
 801046e:	bf00      	nop
 8010470:	20000009 	.word	0x20000009

08010474 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010474:	b480      	push	{r7}
 8010476:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010478:	4b03      	ldr	r3, [pc, #12]	; (8010488 <BSP_SD_WriteCpltCallback+0x14>)
 801047a:	2201      	movs	r2, #1
 801047c:	601a      	str	r2, [r3, #0]
}
 801047e:	bf00      	nop
 8010480:	46bd      	mov	sp, r7
 8010482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010486:	4770      	bx	lr
 8010488:	2003c494 	.word	0x2003c494

0801048c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801048c:	b480      	push	{r7}
 801048e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010490:	4b03      	ldr	r3, [pc, #12]	; (80104a0 <BSP_SD_ReadCpltCallback+0x14>)
 8010492:	2201      	movs	r2, #1
 8010494:	601a      	str	r2, [r3, #0]
}
 8010496:	bf00      	nop
 8010498:	46bd      	mov	sp, r7
 801049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049e:	4770      	bx	lr
 80104a0:	2003c498 	.word	0x2003c498

080104a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b084      	sub	sp, #16
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	4603      	mov	r3, r0
 80104ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80104ae:	79fb      	ldrb	r3, [r7, #7]
 80104b0:	4a08      	ldr	r2, [pc, #32]	; (80104d4 <disk_status+0x30>)
 80104b2:	009b      	lsls	r3, r3, #2
 80104b4:	4413      	add	r3, r2
 80104b6:	685b      	ldr	r3, [r3, #4]
 80104b8:	685b      	ldr	r3, [r3, #4]
 80104ba:	79fa      	ldrb	r2, [r7, #7]
 80104bc:	4905      	ldr	r1, [pc, #20]	; (80104d4 <disk_status+0x30>)
 80104be:	440a      	add	r2, r1
 80104c0:	7a12      	ldrb	r2, [r2, #8]
 80104c2:	4610      	mov	r0, r2
 80104c4:	4798      	blx	r3
 80104c6:	4603      	mov	r3, r0
 80104c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80104ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80104cc:	4618      	mov	r0, r3
 80104ce:	3710      	adds	r7, #16
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}
 80104d4:	2003c4c4 	.word	0x2003c4c4

080104d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b084      	sub	sp, #16
 80104dc:	af00      	add	r7, sp, #0
 80104de:	4603      	mov	r3, r0
 80104e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80104e2:	2300      	movs	r3, #0
 80104e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80104e6:	79fb      	ldrb	r3, [r7, #7]
 80104e8:	4a0d      	ldr	r2, [pc, #52]	; (8010520 <disk_initialize+0x48>)
 80104ea:	5cd3      	ldrb	r3, [r2, r3]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d111      	bne.n	8010514 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80104f0:	79fb      	ldrb	r3, [r7, #7]
 80104f2:	4a0b      	ldr	r2, [pc, #44]	; (8010520 <disk_initialize+0x48>)
 80104f4:	2101      	movs	r1, #1
 80104f6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80104f8:	79fb      	ldrb	r3, [r7, #7]
 80104fa:	4a09      	ldr	r2, [pc, #36]	; (8010520 <disk_initialize+0x48>)
 80104fc:	009b      	lsls	r3, r3, #2
 80104fe:	4413      	add	r3, r2
 8010500:	685b      	ldr	r3, [r3, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	79fa      	ldrb	r2, [r7, #7]
 8010506:	4906      	ldr	r1, [pc, #24]	; (8010520 <disk_initialize+0x48>)
 8010508:	440a      	add	r2, r1
 801050a:	7a12      	ldrb	r2, [r2, #8]
 801050c:	4610      	mov	r0, r2
 801050e:	4798      	blx	r3
 8010510:	4603      	mov	r3, r0
 8010512:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010514:	7bfb      	ldrb	r3, [r7, #15]
}
 8010516:	4618      	mov	r0, r3
 8010518:	3710      	adds	r7, #16
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}
 801051e:	bf00      	nop
 8010520:	2003c4c4 	.word	0x2003c4c4

08010524 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010524:	b590      	push	{r4, r7, lr}
 8010526:	b087      	sub	sp, #28
 8010528:	af00      	add	r7, sp, #0
 801052a:	60b9      	str	r1, [r7, #8]
 801052c:	607a      	str	r2, [r7, #4]
 801052e:	603b      	str	r3, [r7, #0]
 8010530:	4603      	mov	r3, r0
 8010532:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010534:	7bfb      	ldrb	r3, [r7, #15]
 8010536:	4a0a      	ldr	r2, [pc, #40]	; (8010560 <disk_read+0x3c>)
 8010538:	009b      	lsls	r3, r3, #2
 801053a:	4413      	add	r3, r2
 801053c:	685b      	ldr	r3, [r3, #4]
 801053e:	689c      	ldr	r4, [r3, #8]
 8010540:	7bfb      	ldrb	r3, [r7, #15]
 8010542:	4a07      	ldr	r2, [pc, #28]	; (8010560 <disk_read+0x3c>)
 8010544:	4413      	add	r3, r2
 8010546:	7a18      	ldrb	r0, [r3, #8]
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	687a      	ldr	r2, [r7, #4]
 801054c:	68b9      	ldr	r1, [r7, #8]
 801054e:	47a0      	blx	r4
 8010550:	4603      	mov	r3, r0
 8010552:	75fb      	strb	r3, [r7, #23]
  return res;
 8010554:	7dfb      	ldrb	r3, [r7, #23]
}
 8010556:	4618      	mov	r0, r3
 8010558:	371c      	adds	r7, #28
 801055a:	46bd      	mov	sp, r7
 801055c:	bd90      	pop	{r4, r7, pc}
 801055e:	bf00      	nop
 8010560:	2003c4c4 	.word	0x2003c4c4

08010564 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010564:	b590      	push	{r4, r7, lr}
 8010566:	b087      	sub	sp, #28
 8010568:	af00      	add	r7, sp, #0
 801056a:	60b9      	str	r1, [r7, #8]
 801056c:	607a      	str	r2, [r7, #4]
 801056e:	603b      	str	r3, [r7, #0]
 8010570:	4603      	mov	r3, r0
 8010572:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010574:	7bfb      	ldrb	r3, [r7, #15]
 8010576:	4a0a      	ldr	r2, [pc, #40]	; (80105a0 <disk_write+0x3c>)
 8010578:	009b      	lsls	r3, r3, #2
 801057a:	4413      	add	r3, r2
 801057c:	685b      	ldr	r3, [r3, #4]
 801057e:	68dc      	ldr	r4, [r3, #12]
 8010580:	7bfb      	ldrb	r3, [r7, #15]
 8010582:	4a07      	ldr	r2, [pc, #28]	; (80105a0 <disk_write+0x3c>)
 8010584:	4413      	add	r3, r2
 8010586:	7a18      	ldrb	r0, [r3, #8]
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	687a      	ldr	r2, [r7, #4]
 801058c:	68b9      	ldr	r1, [r7, #8]
 801058e:	47a0      	blx	r4
 8010590:	4603      	mov	r3, r0
 8010592:	75fb      	strb	r3, [r7, #23]
  return res;
 8010594:	7dfb      	ldrb	r3, [r7, #23]
}
 8010596:	4618      	mov	r0, r3
 8010598:	371c      	adds	r7, #28
 801059a:	46bd      	mov	sp, r7
 801059c:	bd90      	pop	{r4, r7, pc}
 801059e:	bf00      	nop
 80105a0:	2003c4c4 	.word	0x2003c4c4

080105a4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b084      	sub	sp, #16
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	4603      	mov	r3, r0
 80105ac:	603a      	str	r2, [r7, #0]
 80105ae:	71fb      	strb	r3, [r7, #7]
 80105b0:	460b      	mov	r3, r1
 80105b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80105b4:	79fb      	ldrb	r3, [r7, #7]
 80105b6:	4a09      	ldr	r2, [pc, #36]	; (80105dc <disk_ioctl+0x38>)
 80105b8:	009b      	lsls	r3, r3, #2
 80105ba:	4413      	add	r3, r2
 80105bc:	685b      	ldr	r3, [r3, #4]
 80105be:	691b      	ldr	r3, [r3, #16]
 80105c0:	79fa      	ldrb	r2, [r7, #7]
 80105c2:	4906      	ldr	r1, [pc, #24]	; (80105dc <disk_ioctl+0x38>)
 80105c4:	440a      	add	r2, r1
 80105c6:	7a10      	ldrb	r0, [r2, #8]
 80105c8:	79b9      	ldrb	r1, [r7, #6]
 80105ca:	683a      	ldr	r2, [r7, #0]
 80105cc:	4798      	blx	r3
 80105ce:	4603      	mov	r3, r0
 80105d0:	73fb      	strb	r3, [r7, #15]
  return res;
 80105d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	3710      	adds	r7, #16
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}
 80105dc:	2003c4c4 	.word	0x2003c4c4

080105e0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80105e0:	b480      	push	{r7}
 80105e2:	b085      	sub	sp, #20
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	3301      	adds	r3, #1
 80105ec:	781b      	ldrb	r3, [r3, #0]
 80105ee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80105f0:	89fb      	ldrh	r3, [r7, #14]
 80105f2:	021b      	lsls	r3, r3, #8
 80105f4:	b21a      	sxth	r2, r3
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	781b      	ldrb	r3, [r3, #0]
 80105fa:	b21b      	sxth	r3, r3
 80105fc:	4313      	orrs	r3, r2
 80105fe:	b21b      	sxth	r3, r3
 8010600:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010602:	89fb      	ldrh	r3, [r7, #14]
}
 8010604:	4618      	mov	r0, r3
 8010606:	3714      	adds	r7, #20
 8010608:	46bd      	mov	sp, r7
 801060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060e:	4770      	bx	lr

08010610 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010610:	b480      	push	{r7}
 8010612:	b085      	sub	sp, #20
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	3303      	adds	r3, #3
 801061c:	781b      	ldrb	r3, [r3, #0]
 801061e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	021b      	lsls	r3, r3, #8
 8010624:	687a      	ldr	r2, [r7, #4]
 8010626:	3202      	adds	r2, #2
 8010628:	7812      	ldrb	r2, [r2, #0]
 801062a:	4313      	orrs	r3, r2
 801062c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	021b      	lsls	r3, r3, #8
 8010632:	687a      	ldr	r2, [r7, #4]
 8010634:	3201      	adds	r2, #1
 8010636:	7812      	ldrb	r2, [r2, #0]
 8010638:	4313      	orrs	r3, r2
 801063a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	021b      	lsls	r3, r3, #8
 8010640:	687a      	ldr	r2, [r7, #4]
 8010642:	7812      	ldrb	r2, [r2, #0]
 8010644:	4313      	orrs	r3, r2
 8010646:	60fb      	str	r3, [r7, #12]
	return rv;
 8010648:	68fb      	ldr	r3, [r7, #12]
}
 801064a:	4618      	mov	r0, r3
 801064c:	3714      	adds	r7, #20
 801064e:	46bd      	mov	sp, r7
 8010650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010654:	4770      	bx	lr

08010656 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010656:	b480      	push	{r7}
 8010658:	b083      	sub	sp, #12
 801065a:	af00      	add	r7, sp, #0
 801065c:	6078      	str	r0, [r7, #4]
 801065e:	460b      	mov	r3, r1
 8010660:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	1c5a      	adds	r2, r3, #1
 8010666:	607a      	str	r2, [r7, #4]
 8010668:	887a      	ldrh	r2, [r7, #2]
 801066a:	b2d2      	uxtb	r2, r2
 801066c:	701a      	strb	r2, [r3, #0]
 801066e:	887b      	ldrh	r3, [r7, #2]
 8010670:	0a1b      	lsrs	r3, r3, #8
 8010672:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	1c5a      	adds	r2, r3, #1
 8010678:	607a      	str	r2, [r7, #4]
 801067a:	887a      	ldrh	r2, [r7, #2]
 801067c:	b2d2      	uxtb	r2, r2
 801067e:	701a      	strb	r2, [r3, #0]
}
 8010680:	bf00      	nop
 8010682:	370c      	adds	r7, #12
 8010684:	46bd      	mov	sp, r7
 8010686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068a:	4770      	bx	lr

0801068c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801068c:	b480      	push	{r7}
 801068e:	b083      	sub	sp, #12
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
 8010694:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	1c5a      	adds	r2, r3, #1
 801069a:	607a      	str	r2, [r7, #4]
 801069c:	683a      	ldr	r2, [r7, #0]
 801069e:	b2d2      	uxtb	r2, r2
 80106a0:	701a      	strb	r2, [r3, #0]
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	0a1b      	lsrs	r3, r3, #8
 80106a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	1c5a      	adds	r2, r3, #1
 80106ac:	607a      	str	r2, [r7, #4]
 80106ae:	683a      	ldr	r2, [r7, #0]
 80106b0:	b2d2      	uxtb	r2, r2
 80106b2:	701a      	strb	r2, [r3, #0]
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	0a1b      	lsrs	r3, r3, #8
 80106b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	1c5a      	adds	r2, r3, #1
 80106be:	607a      	str	r2, [r7, #4]
 80106c0:	683a      	ldr	r2, [r7, #0]
 80106c2:	b2d2      	uxtb	r2, r2
 80106c4:	701a      	strb	r2, [r3, #0]
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	0a1b      	lsrs	r3, r3, #8
 80106ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	1c5a      	adds	r2, r3, #1
 80106d0:	607a      	str	r2, [r7, #4]
 80106d2:	683a      	ldr	r2, [r7, #0]
 80106d4:	b2d2      	uxtb	r2, r2
 80106d6:	701a      	strb	r2, [r3, #0]
}
 80106d8:	bf00      	nop
 80106da:	370c      	adds	r7, #12
 80106dc:	46bd      	mov	sp, r7
 80106de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e2:	4770      	bx	lr

080106e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80106e4:	b480      	push	{r7}
 80106e6:	b087      	sub	sp, #28
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	60f8      	str	r0, [r7, #12]
 80106ec:	60b9      	str	r1, [r7, #8]
 80106ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d00d      	beq.n	801071a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80106fe:	693a      	ldr	r2, [r7, #16]
 8010700:	1c53      	adds	r3, r2, #1
 8010702:	613b      	str	r3, [r7, #16]
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	1c59      	adds	r1, r3, #1
 8010708:	6179      	str	r1, [r7, #20]
 801070a:	7812      	ldrb	r2, [r2, #0]
 801070c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	3b01      	subs	r3, #1
 8010712:	607b      	str	r3, [r7, #4]
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d1f1      	bne.n	80106fe <mem_cpy+0x1a>
	}
}
 801071a:	bf00      	nop
 801071c:	371c      	adds	r7, #28
 801071e:	46bd      	mov	sp, r7
 8010720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010724:	4770      	bx	lr

08010726 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010726:	b480      	push	{r7}
 8010728:	b087      	sub	sp, #28
 801072a:	af00      	add	r7, sp, #0
 801072c:	60f8      	str	r0, [r7, #12]
 801072e:	60b9      	str	r1, [r7, #8]
 8010730:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010736:	697b      	ldr	r3, [r7, #20]
 8010738:	1c5a      	adds	r2, r3, #1
 801073a:	617a      	str	r2, [r7, #20]
 801073c:	68ba      	ldr	r2, [r7, #8]
 801073e:	b2d2      	uxtb	r2, r2
 8010740:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	3b01      	subs	r3, #1
 8010746:	607b      	str	r3, [r7, #4]
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d1f3      	bne.n	8010736 <mem_set+0x10>
}
 801074e:	bf00      	nop
 8010750:	371c      	adds	r7, #28
 8010752:	46bd      	mov	sp, r7
 8010754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010758:	4770      	bx	lr

0801075a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801075a:	b480      	push	{r7}
 801075c:	b089      	sub	sp, #36	; 0x24
 801075e:	af00      	add	r7, sp, #0
 8010760:	60f8      	str	r0, [r7, #12]
 8010762:	60b9      	str	r1, [r7, #8]
 8010764:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	61fb      	str	r3, [r7, #28]
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801076e:	2300      	movs	r3, #0
 8010770:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010772:	69fb      	ldr	r3, [r7, #28]
 8010774:	1c5a      	adds	r2, r3, #1
 8010776:	61fa      	str	r2, [r7, #28]
 8010778:	781b      	ldrb	r3, [r3, #0]
 801077a:	4619      	mov	r1, r3
 801077c:	69bb      	ldr	r3, [r7, #24]
 801077e:	1c5a      	adds	r2, r3, #1
 8010780:	61ba      	str	r2, [r7, #24]
 8010782:	781b      	ldrb	r3, [r3, #0]
 8010784:	1acb      	subs	r3, r1, r3
 8010786:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	3b01      	subs	r3, #1
 801078c:	607b      	str	r3, [r7, #4]
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d002      	beq.n	801079a <mem_cmp+0x40>
 8010794:	697b      	ldr	r3, [r7, #20]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d0eb      	beq.n	8010772 <mem_cmp+0x18>

	return r;
 801079a:	697b      	ldr	r3, [r7, #20]
}
 801079c:	4618      	mov	r0, r3
 801079e:	3724      	adds	r7, #36	; 0x24
 80107a0:	46bd      	mov	sp, r7
 80107a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a6:	4770      	bx	lr

080107a8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80107a8:	b480      	push	{r7}
 80107aa:	b083      	sub	sp, #12
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80107b2:	e002      	b.n	80107ba <chk_chr+0x12>
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	3301      	adds	r3, #1
 80107b8:	607b      	str	r3, [r7, #4]
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	781b      	ldrb	r3, [r3, #0]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d005      	beq.n	80107ce <chk_chr+0x26>
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	781b      	ldrb	r3, [r3, #0]
 80107c6:	461a      	mov	r2, r3
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	4293      	cmp	r3, r2
 80107cc:	d1f2      	bne.n	80107b4 <chk_chr+0xc>
	return *str;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	781b      	ldrb	r3, [r3, #0]
}
 80107d2:	4618      	mov	r0, r3
 80107d4:	370c      	adds	r7, #12
 80107d6:	46bd      	mov	sp, r7
 80107d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107dc:	4770      	bx	lr
	...

080107e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80107e0:	b480      	push	{r7}
 80107e2:	b085      	sub	sp, #20
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80107ea:	2300      	movs	r3, #0
 80107ec:	60bb      	str	r3, [r7, #8]
 80107ee:	68bb      	ldr	r3, [r7, #8]
 80107f0:	60fb      	str	r3, [r7, #12]
 80107f2:	e029      	b.n	8010848 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80107f4:	4a27      	ldr	r2, [pc, #156]	; (8010894 <chk_lock+0xb4>)
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	011b      	lsls	r3, r3, #4
 80107fa:	4413      	add	r3, r2
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d01d      	beq.n	801083e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010802:	4a24      	ldr	r2, [pc, #144]	; (8010894 <chk_lock+0xb4>)
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	011b      	lsls	r3, r3, #4
 8010808:	4413      	add	r3, r2
 801080a:	681a      	ldr	r2, [r3, #0]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	429a      	cmp	r2, r3
 8010812:	d116      	bne.n	8010842 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010814:	4a1f      	ldr	r2, [pc, #124]	; (8010894 <chk_lock+0xb4>)
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	011b      	lsls	r3, r3, #4
 801081a:	4413      	add	r3, r2
 801081c:	3304      	adds	r3, #4
 801081e:	681a      	ldr	r2, [r3, #0]
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010824:	429a      	cmp	r2, r3
 8010826:	d10c      	bne.n	8010842 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010828:	4a1a      	ldr	r2, [pc, #104]	; (8010894 <chk_lock+0xb4>)
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	011b      	lsls	r3, r3, #4
 801082e:	4413      	add	r3, r2
 8010830:	3308      	adds	r3, #8
 8010832:	681a      	ldr	r2, [r3, #0]
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010838:	429a      	cmp	r2, r3
 801083a:	d102      	bne.n	8010842 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801083c:	e007      	b.n	801084e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801083e:	2301      	movs	r3, #1
 8010840:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	3301      	adds	r3, #1
 8010846:	60fb      	str	r3, [r7, #12]
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	2b01      	cmp	r3, #1
 801084c:	d9d2      	bls.n	80107f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	2b02      	cmp	r3, #2
 8010852:	d109      	bne.n	8010868 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d102      	bne.n	8010860 <chk_lock+0x80>
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	2b02      	cmp	r3, #2
 801085e:	d101      	bne.n	8010864 <chk_lock+0x84>
 8010860:	2300      	movs	r3, #0
 8010862:	e010      	b.n	8010886 <chk_lock+0xa6>
 8010864:	2312      	movs	r3, #18
 8010866:	e00e      	b.n	8010886 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d108      	bne.n	8010880 <chk_lock+0xa0>
 801086e:	4a09      	ldr	r2, [pc, #36]	; (8010894 <chk_lock+0xb4>)
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	011b      	lsls	r3, r3, #4
 8010874:	4413      	add	r3, r2
 8010876:	330c      	adds	r3, #12
 8010878:	881b      	ldrh	r3, [r3, #0]
 801087a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801087e:	d101      	bne.n	8010884 <chk_lock+0xa4>
 8010880:	2310      	movs	r3, #16
 8010882:	e000      	b.n	8010886 <chk_lock+0xa6>
 8010884:	2300      	movs	r3, #0
}
 8010886:	4618      	mov	r0, r3
 8010888:	3714      	adds	r7, #20
 801088a:	46bd      	mov	sp, r7
 801088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010890:	4770      	bx	lr
 8010892:	bf00      	nop
 8010894:	2003c4a4 	.word	0x2003c4a4

08010898 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010898:	b480      	push	{r7}
 801089a:	b083      	sub	sp, #12
 801089c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801089e:	2300      	movs	r3, #0
 80108a0:	607b      	str	r3, [r7, #4]
 80108a2:	e002      	b.n	80108aa <enq_lock+0x12>
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	3301      	adds	r3, #1
 80108a8:	607b      	str	r3, [r7, #4]
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	2b01      	cmp	r3, #1
 80108ae:	d806      	bhi.n	80108be <enq_lock+0x26>
 80108b0:	4a09      	ldr	r2, [pc, #36]	; (80108d8 <enq_lock+0x40>)
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	011b      	lsls	r3, r3, #4
 80108b6:	4413      	add	r3, r2
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d1f2      	bne.n	80108a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2b02      	cmp	r3, #2
 80108c2:	bf14      	ite	ne
 80108c4:	2301      	movne	r3, #1
 80108c6:	2300      	moveq	r3, #0
 80108c8:	b2db      	uxtb	r3, r3
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	370c      	adds	r7, #12
 80108ce:	46bd      	mov	sp, r7
 80108d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d4:	4770      	bx	lr
 80108d6:	bf00      	nop
 80108d8:	2003c4a4 	.word	0x2003c4a4

080108dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80108dc:	b480      	push	{r7}
 80108de:	b085      	sub	sp, #20
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
 80108e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80108e6:	2300      	movs	r3, #0
 80108e8:	60fb      	str	r3, [r7, #12]
 80108ea:	e01f      	b.n	801092c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80108ec:	4a41      	ldr	r2, [pc, #260]	; (80109f4 <inc_lock+0x118>)
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	011b      	lsls	r3, r3, #4
 80108f2:	4413      	add	r3, r2
 80108f4:	681a      	ldr	r2, [r3, #0]
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	429a      	cmp	r2, r3
 80108fc:	d113      	bne.n	8010926 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80108fe:	4a3d      	ldr	r2, [pc, #244]	; (80109f4 <inc_lock+0x118>)
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	011b      	lsls	r3, r3, #4
 8010904:	4413      	add	r3, r2
 8010906:	3304      	adds	r3, #4
 8010908:	681a      	ldr	r2, [r3, #0]
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801090e:	429a      	cmp	r2, r3
 8010910:	d109      	bne.n	8010926 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010912:	4a38      	ldr	r2, [pc, #224]	; (80109f4 <inc_lock+0x118>)
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	011b      	lsls	r3, r3, #4
 8010918:	4413      	add	r3, r2
 801091a:	3308      	adds	r3, #8
 801091c:	681a      	ldr	r2, [r3, #0]
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010922:	429a      	cmp	r2, r3
 8010924:	d006      	beq.n	8010934 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	3301      	adds	r3, #1
 801092a:	60fb      	str	r3, [r7, #12]
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	2b01      	cmp	r3, #1
 8010930:	d9dc      	bls.n	80108ec <inc_lock+0x10>
 8010932:	e000      	b.n	8010936 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010934:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	2b02      	cmp	r3, #2
 801093a:	d132      	bne.n	80109a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801093c:	2300      	movs	r3, #0
 801093e:	60fb      	str	r3, [r7, #12]
 8010940:	e002      	b.n	8010948 <inc_lock+0x6c>
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	3301      	adds	r3, #1
 8010946:	60fb      	str	r3, [r7, #12]
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	2b01      	cmp	r3, #1
 801094c:	d806      	bhi.n	801095c <inc_lock+0x80>
 801094e:	4a29      	ldr	r2, [pc, #164]	; (80109f4 <inc_lock+0x118>)
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	011b      	lsls	r3, r3, #4
 8010954:	4413      	add	r3, r2
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d1f2      	bne.n	8010942 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	2b02      	cmp	r3, #2
 8010960:	d101      	bne.n	8010966 <inc_lock+0x8a>
 8010962:	2300      	movs	r3, #0
 8010964:	e040      	b.n	80109e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681a      	ldr	r2, [r3, #0]
 801096a:	4922      	ldr	r1, [pc, #136]	; (80109f4 <inc_lock+0x118>)
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	011b      	lsls	r3, r3, #4
 8010970:	440b      	add	r3, r1
 8010972:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	689a      	ldr	r2, [r3, #8]
 8010978:	491e      	ldr	r1, [pc, #120]	; (80109f4 <inc_lock+0x118>)
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	011b      	lsls	r3, r3, #4
 801097e:	440b      	add	r3, r1
 8010980:	3304      	adds	r3, #4
 8010982:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	695a      	ldr	r2, [r3, #20]
 8010988:	491a      	ldr	r1, [pc, #104]	; (80109f4 <inc_lock+0x118>)
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	011b      	lsls	r3, r3, #4
 801098e:	440b      	add	r3, r1
 8010990:	3308      	adds	r3, #8
 8010992:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010994:	4a17      	ldr	r2, [pc, #92]	; (80109f4 <inc_lock+0x118>)
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	011b      	lsls	r3, r3, #4
 801099a:	4413      	add	r3, r2
 801099c:	330c      	adds	r3, #12
 801099e:	2200      	movs	r2, #0
 80109a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80109a2:	683b      	ldr	r3, [r7, #0]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d009      	beq.n	80109bc <inc_lock+0xe0>
 80109a8:	4a12      	ldr	r2, [pc, #72]	; (80109f4 <inc_lock+0x118>)
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	011b      	lsls	r3, r3, #4
 80109ae:	4413      	add	r3, r2
 80109b0:	330c      	adds	r3, #12
 80109b2:	881b      	ldrh	r3, [r3, #0]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d001      	beq.n	80109bc <inc_lock+0xe0>
 80109b8:	2300      	movs	r3, #0
 80109ba:	e015      	b.n	80109e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d108      	bne.n	80109d4 <inc_lock+0xf8>
 80109c2:	4a0c      	ldr	r2, [pc, #48]	; (80109f4 <inc_lock+0x118>)
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	011b      	lsls	r3, r3, #4
 80109c8:	4413      	add	r3, r2
 80109ca:	330c      	adds	r3, #12
 80109cc:	881b      	ldrh	r3, [r3, #0]
 80109ce:	3301      	adds	r3, #1
 80109d0:	b29a      	uxth	r2, r3
 80109d2:	e001      	b.n	80109d8 <inc_lock+0xfc>
 80109d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80109d8:	4906      	ldr	r1, [pc, #24]	; (80109f4 <inc_lock+0x118>)
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	011b      	lsls	r3, r3, #4
 80109de:	440b      	add	r3, r1
 80109e0:	330c      	adds	r3, #12
 80109e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	3301      	adds	r3, #1
}
 80109e8:	4618      	mov	r0, r3
 80109ea:	3714      	adds	r7, #20
 80109ec:	46bd      	mov	sp, r7
 80109ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f2:	4770      	bx	lr
 80109f4:	2003c4a4 	.word	0x2003c4a4

080109f8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80109f8:	b480      	push	{r7}
 80109fa:	b085      	sub	sp, #20
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	3b01      	subs	r3, #1
 8010a04:	607b      	str	r3, [r7, #4]
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2b01      	cmp	r3, #1
 8010a0a:	d825      	bhi.n	8010a58 <dec_lock+0x60>
		n = Files[i].ctr;
 8010a0c:	4a17      	ldr	r2, [pc, #92]	; (8010a6c <dec_lock+0x74>)
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	011b      	lsls	r3, r3, #4
 8010a12:	4413      	add	r3, r2
 8010a14:	330c      	adds	r3, #12
 8010a16:	881b      	ldrh	r3, [r3, #0]
 8010a18:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010a1a:	89fb      	ldrh	r3, [r7, #14]
 8010a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a20:	d101      	bne.n	8010a26 <dec_lock+0x2e>
 8010a22:	2300      	movs	r3, #0
 8010a24:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8010a26:	89fb      	ldrh	r3, [r7, #14]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d002      	beq.n	8010a32 <dec_lock+0x3a>
 8010a2c:	89fb      	ldrh	r3, [r7, #14]
 8010a2e:	3b01      	subs	r3, #1
 8010a30:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010a32:	4a0e      	ldr	r2, [pc, #56]	; (8010a6c <dec_lock+0x74>)
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	011b      	lsls	r3, r3, #4
 8010a38:	4413      	add	r3, r2
 8010a3a:	330c      	adds	r3, #12
 8010a3c:	89fa      	ldrh	r2, [r7, #14]
 8010a3e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010a40:	89fb      	ldrh	r3, [r7, #14]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d105      	bne.n	8010a52 <dec_lock+0x5a>
 8010a46:	4a09      	ldr	r2, [pc, #36]	; (8010a6c <dec_lock+0x74>)
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	011b      	lsls	r3, r3, #4
 8010a4c:	4413      	add	r3, r2
 8010a4e:	2200      	movs	r2, #0
 8010a50:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010a52:	2300      	movs	r3, #0
 8010a54:	737b      	strb	r3, [r7, #13]
 8010a56:	e001      	b.n	8010a5c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010a58:	2302      	movs	r3, #2
 8010a5a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010a5c:	7b7b      	ldrb	r3, [r7, #13]
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3714      	adds	r7, #20
 8010a62:	46bd      	mov	sp, r7
 8010a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a68:	4770      	bx	lr
 8010a6a:	bf00      	nop
 8010a6c:	2003c4a4 	.word	0x2003c4a4

08010a70 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010a70:	b480      	push	{r7}
 8010a72:	b085      	sub	sp, #20
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010a78:	2300      	movs	r3, #0
 8010a7a:	60fb      	str	r3, [r7, #12]
 8010a7c:	e010      	b.n	8010aa0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010a7e:	4a0d      	ldr	r2, [pc, #52]	; (8010ab4 <clear_lock+0x44>)
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	011b      	lsls	r3, r3, #4
 8010a84:	4413      	add	r3, r2
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	687a      	ldr	r2, [r7, #4]
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d105      	bne.n	8010a9a <clear_lock+0x2a>
 8010a8e:	4a09      	ldr	r2, [pc, #36]	; (8010ab4 <clear_lock+0x44>)
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	011b      	lsls	r3, r3, #4
 8010a94:	4413      	add	r3, r2
 8010a96:	2200      	movs	r2, #0
 8010a98:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	3301      	adds	r3, #1
 8010a9e:	60fb      	str	r3, [r7, #12]
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	2b01      	cmp	r3, #1
 8010aa4:	d9eb      	bls.n	8010a7e <clear_lock+0xe>
	}
}
 8010aa6:	bf00      	nop
 8010aa8:	3714      	adds	r7, #20
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab0:	4770      	bx	lr
 8010ab2:	bf00      	nop
 8010ab4:	2003c4a4 	.word	0x2003c4a4

08010ab8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b086      	sub	sp, #24
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	78db      	ldrb	r3, [r3, #3]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d034      	beq.n	8010b36 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ad0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	7858      	ldrb	r0, [r3, #1]
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010adc:	2301      	movs	r3, #1
 8010ade:	697a      	ldr	r2, [r7, #20]
 8010ae0:	f7ff fd40 	bl	8010564 <disk_write>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d002      	beq.n	8010af0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010aea:	2301      	movs	r3, #1
 8010aec:	73fb      	strb	r3, [r7, #15]
 8010aee:	e022      	b.n	8010b36 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	2200      	movs	r2, #0
 8010af4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010afa:	697a      	ldr	r2, [r7, #20]
 8010afc:	1ad2      	subs	r2, r2, r3
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	6a1b      	ldr	r3, [r3, #32]
 8010b02:	429a      	cmp	r2, r3
 8010b04:	d217      	bcs.n	8010b36 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	789b      	ldrb	r3, [r3, #2]
 8010b0a:	613b      	str	r3, [r7, #16]
 8010b0c:	e010      	b.n	8010b30 <sync_window+0x78>
					wsect += fs->fsize;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6a1b      	ldr	r3, [r3, #32]
 8010b12:	697a      	ldr	r2, [r7, #20]
 8010b14:	4413      	add	r3, r2
 8010b16:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	7858      	ldrb	r0, [r3, #1]
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010b22:	2301      	movs	r3, #1
 8010b24:	697a      	ldr	r2, [r7, #20]
 8010b26:	f7ff fd1d 	bl	8010564 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010b2a:	693b      	ldr	r3, [r7, #16]
 8010b2c:	3b01      	subs	r3, #1
 8010b2e:	613b      	str	r3, [r7, #16]
 8010b30:	693b      	ldr	r3, [r7, #16]
 8010b32:	2b01      	cmp	r3, #1
 8010b34:	d8eb      	bhi.n	8010b0e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b38:	4618      	mov	r0, r3
 8010b3a:	3718      	adds	r7, #24
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}

08010b40 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b084      	sub	sp, #16
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
 8010b48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b52:	683a      	ldr	r2, [r7, #0]
 8010b54:	429a      	cmp	r2, r3
 8010b56:	d01b      	beq.n	8010b90 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f7ff ffad 	bl	8010ab8 <sync_window>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010b62:	7bfb      	ldrb	r3, [r7, #15]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d113      	bne.n	8010b90 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	7858      	ldrb	r0, [r3, #1]
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010b72:	2301      	movs	r3, #1
 8010b74:	683a      	ldr	r2, [r7, #0]
 8010b76:	f7ff fcd5 	bl	8010524 <disk_read>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d004      	beq.n	8010b8a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010b80:	f04f 33ff 	mov.w	r3, #4294967295
 8010b84:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010b86:	2301      	movs	r3, #1
 8010b88:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	683a      	ldr	r2, [r7, #0]
 8010b8e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8010b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	3710      	adds	r7, #16
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}
	...

08010b9c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b084      	sub	sp, #16
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010ba4:	6878      	ldr	r0, [r7, #4]
 8010ba6:	f7ff ff87 	bl	8010ab8 <sync_window>
 8010baa:	4603      	mov	r3, r0
 8010bac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010bae:	7bfb      	ldrb	r3, [r7, #15]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d159      	bne.n	8010c68 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	781b      	ldrb	r3, [r3, #0]
 8010bb8:	2b03      	cmp	r3, #3
 8010bba:	d149      	bne.n	8010c50 <sync_fs+0xb4>
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	791b      	ldrb	r3, [r3, #4]
 8010bc0:	2b01      	cmp	r3, #1
 8010bc2:	d145      	bne.n	8010c50 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	899b      	ldrh	r3, [r3, #12]
 8010bce:	461a      	mov	r2, r3
 8010bd0:	2100      	movs	r1, #0
 8010bd2:	f7ff fda8 	bl	8010726 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	3338      	adds	r3, #56	; 0x38
 8010bda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010bde:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7ff fd37 	bl	8010656 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	3338      	adds	r3, #56	; 0x38
 8010bec:	4921      	ldr	r1, [pc, #132]	; (8010c74 <sync_fs+0xd8>)
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f7ff fd4c 	bl	801068c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	3338      	adds	r3, #56	; 0x38
 8010bf8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010bfc:	491e      	ldr	r1, [pc, #120]	; (8010c78 <sync_fs+0xdc>)
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7ff fd44 	bl	801068c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	3338      	adds	r3, #56	; 0x38
 8010c08:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	695b      	ldr	r3, [r3, #20]
 8010c10:	4619      	mov	r1, r3
 8010c12:	4610      	mov	r0, r2
 8010c14:	f7ff fd3a 	bl	801068c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	3338      	adds	r3, #56	; 0x38
 8010c1c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	691b      	ldr	r3, [r3, #16]
 8010c24:	4619      	mov	r1, r3
 8010c26:	4610      	mov	r0, r2
 8010c28:	f7ff fd30 	bl	801068c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c30:	1c5a      	adds	r2, r3, #1
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	7858      	ldrb	r0, [r3, #1]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010c44:	2301      	movs	r3, #1
 8010c46:	f7ff fc8d 	bl	8010564 <disk_write>
			fs->fsi_flag = 0;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	785b      	ldrb	r3, [r3, #1]
 8010c54:	2200      	movs	r2, #0
 8010c56:	2100      	movs	r1, #0
 8010c58:	4618      	mov	r0, r3
 8010c5a:	f7ff fca3 	bl	80105a4 <disk_ioctl>
 8010c5e:	4603      	mov	r3, r0
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d001      	beq.n	8010c68 <sync_fs+0xcc>
 8010c64:	2301      	movs	r3, #1
 8010c66:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3710      	adds	r7, #16
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}
 8010c72:	bf00      	nop
 8010c74:	41615252 	.word	0x41615252
 8010c78:	61417272 	.word	0x61417272

08010c7c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010c7c:	b480      	push	{r7}
 8010c7e:	b083      	sub	sp, #12
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
 8010c84:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	3b02      	subs	r3, #2
 8010c8a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	69db      	ldr	r3, [r3, #28]
 8010c90:	3b02      	subs	r3, #2
 8010c92:	683a      	ldr	r2, [r7, #0]
 8010c94:	429a      	cmp	r2, r3
 8010c96:	d301      	bcc.n	8010c9c <clust2sect+0x20>
 8010c98:	2300      	movs	r3, #0
 8010c9a:	e008      	b.n	8010cae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	895b      	ldrh	r3, [r3, #10]
 8010ca0:	461a      	mov	r2, r3
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	fb03 f202 	mul.w	r2, r3, r2
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cac:	4413      	add	r3, r2
}
 8010cae:	4618      	mov	r0, r3
 8010cb0:	370c      	adds	r7, #12
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb8:	4770      	bx	lr

08010cba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010cba:	b580      	push	{r7, lr}
 8010cbc:	b086      	sub	sp, #24
 8010cbe:	af00      	add	r7, sp, #0
 8010cc0:	6078      	str	r0, [r7, #4]
 8010cc2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010cca:	683b      	ldr	r3, [r7, #0]
 8010ccc:	2b01      	cmp	r3, #1
 8010cce:	d904      	bls.n	8010cda <get_fat+0x20>
 8010cd0:	693b      	ldr	r3, [r7, #16]
 8010cd2:	69db      	ldr	r3, [r3, #28]
 8010cd4:	683a      	ldr	r2, [r7, #0]
 8010cd6:	429a      	cmp	r2, r3
 8010cd8:	d302      	bcc.n	8010ce0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8010cda:	2301      	movs	r3, #1
 8010cdc:	617b      	str	r3, [r7, #20]
 8010cde:	e0b7      	b.n	8010e50 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8010ce4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010ce6:	693b      	ldr	r3, [r7, #16]
 8010ce8:	781b      	ldrb	r3, [r3, #0]
 8010cea:	2b02      	cmp	r3, #2
 8010cec:	d05a      	beq.n	8010da4 <get_fat+0xea>
 8010cee:	2b03      	cmp	r3, #3
 8010cf0:	d07d      	beq.n	8010dee <get_fat+0x134>
 8010cf2:	2b01      	cmp	r3, #1
 8010cf4:	f040 80a2 	bne.w	8010e3c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	60fb      	str	r3, [r7, #12]
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	085b      	lsrs	r3, r3, #1
 8010d00:	68fa      	ldr	r2, [r7, #12]
 8010d02:	4413      	add	r3, r2
 8010d04:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010d06:	693b      	ldr	r3, [r7, #16]
 8010d08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010d0a:	693b      	ldr	r3, [r7, #16]
 8010d0c:	899b      	ldrh	r3, [r3, #12]
 8010d0e:	4619      	mov	r1, r3
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d16:	4413      	add	r3, r2
 8010d18:	4619      	mov	r1, r3
 8010d1a:	6938      	ldr	r0, [r7, #16]
 8010d1c:	f7ff ff10 	bl	8010b40 <move_window>
 8010d20:	4603      	mov	r3, r0
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	f040 808d 	bne.w	8010e42 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	1c5a      	adds	r2, r3, #1
 8010d2c:	60fa      	str	r2, [r7, #12]
 8010d2e:	693a      	ldr	r2, [r7, #16]
 8010d30:	8992      	ldrh	r2, [r2, #12]
 8010d32:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d36:	fb02 f201 	mul.w	r2, r2, r1
 8010d3a:	1a9b      	subs	r3, r3, r2
 8010d3c:	693a      	ldr	r2, [r7, #16]
 8010d3e:	4413      	add	r3, r2
 8010d40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010d44:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010d46:	693b      	ldr	r3, [r7, #16]
 8010d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010d4a:	693b      	ldr	r3, [r7, #16]
 8010d4c:	899b      	ldrh	r3, [r3, #12]
 8010d4e:	4619      	mov	r1, r3
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d56:	4413      	add	r3, r2
 8010d58:	4619      	mov	r1, r3
 8010d5a:	6938      	ldr	r0, [r7, #16]
 8010d5c:	f7ff fef0 	bl	8010b40 <move_window>
 8010d60:	4603      	mov	r3, r0
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d16f      	bne.n	8010e46 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010d66:	693b      	ldr	r3, [r7, #16]
 8010d68:	899b      	ldrh	r3, [r3, #12]
 8010d6a:	461a      	mov	r2, r3
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d72:	fb02 f201 	mul.w	r2, r2, r1
 8010d76:	1a9b      	subs	r3, r3, r2
 8010d78:	693a      	ldr	r2, [r7, #16]
 8010d7a:	4413      	add	r3, r2
 8010d7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010d80:	021b      	lsls	r3, r3, #8
 8010d82:	461a      	mov	r2, r3
 8010d84:	68bb      	ldr	r3, [r7, #8]
 8010d86:	4313      	orrs	r3, r2
 8010d88:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	f003 0301 	and.w	r3, r3, #1
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d002      	beq.n	8010d9a <get_fat+0xe0>
 8010d94:	68bb      	ldr	r3, [r7, #8]
 8010d96:	091b      	lsrs	r3, r3, #4
 8010d98:	e002      	b.n	8010da0 <get_fat+0xe6>
 8010d9a:	68bb      	ldr	r3, [r7, #8]
 8010d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010da0:	617b      	str	r3, [r7, #20]
			break;
 8010da2:	e055      	b.n	8010e50 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010da4:	693b      	ldr	r3, [r7, #16]
 8010da6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010da8:	693b      	ldr	r3, [r7, #16]
 8010daa:	899b      	ldrh	r3, [r3, #12]
 8010dac:	085b      	lsrs	r3, r3, #1
 8010dae:	b29b      	uxth	r3, r3
 8010db0:	4619      	mov	r1, r3
 8010db2:	683b      	ldr	r3, [r7, #0]
 8010db4:	fbb3 f3f1 	udiv	r3, r3, r1
 8010db8:	4413      	add	r3, r2
 8010dba:	4619      	mov	r1, r3
 8010dbc:	6938      	ldr	r0, [r7, #16]
 8010dbe:	f7ff febf 	bl	8010b40 <move_window>
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d140      	bne.n	8010e4a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010dc8:	693b      	ldr	r3, [r7, #16]
 8010dca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	005b      	lsls	r3, r3, #1
 8010dd2:	693a      	ldr	r2, [r7, #16]
 8010dd4:	8992      	ldrh	r2, [r2, #12]
 8010dd6:	fbb3 f0f2 	udiv	r0, r3, r2
 8010dda:	fb02 f200 	mul.w	r2, r2, r0
 8010dde:	1a9b      	subs	r3, r3, r2
 8010de0:	440b      	add	r3, r1
 8010de2:	4618      	mov	r0, r3
 8010de4:	f7ff fbfc 	bl	80105e0 <ld_word>
 8010de8:	4603      	mov	r3, r0
 8010dea:	617b      	str	r3, [r7, #20]
			break;
 8010dec:	e030      	b.n	8010e50 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010dee:	693b      	ldr	r3, [r7, #16]
 8010df0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010df2:	693b      	ldr	r3, [r7, #16]
 8010df4:	899b      	ldrh	r3, [r3, #12]
 8010df6:	089b      	lsrs	r3, r3, #2
 8010df8:	b29b      	uxth	r3, r3
 8010dfa:	4619      	mov	r1, r3
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e02:	4413      	add	r3, r2
 8010e04:	4619      	mov	r1, r3
 8010e06:	6938      	ldr	r0, [r7, #16]
 8010e08:	f7ff fe9a 	bl	8010b40 <move_window>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d11d      	bne.n	8010e4e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010e12:	693b      	ldr	r3, [r7, #16]
 8010e14:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010e18:	683b      	ldr	r3, [r7, #0]
 8010e1a:	009b      	lsls	r3, r3, #2
 8010e1c:	693a      	ldr	r2, [r7, #16]
 8010e1e:	8992      	ldrh	r2, [r2, #12]
 8010e20:	fbb3 f0f2 	udiv	r0, r3, r2
 8010e24:	fb02 f200 	mul.w	r2, r2, r0
 8010e28:	1a9b      	subs	r3, r3, r2
 8010e2a:	440b      	add	r3, r1
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f7ff fbef 	bl	8010610 <ld_dword>
 8010e32:	4603      	mov	r3, r0
 8010e34:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010e38:	617b      	str	r3, [r7, #20]
			break;
 8010e3a:	e009      	b.n	8010e50 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010e3c:	2301      	movs	r3, #1
 8010e3e:	617b      	str	r3, [r7, #20]
 8010e40:	e006      	b.n	8010e50 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010e42:	bf00      	nop
 8010e44:	e004      	b.n	8010e50 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010e46:	bf00      	nop
 8010e48:	e002      	b.n	8010e50 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010e4a:	bf00      	nop
 8010e4c:	e000      	b.n	8010e50 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010e4e:	bf00      	nop
		}
	}

	return val;
 8010e50:	697b      	ldr	r3, [r7, #20]
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3718      	adds	r7, #24
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}

08010e5a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010e5a:	b590      	push	{r4, r7, lr}
 8010e5c:	b089      	sub	sp, #36	; 0x24
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	60f8      	str	r0, [r7, #12]
 8010e62:	60b9      	str	r1, [r7, #8]
 8010e64:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010e66:	2302      	movs	r3, #2
 8010e68:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	2b01      	cmp	r3, #1
 8010e6e:	f240 8106 	bls.w	801107e <put_fat+0x224>
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	69db      	ldr	r3, [r3, #28]
 8010e76:	68ba      	ldr	r2, [r7, #8]
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	f080 8100 	bcs.w	801107e <put_fat+0x224>
		switch (fs->fs_type) {
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	781b      	ldrb	r3, [r3, #0]
 8010e82:	2b02      	cmp	r3, #2
 8010e84:	f000 8088 	beq.w	8010f98 <put_fat+0x13e>
 8010e88:	2b03      	cmp	r3, #3
 8010e8a:	f000 80b0 	beq.w	8010fee <put_fat+0x194>
 8010e8e:	2b01      	cmp	r3, #1
 8010e90:	f040 80f5 	bne.w	801107e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010e94:	68bb      	ldr	r3, [r7, #8]
 8010e96:	61bb      	str	r3, [r7, #24]
 8010e98:	69bb      	ldr	r3, [r7, #24]
 8010e9a:	085b      	lsrs	r3, r3, #1
 8010e9c:	69ba      	ldr	r2, [r7, #24]
 8010e9e:	4413      	add	r3, r2
 8010ea0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	899b      	ldrh	r3, [r3, #12]
 8010eaa:	4619      	mov	r1, r3
 8010eac:	69bb      	ldr	r3, [r7, #24]
 8010eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8010eb2:	4413      	add	r3, r2
 8010eb4:	4619      	mov	r1, r3
 8010eb6:	68f8      	ldr	r0, [r7, #12]
 8010eb8:	f7ff fe42 	bl	8010b40 <move_window>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010ec0:	7ffb      	ldrb	r3, [r7, #31]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	f040 80d4 	bne.w	8011070 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010ece:	69bb      	ldr	r3, [r7, #24]
 8010ed0:	1c5a      	adds	r2, r3, #1
 8010ed2:	61ba      	str	r2, [r7, #24]
 8010ed4:	68fa      	ldr	r2, [r7, #12]
 8010ed6:	8992      	ldrh	r2, [r2, #12]
 8010ed8:	fbb3 f0f2 	udiv	r0, r3, r2
 8010edc:	fb02 f200 	mul.w	r2, r2, r0
 8010ee0:	1a9b      	subs	r3, r3, r2
 8010ee2:	440b      	add	r3, r1
 8010ee4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010ee6:	68bb      	ldr	r3, [r7, #8]
 8010ee8:	f003 0301 	and.w	r3, r3, #1
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d00d      	beq.n	8010f0c <put_fat+0xb2>
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	781b      	ldrb	r3, [r3, #0]
 8010ef4:	b25b      	sxtb	r3, r3
 8010ef6:	f003 030f 	and.w	r3, r3, #15
 8010efa:	b25a      	sxtb	r2, r3
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	b2db      	uxtb	r3, r3
 8010f00:	011b      	lsls	r3, r3, #4
 8010f02:	b25b      	sxtb	r3, r3
 8010f04:	4313      	orrs	r3, r2
 8010f06:	b25b      	sxtb	r3, r3
 8010f08:	b2db      	uxtb	r3, r3
 8010f0a:	e001      	b.n	8010f10 <put_fat+0xb6>
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	b2db      	uxtb	r3, r3
 8010f10:	697a      	ldr	r2, [r7, #20]
 8010f12:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	2201      	movs	r2, #1
 8010f18:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	899b      	ldrh	r3, [r3, #12]
 8010f22:	4619      	mov	r1, r3
 8010f24:	69bb      	ldr	r3, [r7, #24]
 8010f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f2a:	4413      	add	r3, r2
 8010f2c:	4619      	mov	r1, r3
 8010f2e:	68f8      	ldr	r0, [r7, #12]
 8010f30:	f7ff fe06 	bl	8010b40 <move_window>
 8010f34:	4603      	mov	r3, r0
 8010f36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010f38:	7ffb      	ldrb	r3, [r7, #31]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	f040 809a 	bne.w	8011074 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	899b      	ldrh	r3, [r3, #12]
 8010f4a:	461a      	mov	r2, r3
 8010f4c:	69bb      	ldr	r3, [r7, #24]
 8010f4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010f52:	fb02 f200 	mul.w	r2, r2, r0
 8010f56:	1a9b      	subs	r3, r3, r2
 8010f58:	440b      	add	r3, r1
 8010f5a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	f003 0301 	and.w	r3, r3, #1
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d003      	beq.n	8010f6e <put_fat+0x114>
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	091b      	lsrs	r3, r3, #4
 8010f6a:	b2db      	uxtb	r3, r3
 8010f6c:	e00e      	b.n	8010f8c <put_fat+0x132>
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	781b      	ldrb	r3, [r3, #0]
 8010f72:	b25b      	sxtb	r3, r3
 8010f74:	f023 030f 	bic.w	r3, r3, #15
 8010f78:	b25a      	sxtb	r2, r3
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	0a1b      	lsrs	r3, r3, #8
 8010f7e:	b25b      	sxtb	r3, r3
 8010f80:	f003 030f 	and.w	r3, r3, #15
 8010f84:	b25b      	sxtb	r3, r3
 8010f86:	4313      	orrs	r3, r2
 8010f88:	b25b      	sxtb	r3, r3
 8010f8a:	b2db      	uxtb	r3, r3
 8010f8c:	697a      	ldr	r2, [r7, #20]
 8010f8e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	2201      	movs	r2, #1
 8010f94:	70da      	strb	r2, [r3, #3]
			break;
 8010f96:	e072      	b.n	801107e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	899b      	ldrh	r3, [r3, #12]
 8010fa0:	085b      	lsrs	r3, r3, #1
 8010fa2:	b29b      	uxth	r3, r3
 8010fa4:	4619      	mov	r1, r3
 8010fa6:	68bb      	ldr	r3, [r7, #8]
 8010fa8:	fbb3 f3f1 	udiv	r3, r3, r1
 8010fac:	4413      	add	r3, r2
 8010fae:	4619      	mov	r1, r3
 8010fb0:	68f8      	ldr	r0, [r7, #12]
 8010fb2:	f7ff fdc5 	bl	8010b40 <move_window>
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010fba:	7ffb      	ldrb	r3, [r7, #31]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d15b      	bne.n	8011078 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010fc6:	68bb      	ldr	r3, [r7, #8]
 8010fc8:	005b      	lsls	r3, r3, #1
 8010fca:	68fa      	ldr	r2, [r7, #12]
 8010fcc:	8992      	ldrh	r2, [r2, #12]
 8010fce:	fbb3 f0f2 	udiv	r0, r3, r2
 8010fd2:	fb02 f200 	mul.w	r2, r2, r0
 8010fd6:	1a9b      	subs	r3, r3, r2
 8010fd8:	440b      	add	r3, r1
 8010fda:	687a      	ldr	r2, [r7, #4]
 8010fdc:	b292      	uxth	r2, r2
 8010fde:	4611      	mov	r1, r2
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7ff fb38 	bl	8010656 <st_word>
			fs->wflag = 1;
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	2201      	movs	r2, #1
 8010fea:	70da      	strb	r2, [r3, #3]
			break;
 8010fec:	e047      	b.n	801107e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	899b      	ldrh	r3, [r3, #12]
 8010ff6:	089b      	lsrs	r3, r3, #2
 8010ff8:	b29b      	uxth	r3, r3
 8010ffa:	4619      	mov	r1, r3
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8011002:	4413      	add	r3, r2
 8011004:	4619      	mov	r1, r3
 8011006:	68f8      	ldr	r0, [r7, #12]
 8011008:	f7ff fd9a 	bl	8010b40 <move_window>
 801100c:	4603      	mov	r3, r0
 801100e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011010:	7ffb      	ldrb	r3, [r7, #31]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d132      	bne.n	801107c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	009b      	lsls	r3, r3, #2
 8011026:	68fa      	ldr	r2, [r7, #12]
 8011028:	8992      	ldrh	r2, [r2, #12]
 801102a:	fbb3 f0f2 	udiv	r0, r3, r2
 801102e:	fb02 f200 	mul.w	r2, r2, r0
 8011032:	1a9b      	subs	r3, r3, r2
 8011034:	440b      	add	r3, r1
 8011036:	4618      	mov	r0, r3
 8011038:	f7ff faea 	bl	8010610 <ld_dword>
 801103c:	4603      	mov	r3, r0
 801103e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011042:	4323      	orrs	r3, r4
 8011044:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801104c:	68bb      	ldr	r3, [r7, #8]
 801104e:	009b      	lsls	r3, r3, #2
 8011050:	68fa      	ldr	r2, [r7, #12]
 8011052:	8992      	ldrh	r2, [r2, #12]
 8011054:	fbb3 f0f2 	udiv	r0, r3, r2
 8011058:	fb02 f200 	mul.w	r2, r2, r0
 801105c:	1a9b      	subs	r3, r3, r2
 801105e:	440b      	add	r3, r1
 8011060:	6879      	ldr	r1, [r7, #4]
 8011062:	4618      	mov	r0, r3
 8011064:	f7ff fb12 	bl	801068c <st_dword>
			fs->wflag = 1;
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	2201      	movs	r2, #1
 801106c:	70da      	strb	r2, [r3, #3]
			break;
 801106e:	e006      	b.n	801107e <put_fat+0x224>
			if (res != FR_OK) break;
 8011070:	bf00      	nop
 8011072:	e004      	b.n	801107e <put_fat+0x224>
			if (res != FR_OK) break;
 8011074:	bf00      	nop
 8011076:	e002      	b.n	801107e <put_fat+0x224>
			if (res != FR_OK) break;
 8011078:	bf00      	nop
 801107a:	e000      	b.n	801107e <put_fat+0x224>
			if (res != FR_OK) break;
 801107c:	bf00      	nop
		}
	}
	return res;
 801107e:	7ffb      	ldrb	r3, [r7, #31]
}
 8011080:	4618      	mov	r0, r3
 8011082:	3724      	adds	r7, #36	; 0x24
 8011084:	46bd      	mov	sp, r7
 8011086:	bd90      	pop	{r4, r7, pc}

08011088 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b088      	sub	sp, #32
 801108c:	af00      	add	r7, sp, #0
 801108e:	60f8      	str	r0, [r7, #12]
 8011090:	60b9      	str	r1, [r7, #8]
 8011092:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011094:	2300      	movs	r3, #0
 8011096:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	2b01      	cmp	r3, #1
 80110a2:	d904      	bls.n	80110ae <remove_chain+0x26>
 80110a4:	69bb      	ldr	r3, [r7, #24]
 80110a6:	69db      	ldr	r3, [r3, #28]
 80110a8:	68ba      	ldr	r2, [r7, #8]
 80110aa:	429a      	cmp	r2, r3
 80110ac:	d301      	bcc.n	80110b2 <remove_chain+0x2a>
 80110ae:	2302      	movs	r3, #2
 80110b0:	e04b      	b.n	801114a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d00c      	beq.n	80110d2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80110b8:	f04f 32ff 	mov.w	r2, #4294967295
 80110bc:	6879      	ldr	r1, [r7, #4]
 80110be:	69b8      	ldr	r0, [r7, #24]
 80110c0:	f7ff fecb 	bl	8010e5a <put_fat>
 80110c4:	4603      	mov	r3, r0
 80110c6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80110c8:	7ffb      	ldrb	r3, [r7, #31]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d001      	beq.n	80110d2 <remove_chain+0x4a>
 80110ce:	7ffb      	ldrb	r3, [r7, #31]
 80110d0:	e03b      	b.n	801114a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80110d2:	68b9      	ldr	r1, [r7, #8]
 80110d4:	68f8      	ldr	r0, [r7, #12]
 80110d6:	f7ff fdf0 	bl	8010cba <get_fat>
 80110da:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80110dc:	697b      	ldr	r3, [r7, #20]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d031      	beq.n	8011146 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80110e2:	697b      	ldr	r3, [r7, #20]
 80110e4:	2b01      	cmp	r3, #1
 80110e6:	d101      	bne.n	80110ec <remove_chain+0x64>
 80110e8:	2302      	movs	r3, #2
 80110ea:	e02e      	b.n	801114a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80110ec:	697b      	ldr	r3, [r7, #20]
 80110ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110f2:	d101      	bne.n	80110f8 <remove_chain+0x70>
 80110f4:	2301      	movs	r3, #1
 80110f6:	e028      	b.n	801114a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80110f8:	2200      	movs	r2, #0
 80110fa:	68b9      	ldr	r1, [r7, #8]
 80110fc:	69b8      	ldr	r0, [r7, #24]
 80110fe:	f7ff feac 	bl	8010e5a <put_fat>
 8011102:	4603      	mov	r3, r0
 8011104:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011106:	7ffb      	ldrb	r3, [r7, #31]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d001      	beq.n	8011110 <remove_chain+0x88>
 801110c:	7ffb      	ldrb	r3, [r7, #31]
 801110e:	e01c      	b.n	801114a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011110:	69bb      	ldr	r3, [r7, #24]
 8011112:	695a      	ldr	r2, [r3, #20]
 8011114:	69bb      	ldr	r3, [r7, #24]
 8011116:	69db      	ldr	r3, [r3, #28]
 8011118:	3b02      	subs	r3, #2
 801111a:	429a      	cmp	r2, r3
 801111c:	d20b      	bcs.n	8011136 <remove_chain+0xae>
			fs->free_clst++;
 801111e:	69bb      	ldr	r3, [r7, #24]
 8011120:	695b      	ldr	r3, [r3, #20]
 8011122:	1c5a      	adds	r2, r3, #1
 8011124:	69bb      	ldr	r3, [r7, #24]
 8011126:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011128:	69bb      	ldr	r3, [r7, #24]
 801112a:	791b      	ldrb	r3, [r3, #4]
 801112c:	f043 0301 	orr.w	r3, r3, #1
 8011130:	b2da      	uxtb	r2, r3
 8011132:	69bb      	ldr	r3, [r7, #24]
 8011134:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011136:	697b      	ldr	r3, [r7, #20]
 8011138:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801113a:	69bb      	ldr	r3, [r7, #24]
 801113c:	69db      	ldr	r3, [r3, #28]
 801113e:	68ba      	ldr	r2, [r7, #8]
 8011140:	429a      	cmp	r2, r3
 8011142:	d3c6      	bcc.n	80110d2 <remove_chain+0x4a>
 8011144:	e000      	b.n	8011148 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011146:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011148:	2300      	movs	r3, #0
}
 801114a:	4618      	mov	r0, r3
 801114c:	3720      	adds	r7, #32
 801114e:	46bd      	mov	sp, r7
 8011150:	bd80      	pop	{r7, pc}

08011152 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011152:	b580      	push	{r7, lr}
 8011154:	b088      	sub	sp, #32
 8011156:	af00      	add	r7, sp, #0
 8011158:	6078      	str	r0, [r7, #4]
 801115a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d10d      	bne.n	8011184 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011168:	693b      	ldr	r3, [r7, #16]
 801116a:	691b      	ldr	r3, [r3, #16]
 801116c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801116e:	69bb      	ldr	r3, [r7, #24]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d004      	beq.n	801117e <create_chain+0x2c>
 8011174:	693b      	ldr	r3, [r7, #16]
 8011176:	69db      	ldr	r3, [r3, #28]
 8011178:	69ba      	ldr	r2, [r7, #24]
 801117a:	429a      	cmp	r2, r3
 801117c:	d31b      	bcc.n	80111b6 <create_chain+0x64>
 801117e:	2301      	movs	r3, #1
 8011180:	61bb      	str	r3, [r7, #24]
 8011182:	e018      	b.n	80111b6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011184:	6839      	ldr	r1, [r7, #0]
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	f7ff fd97 	bl	8010cba <get_fat>
 801118c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	2b01      	cmp	r3, #1
 8011192:	d801      	bhi.n	8011198 <create_chain+0x46>
 8011194:	2301      	movs	r3, #1
 8011196:	e070      	b.n	801127a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801119e:	d101      	bne.n	80111a4 <create_chain+0x52>
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	e06a      	b.n	801127a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80111a4:	693b      	ldr	r3, [r7, #16]
 80111a6:	69db      	ldr	r3, [r3, #28]
 80111a8:	68fa      	ldr	r2, [r7, #12]
 80111aa:	429a      	cmp	r2, r3
 80111ac:	d201      	bcs.n	80111b2 <create_chain+0x60>
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	e063      	b.n	801127a <create_chain+0x128>
		scl = clst;
 80111b2:	683b      	ldr	r3, [r7, #0]
 80111b4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80111b6:	69bb      	ldr	r3, [r7, #24]
 80111b8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80111ba:	69fb      	ldr	r3, [r7, #28]
 80111bc:	3301      	adds	r3, #1
 80111be:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80111c0:	693b      	ldr	r3, [r7, #16]
 80111c2:	69db      	ldr	r3, [r3, #28]
 80111c4:	69fa      	ldr	r2, [r7, #28]
 80111c6:	429a      	cmp	r2, r3
 80111c8:	d307      	bcc.n	80111da <create_chain+0x88>
				ncl = 2;
 80111ca:	2302      	movs	r3, #2
 80111cc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80111ce:	69fa      	ldr	r2, [r7, #28]
 80111d0:	69bb      	ldr	r3, [r7, #24]
 80111d2:	429a      	cmp	r2, r3
 80111d4:	d901      	bls.n	80111da <create_chain+0x88>
 80111d6:	2300      	movs	r3, #0
 80111d8:	e04f      	b.n	801127a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80111da:	69f9      	ldr	r1, [r7, #28]
 80111dc:	6878      	ldr	r0, [r7, #4]
 80111de:	f7ff fd6c 	bl	8010cba <get_fat>
 80111e2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d00e      	beq.n	8011208 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	2b01      	cmp	r3, #1
 80111ee:	d003      	beq.n	80111f8 <create_chain+0xa6>
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111f6:	d101      	bne.n	80111fc <create_chain+0xaa>
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	e03e      	b.n	801127a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80111fc:	69fa      	ldr	r2, [r7, #28]
 80111fe:	69bb      	ldr	r3, [r7, #24]
 8011200:	429a      	cmp	r2, r3
 8011202:	d1da      	bne.n	80111ba <create_chain+0x68>
 8011204:	2300      	movs	r3, #0
 8011206:	e038      	b.n	801127a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011208:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801120a:	f04f 32ff 	mov.w	r2, #4294967295
 801120e:	69f9      	ldr	r1, [r7, #28]
 8011210:	6938      	ldr	r0, [r7, #16]
 8011212:	f7ff fe22 	bl	8010e5a <put_fat>
 8011216:	4603      	mov	r3, r0
 8011218:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801121a:	7dfb      	ldrb	r3, [r7, #23]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d109      	bne.n	8011234 <create_chain+0xe2>
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d006      	beq.n	8011234 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011226:	69fa      	ldr	r2, [r7, #28]
 8011228:	6839      	ldr	r1, [r7, #0]
 801122a:	6938      	ldr	r0, [r7, #16]
 801122c:	f7ff fe15 	bl	8010e5a <put_fat>
 8011230:	4603      	mov	r3, r0
 8011232:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011234:	7dfb      	ldrb	r3, [r7, #23]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d116      	bne.n	8011268 <create_chain+0x116>
		fs->last_clst = ncl;
 801123a:	693b      	ldr	r3, [r7, #16]
 801123c:	69fa      	ldr	r2, [r7, #28]
 801123e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011240:	693b      	ldr	r3, [r7, #16]
 8011242:	695a      	ldr	r2, [r3, #20]
 8011244:	693b      	ldr	r3, [r7, #16]
 8011246:	69db      	ldr	r3, [r3, #28]
 8011248:	3b02      	subs	r3, #2
 801124a:	429a      	cmp	r2, r3
 801124c:	d804      	bhi.n	8011258 <create_chain+0x106>
 801124e:	693b      	ldr	r3, [r7, #16]
 8011250:	695b      	ldr	r3, [r3, #20]
 8011252:	1e5a      	subs	r2, r3, #1
 8011254:	693b      	ldr	r3, [r7, #16]
 8011256:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011258:	693b      	ldr	r3, [r7, #16]
 801125a:	791b      	ldrb	r3, [r3, #4]
 801125c:	f043 0301 	orr.w	r3, r3, #1
 8011260:	b2da      	uxtb	r2, r3
 8011262:	693b      	ldr	r3, [r7, #16]
 8011264:	711a      	strb	r2, [r3, #4]
 8011266:	e007      	b.n	8011278 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011268:	7dfb      	ldrb	r3, [r7, #23]
 801126a:	2b01      	cmp	r3, #1
 801126c:	d102      	bne.n	8011274 <create_chain+0x122>
 801126e:	f04f 33ff 	mov.w	r3, #4294967295
 8011272:	e000      	b.n	8011276 <create_chain+0x124>
 8011274:	2301      	movs	r3, #1
 8011276:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011278:	69fb      	ldr	r3, [r7, #28]
}
 801127a:	4618      	mov	r0, r3
 801127c:	3720      	adds	r7, #32
 801127e:	46bd      	mov	sp, r7
 8011280:	bd80      	pop	{r7, pc}

08011282 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011282:	b480      	push	{r7}
 8011284:	b087      	sub	sp, #28
 8011286:	af00      	add	r7, sp, #0
 8011288:	6078      	str	r0, [r7, #4]
 801128a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011296:	3304      	adds	r3, #4
 8011298:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	899b      	ldrh	r3, [r3, #12]
 801129e:	461a      	mov	r2, r3
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80112a6:	68fa      	ldr	r2, [r7, #12]
 80112a8:	8952      	ldrh	r2, [r2, #10]
 80112aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80112ae:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80112b0:	693b      	ldr	r3, [r7, #16]
 80112b2:	1d1a      	adds	r2, r3, #4
 80112b4:	613a      	str	r2, [r7, #16]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80112ba:	68bb      	ldr	r3, [r7, #8]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d101      	bne.n	80112c4 <clmt_clust+0x42>
 80112c0:	2300      	movs	r3, #0
 80112c2:	e010      	b.n	80112e6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80112c4:	697a      	ldr	r2, [r7, #20]
 80112c6:	68bb      	ldr	r3, [r7, #8]
 80112c8:	429a      	cmp	r2, r3
 80112ca:	d307      	bcc.n	80112dc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80112cc:	697a      	ldr	r2, [r7, #20]
 80112ce:	68bb      	ldr	r3, [r7, #8]
 80112d0:	1ad3      	subs	r3, r2, r3
 80112d2:	617b      	str	r3, [r7, #20]
 80112d4:	693b      	ldr	r3, [r7, #16]
 80112d6:	3304      	adds	r3, #4
 80112d8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80112da:	e7e9      	b.n	80112b0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80112dc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80112de:	693b      	ldr	r3, [r7, #16]
 80112e0:	681a      	ldr	r2, [r3, #0]
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	4413      	add	r3, r2
}
 80112e6:	4618      	mov	r0, r3
 80112e8:	371c      	adds	r7, #28
 80112ea:	46bd      	mov	sp, r7
 80112ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f0:	4770      	bx	lr

080112f2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80112f2:	b580      	push	{r7, lr}
 80112f4:	b086      	sub	sp, #24
 80112f6:	af00      	add	r7, sp, #0
 80112f8:	6078      	str	r0, [r7, #4]
 80112fa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011308:	d204      	bcs.n	8011314 <dir_sdi+0x22>
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	f003 031f 	and.w	r3, r3, #31
 8011310:	2b00      	cmp	r3, #0
 8011312:	d001      	beq.n	8011318 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011314:	2302      	movs	r3, #2
 8011316:	e071      	b.n	80113fc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	683a      	ldr	r2, [r7, #0]
 801131c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	689b      	ldr	r3, [r3, #8]
 8011322:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011324:	697b      	ldr	r3, [r7, #20]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d106      	bne.n	8011338 <dir_sdi+0x46>
 801132a:	693b      	ldr	r3, [r7, #16]
 801132c:	781b      	ldrb	r3, [r3, #0]
 801132e:	2b02      	cmp	r3, #2
 8011330:	d902      	bls.n	8011338 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011332:	693b      	ldr	r3, [r7, #16]
 8011334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011336:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011338:	697b      	ldr	r3, [r7, #20]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d10c      	bne.n	8011358 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	095b      	lsrs	r3, r3, #5
 8011342:	693a      	ldr	r2, [r7, #16]
 8011344:	8912      	ldrh	r2, [r2, #8]
 8011346:	4293      	cmp	r3, r2
 8011348:	d301      	bcc.n	801134e <dir_sdi+0x5c>
 801134a:	2302      	movs	r3, #2
 801134c:	e056      	b.n	80113fc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801134e:	693b      	ldr	r3, [r7, #16]
 8011350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	61da      	str	r2, [r3, #28]
 8011356:	e02d      	b.n	80113b4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011358:	693b      	ldr	r3, [r7, #16]
 801135a:	895b      	ldrh	r3, [r3, #10]
 801135c:	461a      	mov	r2, r3
 801135e:	693b      	ldr	r3, [r7, #16]
 8011360:	899b      	ldrh	r3, [r3, #12]
 8011362:	fb03 f302 	mul.w	r3, r3, r2
 8011366:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011368:	e019      	b.n	801139e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	6979      	ldr	r1, [r7, #20]
 801136e:	4618      	mov	r0, r3
 8011370:	f7ff fca3 	bl	8010cba <get_fat>
 8011374:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011376:	697b      	ldr	r3, [r7, #20]
 8011378:	f1b3 3fff 	cmp.w	r3, #4294967295
 801137c:	d101      	bne.n	8011382 <dir_sdi+0x90>
 801137e:	2301      	movs	r3, #1
 8011380:	e03c      	b.n	80113fc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011382:	697b      	ldr	r3, [r7, #20]
 8011384:	2b01      	cmp	r3, #1
 8011386:	d904      	bls.n	8011392 <dir_sdi+0xa0>
 8011388:	693b      	ldr	r3, [r7, #16]
 801138a:	69db      	ldr	r3, [r3, #28]
 801138c:	697a      	ldr	r2, [r7, #20]
 801138e:	429a      	cmp	r2, r3
 8011390:	d301      	bcc.n	8011396 <dir_sdi+0xa4>
 8011392:	2302      	movs	r3, #2
 8011394:	e032      	b.n	80113fc <dir_sdi+0x10a>
			ofs -= csz;
 8011396:	683a      	ldr	r2, [r7, #0]
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	1ad3      	subs	r3, r2, r3
 801139c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801139e:	683a      	ldr	r2, [r7, #0]
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	429a      	cmp	r2, r3
 80113a4:	d2e1      	bcs.n	801136a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80113a6:	6979      	ldr	r1, [r7, #20]
 80113a8:	6938      	ldr	r0, [r7, #16]
 80113aa:	f7ff fc67 	bl	8010c7c <clust2sect>
 80113ae:	4602      	mov	r2, r0
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	697a      	ldr	r2, [r7, #20]
 80113b8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	69db      	ldr	r3, [r3, #28]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d101      	bne.n	80113c6 <dir_sdi+0xd4>
 80113c2:	2302      	movs	r3, #2
 80113c4:	e01a      	b.n	80113fc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	69da      	ldr	r2, [r3, #28]
 80113ca:	693b      	ldr	r3, [r7, #16]
 80113cc:	899b      	ldrh	r3, [r3, #12]
 80113ce:	4619      	mov	r1, r3
 80113d0:	683b      	ldr	r3, [r7, #0]
 80113d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80113d6:	441a      	add	r2, r3
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80113dc:	693b      	ldr	r3, [r7, #16]
 80113de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80113e2:	693b      	ldr	r3, [r7, #16]
 80113e4:	899b      	ldrh	r3, [r3, #12]
 80113e6:	461a      	mov	r2, r3
 80113e8:	683b      	ldr	r3, [r7, #0]
 80113ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80113ee:	fb02 f200 	mul.w	r2, r2, r0
 80113f2:	1a9b      	subs	r3, r3, r2
 80113f4:	18ca      	adds	r2, r1, r3
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80113fa:	2300      	movs	r3, #0
}
 80113fc:	4618      	mov	r0, r3
 80113fe:	3718      	adds	r7, #24
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}

08011404 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b086      	sub	sp, #24
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
 801140c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	695b      	ldr	r3, [r3, #20]
 8011418:	3320      	adds	r3, #32
 801141a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	69db      	ldr	r3, [r3, #28]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d003      	beq.n	801142c <dir_next+0x28>
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801142a:	d301      	bcc.n	8011430 <dir_next+0x2c>
 801142c:	2304      	movs	r3, #4
 801142e:	e0bb      	b.n	80115a8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	899b      	ldrh	r3, [r3, #12]
 8011434:	461a      	mov	r2, r3
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	fbb3 f1f2 	udiv	r1, r3, r2
 801143c:	fb02 f201 	mul.w	r2, r2, r1
 8011440:	1a9b      	subs	r3, r3, r2
 8011442:	2b00      	cmp	r3, #0
 8011444:	f040 809d 	bne.w	8011582 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	69db      	ldr	r3, [r3, #28]
 801144c:	1c5a      	adds	r2, r3, #1
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	699b      	ldr	r3, [r3, #24]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d10b      	bne.n	8011472 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	095b      	lsrs	r3, r3, #5
 801145e:	68fa      	ldr	r2, [r7, #12]
 8011460:	8912      	ldrh	r2, [r2, #8]
 8011462:	4293      	cmp	r3, r2
 8011464:	f0c0 808d 	bcc.w	8011582 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	2200      	movs	r2, #0
 801146c:	61da      	str	r2, [r3, #28]
 801146e:	2304      	movs	r3, #4
 8011470:	e09a      	b.n	80115a8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	899b      	ldrh	r3, [r3, #12]
 8011476:	461a      	mov	r2, r3
 8011478:	68bb      	ldr	r3, [r7, #8]
 801147a:	fbb3 f3f2 	udiv	r3, r3, r2
 801147e:	68fa      	ldr	r2, [r7, #12]
 8011480:	8952      	ldrh	r2, [r2, #10]
 8011482:	3a01      	subs	r2, #1
 8011484:	4013      	ands	r3, r2
 8011486:	2b00      	cmp	r3, #0
 8011488:	d17b      	bne.n	8011582 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801148a:	687a      	ldr	r2, [r7, #4]
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	699b      	ldr	r3, [r3, #24]
 8011490:	4619      	mov	r1, r3
 8011492:	4610      	mov	r0, r2
 8011494:	f7ff fc11 	bl	8010cba <get_fat>
 8011498:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801149a:	697b      	ldr	r3, [r7, #20]
 801149c:	2b01      	cmp	r3, #1
 801149e:	d801      	bhi.n	80114a4 <dir_next+0xa0>
 80114a0:	2302      	movs	r3, #2
 80114a2:	e081      	b.n	80115a8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80114a4:	697b      	ldr	r3, [r7, #20]
 80114a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114aa:	d101      	bne.n	80114b0 <dir_next+0xac>
 80114ac:	2301      	movs	r3, #1
 80114ae:	e07b      	b.n	80115a8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	69db      	ldr	r3, [r3, #28]
 80114b4:	697a      	ldr	r2, [r7, #20]
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d359      	bcc.n	801156e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80114ba:	683b      	ldr	r3, [r7, #0]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d104      	bne.n	80114ca <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2200      	movs	r2, #0
 80114c4:	61da      	str	r2, [r3, #28]
 80114c6:	2304      	movs	r3, #4
 80114c8:	e06e      	b.n	80115a8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80114ca:	687a      	ldr	r2, [r7, #4]
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	699b      	ldr	r3, [r3, #24]
 80114d0:	4619      	mov	r1, r3
 80114d2:	4610      	mov	r0, r2
 80114d4:	f7ff fe3d 	bl	8011152 <create_chain>
 80114d8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80114da:	697b      	ldr	r3, [r7, #20]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d101      	bne.n	80114e4 <dir_next+0xe0>
 80114e0:	2307      	movs	r3, #7
 80114e2:	e061      	b.n	80115a8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80114e4:	697b      	ldr	r3, [r7, #20]
 80114e6:	2b01      	cmp	r3, #1
 80114e8:	d101      	bne.n	80114ee <dir_next+0xea>
 80114ea:	2302      	movs	r3, #2
 80114ec:	e05c      	b.n	80115a8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114f4:	d101      	bne.n	80114fa <dir_next+0xf6>
 80114f6:	2301      	movs	r3, #1
 80114f8:	e056      	b.n	80115a8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80114fa:	68f8      	ldr	r0, [r7, #12]
 80114fc:	f7ff fadc 	bl	8010ab8 <sync_window>
 8011500:	4603      	mov	r3, r0
 8011502:	2b00      	cmp	r3, #0
 8011504:	d001      	beq.n	801150a <dir_next+0x106>
 8011506:	2301      	movs	r3, #1
 8011508:	e04e      	b.n	80115a8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	899b      	ldrh	r3, [r3, #12]
 8011514:	461a      	mov	r2, r3
 8011516:	2100      	movs	r1, #0
 8011518:	f7ff f905 	bl	8010726 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801151c:	2300      	movs	r3, #0
 801151e:	613b      	str	r3, [r7, #16]
 8011520:	6979      	ldr	r1, [r7, #20]
 8011522:	68f8      	ldr	r0, [r7, #12]
 8011524:	f7ff fbaa 	bl	8010c7c <clust2sect>
 8011528:	4602      	mov	r2, r0
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	635a      	str	r2, [r3, #52]	; 0x34
 801152e:	e012      	b.n	8011556 <dir_next+0x152>
						fs->wflag = 1;
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	2201      	movs	r2, #1
 8011534:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011536:	68f8      	ldr	r0, [r7, #12]
 8011538:	f7ff fabe 	bl	8010ab8 <sync_window>
 801153c:	4603      	mov	r3, r0
 801153e:	2b00      	cmp	r3, #0
 8011540:	d001      	beq.n	8011546 <dir_next+0x142>
 8011542:	2301      	movs	r3, #1
 8011544:	e030      	b.n	80115a8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011546:	693b      	ldr	r3, [r7, #16]
 8011548:	3301      	adds	r3, #1
 801154a:	613b      	str	r3, [r7, #16]
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011550:	1c5a      	adds	r2, r3, #1
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	635a      	str	r2, [r3, #52]	; 0x34
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	895b      	ldrh	r3, [r3, #10]
 801155a:	461a      	mov	r2, r3
 801155c:	693b      	ldr	r3, [r7, #16]
 801155e:	4293      	cmp	r3, r2
 8011560:	d3e6      	bcc.n	8011530 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011566:	693b      	ldr	r3, [r7, #16]
 8011568:	1ad2      	subs	r2, r2, r3
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	697a      	ldr	r2, [r7, #20]
 8011572:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011574:	6979      	ldr	r1, [r7, #20]
 8011576:	68f8      	ldr	r0, [r7, #12]
 8011578:	f7ff fb80 	bl	8010c7c <clust2sect>
 801157c:	4602      	mov	r2, r0
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	68ba      	ldr	r2, [r7, #8]
 8011586:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	899b      	ldrh	r3, [r3, #12]
 8011592:	461a      	mov	r2, r3
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	fbb3 f0f2 	udiv	r0, r3, r2
 801159a:	fb02 f200 	mul.w	r2, r2, r0
 801159e:	1a9b      	subs	r3, r3, r2
 80115a0:	18ca      	adds	r2, r1, r3
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80115a6:	2300      	movs	r3, #0
}
 80115a8:	4618      	mov	r0, r3
 80115aa:	3718      	adds	r7, #24
 80115ac:	46bd      	mov	sp, r7
 80115ae:	bd80      	pop	{r7, pc}

080115b0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b086      	sub	sp, #24
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
 80115b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80115c0:	2100      	movs	r1, #0
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f7ff fe95 	bl	80112f2 <dir_sdi>
 80115c8:	4603      	mov	r3, r0
 80115ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80115cc:	7dfb      	ldrb	r3, [r7, #23]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d12b      	bne.n	801162a <dir_alloc+0x7a>
		n = 0;
 80115d2:	2300      	movs	r3, #0
 80115d4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	69db      	ldr	r3, [r3, #28]
 80115da:	4619      	mov	r1, r3
 80115dc:	68f8      	ldr	r0, [r7, #12]
 80115de:	f7ff faaf 	bl	8010b40 <move_window>
 80115e2:	4603      	mov	r3, r0
 80115e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80115e6:	7dfb      	ldrb	r3, [r7, #23]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d11d      	bne.n	8011628 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	6a1b      	ldr	r3, [r3, #32]
 80115f0:	781b      	ldrb	r3, [r3, #0]
 80115f2:	2be5      	cmp	r3, #229	; 0xe5
 80115f4:	d004      	beq.n	8011600 <dir_alloc+0x50>
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	6a1b      	ldr	r3, [r3, #32]
 80115fa:	781b      	ldrb	r3, [r3, #0]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d107      	bne.n	8011610 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011600:	693b      	ldr	r3, [r7, #16]
 8011602:	3301      	adds	r3, #1
 8011604:	613b      	str	r3, [r7, #16]
 8011606:	693a      	ldr	r2, [r7, #16]
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	429a      	cmp	r2, r3
 801160c:	d102      	bne.n	8011614 <dir_alloc+0x64>
 801160e:	e00c      	b.n	801162a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011610:	2300      	movs	r3, #0
 8011612:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011614:	2101      	movs	r1, #1
 8011616:	6878      	ldr	r0, [r7, #4]
 8011618:	f7ff fef4 	bl	8011404 <dir_next>
 801161c:	4603      	mov	r3, r0
 801161e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011620:	7dfb      	ldrb	r3, [r7, #23]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d0d7      	beq.n	80115d6 <dir_alloc+0x26>
 8011626:	e000      	b.n	801162a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011628:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801162a:	7dfb      	ldrb	r3, [r7, #23]
 801162c:	2b04      	cmp	r3, #4
 801162e:	d101      	bne.n	8011634 <dir_alloc+0x84>
 8011630:	2307      	movs	r3, #7
 8011632:	75fb      	strb	r3, [r7, #23]
	return res;
 8011634:	7dfb      	ldrb	r3, [r7, #23]
}
 8011636:	4618      	mov	r0, r3
 8011638:	3718      	adds	r7, #24
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}

0801163e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801163e:	b580      	push	{r7, lr}
 8011640:	b084      	sub	sp, #16
 8011642:	af00      	add	r7, sp, #0
 8011644:	6078      	str	r0, [r7, #4]
 8011646:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011648:	683b      	ldr	r3, [r7, #0]
 801164a:	331a      	adds	r3, #26
 801164c:	4618      	mov	r0, r3
 801164e:	f7fe ffc7 	bl	80105e0 <ld_word>
 8011652:	4603      	mov	r3, r0
 8011654:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	781b      	ldrb	r3, [r3, #0]
 801165a:	2b03      	cmp	r3, #3
 801165c:	d109      	bne.n	8011672 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801165e:	683b      	ldr	r3, [r7, #0]
 8011660:	3314      	adds	r3, #20
 8011662:	4618      	mov	r0, r3
 8011664:	f7fe ffbc 	bl	80105e0 <ld_word>
 8011668:	4603      	mov	r3, r0
 801166a:	041b      	lsls	r3, r3, #16
 801166c:	68fa      	ldr	r2, [r7, #12]
 801166e:	4313      	orrs	r3, r2
 8011670:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011672:	68fb      	ldr	r3, [r7, #12]
}
 8011674:	4618      	mov	r0, r3
 8011676:	3710      	adds	r7, #16
 8011678:	46bd      	mov	sp, r7
 801167a:	bd80      	pop	{r7, pc}

0801167c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b084      	sub	sp, #16
 8011680:	af00      	add	r7, sp, #0
 8011682:	60f8      	str	r0, [r7, #12]
 8011684:	60b9      	str	r1, [r7, #8]
 8011686:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011688:	68bb      	ldr	r3, [r7, #8]
 801168a:	331a      	adds	r3, #26
 801168c:	687a      	ldr	r2, [r7, #4]
 801168e:	b292      	uxth	r2, r2
 8011690:	4611      	mov	r1, r2
 8011692:	4618      	mov	r0, r3
 8011694:	f7fe ffdf 	bl	8010656 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	781b      	ldrb	r3, [r3, #0]
 801169c:	2b03      	cmp	r3, #3
 801169e:	d109      	bne.n	80116b4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80116a0:	68bb      	ldr	r3, [r7, #8]
 80116a2:	f103 0214 	add.w	r2, r3, #20
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	0c1b      	lsrs	r3, r3, #16
 80116aa:	b29b      	uxth	r3, r3
 80116ac:	4619      	mov	r1, r3
 80116ae:	4610      	mov	r0, r2
 80116b0:	f7fe ffd1 	bl	8010656 <st_word>
	}
}
 80116b4:	bf00      	nop
 80116b6:	3710      	adds	r7, #16
 80116b8:	46bd      	mov	sp, r7
 80116ba:	bd80      	pop	{r7, pc}

080116bc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b086      	sub	sp, #24
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
 80116c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80116c6:	2304      	movs	r3, #4
 80116c8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80116d0:	e03c      	b.n	801174c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	69db      	ldr	r3, [r3, #28]
 80116d6:	4619      	mov	r1, r3
 80116d8:	6938      	ldr	r0, [r7, #16]
 80116da:	f7ff fa31 	bl	8010b40 <move_window>
 80116de:	4603      	mov	r3, r0
 80116e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80116e2:	7dfb      	ldrb	r3, [r7, #23]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d136      	bne.n	8011756 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	6a1b      	ldr	r3, [r3, #32]
 80116ec:	781b      	ldrb	r3, [r3, #0]
 80116ee:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80116f0:	7bfb      	ldrb	r3, [r7, #15]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d102      	bne.n	80116fc <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80116f6:	2304      	movs	r3, #4
 80116f8:	75fb      	strb	r3, [r7, #23]
 80116fa:	e031      	b.n	8011760 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	6a1b      	ldr	r3, [r3, #32]
 8011700:	330b      	adds	r3, #11
 8011702:	781b      	ldrb	r3, [r3, #0]
 8011704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011708:	73bb      	strb	r3, [r7, #14]
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	7bba      	ldrb	r2, [r7, #14]
 801170e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8011710:	7bfb      	ldrb	r3, [r7, #15]
 8011712:	2be5      	cmp	r3, #229	; 0xe5
 8011714:	d011      	beq.n	801173a <dir_read+0x7e>
 8011716:	7bfb      	ldrb	r3, [r7, #15]
 8011718:	2b2e      	cmp	r3, #46	; 0x2e
 801171a:	d00e      	beq.n	801173a <dir_read+0x7e>
 801171c:	7bbb      	ldrb	r3, [r7, #14]
 801171e:	2b0f      	cmp	r3, #15
 8011720:	d00b      	beq.n	801173a <dir_read+0x7e>
 8011722:	7bbb      	ldrb	r3, [r7, #14]
 8011724:	f023 0320 	bic.w	r3, r3, #32
 8011728:	2b08      	cmp	r3, #8
 801172a:	bf0c      	ite	eq
 801172c:	2301      	moveq	r3, #1
 801172e:	2300      	movne	r3, #0
 8011730:	b2db      	uxtb	r3, r3
 8011732:	461a      	mov	r2, r3
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	4293      	cmp	r3, r2
 8011738:	d00f      	beq.n	801175a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801173a:	2100      	movs	r1, #0
 801173c:	6878      	ldr	r0, [r7, #4]
 801173e:	f7ff fe61 	bl	8011404 <dir_next>
 8011742:	4603      	mov	r3, r0
 8011744:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011746:	7dfb      	ldrb	r3, [r7, #23]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d108      	bne.n	801175e <dir_read+0xa2>
	while (dp->sect) {
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	69db      	ldr	r3, [r3, #28]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d1be      	bne.n	80116d2 <dir_read+0x16>
 8011754:	e004      	b.n	8011760 <dir_read+0xa4>
		if (res != FR_OK) break;
 8011756:	bf00      	nop
 8011758:	e002      	b.n	8011760 <dir_read+0xa4>
				break;
 801175a:	bf00      	nop
 801175c:	e000      	b.n	8011760 <dir_read+0xa4>
		if (res != FR_OK) break;
 801175e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011760:	7dfb      	ldrb	r3, [r7, #23]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d002      	beq.n	801176c <dir_read+0xb0>
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	2200      	movs	r2, #0
 801176a:	61da      	str	r2, [r3, #28]
	return res;
 801176c:	7dfb      	ldrb	r3, [r7, #23]
}
 801176e:	4618      	mov	r0, r3
 8011770:	3718      	adds	r7, #24
 8011772:	46bd      	mov	sp, r7
 8011774:	bd80      	pop	{r7, pc}

08011776 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011776:	b580      	push	{r7, lr}
 8011778:	b086      	sub	sp, #24
 801177a:	af00      	add	r7, sp, #0
 801177c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011784:	2100      	movs	r1, #0
 8011786:	6878      	ldr	r0, [r7, #4]
 8011788:	f7ff fdb3 	bl	80112f2 <dir_sdi>
 801178c:	4603      	mov	r3, r0
 801178e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011790:	7dfb      	ldrb	r3, [r7, #23]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d001      	beq.n	801179a <dir_find+0x24>
 8011796:	7dfb      	ldrb	r3, [r7, #23]
 8011798:	e03e      	b.n	8011818 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	69db      	ldr	r3, [r3, #28]
 801179e:	4619      	mov	r1, r3
 80117a0:	6938      	ldr	r0, [r7, #16]
 80117a2:	f7ff f9cd 	bl	8010b40 <move_window>
 80117a6:	4603      	mov	r3, r0
 80117a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80117aa:	7dfb      	ldrb	r3, [r7, #23]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d12f      	bne.n	8011810 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	6a1b      	ldr	r3, [r3, #32]
 80117b4:	781b      	ldrb	r3, [r3, #0]
 80117b6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80117b8:	7bfb      	ldrb	r3, [r7, #15]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d102      	bne.n	80117c4 <dir_find+0x4e>
 80117be:	2304      	movs	r3, #4
 80117c0:	75fb      	strb	r3, [r7, #23]
 80117c2:	e028      	b.n	8011816 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	6a1b      	ldr	r3, [r3, #32]
 80117c8:	330b      	adds	r3, #11
 80117ca:	781b      	ldrb	r3, [r3, #0]
 80117cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80117d0:	b2da      	uxtb	r2, r3
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6a1b      	ldr	r3, [r3, #32]
 80117da:	330b      	adds	r3, #11
 80117dc:	781b      	ldrb	r3, [r3, #0]
 80117de:	f003 0308 	and.w	r3, r3, #8
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d10a      	bne.n	80117fc <dir_find+0x86>
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	6a18      	ldr	r0, [r3, #32]
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	3324      	adds	r3, #36	; 0x24
 80117ee:	220b      	movs	r2, #11
 80117f0:	4619      	mov	r1, r3
 80117f2:	f7fe ffb2 	bl	801075a <mem_cmp>
 80117f6:	4603      	mov	r3, r0
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d00b      	beq.n	8011814 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80117fc:	2100      	movs	r1, #0
 80117fe:	6878      	ldr	r0, [r7, #4]
 8011800:	f7ff fe00 	bl	8011404 <dir_next>
 8011804:	4603      	mov	r3, r0
 8011806:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011808:	7dfb      	ldrb	r3, [r7, #23]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d0c5      	beq.n	801179a <dir_find+0x24>
 801180e:	e002      	b.n	8011816 <dir_find+0xa0>
		if (res != FR_OK) break;
 8011810:	bf00      	nop
 8011812:	e000      	b.n	8011816 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011814:	bf00      	nop

	return res;
 8011816:	7dfb      	ldrb	r3, [r7, #23]
}
 8011818:	4618      	mov	r0, r3
 801181a:	3718      	adds	r7, #24
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}

08011820 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b084      	sub	sp, #16
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801182e:	2101      	movs	r1, #1
 8011830:	6878      	ldr	r0, [r7, #4]
 8011832:	f7ff febd 	bl	80115b0 <dir_alloc>
 8011836:	4603      	mov	r3, r0
 8011838:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801183a:	7bfb      	ldrb	r3, [r7, #15]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d11c      	bne.n	801187a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	69db      	ldr	r3, [r3, #28]
 8011844:	4619      	mov	r1, r3
 8011846:	68b8      	ldr	r0, [r7, #8]
 8011848:	f7ff f97a 	bl	8010b40 <move_window>
 801184c:	4603      	mov	r3, r0
 801184e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011850:	7bfb      	ldrb	r3, [r7, #15]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d111      	bne.n	801187a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	6a1b      	ldr	r3, [r3, #32]
 801185a:	2220      	movs	r2, #32
 801185c:	2100      	movs	r1, #0
 801185e:	4618      	mov	r0, r3
 8011860:	f7fe ff61 	bl	8010726 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	6a18      	ldr	r0, [r3, #32]
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	3324      	adds	r3, #36	; 0x24
 801186c:	220b      	movs	r2, #11
 801186e:	4619      	mov	r1, r3
 8011870:	f7fe ff38 	bl	80106e4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8011874:	68bb      	ldr	r3, [r7, #8]
 8011876:	2201      	movs	r2, #1
 8011878:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801187a:	7bfb      	ldrb	r3, [r7, #15]
}
 801187c:	4618      	mov	r0, r3
 801187e:	3710      	adds	r7, #16
 8011880:	46bd      	mov	sp, r7
 8011882:	bd80      	pop	{r7, pc}

08011884 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b084      	sub	sp, #16
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	69db      	ldr	r3, [r3, #28]
 8011896:	4619      	mov	r1, r3
 8011898:	68f8      	ldr	r0, [r7, #12]
 801189a:	f7ff f951 	bl	8010b40 <move_window>
 801189e:	4603      	mov	r3, r0
 80118a0:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80118a2:	7afb      	ldrb	r3, [r7, #11]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d106      	bne.n	80118b6 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	6a1b      	ldr	r3, [r3, #32]
 80118ac:	22e5      	movs	r2, #229	; 0xe5
 80118ae:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	2201      	movs	r2, #1
 80118b4:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80118b6:	7afb      	ldrb	r3, [r7, #11]
}
 80118b8:	4618      	mov	r0, r3
 80118ba:	3710      	adds	r7, #16
 80118bc:	46bd      	mov	sp, r7
 80118be:	bd80      	pop	{r7, pc}

080118c0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b088      	sub	sp, #32
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
 80118c8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80118ca:	683b      	ldr	r3, [r7, #0]
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	60fb      	str	r3, [r7, #12]
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	3324      	adds	r3, #36	; 0x24
 80118d4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80118d6:	220b      	movs	r2, #11
 80118d8:	2120      	movs	r1, #32
 80118da:	68b8      	ldr	r0, [r7, #8]
 80118dc:	f7fe ff23 	bl	8010726 <mem_set>
	si = i = 0; ni = 8;
 80118e0:	2300      	movs	r3, #0
 80118e2:	613b      	str	r3, [r7, #16]
 80118e4:	693b      	ldr	r3, [r7, #16]
 80118e6:	617b      	str	r3, [r7, #20]
 80118e8:	2308      	movs	r3, #8
 80118ea:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 80118ec:	68fa      	ldr	r2, [r7, #12]
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	4413      	add	r3, r2
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	2b2e      	cmp	r3, #46	; 0x2e
 80118f6:	d12f      	bne.n	8011958 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	1c5a      	adds	r2, r3, #1
 80118fc:	617a      	str	r2, [r7, #20]
 80118fe:	68fa      	ldr	r2, [r7, #12]
 8011900:	4413      	add	r3, r2
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8011906:	7ffb      	ldrb	r3, [r7, #31]
 8011908:	2b2e      	cmp	r3, #46	; 0x2e
 801190a:	d10a      	bne.n	8011922 <create_name+0x62>
 801190c:	697b      	ldr	r3, [r7, #20]
 801190e:	2b02      	cmp	r3, #2
 8011910:	d807      	bhi.n	8011922 <create_name+0x62>
			sfn[i++] = c;
 8011912:	693b      	ldr	r3, [r7, #16]
 8011914:	1c5a      	adds	r2, r3, #1
 8011916:	613a      	str	r2, [r7, #16]
 8011918:	68ba      	ldr	r2, [r7, #8]
 801191a:	4413      	add	r3, r2
 801191c:	7ffa      	ldrb	r2, [r7, #31]
 801191e:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8011920:	e7ea      	b.n	80118f8 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8011922:	7ffb      	ldrb	r3, [r7, #31]
 8011924:	2b2f      	cmp	r3, #47	; 0x2f
 8011926:	d007      	beq.n	8011938 <create_name+0x78>
 8011928:	7ffb      	ldrb	r3, [r7, #31]
 801192a:	2b5c      	cmp	r3, #92	; 0x5c
 801192c:	d004      	beq.n	8011938 <create_name+0x78>
 801192e:	7ffb      	ldrb	r3, [r7, #31]
 8011930:	2b20      	cmp	r3, #32
 8011932:	d901      	bls.n	8011938 <create_name+0x78>
 8011934:	2306      	movs	r3, #6
 8011936:	e084      	b.n	8011a42 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8011938:	68fa      	ldr	r2, [r7, #12]
 801193a:	697b      	ldr	r3, [r7, #20]
 801193c:	441a      	add	r2, r3
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8011942:	7ffb      	ldrb	r3, [r7, #31]
 8011944:	2b20      	cmp	r3, #32
 8011946:	d801      	bhi.n	801194c <create_name+0x8c>
 8011948:	2224      	movs	r2, #36	; 0x24
 801194a:	e000      	b.n	801194e <create_name+0x8e>
 801194c:	2220      	movs	r2, #32
 801194e:	68bb      	ldr	r3, [r7, #8]
 8011950:	330b      	adds	r3, #11
 8011952:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8011954:	2300      	movs	r3, #0
 8011956:	e074      	b.n	8011a42 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011958:	697b      	ldr	r3, [r7, #20]
 801195a:	1c5a      	adds	r2, r3, #1
 801195c:	617a      	str	r2, [r7, #20]
 801195e:	68fa      	ldr	r2, [r7, #12]
 8011960:	4413      	add	r3, r2
 8011962:	781b      	ldrb	r3, [r3, #0]
 8011964:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011966:	7ffb      	ldrb	r3, [r7, #31]
 8011968:	2b20      	cmp	r3, #32
 801196a:	d94e      	bls.n	8011a0a <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801196c:	7ffb      	ldrb	r3, [r7, #31]
 801196e:	2b2f      	cmp	r3, #47	; 0x2f
 8011970:	d006      	beq.n	8011980 <create_name+0xc0>
 8011972:	7ffb      	ldrb	r3, [r7, #31]
 8011974:	2b5c      	cmp	r3, #92	; 0x5c
 8011976:	d110      	bne.n	801199a <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011978:	e002      	b.n	8011980 <create_name+0xc0>
 801197a:	697b      	ldr	r3, [r7, #20]
 801197c:	3301      	adds	r3, #1
 801197e:	617b      	str	r3, [r7, #20]
 8011980:	68fa      	ldr	r2, [r7, #12]
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	4413      	add	r3, r2
 8011986:	781b      	ldrb	r3, [r3, #0]
 8011988:	2b2f      	cmp	r3, #47	; 0x2f
 801198a:	d0f6      	beq.n	801197a <create_name+0xba>
 801198c:	68fa      	ldr	r2, [r7, #12]
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	4413      	add	r3, r2
 8011992:	781b      	ldrb	r3, [r3, #0]
 8011994:	2b5c      	cmp	r3, #92	; 0x5c
 8011996:	d0f0      	beq.n	801197a <create_name+0xba>
			break;
 8011998:	e038      	b.n	8011a0c <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801199a:	7ffb      	ldrb	r3, [r7, #31]
 801199c:	2b2e      	cmp	r3, #46	; 0x2e
 801199e:	d003      	beq.n	80119a8 <create_name+0xe8>
 80119a0:	693a      	ldr	r2, [r7, #16]
 80119a2:	69bb      	ldr	r3, [r7, #24]
 80119a4:	429a      	cmp	r2, r3
 80119a6:	d30c      	bcc.n	80119c2 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80119a8:	69bb      	ldr	r3, [r7, #24]
 80119aa:	2b0b      	cmp	r3, #11
 80119ac:	d002      	beq.n	80119b4 <create_name+0xf4>
 80119ae:	7ffb      	ldrb	r3, [r7, #31]
 80119b0:	2b2e      	cmp	r3, #46	; 0x2e
 80119b2:	d001      	beq.n	80119b8 <create_name+0xf8>
 80119b4:	2306      	movs	r3, #6
 80119b6:	e044      	b.n	8011a42 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 80119b8:	2308      	movs	r3, #8
 80119ba:	613b      	str	r3, [r7, #16]
 80119bc:	230b      	movs	r3, #11
 80119be:	61bb      	str	r3, [r7, #24]
			continue;
 80119c0:	e022      	b.n	8011a08 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 80119c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	da04      	bge.n	80119d4 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80119ca:	7ffb      	ldrb	r3, [r7, #31]
 80119cc:	3b80      	subs	r3, #128	; 0x80
 80119ce:	4a1f      	ldr	r2, [pc, #124]	; (8011a4c <create_name+0x18c>)
 80119d0:	5cd3      	ldrb	r3, [r2, r3]
 80119d2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80119d4:	7ffb      	ldrb	r3, [r7, #31]
 80119d6:	4619      	mov	r1, r3
 80119d8:	481d      	ldr	r0, [pc, #116]	; (8011a50 <create_name+0x190>)
 80119da:	f7fe fee5 	bl	80107a8 <chk_chr>
 80119de:	4603      	mov	r3, r0
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d001      	beq.n	80119e8 <create_name+0x128>
 80119e4:	2306      	movs	r3, #6
 80119e6:	e02c      	b.n	8011a42 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80119e8:	7ffb      	ldrb	r3, [r7, #31]
 80119ea:	2b60      	cmp	r3, #96	; 0x60
 80119ec:	d905      	bls.n	80119fa <create_name+0x13a>
 80119ee:	7ffb      	ldrb	r3, [r7, #31]
 80119f0:	2b7a      	cmp	r3, #122	; 0x7a
 80119f2:	d802      	bhi.n	80119fa <create_name+0x13a>
 80119f4:	7ffb      	ldrb	r3, [r7, #31]
 80119f6:	3b20      	subs	r3, #32
 80119f8:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	1c5a      	adds	r2, r3, #1
 80119fe:	613a      	str	r2, [r7, #16]
 8011a00:	68ba      	ldr	r2, [r7, #8]
 8011a02:	4413      	add	r3, r2
 8011a04:	7ffa      	ldrb	r2, [r7, #31]
 8011a06:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011a08:	e7a6      	b.n	8011958 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011a0a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011a0c:	68fa      	ldr	r2, [r7, #12]
 8011a0e:	697b      	ldr	r3, [r7, #20]
 8011a10:	441a      	add	r2, r3
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8011a16:	693b      	ldr	r3, [r7, #16]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d101      	bne.n	8011a20 <create_name+0x160>
 8011a1c:	2306      	movs	r3, #6
 8011a1e:	e010      	b.n	8011a42 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011a20:	68bb      	ldr	r3, [r7, #8]
 8011a22:	781b      	ldrb	r3, [r3, #0]
 8011a24:	2be5      	cmp	r3, #229	; 0xe5
 8011a26:	d102      	bne.n	8011a2e <create_name+0x16e>
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	2205      	movs	r2, #5
 8011a2c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011a2e:	7ffb      	ldrb	r3, [r7, #31]
 8011a30:	2b20      	cmp	r3, #32
 8011a32:	d801      	bhi.n	8011a38 <create_name+0x178>
 8011a34:	2204      	movs	r2, #4
 8011a36:	e000      	b.n	8011a3a <create_name+0x17a>
 8011a38:	2200      	movs	r2, #0
 8011a3a:	68bb      	ldr	r3, [r7, #8]
 8011a3c:	330b      	adds	r3, #11
 8011a3e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011a40:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011a42:	4618      	mov	r0, r3
 8011a44:	3720      	adds	r7, #32
 8011a46:	46bd      	mov	sp, r7
 8011a48:	bd80      	pop	{r7, pc}
 8011a4a:	bf00      	nop
 8011a4c:	08019608 	.word	0x08019608
 8011a50:	080195b8 	.word	0x080195b8

08011a54 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b086      	sub	sp, #24
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
 8011a5c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011a62:	693b      	ldr	r3, [r7, #16]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8011a68:	683b      	ldr	r3, [r7, #0]
 8011a6a:	781b      	ldrb	r3, [r3, #0]
 8011a6c:	2b2f      	cmp	r3, #47	; 0x2f
 8011a6e:	d00b      	beq.n	8011a88 <follow_path+0x34>
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	781b      	ldrb	r3, [r3, #0]
 8011a74:	2b5c      	cmp	r3, #92	; 0x5c
 8011a76:	d007      	beq.n	8011a88 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	699a      	ldr	r2, [r3, #24]
 8011a7c:	693b      	ldr	r3, [r7, #16]
 8011a7e:	609a      	str	r2, [r3, #8]
 8011a80:	e00d      	b.n	8011a9e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	3301      	adds	r3, #1
 8011a86:	603b      	str	r3, [r7, #0]
 8011a88:	683b      	ldr	r3, [r7, #0]
 8011a8a:	781b      	ldrb	r3, [r3, #0]
 8011a8c:	2b2f      	cmp	r3, #47	; 0x2f
 8011a8e:	d0f8      	beq.n	8011a82 <follow_path+0x2e>
 8011a90:	683b      	ldr	r3, [r7, #0]
 8011a92:	781b      	ldrb	r3, [r3, #0]
 8011a94:	2b5c      	cmp	r3, #92	; 0x5c
 8011a96:	d0f4      	beq.n	8011a82 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8011a98:	693b      	ldr	r3, [r7, #16]
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011a9e:	683b      	ldr	r3, [r7, #0]
 8011aa0:	781b      	ldrb	r3, [r3, #0]
 8011aa2:	2b1f      	cmp	r3, #31
 8011aa4:	d80a      	bhi.n	8011abc <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	2280      	movs	r2, #128	; 0x80
 8011aaa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8011aae:	2100      	movs	r1, #0
 8011ab0:	6878      	ldr	r0, [r7, #4]
 8011ab2:	f7ff fc1e 	bl	80112f2 <dir_sdi>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	75fb      	strb	r3, [r7, #23]
 8011aba:	e05b      	b.n	8011b74 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011abc:	463b      	mov	r3, r7
 8011abe:	4619      	mov	r1, r3
 8011ac0:	6878      	ldr	r0, [r7, #4]
 8011ac2:	f7ff fefd 	bl	80118c0 <create_name>
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011aca:	7dfb      	ldrb	r3, [r7, #23]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d14c      	bne.n	8011b6a <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f7ff fe50 	bl	8011776 <dir_find>
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011ae0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011ae2:	7dfb      	ldrb	r3, [r7, #23]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d01b      	beq.n	8011b20 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011ae8:	7dfb      	ldrb	r3, [r7, #23]
 8011aea:	2b04      	cmp	r3, #4
 8011aec:	d13f      	bne.n	8011b6e <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8011aee:	7afb      	ldrb	r3, [r7, #11]
 8011af0:	f003 0320 	and.w	r3, r3, #32
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d00b      	beq.n	8011b10 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8011af8:	7afb      	ldrb	r3, [r7, #11]
 8011afa:	f003 0304 	and.w	r3, r3, #4
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d031      	beq.n	8011b66 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	2280      	movs	r2, #128	; 0x80
 8011b06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8011b0e:	e02e      	b.n	8011b6e <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011b10:	7afb      	ldrb	r3, [r7, #11]
 8011b12:	f003 0304 	and.w	r3, r3, #4
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d129      	bne.n	8011b6e <follow_path+0x11a>
 8011b1a:	2305      	movs	r3, #5
 8011b1c:	75fb      	strb	r3, [r7, #23]
				break;
 8011b1e:	e026      	b.n	8011b6e <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011b20:	7afb      	ldrb	r3, [r7, #11]
 8011b22:	f003 0304 	and.w	r3, r3, #4
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d123      	bne.n	8011b72 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011b2a:	693b      	ldr	r3, [r7, #16]
 8011b2c:	799b      	ldrb	r3, [r3, #6]
 8011b2e:	f003 0310 	and.w	r3, r3, #16
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d102      	bne.n	8011b3c <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8011b36:	2305      	movs	r3, #5
 8011b38:	75fb      	strb	r3, [r7, #23]
 8011b3a:	e01b      	b.n	8011b74 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	695b      	ldr	r3, [r3, #20]
 8011b46:	68fa      	ldr	r2, [r7, #12]
 8011b48:	8992      	ldrh	r2, [r2, #12]
 8011b4a:	fbb3 f0f2 	udiv	r0, r3, r2
 8011b4e:	fb02 f200 	mul.w	r2, r2, r0
 8011b52:	1a9b      	subs	r3, r3, r2
 8011b54:	440b      	add	r3, r1
 8011b56:	4619      	mov	r1, r3
 8011b58:	68f8      	ldr	r0, [r7, #12]
 8011b5a:	f7ff fd70 	bl	801163e <ld_clust>
 8011b5e:	4602      	mov	r2, r0
 8011b60:	693b      	ldr	r3, [r7, #16]
 8011b62:	609a      	str	r2, [r3, #8]
 8011b64:	e7aa      	b.n	8011abc <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8011b66:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011b68:	e7a8      	b.n	8011abc <follow_path+0x68>
			if (res != FR_OK) break;
 8011b6a:	bf00      	nop
 8011b6c:	e002      	b.n	8011b74 <follow_path+0x120>
				break;
 8011b6e:	bf00      	nop
 8011b70:	e000      	b.n	8011b74 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011b72:	bf00      	nop
			}
		}
	}

	return res;
 8011b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b76:	4618      	mov	r0, r3
 8011b78:	3718      	adds	r7, #24
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}

08011b7e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011b7e:	b480      	push	{r7}
 8011b80:	b087      	sub	sp, #28
 8011b82:	af00      	add	r7, sp, #0
 8011b84:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011b86:	f04f 33ff 	mov.w	r3, #4294967295
 8011b8a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d031      	beq.n	8011bf8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	617b      	str	r3, [r7, #20]
 8011b9a:	e002      	b.n	8011ba2 <get_ldnumber+0x24>
 8011b9c:	697b      	ldr	r3, [r7, #20]
 8011b9e:	3301      	adds	r3, #1
 8011ba0:	617b      	str	r3, [r7, #20]
 8011ba2:	697b      	ldr	r3, [r7, #20]
 8011ba4:	781b      	ldrb	r3, [r3, #0]
 8011ba6:	2b20      	cmp	r3, #32
 8011ba8:	d903      	bls.n	8011bb2 <get_ldnumber+0x34>
 8011baa:	697b      	ldr	r3, [r7, #20]
 8011bac:	781b      	ldrb	r3, [r3, #0]
 8011bae:	2b3a      	cmp	r3, #58	; 0x3a
 8011bb0:	d1f4      	bne.n	8011b9c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	781b      	ldrb	r3, [r3, #0]
 8011bb6:	2b3a      	cmp	r3, #58	; 0x3a
 8011bb8:	d11c      	bne.n	8011bf4 <get_ldnumber+0x76>
			tp = *path;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	1c5a      	adds	r2, r3, #1
 8011bc4:	60fa      	str	r2, [r7, #12]
 8011bc6:	781b      	ldrb	r3, [r3, #0]
 8011bc8:	3b30      	subs	r3, #48	; 0x30
 8011bca:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	2b09      	cmp	r3, #9
 8011bd0:	d80e      	bhi.n	8011bf0 <get_ldnumber+0x72>
 8011bd2:	68fa      	ldr	r2, [r7, #12]
 8011bd4:	697b      	ldr	r3, [r7, #20]
 8011bd6:	429a      	cmp	r2, r3
 8011bd8:	d10a      	bne.n	8011bf0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011bda:	68bb      	ldr	r3, [r7, #8]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d107      	bne.n	8011bf0 <get_ldnumber+0x72>
					vol = (int)i;
 8011be0:	68bb      	ldr	r3, [r7, #8]
 8011be2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011be4:	697b      	ldr	r3, [r7, #20]
 8011be6:	3301      	adds	r3, #1
 8011be8:	617b      	str	r3, [r7, #20]
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	697a      	ldr	r2, [r7, #20]
 8011bee:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011bf0:	693b      	ldr	r3, [r7, #16]
 8011bf2:	e002      	b.n	8011bfa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011bf8:	693b      	ldr	r3, [r7, #16]
}
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	371c      	adds	r7, #28
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c04:	4770      	bx	lr
	...

08011c08 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b082      	sub	sp, #8
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
 8011c10:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	2200      	movs	r2, #0
 8011c16:	70da      	strb	r2, [r3, #3]
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8011c1e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011c20:	6839      	ldr	r1, [r7, #0]
 8011c22:	6878      	ldr	r0, [r7, #4]
 8011c24:	f7fe ff8c 	bl	8010b40 <move_window>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d001      	beq.n	8011c32 <check_fs+0x2a>
 8011c2e:	2304      	movs	r3, #4
 8011c30:	e038      	b.n	8011ca4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	3338      	adds	r3, #56	; 0x38
 8011c36:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	f7fe fcd0 	bl	80105e0 <ld_word>
 8011c40:	4603      	mov	r3, r0
 8011c42:	461a      	mov	r2, r3
 8011c44:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011c48:	429a      	cmp	r2, r3
 8011c4a:	d001      	beq.n	8011c50 <check_fs+0x48>
 8011c4c:	2303      	movs	r3, #3
 8011c4e:	e029      	b.n	8011ca4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011c56:	2be9      	cmp	r3, #233	; 0xe9
 8011c58:	d009      	beq.n	8011c6e <check_fs+0x66>
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011c60:	2beb      	cmp	r3, #235	; 0xeb
 8011c62:	d11e      	bne.n	8011ca2 <check_fs+0x9a>
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011c6a:	2b90      	cmp	r3, #144	; 0x90
 8011c6c:	d119      	bne.n	8011ca2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	3338      	adds	r3, #56	; 0x38
 8011c72:	3336      	adds	r3, #54	; 0x36
 8011c74:	4618      	mov	r0, r3
 8011c76:	f7fe fccb 	bl	8010610 <ld_dword>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011c80:	4a0a      	ldr	r2, [pc, #40]	; (8011cac <check_fs+0xa4>)
 8011c82:	4293      	cmp	r3, r2
 8011c84:	d101      	bne.n	8011c8a <check_fs+0x82>
 8011c86:	2300      	movs	r3, #0
 8011c88:	e00c      	b.n	8011ca4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	3338      	adds	r3, #56	; 0x38
 8011c8e:	3352      	adds	r3, #82	; 0x52
 8011c90:	4618      	mov	r0, r3
 8011c92:	f7fe fcbd 	bl	8010610 <ld_dword>
 8011c96:	4602      	mov	r2, r0
 8011c98:	4b05      	ldr	r3, [pc, #20]	; (8011cb0 <check_fs+0xa8>)
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	d101      	bne.n	8011ca2 <check_fs+0x9a>
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	e000      	b.n	8011ca4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011ca2:	2302      	movs	r3, #2
}
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	3708      	adds	r7, #8
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	bd80      	pop	{r7, pc}
 8011cac:	00544146 	.word	0x00544146
 8011cb0:	33544146 	.word	0x33544146

08011cb4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b096      	sub	sp, #88	; 0x58
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	60f8      	str	r0, [r7, #12]
 8011cbc:	60b9      	str	r1, [r7, #8]
 8011cbe:	4613      	mov	r3, r2
 8011cc0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011cc2:	68bb      	ldr	r3, [r7, #8]
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011cc8:	68f8      	ldr	r0, [r7, #12]
 8011cca:	f7ff ff58 	bl	8011b7e <get_ldnumber>
 8011cce:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	da01      	bge.n	8011cda <find_volume+0x26>
 8011cd6:	230b      	movs	r3, #11
 8011cd8:	e268      	b.n	80121ac <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011cda:	4ab0      	ldr	r2, [pc, #704]	; (8011f9c <find_volume+0x2e8>)
 8011cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ce2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d101      	bne.n	8011cee <find_volume+0x3a>
 8011cea:	230c      	movs	r3, #12
 8011cec:	e25e      	b.n	80121ac <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011cee:	68bb      	ldr	r3, [r7, #8]
 8011cf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011cf2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011cf4:	79fb      	ldrb	r3, [r7, #7]
 8011cf6:	f023 0301 	bic.w	r3, r3, #1
 8011cfa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cfe:	781b      	ldrb	r3, [r3, #0]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d01a      	beq.n	8011d3a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d06:	785b      	ldrb	r3, [r3, #1]
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f7fe fbcb 	bl	80104a4 <disk_status>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011d14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d18:	f003 0301 	and.w	r3, r3, #1
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d10c      	bne.n	8011d3a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011d20:	79fb      	ldrb	r3, [r7, #7]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d007      	beq.n	8011d36 <find_volume+0x82>
 8011d26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d2a:	f003 0304 	and.w	r3, r3, #4
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d001      	beq.n	8011d36 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011d32:	230a      	movs	r3, #10
 8011d34:	e23a      	b.n	80121ac <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8011d36:	2300      	movs	r3, #0
 8011d38:	e238      	b.n	80121ac <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d42:	b2da      	uxtb	r2, r3
 8011d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d46:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d4a:	785b      	ldrb	r3, [r3, #1]
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f7fe fbc3 	bl	80104d8 <disk_initialize>
 8011d52:	4603      	mov	r3, r0
 8011d54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011d58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d5c:	f003 0301 	and.w	r3, r3, #1
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d001      	beq.n	8011d68 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011d64:	2303      	movs	r3, #3
 8011d66:	e221      	b.n	80121ac <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011d68:	79fb      	ldrb	r3, [r7, #7]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d007      	beq.n	8011d7e <find_volume+0xca>
 8011d6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d72:	f003 0304 	and.w	r3, r3, #4
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d001      	beq.n	8011d7e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011d7a:	230a      	movs	r3, #10
 8011d7c:	e216      	b.n	80121ac <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8011d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d80:	7858      	ldrb	r0, [r3, #1]
 8011d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d84:	330c      	adds	r3, #12
 8011d86:	461a      	mov	r2, r3
 8011d88:	2102      	movs	r1, #2
 8011d8a:	f7fe fc0b 	bl	80105a4 <disk_ioctl>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d001      	beq.n	8011d98 <find_volume+0xe4>
 8011d94:	2301      	movs	r3, #1
 8011d96:	e209      	b.n	80121ac <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8011d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d9a:	899b      	ldrh	r3, [r3, #12]
 8011d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011da0:	d80d      	bhi.n	8011dbe <find_volume+0x10a>
 8011da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da4:	899b      	ldrh	r3, [r3, #12]
 8011da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011daa:	d308      	bcc.n	8011dbe <find_volume+0x10a>
 8011dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dae:	899b      	ldrh	r3, [r3, #12]
 8011db0:	461a      	mov	r2, r3
 8011db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011db4:	899b      	ldrh	r3, [r3, #12]
 8011db6:	3b01      	subs	r3, #1
 8011db8:	4013      	ands	r3, r2
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d001      	beq.n	8011dc2 <find_volume+0x10e>
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	e1f4      	b.n	80121ac <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011dc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011dc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011dca:	f7ff ff1d 	bl	8011c08 <check_fs>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011dd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011dd8:	2b02      	cmp	r3, #2
 8011dda:	d14b      	bne.n	8011e74 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011ddc:	2300      	movs	r3, #0
 8011dde:	643b      	str	r3, [r7, #64]	; 0x40
 8011de0:	e01f      	b.n	8011e22 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011de4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8011de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011dea:	011b      	lsls	r3, r3, #4
 8011dec:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011df0:	4413      	add	r3, r2
 8011df2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011df6:	3304      	adds	r3, #4
 8011df8:	781b      	ldrb	r3, [r3, #0]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d006      	beq.n	8011e0c <find_volume+0x158>
 8011dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e00:	3308      	adds	r3, #8
 8011e02:	4618      	mov	r0, r3
 8011e04:	f7fe fc04 	bl	8010610 <ld_dword>
 8011e08:	4602      	mov	r2, r0
 8011e0a:	e000      	b.n	8011e0e <find_volume+0x15a>
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e10:	009b      	lsls	r3, r3, #2
 8011e12:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011e16:	440b      	add	r3, r1
 8011e18:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e1e:	3301      	adds	r3, #1
 8011e20:	643b      	str	r3, [r7, #64]	; 0x40
 8011e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e24:	2b03      	cmp	r3, #3
 8011e26:	d9dc      	bls.n	8011de2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011e28:	2300      	movs	r3, #0
 8011e2a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d002      	beq.n	8011e38 <find_volume+0x184>
 8011e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e34:	3b01      	subs	r3, #1
 8011e36:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e3a:	009b      	lsls	r3, r3, #2
 8011e3c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011e40:	4413      	add	r3, r2
 8011e42:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011e46:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d005      	beq.n	8011e5a <find_volume+0x1a6>
 8011e4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011e50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011e52:	f7ff fed9 	bl	8011c08 <check_fs>
 8011e56:	4603      	mov	r3, r0
 8011e58:	e000      	b.n	8011e5c <find_volume+0x1a8>
 8011e5a:	2303      	movs	r3, #3
 8011e5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011e60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e64:	2b01      	cmp	r3, #1
 8011e66:	d905      	bls.n	8011e74 <find_volume+0x1c0>
 8011e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e6a:	3301      	adds	r3, #1
 8011e6c:	643b      	str	r3, [r7, #64]	; 0x40
 8011e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e70:	2b03      	cmp	r3, #3
 8011e72:	d9e1      	bls.n	8011e38 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011e74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e78:	2b04      	cmp	r3, #4
 8011e7a:	d101      	bne.n	8011e80 <find_volume+0x1cc>
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	e195      	b.n	80121ac <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011e80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e84:	2b01      	cmp	r3, #1
 8011e86:	d901      	bls.n	8011e8c <find_volume+0x1d8>
 8011e88:	230d      	movs	r3, #13
 8011e8a:	e18f      	b.n	80121ac <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e8e:	3338      	adds	r3, #56	; 0x38
 8011e90:	330b      	adds	r3, #11
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7fe fba4 	bl	80105e0 <ld_word>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	461a      	mov	r2, r3
 8011e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e9e:	899b      	ldrh	r3, [r3, #12]
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	d001      	beq.n	8011ea8 <find_volume+0x1f4>
 8011ea4:	230d      	movs	r3, #13
 8011ea6:	e181      	b.n	80121ac <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eaa:	3338      	adds	r3, #56	; 0x38
 8011eac:	3316      	adds	r3, #22
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f7fe fb96 	bl	80105e0 <ld_word>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d106      	bne.n	8011ecc <find_volume+0x218>
 8011ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ec0:	3338      	adds	r3, #56	; 0x38
 8011ec2:	3324      	adds	r3, #36	; 0x24
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	f7fe fba3 	bl	8010610 <ld_dword>
 8011eca:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ece:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011ed0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ed4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eda:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ede:	789b      	ldrb	r3, [r3, #2]
 8011ee0:	2b01      	cmp	r3, #1
 8011ee2:	d005      	beq.n	8011ef0 <find_volume+0x23c>
 8011ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ee6:	789b      	ldrb	r3, [r3, #2]
 8011ee8:	2b02      	cmp	r3, #2
 8011eea:	d001      	beq.n	8011ef0 <find_volume+0x23c>
 8011eec:	230d      	movs	r3, #13
 8011eee:	e15d      	b.n	80121ac <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ef2:	789b      	ldrb	r3, [r3, #2]
 8011ef4:	461a      	mov	r2, r3
 8011ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ef8:	fb02 f303 	mul.w	r3, r2, r3
 8011efc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011f04:	b29a      	uxth	r2, r3
 8011f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f08:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f0c:	895b      	ldrh	r3, [r3, #10]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d008      	beq.n	8011f24 <find_volume+0x270>
 8011f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f14:	895b      	ldrh	r3, [r3, #10]
 8011f16:	461a      	mov	r2, r3
 8011f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f1a:	895b      	ldrh	r3, [r3, #10]
 8011f1c:	3b01      	subs	r3, #1
 8011f1e:	4013      	ands	r3, r2
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d001      	beq.n	8011f28 <find_volume+0x274>
 8011f24:	230d      	movs	r3, #13
 8011f26:	e141      	b.n	80121ac <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f2a:	3338      	adds	r3, #56	; 0x38
 8011f2c:	3311      	adds	r3, #17
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f7fe fb56 	bl	80105e0 <ld_word>
 8011f34:	4603      	mov	r3, r0
 8011f36:	461a      	mov	r2, r3
 8011f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f3a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f3e:	891b      	ldrh	r3, [r3, #8]
 8011f40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f42:	8992      	ldrh	r2, [r2, #12]
 8011f44:	0952      	lsrs	r2, r2, #5
 8011f46:	b292      	uxth	r2, r2
 8011f48:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f4c:	fb02 f201 	mul.w	r2, r2, r1
 8011f50:	1a9b      	subs	r3, r3, r2
 8011f52:	b29b      	uxth	r3, r3
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d001      	beq.n	8011f5c <find_volume+0x2a8>
 8011f58:	230d      	movs	r3, #13
 8011f5a:	e127      	b.n	80121ac <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f5e:	3338      	adds	r3, #56	; 0x38
 8011f60:	3313      	adds	r3, #19
 8011f62:	4618      	mov	r0, r3
 8011f64:	f7fe fb3c 	bl	80105e0 <ld_word>
 8011f68:	4603      	mov	r3, r0
 8011f6a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011f6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d106      	bne.n	8011f80 <find_volume+0x2cc>
 8011f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f74:	3338      	adds	r3, #56	; 0x38
 8011f76:	3320      	adds	r3, #32
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f7fe fb49 	bl	8010610 <ld_dword>
 8011f7e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f82:	3338      	adds	r3, #56	; 0x38
 8011f84:	330e      	adds	r3, #14
 8011f86:	4618      	mov	r0, r3
 8011f88:	f7fe fb2a 	bl	80105e0 <ld_word>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011f90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d104      	bne.n	8011fa0 <find_volume+0x2ec>
 8011f96:	230d      	movs	r3, #13
 8011f98:	e108      	b.n	80121ac <find_volume+0x4f8>
 8011f9a:	bf00      	nop
 8011f9c:	2003c49c 	.word	0x2003c49c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011fa0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fa4:	4413      	add	r3, r2
 8011fa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011fa8:	8911      	ldrh	r1, [r2, #8]
 8011faa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011fac:	8992      	ldrh	r2, [r2, #12]
 8011fae:	0952      	lsrs	r2, r2, #5
 8011fb0:	b292      	uxth	r2, r2
 8011fb2:	fbb1 f2f2 	udiv	r2, r1, r2
 8011fb6:	b292      	uxth	r2, r2
 8011fb8:	4413      	add	r3, r2
 8011fba:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011fbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fc0:	429a      	cmp	r2, r3
 8011fc2:	d201      	bcs.n	8011fc8 <find_volume+0x314>
 8011fc4:	230d      	movs	r3, #13
 8011fc6:	e0f1      	b.n	80121ac <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011fc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fcc:	1ad3      	subs	r3, r2, r3
 8011fce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011fd0:	8952      	ldrh	r2, [r2, #10]
 8011fd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8011fd6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d101      	bne.n	8011fe2 <find_volume+0x32e>
 8011fde:	230d      	movs	r3, #13
 8011fe0:	e0e4      	b.n	80121ac <find_volume+0x4f8>
		fmt = FS_FAT32;
 8011fe2:	2303      	movs	r3, #3
 8011fe4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fea:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011fee:	4293      	cmp	r3, r2
 8011ff0:	d802      	bhi.n	8011ff8 <find_volume+0x344>
 8011ff2:	2302      	movs	r3, #2
 8011ff4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ffa:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011ffe:	4293      	cmp	r3, r2
 8012000:	d802      	bhi.n	8012008 <find_volume+0x354>
 8012002:	2301      	movs	r3, #1
 8012004:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801200a:	1c9a      	adds	r2, r3, #2
 801200c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801200e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8012010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012012:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012014:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012016:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801201a:	441a      	add	r2, r3
 801201c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801201e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8012020:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012024:	441a      	add	r2, r3
 8012026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012028:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801202a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801202e:	2b03      	cmp	r3, #3
 8012030:	d11e      	bne.n	8012070 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012034:	3338      	adds	r3, #56	; 0x38
 8012036:	332a      	adds	r3, #42	; 0x2a
 8012038:	4618      	mov	r0, r3
 801203a:	f7fe fad1 	bl	80105e0 <ld_word>
 801203e:	4603      	mov	r3, r0
 8012040:	2b00      	cmp	r3, #0
 8012042:	d001      	beq.n	8012048 <find_volume+0x394>
 8012044:	230d      	movs	r3, #13
 8012046:	e0b1      	b.n	80121ac <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801204a:	891b      	ldrh	r3, [r3, #8]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d001      	beq.n	8012054 <find_volume+0x3a0>
 8012050:	230d      	movs	r3, #13
 8012052:	e0ab      	b.n	80121ac <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012056:	3338      	adds	r3, #56	; 0x38
 8012058:	332c      	adds	r3, #44	; 0x2c
 801205a:	4618      	mov	r0, r3
 801205c:	f7fe fad8 	bl	8010610 <ld_dword>
 8012060:	4602      	mov	r2, r0
 8012062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012064:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012068:	69db      	ldr	r3, [r3, #28]
 801206a:	009b      	lsls	r3, r3, #2
 801206c:	647b      	str	r3, [r7, #68]	; 0x44
 801206e:	e01f      	b.n	80120b0 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012072:	891b      	ldrh	r3, [r3, #8]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d101      	bne.n	801207c <find_volume+0x3c8>
 8012078:	230d      	movs	r3, #13
 801207a:	e097      	b.n	80121ac <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801207c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801207e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012082:	441a      	add	r2, r3
 8012084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012086:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012088:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801208c:	2b02      	cmp	r3, #2
 801208e:	d103      	bne.n	8012098 <find_volume+0x3e4>
 8012090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012092:	69db      	ldr	r3, [r3, #28]
 8012094:	005b      	lsls	r3, r3, #1
 8012096:	e00a      	b.n	80120ae <find_volume+0x3fa>
 8012098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801209a:	69da      	ldr	r2, [r3, #28]
 801209c:	4613      	mov	r3, r2
 801209e:	005b      	lsls	r3, r3, #1
 80120a0:	4413      	add	r3, r2
 80120a2:	085a      	lsrs	r2, r3, #1
 80120a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120a6:	69db      	ldr	r3, [r3, #28]
 80120a8:	f003 0301 	and.w	r3, r3, #1
 80120ac:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80120ae:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80120b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120b2:	6a1a      	ldr	r2, [r3, #32]
 80120b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120b6:	899b      	ldrh	r3, [r3, #12]
 80120b8:	4619      	mov	r1, r3
 80120ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120bc:	440b      	add	r3, r1
 80120be:	3b01      	subs	r3, #1
 80120c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80120c2:	8989      	ldrh	r1, [r1, #12]
 80120c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80120c8:	429a      	cmp	r2, r3
 80120ca:	d201      	bcs.n	80120d0 <find_volume+0x41c>
 80120cc:	230d      	movs	r3, #13
 80120ce:	e06d      	b.n	80121ac <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80120d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120d2:	f04f 32ff 	mov.w	r2, #4294967295
 80120d6:	615a      	str	r2, [r3, #20]
 80120d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120da:	695a      	ldr	r2, [r3, #20]
 80120dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120de:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80120e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120e2:	2280      	movs	r2, #128	; 0x80
 80120e4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80120e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80120ea:	2b03      	cmp	r3, #3
 80120ec:	d149      	bne.n	8012182 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80120ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120f0:	3338      	adds	r3, #56	; 0x38
 80120f2:	3330      	adds	r3, #48	; 0x30
 80120f4:	4618      	mov	r0, r3
 80120f6:	f7fe fa73 	bl	80105e0 <ld_word>
 80120fa:	4603      	mov	r3, r0
 80120fc:	2b01      	cmp	r3, #1
 80120fe:	d140      	bne.n	8012182 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012102:	3301      	adds	r3, #1
 8012104:	4619      	mov	r1, r3
 8012106:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012108:	f7fe fd1a 	bl	8010b40 <move_window>
 801210c:	4603      	mov	r3, r0
 801210e:	2b00      	cmp	r3, #0
 8012110:	d137      	bne.n	8012182 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012114:	2200      	movs	r2, #0
 8012116:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801211a:	3338      	adds	r3, #56	; 0x38
 801211c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012120:	4618      	mov	r0, r3
 8012122:	f7fe fa5d 	bl	80105e0 <ld_word>
 8012126:	4603      	mov	r3, r0
 8012128:	461a      	mov	r2, r3
 801212a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801212e:	429a      	cmp	r2, r3
 8012130:	d127      	bne.n	8012182 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012134:	3338      	adds	r3, #56	; 0x38
 8012136:	4618      	mov	r0, r3
 8012138:	f7fe fa6a 	bl	8010610 <ld_dword>
 801213c:	4602      	mov	r2, r0
 801213e:	4b1d      	ldr	r3, [pc, #116]	; (80121b4 <find_volume+0x500>)
 8012140:	429a      	cmp	r2, r3
 8012142:	d11e      	bne.n	8012182 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012146:	3338      	adds	r3, #56	; 0x38
 8012148:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801214c:	4618      	mov	r0, r3
 801214e:	f7fe fa5f 	bl	8010610 <ld_dword>
 8012152:	4602      	mov	r2, r0
 8012154:	4b18      	ldr	r3, [pc, #96]	; (80121b8 <find_volume+0x504>)
 8012156:	429a      	cmp	r2, r3
 8012158:	d113      	bne.n	8012182 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801215a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801215c:	3338      	adds	r3, #56	; 0x38
 801215e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012162:	4618      	mov	r0, r3
 8012164:	f7fe fa54 	bl	8010610 <ld_dword>
 8012168:	4602      	mov	r2, r0
 801216a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801216c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801216e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012170:	3338      	adds	r3, #56	; 0x38
 8012172:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012176:	4618      	mov	r0, r3
 8012178:	f7fe fa4a 	bl	8010610 <ld_dword>
 801217c:	4602      	mov	r2, r0
 801217e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012180:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012184:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012188:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801218a:	4b0c      	ldr	r3, [pc, #48]	; (80121bc <find_volume+0x508>)
 801218c:	881b      	ldrh	r3, [r3, #0]
 801218e:	3301      	adds	r3, #1
 8012190:	b29a      	uxth	r2, r3
 8012192:	4b0a      	ldr	r3, [pc, #40]	; (80121bc <find_volume+0x508>)
 8012194:	801a      	strh	r2, [r3, #0]
 8012196:	4b09      	ldr	r3, [pc, #36]	; (80121bc <find_volume+0x508>)
 8012198:	881a      	ldrh	r2, [r3, #0]
 801219a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801219c:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 801219e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121a0:	2200      	movs	r2, #0
 80121a2:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80121a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80121a6:	f7fe fc63 	bl	8010a70 <clear_lock>
#endif
	return FR_OK;
 80121aa:	2300      	movs	r3, #0
}
 80121ac:	4618      	mov	r0, r3
 80121ae:	3758      	adds	r7, #88	; 0x58
 80121b0:	46bd      	mov	sp, r7
 80121b2:	bd80      	pop	{r7, pc}
 80121b4:	41615252 	.word	0x41615252
 80121b8:	61417272 	.word	0x61417272
 80121bc:	2003c4a0 	.word	0x2003c4a0

080121c0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b084      	sub	sp, #16
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
 80121c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80121ca:	2309      	movs	r3, #9
 80121cc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d01c      	beq.n	801220e <validate+0x4e>
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d018      	beq.n	801220e <validate+0x4e>
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	781b      	ldrb	r3, [r3, #0]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d013      	beq.n	801220e <validate+0x4e>
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	889a      	ldrh	r2, [r3, #4]
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	88db      	ldrh	r3, [r3, #6]
 80121f0:	429a      	cmp	r2, r3
 80121f2:	d10c      	bne.n	801220e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	785b      	ldrb	r3, [r3, #1]
 80121fa:	4618      	mov	r0, r3
 80121fc:	f7fe f952 	bl	80104a4 <disk_status>
 8012200:	4603      	mov	r3, r0
 8012202:	f003 0301 	and.w	r3, r3, #1
 8012206:	2b00      	cmp	r3, #0
 8012208:	d101      	bne.n	801220e <validate+0x4e>
			res = FR_OK;
 801220a:	2300      	movs	r3, #0
 801220c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801220e:	7bfb      	ldrb	r3, [r7, #15]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d102      	bne.n	801221a <validate+0x5a>
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	e000      	b.n	801221c <validate+0x5c>
 801221a:	2300      	movs	r3, #0
 801221c:	683a      	ldr	r2, [r7, #0]
 801221e:	6013      	str	r3, [r2, #0]
	return res;
 8012220:	7bfb      	ldrb	r3, [r7, #15]
}
 8012222:	4618      	mov	r0, r3
 8012224:	3710      	adds	r7, #16
 8012226:	46bd      	mov	sp, r7
 8012228:	bd80      	pop	{r7, pc}
	...

0801222c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b088      	sub	sp, #32
 8012230:	af00      	add	r7, sp, #0
 8012232:	60f8      	str	r0, [r7, #12]
 8012234:	60b9      	str	r1, [r7, #8]
 8012236:	4613      	mov	r3, r2
 8012238:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801223e:	f107 0310 	add.w	r3, r7, #16
 8012242:	4618      	mov	r0, r3
 8012244:	f7ff fc9b 	bl	8011b7e <get_ldnumber>
 8012248:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801224a:	69fb      	ldr	r3, [r7, #28]
 801224c:	2b00      	cmp	r3, #0
 801224e:	da01      	bge.n	8012254 <f_mount+0x28>
 8012250:	230b      	movs	r3, #11
 8012252:	e02b      	b.n	80122ac <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012254:	4a17      	ldr	r2, [pc, #92]	; (80122b4 <f_mount+0x88>)
 8012256:	69fb      	ldr	r3, [r7, #28]
 8012258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801225c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801225e:	69bb      	ldr	r3, [r7, #24]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d005      	beq.n	8012270 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012264:	69b8      	ldr	r0, [r7, #24]
 8012266:	f7fe fc03 	bl	8010a70 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801226a:	69bb      	ldr	r3, [r7, #24]
 801226c:	2200      	movs	r2, #0
 801226e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d002      	beq.n	801227c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	2200      	movs	r2, #0
 801227a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801227c:	68fa      	ldr	r2, [r7, #12]
 801227e:	490d      	ldr	r1, [pc, #52]	; (80122b4 <f_mount+0x88>)
 8012280:	69fb      	ldr	r3, [r7, #28]
 8012282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d002      	beq.n	8012292 <f_mount+0x66>
 801228c:	79fb      	ldrb	r3, [r7, #7]
 801228e:	2b01      	cmp	r3, #1
 8012290:	d001      	beq.n	8012296 <f_mount+0x6a>
 8012292:	2300      	movs	r3, #0
 8012294:	e00a      	b.n	80122ac <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012296:	f107 010c 	add.w	r1, r7, #12
 801229a:	f107 0308 	add.w	r3, r7, #8
 801229e:	2200      	movs	r2, #0
 80122a0:	4618      	mov	r0, r3
 80122a2:	f7ff fd07 	bl	8011cb4 <find_volume>
 80122a6:	4603      	mov	r3, r0
 80122a8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80122aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	3720      	adds	r7, #32
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}
 80122b4:	2003c49c 	.word	0x2003c49c

080122b8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b098      	sub	sp, #96	; 0x60
 80122bc:	af00      	add	r7, sp, #0
 80122be:	60f8      	str	r0, [r7, #12]
 80122c0:	60b9      	str	r1, [r7, #8]
 80122c2:	4613      	mov	r3, r2
 80122c4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d101      	bne.n	80122d0 <f_open+0x18>
 80122cc:	2309      	movs	r3, #9
 80122ce:	e1ba      	b.n	8012646 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80122d0:	79fb      	ldrb	r3, [r7, #7]
 80122d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80122d6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80122d8:	79fa      	ldrb	r2, [r7, #7]
 80122da:	f107 0110 	add.w	r1, r7, #16
 80122de:	f107 0308 	add.w	r3, r7, #8
 80122e2:	4618      	mov	r0, r3
 80122e4:	f7ff fce6 	bl	8011cb4 <find_volume>
 80122e8:	4603      	mov	r3, r0
 80122ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80122ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	f040 819e 	bne.w	8012634 <f_open+0x37c>
		dj.obj.fs = fs;
 80122f8:	693b      	ldr	r3, [r7, #16]
 80122fa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80122fc:	68ba      	ldr	r2, [r7, #8]
 80122fe:	f107 0314 	add.w	r3, r7, #20
 8012302:	4611      	mov	r1, r2
 8012304:	4618      	mov	r0, r3
 8012306:	f7ff fba5 	bl	8011a54 <follow_path>
 801230a:	4603      	mov	r3, r0
 801230c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012310:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012314:	2b00      	cmp	r3, #0
 8012316:	d11a      	bne.n	801234e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012318:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801231c:	b25b      	sxtb	r3, r3
 801231e:	2b00      	cmp	r3, #0
 8012320:	da03      	bge.n	801232a <f_open+0x72>
				res = FR_INVALID_NAME;
 8012322:	2306      	movs	r3, #6
 8012324:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012328:	e011      	b.n	801234e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801232a:	79fb      	ldrb	r3, [r7, #7]
 801232c:	f023 0301 	bic.w	r3, r3, #1
 8012330:	2b00      	cmp	r3, #0
 8012332:	bf14      	ite	ne
 8012334:	2301      	movne	r3, #1
 8012336:	2300      	moveq	r3, #0
 8012338:	b2db      	uxtb	r3, r3
 801233a:	461a      	mov	r2, r3
 801233c:	f107 0314 	add.w	r3, r7, #20
 8012340:	4611      	mov	r1, r2
 8012342:	4618      	mov	r0, r3
 8012344:	f7fe fa4c 	bl	80107e0 <chk_lock>
 8012348:	4603      	mov	r3, r0
 801234a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801234e:	79fb      	ldrb	r3, [r7, #7]
 8012350:	f003 031c 	and.w	r3, r3, #28
 8012354:	2b00      	cmp	r3, #0
 8012356:	d07e      	beq.n	8012456 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8012358:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801235c:	2b00      	cmp	r3, #0
 801235e:	d017      	beq.n	8012390 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012360:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012364:	2b04      	cmp	r3, #4
 8012366:	d10e      	bne.n	8012386 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012368:	f7fe fa96 	bl	8010898 <enq_lock>
 801236c:	4603      	mov	r3, r0
 801236e:	2b00      	cmp	r3, #0
 8012370:	d006      	beq.n	8012380 <f_open+0xc8>
 8012372:	f107 0314 	add.w	r3, r7, #20
 8012376:	4618      	mov	r0, r3
 8012378:	f7ff fa52 	bl	8011820 <dir_register>
 801237c:	4603      	mov	r3, r0
 801237e:	e000      	b.n	8012382 <f_open+0xca>
 8012380:	2312      	movs	r3, #18
 8012382:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012386:	79fb      	ldrb	r3, [r7, #7]
 8012388:	f043 0308 	orr.w	r3, r3, #8
 801238c:	71fb      	strb	r3, [r7, #7]
 801238e:	e010      	b.n	80123b2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012390:	7ebb      	ldrb	r3, [r7, #26]
 8012392:	f003 0311 	and.w	r3, r3, #17
 8012396:	2b00      	cmp	r3, #0
 8012398:	d003      	beq.n	80123a2 <f_open+0xea>
					res = FR_DENIED;
 801239a:	2307      	movs	r3, #7
 801239c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80123a0:	e007      	b.n	80123b2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80123a2:	79fb      	ldrb	r3, [r7, #7]
 80123a4:	f003 0304 	and.w	r3, r3, #4
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d002      	beq.n	80123b2 <f_open+0xfa>
 80123ac:	2308      	movs	r3, #8
 80123ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80123b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d167      	bne.n	801248a <f_open+0x1d2>
 80123ba:	79fb      	ldrb	r3, [r7, #7]
 80123bc:	f003 0308 	and.w	r3, r3, #8
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d062      	beq.n	801248a <f_open+0x1d2>
				dw = GET_FATTIME();
 80123c4:	4ba2      	ldr	r3, [pc, #648]	; (8012650 <f_open+0x398>)
 80123c6:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80123c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123ca:	330e      	adds	r3, #14
 80123cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80123ce:	4618      	mov	r0, r3
 80123d0:	f7fe f95c 	bl	801068c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80123d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123d6:	3316      	adds	r3, #22
 80123d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80123da:	4618      	mov	r0, r3
 80123dc:	f7fe f956 	bl	801068c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80123e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123e2:	330b      	adds	r3, #11
 80123e4:	2220      	movs	r2, #32
 80123e6:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80123e8:	693b      	ldr	r3, [r7, #16]
 80123ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80123ec:	4611      	mov	r1, r2
 80123ee:	4618      	mov	r0, r3
 80123f0:	f7ff f925 	bl	801163e <ld_clust>
 80123f4:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80123f6:	693b      	ldr	r3, [r7, #16]
 80123f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80123fa:	2200      	movs	r2, #0
 80123fc:	4618      	mov	r0, r3
 80123fe:	f7ff f93d 	bl	801167c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012404:	331c      	adds	r3, #28
 8012406:	2100      	movs	r1, #0
 8012408:	4618      	mov	r0, r3
 801240a:	f7fe f93f 	bl	801068c <st_dword>
					fs->wflag = 1;
 801240e:	693b      	ldr	r3, [r7, #16]
 8012410:	2201      	movs	r2, #1
 8012412:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012416:	2b00      	cmp	r3, #0
 8012418:	d037      	beq.n	801248a <f_open+0x1d2>
						dw = fs->winsect;
 801241a:	693b      	ldr	r3, [r7, #16]
 801241c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801241e:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012420:	f107 0314 	add.w	r3, r7, #20
 8012424:	2200      	movs	r2, #0
 8012426:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012428:	4618      	mov	r0, r3
 801242a:	f7fe fe2d 	bl	8011088 <remove_chain>
 801242e:	4603      	mov	r3, r0
 8012430:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8012434:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012438:	2b00      	cmp	r3, #0
 801243a:	d126      	bne.n	801248a <f_open+0x1d2>
							res = move_window(fs, dw);
 801243c:	693b      	ldr	r3, [r7, #16]
 801243e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012440:	4618      	mov	r0, r3
 8012442:	f7fe fb7d 	bl	8010b40 <move_window>
 8012446:	4603      	mov	r3, r0
 8012448:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801244c:	693b      	ldr	r3, [r7, #16]
 801244e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012450:	3a01      	subs	r2, #1
 8012452:	611a      	str	r2, [r3, #16]
 8012454:	e019      	b.n	801248a <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012456:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801245a:	2b00      	cmp	r3, #0
 801245c:	d115      	bne.n	801248a <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801245e:	7ebb      	ldrb	r3, [r7, #26]
 8012460:	f003 0310 	and.w	r3, r3, #16
 8012464:	2b00      	cmp	r3, #0
 8012466:	d003      	beq.n	8012470 <f_open+0x1b8>
					res = FR_NO_FILE;
 8012468:	2304      	movs	r3, #4
 801246a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801246e:	e00c      	b.n	801248a <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012470:	79fb      	ldrb	r3, [r7, #7]
 8012472:	f003 0302 	and.w	r3, r3, #2
 8012476:	2b00      	cmp	r3, #0
 8012478:	d007      	beq.n	801248a <f_open+0x1d2>
 801247a:	7ebb      	ldrb	r3, [r7, #26]
 801247c:	f003 0301 	and.w	r3, r3, #1
 8012480:	2b00      	cmp	r3, #0
 8012482:	d002      	beq.n	801248a <f_open+0x1d2>
						res = FR_DENIED;
 8012484:	2307      	movs	r3, #7
 8012486:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801248a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801248e:	2b00      	cmp	r3, #0
 8012490:	d128      	bne.n	80124e4 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012492:	79fb      	ldrb	r3, [r7, #7]
 8012494:	f003 0308 	and.w	r3, r3, #8
 8012498:	2b00      	cmp	r3, #0
 801249a:	d003      	beq.n	80124a4 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 801249c:	79fb      	ldrb	r3, [r7, #7]
 801249e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124a2:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80124a4:	693b      	ldr	r3, [r7, #16]
 80124a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80124ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80124b2:	79fb      	ldrb	r3, [r7, #7]
 80124b4:	f023 0301 	bic.w	r3, r3, #1
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	bf14      	ite	ne
 80124bc:	2301      	movne	r3, #1
 80124be:	2300      	moveq	r3, #0
 80124c0:	b2db      	uxtb	r3, r3
 80124c2:	461a      	mov	r2, r3
 80124c4:	f107 0314 	add.w	r3, r7, #20
 80124c8:	4611      	mov	r1, r2
 80124ca:	4618      	mov	r0, r3
 80124cc:	f7fe fa06 	bl	80108dc <inc_lock>
 80124d0:	4602      	mov	r2, r0
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	691b      	ldr	r3, [r3, #16]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d102      	bne.n	80124e4 <f_open+0x22c>
 80124de:	2302      	movs	r3, #2
 80124e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80124e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	f040 80a3 	bne.w	8012634 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80124ee:	693b      	ldr	r3, [r7, #16]
 80124f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80124f2:	4611      	mov	r1, r2
 80124f4:	4618      	mov	r0, r3
 80124f6:	f7ff f8a2 	bl	801163e <ld_clust>
 80124fa:	4602      	mov	r2, r0
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012502:	331c      	adds	r3, #28
 8012504:	4618      	mov	r0, r3
 8012506:	f7fe f883 	bl	8010610 <ld_dword>
 801250a:	4602      	mov	r2, r0
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	2200      	movs	r2, #0
 8012514:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012516:	693a      	ldr	r2, [r7, #16]
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801251c:	693b      	ldr	r3, [r7, #16]
 801251e:	88da      	ldrh	r2, [r3, #6]
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	79fa      	ldrb	r2, [r7, #7]
 8012528:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	2200      	movs	r2, #0
 801252e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	2200      	movs	r2, #0
 8012534:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	2200      	movs	r2, #0
 801253a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	3330      	adds	r3, #48	; 0x30
 8012540:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012544:	2100      	movs	r1, #0
 8012546:	4618      	mov	r0, r3
 8012548:	f7fe f8ed 	bl	8010726 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801254c:	79fb      	ldrb	r3, [r7, #7]
 801254e:	f003 0320 	and.w	r3, r3, #32
 8012552:	2b00      	cmp	r3, #0
 8012554:	d06e      	beq.n	8012634 <f_open+0x37c>
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	68db      	ldr	r3, [r3, #12]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d06a      	beq.n	8012634 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	68da      	ldr	r2, [r3, #12]
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012566:	693b      	ldr	r3, [r7, #16]
 8012568:	895b      	ldrh	r3, [r3, #10]
 801256a:	461a      	mov	r2, r3
 801256c:	693b      	ldr	r3, [r7, #16]
 801256e:	899b      	ldrh	r3, [r3, #12]
 8012570:	fb03 f302 	mul.w	r3, r3, r2
 8012574:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	689b      	ldr	r3, [r3, #8]
 801257a:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	68db      	ldr	r3, [r3, #12]
 8012580:	657b      	str	r3, [r7, #84]	; 0x54
 8012582:	e016      	b.n	80125b2 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012588:	4618      	mov	r0, r3
 801258a:	f7fe fb96 	bl	8010cba <get_fat>
 801258e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012590:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012592:	2b01      	cmp	r3, #1
 8012594:	d802      	bhi.n	801259c <f_open+0x2e4>
 8012596:	2302      	movs	r3, #2
 8012598:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801259c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801259e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125a2:	d102      	bne.n	80125aa <f_open+0x2f2>
 80125a4:	2301      	movs	r3, #1
 80125a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80125aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80125ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80125ae:	1ad3      	subs	r3, r2, r3
 80125b0:	657b      	str	r3, [r7, #84]	; 0x54
 80125b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d103      	bne.n	80125c2 <f_open+0x30a>
 80125ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80125bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80125be:	429a      	cmp	r2, r3
 80125c0:	d8e0      	bhi.n	8012584 <f_open+0x2cc>
				}
				fp->clust = clst;
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80125c6:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80125c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d131      	bne.n	8012634 <f_open+0x37c>
 80125d0:	693b      	ldr	r3, [r7, #16]
 80125d2:	899b      	ldrh	r3, [r3, #12]
 80125d4:	461a      	mov	r2, r3
 80125d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80125d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80125dc:	fb02 f201 	mul.w	r2, r2, r1
 80125e0:	1a9b      	subs	r3, r3, r2
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d026      	beq.n	8012634 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80125e6:	693b      	ldr	r3, [r7, #16]
 80125e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80125ea:	4618      	mov	r0, r3
 80125ec:	f7fe fb46 	bl	8010c7c <clust2sect>
 80125f0:	6478      	str	r0, [r7, #68]	; 0x44
 80125f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d103      	bne.n	8012600 <f_open+0x348>
						res = FR_INT_ERR;
 80125f8:	2302      	movs	r3, #2
 80125fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80125fe:	e019      	b.n	8012634 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012600:	693b      	ldr	r3, [r7, #16]
 8012602:	899b      	ldrh	r3, [r3, #12]
 8012604:	461a      	mov	r2, r3
 8012606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012608:	fbb3 f2f2 	udiv	r2, r3, r2
 801260c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801260e:	441a      	add	r2, r3
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012614:	693b      	ldr	r3, [r7, #16]
 8012616:	7858      	ldrb	r0, [r3, #1]
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	6a1a      	ldr	r2, [r3, #32]
 8012622:	2301      	movs	r3, #1
 8012624:	f7fd ff7e 	bl	8010524 <disk_read>
 8012628:	4603      	mov	r3, r0
 801262a:	2b00      	cmp	r3, #0
 801262c:	d002      	beq.n	8012634 <f_open+0x37c>
 801262e:	2301      	movs	r3, #1
 8012630:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012634:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012638:	2b00      	cmp	r3, #0
 801263a:	d002      	beq.n	8012642 <f_open+0x38a>
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	2200      	movs	r2, #0
 8012640:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012642:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8012646:	4618      	mov	r0, r3
 8012648:	3760      	adds	r7, #96	; 0x60
 801264a:	46bd      	mov	sp, r7
 801264c:	bd80      	pop	{r7, pc}
 801264e:	bf00      	nop
 8012650:	274a0000 	.word	0x274a0000

08012654 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b08e      	sub	sp, #56	; 0x38
 8012658:	af00      	add	r7, sp, #0
 801265a:	60f8      	str	r0, [r7, #12]
 801265c:	60b9      	str	r1, [r7, #8]
 801265e:	607a      	str	r2, [r7, #4]
 8012660:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012662:	68bb      	ldr	r3, [r7, #8]
 8012664:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	2200      	movs	r2, #0
 801266a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	f107 0214 	add.w	r2, r7, #20
 8012672:	4611      	mov	r1, r2
 8012674:	4618      	mov	r0, r3
 8012676:	f7ff fda3 	bl	80121c0 <validate>
 801267a:	4603      	mov	r3, r0
 801267c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012680:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012684:	2b00      	cmp	r3, #0
 8012686:	d107      	bne.n	8012698 <f_read+0x44>
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	7d5b      	ldrb	r3, [r3, #21]
 801268c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012690:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012694:	2b00      	cmp	r3, #0
 8012696:	d002      	beq.n	801269e <f_read+0x4a>
 8012698:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801269c:	e135      	b.n	801290a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	7d1b      	ldrb	r3, [r3, #20]
 80126a2:	f003 0301 	and.w	r3, r3, #1
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d101      	bne.n	80126ae <f_read+0x5a>
 80126aa:	2307      	movs	r3, #7
 80126ac:	e12d      	b.n	801290a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	68da      	ldr	r2, [r3, #12]
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	699b      	ldr	r3, [r3, #24]
 80126b6:	1ad3      	subs	r3, r2, r3
 80126b8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80126ba:	687a      	ldr	r2, [r7, #4]
 80126bc:	6a3b      	ldr	r3, [r7, #32]
 80126be:	429a      	cmp	r2, r3
 80126c0:	f240 811e 	bls.w	8012900 <f_read+0x2ac>
 80126c4:	6a3b      	ldr	r3, [r7, #32]
 80126c6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80126c8:	e11a      	b.n	8012900 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	699b      	ldr	r3, [r3, #24]
 80126ce:	697a      	ldr	r2, [r7, #20]
 80126d0:	8992      	ldrh	r2, [r2, #12]
 80126d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80126d6:	fb02 f201 	mul.w	r2, r2, r1
 80126da:	1a9b      	subs	r3, r3, r2
 80126dc:	2b00      	cmp	r3, #0
 80126de:	f040 80d5 	bne.w	801288c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	699b      	ldr	r3, [r3, #24]
 80126e6:	697a      	ldr	r2, [r7, #20]
 80126e8:	8992      	ldrh	r2, [r2, #12]
 80126ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80126ee:	697a      	ldr	r2, [r7, #20]
 80126f0:	8952      	ldrh	r2, [r2, #10]
 80126f2:	3a01      	subs	r2, #1
 80126f4:	4013      	ands	r3, r2
 80126f6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80126f8:	69fb      	ldr	r3, [r7, #28]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d12f      	bne.n	801275e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	699b      	ldr	r3, [r3, #24]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d103      	bne.n	801270e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	689b      	ldr	r3, [r3, #8]
 801270a:	633b      	str	r3, [r7, #48]	; 0x30
 801270c:	e013      	b.n	8012736 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012712:	2b00      	cmp	r3, #0
 8012714:	d007      	beq.n	8012726 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	699b      	ldr	r3, [r3, #24]
 801271a:	4619      	mov	r1, r3
 801271c:	68f8      	ldr	r0, [r7, #12]
 801271e:	f7fe fdb0 	bl	8011282 <clmt_clust>
 8012722:	6338      	str	r0, [r7, #48]	; 0x30
 8012724:	e007      	b.n	8012736 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012726:	68fa      	ldr	r2, [r7, #12]
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	69db      	ldr	r3, [r3, #28]
 801272c:	4619      	mov	r1, r3
 801272e:	4610      	mov	r0, r2
 8012730:	f7fe fac3 	bl	8010cba <get_fat>
 8012734:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8012736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012738:	2b01      	cmp	r3, #1
 801273a:	d804      	bhi.n	8012746 <f_read+0xf2>
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	2202      	movs	r2, #2
 8012740:	755a      	strb	r2, [r3, #21]
 8012742:	2302      	movs	r3, #2
 8012744:	e0e1      	b.n	801290a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012748:	f1b3 3fff 	cmp.w	r3, #4294967295
 801274c:	d104      	bne.n	8012758 <f_read+0x104>
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	2201      	movs	r2, #1
 8012752:	755a      	strb	r2, [r3, #21]
 8012754:	2301      	movs	r3, #1
 8012756:	e0d8      	b.n	801290a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801275c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801275e:	697a      	ldr	r2, [r7, #20]
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	69db      	ldr	r3, [r3, #28]
 8012764:	4619      	mov	r1, r3
 8012766:	4610      	mov	r0, r2
 8012768:	f7fe fa88 	bl	8010c7c <clust2sect>
 801276c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801276e:	69bb      	ldr	r3, [r7, #24]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d104      	bne.n	801277e <f_read+0x12a>
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	2202      	movs	r2, #2
 8012778:	755a      	strb	r2, [r3, #21]
 801277a:	2302      	movs	r3, #2
 801277c:	e0c5      	b.n	801290a <f_read+0x2b6>
			sect += csect;
 801277e:	69ba      	ldr	r2, [r7, #24]
 8012780:	69fb      	ldr	r3, [r7, #28]
 8012782:	4413      	add	r3, r2
 8012784:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012786:	697b      	ldr	r3, [r7, #20]
 8012788:	899b      	ldrh	r3, [r3, #12]
 801278a:	461a      	mov	r2, r3
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012792:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012796:	2b00      	cmp	r3, #0
 8012798:	d041      	beq.n	801281e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801279a:	69fa      	ldr	r2, [r7, #28]
 801279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801279e:	4413      	add	r3, r2
 80127a0:	697a      	ldr	r2, [r7, #20]
 80127a2:	8952      	ldrh	r2, [r2, #10]
 80127a4:	4293      	cmp	r3, r2
 80127a6:	d905      	bls.n	80127b4 <f_read+0x160>
					cc = fs->csize - csect;
 80127a8:	697b      	ldr	r3, [r7, #20]
 80127aa:	895b      	ldrh	r3, [r3, #10]
 80127ac:	461a      	mov	r2, r3
 80127ae:	69fb      	ldr	r3, [r7, #28]
 80127b0:	1ad3      	subs	r3, r2, r3
 80127b2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80127b4:	697b      	ldr	r3, [r7, #20]
 80127b6:	7858      	ldrb	r0, [r3, #1]
 80127b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ba:	69ba      	ldr	r2, [r7, #24]
 80127bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80127be:	f7fd feb1 	bl	8010524 <disk_read>
 80127c2:	4603      	mov	r3, r0
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d004      	beq.n	80127d2 <f_read+0x17e>
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	2201      	movs	r2, #1
 80127cc:	755a      	strb	r2, [r3, #21]
 80127ce:	2301      	movs	r3, #1
 80127d0:	e09b      	b.n	801290a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	7d1b      	ldrb	r3, [r3, #20]
 80127d6:	b25b      	sxtb	r3, r3
 80127d8:	2b00      	cmp	r3, #0
 80127da:	da18      	bge.n	801280e <f_read+0x1ba>
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	6a1a      	ldr	r2, [r3, #32]
 80127e0:	69bb      	ldr	r3, [r7, #24]
 80127e2:	1ad3      	subs	r3, r2, r3
 80127e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80127e6:	429a      	cmp	r2, r3
 80127e8:	d911      	bls.n	801280e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	6a1a      	ldr	r2, [r3, #32]
 80127ee:	69bb      	ldr	r3, [r7, #24]
 80127f0:	1ad3      	subs	r3, r2, r3
 80127f2:	697a      	ldr	r2, [r7, #20]
 80127f4:	8992      	ldrh	r2, [r2, #12]
 80127f6:	fb02 f303 	mul.w	r3, r2, r3
 80127fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127fc:	18d0      	adds	r0, r2, r3
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012804:	697b      	ldr	r3, [r7, #20]
 8012806:	899b      	ldrh	r3, [r3, #12]
 8012808:	461a      	mov	r2, r3
 801280a:	f7fd ff6b 	bl	80106e4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801280e:	697b      	ldr	r3, [r7, #20]
 8012810:	899b      	ldrh	r3, [r3, #12]
 8012812:	461a      	mov	r2, r3
 8012814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012816:	fb02 f303 	mul.w	r3, r2, r3
 801281a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801281c:	e05c      	b.n	80128d8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	6a1b      	ldr	r3, [r3, #32]
 8012822:	69ba      	ldr	r2, [r7, #24]
 8012824:	429a      	cmp	r2, r3
 8012826:	d02e      	beq.n	8012886 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	7d1b      	ldrb	r3, [r3, #20]
 801282c:	b25b      	sxtb	r3, r3
 801282e:	2b00      	cmp	r3, #0
 8012830:	da18      	bge.n	8012864 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012832:	697b      	ldr	r3, [r7, #20]
 8012834:	7858      	ldrb	r0, [r3, #1]
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	6a1a      	ldr	r2, [r3, #32]
 8012840:	2301      	movs	r3, #1
 8012842:	f7fd fe8f 	bl	8010564 <disk_write>
 8012846:	4603      	mov	r3, r0
 8012848:	2b00      	cmp	r3, #0
 801284a:	d004      	beq.n	8012856 <f_read+0x202>
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	2201      	movs	r2, #1
 8012850:	755a      	strb	r2, [r3, #21]
 8012852:	2301      	movs	r3, #1
 8012854:	e059      	b.n	801290a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	7d1b      	ldrb	r3, [r3, #20]
 801285a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801285e:	b2da      	uxtb	r2, r3
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012864:	697b      	ldr	r3, [r7, #20]
 8012866:	7858      	ldrb	r0, [r3, #1]
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801286e:	2301      	movs	r3, #1
 8012870:	69ba      	ldr	r2, [r7, #24]
 8012872:	f7fd fe57 	bl	8010524 <disk_read>
 8012876:	4603      	mov	r3, r0
 8012878:	2b00      	cmp	r3, #0
 801287a:	d004      	beq.n	8012886 <f_read+0x232>
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	2201      	movs	r2, #1
 8012880:	755a      	strb	r2, [r3, #21]
 8012882:	2301      	movs	r3, #1
 8012884:	e041      	b.n	801290a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	69ba      	ldr	r2, [r7, #24]
 801288a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801288c:	697b      	ldr	r3, [r7, #20]
 801288e:	899b      	ldrh	r3, [r3, #12]
 8012890:	4618      	mov	r0, r3
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	699b      	ldr	r3, [r3, #24]
 8012896:	697a      	ldr	r2, [r7, #20]
 8012898:	8992      	ldrh	r2, [r2, #12]
 801289a:	fbb3 f1f2 	udiv	r1, r3, r2
 801289e:	fb02 f201 	mul.w	r2, r2, r1
 80128a2:	1a9b      	subs	r3, r3, r2
 80128a4:	1ac3      	subs	r3, r0, r3
 80128a6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80128a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	429a      	cmp	r2, r3
 80128ae:	d901      	bls.n	80128b4 <f_read+0x260>
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	699b      	ldr	r3, [r3, #24]
 80128be:	697a      	ldr	r2, [r7, #20]
 80128c0:	8992      	ldrh	r2, [r2, #12]
 80128c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80128c6:	fb02 f200 	mul.w	r2, r2, r0
 80128ca:	1a9b      	subs	r3, r3, r2
 80128cc:	440b      	add	r3, r1
 80128ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80128d0:	4619      	mov	r1, r3
 80128d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80128d4:	f7fd ff06 	bl	80106e4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80128d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128dc:	4413      	add	r3, r2
 80128de:	627b      	str	r3, [r7, #36]	; 0x24
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	699a      	ldr	r2, [r3, #24]
 80128e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128e6:	441a      	add	r2, r3
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	619a      	str	r2, [r3, #24]
 80128ec:	683b      	ldr	r3, [r7, #0]
 80128ee:	681a      	ldr	r2, [r3, #0]
 80128f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128f2:	441a      	add	r2, r3
 80128f4:	683b      	ldr	r3, [r7, #0]
 80128f6:	601a      	str	r2, [r3, #0]
 80128f8:	687a      	ldr	r2, [r7, #4]
 80128fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128fc:	1ad3      	subs	r3, r2, r3
 80128fe:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	2b00      	cmp	r3, #0
 8012904:	f47f aee1 	bne.w	80126ca <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8012908:	2300      	movs	r3, #0
}
 801290a:	4618      	mov	r0, r3
 801290c:	3738      	adds	r7, #56	; 0x38
 801290e:	46bd      	mov	sp, r7
 8012910:	bd80      	pop	{r7, pc}

08012912 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012912:	b580      	push	{r7, lr}
 8012914:	b08c      	sub	sp, #48	; 0x30
 8012916:	af00      	add	r7, sp, #0
 8012918:	60f8      	str	r0, [r7, #12]
 801291a:	60b9      	str	r1, [r7, #8]
 801291c:	607a      	str	r2, [r7, #4]
 801291e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012920:	68bb      	ldr	r3, [r7, #8]
 8012922:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	2200      	movs	r2, #0
 8012928:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	f107 0210 	add.w	r2, r7, #16
 8012930:	4611      	mov	r1, r2
 8012932:	4618      	mov	r0, r3
 8012934:	f7ff fc44 	bl	80121c0 <validate>
 8012938:	4603      	mov	r3, r0
 801293a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801293e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012942:	2b00      	cmp	r3, #0
 8012944:	d107      	bne.n	8012956 <f_write+0x44>
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	7d5b      	ldrb	r3, [r3, #21]
 801294a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801294e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012952:	2b00      	cmp	r3, #0
 8012954:	d002      	beq.n	801295c <f_write+0x4a>
 8012956:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801295a:	e16a      	b.n	8012c32 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	7d1b      	ldrb	r3, [r3, #20]
 8012960:	f003 0302 	and.w	r3, r3, #2
 8012964:	2b00      	cmp	r3, #0
 8012966:	d101      	bne.n	801296c <f_write+0x5a>
 8012968:	2307      	movs	r3, #7
 801296a:	e162      	b.n	8012c32 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	699a      	ldr	r2, [r3, #24]
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	441a      	add	r2, r3
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	699b      	ldr	r3, [r3, #24]
 8012978:	429a      	cmp	r2, r3
 801297a:	f080 814c 	bcs.w	8012c16 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	699b      	ldr	r3, [r3, #24]
 8012982:	43db      	mvns	r3, r3
 8012984:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8012986:	e146      	b.n	8012c16 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	699b      	ldr	r3, [r3, #24]
 801298c:	693a      	ldr	r2, [r7, #16]
 801298e:	8992      	ldrh	r2, [r2, #12]
 8012990:	fbb3 f1f2 	udiv	r1, r3, r2
 8012994:	fb02 f201 	mul.w	r2, r2, r1
 8012998:	1a9b      	subs	r3, r3, r2
 801299a:	2b00      	cmp	r3, #0
 801299c:	f040 80f1 	bne.w	8012b82 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	699b      	ldr	r3, [r3, #24]
 80129a4:	693a      	ldr	r2, [r7, #16]
 80129a6:	8992      	ldrh	r2, [r2, #12]
 80129a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80129ac:	693a      	ldr	r2, [r7, #16]
 80129ae:	8952      	ldrh	r2, [r2, #10]
 80129b0:	3a01      	subs	r2, #1
 80129b2:	4013      	ands	r3, r2
 80129b4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80129b6:	69bb      	ldr	r3, [r7, #24]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d143      	bne.n	8012a44 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	699b      	ldr	r3, [r3, #24]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d10c      	bne.n	80129de <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	689b      	ldr	r3, [r3, #8]
 80129c8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80129ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d11a      	bne.n	8012a06 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	2100      	movs	r1, #0
 80129d4:	4618      	mov	r0, r3
 80129d6:	f7fe fbbc 	bl	8011152 <create_chain>
 80129da:	62b8      	str	r0, [r7, #40]	; 0x28
 80129dc:	e013      	b.n	8012a06 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d007      	beq.n	80129f6 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	699b      	ldr	r3, [r3, #24]
 80129ea:	4619      	mov	r1, r3
 80129ec:	68f8      	ldr	r0, [r7, #12]
 80129ee:	f7fe fc48 	bl	8011282 <clmt_clust>
 80129f2:	62b8      	str	r0, [r7, #40]	; 0x28
 80129f4:	e007      	b.n	8012a06 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80129f6:	68fa      	ldr	r2, [r7, #12]
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	69db      	ldr	r3, [r3, #28]
 80129fc:	4619      	mov	r1, r3
 80129fe:	4610      	mov	r0, r2
 8012a00:	f7fe fba7 	bl	8011152 <create_chain>
 8012a04:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	f000 8109 	beq.w	8012c20 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a10:	2b01      	cmp	r3, #1
 8012a12:	d104      	bne.n	8012a1e <f_write+0x10c>
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	2202      	movs	r2, #2
 8012a18:	755a      	strb	r2, [r3, #21]
 8012a1a:	2302      	movs	r3, #2
 8012a1c:	e109      	b.n	8012c32 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a24:	d104      	bne.n	8012a30 <f_write+0x11e>
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	2201      	movs	r2, #1
 8012a2a:	755a      	strb	r2, [r3, #21]
 8012a2c:	2301      	movs	r3, #1
 8012a2e:	e100      	b.n	8012c32 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a34:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	689b      	ldr	r3, [r3, #8]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d102      	bne.n	8012a44 <f_write+0x132>
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a42:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	7d1b      	ldrb	r3, [r3, #20]
 8012a48:	b25b      	sxtb	r3, r3
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	da18      	bge.n	8012a80 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012a4e:	693b      	ldr	r3, [r7, #16]
 8012a50:	7858      	ldrb	r0, [r3, #1]
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	6a1a      	ldr	r2, [r3, #32]
 8012a5c:	2301      	movs	r3, #1
 8012a5e:	f7fd fd81 	bl	8010564 <disk_write>
 8012a62:	4603      	mov	r3, r0
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d004      	beq.n	8012a72 <f_write+0x160>
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	2201      	movs	r2, #1
 8012a6c:	755a      	strb	r2, [r3, #21]
 8012a6e:	2301      	movs	r3, #1
 8012a70:	e0df      	b.n	8012c32 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	7d1b      	ldrb	r3, [r3, #20]
 8012a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012a7a:	b2da      	uxtb	r2, r3
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012a80:	693a      	ldr	r2, [r7, #16]
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	69db      	ldr	r3, [r3, #28]
 8012a86:	4619      	mov	r1, r3
 8012a88:	4610      	mov	r0, r2
 8012a8a:	f7fe f8f7 	bl	8010c7c <clust2sect>
 8012a8e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012a90:	697b      	ldr	r3, [r7, #20]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d104      	bne.n	8012aa0 <f_write+0x18e>
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	2202      	movs	r2, #2
 8012a9a:	755a      	strb	r2, [r3, #21]
 8012a9c:	2302      	movs	r3, #2
 8012a9e:	e0c8      	b.n	8012c32 <f_write+0x320>
			sect += csect;
 8012aa0:	697a      	ldr	r2, [r7, #20]
 8012aa2:	69bb      	ldr	r3, [r7, #24]
 8012aa4:	4413      	add	r3, r2
 8012aa6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012aa8:	693b      	ldr	r3, [r7, #16]
 8012aaa:	899b      	ldrh	r3, [r3, #12]
 8012aac:	461a      	mov	r2, r3
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	fbb3 f3f2 	udiv	r3, r3, r2
 8012ab4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012ab6:	6a3b      	ldr	r3, [r7, #32]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d043      	beq.n	8012b44 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012abc:	69ba      	ldr	r2, [r7, #24]
 8012abe:	6a3b      	ldr	r3, [r7, #32]
 8012ac0:	4413      	add	r3, r2
 8012ac2:	693a      	ldr	r2, [r7, #16]
 8012ac4:	8952      	ldrh	r2, [r2, #10]
 8012ac6:	4293      	cmp	r3, r2
 8012ac8:	d905      	bls.n	8012ad6 <f_write+0x1c4>
					cc = fs->csize - csect;
 8012aca:	693b      	ldr	r3, [r7, #16]
 8012acc:	895b      	ldrh	r3, [r3, #10]
 8012ace:	461a      	mov	r2, r3
 8012ad0:	69bb      	ldr	r3, [r7, #24]
 8012ad2:	1ad3      	subs	r3, r2, r3
 8012ad4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012ad6:	693b      	ldr	r3, [r7, #16]
 8012ad8:	7858      	ldrb	r0, [r3, #1]
 8012ada:	6a3b      	ldr	r3, [r7, #32]
 8012adc:	697a      	ldr	r2, [r7, #20]
 8012ade:	69f9      	ldr	r1, [r7, #28]
 8012ae0:	f7fd fd40 	bl	8010564 <disk_write>
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d004      	beq.n	8012af4 <f_write+0x1e2>
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	2201      	movs	r2, #1
 8012aee:	755a      	strb	r2, [r3, #21]
 8012af0:	2301      	movs	r3, #1
 8012af2:	e09e      	b.n	8012c32 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	6a1a      	ldr	r2, [r3, #32]
 8012af8:	697b      	ldr	r3, [r7, #20]
 8012afa:	1ad3      	subs	r3, r2, r3
 8012afc:	6a3a      	ldr	r2, [r7, #32]
 8012afe:	429a      	cmp	r2, r3
 8012b00:	d918      	bls.n	8012b34 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	6a1a      	ldr	r2, [r3, #32]
 8012b0c:	697b      	ldr	r3, [r7, #20]
 8012b0e:	1ad3      	subs	r3, r2, r3
 8012b10:	693a      	ldr	r2, [r7, #16]
 8012b12:	8992      	ldrh	r2, [r2, #12]
 8012b14:	fb02 f303 	mul.w	r3, r2, r3
 8012b18:	69fa      	ldr	r2, [r7, #28]
 8012b1a:	18d1      	adds	r1, r2, r3
 8012b1c:	693b      	ldr	r3, [r7, #16]
 8012b1e:	899b      	ldrh	r3, [r3, #12]
 8012b20:	461a      	mov	r2, r3
 8012b22:	f7fd fddf 	bl	80106e4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	7d1b      	ldrb	r3, [r3, #20]
 8012b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012b2e:	b2da      	uxtb	r2, r3
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012b34:	693b      	ldr	r3, [r7, #16]
 8012b36:	899b      	ldrh	r3, [r3, #12]
 8012b38:	461a      	mov	r2, r3
 8012b3a:	6a3b      	ldr	r3, [r7, #32]
 8012b3c:	fb02 f303 	mul.w	r3, r2, r3
 8012b40:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8012b42:	e04b      	b.n	8012bdc <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	6a1b      	ldr	r3, [r3, #32]
 8012b48:	697a      	ldr	r2, [r7, #20]
 8012b4a:	429a      	cmp	r2, r3
 8012b4c:	d016      	beq.n	8012b7c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	699a      	ldr	r2, [r3, #24]
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012b56:	429a      	cmp	r2, r3
 8012b58:	d210      	bcs.n	8012b7c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012b5a:	693b      	ldr	r3, [r7, #16]
 8012b5c:	7858      	ldrb	r0, [r3, #1]
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012b64:	2301      	movs	r3, #1
 8012b66:	697a      	ldr	r2, [r7, #20]
 8012b68:	f7fd fcdc 	bl	8010524 <disk_read>
 8012b6c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d004      	beq.n	8012b7c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	2201      	movs	r2, #1
 8012b76:	755a      	strb	r2, [r3, #21]
 8012b78:	2301      	movs	r3, #1
 8012b7a:	e05a      	b.n	8012c32 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	697a      	ldr	r2, [r7, #20]
 8012b80:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012b82:	693b      	ldr	r3, [r7, #16]
 8012b84:	899b      	ldrh	r3, [r3, #12]
 8012b86:	4618      	mov	r0, r3
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	699b      	ldr	r3, [r3, #24]
 8012b8c:	693a      	ldr	r2, [r7, #16]
 8012b8e:	8992      	ldrh	r2, [r2, #12]
 8012b90:	fbb3 f1f2 	udiv	r1, r3, r2
 8012b94:	fb02 f201 	mul.w	r2, r2, r1
 8012b98:	1a9b      	subs	r3, r3, r2
 8012b9a:	1ac3      	subs	r3, r0, r3
 8012b9c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8012b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	429a      	cmp	r2, r3
 8012ba4:	d901      	bls.n	8012baa <f_write+0x298>
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	699b      	ldr	r3, [r3, #24]
 8012bb4:	693a      	ldr	r2, [r7, #16]
 8012bb6:	8992      	ldrh	r2, [r2, #12]
 8012bb8:	fbb3 f0f2 	udiv	r0, r3, r2
 8012bbc:	fb02 f200 	mul.w	r2, r2, r0
 8012bc0:	1a9b      	subs	r3, r3, r2
 8012bc2:	440b      	add	r3, r1
 8012bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012bc6:	69f9      	ldr	r1, [r7, #28]
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f7fd fd8b 	bl	80106e4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	7d1b      	ldrb	r3, [r3, #20]
 8012bd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012bd6:	b2da      	uxtb	r2, r3
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8012bdc:	69fa      	ldr	r2, [r7, #28]
 8012bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be0:	4413      	add	r3, r2
 8012be2:	61fb      	str	r3, [r7, #28]
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	699a      	ldr	r2, [r3, #24]
 8012be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bea:	441a      	add	r2, r3
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	619a      	str	r2, [r3, #24]
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	68da      	ldr	r2, [r3, #12]
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	699b      	ldr	r3, [r3, #24]
 8012bf8:	429a      	cmp	r2, r3
 8012bfa:	bf38      	it	cc
 8012bfc:	461a      	movcc	r2, r3
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	60da      	str	r2, [r3, #12]
 8012c02:	683b      	ldr	r3, [r7, #0]
 8012c04:	681a      	ldr	r2, [r3, #0]
 8012c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c08:	441a      	add	r2, r3
 8012c0a:	683b      	ldr	r3, [r7, #0]
 8012c0c:	601a      	str	r2, [r3, #0]
 8012c0e:	687a      	ldr	r2, [r7, #4]
 8012c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c12:	1ad3      	subs	r3, r2, r3
 8012c14:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	f47f aeb5 	bne.w	8012988 <f_write+0x76>
 8012c1e:	e000      	b.n	8012c22 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012c20:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	7d1b      	ldrb	r3, [r3, #20]
 8012c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c2a:	b2da      	uxtb	r2, r3
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8012c30:	2300      	movs	r3, #0
}
 8012c32:	4618      	mov	r0, r3
 8012c34:	3730      	adds	r7, #48	; 0x30
 8012c36:	46bd      	mov	sp, r7
 8012c38:	bd80      	pop	{r7, pc}
	...

08012c3c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b086      	sub	sp, #24
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	f107 0208 	add.w	r2, r7, #8
 8012c4a:	4611      	mov	r1, r2
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	f7ff fab7 	bl	80121c0 <validate>
 8012c52:	4603      	mov	r3, r0
 8012c54:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012c56:	7dfb      	ldrb	r3, [r7, #23]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d167      	bne.n	8012d2c <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	7d1b      	ldrb	r3, [r3, #20]
 8012c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d061      	beq.n	8012d2c <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	7d1b      	ldrb	r3, [r3, #20]
 8012c6c:	b25b      	sxtb	r3, r3
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	da15      	bge.n	8012c9e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012c72:	68bb      	ldr	r3, [r7, #8]
 8012c74:	7858      	ldrb	r0, [r3, #1]
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	6a1a      	ldr	r2, [r3, #32]
 8012c80:	2301      	movs	r3, #1
 8012c82:	f7fd fc6f 	bl	8010564 <disk_write>
 8012c86:	4603      	mov	r3, r0
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d001      	beq.n	8012c90 <f_sync+0x54>
 8012c8c:	2301      	movs	r3, #1
 8012c8e:	e04e      	b.n	8012d2e <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	7d1b      	ldrb	r3, [r3, #20]
 8012c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012c98:	b2da      	uxtb	r2, r3
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012c9e:	4b26      	ldr	r3, [pc, #152]	; (8012d38 <f_sync+0xfc>)
 8012ca0:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012ca2:	68ba      	ldr	r2, [r7, #8]
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ca8:	4619      	mov	r1, r3
 8012caa:	4610      	mov	r0, r2
 8012cac:	f7fd ff48 	bl	8010b40 <move_window>
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012cb4:	7dfb      	ldrb	r3, [r7, #23]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d138      	bne.n	8012d2c <f_sync+0xf0>
					dir = fp->dir_ptr;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cbe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	330b      	adds	r3, #11
 8012cc4:	781a      	ldrb	r2, [r3, #0]
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	330b      	adds	r3, #11
 8012cca:	f042 0220 	orr.w	r2, r2, #32
 8012cce:	b2d2      	uxtb	r2, r2
 8012cd0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	6818      	ldr	r0, [r3, #0]
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	689b      	ldr	r3, [r3, #8]
 8012cda:	461a      	mov	r2, r3
 8012cdc:	68f9      	ldr	r1, [r7, #12]
 8012cde:	f7fe fccd 	bl	801167c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	f103 021c 	add.w	r2, r3, #28
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	68db      	ldr	r3, [r3, #12]
 8012cec:	4619      	mov	r1, r3
 8012cee:	4610      	mov	r0, r2
 8012cf0:	f7fd fccc 	bl	801068c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	3316      	adds	r3, #22
 8012cf8:	6939      	ldr	r1, [r7, #16]
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f7fd fcc6 	bl	801068c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	3312      	adds	r3, #18
 8012d04:	2100      	movs	r1, #0
 8012d06:	4618      	mov	r0, r3
 8012d08:	f7fd fca5 	bl	8010656 <st_word>
					fs->wflag = 1;
 8012d0c:	68bb      	ldr	r3, [r7, #8]
 8012d0e:	2201      	movs	r2, #1
 8012d10:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012d12:	68bb      	ldr	r3, [r7, #8]
 8012d14:	4618      	mov	r0, r3
 8012d16:	f7fd ff41 	bl	8010b9c <sync_fs>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	7d1b      	ldrb	r3, [r3, #20]
 8012d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012d26:	b2da      	uxtb	r2, r3
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d2e:	4618      	mov	r0, r3
 8012d30:	3718      	adds	r7, #24
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bd80      	pop	{r7, pc}
 8012d36:	bf00      	nop
 8012d38:	274a0000 	.word	0x274a0000

08012d3c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	b084      	sub	sp, #16
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012d44:	6878      	ldr	r0, [r7, #4]
 8012d46:	f7ff ff79 	bl	8012c3c <f_sync>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012d4e:	7bfb      	ldrb	r3, [r7, #15]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d118      	bne.n	8012d86 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	f107 0208 	add.w	r2, r7, #8
 8012d5a:	4611      	mov	r1, r2
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	f7ff fa2f 	bl	80121c0 <validate>
 8012d62:	4603      	mov	r3, r0
 8012d64:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012d66:	7bfb      	ldrb	r3, [r7, #15]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d10c      	bne.n	8012d86 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	691b      	ldr	r3, [r3, #16]
 8012d70:	4618      	mov	r0, r3
 8012d72:	f7fd fe41 	bl	80109f8 <dec_lock>
 8012d76:	4603      	mov	r3, r0
 8012d78:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012d7a:	7bfb      	ldrb	r3, [r7, #15]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d102      	bne.n	8012d86 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	2200      	movs	r2, #0
 8012d84:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d88:	4618      	mov	r0, r3
 8012d8a:	3710      	adds	r7, #16
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bd80      	pop	{r7, pc}

08012d90 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8012d90:	b590      	push	{r4, r7, lr}
 8012d92:	b091      	sub	sp, #68	; 0x44
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8012d98:	f107 0108 	add.w	r1, r7, #8
 8012d9c:	1d3b      	adds	r3, r7, #4
 8012d9e:	2200      	movs	r2, #0
 8012da0:	4618      	mov	r0, r3
 8012da2:	f7fe ff87 	bl	8011cb4 <find_volume>
 8012da6:	4603      	mov	r3, r0
 8012da8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8012dac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d131      	bne.n	8012e18 <f_chdir+0x88>
		dj.obj.fs = fs;
 8012db4:	68bb      	ldr	r3, [r7, #8]
 8012db6:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8012db8:	687a      	ldr	r2, [r7, #4]
 8012dba:	f107 030c 	add.w	r3, r7, #12
 8012dbe:	4611      	mov	r1, r2
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f7fe fe47 	bl	8011a54 <follow_path>
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8012dcc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d11a      	bne.n	8012e0a <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8012dd4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012dd8:	b25b      	sxtb	r3, r3
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	da03      	bge.n	8012de6 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8012dde:	68bb      	ldr	r3, [r7, #8]
 8012de0:	697a      	ldr	r2, [r7, #20]
 8012de2:	619a      	str	r2, [r3, #24]
 8012de4:	e011      	b.n	8012e0a <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8012de6:	7cbb      	ldrb	r3, [r7, #18]
 8012de8:	f003 0310 	and.w	r3, r3, #16
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d009      	beq.n	8012e04 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8012df0:	68bb      	ldr	r3, [r7, #8]
 8012df2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012df4:	68bc      	ldr	r4, [r7, #8]
 8012df6:	4611      	mov	r1, r2
 8012df8:	4618      	mov	r0, r3
 8012dfa:	f7fe fc20 	bl	801163e <ld_clust>
 8012dfe:	4603      	mov	r3, r0
 8012e00:	61a3      	str	r3, [r4, #24]
 8012e02:	e002      	b.n	8012e0a <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8012e04:	2305      	movs	r3, #5
 8012e06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8012e0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012e0e:	2b04      	cmp	r3, #4
 8012e10:	d102      	bne.n	8012e18 <f_chdir+0x88>
 8012e12:	2305      	movs	r3, #5
 8012e14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8012e18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	3744      	adds	r7, #68	; 0x44
 8012e20:	46bd      	mov	sp, r7
 8012e22:	bd90      	pop	{r4, r7, pc}

08012e24 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b090      	sub	sp, #64	; 0x40
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
 8012e2c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	f107 0208 	add.w	r2, r7, #8
 8012e34:	4611      	mov	r1, r2
 8012e36:	4618      	mov	r0, r3
 8012e38:	f7ff f9c2 	bl	80121c0 <validate>
 8012e3c:	4603      	mov	r3, r0
 8012e3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8012e42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d103      	bne.n	8012e52 <f_lseek+0x2e>
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	7d5b      	ldrb	r3, [r3, #21]
 8012e4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8012e52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d002      	beq.n	8012e60 <f_lseek+0x3c>
 8012e5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012e5e:	e201      	b.n	8013264 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	f000 80d9 	beq.w	801301c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e70:	d15a      	bne.n	8012f28 <f_lseek+0x104>
			tbl = fp->cltbl;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e76:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8012e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e7a:	1d1a      	adds	r2, r3, #4
 8012e7c:	627a      	str	r2, [r7, #36]	; 0x24
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	617b      	str	r3, [r7, #20]
 8012e82:	2302      	movs	r3, #2
 8012e84:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	689b      	ldr	r3, [r3, #8]
 8012e8a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8012e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d03a      	beq.n	8012f08 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8012e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e94:	613b      	str	r3, [r7, #16]
 8012e96:	2300      	movs	r3, #0
 8012e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e9c:	3302      	adds	r3, #2
 8012e9e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8012ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ea2:	60fb      	str	r3, [r7, #12]
 8012ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ea6:	3301      	adds	r3, #1
 8012ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f7fd ff03 	bl	8010cba <get_fat>
 8012eb4:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8012eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eb8:	2b01      	cmp	r3, #1
 8012eba:	d804      	bhi.n	8012ec6 <f_lseek+0xa2>
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	2202      	movs	r2, #2
 8012ec0:	755a      	strb	r2, [r3, #21]
 8012ec2:	2302      	movs	r3, #2
 8012ec4:	e1ce      	b.n	8013264 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ecc:	d104      	bne.n	8012ed8 <f_lseek+0xb4>
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	2201      	movs	r2, #1
 8012ed2:	755a      	strb	r2, [r3, #21]
 8012ed4:	2301      	movs	r3, #1
 8012ed6:	e1c5      	b.n	8013264 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	3301      	adds	r3, #1
 8012edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ede:	429a      	cmp	r2, r3
 8012ee0:	d0de      	beq.n	8012ea0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8012ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ee4:	697b      	ldr	r3, [r7, #20]
 8012ee6:	429a      	cmp	r2, r3
 8012ee8:	d809      	bhi.n	8012efe <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8012eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eec:	1d1a      	adds	r2, r3, #4
 8012eee:	627a      	str	r2, [r7, #36]	; 0x24
 8012ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ef2:	601a      	str	r2, [r3, #0]
 8012ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ef6:	1d1a      	adds	r2, r3, #4
 8012ef8:	627a      	str	r2, [r7, #36]	; 0x24
 8012efa:	693a      	ldr	r2, [r7, #16]
 8012efc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8012efe:	68bb      	ldr	r3, [r7, #8]
 8012f00:	69db      	ldr	r3, [r3, #28]
 8012f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f04:	429a      	cmp	r2, r3
 8012f06:	d3c4      	bcc.n	8012e92 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f0e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8012f10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f12:	697b      	ldr	r3, [r7, #20]
 8012f14:	429a      	cmp	r2, r3
 8012f16:	d803      	bhi.n	8012f20 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8012f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	601a      	str	r2, [r3, #0]
 8012f1e:	e19f      	b.n	8013260 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8012f20:	2311      	movs	r3, #17
 8012f22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012f26:	e19b      	b.n	8013260 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	68db      	ldr	r3, [r3, #12]
 8012f2c:	683a      	ldr	r2, [r7, #0]
 8012f2e:	429a      	cmp	r2, r3
 8012f30:	d902      	bls.n	8012f38 <f_lseek+0x114>
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	68db      	ldr	r3, [r3, #12]
 8012f36:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	683a      	ldr	r2, [r7, #0]
 8012f3c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8012f3e:	683b      	ldr	r3, [r7, #0]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	f000 818d 	beq.w	8013260 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	3b01      	subs	r3, #1
 8012f4a:	4619      	mov	r1, r3
 8012f4c:	6878      	ldr	r0, [r7, #4]
 8012f4e:	f7fe f998 	bl	8011282 <clmt_clust>
 8012f52:	4602      	mov	r2, r0
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8012f58:	68ba      	ldr	r2, [r7, #8]
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	69db      	ldr	r3, [r3, #28]
 8012f5e:	4619      	mov	r1, r3
 8012f60:	4610      	mov	r0, r2
 8012f62:	f7fd fe8b 	bl	8010c7c <clust2sect>
 8012f66:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8012f68:	69bb      	ldr	r3, [r7, #24]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d104      	bne.n	8012f78 <f_lseek+0x154>
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	2202      	movs	r2, #2
 8012f72:	755a      	strb	r2, [r3, #21]
 8012f74:	2302      	movs	r3, #2
 8012f76:	e175      	b.n	8013264 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8012f78:	683b      	ldr	r3, [r7, #0]
 8012f7a:	3b01      	subs	r3, #1
 8012f7c:	68ba      	ldr	r2, [r7, #8]
 8012f7e:	8992      	ldrh	r2, [r2, #12]
 8012f80:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f84:	68ba      	ldr	r2, [r7, #8]
 8012f86:	8952      	ldrh	r2, [r2, #10]
 8012f88:	3a01      	subs	r2, #1
 8012f8a:	4013      	ands	r3, r2
 8012f8c:	69ba      	ldr	r2, [r7, #24]
 8012f8e:	4413      	add	r3, r2
 8012f90:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	699b      	ldr	r3, [r3, #24]
 8012f96:	68ba      	ldr	r2, [r7, #8]
 8012f98:	8992      	ldrh	r2, [r2, #12]
 8012f9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8012f9e:	fb02 f201 	mul.w	r2, r2, r1
 8012fa2:	1a9b      	subs	r3, r3, r2
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	f000 815b 	beq.w	8013260 <f_lseek+0x43c>
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	6a1b      	ldr	r3, [r3, #32]
 8012fae:	69ba      	ldr	r2, [r7, #24]
 8012fb0:	429a      	cmp	r2, r3
 8012fb2:	f000 8155 	beq.w	8013260 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	7d1b      	ldrb	r3, [r3, #20]
 8012fba:	b25b      	sxtb	r3, r3
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	da18      	bge.n	8012ff2 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012fc0:	68bb      	ldr	r3, [r7, #8]
 8012fc2:	7858      	ldrb	r0, [r3, #1]
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	6a1a      	ldr	r2, [r3, #32]
 8012fce:	2301      	movs	r3, #1
 8012fd0:	f7fd fac8 	bl	8010564 <disk_write>
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d004      	beq.n	8012fe4 <f_lseek+0x1c0>
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	2201      	movs	r2, #1
 8012fde:	755a      	strb	r2, [r3, #21]
 8012fe0:	2301      	movs	r3, #1
 8012fe2:	e13f      	b.n	8013264 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	7d1b      	ldrb	r3, [r3, #20]
 8012fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012fec:	b2da      	uxtb	r2, r3
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	7858      	ldrb	r0, [r3, #1]
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012ffc:	2301      	movs	r3, #1
 8012ffe:	69ba      	ldr	r2, [r7, #24]
 8013000:	f7fd fa90 	bl	8010524 <disk_read>
 8013004:	4603      	mov	r3, r0
 8013006:	2b00      	cmp	r3, #0
 8013008:	d004      	beq.n	8013014 <f_lseek+0x1f0>
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	2201      	movs	r2, #1
 801300e:	755a      	strb	r2, [r3, #21]
 8013010:	2301      	movs	r3, #1
 8013012:	e127      	b.n	8013264 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	69ba      	ldr	r2, [r7, #24]
 8013018:	621a      	str	r2, [r3, #32]
 801301a:	e121      	b.n	8013260 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	68db      	ldr	r3, [r3, #12]
 8013020:	683a      	ldr	r2, [r7, #0]
 8013022:	429a      	cmp	r2, r3
 8013024:	d908      	bls.n	8013038 <f_lseek+0x214>
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	7d1b      	ldrb	r3, [r3, #20]
 801302a:	f003 0302 	and.w	r3, r3, #2
 801302e:	2b00      	cmp	r3, #0
 8013030:	d102      	bne.n	8013038 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	68db      	ldr	r3, [r3, #12]
 8013036:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	699b      	ldr	r3, [r3, #24]
 801303c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801303e:	2300      	movs	r3, #0
 8013040:	637b      	str	r3, [r7, #52]	; 0x34
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013046:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013048:	683b      	ldr	r3, [r7, #0]
 801304a:	2b00      	cmp	r3, #0
 801304c:	f000 80b5 	beq.w	80131ba <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013050:	68bb      	ldr	r3, [r7, #8]
 8013052:	895b      	ldrh	r3, [r3, #10]
 8013054:	461a      	mov	r2, r3
 8013056:	68bb      	ldr	r3, [r7, #8]
 8013058:	899b      	ldrh	r3, [r3, #12]
 801305a:	fb03 f302 	mul.w	r3, r3, r2
 801305e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013060:	6a3b      	ldr	r3, [r7, #32]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d01b      	beq.n	801309e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013066:	683b      	ldr	r3, [r7, #0]
 8013068:	1e5a      	subs	r2, r3, #1
 801306a:	69fb      	ldr	r3, [r7, #28]
 801306c:	fbb2 f2f3 	udiv	r2, r2, r3
 8013070:	6a3b      	ldr	r3, [r7, #32]
 8013072:	1e59      	subs	r1, r3, #1
 8013074:	69fb      	ldr	r3, [r7, #28]
 8013076:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801307a:	429a      	cmp	r2, r3
 801307c:	d30f      	bcc.n	801309e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801307e:	6a3b      	ldr	r3, [r7, #32]
 8013080:	1e5a      	subs	r2, r3, #1
 8013082:	69fb      	ldr	r3, [r7, #28]
 8013084:	425b      	negs	r3, r3
 8013086:	401a      	ands	r2, r3
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	699b      	ldr	r3, [r3, #24]
 8013090:	683a      	ldr	r2, [r7, #0]
 8013092:	1ad3      	subs	r3, r2, r3
 8013094:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	69db      	ldr	r3, [r3, #28]
 801309a:	63bb      	str	r3, [r7, #56]	; 0x38
 801309c:	e022      	b.n	80130e4 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	689b      	ldr	r3, [r3, #8]
 80130a2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80130a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d119      	bne.n	80130de <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	2100      	movs	r1, #0
 80130ae:	4618      	mov	r0, r3
 80130b0:	f7fe f84f 	bl	8011152 <create_chain>
 80130b4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80130b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130b8:	2b01      	cmp	r3, #1
 80130ba:	d104      	bne.n	80130c6 <f_lseek+0x2a2>
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	2202      	movs	r2, #2
 80130c0:	755a      	strb	r2, [r3, #21]
 80130c2:	2302      	movs	r3, #2
 80130c4:	e0ce      	b.n	8013264 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80130c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130cc:	d104      	bne.n	80130d8 <f_lseek+0x2b4>
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	2201      	movs	r2, #1
 80130d2:	755a      	strb	r2, [r3, #21]
 80130d4:	2301      	movs	r3, #1
 80130d6:	e0c5      	b.n	8013264 <f_lseek+0x440>
					fp->obj.sclust = clst;
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80130dc:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80130e2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80130e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d067      	beq.n	80131ba <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80130ea:	e03a      	b.n	8013162 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80130ec:	683a      	ldr	r2, [r7, #0]
 80130ee:	69fb      	ldr	r3, [r7, #28]
 80130f0:	1ad3      	subs	r3, r2, r3
 80130f2:	603b      	str	r3, [r7, #0]
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	699a      	ldr	r2, [r3, #24]
 80130f8:	69fb      	ldr	r3, [r7, #28]
 80130fa:	441a      	add	r2, r3
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	7d1b      	ldrb	r3, [r3, #20]
 8013104:	f003 0302 	and.w	r3, r3, #2
 8013108:	2b00      	cmp	r3, #0
 801310a:	d00b      	beq.n	8013124 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013110:	4618      	mov	r0, r3
 8013112:	f7fe f81e 	bl	8011152 <create_chain>
 8013116:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801311a:	2b00      	cmp	r3, #0
 801311c:	d108      	bne.n	8013130 <f_lseek+0x30c>
							ofs = 0; break;
 801311e:	2300      	movs	r3, #0
 8013120:	603b      	str	r3, [r7, #0]
 8013122:	e022      	b.n	801316a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013128:	4618      	mov	r0, r3
 801312a:	f7fd fdc6 	bl	8010cba <get_fat>
 801312e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013136:	d104      	bne.n	8013142 <f_lseek+0x31e>
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	2201      	movs	r2, #1
 801313c:	755a      	strb	r2, [r3, #21]
 801313e:	2301      	movs	r3, #1
 8013140:	e090      	b.n	8013264 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013144:	2b01      	cmp	r3, #1
 8013146:	d904      	bls.n	8013152 <f_lseek+0x32e>
 8013148:	68bb      	ldr	r3, [r7, #8]
 801314a:	69db      	ldr	r3, [r3, #28]
 801314c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801314e:	429a      	cmp	r2, r3
 8013150:	d304      	bcc.n	801315c <f_lseek+0x338>
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	2202      	movs	r2, #2
 8013156:	755a      	strb	r2, [r3, #21]
 8013158:	2302      	movs	r3, #2
 801315a:	e083      	b.n	8013264 <f_lseek+0x440>
					fp->clust = clst;
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013160:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013162:	683a      	ldr	r2, [r7, #0]
 8013164:	69fb      	ldr	r3, [r7, #28]
 8013166:	429a      	cmp	r2, r3
 8013168:	d8c0      	bhi.n	80130ec <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	699a      	ldr	r2, [r3, #24]
 801316e:	683b      	ldr	r3, [r7, #0]
 8013170:	441a      	add	r2, r3
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013176:	68bb      	ldr	r3, [r7, #8]
 8013178:	899b      	ldrh	r3, [r3, #12]
 801317a:	461a      	mov	r2, r3
 801317c:	683b      	ldr	r3, [r7, #0]
 801317e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013182:	fb02 f201 	mul.w	r2, r2, r1
 8013186:	1a9b      	subs	r3, r3, r2
 8013188:	2b00      	cmp	r3, #0
 801318a:	d016      	beq.n	80131ba <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801318c:	68bb      	ldr	r3, [r7, #8]
 801318e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013190:	4618      	mov	r0, r3
 8013192:	f7fd fd73 	bl	8010c7c <clust2sect>
 8013196:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801319a:	2b00      	cmp	r3, #0
 801319c:	d104      	bne.n	80131a8 <f_lseek+0x384>
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	2202      	movs	r2, #2
 80131a2:	755a      	strb	r2, [r3, #21]
 80131a4:	2302      	movs	r3, #2
 80131a6:	e05d      	b.n	8013264 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80131a8:	68bb      	ldr	r3, [r7, #8]
 80131aa:	899b      	ldrh	r3, [r3, #12]
 80131ac:	461a      	mov	r2, r3
 80131ae:	683b      	ldr	r3, [r7, #0]
 80131b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80131b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80131b6:	4413      	add	r3, r2
 80131b8:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	699a      	ldr	r2, [r3, #24]
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	68db      	ldr	r3, [r3, #12]
 80131c2:	429a      	cmp	r2, r3
 80131c4:	d90a      	bls.n	80131dc <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	699a      	ldr	r2, [r3, #24]
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	7d1b      	ldrb	r3, [r3, #20]
 80131d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131d6:	b2da      	uxtb	r2, r3
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	699b      	ldr	r3, [r3, #24]
 80131e0:	68ba      	ldr	r2, [r7, #8]
 80131e2:	8992      	ldrh	r2, [r2, #12]
 80131e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80131e8:	fb02 f201 	mul.w	r2, r2, r1
 80131ec:	1a9b      	subs	r3, r3, r2
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d036      	beq.n	8013260 <f_lseek+0x43c>
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	6a1b      	ldr	r3, [r3, #32]
 80131f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80131f8:	429a      	cmp	r2, r3
 80131fa:	d031      	beq.n	8013260 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	7d1b      	ldrb	r3, [r3, #20]
 8013200:	b25b      	sxtb	r3, r3
 8013202:	2b00      	cmp	r3, #0
 8013204:	da18      	bge.n	8013238 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013206:	68bb      	ldr	r3, [r7, #8]
 8013208:	7858      	ldrb	r0, [r3, #1]
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	6a1a      	ldr	r2, [r3, #32]
 8013214:	2301      	movs	r3, #1
 8013216:	f7fd f9a5 	bl	8010564 <disk_write>
 801321a:	4603      	mov	r3, r0
 801321c:	2b00      	cmp	r3, #0
 801321e:	d004      	beq.n	801322a <f_lseek+0x406>
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	2201      	movs	r2, #1
 8013224:	755a      	strb	r2, [r3, #21]
 8013226:	2301      	movs	r3, #1
 8013228:	e01c      	b.n	8013264 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	7d1b      	ldrb	r3, [r3, #20]
 801322e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013232:	b2da      	uxtb	r2, r3
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013238:	68bb      	ldr	r3, [r7, #8]
 801323a:	7858      	ldrb	r0, [r3, #1]
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013242:	2301      	movs	r3, #1
 8013244:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013246:	f7fd f96d 	bl	8010524 <disk_read>
 801324a:	4603      	mov	r3, r0
 801324c:	2b00      	cmp	r3, #0
 801324e:	d004      	beq.n	801325a <f_lseek+0x436>
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	2201      	movs	r2, #1
 8013254:	755a      	strb	r2, [r3, #21]
 8013256:	2301      	movs	r3, #1
 8013258:	e004      	b.n	8013264 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801325e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013260:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013264:	4618      	mov	r0, r3
 8013266:	3740      	adds	r7, #64	; 0x40
 8013268:	46bd      	mov	sp, r7
 801326a:	bd80      	pop	{r7, pc}

0801326c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b09e      	sub	sp, #120	; 0x78
 8013270:	af00      	add	r7, sp, #0
 8013272:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8013274:	2300      	movs	r3, #0
 8013276:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013278:	f107 010c 	add.w	r1, r7, #12
 801327c:	1d3b      	adds	r3, r7, #4
 801327e:	2202      	movs	r2, #2
 8013280:	4618      	mov	r0, r3
 8013282:	f7fe fd17 	bl	8011cb4 <find_volume>
 8013286:	4603      	mov	r3, r0
 8013288:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8013290:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013294:	2b00      	cmp	r3, #0
 8013296:	f040 80a4 	bne.w	80133e2 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801329a:	687a      	ldr	r2, [r7, #4]
 801329c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80132a0:	4611      	mov	r1, r2
 80132a2:	4618      	mov	r0, r3
 80132a4:	f7fe fbd6 	bl	8011a54 <follow_path>
 80132a8:	4603      	mov	r3, r0
 80132aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 80132ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d108      	bne.n	80132c8 <f_unlink+0x5c>
 80132b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80132ba:	f003 0320 	and.w	r3, r3, #32
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d002      	beq.n	80132c8 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 80132c2:	2306      	movs	r3, #6
 80132c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80132c8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d108      	bne.n	80132e2 <f_unlink+0x76>
 80132d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80132d4:	2102      	movs	r1, #2
 80132d6:	4618      	mov	r0, r3
 80132d8:	f7fd fa82 	bl	80107e0 <chk_lock>
 80132dc:	4603      	mov	r3, r0
 80132de:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80132e2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d17b      	bne.n	80133e2 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80132ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80132ee:	b25b      	sxtb	r3, r3
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	da03      	bge.n	80132fc <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80132f4:	2306      	movs	r3, #6
 80132f6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80132fa:	e008      	b.n	801330e <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80132fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013300:	f003 0301 	and.w	r3, r3, #1
 8013304:	2b00      	cmp	r3, #0
 8013306:	d002      	beq.n	801330e <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013308:	2307      	movs	r3, #7
 801330a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 801330e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013312:	2b00      	cmp	r3, #0
 8013314:	d13d      	bne.n	8013392 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801331a:	4611      	mov	r1, r2
 801331c:	4618      	mov	r0, r3
 801331e:	f7fe f98e 	bl	801163e <ld_clust>
 8013322:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8013324:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013328:	f003 0310 	and.w	r3, r3, #16
 801332c:	2b00      	cmp	r3, #0
 801332e:	d030      	beq.n	8013392 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	699b      	ldr	r3, [r3, #24]
 8013334:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013336:	429a      	cmp	r2, r3
 8013338:	d103      	bne.n	8013342 <f_unlink+0xd6>
						res = FR_DENIED;
 801333a:	2307      	movs	r3, #7
 801333c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013340:	e027      	b.n	8013392 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8013346:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013348:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801334a:	f107 0310 	add.w	r3, r7, #16
 801334e:	2100      	movs	r1, #0
 8013350:	4618      	mov	r0, r3
 8013352:	f7fd ffce 	bl	80112f2 <dir_sdi>
 8013356:	4603      	mov	r3, r0
 8013358:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 801335c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013360:	2b00      	cmp	r3, #0
 8013362:	d116      	bne.n	8013392 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8013364:	f107 0310 	add.w	r3, r7, #16
 8013368:	2100      	movs	r1, #0
 801336a:	4618      	mov	r0, r3
 801336c:	f7fe f9a6 	bl	80116bc <dir_read>
 8013370:	4603      	mov	r3, r0
 8013372:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8013376:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801337a:	2b00      	cmp	r3, #0
 801337c:	d102      	bne.n	8013384 <f_unlink+0x118>
 801337e:	2307      	movs	r3, #7
 8013380:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8013384:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013388:	2b04      	cmp	r3, #4
 801338a:	d102      	bne.n	8013392 <f_unlink+0x126>
 801338c:	2300      	movs	r3, #0
 801338e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8013392:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013396:	2b00      	cmp	r3, #0
 8013398:	d123      	bne.n	80133e2 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801339a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801339e:	4618      	mov	r0, r3
 80133a0:	f7fe fa70 	bl	8011884 <dir_remove>
 80133a4:	4603      	mov	r3, r0
 80133a6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80133aa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d10c      	bne.n	80133cc <f_unlink+0x160>
 80133b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d009      	beq.n	80133cc <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80133b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80133bc:	2200      	movs	r2, #0
 80133be:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80133c0:	4618      	mov	r0, r3
 80133c2:	f7fd fe61 	bl	8011088 <remove_chain>
 80133c6:	4603      	mov	r3, r0
 80133c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80133cc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d106      	bne.n	80133e2 <f_unlink+0x176>
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	4618      	mov	r0, r3
 80133d8:	f7fd fbe0 	bl	8010b9c <sync_fs>
 80133dc:	4603      	mov	r3, r0
 80133de:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80133e2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80133e6:	4618      	mov	r0, r3
 80133e8:	3778      	adds	r7, #120	; 0x78
 80133ea:	46bd      	mov	sp, r7
 80133ec:	bd80      	pop	{r7, pc}
	...

080133f0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b096      	sub	sp, #88	; 0x58
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80133f8:	f107 0108 	add.w	r1, r7, #8
 80133fc:	1d3b      	adds	r3, r7, #4
 80133fe:	2202      	movs	r2, #2
 8013400:	4618      	mov	r0, r3
 8013402:	f7fe fc57 	bl	8011cb4 <find_volume>
 8013406:	4603      	mov	r3, r0
 8013408:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 801340c:	68bb      	ldr	r3, [r7, #8]
 801340e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8013410:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013414:	2b00      	cmp	r3, #0
 8013416:	f040 80fe 	bne.w	8013616 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801341a:	687a      	ldr	r2, [r7, #4]
 801341c:	f107 030c 	add.w	r3, r7, #12
 8013420:	4611      	mov	r1, r2
 8013422:	4618      	mov	r0, r3
 8013424:	f7fe fb16 	bl	8011a54 <follow_path>
 8013428:	4603      	mov	r3, r0
 801342a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801342e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013432:	2b00      	cmp	r3, #0
 8013434:	d102      	bne.n	801343c <f_mkdir+0x4c>
 8013436:	2308      	movs	r3, #8
 8013438:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 801343c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013440:	2b04      	cmp	r3, #4
 8013442:	d108      	bne.n	8013456 <f_mkdir+0x66>
 8013444:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013448:	f003 0320 	and.w	r3, r3, #32
 801344c:	2b00      	cmp	r3, #0
 801344e:	d002      	beq.n	8013456 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8013450:	2306      	movs	r3, #6
 8013452:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8013456:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801345a:	2b04      	cmp	r3, #4
 801345c:	f040 80db 	bne.w	8013616 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013460:	f107 030c 	add.w	r3, r7, #12
 8013464:	2100      	movs	r1, #0
 8013466:	4618      	mov	r0, r3
 8013468:	f7fd fe73 	bl	8011152 <create_chain>
 801346c:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801346e:	68bb      	ldr	r3, [r7, #8]
 8013470:	895b      	ldrh	r3, [r3, #10]
 8013472:	461a      	mov	r2, r3
 8013474:	68bb      	ldr	r3, [r7, #8]
 8013476:	899b      	ldrh	r3, [r3, #12]
 8013478:	fb03 f302 	mul.w	r3, r3, r2
 801347c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801347e:	2300      	movs	r3, #0
 8013480:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8013484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013486:	2b00      	cmp	r3, #0
 8013488:	d102      	bne.n	8013490 <f_mkdir+0xa0>
 801348a:	2307      	movs	r3, #7
 801348c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8013490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013492:	2b01      	cmp	r3, #1
 8013494:	d102      	bne.n	801349c <f_mkdir+0xac>
 8013496:	2302      	movs	r3, #2
 8013498:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801349c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801349e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134a2:	d102      	bne.n	80134aa <f_mkdir+0xba>
 80134a4:	2301      	movs	r3, #1
 80134a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80134aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d106      	bne.n	80134c0 <f_mkdir+0xd0>
 80134b2:	68bb      	ldr	r3, [r7, #8]
 80134b4:	4618      	mov	r0, r3
 80134b6:	f7fd faff 	bl	8010ab8 <sync_window>
 80134ba:	4603      	mov	r3, r0
 80134bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80134c0:	4b58      	ldr	r3, [pc, #352]	; (8013624 <f_mkdir+0x234>)
 80134c2:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80134c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d16c      	bne.n	80135a6 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 80134cc:	68bb      	ldr	r3, [r7, #8]
 80134ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80134d0:	4618      	mov	r0, r3
 80134d2:	f7fd fbd3 	bl	8010c7c <clust2sect>
 80134d6:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80134d8:	68bb      	ldr	r3, [r7, #8]
 80134da:	3338      	adds	r3, #56	; 0x38
 80134dc:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80134de:	68bb      	ldr	r3, [r7, #8]
 80134e0:	899b      	ldrh	r3, [r3, #12]
 80134e2:	461a      	mov	r2, r3
 80134e4:	2100      	movs	r1, #0
 80134e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80134e8:	f7fd f91d 	bl	8010726 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80134ec:	220b      	movs	r2, #11
 80134ee:	2120      	movs	r1, #32
 80134f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80134f2:	f7fd f918 	bl	8010726 <mem_set>
					dir[DIR_Name] = '.';
 80134f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134f8:	222e      	movs	r2, #46	; 0x2e
 80134fa:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80134fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134fe:	330b      	adds	r3, #11
 8013500:	2210      	movs	r2, #16
 8013502:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013506:	3316      	adds	r3, #22
 8013508:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801350a:	4618      	mov	r0, r3
 801350c:	f7fd f8be 	bl	801068c <st_dword>
					st_clust(fs, dir, dcl);
 8013510:	68bb      	ldr	r3, [r7, #8]
 8013512:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013514:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013516:	4618      	mov	r0, r3
 8013518:	f7fe f8b0 	bl	801167c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801351c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801351e:	3320      	adds	r3, #32
 8013520:	2220      	movs	r2, #32
 8013522:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013524:	4618      	mov	r0, r3
 8013526:	f7fd f8dd 	bl	80106e4 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801352a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801352c:	3321      	adds	r3, #33	; 0x21
 801352e:	222e      	movs	r2, #46	; 0x2e
 8013530:	701a      	strb	r2, [r3, #0]
 8013532:	697b      	ldr	r3, [r7, #20]
 8013534:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8013536:	68bb      	ldr	r3, [r7, #8]
 8013538:	781b      	ldrb	r3, [r3, #0]
 801353a:	2b03      	cmp	r3, #3
 801353c:	d106      	bne.n	801354c <f_mkdir+0x15c>
 801353e:	68bb      	ldr	r3, [r7, #8]
 8013540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013544:	429a      	cmp	r2, r3
 8013546:	d101      	bne.n	801354c <f_mkdir+0x15c>
 8013548:	2300      	movs	r3, #0
 801354a:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 801354c:	68b8      	ldr	r0, [r7, #8]
 801354e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013550:	3320      	adds	r3, #32
 8013552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013554:	4619      	mov	r1, r3
 8013556:	f7fe f891 	bl	801167c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801355a:	68bb      	ldr	r3, [r7, #8]
 801355c:	895b      	ldrh	r3, [r3, #10]
 801355e:	653b      	str	r3, [r7, #80]	; 0x50
 8013560:	e01c      	b.n	801359c <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8013562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013564:	1c5a      	adds	r2, r3, #1
 8013566:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013568:	68ba      	ldr	r2, [r7, #8]
 801356a:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 801356c:	68bb      	ldr	r3, [r7, #8]
 801356e:	2201      	movs	r2, #1
 8013570:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8013572:	68bb      	ldr	r3, [r7, #8]
 8013574:	4618      	mov	r0, r3
 8013576:	f7fd fa9f 	bl	8010ab8 <sync_window>
 801357a:	4603      	mov	r3, r0
 801357c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8013580:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013584:	2b00      	cmp	r3, #0
 8013586:	d10d      	bne.n	80135a4 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8013588:	68bb      	ldr	r3, [r7, #8]
 801358a:	899b      	ldrh	r3, [r3, #12]
 801358c:	461a      	mov	r2, r3
 801358e:	2100      	movs	r1, #0
 8013590:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013592:	f7fd f8c8 	bl	8010726 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013598:	3b01      	subs	r3, #1
 801359a:	653b      	str	r3, [r7, #80]	; 0x50
 801359c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d1df      	bne.n	8013562 <f_mkdir+0x172>
 80135a2:	e000      	b.n	80135a6 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 80135a4:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80135a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d107      	bne.n	80135be <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80135ae:	f107 030c 	add.w	r3, r7, #12
 80135b2:	4618      	mov	r0, r3
 80135b4:	f7fe f934 	bl	8011820 <dir_register>
 80135b8:	4603      	mov	r3, r0
 80135ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80135be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d120      	bne.n	8013608 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80135c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135c8:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80135ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135cc:	3316      	adds	r3, #22
 80135ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80135d0:	4618      	mov	r0, r3
 80135d2:	f7fd f85b 	bl	801068c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80135d6:	68bb      	ldr	r3, [r7, #8]
 80135d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80135da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80135dc:	4618      	mov	r0, r3
 80135de:	f7fe f84d 	bl	801167c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80135e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135e4:	330b      	adds	r3, #11
 80135e6:	2210      	movs	r2, #16
 80135e8:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80135ea:	68bb      	ldr	r3, [r7, #8]
 80135ec:	2201      	movs	r2, #1
 80135ee:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80135f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d10e      	bne.n	8013616 <f_mkdir+0x226>
					res = sync_fs(fs);
 80135f8:	68bb      	ldr	r3, [r7, #8]
 80135fa:	4618      	mov	r0, r3
 80135fc:	f7fd face 	bl	8010b9c <sync_fs>
 8013600:	4603      	mov	r3, r0
 8013602:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8013606:	e006      	b.n	8013616 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013608:	f107 030c 	add.w	r3, r7, #12
 801360c:	2200      	movs	r2, #0
 801360e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013610:	4618      	mov	r0, r3
 8013612:	f7fd fd39 	bl	8011088 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013616:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801361a:	4618      	mov	r0, r3
 801361c:	3758      	adds	r7, #88	; 0x58
 801361e:	46bd      	mov	sp, r7
 8013620:	bd80      	pop	{r7, pc}
 8013622:	bf00      	nop
 8013624:	274a0000 	.word	0x274a0000

08013628 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8013628:	b580      	push	{r7, lr}
 801362a:	b088      	sub	sp, #32
 801362c:	af00      	add	r7, sp, #0
 801362e:	60f8      	str	r0, [r7, #12]
 8013630:	60b9      	str	r1, [r7, #8]
 8013632:	607a      	str	r2, [r7, #4]
	int n = 0;
 8013634:	2300      	movs	r3, #0
 8013636:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801363c:	e017      	b.n	801366e <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801363e:	f107 0310 	add.w	r3, r7, #16
 8013642:	f107 0114 	add.w	r1, r7, #20
 8013646:	2201      	movs	r2, #1
 8013648:	6878      	ldr	r0, [r7, #4]
 801364a:	f7ff f803 	bl	8012654 <f_read>
		if (rc != 1) break;
 801364e:	693b      	ldr	r3, [r7, #16]
 8013650:	2b01      	cmp	r3, #1
 8013652:	d112      	bne.n	801367a <f_gets+0x52>
		c = s[0];
 8013654:	7d3b      	ldrb	r3, [r7, #20]
 8013656:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8013658:	69bb      	ldr	r3, [r7, #24]
 801365a:	1c5a      	adds	r2, r3, #1
 801365c:	61ba      	str	r2, [r7, #24]
 801365e:	7dfa      	ldrb	r2, [r7, #23]
 8013660:	701a      	strb	r2, [r3, #0]
		n++;
 8013662:	69fb      	ldr	r3, [r7, #28]
 8013664:	3301      	adds	r3, #1
 8013666:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8013668:	7dfb      	ldrb	r3, [r7, #23]
 801366a:	2b0a      	cmp	r3, #10
 801366c:	d007      	beq.n	801367e <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801366e:	68bb      	ldr	r3, [r7, #8]
 8013670:	3b01      	subs	r3, #1
 8013672:	69fa      	ldr	r2, [r7, #28]
 8013674:	429a      	cmp	r2, r3
 8013676:	dbe2      	blt.n	801363e <f_gets+0x16>
 8013678:	e002      	b.n	8013680 <f_gets+0x58>
		if (rc != 1) break;
 801367a:	bf00      	nop
 801367c:	e000      	b.n	8013680 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 801367e:	bf00      	nop
	}
	*p = 0;
 8013680:	69bb      	ldr	r3, [r7, #24]
 8013682:	2200      	movs	r2, #0
 8013684:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8013686:	69fb      	ldr	r3, [r7, #28]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d001      	beq.n	8013690 <f_gets+0x68>
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	e000      	b.n	8013692 <f_gets+0x6a>
 8013690:	2300      	movs	r3, #0
}
 8013692:	4618      	mov	r0, r3
 8013694:	3720      	adds	r7, #32
 8013696:	46bd      	mov	sp, r7
 8013698:	bd80      	pop	{r7, pc}
	...

0801369c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801369c:	b480      	push	{r7}
 801369e:	b087      	sub	sp, #28
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	60f8      	str	r0, [r7, #12]
 80136a4:	60b9      	str	r1, [r7, #8]
 80136a6:	4613      	mov	r3, r2
 80136a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80136aa:	2301      	movs	r3, #1
 80136ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80136ae:	2300      	movs	r3, #0
 80136b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80136b2:	4b1f      	ldr	r3, [pc, #124]	; (8013730 <FATFS_LinkDriverEx+0x94>)
 80136b4:	7a5b      	ldrb	r3, [r3, #9]
 80136b6:	b2db      	uxtb	r3, r3
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d131      	bne.n	8013720 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80136bc:	4b1c      	ldr	r3, [pc, #112]	; (8013730 <FATFS_LinkDriverEx+0x94>)
 80136be:	7a5b      	ldrb	r3, [r3, #9]
 80136c0:	b2db      	uxtb	r3, r3
 80136c2:	461a      	mov	r2, r3
 80136c4:	4b1a      	ldr	r3, [pc, #104]	; (8013730 <FATFS_LinkDriverEx+0x94>)
 80136c6:	2100      	movs	r1, #0
 80136c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80136ca:	4b19      	ldr	r3, [pc, #100]	; (8013730 <FATFS_LinkDriverEx+0x94>)
 80136cc:	7a5b      	ldrb	r3, [r3, #9]
 80136ce:	b2db      	uxtb	r3, r3
 80136d0:	4a17      	ldr	r2, [pc, #92]	; (8013730 <FATFS_LinkDriverEx+0x94>)
 80136d2:	009b      	lsls	r3, r3, #2
 80136d4:	4413      	add	r3, r2
 80136d6:	68fa      	ldr	r2, [r7, #12]
 80136d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80136da:	4b15      	ldr	r3, [pc, #84]	; (8013730 <FATFS_LinkDriverEx+0x94>)
 80136dc:	7a5b      	ldrb	r3, [r3, #9]
 80136de:	b2db      	uxtb	r3, r3
 80136e0:	461a      	mov	r2, r3
 80136e2:	4b13      	ldr	r3, [pc, #76]	; (8013730 <FATFS_LinkDriverEx+0x94>)
 80136e4:	4413      	add	r3, r2
 80136e6:	79fa      	ldrb	r2, [r7, #7]
 80136e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80136ea:	4b11      	ldr	r3, [pc, #68]	; (8013730 <FATFS_LinkDriverEx+0x94>)
 80136ec:	7a5b      	ldrb	r3, [r3, #9]
 80136ee:	b2db      	uxtb	r3, r3
 80136f0:	1c5a      	adds	r2, r3, #1
 80136f2:	b2d1      	uxtb	r1, r2
 80136f4:	4a0e      	ldr	r2, [pc, #56]	; (8013730 <FATFS_LinkDriverEx+0x94>)
 80136f6:	7251      	strb	r1, [r2, #9]
 80136f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80136fa:	7dbb      	ldrb	r3, [r7, #22]
 80136fc:	3330      	adds	r3, #48	; 0x30
 80136fe:	b2da      	uxtb	r2, r3
 8013700:	68bb      	ldr	r3, [r7, #8]
 8013702:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013704:	68bb      	ldr	r3, [r7, #8]
 8013706:	3301      	adds	r3, #1
 8013708:	223a      	movs	r2, #58	; 0x3a
 801370a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801370c:	68bb      	ldr	r3, [r7, #8]
 801370e:	3302      	adds	r3, #2
 8013710:	222f      	movs	r2, #47	; 0x2f
 8013712:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013714:	68bb      	ldr	r3, [r7, #8]
 8013716:	3303      	adds	r3, #3
 8013718:	2200      	movs	r2, #0
 801371a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801371c:	2300      	movs	r3, #0
 801371e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013720:	7dfb      	ldrb	r3, [r7, #23]
}
 8013722:	4618      	mov	r0, r3
 8013724:	371c      	adds	r7, #28
 8013726:	46bd      	mov	sp, r7
 8013728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372c:	4770      	bx	lr
 801372e:	bf00      	nop
 8013730:	2003c4c4 	.word	0x2003c4c4

08013734 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b082      	sub	sp, #8
 8013738:	af00      	add	r7, sp, #0
 801373a:	6078      	str	r0, [r7, #4]
 801373c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801373e:	2200      	movs	r2, #0
 8013740:	6839      	ldr	r1, [r7, #0]
 8013742:	6878      	ldr	r0, [r7, #4]
 8013744:	f7ff ffaa 	bl	801369c <FATFS_LinkDriverEx>
 8013748:	4603      	mov	r3, r0
}
 801374a:	4618      	mov	r0, r3
 801374c:	3708      	adds	r7, #8
 801374e:	46bd      	mov	sp, r7
 8013750:	bd80      	pop	{r7, pc}

08013752 <__cxa_guard_acquire>:
 8013752:	6803      	ldr	r3, [r0, #0]
 8013754:	07db      	lsls	r3, r3, #31
 8013756:	d406      	bmi.n	8013766 <__cxa_guard_acquire+0x14>
 8013758:	7843      	ldrb	r3, [r0, #1]
 801375a:	b103      	cbz	r3, 801375e <__cxa_guard_acquire+0xc>
 801375c:	deff      	udf	#255	; 0xff
 801375e:	2301      	movs	r3, #1
 8013760:	7043      	strb	r3, [r0, #1]
 8013762:	4618      	mov	r0, r3
 8013764:	4770      	bx	lr
 8013766:	2000      	movs	r0, #0
 8013768:	4770      	bx	lr

0801376a <__cxa_guard_release>:
 801376a:	2301      	movs	r3, #1
 801376c:	6003      	str	r3, [r0, #0]
 801376e:	4770      	bx	lr

08013770 <cos>:
 8013770:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013772:	ec51 0b10 	vmov	r0, r1, d0
 8013776:	4a1e      	ldr	r2, [pc, #120]	; (80137f0 <cos+0x80>)
 8013778:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801377c:	4293      	cmp	r3, r2
 801377e:	dc06      	bgt.n	801378e <cos+0x1e>
 8013780:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80137e8 <cos+0x78>
 8013784:	f000 fc60 	bl	8014048 <__kernel_cos>
 8013788:	ec51 0b10 	vmov	r0, r1, d0
 801378c:	e007      	b.n	801379e <cos+0x2e>
 801378e:	4a19      	ldr	r2, [pc, #100]	; (80137f4 <cos+0x84>)
 8013790:	4293      	cmp	r3, r2
 8013792:	dd09      	ble.n	80137a8 <cos+0x38>
 8013794:	ee10 2a10 	vmov	r2, s0
 8013798:	460b      	mov	r3, r1
 801379a:	f7ec fd8d 	bl	80002b8 <__aeabi_dsub>
 801379e:	ec41 0b10 	vmov	d0, r0, r1
 80137a2:	b005      	add	sp, #20
 80137a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80137a8:	4668      	mov	r0, sp
 80137aa:	f000 fa59 	bl	8013c60 <__ieee754_rem_pio2>
 80137ae:	f000 0003 	and.w	r0, r0, #3
 80137b2:	2801      	cmp	r0, #1
 80137b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80137b8:	ed9d 0b00 	vldr	d0, [sp]
 80137bc:	d007      	beq.n	80137ce <cos+0x5e>
 80137be:	2802      	cmp	r0, #2
 80137c0:	d00e      	beq.n	80137e0 <cos+0x70>
 80137c2:	2800      	cmp	r0, #0
 80137c4:	d0de      	beq.n	8013784 <cos+0x14>
 80137c6:	2001      	movs	r0, #1
 80137c8:	f001 f846 	bl	8014858 <__kernel_sin>
 80137cc:	e7dc      	b.n	8013788 <cos+0x18>
 80137ce:	f001 f843 	bl	8014858 <__kernel_sin>
 80137d2:	ec53 2b10 	vmov	r2, r3, d0
 80137d6:	ee10 0a10 	vmov	r0, s0
 80137da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80137de:	e7de      	b.n	801379e <cos+0x2e>
 80137e0:	f000 fc32 	bl	8014048 <__kernel_cos>
 80137e4:	e7f5      	b.n	80137d2 <cos+0x62>
 80137e6:	bf00      	nop
	...
 80137f0:	3fe921fb 	.word	0x3fe921fb
 80137f4:	7fefffff 	.word	0x7fefffff

080137f8 <sin>:
 80137f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80137fa:	ec51 0b10 	vmov	r0, r1, d0
 80137fe:	4a20      	ldr	r2, [pc, #128]	; (8013880 <sin+0x88>)
 8013800:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013804:	4293      	cmp	r3, r2
 8013806:	dc07      	bgt.n	8013818 <sin+0x20>
 8013808:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8013878 <sin+0x80>
 801380c:	2000      	movs	r0, #0
 801380e:	f001 f823 	bl	8014858 <__kernel_sin>
 8013812:	ec51 0b10 	vmov	r0, r1, d0
 8013816:	e007      	b.n	8013828 <sin+0x30>
 8013818:	4a1a      	ldr	r2, [pc, #104]	; (8013884 <sin+0x8c>)
 801381a:	4293      	cmp	r3, r2
 801381c:	dd09      	ble.n	8013832 <sin+0x3a>
 801381e:	ee10 2a10 	vmov	r2, s0
 8013822:	460b      	mov	r3, r1
 8013824:	f7ec fd48 	bl	80002b8 <__aeabi_dsub>
 8013828:	ec41 0b10 	vmov	d0, r0, r1
 801382c:	b005      	add	sp, #20
 801382e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013832:	4668      	mov	r0, sp
 8013834:	f000 fa14 	bl	8013c60 <__ieee754_rem_pio2>
 8013838:	f000 0003 	and.w	r0, r0, #3
 801383c:	2801      	cmp	r0, #1
 801383e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013842:	ed9d 0b00 	vldr	d0, [sp]
 8013846:	d004      	beq.n	8013852 <sin+0x5a>
 8013848:	2802      	cmp	r0, #2
 801384a:	d005      	beq.n	8013858 <sin+0x60>
 801384c:	b970      	cbnz	r0, 801386c <sin+0x74>
 801384e:	2001      	movs	r0, #1
 8013850:	e7dd      	b.n	801380e <sin+0x16>
 8013852:	f000 fbf9 	bl	8014048 <__kernel_cos>
 8013856:	e7dc      	b.n	8013812 <sin+0x1a>
 8013858:	2001      	movs	r0, #1
 801385a:	f000 fffd 	bl	8014858 <__kernel_sin>
 801385e:	ec53 2b10 	vmov	r2, r3, d0
 8013862:	ee10 0a10 	vmov	r0, s0
 8013866:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801386a:	e7dd      	b.n	8013828 <sin+0x30>
 801386c:	f000 fbec 	bl	8014048 <__kernel_cos>
 8013870:	e7f5      	b.n	801385e <sin+0x66>
 8013872:	bf00      	nop
 8013874:	f3af 8000 	nop.w
	...
 8013880:	3fe921fb 	.word	0x3fe921fb
 8013884:	7fefffff 	.word	0x7fefffff

08013888 <exp>:
 8013888:	b5f0      	push	{r4, r5, r6, r7, lr}
 801388a:	ed2d 8b02 	vpush	{d8}
 801388e:	4e38      	ldr	r6, [pc, #224]	; (8013970 <exp+0xe8>)
 8013890:	b08b      	sub	sp, #44	; 0x2c
 8013892:	ec55 4b10 	vmov	r4, r5, d0
 8013896:	f000 f873 	bl	8013980 <__ieee754_exp>
 801389a:	f996 3000 	ldrsb.w	r3, [r6]
 801389e:	eeb0 8a40 	vmov.f32	s16, s0
 80138a2:	eef0 8a60 	vmov.f32	s17, s1
 80138a6:	3301      	adds	r3, #1
 80138a8:	d02c      	beq.n	8013904 <exp+0x7c>
 80138aa:	ec45 4b10 	vmov	d0, r4, r5
 80138ae:	f001 f896 	bl	80149de <finite>
 80138b2:	b338      	cbz	r0, 8013904 <exp+0x7c>
 80138b4:	a32a      	add	r3, pc, #168	; (adr r3, 8013960 <exp+0xd8>)
 80138b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138ba:	4620      	mov	r0, r4
 80138bc:	4629      	mov	r1, r5
 80138be:	f7ed f943 	bl	8000b48 <__aeabi_dcmpgt>
 80138c2:	4607      	mov	r7, r0
 80138c4:	2800      	cmp	r0, #0
 80138c6:	d030      	beq.n	801392a <exp+0xa2>
 80138c8:	2303      	movs	r3, #3
 80138ca:	9300      	str	r3, [sp, #0]
 80138cc:	4b29      	ldr	r3, [pc, #164]	; (8013974 <exp+0xec>)
 80138ce:	9301      	str	r3, [sp, #4]
 80138d0:	2300      	movs	r3, #0
 80138d2:	9308      	str	r3, [sp, #32]
 80138d4:	f996 3000 	ldrsb.w	r3, [r6]
 80138d8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80138dc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80138e0:	b9c3      	cbnz	r3, 8013914 <exp+0x8c>
 80138e2:	4b25      	ldr	r3, [pc, #148]	; (8013978 <exp+0xf0>)
 80138e4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80138e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80138ec:	4668      	mov	r0, sp
 80138ee:	f001 f903 	bl	8014af8 <matherr>
 80138f2:	b1a8      	cbz	r0, 8013920 <exp+0x98>
 80138f4:	9b08      	ldr	r3, [sp, #32]
 80138f6:	b11b      	cbz	r3, 8013900 <exp+0x78>
 80138f8:	f001 f988 	bl	8014c0c <__errno>
 80138fc:	9b08      	ldr	r3, [sp, #32]
 80138fe:	6003      	str	r3, [r0, #0]
 8013900:	ed9d 8b06 	vldr	d8, [sp, #24]
 8013904:	eeb0 0a48 	vmov.f32	s0, s16
 8013908:	eef0 0a68 	vmov.f32	s1, s17
 801390c:	b00b      	add	sp, #44	; 0x2c
 801390e:	ecbd 8b02 	vpop	{d8}
 8013912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013914:	4919      	ldr	r1, [pc, #100]	; (801397c <exp+0xf4>)
 8013916:	2000      	movs	r0, #0
 8013918:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801391c:	2b02      	cmp	r3, #2
 801391e:	d1e5      	bne.n	80138ec <exp+0x64>
 8013920:	f001 f974 	bl	8014c0c <__errno>
 8013924:	2322      	movs	r3, #34	; 0x22
 8013926:	6003      	str	r3, [r0, #0]
 8013928:	e7e4      	b.n	80138f4 <exp+0x6c>
 801392a:	a30f      	add	r3, pc, #60	; (adr r3, 8013968 <exp+0xe0>)
 801392c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013930:	4620      	mov	r0, r4
 8013932:	4629      	mov	r1, r5
 8013934:	f7ed f8ea 	bl	8000b0c <__aeabi_dcmplt>
 8013938:	2800      	cmp	r0, #0
 801393a:	d0e3      	beq.n	8013904 <exp+0x7c>
 801393c:	2304      	movs	r3, #4
 801393e:	9300      	str	r3, [sp, #0]
 8013940:	4b0c      	ldr	r3, [pc, #48]	; (8013974 <exp+0xec>)
 8013942:	9301      	str	r3, [sp, #4]
 8013944:	2200      	movs	r2, #0
 8013946:	2300      	movs	r3, #0
 8013948:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801394c:	9708      	str	r7, [sp, #32]
 801394e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8013952:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8013956:	f996 3000 	ldrsb.w	r3, [r6]
 801395a:	e7df      	b.n	801391c <exp+0x94>
 801395c:	f3af 8000 	nop.w
 8013960:	fefa39ef 	.word	0xfefa39ef
 8013964:	40862e42 	.word	0x40862e42
 8013968:	d52d3051 	.word	0xd52d3051
 801396c:	c0874910 	.word	0xc0874910
 8013970:	2000000a 	.word	0x2000000a
 8013974:	08019688 	.word	0x08019688
 8013978:	47efffff 	.word	0x47efffff
 801397c:	7ff00000 	.word	0x7ff00000

08013980 <__ieee754_exp>:
 8013980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013984:	ec55 4b10 	vmov	r4, r5, d0
 8013988:	4aab      	ldr	r2, [pc, #684]	; (8013c38 <__ieee754_exp+0x2b8>)
 801398a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801398e:	4296      	cmp	r6, r2
 8013990:	ea4f 77d5 	mov.w	r7, r5, lsr #31
 8013994:	d932      	bls.n	80139fc <__ieee754_exp+0x7c>
 8013996:	4aa9      	ldr	r2, [pc, #676]	; (8013c3c <__ieee754_exp+0x2bc>)
 8013998:	4296      	cmp	r6, r2
 801399a:	d913      	bls.n	80139c4 <__ieee754_exp+0x44>
 801399c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80139a0:	4323      	orrs	r3, r4
 80139a2:	ee10 2a10 	vmov	r2, s0
 80139a6:	d007      	beq.n	80139b8 <__ieee754_exp+0x38>
 80139a8:	462b      	mov	r3, r5
 80139aa:	4620      	mov	r0, r4
 80139ac:	4629      	mov	r1, r5
 80139ae:	f7ec fc85 	bl	80002bc <__adddf3>
 80139b2:	4604      	mov	r4, r0
 80139b4:	460d      	mov	r5, r1
 80139b6:	e000      	b.n	80139ba <__ieee754_exp+0x3a>
 80139b8:	b9ef      	cbnz	r7, 80139f6 <__ieee754_exp+0x76>
 80139ba:	ec45 4b10 	vmov	d0, r4, r5
 80139be:	b004      	add	sp, #16
 80139c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139c4:	a386      	add	r3, pc, #536	; (adr r3, 8013be0 <__ieee754_exp+0x260>)
 80139c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ca:	ee10 0a10 	vmov	r0, s0
 80139ce:	4629      	mov	r1, r5
 80139d0:	f7ed f8ba 	bl	8000b48 <__aeabi_dcmpgt>
 80139d4:	b138      	cbz	r0, 80139e6 <__ieee754_exp+0x66>
 80139d6:	a384      	add	r3, pc, #528	; (adr r3, 8013be8 <__ieee754_exp+0x268>)
 80139d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139dc:	4610      	mov	r0, r2
 80139de:	4619      	mov	r1, r3
 80139e0:	f7ec fe22 	bl	8000628 <__aeabi_dmul>
 80139e4:	e7e5      	b.n	80139b2 <__ieee754_exp+0x32>
 80139e6:	a382      	add	r3, pc, #520	; (adr r3, 8013bf0 <__ieee754_exp+0x270>)
 80139e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ec:	4620      	mov	r0, r4
 80139ee:	4629      	mov	r1, r5
 80139f0:	f7ed f88c 	bl	8000b0c <__aeabi_dcmplt>
 80139f4:	b130      	cbz	r0, 8013a04 <__ieee754_exp+0x84>
 80139f6:	2400      	movs	r4, #0
 80139f8:	2500      	movs	r5, #0
 80139fa:	e7de      	b.n	80139ba <__ieee754_exp+0x3a>
 80139fc:	4b90      	ldr	r3, [pc, #576]	; (8013c40 <__ieee754_exp+0x2c0>)
 80139fe:	429e      	cmp	r6, r3
 8013a00:	f240 80a6 	bls.w	8013b50 <__ieee754_exp+0x1d0>
 8013a04:	4b8f      	ldr	r3, [pc, #572]	; (8013c44 <__ieee754_exp+0x2c4>)
 8013a06:	429e      	cmp	r6, r3
 8013a08:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 8013a0c:	d875      	bhi.n	8013afa <__ieee754_exp+0x17a>
 8013a0e:	4b8e      	ldr	r3, [pc, #568]	; (8013c48 <__ieee754_exp+0x2c8>)
 8013a10:	4e8e      	ldr	r6, [pc, #568]	; (8013c4c <__ieee754_exp+0x2cc>)
 8013a12:	4443      	add	r3, r8
 8013a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a18:	4620      	mov	r0, r4
 8013a1a:	4629      	mov	r1, r5
 8013a1c:	f7ec fc4c 	bl	80002b8 <__aeabi_dsub>
 8013a20:	4446      	add	r6, r8
 8013a22:	e9cd 0100 	strd	r0, r1, [sp]
 8013a26:	e9d6 8900 	ldrd	r8, r9, [r6]
 8013a2a:	f1c7 0a01 	rsb	sl, r7, #1
 8013a2e:	ebaa 0a07 	sub.w	sl, sl, r7
 8013a32:	4642      	mov	r2, r8
 8013a34:	464b      	mov	r3, r9
 8013a36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013a3a:	f7ec fc3d 	bl	80002b8 <__aeabi_dsub>
 8013a3e:	4604      	mov	r4, r0
 8013a40:	460d      	mov	r5, r1
 8013a42:	4622      	mov	r2, r4
 8013a44:	462b      	mov	r3, r5
 8013a46:	4620      	mov	r0, r4
 8013a48:	4629      	mov	r1, r5
 8013a4a:	f7ec fded 	bl	8000628 <__aeabi_dmul>
 8013a4e:	a36a      	add	r3, pc, #424	; (adr r3, 8013bf8 <__ieee754_exp+0x278>)
 8013a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a54:	4606      	mov	r6, r0
 8013a56:	460f      	mov	r7, r1
 8013a58:	f7ec fde6 	bl	8000628 <__aeabi_dmul>
 8013a5c:	a368      	add	r3, pc, #416	; (adr r3, 8013c00 <__ieee754_exp+0x280>)
 8013a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a62:	f7ec fc29 	bl	80002b8 <__aeabi_dsub>
 8013a66:	4632      	mov	r2, r6
 8013a68:	463b      	mov	r3, r7
 8013a6a:	f7ec fddd 	bl	8000628 <__aeabi_dmul>
 8013a6e:	a366      	add	r3, pc, #408	; (adr r3, 8013c08 <__ieee754_exp+0x288>)
 8013a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a74:	f7ec fc22 	bl	80002bc <__adddf3>
 8013a78:	4632      	mov	r2, r6
 8013a7a:	463b      	mov	r3, r7
 8013a7c:	f7ec fdd4 	bl	8000628 <__aeabi_dmul>
 8013a80:	a363      	add	r3, pc, #396	; (adr r3, 8013c10 <__ieee754_exp+0x290>)
 8013a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a86:	f7ec fc17 	bl	80002b8 <__aeabi_dsub>
 8013a8a:	4632      	mov	r2, r6
 8013a8c:	463b      	mov	r3, r7
 8013a8e:	f7ec fdcb 	bl	8000628 <__aeabi_dmul>
 8013a92:	a361      	add	r3, pc, #388	; (adr r3, 8013c18 <__ieee754_exp+0x298>)
 8013a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a98:	f7ec fc10 	bl	80002bc <__adddf3>
 8013a9c:	4632      	mov	r2, r6
 8013a9e:	463b      	mov	r3, r7
 8013aa0:	f7ec fdc2 	bl	8000628 <__aeabi_dmul>
 8013aa4:	4602      	mov	r2, r0
 8013aa6:	460b      	mov	r3, r1
 8013aa8:	4620      	mov	r0, r4
 8013aaa:	4629      	mov	r1, r5
 8013aac:	f7ec fc04 	bl	80002b8 <__aeabi_dsub>
 8013ab0:	4602      	mov	r2, r0
 8013ab2:	460b      	mov	r3, r1
 8013ab4:	4606      	mov	r6, r0
 8013ab6:	460f      	mov	r7, r1
 8013ab8:	4620      	mov	r0, r4
 8013aba:	4629      	mov	r1, r5
 8013abc:	f7ec fdb4 	bl	8000628 <__aeabi_dmul>
 8013ac0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ac4:	f1ba 0f00 	cmp.w	sl, #0
 8013ac8:	d15c      	bne.n	8013b84 <__ieee754_exp+0x204>
 8013aca:	2200      	movs	r2, #0
 8013acc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013ad0:	4630      	mov	r0, r6
 8013ad2:	4639      	mov	r1, r7
 8013ad4:	f7ec fbf0 	bl	80002b8 <__aeabi_dsub>
 8013ad8:	4602      	mov	r2, r0
 8013ada:	460b      	mov	r3, r1
 8013adc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ae0:	f7ec fecc 	bl	800087c <__aeabi_ddiv>
 8013ae4:	4622      	mov	r2, r4
 8013ae6:	462b      	mov	r3, r5
 8013ae8:	f7ec fbe6 	bl	80002b8 <__aeabi_dsub>
 8013aec:	4602      	mov	r2, r0
 8013aee:	460b      	mov	r3, r1
 8013af0:	2000      	movs	r0, #0
 8013af2:	4957      	ldr	r1, [pc, #348]	; (8013c50 <__ieee754_exp+0x2d0>)
 8013af4:	f7ec fbe0 	bl	80002b8 <__aeabi_dsub>
 8013af8:	e75b      	b.n	80139b2 <__ieee754_exp+0x32>
 8013afa:	4e56      	ldr	r6, [pc, #344]	; (8013c54 <__ieee754_exp+0x2d4>)
 8013afc:	a348      	add	r3, pc, #288	; (adr r3, 8013c20 <__ieee754_exp+0x2a0>)
 8013afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b02:	4446      	add	r6, r8
 8013b04:	4620      	mov	r0, r4
 8013b06:	4629      	mov	r1, r5
 8013b08:	f7ec fd8e 	bl	8000628 <__aeabi_dmul>
 8013b0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013b10:	f7ec fbd4 	bl	80002bc <__adddf3>
 8013b14:	f7ed f838 	bl	8000b88 <__aeabi_d2iz>
 8013b18:	4682      	mov	sl, r0
 8013b1a:	f7ec fd1b 	bl	8000554 <__aeabi_i2d>
 8013b1e:	a342      	add	r3, pc, #264	; (adr r3, 8013c28 <__ieee754_exp+0x2a8>)
 8013b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b24:	4606      	mov	r6, r0
 8013b26:	460f      	mov	r7, r1
 8013b28:	f7ec fd7e 	bl	8000628 <__aeabi_dmul>
 8013b2c:	4602      	mov	r2, r0
 8013b2e:	460b      	mov	r3, r1
 8013b30:	4620      	mov	r0, r4
 8013b32:	4629      	mov	r1, r5
 8013b34:	f7ec fbc0 	bl	80002b8 <__aeabi_dsub>
 8013b38:	a33d      	add	r3, pc, #244	; (adr r3, 8013c30 <__ieee754_exp+0x2b0>)
 8013b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b3e:	e9cd 0100 	strd	r0, r1, [sp]
 8013b42:	4630      	mov	r0, r6
 8013b44:	4639      	mov	r1, r7
 8013b46:	f7ec fd6f 	bl	8000628 <__aeabi_dmul>
 8013b4a:	4680      	mov	r8, r0
 8013b4c:	4689      	mov	r9, r1
 8013b4e:	e770      	b.n	8013a32 <__ieee754_exp+0xb2>
 8013b50:	4b41      	ldr	r3, [pc, #260]	; (8013c58 <__ieee754_exp+0x2d8>)
 8013b52:	429e      	cmp	r6, r3
 8013b54:	d811      	bhi.n	8013b7a <__ieee754_exp+0x1fa>
 8013b56:	a324      	add	r3, pc, #144	; (adr r3, 8013be8 <__ieee754_exp+0x268>)
 8013b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b5c:	ee10 0a10 	vmov	r0, s0
 8013b60:	4629      	mov	r1, r5
 8013b62:	f7ec fbab 	bl	80002bc <__adddf3>
 8013b66:	2200      	movs	r2, #0
 8013b68:	4b39      	ldr	r3, [pc, #228]	; (8013c50 <__ieee754_exp+0x2d0>)
 8013b6a:	f7ec ffed 	bl	8000b48 <__aeabi_dcmpgt>
 8013b6e:	b138      	cbz	r0, 8013b80 <__ieee754_exp+0x200>
 8013b70:	2200      	movs	r2, #0
 8013b72:	4b37      	ldr	r3, [pc, #220]	; (8013c50 <__ieee754_exp+0x2d0>)
 8013b74:	4620      	mov	r0, r4
 8013b76:	4629      	mov	r1, r5
 8013b78:	e719      	b.n	80139ae <__ieee754_exp+0x2e>
 8013b7a:	f04f 0a00 	mov.w	sl, #0
 8013b7e:	e760      	b.n	8013a42 <__ieee754_exp+0xc2>
 8013b80:	4682      	mov	sl, r0
 8013b82:	e75e      	b.n	8013a42 <__ieee754_exp+0xc2>
 8013b84:	4632      	mov	r2, r6
 8013b86:	463b      	mov	r3, r7
 8013b88:	2000      	movs	r0, #0
 8013b8a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8013b8e:	f7ec fb93 	bl	80002b8 <__aeabi_dsub>
 8013b92:	4602      	mov	r2, r0
 8013b94:	460b      	mov	r3, r1
 8013b96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b9a:	f7ec fe6f 	bl	800087c <__aeabi_ddiv>
 8013b9e:	4602      	mov	r2, r0
 8013ba0:	460b      	mov	r3, r1
 8013ba2:	4640      	mov	r0, r8
 8013ba4:	4649      	mov	r1, r9
 8013ba6:	f7ec fb87 	bl	80002b8 <__aeabi_dsub>
 8013baa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013bae:	f7ec fb83 	bl	80002b8 <__aeabi_dsub>
 8013bb2:	4602      	mov	r2, r0
 8013bb4:	460b      	mov	r3, r1
 8013bb6:	2000      	movs	r0, #0
 8013bb8:	4925      	ldr	r1, [pc, #148]	; (8013c50 <__ieee754_exp+0x2d0>)
 8013bba:	f7ec fb7d 	bl	80002b8 <__aeabi_dsub>
 8013bbe:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8013bc2:	4592      	cmp	sl, r2
 8013bc4:	db02      	blt.n	8013bcc <__ieee754_exp+0x24c>
 8013bc6:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8013bca:	e6f2      	b.n	80139b2 <__ieee754_exp+0x32>
 8013bcc:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8013bd0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8013bda:	e701      	b.n	80139e0 <__ieee754_exp+0x60>
 8013bdc:	f3af 8000 	nop.w
 8013be0:	fefa39ef 	.word	0xfefa39ef
 8013be4:	40862e42 	.word	0x40862e42
 8013be8:	8800759c 	.word	0x8800759c
 8013bec:	7e37e43c 	.word	0x7e37e43c
 8013bf0:	d52d3051 	.word	0xd52d3051
 8013bf4:	c0874910 	.word	0xc0874910
 8013bf8:	72bea4d0 	.word	0x72bea4d0
 8013bfc:	3e663769 	.word	0x3e663769
 8013c00:	c5d26bf1 	.word	0xc5d26bf1
 8013c04:	3ebbbd41 	.word	0x3ebbbd41
 8013c08:	af25de2c 	.word	0xaf25de2c
 8013c0c:	3f11566a 	.word	0x3f11566a
 8013c10:	16bebd93 	.word	0x16bebd93
 8013c14:	3f66c16c 	.word	0x3f66c16c
 8013c18:	5555553e 	.word	0x5555553e
 8013c1c:	3fc55555 	.word	0x3fc55555
 8013c20:	652b82fe 	.word	0x652b82fe
 8013c24:	3ff71547 	.word	0x3ff71547
 8013c28:	fee00000 	.word	0xfee00000
 8013c2c:	3fe62e42 	.word	0x3fe62e42
 8013c30:	35793c76 	.word	0x35793c76
 8013c34:	3dea39ef 	.word	0x3dea39ef
 8013c38:	40862e41 	.word	0x40862e41
 8013c3c:	7fefffff 	.word	0x7fefffff
 8013c40:	3fd62e42 	.word	0x3fd62e42
 8013c44:	3ff0a2b1 	.word	0x3ff0a2b1
 8013c48:	080196a0 	.word	0x080196a0
 8013c4c:	080196b0 	.word	0x080196b0
 8013c50:	3ff00000 	.word	0x3ff00000
 8013c54:	08019690 	.word	0x08019690
 8013c58:	3e2fffff 	.word	0x3e2fffff
 8013c5c:	00000000 	.word	0x00000000

08013c60 <__ieee754_rem_pio2>:
 8013c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c64:	ec57 6b10 	vmov	r6, r7, d0
 8013c68:	4bc3      	ldr	r3, [pc, #780]	; (8013f78 <__ieee754_rem_pio2+0x318>)
 8013c6a:	b08d      	sub	sp, #52	; 0x34
 8013c6c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8013c70:	4598      	cmp	r8, r3
 8013c72:	4604      	mov	r4, r0
 8013c74:	9704      	str	r7, [sp, #16]
 8013c76:	dc07      	bgt.n	8013c88 <__ieee754_rem_pio2+0x28>
 8013c78:	2200      	movs	r2, #0
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	ed84 0b00 	vstr	d0, [r4]
 8013c80:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8013c84:	2500      	movs	r5, #0
 8013c86:	e027      	b.n	8013cd8 <__ieee754_rem_pio2+0x78>
 8013c88:	4bbc      	ldr	r3, [pc, #752]	; (8013f7c <__ieee754_rem_pio2+0x31c>)
 8013c8a:	4598      	cmp	r8, r3
 8013c8c:	dc75      	bgt.n	8013d7a <__ieee754_rem_pio2+0x11a>
 8013c8e:	9b04      	ldr	r3, [sp, #16]
 8013c90:	4dbb      	ldr	r5, [pc, #748]	; (8013f80 <__ieee754_rem_pio2+0x320>)
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	ee10 0a10 	vmov	r0, s0
 8013c98:	a3a9      	add	r3, pc, #676	; (adr r3, 8013f40 <__ieee754_rem_pio2+0x2e0>)
 8013c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c9e:	4639      	mov	r1, r7
 8013ca0:	dd36      	ble.n	8013d10 <__ieee754_rem_pio2+0xb0>
 8013ca2:	f7ec fb09 	bl	80002b8 <__aeabi_dsub>
 8013ca6:	45a8      	cmp	r8, r5
 8013ca8:	4606      	mov	r6, r0
 8013caa:	460f      	mov	r7, r1
 8013cac:	d018      	beq.n	8013ce0 <__ieee754_rem_pio2+0x80>
 8013cae:	a3a6      	add	r3, pc, #664	; (adr r3, 8013f48 <__ieee754_rem_pio2+0x2e8>)
 8013cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cb4:	f7ec fb00 	bl	80002b8 <__aeabi_dsub>
 8013cb8:	4602      	mov	r2, r0
 8013cba:	460b      	mov	r3, r1
 8013cbc:	e9c4 2300 	strd	r2, r3, [r4]
 8013cc0:	4630      	mov	r0, r6
 8013cc2:	4639      	mov	r1, r7
 8013cc4:	f7ec faf8 	bl	80002b8 <__aeabi_dsub>
 8013cc8:	a39f      	add	r3, pc, #636	; (adr r3, 8013f48 <__ieee754_rem_pio2+0x2e8>)
 8013cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cce:	f7ec faf3 	bl	80002b8 <__aeabi_dsub>
 8013cd2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013cd6:	2501      	movs	r5, #1
 8013cd8:	4628      	mov	r0, r5
 8013cda:	b00d      	add	sp, #52	; 0x34
 8013cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ce0:	a39b      	add	r3, pc, #620	; (adr r3, 8013f50 <__ieee754_rem_pio2+0x2f0>)
 8013ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ce6:	f7ec fae7 	bl	80002b8 <__aeabi_dsub>
 8013cea:	a39b      	add	r3, pc, #620	; (adr r3, 8013f58 <__ieee754_rem_pio2+0x2f8>)
 8013cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cf0:	4606      	mov	r6, r0
 8013cf2:	460f      	mov	r7, r1
 8013cf4:	f7ec fae0 	bl	80002b8 <__aeabi_dsub>
 8013cf8:	4602      	mov	r2, r0
 8013cfa:	460b      	mov	r3, r1
 8013cfc:	e9c4 2300 	strd	r2, r3, [r4]
 8013d00:	4630      	mov	r0, r6
 8013d02:	4639      	mov	r1, r7
 8013d04:	f7ec fad8 	bl	80002b8 <__aeabi_dsub>
 8013d08:	a393      	add	r3, pc, #588	; (adr r3, 8013f58 <__ieee754_rem_pio2+0x2f8>)
 8013d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d0e:	e7de      	b.n	8013cce <__ieee754_rem_pio2+0x6e>
 8013d10:	f7ec fad4 	bl	80002bc <__adddf3>
 8013d14:	45a8      	cmp	r8, r5
 8013d16:	4606      	mov	r6, r0
 8013d18:	460f      	mov	r7, r1
 8013d1a:	d016      	beq.n	8013d4a <__ieee754_rem_pio2+0xea>
 8013d1c:	a38a      	add	r3, pc, #552	; (adr r3, 8013f48 <__ieee754_rem_pio2+0x2e8>)
 8013d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d22:	f7ec facb 	bl	80002bc <__adddf3>
 8013d26:	4602      	mov	r2, r0
 8013d28:	460b      	mov	r3, r1
 8013d2a:	e9c4 2300 	strd	r2, r3, [r4]
 8013d2e:	4630      	mov	r0, r6
 8013d30:	4639      	mov	r1, r7
 8013d32:	f7ec fac1 	bl	80002b8 <__aeabi_dsub>
 8013d36:	a384      	add	r3, pc, #528	; (adr r3, 8013f48 <__ieee754_rem_pio2+0x2e8>)
 8013d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d3c:	f7ec fabe 	bl	80002bc <__adddf3>
 8013d40:	f04f 35ff 	mov.w	r5, #4294967295
 8013d44:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013d48:	e7c6      	b.n	8013cd8 <__ieee754_rem_pio2+0x78>
 8013d4a:	a381      	add	r3, pc, #516	; (adr r3, 8013f50 <__ieee754_rem_pio2+0x2f0>)
 8013d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d50:	f7ec fab4 	bl	80002bc <__adddf3>
 8013d54:	a380      	add	r3, pc, #512	; (adr r3, 8013f58 <__ieee754_rem_pio2+0x2f8>)
 8013d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d5a:	4606      	mov	r6, r0
 8013d5c:	460f      	mov	r7, r1
 8013d5e:	f7ec faad 	bl	80002bc <__adddf3>
 8013d62:	4602      	mov	r2, r0
 8013d64:	460b      	mov	r3, r1
 8013d66:	e9c4 2300 	strd	r2, r3, [r4]
 8013d6a:	4630      	mov	r0, r6
 8013d6c:	4639      	mov	r1, r7
 8013d6e:	f7ec faa3 	bl	80002b8 <__aeabi_dsub>
 8013d72:	a379      	add	r3, pc, #484	; (adr r3, 8013f58 <__ieee754_rem_pio2+0x2f8>)
 8013d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d78:	e7e0      	b.n	8013d3c <__ieee754_rem_pio2+0xdc>
 8013d7a:	4b82      	ldr	r3, [pc, #520]	; (8013f84 <__ieee754_rem_pio2+0x324>)
 8013d7c:	4598      	cmp	r8, r3
 8013d7e:	f300 80d0 	bgt.w	8013f22 <__ieee754_rem_pio2+0x2c2>
 8013d82:	f000 fe23 	bl	80149cc <fabs>
 8013d86:	ec57 6b10 	vmov	r6, r7, d0
 8013d8a:	ee10 0a10 	vmov	r0, s0
 8013d8e:	a374      	add	r3, pc, #464	; (adr r3, 8013f60 <__ieee754_rem_pio2+0x300>)
 8013d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d94:	4639      	mov	r1, r7
 8013d96:	f7ec fc47 	bl	8000628 <__aeabi_dmul>
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	4b7a      	ldr	r3, [pc, #488]	; (8013f88 <__ieee754_rem_pio2+0x328>)
 8013d9e:	f7ec fa8d 	bl	80002bc <__adddf3>
 8013da2:	f7ec fef1 	bl	8000b88 <__aeabi_d2iz>
 8013da6:	4605      	mov	r5, r0
 8013da8:	f7ec fbd4 	bl	8000554 <__aeabi_i2d>
 8013dac:	a364      	add	r3, pc, #400	; (adr r3, 8013f40 <__ieee754_rem_pio2+0x2e0>)
 8013dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013db2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013db6:	f7ec fc37 	bl	8000628 <__aeabi_dmul>
 8013dba:	4602      	mov	r2, r0
 8013dbc:	460b      	mov	r3, r1
 8013dbe:	4630      	mov	r0, r6
 8013dc0:	4639      	mov	r1, r7
 8013dc2:	f7ec fa79 	bl	80002b8 <__aeabi_dsub>
 8013dc6:	a360      	add	r3, pc, #384	; (adr r3, 8013f48 <__ieee754_rem_pio2+0x2e8>)
 8013dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dcc:	4682      	mov	sl, r0
 8013dce:	468b      	mov	fp, r1
 8013dd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013dd4:	f7ec fc28 	bl	8000628 <__aeabi_dmul>
 8013dd8:	2d1f      	cmp	r5, #31
 8013dda:	4606      	mov	r6, r0
 8013ddc:	460f      	mov	r7, r1
 8013dde:	dc0c      	bgt.n	8013dfa <__ieee754_rem_pio2+0x19a>
 8013de0:	1e6a      	subs	r2, r5, #1
 8013de2:	4b6a      	ldr	r3, [pc, #424]	; (8013f8c <__ieee754_rem_pio2+0x32c>)
 8013de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013de8:	4543      	cmp	r3, r8
 8013dea:	d006      	beq.n	8013dfa <__ieee754_rem_pio2+0x19a>
 8013dec:	4632      	mov	r2, r6
 8013dee:	463b      	mov	r3, r7
 8013df0:	4650      	mov	r0, sl
 8013df2:	4659      	mov	r1, fp
 8013df4:	f7ec fa60 	bl	80002b8 <__aeabi_dsub>
 8013df8:	e00e      	b.n	8013e18 <__ieee754_rem_pio2+0x1b8>
 8013dfa:	4632      	mov	r2, r6
 8013dfc:	463b      	mov	r3, r7
 8013dfe:	4650      	mov	r0, sl
 8013e00:	4659      	mov	r1, fp
 8013e02:	f7ec fa59 	bl	80002b8 <__aeabi_dsub>
 8013e06:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013e0a:	9305      	str	r3, [sp, #20]
 8013e0c:	9a05      	ldr	r2, [sp, #20]
 8013e0e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013e12:	1ad3      	subs	r3, r2, r3
 8013e14:	2b10      	cmp	r3, #16
 8013e16:	dc02      	bgt.n	8013e1e <__ieee754_rem_pio2+0x1be>
 8013e18:	e9c4 0100 	strd	r0, r1, [r4]
 8013e1c:	e039      	b.n	8013e92 <__ieee754_rem_pio2+0x232>
 8013e1e:	a34c      	add	r3, pc, #304	; (adr r3, 8013f50 <__ieee754_rem_pio2+0x2f0>)
 8013e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e28:	f7ec fbfe 	bl	8000628 <__aeabi_dmul>
 8013e2c:	4606      	mov	r6, r0
 8013e2e:	460f      	mov	r7, r1
 8013e30:	4602      	mov	r2, r0
 8013e32:	460b      	mov	r3, r1
 8013e34:	4650      	mov	r0, sl
 8013e36:	4659      	mov	r1, fp
 8013e38:	f7ec fa3e 	bl	80002b8 <__aeabi_dsub>
 8013e3c:	4602      	mov	r2, r0
 8013e3e:	460b      	mov	r3, r1
 8013e40:	4680      	mov	r8, r0
 8013e42:	4689      	mov	r9, r1
 8013e44:	4650      	mov	r0, sl
 8013e46:	4659      	mov	r1, fp
 8013e48:	f7ec fa36 	bl	80002b8 <__aeabi_dsub>
 8013e4c:	4632      	mov	r2, r6
 8013e4e:	463b      	mov	r3, r7
 8013e50:	f7ec fa32 	bl	80002b8 <__aeabi_dsub>
 8013e54:	a340      	add	r3, pc, #256	; (adr r3, 8013f58 <__ieee754_rem_pio2+0x2f8>)
 8013e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e5a:	4606      	mov	r6, r0
 8013e5c:	460f      	mov	r7, r1
 8013e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e62:	f7ec fbe1 	bl	8000628 <__aeabi_dmul>
 8013e66:	4632      	mov	r2, r6
 8013e68:	463b      	mov	r3, r7
 8013e6a:	f7ec fa25 	bl	80002b8 <__aeabi_dsub>
 8013e6e:	4602      	mov	r2, r0
 8013e70:	460b      	mov	r3, r1
 8013e72:	4606      	mov	r6, r0
 8013e74:	460f      	mov	r7, r1
 8013e76:	4640      	mov	r0, r8
 8013e78:	4649      	mov	r1, r9
 8013e7a:	f7ec fa1d 	bl	80002b8 <__aeabi_dsub>
 8013e7e:	9a05      	ldr	r2, [sp, #20]
 8013e80:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013e84:	1ad3      	subs	r3, r2, r3
 8013e86:	2b31      	cmp	r3, #49	; 0x31
 8013e88:	dc20      	bgt.n	8013ecc <__ieee754_rem_pio2+0x26c>
 8013e8a:	e9c4 0100 	strd	r0, r1, [r4]
 8013e8e:	46c2      	mov	sl, r8
 8013e90:	46cb      	mov	fp, r9
 8013e92:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013e96:	4650      	mov	r0, sl
 8013e98:	4642      	mov	r2, r8
 8013e9a:	464b      	mov	r3, r9
 8013e9c:	4659      	mov	r1, fp
 8013e9e:	f7ec fa0b 	bl	80002b8 <__aeabi_dsub>
 8013ea2:	463b      	mov	r3, r7
 8013ea4:	4632      	mov	r2, r6
 8013ea6:	f7ec fa07 	bl	80002b8 <__aeabi_dsub>
 8013eaa:	9b04      	ldr	r3, [sp, #16]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013eb2:	f6bf af11 	bge.w	8013cd8 <__ieee754_rem_pio2+0x78>
 8013eb6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013eba:	6063      	str	r3, [r4, #4]
 8013ebc:	f8c4 8000 	str.w	r8, [r4]
 8013ec0:	60a0      	str	r0, [r4, #8]
 8013ec2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013ec6:	60e3      	str	r3, [r4, #12]
 8013ec8:	426d      	negs	r5, r5
 8013eca:	e705      	b.n	8013cd8 <__ieee754_rem_pio2+0x78>
 8013ecc:	a326      	add	r3, pc, #152	; (adr r3, 8013f68 <__ieee754_rem_pio2+0x308>)
 8013ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ed2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ed6:	f7ec fba7 	bl	8000628 <__aeabi_dmul>
 8013eda:	4606      	mov	r6, r0
 8013edc:	460f      	mov	r7, r1
 8013ede:	4602      	mov	r2, r0
 8013ee0:	460b      	mov	r3, r1
 8013ee2:	4640      	mov	r0, r8
 8013ee4:	4649      	mov	r1, r9
 8013ee6:	f7ec f9e7 	bl	80002b8 <__aeabi_dsub>
 8013eea:	4602      	mov	r2, r0
 8013eec:	460b      	mov	r3, r1
 8013eee:	4682      	mov	sl, r0
 8013ef0:	468b      	mov	fp, r1
 8013ef2:	4640      	mov	r0, r8
 8013ef4:	4649      	mov	r1, r9
 8013ef6:	f7ec f9df 	bl	80002b8 <__aeabi_dsub>
 8013efa:	4632      	mov	r2, r6
 8013efc:	463b      	mov	r3, r7
 8013efe:	f7ec f9db 	bl	80002b8 <__aeabi_dsub>
 8013f02:	a31b      	add	r3, pc, #108	; (adr r3, 8013f70 <__ieee754_rem_pio2+0x310>)
 8013f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f08:	4606      	mov	r6, r0
 8013f0a:	460f      	mov	r7, r1
 8013f0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013f10:	f7ec fb8a 	bl	8000628 <__aeabi_dmul>
 8013f14:	4632      	mov	r2, r6
 8013f16:	463b      	mov	r3, r7
 8013f18:	f7ec f9ce 	bl	80002b8 <__aeabi_dsub>
 8013f1c:	4606      	mov	r6, r0
 8013f1e:	460f      	mov	r7, r1
 8013f20:	e764      	b.n	8013dec <__ieee754_rem_pio2+0x18c>
 8013f22:	4b1b      	ldr	r3, [pc, #108]	; (8013f90 <__ieee754_rem_pio2+0x330>)
 8013f24:	4598      	cmp	r8, r3
 8013f26:	dd35      	ble.n	8013f94 <__ieee754_rem_pio2+0x334>
 8013f28:	ee10 2a10 	vmov	r2, s0
 8013f2c:	463b      	mov	r3, r7
 8013f2e:	4630      	mov	r0, r6
 8013f30:	4639      	mov	r1, r7
 8013f32:	f7ec f9c1 	bl	80002b8 <__aeabi_dsub>
 8013f36:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013f3a:	e9c4 0100 	strd	r0, r1, [r4]
 8013f3e:	e6a1      	b.n	8013c84 <__ieee754_rem_pio2+0x24>
 8013f40:	54400000 	.word	0x54400000
 8013f44:	3ff921fb 	.word	0x3ff921fb
 8013f48:	1a626331 	.word	0x1a626331
 8013f4c:	3dd0b461 	.word	0x3dd0b461
 8013f50:	1a600000 	.word	0x1a600000
 8013f54:	3dd0b461 	.word	0x3dd0b461
 8013f58:	2e037073 	.word	0x2e037073
 8013f5c:	3ba3198a 	.word	0x3ba3198a
 8013f60:	6dc9c883 	.word	0x6dc9c883
 8013f64:	3fe45f30 	.word	0x3fe45f30
 8013f68:	2e000000 	.word	0x2e000000
 8013f6c:	3ba3198a 	.word	0x3ba3198a
 8013f70:	252049c1 	.word	0x252049c1
 8013f74:	397b839a 	.word	0x397b839a
 8013f78:	3fe921fb 	.word	0x3fe921fb
 8013f7c:	4002d97b 	.word	0x4002d97b
 8013f80:	3ff921fb 	.word	0x3ff921fb
 8013f84:	413921fb 	.word	0x413921fb
 8013f88:	3fe00000 	.word	0x3fe00000
 8013f8c:	080196c0 	.word	0x080196c0
 8013f90:	7fefffff 	.word	0x7fefffff
 8013f94:	ea4f 5528 	mov.w	r5, r8, asr #20
 8013f98:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8013f9c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8013fa0:	4630      	mov	r0, r6
 8013fa2:	460f      	mov	r7, r1
 8013fa4:	f7ec fdf0 	bl	8000b88 <__aeabi_d2iz>
 8013fa8:	f7ec fad4 	bl	8000554 <__aeabi_i2d>
 8013fac:	4602      	mov	r2, r0
 8013fae:	460b      	mov	r3, r1
 8013fb0:	4630      	mov	r0, r6
 8013fb2:	4639      	mov	r1, r7
 8013fb4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013fb8:	f7ec f97e 	bl	80002b8 <__aeabi_dsub>
 8013fbc:	2200      	movs	r2, #0
 8013fbe:	4b1f      	ldr	r3, [pc, #124]	; (801403c <__ieee754_rem_pio2+0x3dc>)
 8013fc0:	f7ec fb32 	bl	8000628 <__aeabi_dmul>
 8013fc4:	460f      	mov	r7, r1
 8013fc6:	4606      	mov	r6, r0
 8013fc8:	f7ec fdde 	bl	8000b88 <__aeabi_d2iz>
 8013fcc:	f7ec fac2 	bl	8000554 <__aeabi_i2d>
 8013fd0:	4602      	mov	r2, r0
 8013fd2:	460b      	mov	r3, r1
 8013fd4:	4630      	mov	r0, r6
 8013fd6:	4639      	mov	r1, r7
 8013fd8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013fdc:	f7ec f96c 	bl	80002b8 <__aeabi_dsub>
 8013fe0:	2200      	movs	r2, #0
 8013fe2:	4b16      	ldr	r3, [pc, #88]	; (801403c <__ieee754_rem_pio2+0x3dc>)
 8013fe4:	f7ec fb20 	bl	8000628 <__aeabi_dmul>
 8013fe8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013fec:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8013ff0:	f04f 0803 	mov.w	r8, #3
 8013ff4:	2600      	movs	r6, #0
 8013ff6:	2700      	movs	r7, #0
 8013ff8:	4632      	mov	r2, r6
 8013ffa:	463b      	mov	r3, r7
 8013ffc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014000:	f108 3aff 	add.w	sl, r8, #4294967295
 8014004:	f7ec fd78 	bl	8000af8 <__aeabi_dcmpeq>
 8014008:	b9b0      	cbnz	r0, 8014038 <__ieee754_rem_pio2+0x3d8>
 801400a:	4b0d      	ldr	r3, [pc, #52]	; (8014040 <__ieee754_rem_pio2+0x3e0>)
 801400c:	9301      	str	r3, [sp, #4]
 801400e:	2302      	movs	r3, #2
 8014010:	9300      	str	r3, [sp, #0]
 8014012:	462a      	mov	r2, r5
 8014014:	4643      	mov	r3, r8
 8014016:	4621      	mov	r1, r4
 8014018:	a806      	add	r0, sp, #24
 801401a:	f000 f8dd 	bl	80141d8 <__kernel_rem_pio2>
 801401e:	9b04      	ldr	r3, [sp, #16]
 8014020:	2b00      	cmp	r3, #0
 8014022:	4605      	mov	r5, r0
 8014024:	f6bf ae58 	bge.w	8013cd8 <__ieee754_rem_pio2+0x78>
 8014028:	6863      	ldr	r3, [r4, #4]
 801402a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801402e:	6063      	str	r3, [r4, #4]
 8014030:	68e3      	ldr	r3, [r4, #12]
 8014032:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014036:	e746      	b.n	8013ec6 <__ieee754_rem_pio2+0x266>
 8014038:	46d0      	mov	r8, sl
 801403a:	e7dd      	b.n	8013ff8 <__ieee754_rem_pio2+0x398>
 801403c:	41700000 	.word	0x41700000
 8014040:	08019740 	.word	0x08019740
 8014044:	00000000 	.word	0x00000000

08014048 <__kernel_cos>:
 8014048:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801404c:	ec59 8b10 	vmov	r8, r9, d0
 8014050:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8014054:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8014058:	ed2d 8b02 	vpush	{d8}
 801405c:	eeb0 8a41 	vmov.f32	s16, s2
 8014060:	eef0 8a61 	vmov.f32	s17, s3
 8014064:	da07      	bge.n	8014076 <__kernel_cos+0x2e>
 8014066:	ee10 0a10 	vmov	r0, s0
 801406a:	4649      	mov	r1, r9
 801406c:	f7ec fd8c 	bl	8000b88 <__aeabi_d2iz>
 8014070:	2800      	cmp	r0, #0
 8014072:	f000 8089 	beq.w	8014188 <__kernel_cos+0x140>
 8014076:	4642      	mov	r2, r8
 8014078:	464b      	mov	r3, r9
 801407a:	4640      	mov	r0, r8
 801407c:	4649      	mov	r1, r9
 801407e:	f7ec fad3 	bl	8000628 <__aeabi_dmul>
 8014082:	2200      	movs	r2, #0
 8014084:	4b4e      	ldr	r3, [pc, #312]	; (80141c0 <__kernel_cos+0x178>)
 8014086:	4604      	mov	r4, r0
 8014088:	460d      	mov	r5, r1
 801408a:	f7ec facd 	bl	8000628 <__aeabi_dmul>
 801408e:	a340      	add	r3, pc, #256	; (adr r3, 8014190 <__kernel_cos+0x148>)
 8014090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014094:	4682      	mov	sl, r0
 8014096:	468b      	mov	fp, r1
 8014098:	4620      	mov	r0, r4
 801409a:	4629      	mov	r1, r5
 801409c:	f7ec fac4 	bl	8000628 <__aeabi_dmul>
 80140a0:	a33d      	add	r3, pc, #244	; (adr r3, 8014198 <__kernel_cos+0x150>)
 80140a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140a6:	f7ec f909 	bl	80002bc <__adddf3>
 80140aa:	4622      	mov	r2, r4
 80140ac:	462b      	mov	r3, r5
 80140ae:	f7ec fabb 	bl	8000628 <__aeabi_dmul>
 80140b2:	a33b      	add	r3, pc, #236	; (adr r3, 80141a0 <__kernel_cos+0x158>)
 80140b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140b8:	f7ec f8fe 	bl	80002b8 <__aeabi_dsub>
 80140bc:	4622      	mov	r2, r4
 80140be:	462b      	mov	r3, r5
 80140c0:	f7ec fab2 	bl	8000628 <__aeabi_dmul>
 80140c4:	a338      	add	r3, pc, #224	; (adr r3, 80141a8 <__kernel_cos+0x160>)
 80140c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140ca:	f7ec f8f7 	bl	80002bc <__adddf3>
 80140ce:	4622      	mov	r2, r4
 80140d0:	462b      	mov	r3, r5
 80140d2:	f7ec faa9 	bl	8000628 <__aeabi_dmul>
 80140d6:	a336      	add	r3, pc, #216	; (adr r3, 80141b0 <__kernel_cos+0x168>)
 80140d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140dc:	f7ec f8ec 	bl	80002b8 <__aeabi_dsub>
 80140e0:	4622      	mov	r2, r4
 80140e2:	462b      	mov	r3, r5
 80140e4:	f7ec faa0 	bl	8000628 <__aeabi_dmul>
 80140e8:	a333      	add	r3, pc, #204	; (adr r3, 80141b8 <__kernel_cos+0x170>)
 80140ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140ee:	f7ec f8e5 	bl	80002bc <__adddf3>
 80140f2:	4622      	mov	r2, r4
 80140f4:	462b      	mov	r3, r5
 80140f6:	f7ec fa97 	bl	8000628 <__aeabi_dmul>
 80140fa:	4622      	mov	r2, r4
 80140fc:	462b      	mov	r3, r5
 80140fe:	f7ec fa93 	bl	8000628 <__aeabi_dmul>
 8014102:	ec53 2b18 	vmov	r2, r3, d8
 8014106:	4604      	mov	r4, r0
 8014108:	460d      	mov	r5, r1
 801410a:	4640      	mov	r0, r8
 801410c:	4649      	mov	r1, r9
 801410e:	f7ec fa8b 	bl	8000628 <__aeabi_dmul>
 8014112:	460b      	mov	r3, r1
 8014114:	4602      	mov	r2, r0
 8014116:	4629      	mov	r1, r5
 8014118:	4620      	mov	r0, r4
 801411a:	f7ec f8cd 	bl	80002b8 <__aeabi_dsub>
 801411e:	4b29      	ldr	r3, [pc, #164]	; (80141c4 <__kernel_cos+0x17c>)
 8014120:	429e      	cmp	r6, r3
 8014122:	4680      	mov	r8, r0
 8014124:	4689      	mov	r9, r1
 8014126:	dc11      	bgt.n	801414c <__kernel_cos+0x104>
 8014128:	4602      	mov	r2, r0
 801412a:	460b      	mov	r3, r1
 801412c:	4650      	mov	r0, sl
 801412e:	4659      	mov	r1, fp
 8014130:	f7ec f8c2 	bl	80002b8 <__aeabi_dsub>
 8014134:	460b      	mov	r3, r1
 8014136:	4924      	ldr	r1, [pc, #144]	; (80141c8 <__kernel_cos+0x180>)
 8014138:	4602      	mov	r2, r0
 801413a:	2000      	movs	r0, #0
 801413c:	f7ec f8bc 	bl	80002b8 <__aeabi_dsub>
 8014140:	ecbd 8b02 	vpop	{d8}
 8014144:	ec41 0b10 	vmov	d0, r0, r1
 8014148:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801414c:	4b1f      	ldr	r3, [pc, #124]	; (80141cc <__kernel_cos+0x184>)
 801414e:	491e      	ldr	r1, [pc, #120]	; (80141c8 <__kernel_cos+0x180>)
 8014150:	429e      	cmp	r6, r3
 8014152:	bfcc      	ite	gt
 8014154:	4d1e      	ldrgt	r5, [pc, #120]	; (80141d0 <__kernel_cos+0x188>)
 8014156:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801415a:	2400      	movs	r4, #0
 801415c:	4622      	mov	r2, r4
 801415e:	462b      	mov	r3, r5
 8014160:	2000      	movs	r0, #0
 8014162:	f7ec f8a9 	bl	80002b8 <__aeabi_dsub>
 8014166:	4622      	mov	r2, r4
 8014168:	4606      	mov	r6, r0
 801416a:	460f      	mov	r7, r1
 801416c:	462b      	mov	r3, r5
 801416e:	4650      	mov	r0, sl
 8014170:	4659      	mov	r1, fp
 8014172:	f7ec f8a1 	bl	80002b8 <__aeabi_dsub>
 8014176:	4642      	mov	r2, r8
 8014178:	464b      	mov	r3, r9
 801417a:	f7ec f89d 	bl	80002b8 <__aeabi_dsub>
 801417e:	4602      	mov	r2, r0
 8014180:	460b      	mov	r3, r1
 8014182:	4630      	mov	r0, r6
 8014184:	4639      	mov	r1, r7
 8014186:	e7d9      	b.n	801413c <__kernel_cos+0xf4>
 8014188:	2000      	movs	r0, #0
 801418a:	490f      	ldr	r1, [pc, #60]	; (80141c8 <__kernel_cos+0x180>)
 801418c:	e7d8      	b.n	8014140 <__kernel_cos+0xf8>
 801418e:	bf00      	nop
 8014190:	be8838d4 	.word	0xbe8838d4
 8014194:	bda8fae9 	.word	0xbda8fae9
 8014198:	bdb4b1c4 	.word	0xbdb4b1c4
 801419c:	3e21ee9e 	.word	0x3e21ee9e
 80141a0:	809c52ad 	.word	0x809c52ad
 80141a4:	3e927e4f 	.word	0x3e927e4f
 80141a8:	19cb1590 	.word	0x19cb1590
 80141ac:	3efa01a0 	.word	0x3efa01a0
 80141b0:	16c15177 	.word	0x16c15177
 80141b4:	3f56c16c 	.word	0x3f56c16c
 80141b8:	5555554c 	.word	0x5555554c
 80141bc:	3fa55555 	.word	0x3fa55555
 80141c0:	3fe00000 	.word	0x3fe00000
 80141c4:	3fd33332 	.word	0x3fd33332
 80141c8:	3ff00000 	.word	0x3ff00000
 80141cc:	3fe90000 	.word	0x3fe90000
 80141d0:	3fd20000 	.word	0x3fd20000
 80141d4:	00000000 	.word	0x00000000

080141d8 <__kernel_rem_pio2>:
 80141d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141dc:	ed2d 8b02 	vpush	{d8}
 80141e0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80141e4:	1ed4      	subs	r4, r2, #3
 80141e6:	9308      	str	r3, [sp, #32]
 80141e8:	9101      	str	r1, [sp, #4]
 80141ea:	4bc5      	ldr	r3, [pc, #788]	; (8014500 <__kernel_rem_pio2+0x328>)
 80141ec:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80141ee:	9009      	str	r0, [sp, #36]	; 0x24
 80141f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80141f4:	9304      	str	r3, [sp, #16]
 80141f6:	9b08      	ldr	r3, [sp, #32]
 80141f8:	3b01      	subs	r3, #1
 80141fa:	9307      	str	r3, [sp, #28]
 80141fc:	2318      	movs	r3, #24
 80141fe:	fb94 f4f3 	sdiv	r4, r4, r3
 8014202:	f06f 0317 	mvn.w	r3, #23
 8014206:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801420a:	fb04 3303 	mla	r3, r4, r3, r3
 801420e:	eb03 0a02 	add.w	sl, r3, r2
 8014212:	9b04      	ldr	r3, [sp, #16]
 8014214:	9a07      	ldr	r2, [sp, #28]
 8014216:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80144f0 <__kernel_rem_pio2+0x318>
 801421a:	eb03 0802 	add.w	r8, r3, r2
 801421e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014220:	1aa7      	subs	r7, r4, r2
 8014222:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014226:	ae22      	add	r6, sp, #136	; 0x88
 8014228:	2500      	movs	r5, #0
 801422a:	4545      	cmp	r5, r8
 801422c:	dd13      	ble.n	8014256 <__kernel_rem_pio2+0x7e>
 801422e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80144f0 <__kernel_rem_pio2+0x318>
 8014232:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8014236:	2600      	movs	r6, #0
 8014238:	9b04      	ldr	r3, [sp, #16]
 801423a:	429e      	cmp	r6, r3
 801423c:	dc32      	bgt.n	80142a4 <__kernel_rem_pio2+0xcc>
 801423e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014240:	9302      	str	r3, [sp, #8]
 8014242:	9b08      	ldr	r3, [sp, #32]
 8014244:	199d      	adds	r5, r3, r6
 8014246:	ab22      	add	r3, sp, #136	; 0x88
 8014248:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801424c:	9306      	str	r3, [sp, #24]
 801424e:	ec59 8b18 	vmov	r8, r9, d8
 8014252:	2700      	movs	r7, #0
 8014254:	e01f      	b.n	8014296 <__kernel_rem_pio2+0xbe>
 8014256:	42ef      	cmn	r7, r5
 8014258:	d407      	bmi.n	801426a <__kernel_rem_pio2+0x92>
 801425a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801425e:	f7ec f979 	bl	8000554 <__aeabi_i2d>
 8014262:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014266:	3501      	adds	r5, #1
 8014268:	e7df      	b.n	801422a <__kernel_rem_pio2+0x52>
 801426a:	ec51 0b18 	vmov	r0, r1, d8
 801426e:	e7f8      	b.n	8014262 <__kernel_rem_pio2+0x8a>
 8014270:	9906      	ldr	r1, [sp, #24]
 8014272:	9d02      	ldr	r5, [sp, #8]
 8014274:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8014278:	9106      	str	r1, [sp, #24]
 801427a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801427e:	9502      	str	r5, [sp, #8]
 8014280:	f7ec f9d2 	bl	8000628 <__aeabi_dmul>
 8014284:	4602      	mov	r2, r0
 8014286:	460b      	mov	r3, r1
 8014288:	4640      	mov	r0, r8
 801428a:	4649      	mov	r1, r9
 801428c:	f7ec f816 	bl	80002bc <__adddf3>
 8014290:	3701      	adds	r7, #1
 8014292:	4680      	mov	r8, r0
 8014294:	4689      	mov	r9, r1
 8014296:	9b07      	ldr	r3, [sp, #28]
 8014298:	429f      	cmp	r7, r3
 801429a:	dde9      	ble.n	8014270 <__kernel_rem_pio2+0x98>
 801429c:	e8eb 8902 	strd	r8, r9, [fp], #8
 80142a0:	3601      	adds	r6, #1
 80142a2:	e7c9      	b.n	8014238 <__kernel_rem_pio2+0x60>
 80142a4:	9b04      	ldr	r3, [sp, #16]
 80142a6:	aa0e      	add	r2, sp, #56	; 0x38
 80142a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80142ac:	930c      	str	r3, [sp, #48]	; 0x30
 80142ae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80142b0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80142b4:	9c04      	ldr	r4, [sp, #16]
 80142b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80142b8:	ab9a      	add	r3, sp, #616	; 0x268
 80142ba:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80142be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80142c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80142c6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80142ca:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80142ce:	ab9a      	add	r3, sp, #616	; 0x268
 80142d0:	445b      	add	r3, fp
 80142d2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80142d6:	2500      	movs	r5, #0
 80142d8:	1b63      	subs	r3, r4, r5
 80142da:	2b00      	cmp	r3, #0
 80142dc:	dc78      	bgt.n	80143d0 <__kernel_rem_pio2+0x1f8>
 80142de:	4650      	mov	r0, sl
 80142e0:	ec49 8b10 	vmov	d0, r8, r9
 80142e4:	f000 fc0c 	bl	8014b00 <scalbn>
 80142e8:	ec57 6b10 	vmov	r6, r7, d0
 80142ec:	2200      	movs	r2, #0
 80142ee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80142f2:	ee10 0a10 	vmov	r0, s0
 80142f6:	4639      	mov	r1, r7
 80142f8:	f7ec f996 	bl	8000628 <__aeabi_dmul>
 80142fc:	ec41 0b10 	vmov	d0, r0, r1
 8014300:	f000 fb76 	bl	80149f0 <floor>
 8014304:	2200      	movs	r2, #0
 8014306:	ec51 0b10 	vmov	r0, r1, d0
 801430a:	4b7e      	ldr	r3, [pc, #504]	; (8014504 <__kernel_rem_pio2+0x32c>)
 801430c:	f7ec f98c 	bl	8000628 <__aeabi_dmul>
 8014310:	4602      	mov	r2, r0
 8014312:	460b      	mov	r3, r1
 8014314:	4630      	mov	r0, r6
 8014316:	4639      	mov	r1, r7
 8014318:	f7eb ffce 	bl	80002b8 <__aeabi_dsub>
 801431c:	460f      	mov	r7, r1
 801431e:	4606      	mov	r6, r0
 8014320:	f7ec fc32 	bl	8000b88 <__aeabi_d2iz>
 8014324:	9006      	str	r0, [sp, #24]
 8014326:	f7ec f915 	bl	8000554 <__aeabi_i2d>
 801432a:	4602      	mov	r2, r0
 801432c:	460b      	mov	r3, r1
 801432e:	4630      	mov	r0, r6
 8014330:	4639      	mov	r1, r7
 8014332:	f7eb ffc1 	bl	80002b8 <__aeabi_dsub>
 8014336:	f1ba 0f00 	cmp.w	sl, #0
 801433a:	4606      	mov	r6, r0
 801433c:	460f      	mov	r7, r1
 801433e:	dd6c      	ble.n	801441a <__kernel_rem_pio2+0x242>
 8014340:	1e62      	subs	r2, r4, #1
 8014342:	ab0e      	add	r3, sp, #56	; 0x38
 8014344:	f1ca 0118 	rsb	r1, sl, #24
 8014348:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801434c:	9d06      	ldr	r5, [sp, #24]
 801434e:	fa40 f301 	asr.w	r3, r0, r1
 8014352:	441d      	add	r5, r3
 8014354:	408b      	lsls	r3, r1
 8014356:	1ac0      	subs	r0, r0, r3
 8014358:	ab0e      	add	r3, sp, #56	; 0x38
 801435a:	9506      	str	r5, [sp, #24]
 801435c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8014360:	f1ca 0317 	rsb	r3, sl, #23
 8014364:	fa40 f303 	asr.w	r3, r0, r3
 8014368:	9302      	str	r3, [sp, #8]
 801436a:	9b02      	ldr	r3, [sp, #8]
 801436c:	2b00      	cmp	r3, #0
 801436e:	dd62      	ble.n	8014436 <__kernel_rem_pio2+0x25e>
 8014370:	9b06      	ldr	r3, [sp, #24]
 8014372:	2200      	movs	r2, #0
 8014374:	3301      	adds	r3, #1
 8014376:	9306      	str	r3, [sp, #24]
 8014378:	4615      	mov	r5, r2
 801437a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801437e:	4294      	cmp	r4, r2
 8014380:	f300 8095 	bgt.w	80144ae <__kernel_rem_pio2+0x2d6>
 8014384:	f1ba 0f00 	cmp.w	sl, #0
 8014388:	dd07      	ble.n	801439a <__kernel_rem_pio2+0x1c2>
 801438a:	f1ba 0f01 	cmp.w	sl, #1
 801438e:	f000 80a2 	beq.w	80144d6 <__kernel_rem_pio2+0x2fe>
 8014392:	f1ba 0f02 	cmp.w	sl, #2
 8014396:	f000 80c1 	beq.w	801451c <__kernel_rem_pio2+0x344>
 801439a:	9b02      	ldr	r3, [sp, #8]
 801439c:	2b02      	cmp	r3, #2
 801439e:	d14a      	bne.n	8014436 <__kernel_rem_pio2+0x25e>
 80143a0:	4632      	mov	r2, r6
 80143a2:	463b      	mov	r3, r7
 80143a4:	2000      	movs	r0, #0
 80143a6:	4958      	ldr	r1, [pc, #352]	; (8014508 <__kernel_rem_pio2+0x330>)
 80143a8:	f7eb ff86 	bl	80002b8 <__aeabi_dsub>
 80143ac:	4606      	mov	r6, r0
 80143ae:	460f      	mov	r7, r1
 80143b0:	2d00      	cmp	r5, #0
 80143b2:	d040      	beq.n	8014436 <__kernel_rem_pio2+0x25e>
 80143b4:	4650      	mov	r0, sl
 80143b6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80144f8 <__kernel_rem_pio2+0x320>
 80143ba:	f000 fba1 	bl	8014b00 <scalbn>
 80143be:	4630      	mov	r0, r6
 80143c0:	4639      	mov	r1, r7
 80143c2:	ec53 2b10 	vmov	r2, r3, d0
 80143c6:	f7eb ff77 	bl	80002b8 <__aeabi_dsub>
 80143ca:	4606      	mov	r6, r0
 80143cc:	460f      	mov	r7, r1
 80143ce:	e032      	b.n	8014436 <__kernel_rem_pio2+0x25e>
 80143d0:	2200      	movs	r2, #0
 80143d2:	4b4e      	ldr	r3, [pc, #312]	; (801450c <__kernel_rem_pio2+0x334>)
 80143d4:	4640      	mov	r0, r8
 80143d6:	4649      	mov	r1, r9
 80143d8:	f7ec f926 	bl	8000628 <__aeabi_dmul>
 80143dc:	f7ec fbd4 	bl	8000b88 <__aeabi_d2iz>
 80143e0:	f7ec f8b8 	bl	8000554 <__aeabi_i2d>
 80143e4:	2200      	movs	r2, #0
 80143e6:	4b4a      	ldr	r3, [pc, #296]	; (8014510 <__kernel_rem_pio2+0x338>)
 80143e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80143ec:	f7ec f91c 	bl	8000628 <__aeabi_dmul>
 80143f0:	4602      	mov	r2, r0
 80143f2:	460b      	mov	r3, r1
 80143f4:	4640      	mov	r0, r8
 80143f6:	4649      	mov	r1, r9
 80143f8:	f7eb ff5e 	bl	80002b8 <__aeabi_dsub>
 80143fc:	f7ec fbc4 	bl	8000b88 <__aeabi_d2iz>
 8014400:	ab0e      	add	r3, sp, #56	; 0x38
 8014402:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8014406:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801440a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801440e:	f7eb ff55 	bl	80002bc <__adddf3>
 8014412:	3501      	adds	r5, #1
 8014414:	4680      	mov	r8, r0
 8014416:	4689      	mov	r9, r1
 8014418:	e75e      	b.n	80142d8 <__kernel_rem_pio2+0x100>
 801441a:	d105      	bne.n	8014428 <__kernel_rem_pio2+0x250>
 801441c:	1e63      	subs	r3, r4, #1
 801441e:	aa0e      	add	r2, sp, #56	; 0x38
 8014420:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014424:	15c3      	asrs	r3, r0, #23
 8014426:	e79f      	b.n	8014368 <__kernel_rem_pio2+0x190>
 8014428:	2200      	movs	r2, #0
 801442a:	4b3a      	ldr	r3, [pc, #232]	; (8014514 <__kernel_rem_pio2+0x33c>)
 801442c:	f7ec fb82 	bl	8000b34 <__aeabi_dcmpge>
 8014430:	2800      	cmp	r0, #0
 8014432:	d139      	bne.n	80144a8 <__kernel_rem_pio2+0x2d0>
 8014434:	9002      	str	r0, [sp, #8]
 8014436:	2200      	movs	r2, #0
 8014438:	2300      	movs	r3, #0
 801443a:	4630      	mov	r0, r6
 801443c:	4639      	mov	r1, r7
 801443e:	f7ec fb5b 	bl	8000af8 <__aeabi_dcmpeq>
 8014442:	2800      	cmp	r0, #0
 8014444:	f000 80c7 	beq.w	80145d6 <__kernel_rem_pio2+0x3fe>
 8014448:	1e65      	subs	r5, r4, #1
 801444a:	462b      	mov	r3, r5
 801444c:	2200      	movs	r2, #0
 801444e:	9904      	ldr	r1, [sp, #16]
 8014450:	428b      	cmp	r3, r1
 8014452:	da6a      	bge.n	801452a <__kernel_rem_pio2+0x352>
 8014454:	2a00      	cmp	r2, #0
 8014456:	f000 8088 	beq.w	801456a <__kernel_rem_pio2+0x392>
 801445a:	ab0e      	add	r3, sp, #56	; 0x38
 801445c:	f1aa 0a18 	sub.w	sl, sl, #24
 8014460:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8014464:	2b00      	cmp	r3, #0
 8014466:	f000 80b4 	beq.w	80145d2 <__kernel_rem_pio2+0x3fa>
 801446a:	4650      	mov	r0, sl
 801446c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80144f8 <__kernel_rem_pio2+0x320>
 8014470:	f000 fb46 	bl	8014b00 <scalbn>
 8014474:	00ec      	lsls	r4, r5, #3
 8014476:	ab72      	add	r3, sp, #456	; 0x1c8
 8014478:	191e      	adds	r6, r3, r4
 801447a:	ec59 8b10 	vmov	r8, r9, d0
 801447e:	f106 0a08 	add.w	sl, r6, #8
 8014482:	462f      	mov	r7, r5
 8014484:	2f00      	cmp	r7, #0
 8014486:	f280 80df 	bge.w	8014648 <__kernel_rem_pio2+0x470>
 801448a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80144f0 <__kernel_rem_pio2+0x318>
 801448e:	f04f 0a00 	mov.w	sl, #0
 8014492:	eba5 030a 	sub.w	r3, r5, sl
 8014496:	2b00      	cmp	r3, #0
 8014498:	f2c0 810a 	blt.w	80146b0 <__kernel_rem_pio2+0x4d8>
 801449c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8014518 <__kernel_rem_pio2+0x340>
 80144a0:	ec59 8b18 	vmov	r8, r9, d8
 80144a4:	2700      	movs	r7, #0
 80144a6:	e0f5      	b.n	8014694 <__kernel_rem_pio2+0x4bc>
 80144a8:	2302      	movs	r3, #2
 80144aa:	9302      	str	r3, [sp, #8]
 80144ac:	e760      	b.n	8014370 <__kernel_rem_pio2+0x198>
 80144ae:	ab0e      	add	r3, sp, #56	; 0x38
 80144b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144b4:	b94d      	cbnz	r5, 80144ca <__kernel_rem_pio2+0x2f2>
 80144b6:	b12b      	cbz	r3, 80144c4 <__kernel_rem_pio2+0x2ec>
 80144b8:	a80e      	add	r0, sp, #56	; 0x38
 80144ba:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80144be:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80144c2:	2301      	movs	r3, #1
 80144c4:	3201      	adds	r2, #1
 80144c6:	461d      	mov	r5, r3
 80144c8:	e759      	b.n	801437e <__kernel_rem_pio2+0x1a6>
 80144ca:	a80e      	add	r0, sp, #56	; 0x38
 80144cc:	1acb      	subs	r3, r1, r3
 80144ce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80144d2:	462b      	mov	r3, r5
 80144d4:	e7f6      	b.n	80144c4 <__kernel_rem_pio2+0x2ec>
 80144d6:	1e62      	subs	r2, r4, #1
 80144d8:	ab0e      	add	r3, sp, #56	; 0x38
 80144da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144de:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80144e2:	a90e      	add	r1, sp, #56	; 0x38
 80144e4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80144e8:	e757      	b.n	801439a <__kernel_rem_pio2+0x1c2>
 80144ea:	bf00      	nop
 80144ec:	f3af 8000 	nop.w
	...
 80144fc:	3ff00000 	.word	0x3ff00000
 8014500:	08019888 	.word	0x08019888
 8014504:	40200000 	.word	0x40200000
 8014508:	3ff00000 	.word	0x3ff00000
 801450c:	3e700000 	.word	0x3e700000
 8014510:	41700000 	.word	0x41700000
 8014514:	3fe00000 	.word	0x3fe00000
 8014518:	08019848 	.word	0x08019848
 801451c:	1e62      	subs	r2, r4, #1
 801451e:	ab0e      	add	r3, sp, #56	; 0x38
 8014520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014524:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014528:	e7db      	b.n	80144e2 <__kernel_rem_pio2+0x30a>
 801452a:	a90e      	add	r1, sp, #56	; 0x38
 801452c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014530:	3b01      	subs	r3, #1
 8014532:	430a      	orrs	r2, r1
 8014534:	e78b      	b.n	801444e <__kernel_rem_pio2+0x276>
 8014536:	3301      	adds	r3, #1
 8014538:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801453c:	2900      	cmp	r1, #0
 801453e:	d0fa      	beq.n	8014536 <__kernel_rem_pio2+0x35e>
 8014540:	9a08      	ldr	r2, [sp, #32]
 8014542:	4422      	add	r2, r4
 8014544:	00d2      	lsls	r2, r2, #3
 8014546:	a922      	add	r1, sp, #136	; 0x88
 8014548:	18e3      	adds	r3, r4, r3
 801454a:	9206      	str	r2, [sp, #24]
 801454c:	440a      	add	r2, r1
 801454e:	9302      	str	r3, [sp, #8]
 8014550:	f10b 0108 	add.w	r1, fp, #8
 8014554:	f102 0308 	add.w	r3, r2, #8
 8014558:	1c66      	adds	r6, r4, #1
 801455a:	910a      	str	r1, [sp, #40]	; 0x28
 801455c:	2500      	movs	r5, #0
 801455e:	930d      	str	r3, [sp, #52]	; 0x34
 8014560:	9b02      	ldr	r3, [sp, #8]
 8014562:	42b3      	cmp	r3, r6
 8014564:	da04      	bge.n	8014570 <__kernel_rem_pio2+0x398>
 8014566:	461c      	mov	r4, r3
 8014568:	e6a6      	b.n	80142b8 <__kernel_rem_pio2+0xe0>
 801456a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801456c:	2301      	movs	r3, #1
 801456e:	e7e3      	b.n	8014538 <__kernel_rem_pio2+0x360>
 8014570:	9b06      	ldr	r3, [sp, #24]
 8014572:	18ef      	adds	r7, r5, r3
 8014574:	ab22      	add	r3, sp, #136	; 0x88
 8014576:	441f      	add	r7, r3
 8014578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801457a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801457e:	f7eb ffe9 	bl	8000554 <__aeabi_i2d>
 8014582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014584:	461c      	mov	r4, r3
 8014586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014588:	e9c7 0100 	strd	r0, r1, [r7]
 801458c:	eb03 0b05 	add.w	fp, r3, r5
 8014590:	2700      	movs	r7, #0
 8014592:	f04f 0800 	mov.w	r8, #0
 8014596:	f04f 0900 	mov.w	r9, #0
 801459a:	9b07      	ldr	r3, [sp, #28]
 801459c:	429f      	cmp	r7, r3
 801459e:	dd08      	ble.n	80145b2 <__kernel_rem_pio2+0x3da>
 80145a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145a2:	aa72      	add	r2, sp, #456	; 0x1c8
 80145a4:	18eb      	adds	r3, r5, r3
 80145a6:	4413      	add	r3, r2
 80145a8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80145ac:	3601      	adds	r6, #1
 80145ae:	3508      	adds	r5, #8
 80145b0:	e7d6      	b.n	8014560 <__kernel_rem_pio2+0x388>
 80145b2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80145b6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80145ba:	f7ec f835 	bl	8000628 <__aeabi_dmul>
 80145be:	4602      	mov	r2, r0
 80145c0:	460b      	mov	r3, r1
 80145c2:	4640      	mov	r0, r8
 80145c4:	4649      	mov	r1, r9
 80145c6:	f7eb fe79 	bl	80002bc <__adddf3>
 80145ca:	3701      	adds	r7, #1
 80145cc:	4680      	mov	r8, r0
 80145ce:	4689      	mov	r9, r1
 80145d0:	e7e3      	b.n	801459a <__kernel_rem_pio2+0x3c2>
 80145d2:	3d01      	subs	r5, #1
 80145d4:	e741      	b.n	801445a <__kernel_rem_pio2+0x282>
 80145d6:	f1ca 0000 	rsb	r0, sl, #0
 80145da:	ec47 6b10 	vmov	d0, r6, r7
 80145de:	f000 fa8f 	bl	8014b00 <scalbn>
 80145e2:	ec57 6b10 	vmov	r6, r7, d0
 80145e6:	2200      	movs	r2, #0
 80145e8:	4b99      	ldr	r3, [pc, #612]	; (8014850 <__kernel_rem_pio2+0x678>)
 80145ea:	ee10 0a10 	vmov	r0, s0
 80145ee:	4639      	mov	r1, r7
 80145f0:	f7ec faa0 	bl	8000b34 <__aeabi_dcmpge>
 80145f4:	b1f8      	cbz	r0, 8014636 <__kernel_rem_pio2+0x45e>
 80145f6:	2200      	movs	r2, #0
 80145f8:	4b96      	ldr	r3, [pc, #600]	; (8014854 <__kernel_rem_pio2+0x67c>)
 80145fa:	4630      	mov	r0, r6
 80145fc:	4639      	mov	r1, r7
 80145fe:	f7ec f813 	bl	8000628 <__aeabi_dmul>
 8014602:	f7ec fac1 	bl	8000b88 <__aeabi_d2iz>
 8014606:	4680      	mov	r8, r0
 8014608:	f7eb ffa4 	bl	8000554 <__aeabi_i2d>
 801460c:	2200      	movs	r2, #0
 801460e:	4b90      	ldr	r3, [pc, #576]	; (8014850 <__kernel_rem_pio2+0x678>)
 8014610:	f7ec f80a 	bl	8000628 <__aeabi_dmul>
 8014614:	460b      	mov	r3, r1
 8014616:	4602      	mov	r2, r0
 8014618:	4639      	mov	r1, r7
 801461a:	4630      	mov	r0, r6
 801461c:	f7eb fe4c 	bl	80002b8 <__aeabi_dsub>
 8014620:	f7ec fab2 	bl	8000b88 <__aeabi_d2iz>
 8014624:	1c65      	adds	r5, r4, #1
 8014626:	ab0e      	add	r3, sp, #56	; 0x38
 8014628:	f10a 0a18 	add.w	sl, sl, #24
 801462c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014630:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8014634:	e719      	b.n	801446a <__kernel_rem_pio2+0x292>
 8014636:	4630      	mov	r0, r6
 8014638:	4639      	mov	r1, r7
 801463a:	f7ec faa5 	bl	8000b88 <__aeabi_d2iz>
 801463e:	ab0e      	add	r3, sp, #56	; 0x38
 8014640:	4625      	mov	r5, r4
 8014642:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014646:	e710      	b.n	801446a <__kernel_rem_pio2+0x292>
 8014648:	ab0e      	add	r3, sp, #56	; 0x38
 801464a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801464e:	f7eb ff81 	bl	8000554 <__aeabi_i2d>
 8014652:	4642      	mov	r2, r8
 8014654:	464b      	mov	r3, r9
 8014656:	f7eb ffe7 	bl	8000628 <__aeabi_dmul>
 801465a:	2200      	movs	r2, #0
 801465c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8014660:	4b7c      	ldr	r3, [pc, #496]	; (8014854 <__kernel_rem_pio2+0x67c>)
 8014662:	4640      	mov	r0, r8
 8014664:	4649      	mov	r1, r9
 8014666:	f7eb ffdf 	bl	8000628 <__aeabi_dmul>
 801466a:	3f01      	subs	r7, #1
 801466c:	4680      	mov	r8, r0
 801466e:	4689      	mov	r9, r1
 8014670:	e708      	b.n	8014484 <__kernel_rem_pio2+0x2ac>
 8014672:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8014676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801467a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801467e:	f7eb ffd3 	bl	8000628 <__aeabi_dmul>
 8014682:	4602      	mov	r2, r0
 8014684:	460b      	mov	r3, r1
 8014686:	4640      	mov	r0, r8
 8014688:	4649      	mov	r1, r9
 801468a:	f7eb fe17 	bl	80002bc <__adddf3>
 801468e:	3701      	adds	r7, #1
 8014690:	4680      	mov	r8, r0
 8014692:	4689      	mov	r9, r1
 8014694:	9b04      	ldr	r3, [sp, #16]
 8014696:	429f      	cmp	r7, r3
 8014698:	dc01      	bgt.n	801469e <__kernel_rem_pio2+0x4c6>
 801469a:	45ba      	cmp	sl, r7
 801469c:	dae9      	bge.n	8014672 <__kernel_rem_pio2+0x49a>
 801469e:	ab4a      	add	r3, sp, #296	; 0x128
 80146a0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80146a4:	e9c3 8900 	strd	r8, r9, [r3]
 80146a8:	f10a 0a01 	add.w	sl, sl, #1
 80146ac:	3e08      	subs	r6, #8
 80146ae:	e6f0      	b.n	8014492 <__kernel_rem_pio2+0x2ba>
 80146b0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80146b2:	2b03      	cmp	r3, #3
 80146b4:	d85b      	bhi.n	801476e <__kernel_rem_pio2+0x596>
 80146b6:	e8df f003 	tbb	[pc, r3]
 80146ba:	264a      	.short	0x264a
 80146bc:	0226      	.short	0x0226
 80146be:	ab9a      	add	r3, sp, #616	; 0x268
 80146c0:	441c      	add	r4, r3
 80146c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80146c6:	46a2      	mov	sl, r4
 80146c8:	46ab      	mov	fp, r5
 80146ca:	f1bb 0f00 	cmp.w	fp, #0
 80146ce:	dc6c      	bgt.n	80147aa <__kernel_rem_pio2+0x5d2>
 80146d0:	46a2      	mov	sl, r4
 80146d2:	46ab      	mov	fp, r5
 80146d4:	f1bb 0f01 	cmp.w	fp, #1
 80146d8:	f300 8086 	bgt.w	80147e8 <__kernel_rem_pio2+0x610>
 80146dc:	2000      	movs	r0, #0
 80146de:	2100      	movs	r1, #0
 80146e0:	2d01      	cmp	r5, #1
 80146e2:	f300 80a0 	bgt.w	8014826 <__kernel_rem_pio2+0x64e>
 80146e6:	9b02      	ldr	r3, [sp, #8]
 80146e8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80146ec:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	f040 809e 	bne.w	8014832 <__kernel_rem_pio2+0x65a>
 80146f6:	9b01      	ldr	r3, [sp, #4]
 80146f8:	e9c3 7800 	strd	r7, r8, [r3]
 80146fc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014700:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014704:	e033      	b.n	801476e <__kernel_rem_pio2+0x596>
 8014706:	3408      	adds	r4, #8
 8014708:	ab4a      	add	r3, sp, #296	; 0x128
 801470a:	441c      	add	r4, r3
 801470c:	462e      	mov	r6, r5
 801470e:	2000      	movs	r0, #0
 8014710:	2100      	movs	r1, #0
 8014712:	2e00      	cmp	r6, #0
 8014714:	da3a      	bge.n	801478c <__kernel_rem_pio2+0x5b4>
 8014716:	9b02      	ldr	r3, [sp, #8]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d03d      	beq.n	8014798 <__kernel_rem_pio2+0x5c0>
 801471c:	4602      	mov	r2, r0
 801471e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014722:	9c01      	ldr	r4, [sp, #4]
 8014724:	e9c4 2300 	strd	r2, r3, [r4]
 8014728:	4602      	mov	r2, r0
 801472a:	460b      	mov	r3, r1
 801472c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8014730:	f7eb fdc2 	bl	80002b8 <__aeabi_dsub>
 8014734:	ae4c      	add	r6, sp, #304	; 0x130
 8014736:	2401      	movs	r4, #1
 8014738:	42a5      	cmp	r5, r4
 801473a:	da30      	bge.n	801479e <__kernel_rem_pio2+0x5c6>
 801473c:	9b02      	ldr	r3, [sp, #8]
 801473e:	b113      	cbz	r3, 8014746 <__kernel_rem_pio2+0x56e>
 8014740:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014744:	4619      	mov	r1, r3
 8014746:	9b01      	ldr	r3, [sp, #4]
 8014748:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801474c:	e00f      	b.n	801476e <__kernel_rem_pio2+0x596>
 801474e:	ab9a      	add	r3, sp, #616	; 0x268
 8014750:	441c      	add	r4, r3
 8014752:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014756:	2000      	movs	r0, #0
 8014758:	2100      	movs	r1, #0
 801475a:	2d00      	cmp	r5, #0
 801475c:	da10      	bge.n	8014780 <__kernel_rem_pio2+0x5a8>
 801475e:	9b02      	ldr	r3, [sp, #8]
 8014760:	b113      	cbz	r3, 8014768 <__kernel_rem_pio2+0x590>
 8014762:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014766:	4619      	mov	r1, r3
 8014768:	9b01      	ldr	r3, [sp, #4]
 801476a:	e9c3 0100 	strd	r0, r1, [r3]
 801476e:	9b06      	ldr	r3, [sp, #24]
 8014770:	f003 0007 	and.w	r0, r3, #7
 8014774:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8014778:	ecbd 8b02 	vpop	{d8}
 801477c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014780:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014784:	f7eb fd9a 	bl	80002bc <__adddf3>
 8014788:	3d01      	subs	r5, #1
 801478a:	e7e6      	b.n	801475a <__kernel_rem_pio2+0x582>
 801478c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014790:	f7eb fd94 	bl	80002bc <__adddf3>
 8014794:	3e01      	subs	r6, #1
 8014796:	e7bc      	b.n	8014712 <__kernel_rem_pio2+0x53a>
 8014798:	4602      	mov	r2, r0
 801479a:	460b      	mov	r3, r1
 801479c:	e7c1      	b.n	8014722 <__kernel_rem_pio2+0x54a>
 801479e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80147a2:	f7eb fd8b 	bl	80002bc <__adddf3>
 80147a6:	3401      	adds	r4, #1
 80147a8:	e7c6      	b.n	8014738 <__kernel_rem_pio2+0x560>
 80147aa:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80147ae:	ed3a 7b02 	vldmdb	sl!, {d7}
 80147b2:	4640      	mov	r0, r8
 80147b4:	ec53 2b17 	vmov	r2, r3, d7
 80147b8:	4649      	mov	r1, r9
 80147ba:	ed8d 7b04 	vstr	d7, [sp, #16]
 80147be:	f7eb fd7d 	bl	80002bc <__adddf3>
 80147c2:	4602      	mov	r2, r0
 80147c4:	460b      	mov	r3, r1
 80147c6:	4606      	mov	r6, r0
 80147c8:	460f      	mov	r7, r1
 80147ca:	4640      	mov	r0, r8
 80147cc:	4649      	mov	r1, r9
 80147ce:	f7eb fd73 	bl	80002b8 <__aeabi_dsub>
 80147d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80147d6:	f7eb fd71 	bl	80002bc <__adddf3>
 80147da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80147de:	e9ca 0100 	strd	r0, r1, [sl]
 80147e2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80147e6:	e770      	b.n	80146ca <__kernel_rem_pio2+0x4f2>
 80147e8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80147ec:	ed3a 7b02 	vldmdb	sl!, {d7}
 80147f0:	4630      	mov	r0, r6
 80147f2:	ec53 2b17 	vmov	r2, r3, d7
 80147f6:	4639      	mov	r1, r7
 80147f8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80147fc:	f7eb fd5e 	bl	80002bc <__adddf3>
 8014800:	4602      	mov	r2, r0
 8014802:	460b      	mov	r3, r1
 8014804:	4680      	mov	r8, r0
 8014806:	4689      	mov	r9, r1
 8014808:	4630      	mov	r0, r6
 801480a:	4639      	mov	r1, r7
 801480c:	f7eb fd54 	bl	80002b8 <__aeabi_dsub>
 8014810:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014814:	f7eb fd52 	bl	80002bc <__adddf3>
 8014818:	f10b 3bff 	add.w	fp, fp, #4294967295
 801481c:	e9ca 0100 	strd	r0, r1, [sl]
 8014820:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8014824:	e756      	b.n	80146d4 <__kernel_rem_pio2+0x4fc>
 8014826:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801482a:	f7eb fd47 	bl	80002bc <__adddf3>
 801482e:	3d01      	subs	r5, #1
 8014830:	e756      	b.n	80146e0 <__kernel_rem_pio2+0x508>
 8014832:	9b01      	ldr	r3, [sp, #4]
 8014834:	9a01      	ldr	r2, [sp, #4]
 8014836:	601f      	str	r7, [r3, #0]
 8014838:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801483c:	605c      	str	r4, [r3, #4]
 801483e:	609d      	str	r5, [r3, #8]
 8014840:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014844:	60d3      	str	r3, [r2, #12]
 8014846:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801484a:	6110      	str	r0, [r2, #16]
 801484c:	6153      	str	r3, [r2, #20]
 801484e:	e78e      	b.n	801476e <__kernel_rem_pio2+0x596>
 8014850:	41700000 	.word	0x41700000
 8014854:	3e700000 	.word	0x3e700000

08014858 <__kernel_sin>:
 8014858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801485c:	ec55 4b10 	vmov	r4, r5, d0
 8014860:	b085      	sub	sp, #20
 8014862:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014866:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801486a:	ed8d 1b00 	vstr	d1, [sp]
 801486e:	9002      	str	r0, [sp, #8]
 8014870:	da06      	bge.n	8014880 <__kernel_sin+0x28>
 8014872:	ee10 0a10 	vmov	r0, s0
 8014876:	4629      	mov	r1, r5
 8014878:	f7ec f986 	bl	8000b88 <__aeabi_d2iz>
 801487c:	2800      	cmp	r0, #0
 801487e:	d051      	beq.n	8014924 <__kernel_sin+0xcc>
 8014880:	4622      	mov	r2, r4
 8014882:	462b      	mov	r3, r5
 8014884:	4620      	mov	r0, r4
 8014886:	4629      	mov	r1, r5
 8014888:	f7eb fece 	bl	8000628 <__aeabi_dmul>
 801488c:	4682      	mov	sl, r0
 801488e:	468b      	mov	fp, r1
 8014890:	4602      	mov	r2, r0
 8014892:	460b      	mov	r3, r1
 8014894:	4620      	mov	r0, r4
 8014896:	4629      	mov	r1, r5
 8014898:	f7eb fec6 	bl	8000628 <__aeabi_dmul>
 801489c:	a341      	add	r3, pc, #260	; (adr r3, 80149a4 <__kernel_sin+0x14c>)
 801489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148a2:	4680      	mov	r8, r0
 80148a4:	4689      	mov	r9, r1
 80148a6:	4650      	mov	r0, sl
 80148a8:	4659      	mov	r1, fp
 80148aa:	f7eb febd 	bl	8000628 <__aeabi_dmul>
 80148ae:	a33f      	add	r3, pc, #252	; (adr r3, 80149ac <__kernel_sin+0x154>)
 80148b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148b4:	f7eb fd00 	bl	80002b8 <__aeabi_dsub>
 80148b8:	4652      	mov	r2, sl
 80148ba:	465b      	mov	r3, fp
 80148bc:	f7eb feb4 	bl	8000628 <__aeabi_dmul>
 80148c0:	a33c      	add	r3, pc, #240	; (adr r3, 80149b4 <__kernel_sin+0x15c>)
 80148c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148c6:	f7eb fcf9 	bl	80002bc <__adddf3>
 80148ca:	4652      	mov	r2, sl
 80148cc:	465b      	mov	r3, fp
 80148ce:	f7eb feab 	bl	8000628 <__aeabi_dmul>
 80148d2:	a33a      	add	r3, pc, #232	; (adr r3, 80149bc <__kernel_sin+0x164>)
 80148d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148d8:	f7eb fcee 	bl	80002b8 <__aeabi_dsub>
 80148dc:	4652      	mov	r2, sl
 80148de:	465b      	mov	r3, fp
 80148e0:	f7eb fea2 	bl	8000628 <__aeabi_dmul>
 80148e4:	a337      	add	r3, pc, #220	; (adr r3, 80149c4 <__kernel_sin+0x16c>)
 80148e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148ea:	f7eb fce7 	bl	80002bc <__adddf3>
 80148ee:	9b02      	ldr	r3, [sp, #8]
 80148f0:	4606      	mov	r6, r0
 80148f2:	460f      	mov	r7, r1
 80148f4:	b9db      	cbnz	r3, 801492e <__kernel_sin+0xd6>
 80148f6:	4602      	mov	r2, r0
 80148f8:	460b      	mov	r3, r1
 80148fa:	4650      	mov	r0, sl
 80148fc:	4659      	mov	r1, fp
 80148fe:	f7eb fe93 	bl	8000628 <__aeabi_dmul>
 8014902:	a325      	add	r3, pc, #148	; (adr r3, 8014998 <__kernel_sin+0x140>)
 8014904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014908:	f7eb fcd6 	bl	80002b8 <__aeabi_dsub>
 801490c:	4642      	mov	r2, r8
 801490e:	464b      	mov	r3, r9
 8014910:	f7eb fe8a 	bl	8000628 <__aeabi_dmul>
 8014914:	4602      	mov	r2, r0
 8014916:	460b      	mov	r3, r1
 8014918:	4620      	mov	r0, r4
 801491a:	4629      	mov	r1, r5
 801491c:	f7eb fcce 	bl	80002bc <__adddf3>
 8014920:	4604      	mov	r4, r0
 8014922:	460d      	mov	r5, r1
 8014924:	ec45 4b10 	vmov	d0, r4, r5
 8014928:	b005      	add	sp, #20
 801492a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801492e:	2200      	movs	r2, #0
 8014930:	4b1b      	ldr	r3, [pc, #108]	; (80149a0 <__kernel_sin+0x148>)
 8014932:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014936:	f7eb fe77 	bl	8000628 <__aeabi_dmul>
 801493a:	4632      	mov	r2, r6
 801493c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014940:	463b      	mov	r3, r7
 8014942:	4640      	mov	r0, r8
 8014944:	4649      	mov	r1, r9
 8014946:	f7eb fe6f 	bl	8000628 <__aeabi_dmul>
 801494a:	4602      	mov	r2, r0
 801494c:	460b      	mov	r3, r1
 801494e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014952:	f7eb fcb1 	bl	80002b8 <__aeabi_dsub>
 8014956:	4652      	mov	r2, sl
 8014958:	465b      	mov	r3, fp
 801495a:	f7eb fe65 	bl	8000628 <__aeabi_dmul>
 801495e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014962:	f7eb fca9 	bl	80002b8 <__aeabi_dsub>
 8014966:	a30c      	add	r3, pc, #48	; (adr r3, 8014998 <__kernel_sin+0x140>)
 8014968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801496c:	4606      	mov	r6, r0
 801496e:	460f      	mov	r7, r1
 8014970:	4640      	mov	r0, r8
 8014972:	4649      	mov	r1, r9
 8014974:	f7eb fe58 	bl	8000628 <__aeabi_dmul>
 8014978:	4602      	mov	r2, r0
 801497a:	460b      	mov	r3, r1
 801497c:	4630      	mov	r0, r6
 801497e:	4639      	mov	r1, r7
 8014980:	f7eb fc9c 	bl	80002bc <__adddf3>
 8014984:	4602      	mov	r2, r0
 8014986:	460b      	mov	r3, r1
 8014988:	4620      	mov	r0, r4
 801498a:	4629      	mov	r1, r5
 801498c:	f7eb fc94 	bl	80002b8 <__aeabi_dsub>
 8014990:	e7c6      	b.n	8014920 <__kernel_sin+0xc8>
 8014992:	bf00      	nop
 8014994:	f3af 8000 	nop.w
 8014998:	55555549 	.word	0x55555549
 801499c:	3fc55555 	.word	0x3fc55555
 80149a0:	3fe00000 	.word	0x3fe00000
 80149a4:	5acfd57c 	.word	0x5acfd57c
 80149a8:	3de5d93a 	.word	0x3de5d93a
 80149ac:	8a2b9ceb 	.word	0x8a2b9ceb
 80149b0:	3e5ae5e6 	.word	0x3e5ae5e6
 80149b4:	57b1fe7d 	.word	0x57b1fe7d
 80149b8:	3ec71de3 	.word	0x3ec71de3
 80149bc:	19c161d5 	.word	0x19c161d5
 80149c0:	3f2a01a0 	.word	0x3f2a01a0
 80149c4:	1110f8a6 	.word	0x1110f8a6
 80149c8:	3f811111 	.word	0x3f811111

080149cc <fabs>:
 80149cc:	ec51 0b10 	vmov	r0, r1, d0
 80149d0:	ee10 2a10 	vmov	r2, s0
 80149d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80149d8:	ec43 2b10 	vmov	d0, r2, r3
 80149dc:	4770      	bx	lr

080149de <finite>:
 80149de:	ee10 3a90 	vmov	r3, s1
 80149e2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80149e6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80149ea:	0fc0      	lsrs	r0, r0, #31
 80149ec:	4770      	bx	lr
	...

080149f0 <floor>:
 80149f0:	ec51 0b10 	vmov	r0, r1, d0
 80149f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80149fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8014a00:	2e13      	cmp	r6, #19
 8014a02:	460c      	mov	r4, r1
 8014a04:	ee10 5a10 	vmov	r5, s0
 8014a08:	4680      	mov	r8, r0
 8014a0a:	dc34      	bgt.n	8014a76 <floor+0x86>
 8014a0c:	2e00      	cmp	r6, #0
 8014a0e:	da16      	bge.n	8014a3e <floor+0x4e>
 8014a10:	a335      	add	r3, pc, #212	; (adr r3, 8014ae8 <floor+0xf8>)
 8014a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a16:	f7eb fc51 	bl	80002bc <__adddf3>
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	f7ec f893 	bl	8000b48 <__aeabi_dcmpgt>
 8014a22:	b148      	cbz	r0, 8014a38 <floor+0x48>
 8014a24:	2c00      	cmp	r4, #0
 8014a26:	da59      	bge.n	8014adc <floor+0xec>
 8014a28:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014a2c:	4a30      	ldr	r2, [pc, #192]	; (8014af0 <floor+0x100>)
 8014a2e:	432b      	orrs	r3, r5
 8014a30:	2500      	movs	r5, #0
 8014a32:	42ab      	cmp	r3, r5
 8014a34:	bf18      	it	ne
 8014a36:	4614      	movne	r4, r2
 8014a38:	4621      	mov	r1, r4
 8014a3a:	4628      	mov	r0, r5
 8014a3c:	e025      	b.n	8014a8a <floor+0x9a>
 8014a3e:	4f2d      	ldr	r7, [pc, #180]	; (8014af4 <floor+0x104>)
 8014a40:	4137      	asrs	r7, r6
 8014a42:	ea01 0307 	and.w	r3, r1, r7
 8014a46:	4303      	orrs	r3, r0
 8014a48:	d01f      	beq.n	8014a8a <floor+0x9a>
 8014a4a:	a327      	add	r3, pc, #156	; (adr r3, 8014ae8 <floor+0xf8>)
 8014a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a50:	f7eb fc34 	bl	80002bc <__adddf3>
 8014a54:	2200      	movs	r2, #0
 8014a56:	2300      	movs	r3, #0
 8014a58:	f7ec f876 	bl	8000b48 <__aeabi_dcmpgt>
 8014a5c:	2800      	cmp	r0, #0
 8014a5e:	d0eb      	beq.n	8014a38 <floor+0x48>
 8014a60:	2c00      	cmp	r4, #0
 8014a62:	bfbe      	ittt	lt
 8014a64:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8014a68:	fa43 f606 	asrlt.w	r6, r3, r6
 8014a6c:	19a4      	addlt	r4, r4, r6
 8014a6e:	ea24 0407 	bic.w	r4, r4, r7
 8014a72:	2500      	movs	r5, #0
 8014a74:	e7e0      	b.n	8014a38 <floor+0x48>
 8014a76:	2e33      	cmp	r6, #51	; 0x33
 8014a78:	dd0b      	ble.n	8014a92 <floor+0xa2>
 8014a7a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014a7e:	d104      	bne.n	8014a8a <floor+0x9a>
 8014a80:	ee10 2a10 	vmov	r2, s0
 8014a84:	460b      	mov	r3, r1
 8014a86:	f7eb fc19 	bl	80002bc <__adddf3>
 8014a8a:	ec41 0b10 	vmov	d0, r0, r1
 8014a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a92:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8014a96:	f04f 33ff 	mov.w	r3, #4294967295
 8014a9a:	fa23 f707 	lsr.w	r7, r3, r7
 8014a9e:	4207      	tst	r7, r0
 8014aa0:	d0f3      	beq.n	8014a8a <floor+0x9a>
 8014aa2:	a311      	add	r3, pc, #68	; (adr r3, 8014ae8 <floor+0xf8>)
 8014aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aa8:	f7eb fc08 	bl	80002bc <__adddf3>
 8014aac:	2200      	movs	r2, #0
 8014aae:	2300      	movs	r3, #0
 8014ab0:	f7ec f84a 	bl	8000b48 <__aeabi_dcmpgt>
 8014ab4:	2800      	cmp	r0, #0
 8014ab6:	d0bf      	beq.n	8014a38 <floor+0x48>
 8014ab8:	2c00      	cmp	r4, #0
 8014aba:	da02      	bge.n	8014ac2 <floor+0xd2>
 8014abc:	2e14      	cmp	r6, #20
 8014abe:	d103      	bne.n	8014ac8 <floor+0xd8>
 8014ac0:	3401      	adds	r4, #1
 8014ac2:	ea25 0507 	bic.w	r5, r5, r7
 8014ac6:	e7b7      	b.n	8014a38 <floor+0x48>
 8014ac8:	2301      	movs	r3, #1
 8014aca:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014ace:	fa03 f606 	lsl.w	r6, r3, r6
 8014ad2:	4435      	add	r5, r6
 8014ad4:	4545      	cmp	r5, r8
 8014ad6:	bf38      	it	cc
 8014ad8:	18e4      	addcc	r4, r4, r3
 8014ada:	e7f2      	b.n	8014ac2 <floor+0xd2>
 8014adc:	2500      	movs	r5, #0
 8014ade:	462c      	mov	r4, r5
 8014ae0:	e7aa      	b.n	8014a38 <floor+0x48>
 8014ae2:	bf00      	nop
 8014ae4:	f3af 8000 	nop.w
 8014ae8:	8800759c 	.word	0x8800759c
 8014aec:	7e37e43c 	.word	0x7e37e43c
 8014af0:	bff00000 	.word	0xbff00000
 8014af4:	000fffff 	.word	0x000fffff

08014af8 <matherr>:
 8014af8:	2000      	movs	r0, #0
 8014afa:	4770      	bx	lr
 8014afc:	0000      	movs	r0, r0
	...

08014b00 <scalbn>:
 8014b00:	b570      	push	{r4, r5, r6, lr}
 8014b02:	ec55 4b10 	vmov	r4, r5, d0
 8014b06:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014b0a:	4606      	mov	r6, r0
 8014b0c:	462b      	mov	r3, r5
 8014b0e:	b9aa      	cbnz	r2, 8014b3c <scalbn+0x3c>
 8014b10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014b14:	4323      	orrs	r3, r4
 8014b16:	d03b      	beq.n	8014b90 <scalbn+0x90>
 8014b18:	4b31      	ldr	r3, [pc, #196]	; (8014be0 <scalbn+0xe0>)
 8014b1a:	4629      	mov	r1, r5
 8014b1c:	2200      	movs	r2, #0
 8014b1e:	ee10 0a10 	vmov	r0, s0
 8014b22:	f7eb fd81 	bl	8000628 <__aeabi_dmul>
 8014b26:	4b2f      	ldr	r3, [pc, #188]	; (8014be4 <scalbn+0xe4>)
 8014b28:	429e      	cmp	r6, r3
 8014b2a:	4604      	mov	r4, r0
 8014b2c:	460d      	mov	r5, r1
 8014b2e:	da12      	bge.n	8014b56 <scalbn+0x56>
 8014b30:	a327      	add	r3, pc, #156	; (adr r3, 8014bd0 <scalbn+0xd0>)
 8014b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b36:	f7eb fd77 	bl	8000628 <__aeabi_dmul>
 8014b3a:	e009      	b.n	8014b50 <scalbn+0x50>
 8014b3c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014b40:	428a      	cmp	r2, r1
 8014b42:	d10c      	bne.n	8014b5e <scalbn+0x5e>
 8014b44:	ee10 2a10 	vmov	r2, s0
 8014b48:	4620      	mov	r0, r4
 8014b4a:	4629      	mov	r1, r5
 8014b4c:	f7eb fbb6 	bl	80002bc <__adddf3>
 8014b50:	4604      	mov	r4, r0
 8014b52:	460d      	mov	r5, r1
 8014b54:	e01c      	b.n	8014b90 <scalbn+0x90>
 8014b56:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014b5a:	460b      	mov	r3, r1
 8014b5c:	3a36      	subs	r2, #54	; 0x36
 8014b5e:	4432      	add	r2, r6
 8014b60:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014b64:	428a      	cmp	r2, r1
 8014b66:	dd0b      	ble.n	8014b80 <scalbn+0x80>
 8014b68:	ec45 4b11 	vmov	d1, r4, r5
 8014b6c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8014bd8 <scalbn+0xd8>
 8014b70:	f000 f83c 	bl	8014bec <copysign>
 8014b74:	a318      	add	r3, pc, #96	; (adr r3, 8014bd8 <scalbn+0xd8>)
 8014b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b7a:	ec51 0b10 	vmov	r0, r1, d0
 8014b7e:	e7da      	b.n	8014b36 <scalbn+0x36>
 8014b80:	2a00      	cmp	r2, #0
 8014b82:	dd08      	ble.n	8014b96 <scalbn+0x96>
 8014b84:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014b88:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014b8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014b90:	ec45 4b10 	vmov	d0, r4, r5
 8014b94:	bd70      	pop	{r4, r5, r6, pc}
 8014b96:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014b9a:	da0d      	bge.n	8014bb8 <scalbn+0xb8>
 8014b9c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014ba0:	429e      	cmp	r6, r3
 8014ba2:	ec45 4b11 	vmov	d1, r4, r5
 8014ba6:	dce1      	bgt.n	8014b6c <scalbn+0x6c>
 8014ba8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8014bd0 <scalbn+0xd0>
 8014bac:	f000 f81e 	bl	8014bec <copysign>
 8014bb0:	a307      	add	r3, pc, #28	; (adr r3, 8014bd0 <scalbn+0xd0>)
 8014bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bb6:	e7e0      	b.n	8014b7a <scalbn+0x7a>
 8014bb8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014bbc:	3236      	adds	r2, #54	; 0x36
 8014bbe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014bc2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014bc6:	4620      	mov	r0, r4
 8014bc8:	4629      	mov	r1, r5
 8014bca:	2200      	movs	r2, #0
 8014bcc:	4b06      	ldr	r3, [pc, #24]	; (8014be8 <scalbn+0xe8>)
 8014bce:	e7b2      	b.n	8014b36 <scalbn+0x36>
 8014bd0:	c2f8f359 	.word	0xc2f8f359
 8014bd4:	01a56e1f 	.word	0x01a56e1f
 8014bd8:	8800759c 	.word	0x8800759c
 8014bdc:	7e37e43c 	.word	0x7e37e43c
 8014be0:	43500000 	.word	0x43500000
 8014be4:	ffff3cb0 	.word	0xffff3cb0
 8014be8:	3c900000 	.word	0x3c900000

08014bec <copysign>:
 8014bec:	ec51 0b10 	vmov	r0, r1, d0
 8014bf0:	ee11 0a90 	vmov	r0, s3
 8014bf4:	ee10 2a10 	vmov	r2, s0
 8014bf8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014bfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8014c00:	ea41 0300 	orr.w	r3, r1, r0
 8014c04:	ec43 2b10 	vmov	d0, r2, r3
 8014c08:	4770      	bx	lr
	...

08014c0c <__errno>:
 8014c0c:	4b01      	ldr	r3, [pc, #4]	; (8014c14 <__errno+0x8>)
 8014c0e:	6818      	ldr	r0, [r3, #0]
 8014c10:	4770      	bx	lr
 8014c12:	bf00      	nop
 8014c14:	2000000c 	.word	0x2000000c

08014c18 <__libc_init_array>:
 8014c18:	b570      	push	{r4, r5, r6, lr}
 8014c1a:	4e0d      	ldr	r6, [pc, #52]	; (8014c50 <__libc_init_array+0x38>)
 8014c1c:	4c0d      	ldr	r4, [pc, #52]	; (8014c54 <__libc_init_array+0x3c>)
 8014c1e:	1ba4      	subs	r4, r4, r6
 8014c20:	10a4      	asrs	r4, r4, #2
 8014c22:	2500      	movs	r5, #0
 8014c24:	42a5      	cmp	r5, r4
 8014c26:	d109      	bne.n	8014c3c <__libc_init_array+0x24>
 8014c28:	4e0b      	ldr	r6, [pc, #44]	; (8014c58 <__libc_init_array+0x40>)
 8014c2a:	4c0c      	ldr	r4, [pc, #48]	; (8014c5c <__libc_init_array+0x44>)
 8014c2c:	f004 f9e8 	bl	8019000 <_init>
 8014c30:	1ba4      	subs	r4, r4, r6
 8014c32:	10a4      	asrs	r4, r4, #2
 8014c34:	2500      	movs	r5, #0
 8014c36:	42a5      	cmp	r5, r4
 8014c38:	d105      	bne.n	8014c46 <__libc_init_array+0x2e>
 8014c3a:	bd70      	pop	{r4, r5, r6, pc}
 8014c3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014c40:	4798      	blx	r3
 8014c42:	3501      	adds	r5, #1
 8014c44:	e7ee      	b.n	8014c24 <__libc_init_array+0xc>
 8014c46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014c4a:	4798      	blx	r3
 8014c4c:	3501      	adds	r5, #1
 8014c4e:	e7f2      	b.n	8014c36 <__libc_init_array+0x1e>
 8014c50:	08019bd4 	.word	0x08019bd4
 8014c54:	08019bd4 	.word	0x08019bd4
 8014c58:	08019bd4 	.word	0x08019bd4
 8014c5c:	08019bdc 	.word	0x08019bdc

08014c60 <memcpy>:
 8014c60:	b510      	push	{r4, lr}
 8014c62:	1e43      	subs	r3, r0, #1
 8014c64:	440a      	add	r2, r1
 8014c66:	4291      	cmp	r1, r2
 8014c68:	d100      	bne.n	8014c6c <memcpy+0xc>
 8014c6a:	bd10      	pop	{r4, pc}
 8014c6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014c70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014c74:	e7f7      	b.n	8014c66 <memcpy+0x6>

08014c76 <memset>:
 8014c76:	4402      	add	r2, r0
 8014c78:	4603      	mov	r3, r0
 8014c7a:	4293      	cmp	r3, r2
 8014c7c:	d100      	bne.n	8014c80 <memset+0xa>
 8014c7e:	4770      	bx	lr
 8014c80:	f803 1b01 	strb.w	r1, [r3], #1
 8014c84:	e7f9      	b.n	8014c7a <memset+0x4>

08014c86 <__cvt>:
 8014c86:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014c8a:	ec55 4b10 	vmov	r4, r5, d0
 8014c8e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8014c90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014c94:	2d00      	cmp	r5, #0
 8014c96:	460e      	mov	r6, r1
 8014c98:	4691      	mov	r9, r2
 8014c9a:	4619      	mov	r1, r3
 8014c9c:	bfb8      	it	lt
 8014c9e:	4622      	movlt	r2, r4
 8014ca0:	462b      	mov	r3, r5
 8014ca2:	f027 0720 	bic.w	r7, r7, #32
 8014ca6:	bfbb      	ittet	lt
 8014ca8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014cac:	461d      	movlt	r5, r3
 8014cae:	2300      	movge	r3, #0
 8014cb0:	232d      	movlt	r3, #45	; 0x2d
 8014cb2:	bfb8      	it	lt
 8014cb4:	4614      	movlt	r4, r2
 8014cb6:	2f46      	cmp	r7, #70	; 0x46
 8014cb8:	700b      	strb	r3, [r1, #0]
 8014cba:	d004      	beq.n	8014cc6 <__cvt+0x40>
 8014cbc:	2f45      	cmp	r7, #69	; 0x45
 8014cbe:	d100      	bne.n	8014cc2 <__cvt+0x3c>
 8014cc0:	3601      	adds	r6, #1
 8014cc2:	2102      	movs	r1, #2
 8014cc4:	e000      	b.n	8014cc8 <__cvt+0x42>
 8014cc6:	2103      	movs	r1, #3
 8014cc8:	ab03      	add	r3, sp, #12
 8014cca:	9301      	str	r3, [sp, #4]
 8014ccc:	ab02      	add	r3, sp, #8
 8014cce:	9300      	str	r3, [sp, #0]
 8014cd0:	4632      	mov	r2, r6
 8014cd2:	4653      	mov	r3, sl
 8014cd4:	ec45 4b10 	vmov	d0, r4, r5
 8014cd8:	f001 fdfe 	bl	80168d8 <_dtoa_r>
 8014cdc:	2f47      	cmp	r7, #71	; 0x47
 8014cde:	4680      	mov	r8, r0
 8014ce0:	d102      	bne.n	8014ce8 <__cvt+0x62>
 8014ce2:	f019 0f01 	tst.w	r9, #1
 8014ce6:	d026      	beq.n	8014d36 <__cvt+0xb0>
 8014ce8:	2f46      	cmp	r7, #70	; 0x46
 8014cea:	eb08 0906 	add.w	r9, r8, r6
 8014cee:	d111      	bne.n	8014d14 <__cvt+0x8e>
 8014cf0:	f898 3000 	ldrb.w	r3, [r8]
 8014cf4:	2b30      	cmp	r3, #48	; 0x30
 8014cf6:	d10a      	bne.n	8014d0e <__cvt+0x88>
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	4620      	mov	r0, r4
 8014cfe:	4629      	mov	r1, r5
 8014d00:	f7eb fefa 	bl	8000af8 <__aeabi_dcmpeq>
 8014d04:	b918      	cbnz	r0, 8014d0e <__cvt+0x88>
 8014d06:	f1c6 0601 	rsb	r6, r6, #1
 8014d0a:	f8ca 6000 	str.w	r6, [sl]
 8014d0e:	f8da 3000 	ldr.w	r3, [sl]
 8014d12:	4499      	add	r9, r3
 8014d14:	2200      	movs	r2, #0
 8014d16:	2300      	movs	r3, #0
 8014d18:	4620      	mov	r0, r4
 8014d1a:	4629      	mov	r1, r5
 8014d1c:	f7eb feec 	bl	8000af8 <__aeabi_dcmpeq>
 8014d20:	b938      	cbnz	r0, 8014d32 <__cvt+0xac>
 8014d22:	2230      	movs	r2, #48	; 0x30
 8014d24:	9b03      	ldr	r3, [sp, #12]
 8014d26:	454b      	cmp	r3, r9
 8014d28:	d205      	bcs.n	8014d36 <__cvt+0xb0>
 8014d2a:	1c59      	adds	r1, r3, #1
 8014d2c:	9103      	str	r1, [sp, #12]
 8014d2e:	701a      	strb	r2, [r3, #0]
 8014d30:	e7f8      	b.n	8014d24 <__cvt+0x9e>
 8014d32:	f8cd 900c 	str.w	r9, [sp, #12]
 8014d36:	9b03      	ldr	r3, [sp, #12]
 8014d38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014d3a:	eba3 0308 	sub.w	r3, r3, r8
 8014d3e:	4640      	mov	r0, r8
 8014d40:	6013      	str	r3, [r2, #0]
 8014d42:	b004      	add	sp, #16
 8014d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014d48 <__exponent>:
 8014d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014d4a:	2900      	cmp	r1, #0
 8014d4c:	4604      	mov	r4, r0
 8014d4e:	bfba      	itte	lt
 8014d50:	4249      	neglt	r1, r1
 8014d52:	232d      	movlt	r3, #45	; 0x2d
 8014d54:	232b      	movge	r3, #43	; 0x2b
 8014d56:	2909      	cmp	r1, #9
 8014d58:	f804 2b02 	strb.w	r2, [r4], #2
 8014d5c:	7043      	strb	r3, [r0, #1]
 8014d5e:	dd20      	ble.n	8014da2 <__exponent+0x5a>
 8014d60:	f10d 0307 	add.w	r3, sp, #7
 8014d64:	461f      	mov	r7, r3
 8014d66:	260a      	movs	r6, #10
 8014d68:	fb91 f5f6 	sdiv	r5, r1, r6
 8014d6c:	fb06 1115 	mls	r1, r6, r5, r1
 8014d70:	3130      	adds	r1, #48	; 0x30
 8014d72:	2d09      	cmp	r5, #9
 8014d74:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014d78:	f103 32ff 	add.w	r2, r3, #4294967295
 8014d7c:	4629      	mov	r1, r5
 8014d7e:	dc09      	bgt.n	8014d94 <__exponent+0x4c>
 8014d80:	3130      	adds	r1, #48	; 0x30
 8014d82:	3b02      	subs	r3, #2
 8014d84:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014d88:	42bb      	cmp	r3, r7
 8014d8a:	4622      	mov	r2, r4
 8014d8c:	d304      	bcc.n	8014d98 <__exponent+0x50>
 8014d8e:	1a10      	subs	r0, r2, r0
 8014d90:	b003      	add	sp, #12
 8014d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d94:	4613      	mov	r3, r2
 8014d96:	e7e7      	b.n	8014d68 <__exponent+0x20>
 8014d98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d9c:	f804 2b01 	strb.w	r2, [r4], #1
 8014da0:	e7f2      	b.n	8014d88 <__exponent+0x40>
 8014da2:	2330      	movs	r3, #48	; 0x30
 8014da4:	4419      	add	r1, r3
 8014da6:	7083      	strb	r3, [r0, #2]
 8014da8:	1d02      	adds	r2, r0, #4
 8014daa:	70c1      	strb	r1, [r0, #3]
 8014dac:	e7ef      	b.n	8014d8e <__exponent+0x46>
	...

08014db0 <_printf_float>:
 8014db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014db4:	b08d      	sub	sp, #52	; 0x34
 8014db6:	460c      	mov	r4, r1
 8014db8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8014dbc:	4616      	mov	r6, r2
 8014dbe:	461f      	mov	r7, r3
 8014dc0:	4605      	mov	r5, r0
 8014dc2:	f002 fe7b 	bl	8017abc <_localeconv_r>
 8014dc6:	6803      	ldr	r3, [r0, #0]
 8014dc8:	9304      	str	r3, [sp, #16]
 8014dca:	4618      	mov	r0, r3
 8014dcc:	f7eb fa18 	bl	8000200 <strlen>
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	930a      	str	r3, [sp, #40]	; 0x28
 8014dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8014dd8:	9005      	str	r0, [sp, #20]
 8014dda:	3307      	adds	r3, #7
 8014ddc:	f023 0307 	bic.w	r3, r3, #7
 8014de0:	f103 0208 	add.w	r2, r3, #8
 8014de4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014de8:	f8d4 b000 	ldr.w	fp, [r4]
 8014dec:	f8c8 2000 	str.w	r2, [r8]
 8014df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014df4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014df8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014dfc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014e00:	9307      	str	r3, [sp, #28]
 8014e02:	f8cd 8018 	str.w	r8, [sp, #24]
 8014e06:	f04f 32ff 	mov.w	r2, #4294967295
 8014e0a:	4ba7      	ldr	r3, [pc, #668]	; (80150a8 <_printf_float+0x2f8>)
 8014e0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014e10:	f7eb fea4 	bl	8000b5c <__aeabi_dcmpun>
 8014e14:	bb70      	cbnz	r0, 8014e74 <_printf_float+0xc4>
 8014e16:	f04f 32ff 	mov.w	r2, #4294967295
 8014e1a:	4ba3      	ldr	r3, [pc, #652]	; (80150a8 <_printf_float+0x2f8>)
 8014e1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014e20:	f7eb fe7e 	bl	8000b20 <__aeabi_dcmple>
 8014e24:	bb30      	cbnz	r0, 8014e74 <_printf_float+0xc4>
 8014e26:	2200      	movs	r2, #0
 8014e28:	2300      	movs	r3, #0
 8014e2a:	4640      	mov	r0, r8
 8014e2c:	4649      	mov	r1, r9
 8014e2e:	f7eb fe6d 	bl	8000b0c <__aeabi_dcmplt>
 8014e32:	b110      	cbz	r0, 8014e3a <_printf_float+0x8a>
 8014e34:	232d      	movs	r3, #45	; 0x2d
 8014e36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014e3a:	4a9c      	ldr	r2, [pc, #624]	; (80150ac <_printf_float+0x2fc>)
 8014e3c:	4b9c      	ldr	r3, [pc, #624]	; (80150b0 <_printf_float+0x300>)
 8014e3e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014e42:	bf8c      	ite	hi
 8014e44:	4690      	movhi	r8, r2
 8014e46:	4698      	movls	r8, r3
 8014e48:	2303      	movs	r3, #3
 8014e4a:	f02b 0204 	bic.w	r2, fp, #4
 8014e4e:	6123      	str	r3, [r4, #16]
 8014e50:	6022      	str	r2, [r4, #0]
 8014e52:	f04f 0900 	mov.w	r9, #0
 8014e56:	9700      	str	r7, [sp, #0]
 8014e58:	4633      	mov	r3, r6
 8014e5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8014e5c:	4621      	mov	r1, r4
 8014e5e:	4628      	mov	r0, r5
 8014e60:	f000 f9e6 	bl	8015230 <_printf_common>
 8014e64:	3001      	adds	r0, #1
 8014e66:	f040 808d 	bne.w	8014f84 <_printf_float+0x1d4>
 8014e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8014e6e:	b00d      	add	sp, #52	; 0x34
 8014e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e74:	4642      	mov	r2, r8
 8014e76:	464b      	mov	r3, r9
 8014e78:	4640      	mov	r0, r8
 8014e7a:	4649      	mov	r1, r9
 8014e7c:	f7eb fe6e 	bl	8000b5c <__aeabi_dcmpun>
 8014e80:	b110      	cbz	r0, 8014e88 <_printf_float+0xd8>
 8014e82:	4a8c      	ldr	r2, [pc, #560]	; (80150b4 <_printf_float+0x304>)
 8014e84:	4b8c      	ldr	r3, [pc, #560]	; (80150b8 <_printf_float+0x308>)
 8014e86:	e7da      	b.n	8014e3e <_printf_float+0x8e>
 8014e88:	6861      	ldr	r1, [r4, #4]
 8014e8a:	1c4b      	adds	r3, r1, #1
 8014e8c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8014e90:	a80a      	add	r0, sp, #40	; 0x28
 8014e92:	d13e      	bne.n	8014f12 <_printf_float+0x162>
 8014e94:	2306      	movs	r3, #6
 8014e96:	6063      	str	r3, [r4, #4]
 8014e98:	2300      	movs	r3, #0
 8014e9a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014e9e:	ab09      	add	r3, sp, #36	; 0x24
 8014ea0:	9300      	str	r3, [sp, #0]
 8014ea2:	ec49 8b10 	vmov	d0, r8, r9
 8014ea6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014eaa:	6022      	str	r2, [r4, #0]
 8014eac:	f8cd a004 	str.w	sl, [sp, #4]
 8014eb0:	6861      	ldr	r1, [r4, #4]
 8014eb2:	4628      	mov	r0, r5
 8014eb4:	f7ff fee7 	bl	8014c86 <__cvt>
 8014eb8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8014ebc:	2b47      	cmp	r3, #71	; 0x47
 8014ebe:	4680      	mov	r8, r0
 8014ec0:	d109      	bne.n	8014ed6 <_printf_float+0x126>
 8014ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ec4:	1cd8      	adds	r0, r3, #3
 8014ec6:	db02      	blt.n	8014ece <_printf_float+0x11e>
 8014ec8:	6862      	ldr	r2, [r4, #4]
 8014eca:	4293      	cmp	r3, r2
 8014ecc:	dd47      	ble.n	8014f5e <_printf_float+0x1ae>
 8014ece:	f1aa 0a02 	sub.w	sl, sl, #2
 8014ed2:	fa5f fa8a 	uxtb.w	sl, sl
 8014ed6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014eda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014edc:	d824      	bhi.n	8014f28 <_printf_float+0x178>
 8014ede:	3901      	subs	r1, #1
 8014ee0:	4652      	mov	r2, sl
 8014ee2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014ee6:	9109      	str	r1, [sp, #36]	; 0x24
 8014ee8:	f7ff ff2e 	bl	8014d48 <__exponent>
 8014eec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014eee:	1813      	adds	r3, r2, r0
 8014ef0:	2a01      	cmp	r2, #1
 8014ef2:	4681      	mov	r9, r0
 8014ef4:	6123      	str	r3, [r4, #16]
 8014ef6:	dc02      	bgt.n	8014efe <_printf_float+0x14e>
 8014ef8:	6822      	ldr	r2, [r4, #0]
 8014efa:	07d1      	lsls	r1, r2, #31
 8014efc:	d501      	bpl.n	8014f02 <_printf_float+0x152>
 8014efe:	3301      	adds	r3, #1
 8014f00:	6123      	str	r3, [r4, #16]
 8014f02:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d0a5      	beq.n	8014e56 <_printf_float+0xa6>
 8014f0a:	232d      	movs	r3, #45	; 0x2d
 8014f0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014f10:	e7a1      	b.n	8014e56 <_printf_float+0xa6>
 8014f12:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8014f16:	f000 8177 	beq.w	8015208 <_printf_float+0x458>
 8014f1a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014f1e:	d1bb      	bne.n	8014e98 <_printf_float+0xe8>
 8014f20:	2900      	cmp	r1, #0
 8014f22:	d1b9      	bne.n	8014e98 <_printf_float+0xe8>
 8014f24:	2301      	movs	r3, #1
 8014f26:	e7b6      	b.n	8014e96 <_printf_float+0xe6>
 8014f28:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8014f2c:	d119      	bne.n	8014f62 <_printf_float+0x1b2>
 8014f2e:	2900      	cmp	r1, #0
 8014f30:	6863      	ldr	r3, [r4, #4]
 8014f32:	dd0c      	ble.n	8014f4e <_printf_float+0x19e>
 8014f34:	6121      	str	r1, [r4, #16]
 8014f36:	b913      	cbnz	r3, 8014f3e <_printf_float+0x18e>
 8014f38:	6822      	ldr	r2, [r4, #0]
 8014f3a:	07d2      	lsls	r2, r2, #31
 8014f3c:	d502      	bpl.n	8014f44 <_printf_float+0x194>
 8014f3e:	3301      	adds	r3, #1
 8014f40:	440b      	add	r3, r1
 8014f42:	6123      	str	r3, [r4, #16]
 8014f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f46:	65a3      	str	r3, [r4, #88]	; 0x58
 8014f48:	f04f 0900 	mov.w	r9, #0
 8014f4c:	e7d9      	b.n	8014f02 <_printf_float+0x152>
 8014f4e:	b913      	cbnz	r3, 8014f56 <_printf_float+0x1a6>
 8014f50:	6822      	ldr	r2, [r4, #0]
 8014f52:	07d0      	lsls	r0, r2, #31
 8014f54:	d501      	bpl.n	8014f5a <_printf_float+0x1aa>
 8014f56:	3302      	adds	r3, #2
 8014f58:	e7f3      	b.n	8014f42 <_printf_float+0x192>
 8014f5a:	2301      	movs	r3, #1
 8014f5c:	e7f1      	b.n	8014f42 <_printf_float+0x192>
 8014f5e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8014f62:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014f66:	4293      	cmp	r3, r2
 8014f68:	db05      	blt.n	8014f76 <_printf_float+0x1c6>
 8014f6a:	6822      	ldr	r2, [r4, #0]
 8014f6c:	6123      	str	r3, [r4, #16]
 8014f6e:	07d1      	lsls	r1, r2, #31
 8014f70:	d5e8      	bpl.n	8014f44 <_printf_float+0x194>
 8014f72:	3301      	adds	r3, #1
 8014f74:	e7e5      	b.n	8014f42 <_printf_float+0x192>
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	bfd4      	ite	le
 8014f7a:	f1c3 0302 	rsble	r3, r3, #2
 8014f7e:	2301      	movgt	r3, #1
 8014f80:	4413      	add	r3, r2
 8014f82:	e7de      	b.n	8014f42 <_printf_float+0x192>
 8014f84:	6823      	ldr	r3, [r4, #0]
 8014f86:	055a      	lsls	r2, r3, #21
 8014f88:	d407      	bmi.n	8014f9a <_printf_float+0x1ea>
 8014f8a:	6923      	ldr	r3, [r4, #16]
 8014f8c:	4642      	mov	r2, r8
 8014f8e:	4631      	mov	r1, r6
 8014f90:	4628      	mov	r0, r5
 8014f92:	47b8      	blx	r7
 8014f94:	3001      	adds	r0, #1
 8014f96:	d12b      	bne.n	8014ff0 <_printf_float+0x240>
 8014f98:	e767      	b.n	8014e6a <_printf_float+0xba>
 8014f9a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014f9e:	f240 80dc 	bls.w	801515a <_printf_float+0x3aa>
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014faa:	f7eb fda5 	bl	8000af8 <__aeabi_dcmpeq>
 8014fae:	2800      	cmp	r0, #0
 8014fb0:	d033      	beq.n	801501a <_printf_float+0x26a>
 8014fb2:	2301      	movs	r3, #1
 8014fb4:	4a41      	ldr	r2, [pc, #260]	; (80150bc <_printf_float+0x30c>)
 8014fb6:	4631      	mov	r1, r6
 8014fb8:	4628      	mov	r0, r5
 8014fba:	47b8      	blx	r7
 8014fbc:	3001      	adds	r0, #1
 8014fbe:	f43f af54 	beq.w	8014e6a <_printf_float+0xba>
 8014fc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014fc6:	429a      	cmp	r2, r3
 8014fc8:	db02      	blt.n	8014fd0 <_printf_float+0x220>
 8014fca:	6823      	ldr	r3, [r4, #0]
 8014fcc:	07d8      	lsls	r0, r3, #31
 8014fce:	d50f      	bpl.n	8014ff0 <_printf_float+0x240>
 8014fd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014fd4:	4631      	mov	r1, r6
 8014fd6:	4628      	mov	r0, r5
 8014fd8:	47b8      	blx	r7
 8014fda:	3001      	adds	r0, #1
 8014fdc:	f43f af45 	beq.w	8014e6a <_printf_float+0xba>
 8014fe0:	f04f 0800 	mov.w	r8, #0
 8014fe4:	f104 091a 	add.w	r9, r4, #26
 8014fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014fea:	3b01      	subs	r3, #1
 8014fec:	4543      	cmp	r3, r8
 8014fee:	dc09      	bgt.n	8015004 <_printf_float+0x254>
 8014ff0:	6823      	ldr	r3, [r4, #0]
 8014ff2:	079b      	lsls	r3, r3, #30
 8014ff4:	f100 8103 	bmi.w	80151fe <_printf_float+0x44e>
 8014ff8:	68e0      	ldr	r0, [r4, #12]
 8014ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ffc:	4298      	cmp	r0, r3
 8014ffe:	bfb8      	it	lt
 8015000:	4618      	movlt	r0, r3
 8015002:	e734      	b.n	8014e6e <_printf_float+0xbe>
 8015004:	2301      	movs	r3, #1
 8015006:	464a      	mov	r2, r9
 8015008:	4631      	mov	r1, r6
 801500a:	4628      	mov	r0, r5
 801500c:	47b8      	blx	r7
 801500e:	3001      	adds	r0, #1
 8015010:	f43f af2b 	beq.w	8014e6a <_printf_float+0xba>
 8015014:	f108 0801 	add.w	r8, r8, #1
 8015018:	e7e6      	b.n	8014fe8 <_printf_float+0x238>
 801501a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801501c:	2b00      	cmp	r3, #0
 801501e:	dc2b      	bgt.n	8015078 <_printf_float+0x2c8>
 8015020:	2301      	movs	r3, #1
 8015022:	4a26      	ldr	r2, [pc, #152]	; (80150bc <_printf_float+0x30c>)
 8015024:	4631      	mov	r1, r6
 8015026:	4628      	mov	r0, r5
 8015028:	47b8      	blx	r7
 801502a:	3001      	adds	r0, #1
 801502c:	f43f af1d 	beq.w	8014e6a <_printf_float+0xba>
 8015030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015032:	b923      	cbnz	r3, 801503e <_printf_float+0x28e>
 8015034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015036:	b913      	cbnz	r3, 801503e <_printf_float+0x28e>
 8015038:	6823      	ldr	r3, [r4, #0]
 801503a:	07d9      	lsls	r1, r3, #31
 801503c:	d5d8      	bpl.n	8014ff0 <_printf_float+0x240>
 801503e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015042:	4631      	mov	r1, r6
 8015044:	4628      	mov	r0, r5
 8015046:	47b8      	blx	r7
 8015048:	3001      	adds	r0, #1
 801504a:	f43f af0e 	beq.w	8014e6a <_printf_float+0xba>
 801504e:	f04f 0900 	mov.w	r9, #0
 8015052:	f104 0a1a 	add.w	sl, r4, #26
 8015056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015058:	425b      	negs	r3, r3
 801505a:	454b      	cmp	r3, r9
 801505c:	dc01      	bgt.n	8015062 <_printf_float+0x2b2>
 801505e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015060:	e794      	b.n	8014f8c <_printf_float+0x1dc>
 8015062:	2301      	movs	r3, #1
 8015064:	4652      	mov	r2, sl
 8015066:	4631      	mov	r1, r6
 8015068:	4628      	mov	r0, r5
 801506a:	47b8      	blx	r7
 801506c:	3001      	adds	r0, #1
 801506e:	f43f aefc 	beq.w	8014e6a <_printf_float+0xba>
 8015072:	f109 0901 	add.w	r9, r9, #1
 8015076:	e7ee      	b.n	8015056 <_printf_float+0x2a6>
 8015078:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801507a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801507c:	429a      	cmp	r2, r3
 801507e:	bfa8      	it	ge
 8015080:	461a      	movge	r2, r3
 8015082:	2a00      	cmp	r2, #0
 8015084:	4691      	mov	r9, r2
 8015086:	dd07      	ble.n	8015098 <_printf_float+0x2e8>
 8015088:	4613      	mov	r3, r2
 801508a:	4631      	mov	r1, r6
 801508c:	4642      	mov	r2, r8
 801508e:	4628      	mov	r0, r5
 8015090:	47b8      	blx	r7
 8015092:	3001      	adds	r0, #1
 8015094:	f43f aee9 	beq.w	8014e6a <_printf_float+0xba>
 8015098:	f104 031a 	add.w	r3, r4, #26
 801509c:	f04f 0b00 	mov.w	fp, #0
 80150a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80150a4:	9306      	str	r3, [sp, #24]
 80150a6:	e015      	b.n	80150d4 <_printf_float+0x324>
 80150a8:	7fefffff 	.word	0x7fefffff
 80150ac:	0801989c 	.word	0x0801989c
 80150b0:	08019898 	.word	0x08019898
 80150b4:	080198a4 	.word	0x080198a4
 80150b8:	080198a0 	.word	0x080198a0
 80150bc:	08019ac3 	.word	0x08019ac3
 80150c0:	2301      	movs	r3, #1
 80150c2:	9a06      	ldr	r2, [sp, #24]
 80150c4:	4631      	mov	r1, r6
 80150c6:	4628      	mov	r0, r5
 80150c8:	47b8      	blx	r7
 80150ca:	3001      	adds	r0, #1
 80150cc:	f43f aecd 	beq.w	8014e6a <_printf_float+0xba>
 80150d0:	f10b 0b01 	add.w	fp, fp, #1
 80150d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80150d8:	ebaa 0309 	sub.w	r3, sl, r9
 80150dc:	455b      	cmp	r3, fp
 80150de:	dcef      	bgt.n	80150c0 <_printf_float+0x310>
 80150e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80150e4:	429a      	cmp	r2, r3
 80150e6:	44d0      	add	r8, sl
 80150e8:	db15      	blt.n	8015116 <_printf_float+0x366>
 80150ea:	6823      	ldr	r3, [r4, #0]
 80150ec:	07da      	lsls	r2, r3, #31
 80150ee:	d412      	bmi.n	8015116 <_printf_float+0x366>
 80150f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80150f4:	eba3 020a 	sub.w	r2, r3, sl
 80150f8:	eba3 0a01 	sub.w	sl, r3, r1
 80150fc:	4592      	cmp	sl, r2
 80150fe:	bfa8      	it	ge
 8015100:	4692      	movge	sl, r2
 8015102:	f1ba 0f00 	cmp.w	sl, #0
 8015106:	dc0e      	bgt.n	8015126 <_printf_float+0x376>
 8015108:	f04f 0800 	mov.w	r8, #0
 801510c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015110:	f104 091a 	add.w	r9, r4, #26
 8015114:	e019      	b.n	801514a <_printf_float+0x39a>
 8015116:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801511a:	4631      	mov	r1, r6
 801511c:	4628      	mov	r0, r5
 801511e:	47b8      	blx	r7
 8015120:	3001      	adds	r0, #1
 8015122:	d1e5      	bne.n	80150f0 <_printf_float+0x340>
 8015124:	e6a1      	b.n	8014e6a <_printf_float+0xba>
 8015126:	4653      	mov	r3, sl
 8015128:	4642      	mov	r2, r8
 801512a:	4631      	mov	r1, r6
 801512c:	4628      	mov	r0, r5
 801512e:	47b8      	blx	r7
 8015130:	3001      	adds	r0, #1
 8015132:	d1e9      	bne.n	8015108 <_printf_float+0x358>
 8015134:	e699      	b.n	8014e6a <_printf_float+0xba>
 8015136:	2301      	movs	r3, #1
 8015138:	464a      	mov	r2, r9
 801513a:	4631      	mov	r1, r6
 801513c:	4628      	mov	r0, r5
 801513e:	47b8      	blx	r7
 8015140:	3001      	adds	r0, #1
 8015142:	f43f ae92 	beq.w	8014e6a <_printf_float+0xba>
 8015146:	f108 0801 	add.w	r8, r8, #1
 801514a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801514e:	1a9b      	subs	r3, r3, r2
 8015150:	eba3 030a 	sub.w	r3, r3, sl
 8015154:	4543      	cmp	r3, r8
 8015156:	dcee      	bgt.n	8015136 <_printf_float+0x386>
 8015158:	e74a      	b.n	8014ff0 <_printf_float+0x240>
 801515a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801515c:	2a01      	cmp	r2, #1
 801515e:	dc01      	bgt.n	8015164 <_printf_float+0x3b4>
 8015160:	07db      	lsls	r3, r3, #31
 8015162:	d53a      	bpl.n	80151da <_printf_float+0x42a>
 8015164:	2301      	movs	r3, #1
 8015166:	4642      	mov	r2, r8
 8015168:	4631      	mov	r1, r6
 801516a:	4628      	mov	r0, r5
 801516c:	47b8      	blx	r7
 801516e:	3001      	adds	r0, #1
 8015170:	f43f ae7b 	beq.w	8014e6a <_printf_float+0xba>
 8015174:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015178:	4631      	mov	r1, r6
 801517a:	4628      	mov	r0, r5
 801517c:	47b8      	blx	r7
 801517e:	3001      	adds	r0, #1
 8015180:	f108 0801 	add.w	r8, r8, #1
 8015184:	f43f ae71 	beq.w	8014e6a <_printf_float+0xba>
 8015188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801518a:	2200      	movs	r2, #0
 801518c:	f103 3aff 	add.w	sl, r3, #4294967295
 8015190:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015194:	2300      	movs	r3, #0
 8015196:	f7eb fcaf 	bl	8000af8 <__aeabi_dcmpeq>
 801519a:	b9c8      	cbnz	r0, 80151d0 <_printf_float+0x420>
 801519c:	4653      	mov	r3, sl
 801519e:	4642      	mov	r2, r8
 80151a0:	4631      	mov	r1, r6
 80151a2:	4628      	mov	r0, r5
 80151a4:	47b8      	blx	r7
 80151a6:	3001      	adds	r0, #1
 80151a8:	d10e      	bne.n	80151c8 <_printf_float+0x418>
 80151aa:	e65e      	b.n	8014e6a <_printf_float+0xba>
 80151ac:	2301      	movs	r3, #1
 80151ae:	4652      	mov	r2, sl
 80151b0:	4631      	mov	r1, r6
 80151b2:	4628      	mov	r0, r5
 80151b4:	47b8      	blx	r7
 80151b6:	3001      	adds	r0, #1
 80151b8:	f43f ae57 	beq.w	8014e6a <_printf_float+0xba>
 80151bc:	f108 0801 	add.w	r8, r8, #1
 80151c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151c2:	3b01      	subs	r3, #1
 80151c4:	4543      	cmp	r3, r8
 80151c6:	dcf1      	bgt.n	80151ac <_printf_float+0x3fc>
 80151c8:	464b      	mov	r3, r9
 80151ca:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80151ce:	e6de      	b.n	8014f8e <_printf_float+0x1de>
 80151d0:	f04f 0800 	mov.w	r8, #0
 80151d4:	f104 0a1a 	add.w	sl, r4, #26
 80151d8:	e7f2      	b.n	80151c0 <_printf_float+0x410>
 80151da:	2301      	movs	r3, #1
 80151dc:	e7df      	b.n	801519e <_printf_float+0x3ee>
 80151de:	2301      	movs	r3, #1
 80151e0:	464a      	mov	r2, r9
 80151e2:	4631      	mov	r1, r6
 80151e4:	4628      	mov	r0, r5
 80151e6:	47b8      	blx	r7
 80151e8:	3001      	adds	r0, #1
 80151ea:	f43f ae3e 	beq.w	8014e6a <_printf_float+0xba>
 80151ee:	f108 0801 	add.w	r8, r8, #1
 80151f2:	68e3      	ldr	r3, [r4, #12]
 80151f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80151f6:	1a9b      	subs	r3, r3, r2
 80151f8:	4543      	cmp	r3, r8
 80151fa:	dcf0      	bgt.n	80151de <_printf_float+0x42e>
 80151fc:	e6fc      	b.n	8014ff8 <_printf_float+0x248>
 80151fe:	f04f 0800 	mov.w	r8, #0
 8015202:	f104 0919 	add.w	r9, r4, #25
 8015206:	e7f4      	b.n	80151f2 <_printf_float+0x442>
 8015208:	2900      	cmp	r1, #0
 801520a:	f43f ae8b 	beq.w	8014f24 <_printf_float+0x174>
 801520e:	2300      	movs	r3, #0
 8015210:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015214:	ab09      	add	r3, sp, #36	; 0x24
 8015216:	9300      	str	r3, [sp, #0]
 8015218:	ec49 8b10 	vmov	d0, r8, r9
 801521c:	6022      	str	r2, [r4, #0]
 801521e:	f8cd a004 	str.w	sl, [sp, #4]
 8015222:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015226:	4628      	mov	r0, r5
 8015228:	f7ff fd2d 	bl	8014c86 <__cvt>
 801522c:	4680      	mov	r8, r0
 801522e:	e648      	b.n	8014ec2 <_printf_float+0x112>

08015230 <_printf_common>:
 8015230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015234:	4691      	mov	r9, r2
 8015236:	461f      	mov	r7, r3
 8015238:	688a      	ldr	r2, [r1, #8]
 801523a:	690b      	ldr	r3, [r1, #16]
 801523c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015240:	4293      	cmp	r3, r2
 8015242:	bfb8      	it	lt
 8015244:	4613      	movlt	r3, r2
 8015246:	f8c9 3000 	str.w	r3, [r9]
 801524a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801524e:	4606      	mov	r6, r0
 8015250:	460c      	mov	r4, r1
 8015252:	b112      	cbz	r2, 801525a <_printf_common+0x2a>
 8015254:	3301      	adds	r3, #1
 8015256:	f8c9 3000 	str.w	r3, [r9]
 801525a:	6823      	ldr	r3, [r4, #0]
 801525c:	0699      	lsls	r1, r3, #26
 801525e:	bf42      	ittt	mi
 8015260:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015264:	3302      	addmi	r3, #2
 8015266:	f8c9 3000 	strmi.w	r3, [r9]
 801526a:	6825      	ldr	r5, [r4, #0]
 801526c:	f015 0506 	ands.w	r5, r5, #6
 8015270:	d107      	bne.n	8015282 <_printf_common+0x52>
 8015272:	f104 0a19 	add.w	sl, r4, #25
 8015276:	68e3      	ldr	r3, [r4, #12]
 8015278:	f8d9 2000 	ldr.w	r2, [r9]
 801527c:	1a9b      	subs	r3, r3, r2
 801527e:	42ab      	cmp	r3, r5
 8015280:	dc28      	bgt.n	80152d4 <_printf_common+0xa4>
 8015282:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015286:	6822      	ldr	r2, [r4, #0]
 8015288:	3300      	adds	r3, #0
 801528a:	bf18      	it	ne
 801528c:	2301      	movne	r3, #1
 801528e:	0692      	lsls	r2, r2, #26
 8015290:	d42d      	bmi.n	80152ee <_printf_common+0xbe>
 8015292:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015296:	4639      	mov	r1, r7
 8015298:	4630      	mov	r0, r6
 801529a:	47c0      	blx	r8
 801529c:	3001      	adds	r0, #1
 801529e:	d020      	beq.n	80152e2 <_printf_common+0xb2>
 80152a0:	6823      	ldr	r3, [r4, #0]
 80152a2:	68e5      	ldr	r5, [r4, #12]
 80152a4:	f8d9 2000 	ldr.w	r2, [r9]
 80152a8:	f003 0306 	and.w	r3, r3, #6
 80152ac:	2b04      	cmp	r3, #4
 80152ae:	bf08      	it	eq
 80152b0:	1aad      	subeq	r5, r5, r2
 80152b2:	68a3      	ldr	r3, [r4, #8]
 80152b4:	6922      	ldr	r2, [r4, #16]
 80152b6:	bf0c      	ite	eq
 80152b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80152bc:	2500      	movne	r5, #0
 80152be:	4293      	cmp	r3, r2
 80152c0:	bfc4      	itt	gt
 80152c2:	1a9b      	subgt	r3, r3, r2
 80152c4:	18ed      	addgt	r5, r5, r3
 80152c6:	f04f 0900 	mov.w	r9, #0
 80152ca:	341a      	adds	r4, #26
 80152cc:	454d      	cmp	r5, r9
 80152ce:	d11a      	bne.n	8015306 <_printf_common+0xd6>
 80152d0:	2000      	movs	r0, #0
 80152d2:	e008      	b.n	80152e6 <_printf_common+0xb6>
 80152d4:	2301      	movs	r3, #1
 80152d6:	4652      	mov	r2, sl
 80152d8:	4639      	mov	r1, r7
 80152da:	4630      	mov	r0, r6
 80152dc:	47c0      	blx	r8
 80152de:	3001      	adds	r0, #1
 80152e0:	d103      	bne.n	80152ea <_printf_common+0xba>
 80152e2:	f04f 30ff 	mov.w	r0, #4294967295
 80152e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152ea:	3501      	adds	r5, #1
 80152ec:	e7c3      	b.n	8015276 <_printf_common+0x46>
 80152ee:	18e1      	adds	r1, r4, r3
 80152f0:	1c5a      	adds	r2, r3, #1
 80152f2:	2030      	movs	r0, #48	; 0x30
 80152f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80152f8:	4422      	add	r2, r4
 80152fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80152fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015302:	3302      	adds	r3, #2
 8015304:	e7c5      	b.n	8015292 <_printf_common+0x62>
 8015306:	2301      	movs	r3, #1
 8015308:	4622      	mov	r2, r4
 801530a:	4639      	mov	r1, r7
 801530c:	4630      	mov	r0, r6
 801530e:	47c0      	blx	r8
 8015310:	3001      	adds	r0, #1
 8015312:	d0e6      	beq.n	80152e2 <_printf_common+0xb2>
 8015314:	f109 0901 	add.w	r9, r9, #1
 8015318:	e7d8      	b.n	80152cc <_printf_common+0x9c>
	...

0801531c <_printf_i>:
 801531c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015320:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015324:	460c      	mov	r4, r1
 8015326:	7e09      	ldrb	r1, [r1, #24]
 8015328:	b085      	sub	sp, #20
 801532a:	296e      	cmp	r1, #110	; 0x6e
 801532c:	4617      	mov	r7, r2
 801532e:	4606      	mov	r6, r0
 8015330:	4698      	mov	r8, r3
 8015332:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015334:	f000 80b3 	beq.w	801549e <_printf_i+0x182>
 8015338:	d822      	bhi.n	8015380 <_printf_i+0x64>
 801533a:	2963      	cmp	r1, #99	; 0x63
 801533c:	d036      	beq.n	80153ac <_printf_i+0x90>
 801533e:	d80a      	bhi.n	8015356 <_printf_i+0x3a>
 8015340:	2900      	cmp	r1, #0
 8015342:	f000 80b9 	beq.w	80154b8 <_printf_i+0x19c>
 8015346:	2958      	cmp	r1, #88	; 0x58
 8015348:	f000 8083 	beq.w	8015452 <_printf_i+0x136>
 801534c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015350:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015354:	e032      	b.n	80153bc <_printf_i+0xa0>
 8015356:	2964      	cmp	r1, #100	; 0x64
 8015358:	d001      	beq.n	801535e <_printf_i+0x42>
 801535a:	2969      	cmp	r1, #105	; 0x69
 801535c:	d1f6      	bne.n	801534c <_printf_i+0x30>
 801535e:	6820      	ldr	r0, [r4, #0]
 8015360:	6813      	ldr	r3, [r2, #0]
 8015362:	0605      	lsls	r5, r0, #24
 8015364:	f103 0104 	add.w	r1, r3, #4
 8015368:	d52a      	bpl.n	80153c0 <_printf_i+0xa4>
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	6011      	str	r1, [r2, #0]
 801536e:	2b00      	cmp	r3, #0
 8015370:	da03      	bge.n	801537a <_printf_i+0x5e>
 8015372:	222d      	movs	r2, #45	; 0x2d
 8015374:	425b      	negs	r3, r3
 8015376:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801537a:	486f      	ldr	r0, [pc, #444]	; (8015538 <_printf_i+0x21c>)
 801537c:	220a      	movs	r2, #10
 801537e:	e039      	b.n	80153f4 <_printf_i+0xd8>
 8015380:	2973      	cmp	r1, #115	; 0x73
 8015382:	f000 809d 	beq.w	80154c0 <_printf_i+0x1a4>
 8015386:	d808      	bhi.n	801539a <_printf_i+0x7e>
 8015388:	296f      	cmp	r1, #111	; 0x6f
 801538a:	d020      	beq.n	80153ce <_printf_i+0xb2>
 801538c:	2970      	cmp	r1, #112	; 0x70
 801538e:	d1dd      	bne.n	801534c <_printf_i+0x30>
 8015390:	6823      	ldr	r3, [r4, #0]
 8015392:	f043 0320 	orr.w	r3, r3, #32
 8015396:	6023      	str	r3, [r4, #0]
 8015398:	e003      	b.n	80153a2 <_printf_i+0x86>
 801539a:	2975      	cmp	r1, #117	; 0x75
 801539c:	d017      	beq.n	80153ce <_printf_i+0xb2>
 801539e:	2978      	cmp	r1, #120	; 0x78
 80153a0:	d1d4      	bne.n	801534c <_printf_i+0x30>
 80153a2:	2378      	movs	r3, #120	; 0x78
 80153a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80153a8:	4864      	ldr	r0, [pc, #400]	; (801553c <_printf_i+0x220>)
 80153aa:	e055      	b.n	8015458 <_printf_i+0x13c>
 80153ac:	6813      	ldr	r3, [r2, #0]
 80153ae:	1d19      	adds	r1, r3, #4
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	6011      	str	r1, [r2, #0]
 80153b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80153b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80153bc:	2301      	movs	r3, #1
 80153be:	e08c      	b.n	80154da <_printf_i+0x1be>
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	6011      	str	r1, [r2, #0]
 80153c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80153c8:	bf18      	it	ne
 80153ca:	b21b      	sxthne	r3, r3
 80153cc:	e7cf      	b.n	801536e <_printf_i+0x52>
 80153ce:	6813      	ldr	r3, [r2, #0]
 80153d0:	6825      	ldr	r5, [r4, #0]
 80153d2:	1d18      	adds	r0, r3, #4
 80153d4:	6010      	str	r0, [r2, #0]
 80153d6:	0628      	lsls	r0, r5, #24
 80153d8:	d501      	bpl.n	80153de <_printf_i+0xc2>
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	e002      	b.n	80153e4 <_printf_i+0xc8>
 80153de:	0668      	lsls	r0, r5, #25
 80153e0:	d5fb      	bpl.n	80153da <_printf_i+0xbe>
 80153e2:	881b      	ldrh	r3, [r3, #0]
 80153e4:	4854      	ldr	r0, [pc, #336]	; (8015538 <_printf_i+0x21c>)
 80153e6:	296f      	cmp	r1, #111	; 0x6f
 80153e8:	bf14      	ite	ne
 80153ea:	220a      	movne	r2, #10
 80153ec:	2208      	moveq	r2, #8
 80153ee:	2100      	movs	r1, #0
 80153f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80153f4:	6865      	ldr	r5, [r4, #4]
 80153f6:	60a5      	str	r5, [r4, #8]
 80153f8:	2d00      	cmp	r5, #0
 80153fa:	f2c0 8095 	blt.w	8015528 <_printf_i+0x20c>
 80153fe:	6821      	ldr	r1, [r4, #0]
 8015400:	f021 0104 	bic.w	r1, r1, #4
 8015404:	6021      	str	r1, [r4, #0]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d13d      	bne.n	8015486 <_printf_i+0x16a>
 801540a:	2d00      	cmp	r5, #0
 801540c:	f040 808e 	bne.w	801552c <_printf_i+0x210>
 8015410:	4665      	mov	r5, ip
 8015412:	2a08      	cmp	r2, #8
 8015414:	d10b      	bne.n	801542e <_printf_i+0x112>
 8015416:	6823      	ldr	r3, [r4, #0]
 8015418:	07db      	lsls	r3, r3, #31
 801541a:	d508      	bpl.n	801542e <_printf_i+0x112>
 801541c:	6923      	ldr	r3, [r4, #16]
 801541e:	6862      	ldr	r2, [r4, #4]
 8015420:	429a      	cmp	r2, r3
 8015422:	bfde      	ittt	le
 8015424:	2330      	movle	r3, #48	; 0x30
 8015426:	f805 3c01 	strble.w	r3, [r5, #-1]
 801542a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801542e:	ebac 0305 	sub.w	r3, ip, r5
 8015432:	6123      	str	r3, [r4, #16]
 8015434:	f8cd 8000 	str.w	r8, [sp]
 8015438:	463b      	mov	r3, r7
 801543a:	aa03      	add	r2, sp, #12
 801543c:	4621      	mov	r1, r4
 801543e:	4630      	mov	r0, r6
 8015440:	f7ff fef6 	bl	8015230 <_printf_common>
 8015444:	3001      	adds	r0, #1
 8015446:	d14d      	bne.n	80154e4 <_printf_i+0x1c8>
 8015448:	f04f 30ff 	mov.w	r0, #4294967295
 801544c:	b005      	add	sp, #20
 801544e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015452:	4839      	ldr	r0, [pc, #228]	; (8015538 <_printf_i+0x21c>)
 8015454:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015458:	6813      	ldr	r3, [r2, #0]
 801545a:	6821      	ldr	r1, [r4, #0]
 801545c:	1d1d      	adds	r5, r3, #4
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	6015      	str	r5, [r2, #0]
 8015462:	060a      	lsls	r2, r1, #24
 8015464:	d50b      	bpl.n	801547e <_printf_i+0x162>
 8015466:	07ca      	lsls	r2, r1, #31
 8015468:	bf44      	itt	mi
 801546a:	f041 0120 	orrmi.w	r1, r1, #32
 801546e:	6021      	strmi	r1, [r4, #0]
 8015470:	b91b      	cbnz	r3, 801547a <_printf_i+0x15e>
 8015472:	6822      	ldr	r2, [r4, #0]
 8015474:	f022 0220 	bic.w	r2, r2, #32
 8015478:	6022      	str	r2, [r4, #0]
 801547a:	2210      	movs	r2, #16
 801547c:	e7b7      	b.n	80153ee <_printf_i+0xd2>
 801547e:	064d      	lsls	r5, r1, #25
 8015480:	bf48      	it	mi
 8015482:	b29b      	uxthmi	r3, r3
 8015484:	e7ef      	b.n	8015466 <_printf_i+0x14a>
 8015486:	4665      	mov	r5, ip
 8015488:	fbb3 f1f2 	udiv	r1, r3, r2
 801548c:	fb02 3311 	mls	r3, r2, r1, r3
 8015490:	5cc3      	ldrb	r3, [r0, r3]
 8015492:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015496:	460b      	mov	r3, r1
 8015498:	2900      	cmp	r1, #0
 801549a:	d1f5      	bne.n	8015488 <_printf_i+0x16c>
 801549c:	e7b9      	b.n	8015412 <_printf_i+0xf6>
 801549e:	6813      	ldr	r3, [r2, #0]
 80154a0:	6825      	ldr	r5, [r4, #0]
 80154a2:	6961      	ldr	r1, [r4, #20]
 80154a4:	1d18      	adds	r0, r3, #4
 80154a6:	6010      	str	r0, [r2, #0]
 80154a8:	0628      	lsls	r0, r5, #24
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	d501      	bpl.n	80154b2 <_printf_i+0x196>
 80154ae:	6019      	str	r1, [r3, #0]
 80154b0:	e002      	b.n	80154b8 <_printf_i+0x19c>
 80154b2:	066a      	lsls	r2, r5, #25
 80154b4:	d5fb      	bpl.n	80154ae <_printf_i+0x192>
 80154b6:	8019      	strh	r1, [r3, #0]
 80154b8:	2300      	movs	r3, #0
 80154ba:	6123      	str	r3, [r4, #16]
 80154bc:	4665      	mov	r5, ip
 80154be:	e7b9      	b.n	8015434 <_printf_i+0x118>
 80154c0:	6813      	ldr	r3, [r2, #0]
 80154c2:	1d19      	adds	r1, r3, #4
 80154c4:	6011      	str	r1, [r2, #0]
 80154c6:	681d      	ldr	r5, [r3, #0]
 80154c8:	6862      	ldr	r2, [r4, #4]
 80154ca:	2100      	movs	r1, #0
 80154cc:	4628      	mov	r0, r5
 80154ce:	f7ea fe9f 	bl	8000210 <memchr>
 80154d2:	b108      	cbz	r0, 80154d8 <_printf_i+0x1bc>
 80154d4:	1b40      	subs	r0, r0, r5
 80154d6:	6060      	str	r0, [r4, #4]
 80154d8:	6863      	ldr	r3, [r4, #4]
 80154da:	6123      	str	r3, [r4, #16]
 80154dc:	2300      	movs	r3, #0
 80154de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80154e2:	e7a7      	b.n	8015434 <_printf_i+0x118>
 80154e4:	6923      	ldr	r3, [r4, #16]
 80154e6:	462a      	mov	r2, r5
 80154e8:	4639      	mov	r1, r7
 80154ea:	4630      	mov	r0, r6
 80154ec:	47c0      	blx	r8
 80154ee:	3001      	adds	r0, #1
 80154f0:	d0aa      	beq.n	8015448 <_printf_i+0x12c>
 80154f2:	6823      	ldr	r3, [r4, #0]
 80154f4:	079b      	lsls	r3, r3, #30
 80154f6:	d413      	bmi.n	8015520 <_printf_i+0x204>
 80154f8:	68e0      	ldr	r0, [r4, #12]
 80154fa:	9b03      	ldr	r3, [sp, #12]
 80154fc:	4298      	cmp	r0, r3
 80154fe:	bfb8      	it	lt
 8015500:	4618      	movlt	r0, r3
 8015502:	e7a3      	b.n	801544c <_printf_i+0x130>
 8015504:	2301      	movs	r3, #1
 8015506:	464a      	mov	r2, r9
 8015508:	4639      	mov	r1, r7
 801550a:	4630      	mov	r0, r6
 801550c:	47c0      	blx	r8
 801550e:	3001      	adds	r0, #1
 8015510:	d09a      	beq.n	8015448 <_printf_i+0x12c>
 8015512:	3501      	adds	r5, #1
 8015514:	68e3      	ldr	r3, [r4, #12]
 8015516:	9a03      	ldr	r2, [sp, #12]
 8015518:	1a9b      	subs	r3, r3, r2
 801551a:	42ab      	cmp	r3, r5
 801551c:	dcf2      	bgt.n	8015504 <_printf_i+0x1e8>
 801551e:	e7eb      	b.n	80154f8 <_printf_i+0x1dc>
 8015520:	2500      	movs	r5, #0
 8015522:	f104 0919 	add.w	r9, r4, #25
 8015526:	e7f5      	b.n	8015514 <_printf_i+0x1f8>
 8015528:	2b00      	cmp	r3, #0
 801552a:	d1ac      	bne.n	8015486 <_printf_i+0x16a>
 801552c:	7803      	ldrb	r3, [r0, #0]
 801552e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015532:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015536:	e76c      	b.n	8015412 <_printf_i+0xf6>
 8015538:	080198a8 	.word	0x080198a8
 801553c:	080198b9 	.word	0x080198b9

08015540 <_scanf_float>:
 8015540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015544:	469a      	mov	sl, r3
 8015546:	688b      	ldr	r3, [r1, #8]
 8015548:	4616      	mov	r6, r2
 801554a:	1e5a      	subs	r2, r3, #1
 801554c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015550:	b087      	sub	sp, #28
 8015552:	bf83      	ittte	hi
 8015554:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8015558:	189b      	addhi	r3, r3, r2
 801555a:	9301      	strhi	r3, [sp, #4]
 801555c:	2300      	movls	r3, #0
 801555e:	bf86      	itte	hi
 8015560:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015564:	608b      	strhi	r3, [r1, #8]
 8015566:	9301      	strls	r3, [sp, #4]
 8015568:	680b      	ldr	r3, [r1, #0]
 801556a:	4688      	mov	r8, r1
 801556c:	f04f 0b00 	mov.w	fp, #0
 8015570:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015574:	f848 3b1c 	str.w	r3, [r8], #28
 8015578:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801557c:	4607      	mov	r7, r0
 801557e:	460c      	mov	r4, r1
 8015580:	4645      	mov	r5, r8
 8015582:	465a      	mov	r2, fp
 8015584:	46d9      	mov	r9, fp
 8015586:	f8cd b008 	str.w	fp, [sp, #8]
 801558a:	68a1      	ldr	r1, [r4, #8]
 801558c:	b181      	cbz	r1, 80155b0 <_scanf_float+0x70>
 801558e:	6833      	ldr	r3, [r6, #0]
 8015590:	781b      	ldrb	r3, [r3, #0]
 8015592:	2b49      	cmp	r3, #73	; 0x49
 8015594:	d071      	beq.n	801567a <_scanf_float+0x13a>
 8015596:	d84d      	bhi.n	8015634 <_scanf_float+0xf4>
 8015598:	2b39      	cmp	r3, #57	; 0x39
 801559a:	d840      	bhi.n	801561e <_scanf_float+0xde>
 801559c:	2b31      	cmp	r3, #49	; 0x31
 801559e:	f080 8088 	bcs.w	80156b2 <_scanf_float+0x172>
 80155a2:	2b2d      	cmp	r3, #45	; 0x2d
 80155a4:	f000 8090 	beq.w	80156c8 <_scanf_float+0x188>
 80155a8:	d815      	bhi.n	80155d6 <_scanf_float+0x96>
 80155aa:	2b2b      	cmp	r3, #43	; 0x2b
 80155ac:	f000 808c 	beq.w	80156c8 <_scanf_float+0x188>
 80155b0:	f1b9 0f00 	cmp.w	r9, #0
 80155b4:	d003      	beq.n	80155be <_scanf_float+0x7e>
 80155b6:	6823      	ldr	r3, [r4, #0]
 80155b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80155bc:	6023      	str	r3, [r4, #0]
 80155be:	3a01      	subs	r2, #1
 80155c0:	2a01      	cmp	r2, #1
 80155c2:	f200 80ea 	bhi.w	801579a <_scanf_float+0x25a>
 80155c6:	4545      	cmp	r5, r8
 80155c8:	f200 80dc 	bhi.w	8015784 <_scanf_float+0x244>
 80155cc:	2601      	movs	r6, #1
 80155ce:	4630      	mov	r0, r6
 80155d0:	b007      	add	sp, #28
 80155d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155d6:	2b2e      	cmp	r3, #46	; 0x2e
 80155d8:	f000 809f 	beq.w	801571a <_scanf_float+0x1da>
 80155dc:	2b30      	cmp	r3, #48	; 0x30
 80155de:	d1e7      	bne.n	80155b0 <_scanf_float+0x70>
 80155e0:	6820      	ldr	r0, [r4, #0]
 80155e2:	f410 7f80 	tst.w	r0, #256	; 0x100
 80155e6:	d064      	beq.n	80156b2 <_scanf_float+0x172>
 80155e8:	9b01      	ldr	r3, [sp, #4]
 80155ea:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80155ee:	6020      	str	r0, [r4, #0]
 80155f0:	f109 0901 	add.w	r9, r9, #1
 80155f4:	b11b      	cbz	r3, 80155fe <_scanf_float+0xbe>
 80155f6:	3b01      	subs	r3, #1
 80155f8:	3101      	adds	r1, #1
 80155fa:	9301      	str	r3, [sp, #4]
 80155fc:	60a1      	str	r1, [r4, #8]
 80155fe:	68a3      	ldr	r3, [r4, #8]
 8015600:	3b01      	subs	r3, #1
 8015602:	60a3      	str	r3, [r4, #8]
 8015604:	6923      	ldr	r3, [r4, #16]
 8015606:	3301      	adds	r3, #1
 8015608:	6123      	str	r3, [r4, #16]
 801560a:	6873      	ldr	r3, [r6, #4]
 801560c:	3b01      	subs	r3, #1
 801560e:	2b00      	cmp	r3, #0
 8015610:	6073      	str	r3, [r6, #4]
 8015612:	f340 80ac 	ble.w	801576e <_scanf_float+0x22e>
 8015616:	6833      	ldr	r3, [r6, #0]
 8015618:	3301      	adds	r3, #1
 801561a:	6033      	str	r3, [r6, #0]
 801561c:	e7b5      	b.n	801558a <_scanf_float+0x4a>
 801561e:	2b45      	cmp	r3, #69	; 0x45
 8015620:	f000 8085 	beq.w	801572e <_scanf_float+0x1ee>
 8015624:	2b46      	cmp	r3, #70	; 0x46
 8015626:	d06a      	beq.n	80156fe <_scanf_float+0x1be>
 8015628:	2b41      	cmp	r3, #65	; 0x41
 801562a:	d1c1      	bne.n	80155b0 <_scanf_float+0x70>
 801562c:	2a01      	cmp	r2, #1
 801562e:	d1bf      	bne.n	80155b0 <_scanf_float+0x70>
 8015630:	2202      	movs	r2, #2
 8015632:	e046      	b.n	80156c2 <_scanf_float+0x182>
 8015634:	2b65      	cmp	r3, #101	; 0x65
 8015636:	d07a      	beq.n	801572e <_scanf_float+0x1ee>
 8015638:	d818      	bhi.n	801566c <_scanf_float+0x12c>
 801563a:	2b54      	cmp	r3, #84	; 0x54
 801563c:	d066      	beq.n	801570c <_scanf_float+0x1cc>
 801563e:	d811      	bhi.n	8015664 <_scanf_float+0x124>
 8015640:	2b4e      	cmp	r3, #78	; 0x4e
 8015642:	d1b5      	bne.n	80155b0 <_scanf_float+0x70>
 8015644:	2a00      	cmp	r2, #0
 8015646:	d146      	bne.n	80156d6 <_scanf_float+0x196>
 8015648:	f1b9 0f00 	cmp.w	r9, #0
 801564c:	d145      	bne.n	80156da <_scanf_float+0x19a>
 801564e:	6821      	ldr	r1, [r4, #0]
 8015650:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015654:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015658:	d13f      	bne.n	80156da <_scanf_float+0x19a>
 801565a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801565e:	6021      	str	r1, [r4, #0]
 8015660:	2201      	movs	r2, #1
 8015662:	e02e      	b.n	80156c2 <_scanf_float+0x182>
 8015664:	2b59      	cmp	r3, #89	; 0x59
 8015666:	d01e      	beq.n	80156a6 <_scanf_float+0x166>
 8015668:	2b61      	cmp	r3, #97	; 0x61
 801566a:	e7de      	b.n	801562a <_scanf_float+0xea>
 801566c:	2b6e      	cmp	r3, #110	; 0x6e
 801566e:	d0e9      	beq.n	8015644 <_scanf_float+0x104>
 8015670:	d815      	bhi.n	801569e <_scanf_float+0x15e>
 8015672:	2b66      	cmp	r3, #102	; 0x66
 8015674:	d043      	beq.n	80156fe <_scanf_float+0x1be>
 8015676:	2b69      	cmp	r3, #105	; 0x69
 8015678:	d19a      	bne.n	80155b0 <_scanf_float+0x70>
 801567a:	f1bb 0f00 	cmp.w	fp, #0
 801567e:	d138      	bne.n	80156f2 <_scanf_float+0x1b2>
 8015680:	f1b9 0f00 	cmp.w	r9, #0
 8015684:	d197      	bne.n	80155b6 <_scanf_float+0x76>
 8015686:	6821      	ldr	r1, [r4, #0]
 8015688:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801568c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015690:	d195      	bne.n	80155be <_scanf_float+0x7e>
 8015692:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015696:	6021      	str	r1, [r4, #0]
 8015698:	f04f 0b01 	mov.w	fp, #1
 801569c:	e011      	b.n	80156c2 <_scanf_float+0x182>
 801569e:	2b74      	cmp	r3, #116	; 0x74
 80156a0:	d034      	beq.n	801570c <_scanf_float+0x1cc>
 80156a2:	2b79      	cmp	r3, #121	; 0x79
 80156a4:	d184      	bne.n	80155b0 <_scanf_float+0x70>
 80156a6:	f1bb 0f07 	cmp.w	fp, #7
 80156aa:	d181      	bne.n	80155b0 <_scanf_float+0x70>
 80156ac:	f04f 0b08 	mov.w	fp, #8
 80156b0:	e007      	b.n	80156c2 <_scanf_float+0x182>
 80156b2:	eb12 0f0b 	cmn.w	r2, fp
 80156b6:	f47f af7b 	bne.w	80155b0 <_scanf_float+0x70>
 80156ba:	6821      	ldr	r1, [r4, #0]
 80156bc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80156c0:	6021      	str	r1, [r4, #0]
 80156c2:	702b      	strb	r3, [r5, #0]
 80156c4:	3501      	adds	r5, #1
 80156c6:	e79a      	b.n	80155fe <_scanf_float+0xbe>
 80156c8:	6821      	ldr	r1, [r4, #0]
 80156ca:	0608      	lsls	r0, r1, #24
 80156cc:	f57f af70 	bpl.w	80155b0 <_scanf_float+0x70>
 80156d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80156d4:	e7f4      	b.n	80156c0 <_scanf_float+0x180>
 80156d6:	2a02      	cmp	r2, #2
 80156d8:	d047      	beq.n	801576a <_scanf_float+0x22a>
 80156da:	f1bb 0f01 	cmp.w	fp, #1
 80156de:	d003      	beq.n	80156e8 <_scanf_float+0x1a8>
 80156e0:	f1bb 0f04 	cmp.w	fp, #4
 80156e4:	f47f af64 	bne.w	80155b0 <_scanf_float+0x70>
 80156e8:	f10b 0b01 	add.w	fp, fp, #1
 80156ec:	fa5f fb8b 	uxtb.w	fp, fp
 80156f0:	e7e7      	b.n	80156c2 <_scanf_float+0x182>
 80156f2:	f1bb 0f03 	cmp.w	fp, #3
 80156f6:	d0f7      	beq.n	80156e8 <_scanf_float+0x1a8>
 80156f8:	f1bb 0f05 	cmp.w	fp, #5
 80156fc:	e7f2      	b.n	80156e4 <_scanf_float+0x1a4>
 80156fe:	f1bb 0f02 	cmp.w	fp, #2
 8015702:	f47f af55 	bne.w	80155b0 <_scanf_float+0x70>
 8015706:	f04f 0b03 	mov.w	fp, #3
 801570a:	e7da      	b.n	80156c2 <_scanf_float+0x182>
 801570c:	f1bb 0f06 	cmp.w	fp, #6
 8015710:	f47f af4e 	bne.w	80155b0 <_scanf_float+0x70>
 8015714:	f04f 0b07 	mov.w	fp, #7
 8015718:	e7d3      	b.n	80156c2 <_scanf_float+0x182>
 801571a:	6821      	ldr	r1, [r4, #0]
 801571c:	0588      	lsls	r0, r1, #22
 801571e:	f57f af47 	bpl.w	80155b0 <_scanf_float+0x70>
 8015722:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8015726:	6021      	str	r1, [r4, #0]
 8015728:	f8cd 9008 	str.w	r9, [sp, #8]
 801572c:	e7c9      	b.n	80156c2 <_scanf_float+0x182>
 801572e:	6821      	ldr	r1, [r4, #0]
 8015730:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8015734:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015738:	d006      	beq.n	8015748 <_scanf_float+0x208>
 801573a:	0548      	lsls	r0, r1, #21
 801573c:	f57f af38 	bpl.w	80155b0 <_scanf_float+0x70>
 8015740:	f1b9 0f00 	cmp.w	r9, #0
 8015744:	f43f af3b 	beq.w	80155be <_scanf_float+0x7e>
 8015748:	0588      	lsls	r0, r1, #22
 801574a:	bf58      	it	pl
 801574c:	9802      	ldrpl	r0, [sp, #8]
 801574e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015752:	bf58      	it	pl
 8015754:	eba9 0000 	subpl.w	r0, r9, r0
 8015758:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801575c:	bf58      	it	pl
 801575e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8015762:	6021      	str	r1, [r4, #0]
 8015764:	f04f 0900 	mov.w	r9, #0
 8015768:	e7ab      	b.n	80156c2 <_scanf_float+0x182>
 801576a:	2203      	movs	r2, #3
 801576c:	e7a9      	b.n	80156c2 <_scanf_float+0x182>
 801576e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015772:	9205      	str	r2, [sp, #20]
 8015774:	4631      	mov	r1, r6
 8015776:	4638      	mov	r0, r7
 8015778:	4798      	blx	r3
 801577a:	9a05      	ldr	r2, [sp, #20]
 801577c:	2800      	cmp	r0, #0
 801577e:	f43f af04 	beq.w	801558a <_scanf_float+0x4a>
 8015782:	e715      	b.n	80155b0 <_scanf_float+0x70>
 8015784:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015788:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801578c:	4632      	mov	r2, r6
 801578e:	4638      	mov	r0, r7
 8015790:	4798      	blx	r3
 8015792:	6923      	ldr	r3, [r4, #16]
 8015794:	3b01      	subs	r3, #1
 8015796:	6123      	str	r3, [r4, #16]
 8015798:	e715      	b.n	80155c6 <_scanf_float+0x86>
 801579a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801579e:	2b06      	cmp	r3, #6
 80157a0:	d80a      	bhi.n	80157b8 <_scanf_float+0x278>
 80157a2:	f1bb 0f02 	cmp.w	fp, #2
 80157a6:	d968      	bls.n	801587a <_scanf_float+0x33a>
 80157a8:	f1ab 0b03 	sub.w	fp, fp, #3
 80157ac:	fa5f fb8b 	uxtb.w	fp, fp
 80157b0:	eba5 0b0b 	sub.w	fp, r5, fp
 80157b4:	455d      	cmp	r5, fp
 80157b6:	d14b      	bne.n	8015850 <_scanf_float+0x310>
 80157b8:	6823      	ldr	r3, [r4, #0]
 80157ba:	05da      	lsls	r2, r3, #23
 80157bc:	d51f      	bpl.n	80157fe <_scanf_float+0x2be>
 80157be:	055b      	lsls	r3, r3, #21
 80157c0:	d468      	bmi.n	8015894 <_scanf_float+0x354>
 80157c2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80157c6:	6923      	ldr	r3, [r4, #16]
 80157c8:	2965      	cmp	r1, #101	; 0x65
 80157ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80157ce:	f105 3bff 	add.w	fp, r5, #4294967295
 80157d2:	6123      	str	r3, [r4, #16]
 80157d4:	d00d      	beq.n	80157f2 <_scanf_float+0x2b2>
 80157d6:	2945      	cmp	r1, #69	; 0x45
 80157d8:	d00b      	beq.n	80157f2 <_scanf_float+0x2b2>
 80157da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80157de:	4632      	mov	r2, r6
 80157e0:	4638      	mov	r0, r7
 80157e2:	4798      	blx	r3
 80157e4:	6923      	ldr	r3, [r4, #16]
 80157e6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80157ea:	3b01      	subs	r3, #1
 80157ec:	f1a5 0b02 	sub.w	fp, r5, #2
 80157f0:	6123      	str	r3, [r4, #16]
 80157f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80157f6:	4632      	mov	r2, r6
 80157f8:	4638      	mov	r0, r7
 80157fa:	4798      	blx	r3
 80157fc:	465d      	mov	r5, fp
 80157fe:	6826      	ldr	r6, [r4, #0]
 8015800:	f016 0610 	ands.w	r6, r6, #16
 8015804:	d17a      	bne.n	80158fc <_scanf_float+0x3bc>
 8015806:	702e      	strb	r6, [r5, #0]
 8015808:	6823      	ldr	r3, [r4, #0]
 801580a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801580e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015812:	d142      	bne.n	801589a <_scanf_float+0x35a>
 8015814:	9b02      	ldr	r3, [sp, #8]
 8015816:	eba9 0303 	sub.w	r3, r9, r3
 801581a:	425a      	negs	r2, r3
 801581c:	2b00      	cmp	r3, #0
 801581e:	d149      	bne.n	80158b4 <_scanf_float+0x374>
 8015820:	2200      	movs	r2, #0
 8015822:	4641      	mov	r1, r8
 8015824:	4638      	mov	r0, r7
 8015826:	f000 ff0b 	bl	8016640 <_strtod_r>
 801582a:	6825      	ldr	r5, [r4, #0]
 801582c:	f8da 3000 	ldr.w	r3, [sl]
 8015830:	f015 0f02 	tst.w	r5, #2
 8015834:	f103 0204 	add.w	r2, r3, #4
 8015838:	ec59 8b10 	vmov	r8, r9, d0
 801583c:	f8ca 2000 	str.w	r2, [sl]
 8015840:	d043      	beq.n	80158ca <_scanf_float+0x38a>
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	e9c3 8900 	strd	r8, r9, [r3]
 8015848:	68e3      	ldr	r3, [r4, #12]
 801584a:	3301      	adds	r3, #1
 801584c:	60e3      	str	r3, [r4, #12]
 801584e:	e6be      	b.n	80155ce <_scanf_float+0x8e>
 8015850:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015854:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015858:	4632      	mov	r2, r6
 801585a:	4638      	mov	r0, r7
 801585c:	4798      	blx	r3
 801585e:	6923      	ldr	r3, [r4, #16]
 8015860:	3b01      	subs	r3, #1
 8015862:	6123      	str	r3, [r4, #16]
 8015864:	e7a6      	b.n	80157b4 <_scanf_float+0x274>
 8015866:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801586a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801586e:	4632      	mov	r2, r6
 8015870:	4638      	mov	r0, r7
 8015872:	4798      	blx	r3
 8015874:	6923      	ldr	r3, [r4, #16]
 8015876:	3b01      	subs	r3, #1
 8015878:	6123      	str	r3, [r4, #16]
 801587a:	4545      	cmp	r5, r8
 801587c:	d8f3      	bhi.n	8015866 <_scanf_float+0x326>
 801587e:	e6a5      	b.n	80155cc <_scanf_float+0x8c>
 8015880:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015884:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015888:	4632      	mov	r2, r6
 801588a:	4638      	mov	r0, r7
 801588c:	4798      	blx	r3
 801588e:	6923      	ldr	r3, [r4, #16]
 8015890:	3b01      	subs	r3, #1
 8015892:	6123      	str	r3, [r4, #16]
 8015894:	4545      	cmp	r5, r8
 8015896:	d8f3      	bhi.n	8015880 <_scanf_float+0x340>
 8015898:	e698      	b.n	80155cc <_scanf_float+0x8c>
 801589a:	9b03      	ldr	r3, [sp, #12]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d0bf      	beq.n	8015820 <_scanf_float+0x2e0>
 80158a0:	9904      	ldr	r1, [sp, #16]
 80158a2:	230a      	movs	r3, #10
 80158a4:	4632      	mov	r2, r6
 80158a6:	3101      	adds	r1, #1
 80158a8:	4638      	mov	r0, r7
 80158aa:	f000 ff55 	bl	8016758 <_strtol_r>
 80158ae:	9b03      	ldr	r3, [sp, #12]
 80158b0:	9d04      	ldr	r5, [sp, #16]
 80158b2:	1ac2      	subs	r2, r0, r3
 80158b4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80158b8:	429d      	cmp	r5, r3
 80158ba:	bf28      	it	cs
 80158bc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80158c0:	490f      	ldr	r1, [pc, #60]	; (8015900 <_scanf_float+0x3c0>)
 80158c2:	4628      	mov	r0, r5
 80158c4:	f000 f858 	bl	8015978 <siprintf>
 80158c8:	e7aa      	b.n	8015820 <_scanf_float+0x2e0>
 80158ca:	f015 0504 	ands.w	r5, r5, #4
 80158ce:	d1b8      	bne.n	8015842 <_scanf_float+0x302>
 80158d0:	681f      	ldr	r7, [r3, #0]
 80158d2:	ee10 2a10 	vmov	r2, s0
 80158d6:	464b      	mov	r3, r9
 80158d8:	ee10 0a10 	vmov	r0, s0
 80158dc:	4649      	mov	r1, r9
 80158de:	f7eb f93d 	bl	8000b5c <__aeabi_dcmpun>
 80158e2:	b128      	cbz	r0, 80158f0 <_scanf_float+0x3b0>
 80158e4:	4628      	mov	r0, r5
 80158e6:	f000 f80d 	bl	8015904 <nanf>
 80158ea:	ed87 0a00 	vstr	s0, [r7]
 80158ee:	e7ab      	b.n	8015848 <_scanf_float+0x308>
 80158f0:	4640      	mov	r0, r8
 80158f2:	4649      	mov	r1, r9
 80158f4:	f7eb f990 	bl	8000c18 <__aeabi_d2f>
 80158f8:	6038      	str	r0, [r7, #0]
 80158fa:	e7a5      	b.n	8015848 <_scanf_float+0x308>
 80158fc:	2600      	movs	r6, #0
 80158fe:	e666      	b.n	80155ce <_scanf_float+0x8e>
 8015900:	080198ca 	.word	0x080198ca

08015904 <nanf>:
 8015904:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801590c <nanf+0x8>
 8015908:	4770      	bx	lr
 801590a:	bf00      	nop
 801590c:	7fc00000 	.word	0x7fc00000

08015910 <sniprintf>:
 8015910:	b40c      	push	{r2, r3}
 8015912:	b530      	push	{r4, r5, lr}
 8015914:	4b17      	ldr	r3, [pc, #92]	; (8015974 <sniprintf+0x64>)
 8015916:	1e0c      	subs	r4, r1, #0
 8015918:	b09d      	sub	sp, #116	; 0x74
 801591a:	681d      	ldr	r5, [r3, #0]
 801591c:	da08      	bge.n	8015930 <sniprintf+0x20>
 801591e:	238b      	movs	r3, #139	; 0x8b
 8015920:	602b      	str	r3, [r5, #0]
 8015922:	f04f 30ff 	mov.w	r0, #4294967295
 8015926:	b01d      	add	sp, #116	; 0x74
 8015928:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801592c:	b002      	add	sp, #8
 801592e:	4770      	bx	lr
 8015930:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015934:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015938:	bf14      	ite	ne
 801593a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801593e:	4623      	moveq	r3, r4
 8015940:	9304      	str	r3, [sp, #16]
 8015942:	9307      	str	r3, [sp, #28]
 8015944:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015948:	9002      	str	r0, [sp, #8]
 801594a:	9006      	str	r0, [sp, #24]
 801594c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015950:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015952:	ab21      	add	r3, sp, #132	; 0x84
 8015954:	a902      	add	r1, sp, #8
 8015956:	4628      	mov	r0, r5
 8015958:	9301      	str	r3, [sp, #4]
 801595a:	f002 fde7 	bl	801852c <_svfiprintf_r>
 801595e:	1c43      	adds	r3, r0, #1
 8015960:	bfbc      	itt	lt
 8015962:	238b      	movlt	r3, #139	; 0x8b
 8015964:	602b      	strlt	r3, [r5, #0]
 8015966:	2c00      	cmp	r4, #0
 8015968:	d0dd      	beq.n	8015926 <sniprintf+0x16>
 801596a:	9b02      	ldr	r3, [sp, #8]
 801596c:	2200      	movs	r2, #0
 801596e:	701a      	strb	r2, [r3, #0]
 8015970:	e7d9      	b.n	8015926 <sniprintf+0x16>
 8015972:	bf00      	nop
 8015974:	2000000c 	.word	0x2000000c

08015978 <siprintf>:
 8015978:	b40e      	push	{r1, r2, r3}
 801597a:	b500      	push	{lr}
 801597c:	b09c      	sub	sp, #112	; 0x70
 801597e:	ab1d      	add	r3, sp, #116	; 0x74
 8015980:	9002      	str	r0, [sp, #8]
 8015982:	9006      	str	r0, [sp, #24]
 8015984:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015988:	4809      	ldr	r0, [pc, #36]	; (80159b0 <siprintf+0x38>)
 801598a:	9107      	str	r1, [sp, #28]
 801598c:	9104      	str	r1, [sp, #16]
 801598e:	4909      	ldr	r1, [pc, #36]	; (80159b4 <siprintf+0x3c>)
 8015990:	f853 2b04 	ldr.w	r2, [r3], #4
 8015994:	9105      	str	r1, [sp, #20]
 8015996:	6800      	ldr	r0, [r0, #0]
 8015998:	9301      	str	r3, [sp, #4]
 801599a:	a902      	add	r1, sp, #8
 801599c:	f002 fdc6 	bl	801852c <_svfiprintf_r>
 80159a0:	9b02      	ldr	r3, [sp, #8]
 80159a2:	2200      	movs	r2, #0
 80159a4:	701a      	strb	r2, [r3, #0]
 80159a6:	b01c      	add	sp, #112	; 0x70
 80159a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80159ac:	b003      	add	sp, #12
 80159ae:	4770      	bx	lr
 80159b0:	2000000c 	.word	0x2000000c
 80159b4:	ffff0208 	.word	0xffff0208

080159b8 <siscanf>:
 80159b8:	b40e      	push	{r1, r2, r3}
 80159ba:	b530      	push	{r4, r5, lr}
 80159bc:	b09c      	sub	sp, #112	; 0x70
 80159be:	ac1f      	add	r4, sp, #124	; 0x7c
 80159c0:	f44f 7201 	mov.w	r2, #516	; 0x204
 80159c4:	f854 5b04 	ldr.w	r5, [r4], #4
 80159c8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80159cc:	9002      	str	r0, [sp, #8]
 80159ce:	9006      	str	r0, [sp, #24]
 80159d0:	f7ea fc16 	bl	8000200 <strlen>
 80159d4:	4b0b      	ldr	r3, [pc, #44]	; (8015a04 <siscanf+0x4c>)
 80159d6:	9003      	str	r0, [sp, #12]
 80159d8:	9007      	str	r0, [sp, #28]
 80159da:	930b      	str	r3, [sp, #44]	; 0x2c
 80159dc:	480a      	ldr	r0, [pc, #40]	; (8015a08 <siscanf+0x50>)
 80159de:	9401      	str	r4, [sp, #4]
 80159e0:	2300      	movs	r3, #0
 80159e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80159e4:	9314      	str	r3, [sp, #80]	; 0x50
 80159e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80159ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 80159ee:	462a      	mov	r2, r5
 80159f0:	4623      	mov	r3, r4
 80159f2:	a902      	add	r1, sp, #8
 80159f4:	6800      	ldr	r0, [r0, #0]
 80159f6:	f002 feeb 	bl	80187d0 <__ssvfiscanf_r>
 80159fa:	b01c      	add	sp, #112	; 0x70
 80159fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015a00:	b003      	add	sp, #12
 8015a02:	4770      	bx	lr
 8015a04:	08015a0d 	.word	0x08015a0d
 8015a08:	2000000c 	.word	0x2000000c

08015a0c <__seofread>:
 8015a0c:	2000      	movs	r0, #0
 8015a0e:	4770      	bx	lr

08015a10 <strcpy>:
 8015a10:	4603      	mov	r3, r0
 8015a12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015a16:	f803 2b01 	strb.w	r2, [r3], #1
 8015a1a:	2a00      	cmp	r2, #0
 8015a1c:	d1f9      	bne.n	8015a12 <strcpy+0x2>
 8015a1e:	4770      	bx	lr

08015a20 <sulp>:
 8015a20:	b570      	push	{r4, r5, r6, lr}
 8015a22:	4604      	mov	r4, r0
 8015a24:	460d      	mov	r5, r1
 8015a26:	ec45 4b10 	vmov	d0, r4, r5
 8015a2a:	4616      	mov	r6, r2
 8015a2c:	f002 fb3a 	bl	80180a4 <__ulp>
 8015a30:	ec51 0b10 	vmov	r0, r1, d0
 8015a34:	b17e      	cbz	r6, 8015a56 <sulp+0x36>
 8015a36:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015a3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	dd09      	ble.n	8015a56 <sulp+0x36>
 8015a42:	051b      	lsls	r3, r3, #20
 8015a44:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015a48:	2400      	movs	r4, #0
 8015a4a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015a4e:	4622      	mov	r2, r4
 8015a50:	462b      	mov	r3, r5
 8015a52:	f7ea fde9 	bl	8000628 <__aeabi_dmul>
 8015a56:	bd70      	pop	{r4, r5, r6, pc}

08015a58 <_strtod_l>:
 8015a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a5c:	461f      	mov	r7, r3
 8015a5e:	b0a1      	sub	sp, #132	; 0x84
 8015a60:	2300      	movs	r3, #0
 8015a62:	4681      	mov	r9, r0
 8015a64:	4638      	mov	r0, r7
 8015a66:	460e      	mov	r6, r1
 8015a68:	9217      	str	r2, [sp, #92]	; 0x5c
 8015a6a:	931c      	str	r3, [sp, #112]	; 0x70
 8015a6c:	f002 f824 	bl	8017ab8 <__localeconv_l>
 8015a70:	4680      	mov	r8, r0
 8015a72:	6800      	ldr	r0, [r0, #0]
 8015a74:	f7ea fbc4 	bl	8000200 <strlen>
 8015a78:	f04f 0a00 	mov.w	sl, #0
 8015a7c:	4604      	mov	r4, r0
 8015a7e:	f04f 0b00 	mov.w	fp, #0
 8015a82:	961b      	str	r6, [sp, #108]	; 0x6c
 8015a84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015a86:	781a      	ldrb	r2, [r3, #0]
 8015a88:	2a0d      	cmp	r2, #13
 8015a8a:	d832      	bhi.n	8015af2 <_strtod_l+0x9a>
 8015a8c:	2a09      	cmp	r2, #9
 8015a8e:	d236      	bcs.n	8015afe <_strtod_l+0xa6>
 8015a90:	2a00      	cmp	r2, #0
 8015a92:	d03e      	beq.n	8015b12 <_strtod_l+0xba>
 8015a94:	2300      	movs	r3, #0
 8015a96:	930d      	str	r3, [sp, #52]	; 0x34
 8015a98:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8015a9a:	782b      	ldrb	r3, [r5, #0]
 8015a9c:	2b30      	cmp	r3, #48	; 0x30
 8015a9e:	f040 80ac 	bne.w	8015bfa <_strtod_l+0x1a2>
 8015aa2:	786b      	ldrb	r3, [r5, #1]
 8015aa4:	2b58      	cmp	r3, #88	; 0x58
 8015aa6:	d001      	beq.n	8015aac <_strtod_l+0x54>
 8015aa8:	2b78      	cmp	r3, #120	; 0x78
 8015aaa:	d167      	bne.n	8015b7c <_strtod_l+0x124>
 8015aac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015aae:	9301      	str	r3, [sp, #4]
 8015ab0:	ab1c      	add	r3, sp, #112	; 0x70
 8015ab2:	9300      	str	r3, [sp, #0]
 8015ab4:	9702      	str	r7, [sp, #8]
 8015ab6:	ab1d      	add	r3, sp, #116	; 0x74
 8015ab8:	4a88      	ldr	r2, [pc, #544]	; (8015cdc <_strtod_l+0x284>)
 8015aba:	a91b      	add	r1, sp, #108	; 0x6c
 8015abc:	4648      	mov	r0, r9
 8015abe:	f001 fd12 	bl	80174e6 <__gethex>
 8015ac2:	f010 0407 	ands.w	r4, r0, #7
 8015ac6:	4606      	mov	r6, r0
 8015ac8:	d005      	beq.n	8015ad6 <_strtod_l+0x7e>
 8015aca:	2c06      	cmp	r4, #6
 8015acc:	d12b      	bne.n	8015b26 <_strtod_l+0xce>
 8015ace:	3501      	adds	r5, #1
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	951b      	str	r5, [sp, #108]	; 0x6c
 8015ad4:	930d      	str	r3, [sp, #52]	; 0x34
 8015ad6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	f040 859a 	bne.w	8016612 <_strtod_l+0xbba>
 8015ade:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ae0:	b1e3      	cbz	r3, 8015b1c <_strtod_l+0xc4>
 8015ae2:	4652      	mov	r2, sl
 8015ae4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015ae8:	ec43 2b10 	vmov	d0, r2, r3
 8015aec:	b021      	add	sp, #132	; 0x84
 8015aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015af2:	2a2b      	cmp	r2, #43	; 0x2b
 8015af4:	d015      	beq.n	8015b22 <_strtod_l+0xca>
 8015af6:	2a2d      	cmp	r2, #45	; 0x2d
 8015af8:	d004      	beq.n	8015b04 <_strtod_l+0xac>
 8015afa:	2a20      	cmp	r2, #32
 8015afc:	d1ca      	bne.n	8015a94 <_strtod_l+0x3c>
 8015afe:	3301      	adds	r3, #1
 8015b00:	931b      	str	r3, [sp, #108]	; 0x6c
 8015b02:	e7bf      	b.n	8015a84 <_strtod_l+0x2c>
 8015b04:	2201      	movs	r2, #1
 8015b06:	920d      	str	r2, [sp, #52]	; 0x34
 8015b08:	1c5a      	adds	r2, r3, #1
 8015b0a:	921b      	str	r2, [sp, #108]	; 0x6c
 8015b0c:	785b      	ldrb	r3, [r3, #1]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d1c2      	bne.n	8015a98 <_strtod_l+0x40>
 8015b12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015b14:	961b      	str	r6, [sp, #108]	; 0x6c
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	f040 8579 	bne.w	801660e <_strtod_l+0xbb6>
 8015b1c:	4652      	mov	r2, sl
 8015b1e:	465b      	mov	r3, fp
 8015b20:	e7e2      	b.n	8015ae8 <_strtod_l+0x90>
 8015b22:	2200      	movs	r2, #0
 8015b24:	e7ef      	b.n	8015b06 <_strtod_l+0xae>
 8015b26:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015b28:	b13a      	cbz	r2, 8015b3a <_strtod_l+0xe2>
 8015b2a:	2135      	movs	r1, #53	; 0x35
 8015b2c:	a81e      	add	r0, sp, #120	; 0x78
 8015b2e:	f002 fbb1 	bl	8018294 <__copybits>
 8015b32:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015b34:	4648      	mov	r0, r9
 8015b36:	f002 f81d 	bl	8017b74 <_Bfree>
 8015b3a:	3c01      	subs	r4, #1
 8015b3c:	2c04      	cmp	r4, #4
 8015b3e:	d806      	bhi.n	8015b4e <_strtod_l+0xf6>
 8015b40:	e8df f004 	tbb	[pc, r4]
 8015b44:	1714030a 	.word	0x1714030a
 8015b48:	0a          	.byte	0x0a
 8015b49:	00          	.byte	0x00
 8015b4a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8015b4e:	0730      	lsls	r0, r6, #28
 8015b50:	d5c1      	bpl.n	8015ad6 <_strtod_l+0x7e>
 8015b52:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8015b56:	e7be      	b.n	8015ad6 <_strtod_l+0x7e>
 8015b58:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8015b5c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015b5e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015b62:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015b66:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015b6a:	e7f0      	b.n	8015b4e <_strtod_l+0xf6>
 8015b6c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8015ce0 <_strtod_l+0x288>
 8015b70:	e7ed      	b.n	8015b4e <_strtod_l+0xf6>
 8015b72:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8015b76:	f04f 3aff 	mov.w	sl, #4294967295
 8015b7a:	e7e8      	b.n	8015b4e <_strtod_l+0xf6>
 8015b7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015b7e:	1c5a      	adds	r2, r3, #1
 8015b80:	921b      	str	r2, [sp, #108]	; 0x6c
 8015b82:	785b      	ldrb	r3, [r3, #1]
 8015b84:	2b30      	cmp	r3, #48	; 0x30
 8015b86:	d0f9      	beq.n	8015b7c <_strtod_l+0x124>
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d0a4      	beq.n	8015ad6 <_strtod_l+0x7e>
 8015b8c:	2301      	movs	r3, #1
 8015b8e:	2500      	movs	r5, #0
 8015b90:	9306      	str	r3, [sp, #24]
 8015b92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015b94:	9308      	str	r3, [sp, #32]
 8015b96:	9507      	str	r5, [sp, #28]
 8015b98:	9505      	str	r5, [sp, #20]
 8015b9a:	220a      	movs	r2, #10
 8015b9c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8015b9e:	7807      	ldrb	r7, [r0, #0]
 8015ba0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8015ba4:	b2d9      	uxtb	r1, r3
 8015ba6:	2909      	cmp	r1, #9
 8015ba8:	d929      	bls.n	8015bfe <_strtod_l+0x1a6>
 8015baa:	4622      	mov	r2, r4
 8015bac:	f8d8 1000 	ldr.w	r1, [r8]
 8015bb0:	f003 f8f8 	bl	8018da4 <strncmp>
 8015bb4:	2800      	cmp	r0, #0
 8015bb6:	d031      	beq.n	8015c1c <_strtod_l+0x1c4>
 8015bb8:	2000      	movs	r0, #0
 8015bba:	9c05      	ldr	r4, [sp, #20]
 8015bbc:	9004      	str	r0, [sp, #16]
 8015bbe:	463b      	mov	r3, r7
 8015bc0:	4602      	mov	r2, r0
 8015bc2:	2b65      	cmp	r3, #101	; 0x65
 8015bc4:	d001      	beq.n	8015bca <_strtod_l+0x172>
 8015bc6:	2b45      	cmp	r3, #69	; 0x45
 8015bc8:	d114      	bne.n	8015bf4 <_strtod_l+0x19c>
 8015bca:	b924      	cbnz	r4, 8015bd6 <_strtod_l+0x17e>
 8015bcc:	b910      	cbnz	r0, 8015bd4 <_strtod_l+0x17c>
 8015bce:	9b06      	ldr	r3, [sp, #24]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d09e      	beq.n	8015b12 <_strtod_l+0xba>
 8015bd4:	2400      	movs	r4, #0
 8015bd6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8015bd8:	1c73      	adds	r3, r6, #1
 8015bda:	931b      	str	r3, [sp, #108]	; 0x6c
 8015bdc:	7873      	ldrb	r3, [r6, #1]
 8015bde:	2b2b      	cmp	r3, #43	; 0x2b
 8015be0:	d078      	beq.n	8015cd4 <_strtod_l+0x27c>
 8015be2:	2b2d      	cmp	r3, #45	; 0x2d
 8015be4:	d070      	beq.n	8015cc8 <_strtod_l+0x270>
 8015be6:	f04f 0c00 	mov.w	ip, #0
 8015bea:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8015bee:	2f09      	cmp	r7, #9
 8015bf0:	d97c      	bls.n	8015cec <_strtod_l+0x294>
 8015bf2:	961b      	str	r6, [sp, #108]	; 0x6c
 8015bf4:	f04f 0e00 	mov.w	lr, #0
 8015bf8:	e09a      	b.n	8015d30 <_strtod_l+0x2d8>
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	e7c7      	b.n	8015b8e <_strtod_l+0x136>
 8015bfe:	9905      	ldr	r1, [sp, #20]
 8015c00:	2908      	cmp	r1, #8
 8015c02:	bfdd      	ittte	le
 8015c04:	9907      	ldrle	r1, [sp, #28]
 8015c06:	fb02 3301 	mlale	r3, r2, r1, r3
 8015c0a:	9307      	strle	r3, [sp, #28]
 8015c0c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8015c10:	9b05      	ldr	r3, [sp, #20]
 8015c12:	3001      	adds	r0, #1
 8015c14:	3301      	adds	r3, #1
 8015c16:	9305      	str	r3, [sp, #20]
 8015c18:	901b      	str	r0, [sp, #108]	; 0x6c
 8015c1a:	e7bf      	b.n	8015b9c <_strtod_l+0x144>
 8015c1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015c1e:	191a      	adds	r2, r3, r4
 8015c20:	921b      	str	r2, [sp, #108]	; 0x6c
 8015c22:	9a05      	ldr	r2, [sp, #20]
 8015c24:	5d1b      	ldrb	r3, [r3, r4]
 8015c26:	2a00      	cmp	r2, #0
 8015c28:	d037      	beq.n	8015c9a <_strtod_l+0x242>
 8015c2a:	9c05      	ldr	r4, [sp, #20]
 8015c2c:	4602      	mov	r2, r0
 8015c2e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8015c32:	2909      	cmp	r1, #9
 8015c34:	d913      	bls.n	8015c5e <_strtod_l+0x206>
 8015c36:	2101      	movs	r1, #1
 8015c38:	9104      	str	r1, [sp, #16]
 8015c3a:	e7c2      	b.n	8015bc2 <_strtod_l+0x16a>
 8015c3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015c3e:	1c5a      	adds	r2, r3, #1
 8015c40:	921b      	str	r2, [sp, #108]	; 0x6c
 8015c42:	785b      	ldrb	r3, [r3, #1]
 8015c44:	3001      	adds	r0, #1
 8015c46:	2b30      	cmp	r3, #48	; 0x30
 8015c48:	d0f8      	beq.n	8015c3c <_strtod_l+0x1e4>
 8015c4a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8015c4e:	2a08      	cmp	r2, #8
 8015c50:	f200 84e4 	bhi.w	801661c <_strtod_l+0xbc4>
 8015c54:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015c56:	9208      	str	r2, [sp, #32]
 8015c58:	4602      	mov	r2, r0
 8015c5a:	2000      	movs	r0, #0
 8015c5c:	4604      	mov	r4, r0
 8015c5e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8015c62:	f100 0101 	add.w	r1, r0, #1
 8015c66:	d012      	beq.n	8015c8e <_strtod_l+0x236>
 8015c68:	440a      	add	r2, r1
 8015c6a:	eb00 0c04 	add.w	ip, r0, r4
 8015c6e:	4621      	mov	r1, r4
 8015c70:	270a      	movs	r7, #10
 8015c72:	458c      	cmp	ip, r1
 8015c74:	d113      	bne.n	8015c9e <_strtod_l+0x246>
 8015c76:	1821      	adds	r1, r4, r0
 8015c78:	2908      	cmp	r1, #8
 8015c7a:	f104 0401 	add.w	r4, r4, #1
 8015c7e:	4404      	add	r4, r0
 8015c80:	dc19      	bgt.n	8015cb6 <_strtod_l+0x25e>
 8015c82:	9b07      	ldr	r3, [sp, #28]
 8015c84:	210a      	movs	r1, #10
 8015c86:	fb01 e303 	mla	r3, r1, r3, lr
 8015c8a:	9307      	str	r3, [sp, #28]
 8015c8c:	2100      	movs	r1, #0
 8015c8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015c90:	1c58      	adds	r0, r3, #1
 8015c92:	901b      	str	r0, [sp, #108]	; 0x6c
 8015c94:	785b      	ldrb	r3, [r3, #1]
 8015c96:	4608      	mov	r0, r1
 8015c98:	e7c9      	b.n	8015c2e <_strtod_l+0x1d6>
 8015c9a:	9805      	ldr	r0, [sp, #20]
 8015c9c:	e7d3      	b.n	8015c46 <_strtod_l+0x1ee>
 8015c9e:	2908      	cmp	r1, #8
 8015ca0:	f101 0101 	add.w	r1, r1, #1
 8015ca4:	dc03      	bgt.n	8015cae <_strtod_l+0x256>
 8015ca6:	9b07      	ldr	r3, [sp, #28]
 8015ca8:	437b      	muls	r3, r7
 8015caa:	9307      	str	r3, [sp, #28]
 8015cac:	e7e1      	b.n	8015c72 <_strtod_l+0x21a>
 8015cae:	2910      	cmp	r1, #16
 8015cb0:	bfd8      	it	le
 8015cb2:	437d      	mulle	r5, r7
 8015cb4:	e7dd      	b.n	8015c72 <_strtod_l+0x21a>
 8015cb6:	2c10      	cmp	r4, #16
 8015cb8:	bfdc      	itt	le
 8015cba:	210a      	movle	r1, #10
 8015cbc:	fb01 e505 	mlale	r5, r1, r5, lr
 8015cc0:	e7e4      	b.n	8015c8c <_strtod_l+0x234>
 8015cc2:	2301      	movs	r3, #1
 8015cc4:	9304      	str	r3, [sp, #16]
 8015cc6:	e781      	b.n	8015bcc <_strtod_l+0x174>
 8015cc8:	f04f 0c01 	mov.w	ip, #1
 8015ccc:	1cb3      	adds	r3, r6, #2
 8015cce:	931b      	str	r3, [sp, #108]	; 0x6c
 8015cd0:	78b3      	ldrb	r3, [r6, #2]
 8015cd2:	e78a      	b.n	8015bea <_strtod_l+0x192>
 8015cd4:	f04f 0c00 	mov.w	ip, #0
 8015cd8:	e7f8      	b.n	8015ccc <_strtod_l+0x274>
 8015cda:	bf00      	nop
 8015cdc:	080198d0 	.word	0x080198d0
 8015ce0:	7ff00000 	.word	0x7ff00000
 8015ce4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015ce6:	1c5f      	adds	r7, r3, #1
 8015ce8:	971b      	str	r7, [sp, #108]	; 0x6c
 8015cea:	785b      	ldrb	r3, [r3, #1]
 8015cec:	2b30      	cmp	r3, #48	; 0x30
 8015cee:	d0f9      	beq.n	8015ce4 <_strtod_l+0x28c>
 8015cf0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8015cf4:	2f08      	cmp	r7, #8
 8015cf6:	f63f af7d 	bhi.w	8015bf4 <_strtod_l+0x19c>
 8015cfa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8015cfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015d00:	930a      	str	r3, [sp, #40]	; 0x28
 8015d02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015d04:	1c5f      	adds	r7, r3, #1
 8015d06:	971b      	str	r7, [sp, #108]	; 0x6c
 8015d08:	785b      	ldrb	r3, [r3, #1]
 8015d0a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8015d0e:	f1b8 0f09 	cmp.w	r8, #9
 8015d12:	d937      	bls.n	8015d84 <_strtod_l+0x32c>
 8015d14:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015d16:	1a7f      	subs	r7, r7, r1
 8015d18:	2f08      	cmp	r7, #8
 8015d1a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8015d1e:	dc37      	bgt.n	8015d90 <_strtod_l+0x338>
 8015d20:	45be      	cmp	lr, r7
 8015d22:	bfa8      	it	ge
 8015d24:	46be      	movge	lr, r7
 8015d26:	f1bc 0f00 	cmp.w	ip, #0
 8015d2a:	d001      	beq.n	8015d30 <_strtod_l+0x2d8>
 8015d2c:	f1ce 0e00 	rsb	lr, lr, #0
 8015d30:	2c00      	cmp	r4, #0
 8015d32:	d151      	bne.n	8015dd8 <_strtod_l+0x380>
 8015d34:	2800      	cmp	r0, #0
 8015d36:	f47f aece 	bne.w	8015ad6 <_strtod_l+0x7e>
 8015d3a:	9a06      	ldr	r2, [sp, #24]
 8015d3c:	2a00      	cmp	r2, #0
 8015d3e:	f47f aeca 	bne.w	8015ad6 <_strtod_l+0x7e>
 8015d42:	9a04      	ldr	r2, [sp, #16]
 8015d44:	2a00      	cmp	r2, #0
 8015d46:	f47f aee4 	bne.w	8015b12 <_strtod_l+0xba>
 8015d4a:	2b4e      	cmp	r3, #78	; 0x4e
 8015d4c:	d027      	beq.n	8015d9e <_strtod_l+0x346>
 8015d4e:	dc21      	bgt.n	8015d94 <_strtod_l+0x33c>
 8015d50:	2b49      	cmp	r3, #73	; 0x49
 8015d52:	f47f aede 	bne.w	8015b12 <_strtod_l+0xba>
 8015d56:	49a0      	ldr	r1, [pc, #640]	; (8015fd8 <_strtod_l+0x580>)
 8015d58:	a81b      	add	r0, sp, #108	; 0x6c
 8015d5a:	f001 fdf7 	bl	801794c <__match>
 8015d5e:	2800      	cmp	r0, #0
 8015d60:	f43f aed7 	beq.w	8015b12 <_strtod_l+0xba>
 8015d64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015d66:	499d      	ldr	r1, [pc, #628]	; (8015fdc <_strtod_l+0x584>)
 8015d68:	3b01      	subs	r3, #1
 8015d6a:	a81b      	add	r0, sp, #108	; 0x6c
 8015d6c:	931b      	str	r3, [sp, #108]	; 0x6c
 8015d6e:	f001 fded 	bl	801794c <__match>
 8015d72:	b910      	cbnz	r0, 8015d7a <_strtod_l+0x322>
 8015d74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015d76:	3301      	adds	r3, #1
 8015d78:	931b      	str	r3, [sp, #108]	; 0x6c
 8015d7a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8015ff0 <_strtod_l+0x598>
 8015d7e:	f04f 0a00 	mov.w	sl, #0
 8015d82:	e6a8      	b.n	8015ad6 <_strtod_l+0x7e>
 8015d84:	210a      	movs	r1, #10
 8015d86:	fb01 3e0e 	mla	lr, r1, lr, r3
 8015d8a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8015d8e:	e7b8      	b.n	8015d02 <_strtod_l+0x2aa>
 8015d90:	46be      	mov	lr, r7
 8015d92:	e7c8      	b.n	8015d26 <_strtod_l+0x2ce>
 8015d94:	2b69      	cmp	r3, #105	; 0x69
 8015d96:	d0de      	beq.n	8015d56 <_strtod_l+0x2fe>
 8015d98:	2b6e      	cmp	r3, #110	; 0x6e
 8015d9a:	f47f aeba 	bne.w	8015b12 <_strtod_l+0xba>
 8015d9e:	4990      	ldr	r1, [pc, #576]	; (8015fe0 <_strtod_l+0x588>)
 8015da0:	a81b      	add	r0, sp, #108	; 0x6c
 8015da2:	f001 fdd3 	bl	801794c <__match>
 8015da6:	2800      	cmp	r0, #0
 8015da8:	f43f aeb3 	beq.w	8015b12 <_strtod_l+0xba>
 8015dac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015dae:	781b      	ldrb	r3, [r3, #0]
 8015db0:	2b28      	cmp	r3, #40	; 0x28
 8015db2:	d10e      	bne.n	8015dd2 <_strtod_l+0x37a>
 8015db4:	aa1e      	add	r2, sp, #120	; 0x78
 8015db6:	498b      	ldr	r1, [pc, #556]	; (8015fe4 <_strtod_l+0x58c>)
 8015db8:	a81b      	add	r0, sp, #108	; 0x6c
 8015dba:	f001 fddb 	bl	8017974 <__hexnan>
 8015dbe:	2805      	cmp	r0, #5
 8015dc0:	d107      	bne.n	8015dd2 <_strtod_l+0x37a>
 8015dc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015dc4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8015dc8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8015dcc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8015dd0:	e681      	b.n	8015ad6 <_strtod_l+0x7e>
 8015dd2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8015ff8 <_strtod_l+0x5a0>
 8015dd6:	e7d2      	b.n	8015d7e <_strtod_l+0x326>
 8015dd8:	ebae 0302 	sub.w	r3, lr, r2
 8015ddc:	9306      	str	r3, [sp, #24]
 8015dde:	9b05      	ldr	r3, [sp, #20]
 8015de0:	9807      	ldr	r0, [sp, #28]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	bf08      	it	eq
 8015de6:	4623      	moveq	r3, r4
 8015de8:	2c10      	cmp	r4, #16
 8015dea:	9305      	str	r3, [sp, #20]
 8015dec:	46a0      	mov	r8, r4
 8015dee:	bfa8      	it	ge
 8015df0:	f04f 0810 	movge.w	r8, #16
 8015df4:	f7ea fb9e 	bl	8000534 <__aeabi_ui2d>
 8015df8:	2c09      	cmp	r4, #9
 8015dfa:	4682      	mov	sl, r0
 8015dfc:	468b      	mov	fp, r1
 8015dfe:	dc13      	bgt.n	8015e28 <_strtod_l+0x3d0>
 8015e00:	9b06      	ldr	r3, [sp, #24]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	f43f ae67 	beq.w	8015ad6 <_strtod_l+0x7e>
 8015e08:	9b06      	ldr	r3, [sp, #24]
 8015e0a:	dd7a      	ble.n	8015f02 <_strtod_l+0x4aa>
 8015e0c:	2b16      	cmp	r3, #22
 8015e0e:	dc61      	bgt.n	8015ed4 <_strtod_l+0x47c>
 8015e10:	4a75      	ldr	r2, [pc, #468]	; (8015fe8 <_strtod_l+0x590>)
 8015e12:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8015e16:	e9de 0100 	ldrd	r0, r1, [lr]
 8015e1a:	4652      	mov	r2, sl
 8015e1c:	465b      	mov	r3, fp
 8015e1e:	f7ea fc03 	bl	8000628 <__aeabi_dmul>
 8015e22:	4682      	mov	sl, r0
 8015e24:	468b      	mov	fp, r1
 8015e26:	e656      	b.n	8015ad6 <_strtod_l+0x7e>
 8015e28:	4b6f      	ldr	r3, [pc, #444]	; (8015fe8 <_strtod_l+0x590>)
 8015e2a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015e2e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015e32:	f7ea fbf9 	bl	8000628 <__aeabi_dmul>
 8015e36:	4606      	mov	r6, r0
 8015e38:	4628      	mov	r0, r5
 8015e3a:	460f      	mov	r7, r1
 8015e3c:	f7ea fb7a 	bl	8000534 <__aeabi_ui2d>
 8015e40:	4602      	mov	r2, r0
 8015e42:	460b      	mov	r3, r1
 8015e44:	4630      	mov	r0, r6
 8015e46:	4639      	mov	r1, r7
 8015e48:	f7ea fa38 	bl	80002bc <__adddf3>
 8015e4c:	2c0f      	cmp	r4, #15
 8015e4e:	4682      	mov	sl, r0
 8015e50:	468b      	mov	fp, r1
 8015e52:	ddd5      	ble.n	8015e00 <_strtod_l+0x3a8>
 8015e54:	9b06      	ldr	r3, [sp, #24]
 8015e56:	eba4 0808 	sub.w	r8, r4, r8
 8015e5a:	4498      	add	r8, r3
 8015e5c:	f1b8 0f00 	cmp.w	r8, #0
 8015e60:	f340 8096 	ble.w	8015f90 <_strtod_l+0x538>
 8015e64:	f018 030f 	ands.w	r3, r8, #15
 8015e68:	d00a      	beq.n	8015e80 <_strtod_l+0x428>
 8015e6a:	495f      	ldr	r1, [pc, #380]	; (8015fe8 <_strtod_l+0x590>)
 8015e6c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015e70:	4652      	mov	r2, sl
 8015e72:	465b      	mov	r3, fp
 8015e74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015e78:	f7ea fbd6 	bl	8000628 <__aeabi_dmul>
 8015e7c:	4682      	mov	sl, r0
 8015e7e:	468b      	mov	fp, r1
 8015e80:	f038 080f 	bics.w	r8, r8, #15
 8015e84:	d073      	beq.n	8015f6e <_strtod_l+0x516>
 8015e86:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8015e8a:	dd47      	ble.n	8015f1c <_strtod_l+0x4c4>
 8015e8c:	2400      	movs	r4, #0
 8015e8e:	46a0      	mov	r8, r4
 8015e90:	9407      	str	r4, [sp, #28]
 8015e92:	9405      	str	r4, [sp, #20]
 8015e94:	2322      	movs	r3, #34	; 0x22
 8015e96:	f8df b158 	ldr.w	fp, [pc, #344]	; 8015ff0 <_strtod_l+0x598>
 8015e9a:	f8c9 3000 	str.w	r3, [r9]
 8015e9e:	f04f 0a00 	mov.w	sl, #0
 8015ea2:	9b07      	ldr	r3, [sp, #28]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	f43f ae16 	beq.w	8015ad6 <_strtod_l+0x7e>
 8015eaa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015eac:	4648      	mov	r0, r9
 8015eae:	f001 fe61 	bl	8017b74 <_Bfree>
 8015eb2:	9905      	ldr	r1, [sp, #20]
 8015eb4:	4648      	mov	r0, r9
 8015eb6:	f001 fe5d 	bl	8017b74 <_Bfree>
 8015eba:	4641      	mov	r1, r8
 8015ebc:	4648      	mov	r0, r9
 8015ebe:	f001 fe59 	bl	8017b74 <_Bfree>
 8015ec2:	9907      	ldr	r1, [sp, #28]
 8015ec4:	4648      	mov	r0, r9
 8015ec6:	f001 fe55 	bl	8017b74 <_Bfree>
 8015eca:	4621      	mov	r1, r4
 8015ecc:	4648      	mov	r0, r9
 8015ece:	f001 fe51 	bl	8017b74 <_Bfree>
 8015ed2:	e600      	b.n	8015ad6 <_strtod_l+0x7e>
 8015ed4:	9a06      	ldr	r2, [sp, #24]
 8015ed6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8015eda:	4293      	cmp	r3, r2
 8015edc:	dbba      	blt.n	8015e54 <_strtod_l+0x3fc>
 8015ede:	4d42      	ldr	r5, [pc, #264]	; (8015fe8 <_strtod_l+0x590>)
 8015ee0:	f1c4 040f 	rsb	r4, r4, #15
 8015ee4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8015ee8:	4652      	mov	r2, sl
 8015eea:	465b      	mov	r3, fp
 8015eec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ef0:	f7ea fb9a 	bl	8000628 <__aeabi_dmul>
 8015ef4:	9b06      	ldr	r3, [sp, #24]
 8015ef6:	1b1c      	subs	r4, r3, r4
 8015ef8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8015efc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015f00:	e78d      	b.n	8015e1e <_strtod_l+0x3c6>
 8015f02:	f113 0f16 	cmn.w	r3, #22
 8015f06:	dba5      	blt.n	8015e54 <_strtod_l+0x3fc>
 8015f08:	4a37      	ldr	r2, [pc, #220]	; (8015fe8 <_strtod_l+0x590>)
 8015f0a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8015f0e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8015f12:	4650      	mov	r0, sl
 8015f14:	4659      	mov	r1, fp
 8015f16:	f7ea fcb1 	bl	800087c <__aeabi_ddiv>
 8015f1a:	e782      	b.n	8015e22 <_strtod_l+0x3ca>
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	4e33      	ldr	r6, [pc, #204]	; (8015fec <_strtod_l+0x594>)
 8015f20:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015f24:	4650      	mov	r0, sl
 8015f26:	4659      	mov	r1, fp
 8015f28:	461d      	mov	r5, r3
 8015f2a:	f1b8 0f01 	cmp.w	r8, #1
 8015f2e:	dc21      	bgt.n	8015f74 <_strtod_l+0x51c>
 8015f30:	b10b      	cbz	r3, 8015f36 <_strtod_l+0x4de>
 8015f32:	4682      	mov	sl, r0
 8015f34:	468b      	mov	fp, r1
 8015f36:	4b2d      	ldr	r3, [pc, #180]	; (8015fec <_strtod_l+0x594>)
 8015f38:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015f3c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015f40:	4652      	mov	r2, sl
 8015f42:	465b      	mov	r3, fp
 8015f44:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015f48:	f7ea fb6e 	bl	8000628 <__aeabi_dmul>
 8015f4c:	4b28      	ldr	r3, [pc, #160]	; (8015ff0 <_strtod_l+0x598>)
 8015f4e:	460a      	mov	r2, r1
 8015f50:	400b      	ands	r3, r1
 8015f52:	4928      	ldr	r1, [pc, #160]	; (8015ff4 <_strtod_l+0x59c>)
 8015f54:	428b      	cmp	r3, r1
 8015f56:	4682      	mov	sl, r0
 8015f58:	d898      	bhi.n	8015e8c <_strtod_l+0x434>
 8015f5a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015f5e:	428b      	cmp	r3, r1
 8015f60:	bf86      	itte	hi
 8015f62:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8015ffc <_strtod_l+0x5a4>
 8015f66:	f04f 3aff 	movhi.w	sl, #4294967295
 8015f6a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8015f6e:	2300      	movs	r3, #0
 8015f70:	9304      	str	r3, [sp, #16]
 8015f72:	e077      	b.n	8016064 <_strtod_l+0x60c>
 8015f74:	f018 0f01 	tst.w	r8, #1
 8015f78:	d006      	beq.n	8015f88 <_strtod_l+0x530>
 8015f7a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8015f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f82:	f7ea fb51 	bl	8000628 <__aeabi_dmul>
 8015f86:	2301      	movs	r3, #1
 8015f88:	3501      	adds	r5, #1
 8015f8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015f8e:	e7cc      	b.n	8015f2a <_strtod_l+0x4d2>
 8015f90:	d0ed      	beq.n	8015f6e <_strtod_l+0x516>
 8015f92:	f1c8 0800 	rsb	r8, r8, #0
 8015f96:	f018 020f 	ands.w	r2, r8, #15
 8015f9a:	d00a      	beq.n	8015fb2 <_strtod_l+0x55a>
 8015f9c:	4b12      	ldr	r3, [pc, #72]	; (8015fe8 <_strtod_l+0x590>)
 8015f9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015fa2:	4650      	mov	r0, sl
 8015fa4:	4659      	mov	r1, fp
 8015fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015faa:	f7ea fc67 	bl	800087c <__aeabi_ddiv>
 8015fae:	4682      	mov	sl, r0
 8015fb0:	468b      	mov	fp, r1
 8015fb2:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015fb6:	d0da      	beq.n	8015f6e <_strtod_l+0x516>
 8015fb8:	f1b8 0f1f 	cmp.w	r8, #31
 8015fbc:	dd20      	ble.n	8016000 <_strtod_l+0x5a8>
 8015fbe:	2400      	movs	r4, #0
 8015fc0:	46a0      	mov	r8, r4
 8015fc2:	9407      	str	r4, [sp, #28]
 8015fc4:	9405      	str	r4, [sp, #20]
 8015fc6:	2322      	movs	r3, #34	; 0x22
 8015fc8:	f04f 0a00 	mov.w	sl, #0
 8015fcc:	f04f 0b00 	mov.w	fp, #0
 8015fd0:	f8c9 3000 	str.w	r3, [r9]
 8015fd4:	e765      	b.n	8015ea2 <_strtod_l+0x44a>
 8015fd6:	bf00      	nop
 8015fd8:	0801989d 	.word	0x0801989d
 8015fdc:	08019923 	.word	0x08019923
 8015fe0:	080198a5 	.word	0x080198a5
 8015fe4:	080198e4 	.word	0x080198e4
 8015fe8:	080199c8 	.word	0x080199c8
 8015fec:	080199a0 	.word	0x080199a0
 8015ff0:	7ff00000 	.word	0x7ff00000
 8015ff4:	7ca00000 	.word	0x7ca00000
 8015ff8:	fff80000 	.word	0xfff80000
 8015ffc:	7fefffff 	.word	0x7fefffff
 8016000:	f018 0310 	ands.w	r3, r8, #16
 8016004:	bf18      	it	ne
 8016006:	236a      	movne	r3, #106	; 0x6a
 8016008:	4da0      	ldr	r5, [pc, #640]	; (801628c <_strtod_l+0x834>)
 801600a:	9304      	str	r3, [sp, #16]
 801600c:	4650      	mov	r0, sl
 801600e:	4659      	mov	r1, fp
 8016010:	2300      	movs	r3, #0
 8016012:	f1b8 0f00 	cmp.w	r8, #0
 8016016:	f300 810a 	bgt.w	801622e <_strtod_l+0x7d6>
 801601a:	b10b      	cbz	r3, 8016020 <_strtod_l+0x5c8>
 801601c:	4682      	mov	sl, r0
 801601e:	468b      	mov	fp, r1
 8016020:	9b04      	ldr	r3, [sp, #16]
 8016022:	b1bb      	cbz	r3, 8016054 <_strtod_l+0x5fc>
 8016024:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016028:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801602c:	2b00      	cmp	r3, #0
 801602e:	4659      	mov	r1, fp
 8016030:	dd10      	ble.n	8016054 <_strtod_l+0x5fc>
 8016032:	2b1f      	cmp	r3, #31
 8016034:	f340 8107 	ble.w	8016246 <_strtod_l+0x7ee>
 8016038:	2b34      	cmp	r3, #52	; 0x34
 801603a:	bfde      	ittt	le
 801603c:	3b20      	suble	r3, #32
 801603e:	f04f 32ff 	movle.w	r2, #4294967295
 8016042:	fa02 f303 	lslle.w	r3, r2, r3
 8016046:	f04f 0a00 	mov.w	sl, #0
 801604a:	bfcc      	ite	gt
 801604c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016050:	ea03 0b01 	andle.w	fp, r3, r1
 8016054:	2200      	movs	r2, #0
 8016056:	2300      	movs	r3, #0
 8016058:	4650      	mov	r0, sl
 801605a:	4659      	mov	r1, fp
 801605c:	f7ea fd4c 	bl	8000af8 <__aeabi_dcmpeq>
 8016060:	2800      	cmp	r0, #0
 8016062:	d1ac      	bne.n	8015fbe <_strtod_l+0x566>
 8016064:	9b07      	ldr	r3, [sp, #28]
 8016066:	9300      	str	r3, [sp, #0]
 8016068:	9a05      	ldr	r2, [sp, #20]
 801606a:	9908      	ldr	r1, [sp, #32]
 801606c:	4623      	mov	r3, r4
 801606e:	4648      	mov	r0, r9
 8016070:	f001 fdd2 	bl	8017c18 <__s2b>
 8016074:	9007      	str	r0, [sp, #28]
 8016076:	2800      	cmp	r0, #0
 8016078:	f43f af08 	beq.w	8015e8c <_strtod_l+0x434>
 801607c:	9a06      	ldr	r2, [sp, #24]
 801607e:	9b06      	ldr	r3, [sp, #24]
 8016080:	2a00      	cmp	r2, #0
 8016082:	f1c3 0300 	rsb	r3, r3, #0
 8016086:	bfa8      	it	ge
 8016088:	2300      	movge	r3, #0
 801608a:	930e      	str	r3, [sp, #56]	; 0x38
 801608c:	2400      	movs	r4, #0
 801608e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016092:	9316      	str	r3, [sp, #88]	; 0x58
 8016094:	46a0      	mov	r8, r4
 8016096:	9b07      	ldr	r3, [sp, #28]
 8016098:	4648      	mov	r0, r9
 801609a:	6859      	ldr	r1, [r3, #4]
 801609c:	f001 fd36 	bl	8017b0c <_Balloc>
 80160a0:	9005      	str	r0, [sp, #20]
 80160a2:	2800      	cmp	r0, #0
 80160a4:	f43f aef6 	beq.w	8015e94 <_strtod_l+0x43c>
 80160a8:	9b07      	ldr	r3, [sp, #28]
 80160aa:	691a      	ldr	r2, [r3, #16]
 80160ac:	3202      	adds	r2, #2
 80160ae:	f103 010c 	add.w	r1, r3, #12
 80160b2:	0092      	lsls	r2, r2, #2
 80160b4:	300c      	adds	r0, #12
 80160b6:	f7fe fdd3 	bl	8014c60 <memcpy>
 80160ba:	aa1e      	add	r2, sp, #120	; 0x78
 80160bc:	a91d      	add	r1, sp, #116	; 0x74
 80160be:	ec4b ab10 	vmov	d0, sl, fp
 80160c2:	4648      	mov	r0, r9
 80160c4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80160c8:	f002 f862 	bl	8018190 <__d2b>
 80160cc:	901c      	str	r0, [sp, #112]	; 0x70
 80160ce:	2800      	cmp	r0, #0
 80160d0:	f43f aee0 	beq.w	8015e94 <_strtod_l+0x43c>
 80160d4:	2101      	movs	r1, #1
 80160d6:	4648      	mov	r0, r9
 80160d8:	f001 fe2a 	bl	8017d30 <__i2b>
 80160dc:	4680      	mov	r8, r0
 80160de:	2800      	cmp	r0, #0
 80160e0:	f43f aed8 	beq.w	8015e94 <_strtod_l+0x43c>
 80160e4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80160e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80160e8:	2e00      	cmp	r6, #0
 80160ea:	bfab      	itete	ge
 80160ec:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80160ee:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80160f0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80160f2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80160f4:	bfac      	ite	ge
 80160f6:	18f7      	addge	r7, r6, r3
 80160f8:	1b9d      	sublt	r5, r3, r6
 80160fa:	9b04      	ldr	r3, [sp, #16]
 80160fc:	1af6      	subs	r6, r6, r3
 80160fe:	4416      	add	r6, r2
 8016100:	4b63      	ldr	r3, [pc, #396]	; (8016290 <_strtod_l+0x838>)
 8016102:	3e01      	subs	r6, #1
 8016104:	429e      	cmp	r6, r3
 8016106:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801610a:	f280 80af 	bge.w	801626c <_strtod_l+0x814>
 801610e:	1b9b      	subs	r3, r3, r6
 8016110:	2b1f      	cmp	r3, #31
 8016112:	eba2 0203 	sub.w	r2, r2, r3
 8016116:	f04f 0101 	mov.w	r1, #1
 801611a:	f300 809b 	bgt.w	8016254 <_strtod_l+0x7fc>
 801611e:	fa01 f303 	lsl.w	r3, r1, r3
 8016122:	930f      	str	r3, [sp, #60]	; 0x3c
 8016124:	2300      	movs	r3, #0
 8016126:	930a      	str	r3, [sp, #40]	; 0x28
 8016128:	18be      	adds	r6, r7, r2
 801612a:	9b04      	ldr	r3, [sp, #16]
 801612c:	42b7      	cmp	r7, r6
 801612e:	4415      	add	r5, r2
 8016130:	441d      	add	r5, r3
 8016132:	463b      	mov	r3, r7
 8016134:	bfa8      	it	ge
 8016136:	4633      	movge	r3, r6
 8016138:	42ab      	cmp	r3, r5
 801613a:	bfa8      	it	ge
 801613c:	462b      	movge	r3, r5
 801613e:	2b00      	cmp	r3, #0
 8016140:	bfc2      	ittt	gt
 8016142:	1af6      	subgt	r6, r6, r3
 8016144:	1aed      	subgt	r5, r5, r3
 8016146:	1aff      	subgt	r7, r7, r3
 8016148:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801614a:	b1bb      	cbz	r3, 801617c <_strtod_l+0x724>
 801614c:	4641      	mov	r1, r8
 801614e:	461a      	mov	r2, r3
 8016150:	4648      	mov	r0, r9
 8016152:	f001 fe8d 	bl	8017e70 <__pow5mult>
 8016156:	4680      	mov	r8, r0
 8016158:	2800      	cmp	r0, #0
 801615a:	f43f ae9b 	beq.w	8015e94 <_strtod_l+0x43c>
 801615e:	4601      	mov	r1, r0
 8016160:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016162:	4648      	mov	r0, r9
 8016164:	f001 fded 	bl	8017d42 <__multiply>
 8016168:	900c      	str	r0, [sp, #48]	; 0x30
 801616a:	2800      	cmp	r0, #0
 801616c:	f43f ae92 	beq.w	8015e94 <_strtod_l+0x43c>
 8016170:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016172:	4648      	mov	r0, r9
 8016174:	f001 fcfe 	bl	8017b74 <_Bfree>
 8016178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801617a:	931c      	str	r3, [sp, #112]	; 0x70
 801617c:	2e00      	cmp	r6, #0
 801617e:	dc7a      	bgt.n	8016276 <_strtod_l+0x81e>
 8016180:	9b06      	ldr	r3, [sp, #24]
 8016182:	2b00      	cmp	r3, #0
 8016184:	dd08      	ble.n	8016198 <_strtod_l+0x740>
 8016186:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016188:	9905      	ldr	r1, [sp, #20]
 801618a:	4648      	mov	r0, r9
 801618c:	f001 fe70 	bl	8017e70 <__pow5mult>
 8016190:	9005      	str	r0, [sp, #20]
 8016192:	2800      	cmp	r0, #0
 8016194:	f43f ae7e 	beq.w	8015e94 <_strtod_l+0x43c>
 8016198:	2d00      	cmp	r5, #0
 801619a:	dd08      	ble.n	80161ae <_strtod_l+0x756>
 801619c:	462a      	mov	r2, r5
 801619e:	9905      	ldr	r1, [sp, #20]
 80161a0:	4648      	mov	r0, r9
 80161a2:	f001 feb3 	bl	8017f0c <__lshift>
 80161a6:	9005      	str	r0, [sp, #20]
 80161a8:	2800      	cmp	r0, #0
 80161aa:	f43f ae73 	beq.w	8015e94 <_strtod_l+0x43c>
 80161ae:	2f00      	cmp	r7, #0
 80161b0:	dd08      	ble.n	80161c4 <_strtod_l+0x76c>
 80161b2:	4641      	mov	r1, r8
 80161b4:	463a      	mov	r2, r7
 80161b6:	4648      	mov	r0, r9
 80161b8:	f001 fea8 	bl	8017f0c <__lshift>
 80161bc:	4680      	mov	r8, r0
 80161be:	2800      	cmp	r0, #0
 80161c0:	f43f ae68 	beq.w	8015e94 <_strtod_l+0x43c>
 80161c4:	9a05      	ldr	r2, [sp, #20]
 80161c6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80161c8:	4648      	mov	r0, r9
 80161ca:	f001 ff0d 	bl	8017fe8 <__mdiff>
 80161ce:	4604      	mov	r4, r0
 80161d0:	2800      	cmp	r0, #0
 80161d2:	f43f ae5f 	beq.w	8015e94 <_strtod_l+0x43c>
 80161d6:	68c3      	ldr	r3, [r0, #12]
 80161d8:	930c      	str	r3, [sp, #48]	; 0x30
 80161da:	2300      	movs	r3, #0
 80161dc:	60c3      	str	r3, [r0, #12]
 80161de:	4641      	mov	r1, r8
 80161e0:	f001 fee8 	bl	8017fb4 <__mcmp>
 80161e4:	2800      	cmp	r0, #0
 80161e6:	da55      	bge.n	8016294 <_strtod_l+0x83c>
 80161e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80161ea:	b9e3      	cbnz	r3, 8016226 <_strtod_l+0x7ce>
 80161ec:	f1ba 0f00 	cmp.w	sl, #0
 80161f0:	d119      	bne.n	8016226 <_strtod_l+0x7ce>
 80161f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80161f6:	b9b3      	cbnz	r3, 8016226 <_strtod_l+0x7ce>
 80161f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80161fc:	0d1b      	lsrs	r3, r3, #20
 80161fe:	051b      	lsls	r3, r3, #20
 8016200:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016204:	d90f      	bls.n	8016226 <_strtod_l+0x7ce>
 8016206:	6963      	ldr	r3, [r4, #20]
 8016208:	b913      	cbnz	r3, 8016210 <_strtod_l+0x7b8>
 801620a:	6923      	ldr	r3, [r4, #16]
 801620c:	2b01      	cmp	r3, #1
 801620e:	dd0a      	ble.n	8016226 <_strtod_l+0x7ce>
 8016210:	4621      	mov	r1, r4
 8016212:	2201      	movs	r2, #1
 8016214:	4648      	mov	r0, r9
 8016216:	f001 fe79 	bl	8017f0c <__lshift>
 801621a:	4641      	mov	r1, r8
 801621c:	4604      	mov	r4, r0
 801621e:	f001 fec9 	bl	8017fb4 <__mcmp>
 8016222:	2800      	cmp	r0, #0
 8016224:	dc67      	bgt.n	80162f6 <_strtod_l+0x89e>
 8016226:	9b04      	ldr	r3, [sp, #16]
 8016228:	2b00      	cmp	r3, #0
 801622a:	d171      	bne.n	8016310 <_strtod_l+0x8b8>
 801622c:	e63d      	b.n	8015eaa <_strtod_l+0x452>
 801622e:	f018 0f01 	tst.w	r8, #1
 8016232:	d004      	beq.n	801623e <_strtod_l+0x7e6>
 8016234:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016238:	f7ea f9f6 	bl	8000628 <__aeabi_dmul>
 801623c:	2301      	movs	r3, #1
 801623e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016242:	3508      	adds	r5, #8
 8016244:	e6e5      	b.n	8016012 <_strtod_l+0x5ba>
 8016246:	f04f 32ff 	mov.w	r2, #4294967295
 801624a:	fa02 f303 	lsl.w	r3, r2, r3
 801624e:	ea03 0a0a 	and.w	sl, r3, sl
 8016252:	e6ff      	b.n	8016054 <_strtod_l+0x5fc>
 8016254:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016258:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801625c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016260:	36e2      	adds	r6, #226	; 0xe2
 8016262:	fa01 f306 	lsl.w	r3, r1, r6
 8016266:	930a      	str	r3, [sp, #40]	; 0x28
 8016268:	910f      	str	r1, [sp, #60]	; 0x3c
 801626a:	e75d      	b.n	8016128 <_strtod_l+0x6d0>
 801626c:	2300      	movs	r3, #0
 801626e:	930a      	str	r3, [sp, #40]	; 0x28
 8016270:	2301      	movs	r3, #1
 8016272:	930f      	str	r3, [sp, #60]	; 0x3c
 8016274:	e758      	b.n	8016128 <_strtod_l+0x6d0>
 8016276:	4632      	mov	r2, r6
 8016278:	991c      	ldr	r1, [sp, #112]	; 0x70
 801627a:	4648      	mov	r0, r9
 801627c:	f001 fe46 	bl	8017f0c <__lshift>
 8016280:	901c      	str	r0, [sp, #112]	; 0x70
 8016282:	2800      	cmp	r0, #0
 8016284:	f47f af7c 	bne.w	8016180 <_strtod_l+0x728>
 8016288:	e604      	b.n	8015e94 <_strtod_l+0x43c>
 801628a:	bf00      	nop
 801628c:	080198f8 	.word	0x080198f8
 8016290:	fffffc02 	.word	0xfffffc02
 8016294:	465d      	mov	r5, fp
 8016296:	f040 8086 	bne.w	80163a6 <_strtod_l+0x94e>
 801629a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801629c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80162a0:	b32a      	cbz	r2, 80162ee <_strtod_l+0x896>
 80162a2:	4aaf      	ldr	r2, [pc, #700]	; (8016560 <_strtod_l+0xb08>)
 80162a4:	4293      	cmp	r3, r2
 80162a6:	d153      	bne.n	8016350 <_strtod_l+0x8f8>
 80162a8:	9b04      	ldr	r3, [sp, #16]
 80162aa:	4650      	mov	r0, sl
 80162ac:	b1d3      	cbz	r3, 80162e4 <_strtod_l+0x88c>
 80162ae:	4aad      	ldr	r2, [pc, #692]	; (8016564 <_strtod_l+0xb0c>)
 80162b0:	402a      	ands	r2, r5
 80162b2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80162b6:	f04f 31ff 	mov.w	r1, #4294967295
 80162ba:	d816      	bhi.n	80162ea <_strtod_l+0x892>
 80162bc:	0d12      	lsrs	r2, r2, #20
 80162be:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80162c2:	fa01 f303 	lsl.w	r3, r1, r3
 80162c6:	4298      	cmp	r0, r3
 80162c8:	d142      	bne.n	8016350 <_strtod_l+0x8f8>
 80162ca:	4ba7      	ldr	r3, [pc, #668]	; (8016568 <_strtod_l+0xb10>)
 80162cc:	429d      	cmp	r5, r3
 80162ce:	d102      	bne.n	80162d6 <_strtod_l+0x87e>
 80162d0:	3001      	adds	r0, #1
 80162d2:	f43f addf 	beq.w	8015e94 <_strtod_l+0x43c>
 80162d6:	4ba3      	ldr	r3, [pc, #652]	; (8016564 <_strtod_l+0xb0c>)
 80162d8:	402b      	ands	r3, r5
 80162da:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80162de:	f04f 0a00 	mov.w	sl, #0
 80162e2:	e7a0      	b.n	8016226 <_strtod_l+0x7ce>
 80162e4:	f04f 33ff 	mov.w	r3, #4294967295
 80162e8:	e7ed      	b.n	80162c6 <_strtod_l+0x86e>
 80162ea:	460b      	mov	r3, r1
 80162ec:	e7eb      	b.n	80162c6 <_strtod_l+0x86e>
 80162ee:	bb7b      	cbnz	r3, 8016350 <_strtod_l+0x8f8>
 80162f0:	f1ba 0f00 	cmp.w	sl, #0
 80162f4:	d12c      	bne.n	8016350 <_strtod_l+0x8f8>
 80162f6:	9904      	ldr	r1, [sp, #16]
 80162f8:	4a9a      	ldr	r2, [pc, #616]	; (8016564 <_strtod_l+0xb0c>)
 80162fa:	465b      	mov	r3, fp
 80162fc:	b1f1      	cbz	r1, 801633c <_strtod_l+0x8e4>
 80162fe:	ea02 010b 	and.w	r1, r2, fp
 8016302:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016306:	dc19      	bgt.n	801633c <_strtod_l+0x8e4>
 8016308:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801630c:	f77f ae5b 	ble.w	8015fc6 <_strtod_l+0x56e>
 8016310:	4a96      	ldr	r2, [pc, #600]	; (801656c <_strtod_l+0xb14>)
 8016312:	2300      	movs	r3, #0
 8016314:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016318:	4650      	mov	r0, sl
 801631a:	4659      	mov	r1, fp
 801631c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016320:	f7ea f982 	bl	8000628 <__aeabi_dmul>
 8016324:	4682      	mov	sl, r0
 8016326:	468b      	mov	fp, r1
 8016328:	2900      	cmp	r1, #0
 801632a:	f47f adbe 	bne.w	8015eaa <_strtod_l+0x452>
 801632e:	2800      	cmp	r0, #0
 8016330:	f47f adbb 	bne.w	8015eaa <_strtod_l+0x452>
 8016334:	2322      	movs	r3, #34	; 0x22
 8016336:	f8c9 3000 	str.w	r3, [r9]
 801633a:	e5b6      	b.n	8015eaa <_strtod_l+0x452>
 801633c:	4013      	ands	r3, r2
 801633e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016342:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016346:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801634a:	f04f 3aff 	mov.w	sl, #4294967295
 801634e:	e76a      	b.n	8016226 <_strtod_l+0x7ce>
 8016350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016352:	b193      	cbz	r3, 801637a <_strtod_l+0x922>
 8016354:	422b      	tst	r3, r5
 8016356:	f43f af66 	beq.w	8016226 <_strtod_l+0x7ce>
 801635a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801635c:	9a04      	ldr	r2, [sp, #16]
 801635e:	4650      	mov	r0, sl
 8016360:	4659      	mov	r1, fp
 8016362:	b173      	cbz	r3, 8016382 <_strtod_l+0x92a>
 8016364:	f7ff fb5c 	bl	8015a20 <sulp>
 8016368:	4602      	mov	r2, r0
 801636a:	460b      	mov	r3, r1
 801636c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016370:	f7e9 ffa4 	bl	80002bc <__adddf3>
 8016374:	4682      	mov	sl, r0
 8016376:	468b      	mov	fp, r1
 8016378:	e755      	b.n	8016226 <_strtod_l+0x7ce>
 801637a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801637c:	ea13 0f0a 	tst.w	r3, sl
 8016380:	e7e9      	b.n	8016356 <_strtod_l+0x8fe>
 8016382:	f7ff fb4d 	bl	8015a20 <sulp>
 8016386:	4602      	mov	r2, r0
 8016388:	460b      	mov	r3, r1
 801638a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801638e:	f7e9 ff93 	bl	80002b8 <__aeabi_dsub>
 8016392:	2200      	movs	r2, #0
 8016394:	2300      	movs	r3, #0
 8016396:	4682      	mov	sl, r0
 8016398:	468b      	mov	fp, r1
 801639a:	f7ea fbad 	bl	8000af8 <__aeabi_dcmpeq>
 801639e:	2800      	cmp	r0, #0
 80163a0:	f47f ae11 	bne.w	8015fc6 <_strtod_l+0x56e>
 80163a4:	e73f      	b.n	8016226 <_strtod_l+0x7ce>
 80163a6:	4641      	mov	r1, r8
 80163a8:	4620      	mov	r0, r4
 80163aa:	f001 ff40 	bl	801822e <__ratio>
 80163ae:	ec57 6b10 	vmov	r6, r7, d0
 80163b2:	2200      	movs	r2, #0
 80163b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80163b8:	ee10 0a10 	vmov	r0, s0
 80163bc:	4639      	mov	r1, r7
 80163be:	f7ea fbaf 	bl	8000b20 <__aeabi_dcmple>
 80163c2:	2800      	cmp	r0, #0
 80163c4:	d077      	beq.n	80164b6 <_strtod_l+0xa5e>
 80163c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d04a      	beq.n	8016462 <_strtod_l+0xa0a>
 80163cc:	4b68      	ldr	r3, [pc, #416]	; (8016570 <_strtod_l+0xb18>)
 80163ce:	2200      	movs	r2, #0
 80163d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80163d4:	4f66      	ldr	r7, [pc, #408]	; (8016570 <_strtod_l+0xb18>)
 80163d6:	2600      	movs	r6, #0
 80163d8:	4b62      	ldr	r3, [pc, #392]	; (8016564 <_strtod_l+0xb0c>)
 80163da:	402b      	ands	r3, r5
 80163dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80163de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80163e0:	4b64      	ldr	r3, [pc, #400]	; (8016574 <_strtod_l+0xb1c>)
 80163e2:	429a      	cmp	r2, r3
 80163e4:	f040 80ce 	bne.w	8016584 <_strtod_l+0xb2c>
 80163e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80163ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80163f0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80163f4:	ec4b ab10 	vmov	d0, sl, fp
 80163f8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80163fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016400:	f001 fe50 	bl	80180a4 <__ulp>
 8016404:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016408:	ec53 2b10 	vmov	r2, r3, d0
 801640c:	f7ea f90c 	bl	8000628 <__aeabi_dmul>
 8016410:	4652      	mov	r2, sl
 8016412:	465b      	mov	r3, fp
 8016414:	f7e9 ff52 	bl	80002bc <__adddf3>
 8016418:	460b      	mov	r3, r1
 801641a:	4952      	ldr	r1, [pc, #328]	; (8016564 <_strtod_l+0xb0c>)
 801641c:	4a56      	ldr	r2, [pc, #344]	; (8016578 <_strtod_l+0xb20>)
 801641e:	4019      	ands	r1, r3
 8016420:	4291      	cmp	r1, r2
 8016422:	4682      	mov	sl, r0
 8016424:	d95b      	bls.n	80164de <_strtod_l+0xa86>
 8016426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016428:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801642c:	4293      	cmp	r3, r2
 801642e:	d103      	bne.n	8016438 <_strtod_l+0x9e0>
 8016430:	9b08      	ldr	r3, [sp, #32]
 8016432:	3301      	adds	r3, #1
 8016434:	f43f ad2e 	beq.w	8015e94 <_strtod_l+0x43c>
 8016438:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8016568 <_strtod_l+0xb10>
 801643c:	f04f 3aff 	mov.w	sl, #4294967295
 8016440:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016442:	4648      	mov	r0, r9
 8016444:	f001 fb96 	bl	8017b74 <_Bfree>
 8016448:	9905      	ldr	r1, [sp, #20]
 801644a:	4648      	mov	r0, r9
 801644c:	f001 fb92 	bl	8017b74 <_Bfree>
 8016450:	4641      	mov	r1, r8
 8016452:	4648      	mov	r0, r9
 8016454:	f001 fb8e 	bl	8017b74 <_Bfree>
 8016458:	4621      	mov	r1, r4
 801645a:	4648      	mov	r0, r9
 801645c:	f001 fb8a 	bl	8017b74 <_Bfree>
 8016460:	e619      	b.n	8016096 <_strtod_l+0x63e>
 8016462:	f1ba 0f00 	cmp.w	sl, #0
 8016466:	d11a      	bne.n	801649e <_strtod_l+0xa46>
 8016468:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801646c:	b9eb      	cbnz	r3, 80164aa <_strtod_l+0xa52>
 801646e:	2200      	movs	r2, #0
 8016470:	4b3f      	ldr	r3, [pc, #252]	; (8016570 <_strtod_l+0xb18>)
 8016472:	4630      	mov	r0, r6
 8016474:	4639      	mov	r1, r7
 8016476:	f7ea fb49 	bl	8000b0c <__aeabi_dcmplt>
 801647a:	b9c8      	cbnz	r0, 80164b0 <_strtod_l+0xa58>
 801647c:	4630      	mov	r0, r6
 801647e:	4639      	mov	r1, r7
 8016480:	2200      	movs	r2, #0
 8016482:	4b3e      	ldr	r3, [pc, #248]	; (801657c <_strtod_l+0xb24>)
 8016484:	f7ea f8d0 	bl	8000628 <__aeabi_dmul>
 8016488:	4606      	mov	r6, r0
 801648a:	460f      	mov	r7, r1
 801648c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016490:	9618      	str	r6, [sp, #96]	; 0x60
 8016492:	9319      	str	r3, [sp, #100]	; 0x64
 8016494:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8016498:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801649c:	e79c      	b.n	80163d8 <_strtod_l+0x980>
 801649e:	f1ba 0f01 	cmp.w	sl, #1
 80164a2:	d102      	bne.n	80164aa <_strtod_l+0xa52>
 80164a4:	2d00      	cmp	r5, #0
 80164a6:	f43f ad8e 	beq.w	8015fc6 <_strtod_l+0x56e>
 80164aa:	2200      	movs	r2, #0
 80164ac:	4b34      	ldr	r3, [pc, #208]	; (8016580 <_strtod_l+0xb28>)
 80164ae:	e78f      	b.n	80163d0 <_strtod_l+0x978>
 80164b0:	2600      	movs	r6, #0
 80164b2:	4f32      	ldr	r7, [pc, #200]	; (801657c <_strtod_l+0xb24>)
 80164b4:	e7ea      	b.n	801648c <_strtod_l+0xa34>
 80164b6:	4b31      	ldr	r3, [pc, #196]	; (801657c <_strtod_l+0xb24>)
 80164b8:	4630      	mov	r0, r6
 80164ba:	4639      	mov	r1, r7
 80164bc:	2200      	movs	r2, #0
 80164be:	f7ea f8b3 	bl	8000628 <__aeabi_dmul>
 80164c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80164c4:	4606      	mov	r6, r0
 80164c6:	460f      	mov	r7, r1
 80164c8:	b933      	cbnz	r3, 80164d8 <_strtod_l+0xa80>
 80164ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80164ce:	9010      	str	r0, [sp, #64]	; 0x40
 80164d0:	9311      	str	r3, [sp, #68]	; 0x44
 80164d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80164d6:	e7df      	b.n	8016498 <_strtod_l+0xa40>
 80164d8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80164dc:	e7f9      	b.n	80164d2 <_strtod_l+0xa7a>
 80164de:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80164e2:	9b04      	ldr	r3, [sp, #16]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d1ab      	bne.n	8016440 <_strtod_l+0x9e8>
 80164e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80164ec:	0d1b      	lsrs	r3, r3, #20
 80164ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80164f0:	051b      	lsls	r3, r3, #20
 80164f2:	429a      	cmp	r2, r3
 80164f4:	465d      	mov	r5, fp
 80164f6:	d1a3      	bne.n	8016440 <_strtod_l+0x9e8>
 80164f8:	4639      	mov	r1, r7
 80164fa:	4630      	mov	r0, r6
 80164fc:	f7ea fb44 	bl	8000b88 <__aeabi_d2iz>
 8016500:	f7ea f828 	bl	8000554 <__aeabi_i2d>
 8016504:	460b      	mov	r3, r1
 8016506:	4602      	mov	r2, r0
 8016508:	4639      	mov	r1, r7
 801650a:	4630      	mov	r0, r6
 801650c:	f7e9 fed4 	bl	80002b8 <__aeabi_dsub>
 8016510:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016512:	4606      	mov	r6, r0
 8016514:	460f      	mov	r7, r1
 8016516:	b933      	cbnz	r3, 8016526 <_strtod_l+0xace>
 8016518:	f1ba 0f00 	cmp.w	sl, #0
 801651c:	d103      	bne.n	8016526 <_strtod_l+0xace>
 801651e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8016522:	2d00      	cmp	r5, #0
 8016524:	d06d      	beq.n	8016602 <_strtod_l+0xbaa>
 8016526:	a30a      	add	r3, pc, #40	; (adr r3, 8016550 <_strtod_l+0xaf8>)
 8016528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801652c:	4630      	mov	r0, r6
 801652e:	4639      	mov	r1, r7
 8016530:	f7ea faec 	bl	8000b0c <__aeabi_dcmplt>
 8016534:	2800      	cmp	r0, #0
 8016536:	f47f acb8 	bne.w	8015eaa <_strtod_l+0x452>
 801653a:	a307      	add	r3, pc, #28	; (adr r3, 8016558 <_strtod_l+0xb00>)
 801653c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016540:	4630      	mov	r0, r6
 8016542:	4639      	mov	r1, r7
 8016544:	f7ea fb00 	bl	8000b48 <__aeabi_dcmpgt>
 8016548:	2800      	cmp	r0, #0
 801654a:	f43f af79 	beq.w	8016440 <_strtod_l+0x9e8>
 801654e:	e4ac      	b.n	8015eaa <_strtod_l+0x452>
 8016550:	94a03595 	.word	0x94a03595
 8016554:	3fdfffff 	.word	0x3fdfffff
 8016558:	35afe535 	.word	0x35afe535
 801655c:	3fe00000 	.word	0x3fe00000
 8016560:	000fffff 	.word	0x000fffff
 8016564:	7ff00000 	.word	0x7ff00000
 8016568:	7fefffff 	.word	0x7fefffff
 801656c:	39500000 	.word	0x39500000
 8016570:	3ff00000 	.word	0x3ff00000
 8016574:	7fe00000 	.word	0x7fe00000
 8016578:	7c9fffff 	.word	0x7c9fffff
 801657c:	3fe00000 	.word	0x3fe00000
 8016580:	bff00000 	.word	0xbff00000
 8016584:	9b04      	ldr	r3, [sp, #16]
 8016586:	b333      	cbz	r3, 80165d6 <_strtod_l+0xb7e>
 8016588:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801658a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801658e:	d822      	bhi.n	80165d6 <_strtod_l+0xb7e>
 8016590:	a327      	add	r3, pc, #156	; (adr r3, 8016630 <_strtod_l+0xbd8>)
 8016592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016596:	4630      	mov	r0, r6
 8016598:	4639      	mov	r1, r7
 801659a:	f7ea fac1 	bl	8000b20 <__aeabi_dcmple>
 801659e:	b1a0      	cbz	r0, 80165ca <_strtod_l+0xb72>
 80165a0:	4639      	mov	r1, r7
 80165a2:	4630      	mov	r0, r6
 80165a4:	f7ea fb18 	bl	8000bd8 <__aeabi_d2uiz>
 80165a8:	2800      	cmp	r0, #0
 80165aa:	bf08      	it	eq
 80165ac:	2001      	moveq	r0, #1
 80165ae:	f7e9 ffc1 	bl	8000534 <__aeabi_ui2d>
 80165b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165b4:	4606      	mov	r6, r0
 80165b6:	460f      	mov	r7, r1
 80165b8:	bb03      	cbnz	r3, 80165fc <_strtod_l+0xba4>
 80165ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80165be:	9012      	str	r0, [sp, #72]	; 0x48
 80165c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80165c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80165c6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80165ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80165cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80165ce:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80165d2:	1a9b      	subs	r3, r3, r2
 80165d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80165d6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80165da:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80165de:	f001 fd61 	bl	80180a4 <__ulp>
 80165e2:	4650      	mov	r0, sl
 80165e4:	ec53 2b10 	vmov	r2, r3, d0
 80165e8:	4659      	mov	r1, fp
 80165ea:	f7ea f81d 	bl	8000628 <__aeabi_dmul>
 80165ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80165f2:	f7e9 fe63 	bl	80002bc <__adddf3>
 80165f6:	4682      	mov	sl, r0
 80165f8:	468b      	mov	fp, r1
 80165fa:	e772      	b.n	80164e2 <_strtod_l+0xa8a>
 80165fc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8016600:	e7df      	b.n	80165c2 <_strtod_l+0xb6a>
 8016602:	a30d      	add	r3, pc, #52	; (adr r3, 8016638 <_strtod_l+0xbe0>)
 8016604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016608:	f7ea fa80 	bl	8000b0c <__aeabi_dcmplt>
 801660c:	e79c      	b.n	8016548 <_strtod_l+0xaf0>
 801660e:	2300      	movs	r3, #0
 8016610:	930d      	str	r3, [sp, #52]	; 0x34
 8016612:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016614:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016616:	6013      	str	r3, [r2, #0]
 8016618:	f7ff ba61 	b.w	8015ade <_strtod_l+0x86>
 801661c:	2b65      	cmp	r3, #101	; 0x65
 801661e:	f04f 0200 	mov.w	r2, #0
 8016622:	f43f ab4e 	beq.w	8015cc2 <_strtod_l+0x26a>
 8016626:	2101      	movs	r1, #1
 8016628:	4614      	mov	r4, r2
 801662a:	9104      	str	r1, [sp, #16]
 801662c:	f7ff bacb 	b.w	8015bc6 <_strtod_l+0x16e>
 8016630:	ffc00000 	.word	0xffc00000
 8016634:	41dfffff 	.word	0x41dfffff
 8016638:	94a03595 	.word	0x94a03595
 801663c:	3fcfffff 	.word	0x3fcfffff

08016640 <_strtod_r>:
 8016640:	4b05      	ldr	r3, [pc, #20]	; (8016658 <_strtod_r+0x18>)
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	b410      	push	{r4}
 8016646:	6a1b      	ldr	r3, [r3, #32]
 8016648:	4c04      	ldr	r4, [pc, #16]	; (801665c <_strtod_r+0x1c>)
 801664a:	2b00      	cmp	r3, #0
 801664c:	bf08      	it	eq
 801664e:	4623      	moveq	r3, r4
 8016650:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016654:	f7ff ba00 	b.w	8015a58 <_strtod_l>
 8016658:	2000000c 	.word	0x2000000c
 801665c:	20000070 	.word	0x20000070

08016660 <_strtol_l.isra.0>:
 8016660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016664:	4680      	mov	r8, r0
 8016666:	4689      	mov	r9, r1
 8016668:	4692      	mov	sl, r2
 801666a:	461e      	mov	r6, r3
 801666c:	460f      	mov	r7, r1
 801666e:	463d      	mov	r5, r7
 8016670:	9808      	ldr	r0, [sp, #32]
 8016672:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016676:	f001 fa0d 	bl	8017a94 <__locale_ctype_ptr_l>
 801667a:	4420      	add	r0, r4
 801667c:	7843      	ldrb	r3, [r0, #1]
 801667e:	f013 0308 	ands.w	r3, r3, #8
 8016682:	d132      	bne.n	80166ea <_strtol_l.isra.0+0x8a>
 8016684:	2c2d      	cmp	r4, #45	; 0x2d
 8016686:	d132      	bne.n	80166ee <_strtol_l.isra.0+0x8e>
 8016688:	787c      	ldrb	r4, [r7, #1]
 801668a:	1cbd      	adds	r5, r7, #2
 801668c:	2201      	movs	r2, #1
 801668e:	2e00      	cmp	r6, #0
 8016690:	d05d      	beq.n	801674e <_strtol_l.isra.0+0xee>
 8016692:	2e10      	cmp	r6, #16
 8016694:	d109      	bne.n	80166aa <_strtol_l.isra.0+0x4a>
 8016696:	2c30      	cmp	r4, #48	; 0x30
 8016698:	d107      	bne.n	80166aa <_strtol_l.isra.0+0x4a>
 801669a:	782b      	ldrb	r3, [r5, #0]
 801669c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80166a0:	2b58      	cmp	r3, #88	; 0x58
 80166a2:	d14f      	bne.n	8016744 <_strtol_l.isra.0+0xe4>
 80166a4:	786c      	ldrb	r4, [r5, #1]
 80166a6:	2610      	movs	r6, #16
 80166a8:	3502      	adds	r5, #2
 80166aa:	2a00      	cmp	r2, #0
 80166ac:	bf14      	ite	ne
 80166ae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80166b2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80166b6:	2700      	movs	r7, #0
 80166b8:	fbb1 fcf6 	udiv	ip, r1, r6
 80166bc:	4638      	mov	r0, r7
 80166be:	fb06 1e1c 	mls	lr, r6, ip, r1
 80166c2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80166c6:	2b09      	cmp	r3, #9
 80166c8:	d817      	bhi.n	80166fa <_strtol_l.isra.0+0x9a>
 80166ca:	461c      	mov	r4, r3
 80166cc:	42a6      	cmp	r6, r4
 80166ce:	dd23      	ble.n	8016718 <_strtol_l.isra.0+0xb8>
 80166d0:	1c7b      	adds	r3, r7, #1
 80166d2:	d007      	beq.n	80166e4 <_strtol_l.isra.0+0x84>
 80166d4:	4584      	cmp	ip, r0
 80166d6:	d31c      	bcc.n	8016712 <_strtol_l.isra.0+0xb2>
 80166d8:	d101      	bne.n	80166de <_strtol_l.isra.0+0x7e>
 80166da:	45a6      	cmp	lr, r4
 80166dc:	db19      	blt.n	8016712 <_strtol_l.isra.0+0xb2>
 80166de:	fb00 4006 	mla	r0, r0, r6, r4
 80166e2:	2701      	movs	r7, #1
 80166e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80166e8:	e7eb      	b.n	80166c2 <_strtol_l.isra.0+0x62>
 80166ea:	462f      	mov	r7, r5
 80166ec:	e7bf      	b.n	801666e <_strtol_l.isra.0+0xe>
 80166ee:	2c2b      	cmp	r4, #43	; 0x2b
 80166f0:	bf04      	itt	eq
 80166f2:	1cbd      	addeq	r5, r7, #2
 80166f4:	787c      	ldrbeq	r4, [r7, #1]
 80166f6:	461a      	mov	r2, r3
 80166f8:	e7c9      	b.n	801668e <_strtol_l.isra.0+0x2e>
 80166fa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80166fe:	2b19      	cmp	r3, #25
 8016700:	d801      	bhi.n	8016706 <_strtol_l.isra.0+0xa6>
 8016702:	3c37      	subs	r4, #55	; 0x37
 8016704:	e7e2      	b.n	80166cc <_strtol_l.isra.0+0x6c>
 8016706:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801670a:	2b19      	cmp	r3, #25
 801670c:	d804      	bhi.n	8016718 <_strtol_l.isra.0+0xb8>
 801670e:	3c57      	subs	r4, #87	; 0x57
 8016710:	e7dc      	b.n	80166cc <_strtol_l.isra.0+0x6c>
 8016712:	f04f 37ff 	mov.w	r7, #4294967295
 8016716:	e7e5      	b.n	80166e4 <_strtol_l.isra.0+0x84>
 8016718:	1c7b      	adds	r3, r7, #1
 801671a:	d108      	bne.n	801672e <_strtol_l.isra.0+0xce>
 801671c:	2322      	movs	r3, #34	; 0x22
 801671e:	f8c8 3000 	str.w	r3, [r8]
 8016722:	4608      	mov	r0, r1
 8016724:	f1ba 0f00 	cmp.w	sl, #0
 8016728:	d107      	bne.n	801673a <_strtol_l.isra.0+0xda>
 801672a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801672e:	b102      	cbz	r2, 8016732 <_strtol_l.isra.0+0xd2>
 8016730:	4240      	negs	r0, r0
 8016732:	f1ba 0f00 	cmp.w	sl, #0
 8016736:	d0f8      	beq.n	801672a <_strtol_l.isra.0+0xca>
 8016738:	b10f      	cbz	r7, 801673e <_strtol_l.isra.0+0xde>
 801673a:	f105 39ff 	add.w	r9, r5, #4294967295
 801673e:	f8ca 9000 	str.w	r9, [sl]
 8016742:	e7f2      	b.n	801672a <_strtol_l.isra.0+0xca>
 8016744:	2430      	movs	r4, #48	; 0x30
 8016746:	2e00      	cmp	r6, #0
 8016748:	d1af      	bne.n	80166aa <_strtol_l.isra.0+0x4a>
 801674a:	2608      	movs	r6, #8
 801674c:	e7ad      	b.n	80166aa <_strtol_l.isra.0+0x4a>
 801674e:	2c30      	cmp	r4, #48	; 0x30
 8016750:	d0a3      	beq.n	801669a <_strtol_l.isra.0+0x3a>
 8016752:	260a      	movs	r6, #10
 8016754:	e7a9      	b.n	80166aa <_strtol_l.isra.0+0x4a>
	...

08016758 <_strtol_r>:
 8016758:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801675a:	4c06      	ldr	r4, [pc, #24]	; (8016774 <_strtol_r+0x1c>)
 801675c:	4d06      	ldr	r5, [pc, #24]	; (8016778 <_strtol_r+0x20>)
 801675e:	6824      	ldr	r4, [r4, #0]
 8016760:	6a24      	ldr	r4, [r4, #32]
 8016762:	2c00      	cmp	r4, #0
 8016764:	bf08      	it	eq
 8016766:	462c      	moveq	r4, r5
 8016768:	9400      	str	r4, [sp, #0]
 801676a:	f7ff ff79 	bl	8016660 <_strtol_l.isra.0>
 801676e:	b003      	add	sp, #12
 8016770:	bd30      	pop	{r4, r5, pc}
 8016772:	bf00      	nop
 8016774:	2000000c 	.word	0x2000000c
 8016778:	20000070 	.word	0x20000070

0801677c <_vsiprintf_r>:
 801677c:	b500      	push	{lr}
 801677e:	b09b      	sub	sp, #108	; 0x6c
 8016780:	9100      	str	r1, [sp, #0]
 8016782:	9104      	str	r1, [sp, #16]
 8016784:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016788:	9105      	str	r1, [sp, #20]
 801678a:	9102      	str	r1, [sp, #8]
 801678c:	4905      	ldr	r1, [pc, #20]	; (80167a4 <_vsiprintf_r+0x28>)
 801678e:	9103      	str	r1, [sp, #12]
 8016790:	4669      	mov	r1, sp
 8016792:	f001 fecb 	bl	801852c <_svfiprintf_r>
 8016796:	9b00      	ldr	r3, [sp, #0]
 8016798:	2200      	movs	r2, #0
 801679a:	701a      	strb	r2, [r3, #0]
 801679c:	b01b      	add	sp, #108	; 0x6c
 801679e:	f85d fb04 	ldr.w	pc, [sp], #4
 80167a2:	bf00      	nop
 80167a4:	ffff0208 	.word	0xffff0208

080167a8 <vsiprintf>:
 80167a8:	4613      	mov	r3, r2
 80167aa:	460a      	mov	r2, r1
 80167ac:	4601      	mov	r1, r0
 80167ae:	4802      	ldr	r0, [pc, #8]	; (80167b8 <vsiprintf+0x10>)
 80167b0:	6800      	ldr	r0, [r0, #0]
 80167b2:	f7ff bfe3 	b.w	801677c <_vsiprintf_r>
 80167b6:	bf00      	nop
 80167b8:	2000000c 	.word	0x2000000c

080167bc <quorem>:
 80167bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167c0:	6903      	ldr	r3, [r0, #16]
 80167c2:	690c      	ldr	r4, [r1, #16]
 80167c4:	42a3      	cmp	r3, r4
 80167c6:	4680      	mov	r8, r0
 80167c8:	f2c0 8082 	blt.w	80168d0 <quorem+0x114>
 80167cc:	3c01      	subs	r4, #1
 80167ce:	f101 0714 	add.w	r7, r1, #20
 80167d2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80167d6:	f100 0614 	add.w	r6, r0, #20
 80167da:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80167de:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80167e2:	eb06 030c 	add.w	r3, r6, ip
 80167e6:	3501      	adds	r5, #1
 80167e8:	eb07 090c 	add.w	r9, r7, ip
 80167ec:	9301      	str	r3, [sp, #4]
 80167ee:	fbb0 f5f5 	udiv	r5, r0, r5
 80167f2:	b395      	cbz	r5, 801685a <quorem+0x9e>
 80167f4:	f04f 0a00 	mov.w	sl, #0
 80167f8:	4638      	mov	r0, r7
 80167fa:	46b6      	mov	lr, r6
 80167fc:	46d3      	mov	fp, sl
 80167fe:	f850 2b04 	ldr.w	r2, [r0], #4
 8016802:	b293      	uxth	r3, r2
 8016804:	fb05 a303 	mla	r3, r5, r3, sl
 8016808:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801680c:	b29b      	uxth	r3, r3
 801680e:	ebab 0303 	sub.w	r3, fp, r3
 8016812:	0c12      	lsrs	r2, r2, #16
 8016814:	f8de b000 	ldr.w	fp, [lr]
 8016818:	fb05 a202 	mla	r2, r5, r2, sl
 801681c:	fa13 f38b 	uxtah	r3, r3, fp
 8016820:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016824:	fa1f fb82 	uxth.w	fp, r2
 8016828:	f8de 2000 	ldr.w	r2, [lr]
 801682c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016830:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016834:	b29b      	uxth	r3, r3
 8016836:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801683a:	4581      	cmp	r9, r0
 801683c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016840:	f84e 3b04 	str.w	r3, [lr], #4
 8016844:	d2db      	bcs.n	80167fe <quorem+0x42>
 8016846:	f856 300c 	ldr.w	r3, [r6, ip]
 801684a:	b933      	cbnz	r3, 801685a <quorem+0x9e>
 801684c:	9b01      	ldr	r3, [sp, #4]
 801684e:	3b04      	subs	r3, #4
 8016850:	429e      	cmp	r6, r3
 8016852:	461a      	mov	r2, r3
 8016854:	d330      	bcc.n	80168b8 <quorem+0xfc>
 8016856:	f8c8 4010 	str.w	r4, [r8, #16]
 801685a:	4640      	mov	r0, r8
 801685c:	f001 fbaa 	bl	8017fb4 <__mcmp>
 8016860:	2800      	cmp	r0, #0
 8016862:	db25      	blt.n	80168b0 <quorem+0xf4>
 8016864:	3501      	adds	r5, #1
 8016866:	4630      	mov	r0, r6
 8016868:	f04f 0c00 	mov.w	ip, #0
 801686c:	f857 2b04 	ldr.w	r2, [r7], #4
 8016870:	f8d0 e000 	ldr.w	lr, [r0]
 8016874:	b293      	uxth	r3, r2
 8016876:	ebac 0303 	sub.w	r3, ip, r3
 801687a:	0c12      	lsrs	r2, r2, #16
 801687c:	fa13 f38e 	uxtah	r3, r3, lr
 8016880:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016884:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016888:	b29b      	uxth	r3, r3
 801688a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801688e:	45b9      	cmp	r9, r7
 8016890:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016894:	f840 3b04 	str.w	r3, [r0], #4
 8016898:	d2e8      	bcs.n	801686c <quorem+0xb0>
 801689a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801689e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80168a2:	b92a      	cbnz	r2, 80168b0 <quorem+0xf4>
 80168a4:	3b04      	subs	r3, #4
 80168a6:	429e      	cmp	r6, r3
 80168a8:	461a      	mov	r2, r3
 80168aa:	d30b      	bcc.n	80168c4 <quorem+0x108>
 80168ac:	f8c8 4010 	str.w	r4, [r8, #16]
 80168b0:	4628      	mov	r0, r5
 80168b2:	b003      	add	sp, #12
 80168b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168b8:	6812      	ldr	r2, [r2, #0]
 80168ba:	3b04      	subs	r3, #4
 80168bc:	2a00      	cmp	r2, #0
 80168be:	d1ca      	bne.n	8016856 <quorem+0x9a>
 80168c0:	3c01      	subs	r4, #1
 80168c2:	e7c5      	b.n	8016850 <quorem+0x94>
 80168c4:	6812      	ldr	r2, [r2, #0]
 80168c6:	3b04      	subs	r3, #4
 80168c8:	2a00      	cmp	r2, #0
 80168ca:	d1ef      	bne.n	80168ac <quorem+0xf0>
 80168cc:	3c01      	subs	r4, #1
 80168ce:	e7ea      	b.n	80168a6 <quorem+0xea>
 80168d0:	2000      	movs	r0, #0
 80168d2:	e7ee      	b.n	80168b2 <quorem+0xf6>
 80168d4:	0000      	movs	r0, r0
	...

080168d8 <_dtoa_r>:
 80168d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168dc:	ec57 6b10 	vmov	r6, r7, d0
 80168e0:	b097      	sub	sp, #92	; 0x5c
 80168e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80168e4:	9106      	str	r1, [sp, #24]
 80168e6:	4604      	mov	r4, r0
 80168e8:	920b      	str	r2, [sp, #44]	; 0x2c
 80168ea:	9312      	str	r3, [sp, #72]	; 0x48
 80168ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80168f0:	e9cd 6700 	strd	r6, r7, [sp]
 80168f4:	b93d      	cbnz	r5, 8016906 <_dtoa_r+0x2e>
 80168f6:	2010      	movs	r0, #16
 80168f8:	f001 f8ee 	bl	8017ad8 <malloc>
 80168fc:	6260      	str	r0, [r4, #36]	; 0x24
 80168fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016902:	6005      	str	r5, [r0, #0]
 8016904:	60c5      	str	r5, [r0, #12]
 8016906:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016908:	6819      	ldr	r1, [r3, #0]
 801690a:	b151      	cbz	r1, 8016922 <_dtoa_r+0x4a>
 801690c:	685a      	ldr	r2, [r3, #4]
 801690e:	604a      	str	r2, [r1, #4]
 8016910:	2301      	movs	r3, #1
 8016912:	4093      	lsls	r3, r2
 8016914:	608b      	str	r3, [r1, #8]
 8016916:	4620      	mov	r0, r4
 8016918:	f001 f92c 	bl	8017b74 <_Bfree>
 801691c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801691e:	2200      	movs	r2, #0
 8016920:	601a      	str	r2, [r3, #0]
 8016922:	1e3b      	subs	r3, r7, #0
 8016924:	bfbb      	ittet	lt
 8016926:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801692a:	9301      	strlt	r3, [sp, #4]
 801692c:	2300      	movge	r3, #0
 801692e:	2201      	movlt	r2, #1
 8016930:	bfac      	ite	ge
 8016932:	f8c8 3000 	strge.w	r3, [r8]
 8016936:	f8c8 2000 	strlt.w	r2, [r8]
 801693a:	4baf      	ldr	r3, [pc, #700]	; (8016bf8 <_dtoa_r+0x320>)
 801693c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016940:	ea33 0308 	bics.w	r3, r3, r8
 8016944:	d114      	bne.n	8016970 <_dtoa_r+0x98>
 8016946:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016948:	f242 730f 	movw	r3, #9999	; 0x270f
 801694c:	6013      	str	r3, [r2, #0]
 801694e:	9b00      	ldr	r3, [sp, #0]
 8016950:	b923      	cbnz	r3, 801695c <_dtoa_r+0x84>
 8016952:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016956:	2800      	cmp	r0, #0
 8016958:	f000 8542 	beq.w	80173e0 <_dtoa_r+0xb08>
 801695c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801695e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8016c0c <_dtoa_r+0x334>
 8016962:	2b00      	cmp	r3, #0
 8016964:	f000 8544 	beq.w	80173f0 <_dtoa_r+0xb18>
 8016968:	f10b 0303 	add.w	r3, fp, #3
 801696c:	f000 bd3e 	b.w	80173ec <_dtoa_r+0xb14>
 8016970:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016974:	2200      	movs	r2, #0
 8016976:	2300      	movs	r3, #0
 8016978:	4630      	mov	r0, r6
 801697a:	4639      	mov	r1, r7
 801697c:	f7ea f8bc 	bl	8000af8 <__aeabi_dcmpeq>
 8016980:	4681      	mov	r9, r0
 8016982:	b168      	cbz	r0, 80169a0 <_dtoa_r+0xc8>
 8016984:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016986:	2301      	movs	r3, #1
 8016988:	6013      	str	r3, [r2, #0]
 801698a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801698c:	2b00      	cmp	r3, #0
 801698e:	f000 8524 	beq.w	80173da <_dtoa_r+0xb02>
 8016992:	4b9a      	ldr	r3, [pc, #616]	; (8016bfc <_dtoa_r+0x324>)
 8016994:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016996:	f103 3bff 	add.w	fp, r3, #4294967295
 801699a:	6013      	str	r3, [r2, #0]
 801699c:	f000 bd28 	b.w	80173f0 <_dtoa_r+0xb18>
 80169a0:	aa14      	add	r2, sp, #80	; 0x50
 80169a2:	a915      	add	r1, sp, #84	; 0x54
 80169a4:	ec47 6b10 	vmov	d0, r6, r7
 80169a8:	4620      	mov	r0, r4
 80169aa:	f001 fbf1 	bl	8018190 <__d2b>
 80169ae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80169b2:	9004      	str	r0, [sp, #16]
 80169b4:	2d00      	cmp	r5, #0
 80169b6:	d07c      	beq.n	8016ab2 <_dtoa_r+0x1da>
 80169b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80169bc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80169c0:	46b2      	mov	sl, r6
 80169c2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80169c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80169ca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80169ce:	2200      	movs	r2, #0
 80169d0:	4b8b      	ldr	r3, [pc, #556]	; (8016c00 <_dtoa_r+0x328>)
 80169d2:	4650      	mov	r0, sl
 80169d4:	4659      	mov	r1, fp
 80169d6:	f7e9 fc6f 	bl	80002b8 <__aeabi_dsub>
 80169da:	a381      	add	r3, pc, #516	; (adr r3, 8016be0 <_dtoa_r+0x308>)
 80169dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169e0:	f7e9 fe22 	bl	8000628 <__aeabi_dmul>
 80169e4:	a380      	add	r3, pc, #512	; (adr r3, 8016be8 <_dtoa_r+0x310>)
 80169e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169ea:	f7e9 fc67 	bl	80002bc <__adddf3>
 80169ee:	4606      	mov	r6, r0
 80169f0:	4628      	mov	r0, r5
 80169f2:	460f      	mov	r7, r1
 80169f4:	f7e9 fdae 	bl	8000554 <__aeabi_i2d>
 80169f8:	a37d      	add	r3, pc, #500	; (adr r3, 8016bf0 <_dtoa_r+0x318>)
 80169fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169fe:	f7e9 fe13 	bl	8000628 <__aeabi_dmul>
 8016a02:	4602      	mov	r2, r0
 8016a04:	460b      	mov	r3, r1
 8016a06:	4630      	mov	r0, r6
 8016a08:	4639      	mov	r1, r7
 8016a0a:	f7e9 fc57 	bl	80002bc <__adddf3>
 8016a0e:	4606      	mov	r6, r0
 8016a10:	460f      	mov	r7, r1
 8016a12:	f7ea f8b9 	bl	8000b88 <__aeabi_d2iz>
 8016a16:	2200      	movs	r2, #0
 8016a18:	4682      	mov	sl, r0
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	4630      	mov	r0, r6
 8016a1e:	4639      	mov	r1, r7
 8016a20:	f7ea f874 	bl	8000b0c <__aeabi_dcmplt>
 8016a24:	b148      	cbz	r0, 8016a3a <_dtoa_r+0x162>
 8016a26:	4650      	mov	r0, sl
 8016a28:	f7e9 fd94 	bl	8000554 <__aeabi_i2d>
 8016a2c:	4632      	mov	r2, r6
 8016a2e:	463b      	mov	r3, r7
 8016a30:	f7ea f862 	bl	8000af8 <__aeabi_dcmpeq>
 8016a34:	b908      	cbnz	r0, 8016a3a <_dtoa_r+0x162>
 8016a36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016a3a:	f1ba 0f16 	cmp.w	sl, #22
 8016a3e:	d859      	bhi.n	8016af4 <_dtoa_r+0x21c>
 8016a40:	4970      	ldr	r1, [pc, #448]	; (8016c04 <_dtoa_r+0x32c>)
 8016a42:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016a46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016a4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016a4e:	f7ea f87b 	bl	8000b48 <__aeabi_dcmpgt>
 8016a52:	2800      	cmp	r0, #0
 8016a54:	d050      	beq.n	8016af8 <_dtoa_r+0x220>
 8016a56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8016a5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016a60:	1b5d      	subs	r5, r3, r5
 8016a62:	f1b5 0801 	subs.w	r8, r5, #1
 8016a66:	bf49      	itett	mi
 8016a68:	f1c5 0301 	rsbmi	r3, r5, #1
 8016a6c:	2300      	movpl	r3, #0
 8016a6e:	9305      	strmi	r3, [sp, #20]
 8016a70:	f04f 0800 	movmi.w	r8, #0
 8016a74:	bf58      	it	pl
 8016a76:	9305      	strpl	r3, [sp, #20]
 8016a78:	f1ba 0f00 	cmp.w	sl, #0
 8016a7c:	db3e      	blt.n	8016afc <_dtoa_r+0x224>
 8016a7e:	2300      	movs	r3, #0
 8016a80:	44d0      	add	r8, sl
 8016a82:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8016a86:	9307      	str	r3, [sp, #28]
 8016a88:	9b06      	ldr	r3, [sp, #24]
 8016a8a:	2b09      	cmp	r3, #9
 8016a8c:	f200 8090 	bhi.w	8016bb0 <_dtoa_r+0x2d8>
 8016a90:	2b05      	cmp	r3, #5
 8016a92:	bfc4      	itt	gt
 8016a94:	3b04      	subgt	r3, #4
 8016a96:	9306      	strgt	r3, [sp, #24]
 8016a98:	9b06      	ldr	r3, [sp, #24]
 8016a9a:	f1a3 0302 	sub.w	r3, r3, #2
 8016a9e:	bfcc      	ite	gt
 8016aa0:	2500      	movgt	r5, #0
 8016aa2:	2501      	movle	r5, #1
 8016aa4:	2b03      	cmp	r3, #3
 8016aa6:	f200 808f 	bhi.w	8016bc8 <_dtoa_r+0x2f0>
 8016aaa:	e8df f003 	tbb	[pc, r3]
 8016aae:	7f7d      	.short	0x7f7d
 8016ab0:	7131      	.short	0x7131
 8016ab2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8016ab6:	441d      	add	r5, r3
 8016ab8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8016abc:	2820      	cmp	r0, #32
 8016abe:	dd13      	ble.n	8016ae8 <_dtoa_r+0x210>
 8016ac0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8016ac4:	9b00      	ldr	r3, [sp, #0]
 8016ac6:	fa08 f800 	lsl.w	r8, r8, r0
 8016aca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8016ace:	fa23 f000 	lsr.w	r0, r3, r0
 8016ad2:	ea48 0000 	orr.w	r0, r8, r0
 8016ad6:	f7e9 fd2d 	bl	8000534 <__aeabi_ui2d>
 8016ada:	2301      	movs	r3, #1
 8016adc:	4682      	mov	sl, r0
 8016ade:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8016ae2:	3d01      	subs	r5, #1
 8016ae4:	9313      	str	r3, [sp, #76]	; 0x4c
 8016ae6:	e772      	b.n	80169ce <_dtoa_r+0xf6>
 8016ae8:	9b00      	ldr	r3, [sp, #0]
 8016aea:	f1c0 0020 	rsb	r0, r0, #32
 8016aee:	fa03 f000 	lsl.w	r0, r3, r0
 8016af2:	e7f0      	b.n	8016ad6 <_dtoa_r+0x1fe>
 8016af4:	2301      	movs	r3, #1
 8016af6:	e7b1      	b.n	8016a5c <_dtoa_r+0x184>
 8016af8:	900f      	str	r0, [sp, #60]	; 0x3c
 8016afa:	e7b0      	b.n	8016a5e <_dtoa_r+0x186>
 8016afc:	9b05      	ldr	r3, [sp, #20]
 8016afe:	eba3 030a 	sub.w	r3, r3, sl
 8016b02:	9305      	str	r3, [sp, #20]
 8016b04:	f1ca 0300 	rsb	r3, sl, #0
 8016b08:	9307      	str	r3, [sp, #28]
 8016b0a:	2300      	movs	r3, #0
 8016b0c:	930e      	str	r3, [sp, #56]	; 0x38
 8016b0e:	e7bb      	b.n	8016a88 <_dtoa_r+0x1b0>
 8016b10:	2301      	movs	r3, #1
 8016b12:	930a      	str	r3, [sp, #40]	; 0x28
 8016b14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	dd59      	ble.n	8016bce <_dtoa_r+0x2f6>
 8016b1a:	9302      	str	r3, [sp, #8]
 8016b1c:	4699      	mov	r9, r3
 8016b1e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016b20:	2200      	movs	r2, #0
 8016b22:	6072      	str	r2, [r6, #4]
 8016b24:	2204      	movs	r2, #4
 8016b26:	f102 0014 	add.w	r0, r2, #20
 8016b2a:	4298      	cmp	r0, r3
 8016b2c:	6871      	ldr	r1, [r6, #4]
 8016b2e:	d953      	bls.n	8016bd8 <_dtoa_r+0x300>
 8016b30:	4620      	mov	r0, r4
 8016b32:	f000 ffeb 	bl	8017b0c <_Balloc>
 8016b36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016b38:	6030      	str	r0, [r6, #0]
 8016b3a:	f1b9 0f0e 	cmp.w	r9, #14
 8016b3e:	f8d3 b000 	ldr.w	fp, [r3]
 8016b42:	f200 80e6 	bhi.w	8016d12 <_dtoa_r+0x43a>
 8016b46:	2d00      	cmp	r5, #0
 8016b48:	f000 80e3 	beq.w	8016d12 <_dtoa_r+0x43a>
 8016b4c:	ed9d 7b00 	vldr	d7, [sp]
 8016b50:	f1ba 0f00 	cmp.w	sl, #0
 8016b54:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8016b58:	dd74      	ble.n	8016c44 <_dtoa_r+0x36c>
 8016b5a:	4a2a      	ldr	r2, [pc, #168]	; (8016c04 <_dtoa_r+0x32c>)
 8016b5c:	f00a 030f 	and.w	r3, sl, #15
 8016b60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016b64:	ed93 7b00 	vldr	d7, [r3]
 8016b68:	ea4f 162a 	mov.w	r6, sl, asr #4
 8016b6c:	06f0      	lsls	r0, r6, #27
 8016b6e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016b72:	d565      	bpl.n	8016c40 <_dtoa_r+0x368>
 8016b74:	4b24      	ldr	r3, [pc, #144]	; (8016c08 <_dtoa_r+0x330>)
 8016b76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016b7a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016b7e:	f7e9 fe7d 	bl	800087c <__aeabi_ddiv>
 8016b82:	e9cd 0100 	strd	r0, r1, [sp]
 8016b86:	f006 060f 	and.w	r6, r6, #15
 8016b8a:	2503      	movs	r5, #3
 8016b8c:	4f1e      	ldr	r7, [pc, #120]	; (8016c08 <_dtoa_r+0x330>)
 8016b8e:	e04c      	b.n	8016c2a <_dtoa_r+0x352>
 8016b90:	2301      	movs	r3, #1
 8016b92:	930a      	str	r3, [sp, #40]	; 0x28
 8016b94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b96:	4453      	add	r3, sl
 8016b98:	f103 0901 	add.w	r9, r3, #1
 8016b9c:	9302      	str	r3, [sp, #8]
 8016b9e:	464b      	mov	r3, r9
 8016ba0:	2b01      	cmp	r3, #1
 8016ba2:	bfb8      	it	lt
 8016ba4:	2301      	movlt	r3, #1
 8016ba6:	e7ba      	b.n	8016b1e <_dtoa_r+0x246>
 8016ba8:	2300      	movs	r3, #0
 8016baa:	e7b2      	b.n	8016b12 <_dtoa_r+0x23a>
 8016bac:	2300      	movs	r3, #0
 8016bae:	e7f0      	b.n	8016b92 <_dtoa_r+0x2ba>
 8016bb0:	2501      	movs	r5, #1
 8016bb2:	2300      	movs	r3, #0
 8016bb4:	9306      	str	r3, [sp, #24]
 8016bb6:	950a      	str	r5, [sp, #40]	; 0x28
 8016bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8016bbc:	9302      	str	r3, [sp, #8]
 8016bbe:	4699      	mov	r9, r3
 8016bc0:	2200      	movs	r2, #0
 8016bc2:	2312      	movs	r3, #18
 8016bc4:	920b      	str	r2, [sp, #44]	; 0x2c
 8016bc6:	e7aa      	b.n	8016b1e <_dtoa_r+0x246>
 8016bc8:	2301      	movs	r3, #1
 8016bca:	930a      	str	r3, [sp, #40]	; 0x28
 8016bcc:	e7f4      	b.n	8016bb8 <_dtoa_r+0x2e0>
 8016bce:	2301      	movs	r3, #1
 8016bd0:	9302      	str	r3, [sp, #8]
 8016bd2:	4699      	mov	r9, r3
 8016bd4:	461a      	mov	r2, r3
 8016bd6:	e7f5      	b.n	8016bc4 <_dtoa_r+0x2ec>
 8016bd8:	3101      	adds	r1, #1
 8016bda:	6071      	str	r1, [r6, #4]
 8016bdc:	0052      	lsls	r2, r2, #1
 8016bde:	e7a2      	b.n	8016b26 <_dtoa_r+0x24e>
 8016be0:	636f4361 	.word	0x636f4361
 8016be4:	3fd287a7 	.word	0x3fd287a7
 8016be8:	8b60c8b3 	.word	0x8b60c8b3
 8016bec:	3fc68a28 	.word	0x3fc68a28
 8016bf0:	509f79fb 	.word	0x509f79fb
 8016bf4:	3fd34413 	.word	0x3fd34413
 8016bf8:	7ff00000 	.word	0x7ff00000
 8016bfc:	08019ac4 	.word	0x08019ac4
 8016c00:	3ff80000 	.word	0x3ff80000
 8016c04:	080199c8 	.word	0x080199c8
 8016c08:	080199a0 	.word	0x080199a0
 8016c0c:	08019929 	.word	0x08019929
 8016c10:	07f1      	lsls	r1, r6, #31
 8016c12:	d508      	bpl.n	8016c26 <_dtoa_r+0x34e>
 8016c14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016c18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016c1c:	f7e9 fd04 	bl	8000628 <__aeabi_dmul>
 8016c20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016c24:	3501      	adds	r5, #1
 8016c26:	1076      	asrs	r6, r6, #1
 8016c28:	3708      	adds	r7, #8
 8016c2a:	2e00      	cmp	r6, #0
 8016c2c:	d1f0      	bne.n	8016c10 <_dtoa_r+0x338>
 8016c2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016c32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016c36:	f7e9 fe21 	bl	800087c <__aeabi_ddiv>
 8016c3a:	e9cd 0100 	strd	r0, r1, [sp]
 8016c3e:	e01a      	b.n	8016c76 <_dtoa_r+0x39e>
 8016c40:	2502      	movs	r5, #2
 8016c42:	e7a3      	b.n	8016b8c <_dtoa_r+0x2b4>
 8016c44:	f000 80a0 	beq.w	8016d88 <_dtoa_r+0x4b0>
 8016c48:	f1ca 0600 	rsb	r6, sl, #0
 8016c4c:	4b9f      	ldr	r3, [pc, #636]	; (8016ecc <_dtoa_r+0x5f4>)
 8016c4e:	4fa0      	ldr	r7, [pc, #640]	; (8016ed0 <_dtoa_r+0x5f8>)
 8016c50:	f006 020f 	and.w	r2, r6, #15
 8016c54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016c60:	f7e9 fce2 	bl	8000628 <__aeabi_dmul>
 8016c64:	e9cd 0100 	strd	r0, r1, [sp]
 8016c68:	1136      	asrs	r6, r6, #4
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	2502      	movs	r5, #2
 8016c6e:	2e00      	cmp	r6, #0
 8016c70:	d17f      	bne.n	8016d72 <_dtoa_r+0x49a>
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d1e1      	bne.n	8016c3a <_dtoa_r+0x362>
 8016c76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	f000 8087 	beq.w	8016d8c <_dtoa_r+0x4b4>
 8016c7e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016c82:	2200      	movs	r2, #0
 8016c84:	4b93      	ldr	r3, [pc, #588]	; (8016ed4 <_dtoa_r+0x5fc>)
 8016c86:	4630      	mov	r0, r6
 8016c88:	4639      	mov	r1, r7
 8016c8a:	f7e9 ff3f 	bl	8000b0c <__aeabi_dcmplt>
 8016c8e:	2800      	cmp	r0, #0
 8016c90:	d07c      	beq.n	8016d8c <_dtoa_r+0x4b4>
 8016c92:	f1b9 0f00 	cmp.w	r9, #0
 8016c96:	d079      	beq.n	8016d8c <_dtoa_r+0x4b4>
 8016c98:	9b02      	ldr	r3, [sp, #8]
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	dd35      	ble.n	8016d0a <_dtoa_r+0x432>
 8016c9e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016ca2:	9308      	str	r3, [sp, #32]
 8016ca4:	4639      	mov	r1, r7
 8016ca6:	2200      	movs	r2, #0
 8016ca8:	4b8b      	ldr	r3, [pc, #556]	; (8016ed8 <_dtoa_r+0x600>)
 8016caa:	4630      	mov	r0, r6
 8016cac:	f7e9 fcbc 	bl	8000628 <__aeabi_dmul>
 8016cb0:	e9cd 0100 	strd	r0, r1, [sp]
 8016cb4:	9f02      	ldr	r7, [sp, #8]
 8016cb6:	3501      	adds	r5, #1
 8016cb8:	4628      	mov	r0, r5
 8016cba:	f7e9 fc4b 	bl	8000554 <__aeabi_i2d>
 8016cbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016cc2:	f7e9 fcb1 	bl	8000628 <__aeabi_dmul>
 8016cc6:	2200      	movs	r2, #0
 8016cc8:	4b84      	ldr	r3, [pc, #528]	; (8016edc <_dtoa_r+0x604>)
 8016cca:	f7e9 faf7 	bl	80002bc <__adddf3>
 8016cce:	4605      	mov	r5, r0
 8016cd0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8016cd4:	2f00      	cmp	r7, #0
 8016cd6:	d15d      	bne.n	8016d94 <_dtoa_r+0x4bc>
 8016cd8:	2200      	movs	r2, #0
 8016cda:	4b81      	ldr	r3, [pc, #516]	; (8016ee0 <_dtoa_r+0x608>)
 8016cdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016ce0:	f7e9 faea 	bl	80002b8 <__aeabi_dsub>
 8016ce4:	462a      	mov	r2, r5
 8016ce6:	4633      	mov	r3, r6
 8016ce8:	e9cd 0100 	strd	r0, r1, [sp]
 8016cec:	f7e9 ff2c 	bl	8000b48 <__aeabi_dcmpgt>
 8016cf0:	2800      	cmp	r0, #0
 8016cf2:	f040 8288 	bne.w	8017206 <_dtoa_r+0x92e>
 8016cf6:	462a      	mov	r2, r5
 8016cf8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8016cfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016d00:	f7e9 ff04 	bl	8000b0c <__aeabi_dcmplt>
 8016d04:	2800      	cmp	r0, #0
 8016d06:	f040 827c 	bne.w	8017202 <_dtoa_r+0x92a>
 8016d0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016d0e:	e9cd 2300 	strd	r2, r3, [sp]
 8016d12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	f2c0 8150 	blt.w	8016fba <_dtoa_r+0x6e2>
 8016d1a:	f1ba 0f0e 	cmp.w	sl, #14
 8016d1e:	f300 814c 	bgt.w	8016fba <_dtoa_r+0x6e2>
 8016d22:	4b6a      	ldr	r3, [pc, #424]	; (8016ecc <_dtoa_r+0x5f4>)
 8016d24:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016d28:	ed93 7b00 	vldr	d7, [r3]
 8016d2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016d34:	f280 80d8 	bge.w	8016ee8 <_dtoa_r+0x610>
 8016d38:	f1b9 0f00 	cmp.w	r9, #0
 8016d3c:	f300 80d4 	bgt.w	8016ee8 <_dtoa_r+0x610>
 8016d40:	f040 825e 	bne.w	8017200 <_dtoa_r+0x928>
 8016d44:	2200      	movs	r2, #0
 8016d46:	4b66      	ldr	r3, [pc, #408]	; (8016ee0 <_dtoa_r+0x608>)
 8016d48:	ec51 0b17 	vmov	r0, r1, d7
 8016d4c:	f7e9 fc6c 	bl	8000628 <__aeabi_dmul>
 8016d50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016d54:	f7e9 feee 	bl	8000b34 <__aeabi_dcmpge>
 8016d58:	464f      	mov	r7, r9
 8016d5a:	464e      	mov	r6, r9
 8016d5c:	2800      	cmp	r0, #0
 8016d5e:	f040 8234 	bne.w	80171ca <_dtoa_r+0x8f2>
 8016d62:	2331      	movs	r3, #49	; 0x31
 8016d64:	f10b 0501 	add.w	r5, fp, #1
 8016d68:	f88b 3000 	strb.w	r3, [fp]
 8016d6c:	f10a 0a01 	add.w	sl, sl, #1
 8016d70:	e22f      	b.n	80171d2 <_dtoa_r+0x8fa>
 8016d72:	07f2      	lsls	r2, r6, #31
 8016d74:	d505      	bpl.n	8016d82 <_dtoa_r+0x4aa>
 8016d76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016d7a:	f7e9 fc55 	bl	8000628 <__aeabi_dmul>
 8016d7e:	3501      	adds	r5, #1
 8016d80:	2301      	movs	r3, #1
 8016d82:	1076      	asrs	r6, r6, #1
 8016d84:	3708      	adds	r7, #8
 8016d86:	e772      	b.n	8016c6e <_dtoa_r+0x396>
 8016d88:	2502      	movs	r5, #2
 8016d8a:	e774      	b.n	8016c76 <_dtoa_r+0x39e>
 8016d8c:	f8cd a020 	str.w	sl, [sp, #32]
 8016d90:	464f      	mov	r7, r9
 8016d92:	e791      	b.n	8016cb8 <_dtoa_r+0x3e0>
 8016d94:	4b4d      	ldr	r3, [pc, #308]	; (8016ecc <_dtoa_r+0x5f4>)
 8016d96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8016d9a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8016d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d047      	beq.n	8016e34 <_dtoa_r+0x55c>
 8016da4:	4602      	mov	r2, r0
 8016da6:	460b      	mov	r3, r1
 8016da8:	2000      	movs	r0, #0
 8016daa:	494e      	ldr	r1, [pc, #312]	; (8016ee4 <_dtoa_r+0x60c>)
 8016dac:	f7e9 fd66 	bl	800087c <__aeabi_ddiv>
 8016db0:	462a      	mov	r2, r5
 8016db2:	4633      	mov	r3, r6
 8016db4:	f7e9 fa80 	bl	80002b8 <__aeabi_dsub>
 8016db8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016dbc:	465d      	mov	r5, fp
 8016dbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016dc2:	f7e9 fee1 	bl	8000b88 <__aeabi_d2iz>
 8016dc6:	4606      	mov	r6, r0
 8016dc8:	f7e9 fbc4 	bl	8000554 <__aeabi_i2d>
 8016dcc:	4602      	mov	r2, r0
 8016dce:	460b      	mov	r3, r1
 8016dd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016dd4:	f7e9 fa70 	bl	80002b8 <__aeabi_dsub>
 8016dd8:	3630      	adds	r6, #48	; 0x30
 8016dda:	f805 6b01 	strb.w	r6, [r5], #1
 8016dde:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016de2:	e9cd 0100 	strd	r0, r1, [sp]
 8016de6:	f7e9 fe91 	bl	8000b0c <__aeabi_dcmplt>
 8016dea:	2800      	cmp	r0, #0
 8016dec:	d163      	bne.n	8016eb6 <_dtoa_r+0x5de>
 8016dee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016df2:	2000      	movs	r0, #0
 8016df4:	4937      	ldr	r1, [pc, #220]	; (8016ed4 <_dtoa_r+0x5fc>)
 8016df6:	f7e9 fa5f 	bl	80002b8 <__aeabi_dsub>
 8016dfa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016dfe:	f7e9 fe85 	bl	8000b0c <__aeabi_dcmplt>
 8016e02:	2800      	cmp	r0, #0
 8016e04:	f040 80b7 	bne.w	8016f76 <_dtoa_r+0x69e>
 8016e08:	eba5 030b 	sub.w	r3, r5, fp
 8016e0c:	429f      	cmp	r7, r3
 8016e0e:	f77f af7c 	ble.w	8016d0a <_dtoa_r+0x432>
 8016e12:	2200      	movs	r2, #0
 8016e14:	4b30      	ldr	r3, [pc, #192]	; (8016ed8 <_dtoa_r+0x600>)
 8016e16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016e1a:	f7e9 fc05 	bl	8000628 <__aeabi_dmul>
 8016e1e:	2200      	movs	r2, #0
 8016e20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016e24:	4b2c      	ldr	r3, [pc, #176]	; (8016ed8 <_dtoa_r+0x600>)
 8016e26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016e2a:	f7e9 fbfd 	bl	8000628 <__aeabi_dmul>
 8016e2e:	e9cd 0100 	strd	r0, r1, [sp]
 8016e32:	e7c4      	b.n	8016dbe <_dtoa_r+0x4e6>
 8016e34:	462a      	mov	r2, r5
 8016e36:	4633      	mov	r3, r6
 8016e38:	f7e9 fbf6 	bl	8000628 <__aeabi_dmul>
 8016e3c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016e40:	eb0b 0507 	add.w	r5, fp, r7
 8016e44:	465e      	mov	r6, fp
 8016e46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016e4a:	f7e9 fe9d 	bl	8000b88 <__aeabi_d2iz>
 8016e4e:	4607      	mov	r7, r0
 8016e50:	f7e9 fb80 	bl	8000554 <__aeabi_i2d>
 8016e54:	3730      	adds	r7, #48	; 0x30
 8016e56:	4602      	mov	r2, r0
 8016e58:	460b      	mov	r3, r1
 8016e5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016e5e:	f7e9 fa2b 	bl	80002b8 <__aeabi_dsub>
 8016e62:	f806 7b01 	strb.w	r7, [r6], #1
 8016e66:	42ae      	cmp	r6, r5
 8016e68:	e9cd 0100 	strd	r0, r1, [sp]
 8016e6c:	f04f 0200 	mov.w	r2, #0
 8016e70:	d126      	bne.n	8016ec0 <_dtoa_r+0x5e8>
 8016e72:	4b1c      	ldr	r3, [pc, #112]	; (8016ee4 <_dtoa_r+0x60c>)
 8016e74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016e78:	f7e9 fa20 	bl	80002bc <__adddf3>
 8016e7c:	4602      	mov	r2, r0
 8016e7e:	460b      	mov	r3, r1
 8016e80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016e84:	f7e9 fe60 	bl	8000b48 <__aeabi_dcmpgt>
 8016e88:	2800      	cmp	r0, #0
 8016e8a:	d174      	bne.n	8016f76 <_dtoa_r+0x69e>
 8016e8c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016e90:	2000      	movs	r0, #0
 8016e92:	4914      	ldr	r1, [pc, #80]	; (8016ee4 <_dtoa_r+0x60c>)
 8016e94:	f7e9 fa10 	bl	80002b8 <__aeabi_dsub>
 8016e98:	4602      	mov	r2, r0
 8016e9a:	460b      	mov	r3, r1
 8016e9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016ea0:	f7e9 fe34 	bl	8000b0c <__aeabi_dcmplt>
 8016ea4:	2800      	cmp	r0, #0
 8016ea6:	f43f af30 	beq.w	8016d0a <_dtoa_r+0x432>
 8016eaa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016eae:	2b30      	cmp	r3, #48	; 0x30
 8016eb0:	f105 32ff 	add.w	r2, r5, #4294967295
 8016eb4:	d002      	beq.n	8016ebc <_dtoa_r+0x5e4>
 8016eb6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016eba:	e04a      	b.n	8016f52 <_dtoa_r+0x67a>
 8016ebc:	4615      	mov	r5, r2
 8016ebe:	e7f4      	b.n	8016eaa <_dtoa_r+0x5d2>
 8016ec0:	4b05      	ldr	r3, [pc, #20]	; (8016ed8 <_dtoa_r+0x600>)
 8016ec2:	f7e9 fbb1 	bl	8000628 <__aeabi_dmul>
 8016ec6:	e9cd 0100 	strd	r0, r1, [sp]
 8016eca:	e7bc      	b.n	8016e46 <_dtoa_r+0x56e>
 8016ecc:	080199c8 	.word	0x080199c8
 8016ed0:	080199a0 	.word	0x080199a0
 8016ed4:	3ff00000 	.word	0x3ff00000
 8016ed8:	40240000 	.word	0x40240000
 8016edc:	401c0000 	.word	0x401c0000
 8016ee0:	40140000 	.word	0x40140000
 8016ee4:	3fe00000 	.word	0x3fe00000
 8016ee8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016eec:	465d      	mov	r5, fp
 8016eee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016ef2:	4630      	mov	r0, r6
 8016ef4:	4639      	mov	r1, r7
 8016ef6:	f7e9 fcc1 	bl	800087c <__aeabi_ddiv>
 8016efa:	f7e9 fe45 	bl	8000b88 <__aeabi_d2iz>
 8016efe:	4680      	mov	r8, r0
 8016f00:	f7e9 fb28 	bl	8000554 <__aeabi_i2d>
 8016f04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016f08:	f7e9 fb8e 	bl	8000628 <__aeabi_dmul>
 8016f0c:	4602      	mov	r2, r0
 8016f0e:	460b      	mov	r3, r1
 8016f10:	4630      	mov	r0, r6
 8016f12:	4639      	mov	r1, r7
 8016f14:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8016f18:	f7e9 f9ce 	bl	80002b8 <__aeabi_dsub>
 8016f1c:	f805 6b01 	strb.w	r6, [r5], #1
 8016f20:	eba5 060b 	sub.w	r6, r5, fp
 8016f24:	45b1      	cmp	r9, r6
 8016f26:	4602      	mov	r2, r0
 8016f28:	460b      	mov	r3, r1
 8016f2a:	d139      	bne.n	8016fa0 <_dtoa_r+0x6c8>
 8016f2c:	f7e9 f9c6 	bl	80002bc <__adddf3>
 8016f30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016f34:	4606      	mov	r6, r0
 8016f36:	460f      	mov	r7, r1
 8016f38:	f7e9 fe06 	bl	8000b48 <__aeabi_dcmpgt>
 8016f3c:	b9c8      	cbnz	r0, 8016f72 <_dtoa_r+0x69a>
 8016f3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016f42:	4630      	mov	r0, r6
 8016f44:	4639      	mov	r1, r7
 8016f46:	f7e9 fdd7 	bl	8000af8 <__aeabi_dcmpeq>
 8016f4a:	b110      	cbz	r0, 8016f52 <_dtoa_r+0x67a>
 8016f4c:	f018 0f01 	tst.w	r8, #1
 8016f50:	d10f      	bne.n	8016f72 <_dtoa_r+0x69a>
 8016f52:	9904      	ldr	r1, [sp, #16]
 8016f54:	4620      	mov	r0, r4
 8016f56:	f000 fe0d 	bl	8017b74 <_Bfree>
 8016f5a:	2300      	movs	r3, #0
 8016f5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016f5e:	702b      	strb	r3, [r5, #0]
 8016f60:	f10a 0301 	add.w	r3, sl, #1
 8016f64:	6013      	str	r3, [r2, #0]
 8016f66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	f000 8241 	beq.w	80173f0 <_dtoa_r+0xb18>
 8016f6e:	601d      	str	r5, [r3, #0]
 8016f70:	e23e      	b.n	80173f0 <_dtoa_r+0xb18>
 8016f72:	f8cd a020 	str.w	sl, [sp, #32]
 8016f76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016f7a:	2a39      	cmp	r2, #57	; 0x39
 8016f7c:	f105 33ff 	add.w	r3, r5, #4294967295
 8016f80:	d108      	bne.n	8016f94 <_dtoa_r+0x6bc>
 8016f82:	459b      	cmp	fp, r3
 8016f84:	d10a      	bne.n	8016f9c <_dtoa_r+0x6c4>
 8016f86:	9b08      	ldr	r3, [sp, #32]
 8016f88:	3301      	adds	r3, #1
 8016f8a:	9308      	str	r3, [sp, #32]
 8016f8c:	2330      	movs	r3, #48	; 0x30
 8016f8e:	f88b 3000 	strb.w	r3, [fp]
 8016f92:	465b      	mov	r3, fp
 8016f94:	781a      	ldrb	r2, [r3, #0]
 8016f96:	3201      	adds	r2, #1
 8016f98:	701a      	strb	r2, [r3, #0]
 8016f9a:	e78c      	b.n	8016eb6 <_dtoa_r+0x5de>
 8016f9c:	461d      	mov	r5, r3
 8016f9e:	e7ea      	b.n	8016f76 <_dtoa_r+0x69e>
 8016fa0:	2200      	movs	r2, #0
 8016fa2:	4b9b      	ldr	r3, [pc, #620]	; (8017210 <_dtoa_r+0x938>)
 8016fa4:	f7e9 fb40 	bl	8000628 <__aeabi_dmul>
 8016fa8:	2200      	movs	r2, #0
 8016faa:	2300      	movs	r3, #0
 8016fac:	4606      	mov	r6, r0
 8016fae:	460f      	mov	r7, r1
 8016fb0:	f7e9 fda2 	bl	8000af8 <__aeabi_dcmpeq>
 8016fb4:	2800      	cmp	r0, #0
 8016fb6:	d09a      	beq.n	8016eee <_dtoa_r+0x616>
 8016fb8:	e7cb      	b.n	8016f52 <_dtoa_r+0x67a>
 8016fba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016fbc:	2a00      	cmp	r2, #0
 8016fbe:	f000 808b 	beq.w	80170d8 <_dtoa_r+0x800>
 8016fc2:	9a06      	ldr	r2, [sp, #24]
 8016fc4:	2a01      	cmp	r2, #1
 8016fc6:	dc6e      	bgt.n	80170a6 <_dtoa_r+0x7ce>
 8016fc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016fca:	2a00      	cmp	r2, #0
 8016fcc:	d067      	beq.n	801709e <_dtoa_r+0x7c6>
 8016fce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016fd2:	9f07      	ldr	r7, [sp, #28]
 8016fd4:	9d05      	ldr	r5, [sp, #20]
 8016fd6:	9a05      	ldr	r2, [sp, #20]
 8016fd8:	2101      	movs	r1, #1
 8016fda:	441a      	add	r2, r3
 8016fdc:	4620      	mov	r0, r4
 8016fde:	9205      	str	r2, [sp, #20]
 8016fe0:	4498      	add	r8, r3
 8016fe2:	f000 fea5 	bl	8017d30 <__i2b>
 8016fe6:	4606      	mov	r6, r0
 8016fe8:	2d00      	cmp	r5, #0
 8016fea:	dd0c      	ble.n	8017006 <_dtoa_r+0x72e>
 8016fec:	f1b8 0f00 	cmp.w	r8, #0
 8016ff0:	dd09      	ble.n	8017006 <_dtoa_r+0x72e>
 8016ff2:	4545      	cmp	r5, r8
 8016ff4:	9a05      	ldr	r2, [sp, #20]
 8016ff6:	462b      	mov	r3, r5
 8016ff8:	bfa8      	it	ge
 8016ffa:	4643      	movge	r3, r8
 8016ffc:	1ad2      	subs	r2, r2, r3
 8016ffe:	9205      	str	r2, [sp, #20]
 8017000:	1aed      	subs	r5, r5, r3
 8017002:	eba8 0803 	sub.w	r8, r8, r3
 8017006:	9b07      	ldr	r3, [sp, #28]
 8017008:	b1eb      	cbz	r3, 8017046 <_dtoa_r+0x76e>
 801700a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801700c:	2b00      	cmp	r3, #0
 801700e:	d067      	beq.n	80170e0 <_dtoa_r+0x808>
 8017010:	b18f      	cbz	r7, 8017036 <_dtoa_r+0x75e>
 8017012:	4631      	mov	r1, r6
 8017014:	463a      	mov	r2, r7
 8017016:	4620      	mov	r0, r4
 8017018:	f000 ff2a 	bl	8017e70 <__pow5mult>
 801701c:	9a04      	ldr	r2, [sp, #16]
 801701e:	4601      	mov	r1, r0
 8017020:	4606      	mov	r6, r0
 8017022:	4620      	mov	r0, r4
 8017024:	f000 fe8d 	bl	8017d42 <__multiply>
 8017028:	9904      	ldr	r1, [sp, #16]
 801702a:	9008      	str	r0, [sp, #32]
 801702c:	4620      	mov	r0, r4
 801702e:	f000 fda1 	bl	8017b74 <_Bfree>
 8017032:	9b08      	ldr	r3, [sp, #32]
 8017034:	9304      	str	r3, [sp, #16]
 8017036:	9b07      	ldr	r3, [sp, #28]
 8017038:	1bda      	subs	r2, r3, r7
 801703a:	d004      	beq.n	8017046 <_dtoa_r+0x76e>
 801703c:	9904      	ldr	r1, [sp, #16]
 801703e:	4620      	mov	r0, r4
 8017040:	f000 ff16 	bl	8017e70 <__pow5mult>
 8017044:	9004      	str	r0, [sp, #16]
 8017046:	2101      	movs	r1, #1
 8017048:	4620      	mov	r0, r4
 801704a:	f000 fe71 	bl	8017d30 <__i2b>
 801704e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017050:	4607      	mov	r7, r0
 8017052:	2b00      	cmp	r3, #0
 8017054:	f000 81d0 	beq.w	80173f8 <_dtoa_r+0xb20>
 8017058:	461a      	mov	r2, r3
 801705a:	4601      	mov	r1, r0
 801705c:	4620      	mov	r0, r4
 801705e:	f000 ff07 	bl	8017e70 <__pow5mult>
 8017062:	9b06      	ldr	r3, [sp, #24]
 8017064:	2b01      	cmp	r3, #1
 8017066:	4607      	mov	r7, r0
 8017068:	dc40      	bgt.n	80170ec <_dtoa_r+0x814>
 801706a:	9b00      	ldr	r3, [sp, #0]
 801706c:	2b00      	cmp	r3, #0
 801706e:	d139      	bne.n	80170e4 <_dtoa_r+0x80c>
 8017070:	9b01      	ldr	r3, [sp, #4]
 8017072:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017076:	2b00      	cmp	r3, #0
 8017078:	d136      	bne.n	80170e8 <_dtoa_r+0x810>
 801707a:	9b01      	ldr	r3, [sp, #4]
 801707c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017080:	0d1b      	lsrs	r3, r3, #20
 8017082:	051b      	lsls	r3, r3, #20
 8017084:	b12b      	cbz	r3, 8017092 <_dtoa_r+0x7ba>
 8017086:	9b05      	ldr	r3, [sp, #20]
 8017088:	3301      	adds	r3, #1
 801708a:	9305      	str	r3, [sp, #20]
 801708c:	f108 0801 	add.w	r8, r8, #1
 8017090:	2301      	movs	r3, #1
 8017092:	9307      	str	r3, [sp, #28]
 8017094:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017096:	2b00      	cmp	r3, #0
 8017098:	d12a      	bne.n	80170f0 <_dtoa_r+0x818>
 801709a:	2001      	movs	r0, #1
 801709c:	e030      	b.n	8017100 <_dtoa_r+0x828>
 801709e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80170a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80170a4:	e795      	b.n	8016fd2 <_dtoa_r+0x6fa>
 80170a6:	9b07      	ldr	r3, [sp, #28]
 80170a8:	f109 37ff 	add.w	r7, r9, #4294967295
 80170ac:	42bb      	cmp	r3, r7
 80170ae:	bfbf      	itttt	lt
 80170b0:	9b07      	ldrlt	r3, [sp, #28]
 80170b2:	9707      	strlt	r7, [sp, #28]
 80170b4:	1afa      	sublt	r2, r7, r3
 80170b6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80170b8:	bfbb      	ittet	lt
 80170ba:	189b      	addlt	r3, r3, r2
 80170bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80170be:	1bdf      	subge	r7, r3, r7
 80170c0:	2700      	movlt	r7, #0
 80170c2:	f1b9 0f00 	cmp.w	r9, #0
 80170c6:	bfb5      	itete	lt
 80170c8:	9b05      	ldrlt	r3, [sp, #20]
 80170ca:	9d05      	ldrge	r5, [sp, #20]
 80170cc:	eba3 0509 	sublt.w	r5, r3, r9
 80170d0:	464b      	movge	r3, r9
 80170d2:	bfb8      	it	lt
 80170d4:	2300      	movlt	r3, #0
 80170d6:	e77e      	b.n	8016fd6 <_dtoa_r+0x6fe>
 80170d8:	9f07      	ldr	r7, [sp, #28]
 80170da:	9d05      	ldr	r5, [sp, #20]
 80170dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80170de:	e783      	b.n	8016fe8 <_dtoa_r+0x710>
 80170e0:	9a07      	ldr	r2, [sp, #28]
 80170e2:	e7ab      	b.n	801703c <_dtoa_r+0x764>
 80170e4:	2300      	movs	r3, #0
 80170e6:	e7d4      	b.n	8017092 <_dtoa_r+0x7ba>
 80170e8:	9b00      	ldr	r3, [sp, #0]
 80170ea:	e7d2      	b.n	8017092 <_dtoa_r+0x7ba>
 80170ec:	2300      	movs	r3, #0
 80170ee:	9307      	str	r3, [sp, #28]
 80170f0:	693b      	ldr	r3, [r7, #16]
 80170f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80170f6:	6918      	ldr	r0, [r3, #16]
 80170f8:	f000 fdcc 	bl	8017c94 <__hi0bits>
 80170fc:	f1c0 0020 	rsb	r0, r0, #32
 8017100:	4440      	add	r0, r8
 8017102:	f010 001f 	ands.w	r0, r0, #31
 8017106:	d047      	beq.n	8017198 <_dtoa_r+0x8c0>
 8017108:	f1c0 0320 	rsb	r3, r0, #32
 801710c:	2b04      	cmp	r3, #4
 801710e:	dd3b      	ble.n	8017188 <_dtoa_r+0x8b0>
 8017110:	9b05      	ldr	r3, [sp, #20]
 8017112:	f1c0 001c 	rsb	r0, r0, #28
 8017116:	4403      	add	r3, r0
 8017118:	9305      	str	r3, [sp, #20]
 801711a:	4405      	add	r5, r0
 801711c:	4480      	add	r8, r0
 801711e:	9b05      	ldr	r3, [sp, #20]
 8017120:	2b00      	cmp	r3, #0
 8017122:	dd05      	ble.n	8017130 <_dtoa_r+0x858>
 8017124:	461a      	mov	r2, r3
 8017126:	9904      	ldr	r1, [sp, #16]
 8017128:	4620      	mov	r0, r4
 801712a:	f000 feef 	bl	8017f0c <__lshift>
 801712e:	9004      	str	r0, [sp, #16]
 8017130:	f1b8 0f00 	cmp.w	r8, #0
 8017134:	dd05      	ble.n	8017142 <_dtoa_r+0x86a>
 8017136:	4639      	mov	r1, r7
 8017138:	4642      	mov	r2, r8
 801713a:	4620      	mov	r0, r4
 801713c:	f000 fee6 	bl	8017f0c <__lshift>
 8017140:	4607      	mov	r7, r0
 8017142:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017144:	b353      	cbz	r3, 801719c <_dtoa_r+0x8c4>
 8017146:	4639      	mov	r1, r7
 8017148:	9804      	ldr	r0, [sp, #16]
 801714a:	f000 ff33 	bl	8017fb4 <__mcmp>
 801714e:	2800      	cmp	r0, #0
 8017150:	da24      	bge.n	801719c <_dtoa_r+0x8c4>
 8017152:	2300      	movs	r3, #0
 8017154:	220a      	movs	r2, #10
 8017156:	9904      	ldr	r1, [sp, #16]
 8017158:	4620      	mov	r0, r4
 801715a:	f000 fd22 	bl	8017ba2 <__multadd>
 801715e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017160:	9004      	str	r0, [sp, #16]
 8017162:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017166:	2b00      	cmp	r3, #0
 8017168:	f000 814d 	beq.w	8017406 <_dtoa_r+0xb2e>
 801716c:	2300      	movs	r3, #0
 801716e:	4631      	mov	r1, r6
 8017170:	220a      	movs	r2, #10
 8017172:	4620      	mov	r0, r4
 8017174:	f000 fd15 	bl	8017ba2 <__multadd>
 8017178:	9b02      	ldr	r3, [sp, #8]
 801717a:	2b00      	cmp	r3, #0
 801717c:	4606      	mov	r6, r0
 801717e:	dc4f      	bgt.n	8017220 <_dtoa_r+0x948>
 8017180:	9b06      	ldr	r3, [sp, #24]
 8017182:	2b02      	cmp	r3, #2
 8017184:	dd4c      	ble.n	8017220 <_dtoa_r+0x948>
 8017186:	e011      	b.n	80171ac <_dtoa_r+0x8d4>
 8017188:	d0c9      	beq.n	801711e <_dtoa_r+0x846>
 801718a:	9a05      	ldr	r2, [sp, #20]
 801718c:	331c      	adds	r3, #28
 801718e:	441a      	add	r2, r3
 8017190:	9205      	str	r2, [sp, #20]
 8017192:	441d      	add	r5, r3
 8017194:	4498      	add	r8, r3
 8017196:	e7c2      	b.n	801711e <_dtoa_r+0x846>
 8017198:	4603      	mov	r3, r0
 801719a:	e7f6      	b.n	801718a <_dtoa_r+0x8b2>
 801719c:	f1b9 0f00 	cmp.w	r9, #0
 80171a0:	dc38      	bgt.n	8017214 <_dtoa_r+0x93c>
 80171a2:	9b06      	ldr	r3, [sp, #24]
 80171a4:	2b02      	cmp	r3, #2
 80171a6:	dd35      	ble.n	8017214 <_dtoa_r+0x93c>
 80171a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80171ac:	9b02      	ldr	r3, [sp, #8]
 80171ae:	b963      	cbnz	r3, 80171ca <_dtoa_r+0x8f2>
 80171b0:	4639      	mov	r1, r7
 80171b2:	2205      	movs	r2, #5
 80171b4:	4620      	mov	r0, r4
 80171b6:	f000 fcf4 	bl	8017ba2 <__multadd>
 80171ba:	4601      	mov	r1, r0
 80171bc:	4607      	mov	r7, r0
 80171be:	9804      	ldr	r0, [sp, #16]
 80171c0:	f000 fef8 	bl	8017fb4 <__mcmp>
 80171c4:	2800      	cmp	r0, #0
 80171c6:	f73f adcc 	bgt.w	8016d62 <_dtoa_r+0x48a>
 80171ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80171cc:	465d      	mov	r5, fp
 80171ce:	ea6f 0a03 	mvn.w	sl, r3
 80171d2:	f04f 0900 	mov.w	r9, #0
 80171d6:	4639      	mov	r1, r7
 80171d8:	4620      	mov	r0, r4
 80171da:	f000 fccb 	bl	8017b74 <_Bfree>
 80171de:	2e00      	cmp	r6, #0
 80171e0:	f43f aeb7 	beq.w	8016f52 <_dtoa_r+0x67a>
 80171e4:	f1b9 0f00 	cmp.w	r9, #0
 80171e8:	d005      	beq.n	80171f6 <_dtoa_r+0x91e>
 80171ea:	45b1      	cmp	r9, r6
 80171ec:	d003      	beq.n	80171f6 <_dtoa_r+0x91e>
 80171ee:	4649      	mov	r1, r9
 80171f0:	4620      	mov	r0, r4
 80171f2:	f000 fcbf 	bl	8017b74 <_Bfree>
 80171f6:	4631      	mov	r1, r6
 80171f8:	4620      	mov	r0, r4
 80171fa:	f000 fcbb 	bl	8017b74 <_Bfree>
 80171fe:	e6a8      	b.n	8016f52 <_dtoa_r+0x67a>
 8017200:	2700      	movs	r7, #0
 8017202:	463e      	mov	r6, r7
 8017204:	e7e1      	b.n	80171ca <_dtoa_r+0x8f2>
 8017206:	f8dd a020 	ldr.w	sl, [sp, #32]
 801720a:	463e      	mov	r6, r7
 801720c:	e5a9      	b.n	8016d62 <_dtoa_r+0x48a>
 801720e:	bf00      	nop
 8017210:	40240000 	.word	0x40240000
 8017214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017216:	f8cd 9008 	str.w	r9, [sp, #8]
 801721a:	2b00      	cmp	r3, #0
 801721c:	f000 80fa 	beq.w	8017414 <_dtoa_r+0xb3c>
 8017220:	2d00      	cmp	r5, #0
 8017222:	dd05      	ble.n	8017230 <_dtoa_r+0x958>
 8017224:	4631      	mov	r1, r6
 8017226:	462a      	mov	r2, r5
 8017228:	4620      	mov	r0, r4
 801722a:	f000 fe6f 	bl	8017f0c <__lshift>
 801722e:	4606      	mov	r6, r0
 8017230:	9b07      	ldr	r3, [sp, #28]
 8017232:	2b00      	cmp	r3, #0
 8017234:	d04c      	beq.n	80172d0 <_dtoa_r+0x9f8>
 8017236:	6871      	ldr	r1, [r6, #4]
 8017238:	4620      	mov	r0, r4
 801723a:	f000 fc67 	bl	8017b0c <_Balloc>
 801723e:	6932      	ldr	r2, [r6, #16]
 8017240:	3202      	adds	r2, #2
 8017242:	4605      	mov	r5, r0
 8017244:	0092      	lsls	r2, r2, #2
 8017246:	f106 010c 	add.w	r1, r6, #12
 801724a:	300c      	adds	r0, #12
 801724c:	f7fd fd08 	bl	8014c60 <memcpy>
 8017250:	2201      	movs	r2, #1
 8017252:	4629      	mov	r1, r5
 8017254:	4620      	mov	r0, r4
 8017256:	f000 fe59 	bl	8017f0c <__lshift>
 801725a:	9b00      	ldr	r3, [sp, #0]
 801725c:	f8cd b014 	str.w	fp, [sp, #20]
 8017260:	f003 0301 	and.w	r3, r3, #1
 8017264:	46b1      	mov	r9, r6
 8017266:	9307      	str	r3, [sp, #28]
 8017268:	4606      	mov	r6, r0
 801726a:	4639      	mov	r1, r7
 801726c:	9804      	ldr	r0, [sp, #16]
 801726e:	f7ff faa5 	bl	80167bc <quorem>
 8017272:	4649      	mov	r1, r9
 8017274:	4605      	mov	r5, r0
 8017276:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801727a:	9804      	ldr	r0, [sp, #16]
 801727c:	f000 fe9a 	bl	8017fb4 <__mcmp>
 8017280:	4632      	mov	r2, r6
 8017282:	9000      	str	r0, [sp, #0]
 8017284:	4639      	mov	r1, r7
 8017286:	4620      	mov	r0, r4
 8017288:	f000 feae 	bl	8017fe8 <__mdiff>
 801728c:	68c3      	ldr	r3, [r0, #12]
 801728e:	4602      	mov	r2, r0
 8017290:	bb03      	cbnz	r3, 80172d4 <_dtoa_r+0x9fc>
 8017292:	4601      	mov	r1, r0
 8017294:	9008      	str	r0, [sp, #32]
 8017296:	9804      	ldr	r0, [sp, #16]
 8017298:	f000 fe8c 	bl	8017fb4 <__mcmp>
 801729c:	9a08      	ldr	r2, [sp, #32]
 801729e:	4603      	mov	r3, r0
 80172a0:	4611      	mov	r1, r2
 80172a2:	4620      	mov	r0, r4
 80172a4:	9308      	str	r3, [sp, #32]
 80172a6:	f000 fc65 	bl	8017b74 <_Bfree>
 80172aa:	9b08      	ldr	r3, [sp, #32]
 80172ac:	b9a3      	cbnz	r3, 80172d8 <_dtoa_r+0xa00>
 80172ae:	9a06      	ldr	r2, [sp, #24]
 80172b0:	b992      	cbnz	r2, 80172d8 <_dtoa_r+0xa00>
 80172b2:	9a07      	ldr	r2, [sp, #28]
 80172b4:	b982      	cbnz	r2, 80172d8 <_dtoa_r+0xa00>
 80172b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80172ba:	d029      	beq.n	8017310 <_dtoa_r+0xa38>
 80172bc:	9b00      	ldr	r3, [sp, #0]
 80172be:	2b00      	cmp	r3, #0
 80172c0:	dd01      	ble.n	80172c6 <_dtoa_r+0x9ee>
 80172c2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80172c6:	9b05      	ldr	r3, [sp, #20]
 80172c8:	1c5d      	adds	r5, r3, #1
 80172ca:	f883 8000 	strb.w	r8, [r3]
 80172ce:	e782      	b.n	80171d6 <_dtoa_r+0x8fe>
 80172d0:	4630      	mov	r0, r6
 80172d2:	e7c2      	b.n	801725a <_dtoa_r+0x982>
 80172d4:	2301      	movs	r3, #1
 80172d6:	e7e3      	b.n	80172a0 <_dtoa_r+0x9c8>
 80172d8:	9a00      	ldr	r2, [sp, #0]
 80172da:	2a00      	cmp	r2, #0
 80172dc:	db04      	blt.n	80172e8 <_dtoa_r+0xa10>
 80172de:	d125      	bne.n	801732c <_dtoa_r+0xa54>
 80172e0:	9a06      	ldr	r2, [sp, #24]
 80172e2:	bb1a      	cbnz	r2, 801732c <_dtoa_r+0xa54>
 80172e4:	9a07      	ldr	r2, [sp, #28]
 80172e6:	bb0a      	cbnz	r2, 801732c <_dtoa_r+0xa54>
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	ddec      	ble.n	80172c6 <_dtoa_r+0x9ee>
 80172ec:	2201      	movs	r2, #1
 80172ee:	9904      	ldr	r1, [sp, #16]
 80172f0:	4620      	mov	r0, r4
 80172f2:	f000 fe0b 	bl	8017f0c <__lshift>
 80172f6:	4639      	mov	r1, r7
 80172f8:	9004      	str	r0, [sp, #16]
 80172fa:	f000 fe5b 	bl	8017fb4 <__mcmp>
 80172fe:	2800      	cmp	r0, #0
 8017300:	dc03      	bgt.n	801730a <_dtoa_r+0xa32>
 8017302:	d1e0      	bne.n	80172c6 <_dtoa_r+0x9ee>
 8017304:	f018 0f01 	tst.w	r8, #1
 8017308:	d0dd      	beq.n	80172c6 <_dtoa_r+0x9ee>
 801730a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801730e:	d1d8      	bne.n	80172c2 <_dtoa_r+0x9ea>
 8017310:	9b05      	ldr	r3, [sp, #20]
 8017312:	9a05      	ldr	r2, [sp, #20]
 8017314:	1c5d      	adds	r5, r3, #1
 8017316:	2339      	movs	r3, #57	; 0x39
 8017318:	7013      	strb	r3, [r2, #0]
 801731a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801731e:	2b39      	cmp	r3, #57	; 0x39
 8017320:	f105 32ff 	add.w	r2, r5, #4294967295
 8017324:	d04f      	beq.n	80173c6 <_dtoa_r+0xaee>
 8017326:	3301      	adds	r3, #1
 8017328:	7013      	strb	r3, [r2, #0]
 801732a:	e754      	b.n	80171d6 <_dtoa_r+0x8fe>
 801732c:	9a05      	ldr	r2, [sp, #20]
 801732e:	2b00      	cmp	r3, #0
 8017330:	f102 0501 	add.w	r5, r2, #1
 8017334:	dd06      	ble.n	8017344 <_dtoa_r+0xa6c>
 8017336:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801733a:	d0e9      	beq.n	8017310 <_dtoa_r+0xa38>
 801733c:	f108 0801 	add.w	r8, r8, #1
 8017340:	9b05      	ldr	r3, [sp, #20]
 8017342:	e7c2      	b.n	80172ca <_dtoa_r+0x9f2>
 8017344:	9a02      	ldr	r2, [sp, #8]
 8017346:	f805 8c01 	strb.w	r8, [r5, #-1]
 801734a:	eba5 030b 	sub.w	r3, r5, fp
 801734e:	4293      	cmp	r3, r2
 8017350:	d021      	beq.n	8017396 <_dtoa_r+0xabe>
 8017352:	2300      	movs	r3, #0
 8017354:	220a      	movs	r2, #10
 8017356:	9904      	ldr	r1, [sp, #16]
 8017358:	4620      	mov	r0, r4
 801735a:	f000 fc22 	bl	8017ba2 <__multadd>
 801735e:	45b1      	cmp	r9, r6
 8017360:	9004      	str	r0, [sp, #16]
 8017362:	f04f 0300 	mov.w	r3, #0
 8017366:	f04f 020a 	mov.w	r2, #10
 801736a:	4649      	mov	r1, r9
 801736c:	4620      	mov	r0, r4
 801736e:	d105      	bne.n	801737c <_dtoa_r+0xaa4>
 8017370:	f000 fc17 	bl	8017ba2 <__multadd>
 8017374:	4681      	mov	r9, r0
 8017376:	4606      	mov	r6, r0
 8017378:	9505      	str	r5, [sp, #20]
 801737a:	e776      	b.n	801726a <_dtoa_r+0x992>
 801737c:	f000 fc11 	bl	8017ba2 <__multadd>
 8017380:	4631      	mov	r1, r6
 8017382:	4681      	mov	r9, r0
 8017384:	2300      	movs	r3, #0
 8017386:	220a      	movs	r2, #10
 8017388:	4620      	mov	r0, r4
 801738a:	f000 fc0a 	bl	8017ba2 <__multadd>
 801738e:	4606      	mov	r6, r0
 8017390:	e7f2      	b.n	8017378 <_dtoa_r+0xaa0>
 8017392:	f04f 0900 	mov.w	r9, #0
 8017396:	2201      	movs	r2, #1
 8017398:	9904      	ldr	r1, [sp, #16]
 801739a:	4620      	mov	r0, r4
 801739c:	f000 fdb6 	bl	8017f0c <__lshift>
 80173a0:	4639      	mov	r1, r7
 80173a2:	9004      	str	r0, [sp, #16]
 80173a4:	f000 fe06 	bl	8017fb4 <__mcmp>
 80173a8:	2800      	cmp	r0, #0
 80173aa:	dcb6      	bgt.n	801731a <_dtoa_r+0xa42>
 80173ac:	d102      	bne.n	80173b4 <_dtoa_r+0xadc>
 80173ae:	f018 0f01 	tst.w	r8, #1
 80173b2:	d1b2      	bne.n	801731a <_dtoa_r+0xa42>
 80173b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80173b8:	2b30      	cmp	r3, #48	; 0x30
 80173ba:	f105 32ff 	add.w	r2, r5, #4294967295
 80173be:	f47f af0a 	bne.w	80171d6 <_dtoa_r+0x8fe>
 80173c2:	4615      	mov	r5, r2
 80173c4:	e7f6      	b.n	80173b4 <_dtoa_r+0xadc>
 80173c6:	4593      	cmp	fp, r2
 80173c8:	d105      	bne.n	80173d6 <_dtoa_r+0xafe>
 80173ca:	2331      	movs	r3, #49	; 0x31
 80173cc:	f10a 0a01 	add.w	sl, sl, #1
 80173d0:	f88b 3000 	strb.w	r3, [fp]
 80173d4:	e6ff      	b.n	80171d6 <_dtoa_r+0x8fe>
 80173d6:	4615      	mov	r5, r2
 80173d8:	e79f      	b.n	801731a <_dtoa_r+0xa42>
 80173da:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017440 <_dtoa_r+0xb68>
 80173de:	e007      	b.n	80173f0 <_dtoa_r+0xb18>
 80173e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80173e2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8017444 <_dtoa_r+0xb6c>
 80173e6:	b11b      	cbz	r3, 80173f0 <_dtoa_r+0xb18>
 80173e8:	f10b 0308 	add.w	r3, fp, #8
 80173ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80173ee:	6013      	str	r3, [r2, #0]
 80173f0:	4658      	mov	r0, fp
 80173f2:	b017      	add	sp, #92	; 0x5c
 80173f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173f8:	9b06      	ldr	r3, [sp, #24]
 80173fa:	2b01      	cmp	r3, #1
 80173fc:	f77f ae35 	ble.w	801706a <_dtoa_r+0x792>
 8017400:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017402:	9307      	str	r3, [sp, #28]
 8017404:	e649      	b.n	801709a <_dtoa_r+0x7c2>
 8017406:	9b02      	ldr	r3, [sp, #8]
 8017408:	2b00      	cmp	r3, #0
 801740a:	dc03      	bgt.n	8017414 <_dtoa_r+0xb3c>
 801740c:	9b06      	ldr	r3, [sp, #24]
 801740e:	2b02      	cmp	r3, #2
 8017410:	f73f aecc 	bgt.w	80171ac <_dtoa_r+0x8d4>
 8017414:	465d      	mov	r5, fp
 8017416:	4639      	mov	r1, r7
 8017418:	9804      	ldr	r0, [sp, #16]
 801741a:	f7ff f9cf 	bl	80167bc <quorem>
 801741e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017422:	f805 8b01 	strb.w	r8, [r5], #1
 8017426:	9a02      	ldr	r2, [sp, #8]
 8017428:	eba5 030b 	sub.w	r3, r5, fp
 801742c:	429a      	cmp	r2, r3
 801742e:	ddb0      	ble.n	8017392 <_dtoa_r+0xaba>
 8017430:	2300      	movs	r3, #0
 8017432:	220a      	movs	r2, #10
 8017434:	9904      	ldr	r1, [sp, #16]
 8017436:	4620      	mov	r0, r4
 8017438:	f000 fbb3 	bl	8017ba2 <__multadd>
 801743c:	9004      	str	r0, [sp, #16]
 801743e:	e7ea      	b.n	8017416 <_dtoa_r+0xb3e>
 8017440:	08019ac3 	.word	0x08019ac3
 8017444:	08019920 	.word	0x08019920

08017448 <rshift>:
 8017448:	b5f0      	push	{r4, r5, r6, r7, lr}
 801744a:	6906      	ldr	r6, [r0, #16]
 801744c:	114b      	asrs	r3, r1, #5
 801744e:	429e      	cmp	r6, r3
 8017450:	f100 0414 	add.w	r4, r0, #20
 8017454:	dd30      	ble.n	80174b8 <rshift+0x70>
 8017456:	f011 011f 	ands.w	r1, r1, #31
 801745a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801745e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8017462:	d108      	bne.n	8017476 <rshift+0x2e>
 8017464:	4621      	mov	r1, r4
 8017466:	42b2      	cmp	r2, r6
 8017468:	460b      	mov	r3, r1
 801746a:	d211      	bcs.n	8017490 <rshift+0x48>
 801746c:	f852 3b04 	ldr.w	r3, [r2], #4
 8017470:	f841 3b04 	str.w	r3, [r1], #4
 8017474:	e7f7      	b.n	8017466 <rshift+0x1e>
 8017476:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801747a:	f1c1 0c20 	rsb	ip, r1, #32
 801747e:	40cd      	lsrs	r5, r1
 8017480:	3204      	adds	r2, #4
 8017482:	4623      	mov	r3, r4
 8017484:	42b2      	cmp	r2, r6
 8017486:	4617      	mov	r7, r2
 8017488:	d30c      	bcc.n	80174a4 <rshift+0x5c>
 801748a:	601d      	str	r5, [r3, #0]
 801748c:	b105      	cbz	r5, 8017490 <rshift+0x48>
 801748e:	3304      	adds	r3, #4
 8017490:	1b1a      	subs	r2, r3, r4
 8017492:	42a3      	cmp	r3, r4
 8017494:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017498:	bf08      	it	eq
 801749a:	2300      	moveq	r3, #0
 801749c:	6102      	str	r2, [r0, #16]
 801749e:	bf08      	it	eq
 80174a0:	6143      	streq	r3, [r0, #20]
 80174a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174a4:	683f      	ldr	r7, [r7, #0]
 80174a6:	fa07 f70c 	lsl.w	r7, r7, ip
 80174aa:	433d      	orrs	r5, r7
 80174ac:	f843 5b04 	str.w	r5, [r3], #4
 80174b0:	f852 5b04 	ldr.w	r5, [r2], #4
 80174b4:	40cd      	lsrs	r5, r1
 80174b6:	e7e5      	b.n	8017484 <rshift+0x3c>
 80174b8:	4623      	mov	r3, r4
 80174ba:	e7e9      	b.n	8017490 <rshift+0x48>

080174bc <__hexdig_fun>:
 80174bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80174c0:	2b09      	cmp	r3, #9
 80174c2:	d802      	bhi.n	80174ca <__hexdig_fun+0xe>
 80174c4:	3820      	subs	r0, #32
 80174c6:	b2c0      	uxtb	r0, r0
 80174c8:	4770      	bx	lr
 80174ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80174ce:	2b05      	cmp	r3, #5
 80174d0:	d801      	bhi.n	80174d6 <__hexdig_fun+0x1a>
 80174d2:	3847      	subs	r0, #71	; 0x47
 80174d4:	e7f7      	b.n	80174c6 <__hexdig_fun+0xa>
 80174d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80174da:	2b05      	cmp	r3, #5
 80174dc:	d801      	bhi.n	80174e2 <__hexdig_fun+0x26>
 80174de:	3827      	subs	r0, #39	; 0x27
 80174e0:	e7f1      	b.n	80174c6 <__hexdig_fun+0xa>
 80174e2:	2000      	movs	r0, #0
 80174e4:	4770      	bx	lr

080174e6 <__gethex>:
 80174e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174ea:	b08b      	sub	sp, #44	; 0x2c
 80174ec:	468a      	mov	sl, r1
 80174ee:	9002      	str	r0, [sp, #8]
 80174f0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80174f2:	9306      	str	r3, [sp, #24]
 80174f4:	4690      	mov	r8, r2
 80174f6:	f000 fadf 	bl	8017ab8 <__localeconv_l>
 80174fa:	6803      	ldr	r3, [r0, #0]
 80174fc:	9303      	str	r3, [sp, #12]
 80174fe:	4618      	mov	r0, r3
 8017500:	f7e8 fe7e 	bl	8000200 <strlen>
 8017504:	9b03      	ldr	r3, [sp, #12]
 8017506:	9001      	str	r0, [sp, #4]
 8017508:	4403      	add	r3, r0
 801750a:	f04f 0b00 	mov.w	fp, #0
 801750e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017512:	9307      	str	r3, [sp, #28]
 8017514:	f8da 3000 	ldr.w	r3, [sl]
 8017518:	3302      	adds	r3, #2
 801751a:	461f      	mov	r7, r3
 801751c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017520:	2830      	cmp	r0, #48	; 0x30
 8017522:	d06c      	beq.n	80175fe <__gethex+0x118>
 8017524:	f7ff ffca 	bl	80174bc <__hexdig_fun>
 8017528:	4604      	mov	r4, r0
 801752a:	2800      	cmp	r0, #0
 801752c:	d16a      	bne.n	8017604 <__gethex+0x11e>
 801752e:	9a01      	ldr	r2, [sp, #4]
 8017530:	9903      	ldr	r1, [sp, #12]
 8017532:	4638      	mov	r0, r7
 8017534:	f001 fc36 	bl	8018da4 <strncmp>
 8017538:	2800      	cmp	r0, #0
 801753a:	d166      	bne.n	801760a <__gethex+0x124>
 801753c:	9b01      	ldr	r3, [sp, #4]
 801753e:	5cf8      	ldrb	r0, [r7, r3]
 8017540:	18fe      	adds	r6, r7, r3
 8017542:	f7ff ffbb 	bl	80174bc <__hexdig_fun>
 8017546:	2800      	cmp	r0, #0
 8017548:	d062      	beq.n	8017610 <__gethex+0x12a>
 801754a:	4633      	mov	r3, r6
 801754c:	7818      	ldrb	r0, [r3, #0]
 801754e:	2830      	cmp	r0, #48	; 0x30
 8017550:	461f      	mov	r7, r3
 8017552:	f103 0301 	add.w	r3, r3, #1
 8017556:	d0f9      	beq.n	801754c <__gethex+0x66>
 8017558:	f7ff ffb0 	bl	80174bc <__hexdig_fun>
 801755c:	fab0 f580 	clz	r5, r0
 8017560:	096d      	lsrs	r5, r5, #5
 8017562:	4634      	mov	r4, r6
 8017564:	f04f 0b01 	mov.w	fp, #1
 8017568:	463a      	mov	r2, r7
 801756a:	4616      	mov	r6, r2
 801756c:	3201      	adds	r2, #1
 801756e:	7830      	ldrb	r0, [r6, #0]
 8017570:	f7ff ffa4 	bl	80174bc <__hexdig_fun>
 8017574:	2800      	cmp	r0, #0
 8017576:	d1f8      	bne.n	801756a <__gethex+0x84>
 8017578:	9a01      	ldr	r2, [sp, #4]
 801757a:	9903      	ldr	r1, [sp, #12]
 801757c:	4630      	mov	r0, r6
 801757e:	f001 fc11 	bl	8018da4 <strncmp>
 8017582:	b950      	cbnz	r0, 801759a <__gethex+0xb4>
 8017584:	b954      	cbnz	r4, 801759c <__gethex+0xb6>
 8017586:	9b01      	ldr	r3, [sp, #4]
 8017588:	18f4      	adds	r4, r6, r3
 801758a:	4622      	mov	r2, r4
 801758c:	4616      	mov	r6, r2
 801758e:	3201      	adds	r2, #1
 8017590:	7830      	ldrb	r0, [r6, #0]
 8017592:	f7ff ff93 	bl	80174bc <__hexdig_fun>
 8017596:	2800      	cmp	r0, #0
 8017598:	d1f8      	bne.n	801758c <__gethex+0xa6>
 801759a:	b10c      	cbz	r4, 80175a0 <__gethex+0xba>
 801759c:	1ba4      	subs	r4, r4, r6
 801759e:	00a4      	lsls	r4, r4, #2
 80175a0:	7833      	ldrb	r3, [r6, #0]
 80175a2:	2b50      	cmp	r3, #80	; 0x50
 80175a4:	d001      	beq.n	80175aa <__gethex+0xc4>
 80175a6:	2b70      	cmp	r3, #112	; 0x70
 80175a8:	d140      	bne.n	801762c <__gethex+0x146>
 80175aa:	7873      	ldrb	r3, [r6, #1]
 80175ac:	2b2b      	cmp	r3, #43	; 0x2b
 80175ae:	d031      	beq.n	8017614 <__gethex+0x12e>
 80175b0:	2b2d      	cmp	r3, #45	; 0x2d
 80175b2:	d033      	beq.n	801761c <__gethex+0x136>
 80175b4:	1c71      	adds	r1, r6, #1
 80175b6:	f04f 0900 	mov.w	r9, #0
 80175ba:	7808      	ldrb	r0, [r1, #0]
 80175bc:	f7ff ff7e 	bl	80174bc <__hexdig_fun>
 80175c0:	1e43      	subs	r3, r0, #1
 80175c2:	b2db      	uxtb	r3, r3
 80175c4:	2b18      	cmp	r3, #24
 80175c6:	d831      	bhi.n	801762c <__gethex+0x146>
 80175c8:	f1a0 0210 	sub.w	r2, r0, #16
 80175cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80175d0:	f7ff ff74 	bl	80174bc <__hexdig_fun>
 80175d4:	1e43      	subs	r3, r0, #1
 80175d6:	b2db      	uxtb	r3, r3
 80175d8:	2b18      	cmp	r3, #24
 80175da:	d922      	bls.n	8017622 <__gethex+0x13c>
 80175dc:	f1b9 0f00 	cmp.w	r9, #0
 80175e0:	d000      	beq.n	80175e4 <__gethex+0xfe>
 80175e2:	4252      	negs	r2, r2
 80175e4:	4414      	add	r4, r2
 80175e6:	f8ca 1000 	str.w	r1, [sl]
 80175ea:	b30d      	cbz	r5, 8017630 <__gethex+0x14a>
 80175ec:	f1bb 0f00 	cmp.w	fp, #0
 80175f0:	bf0c      	ite	eq
 80175f2:	2706      	moveq	r7, #6
 80175f4:	2700      	movne	r7, #0
 80175f6:	4638      	mov	r0, r7
 80175f8:	b00b      	add	sp, #44	; 0x2c
 80175fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175fe:	f10b 0b01 	add.w	fp, fp, #1
 8017602:	e78a      	b.n	801751a <__gethex+0x34>
 8017604:	2500      	movs	r5, #0
 8017606:	462c      	mov	r4, r5
 8017608:	e7ae      	b.n	8017568 <__gethex+0x82>
 801760a:	463e      	mov	r6, r7
 801760c:	2501      	movs	r5, #1
 801760e:	e7c7      	b.n	80175a0 <__gethex+0xba>
 8017610:	4604      	mov	r4, r0
 8017612:	e7fb      	b.n	801760c <__gethex+0x126>
 8017614:	f04f 0900 	mov.w	r9, #0
 8017618:	1cb1      	adds	r1, r6, #2
 801761a:	e7ce      	b.n	80175ba <__gethex+0xd4>
 801761c:	f04f 0901 	mov.w	r9, #1
 8017620:	e7fa      	b.n	8017618 <__gethex+0x132>
 8017622:	230a      	movs	r3, #10
 8017624:	fb03 0202 	mla	r2, r3, r2, r0
 8017628:	3a10      	subs	r2, #16
 801762a:	e7cf      	b.n	80175cc <__gethex+0xe6>
 801762c:	4631      	mov	r1, r6
 801762e:	e7da      	b.n	80175e6 <__gethex+0x100>
 8017630:	1bf3      	subs	r3, r6, r7
 8017632:	3b01      	subs	r3, #1
 8017634:	4629      	mov	r1, r5
 8017636:	2b07      	cmp	r3, #7
 8017638:	dc49      	bgt.n	80176ce <__gethex+0x1e8>
 801763a:	9802      	ldr	r0, [sp, #8]
 801763c:	f000 fa66 	bl	8017b0c <_Balloc>
 8017640:	9b01      	ldr	r3, [sp, #4]
 8017642:	f100 0914 	add.w	r9, r0, #20
 8017646:	f04f 0b00 	mov.w	fp, #0
 801764a:	f1c3 0301 	rsb	r3, r3, #1
 801764e:	4605      	mov	r5, r0
 8017650:	f8cd 9010 	str.w	r9, [sp, #16]
 8017654:	46da      	mov	sl, fp
 8017656:	9308      	str	r3, [sp, #32]
 8017658:	42b7      	cmp	r7, r6
 801765a:	d33b      	bcc.n	80176d4 <__gethex+0x1ee>
 801765c:	9804      	ldr	r0, [sp, #16]
 801765e:	f840 ab04 	str.w	sl, [r0], #4
 8017662:	eba0 0009 	sub.w	r0, r0, r9
 8017666:	1080      	asrs	r0, r0, #2
 8017668:	6128      	str	r0, [r5, #16]
 801766a:	0147      	lsls	r7, r0, #5
 801766c:	4650      	mov	r0, sl
 801766e:	f000 fb11 	bl	8017c94 <__hi0bits>
 8017672:	f8d8 6000 	ldr.w	r6, [r8]
 8017676:	1a3f      	subs	r7, r7, r0
 8017678:	42b7      	cmp	r7, r6
 801767a:	dd64      	ble.n	8017746 <__gethex+0x260>
 801767c:	1bbf      	subs	r7, r7, r6
 801767e:	4639      	mov	r1, r7
 8017680:	4628      	mov	r0, r5
 8017682:	f000 fe21 	bl	80182c8 <__any_on>
 8017686:	4682      	mov	sl, r0
 8017688:	b178      	cbz	r0, 80176aa <__gethex+0x1c4>
 801768a:	1e7b      	subs	r3, r7, #1
 801768c:	1159      	asrs	r1, r3, #5
 801768e:	f003 021f 	and.w	r2, r3, #31
 8017692:	f04f 0a01 	mov.w	sl, #1
 8017696:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801769a:	fa0a f202 	lsl.w	r2, sl, r2
 801769e:	420a      	tst	r2, r1
 80176a0:	d003      	beq.n	80176aa <__gethex+0x1c4>
 80176a2:	4553      	cmp	r3, sl
 80176a4:	dc46      	bgt.n	8017734 <__gethex+0x24e>
 80176a6:	f04f 0a02 	mov.w	sl, #2
 80176aa:	4639      	mov	r1, r7
 80176ac:	4628      	mov	r0, r5
 80176ae:	f7ff fecb 	bl	8017448 <rshift>
 80176b2:	443c      	add	r4, r7
 80176b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80176b8:	42a3      	cmp	r3, r4
 80176ba:	da52      	bge.n	8017762 <__gethex+0x27c>
 80176bc:	4629      	mov	r1, r5
 80176be:	9802      	ldr	r0, [sp, #8]
 80176c0:	f000 fa58 	bl	8017b74 <_Bfree>
 80176c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80176c6:	2300      	movs	r3, #0
 80176c8:	6013      	str	r3, [r2, #0]
 80176ca:	27a3      	movs	r7, #163	; 0xa3
 80176cc:	e793      	b.n	80175f6 <__gethex+0x110>
 80176ce:	3101      	adds	r1, #1
 80176d0:	105b      	asrs	r3, r3, #1
 80176d2:	e7b0      	b.n	8017636 <__gethex+0x150>
 80176d4:	1e73      	subs	r3, r6, #1
 80176d6:	9305      	str	r3, [sp, #20]
 80176d8:	9a07      	ldr	r2, [sp, #28]
 80176da:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80176de:	4293      	cmp	r3, r2
 80176e0:	d018      	beq.n	8017714 <__gethex+0x22e>
 80176e2:	f1bb 0f20 	cmp.w	fp, #32
 80176e6:	d107      	bne.n	80176f8 <__gethex+0x212>
 80176e8:	9b04      	ldr	r3, [sp, #16]
 80176ea:	f8c3 a000 	str.w	sl, [r3]
 80176ee:	3304      	adds	r3, #4
 80176f0:	f04f 0a00 	mov.w	sl, #0
 80176f4:	9304      	str	r3, [sp, #16]
 80176f6:	46d3      	mov	fp, sl
 80176f8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80176fc:	f7ff fede 	bl	80174bc <__hexdig_fun>
 8017700:	f000 000f 	and.w	r0, r0, #15
 8017704:	fa00 f00b 	lsl.w	r0, r0, fp
 8017708:	ea4a 0a00 	orr.w	sl, sl, r0
 801770c:	f10b 0b04 	add.w	fp, fp, #4
 8017710:	9b05      	ldr	r3, [sp, #20]
 8017712:	e00d      	b.n	8017730 <__gethex+0x24a>
 8017714:	9b05      	ldr	r3, [sp, #20]
 8017716:	9a08      	ldr	r2, [sp, #32]
 8017718:	4413      	add	r3, r2
 801771a:	42bb      	cmp	r3, r7
 801771c:	d3e1      	bcc.n	80176e2 <__gethex+0x1fc>
 801771e:	4618      	mov	r0, r3
 8017720:	9a01      	ldr	r2, [sp, #4]
 8017722:	9903      	ldr	r1, [sp, #12]
 8017724:	9309      	str	r3, [sp, #36]	; 0x24
 8017726:	f001 fb3d 	bl	8018da4 <strncmp>
 801772a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801772c:	2800      	cmp	r0, #0
 801772e:	d1d8      	bne.n	80176e2 <__gethex+0x1fc>
 8017730:	461e      	mov	r6, r3
 8017732:	e791      	b.n	8017658 <__gethex+0x172>
 8017734:	1eb9      	subs	r1, r7, #2
 8017736:	4628      	mov	r0, r5
 8017738:	f000 fdc6 	bl	80182c8 <__any_on>
 801773c:	2800      	cmp	r0, #0
 801773e:	d0b2      	beq.n	80176a6 <__gethex+0x1c0>
 8017740:	f04f 0a03 	mov.w	sl, #3
 8017744:	e7b1      	b.n	80176aa <__gethex+0x1c4>
 8017746:	da09      	bge.n	801775c <__gethex+0x276>
 8017748:	1bf7      	subs	r7, r6, r7
 801774a:	4629      	mov	r1, r5
 801774c:	463a      	mov	r2, r7
 801774e:	9802      	ldr	r0, [sp, #8]
 8017750:	f000 fbdc 	bl	8017f0c <__lshift>
 8017754:	1be4      	subs	r4, r4, r7
 8017756:	4605      	mov	r5, r0
 8017758:	f100 0914 	add.w	r9, r0, #20
 801775c:	f04f 0a00 	mov.w	sl, #0
 8017760:	e7a8      	b.n	80176b4 <__gethex+0x1ce>
 8017762:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017766:	42a0      	cmp	r0, r4
 8017768:	dd6a      	ble.n	8017840 <__gethex+0x35a>
 801776a:	1b04      	subs	r4, r0, r4
 801776c:	42a6      	cmp	r6, r4
 801776e:	dc2e      	bgt.n	80177ce <__gethex+0x2e8>
 8017770:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017774:	2b02      	cmp	r3, #2
 8017776:	d022      	beq.n	80177be <__gethex+0x2d8>
 8017778:	2b03      	cmp	r3, #3
 801777a:	d024      	beq.n	80177c6 <__gethex+0x2e0>
 801777c:	2b01      	cmp	r3, #1
 801777e:	d115      	bne.n	80177ac <__gethex+0x2c6>
 8017780:	42a6      	cmp	r6, r4
 8017782:	d113      	bne.n	80177ac <__gethex+0x2c6>
 8017784:	2e01      	cmp	r6, #1
 8017786:	dc0b      	bgt.n	80177a0 <__gethex+0x2ba>
 8017788:	9a06      	ldr	r2, [sp, #24]
 801778a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801778e:	6013      	str	r3, [r2, #0]
 8017790:	2301      	movs	r3, #1
 8017792:	612b      	str	r3, [r5, #16]
 8017794:	f8c9 3000 	str.w	r3, [r9]
 8017798:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801779a:	2762      	movs	r7, #98	; 0x62
 801779c:	601d      	str	r5, [r3, #0]
 801779e:	e72a      	b.n	80175f6 <__gethex+0x110>
 80177a0:	1e71      	subs	r1, r6, #1
 80177a2:	4628      	mov	r0, r5
 80177a4:	f000 fd90 	bl	80182c8 <__any_on>
 80177a8:	2800      	cmp	r0, #0
 80177aa:	d1ed      	bne.n	8017788 <__gethex+0x2a2>
 80177ac:	4629      	mov	r1, r5
 80177ae:	9802      	ldr	r0, [sp, #8]
 80177b0:	f000 f9e0 	bl	8017b74 <_Bfree>
 80177b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80177b6:	2300      	movs	r3, #0
 80177b8:	6013      	str	r3, [r2, #0]
 80177ba:	2750      	movs	r7, #80	; 0x50
 80177bc:	e71b      	b.n	80175f6 <__gethex+0x110>
 80177be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d0e1      	beq.n	8017788 <__gethex+0x2a2>
 80177c4:	e7f2      	b.n	80177ac <__gethex+0x2c6>
 80177c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d1dd      	bne.n	8017788 <__gethex+0x2a2>
 80177cc:	e7ee      	b.n	80177ac <__gethex+0x2c6>
 80177ce:	1e67      	subs	r7, r4, #1
 80177d0:	f1ba 0f00 	cmp.w	sl, #0
 80177d4:	d131      	bne.n	801783a <__gethex+0x354>
 80177d6:	b127      	cbz	r7, 80177e2 <__gethex+0x2fc>
 80177d8:	4639      	mov	r1, r7
 80177da:	4628      	mov	r0, r5
 80177dc:	f000 fd74 	bl	80182c8 <__any_on>
 80177e0:	4682      	mov	sl, r0
 80177e2:	117a      	asrs	r2, r7, #5
 80177e4:	2301      	movs	r3, #1
 80177e6:	f007 071f 	and.w	r7, r7, #31
 80177ea:	fa03 f707 	lsl.w	r7, r3, r7
 80177ee:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80177f2:	4621      	mov	r1, r4
 80177f4:	421f      	tst	r7, r3
 80177f6:	4628      	mov	r0, r5
 80177f8:	bf18      	it	ne
 80177fa:	f04a 0a02 	orrne.w	sl, sl, #2
 80177fe:	1b36      	subs	r6, r6, r4
 8017800:	f7ff fe22 	bl	8017448 <rshift>
 8017804:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017808:	2702      	movs	r7, #2
 801780a:	f1ba 0f00 	cmp.w	sl, #0
 801780e:	d048      	beq.n	80178a2 <__gethex+0x3bc>
 8017810:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017814:	2b02      	cmp	r3, #2
 8017816:	d015      	beq.n	8017844 <__gethex+0x35e>
 8017818:	2b03      	cmp	r3, #3
 801781a:	d017      	beq.n	801784c <__gethex+0x366>
 801781c:	2b01      	cmp	r3, #1
 801781e:	d109      	bne.n	8017834 <__gethex+0x34e>
 8017820:	f01a 0f02 	tst.w	sl, #2
 8017824:	d006      	beq.n	8017834 <__gethex+0x34e>
 8017826:	f8d9 3000 	ldr.w	r3, [r9]
 801782a:	ea4a 0a03 	orr.w	sl, sl, r3
 801782e:	f01a 0f01 	tst.w	sl, #1
 8017832:	d10e      	bne.n	8017852 <__gethex+0x36c>
 8017834:	f047 0710 	orr.w	r7, r7, #16
 8017838:	e033      	b.n	80178a2 <__gethex+0x3bc>
 801783a:	f04f 0a01 	mov.w	sl, #1
 801783e:	e7d0      	b.n	80177e2 <__gethex+0x2fc>
 8017840:	2701      	movs	r7, #1
 8017842:	e7e2      	b.n	801780a <__gethex+0x324>
 8017844:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017846:	f1c3 0301 	rsb	r3, r3, #1
 801784a:	9315      	str	r3, [sp, #84]	; 0x54
 801784c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801784e:	2b00      	cmp	r3, #0
 8017850:	d0f0      	beq.n	8017834 <__gethex+0x34e>
 8017852:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8017856:	f105 0314 	add.w	r3, r5, #20
 801785a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801785e:	eb03 010a 	add.w	r1, r3, sl
 8017862:	f04f 0c00 	mov.w	ip, #0
 8017866:	4618      	mov	r0, r3
 8017868:	f853 2b04 	ldr.w	r2, [r3], #4
 801786c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017870:	d01c      	beq.n	80178ac <__gethex+0x3c6>
 8017872:	3201      	adds	r2, #1
 8017874:	6002      	str	r2, [r0, #0]
 8017876:	2f02      	cmp	r7, #2
 8017878:	f105 0314 	add.w	r3, r5, #20
 801787c:	d138      	bne.n	80178f0 <__gethex+0x40a>
 801787e:	f8d8 2000 	ldr.w	r2, [r8]
 8017882:	3a01      	subs	r2, #1
 8017884:	42b2      	cmp	r2, r6
 8017886:	d10a      	bne.n	801789e <__gethex+0x3b8>
 8017888:	1171      	asrs	r1, r6, #5
 801788a:	2201      	movs	r2, #1
 801788c:	f006 061f 	and.w	r6, r6, #31
 8017890:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017894:	fa02 f606 	lsl.w	r6, r2, r6
 8017898:	421e      	tst	r6, r3
 801789a:	bf18      	it	ne
 801789c:	4617      	movne	r7, r2
 801789e:	f047 0720 	orr.w	r7, r7, #32
 80178a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80178a4:	601d      	str	r5, [r3, #0]
 80178a6:	9b06      	ldr	r3, [sp, #24]
 80178a8:	601c      	str	r4, [r3, #0]
 80178aa:	e6a4      	b.n	80175f6 <__gethex+0x110>
 80178ac:	4299      	cmp	r1, r3
 80178ae:	f843 cc04 	str.w	ip, [r3, #-4]
 80178b2:	d8d8      	bhi.n	8017866 <__gethex+0x380>
 80178b4:	68ab      	ldr	r3, [r5, #8]
 80178b6:	4599      	cmp	r9, r3
 80178b8:	db12      	blt.n	80178e0 <__gethex+0x3fa>
 80178ba:	6869      	ldr	r1, [r5, #4]
 80178bc:	9802      	ldr	r0, [sp, #8]
 80178be:	3101      	adds	r1, #1
 80178c0:	f000 f924 	bl	8017b0c <_Balloc>
 80178c4:	692a      	ldr	r2, [r5, #16]
 80178c6:	3202      	adds	r2, #2
 80178c8:	f105 010c 	add.w	r1, r5, #12
 80178cc:	4683      	mov	fp, r0
 80178ce:	0092      	lsls	r2, r2, #2
 80178d0:	300c      	adds	r0, #12
 80178d2:	f7fd f9c5 	bl	8014c60 <memcpy>
 80178d6:	4629      	mov	r1, r5
 80178d8:	9802      	ldr	r0, [sp, #8]
 80178da:	f000 f94b 	bl	8017b74 <_Bfree>
 80178de:	465d      	mov	r5, fp
 80178e0:	692b      	ldr	r3, [r5, #16]
 80178e2:	1c5a      	adds	r2, r3, #1
 80178e4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80178e8:	612a      	str	r2, [r5, #16]
 80178ea:	2201      	movs	r2, #1
 80178ec:	615a      	str	r2, [r3, #20]
 80178ee:	e7c2      	b.n	8017876 <__gethex+0x390>
 80178f0:	692a      	ldr	r2, [r5, #16]
 80178f2:	454a      	cmp	r2, r9
 80178f4:	dd0b      	ble.n	801790e <__gethex+0x428>
 80178f6:	2101      	movs	r1, #1
 80178f8:	4628      	mov	r0, r5
 80178fa:	f7ff fda5 	bl	8017448 <rshift>
 80178fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017902:	3401      	adds	r4, #1
 8017904:	42a3      	cmp	r3, r4
 8017906:	f6ff aed9 	blt.w	80176bc <__gethex+0x1d6>
 801790a:	2701      	movs	r7, #1
 801790c:	e7c7      	b.n	801789e <__gethex+0x3b8>
 801790e:	f016 061f 	ands.w	r6, r6, #31
 8017912:	d0fa      	beq.n	801790a <__gethex+0x424>
 8017914:	449a      	add	sl, r3
 8017916:	f1c6 0620 	rsb	r6, r6, #32
 801791a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801791e:	f000 f9b9 	bl	8017c94 <__hi0bits>
 8017922:	42b0      	cmp	r0, r6
 8017924:	dbe7      	blt.n	80178f6 <__gethex+0x410>
 8017926:	e7f0      	b.n	801790a <__gethex+0x424>

08017928 <L_shift>:
 8017928:	f1c2 0208 	rsb	r2, r2, #8
 801792c:	0092      	lsls	r2, r2, #2
 801792e:	b570      	push	{r4, r5, r6, lr}
 8017930:	f1c2 0620 	rsb	r6, r2, #32
 8017934:	6843      	ldr	r3, [r0, #4]
 8017936:	6804      	ldr	r4, [r0, #0]
 8017938:	fa03 f506 	lsl.w	r5, r3, r6
 801793c:	432c      	orrs	r4, r5
 801793e:	40d3      	lsrs	r3, r2
 8017940:	6004      	str	r4, [r0, #0]
 8017942:	f840 3f04 	str.w	r3, [r0, #4]!
 8017946:	4288      	cmp	r0, r1
 8017948:	d3f4      	bcc.n	8017934 <L_shift+0xc>
 801794a:	bd70      	pop	{r4, r5, r6, pc}

0801794c <__match>:
 801794c:	b530      	push	{r4, r5, lr}
 801794e:	6803      	ldr	r3, [r0, #0]
 8017950:	3301      	adds	r3, #1
 8017952:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017956:	b914      	cbnz	r4, 801795e <__match+0x12>
 8017958:	6003      	str	r3, [r0, #0]
 801795a:	2001      	movs	r0, #1
 801795c:	bd30      	pop	{r4, r5, pc}
 801795e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017962:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017966:	2d19      	cmp	r5, #25
 8017968:	bf98      	it	ls
 801796a:	3220      	addls	r2, #32
 801796c:	42a2      	cmp	r2, r4
 801796e:	d0f0      	beq.n	8017952 <__match+0x6>
 8017970:	2000      	movs	r0, #0
 8017972:	e7f3      	b.n	801795c <__match+0x10>

08017974 <__hexnan>:
 8017974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017978:	680b      	ldr	r3, [r1, #0]
 801797a:	6801      	ldr	r1, [r0, #0]
 801797c:	115f      	asrs	r7, r3, #5
 801797e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017982:	f013 031f 	ands.w	r3, r3, #31
 8017986:	b087      	sub	sp, #28
 8017988:	bf18      	it	ne
 801798a:	3704      	addne	r7, #4
 801798c:	2500      	movs	r5, #0
 801798e:	1f3e      	subs	r6, r7, #4
 8017990:	4682      	mov	sl, r0
 8017992:	4690      	mov	r8, r2
 8017994:	9301      	str	r3, [sp, #4]
 8017996:	f847 5c04 	str.w	r5, [r7, #-4]
 801799a:	46b1      	mov	r9, r6
 801799c:	4634      	mov	r4, r6
 801799e:	9502      	str	r5, [sp, #8]
 80179a0:	46ab      	mov	fp, r5
 80179a2:	784a      	ldrb	r2, [r1, #1]
 80179a4:	1c4b      	adds	r3, r1, #1
 80179a6:	9303      	str	r3, [sp, #12]
 80179a8:	b342      	cbz	r2, 80179fc <__hexnan+0x88>
 80179aa:	4610      	mov	r0, r2
 80179ac:	9105      	str	r1, [sp, #20]
 80179ae:	9204      	str	r2, [sp, #16]
 80179b0:	f7ff fd84 	bl	80174bc <__hexdig_fun>
 80179b4:	2800      	cmp	r0, #0
 80179b6:	d143      	bne.n	8017a40 <__hexnan+0xcc>
 80179b8:	9a04      	ldr	r2, [sp, #16]
 80179ba:	9905      	ldr	r1, [sp, #20]
 80179bc:	2a20      	cmp	r2, #32
 80179be:	d818      	bhi.n	80179f2 <__hexnan+0x7e>
 80179c0:	9b02      	ldr	r3, [sp, #8]
 80179c2:	459b      	cmp	fp, r3
 80179c4:	dd13      	ble.n	80179ee <__hexnan+0x7a>
 80179c6:	454c      	cmp	r4, r9
 80179c8:	d206      	bcs.n	80179d8 <__hexnan+0x64>
 80179ca:	2d07      	cmp	r5, #7
 80179cc:	dc04      	bgt.n	80179d8 <__hexnan+0x64>
 80179ce:	462a      	mov	r2, r5
 80179d0:	4649      	mov	r1, r9
 80179d2:	4620      	mov	r0, r4
 80179d4:	f7ff ffa8 	bl	8017928 <L_shift>
 80179d8:	4544      	cmp	r4, r8
 80179da:	d944      	bls.n	8017a66 <__hexnan+0xf2>
 80179dc:	2300      	movs	r3, #0
 80179de:	f1a4 0904 	sub.w	r9, r4, #4
 80179e2:	f844 3c04 	str.w	r3, [r4, #-4]
 80179e6:	f8cd b008 	str.w	fp, [sp, #8]
 80179ea:	464c      	mov	r4, r9
 80179ec:	461d      	mov	r5, r3
 80179ee:	9903      	ldr	r1, [sp, #12]
 80179f0:	e7d7      	b.n	80179a2 <__hexnan+0x2e>
 80179f2:	2a29      	cmp	r2, #41	; 0x29
 80179f4:	d14a      	bne.n	8017a8c <__hexnan+0x118>
 80179f6:	3102      	adds	r1, #2
 80179f8:	f8ca 1000 	str.w	r1, [sl]
 80179fc:	f1bb 0f00 	cmp.w	fp, #0
 8017a00:	d044      	beq.n	8017a8c <__hexnan+0x118>
 8017a02:	454c      	cmp	r4, r9
 8017a04:	d206      	bcs.n	8017a14 <__hexnan+0xa0>
 8017a06:	2d07      	cmp	r5, #7
 8017a08:	dc04      	bgt.n	8017a14 <__hexnan+0xa0>
 8017a0a:	462a      	mov	r2, r5
 8017a0c:	4649      	mov	r1, r9
 8017a0e:	4620      	mov	r0, r4
 8017a10:	f7ff ff8a 	bl	8017928 <L_shift>
 8017a14:	4544      	cmp	r4, r8
 8017a16:	d928      	bls.n	8017a6a <__hexnan+0xf6>
 8017a18:	4643      	mov	r3, r8
 8017a1a:	f854 2b04 	ldr.w	r2, [r4], #4
 8017a1e:	f843 2b04 	str.w	r2, [r3], #4
 8017a22:	42a6      	cmp	r6, r4
 8017a24:	d2f9      	bcs.n	8017a1a <__hexnan+0xa6>
 8017a26:	2200      	movs	r2, #0
 8017a28:	f843 2b04 	str.w	r2, [r3], #4
 8017a2c:	429e      	cmp	r6, r3
 8017a2e:	d2fb      	bcs.n	8017a28 <__hexnan+0xb4>
 8017a30:	6833      	ldr	r3, [r6, #0]
 8017a32:	b91b      	cbnz	r3, 8017a3c <__hexnan+0xc8>
 8017a34:	4546      	cmp	r6, r8
 8017a36:	d127      	bne.n	8017a88 <__hexnan+0x114>
 8017a38:	2301      	movs	r3, #1
 8017a3a:	6033      	str	r3, [r6, #0]
 8017a3c:	2005      	movs	r0, #5
 8017a3e:	e026      	b.n	8017a8e <__hexnan+0x11a>
 8017a40:	3501      	adds	r5, #1
 8017a42:	2d08      	cmp	r5, #8
 8017a44:	f10b 0b01 	add.w	fp, fp, #1
 8017a48:	dd06      	ble.n	8017a58 <__hexnan+0xe4>
 8017a4a:	4544      	cmp	r4, r8
 8017a4c:	d9cf      	bls.n	80179ee <__hexnan+0x7a>
 8017a4e:	2300      	movs	r3, #0
 8017a50:	f844 3c04 	str.w	r3, [r4, #-4]
 8017a54:	2501      	movs	r5, #1
 8017a56:	3c04      	subs	r4, #4
 8017a58:	6822      	ldr	r2, [r4, #0]
 8017a5a:	f000 000f 	and.w	r0, r0, #15
 8017a5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017a62:	6020      	str	r0, [r4, #0]
 8017a64:	e7c3      	b.n	80179ee <__hexnan+0x7a>
 8017a66:	2508      	movs	r5, #8
 8017a68:	e7c1      	b.n	80179ee <__hexnan+0x7a>
 8017a6a:	9b01      	ldr	r3, [sp, #4]
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d0df      	beq.n	8017a30 <__hexnan+0xbc>
 8017a70:	f04f 32ff 	mov.w	r2, #4294967295
 8017a74:	f1c3 0320 	rsb	r3, r3, #32
 8017a78:	fa22 f303 	lsr.w	r3, r2, r3
 8017a7c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017a80:	401a      	ands	r2, r3
 8017a82:	f847 2c04 	str.w	r2, [r7, #-4]
 8017a86:	e7d3      	b.n	8017a30 <__hexnan+0xbc>
 8017a88:	3e04      	subs	r6, #4
 8017a8a:	e7d1      	b.n	8017a30 <__hexnan+0xbc>
 8017a8c:	2004      	movs	r0, #4
 8017a8e:	b007      	add	sp, #28
 8017a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017a94 <__locale_ctype_ptr_l>:
 8017a94:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017a98:	4770      	bx	lr
	...

08017a9c <__locale_ctype_ptr>:
 8017a9c:	4b04      	ldr	r3, [pc, #16]	; (8017ab0 <__locale_ctype_ptr+0x14>)
 8017a9e:	4a05      	ldr	r2, [pc, #20]	; (8017ab4 <__locale_ctype_ptr+0x18>)
 8017aa0:	681b      	ldr	r3, [r3, #0]
 8017aa2:	6a1b      	ldr	r3, [r3, #32]
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	bf08      	it	eq
 8017aa8:	4613      	moveq	r3, r2
 8017aaa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8017aae:	4770      	bx	lr
 8017ab0:	2000000c 	.word	0x2000000c
 8017ab4:	20000070 	.word	0x20000070

08017ab8 <__localeconv_l>:
 8017ab8:	30f0      	adds	r0, #240	; 0xf0
 8017aba:	4770      	bx	lr

08017abc <_localeconv_r>:
 8017abc:	4b04      	ldr	r3, [pc, #16]	; (8017ad0 <_localeconv_r+0x14>)
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	6a18      	ldr	r0, [r3, #32]
 8017ac2:	4b04      	ldr	r3, [pc, #16]	; (8017ad4 <_localeconv_r+0x18>)
 8017ac4:	2800      	cmp	r0, #0
 8017ac6:	bf08      	it	eq
 8017ac8:	4618      	moveq	r0, r3
 8017aca:	30f0      	adds	r0, #240	; 0xf0
 8017acc:	4770      	bx	lr
 8017ace:	bf00      	nop
 8017ad0:	2000000c 	.word	0x2000000c
 8017ad4:	20000070 	.word	0x20000070

08017ad8 <malloc>:
 8017ad8:	4b02      	ldr	r3, [pc, #8]	; (8017ae4 <malloc+0xc>)
 8017ada:	4601      	mov	r1, r0
 8017adc:	6818      	ldr	r0, [r3, #0]
 8017ade:	f000 bc71 	b.w	80183c4 <_malloc_r>
 8017ae2:	bf00      	nop
 8017ae4:	2000000c 	.word	0x2000000c

08017ae8 <__ascii_mbtowc>:
 8017ae8:	b082      	sub	sp, #8
 8017aea:	b901      	cbnz	r1, 8017aee <__ascii_mbtowc+0x6>
 8017aec:	a901      	add	r1, sp, #4
 8017aee:	b142      	cbz	r2, 8017b02 <__ascii_mbtowc+0x1a>
 8017af0:	b14b      	cbz	r3, 8017b06 <__ascii_mbtowc+0x1e>
 8017af2:	7813      	ldrb	r3, [r2, #0]
 8017af4:	600b      	str	r3, [r1, #0]
 8017af6:	7812      	ldrb	r2, [r2, #0]
 8017af8:	1c10      	adds	r0, r2, #0
 8017afa:	bf18      	it	ne
 8017afc:	2001      	movne	r0, #1
 8017afe:	b002      	add	sp, #8
 8017b00:	4770      	bx	lr
 8017b02:	4610      	mov	r0, r2
 8017b04:	e7fb      	b.n	8017afe <__ascii_mbtowc+0x16>
 8017b06:	f06f 0001 	mvn.w	r0, #1
 8017b0a:	e7f8      	b.n	8017afe <__ascii_mbtowc+0x16>

08017b0c <_Balloc>:
 8017b0c:	b570      	push	{r4, r5, r6, lr}
 8017b0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017b10:	4604      	mov	r4, r0
 8017b12:	460e      	mov	r6, r1
 8017b14:	b93d      	cbnz	r5, 8017b26 <_Balloc+0x1a>
 8017b16:	2010      	movs	r0, #16
 8017b18:	f7ff ffde 	bl	8017ad8 <malloc>
 8017b1c:	6260      	str	r0, [r4, #36]	; 0x24
 8017b1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017b22:	6005      	str	r5, [r0, #0]
 8017b24:	60c5      	str	r5, [r0, #12]
 8017b26:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017b28:	68eb      	ldr	r3, [r5, #12]
 8017b2a:	b183      	cbz	r3, 8017b4e <_Balloc+0x42>
 8017b2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017b2e:	68db      	ldr	r3, [r3, #12]
 8017b30:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8017b34:	b9b8      	cbnz	r0, 8017b66 <_Balloc+0x5a>
 8017b36:	2101      	movs	r1, #1
 8017b38:	fa01 f506 	lsl.w	r5, r1, r6
 8017b3c:	1d6a      	adds	r2, r5, #5
 8017b3e:	0092      	lsls	r2, r2, #2
 8017b40:	4620      	mov	r0, r4
 8017b42:	f000 fbe2 	bl	801830a <_calloc_r>
 8017b46:	b160      	cbz	r0, 8017b62 <_Balloc+0x56>
 8017b48:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8017b4c:	e00e      	b.n	8017b6c <_Balloc+0x60>
 8017b4e:	2221      	movs	r2, #33	; 0x21
 8017b50:	2104      	movs	r1, #4
 8017b52:	4620      	mov	r0, r4
 8017b54:	f000 fbd9 	bl	801830a <_calloc_r>
 8017b58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017b5a:	60e8      	str	r0, [r5, #12]
 8017b5c:	68db      	ldr	r3, [r3, #12]
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d1e4      	bne.n	8017b2c <_Balloc+0x20>
 8017b62:	2000      	movs	r0, #0
 8017b64:	bd70      	pop	{r4, r5, r6, pc}
 8017b66:	6802      	ldr	r2, [r0, #0]
 8017b68:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017b72:	e7f7      	b.n	8017b64 <_Balloc+0x58>

08017b74 <_Bfree>:
 8017b74:	b570      	push	{r4, r5, r6, lr}
 8017b76:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017b78:	4606      	mov	r6, r0
 8017b7a:	460d      	mov	r5, r1
 8017b7c:	b93c      	cbnz	r4, 8017b8e <_Bfree+0x1a>
 8017b7e:	2010      	movs	r0, #16
 8017b80:	f7ff ffaa 	bl	8017ad8 <malloc>
 8017b84:	6270      	str	r0, [r6, #36]	; 0x24
 8017b86:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017b8a:	6004      	str	r4, [r0, #0]
 8017b8c:	60c4      	str	r4, [r0, #12]
 8017b8e:	b13d      	cbz	r5, 8017ba0 <_Bfree+0x2c>
 8017b90:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017b92:	686a      	ldr	r2, [r5, #4]
 8017b94:	68db      	ldr	r3, [r3, #12]
 8017b96:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017b9a:	6029      	str	r1, [r5, #0]
 8017b9c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8017ba0:	bd70      	pop	{r4, r5, r6, pc}

08017ba2 <__multadd>:
 8017ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ba6:	690d      	ldr	r5, [r1, #16]
 8017ba8:	461f      	mov	r7, r3
 8017baa:	4606      	mov	r6, r0
 8017bac:	460c      	mov	r4, r1
 8017bae:	f101 0c14 	add.w	ip, r1, #20
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	f8dc 0000 	ldr.w	r0, [ip]
 8017bb8:	b281      	uxth	r1, r0
 8017bba:	fb02 7101 	mla	r1, r2, r1, r7
 8017bbe:	0c0f      	lsrs	r7, r1, #16
 8017bc0:	0c00      	lsrs	r0, r0, #16
 8017bc2:	fb02 7000 	mla	r0, r2, r0, r7
 8017bc6:	b289      	uxth	r1, r1
 8017bc8:	3301      	adds	r3, #1
 8017bca:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8017bce:	429d      	cmp	r5, r3
 8017bd0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8017bd4:	f84c 1b04 	str.w	r1, [ip], #4
 8017bd8:	dcec      	bgt.n	8017bb4 <__multadd+0x12>
 8017bda:	b1d7      	cbz	r7, 8017c12 <__multadd+0x70>
 8017bdc:	68a3      	ldr	r3, [r4, #8]
 8017bde:	42ab      	cmp	r3, r5
 8017be0:	dc12      	bgt.n	8017c08 <__multadd+0x66>
 8017be2:	6861      	ldr	r1, [r4, #4]
 8017be4:	4630      	mov	r0, r6
 8017be6:	3101      	adds	r1, #1
 8017be8:	f7ff ff90 	bl	8017b0c <_Balloc>
 8017bec:	6922      	ldr	r2, [r4, #16]
 8017bee:	3202      	adds	r2, #2
 8017bf0:	f104 010c 	add.w	r1, r4, #12
 8017bf4:	4680      	mov	r8, r0
 8017bf6:	0092      	lsls	r2, r2, #2
 8017bf8:	300c      	adds	r0, #12
 8017bfa:	f7fd f831 	bl	8014c60 <memcpy>
 8017bfe:	4621      	mov	r1, r4
 8017c00:	4630      	mov	r0, r6
 8017c02:	f7ff ffb7 	bl	8017b74 <_Bfree>
 8017c06:	4644      	mov	r4, r8
 8017c08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017c0c:	3501      	adds	r5, #1
 8017c0e:	615f      	str	r7, [r3, #20]
 8017c10:	6125      	str	r5, [r4, #16]
 8017c12:	4620      	mov	r0, r4
 8017c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017c18 <__s2b>:
 8017c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c1c:	460c      	mov	r4, r1
 8017c1e:	4615      	mov	r5, r2
 8017c20:	461f      	mov	r7, r3
 8017c22:	2209      	movs	r2, #9
 8017c24:	3308      	adds	r3, #8
 8017c26:	4606      	mov	r6, r0
 8017c28:	fb93 f3f2 	sdiv	r3, r3, r2
 8017c2c:	2100      	movs	r1, #0
 8017c2e:	2201      	movs	r2, #1
 8017c30:	429a      	cmp	r2, r3
 8017c32:	db20      	blt.n	8017c76 <__s2b+0x5e>
 8017c34:	4630      	mov	r0, r6
 8017c36:	f7ff ff69 	bl	8017b0c <_Balloc>
 8017c3a:	9b08      	ldr	r3, [sp, #32]
 8017c3c:	6143      	str	r3, [r0, #20]
 8017c3e:	2d09      	cmp	r5, #9
 8017c40:	f04f 0301 	mov.w	r3, #1
 8017c44:	6103      	str	r3, [r0, #16]
 8017c46:	dd19      	ble.n	8017c7c <__s2b+0x64>
 8017c48:	f104 0809 	add.w	r8, r4, #9
 8017c4c:	46c1      	mov	r9, r8
 8017c4e:	442c      	add	r4, r5
 8017c50:	f819 3b01 	ldrb.w	r3, [r9], #1
 8017c54:	4601      	mov	r1, r0
 8017c56:	3b30      	subs	r3, #48	; 0x30
 8017c58:	220a      	movs	r2, #10
 8017c5a:	4630      	mov	r0, r6
 8017c5c:	f7ff ffa1 	bl	8017ba2 <__multadd>
 8017c60:	45a1      	cmp	r9, r4
 8017c62:	d1f5      	bne.n	8017c50 <__s2b+0x38>
 8017c64:	eb08 0405 	add.w	r4, r8, r5
 8017c68:	3c08      	subs	r4, #8
 8017c6a:	1b2d      	subs	r5, r5, r4
 8017c6c:	1963      	adds	r3, r4, r5
 8017c6e:	42bb      	cmp	r3, r7
 8017c70:	db07      	blt.n	8017c82 <__s2b+0x6a>
 8017c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c76:	0052      	lsls	r2, r2, #1
 8017c78:	3101      	adds	r1, #1
 8017c7a:	e7d9      	b.n	8017c30 <__s2b+0x18>
 8017c7c:	340a      	adds	r4, #10
 8017c7e:	2509      	movs	r5, #9
 8017c80:	e7f3      	b.n	8017c6a <__s2b+0x52>
 8017c82:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017c86:	4601      	mov	r1, r0
 8017c88:	3b30      	subs	r3, #48	; 0x30
 8017c8a:	220a      	movs	r2, #10
 8017c8c:	4630      	mov	r0, r6
 8017c8e:	f7ff ff88 	bl	8017ba2 <__multadd>
 8017c92:	e7eb      	b.n	8017c6c <__s2b+0x54>

08017c94 <__hi0bits>:
 8017c94:	0c02      	lsrs	r2, r0, #16
 8017c96:	0412      	lsls	r2, r2, #16
 8017c98:	4603      	mov	r3, r0
 8017c9a:	b9b2      	cbnz	r2, 8017cca <__hi0bits+0x36>
 8017c9c:	0403      	lsls	r3, r0, #16
 8017c9e:	2010      	movs	r0, #16
 8017ca0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017ca4:	bf04      	itt	eq
 8017ca6:	021b      	lsleq	r3, r3, #8
 8017ca8:	3008      	addeq	r0, #8
 8017caa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017cae:	bf04      	itt	eq
 8017cb0:	011b      	lsleq	r3, r3, #4
 8017cb2:	3004      	addeq	r0, #4
 8017cb4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017cb8:	bf04      	itt	eq
 8017cba:	009b      	lsleq	r3, r3, #2
 8017cbc:	3002      	addeq	r0, #2
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	db06      	blt.n	8017cd0 <__hi0bits+0x3c>
 8017cc2:	005b      	lsls	r3, r3, #1
 8017cc4:	d503      	bpl.n	8017cce <__hi0bits+0x3a>
 8017cc6:	3001      	adds	r0, #1
 8017cc8:	4770      	bx	lr
 8017cca:	2000      	movs	r0, #0
 8017ccc:	e7e8      	b.n	8017ca0 <__hi0bits+0xc>
 8017cce:	2020      	movs	r0, #32
 8017cd0:	4770      	bx	lr

08017cd2 <__lo0bits>:
 8017cd2:	6803      	ldr	r3, [r0, #0]
 8017cd4:	f013 0207 	ands.w	r2, r3, #7
 8017cd8:	4601      	mov	r1, r0
 8017cda:	d00b      	beq.n	8017cf4 <__lo0bits+0x22>
 8017cdc:	07da      	lsls	r2, r3, #31
 8017cde:	d423      	bmi.n	8017d28 <__lo0bits+0x56>
 8017ce0:	0798      	lsls	r0, r3, #30
 8017ce2:	bf49      	itett	mi
 8017ce4:	085b      	lsrmi	r3, r3, #1
 8017ce6:	089b      	lsrpl	r3, r3, #2
 8017ce8:	2001      	movmi	r0, #1
 8017cea:	600b      	strmi	r3, [r1, #0]
 8017cec:	bf5c      	itt	pl
 8017cee:	600b      	strpl	r3, [r1, #0]
 8017cf0:	2002      	movpl	r0, #2
 8017cf2:	4770      	bx	lr
 8017cf4:	b298      	uxth	r0, r3
 8017cf6:	b9a8      	cbnz	r0, 8017d24 <__lo0bits+0x52>
 8017cf8:	0c1b      	lsrs	r3, r3, #16
 8017cfa:	2010      	movs	r0, #16
 8017cfc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017d00:	bf04      	itt	eq
 8017d02:	0a1b      	lsreq	r3, r3, #8
 8017d04:	3008      	addeq	r0, #8
 8017d06:	071a      	lsls	r2, r3, #28
 8017d08:	bf04      	itt	eq
 8017d0a:	091b      	lsreq	r3, r3, #4
 8017d0c:	3004      	addeq	r0, #4
 8017d0e:	079a      	lsls	r2, r3, #30
 8017d10:	bf04      	itt	eq
 8017d12:	089b      	lsreq	r3, r3, #2
 8017d14:	3002      	addeq	r0, #2
 8017d16:	07da      	lsls	r2, r3, #31
 8017d18:	d402      	bmi.n	8017d20 <__lo0bits+0x4e>
 8017d1a:	085b      	lsrs	r3, r3, #1
 8017d1c:	d006      	beq.n	8017d2c <__lo0bits+0x5a>
 8017d1e:	3001      	adds	r0, #1
 8017d20:	600b      	str	r3, [r1, #0]
 8017d22:	4770      	bx	lr
 8017d24:	4610      	mov	r0, r2
 8017d26:	e7e9      	b.n	8017cfc <__lo0bits+0x2a>
 8017d28:	2000      	movs	r0, #0
 8017d2a:	4770      	bx	lr
 8017d2c:	2020      	movs	r0, #32
 8017d2e:	4770      	bx	lr

08017d30 <__i2b>:
 8017d30:	b510      	push	{r4, lr}
 8017d32:	460c      	mov	r4, r1
 8017d34:	2101      	movs	r1, #1
 8017d36:	f7ff fee9 	bl	8017b0c <_Balloc>
 8017d3a:	2201      	movs	r2, #1
 8017d3c:	6144      	str	r4, [r0, #20]
 8017d3e:	6102      	str	r2, [r0, #16]
 8017d40:	bd10      	pop	{r4, pc}

08017d42 <__multiply>:
 8017d42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d46:	4614      	mov	r4, r2
 8017d48:	690a      	ldr	r2, [r1, #16]
 8017d4a:	6923      	ldr	r3, [r4, #16]
 8017d4c:	429a      	cmp	r2, r3
 8017d4e:	bfb8      	it	lt
 8017d50:	460b      	movlt	r3, r1
 8017d52:	4688      	mov	r8, r1
 8017d54:	bfbc      	itt	lt
 8017d56:	46a0      	movlt	r8, r4
 8017d58:	461c      	movlt	r4, r3
 8017d5a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017d5e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017d62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017d66:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017d6a:	eb07 0609 	add.w	r6, r7, r9
 8017d6e:	42b3      	cmp	r3, r6
 8017d70:	bfb8      	it	lt
 8017d72:	3101      	addlt	r1, #1
 8017d74:	f7ff feca 	bl	8017b0c <_Balloc>
 8017d78:	f100 0514 	add.w	r5, r0, #20
 8017d7c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8017d80:	462b      	mov	r3, r5
 8017d82:	2200      	movs	r2, #0
 8017d84:	4573      	cmp	r3, lr
 8017d86:	d316      	bcc.n	8017db6 <__multiply+0x74>
 8017d88:	f104 0214 	add.w	r2, r4, #20
 8017d8c:	f108 0114 	add.w	r1, r8, #20
 8017d90:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8017d94:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8017d98:	9300      	str	r3, [sp, #0]
 8017d9a:	9b00      	ldr	r3, [sp, #0]
 8017d9c:	9201      	str	r2, [sp, #4]
 8017d9e:	4293      	cmp	r3, r2
 8017da0:	d80c      	bhi.n	8017dbc <__multiply+0x7a>
 8017da2:	2e00      	cmp	r6, #0
 8017da4:	dd03      	ble.n	8017dae <__multiply+0x6c>
 8017da6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d05d      	beq.n	8017e6a <__multiply+0x128>
 8017dae:	6106      	str	r6, [r0, #16]
 8017db0:	b003      	add	sp, #12
 8017db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017db6:	f843 2b04 	str.w	r2, [r3], #4
 8017dba:	e7e3      	b.n	8017d84 <__multiply+0x42>
 8017dbc:	f8b2 b000 	ldrh.w	fp, [r2]
 8017dc0:	f1bb 0f00 	cmp.w	fp, #0
 8017dc4:	d023      	beq.n	8017e0e <__multiply+0xcc>
 8017dc6:	4689      	mov	r9, r1
 8017dc8:	46ac      	mov	ip, r5
 8017dca:	f04f 0800 	mov.w	r8, #0
 8017dce:	f859 4b04 	ldr.w	r4, [r9], #4
 8017dd2:	f8dc a000 	ldr.w	sl, [ip]
 8017dd6:	b2a3      	uxth	r3, r4
 8017dd8:	fa1f fa8a 	uxth.w	sl, sl
 8017ddc:	fb0b a303 	mla	r3, fp, r3, sl
 8017de0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017de4:	f8dc 4000 	ldr.w	r4, [ip]
 8017de8:	4443      	add	r3, r8
 8017dea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017dee:	fb0b 840a 	mla	r4, fp, sl, r8
 8017df2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8017df6:	46e2      	mov	sl, ip
 8017df8:	b29b      	uxth	r3, r3
 8017dfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017dfe:	454f      	cmp	r7, r9
 8017e00:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017e04:	f84a 3b04 	str.w	r3, [sl], #4
 8017e08:	d82b      	bhi.n	8017e62 <__multiply+0x120>
 8017e0a:	f8cc 8004 	str.w	r8, [ip, #4]
 8017e0e:	9b01      	ldr	r3, [sp, #4]
 8017e10:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8017e14:	3204      	adds	r2, #4
 8017e16:	f1ba 0f00 	cmp.w	sl, #0
 8017e1a:	d020      	beq.n	8017e5e <__multiply+0x11c>
 8017e1c:	682b      	ldr	r3, [r5, #0]
 8017e1e:	4689      	mov	r9, r1
 8017e20:	46a8      	mov	r8, r5
 8017e22:	f04f 0b00 	mov.w	fp, #0
 8017e26:	f8b9 c000 	ldrh.w	ip, [r9]
 8017e2a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8017e2e:	fb0a 440c 	mla	r4, sl, ip, r4
 8017e32:	445c      	add	r4, fp
 8017e34:	46c4      	mov	ip, r8
 8017e36:	b29b      	uxth	r3, r3
 8017e38:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017e3c:	f84c 3b04 	str.w	r3, [ip], #4
 8017e40:	f859 3b04 	ldr.w	r3, [r9], #4
 8017e44:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8017e48:	0c1b      	lsrs	r3, r3, #16
 8017e4a:	fb0a b303 	mla	r3, sl, r3, fp
 8017e4e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8017e52:	454f      	cmp	r7, r9
 8017e54:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8017e58:	d805      	bhi.n	8017e66 <__multiply+0x124>
 8017e5a:	f8c8 3004 	str.w	r3, [r8, #4]
 8017e5e:	3504      	adds	r5, #4
 8017e60:	e79b      	b.n	8017d9a <__multiply+0x58>
 8017e62:	46d4      	mov	ip, sl
 8017e64:	e7b3      	b.n	8017dce <__multiply+0x8c>
 8017e66:	46e0      	mov	r8, ip
 8017e68:	e7dd      	b.n	8017e26 <__multiply+0xe4>
 8017e6a:	3e01      	subs	r6, #1
 8017e6c:	e799      	b.n	8017da2 <__multiply+0x60>
	...

08017e70 <__pow5mult>:
 8017e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e74:	4615      	mov	r5, r2
 8017e76:	f012 0203 	ands.w	r2, r2, #3
 8017e7a:	4606      	mov	r6, r0
 8017e7c:	460f      	mov	r7, r1
 8017e7e:	d007      	beq.n	8017e90 <__pow5mult+0x20>
 8017e80:	3a01      	subs	r2, #1
 8017e82:	4c21      	ldr	r4, [pc, #132]	; (8017f08 <__pow5mult+0x98>)
 8017e84:	2300      	movs	r3, #0
 8017e86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017e8a:	f7ff fe8a 	bl	8017ba2 <__multadd>
 8017e8e:	4607      	mov	r7, r0
 8017e90:	10ad      	asrs	r5, r5, #2
 8017e92:	d035      	beq.n	8017f00 <__pow5mult+0x90>
 8017e94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017e96:	b93c      	cbnz	r4, 8017ea8 <__pow5mult+0x38>
 8017e98:	2010      	movs	r0, #16
 8017e9a:	f7ff fe1d 	bl	8017ad8 <malloc>
 8017e9e:	6270      	str	r0, [r6, #36]	; 0x24
 8017ea0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017ea4:	6004      	str	r4, [r0, #0]
 8017ea6:	60c4      	str	r4, [r0, #12]
 8017ea8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017eac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017eb0:	b94c      	cbnz	r4, 8017ec6 <__pow5mult+0x56>
 8017eb2:	f240 2171 	movw	r1, #625	; 0x271
 8017eb6:	4630      	mov	r0, r6
 8017eb8:	f7ff ff3a 	bl	8017d30 <__i2b>
 8017ebc:	2300      	movs	r3, #0
 8017ebe:	f8c8 0008 	str.w	r0, [r8, #8]
 8017ec2:	4604      	mov	r4, r0
 8017ec4:	6003      	str	r3, [r0, #0]
 8017ec6:	f04f 0800 	mov.w	r8, #0
 8017eca:	07eb      	lsls	r3, r5, #31
 8017ecc:	d50a      	bpl.n	8017ee4 <__pow5mult+0x74>
 8017ece:	4639      	mov	r1, r7
 8017ed0:	4622      	mov	r2, r4
 8017ed2:	4630      	mov	r0, r6
 8017ed4:	f7ff ff35 	bl	8017d42 <__multiply>
 8017ed8:	4639      	mov	r1, r7
 8017eda:	4681      	mov	r9, r0
 8017edc:	4630      	mov	r0, r6
 8017ede:	f7ff fe49 	bl	8017b74 <_Bfree>
 8017ee2:	464f      	mov	r7, r9
 8017ee4:	106d      	asrs	r5, r5, #1
 8017ee6:	d00b      	beq.n	8017f00 <__pow5mult+0x90>
 8017ee8:	6820      	ldr	r0, [r4, #0]
 8017eea:	b938      	cbnz	r0, 8017efc <__pow5mult+0x8c>
 8017eec:	4622      	mov	r2, r4
 8017eee:	4621      	mov	r1, r4
 8017ef0:	4630      	mov	r0, r6
 8017ef2:	f7ff ff26 	bl	8017d42 <__multiply>
 8017ef6:	6020      	str	r0, [r4, #0]
 8017ef8:	f8c0 8000 	str.w	r8, [r0]
 8017efc:	4604      	mov	r4, r0
 8017efe:	e7e4      	b.n	8017eca <__pow5mult+0x5a>
 8017f00:	4638      	mov	r0, r7
 8017f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f06:	bf00      	nop
 8017f08:	08019a90 	.word	0x08019a90

08017f0c <__lshift>:
 8017f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f10:	460c      	mov	r4, r1
 8017f12:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017f16:	6923      	ldr	r3, [r4, #16]
 8017f18:	6849      	ldr	r1, [r1, #4]
 8017f1a:	eb0a 0903 	add.w	r9, sl, r3
 8017f1e:	68a3      	ldr	r3, [r4, #8]
 8017f20:	4607      	mov	r7, r0
 8017f22:	4616      	mov	r6, r2
 8017f24:	f109 0501 	add.w	r5, r9, #1
 8017f28:	42ab      	cmp	r3, r5
 8017f2a:	db32      	blt.n	8017f92 <__lshift+0x86>
 8017f2c:	4638      	mov	r0, r7
 8017f2e:	f7ff fded 	bl	8017b0c <_Balloc>
 8017f32:	2300      	movs	r3, #0
 8017f34:	4680      	mov	r8, r0
 8017f36:	f100 0114 	add.w	r1, r0, #20
 8017f3a:	461a      	mov	r2, r3
 8017f3c:	4553      	cmp	r3, sl
 8017f3e:	db2b      	blt.n	8017f98 <__lshift+0x8c>
 8017f40:	6920      	ldr	r0, [r4, #16]
 8017f42:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017f46:	f104 0314 	add.w	r3, r4, #20
 8017f4a:	f016 021f 	ands.w	r2, r6, #31
 8017f4e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017f52:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017f56:	d025      	beq.n	8017fa4 <__lshift+0x98>
 8017f58:	f1c2 0e20 	rsb	lr, r2, #32
 8017f5c:	2000      	movs	r0, #0
 8017f5e:	681e      	ldr	r6, [r3, #0]
 8017f60:	468a      	mov	sl, r1
 8017f62:	4096      	lsls	r6, r2
 8017f64:	4330      	orrs	r0, r6
 8017f66:	f84a 0b04 	str.w	r0, [sl], #4
 8017f6a:	f853 0b04 	ldr.w	r0, [r3], #4
 8017f6e:	459c      	cmp	ip, r3
 8017f70:	fa20 f00e 	lsr.w	r0, r0, lr
 8017f74:	d814      	bhi.n	8017fa0 <__lshift+0x94>
 8017f76:	6048      	str	r0, [r1, #4]
 8017f78:	b108      	cbz	r0, 8017f7e <__lshift+0x72>
 8017f7a:	f109 0502 	add.w	r5, r9, #2
 8017f7e:	3d01      	subs	r5, #1
 8017f80:	4638      	mov	r0, r7
 8017f82:	f8c8 5010 	str.w	r5, [r8, #16]
 8017f86:	4621      	mov	r1, r4
 8017f88:	f7ff fdf4 	bl	8017b74 <_Bfree>
 8017f8c:	4640      	mov	r0, r8
 8017f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f92:	3101      	adds	r1, #1
 8017f94:	005b      	lsls	r3, r3, #1
 8017f96:	e7c7      	b.n	8017f28 <__lshift+0x1c>
 8017f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8017f9c:	3301      	adds	r3, #1
 8017f9e:	e7cd      	b.n	8017f3c <__lshift+0x30>
 8017fa0:	4651      	mov	r1, sl
 8017fa2:	e7dc      	b.n	8017f5e <__lshift+0x52>
 8017fa4:	3904      	subs	r1, #4
 8017fa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8017faa:	f841 2f04 	str.w	r2, [r1, #4]!
 8017fae:	459c      	cmp	ip, r3
 8017fb0:	d8f9      	bhi.n	8017fa6 <__lshift+0x9a>
 8017fb2:	e7e4      	b.n	8017f7e <__lshift+0x72>

08017fb4 <__mcmp>:
 8017fb4:	6903      	ldr	r3, [r0, #16]
 8017fb6:	690a      	ldr	r2, [r1, #16]
 8017fb8:	1a9b      	subs	r3, r3, r2
 8017fba:	b530      	push	{r4, r5, lr}
 8017fbc:	d10c      	bne.n	8017fd8 <__mcmp+0x24>
 8017fbe:	0092      	lsls	r2, r2, #2
 8017fc0:	3014      	adds	r0, #20
 8017fc2:	3114      	adds	r1, #20
 8017fc4:	1884      	adds	r4, r0, r2
 8017fc6:	4411      	add	r1, r2
 8017fc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017fcc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017fd0:	4295      	cmp	r5, r2
 8017fd2:	d003      	beq.n	8017fdc <__mcmp+0x28>
 8017fd4:	d305      	bcc.n	8017fe2 <__mcmp+0x2e>
 8017fd6:	2301      	movs	r3, #1
 8017fd8:	4618      	mov	r0, r3
 8017fda:	bd30      	pop	{r4, r5, pc}
 8017fdc:	42a0      	cmp	r0, r4
 8017fde:	d3f3      	bcc.n	8017fc8 <__mcmp+0x14>
 8017fe0:	e7fa      	b.n	8017fd8 <__mcmp+0x24>
 8017fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8017fe6:	e7f7      	b.n	8017fd8 <__mcmp+0x24>

08017fe8 <__mdiff>:
 8017fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fec:	460d      	mov	r5, r1
 8017fee:	4607      	mov	r7, r0
 8017ff0:	4611      	mov	r1, r2
 8017ff2:	4628      	mov	r0, r5
 8017ff4:	4614      	mov	r4, r2
 8017ff6:	f7ff ffdd 	bl	8017fb4 <__mcmp>
 8017ffa:	1e06      	subs	r6, r0, #0
 8017ffc:	d108      	bne.n	8018010 <__mdiff+0x28>
 8017ffe:	4631      	mov	r1, r6
 8018000:	4638      	mov	r0, r7
 8018002:	f7ff fd83 	bl	8017b0c <_Balloc>
 8018006:	2301      	movs	r3, #1
 8018008:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801800c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018010:	bfa4      	itt	ge
 8018012:	4623      	movge	r3, r4
 8018014:	462c      	movge	r4, r5
 8018016:	4638      	mov	r0, r7
 8018018:	6861      	ldr	r1, [r4, #4]
 801801a:	bfa6      	itte	ge
 801801c:	461d      	movge	r5, r3
 801801e:	2600      	movge	r6, #0
 8018020:	2601      	movlt	r6, #1
 8018022:	f7ff fd73 	bl	8017b0c <_Balloc>
 8018026:	692b      	ldr	r3, [r5, #16]
 8018028:	60c6      	str	r6, [r0, #12]
 801802a:	6926      	ldr	r6, [r4, #16]
 801802c:	f105 0914 	add.w	r9, r5, #20
 8018030:	f104 0214 	add.w	r2, r4, #20
 8018034:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018038:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801803c:	f100 0514 	add.w	r5, r0, #20
 8018040:	f04f 0e00 	mov.w	lr, #0
 8018044:	f852 ab04 	ldr.w	sl, [r2], #4
 8018048:	f859 4b04 	ldr.w	r4, [r9], #4
 801804c:	fa1e f18a 	uxtah	r1, lr, sl
 8018050:	b2a3      	uxth	r3, r4
 8018052:	1ac9      	subs	r1, r1, r3
 8018054:	0c23      	lsrs	r3, r4, #16
 8018056:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801805a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801805e:	b289      	uxth	r1, r1
 8018060:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018064:	45c8      	cmp	r8, r9
 8018066:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801806a:	4694      	mov	ip, r2
 801806c:	f845 3b04 	str.w	r3, [r5], #4
 8018070:	d8e8      	bhi.n	8018044 <__mdiff+0x5c>
 8018072:	45bc      	cmp	ip, r7
 8018074:	d304      	bcc.n	8018080 <__mdiff+0x98>
 8018076:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801807a:	b183      	cbz	r3, 801809e <__mdiff+0xb6>
 801807c:	6106      	str	r6, [r0, #16]
 801807e:	e7c5      	b.n	801800c <__mdiff+0x24>
 8018080:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018084:	fa1e f381 	uxtah	r3, lr, r1
 8018088:	141a      	asrs	r2, r3, #16
 801808a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801808e:	b29b      	uxth	r3, r3
 8018090:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018094:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018098:	f845 3b04 	str.w	r3, [r5], #4
 801809c:	e7e9      	b.n	8018072 <__mdiff+0x8a>
 801809e:	3e01      	subs	r6, #1
 80180a0:	e7e9      	b.n	8018076 <__mdiff+0x8e>
	...

080180a4 <__ulp>:
 80180a4:	4b12      	ldr	r3, [pc, #72]	; (80180f0 <__ulp+0x4c>)
 80180a6:	ee10 2a90 	vmov	r2, s1
 80180aa:	401a      	ands	r2, r3
 80180ac:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	dd04      	ble.n	80180be <__ulp+0x1a>
 80180b4:	2000      	movs	r0, #0
 80180b6:	4619      	mov	r1, r3
 80180b8:	ec41 0b10 	vmov	d0, r0, r1
 80180bc:	4770      	bx	lr
 80180be:	425b      	negs	r3, r3
 80180c0:	151b      	asrs	r3, r3, #20
 80180c2:	2b13      	cmp	r3, #19
 80180c4:	f04f 0000 	mov.w	r0, #0
 80180c8:	f04f 0100 	mov.w	r1, #0
 80180cc:	dc04      	bgt.n	80180d8 <__ulp+0x34>
 80180ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80180d2:	fa42 f103 	asr.w	r1, r2, r3
 80180d6:	e7ef      	b.n	80180b8 <__ulp+0x14>
 80180d8:	3b14      	subs	r3, #20
 80180da:	2b1e      	cmp	r3, #30
 80180dc:	f04f 0201 	mov.w	r2, #1
 80180e0:	bfda      	itte	le
 80180e2:	f1c3 031f 	rsble	r3, r3, #31
 80180e6:	fa02 f303 	lslle.w	r3, r2, r3
 80180ea:	4613      	movgt	r3, r2
 80180ec:	4618      	mov	r0, r3
 80180ee:	e7e3      	b.n	80180b8 <__ulp+0x14>
 80180f0:	7ff00000 	.word	0x7ff00000

080180f4 <__b2d>:
 80180f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180f6:	6905      	ldr	r5, [r0, #16]
 80180f8:	f100 0714 	add.w	r7, r0, #20
 80180fc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018100:	1f2e      	subs	r6, r5, #4
 8018102:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018106:	4620      	mov	r0, r4
 8018108:	f7ff fdc4 	bl	8017c94 <__hi0bits>
 801810c:	f1c0 0320 	rsb	r3, r0, #32
 8018110:	280a      	cmp	r0, #10
 8018112:	600b      	str	r3, [r1, #0]
 8018114:	f8df c074 	ldr.w	ip, [pc, #116]	; 801818c <__b2d+0x98>
 8018118:	dc14      	bgt.n	8018144 <__b2d+0x50>
 801811a:	f1c0 0e0b 	rsb	lr, r0, #11
 801811e:	fa24 f10e 	lsr.w	r1, r4, lr
 8018122:	42b7      	cmp	r7, r6
 8018124:	ea41 030c 	orr.w	r3, r1, ip
 8018128:	bf34      	ite	cc
 801812a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801812e:	2100      	movcs	r1, #0
 8018130:	3015      	adds	r0, #21
 8018132:	fa04 f000 	lsl.w	r0, r4, r0
 8018136:	fa21 f10e 	lsr.w	r1, r1, lr
 801813a:	ea40 0201 	orr.w	r2, r0, r1
 801813e:	ec43 2b10 	vmov	d0, r2, r3
 8018142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018144:	42b7      	cmp	r7, r6
 8018146:	bf3a      	itte	cc
 8018148:	f1a5 0608 	subcc.w	r6, r5, #8
 801814c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018150:	2100      	movcs	r1, #0
 8018152:	380b      	subs	r0, #11
 8018154:	d015      	beq.n	8018182 <__b2d+0x8e>
 8018156:	4084      	lsls	r4, r0
 8018158:	f1c0 0520 	rsb	r5, r0, #32
 801815c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018160:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018164:	42be      	cmp	r6, r7
 8018166:	fa21 fc05 	lsr.w	ip, r1, r5
 801816a:	ea44 030c 	orr.w	r3, r4, ip
 801816e:	bf8c      	ite	hi
 8018170:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018174:	2400      	movls	r4, #0
 8018176:	fa01 f000 	lsl.w	r0, r1, r0
 801817a:	40ec      	lsrs	r4, r5
 801817c:	ea40 0204 	orr.w	r2, r0, r4
 8018180:	e7dd      	b.n	801813e <__b2d+0x4a>
 8018182:	ea44 030c 	orr.w	r3, r4, ip
 8018186:	460a      	mov	r2, r1
 8018188:	e7d9      	b.n	801813e <__b2d+0x4a>
 801818a:	bf00      	nop
 801818c:	3ff00000 	.word	0x3ff00000

08018190 <__d2b>:
 8018190:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018194:	460e      	mov	r6, r1
 8018196:	2101      	movs	r1, #1
 8018198:	ec59 8b10 	vmov	r8, r9, d0
 801819c:	4615      	mov	r5, r2
 801819e:	f7ff fcb5 	bl	8017b0c <_Balloc>
 80181a2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80181a6:	4607      	mov	r7, r0
 80181a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80181ac:	bb34      	cbnz	r4, 80181fc <__d2b+0x6c>
 80181ae:	9301      	str	r3, [sp, #4]
 80181b0:	f1b8 0300 	subs.w	r3, r8, #0
 80181b4:	d027      	beq.n	8018206 <__d2b+0x76>
 80181b6:	a802      	add	r0, sp, #8
 80181b8:	f840 3d08 	str.w	r3, [r0, #-8]!
 80181bc:	f7ff fd89 	bl	8017cd2 <__lo0bits>
 80181c0:	9900      	ldr	r1, [sp, #0]
 80181c2:	b1f0      	cbz	r0, 8018202 <__d2b+0x72>
 80181c4:	9a01      	ldr	r2, [sp, #4]
 80181c6:	f1c0 0320 	rsb	r3, r0, #32
 80181ca:	fa02 f303 	lsl.w	r3, r2, r3
 80181ce:	430b      	orrs	r3, r1
 80181d0:	40c2      	lsrs	r2, r0
 80181d2:	617b      	str	r3, [r7, #20]
 80181d4:	9201      	str	r2, [sp, #4]
 80181d6:	9b01      	ldr	r3, [sp, #4]
 80181d8:	61bb      	str	r3, [r7, #24]
 80181da:	2b00      	cmp	r3, #0
 80181dc:	bf14      	ite	ne
 80181de:	2102      	movne	r1, #2
 80181e0:	2101      	moveq	r1, #1
 80181e2:	6139      	str	r1, [r7, #16]
 80181e4:	b1c4      	cbz	r4, 8018218 <__d2b+0x88>
 80181e6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80181ea:	4404      	add	r4, r0
 80181ec:	6034      	str	r4, [r6, #0]
 80181ee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80181f2:	6028      	str	r0, [r5, #0]
 80181f4:	4638      	mov	r0, r7
 80181f6:	b003      	add	sp, #12
 80181f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018200:	e7d5      	b.n	80181ae <__d2b+0x1e>
 8018202:	6179      	str	r1, [r7, #20]
 8018204:	e7e7      	b.n	80181d6 <__d2b+0x46>
 8018206:	a801      	add	r0, sp, #4
 8018208:	f7ff fd63 	bl	8017cd2 <__lo0bits>
 801820c:	9b01      	ldr	r3, [sp, #4]
 801820e:	617b      	str	r3, [r7, #20]
 8018210:	2101      	movs	r1, #1
 8018212:	6139      	str	r1, [r7, #16]
 8018214:	3020      	adds	r0, #32
 8018216:	e7e5      	b.n	80181e4 <__d2b+0x54>
 8018218:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801821c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018220:	6030      	str	r0, [r6, #0]
 8018222:	6918      	ldr	r0, [r3, #16]
 8018224:	f7ff fd36 	bl	8017c94 <__hi0bits>
 8018228:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801822c:	e7e1      	b.n	80181f2 <__d2b+0x62>

0801822e <__ratio>:
 801822e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018232:	4688      	mov	r8, r1
 8018234:	4669      	mov	r1, sp
 8018236:	4681      	mov	r9, r0
 8018238:	f7ff ff5c 	bl	80180f4 <__b2d>
 801823c:	a901      	add	r1, sp, #4
 801823e:	4640      	mov	r0, r8
 8018240:	ec57 6b10 	vmov	r6, r7, d0
 8018244:	f7ff ff56 	bl	80180f4 <__b2d>
 8018248:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801824c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018250:	eba3 0c02 	sub.w	ip, r3, r2
 8018254:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018258:	1a9b      	subs	r3, r3, r2
 801825a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801825e:	ec5b ab10 	vmov	sl, fp, d0
 8018262:	2b00      	cmp	r3, #0
 8018264:	bfce      	itee	gt
 8018266:	463a      	movgt	r2, r7
 8018268:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801826c:	465a      	movle	r2, fp
 801826e:	4659      	mov	r1, fp
 8018270:	463d      	mov	r5, r7
 8018272:	bfd4      	ite	le
 8018274:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018278:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801827c:	4630      	mov	r0, r6
 801827e:	ee10 2a10 	vmov	r2, s0
 8018282:	460b      	mov	r3, r1
 8018284:	4629      	mov	r1, r5
 8018286:	f7e8 faf9 	bl	800087c <__aeabi_ddiv>
 801828a:	ec41 0b10 	vmov	d0, r0, r1
 801828e:	b003      	add	sp, #12
 8018290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018294 <__copybits>:
 8018294:	3901      	subs	r1, #1
 8018296:	b510      	push	{r4, lr}
 8018298:	1149      	asrs	r1, r1, #5
 801829a:	6914      	ldr	r4, [r2, #16]
 801829c:	3101      	adds	r1, #1
 801829e:	f102 0314 	add.w	r3, r2, #20
 80182a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80182a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80182aa:	42a3      	cmp	r3, r4
 80182ac:	4602      	mov	r2, r0
 80182ae:	d303      	bcc.n	80182b8 <__copybits+0x24>
 80182b0:	2300      	movs	r3, #0
 80182b2:	428a      	cmp	r2, r1
 80182b4:	d305      	bcc.n	80182c2 <__copybits+0x2e>
 80182b6:	bd10      	pop	{r4, pc}
 80182b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80182bc:	f840 2b04 	str.w	r2, [r0], #4
 80182c0:	e7f3      	b.n	80182aa <__copybits+0x16>
 80182c2:	f842 3b04 	str.w	r3, [r2], #4
 80182c6:	e7f4      	b.n	80182b2 <__copybits+0x1e>

080182c8 <__any_on>:
 80182c8:	f100 0214 	add.w	r2, r0, #20
 80182cc:	6900      	ldr	r0, [r0, #16]
 80182ce:	114b      	asrs	r3, r1, #5
 80182d0:	4298      	cmp	r0, r3
 80182d2:	b510      	push	{r4, lr}
 80182d4:	db11      	blt.n	80182fa <__any_on+0x32>
 80182d6:	dd0a      	ble.n	80182ee <__any_on+0x26>
 80182d8:	f011 011f 	ands.w	r1, r1, #31
 80182dc:	d007      	beq.n	80182ee <__any_on+0x26>
 80182de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80182e2:	fa24 f001 	lsr.w	r0, r4, r1
 80182e6:	fa00 f101 	lsl.w	r1, r0, r1
 80182ea:	428c      	cmp	r4, r1
 80182ec:	d10b      	bne.n	8018306 <__any_on+0x3e>
 80182ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80182f2:	4293      	cmp	r3, r2
 80182f4:	d803      	bhi.n	80182fe <__any_on+0x36>
 80182f6:	2000      	movs	r0, #0
 80182f8:	bd10      	pop	{r4, pc}
 80182fa:	4603      	mov	r3, r0
 80182fc:	e7f7      	b.n	80182ee <__any_on+0x26>
 80182fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018302:	2900      	cmp	r1, #0
 8018304:	d0f5      	beq.n	80182f2 <__any_on+0x2a>
 8018306:	2001      	movs	r0, #1
 8018308:	e7f6      	b.n	80182f8 <__any_on+0x30>

0801830a <_calloc_r>:
 801830a:	b538      	push	{r3, r4, r5, lr}
 801830c:	fb02 f401 	mul.w	r4, r2, r1
 8018310:	4621      	mov	r1, r4
 8018312:	f000 f857 	bl	80183c4 <_malloc_r>
 8018316:	4605      	mov	r5, r0
 8018318:	b118      	cbz	r0, 8018322 <_calloc_r+0x18>
 801831a:	4622      	mov	r2, r4
 801831c:	2100      	movs	r1, #0
 801831e:	f7fc fcaa 	bl	8014c76 <memset>
 8018322:	4628      	mov	r0, r5
 8018324:	bd38      	pop	{r3, r4, r5, pc}
	...

08018328 <_free_r>:
 8018328:	b538      	push	{r3, r4, r5, lr}
 801832a:	4605      	mov	r5, r0
 801832c:	2900      	cmp	r1, #0
 801832e:	d045      	beq.n	80183bc <_free_r+0x94>
 8018330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018334:	1f0c      	subs	r4, r1, #4
 8018336:	2b00      	cmp	r3, #0
 8018338:	bfb8      	it	lt
 801833a:	18e4      	addlt	r4, r4, r3
 801833c:	f000 fe30 	bl	8018fa0 <__malloc_lock>
 8018340:	4a1f      	ldr	r2, [pc, #124]	; (80183c0 <_free_r+0x98>)
 8018342:	6813      	ldr	r3, [r2, #0]
 8018344:	4610      	mov	r0, r2
 8018346:	b933      	cbnz	r3, 8018356 <_free_r+0x2e>
 8018348:	6063      	str	r3, [r4, #4]
 801834a:	6014      	str	r4, [r2, #0]
 801834c:	4628      	mov	r0, r5
 801834e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018352:	f000 be26 	b.w	8018fa2 <__malloc_unlock>
 8018356:	42a3      	cmp	r3, r4
 8018358:	d90c      	bls.n	8018374 <_free_r+0x4c>
 801835a:	6821      	ldr	r1, [r4, #0]
 801835c:	1862      	adds	r2, r4, r1
 801835e:	4293      	cmp	r3, r2
 8018360:	bf04      	itt	eq
 8018362:	681a      	ldreq	r2, [r3, #0]
 8018364:	685b      	ldreq	r3, [r3, #4]
 8018366:	6063      	str	r3, [r4, #4]
 8018368:	bf04      	itt	eq
 801836a:	1852      	addeq	r2, r2, r1
 801836c:	6022      	streq	r2, [r4, #0]
 801836e:	6004      	str	r4, [r0, #0]
 8018370:	e7ec      	b.n	801834c <_free_r+0x24>
 8018372:	4613      	mov	r3, r2
 8018374:	685a      	ldr	r2, [r3, #4]
 8018376:	b10a      	cbz	r2, 801837c <_free_r+0x54>
 8018378:	42a2      	cmp	r2, r4
 801837a:	d9fa      	bls.n	8018372 <_free_r+0x4a>
 801837c:	6819      	ldr	r1, [r3, #0]
 801837e:	1858      	adds	r0, r3, r1
 8018380:	42a0      	cmp	r0, r4
 8018382:	d10b      	bne.n	801839c <_free_r+0x74>
 8018384:	6820      	ldr	r0, [r4, #0]
 8018386:	4401      	add	r1, r0
 8018388:	1858      	adds	r0, r3, r1
 801838a:	4282      	cmp	r2, r0
 801838c:	6019      	str	r1, [r3, #0]
 801838e:	d1dd      	bne.n	801834c <_free_r+0x24>
 8018390:	6810      	ldr	r0, [r2, #0]
 8018392:	6852      	ldr	r2, [r2, #4]
 8018394:	605a      	str	r2, [r3, #4]
 8018396:	4401      	add	r1, r0
 8018398:	6019      	str	r1, [r3, #0]
 801839a:	e7d7      	b.n	801834c <_free_r+0x24>
 801839c:	d902      	bls.n	80183a4 <_free_r+0x7c>
 801839e:	230c      	movs	r3, #12
 80183a0:	602b      	str	r3, [r5, #0]
 80183a2:	e7d3      	b.n	801834c <_free_r+0x24>
 80183a4:	6820      	ldr	r0, [r4, #0]
 80183a6:	1821      	adds	r1, r4, r0
 80183a8:	428a      	cmp	r2, r1
 80183aa:	bf04      	itt	eq
 80183ac:	6811      	ldreq	r1, [r2, #0]
 80183ae:	6852      	ldreq	r2, [r2, #4]
 80183b0:	6062      	str	r2, [r4, #4]
 80183b2:	bf04      	itt	eq
 80183b4:	1809      	addeq	r1, r1, r0
 80183b6:	6021      	streq	r1, [r4, #0]
 80183b8:	605c      	str	r4, [r3, #4]
 80183ba:	e7c7      	b.n	801834c <_free_r+0x24>
 80183bc:	bd38      	pop	{r3, r4, r5, pc}
 80183be:	bf00      	nop
 80183c0:	2003c4d0 	.word	0x2003c4d0

080183c4 <_malloc_r>:
 80183c4:	b570      	push	{r4, r5, r6, lr}
 80183c6:	1ccd      	adds	r5, r1, #3
 80183c8:	f025 0503 	bic.w	r5, r5, #3
 80183cc:	3508      	adds	r5, #8
 80183ce:	2d0c      	cmp	r5, #12
 80183d0:	bf38      	it	cc
 80183d2:	250c      	movcc	r5, #12
 80183d4:	2d00      	cmp	r5, #0
 80183d6:	4606      	mov	r6, r0
 80183d8:	db01      	blt.n	80183de <_malloc_r+0x1a>
 80183da:	42a9      	cmp	r1, r5
 80183dc:	d903      	bls.n	80183e6 <_malloc_r+0x22>
 80183de:	230c      	movs	r3, #12
 80183e0:	6033      	str	r3, [r6, #0]
 80183e2:	2000      	movs	r0, #0
 80183e4:	bd70      	pop	{r4, r5, r6, pc}
 80183e6:	f000 fddb 	bl	8018fa0 <__malloc_lock>
 80183ea:	4a21      	ldr	r2, [pc, #132]	; (8018470 <_malloc_r+0xac>)
 80183ec:	6814      	ldr	r4, [r2, #0]
 80183ee:	4621      	mov	r1, r4
 80183f0:	b991      	cbnz	r1, 8018418 <_malloc_r+0x54>
 80183f2:	4c20      	ldr	r4, [pc, #128]	; (8018474 <_malloc_r+0xb0>)
 80183f4:	6823      	ldr	r3, [r4, #0]
 80183f6:	b91b      	cbnz	r3, 8018400 <_malloc_r+0x3c>
 80183f8:	4630      	mov	r0, r6
 80183fa:	f000 fc91 	bl	8018d20 <_sbrk_r>
 80183fe:	6020      	str	r0, [r4, #0]
 8018400:	4629      	mov	r1, r5
 8018402:	4630      	mov	r0, r6
 8018404:	f000 fc8c 	bl	8018d20 <_sbrk_r>
 8018408:	1c43      	adds	r3, r0, #1
 801840a:	d124      	bne.n	8018456 <_malloc_r+0x92>
 801840c:	230c      	movs	r3, #12
 801840e:	6033      	str	r3, [r6, #0]
 8018410:	4630      	mov	r0, r6
 8018412:	f000 fdc6 	bl	8018fa2 <__malloc_unlock>
 8018416:	e7e4      	b.n	80183e2 <_malloc_r+0x1e>
 8018418:	680b      	ldr	r3, [r1, #0]
 801841a:	1b5b      	subs	r3, r3, r5
 801841c:	d418      	bmi.n	8018450 <_malloc_r+0x8c>
 801841e:	2b0b      	cmp	r3, #11
 8018420:	d90f      	bls.n	8018442 <_malloc_r+0x7e>
 8018422:	600b      	str	r3, [r1, #0]
 8018424:	50cd      	str	r5, [r1, r3]
 8018426:	18cc      	adds	r4, r1, r3
 8018428:	4630      	mov	r0, r6
 801842a:	f000 fdba 	bl	8018fa2 <__malloc_unlock>
 801842e:	f104 000b 	add.w	r0, r4, #11
 8018432:	1d23      	adds	r3, r4, #4
 8018434:	f020 0007 	bic.w	r0, r0, #7
 8018438:	1ac3      	subs	r3, r0, r3
 801843a:	d0d3      	beq.n	80183e4 <_malloc_r+0x20>
 801843c:	425a      	negs	r2, r3
 801843e:	50e2      	str	r2, [r4, r3]
 8018440:	e7d0      	b.n	80183e4 <_malloc_r+0x20>
 8018442:	428c      	cmp	r4, r1
 8018444:	684b      	ldr	r3, [r1, #4]
 8018446:	bf16      	itet	ne
 8018448:	6063      	strne	r3, [r4, #4]
 801844a:	6013      	streq	r3, [r2, #0]
 801844c:	460c      	movne	r4, r1
 801844e:	e7eb      	b.n	8018428 <_malloc_r+0x64>
 8018450:	460c      	mov	r4, r1
 8018452:	6849      	ldr	r1, [r1, #4]
 8018454:	e7cc      	b.n	80183f0 <_malloc_r+0x2c>
 8018456:	1cc4      	adds	r4, r0, #3
 8018458:	f024 0403 	bic.w	r4, r4, #3
 801845c:	42a0      	cmp	r0, r4
 801845e:	d005      	beq.n	801846c <_malloc_r+0xa8>
 8018460:	1a21      	subs	r1, r4, r0
 8018462:	4630      	mov	r0, r6
 8018464:	f000 fc5c 	bl	8018d20 <_sbrk_r>
 8018468:	3001      	adds	r0, #1
 801846a:	d0cf      	beq.n	801840c <_malloc_r+0x48>
 801846c:	6025      	str	r5, [r4, #0]
 801846e:	e7db      	b.n	8018428 <_malloc_r+0x64>
 8018470:	2003c4d0 	.word	0x2003c4d0
 8018474:	2003c4d4 	.word	0x2003c4d4

08018478 <__ssputs_r>:
 8018478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801847c:	688e      	ldr	r6, [r1, #8]
 801847e:	429e      	cmp	r6, r3
 8018480:	4682      	mov	sl, r0
 8018482:	460c      	mov	r4, r1
 8018484:	4690      	mov	r8, r2
 8018486:	4699      	mov	r9, r3
 8018488:	d837      	bhi.n	80184fa <__ssputs_r+0x82>
 801848a:	898a      	ldrh	r2, [r1, #12]
 801848c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018490:	d031      	beq.n	80184f6 <__ssputs_r+0x7e>
 8018492:	6825      	ldr	r5, [r4, #0]
 8018494:	6909      	ldr	r1, [r1, #16]
 8018496:	1a6f      	subs	r7, r5, r1
 8018498:	6965      	ldr	r5, [r4, #20]
 801849a:	2302      	movs	r3, #2
 801849c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80184a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80184a4:	f109 0301 	add.w	r3, r9, #1
 80184a8:	443b      	add	r3, r7
 80184aa:	429d      	cmp	r5, r3
 80184ac:	bf38      	it	cc
 80184ae:	461d      	movcc	r5, r3
 80184b0:	0553      	lsls	r3, r2, #21
 80184b2:	d530      	bpl.n	8018516 <__ssputs_r+0x9e>
 80184b4:	4629      	mov	r1, r5
 80184b6:	f7ff ff85 	bl	80183c4 <_malloc_r>
 80184ba:	4606      	mov	r6, r0
 80184bc:	b950      	cbnz	r0, 80184d4 <__ssputs_r+0x5c>
 80184be:	230c      	movs	r3, #12
 80184c0:	f8ca 3000 	str.w	r3, [sl]
 80184c4:	89a3      	ldrh	r3, [r4, #12]
 80184c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80184ca:	81a3      	strh	r3, [r4, #12]
 80184cc:	f04f 30ff 	mov.w	r0, #4294967295
 80184d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80184d4:	463a      	mov	r2, r7
 80184d6:	6921      	ldr	r1, [r4, #16]
 80184d8:	f7fc fbc2 	bl	8014c60 <memcpy>
 80184dc:	89a3      	ldrh	r3, [r4, #12]
 80184de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80184e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80184e6:	81a3      	strh	r3, [r4, #12]
 80184e8:	6126      	str	r6, [r4, #16]
 80184ea:	6165      	str	r5, [r4, #20]
 80184ec:	443e      	add	r6, r7
 80184ee:	1bed      	subs	r5, r5, r7
 80184f0:	6026      	str	r6, [r4, #0]
 80184f2:	60a5      	str	r5, [r4, #8]
 80184f4:	464e      	mov	r6, r9
 80184f6:	454e      	cmp	r6, r9
 80184f8:	d900      	bls.n	80184fc <__ssputs_r+0x84>
 80184fa:	464e      	mov	r6, r9
 80184fc:	4632      	mov	r2, r6
 80184fe:	4641      	mov	r1, r8
 8018500:	6820      	ldr	r0, [r4, #0]
 8018502:	f000 fd34 	bl	8018f6e <memmove>
 8018506:	68a3      	ldr	r3, [r4, #8]
 8018508:	1b9b      	subs	r3, r3, r6
 801850a:	60a3      	str	r3, [r4, #8]
 801850c:	6823      	ldr	r3, [r4, #0]
 801850e:	441e      	add	r6, r3
 8018510:	6026      	str	r6, [r4, #0]
 8018512:	2000      	movs	r0, #0
 8018514:	e7dc      	b.n	80184d0 <__ssputs_r+0x58>
 8018516:	462a      	mov	r2, r5
 8018518:	f000 fd44 	bl	8018fa4 <_realloc_r>
 801851c:	4606      	mov	r6, r0
 801851e:	2800      	cmp	r0, #0
 8018520:	d1e2      	bne.n	80184e8 <__ssputs_r+0x70>
 8018522:	6921      	ldr	r1, [r4, #16]
 8018524:	4650      	mov	r0, sl
 8018526:	f7ff feff 	bl	8018328 <_free_r>
 801852a:	e7c8      	b.n	80184be <__ssputs_r+0x46>

0801852c <_svfiprintf_r>:
 801852c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018530:	461d      	mov	r5, r3
 8018532:	898b      	ldrh	r3, [r1, #12]
 8018534:	061f      	lsls	r7, r3, #24
 8018536:	b09d      	sub	sp, #116	; 0x74
 8018538:	4680      	mov	r8, r0
 801853a:	460c      	mov	r4, r1
 801853c:	4616      	mov	r6, r2
 801853e:	d50f      	bpl.n	8018560 <_svfiprintf_r+0x34>
 8018540:	690b      	ldr	r3, [r1, #16]
 8018542:	b96b      	cbnz	r3, 8018560 <_svfiprintf_r+0x34>
 8018544:	2140      	movs	r1, #64	; 0x40
 8018546:	f7ff ff3d 	bl	80183c4 <_malloc_r>
 801854a:	6020      	str	r0, [r4, #0]
 801854c:	6120      	str	r0, [r4, #16]
 801854e:	b928      	cbnz	r0, 801855c <_svfiprintf_r+0x30>
 8018550:	230c      	movs	r3, #12
 8018552:	f8c8 3000 	str.w	r3, [r8]
 8018556:	f04f 30ff 	mov.w	r0, #4294967295
 801855a:	e0c8      	b.n	80186ee <_svfiprintf_r+0x1c2>
 801855c:	2340      	movs	r3, #64	; 0x40
 801855e:	6163      	str	r3, [r4, #20]
 8018560:	2300      	movs	r3, #0
 8018562:	9309      	str	r3, [sp, #36]	; 0x24
 8018564:	2320      	movs	r3, #32
 8018566:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801856a:	2330      	movs	r3, #48	; 0x30
 801856c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018570:	9503      	str	r5, [sp, #12]
 8018572:	f04f 0b01 	mov.w	fp, #1
 8018576:	4637      	mov	r7, r6
 8018578:	463d      	mov	r5, r7
 801857a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801857e:	b10b      	cbz	r3, 8018584 <_svfiprintf_r+0x58>
 8018580:	2b25      	cmp	r3, #37	; 0x25
 8018582:	d13e      	bne.n	8018602 <_svfiprintf_r+0xd6>
 8018584:	ebb7 0a06 	subs.w	sl, r7, r6
 8018588:	d00b      	beq.n	80185a2 <_svfiprintf_r+0x76>
 801858a:	4653      	mov	r3, sl
 801858c:	4632      	mov	r2, r6
 801858e:	4621      	mov	r1, r4
 8018590:	4640      	mov	r0, r8
 8018592:	f7ff ff71 	bl	8018478 <__ssputs_r>
 8018596:	3001      	adds	r0, #1
 8018598:	f000 80a4 	beq.w	80186e4 <_svfiprintf_r+0x1b8>
 801859c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801859e:	4453      	add	r3, sl
 80185a0:	9309      	str	r3, [sp, #36]	; 0x24
 80185a2:	783b      	ldrb	r3, [r7, #0]
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	f000 809d 	beq.w	80186e4 <_svfiprintf_r+0x1b8>
 80185aa:	2300      	movs	r3, #0
 80185ac:	f04f 32ff 	mov.w	r2, #4294967295
 80185b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80185b4:	9304      	str	r3, [sp, #16]
 80185b6:	9307      	str	r3, [sp, #28]
 80185b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80185bc:	931a      	str	r3, [sp, #104]	; 0x68
 80185be:	462f      	mov	r7, r5
 80185c0:	2205      	movs	r2, #5
 80185c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80185c6:	4850      	ldr	r0, [pc, #320]	; (8018708 <_svfiprintf_r+0x1dc>)
 80185c8:	f7e7 fe22 	bl	8000210 <memchr>
 80185cc:	9b04      	ldr	r3, [sp, #16]
 80185ce:	b9d0      	cbnz	r0, 8018606 <_svfiprintf_r+0xda>
 80185d0:	06d9      	lsls	r1, r3, #27
 80185d2:	bf44      	itt	mi
 80185d4:	2220      	movmi	r2, #32
 80185d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80185da:	071a      	lsls	r2, r3, #28
 80185dc:	bf44      	itt	mi
 80185de:	222b      	movmi	r2, #43	; 0x2b
 80185e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80185e4:	782a      	ldrb	r2, [r5, #0]
 80185e6:	2a2a      	cmp	r2, #42	; 0x2a
 80185e8:	d015      	beq.n	8018616 <_svfiprintf_r+0xea>
 80185ea:	9a07      	ldr	r2, [sp, #28]
 80185ec:	462f      	mov	r7, r5
 80185ee:	2000      	movs	r0, #0
 80185f0:	250a      	movs	r5, #10
 80185f2:	4639      	mov	r1, r7
 80185f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80185f8:	3b30      	subs	r3, #48	; 0x30
 80185fa:	2b09      	cmp	r3, #9
 80185fc:	d94d      	bls.n	801869a <_svfiprintf_r+0x16e>
 80185fe:	b1b8      	cbz	r0, 8018630 <_svfiprintf_r+0x104>
 8018600:	e00f      	b.n	8018622 <_svfiprintf_r+0xf6>
 8018602:	462f      	mov	r7, r5
 8018604:	e7b8      	b.n	8018578 <_svfiprintf_r+0x4c>
 8018606:	4a40      	ldr	r2, [pc, #256]	; (8018708 <_svfiprintf_r+0x1dc>)
 8018608:	1a80      	subs	r0, r0, r2
 801860a:	fa0b f000 	lsl.w	r0, fp, r0
 801860e:	4318      	orrs	r0, r3
 8018610:	9004      	str	r0, [sp, #16]
 8018612:	463d      	mov	r5, r7
 8018614:	e7d3      	b.n	80185be <_svfiprintf_r+0x92>
 8018616:	9a03      	ldr	r2, [sp, #12]
 8018618:	1d11      	adds	r1, r2, #4
 801861a:	6812      	ldr	r2, [r2, #0]
 801861c:	9103      	str	r1, [sp, #12]
 801861e:	2a00      	cmp	r2, #0
 8018620:	db01      	blt.n	8018626 <_svfiprintf_r+0xfa>
 8018622:	9207      	str	r2, [sp, #28]
 8018624:	e004      	b.n	8018630 <_svfiprintf_r+0x104>
 8018626:	4252      	negs	r2, r2
 8018628:	f043 0302 	orr.w	r3, r3, #2
 801862c:	9207      	str	r2, [sp, #28]
 801862e:	9304      	str	r3, [sp, #16]
 8018630:	783b      	ldrb	r3, [r7, #0]
 8018632:	2b2e      	cmp	r3, #46	; 0x2e
 8018634:	d10c      	bne.n	8018650 <_svfiprintf_r+0x124>
 8018636:	787b      	ldrb	r3, [r7, #1]
 8018638:	2b2a      	cmp	r3, #42	; 0x2a
 801863a:	d133      	bne.n	80186a4 <_svfiprintf_r+0x178>
 801863c:	9b03      	ldr	r3, [sp, #12]
 801863e:	1d1a      	adds	r2, r3, #4
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	9203      	str	r2, [sp, #12]
 8018644:	2b00      	cmp	r3, #0
 8018646:	bfb8      	it	lt
 8018648:	f04f 33ff 	movlt.w	r3, #4294967295
 801864c:	3702      	adds	r7, #2
 801864e:	9305      	str	r3, [sp, #20]
 8018650:	4d2e      	ldr	r5, [pc, #184]	; (801870c <_svfiprintf_r+0x1e0>)
 8018652:	7839      	ldrb	r1, [r7, #0]
 8018654:	2203      	movs	r2, #3
 8018656:	4628      	mov	r0, r5
 8018658:	f7e7 fdda 	bl	8000210 <memchr>
 801865c:	b138      	cbz	r0, 801866e <_svfiprintf_r+0x142>
 801865e:	2340      	movs	r3, #64	; 0x40
 8018660:	1b40      	subs	r0, r0, r5
 8018662:	fa03 f000 	lsl.w	r0, r3, r0
 8018666:	9b04      	ldr	r3, [sp, #16]
 8018668:	4303      	orrs	r3, r0
 801866a:	3701      	adds	r7, #1
 801866c:	9304      	str	r3, [sp, #16]
 801866e:	7839      	ldrb	r1, [r7, #0]
 8018670:	4827      	ldr	r0, [pc, #156]	; (8018710 <_svfiprintf_r+0x1e4>)
 8018672:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018676:	2206      	movs	r2, #6
 8018678:	1c7e      	adds	r6, r7, #1
 801867a:	f7e7 fdc9 	bl	8000210 <memchr>
 801867e:	2800      	cmp	r0, #0
 8018680:	d038      	beq.n	80186f4 <_svfiprintf_r+0x1c8>
 8018682:	4b24      	ldr	r3, [pc, #144]	; (8018714 <_svfiprintf_r+0x1e8>)
 8018684:	bb13      	cbnz	r3, 80186cc <_svfiprintf_r+0x1a0>
 8018686:	9b03      	ldr	r3, [sp, #12]
 8018688:	3307      	adds	r3, #7
 801868a:	f023 0307 	bic.w	r3, r3, #7
 801868e:	3308      	adds	r3, #8
 8018690:	9303      	str	r3, [sp, #12]
 8018692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018694:	444b      	add	r3, r9
 8018696:	9309      	str	r3, [sp, #36]	; 0x24
 8018698:	e76d      	b.n	8018576 <_svfiprintf_r+0x4a>
 801869a:	fb05 3202 	mla	r2, r5, r2, r3
 801869e:	2001      	movs	r0, #1
 80186a0:	460f      	mov	r7, r1
 80186a2:	e7a6      	b.n	80185f2 <_svfiprintf_r+0xc6>
 80186a4:	2300      	movs	r3, #0
 80186a6:	3701      	adds	r7, #1
 80186a8:	9305      	str	r3, [sp, #20]
 80186aa:	4619      	mov	r1, r3
 80186ac:	250a      	movs	r5, #10
 80186ae:	4638      	mov	r0, r7
 80186b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80186b4:	3a30      	subs	r2, #48	; 0x30
 80186b6:	2a09      	cmp	r2, #9
 80186b8:	d903      	bls.n	80186c2 <_svfiprintf_r+0x196>
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d0c8      	beq.n	8018650 <_svfiprintf_r+0x124>
 80186be:	9105      	str	r1, [sp, #20]
 80186c0:	e7c6      	b.n	8018650 <_svfiprintf_r+0x124>
 80186c2:	fb05 2101 	mla	r1, r5, r1, r2
 80186c6:	2301      	movs	r3, #1
 80186c8:	4607      	mov	r7, r0
 80186ca:	e7f0      	b.n	80186ae <_svfiprintf_r+0x182>
 80186cc:	ab03      	add	r3, sp, #12
 80186ce:	9300      	str	r3, [sp, #0]
 80186d0:	4622      	mov	r2, r4
 80186d2:	4b11      	ldr	r3, [pc, #68]	; (8018718 <_svfiprintf_r+0x1ec>)
 80186d4:	a904      	add	r1, sp, #16
 80186d6:	4640      	mov	r0, r8
 80186d8:	f7fc fb6a 	bl	8014db0 <_printf_float>
 80186dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80186e0:	4681      	mov	r9, r0
 80186e2:	d1d6      	bne.n	8018692 <_svfiprintf_r+0x166>
 80186e4:	89a3      	ldrh	r3, [r4, #12]
 80186e6:	065b      	lsls	r3, r3, #25
 80186e8:	f53f af35 	bmi.w	8018556 <_svfiprintf_r+0x2a>
 80186ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80186ee:	b01d      	add	sp, #116	; 0x74
 80186f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186f4:	ab03      	add	r3, sp, #12
 80186f6:	9300      	str	r3, [sp, #0]
 80186f8:	4622      	mov	r2, r4
 80186fa:	4b07      	ldr	r3, [pc, #28]	; (8018718 <_svfiprintf_r+0x1ec>)
 80186fc:	a904      	add	r1, sp, #16
 80186fe:	4640      	mov	r0, r8
 8018700:	f7fc fe0c 	bl	801531c <_printf_i>
 8018704:	e7ea      	b.n	80186dc <_svfiprintf_r+0x1b0>
 8018706:	bf00      	nop
 8018708:	08019a9c 	.word	0x08019a9c
 801870c:	08019aa2 	.word	0x08019aa2
 8018710:	08019aa6 	.word	0x08019aa6
 8018714:	08014db1 	.word	0x08014db1
 8018718:	08018479 	.word	0x08018479

0801871c <_sungetc_r>:
 801871c:	b538      	push	{r3, r4, r5, lr}
 801871e:	1c4b      	adds	r3, r1, #1
 8018720:	4614      	mov	r4, r2
 8018722:	d103      	bne.n	801872c <_sungetc_r+0x10>
 8018724:	f04f 35ff 	mov.w	r5, #4294967295
 8018728:	4628      	mov	r0, r5
 801872a:	bd38      	pop	{r3, r4, r5, pc}
 801872c:	8993      	ldrh	r3, [r2, #12]
 801872e:	f023 0320 	bic.w	r3, r3, #32
 8018732:	8193      	strh	r3, [r2, #12]
 8018734:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018736:	6852      	ldr	r2, [r2, #4]
 8018738:	b2cd      	uxtb	r5, r1
 801873a:	b18b      	cbz	r3, 8018760 <_sungetc_r+0x44>
 801873c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801873e:	4293      	cmp	r3, r2
 8018740:	dd08      	ble.n	8018754 <_sungetc_r+0x38>
 8018742:	6823      	ldr	r3, [r4, #0]
 8018744:	1e5a      	subs	r2, r3, #1
 8018746:	6022      	str	r2, [r4, #0]
 8018748:	f803 5c01 	strb.w	r5, [r3, #-1]
 801874c:	6863      	ldr	r3, [r4, #4]
 801874e:	3301      	adds	r3, #1
 8018750:	6063      	str	r3, [r4, #4]
 8018752:	e7e9      	b.n	8018728 <_sungetc_r+0xc>
 8018754:	4621      	mov	r1, r4
 8018756:	f000 fbc3 	bl	8018ee0 <__submore>
 801875a:	2800      	cmp	r0, #0
 801875c:	d0f1      	beq.n	8018742 <_sungetc_r+0x26>
 801875e:	e7e1      	b.n	8018724 <_sungetc_r+0x8>
 8018760:	6921      	ldr	r1, [r4, #16]
 8018762:	6823      	ldr	r3, [r4, #0]
 8018764:	b151      	cbz	r1, 801877c <_sungetc_r+0x60>
 8018766:	4299      	cmp	r1, r3
 8018768:	d208      	bcs.n	801877c <_sungetc_r+0x60>
 801876a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801876e:	42a9      	cmp	r1, r5
 8018770:	d104      	bne.n	801877c <_sungetc_r+0x60>
 8018772:	3b01      	subs	r3, #1
 8018774:	3201      	adds	r2, #1
 8018776:	6023      	str	r3, [r4, #0]
 8018778:	6062      	str	r2, [r4, #4]
 801877a:	e7d5      	b.n	8018728 <_sungetc_r+0xc>
 801877c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018784:	6363      	str	r3, [r4, #52]	; 0x34
 8018786:	2303      	movs	r3, #3
 8018788:	63a3      	str	r3, [r4, #56]	; 0x38
 801878a:	4623      	mov	r3, r4
 801878c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018790:	6023      	str	r3, [r4, #0]
 8018792:	2301      	movs	r3, #1
 8018794:	e7dc      	b.n	8018750 <_sungetc_r+0x34>

08018796 <__ssrefill_r>:
 8018796:	b510      	push	{r4, lr}
 8018798:	460c      	mov	r4, r1
 801879a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801879c:	b169      	cbz	r1, 80187ba <__ssrefill_r+0x24>
 801879e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80187a2:	4299      	cmp	r1, r3
 80187a4:	d001      	beq.n	80187aa <__ssrefill_r+0x14>
 80187a6:	f7ff fdbf 	bl	8018328 <_free_r>
 80187aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80187ac:	6063      	str	r3, [r4, #4]
 80187ae:	2000      	movs	r0, #0
 80187b0:	6360      	str	r0, [r4, #52]	; 0x34
 80187b2:	b113      	cbz	r3, 80187ba <__ssrefill_r+0x24>
 80187b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80187b6:	6023      	str	r3, [r4, #0]
 80187b8:	bd10      	pop	{r4, pc}
 80187ba:	6923      	ldr	r3, [r4, #16]
 80187bc:	6023      	str	r3, [r4, #0]
 80187be:	2300      	movs	r3, #0
 80187c0:	6063      	str	r3, [r4, #4]
 80187c2:	89a3      	ldrh	r3, [r4, #12]
 80187c4:	f043 0320 	orr.w	r3, r3, #32
 80187c8:	81a3      	strh	r3, [r4, #12]
 80187ca:	f04f 30ff 	mov.w	r0, #4294967295
 80187ce:	e7f3      	b.n	80187b8 <__ssrefill_r+0x22>

080187d0 <__ssvfiscanf_r>:
 80187d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187d4:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80187d8:	460c      	mov	r4, r1
 80187da:	2100      	movs	r1, #0
 80187dc:	9144      	str	r1, [sp, #272]	; 0x110
 80187de:	9145      	str	r1, [sp, #276]	; 0x114
 80187e0:	499f      	ldr	r1, [pc, #636]	; (8018a60 <__ssvfiscanf_r+0x290>)
 80187e2:	91a0      	str	r1, [sp, #640]	; 0x280
 80187e4:	f10d 0804 	add.w	r8, sp, #4
 80187e8:	499e      	ldr	r1, [pc, #632]	; (8018a64 <__ssvfiscanf_r+0x294>)
 80187ea:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8018a68 <__ssvfiscanf_r+0x298>
 80187ee:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80187f2:	4606      	mov	r6, r0
 80187f4:	4692      	mov	sl, r2
 80187f6:	91a1      	str	r1, [sp, #644]	; 0x284
 80187f8:	9300      	str	r3, [sp, #0]
 80187fa:	270a      	movs	r7, #10
 80187fc:	f89a 3000 	ldrb.w	r3, [sl]
 8018800:	2b00      	cmp	r3, #0
 8018802:	f000 812a 	beq.w	8018a5a <__ssvfiscanf_r+0x28a>
 8018806:	4655      	mov	r5, sl
 8018808:	f7ff f948 	bl	8017a9c <__locale_ctype_ptr>
 801880c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8018810:	4458      	add	r0, fp
 8018812:	7843      	ldrb	r3, [r0, #1]
 8018814:	f013 0308 	ands.w	r3, r3, #8
 8018818:	d01c      	beq.n	8018854 <__ssvfiscanf_r+0x84>
 801881a:	6863      	ldr	r3, [r4, #4]
 801881c:	2b00      	cmp	r3, #0
 801881e:	dd12      	ble.n	8018846 <__ssvfiscanf_r+0x76>
 8018820:	f7ff f93c 	bl	8017a9c <__locale_ctype_ptr>
 8018824:	6823      	ldr	r3, [r4, #0]
 8018826:	781a      	ldrb	r2, [r3, #0]
 8018828:	4410      	add	r0, r2
 801882a:	7842      	ldrb	r2, [r0, #1]
 801882c:	0712      	lsls	r2, r2, #28
 801882e:	d401      	bmi.n	8018834 <__ssvfiscanf_r+0x64>
 8018830:	46aa      	mov	sl, r5
 8018832:	e7e3      	b.n	80187fc <__ssvfiscanf_r+0x2c>
 8018834:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018836:	3201      	adds	r2, #1
 8018838:	9245      	str	r2, [sp, #276]	; 0x114
 801883a:	6862      	ldr	r2, [r4, #4]
 801883c:	3301      	adds	r3, #1
 801883e:	3a01      	subs	r2, #1
 8018840:	6062      	str	r2, [r4, #4]
 8018842:	6023      	str	r3, [r4, #0]
 8018844:	e7e9      	b.n	801881a <__ssvfiscanf_r+0x4a>
 8018846:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018848:	4621      	mov	r1, r4
 801884a:	4630      	mov	r0, r6
 801884c:	4798      	blx	r3
 801884e:	2800      	cmp	r0, #0
 8018850:	d0e6      	beq.n	8018820 <__ssvfiscanf_r+0x50>
 8018852:	e7ed      	b.n	8018830 <__ssvfiscanf_r+0x60>
 8018854:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8018858:	f040 8082 	bne.w	8018960 <__ssvfiscanf_r+0x190>
 801885c:	9343      	str	r3, [sp, #268]	; 0x10c
 801885e:	9341      	str	r3, [sp, #260]	; 0x104
 8018860:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8018864:	2b2a      	cmp	r3, #42	; 0x2a
 8018866:	d103      	bne.n	8018870 <__ssvfiscanf_r+0xa0>
 8018868:	2310      	movs	r3, #16
 801886a:	9341      	str	r3, [sp, #260]	; 0x104
 801886c:	f10a 0502 	add.w	r5, sl, #2
 8018870:	46aa      	mov	sl, r5
 8018872:	f815 1b01 	ldrb.w	r1, [r5], #1
 8018876:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801887a:	2a09      	cmp	r2, #9
 801887c:	d922      	bls.n	80188c4 <__ssvfiscanf_r+0xf4>
 801887e:	2203      	movs	r2, #3
 8018880:	4879      	ldr	r0, [pc, #484]	; (8018a68 <__ssvfiscanf_r+0x298>)
 8018882:	f7e7 fcc5 	bl	8000210 <memchr>
 8018886:	b138      	cbz	r0, 8018898 <__ssvfiscanf_r+0xc8>
 8018888:	eba0 0309 	sub.w	r3, r0, r9
 801888c:	2001      	movs	r0, #1
 801888e:	4098      	lsls	r0, r3
 8018890:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018892:	4318      	orrs	r0, r3
 8018894:	9041      	str	r0, [sp, #260]	; 0x104
 8018896:	46aa      	mov	sl, r5
 8018898:	f89a 3000 	ldrb.w	r3, [sl]
 801889c:	2b67      	cmp	r3, #103	; 0x67
 801889e:	f10a 0501 	add.w	r5, sl, #1
 80188a2:	d82b      	bhi.n	80188fc <__ssvfiscanf_r+0x12c>
 80188a4:	2b65      	cmp	r3, #101	; 0x65
 80188a6:	f080 809f 	bcs.w	80189e8 <__ssvfiscanf_r+0x218>
 80188aa:	2b47      	cmp	r3, #71	; 0x47
 80188ac:	d810      	bhi.n	80188d0 <__ssvfiscanf_r+0x100>
 80188ae:	2b45      	cmp	r3, #69	; 0x45
 80188b0:	f080 809a 	bcs.w	80189e8 <__ssvfiscanf_r+0x218>
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d06c      	beq.n	8018992 <__ssvfiscanf_r+0x1c2>
 80188b8:	2b25      	cmp	r3, #37	; 0x25
 80188ba:	d051      	beq.n	8018960 <__ssvfiscanf_r+0x190>
 80188bc:	2303      	movs	r3, #3
 80188be:	9347      	str	r3, [sp, #284]	; 0x11c
 80188c0:	9742      	str	r7, [sp, #264]	; 0x108
 80188c2:	e027      	b.n	8018914 <__ssvfiscanf_r+0x144>
 80188c4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80188c6:	fb07 1303 	mla	r3, r7, r3, r1
 80188ca:	3b30      	subs	r3, #48	; 0x30
 80188cc:	9343      	str	r3, [sp, #268]	; 0x10c
 80188ce:	e7cf      	b.n	8018870 <__ssvfiscanf_r+0xa0>
 80188d0:	2b5b      	cmp	r3, #91	; 0x5b
 80188d2:	d06a      	beq.n	80189aa <__ssvfiscanf_r+0x1da>
 80188d4:	d80c      	bhi.n	80188f0 <__ssvfiscanf_r+0x120>
 80188d6:	2b58      	cmp	r3, #88	; 0x58
 80188d8:	d1f0      	bne.n	80188bc <__ssvfiscanf_r+0xec>
 80188da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80188dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80188e0:	9241      	str	r2, [sp, #260]	; 0x104
 80188e2:	2210      	movs	r2, #16
 80188e4:	9242      	str	r2, [sp, #264]	; 0x108
 80188e6:	2b6e      	cmp	r3, #110	; 0x6e
 80188e8:	bf8c      	ite	hi
 80188ea:	2304      	movhi	r3, #4
 80188ec:	2303      	movls	r3, #3
 80188ee:	e010      	b.n	8018912 <__ssvfiscanf_r+0x142>
 80188f0:	2b63      	cmp	r3, #99	; 0x63
 80188f2:	d065      	beq.n	80189c0 <__ssvfiscanf_r+0x1f0>
 80188f4:	2b64      	cmp	r3, #100	; 0x64
 80188f6:	d1e1      	bne.n	80188bc <__ssvfiscanf_r+0xec>
 80188f8:	9742      	str	r7, [sp, #264]	; 0x108
 80188fa:	e7f4      	b.n	80188e6 <__ssvfiscanf_r+0x116>
 80188fc:	2b70      	cmp	r3, #112	; 0x70
 80188fe:	d04b      	beq.n	8018998 <__ssvfiscanf_r+0x1c8>
 8018900:	d826      	bhi.n	8018950 <__ssvfiscanf_r+0x180>
 8018902:	2b6e      	cmp	r3, #110	; 0x6e
 8018904:	d062      	beq.n	80189cc <__ssvfiscanf_r+0x1fc>
 8018906:	d84c      	bhi.n	80189a2 <__ssvfiscanf_r+0x1d2>
 8018908:	2b69      	cmp	r3, #105	; 0x69
 801890a:	d1d7      	bne.n	80188bc <__ssvfiscanf_r+0xec>
 801890c:	2300      	movs	r3, #0
 801890e:	9342      	str	r3, [sp, #264]	; 0x108
 8018910:	2303      	movs	r3, #3
 8018912:	9347      	str	r3, [sp, #284]	; 0x11c
 8018914:	6863      	ldr	r3, [r4, #4]
 8018916:	2b00      	cmp	r3, #0
 8018918:	dd68      	ble.n	80189ec <__ssvfiscanf_r+0x21c>
 801891a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801891c:	0659      	lsls	r1, r3, #25
 801891e:	d407      	bmi.n	8018930 <__ssvfiscanf_r+0x160>
 8018920:	f7ff f8bc 	bl	8017a9c <__locale_ctype_ptr>
 8018924:	6823      	ldr	r3, [r4, #0]
 8018926:	781a      	ldrb	r2, [r3, #0]
 8018928:	4410      	add	r0, r2
 801892a:	7842      	ldrb	r2, [r0, #1]
 801892c:	0712      	lsls	r2, r2, #28
 801892e:	d464      	bmi.n	80189fa <__ssvfiscanf_r+0x22a>
 8018930:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018932:	2b02      	cmp	r3, #2
 8018934:	dc73      	bgt.n	8018a1e <__ssvfiscanf_r+0x24e>
 8018936:	466b      	mov	r3, sp
 8018938:	4622      	mov	r2, r4
 801893a:	a941      	add	r1, sp, #260	; 0x104
 801893c:	4630      	mov	r0, r6
 801893e:	f000 f897 	bl	8018a70 <_scanf_chars>
 8018942:	2801      	cmp	r0, #1
 8018944:	f000 8089 	beq.w	8018a5a <__ssvfiscanf_r+0x28a>
 8018948:	2802      	cmp	r0, #2
 801894a:	f47f af71 	bne.w	8018830 <__ssvfiscanf_r+0x60>
 801894e:	e01d      	b.n	801898c <__ssvfiscanf_r+0x1bc>
 8018950:	2b75      	cmp	r3, #117	; 0x75
 8018952:	d0d1      	beq.n	80188f8 <__ssvfiscanf_r+0x128>
 8018954:	2b78      	cmp	r3, #120	; 0x78
 8018956:	d0c0      	beq.n	80188da <__ssvfiscanf_r+0x10a>
 8018958:	2b73      	cmp	r3, #115	; 0x73
 801895a:	d1af      	bne.n	80188bc <__ssvfiscanf_r+0xec>
 801895c:	2302      	movs	r3, #2
 801895e:	e7d8      	b.n	8018912 <__ssvfiscanf_r+0x142>
 8018960:	6863      	ldr	r3, [r4, #4]
 8018962:	2b00      	cmp	r3, #0
 8018964:	dd0c      	ble.n	8018980 <__ssvfiscanf_r+0x1b0>
 8018966:	6823      	ldr	r3, [r4, #0]
 8018968:	781a      	ldrb	r2, [r3, #0]
 801896a:	455a      	cmp	r2, fp
 801896c:	d175      	bne.n	8018a5a <__ssvfiscanf_r+0x28a>
 801896e:	3301      	adds	r3, #1
 8018970:	6862      	ldr	r2, [r4, #4]
 8018972:	6023      	str	r3, [r4, #0]
 8018974:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018976:	3a01      	subs	r2, #1
 8018978:	3301      	adds	r3, #1
 801897a:	6062      	str	r2, [r4, #4]
 801897c:	9345      	str	r3, [sp, #276]	; 0x114
 801897e:	e757      	b.n	8018830 <__ssvfiscanf_r+0x60>
 8018980:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018982:	4621      	mov	r1, r4
 8018984:	4630      	mov	r0, r6
 8018986:	4798      	blx	r3
 8018988:	2800      	cmp	r0, #0
 801898a:	d0ec      	beq.n	8018966 <__ssvfiscanf_r+0x196>
 801898c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801898e:	2800      	cmp	r0, #0
 8018990:	d159      	bne.n	8018a46 <__ssvfiscanf_r+0x276>
 8018992:	f04f 30ff 	mov.w	r0, #4294967295
 8018996:	e05c      	b.n	8018a52 <__ssvfiscanf_r+0x282>
 8018998:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801899a:	f042 0220 	orr.w	r2, r2, #32
 801899e:	9241      	str	r2, [sp, #260]	; 0x104
 80189a0:	e79b      	b.n	80188da <__ssvfiscanf_r+0x10a>
 80189a2:	2308      	movs	r3, #8
 80189a4:	9342      	str	r3, [sp, #264]	; 0x108
 80189a6:	2304      	movs	r3, #4
 80189a8:	e7b3      	b.n	8018912 <__ssvfiscanf_r+0x142>
 80189aa:	4629      	mov	r1, r5
 80189ac:	4640      	mov	r0, r8
 80189ae:	f000 f9c7 	bl	8018d40 <__sccl>
 80189b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80189b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80189b8:	9341      	str	r3, [sp, #260]	; 0x104
 80189ba:	4605      	mov	r5, r0
 80189bc:	2301      	movs	r3, #1
 80189be:	e7a8      	b.n	8018912 <__ssvfiscanf_r+0x142>
 80189c0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80189c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80189c6:	9341      	str	r3, [sp, #260]	; 0x104
 80189c8:	2300      	movs	r3, #0
 80189ca:	e7a2      	b.n	8018912 <__ssvfiscanf_r+0x142>
 80189cc:	9841      	ldr	r0, [sp, #260]	; 0x104
 80189ce:	06c3      	lsls	r3, r0, #27
 80189d0:	f53f af2e 	bmi.w	8018830 <__ssvfiscanf_r+0x60>
 80189d4:	9b00      	ldr	r3, [sp, #0]
 80189d6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80189d8:	1d19      	adds	r1, r3, #4
 80189da:	9100      	str	r1, [sp, #0]
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	07c0      	lsls	r0, r0, #31
 80189e0:	bf4c      	ite	mi
 80189e2:	801a      	strhmi	r2, [r3, #0]
 80189e4:	601a      	strpl	r2, [r3, #0]
 80189e6:	e723      	b.n	8018830 <__ssvfiscanf_r+0x60>
 80189e8:	2305      	movs	r3, #5
 80189ea:	e792      	b.n	8018912 <__ssvfiscanf_r+0x142>
 80189ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80189ee:	4621      	mov	r1, r4
 80189f0:	4630      	mov	r0, r6
 80189f2:	4798      	blx	r3
 80189f4:	2800      	cmp	r0, #0
 80189f6:	d090      	beq.n	801891a <__ssvfiscanf_r+0x14a>
 80189f8:	e7c8      	b.n	801898c <__ssvfiscanf_r+0x1bc>
 80189fa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80189fc:	3201      	adds	r2, #1
 80189fe:	9245      	str	r2, [sp, #276]	; 0x114
 8018a00:	6862      	ldr	r2, [r4, #4]
 8018a02:	3a01      	subs	r2, #1
 8018a04:	2a00      	cmp	r2, #0
 8018a06:	6062      	str	r2, [r4, #4]
 8018a08:	dd02      	ble.n	8018a10 <__ssvfiscanf_r+0x240>
 8018a0a:	3301      	adds	r3, #1
 8018a0c:	6023      	str	r3, [r4, #0]
 8018a0e:	e787      	b.n	8018920 <__ssvfiscanf_r+0x150>
 8018a10:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018a12:	4621      	mov	r1, r4
 8018a14:	4630      	mov	r0, r6
 8018a16:	4798      	blx	r3
 8018a18:	2800      	cmp	r0, #0
 8018a1a:	d081      	beq.n	8018920 <__ssvfiscanf_r+0x150>
 8018a1c:	e7b6      	b.n	801898c <__ssvfiscanf_r+0x1bc>
 8018a1e:	2b04      	cmp	r3, #4
 8018a20:	dc06      	bgt.n	8018a30 <__ssvfiscanf_r+0x260>
 8018a22:	466b      	mov	r3, sp
 8018a24:	4622      	mov	r2, r4
 8018a26:	a941      	add	r1, sp, #260	; 0x104
 8018a28:	4630      	mov	r0, r6
 8018a2a:	f000 f885 	bl	8018b38 <_scanf_i>
 8018a2e:	e788      	b.n	8018942 <__ssvfiscanf_r+0x172>
 8018a30:	4b0e      	ldr	r3, [pc, #56]	; (8018a6c <__ssvfiscanf_r+0x29c>)
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	f43f aefc 	beq.w	8018830 <__ssvfiscanf_r+0x60>
 8018a38:	466b      	mov	r3, sp
 8018a3a:	4622      	mov	r2, r4
 8018a3c:	a941      	add	r1, sp, #260	; 0x104
 8018a3e:	4630      	mov	r0, r6
 8018a40:	f7fc fd7e 	bl	8015540 <_scanf_float>
 8018a44:	e77d      	b.n	8018942 <__ssvfiscanf_r+0x172>
 8018a46:	89a3      	ldrh	r3, [r4, #12]
 8018a48:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018a4c:	bf18      	it	ne
 8018a4e:	f04f 30ff 	movne.w	r0, #4294967295
 8018a52:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8018a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a5a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018a5c:	e7f9      	b.n	8018a52 <__ssvfiscanf_r+0x282>
 8018a5e:	bf00      	nop
 8018a60:	0801871d 	.word	0x0801871d
 8018a64:	08018797 	.word	0x08018797
 8018a68:	08019aa2 	.word	0x08019aa2
 8018a6c:	08015541 	.word	0x08015541

08018a70 <_scanf_chars>:
 8018a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a74:	4615      	mov	r5, r2
 8018a76:	688a      	ldr	r2, [r1, #8]
 8018a78:	4680      	mov	r8, r0
 8018a7a:	460c      	mov	r4, r1
 8018a7c:	b932      	cbnz	r2, 8018a8c <_scanf_chars+0x1c>
 8018a7e:	698a      	ldr	r2, [r1, #24]
 8018a80:	2a00      	cmp	r2, #0
 8018a82:	bf14      	ite	ne
 8018a84:	f04f 32ff 	movne.w	r2, #4294967295
 8018a88:	2201      	moveq	r2, #1
 8018a8a:	608a      	str	r2, [r1, #8]
 8018a8c:	6822      	ldr	r2, [r4, #0]
 8018a8e:	06d1      	lsls	r1, r2, #27
 8018a90:	bf5f      	itttt	pl
 8018a92:	681a      	ldrpl	r2, [r3, #0]
 8018a94:	1d11      	addpl	r1, r2, #4
 8018a96:	6019      	strpl	r1, [r3, #0]
 8018a98:	6817      	ldrpl	r7, [r2, #0]
 8018a9a:	2600      	movs	r6, #0
 8018a9c:	69a3      	ldr	r3, [r4, #24]
 8018a9e:	b1db      	cbz	r3, 8018ad8 <_scanf_chars+0x68>
 8018aa0:	2b01      	cmp	r3, #1
 8018aa2:	d107      	bne.n	8018ab4 <_scanf_chars+0x44>
 8018aa4:	682b      	ldr	r3, [r5, #0]
 8018aa6:	6962      	ldr	r2, [r4, #20]
 8018aa8:	781b      	ldrb	r3, [r3, #0]
 8018aaa:	5cd3      	ldrb	r3, [r2, r3]
 8018aac:	b9a3      	cbnz	r3, 8018ad8 <_scanf_chars+0x68>
 8018aae:	2e00      	cmp	r6, #0
 8018ab0:	d132      	bne.n	8018b18 <_scanf_chars+0xa8>
 8018ab2:	e006      	b.n	8018ac2 <_scanf_chars+0x52>
 8018ab4:	2b02      	cmp	r3, #2
 8018ab6:	d007      	beq.n	8018ac8 <_scanf_chars+0x58>
 8018ab8:	2e00      	cmp	r6, #0
 8018aba:	d12d      	bne.n	8018b18 <_scanf_chars+0xa8>
 8018abc:	69a3      	ldr	r3, [r4, #24]
 8018abe:	2b01      	cmp	r3, #1
 8018ac0:	d12a      	bne.n	8018b18 <_scanf_chars+0xa8>
 8018ac2:	2001      	movs	r0, #1
 8018ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ac8:	f7fe ffe8 	bl	8017a9c <__locale_ctype_ptr>
 8018acc:	682b      	ldr	r3, [r5, #0]
 8018ace:	781b      	ldrb	r3, [r3, #0]
 8018ad0:	4418      	add	r0, r3
 8018ad2:	7843      	ldrb	r3, [r0, #1]
 8018ad4:	071b      	lsls	r3, r3, #28
 8018ad6:	d4ef      	bmi.n	8018ab8 <_scanf_chars+0x48>
 8018ad8:	6823      	ldr	r3, [r4, #0]
 8018ada:	06da      	lsls	r2, r3, #27
 8018adc:	bf5e      	ittt	pl
 8018ade:	682b      	ldrpl	r3, [r5, #0]
 8018ae0:	781b      	ldrbpl	r3, [r3, #0]
 8018ae2:	703b      	strbpl	r3, [r7, #0]
 8018ae4:	682a      	ldr	r2, [r5, #0]
 8018ae6:	686b      	ldr	r3, [r5, #4]
 8018ae8:	f102 0201 	add.w	r2, r2, #1
 8018aec:	602a      	str	r2, [r5, #0]
 8018aee:	68a2      	ldr	r2, [r4, #8]
 8018af0:	f103 33ff 	add.w	r3, r3, #4294967295
 8018af4:	f102 32ff 	add.w	r2, r2, #4294967295
 8018af8:	606b      	str	r3, [r5, #4]
 8018afa:	f106 0601 	add.w	r6, r6, #1
 8018afe:	bf58      	it	pl
 8018b00:	3701      	addpl	r7, #1
 8018b02:	60a2      	str	r2, [r4, #8]
 8018b04:	b142      	cbz	r2, 8018b18 <_scanf_chars+0xa8>
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	dcc8      	bgt.n	8018a9c <_scanf_chars+0x2c>
 8018b0a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018b0e:	4629      	mov	r1, r5
 8018b10:	4640      	mov	r0, r8
 8018b12:	4798      	blx	r3
 8018b14:	2800      	cmp	r0, #0
 8018b16:	d0c1      	beq.n	8018a9c <_scanf_chars+0x2c>
 8018b18:	6823      	ldr	r3, [r4, #0]
 8018b1a:	f013 0310 	ands.w	r3, r3, #16
 8018b1e:	d105      	bne.n	8018b2c <_scanf_chars+0xbc>
 8018b20:	68e2      	ldr	r2, [r4, #12]
 8018b22:	3201      	adds	r2, #1
 8018b24:	60e2      	str	r2, [r4, #12]
 8018b26:	69a2      	ldr	r2, [r4, #24]
 8018b28:	b102      	cbz	r2, 8018b2c <_scanf_chars+0xbc>
 8018b2a:	703b      	strb	r3, [r7, #0]
 8018b2c:	6923      	ldr	r3, [r4, #16]
 8018b2e:	441e      	add	r6, r3
 8018b30:	6126      	str	r6, [r4, #16]
 8018b32:	2000      	movs	r0, #0
 8018b34:	e7c6      	b.n	8018ac4 <_scanf_chars+0x54>
	...

08018b38 <_scanf_i>:
 8018b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b3c:	469a      	mov	sl, r3
 8018b3e:	4b74      	ldr	r3, [pc, #464]	; (8018d10 <_scanf_i+0x1d8>)
 8018b40:	460c      	mov	r4, r1
 8018b42:	4683      	mov	fp, r0
 8018b44:	4616      	mov	r6, r2
 8018b46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018b4a:	b087      	sub	sp, #28
 8018b4c:	ab03      	add	r3, sp, #12
 8018b4e:	68a7      	ldr	r7, [r4, #8]
 8018b50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018b54:	4b6f      	ldr	r3, [pc, #444]	; (8018d14 <_scanf_i+0x1dc>)
 8018b56:	69a1      	ldr	r1, [r4, #24]
 8018b58:	4a6f      	ldr	r2, [pc, #444]	; (8018d18 <_scanf_i+0x1e0>)
 8018b5a:	2903      	cmp	r1, #3
 8018b5c:	bf08      	it	eq
 8018b5e:	461a      	moveq	r2, r3
 8018b60:	1e7b      	subs	r3, r7, #1
 8018b62:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8018b66:	bf84      	itt	hi
 8018b68:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018b6c:	60a3      	strhi	r3, [r4, #8]
 8018b6e:	6823      	ldr	r3, [r4, #0]
 8018b70:	9200      	str	r2, [sp, #0]
 8018b72:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8018b76:	bf88      	it	hi
 8018b78:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018b7c:	f104 091c 	add.w	r9, r4, #28
 8018b80:	6023      	str	r3, [r4, #0]
 8018b82:	bf8c      	ite	hi
 8018b84:	197f      	addhi	r7, r7, r5
 8018b86:	2700      	movls	r7, #0
 8018b88:	464b      	mov	r3, r9
 8018b8a:	f04f 0800 	mov.w	r8, #0
 8018b8e:	9301      	str	r3, [sp, #4]
 8018b90:	6831      	ldr	r1, [r6, #0]
 8018b92:	ab03      	add	r3, sp, #12
 8018b94:	2202      	movs	r2, #2
 8018b96:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8018b9a:	7809      	ldrb	r1, [r1, #0]
 8018b9c:	f7e7 fb38 	bl	8000210 <memchr>
 8018ba0:	9b01      	ldr	r3, [sp, #4]
 8018ba2:	b330      	cbz	r0, 8018bf2 <_scanf_i+0xba>
 8018ba4:	f1b8 0f01 	cmp.w	r8, #1
 8018ba8:	d15a      	bne.n	8018c60 <_scanf_i+0x128>
 8018baa:	6862      	ldr	r2, [r4, #4]
 8018bac:	b92a      	cbnz	r2, 8018bba <_scanf_i+0x82>
 8018bae:	6822      	ldr	r2, [r4, #0]
 8018bb0:	2108      	movs	r1, #8
 8018bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018bb6:	6061      	str	r1, [r4, #4]
 8018bb8:	6022      	str	r2, [r4, #0]
 8018bba:	6822      	ldr	r2, [r4, #0]
 8018bbc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8018bc0:	6022      	str	r2, [r4, #0]
 8018bc2:	68a2      	ldr	r2, [r4, #8]
 8018bc4:	1e51      	subs	r1, r2, #1
 8018bc6:	60a1      	str	r1, [r4, #8]
 8018bc8:	b19a      	cbz	r2, 8018bf2 <_scanf_i+0xba>
 8018bca:	6832      	ldr	r2, [r6, #0]
 8018bcc:	1c51      	adds	r1, r2, #1
 8018bce:	6031      	str	r1, [r6, #0]
 8018bd0:	7812      	ldrb	r2, [r2, #0]
 8018bd2:	701a      	strb	r2, [r3, #0]
 8018bd4:	1c5d      	adds	r5, r3, #1
 8018bd6:	6873      	ldr	r3, [r6, #4]
 8018bd8:	3b01      	subs	r3, #1
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	6073      	str	r3, [r6, #4]
 8018bde:	dc07      	bgt.n	8018bf0 <_scanf_i+0xb8>
 8018be0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018be4:	4631      	mov	r1, r6
 8018be6:	4658      	mov	r0, fp
 8018be8:	4798      	blx	r3
 8018bea:	2800      	cmp	r0, #0
 8018bec:	f040 8086 	bne.w	8018cfc <_scanf_i+0x1c4>
 8018bf0:	462b      	mov	r3, r5
 8018bf2:	f108 0801 	add.w	r8, r8, #1
 8018bf6:	f1b8 0f03 	cmp.w	r8, #3
 8018bfa:	d1c8      	bne.n	8018b8e <_scanf_i+0x56>
 8018bfc:	6862      	ldr	r2, [r4, #4]
 8018bfe:	b90a      	cbnz	r2, 8018c04 <_scanf_i+0xcc>
 8018c00:	220a      	movs	r2, #10
 8018c02:	6062      	str	r2, [r4, #4]
 8018c04:	6862      	ldr	r2, [r4, #4]
 8018c06:	4945      	ldr	r1, [pc, #276]	; (8018d1c <_scanf_i+0x1e4>)
 8018c08:	6960      	ldr	r0, [r4, #20]
 8018c0a:	9301      	str	r3, [sp, #4]
 8018c0c:	1a89      	subs	r1, r1, r2
 8018c0e:	f000 f897 	bl	8018d40 <__sccl>
 8018c12:	9b01      	ldr	r3, [sp, #4]
 8018c14:	f04f 0800 	mov.w	r8, #0
 8018c18:	461d      	mov	r5, r3
 8018c1a:	68a3      	ldr	r3, [r4, #8]
 8018c1c:	6822      	ldr	r2, [r4, #0]
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d03a      	beq.n	8018c98 <_scanf_i+0x160>
 8018c22:	6831      	ldr	r1, [r6, #0]
 8018c24:	6960      	ldr	r0, [r4, #20]
 8018c26:	f891 c000 	ldrb.w	ip, [r1]
 8018c2a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8018c2e:	2800      	cmp	r0, #0
 8018c30:	d032      	beq.n	8018c98 <_scanf_i+0x160>
 8018c32:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8018c36:	d121      	bne.n	8018c7c <_scanf_i+0x144>
 8018c38:	0510      	lsls	r0, r2, #20
 8018c3a:	d51f      	bpl.n	8018c7c <_scanf_i+0x144>
 8018c3c:	f108 0801 	add.w	r8, r8, #1
 8018c40:	b117      	cbz	r7, 8018c48 <_scanf_i+0x110>
 8018c42:	3301      	adds	r3, #1
 8018c44:	3f01      	subs	r7, #1
 8018c46:	60a3      	str	r3, [r4, #8]
 8018c48:	6873      	ldr	r3, [r6, #4]
 8018c4a:	3b01      	subs	r3, #1
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	6073      	str	r3, [r6, #4]
 8018c50:	dd1b      	ble.n	8018c8a <_scanf_i+0x152>
 8018c52:	6833      	ldr	r3, [r6, #0]
 8018c54:	3301      	adds	r3, #1
 8018c56:	6033      	str	r3, [r6, #0]
 8018c58:	68a3      	ldr	r3, [r4, #8]
 8018c5a:	3b01      	subs	r3, #1
 8018c5c:	60a3      	str	r3, [r4, #8]
 8018c5e:	e7dc      	b.n	8018c1a <_scanf_i+0xe2>
 8018c60:	f1b8 0f02 	cmp.w	r8, #2
 8018c64:	d1ad      	bne.n	8018bc2 <_scanf_i+0x8a>
 8018c66:	6822      	ldr	r2, [r4, #0]
 8018c68:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8018c6c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8018c70:	d1bf      	bne.n	8018bf2 <_scanf_i+0xba>
 8018c72:	2110      	movs	r1, #16
 8018c74:	6061      	str	r1, [r4, #4]
 8018c76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018c7a:	e7a1      	b.n	8018bc0 <_scanf_i+0x88>
 8018c7c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8018c80:	6022      	str	r2, [r4, #0]
 8018c82:	780b      	ldrb	r3, [r1, #0]
 8018c84:	702b      	strb	r3, [r5, #0]
 8018c86:	3501      	adds	r5, #1
 8018c88:	e7de      	b.n	8018c48 <_scanf_i+0x110>
 8018c8a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018c8e:	4631      	mov	r1, r6
 8018c90:	4658      	mov	r0, fp
 8018c92:	4798      	blx	r3
 8018c94:	2800      	cmp	r0, #0
 8018c96:	d0df      	beq.n	8018c58 <_scanf_i+0x120>
 8018c98:	6823      	ldr	r3, [r4, #0]
 8018c9a:	05d9      	lsls	r1, r3, #23
 8018c9c:	d50c      	bpl.n	8018cb8 <_scanf_i+0x180>
 8018c9e:	454d      	cmp	r5, r9
 8018ca0:	d908      	bls.n	8018cb4 <_scanf_i+0x17c>
 8018ca2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8018ca6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018caa:	4632      	mov	r2, r6
 8018cac:	4658      	mov	r0, fp
 8018cae:	4798      	blx	r3
 8018cb0:	1e6f      	subs	r7, r5, #1
 8018cb2:	463d      	mov	r5, r7
 8018cb4:	454d      	cmp	r5, r9
 8018cb6:	d029      	beq.n	8018d0c <_scanf_i+0x1d4>
 8018cb8:	6822      	ldr	r2, [r4, #0]
 8018cba:	f012 0210 	ands.w	r2, r2, #16
 8018cbe:	d113      	bne.n	8018ce8 <_scanf_i+0x1b0>
 8018cc0:	702a      	strb	r2, [r5, #0]
 8018cc2:	6863      	ldr	r3, [r4, #4]
 8018cc4:	9e00      	ldr	r6, [sp, #0]
 8018cc6:	4649      	mov	r1, r9
 8018cc8:	4658      	mov	r0, fp
 8018cca:	47b0      	blx	r6
 8018ccc:	f8da 3000 	ldr.w	r3, [sl]
 8018cd0:	6821      	ldr	r1, [r4, #0]
 8018cd2:	1d1a      	adds	r2, r3, #4
 8018cd4:	f8ca 2000 	str.w	r2, [sl]
 8018cd8:	f011 0f20 	tst.w	r1, #32
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	d010      	beq.n	8018d02 <_scanf_i+0x1ca>
 8018ce0:	6018      	str	r0, [r3, #0]
 8018ce2:	68e3      	ldr	r3, [r4, #12]
 8018ce4:	3301      	adds	r3, #1
 8018ce6:	60e3      	str	r3, [r4, #12]
 8018ce8:	eba5 0509 	sub.w	r5, r5, r9
 8018cec:	44a8      	add	r8, r5
 8018cee:	6925      	ldr	r5, [r4, #16]
 8018cf0:	4445      	add	r5, r8
 8018cf2:	6125      	str	r5, [r4, #16]
 8018cf4:	2000      	movs	r0, #0
 8018cf6:	b007      	add	sp, #28
 8018cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cfc:	f04f 0800 	mov.w	r8, #0
 8018d00:	e7ca      	b.n	8018c98 <_scanf_i+0x160>
 8018d02:	07ca      	lsls	r2, r1, #31
 8018d04:	bf4c      	ite	mi
 8018d06:	8018      	strhmi	r0, [r3, #0]
 8018d08:	6018      	strpl	r0, [r3, #0]
 8018d0a:	e7ea      	b.n	8018ce2 <_scanf_i+0x1aa>
 8018d0c:	2001      	movs	r0, #1
 8018d0e:	e7f2      	b.n	8018cf6 <_scanf_i+0x1be>
 8018d10:	080195c8 	.word	0x080195c8
 8018d14:	08016759 	.word	0x08016759
 8018d18:	08018ebd 	.word	0x08018ebd
 8018d1c:	08019abd 	.word	0x08019abd

08018d20 <_sbrk_r>:
 8018d20:	b538      	push	{r3, r4, r5, lr}
 8018d22:	4c06      	ldr	r4, [pc, #24]	; (8018d3c <_sbrk_r+0x1c>)
 8018d24:	2300      	movs	r3, #0
 8018d26:	4605      	mov	r5, r0
 8018d28:	4608      	mov	r0, r1
 8018d2a:	6023      	str	r3, [r4, #0]
 8018d2c:	f7ee f9bc 	bl	80070a8 <_sbrk>
 8018d30:	1c43      	adds	r3, r0, #1
 8018d32:	d102      	bne.n	8018d3a <_sbrk_r+0x1a>
 8018d34:	6823      	ldr	r3, [r4, #0]
 8018d36:	b103      	cbz	r3, 8018d3a <_sbrk_r+0x1a>
 8018d38:	602b      	str	r3, [r5, #0]
 8018d3a:	bd38      	pop	{r3, r4, r5, pc}
 8018d3c:	20040e6c 	.word	0x20040e6c

08018d40 <__sccl>:
 8018d40:	b570      	push	{r4, r5, r6, lr}
 8018d42:	780b      	ldrb	r3, [r1, #0]
 8018d44:	2b5e      	cmp	r3, #94	; 0x5e
 8018d46:	bf13      	iteet	ne
 8018d48:	1c4a      	addne	r2, r1, #1
 8018d4a:	1c8a      	addeq	r2, r1, #2
 8018d4c:	784b      	ldrbeq	r3, [r1, #1]
 8018d4e:	2100      	movne	r1, #0
 8018d50:	bf08      	it	eq
 8018d52:	2101      	moveq	r1, #1
 8018d54:	1e44      	subs	r4, r0, #1
 8018d56:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8018d5a:	f804 1f01 	strb.w	r1, [r4, #1]!
 8018d5e:	42ac      	cmp	r4, r5
 8018d60:	d1fb      	bne.n	8018d5a <__sccl+0x1a>
 8018d62:	b913      	cbnz	r3, 8018d6a <__sccl+0x2a>
 8018d64:	3a01      	subs	r2, #1
 8018d66:	4610      	mov	r0, r2
 8018d68:	bd70      	pop	{r4, r5, r6, pc}
 8018d6a:	f081 0401 	eor.w	r4, r1, #1
 8018d6e:	54c4      	strb	r4, [r0, r3]
 8018d70:	1c51      	adds	r1, r2, #1
 8018d72:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8018d76:	2d2d      	cmp	r5, #45	; 0x2d
 8018d78:	f101 36ff 	add.w	r6, r1, #4294967295
 8018d7c:	460a      	mov	r2, r1
 8018d7e:	d006      	beq.n	8018d8e <__sccl+0x4e>
 8018d80:	2d5d      	cmp	r5, #93	; 0x5d
 8018d82:	d0f0      	beq.n	8018d66 <__sccl+0x26>
 8018d84:	b90d      	cbnz	r5, 8018d8a <__sccl+0x4a>
 8018d86:	4632      	mov	r2, r6
 8018d88:	e7ed      	b.n	8018d66 <__sccl+0x26>
 8018d8a:	462b      	mov	r3, r5
 8018d8c:	e7ef      	b.n	8018d6e <__sccl+0x2e>
 8018d8e:	780e      	ldrb	r6, [r1, #0]
 8018d90:	2e5d      	cmp	r6, #93	; 0x5d
 8018d92:	d0fa      	beq.n	8018d8a <__sccl+0x4a>
 8018d94:	42b3      	cmp	r3, r6
 8018d96:	dcf8      	bgt.n	8018d8a <__sccl+0x4a>
 8018d98:	3301      	adds	r3, #1
 8018d9a:	429e      	cmp	r6, r3
 8018d9c:	54c4      	strb	r4, [r0, r3]
 8018d9e:	dcfb      	bgt.n	8018d98 <__sccl+0x58>
 8018da0:	3102      	adds	r1, #2
 8018da2:	e7e6      	b.n	8018d72 <__sccl+0x32>

08018da4 <strncmp>:
 8018da4:	b510      	push	{r4, lr}
 8018da6:	b16a      	cbz	r2, 8018dc4 <strncmp+0x20>
 8018da8:	3901      	subs	r1, #1
 8018daa:	1884      	adds	r4, r0, r2
 8018dac:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018db0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018db4:	4293      	cmp	r3, r2
 8018db6:	d103      	bne.n	8018dc0 <strncmp+0x1c>
 8018db8:	42a0      	cmp	r0, r4
 8018dba:	d001      	beq.n	8018dc0 <strncmp+0x1c>
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	d1f5      	bne.n	8018dac <strncmp+0x8>
 8018dc0:	1a98      	subs	r0, r3, r2
 8018dc2:	bd10      	pop	{r4, pc}
 8018dc4:	4610      	mov	r0, r2
 8018dc6:	e7fc      	b.n	8018dc2 <strncmp+0x1e>

08018dc8 <_strtoul_l.isra.0>:
 8018dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018dcc:	4680      	mov	r8, r0
 8018dce:	4689      	mov	r9, r1
 8018dd0:	4692      	mov	sl, r2
 8018dd2:	461e      	mov	r6, r3
 8018dd4:	460f      	mov	r7, r1
 8018dd6:	463d      	mov	r5, r7
 8018dd8:	9808      	ldr	r0, [sp, #32]
 8018dda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018dde:	f7fe fe59 	bl	8017a94 <__locale_ctype_ptr_l>
 8018de2:	4420      	add	r0, r4
 8018de4:	7843      	ldrb	r3, [r0, #1]
 8018de6:	f013 0308 	ands.w	r3, r3, #8
 8018dea:	d130      	bne.n	8018e4e <_strtoul_l.isra.0+0x86>
 8018dec:	2c2d      	cmp	r4, #45	; 0x2d
 8018dee:	d130      	bne.n	8018e52 <_strtoul_l.isra.0+0x8a>
 8018df0:	787c      	ldrb	r4, [r7, #1]
 8018df2:	1cbd      	adds	r5, r7, #2
 8018df4:	2101      	movs	r1, #1
 8018df6:	2e00      	cmp	r6, #0
 8018df8:	d05c      	beq.n	8018eb4 <_strtoul_l.isra.0+0xec>
 8018dfa:	2e10      	cmp	r6, #16
 8018dfc:	d109      	bne.n	8018e12 <_strtoul_l.isra.0+0x4a>
 8018dfe:	2c30      	cmp	r4, #48	; 0x30
 8018e00:	d107      	bne.n	8018e12 <_strtoul_l.isra.0+0x4a>
 8018e02:	782b      	ldrb	r3, [r5, #0]
 8018e04:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018e08:	2b58      	cmp	r3, #88	; 0x58
 8018e0a:	d14e      	bne.n	8018eaa <_strtoul_l.isra.0+0xe2>
 8018e0c:	786c      	ldrb	r4, [r5, #1]
 8018e0e:	2610      	movs	r6, #16
 8018e10:	3502      	adds	r5, #2
 8018e12:	f04f 32ff 	mov.w	r2, #4294967295
 8018e16:	2300      	movs	r3, #0
 8018e18:	fbb2 f2f6 	udiv	r2, r2, r6
 8018e1c:	fb06 fc02 	mul.w	ip, r6, r2
 8018e20:	ea6f 0c0c 	mvn.w	ip, ip
 8018e24:	4618      	mov	r0, r3
 8018e26:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8018e2a:	2f09      	cmp	r7, #9
 8018e2c:	d817      	bhi.n	8018e5e <_strtoul_l.isra.0+0x96>
 8018e2e:	463c      	mov	r4, r7
 8018e30:	42a6      	cmp	r6, r4
 8018e32:	dd23      	ble.n	8018e7c <_strtoul_l.isra.0+0xb4>
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	db1e      	blt.n	8018e76 <_strtoul_l.isra.0+0xae>
 8018e38:	4282      	cmp	r2, r0
 8018e3a:	d31c      	bcc.n	8018e76 <_strtoul_l.isra.0+0xae>
 8018e3c:	d101      	bne.n	8018e42 <_strtoul_l.isra.0+0x7a>
 8018e3e:	45a4      	cmp	ip, r4
 8018e40:	db19      	blt.n	8018e76 <_strtoul_l.isra.0+0xae>
 8018e42:	fb00 4006 	mla	r0, r0, r6, r4
 8018e46:	2301      	movs	r3, #1
 8018e48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018e4c:	e7eb      	b.n	8018e26 <_strtoul_l.isra.0+0x5e>
 8018e4e:	462f      	mov	r7, r5
 8018e50:	e7c1      	b.n	8018dd6 <_strtoul_l.isra.0+0xe>
 8018e52:	2c2b      	cmp	r4, #43	; 0x2b
 8018e54:	bf04      	itt	eq
 8018e56:	1cbd      	addeq	r5, r7, #2
 8018e58:	787c      	ldrbeq	r4, [r7, #1]
 8018e5a:	4619      	mov	r1, r3
 8018e5c:	e7cb      	b.n	8018df6 <_strtoul_l.isra.0+0x2e>
 8018e5e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8018e62:	2f19      	cmp	r7, #25
 8018e64:	d801      	bhi.n	8018e6a <_strtoul_l.isra.0+0xa2>
 8018e66:	3c37      	subs	r4, #55	; 0x37
 8018e68:	e7e2      	b.n	8018e30 <_strtoul_l.isra.0+0x68>
 8018e6a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018e6e:	2f19      	cmp	r7, #25
 8018e70:	d804      	bhi.n	8018e7c <_strtoul_l.isra.0+0xb4>
 8018e72:	3c57      	subs	r4, #87	; 0x57
 8018e74:	e7dc      	b.n	8018e30 <_strtoul_l.isra.0+0x68>
 8018e76:	f04f 33ff 	mov.w	r3, #4294967295
 8018e7a:	e7e5      	b.n	8018e48 <_strtoul_l.isra.0+0x80>
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	da09      	bge.n	8018e94 <_strtoul_l.isra.0+0xcc>
 8018e80:	2322      	movs	r3, #34	; 0x22
 8018e82:	f8c8 3000 	str.w	r3, [r8]
 8018e86:	f04f 30ff 	mov.w	r0, #4294967295
 8018e8a:	f1ba 0f00 	cmp.w	sl, #0
 8018e8e:	d107      	bne.n	8018ea0 <_strtoul_l.isra.0+0xd8>
 8018e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e94:	b101      	cbz	r1, 8018e98 <_strtoul_l.isra.0+0xd0>
 8018e96:	4240      	negs	r0, r0
 8018e98:	f1ba 0f00 	cmp.w	sl, #0
 8018e9c:	d0f8      	beq.n	8018e90 <_strtoul_l.isra.0+0xc8>
 8018e9e:	b10b      	cbz	r3, 8018ea4 <_strtoul_l.isra.0+0xdc>
 8018ea0:	f105 39ff 	add.w	r9, r5, #4294967295
 8018ea4:	f8ca 9000 	str.w	r9, [sl]
 8018ea8:	e7f2      	b.n	8018e90 <_strtoul_l.isra.0+0xc8>
 8018eaa:	2430      	movs	r4, #48	; 0x30
 8018eac:	2e00      	cmp	r6, #0
 8018eae:	d1b0      	bne.n	8018e12 <_strtoul_l.isra.0+0x4a>
 8018eb0:	2608      	movs	r6, #8
 8018eb2:	e7ae      	b.n	8018e12 <_strtoul_l.isra.0+0x4a>
 8018eb4:	2c30      	cmp	r4, #48	; 0x30
 8018eb6:	d0a4      	beq.n	8018e02 <_strtoul_l.isra.0+0x3a>
 8018eb8:	260a      	movs	r6, #10
 8018eba:	e7aa      	b.n	8018e12 <_strtoul_l.isra.0+0x4a>

08018ebc <_strtoul_r>:
 8018ebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018ebe:	4c06      	ldr	r4, [pc, #24]	; (8018ed8 <_strtoul_r+0x1c>)
 8018ec0:	4d06      	ldr	r5, [pc, #24]	; (8018edc <_strtoul_r+0x20>)
 8018ec2:	6824      	ldr	r4, [r4, #0]
 8018ec4:	6a24      	ldr	r4, [r4, #32]
 8018ec6:	2c00      	cmp	r4, #0
 8018ec8:	bf08      	it	eq
 8018eca:	462c      	moveq	r4, r5
 8018ecc:	9400      	str	r4, [sp, #0]
 8018ece:	f7ff ff7b 	bl	8018dc8 <_strtoul_l.isra.0>
 8018ed2:	b003      	add	sp, #12
 8018ed4:	bd30      	pop	{r4, r5, pc}
 8018ed6:	bf00      	nop
 8018ed8:	2000000c 	.word	0x2000000c
 8018edc:	20000070 	.word	0x20000070

08018ee0 <__submore>:
 8018ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ee4:	460c      	mov	r4, r1
 8018ee6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018ee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018eec:	4299      	cmp	r1, r3
 8018eee:	d11d      	bne.n	8018f2c <__submore+0x4c>
 8018ef0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018ef4:	f7ff fa66 	bl	80183c4 <_malloc_r>
 8018ef8:	b918      	cbnz	r0, 8018f02 <__submore+0x22>
 8018efa:	f04f 30ff 	mov.w	r0, #4294967295
 8018efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018f06:	63a3      	str	r3, [r4, #56]	; 0x38
 8018f08:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8018f0c:	6360      	str	r0, [r4, #52]	; 0x34
 8018f0e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018f12:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018f16:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8018f1a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018f1e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018f22:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018f26:	6020      	str	r0, [r4, #0]
 8018f28:	2000      	movs	r0, #0
 8018f2a:	e7e8      	b.n	8018efe <__submore+0x1e>
 8018f2c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018f2e:	0077      	lsls	r7, r6, #1
 8018f30:	463a      	mov	r2, r7
 8018f32:	f000 f837 	bl	8018fa4 <_realloc_r>
 8018f36:	4605      	mov	r5, r0
 8018f38:	2800      	cmp	r0, #0
 8018f3a:	d0de      	beq.n	8018efa <__submore+0x1a>
 8018f3c:	eb00 0806 	add.w	r8, r0, r6
 8018f40:	4601      	mov	r1, r0
 8018f42:	4632      	mov	r2, r6
 8018f44:	4640      	mov	r0, r8
 8018f46:	f7fb fe8b 	bl	8014c60 <memcpy>
 8018f4a:	f8c4 8000 	str.w	r8, [r4]
 8018f4e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8018f52:	e7e9      	b.n	8018f28 <__submore+0x48>

08018f54 <__ascii_wctomb>:
 8018f54:	b149      	cbz	r1, 8018f6a <__ascii_wctomb+0x16>
 8018f56:	2aff      	cmp	r2, #255	; 0xff
 8018f58:	bf85      	ittet	hi
 8018f5a:	238a      	movhi	r3, #138	; 0x8a
 8018f5c:	6003      	strhi	r3, [r0, #0]
 8018f5e:	700a      	strbls	r2, [r1, #0]
 8018f60:	f04f 30ff 	movhi.w	r0, #4294967295
 8018f64:	bf98      	it	ls
 8018f66:	2001      	movls	r0, #1
 8018f68:	4770      	bx	lr
 8018f6a:	4608      	mov	r0, r1
 8018f6c:	4770      	bx	lr

08018f6e <memmove>:
 8018f6e:	4288      	cmp	r0, r1
 8018f70:	b510      	push	{r4, lr}
 8018f72:	eb01 0302 	add.w	r3, r1, r2
 8018f76:	d807      	bhi.n	8018f88 <memmove+0x1a>
 8018f78:	1e42      	subs	r2, r0, #1
 8018f7a:	4299      	cmp	r1, r3
 8018f7c:	d00a      	beq.n	8018f94 <memmove+0x26>
 8018f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018f82:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018f86:	e7f8      	b.n	8018f7a <memmove+0xc>
 8018f88:	4283      	cmp	r3, r0
 8018f8a:	d9f5      	bls.n	8018f78 <memmove+0xa>
 8018f8c:	1881      	adds	r1, r0, r2
 8018f8e:	1ad2      	subs	r2, r2, r3
 8018f90:	42d3      	cmn	r3, r2
 8018f92:	d100      	bne.n	8018f96 <memmove+0x28>
 8018f94:	bd10      	pop	{r4, pc}
 8018f96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018f9a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8018f9e:	e7f7      	b.n	8018f90 <memmove+0x22>

08018fa0 <__malloc_lock>:
 8018fa0:	4770      	bx	lr

08018fa2 <__malloc_unlock>:
 8018fa2:	4770      	bx	lr

08018fa4 <_realloc_r>:
 8018fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fa6:	4607      	mov	r7, r0
 8018fa8:	4614      	mov	r4, r2
 8018faa:	460e      	mov	r6, r1
 8018fac:	b921      	cbnz	r1, 8018fb8 <_realloc_r+0x14>
 8018fae:	4611      	mov	r1, r2
 8018fb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018fb4:	f7ff ba06 	b.w	80183c4 <_malloc_r>
 8018fb8:	b922      	cbnz	r2, 8018fc4 <_realloc_r+0x20>
 8018fba:	f7ff f9b5 	bl	8018328 <_free_r>
 8018fbe:	4625      	mov	r5, r4
 8018fc0:	4628      	mov	r0, r5
 8018fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018fc4:	f000 f814 	bl	8018ff0 <_malloc_usable_size_r>
 8018fc8:	42a0      	cmp	r0, r4
 8018fca:	d20f      	bcs.n	8018fec <_realloc_r+0x48>
 8018fcc:	4621      	mov	r1, r4
 8018fce:	4638      	mov	r0, r7
 8018fd0:	f7ff f9f8 	bl	80183c4 <_malloc_r>
 8018fd4:	4605      	mov	r5, r0
 8018fd6:	2800      	cmp	r0, #0
 8018fd8:	d0f2      	beq.n	8018fc0 <_realloc_r+0x1c>
 8018fda:	4631      	mov	r1, r6
 8018fdc:	4622      	mov	r2, r4
 8018fde:	f7fb fe3f 	bl	8014c60 <memcpy>
 8018fe2:	4631      	mov	r1, r6
 8018fe4:	4638      	mov	r0, r7
 8018fe6:	f7ff f99f 	bl	8018328 <_free_r>
 8018fea:	e7e9      	b.n	8018fc0 <_realloc_r+0x1c>
 8018fec:	4635      	mov	r5, r6
 8018fee:	e7e7      	b.n	8018fc0 <_realloc_r+0x1c>

08018ff0 <_malloc_usable_size_r>:
 8018ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018ff4:	1f18      	subs	r0, r3, #4
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	bfbc      	itt	lt
 8018ffa:	580b      	ldrlt	r3, [r1, r0]
 8018ffc:	18c0      	addlt	r0, r0, r3
 8018ffe:	4770      	bx	lr

08019000 <_init>:
 8019000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019002:	bf00      	nop
 8019004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019006:	bc08      	pop	{r3}
 8019008:	469e      	mov	lr, r3
 801900a:	4770      	bx	lr

0801900c <_fini>:
 801900c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801900e:	bf00      	nop
 8019010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019012:	bc08      	pop	{r3}
 8019014:	469e      	mov	lr, r3
 8019016:	4770      	bx	lr
