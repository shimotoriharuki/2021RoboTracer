
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000908c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800924c  0800924c  0001924c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009340  08009340  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009340  08009340  00019340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009348  08009348  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009348  08009348  00019348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800934c  0800934c  0001934c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000870  20000070  080093c0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e0  080093c0  000208e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1d6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000374d  00000000  00000000  0003b276  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001800  00000000  00000000  0003e9c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001670  00000000  00000000  000401c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002db15  00000000  00000000  00041838  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013bc7  00000000  00000000  0006f34d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001054a6  00000000  00000000  00082f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001883ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d8c  00000000  00000000  00188438  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009234 	.word	0x08009234

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	08009234 	.word	0x08009234

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 80005aa:	2300      	movs	r3, #0
 80005ac:	733b      	strb	r3, [r7, #12]
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 80005b2:	f107 020c 	add.w	r2, r7, #12
 80005b6:	2364      	movs	r3, #100	; 0x64
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2302      	movs	r3, #2
 80005bc:	217c      	movs	r1, #124	; 0x7c
 80005be:	4803      	ldr	r0, [pc, #12]	; (80005cc <lcd_cmd+0x2c>)
 80005c0:	f002 fffa 	bl	80035b8 <HAL_I2C_Master_Transmit>
}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	2000019c 	.word	0x2000019c

080005d0 <lcd_data>:

void lcd_data(uint8_t data) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 80005da:	2340      	movs	r3, #64	; 0x40
 80005dc:	733b      	strb	r3, [r7, #12]
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 80005e2:	f107 020c 	add.w	r2, r7, #12
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2302      	movs	r3, #2
 80005ec:	217c      	movs	r1, #124	; 0x7c
 80005ee:	4803      	ldr	r0, [pc, #12]	; (80005fc <lcd_data+0x2c>)
 80005f0:	f002 ffe2 	bl	80035b8 <HAL_I2C_Master_Transmit>
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	2000019c 	.word	0x2000019c

08000600 <lcd_init>:

void lcd_init(){
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 8000604:	2201      	movs	r2, #1
 8000606:	2110      	movs	r1, #16
 8000608:	481e      	ldr	r0, [pc, #120]	; (8000684 <lcd_init+0x84>)
 800060a:	f002 fe83 	bl	8003314 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 800060e:	2028      	movs	r0, #40	; 0x28
 8000610:	f001 fc18 	bl	8001e44 <HAL_Delay>
	lcd_cmd(0x38);
 8000614:	2038      	movs	r0, #56	; 0x38
 8000616:	f7ff ffc3 	bl	80005a0 <lcd_cmd>
	HAL_Delay(1);
 800061a:	2001      	movs	r0, #1
 800061c:	f001 fc12 	bl	8001e44 <HAL_Delay>
	lcd_cmd(0x39);
 8000620:	2039      	movs	r0, #57	; 0x39
 8000622:	f7ff ffbd 	bl	80005a0 <lcd_cmd>
	HAL_Delay(1);
 8000626:	2001      	movs	r0, #1
 8000628:	f001 fc0c 	bl	8001e44 <HAL_Delay>
	lcd_cmd(0x14);
 800062c:	2014      	movs	r0, #20
 800062e:	f7ff ffb7 	bl	80005a0 <lcd_cmd>
	HAL_Delay(1);
 8000632:	2001      	movs	r0, #1
 8000634:	f001 fc06 	bl	8001e44 <HAL_Delay>
	lcd_cmd(0x70);
 8000638:	2070      	movs	r0, #112	; 0x70
 800063a:	f7ff ffb1 	bl	80005a0 <lcd_cmd>
	HAL_Delay(1);
 800063e:	2001      	movs	r0, #1
 8000640:	f001 fc00 	bl	8001e44 <HAL_Delay>
	lcd_cmd(0x56);
 8000644:	2056      	movs	r0, #86	; 0x56
 8000646:	f7ff ffab 	bl	80005a0 <lcd_cmd>
	HAL_Delay(1);
 800064a:	2001      	movs	r0, #1
 800064c:	f001 fbfa 	bl	8001e44 <HAL_Delay>
	lcd_cmd(0x6C);
 8000650:	206c      	movs	r0, #108	; 0x6c
 8000652:	f7ff ffa5 	bl	80005a0 <lcd_cmd>
	HAL_Delay(200);
 8000656:	20c8      	movs	r0, #200	; 0xc8
 8000658:	f001 fbf4 	bl	8001e44 <HAL_Delay>
	lcd_cmd(0x38);
 800065c:	2038      	movs	r0, #56	; 0x38
 800065e:	f7ff ff9f 	bl	80005a0 <lcd_cmd>
	HAL_Delay(1);
 8000662:	2001      	movs	r0, #1
 8000664:	f001 fbee 	bl	8001e44 <HAL_Delay>
	lcd_cmd(0x0C);
 8000668:	200c      	movs	r0, #12
 800066a:	f7ff ff99 	bl	80005a0 <lcd_cmd>
	HAL_Delay(1);
 800066e:	2001      	movs	r0, #1
 8000670:	f001 fbe8 	bl	8001e44 <HAL_Delay>
	lcd_cmd(0x01);
 8000674:	2001      	movs	r0, #1
 8000676:	f7ff ff93 	bl	80005a0 <lcd_cmd>
	HAL_Delay(1);
 800067a:	2001      	movs	r0, #1
 800067c:	f001 fbe2 	bl	8001e44 <HAL_Delay>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40020000 	.word	0x40020000

08000688 <lcd_clear>:

void lcd_clear(){
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 800068c:	2001      	movs	r0, #1
 800068e:	f7ff ff87 	bl	80005a0 <lcd_cmd>
	HAL_Delay(1);
 8000692:	2001      	movs	r0, #1
 8000694:	f001 fbd6 	bl	8001e44 <HAL_Delay>
	lcd_cmd(0x02);
 8000698:	2002      	movs	r0, #2
 800069a:	f7ff ff81 	bl	80005a0 <lcd_cmd>
	HAL_Delay(1);
 800069e:	2001      	movs	r0, #1
 80006a0:	f001 fbd0 	bl	8001e44 <HAL_Delay>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <lcd_locate>:

void lcd_locate(int x, int y) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	3302      	adds	r3, #2
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	019b      	lsls	r3, r3, #6
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	4413      	add	r3, r2
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ff6b 	bl	80005a0 <lcd_cmd>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <lcd_print>:

void lcd_print(const char *str) {
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80006da:	e007      	b.n	80006ec <lcd_print+0x1a>
	{
			lcd_data(*str);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ff75 	bl	80005d0 <lcd_data>
			str++;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3301      	adds	r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1f3      	bne.n	80006dc <lcd_print+0xa>
	}
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <lcd_printf>:

short lcd_printf(const char *format, ...) {
 80006fc:	b40f      	push	{r0, r1, r2, r3}
 80006fe:	b580      	push	{r7, lr}
 8000700:	b088      	sub	sp, #32
 8000702:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 8000704:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000708:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	69ba      	ldr	r2, [r7, #24]
 800070e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000710:	4618      	mov	r0, r3
 8000712:	f007 fd15 	bl	8008140 <vsiprintf>
 8000716:	4603      	mov	r3, r0
 8000718:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 800071a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800071e:	2b00      	cmp	r3, #0
 8000720:	dd03      	ble.n	800072a <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ffd4 	bl	80006d2 <lcd_print>
	}

	return ret;
 800072a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800072e:	4618      	mov	r0, r3
 8000730:	3720      	adds	r7, #32
 8000732:	46bd      	mov	sp, r7
 8000734:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000738:	b004      	add	sp, #16
 800073a:	4770      	bx	lr

0800073c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000744:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000748:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	2b00      	cmp	r3, #0
 8000752:	d013      	beq.n	800077c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000754:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000758:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800075c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000760:	2b00      	cmp	r3, #0
 8000762:	d00b      	beq.n	800077c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000764:	e000      	b.n	8000768 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000766:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000768:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d0f9      	beq.n	8000766 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000772:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800077c:	687b      	ldr	r3, [r7, #4]
}
 800077e:	4618      	mov	r0, r3
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b086      	sub	sp, #24
 800078e:	af00      	add	r7, sp, #0
 8000790:	60f8      	str	r0, [r7, #12]
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	e009      	b.n	80007b0 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	1c5a      	adds	r2, r3, #1
 80007a0:	60ba      	str	r2, [r7, #8]
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ffc9 	bl	800073c <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	3301      	adds	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	dbf1      	blt.n	800079c <_write+0x12>
  }
  return len;
 80007b8:	687b      	ldr	r3, [r7, #4]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
   timer++;
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	3301      	adds	r3, #1
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007d6:	801a      	strh	r2, [r3, #0]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	20000118 	.word	0x20000118

080007e8 <init>:

void init()
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	// ------initialize------//
	  //PWMスター??��?��?
	if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3) != HAL_OK){
 80007ec:	2108      	movs	r1, #8
 80007ee:	480e      	ldr	r0, [pc, #56]	; (8000828 <init+0x40>)
 80007f0:	f005 fb00 	bl	8005df4 <HAL_TIM_PWM_Start>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <init+0x16>
		Error_Handler();
 80007fa:	f000 fe13 	bl	8001424 <Error_Handler>
	}
	if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4) != HAL_OK){
 80007fe:	210c      	movs	r1, #12
 8000800:	4809      	ldr	r0, [pc, #36]	; (8000828 <init+0x40>)
 8000802:	f005 faf7 	bl	8005df4 <HAL_TIM_PWM_Start>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <init+0x28>
		Error_Handler();
 800080c:	f000 fe0a 	bl	8001424 <Error_Handler>
	}

	//Timer割り込みスター??��?��?
	HAL_TIM_Base_Start_IT(&htim6);
 8000810:	4806      	ldr	r0, [pc, #24]	; (800082c <init+0x44>)
 8000812:	f005 faa0 	bl	8005d56 <HAL_TIM_Base_Start_IT>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, 14);
 8000816:	220e      	movs	r2, #14
 8000818:	4905      	ldr	r1, [pc, #20]	; (8000830 <init+0x48>)
 800081a:	4806      	ldr	r0, [pc, #24]	; (8000834 <init+0x4c>)
 800081c:	f001 fb78 	bl	8001f10 <HAL_ADC_Start_DMA>

	lcd_init();
 8000820:	f7ff feee 	bl	8000600 <lcd_init>

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	2000015c 	.word	0x2000015c
 800082c:	200002ec 	.word	0x200002ec
 8000830:	200000a4 	.word	0x200000a4
 8000834:	20000244 	.word	0x20000244

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800083c:	f001 fa90 	bl	8001d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000840:	f000 f886 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000844:	f000 fcf2 	bl	800122c <MX_GPIO_Init>
  MX_DMA_Init();
 8000848:	f000 fcd0 	bl	80011ec <MX_DMA_Init>
  MX_ADC1_Init();
 800084c:	f000 f90e 	bl	8000a6c <MX_ADC1_Init>
  MX_I2C2_Init();
 8000850:	f000 fa42 	bl	8000cd8 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8000854:	f000 fa6e 	bl	8000d34 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8000858:	f000 fa8c 	bl	8000d74 <MX_SPI2_Init>
  MX_TIM1_Init();
 800085c:	f000 fac0 	bl	8000de0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000860:	f000 fb72 	bl	8000f48 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000864:	f000 fc40 	bl	80010e8 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8000868:	f000 fc96 	bl	8001198 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800086c:	f007 fa0e 	bl	8007c8c <MX_FATFS_Init>
  MX_TIM6_Init();
 8000870:	f000 fbce 	bl	8001010 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000874:	f000 fc02 	bl	800107c <MX_TIM7_Init>
  MX_I2C1_Init();
 8000878:	f000 fa00 	bl	8000c7c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  init();
 800087c:	f7ff ffb4 	bl	80007e8 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Lチカ
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000880:	2201      	movs	r2, #1
 8000882:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000886:	4829      	ldr	r0, [pc, #164]	; (800092c <main+0xf4>)
 8000888:	f002 fd44 	bl	8003314 <HAL_GPIO_WritePin>

	  //Motor
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 800);
 800088c:	4b28      	ldr	r3, [pc, #160]	; (8000930 <main+0xf8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000894:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 200);
 8000896:	4b26      	ldr	r3, [pc, #152]	; (8000930 <main+0xf8>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	22c8      	movs	r2, #200	; 0xc8
 800089c:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008a4:	4823      	ldr	r0, [pc, #140]	; (8000934 <main+0xfc>)
 80008a6:	f002 fd35 	bl	8003314 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 80008aa:	2201      	movs	r2, #1
 80008ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b0:	4820      	ldr	r0, [pc, #128]	; (8000934 <main+0xfc>)
 80008b2:	f002 fd2f 	bl	8003314 <HAL_GPIO_WritePin>

	  printf("Timer: %d\n", timer);
 80008b6:	4b20      	ldr	r3, [pc, #128]	; (8000938 <main+0x100>)
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	4619      	mov	r1, r3
 80008bc:	481f      	ldr	r0, [pc, #124]	; (800093c <main+0x104>)
 80008be:	f007 fc11 	bl	80080e4 <iprintf>

	  HAL_Delay(100);
 80008c2:	2064      	movs	r0, #100	; 0x64
 80008c4:	f001 fabe 	bl	8001e44 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ce:	4817      	ldr	r0, [pc, #92]	; (800092c <main+0xf4>)
 80008d0:	f002 fd20 	bl	8003314 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008da:	4816      	ldr	r0, [pc, #88]	; (8000934 <main+0xfc>)
 80008dc:	f002 fd1a 	bl	8003314 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008e6:	4813      	ldr	r0, [pc, #76]	; (8000934 <main+0xfc>)
 80008e8:	f002 fd14 	bl	8003314 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80008ec:	2064      	movs	r0, #100	; 0x64
 80008ee:	f001 faa9 	bl	8001e44 <HAL_Delay>

	  printf("AD: %d, %d, %d\n", analog[0], analog[1], analog[2]);
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <main+0x108>)
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	4619      	mov	r1, r3
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <main+0x108>)
 80008fa:	885b      	ldrh	r3, [r3, #2]
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <main+0x108>)
 8000900:	889b      	ldrh	r3, [r3, #4]
 8000902:	4810      	ldr	r0, [pc, #64]	; (8000944 <main+0x10c>)
 8000904:	f007 fbee 	bl	80080e4 <iprintf>

	  lcd_clear();
 8000908:	f7ff febe 	bl	8000688 <lcd_clear>
	  lcd_locate(0,0);
 800090c:	2100      	movs	r1, #0
 800090e:	2000      	movs	r0, #0
 8000910:	f7ff feca 	bl	80006a8 <lcd_locate>
	  lcd_printf("LCD");
 8000914:	480c      	ldr	r0, [pc, #48]	; (8000948 <main+0x110>)
 8000916:	f7ff fef1 	bl	80006fc <lcd_printf>
	  lcd_locate(0,1);
 800091a:	2101      	movs	r1, #1
 800091c:	2000      	movs	r0, #0
 800091e:	f7ff fec3 	bl	80006a8 <lcd_locate>
	  lcd_printf("TEST");
 8000922:	480a      	ldr	r0, [pc, #40]	; (800094c <main+0x114>)
 8000924:	f7ff feea 	bl	80006fc <lcd_printf>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000928:	e7aa      	b.n	8000880 <main+0x48>
 800092a:	bf00      	nop
 800092c:	40020000 	.word	0x40020000
 8000930:	2000015c 	.word	0x2000015c
 8000934:	40020c00 	.word	0x40020c00
 8000938:	20000118 	.word	0x20000118
 800093c:	0800924c 	.word	0x0800924c
 8000940:	200000a4 	.word	0x200000a4
 8000944:	08009258 	.word	0x08009258
 8000948:	08009268 	.word	0x08009268
 800094c:	0800926c 	.word	0x0800926c

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b0a4      	sub	sp, #144	; 0x90
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800095a:	2234      	movs	r2, #52	; 0x34
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f007 fbb8 	bl	80080d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	223c      	movs	r2, #60	; 0x3c
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f007 fba9 	bl	80080d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	4b37      	ldr	r3, [pc, #220]	; (8000a64 <SystemClock_Config+0x114>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	4a36      	ldr	r2, [pc, #216]	; (8000a64 <SystemClock_Config+0x114>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000990:	6413      	str	r3, [r2, #64]	; 0x40
 8000992:	4b34      	ldr	r3, [pc, #208]	; (8000a64 <SystemClock_Config+0x114>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b31      	ldr	r3, [pc, #196]	; (8000a68 <SystemClock_Config+0x118>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a30      	ldr	r2, [pc, #192]	; (8000a68 <SystemClock_Config+0x118>)
 80009a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ac:	6013      	str	r3, [r2, #0]
 80009ae:	4b2e      	ldr	r3, [pc, #184]	; (8000a68 <SystemClock_Config+0x118>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ba:	2301      	movs	r3, #1
 80009bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c4:	2302      	movs	r3, #2
 80009c6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009cc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009ce:	2308      	movs	r3, #8
 80009d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80009d2:	23b4      	movs	r3, #180	; 0xb4
 80009d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d8:	2302      	movs	r3, #2
 80009da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80009de:	2308      	movs	r3, #8
 80009e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009ee:	4618      	mov	r0, r3
 80009f0:	f003 fd68 	bl	80044c4 <HAL_RCC_OscConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009fa:	f000 fd13 	bl	8001424 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009fe:	f003 f8e3 	bl	8003bc8 <HAL_PWREx_EnableOverDrive>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000a08:	f000 fd0c 	bl	8001424 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a10:	2302      	movs	r3, #2
 8000a12:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a1c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a22:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a28:	2105      	movs	r1, #5
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f003 f91c 	bl	8003c68 <HAL_RCC_ClockConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000a36:	f000 fcf5 	bl	8001424 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000a3a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a3e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000a40:	2300      	movs	r3, #0
 8000a42:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000a44:	2300      	movs	r3, #0
 8000a46:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f003 fafb 	bl	8004048 <HAL_RCCEx_PeriphCLKConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8000a58:	f000 fce4 	bl	8001424 <Error_Handler>
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	3790      	adds	r7, #144	; 0x90
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40007000 	.word	0x40007000

08000a6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a72:	463b      	mov	r3, r7
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a7e:	4b7c      	ldr	r3, [pc, #496]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000a80:	4a7c      	ldr	r2, [pc, #496]	; (8000c74 <MX_ADC1_Init+0x208>)
 8000a82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a84:	4b7a      	ldr	r3, [pc, #488]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000a86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a8c:	4b78      	ldr	r3, [pc, #480]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a92:	4b77      	ldr	r3, [pc, #476]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a98:	4b75      	ldr	r3, [pc, #468]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a9e:	4b74      	ldr	r3, [pc, #464]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aa6:	4b72      	ldr	r3, [pc, #456]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aac:	4b70      	ldr	r3, [pc, #448]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000aae:	4a72      	ldr	r2, [pc, #456]	; (8000c78 <MX_ADC1_Init+0x20c>)
 8000ab0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ab2:	4b6f      	ldr	r3, [pc, #444]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8000ab8:	4b6d      	ldr	r3, [pc, #436]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000aba:	220e      	movs	r2, #14
 8000abc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000abe:	4b6c      	ldr	r3, [pc, #432]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ac6:	4b6a      	ldr	r3, [pc, #424]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000acc:	4868      	ldr	r0, [pc, #416]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000ace:	f001 f9db 	bl	8001e88 <HAL_ADC_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ad8:	f000 fca4 	bl	8001424 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae8:	463b      	mov	r3, r7
 8000aea:	4619      	mov	r1, r3
 8000aec:	4860      	ldr	r0, [pc, #384]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000aee:	f001 fb1f 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000af8:	f000 fc94 	bl	8001424 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000afc:	2301      	movs	r3, #1
 8000afe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000b00:	2302      	movs	r3, #2
 8000b02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b04:	463b      	mov	r3, r7
 8000b06:	4619      	mov	r1, r3
 8000b08:	4859      	ldr	r0, [pc, #356]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000b0a:	f001 fb11 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b14:	f000 fc86 	bl	8001424 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b20:	463b      	mov	r3, r7
 8000b22:	4619      	mov	r1, r3
 8000b24:	4852      	ldr	r0, [pc, #328]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000b26:	f001 fb03 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000b30:	f000 fc78 	bl	8001424 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b34:	2303      	movs	r3, #3
 8000b36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	4619      	mov	r1, r3
 8000b40:	484b      	ldr	r0, [pc, #300]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000b42:	f001 faf5 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000b4c:	f000 fc6a 	bl	8001424 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b50:	2304      	movs	r3, #4
 8000b52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000b54:	2305      	movs	r3, #5
 8000b56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b58:	463b      	mov	r3, r7
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4844      	ldr	r0, [pc, #272]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000b5e:	f001 fae7 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000b68:	f000 fc5c 	bl	8001424 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b6c:	2305      	movs	r3, #5
 8000b6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000b70:	2306      	movs	r3, #6
 8000b72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b74:	463b      	mov	r3, r7
 8000b76:	4619      	mov	r1, r3
 8000b78:	483d      	ldr	r0, [pc, #244]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000b7a:	f001 fad9 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000b84:	f000 fc4e 	bl	8001424 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000b88:	2306      	movs	r3, #6
 8000b8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000b8c:	2307      	movs	r3, #7
 8000b8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b90:	463b      	mov	r3, r7
 8000b92:	4619      	mov	r1, r3
 8000b94:	4836      	ldr	r0, [pc, #216]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000b96:	f001 facb 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000ba0:	f000 fc40 	bl	8001424 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ba4:	2307      	movs	r3, #7
 8000ba6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000ba8:	2308      	movs	r3, #8
 8000baa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bac:	463b      	mov	r3, r7
 8000bae:	4619      	mov	r1, r3
 8000bb0:	482f      	ldr	r0, [pc, #188]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000bb2:	f001 fabd 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000bbc:	f000 fc32 	bl	8001424 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000bc0:	2308      	movs	r3, #8
 8000bc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8000bc4:	2309      	movs	r3, #9
 8000bc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc8:	463b      	mov	r3, r7
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4828      	ldr	r0, [pc, #160]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000bce:	f001 faaf 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000bd8:	f000 fc24 	bl	8001424 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000bdc:	2309      	movs	r3, #9
 8000bde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8000be0:	230a      	movs	r3, #10
 8000be2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be4:	463b      	mov	r3, r7
 8000be6:	4619      	mov	r1, r3
 8000be8:	4821      	ldr	r0, [pc, #132]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000bea:	f001 faa1 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8000bf4:	f000 fc16 	bl	8001424 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bf8:	230a      	movs	r3, #10
 8000bfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8000bfc:	230b      	movs	r3, #11
 8000bfe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c00:	463b      	mov	r3, r7
 8000c02:	4619      	mov	r1, r3
 8000c04:	481a      	ldr	r0, [pc, #104]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000c06:	f001 fa93 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8000c10:	f000 fc08 	bl	8001424 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000c14:	230b      	movs	r3, #11
 8000c16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8000c18:	230c      	movs	r3, #12
 8000c1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4813      	ldr	r0, [pc, #76]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000c22:	f001 fa85 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8000c2c:	f000 fbfa 	bl	8001424 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000c30:	230c      	movs	r3, #12
 8000c32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8000c34:	230d      	movs	r3, #13
 8000c36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480c      	ldr	r0, [pc, #48]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000c3e:	f001 fa77 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8000c48:	f000 fbec 	bl	8001424 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000c4c:	230d      	movs	r3, #13
 8000c4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8000c50:	230e      	movs	r3, #14
 8000c52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c54:	463b      	mov	r3, r7
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_ADC1_Init+0x204>)
 8000c5a:	f001 fa69 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8000c64:	f000 fbde 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000244 	.word	0x20000244
 8000c74:	40012000 	.word	0x40012000
 8000c78:	0f000001 	.word	0x0f000001

08000c7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000c82:	4a13      	ldr	r2, [pc, #76]	; (8000cd0 <MX_I2C1_Init+0x54>)
 8000c84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000c88:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <MX_I2C1_Init+0x58>)
 8000c8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000c9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000cb4:	2280      	movs	r2, #128	; 0x80
 8000cb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000cba:	f002 fb45 	bl	8003348 <HAL_I2C_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cc4:	f000 fbae 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	2000019c 	.word	0x2000019c
 8000cd0:	40005400 	.word	0x40005400
 8000cd4:	000186a0 	.word	0x000186a0

08000cd8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <MX_I2C2_Init+0x50>)
 8000cde:	4a13      	ldr	r2, [pc, #76]	; (8000d2c <MX_I2C2_Init+0x54>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <MX_I2C2_Init+0x50>)
 8000ce4:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <MX_I2C2_Init+0x58>)
 8000ce6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_I2C2_Init+0x50>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_I2C2_Init+0x50>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <MX_I2C2_Init+0x50>)
 8000cf6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cfa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <MX_I2C2_Init+0x50>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_I2C2_Init+0x50>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <MX_I2C2_Init+0x50>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_I2C2_Init+0x50>)
 8000d10:	2280      	movs	r2, #128	; 0x80
 8000d12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <MX_I2C2_Init+0x50>)
 8000d16:	f002 fb17 	bl	8003348 <HAL_I2C_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d20:	f000 fb80 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	200001f0 	.word	0x200001f0
 8000d2c:	40005800 	.word	0x40005800
 8000d30:	000186a0 	.word	0x000186a0

08000d34 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_SDIO_SD_Init+0x38>)
 8000d3a:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <MX_SDIO_SD_Init+0x3c>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <MX_SDIO_SD_Init+0x38>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_SDIO_SD_Init+0x38>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <MX_SDIO_SD_Init+0x38>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_SDIO_SD_Init+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d56:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <MX_SDIO_SD_Init+0x38>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <MX_SDIO_SD_Init+0x38>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	2000036c 	.word	0x2000036c
 8000d70:	40012c00 	.word	0x40012c00

08000d74 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <MX_SPI2_Init+0x64>)
 8000d7a:	4a18      	ldr	r2, [pc, #96]	; (8000ddc <MX_SPI2_Init+0x68>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <MX_SPI2_Init+0x64>)
 8000d80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d84:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d86:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MX_SPI2_Init+0x64>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <MX_SPI2_Init+0x64>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_SPI2_Init+0x64>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_SPI2_Init+0x64>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_SPI2_Init+0x64>)
 8000da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_SPI2_Init+0x64>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <MX_SPI2_Init+0x64>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_SPI2_Init+0x64>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <MX_SPI2_Init+0x64>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_SPI2_Init+0x64>)
 8000dc0:	220a      	movs	r2, #10
 8000dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000dc4:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <MX_SPI2_Init+0x64>)
 8000dc6:	f004 ff37 	bl	8005c38 <HAL_SPI_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000dd0:	f000 fb28 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200000c0 	.word	0x200000c0
 8000ddc:	40003800 	.word	0x40003800

08000de0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b09a      	sub	sp, #104	; 0x68
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000de6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000dea:	2224      	movs	r2, #36	; 0x24
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f007 f970 	bl	80080d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dfe:	f107 0320 	add.w	r3, r7, #32
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]
 8000e0e:	615a      	str	r2, [r3, #20]
 8000e10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e12:	463b      	mov	r3, r7
 8000e14:	2220      	movs	r2, #32
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f007 f95b 	bl	80080d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e1e:	4b48      	ldr	r3, [pc, #288]	; (8000f40 <MX_TIM1_Init+0x160>)
 8000e20:	4a48      	ldr	r2, [pc, #288]	; (8000f44 <MX_TIM1_Init+0x164>)
 8000e22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e24:	4b46      	ldr	r3, [pc, #280]	; (8000f40 <MX_TIM1_Init+0x160>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2a:	4b45      	ldr	r3, [pc, #276]	; (8000f40 <MX_TIM1_Init+0x160>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e30:	4b43      	ldr	r3, [pc, #268]	; (8000f40 <MX_TIM1_Init+0x160>)
 8000e32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e38:	4b41      	ldr	r3, [pc, #260]	; (8000f40 <MX_TIM1_Init+0x160>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e3e:	4b40      	ldr	r3, [pc, #256]	; (8000f40 <MX_TIM1_Init+0x160>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e44:	4b3e      	ldr	r3, [pc, #248]	; (8000f40 <MX_TIM1_Init+0x160>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e4a:	483d      	ldr	r0, [pc, #244]	; (8000f40 <MX_TIM1_Init+0x160>)
 8000e4c:	f004 ffa7 	bl	8005d9e <HAL_TIM_PWM_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000e56:	f000 fae5 	bl	8001424 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e62:	2301      	movs	r3, #1
 8000e64:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e72:	2301      	movs	r3, #1
 8000e74:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000e7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e82:	4619      	mov	r1, r3
 8000e84:	482e      	ldr	r0, [pc, #184]	; (8000f40 <MX_TIM1_Init+0x160>)
 8000e86:	f004 fff3 	bl	8005e70 <HAL_TIM_Encoder_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8000e90:	f000 fac8 	bl	8001424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e94:	2300      	movs	r3, #0
 8000e96:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4827      	ldr	r0, [pc, #156]	; (8000f40 <MX_TIM1_Init+0x160>)
 8000ea4:	f005 fce2 	bl	800686c <HAL_TIMEx_MasterConfigSynchronization>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8000eae:	f000 fab9 	bl	8001424 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eb2:	2360      	movs	r3, #96	; 0x60
 8000eb4:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ece:	f107 0320 	add.w	r3, r7, #32
 8000ed2:	2208      	movs	r2, #8
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	481a      	ldr	r0, [pc, #104]	; (8000f40 <MX_TIM1_Init+0x160>)
 8000ed8:	f005 f964 	bl	80061a4 <HAL_TIM_PWM_ConfigChannel>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000ee2:	f000 fa9f 	bl	8001424 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ee6:	f107 0320 	add.w	r3, r7, #32
 8000eea:	220c      	movs	r2, #12
 8000eec:	4619      	mov	r1, r3
 8000eee:	4814      	ldr	r0, [pc, #80]	; (8000f40 <MX_TIM1_Init+0x160>)
 8000ef0:	f005 f958 	bl	80061a4 <HAL_TIM_PWM_ConfigChannel>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000efa:	f000 fa93 	bl	8001424 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4807      	ldr	r0, [pc, #28]	; (8000f40 <MX_TIM1_Init+0x160>)
 8000f22:	f005 fd1f 	bl	8006964 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8000f2c:	f000 fa7a 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f30:	4803      	ldr	r0, [pc, #12]	; (8000f40 <MX_TIM1_Init+0x160>)
 8000f32:	f000 fd63 	bl	80019fc <HAL_TIM_MspPostInit>

}
 8000f36:	bf00      	nop
 8000f38:	3768      	adds	r7, #104	; 0x68
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000032c 	.word	0x2000032c
 8000f44:	40010000 	.word	0x40010000

08000f48 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4e:	f107 0320 	add.w	r3, r7, #32
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]
 8000f66:	615a      	str	r2, [r3, #20]
 8000f68:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f6a:	4b27      	ldr	r3, [pc, #156]	; (8001008 <MX_TIM4_Init+0xc0>)
 8000f6c:	4a27      	ldr	r2, [pc, #156]	; (800100c <MX_TIM4_Init+0xc4>)
 8000f6e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f70:	4b25      	ldr	r3, [pc, #148]	; (8001008 <MX_TIM4_Init+0xc0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f76:	4b24      	ldr	r3, [pc, #144]	; (8001008 <MX_TIM4_Init+0xc0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <MX_TIM4_Init+0xc0>)
 8000f7e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000f82:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f84:	4b20      	ldr	r3, [pc, #128]	; (8001008 <MX_TIM4_Init+0xc0>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <MX_TIM4_Init+0xc0>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f90:	481d      	ldr	r0, [pc, #116]	; (8001008 <MX_TIM4_Init+0xc0>)
 8000f92:	f004 ff04 	bl	8005d9e <HAL_TIM_PWM_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000f9c:	f000 fa42 	bl	8001424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fa8:	f107 0320 	add.w	r3, r7, #32
 8000fac:	4619      	mov	r1, r3
 8000fae:	4816      	ldr	r0, [pc, #88]	; (8001008 <MX_TIM4_Init+0xc0>)
 8000fb0:	f005 fc5c 	bl	800686c <HAL_TIMEx_MasterConfigSynchronization>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000fba:	f000 fa33 	bl	8001424 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fbe:	2360      	movs	r3, #96	; 0x60
 8000fc0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2208      	movs	r2, #8
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <MX_TIM4_Init+0xc0>)
 8000fd6:	f005 f8e5 	bl	80061a4 <HAL_TIM_PWM_ConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000fe0:	f000 fa20 	bl	8001424 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4807      	ldr	r0, [pc, #28]	; (8001008 <MX_TIM4_Init+0xc0>)
 8000fec:	f005 f8da 	bl	80061a4 <HAL_TIM_PWM_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000ff6:	f000 fa15 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ffa:	4803      	ldr	r0, [pc, #12]	; (8001008 <MX_TIM4_Init+0xc0>)
 8000ffc:	f000 fcfe 	bl	80019fc <HAL_TIM_MspPostInit>

}
 8001000:	bf00      	nop
 8001002:	3728      	adds	r7, #40	; 0x28
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000015c 	.word	0x2000015c
 800100c:	40000800 	.word	0x40000800

08001010 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001016:	463b      	mov	r3, r7
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <MX_TIM6_Init+0x64>)
 8001020:	4a15      	ldr	r2, [pc, #84]	; (8001078 <MX_TIM6_Init+0x68>)
 8001022:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <MX_TIM6_Init+0x64>)
 8001026:	2259      	movs	r2, #89	; 0x59
 8001028:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102a:	4b12      	ldr	r3, [pc, #72]	; (8001074 <MX_TIM6_Init+0x64>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <MX_TIM6_Init+0x64>)
 8001032:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001036:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_TIM6_Init+0x64>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800103e:	480d      	ldr	r0, [pc, #52]	; (8001074 <MX_TIM6_Init+0x64>)
 8001040:	f004 fe5e 	bl	8005d00 <HAL_TIM_Base_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800104a:	f000 f9eb 	bl	8001424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104e:	2300      	movs	r3, #0
 8001050:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001056:	463b      	mov	r3, r7
 8001058:	4619      	mov	r1, r3
 800105a:	4806      	ldr	r0, [pc, #24]	; (8001074 <MX_TIM6_Init+0x64>)
 800105c:	f005 fc06 	bl	800686c <HAL_TIMEx_MasterConfigSynchronization>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001066:	f000 f9dd 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200002ec 	.word	0x200002ec
 8001078:	40001000 	.word	0x40001000

0800107c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001082:	463b      	mov	r3, r7
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <MX_TIM7_Init+0x64>)
 800108c:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <MX_TIM7_Init+0x68>)
 800108e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <MX_TIM7_Init+0x64>)
 8001092:	2200      	movs	r2, #0
 8001094:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <MX_TIM7_Init+0x64>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800109c:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <MX_TIM7_Init+0x64>)
 800109e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010a2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_TIM7_Init+0x64>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80010aa:	480d      	ldr	r0, [pc, #52]	; (80010e0 <MX_TIM7_Init+0x64>)
 80010ac:	f004 fe28 	bl	8005d00 <HAL_TIM_Base_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80010b6:	f000 f9b5 	bl	8001424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ba:	2300      	movs	r3, #0
 80010bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80010c2:	463b      	mov	r3, r7
 80010c4:	4619      	mov	r1, r3
 80010c6:	4806      	ldr	r0, [pc, #24]	; (80010e0 <MX_TIM7_Init+0x64>)
 80010c8:	f005 fbd0 	bl	800686c <HAL_TIMEx_MasterConfigSynchronization>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80010d2:	f000 f9a7 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000430 	.word	0x20000430
 80010e4:	40001400 	.word	0x40001400

080010e8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	2224      	movs	r2, #36	; 0x24
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f006 ffec 	bl	80080d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001104:	4b22      	ldr	r3, [pc, #136]	; (8001190 <MX_TIM8_Init+0xa8>)
 8001106:	4a23      	ldr	r2, [pc, #140]	; (8001194 <MX_TIM8_Init+0xac>)
 8001108:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <MX_TIM8_Init+0xa8>)
 800110c:	2200      	movs	r2, #0
 800110e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001110:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <MX_TIM8_Init+0xa8>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001116:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <MX_TIM8_Init+0xa8>)
 8001118:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800111c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111e:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <MX_TIM8_Init+0xa8>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_TIM8_Init+0xa8>)
 8001126:	2200      	movs	r2, #0
 8001128:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <MX_TIM8_Init+0xa8>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001130:	2301      	movs	r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001138:	2301      	movs	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001148:	2301      	movs	r3, #1
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	4619      	mov	r1, r3
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <MX_TIM8_Init+0xa8>)
 800115c:	f004 fe88 	bl	8005e70 <HAL_TIM_Encoder_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001166:	f000 f95d 	bl	8001424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	4619      	mov	r1, r3
 8001176:	4806      	ldr	r0, [pc, #24]	; (8001190 <MX_TIM8_Init+0xa8>)
 8001178:	f005 fb78 	bl	800686c <HAL_TIMEx_MasterConfigSynchronization>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001182:	f000 f94f 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	3730      	adds	r7, #48	; 0x30
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2000011c 	.word	0x2000011c
 8001194:	40010400 	.word	0x40010400

08001198 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_USART2_UART_Init+0x4c>)
 800119e:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <MX_USART2_UART_Init+0x50>)
 80011a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011be:	220c      	movs	r2, #12
 80011c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011d0:	f005 fc2e 	bl	8006a30 <HAL_UART_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011da:	f000 f923 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200003f0 	.word	0x200003f0
 80011e8:	40004400 	.word	0x40004400

080011ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_DMA_Init+0x3c>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <MX_DMA_Init+0x3c>)
 80011fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_DMA_Init+0x3c>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2038      	movs	r0, #56	; 0x38
 8001214:	f001 fb17 	bl	8002846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001218:	2038      	movs	r0, #56	; 0x38
 800121a:	f001 fb30 	bl	800287e <HAL_NVIC_EnableIRQ>

}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800

0800122c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08c      	sub	sp, #48	; 0x30
 8001230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
 8001246:	4b72      	ldr	r3, [pc, #456]	; (8001410 <MX_GPIO_Init+0x1e4>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a71      	ldr	r2, [pc, #452]	; (8001410 <MX_GPIO_Init+0x1e4>)
 800124c:	f043 0310 	orr.w	r3, r3, #16
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b6f      	ldr	r3, [pc, #444]	; (8001410 <MX_GPIO_Init+0x1e4>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0310 	and.w	r3, r3, #16
 800125a:	61bb      	str	r3, [r7, #24]
 800125c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	4b6b      	ldr	r3, [pc, #428]	; (8001410 <MX_GPIO_Init+0x1e4>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a6a      	ldr	r2, [pc, #424]	; (8001410 <MX_GPIO_Init+0x1e4>)
 8001268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b68      	ldr	r3, [pc, #416]	; (8001410 <MX_GPIO_Init+0x1e4>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b64      	ldr	r3, [pc, #400]	; (8001410 <MX_GPIO_Init+0x1e4>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a63      	ldr	r2, [pc, #396]	; (8001410 <MX_GPIO_Init+0x1e4>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b61      	ldr	r3, [pc, #388]	; (8001410 <MX_GPIO_Init+0x1e4>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b5d      	ldr	r3, [pc, #372]	; (8001410 <MX_GPIO_Init+0x1e4>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a5c      	ldr	r2, [pc, #368]	; (8001410 <MX_GPIO_Init+0x1e4>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b5a      	ldr	r3, [pc, #360]	; (8001410 <MX_GPIO_Init+0x1e4>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	4b56      	ldr	r3, [pc, #344]	; (8001410 <MX_GPIO_Init+0x1e4>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a55      	ldr	r2, [pc, #340]	; (8001410 <MX_GPIO_Init+0x1e4>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b53      	ldr	r3, [pc, #332]	; (8001410 <MX_GPIO_Init+0x1e4>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	4b4f      	ldr	r3, [pc, #316]	; (8001410 <MX_GPIO_Init+0x1e4>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a4e      	ldr	r2, [pc, #312]	; (8001410 <MX_GPIO_Init+0x1e4>)
 80012d8:	f043 0308 	orr.w	r3, r3, #8
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b4c      	ldr	r3, [pc, #304]	; (8001410 <MX_GPIO_Init+0x1e4>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80012f0:	4848      	ldr	r0, [pc, #288]	; (8001414 <MX_GPIO_Init+0x1e8>)
 80012f2:	f002 f80f 	bl	8003314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80012f6:	2200      	movs	r2, #0
 80012f8:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80012fc:	4846      	ldr	r0, [pc, #280]	; (8001418 <MX_GPIO_Init+0x1ec>)
 80012fe:	f002 f809 	bl	8003314 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8001302:	f240 5384 	movw	r3, #1412	; 0x584
 8001306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	4619      	mov	r1, r3
 8001316:	4841      	ldr	r0, [pc, #260]	; (800141c <MX_GPIO_Init+0x1f0>)
 8001318:	f001 fe3a 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800131c:	2304      	movs	r3, #4
 800131e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	4619      	mov	r1, r3
 800132e:	483c      	ldr	r0, [pc, #240]	; (8001420 <MX_GPIO_Init+0x1f4>)
 8001330:	f001 fe2e 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD0 PD1 PD3
                           PD4 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3
 8001334:	f240 139b 	movw	r3, #411	; 0x19b
 8001338:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	4619      	mov	r1, r3
 8001348:	4832      	ldr	r0, [pc, #200]	; (8001414 <MX_GPIO_Init+0x1e8>)
 800134a:	f001 fe21 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800134e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001354:	2301      	movs	r3, #1
 8001356:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4619      	mov	r1, r3
 8001366:	482b      	ldr	r0, [pc, #172]	; (8001414 <MX_GPIO_Init+0x1e8>)
 8001368:	f001 fe12 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800136c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001370:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	4619      	mov	r1, r3
 8001384:	4824      	ldr	r0, [pc, #144]	; (8001418 <MX_GPIO_Init+0x1ec>)
 8001386:	f001 fe03 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800138a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800138e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	4619      	mov	r1, r3
 800139e:	481e      	ldr	r0, [pc, #120]	; (8001418 <MX_GPIO_Init+0x1ec>)
 80013a0:	f001 fdf6 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013a4:	2330      	movs	r3, #48	; 0x30
 80013a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013b4:	2302      	movs	r3, #2
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	4818      	ldr	r0, [pc, #96]	; (8001420 <MX_GPIO_Init+0x1f4>)
 80013c0:	f001 fde6 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80013d6:	2303      	movs	r3, #3
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	480f      	ldr	r0, [pc, #60]	; (8001420 <MX_GPIO_Init+0x1f4>)
 80013e2:	f001 fdd5 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80013f8:	2303      	movs	r3, #3
 80013fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4619      	mov	r1, r3
 8001402:	4807      	ldr	r0, [pc, #28]	; (8001420 <MX_GPIO_Init+0x1f4>)
 8001404:	f001 fdc4 	bl	8002f90 <HAL_GPIO_Init>

}
 8001408:	bf00      	nop
 800140a:	3730      	adds	r7, #48	; 0x30
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800
 8001414:	40020c00 	.word	0x40020c00
 8001418:	40020000 	.word	0x40020000
 800141c:	40021000 	.word	0x40021000
 8001420:	40020400 	.word	0x40020400

08001424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001428:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800142a:	e7fe      	b.n	800142a <Error_Handler+0x6>

0800142c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <HAL_MspInit+0x4c>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a0f      	ldr	r2, [pc, #60]	; (8001478 <HAL_MspInit+0x4c>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <HAL_MspInit+0x4c>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	603b      	str	r3, [r7, #0]
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_MspInit+0x4c>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <HAL_MspInit+0x4c>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_MspInit+0x4c>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800

0800147c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08c      	sub	sp, #48	; 0x30
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 031c 	add.w	r3, r7, #28
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a49      	ldr	r2, [pc, #292]	; (80015c0 <HAL_ADC_MspInit+0x144>)
 800149a:	4293      	cmp	r3, r2
 800149c:	f040 808c 	bne.w	80015b8 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014a0:	2300      	movs	r3, #0
 80014a2:	61bb      	str	r3, [r7, #24]
 80014a4:	4b47      	ldr	r3, [pc, #284]	; (80015c4 <HAL_ADC_MspInit+0x148>)
 80014a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a8:	4a46      	ldr	r2, [pc, #280]	; (80015c4 <HAL_ADC_MspInit+0x148>)
 80014aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ae:	6453      	str	r3, [r2, #68]	; 0x44
 80014b0:	4b44      	ldr	r3, [pc, #272]	; (80015c4 <HAL_ADC_MspInit+0x148>)
 80014b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b8:	61bb      	str	r3, [r7, #24]
 80014ba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	4b40      	ldr	r3, [pc, #256]	; (80015c4 <HAL_ADC_MspInit+0x148>)
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	4a3f      	ldr	r2, [pc, #252]	; (80015c4 <HAL_ADC_MspInit+0x148>)
 80014c6:	f043 0304 	orr.w	r3, r3, #4
 80014ca:	6313      	str	r3, [r2, #48]	; 0x30
 80014cc:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <HAL_ADC_MspInit+0x148>)
 80014ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d8:	2300      	movs	r3, #0
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <HAL_ADC_MspInit+0x148>)
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	4a38      	ldr	r2, [pc, #224]	; (80015c4 <HAL_ADC_MspInit+0x148>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6313      	str	r3, [r2, #48]	; 0x30
 80014e8:	4b36      	ldr	r3, [pc, #216]	; (80015c4 <HAL_ADC_MspInit+0x148>)
 80014ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	4b32      	ldr	r3, [pc, #200]	; (80015c4 <HAL_ADC_MspInit+0x148>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	4a31      	ldr	r2, [pc, #196]	; (80015c4 <HAL_ADC_MspInit+0x148>)
 80014fe:	f043 0302 	orr.w	r3, r3, #2
 8001502:	6313      	str	r3, [r2, #48]	; 0x30
 8001504:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <HAL_ADC_MspInit+0x148>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001510:	230f      	movs	r3, #15
 8001512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001514:	2303      	movs	r3, #3
 8001516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	4619      	mov	r1, r3
 8001522:	4829      	ldr	r0, [pc, #164]	; (80015c8 <HAL_ADC_MspInit+0x14c>)
 8001524:	f001 fd34 	bl	8002f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001528:	23ff      	movs	r3, #255	; 0xff
 800152a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800152c:	2303      	movs	r3, #3
 800152e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	4619      	mov	r1, r3
 800153a:	4824      	ldr	r0, [pc, #144]	; (80015cc <HAL_ADC_MspInit+0x150>)
 800153c:	f001 fd28 	bl	8002f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001540:	2303      	movs	r3, #3
 8001542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001544:	2303      	movs	r3, #3
 8001546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4619      	mov	r1, r3
 8001552:	481f      	ldr	r0, [pc, #124]	; (80015d0 <HAL_ADC_MspInit+0x154>)
 8001554:	f001 fd1c 	bl	8002f90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001558:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <HAL_ADC_MspInit+0x158>)
 800155a:	4a1f      	ldr	r2, [pc, #124]	; (80015d8 <HAL_ADC_MspInit+0x15c>)
 800155c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800155e:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <HAL_ADC_MspInit+0x158>)
 8001560:	2200      	movs	r2, #0
 8001562:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <HAL_ADC_MspInit+0x158>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <HAL_ADC_MspInit+0x158>)
 800156c:	2200      	movs	r2, #0
 800156e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <HAL_ADC_MspInit+0x158>)
 8001572:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001576:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <HAL_ADC_MspInit+0x158>)
 800157a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800157e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <HAL_ADC_MspInit+0x158>)
 8001582:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001586:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_ADC_MspInit+0x158>)
 800158a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800158e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_ADC_MspInit+0x158>)
 8001592:	2200      	movs	r2, #0
 8001594:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_ADC_MspInit+0x158>)
 8001598:	2200      	movs	r2, #0
 800159a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800159c:	480d      	ldr	r0, [pc, #52]	; (80015d4 <HAL_ADC_MspInit+0x158>)
 800159e:	f001 f989 	bl	80028b4 <HAL_DMA_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80015a8:	f7ff ff3c 	bl	8001424 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a09      	ldr	r2, [pc, #36]	; (80015d4 <HAL_ADC_MspInit+0x158>)
 80015b0:	639a      	str	r2, [r3, #56]	; 0x38
 80015b2:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <HAL_ADC_MspInit+0x158>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015b8:	bf00      	nop
 80015ba:	3730      	adds	r7, #48	; 0x30
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40012000 	.word	0x40012000
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020800 	.word	0x40020800
 80015cc:	40020000 	.word	0x40020000
 80015d0:	40020400 	.word	0x40020400
 80015d4:	2000028c 	.word	0x2000028c
 80015d8:	40026410 	.word	0x40026410

080015dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08c      	sub	sp, #48	; 0x30
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a32      	ldr	r2, [pc, #200]	; (80016c4 <HAL_I2C_MspInit+0xe8>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d12c      	bne.n	8001658 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
 8001602:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <HAL_I2C_MspInit+0xec>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a30      	ldr	r2, [pc, #192]	; (80016c8 <HAL_I2C_MspInit+0xec>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <HAL_I2C_MspInit+0xec>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	61bb      	str	r3, [r7, #24]
 8001618:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800161a:	23c0      	movs	r3, #192	; 0xc0
 800161c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800161e:	2312      	movs	r3, #18
 8001620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001622:	2301      	movs	r3, #1
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001626:	2303      	movs	r3, #3
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800162a:	2304      	movs	r3, #4
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162e:	f107 031c 	add.w	r3, r7, #28
 8001632:	4619      	mov	r1, r3
 8001634:	4825      	ldr	r0, [pc, #148]	; (80016cc <HAL_I2C_MspInit+0xf0>)
 8001636:	f001 fcab 	bl	8002f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <HAL_I2C_MspInit+0xec>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	4a21      	ldr	r2, [pc, #132]	; (80016c8 <HAL_I2C_MspInit+0xec>)
 8001644:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001648:	6413      	str	r3, [r2, #64]	; 0x40
 800164a:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <HAL_I2C_MspInit+0xec>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001656:	e031      	b.n	80016bc <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a1c      	ldr	r2, [pc, #112]	; (80016d0 <HAL_I2C_MspInit+0xf4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d12c      	bne.n	80016bc <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <HAL_I2C_MspInit+0xec>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <HAL_I2C_MspInit+0xec>)
 800166c:	f043 0302 	orr.w	r3, r3, #2
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_I2C_MspInit+0xec>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800167e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001684:	2312      	movs	r3, #18
 8001686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001688:	2301      	movs	r3, #1
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001690:	2304      	movs	r3, #4
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	4619      	mov	r1, r3
 800169a:	480c      	ldr	r0, [pc, #48]	; (80016cc <HAL_I2C_MspInit+0xf0>)
 800169c:	f001 fc78 	bl	8002f90 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <HAL_I2C_MspInit+0xec>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <HAL_I2C_MspInit+0xec>)
 80016aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016ae:	6413      	str	r3, [r2, #64]	; 0x40
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_I2C_MspInit+0xec>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]
}
 80016bc:	bf00      	nop
 80016be:	3730      	adds	r7, #48	; 0x30
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40005400 	.word	0x40005400
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020400 	.word	0x40020400
 80016d0:	40005800 	.word	0x40005800

080016d4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	; 0x28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a28      	ldr	r2, [pc, #160]	; (8001794 <HAL_SD_MspInit+0xc0>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d14a      	bne.n	800178c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	4b27      	ldr	r3, [pc, #156]	; (8001798 <HAL_SD_MspInit+0xc4>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	4a26      	ldr	r2, [pc, #152]	; (8001798 <HAL_SD_MspInit+0xc4>)
 8001700:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001704:	6453      	str	r3, [r2, #68]	; 0x44
 8001706:	4b24      	ldr	r3, [pc, #144]	; (8001798 <HAL_SD_MspInit+0xc4>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_SD_MspInit+0xc4>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a1f      	ldr	r2, [pc, #124]	; (8001798 <HAL_SD_MspInit+0xc4>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <HAL_SD_MspInit+0xc4>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	4b19      	ldr	r3, [pc, #100]	; (8001798 <HAL_SD_MspInit+0xc4>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a18      	ldr	r2, [pc, #96]	; (8001798 <HAL_SD_MspInit+0xc4>)
 8001738:	f043 0308 	orr.w	r3, r3, #8
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b16      	ldr	r3, [pc, #88]	; (8001798 <HAL_SD_MspInit+0xc4>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800174a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800174e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800175c:	230c      	movs	r3, #12
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4619      	mov	r1, r3
 8001766:	480d      	ldr	r0, [pc, #52]	; (800179c <HAL_SD_MspInit+0xc8>)
 8001768:	f001 fc12 	bl	8002f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800176c:	2304      	movs	r3, #4
 800176e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800177c:	230c      	movs	r3, #12
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	4619      	mov	r1, r3
 8001786:	4806      	ldr	r0, [pc, #24]	; (80017a0 <HAL_SD_MspInit+0xcc>)
 8001788:	f001 fc02 	bl	8002f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800178c:	bf00      	nop
 800178e:	3728      	adds	r7, #40	; 0x28
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40012c00 	.word	0x40012c00
 8001798:	40023800 	.word	0x40023800
 800179c:	40020800 	.word	0x40020800
 80017a0:	40020c00 	.word	0x40020c00

080017a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a19      	ldr	r2, [pc, #100]	; (8001828 <HAL_SPI_MspInit+0x84>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d12c      	bne.n	8001820 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <HAL_SPI_MspInit+0x88>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	4a17      	ldr	r2, [pc, #92]	; (800182c <HAL_SPI_MspInit+0x88>)
 80017d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_SPI_MspInit+0x88>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <HAL_SPI_MspInit+0x88>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a10      	ldr	r2, [pc, #64]	; (800182c <HAL_SPI_MspInit+0x88>)
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <HAL_SPI_MspInit+0x88>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80017fe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	2303      	movs	r3, #3
 800180e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001810:	2305      	movs	r3, #5
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4619      	mov	r1, r3
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <HAL_SPI_MspInit+0x8c>)
 800181c:	f001 fbb8 	bl	8002f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001820:	bf00      	nop
 8001822:	3728      	adds	r7, #40	; 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40003800 	.word	0x40003800
 800182c:	40023800 	.word	0x40023800
 8001830:	40020400 	.word	0x40020400

08001834 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a23      	ldr	r2, [pc, #140]	; (80018e0 <HAL_TIM_PWM_MspInit+0xac>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d12d      	bne.n	80018b2 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <HAL_TIM_PWM_MspInit+0xb0>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	4a21      	ldr	r2, [pc, #132]	; (80018e4 <HAL_TIM_PWM_MspInit+0xb0>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6453      	str	r3, [r2, #68]	; 0x44
 8001866:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <HAL_TIM_PWM_MspInit+0xb0>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <HAL_TIM_PWM_MspInit+0xb0>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a1a      	ldr	r2, [pc, #104]	; (80018e4 <HAL_TIM_PWM_MspInit+0xb0>)
 800187c:	f043 0310 	orr.w	r3, r3, #16
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <HAL_TIM_PWM_MspInit+0xb0>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800188e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018a0:	2301      	movs	r3, #1
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	480f      	ldr	r0, [pc, #60]	; (80018e8 <HAL_TIM_PWM_MspInit+0xb4>)
 80018ac:	f001 fb70 	bl	8002f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018b0:	e012      	b.n	80018d8 <HAL_TIM_PWM_MspInit+0xa4>
  else if(htim_pwm->Instance==TIM4)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a0d      	ldr	r2, [pc, #52]	; (80018ec <HAL_TIM_PWM_MspInit+0xb8>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d10d      	bne.n	80018d8 <HAL_TIM_PWM_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018bc:	2300      	movs	r3, #0
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <HAL_TIM_PWM_MspInit+0xb0>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	4a07      	ldr	r2, [pc, #28]	; (80018e4 <HAL_TIM_PWM_MspInit+0xb0>)
 80018c6:	f043 0304 	orr.w	r3, r3, #4
 80018ca:	6413      	str	r3, [r2, #64]	; 0x40
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_TIM_PWM_MspInit+0xb0>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
}
 80018d8:	bf00      	nop
 80018da:	3728      	adds	r7, #40	; 0x28
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40010000 	.word	0x40010000
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40000800 	.word	0x40000800

080018f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a18      	ldr	r2, [pc, #96]	; (8001960 <HAL_TIM_Base_MspInit+0x70>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d116      	bne.n	8001930 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b17      	ldr	r3, [pc, #92]	; (8001964 <HAL_TIM_Base_MspInit+0x74>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a16      	ldr	r2, [pc, #88]	; (8001964 <HAL_TIM_Base_MspInit+0x74>)
 800190c:	f043 0310 	orr.w	r3, r3, #16
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
 8001912:	4b14      	ldr	r3, [pc, #80]	; (8001964 <HAL_TIM_Base_MspInit+0x74>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 0310 	and.w	r3, r3, #16
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	2036      	movs	r0, #54	; 0x36
 8001924:	f000 ff8f 	bl	8002846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001928:	2036      	movs	r0, #54	; 0x36
 800192a:	f000 ffa8 	bl	800287e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800192e:	e012      	b.n	8001956 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0c      	ldr	r2, [pc, #48]	; (8001968 <HAL_TIM_Base_MspInit+0x78>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d10d      	bne.n	8001956 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <HAL_TIM_Base_MspInit+0x74>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	4a08      	ldr	r2, [pc, #32]	; (8001964 <HAL_TIM_Base_MspInit+0x74>)
 8001944:	f043 0320 	orr.w	r3, r3, #32
 8001948:	6413      	str	r3, [r2, #64]	; 0x40
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_TIM_Base_MspInit+0x74>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f003 0320 	and.w	r3, r3, #32
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
}
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40001000 	.word	0x40001000
 8001964:	40023800 	.word	0x40023800
 8001968:	40001400 	.word	0x40001400

0800196c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a19      	ldr	r2, [pc, #100]	; (80019f0 <HAL_TIM_Encoder_MspInit+0x84>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d12b      	bne.n	80019e6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	4a17      	ldr	r2, [pc, #92]	; (80019f4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	6453      	str	r3, [r2, #68]	; 0x44
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <HAL_TIM_Encoder_MspInit+0x88>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <HAL_TIM_Encoder_MspInit+0x88>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a10      	ldr	r2, [pc, #64]	; (80019f4 <HAL_TIM_Encoder_MspInit+0x88>)
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <HAL_TIM_Encoder_MspInit+0x88>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019c6:	23c0      	movs	r3, #192	; 0xc0
 80019c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80019d6:	2303      	movs	r3, #3
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4619      	mov	r1, r3
 80019e0:	4805      	ldr	r0, [pc, #20]	; (80019f8 <HAL_TIM_Encoder_MspInit+0x8c>)
 80019e2:	f001 fad5 	bl	8002f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80019e6:	bf00      	nop
 80019e8:	3728      	adds	r7, #40	; 0x28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40010400 	.word	0x40010400
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40020800 	.word	0x40020800

080019fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	; 0x28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a25      	ldr	r2, [pc, #148]	; (8001ab0 <HAL_TIM_MspPostInit+0xb4>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d11f      	bne.n	8001a5e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <HAL_TIM_MspPostInit+0xb8>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a23      	ldr	r2, [pc, #140]	; (8001ab4 <HAL_TIM_MspPostInit+0xb8>)
 8001a28:	f043 0310 	orr.w	r3, r3, #16
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <HAL_TIM_MspPostInit+0xb8>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0310 	and.w	r3, r3, #16
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001a3a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4619      	mov	r1, r3
 8001a56:	4818      	ldr	r0, [pc, #96]	; (8001ab8 <HAL_TIM_MspPostInit+0xbc>)
 8001a58:	f001 fa9a 	bl	8002f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001a5c:	e023      	b.n	8001aa6 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM4)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a16      	ldr	r2, [pc, #88]	; (8001abc <HAL_TIM_MspPostInit+0xc0>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d11e      	bne.n	8001aa6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <HAL_TIM_MspPostInit+0xb8>)
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	4a10      	ldr	r2, [pc, #64]	; (8001ab4 <HAL_TIM_MspPostInit+0xb8>)
 8001a72:	f043 0308 	orr.w	r3, r3, #8
 8001a76:	6313      	str	r3, [r2, #48]	; 0x30
 8001a78:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <HAL_TIM_MspPostInit+0xb8>)
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001a84:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a96:	2302      	movs	r3, #2
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4807      	ldr	r0, [pc, #28]	; (8001ac0 <HAL_TIM_MspPostInit+0xc4>)
 8001aa2:	f001 fa75 	bl	8002f90 <HAL_GPIO_Init>
}
 8001aa6:	bf00      	nop
 8001aa8:	3728      	adds	r7, #40	; 0x28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40010000 	.word	0x40010000
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40000800 	.word	0x40000800
 8001ac0:	40020c00 	.word	0x40020c00

08001ac4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	; 0x28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a19      	ldr	r2, [pc, #100]	; (8001b48 <HAL_UART_MspInit+0x84>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d12b      	bne.n	8001b3e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <HAL_UART_MspInit+0x88>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	4a17      	ldr	r2, [pc, #92]	; (8001b4c <HAL_UART_MspInit+0x88>)
 8001af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af4:	6413      	str	r3, [r2, #64]	; 0x40
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_UART_MspInit+0x88>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <HAL_UART_MspInit+0x88>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a10      	ldr	r2, [pc, #64]	; (8001b4c <HAL_UART_MspInit+0x88>)
 8001b0c:	f043 0308 	orr.w	r3, r3, #8
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <HAL_UART_MspInit+0x88>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001b1e:	2360      	movs	r3, #96	; 0x60
 8001b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b2e:	2307      	movs	r3, #7
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	4805      	ldr	r0, [pc, #20]	; (8001b50 <HAL_UART_MspInit+0x8c>)
 8001b3a:	f001 fa29 	bl	8002f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b3e:	bf00      	nop
 8001b40:	3728      	adds	r7, #40	; 0x28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40004400 	.word	0x40004400
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020c00 	.word	0x40020c00

08001b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <NMI_Handler+0x4>

08001b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b5e:	e7fe      	b.n	8001b5e <HardFault_Handler+0x4>

08001b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <MemManage_Handler+0x4>

08001b66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <BusFault_Handler+0x4>

08001b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <UsageFault_Handler+0x4>

08001b72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba0:	f000 f930 	bl	8001e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <TIM6_DAC_IRQHandler+0x10>)
 8001bae:	f004 f9f1 	bl	8005f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200002ec 	.word	0x200002ec

08001bbc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <DMA2_Stream0_IRQHandler+0x10>)
 8001bc2:	f000 ff7d 	bl	8002ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000028c 	.word	0x2000028c

08001bd0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	e00a      	b.n	8001bf8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001be2:	f3af 8000 	nop.w
 8001be6:	4601      	mov	r1, r0
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	60ba      	str	r2, [r7, #8]
 8001bee:	b2ca      	uxtb	r2, r1
 8001bf0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	dbf0      	blt.n	8001be2 <_read+0x12>
	}

return len;
 8001c00:	687b      	ldr	r3, [r7, #4]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <_close>:
	}
	return len;
}

int _close(int file)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
	return -1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c32:	605a      	str	r2, [r3, #4]
	return 0;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <_isatty>:

int _isatty(int file)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
	return 1;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
	return 0;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c7c:	4a14      	ldr	r2, [pc, #80]	; (8001cd0 <_sbrk+0x5c>)
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <_sbrk+0x60>)
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <_sbrk+0x64>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d102      	bne.n	8001c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <_sbrk+0x64>)
 8001c92:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <_sbrk+0x68>)
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <_sbrk+0x64>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d207      	bcs.n	8001cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca4:	f006 f9ec 	bl	8008080 <__errno>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	230c      	movs	r3, #12
 8001cac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb2:	e009      	b.n	8001cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb4:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <_sbrk+0x64>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <_sbrk+0x64>)
 8001cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20050000 	.word	0x20050000
 8001cd4:	00000400 	.word	0x00000400
 8001cd8:	2000008c 	.word	0x2000008c
 8001cdc:	200008e0 	.word	0x200008e0

08001ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <SystemInit+0x28>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cea:	4a07      	ldr	r2, [pc, #28]	; (8001d08 <SystemInit+0x28>)
 8001cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <SystemInit+0x28>)
 8001cf6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cfa:	609a      	str	r2, [r3, #8]
#endif
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d12:	e003      	b.n	8001d1c <LoopCopyDataInit>

08001d14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d1a:	3104      	adds	r1, #4

08001d1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d1c:	480b      	ldr	r0, [pc, #44]	; (8001d4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d24:	d3f6      	bcc.n	8001d14 <CopyDataInit>
  ldr  r2, =_sbss
 8001d26:	4a0b      	ldr	r2, [pc, #44]	; (8001d54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d28:	e002      	b.n	8001d30 <LoopFillZerobss>

08001d2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d2c:	f842 3b04 	str.w	r3, [r2], #4

08001d30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d34:	d3f9      	bcc.n	8001d2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d36:	f7ff ffd3 	bl	8001ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d3a:	f006 f9a7 	bl	800808c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d3e:	f7fe fd7b 	bl	8000838 <main>
  bx  lr    
 8001d42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d44:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001d48:	08009350 	.word	0x08009350
  ldr  r0, =_sdata
 8001d4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d50:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001d54:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001d58:	200008e0 	.word	0x200008e0

08001d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d5c:	e7fe      	b.n	8001d5c <ADC_IRQHandler>
	...

08001d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d64:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <HAL_Init+0x40>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0d      	ldr	r2, [pc, #52]	; (8001da0 <HAL_Init+0x40>)
 8001d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <HAL_Init+0x40>)
 8001d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <HAL_Init+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a07      	ldr	r2, [pc, #28]	; (8001da0 <HAL_Init+0x40>)
 8001d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d88:	2003      	movs	r0, #3
 8001d8a:	f000 fd51 	bl	8002830 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f000 f808 	bl	8001da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d94:	f7ff fb4a 	bl	800142c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023c00 	.word	0x40023c00

08001da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_InitTick+0x54>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_InitTick+0x58>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	4619      	mov	r1, r3
 8001db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 fd69 	bl	800289a <HAL_SYSTICK_Config>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00e      	b.n	8001df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b0f      	cmp	r3, #15
 8001dd6:	d80a      	bhi.n	8001dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8001de0:	f000 fd31 	bl	8002846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de4:	4a06      	ldr	r2, [pc, #24]	; (8001e00 <HAL_InitTick+0x5c>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	e000      	b.n	8001df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	20000008 	.word	0x20000008
 8001e00:	20000004 	.word	0x20000004

08001e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_IncTick+0x20>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_IncTick+0x24>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <HAL_IncTick+0x24>)
 8001e16:	6013      	str	r3, [r2, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000008 	.word	0x20000008
 8001e28:	20000470 	.word	0x20000470

08001e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <HAL_GetTick+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000470 	.word	0x20000470

08001e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e4c:	f7ff ffee 	bl	8001e2c <HAL_GetTick>
 8001e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5c:	d005      	beq.n	8001e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HAL_Delay+0x40>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4413      	add	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e6a:	bf00      	nop
 8001e6c:	f7ff ffde 	bl	8001e2c <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d8f7      	bhi.n	8001e6c <HAL_Delay+0x28>
  {
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000008 	.word	0x20000008

08001e88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e033      	b.n	8001f06 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d109      	bne.n	8001eba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff fae8 	bl	800147c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d118      	bne.n	8001ef8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ece:	f023 0302 	bic.w	r3, r3, #2
 8001ed2:	f043 0202 	orr.w	r2, r3, #2
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 fa5a 	bl	8002394 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f023 0303 	bic.w	r3, r3, #3
 8001eee:	f043 0201 	orr.w	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ef6:	e001      	b.n	8001efc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_ADC_Start_DMA+0x1e>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e0cc      	b.n	80020c8 <HAL_ADC_Start_DMA+0x1b8>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d018      	beq.n	8001f76 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f54:	4b5e      	ldr	r3, [pc, #376]	; (80020d0 <HAL_ADC_Start_DMA+0x1c0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a5e      	ldr	r2, [pc, #376]	; (80020d4 <HAL_ADC_Start_DMA+0x1c4>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	0c9a      	lsrs	r2, r3, #18
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001f68:	e002      	b.n	8001f70 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f9      	bne.n	8001f6a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	f040 80a0 	bne.w	80020c6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d007      	beq.n	8001fb8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fb0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fc4:	d106      	bne.n	8001fd4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	f023 0206 	bic.w	r2, r3, #6
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	645a      	str	r2, [r3, #68]	; 0x44
 8001fd2:	e002      	b.n	8001fda <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fe2:	4b3d      	ldr	r3, [pc, #244]	; (80020d8 <HAL_ADC_Start_DMA+0x1c8>)
 8001fe4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fea:	4a3c      	ldr	r2, [pc, #240]	; (80020dc <HAL_ADC_Start_DMA+0x1cc>)
 8001fec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff2:	4a3b      	ldr	r2, [pc, #236]	; (80020e0 <HAL_ADC_Start_DMA+0x1d0>)
 8001ff4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffa:	4a3a      	ldr	r2, [pc, #232]	; (80020e4 <HAL_ADC_Start_DMA+0x1d4>)
 8001ffc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002006:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002016:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002026:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	334c      	adds	r3, #76	; 0x4c
 8002032:	4619      	mov	r1, r3
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f000 fcea 	bl	8002a10 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	2b00      	cmp	r3, #0
 8002046:	d12a      	bne.n	800209e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a26      	ldr	r2, [pc, #152]	; (80020e8 <HAL_ADC_Start_DMA+0x1d8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d015      	beq.n	800207e <HAL_ADC_Start_DMA+0x16e>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a25      	ldr	r2, [pc, #148]	; (80020ec <HAL_ADC_Start_DMA+0x1dc>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d105      	bne.n	8002068 <HAL_ADC_Start_DMA+0x158>
 800205c:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <HAL_ADC_Start_DMA+0x1c8>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a20      	ldr	r2, [pc, #128]	; (80020f0 <HAL_ADC_Start_DMA+0x1e0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d129      	bne.n	80020c6 <HAL_ADC_Start_DMA+0x1b6>
 8002072:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <HAL_ADC_Start_DMA+0x1c8>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 031f 	and.w	r3, r3, #31
 800207a:	2b0f      	cmp	r3, #15
 800207c:	d823      	bhi.n	80020c6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d11c      	bne.n	80020c6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	e013      	b.n	80020c6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a11      	ldr	r2, [pc, #68]	; (80020e8 <HAL_ADC_Start_DMA+0x1d8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d10e      	bne.n	80020c6 <HAL_ADC_Start_DMA+0x1b6>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d107      	bne.n	80020c6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020c4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000000 	.word	0x20000000
 80020d4:	431bde83 	.word	0x431bde83
 80020d8:	40012300 	.word	0x40012300
 80020dc:	0800258d 	.word	0x0800258d
 80020e0:	08002647 	.word	0x08002647
 80020e4:	08002663 	.word	0x08002663
 80020e8:	40012000 	.word	0x40012000
 80020ec:	40012100 	.word	0x40012100
 80020f0:	40012200 	.word	0x40012200

080020f4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_ADC_ConfigChannel+0x1c>
 8002148:	2302      	movs	r3, #2
 800214a:	e113      	b.n	8002374 <HAL_ADC_ConfigChannel+0x244>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b09      	cmp	r3, #9
 800215a:	d925      	bls.n	80021a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68d9      	ldr	r1, [r3, #12]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	b29b      	uxth	r3, r3
 8002168:	461a      	mov	r2, r3
 800216a:	4613      	mov	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4413      	add	r3, r2
 8002170:	3b1e      	subs	r3, #30
 8002172:	2207      	movs	r2, #7
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43da      	mvns	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	400a      	ands	r2, r1
 8002180:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68d9      	ldr	r1, [r3, #12]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	b29b      	uxth	r3, r3
 8002192:	4618      	mov	r0, r3
 8002194:	4603      	mov	r3, r0
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4403      	add	r3, r0
 800219a:	3b1e      	subs	r3, #30
 800219c:	409a      	lsls	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	e022      	b.n	80021ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6919      	ldr	r1, [r3, #16]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	461a      	mov	r2, r3
 80021b6:	4613      	mov	r3, r2
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	4413      	add	r3, r2
 80021bc:	2207      	movs	r2, #7
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	400a      	ands	r2, r1
 80021ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6919      	ldr	r1, [r3, #16]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	4618      	mov	r0, r3
 80021de:	4603      	mov	r3, r0
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4403      	add	r3, r0
 80021e4:	409a      	lsls	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d824      	bhi.n	8002240 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	3b05      	subs	r3, #5
 8002208:	221f      	movs	r2, #31
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43da      	mvns	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	400a      	ands	r2, r1
 8002216:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	b29b      	uxth	r3, r3
 8002224:	4618      	mov	r0, r3
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	3b05      	subs	r3, #5
 8002232:	fa00 f203 	lsl.w	r2, r0, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	635a      	str	r2, [r3, #52]	; 0x34
 800223e:	e04c      	b.n	80022da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b0c      	cmp	r3, #12
 8002246:	d824      	bhi.n	8002292 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	3b23      	subs	r3, #35	; 0x23
 800225a:	221f      	movs	r2, #31
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43da      	mvns	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	400a      	ands	r2, r1
 8002268:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	b29b      	uxth	r3, r3
 8002276:	4618      	mov	r0, r3
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	3b23      	subs	r3, #35	; 0x23
 8002284:	fa00 f203 	lsl.w	r2, r0, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
 8002290:	e023      	b.n	80022da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	3b41      	subs	r3, #65	; 0x41
 80022a4:	221f      	movs	r2, #31
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43da      	mvns	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	400a      	ands	r2, r1
 80022b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	4618      	mov	r0, r3
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	3b41      	subs	r3, #65	; 0x41
 80022ce:	fa00 f203 	lsl.w	r2, r0, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022da:	4b29      	ldr	r3, [pc, #164]	; (8002380 <HAL_ADC_ConfigChannel+0x250>)
 80022dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a28      	ldr	r2, [pc, #160]	; (8002384 <HAL_ADC_ConfigChannel+0x254>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d10f      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x1d8>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b12      	cmp	r3, #18
 80022ee:	d10b      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a1d      	ldr	r2, [pc, #116]	; (8002384 <HAL_ADC_ConfigChannel+0x254>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d12b      	bne.n	800236a <HAL_ADC_ConfigChannel+0x23a>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a1c      	ldr	r2, [pc, #112]	; (8002388 <HAL_ADC_ConfigChannel+0x258>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d003      	beq.n	8002324 <HAL_ADC_ConfigChannel+0x1f4>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b11      	cmp	r3, #17
 8002322:	d122      	bne.n	800236a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a11      	ldr	r2, [pc, #68]	; (8002388 <HAL_ADC_ConfigChannel+0x258>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d111      	bne.n	800236a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <HAL_ADC_ConfigChannel+0x25c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a11      	ldr	r2, [pc, #68]	; (8002390 <HAL_ADC_ConfigChannel+0x260>)
 800234c:	fba2 2303 	umull	r2, r3, r2, r3
 8002350:	0c9a      	lsrs	r2, r3, #18
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800235c:	e002      	b.n	8002364 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	3b01      	subs	r3, #1
 8002362:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f9      	bne.n	800235e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	40012300 	.word	0x40012300
 8002384:	40012000 	.word	0x40012000
 8002388:	10000012 	.word	0x10000012
 800238c:	20000000 	.word	0x20000000
 8002390:	431bde83 	.word	0x431bde83

08002394 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800239c:	4b79      	ldr	r3, [pc, #484]	; (8002584 <ADC_Init+0x1f0>)
 800239e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	431a      	orrs	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6859      	ldr	r1, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	021a      	lsls	r2, r3, #8
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800240e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6899      	ldr	r1, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	4a58      	ldr	r2, [pc, #352]	; (8002588 <ADC_Init+0x1f4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d022      	beq.n	8002472 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800243a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6899      	ldr	r1, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800245c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6899      	ldr	r1, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	e00f      	b.n	8002492 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002480:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002490:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0202 	bic.w	r2, r2, #2
 80024a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6899      	ldr	r1, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	7e1b      	ldrb	r3, [r3, #24]
 80024ac:	005a      	lsls	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d01b      	beq.n	80024f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6859      	ldr	r1, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	3b01      	subs	r3, #1
 80024ec:	035a      	lsls	r2, r3, #13
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	e007      	b.n	8002508 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002506:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002516:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	3b01      	subs	r3, #1
 8002524:	051a      	lsls	r2, r3, #20
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800253c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6899      	ldr	r1, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800254a:	025a      	lsls	r2, r3, #9
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002562:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6899      	ldr	r1, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	029a      	lsls	r2, r3, #10
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	609a      	str	r2, [r3, #8]
}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	40012300 	.word	0x40012300
 8002588:	0f000001 	.word	0x0f000001

0800258c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002598:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d13c      	bne.n	8002620 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d12b      	bne.n	8002618 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d127      	bne.n	8002618 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d006      	beq.n	80025e4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d119      	bne.n	8002618 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0220 	bic.w	r2, r2, #32
 80025f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d105      	bne.n	8002618 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	f043 0201 	orr.w	r2, r3, #1
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f7ff fd6b 	bl	80020f4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800261e:	e00e      	b.n	800263e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f7ff fd75 	bl	800211c <HAL_ADC_ErrorCallback>
}
 8002632:	e004      	b.n	800263e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	4798      	blx	r3
}
 800263e:	bf00      	nop
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b084      	sub	sp, #16
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002652:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f7ff fd57 	bl	8002108 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b084      	sub	sp, #16
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2240      	movs	r2, #64	; 0x40
 8002674:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	f043 0204 	orr.w	r2, r3, #4
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f7ff fd4a 	bl	800211c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <__NVIC_SetPriorityGrouping>:
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026ac:	4013      	ands	r3, r2
 80026ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026c2:	4a04      	ldr	r2, [pc, #16]	; (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	60d3      	str	r3, [r2, #12]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <__NVIC_GetPriorityGrouping>:
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026dc:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <__NVIC_GetPriorityGrouping+0x18>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	f003 0307 	and.w	r3, r3, #7
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <__NVIC_EnableIRQ>:
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	2b00      	cmp	r3, #0
 8002704:	db0b      	blt.n	800271e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	f003 021f 	and.w	r2, r3, #31
 800270c:	4907      	ldr	r1, [pc, #28]	; (800272c <__NVIC_EnableIRQ+0x38>)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	2001      	movs	r0, #1
 8002716:	fa00 f202 	lsl.w	r2, r0, r2
 800271a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	e000e100 	.word	0xe000e100

08002730 <__NVIC_SetPriority>:
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	6039      	str	r1, [r7, #0]
 800273a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002740:	2b00      	cmp	r3, #0
 8002742:	db0a      	blt.n	800275a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	b2da      	uxtb	r2, r3
 8002748:	490c      	ldr	r1, [pc, #48]	; (800277c <__NVIC_SetPriority+0x4c>)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	0112      	lsls	r2, r2, #4
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	440b      	add	r3, r1
 8002754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002758:	e00a      	b.n	8002770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	b2da      	uxtb	r2, r3
 800275e:	4908      	ldr	r1, [pc, #32]	; (8002780 <__NVIC_SetPriority+0x50>)
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	3b04      	subs	r3, #4
 8002768:	0112      	lsls	r2, r2, #4
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	440b      	add	r3, r1
 800276e:	761a      	strb	r2, [r3, #24]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000e100 	.word	0xe000e100
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <NVIC_EncodePriority>:
{
 8002784:	b480      	push	{r7}
 8002786:	b089      	sub	sp, #36	; 0x24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f1c3 0307 	rsb	r3, r3, #7
 800279e:	2b04      	cmp	r3, #4
 80027a0:	bf28      	it	cs
 80027a2:	2304      	movcs	r3, #4
 80027a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3304      	adds	r3, #4
 80027aa:	2b06      	cmp	r3, #6
 80027ac:	d902      	bls.n	80027b4 <NVIC_EncodePriority+0x30>
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3b03      	subs	r3, #3
 80027b2:	e000      	b.n	80027b6 <NVIC_EncodePriority+0x32>
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	f04f 32ff 	mov.w	r2, #4294967295
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43da      	mvns	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	401a      	ands	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027cc:	f04f 31ff 	mov.w	r1, #4294967295
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	fa01 f303 	lsl.w	r3, r1, r3
 80027d6:	43d9      	mvns	r1, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027dc:	4313      	orrs	r3, r2
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3724      	adds	r7, #36	; 0x24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
	...

080027ec <SysTick_Config>:
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027fc:	d301      	bcc.n	8002802 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80027fe:	2301      	movs	r3, #1
 8002800:	e00f      	b.n	8002822 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002802:	4a0a      	ldr	r2, [pc, #40]	; (800282c <SysTick_Config+0x40>)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3b01      	subs	r3, #1
 8002808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800280a:	210f      	movs	r1, #15
 800280c:	f04f 30ff 	mov.w	r0, #4294967295
 8002810:	f7ff ff8e 	bl	8002730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <SysTick_Config+0x40>)
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800281a:	4b04      	ldr	r3, [pc, #16]	; (800282c <SysTick_Config+0x40>)
 800281c:	2207      	movs	r2, #7
 800281e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	e000e010 	.word	0xe000e010

08002830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff ff29 	bl	8002690 <__NVIC_SetPriorityGrouping>
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002846:	b580      	push	{r7, lr}
 8002848:	b086      	sub	sp, #24
 800284a:	af00      	add	r7, sp, #0
 800284c:	4603      	mov	r3, r0
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002858:	f7ff ff3e 	bl	80026d8 <__NVIC_GetPriorityGrouping>
 800285c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68b9      	ldr	r1, [r7, #8]
 8002862:	6978      	ldr	r0, [r7, #20]
 8002864:	f7ff ff8e 	bl	8002784 <NVIC_EncodePriority>
 8002868:	4602      	mov	r2, r0
 800286a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800286e:	4611      	mov	r1, r2
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff5d 	bl	8002730 <__NVIC_SetPriority>
}
 8002876:	bf00      	nop
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	4603      	mov	r3, r0
 8002886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff31 	bl	80026f4 <__NVIC_EnableIRQ>
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff ffa2 	bl	80027ec <SysTick_Config>
 80028a8:	4603      	mov	r3, r0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028c0:	f7ff fab4 	bl	8001e2c <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e099      	b.n	8002a04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0201 	bic.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028f0:	e00f      	b.n	8002912 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028f2:	f7ff fa9b 	bl	8001e2c <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b05      	cmp	r3, #5
 80028fe:	d908      	bls.n	8002912 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2220      	movs	r2, #32
 8002904:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2203      	movs	r2, #3
 800290a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e078      	b.n	8002a04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1e8      	bne.n	80028f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	4b38      	ldr	r3, [pc, #224]	; (8002a0c <HAL_DMA_Init+0x158>)
 800292c:	4013      	ands	r3, r2
 800292e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800293e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800294a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002956:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4313      	orrs	r3, r2
 8002962:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	2b04      	cmp	r3, #4
 800296a:	d107      	bne.n	800297c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	4313      	orrs	r3, r2
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4313      	orrs	r3, r2
 800297a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f023 0307 	bic.w	r3, r3, #7
 8002992:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	4313      	orrs	r3, r2
 800299c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d117      	bne.n	80029d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00e      	beq.n	80029d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 fa6f 	bl	8002e9c <DMA_CheckFifoParam>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2240      	movs	r2, #64	; 0x40
 80029c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029d2:	2301      	movs	r3, #1
 80029d4:	e016      	b.n	8002a04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 fa26 	bl	8002e30 <DMA_CalcBaseAndBitshift>
 80029e4:	4603      	mov	r3, r0
 80029e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ec:	223f      	movs	r2, #63	; 0x3f
 80029ee:	409a      	lsls	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	f010803f 	.word	0xf010803f

08002a10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_DMA_Start_IT+0x26>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e040      	b.n	8002ab8 <HAL_DMA_Start_IT+0xa8>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d12f      	bne.n	8002aaa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 f9b8 	bl	8002dd4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a68:	223f      	movs	r2, #63	; 0x3f
 8002a6a:	409a      	lsls	r2, r3
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0216 	orr.w	r2, r2, #22
 8002a7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d007      	beq.n	8002a98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0208 	orr.w	r2, r2, #8
 8002a96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	e005      	b.n	8002ab6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002acc:	4b92      	ldr	r3, [pc, #584]	; (8002d18 <HAL_DMA_IRQHandler+0x258>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a92      	ldr	r2, [pc, #584]	; (8002d1c <HAL_DMA_IRQHandler+0x25c>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	0a9b      	lsrs	r3, r3, #10
 8002ad8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ade:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aea:	2208      	movs	r2, #8
 8002aec:	409a      	lsls	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d01a      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d013      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0204 	bic.w	r2, r2, #4
 8002b12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b18:	2208      	movs	r2, #8
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b24:	f043 0201 	orr.w	r2, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b30:	2201      	movs	r2, #1
 8002b32:	409a      	lsls	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d012      	beq.n	8002b62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00b      	beq.n	8002b62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4e:	2201      	movs	r2, #1
 8002b50:	409a      	lsls	r2, r3
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5a:	f043 0202 	orr.w	r2, r3, #2
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b66:	2204      	movs	r2, #4
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d012      	beq.n	8002b98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00b      	beq.n	8002b98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b84:	2204      	movs	r2, #4
 8002b86:	409a      	lsls	r2, r3
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b90:	f043 0204 	orr.w	r2, r3, #4
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9c:	2210      	movs	r2, #16
 8002b9e:	409a      	lsls	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d043      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d03c      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bba:	2210      	movs	r2, #16
 8002bbc:	409a      	lsls	r2, r3
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d018      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d108      	bne.n	8002bf0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d024      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	4798      	blx	r3
 8002bee:	e01f      	b.n	8002c30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d01b      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	4798      	blx	r3
 8002c00:	e016      	b.n	8002c30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d107      	bne.n	8002c20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0208 	bic.w	r2, r2, #8
 8002c1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c34:	2220      	movs	r2, #32
 8002c36:	409a      	lsls	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 808e 	beq.w	8002d5e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 8086 	beq.w	8002d5e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c56:	2220      	movs	r2, #32
 8002c58:	409a      	lsls	r2, r3
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b05      	cmp	r3, #5
 8002c68:	d136      	bne.n	8002cd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0216 	bic.w	r2, r2, #22
 8002c78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695a      	ldr	r2, [r3, #20]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d103      	bne.n	8002c9a <HAL_DMA_IRQHandler+0x1da>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d007      	beq.n	8002caa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0208 	bic.w	r2, r2, #8
 8002ca8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cae:	223f      	movs	r2, #63	; 0x3f
 8002cb0:	409a      	lsls	r2, r3
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d07d      	beq.n	8002dca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	4798      	blx	r3
        }
        return;
 8002cd6:	e078      	b.n	8002dca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d01c      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d108      	bne.n	8002d06 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d030      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	4798      	blx	r3
 8002d04:	e02b      	b.n	8002d5e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d027      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	4798      	blx	r3
 8002d16:	e022      	b.n	8002d5e <HAL_DMA_IRQHandler+0x29e>
 8002d18:	20000000 	.word	0x20000000
 8002d1c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10f      	bne.n	8002d4e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0210 	bic.w	r2, r2, #16
 8002d3c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d032      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d022      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2205      	movs	r2, #5
 8002d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0201 	bic.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	60bb      	str	r3, [r7, #8]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d307      	bcc.n	8002da6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f2      	bne.n	8002d8a <HAL_DMA_IRQHandler+0x2ca>
 8002da4:	e000      	b.n	8002da8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002da6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	4798      	blx	r3
 8002dc8:	e000      	b.n	8002dcc <HAL_DMA_IRQHandler+0x30c>
        return;
 8002dca:	bf00      	nop
    }
  }
}
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop

08002dd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
 8002de0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002df0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b40      	cmp	r3, #64	; 0x40
 8002e00:	d108      	bne.n	8002e14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e12:	e007      	b.n	8002e24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	60da      	str	r2, [r3, #12]
}
 8002e24:	bf00      	nop
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	3b10      	subs	r3, #16
 8002e40:	4a14      	ldr	r2, [pc, #80]	; (8002e94 <DMA_CalcBaseAndBitshift+0x64>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	091b      	lsrs	r3, r3, #4
 8002e48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e4a:	4a13      	ldr	r2, [pc, #76]	; (8002e98 <DMA_CalcBaseAndBitshift+0x68>)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4413      	add	r3, r2
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d909      	bls.n	8002e72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e66:	f023 0303 	bic.w	r3, r3, #3
 8002e6a:	1d1a      	adds	r2, r3, #4
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	659a      	str	r2, [r3, #88]	; 0x58
 8002e70:	e007      	b.n	8002e82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e7a:	f023 0303 	bic.w	r3, r3, #3
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	aaaaaaab 	.word	0xaaaaaaab
 8002e98:	0800928c 	.word	0x0800928c

08002e9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d11f      	bne.n	8002ef6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d855      	bhi.n	8002f68 <DMA_CheckFifoParam+0xcc>
 8002ebc:	a201      	add	r2, pc, #4	; (adr r2, 8002ec4 <DMA_CheckFifoParam+0x28>)
 8002ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec2:	bf00      	nop
 8002ec4:	08002ed5 	.word	0x08002ed5
 8002ec8:	08002ee7 	.word	0x08002ee7
 8002ecc:	08002ed5 	.word	0x08002ed5
 8002ed0:	08002f69 	.word	0x08002f69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d045      	beq.n	8002f6c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ee4:	e042      	b.n	8002f6c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eee:	d13f      	bne.n	8002f70 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef4:	e03c      	b.n	8002f70 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002efe:	d121      	bne.n	8002f44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d836      	bhi.n	8002f74 <DMA_CheckFifoParam+0xd8>
 8002f06:	a201      	add	r2, pc, #4	; (adr r2, 8002f0c <DMA_CheckFifoParam+0x70>)
 8002f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0c:	08002f1d 	.word	0x08002f1d
 8002f10:	08002f23 	.word	0x08002f23
 8002f14:	08002f1d 	.word	0x08002f1d
 8002f18:	08002f35 	.word	0x08002f35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f20:	e02f      	b.n	8002f82 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d024      	beq.n	8002f78 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f32:	e021      	b.n	8002f78 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f3c:	d11e      	bne.n	8002f7c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f42:	e01b      	b.n	8002f7c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d902      	bls.n	8002f50 <DMA_CheckFifoParam+0xb4>
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	d003      	beq.n	8002f56 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f4e:	e018      	b.n	8002f82 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
      break;
 8002f54:	e015      	b.n	8002f82 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00e      	beq.n	8002f80 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	73fb      	strb	r3, [r7, #15]
      break;
 8002f66:	e00b      	b.n	8002f80 <DMA_CheckFifoParam+0xe4>
      break;
 8002f68:	bf00      	nop
 8002f6a:	e00a      	b.n	8002f82 <DMA_CheckFifoParam+0xe6>
      break;
 8002f6c:	bf00      	nop
 8002f6e:	e008      	b.n	8002f82 <DMA_CheckFifoParam+0xe6>
      break;
 8002f70:	bf00      	nop
 8002f72:	e006      	b.n	8002f82 <DMA_CheckFifoParam+0xe6>
      break;
 8002f74:	bf00      	nop
 8002f76:	e004      	b.n	8002f82 <DMA_CheckFifoParam+0xe6>
      break;
 8002f78:	bf00      	nop
 8002f7a:	e002      	b.n	8002f82 <DMA_CheckFifoParam+0xe6>
      break;   
 8002f7c:	bf00      	nop
 8002f7e:	e000      	b.n	8002f82 <DMA_CheckFifoParam+0xe6>
      break;
 8002f80:	bf00      	nop
    }
  } 
  
  return status; 
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b089      	sub	sp, #36	; 0x24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	e177      	b.n	800329c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fac:	2201      	movs	r2, #1
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	f040 8166 	bne.w	8003296 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d00b      	beq.n	8002fea <HAL_GPIO_Init+0x5a>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d007      	beq.n	8002fea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fde:	2b11      	cmp	r3, #17
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b12      	cmp	r3, #18
 8002fe8:	d130      	bne.n	800304c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4013      	ands	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4313      	orrs	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003020:	2201      	movs	r2, #1
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4013      	ands	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	091b      	lsrs	r3, r3, #4
 8003036:	f003 0201 	and.w	r2, r3, #1
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	2203      	movs	r2, #3
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b02      	cmp	r3, #2
 8003082:	d003      	beq.n	800308c <HAL_GPIO_Init+0xfc>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b12      	cmp	r3, #18
 800308a:	d123      	bne.n	80030d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	08da      	lsrs	r2, r3, #3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3208      	adds	r2, #8
 8003094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	220f      	movs	r2, #15
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	691a      	ldr	r2, [r3, #16]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	08da      	lsrs	r2, r3, #3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3208      	adds	r2, #8
 80030ce:	69b9      	ldr	r1, [r7, #24]
 80030d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	2203      	movs	r2, #3
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 0203 	and.w	r2, r3, #3
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80c0 	beq.w	8003296 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	4b65      	ldr	r3, [pc, #404]	; (80032b0 <HAL_GPIO_Init+0x320>)
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	4a64      	ldr	r2, [pc, #400]	; (80032b0 <HAL_GPIO_Init+0x320>)
 8003120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003124:	6453      	str	r3, [r2, #68]	; 0x44
 8003126:	4b62      	ldr	r3, [pc, #392]	; (80032b0 <HAL_GPIO_Init+0x320>)
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003132:	4a60      	ldr	r2, [pc, #384]	; (80032b4 <HAL_GPIO_Init+0x324>)
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	089b      	lsrs	r3, r3, #2
 8003138:	3302      	adds	r3, #2
 800313a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	220f      	movs	r2, #15
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a57      	ldr	r2, [pc, #348]	; (80032b8 <HAL_GPIO_Init+0x328>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d037      	beq.n	80031ce <HAL_GPIO_Init+0x23e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a56      	ldr	r2, [pc, #344]	; (80032bc <HAL_GPIO_Init+0x32c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d031      	beq.n	80031ca <HAL_GPIO_Init+0x23a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a55      	ldr	r2, [pc, #340]	; (80032c0 <HAL_GPIO_Init+0x330>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d02b      	beq.n	80031c6 <HAL_GPIO_Init+0x236>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a54      	ldr	r2, [pc, #336]	; (80032c4 <HAL_GPIO_Init+0x334>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d025      	beq.n	80031c2 <HAL_GPIO_Init+0x232>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a53      	ldr	r2, [pc, #332]	; (80032c8 <HAL_GPIO_Init+0x338>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d01f      	beq.n	80031be <HAL_GPIO_Init+0x22e>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a52      	ldr	r2, [pc, #328]	; (80032cc <HAL_GPIO_Init+0x33c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d019      	beq.n	80031ba <HAL_GPIO_Init+0x22a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a51      	ldr	r2, [pc, #324]	; (80032d0 <HAL_GPIO_Init+0x340>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d013      	beq.n	80031b6 <HAL_GPIO_Init+0x226>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a50      	ldr	r2, [pc, #320]	; (80032d4 <HAL_GPIO_Init+0x344>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d00d      	beq.n	80031b2 <HAL_GPIO_Init+0x222>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a4f      	ldr	r2, [pc, #316]	; (80032d8 <HAL_GPIO_Init+0x348>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d007      	beq.n	80031ae <HAL_GPIO_Init+0x21e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a4e      	ldr	r2, [pc, #312]	; (80032dc <HAL_GPIO_Init+0x34c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d101      	bne.n	80031aa <HAL_GPIO_Init+0x21a>
 80031a6:	2309      	movs	r3, #9
 80031a8:	e012      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031aa:	230a      	movs	r3, #10
 80031ac:	e010      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031ae:	2308      	movs	r3, #8
 80031b0:	e00e      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031b2:	2307      	movs	r3, #7
 80031b4:	e00c      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031b6:	2306      	movs	r3, #6
 80031b8:	e00a      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031ba:	2305      	movs	r3, #5
 80031bc:	e008      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031be:	2304      	movs	r3, #4
 80031c0:	e006      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031c2:	2303      	movs	r3, #3
 80031c4:	e004      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e002      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031ce:	2300      	movs	r3, #0
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	f002 0203 	and.w	r2, r2, #3
 80031d6:	0092      	lsls	r2, r2, #2
 80031d8:	4093      	lsls	r3, r2
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031e0:	4934      	ldr	r1, [pc, #208]	; (80032b4 <HAL_GPIO_Init+0x324>)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	089b      	lsrs	r3, r3, #2
 80031e6:	3302      	adds	r3, #2
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031ee:	4b3c      	ldr	r3, [pc, #240]	; (80032e0 <HAL_GPIO_Init+0x350>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003212:	4a33      	ldr	r2, [pc, #204]	; (80032e0 <HAL_GPIO_Init+0x350>)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003218:	4b31      	ldr	r3, [pc, #196]	; (80032e0 <HAL_GPIO_Init+0x350>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800323c:	4a28      	ldr	r2, [pc, #160]	; (80032e0 <HAL_GPIO_Init+0x350>)
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003242:	4b27      	ldr	r3, [pc, #156]	; (80032e0 <HAL_GPIO_Init+0x350>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003266:	4a1e      	ldr	r2, [pc, #120]	; (80032e0 <HAL_GPIO_Init+0x350>)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800326c:	4b1c      	ldr	r3, [pc, #112]	; (80032e0 <HAL_GPIO_Init+0x350>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003290:	4a13      	ldr	r2, [pc, #76]	; (80032e0 <HAL_GPIO_Init+0x350>)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3301      	adds	r3, #1
 800329a:	61fb      	str	r3, [r7, #28]
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	2b0f      	cmp	r3, #15
 80032a0:	f67f ae84 	bls.w	8002fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032a4:	bf00      	nop
 80032a6:	3724      	adds	r7, #36	; 0x24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	40023800 	.word	0x40023800
 80032b4:	40013800 	.word	0x40013800
 80032b8:	40020000 	.word	0x40020000
 80032bc:	40020400 	.word	0x40020400
 80032c0:	40020800 	.word	0x40020800
 80032c4:	40020c00 	.word	0x40020c00
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40021400 	.word	0x40021400
 80032d0:	40021800 	.word	0x40021800
 80032d4:	40021c00 	.word	0x40021c00
 80032d8:	40022000 	.word	0x40022000
 80032dc:	40022400 	.word	0x40022400
 80032e0:	40013c00 	.word	0x40013c00

080032e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	887b      	ldrh	r3, [r7, #2]
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032fc:	2301      	movs	r3, #1
 80032fe:	73fb      	strb	r3, [r7, #15]
 8003300:	e001      	b.n	8003306 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003302:	2300      	movs	r3, #0
 8003304:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003306:	7bfb      	ldrb	r3, [r7, #15]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	807b      	strh	r3, [r7, #2]
 8003320:	4613      	mov	r3, r2
 8003322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003324:	787b      	ldrb	r3, [r7, #1]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800332a:	887a      	ldrh	r2, [r7, #2]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003330:	e003      	b.n	800333a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003332:	887b      	ldrh	r3, [r7, #2]
 8003334:	041a      	lsls	r2, r3, #16
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	619a      	str	r2, [r3, #24]
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e11f      	b.n	800359a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d106      	bne.n	8003374 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7fe f934 	bl	80015dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2224      	movs	r2, #36	; 0x24
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0201 	bic.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800339a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033ac:	f000 fe24 	bl	8003ff8 <HAL_RCC_GetPCLK1Freq>
 80033b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	4a7b      	ldr	r2, [pc, #492]	; (80035a4 <HAL_I2C_Init+0x25c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d807      	bhi.n	80033cc <HAL_I2C_Init+0x84>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4a7a      	ldr	r2, [pc, #488]	; (80035a8 <HAL_I2C_Init+0x260>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	bf94      	ite	ls
 80033c4:	2301      	movls	r3, #1
 80033c6:	2300      	movhi	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	e006      	b.n	80033da <HAL_I2C_Init+0x92>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4a77      	ldr	r2, [pc, #476]	; (80035ac <HAL_I2C_Init+0x264>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	bf94      	ite	ls
 80033d4:	2301      	movls	r3, #1
 80033d6:	2300      	movhi	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e0db      	b.n	800359a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4a72      	ldr	r2, [pc, #456]	; (80035b0 <HAL_I2C_Init+0x268>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	0c9b      	lsrs	r3, r3, #18
 80033ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	4a64      	ldr	r2, [pc, #400]	; (80035a4 <HAL_I2C_Init+0x25c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d802      	bhi.n	800341c <HAL_I2C_Init+0xd4>
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	3301      	adds	r3, #1
 800341a:	e009      	b.n	8003430 <HAL_I2C_Init+0xe8>
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003422:	fb02 f303 	mul.w	r3, r2, r3
 8003426:	4a63      	ldr	r2, [pc, #396]	; (80035b4 <HAL_I2C_Init+0x26c>)
 8003428:	fba2 2303 	umull	r2, r3, r2, r3
 800342c:	099b      	lsrs	r3, r3, #6
 800342e:	3301      	adds	r3, #1
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6812      	ldr	r2, [r2, #0]
 8003434:	430b      	orrs	r3, r1
 8003436:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003442:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	4956      	ldr	r1, [pc, #344]	; (80035a4 <HAL_I2C_Init+0x25c>)
 800344c:	428b      	cmp	r3, r1
 800344e:	d80d      	bhi.n	800346c <HAL_I2C_Init+0x124>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1e59      	subs	r1, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	fbb1 f3f3 	udiv	r3, r1, r3
 800345e:	3301      	adds	r3, #1
 8003460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003464:	2b04      	cmp	r3, #4
 8003466:	bf38      	it	cc
 8003468:	2304      	movcc	r3, #4
 800346a:	e04f      	b.n	800350c <HAL_I2C_Init+0x1c4>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d111      	bne.n	8003498 <HAL_I2C_Init+0x150>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	1e58      	subs	r0, r3, #1
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6859      	ldr	r1, [r3, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	440b      	add	r3, r1
 8003482:	fbb0 f3f3 	udiv	r3, r0, r3
 8003486:	3301      	adds	r3, #1
 8003488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348c:	2b00      	cmp	r3, #0
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	e012      	b.n	80034be <HAL_I2C_Init+0x176>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	1e58      	subs	r0, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	0099      	lsls	r1, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ae:	3301      	adds	r3, #1
 80034b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	bf0c      	ite	eq
 80034b8:	2301      	moveq	r3, #1
 80034ba:	2300      	movne	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_I2C_Init+0x17e>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e022      	b.n	800350c <HAL_I2C_Init+0x1c4>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10e      	bne.n	80034ec <HAL_I2C_Init+0x1a4>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1e58      	subs	r0, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6859      	ldr	r1, [r3, #4]
 80034d6:	460b      	mov	r3, r1
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	440b      	add	r3, r1
 80034dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80034e0:	3301      	adds	r3, #1
 80034e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ea:	e00f      	b.n	800350c <HAL_I2C_Init+0x1c4>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	1e58      	subs	r0, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6859      	ldr	r1, [r3, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	0099      	lsls	r1, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003502:	3301      	adds	r3, #1
 8003504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	6809      	ldr	r1, [r1, #0]
 8003510:	4313      	orrs	r3, r2
 8003512:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69da      	ldr	r2, [r3, #28]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800353a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6911      	ldr	r1, [r2, #16]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68d2      	ldr	r2, [r2, #12]
 8003546:	4311      	orrs	r1, r2
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	430b      	orrs	r3, r1
 800354e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0201 	orr.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2220      	movs	r2, #32
 8003586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	000186a0 	.word	0x000186a0
 80035a8:	001e847f 	.word	0x001e847f
 80035ac:	003d08ff 	.word	0x003d08ff
 80035b0:	431bde83 	.word	0x431bde83
 80035b4:	10624dd3 	.word	0x10624dd3

080035b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	607a      	str	r2, [r7, #4]
 80035c2:	461a      	mov	r2, r3
 80035c4:	460b      	mov	r3, r1
 80035c6:	817b      	strh	r3, [r7, #10]
 80035c8:	4613      	mov	r3, r2
 80035ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035cc:	f7fe fc2e 	bl	8001e2c <HAL_GetTick>
 80035d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b20      	cmp	r3, #32
 80035dc:	f040 80e0 	bne.w	80037a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	2319      	movs	r3, #25
 80035e6:	2201      	movs	r2, #1
 80035e8:	4970      	ldr	r1, [pc, #448]	; (80037ac <HAL_I2C_Master_Transmit+0x1f4>)
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f964 	bl	80038b8 <I2C_WaitOnFlagUntilTimeout>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80035f6:	2302      	movs	r3, #2
 80035f8:	e0d3      	b.n	80037a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_I2C_Master_Transmit+0x50>
 8003604:	2302      	movs	r3, #2
 8003606:	e0cc      	b.n	80037a2 <HAL_I2C_Master_Transmit+0x1ea>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b01      	cmp	r3, #1
 800361c:	d007      	beq.n	800362e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f042 0201 	orr.w	r2, r2, #1
 800362c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800363c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2221      	movs	r2, #33	; 0x21
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2210      	movs	r2, #16
 800364a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	893a      	ldrh	r2, [r7, #8]
 800365e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003664:	b29a      	uxth	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4a50      	ldr	r2, [pc, #320]	; (80037b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800366e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003670:	8979      	ldrh	r1, [r7, #10]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	6a3a      	ldr	r2, [r7, #32]
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f89c 	bl	80037b4 <I2C_MasterRequestWrite>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e08d      	b.n	80037a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003686:	2300      	movs	r3, #0
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800369c:	e066      	b.n	800376c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	6a39      	ldr	r1, [r7, #32]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f9de 	bl	8003a64 <I2C_WaitOnTXEFlagUntilTimeout>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00d      	beq.n	80036ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d107      	bne.n	80036c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e06b      	b.n	80037a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	781a      	ldrb	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b04      	cmp	r3, #4
 8003706:	d11b      	bne.n	8003740 <HAL_I2C_Master_Transmit+0x188>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370c:	2b00      	cmp	r3, #0
 800370e:	d017      	beq.n	8003740 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	781a      	ldrb	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	6a39      	ldr	r1, [r7, #32]
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 f9ce 	bl	8003ae6 <I2C_WaitOnBTFFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00d      	beq.n	800376c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	2b04      	cmp	r3, #4
 8003756:	d107      	bne.n	8003768 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003766:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e01a      	b.n	80037a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003770:	2b00      	cmp	r3, #0
 8003772:	d194      	bne.n	800369e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003782:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	e000      	b.n	80037a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80037a0:	2302      	movs	r3, #2
  }
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	00100002 	.word	0x00100002
 80037b0:	ffff0000 	.word	0xffff0000

080037b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	607a      	str	r2, [r7, #4]
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	460b      	mov	r3, r1
 80037c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d006      	beq.n	80037de <I2C_MasterRequestWrite+0x2a>
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d003      	beq.n	80037de <I2C_MasterRequestWrite+0x2a>
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037dc:	d108      	bne.n	80037f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	e00b      	b.n	8003808 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	2b12      	cmp	r3, #18
 80037f6:	d107      	bne.n	8003808 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003806:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f84f 	bl	80038b8 <I2C_WaitOnFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00d      	beq.n	800383c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800382e:	d103      	bne.n	8003838 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003836:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e035      	b.n	80038a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003844:	d108      	bne.n	8003858 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003846:	897b      	ldrh	r3, [r7, #10]
 8003848:	b2db      	uxtb	r3, r3
 800384a:	461a      	mov	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003854:	611a      	str	r2, [r3, #16]
 8003856:	e01b      	b.n	8003890 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003858:	897b      	ldrh	r3, [r7, #10]
 800385a:	11db      	asrs	r3, r3, #7
 800385c:	b2db      	uxtb	r3, r3
 800385e:	f003 0306 	and.w	r3, r3, #6
 8003862:	b2db      	uxtb	r3, r3
 8003864:	f063 030f 	orn	r3, r3, #15
 8003868:	b2da      	uxtb	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	490e      	ldr	r1, [pc, #56]	; (80038b0 <I2C_MasterRequestWrite+0xfc>)
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f875 	bl	8003966 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e010      	b.n	80038a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003886:	897b      	ldrh	r3, [r7, #10]
 8003888:	b2da      	uxtb	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	4907      	ldr	r1, [pc, #28]	; (80038b4 <I2C_MasterRequestWrite+0x100>)
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f865 	bl	8003966 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	00010008 	.word	0x00010008
 80038b4:	00010002 	.word	0x00010002

080038b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	603b      	str	r3, [r7, #0]
 80038c4:	4613      	mov	r3, r2
 80038c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038c8:	e025      	b.n	8003916 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d0:	d021      	beq.n	8003916 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d2:	f7fe faab 	bl	8001e2c <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d302      	bcc.n	80038e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d116      	bne.n	8003916 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	f043 0220 	orr.w	r2, r3, #32
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e023      	b.n	800395e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	0c1b      	lsrs	r3, r3, #16
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	d10d      	bne.n	800393c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	43da      	mvns	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4013      	ands	r3, r2
 800392c:	b29b      	uxth	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	bf0c      	ite	eq
 8003932:	2301      	moveq	r3, #1
 8003934:	2300      	movne	r3, #0
 8003936:	b2db      	uxtb	r3, r3
 8003938:	461a      	mov	r2, r3
 800393a:	e00c      	b.n	8003956 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	43da      	mvns	r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4013      	ands	r3, r2
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	bf0c      	ite	eq
 800394e:	2301      	moveq	r3, #1
 8003950:	2300      	movne	r3, #0
 8003952:	b2db      	uxtb	r3, r3
 8003954:	461a      	mov	r2, r3
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	429a      	cmp	r2, r3
 800395a:	d0b6      	beq.n	80038ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	607a      	str	r2, [r7, #4]
 8003972:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003974:	e051      	b.n	8003a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003984:	d123      	bne.n	80039ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003994:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800399e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	f043 0204 	orr.w	r2, r3, #4
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e046      	b.n	8003a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d4:	d021      	beq.n	8003a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d6:	f7fe fa29 	bl	8001e2c <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d302      	bcc.n	80039ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d116      	bne.n	8003a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2220      	movs	r2, #32
 80039f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f043 0220 	orr.w	r2, r3, #32
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e020      	b.n	8003a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	0c1b      	lsrs	r3, r3, #16
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d10c      	bne.n	8003a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	43da      	mvns	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	bf14      	ite	ne
 8003a36:	2301      	movne	r3, #1
 8003a38:	2300      	moveq	r3, #0
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	e00b      	b.n	8003a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	43da      	mvns	r2, r3
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	bf14      	ite	ne
 8003a50:	2301      	movne	r3, #1
 8003a52:	2300      	moveq	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d18d      	bne.n	8003976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a70:	e02d      	b.n	8003ace <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 f878 	bl	8003b68 <I2C_IsAcknowledgeFailed>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e02d      	b.n	8003ade <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a88:	d021      	beq.n	8003ace <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8a:	f7fe f9cf 	bl	8001e2c <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d302      	bcc.n	8003aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d116      	bne.n	8003ace <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f043 0220 	orr.w	r2, r3, #32
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e007      	b.n	8003ade <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad8:	2b80      	cmp	r3, #128	; 0x80
 8003ada:	d1ca      	bne.n	8003a72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003af2:	e02d      	b.n	8003b50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f837 	bl	8003b68 <I2C_IsAcknowledgeFailed>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e02d      	b.n	8003b60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0a:	d021      	beq.n	8003b50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0c:	f7fe f98e 	bl	8001e2c <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d302      	bcc.n	8003b22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d116      	bne.n	8003b50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	f043 0220 	orr.w	r2, r3, #32
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e007      	b.n	8003b60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d1ca      	bne.n	8003af4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b7e:	d11b      	bne.n	8003bb8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	f043 0204 	orr.w	r2, r3, #4
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	603b      	str	r3, [r7, #0]
 8003bd6:	4b20      	ldr	r3, [pc, #128]	; (8003c58 <HAL_PWREx_EnableOverDrive+0x90>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	4a1f      	ldr	r2, [pc, #124]	; (8003c58 <HAL_PWREx_EnableOverDrive+0x90>)
 8003bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be0:	6413      	str	r3, [r2, #64]	; 0x40
 8003be2:	4b1d      	ldr	r3, [pc, #116]	; (8003c58 <HAL_PWREx_EnableOverDrive+0x90>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bea:	603b      	str	r3, [r7, #0]
 8003bec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003bee:	4b1b      	ldr	r3, [pc, #108]	; (8003c5c <HAL_PWREx_EnableOverDrive+0x94>)
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bf4:	f7fe f91a 	bl	8001e2c <HAL_GetTick>
 8003bf8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bfa:	e009      	b.n	8003c10 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bfc:	f7fe f916 	bl	8001e2c <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c0a:	d901      	bls.n	8003c10 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e01f      	b.n	8003c50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c10:	4b13      	ldr	r3, [pc, #76]	; (8003c60 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c1c:	d1ee      	bne.n	8003bfc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c1e:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c24:	f7fe f902 	bl	8001e2c <HAL_GetTick>
 8003c28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c2a:	e009      	b.n	8003c40 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c2c:	f7fe f8fe 	bl	8001e2c <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c3a:	d901      	bls.n	8003c40 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e007      	b.n	8003c50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c40:	4b07      	ldr	r3, [pc, #28]	; (8003c60 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c4c:	d1ee      	bne.n	8003c2c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	420e0040 	.word	0x420e0040
 8003c60:	40007000 	.word	0x40007000
 8003c64:	420e0044 	.word	0x420e0044

08003c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e0cc      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c7c:	4b68      	ldr	r3, [pc, #416]	; (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d90c      	bls.n	8003ca4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8a:	4b65      	ldr	r3, [pc, #404]	; (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c92:	4b63      	ldr	r3, [pc, #396]	; (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0b8      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d020      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cbc:	4b59      	ldr	r3, [pc, #356]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	4a58      	ldr	r2, [pc, #352]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cd4:	4b53      	ldr	r3, [pc, #332]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	4a52      	ldr	r2, [pc, #328]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce0:	4b50      	ldr	r3, [pc, #320]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	494d      	ldr	r1, [pc, #308]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d044      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d107      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d06:	4b47      	ldr	r3, [pc, #284]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d119      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e07f      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d003      	beq.n	8003d26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d107      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d26:	4b3f      	ldr	r3, [pc, #252]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d109      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e06f      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d36:	4b3b      	ldr	r3, [pc, #236]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e067      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d46:	4b37      	ldr	r3, [pc, #220]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f023 0203 	bic.w	r2, r3, #3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	4934      	ldr	r1, [pc, #208]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d58:	f7fe f868 	bl	8001e2c <HAL_GetTick>
 8003d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d60:	f7fe f864 	bl	8001e2c <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e04f      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d76:	4b2b      	ldr	r3, [pc, #172]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 020c 	and.w	r2, r3, #12
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d1eb      	bne.n	8003d60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d88:	4b25      	ldr	r3, [pc, #148]	; (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 030f 	and.w	r3, r3, #15
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d20c      	bcs.n	8003db0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d96:	4b22      	ldr	r3, [pc, #136]	; (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9e:	4b20      	ldr	r3, [pc, #128]	; (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d001      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e032      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d008      	beq.n	8003dce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dbc:	4b19      	ldr	r3, [pc, #100]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	4916      	ldr	r1, [pc, #88]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dda:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	490e      	ldr	r1, [pc, #56]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dee:	f000 f821 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 8003df2:	4601      	mov	r1, r0
 8003df4:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	091b      	lsrs	r3, r3, #4
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	4a0a      	ldr	r2, [pc, #40]	; (8003e28 <HAL_RCC_ClockConfig+0x1c0>)
 8003e00:	5cd3      	ldrb	r3, [r2, r3]
 8003e02:	fa21 f303 	lsr.w	r3, r1, r3
 8003e06:	4a09      	ldr	r2, [pc, #36]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e0a:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fd ffc8 	bl	8001da4 <HAL_InitTick>

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40023c00 	.word	0x40023c00
 8003e24:	40023800 	.word	0x40023800
 8003e28:	08009274 	.word	0x08009274
 8003e2c:	20000000 	.word	0x20000000
 8003e30:	20000004 	.word	0x20000004

08003e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	607b      	str	r3, [r7, #4]
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	2300      	movs	r3, #0
 8003e44:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e4a:	4b63      	ldr	r3, [pc, #396]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 030c 	and.w	r3, r3, #12
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d007      	beq.n	8003e66 <HAL_RCC_GetSysClockFreq+0x32>
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d008      	beq.n	8003e6c <HAL_RCC_GetSysClockFreq+0x38>
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f040 80b4 	bne.w	8003fc8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e60:	4b5e      	ldr	r3, [pc, #376]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e62:	60bb      	str	r3, [r7, #8]
       break;
 8003e64:	e0b3      	b.n	8003fce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e66:	4b5d      	ldr	r3, [pc, #372]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e68:	60bb      	str	r3, [r7, #8]
      break;
 8003e6a:	e0b0      	b.n	8003fce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e6c:	4b5a      	ldr	r3, [pc, #360]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e74:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e76:	4b58      	ldr	r3, [pc, #352]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d04a      	beq.n	8003f18 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e82:	4b55      	ldr	r3, [pc, #340]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	099b      	lsrs	r3, r3, #6
 8003e88:	f04f 0400 	mov.w	r4, #0
 8003e8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	ea03 0501 	and.w	r5, r3, r1
 8003e98:	ea04 0602 	and.w	r6, r4, r2
 8003e9c:	4629      	mov	r1, r5
 8003e9e:	4632      	mov	r2, r6
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	f04f 0400 	mov.w	r4, #0
 8003ea8:	0154      	lsls	r4, r2, #5
 8003eaa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003eae:	014b      	lsls	r3, r1, #5
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4622      	mov	r2, r4
 8003eb4:	1b49      	subs	r1, r1, r5
 8003eb6:	eb62 0206 	sbc.w	r2, r2, r6
 8003eba:	f04f 0300 	mov.w	r3, #0
 8003ebe:	f04f 0400 	mov.w	r4, #0
 8003ec2:	0194      	lsls	r4, r2, #6
 8003ec4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ec8:	018b      	lsls	r3, r1, #6
 8003eca:	1a5b      	subs	r3, r3, r1
 8003ecc:	eb64 0402 	sbc.w	r4, r4, r2
 8003ed0:	f04f 0100 	mov.w	r1, #0
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	00e2      	lsls	r2, r4, #3
 8003eda:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ede:	00d9      	lsls	r1, r3, #3
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4614      	mov	r4, r2
 8003ee4:	195b      	adds	r3, r3, r5
 8003ee6:	eb44 0406 	adc.w	r4, r4, r6
 8003eea:	f04f 0100 	mov.w	r1, #0
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	02a2      	lsls	r2, r4, #10
 8003ef4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003ef8:	0299      	lsls	r1, r3, #10
 8003efa:	460b      	mov	r3, r1
 8003efc:	4614      	mov	r4, r2
 8003efe:	4618      	mov	r0, r3
 8003f00:	4621      	mov	r1, r4
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f04f 0400 	mov.w	r4, #0
 8003f08:	461a      	mov	r2, r3
 8003f0a:	4623      	mov	r3, r4
 8003f0c:	f7fc f9c8 	bl	80002a0 <__aeabi_uldivmod>
 8003f10:	4603      	mov	r3, r0
 8003f12:	460c      	mov	r4, r1
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	e049      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f18:	4b2f      	ldr	r3, [pc, #188]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	099b      	lsrs	r3, r3, #6
 8003f1e:	f04f 0400 	mov.w	r4, #0
 8003f22:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	ea03 0501 	and.w	r5, r3, r1
 8003f2e:	ea04 0602 	and.w	r6, r4, r2
 8003f32:	4629      	mov	r1, r5
 8003f34:	4632      	mov	r2, r6
 8003f36:	f04f 0300 	mov.w	r3, #0
 8003f3a:	f04f 0400 	mov.w	r4, #0
 8003f3e:	0154      	lsls	r4, r2, #5
 8003f40:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f44:	014b      	lsls	r3, r1, #5
 8003f46:	4619      	mov	r1, r3
 8003f48:	4622      	mov	r2, r4
 8003f4a:	1b49      	subs	r1, r1, r5
 8003f4c:	eb62 0206 	sbc.w	r2, r2, r6
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	f04f 0400 	mov.w	r4, #0
 8003f58:	0194      	lsls	r4, r2, #6
 8003f5a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f5e:	018b      	lsls	r3, r1, #6
 8003f60:	1a5b      	subs	r3, r3, r1
 8003f62:	eb64 0402 	sbc.w	r4, r4, r2
 8003f66:	f04f 0100 	mov.w	r1, #0
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	00e2      	lsls	r2, r4, #3
 8003f70:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f74:	00d9      	lsls	r1, r3, #3
 8003f76:	460b      	mov	r3, r1
 8003f78:	4614      	mov	r4, r2
 8003f7a:	195b      	adds	r3, r3, r5
 8003f7c:	eb44 0406 	adc.w	r4, r4, r6
 8003f80:	f04f 0100 	mov.w	r1, #0
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	02a2      	lsls	r2, r4, #10
 8003f8a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003f8e:	0299      	lsls	r1, r3, #10
 8003f90:	460b      	mov	r3, r1
 8003f92:	4614      	mov	r4, r2
 8003f94:	4618      	mov	r0, r3
 8003f96:	4621      	mov	r1, r4
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f04f 0400 	mov.w	r4, #0
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	4623      	mov	r3, r4
 8003fa2:	f7fc f97d 	bl	80002a0 <__aeabi_uldivmod>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	460c      	mov	r4, r1
 8003faa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fac:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	0c1b      	lsrs	r3, r3, #16
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc4:	60bb      	str	r3, [r7, #8]
      break;
 8003fc6:	e002      	b.n	8003fce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fc8:	4b04      	ldr	r3, [pc, #16]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003fca:	60bb      	str	r3, [r7, #8]
      break;
 8003fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fce:	68bb      	ldr	r3, [r7, #8]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	00f42400 	.word	0x00f42400

08003fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fe4:	4b03      	ldr	r3, [pc, #12]	; (8003ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	20000000 	.word	0x20000000

08003ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ffc:	f7ff fff0 	bl	8003fe0 <HAL_RCC_GetHCLKFreq>
 8004000:	4601      	mov	r1, r0
 8004002:	4b05      	ldr	r3, [pc, #20]	; (8004018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	0a9b      	lsrs	r3, r3, #10
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	4a03      	ldr	r2, [pc, #12]	; (800401c <HAL_RCC_GetPCLK1Freq+0x24>)
 800400e:	5cd3      	ldrb	r3, [r2, r3]
 8004010:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004014:	4618      	mov	r0, r3
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40023800 	.word	0x40023800
 800401c:	08009284 	.word	0x08009284

08004020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004024:	f7ff ffdc 	bl	8003fe0 <HAL_RCC_GetHCLKFreq>
 8004028:	4601      	mov	r1, r0
 800402a:	4b05      	ldr	r3, [pc, #20]	; (8004040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	0b5b      	lsrs	r3, r3, #13
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	4a03      	ldr	r2, [pc, #12]	; (8004044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004036:	5cd3      	ldrb	r3, [r2, r3]
 8004038:	fa21 f303 	lsr.w	r3, r1, r3
}
 800403c:	4618      	mov	r0, r3
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40023800 	.word	0x40023800
 8004044:	08009284 	.word	0x08009284

08004048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00a      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004070:	4b66      	ldr	r3, [pc, #408]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004076:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407e:	4963      	ldr	r1, [pc, #396]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004092:	4b5e      	ldr	r3, [pc, #376]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004098:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	495a      	ldr	r1, [pc, #360]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10b      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d105      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d075      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040cc:	4b50      	ldr	r3, [pc, #320]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040d2:	f7fd feab 	bl	8001e2c <HAL_GetTick>
 80040d6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040d8:	e008      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040da:	f7fd fea7 	bl	8001e2c <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e1dc      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040ec:	4b47      	ldr	r3, [pc, #284]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f0      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d009      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	019a      	lsls	r2, r3, #6
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	071b      	lsls	r3, r3, #28
 8004110:	493e      	ldr	r1, [pc, #248]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d01f      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004124:	4b39      	ldr	r3, [pc, #228]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800412a:	0f1b      	lsrs	r3, r3, #28
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	019a      	lsls	r2, r3, #6
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	061b      	lsls	r3, r3, #24
 800413e:	431a      	orrs	r2, r3
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	071b      	lsls	r3, r3, #28
 8004144:	4931      	ldr	r1, [pc, #196]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800414c:	4b2f      	ldr	r3, [pc, #188]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800414e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004152:	f023 021f 	bic.w	r2, r3, #31
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	3b01      	subs	r3, #1
 800415c:	492b      	ldr	r1, [pc, #172]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00d      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	019a      	lsls	r2, r3, #6
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	061b      	lsls	r3, r3, #24
 800417c:	431a      	orrs	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	071b      	lsls	r3, r3, #28
 8004184:	4921      	ldr	r1, [pc, #132]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800418c:	4b20      	ldr	r3, [pc, #128]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800418e:	2201      	movs	r2, #1
 8004190:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004192:	f7fd fe4b 	bl	8001e2c <HAL_GetTick>
 8004196:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004198:	e008      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800419a:	f7fd fe47 	bl	8001e2c <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e17c      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041ac:	4b17      	ldr	r3, [pc, #92]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0f0      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d112      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10c      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 80ce 	beq.w	800437a <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80041e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041e6:	f040 80c8 	bne.w	800437a <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80041ea:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041f0:	f7fd fe1c 	bl	8001e2c <HAL_GetTick>
 80041f4:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041f6:	e00f      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80041f8:	f7fd fe18 	bl	8001e2c <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d908      	bls.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e14d      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800420a:	bf00      	nop
 800420c:	40023800 	.word	0x40023800
 8004210:	42470068 	.word	0x42470068
 8004214:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004218:	4ba5      	ldr	r3, [pc, #660]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004224:	d0e8      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	2b00      	cmp	r3, #0
 8004230:	d02e      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004232:	4b9f      	ldr	r3, [pc, #636]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004238:	0c1b      	lsrs	r3, r3, #16
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	3301      	adds	r3, #1
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004244:	4b9a      	ldr	r3, [pc, #616]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424a:	0f1b      	lsrs	r3, r3, #28
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	019a      	lsls	r2, r3, #6
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	085b      	lsrs	r3, r3, #1
 800425c:	3b01      	subs	r3, #1
 800425e:	041b      	lsls	r3, r3, #16
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	061b      	lsls	r3, r3, #24
 8004268:	431a      	orrs	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	071b      	lsls	r3, r3, #28
 800426e:	4990      	ldr	r1, [pc, #576]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004276:	4b8e      	ldr	r3, [pc, #568]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800427c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	3b01      	subs	r3, #1
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	4989      	ldr	r1, [pc, #548]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800428a:	4313      	orrs	r3, r2
 800428c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	2b00      	cmp	r3, #0
 800429a:	d02c      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800429c:	4b84      	ldr	r3, [pc, #528]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a2:	0c1b      	lsrs	r3, r3, #16
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	3301      	adds	r3, #1
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042ae:	4b80      	ldr	r3, [pc, #512]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b4:	0e1b      	lsrs	r3, r3, #24
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	019a      	lsls	r2, r3, #6
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	085b      	lsrs	r3, r3, #1
 80042c6:	3b01      	subs	r3, #1
 80042c8:	041b      	lsls	r3, r3, #16
 80042ca:	431a      	orrs	r2, r3
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	061b      	lsls	r3, r3, #24
 80042d0:	431a      	orrs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	071b      	lsls	r3, r3, #28
 80042d8:	4975      	ldr	r1, [pc, #468]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042e0:	4b73      	ldr	r3, [pc, #460]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80042e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ee:	4970      	ldr	r1, [pc, #448]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d024      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8004306:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800430a:	d11f      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800430c:	4b68      	ldr	r3, [pc, #416]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800430e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004312:	0e1b      	lsrs	r3, r3, #24
 8004314:	f003 030f 	and.w	r3, r3, #15
 8004318:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800431a:	4b65      	ldr	r3, [pc, #404]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004320:	0f1b      	lsrs	r3, r3, #28
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	019a      	lsls	r2, r3, #6
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	085b      	lsrs	r3, r3, #1
 8004334:	3b01      	subs	r3, #1
 8004336:	041b      	lsls	r3, r3, #16
 8004338:	431a      	orrs	r2, r3
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	061b      	lsls	r3, r3, #24
 800433e:	431a      	orrs	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	071b      	lsls	r3, r3, #28
 8004344:	495a      	ldr	r1, [pc, #360]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800434c:	4b59      	ldr	r3, [pc, #356]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800434e:	2201      	movs	r2, #1
 8004350:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004352:	f7fd fd6b 	bl	8001e2c <HAL_GetTick>
 8004356:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004358:	e008      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800435a:	f7fd fd67 	bl	8001e2c <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e09c      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800436c:	4b50      	ldr	r3, [pc, #320]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004378:	d1ef      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 8083 	beq.w	800448e <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004388:	2300      	movs	r3, #0
 800438a:	60bb      	str	r3, [r7, #8]
 800438c:	4b48      	ldr	r3, [pc, #288]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	4a47      	ldr	r2, [pc, #284]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004396:	6413      	str	r3, [r2, #64]	; 0x40
 8004398:	4b45      	ldr	r3, [pc, #276]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a0:	60bb      	str	r3, [r7, #8]
 80043a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043a4:	4b44      	ldr	r3, [pc, #272]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a43      	ldr	r2, [pc, #268]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80043aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ae:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043b0:	f7fd fd3c 	bl	8001e2c <HAL_GetTick>
 80043b4:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043b6:	e008      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043b8:	f7fd fd38 	bl	8001e2c <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e06d      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043ca:	4b3b      	ldr	r3, [pc, #236]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0f0      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043d6:	4b36      	ldr	r3, [pc, #216]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80043d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043de:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d02f      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d028      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043f4:	4b2e      	ldr	r3, [pc, #184]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80043f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fc:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043fe:	4b2f      	ldr	r3, [pc, #188]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004400:	2201      	movs	r2, #1
 8004402:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004404:	4b2d      	ldr	r3, [pc, #180]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800440a:	4a29      	ldr	r2, [pc, #164]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004410:	4b27      	ldr	r3, [pc, #156]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b01      	cmp	r3, #1
 800441a:	d114      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800441c:	f7fd fd06 	bl	8001e2c <HAL_GetTick>
 8004420:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004422:	e00a      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004424:	f7fd fd02 	bl	8001e2c <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004432:	4293      	cmp	r3, r2
 8004434:	d901      	bls.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e035      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443a:	4b1d      	ldr	r3, [pc, #116]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800443c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0ee      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800444e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004452:	d10d      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004454:	4b16      	ldr	r3, [pc, #88]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004460:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004468:	4911      	ldr	r1, [pc, #68]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800446a:	4313      	orrs	r3, r2
 800446c:	608b      	str	r3, [r1, #8]
 800446e:	e005      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x434>
 8004470:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	4a0e      	ldr	r2, [pc, #56]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004476:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800447a:	6093      	str	r3, [r2, #8]
 800447c:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800447e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004488:	4909      	ldr	r1, [pc, #36]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800448a:	4313      	orrs	r3, r2
 800448c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0310 	and.w	r3, r3, #16
 8004496:	2b00      	cmp	r3, #0
 8004498:	d004      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80044a0:	4b07      	ldr	r3, [pc, #28]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80044a2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3720      	adds	r7, #32
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40023800 	.word	0x40023800
 80044b4:	42470070 	.word	0x42470070
 80044b8:	40007000 	.word	0x40007000
 80044bc:	42470e40 	.word	0x42470e40
 80044c0:	424711e0 	.word	0x424711e0

080044c4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d075      	beq.n	80045c8 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80044dc:	4ba2      	ldr	r3, [pc, #648]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 030c 	and.w	r3, r3, #12
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d00c      	beq.n	8004502 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044e8:	4b9f      	ldr	r3, [pc, #636]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d112      	bne.n	800451a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044f4:	4b9c      	ldr	r3, [pc, #624]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004500:	d10b      	bne.n	800451a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004502:	4b99      	ldr	r3, [pc, #612]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d05b      	beq.n	80045c6 <HAL_RCC_OscConfig+0x102>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d157      	bne.n	80045c6 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e20b      	b.n	8004932 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004522:	d106      	bne.n	8004532 <HAL_RCC_OscConfig+0x6e>
 8004524:	4b90      	ldr	r3, [pc, #576]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a8f      	ldr	r2, [pc, #572]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 800452a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	e01d      	b.n	800456e <HAL_RCC_OscConfig+0xaa>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800453a:	d10c      	bne.n	8004556 <HAL_RCC_OscConfig+0x92>
 800453c:	4b8a      	ldr	r3, [pc, #552]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a89      	ldr	r2, [pc, #548]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 8004542:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004546:	6013      	str	r3, [r2, #0]
 8004548:	4b87      	ldr	r3, [pc, #540]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a86      	ldr	r2, [pc, #536]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 800454e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	e00b      	b.n	800456e <HAL_RCC_OscConfig+0xaa>
 8004556:	4b84      	ldr	r3, [pc, #528]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a83      	ldr	r2, [pc, #524]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 800455c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	4b81      	ldr	r3, [pc, #516]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a80      	ldr	r2, [pc, #512]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 8004568:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800456c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d013      	beq.n	800459e <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004576:	f7fd fc59 	bl	8001e2c <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800457e:	f7fd fc55 	bl	8001e2c <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b64      	cmp	r3, #100	; 0x64
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e1d0      	b.n	8004932 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004590:	4b75      	ldr	r3, [pc, #468]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0f0      	beq.n	800457e <HAL_RCC_OscConfig+0xba>
 800459c:	e014      	b.n	80045c8 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459e:	f7fd fc45 	bl	8001e2c <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045a6:	f7fd fc41 	bl	8001e2c <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b64      	cmp	r3, #100	; 0x64
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e1bc      	b.n	8004932 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045b8:	4b6b      	ldr	r3, [pc, #428]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1f0      	bne.n	80045a6 <HAL_RCC_OscConfig+0xe2>
 80045c4:	e000      	b.n	80045c8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d063      	beq.n	800469c <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80045d4:	4b64      	ldr	r3, [pc, #400]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 030c 	and.w	r3, r3, #12
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00b      	beq.n	80045f8 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045e0:	4b61      	ldr	r3, [pc, #388]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d11c      	bne.n	8004626 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ec:	4b5e      	ldr	r3, [pc, #376]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d116      	bne.n	8004626 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045f8:	4b5b      	ldr	r3, [pc, #364]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d005      	beq.n	8004610 <HAL_RCC_OscConfig+0x14c>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d001      	beq.n	8004610 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e190      	b.n	8004932 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004610:	4b55      	ldr	r3, [pc, #340]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	4952      	ldr	r1, [pc, #328]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 8004620:	4313      	orrs	r3, r2
 8004622:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004624:	e03a      	b.n	800469c <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d020      	beq.n	8004670 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800462e:	4b4f      	ldr	r3, [pc, #316]	; (800476c <HAL_RCC_OscConfig+0x2a8>)
 8004630:	2201      	movs	r2, #1
 8004632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004634:	f7fd fbfa 	bl	8001e2c <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800463c:	f7fd fbf6 	bl	8001e2c <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e171      	b.n	8004932 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800464e:	4b46      	ldr	r3, [pc, #280]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0f0      	beq.n	800463c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800465a:	4b43      	ldr	r3, [pc, #268]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	493f      	ldr	r1, [pc, #252]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 800466a:	4313      	orrs	r3, r2
 800466c:	600b      	str	r3, [r1, #0]
 800466e:	e015      	b.n	800469c <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004670:	4b3e      	ldr	r3, [pc, #248]	; (800476c <HAL_RCC_OscConfig+0x2a8>)
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004676:	f7fd fbd9 	bl	8001e2c <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800467e:	f7fd fbd5 	bl	8001e2c <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e150      	b.n	8004932 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004690:	4b35      	ldr	r3, [pc, #212]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1f0      	bne.n	800467e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d030      	beq.n	800470a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d016      	beq.n	80046de <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046b0:	4b2f      	ldr	r3, [pc, #188]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 80046b2:	2201      	movs	r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b6:	f7fd fbb9 	bl	8001e2c <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046be:	f7fd fbb5 	bl	8001e2c <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e130      	b.n	8004932 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d0:	4b25      	ldr	r3, [pc, #148]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 80046d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0f0      	beq.n	80046be <HAL_RCC_OscConfig+0x1fa>
 80046dc:	e015      	b.n	800470a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046de:	4b24      	ldr	r3, [pc, #144]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e4:	f7fd fba2 	bl	8001e2c <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046ec:	f7fd fb9e 	bl	8001e2c <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e119      	b.n	8004932 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046fe:	4b1a      	ldr	r3, [pc, #104]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 8004700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f0      	bne.n	80046ec <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 809f 	beq.w	8004856 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004718:	2300      	movs	r3, #0
 800471a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800471c:	4b12      	ldr	r3, [pc, #72]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 800471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10f      	bne.n	8004748 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	4b0e      	ldr	r3, [pc, #56]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	4a0d      	ldr	r2, [pc, #52]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 8004732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004736:	6413      	str	r3, [r2, #64]	; 0x40
 8004738:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <HAL_RCC_OscConfig+0x2a4>)
 800473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004744:	2301      	movs	r3, #1
 8004746:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004748:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <HAL_RCC_OscConfig+0x2b0>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004750:	2b00      	cmp	r3, #0
 8004752:	d120      	bne.n	8004796 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004754:	4b07      	ldr	r3, [pc, #28]	; (8004774 <HAL_RCC_OscConfig+0x2b0>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a06      	ldr	r2, [pc, #24]	; (8004774 <HAL_RCC_OscConfig+0x2b0>)
 800475a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800475e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004760:	f7fd fb64 	bl	8001e2c <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004766:	e010      	b.n	800478a <HAL_RCC_OscConfig+0x2c6>
 8004768:	40023800 	.word	0x40023800
 800476c:	42470000 	.word	0x42470000
 8004770:	42470e80 	.word	0x42470e80
 8004774:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004778:	f7fd fb58 	bl	8001e2c <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e0d3      	b.n	8004932 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478a:	4b6c      	ldr	r3, [pc, #432]	; (800493c <HAL_RCC_OscConfig+0x478>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0f0      	beq.n	8004778 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d106      	bne.n	80047ac <HAL_RCC_OscConfig+0x2e8>
 800479e:	4b68      	ldr	r3, [pc, #416]	; (8004940 <HAL_RCC_OscConfig+0x47c>)
 80047a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a2:	4a67      	ldr	r2, [pc, #412]	; (8004940 <HAL_RCC_OscConfig+0x47c>)
 80047a4:	f043 0301 	orr.w	r3, r3, #1
 80047a8:	6713      	str	r3, [r2, #112]	; 0x70
 80047aa:	e01c      	b.n	80047e6 <HAL_RCC_OscConfig+0x322>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	2b05      	cmp	r3, #5
 80047b2:	d10c      	bne.n	80047ce <HAL_RCC_OscConfig+0x30a>
 80047b4:	4b62      	ldr	r3, [pc, #392]	; (8004940 <HAL_RCC_OscConfig+0x47c>)
 80047b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b8:	4a61      	ldr	r2, [pc, #388]	; (8004940 <HAL_RCC_OscConfig+0x47c>)
 80047ba:	f043 0304 	orr.w	r3, r3, #4
 80047be:	6713      	str	r3, [r2, #112]	; 0x70
 80047c0:	4b5f      	ldr	r3, [pc, #380]	; (8004940 <HAL_RCC_OscConfig+0x47c>)
 80047c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c4:	4a5e      	ldr	r2, [pc, #376]	; (8004940 <HAL_RCC_OscConfig+0x47c>)
 80047c6:	f043 0301 	orr.w	r3, r3, #1
 80047ca:	6713      	str	r3, [r2, #112]	; 0x70
 80047cc:	e00b      	b.n	80047e6 <HAL_RCC_OscConfig+0x322>
 80047ce:	4b5c      	ldr	r3, [pc, #368]	; (8004940 <HAL_RCC_OscConfig+0x47c>)
 80047d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d2:	4a5b      	ldr	r2, [pc, #364]	; (8004940 <HAL_RCC_OscConfig+0x47c>)
 80047d4:	f023 0301 	bic.w	r3, r3, #1
 80047d8:	6713      	str	r3, [r2, #112]	; 0x70
 80047da:	4b59      	ldr	r3, [pc, #356]	; (8004940 <HAL_RCC_OscConfig+0x47c>)
 80047dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047de:	4a58      	ldr	r2, [pc, #352]	; (8004940 <HAL_RCC_OscConfig+0x47c>)
 80047e0:	f023 0304 	bic.w	r3, r3, #4
 80047e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d015      	beq.n	800481a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ee:	f7fd fb1d 	bl	8001e2c <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f4:	e00a      	b.n	800480c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047f6:	f7fd fb19 	bl	8001e2c <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	f241 3288 	movw	r2, #5000	; 0x1388
 8004804:	4293      	cmp	r3, r2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e092      	b.n	8004932 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800480c:	4b4c      	ldr	r3, [pc, #304]	; (8004940 <HAL_RCC_OscConfig+0x47c>)
 800480e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0ee      	beq.n	80047f6 <HAL_RCC_OscConfig+0x332>
 8004818:	e014      	b.n	8004844 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481a:	f7fd fb07 	bl	8001e2c <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004820:	e00a      	b.n	8004838 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004822:	f7fd fb03 	bl	8001e2c <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004830:	4293      	cmp	r3, r2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e07c      	b.n	8004932 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004838:	4b41      	ldr	r3, [pc, #260]	; (8004940 <HAL_RCC_OscConfig+0x47c>)
 800483a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1ee      	bne.n	8004822 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004844:	7dfb      	ldrb	r3, [r7, #23]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d105      	bne.n	8004856 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800484a:	4b3d      	ldr	r3, [pc, #244]	; (8004940 <HAL_RCC_OscConfig+0x47c>)
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	4a3c      	ldr	r2, [pc, #240]	; (8004940 <HAL_RCC_OscConfig+0x47c>)
 8004850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004854:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d068      	beq.n	8004930 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800485e:	4b38      	ldr	r3, [pc, #224]	; (8004940 <HAL_RCC_OscConfig+0x47c>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 030c 	and.w	r3, r3, #12
 8004866:	2b08      	cmp	r3, #8
 8004868:	d060      	beq.n	800492c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d145      	bne.n	80048fe <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004872:	4b34      	ldr	r3, [pc, #208]	; (8004944 <HAL_RCC_OscConfig+0x480>)
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fd fad8 	bl	8001e2c <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004880:	f7fd fad4 	bl	8001e2c <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e04f      	b.n	8004932 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004892:	4b2b      	ldr	r3, [pc, #172]	; (8004940 <HAL_RCC_OscConfig+0x47c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f0      	bne.n	8004880 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69da      	ldr	r2, [r3, #28]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	019b      	lsls	r3, r3, #6
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	085b      	lsrs	r3, r3, #1
 80048b6:	3b01      	subs	r3, #1
 80048b8:	041b      	lsls	r3, r3, #16
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	061b      	lsls	r3, r3, #24
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c8:	071b      	lsls	r3, r3, #28
 80048ca:	491d      	ldr	r1, [pc, #116]	; (8004940 <HAL_RCC_OscConfig+0x47c>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048d0:	4b1c      	ldr	r3, [pc, #112]	; (8004944 <HAL_RCC_OscConfig+0x480>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d6:	f7fd faa9 	bl	8001e2c <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048de:	f7fd faa5 	bl	8001e2c <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e020      	b.n	8004932 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f0:	4b13      	ldr	r3, [pc, #76]	; (8004940 <HAL_RCC_OscConfig+0x47c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0f0      	beq.n	80048de <HAL_RCC_OscConfig+0x41a>
 80048fc:	e018      	b.n	8004930 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048fe:	4b11      	ldr	r3, [pc, #68]	; (8004944 <HAL_RCC_OscConfig+0x480>)
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004904:	f7fd fa92 	bl	8001e2c <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800490c:	f7fd fa8e 	bl	8001e2c <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e009      	b.n	8004932 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491e:	4b08      	ldr	r3, [pc, #32]	; (8004940 <HAL_RCC_OscConfig+0x47c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f0      	bne.n	800490c <HAL_RCC_OscConfig+0x448>
 800492a:	e001      	b.n	8004930 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3718      	adds	r7, #24
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	40007000 	.word	0x40007000
 8004940:	40023800 	.word	0x40023800
 8004944:	42470060 	.word	0x42470060

08004948 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e022      	b.n	80049a0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d105      	bne.n	8004972 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7fc feb1 	bl	80016d4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2203      	movs	r2, #3
 8004976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f814 	bl	80049a8 <HAL_SD_InitCard>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e00a      	b.n	80049a0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80049a8:	b5b0      	push	{r4, r5, r7, lr}
 80049aa:	b08e      	sub	sp, #56	; 0x38
 80049ac:	af04      	add	r7, sp, #16
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80049b0:	2300      	movs	r3, #0
 80049b2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80049b4:	2300      	movs	r3, #0
 80049b6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80049b8:	2300      	movs	r3, #0
 80049ba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80049c0:	2300      	movs	r3, #0
 80049c2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80049c4:	2376      	movs	r3, #118	; 0x76
 80049c6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681d      	ldr	r5, [r3, #0]
 80049cc:	466c      	mov	r4, sp
 80049ce:	f107 0314 	add.w	r3, r7, #20
 80049d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80049d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80049da:	f107 0308 	add.w	r3, r7, #8
 80049de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049e0:	4628      	mov	r0, r5
 80049e2:	f002 fbef 	bl	80071c4 <SDIO_Init>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80049ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e031      	b.n	8004a5c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80049f8:	4b1a      	ldr	r3, [pc, #104]	; (8004a64 <HAL_SD_InitCard+0xbc>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f002 fc27 	bl	8007256 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004a08:	4b16      	ldr	r3, [pc, #88]	; (8004a64 <HAL_SD_InitCard+0xbc>)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fefc 	bl	800580c <SD_PowerON>
 8004a14:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00b      	beq.n	8004a34 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e013      	b.n	8004a5c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fe1b 	bl	8005670 <SD_InitCard>
 8004a3a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00b      	beq.n	8004a5a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3728      	adds	r7, #40	; 0x28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bdb0      	pop	{r4, r5, r7, pc}
 8004a64:	422580a0 	.word	0x422580a0

08004a68 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b092      	sub	sp, #72	; 0x48
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
 8004a74:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004a76:	f7fd f9d9 	bl	8001e2c <HAL_GetTick>
 8004a7a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d107      	bne.n	8004a9a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e1d7      	b.n	8004e4a <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	f040 81ca 	bne.w	8004e3c <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004aae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	441a      	add	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d907      	bls.n	8004acc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e1be      	b.n	8004e4a <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2203      	movs	r2, #3
 8004ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d002      	beq.n	8004aea <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae6:	025b      	lsls	r3, r3, #9
 8004ae8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004af2:	4618      	mov	r0, r3
 8004af4:	f002 fc42 	bl	800737c <SDMMC_CmdBlockLength>
 8004af8:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8004afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00f      	beq.n	8004b20 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a9a      	ldr	r2, [pc, #616]	; (8004d70 <HAL_SD_ReadBlocks+0x308>)
 8004b06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e194      	b.n	8004e4a <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b20:	f04f 33ff 	mov.w	r3, #4294967295
 8004b24:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	025b      	lsls	r3, r3, #9
 8004b2a:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004b2c:	2390      	movs	r3, #144	; 0x90
 8004b2e:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004b30:	2302      	movs	r3, #2
 8004b32:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004b34:	2300      	movs	r3, #0
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f107 0214 	add.w	r2, r7, #20
 8004b44:	4611      	mov	r1, r2
 8004b46:	4618      	mov	r0, r3
 8004b48:	f002 fbec 	bl	8007324 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d90a      	bls.n	8004b68 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2202      	movs	r2, #2
 8004b56:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f002 fc50 	bl	8007404 <SDMMC_CmdReadMultiBlock>
 8004b64:	6478      	str	r0, [r7, #68]	; 0x44
 8004b66:	e009      	b.n	8004b7c <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b74:	4618      	mov	r0, r3
 8004b76:	f002 fc23 	bl	80073c0 <SDMMC_CmdReadSingleBlock>
 8004b7a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d012      	beq.n	8004ba8 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a7a      	ldr	r2, [pc, #488]	; (8004d70 <HAL_SD_ReadBlocks+0x308>)
 8004b88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b90:	431a      	orrs	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e150      	b.n	8004e4a <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004bac:	e061      	b.n	8004c72 <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d03c      	beq.n	8004c36 <HAL_SD_ReadBlocks+0x1ce>
 8004bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d039      	beq.n	8004c36 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	643b      	str	r3, [r7, #64]	; 0x40
 8004bc6:	e033      	b.n	8004c30 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f002 fb24 	bl	800721a <SDIO_ReadFIFO>
 8004bd2:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bda:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bde:	3301      	adds	r3, #1
 8004be0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be4:	3b01      	subs	r3, #1
 8004be6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bea:	0a1b      	lsrs	r3, r3, #8
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c00:	0c1b      	lsrs	r3, r3, #16
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c06:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c10:	3b01      	subs	r3, #1
 8004c12:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c16:	0e1b      	lsrs	r3, r3, #24
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c20:	3301      	adds	r3, #1
 8004c22:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c26:	3b01      	subs	r3, #1
 8004c28:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8004c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	643b      	str	r3, [r7, #64]	; 0x40
 8004c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c32:	2b07      	cmp	r3, #7
 8004c34:	d9c8      	bls.n	8004bc8 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004c36:	f7fd f8f9 	bl	8001e2c <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d902      	bls.n	8004c4c <HAL_SD_ReadBlocks+0x1e4>
 8004c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d112      	bne.n	8004c72 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a47      	ldr	r2, [pc, #284]	; (8004d70 <HAL_SD_ReadBlocks+0x308>)
 8004c52:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e0eb      	b.n	8004e4a <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c78:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d096      	beq.n	8004bae <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d022      	beq.n	8004cd4 <HAL_SD_ReadBlocks+0x26c>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d91f      	bls.n	8004cd4 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d01b      	beq.n	8004cd4 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f002 fc15 	bl	80074d0 <SDMMC_CmdStopTransfer>
 8004ca6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d012      	beq.n	8004cd4 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a2f      	ldr	r2, [pc, #188]	; (8004d70 <HAL_SD_ReadBlocks+0x308>)
 8004cb4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e0ba      	b.n	8004e4a <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cda:	f003 0308 	and.w	r3, r3, #8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d012      	beq.n	8004d08 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a22      	ldr	r2, [pc, #136]	; (8004d70 <HAL_SD_ReadBlocks+0x308>)
 8004ce8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	f043 0208 	orr.w	r2, r3, #8
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e0a0      	b.n	8004e4a <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d012      	beq.n	8004d3c <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a15      	ldr	r2, [pc, #84]	; (8004d70 <HAL_SD_ReadBlocks+0x308>)
 8004d1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d22:	f043 0202 	orr.w	r2, r3, #2
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e086      	b.n	8004e4a <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d063      	beq.n	8004e12 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a08      	ldr	r2, [pc, #32]	; (8004d70 <HAL_SD_ReadBlocks+0x308>)
 8004d50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d56:	f043 0220 	orr.w	r2, r3, #32
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e06c      	b.n	8004e4a <HAL_SD_ReadBlocks+0x3e2>
 8004d70:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f002 fa4e 	bl	800721a <SDIO_ReadFIFO>
 8004d7e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8004d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d86:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d90:	3b01      	subs	r3, #1
 8004d92:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d96:	0a1b      	lsrs	r3, r3, #8
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da0:	3301      	adds	r3, #1
 8004da2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da6:	3b01      	subs	r3, #1
 8004da8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dac:	0c1b      	lsrs	r3, r3, #16
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db6:	3301      	adds	r3, #1
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc2:	0e1b      	lsrs	r3, r3, #24
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dcc:	3301      	adds	r3, #1
 8004dce:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004dd6:	f7fd f829 	bl	8001e2c <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d902      	bls.n	8004dec <HAL_SD_ReadBlocks+0x384>
 8004de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d112      	bne.n	8004e12 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a18      	ldr	r2, [pc, #96]	; (8004e54 <HAL_SD_ReadBlocks+0x3ec>)
 8004df2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e01b      	b.n	8004e4a <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <HAL_SD_ReadBlocks+0x3be>
 8004e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1a6      	bne.n	8004d74 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f240 523a 	movw	r2, #1338	; 0x53a
 8004e2e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	e006      	b.n	8004e4a <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e40:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
  }
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3748      	adds	r7, #72	; 0x48
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	004005ff 	.word	0x004005ff

08004e58 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b092      	sub	sp, #72	; 0x48
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
 8004e64:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004e66:	f7fc ffe1 	bl	8001e2c <HAL_GetTick>
 8004e6a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d107      	bne.n	8004e8a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e182      	b.n	8005190 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	f040 8175 	bne.w	8005182 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004e9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	441a      	add	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d907      	bls.n	8004ebc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e169      	b.n	8005190 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2203      	movs	r2, #3
 8004ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d002      	beq.n	8004eda <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed6:	025b      	lsls	r3, r3, #9
 8004ed8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f002 fa4a 	bl	800737c <SDMMC_CmdBlockLength>
 8004ee8:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8004eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00f      	beq.n	8004f10 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a9c      	ldr	r2, [pc, #624]	; (8005168 <HAL_SD_WriteBlocks+0x310>)
 8004ef6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004efe:	431a      	orrs	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e13f      	b.n	8005190 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004f10:	f04f 33ff 	mov.w	r3, #4294967295
 8004f14:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	025b      	lsls	r3, r3, #9
 8004f1a:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004f1c:	2390      	movs	r3, #144	; 0x90
 8004f1e:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004f20:	2300      	movs	r3, #0
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004f24:	2300      	movs	r3, #0
 8004f26:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f107 0218 	add.w	r2, r7, #24
 8004f34:	4611      	mov	r1, r2
 8004f36:	4618      	mov	r0, r3
 8004f38:	f002 f9f4 	bl	8007324 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d90a      	bls.n	8004f58 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2220      	movs	r2, #32
 8004f46:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f002 fa9c 	bl	800748c <SDMMC_CmdWriteMultiBlock>
 8004f54:	6478      	str	r0, [r7, #68]	; 0x44
 8004f56:	e009      	b.n	8004f6c <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2210      	movs	r2, #16
 8004f5c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f64:	4618      	mov	r0, r3
 8004f66:	f002 fa6f 	bl	8007448 <SDMMC_CmdWriteSingleBlock>
 8004f6a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d012      	beq.n	8004f98 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a7c      	ldr	r2, [pc, #496]	; (8005168 <HAL_SD_WriteBlocks+0x310>)
 8004f78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f80:	431a      	orrs	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e0fb      	b.n	8005190 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004f9c:	e065      	b.n	800506a <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d040      	beq.n	800502e <HAL_SD_WriteBlocks+0x1d6>
 8004fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d03d      	beq.n	800502e <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	643b      	str	r3, [r7, #64]	; 0x40
 8004fb6:	e037      	b.n	8005028 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8004fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8004fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	021a      	lsls	r2, r3, #8
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd8:	3301      	adds	r3, #1
 8004fda:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	041a      	lsls	r2, r3, #16
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	061a      	lsls	r2, r3, #24
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005008:	3301      	adds	r3, #1
 800500a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800500c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800500e:	3b01      	subs	r3, #1
 8005010:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f107 0214 	add.w	r2, r7, #20
 800501a:	4611      	mov	r1, r2
 800501c:	4618      	mov	r0, r3
 800501e:	f002 f909 	bl	8007234 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005024:	3301      	adds	r3, #1
 8005026:	643b      	str	r3, [r7, #64]	; 0x40
 8005028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800502a:	2b07      	cmp	r3, #7
 800502c:	d9c4      	bls.n	8004fb8 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800502e:	f7fc fefd 	bl	8001e2c <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800503a:	429a      	cmp	r2, r3
 800503c:	d902      	bls.n	8005044 <HAL_SD_WriteBlocks+0x1ec>
 800503e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005040:	2b00      	cmp	r3, #0
 8005042:	d112      	bne.n	800506a <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a47      	ldr	r2, [pc, #284]	; (8005168 <HAL_SD_WriteBlocks+0x310>)
 800504a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005052:	431a      	orrs	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e092      	b.n	8005190 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005070:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8005074:	2b00      	cmp	r3, #0
 8005076:	d092      	beq.n	8004f9e <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005082:	2b00      	cmp	r3, #0
 8005084:	d022      	beq.n	80050cc <HAL_SD_WriteBlocks+0x274>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d91f      	bls.n	80050cc <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005090:	2b03      	cmp	r3, #3
 8005092:	d01b      	beq.n	80050cc <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4618      	mov	r0, r3
 800509a:	f002 fa19 	bl	80074d0 <SDMMC_CmdStopTransfer>
 800509e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80050a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d012      	beq.n	80050cc <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a2f      	ldr	r2, [pc, #188]	; (8005168 <HAL_SD_WriteBlocks+0x310>)
 80050ac:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050b4:	431a      	orrs	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e061      	b.n	8005190 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d012      	beq.n	8005100 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a22      	ldr	r2, [pc, #136]	; (8005168 <HAL_SD_WriteBlocks+0x310>)
 80050e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e6:	f043 0208 	orr.w	r2, r3, #8
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e047      	b.n	8005190 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d012      	beq.n	8005134 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a15      	ldr	r2, [pc, #84]	; (8005168 <HAL_SD_WriteBlocks+0x310>)
 8005114:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511a:	f043 0202 	orr.w	r2, r3, #2
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e02d      	b.n	8005190 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513a:	f003 0310 	and.w	r3, r3, #16
 800513e:	2b00      	cmp	r3, #0
 8005140:	d014      	beq.n	800516c <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a08      	ldr	r2, [pc, #32]	; (8005168 <HAL_SD_WriteBlocks+0x310>)
 8005148:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	f043 0210 	orr.w	r2, r3, #16
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e013      	b.n	8005190 <HAL_SD_WriteBlocks+0x338>
 8005168:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f240 523a 	movw	r2, #1338	; 0x53a
 8005174:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	e006      	b.n	8005190 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005186:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
  }
}
 8005190:	4618      	mov	r0, r3
 8005192:	3748      	adds	r7, #72	; 0x48
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051a6:	0f9b      	lsrs	r3, r3, #30
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051b2:	0e9b      	lsrs	r3, r3, #26
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051c4:	0e1b      	lsrs	r3, r3, #24
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	f003 0303 	and.w	r3, r3, #3
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051d6:	0c1b      	lsrs	r3, r3, #16
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051e2:	0a1b      	lsrs	r3, r3, #8
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051f8:	0d1b      	lsrs	r3, r3, #20
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005204:	0c1b      	lsrs	r3, r3, #16
 8005206:	b2db      	uxtb	r3, r3
 8005208:	f003 030f 	and.w	r3, r3, #15
 800520c:	b2da      	uxtb	r2, r3
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005216:	0bdb      	lsrs	r3, r3, #15
 8005218:	b2db      	uxtb	r3, r3
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	b2da      	uxtb	r2, r3
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005228:	0b9b      	lsrs	r3, r3, #14
 800522a:	b2db      	uxtb	r3, r3
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	b2da      	uxtb	r2, r3
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800523a:	0b5b      	lsrs	r3, r3, #13
 800523c:	b2db      	uxtb	r3, r3
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	b2da      	uxtb	r2, r3
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800524c:	0b1b      	lsrs	r3, r3, #12
 800524e:	b2db      	uxtb	r3, r3
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	b2da      	uxtb	r2, r3
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2200      	movs	r2, #0
 800525e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005264:	2b00      	cmp	r3, #0
 8005266:	d163      	bne.n	8005330 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800526c:	009a      	lsls	r2, r3, #2
 800526e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005272:	4013      	ands	r3, r2
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005278:	0f92      	lsrs	r2, r2, #30
 800527a:	431a      	orrs	r2, r3
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005284:	0edb      	lsrs	r3, r3, #27
 8005286:	b2db      	uxtb	r3, r3
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	b2da      	uxtb	r2, r3
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005296:	0e1b      	lsrs	r3, r3, #24
 8005298:	b2db      	uxtb	r3, r3
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052a8:	0d5b      	lsrs	r3, r3, #21
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ba:	0c9b      	lsrs	r3, r3, #18
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052cc:	0bdb      	lsrs	r3, r3, #15
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	7e1b      	ldrb	r3, [r3, #24]
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	3302      	adds	r3, #2
 80052f0:	2201      	movs	r2, #1
 80052f2:	fa02 f303 	lsl.w	r3, r2, r3
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80052fa:	fb02 f203 	mul.w	r2, r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	7a1b      	ldrb	r3, [r3, #8]
 8005306:	b2db      	uxtb	r3, r3
 8005308:	f003 030f 	and.w	r3, r3, #15
 800530c:	2201      	movs	r2, #1
 800530e:	409a      	lsls	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800531c:	0a52      	lsrs	r2, r2, #9
 800531e:	fb02 f203 	mul.w	r2, r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800532c:	661a      	str	r2, [r3, #96]	; 0x60
 800532e:	e031      	b.n	8005394 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005334:	2b01      	cmp	r3, #1
 8005336:	d11d      	bne.n	8005374 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800533c:	041b      	lsls	r3, r3, #16
 800533e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005346:	0c1b      	lsrs	r3, r3, #16
 8005348:	431a      	orrs	r2, r3
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	3301      	adds	r3, #1
 8005354:	029a      	lsls	r2, r3, #10
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005368:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	661a      	str	r2, [r3, #96]	; 0x60
 8005372:	e00f      	b.n	8005394 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a58      	ldr	r2, [pc, #352]	; (80054dc <HAL_SD_GetCardCSD+0x344>)
 800537a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005380:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e09d      	b.n	80054d0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005398:	0b9b      	lsrs	r3, r3, #14
 800539a:	b2db      	uxtb	r3, r3
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053aa:	09db      	lsrs	r3, r3, #7
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053cc:	0fdb      	lsrs	r3, r3, #31
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d8:	0f5b      	lsrs	r3, r3, #29
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	f003 0303 	and.w	r3, r3, #3
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ea:	0e9b      	lsrs	r3, r3, #26
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fc:	0d9b      	lsrs	r3, r3, #22
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	f003 030f 	and.w	r3, r3, #15
 8005404:	b2da      	uxtb	r2, r3
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540e:	0d5b      	lsrs	r3, r3, #21
 8005410:	b2db      	uxtb	r3, r3
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	b2da      	uxtb	r2, r3
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542a:	0c1b      	lsrs	r3, r3, #16
 800542c:	b2db      	uxtb	r3, r3
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	b2da      	uxtb	r2, r3
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543e:	0bdb      	lsrs	r3, r3, #15
 8005440:	b2db      	uxtb	r3, r3
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	b2da      	uxtb	r2, r3
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005452:	0b9b      	lsrs	r3, r3, #14
 8005454:	b2db      	uxtb	r3, r3
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	b2da      	uxtb	r2, r3
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005466:	0b5b      	lsrs	r3, r3, #13
 8005468:	b2db      	uxtb	r3, r3
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	b2da      	uxtb	r2, r3
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547a:	0b1b      	lsrs	r3, r3, #12
 800547c:	b2db      	uxtb	r3, r3
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	b2da      	uxtb	r2, r3
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548e:	0a9b      	lsrs	r3, r3, #10
 8005490:	b2db      	uxtb	r3, r3
 8005492:	f003 0303 	and.w	r3, r3, #3
 8005496:	b2da      	uxtb	r2, r3
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a2:	0a1b      	lsrs	r3, r3, #8
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b6:	085b      	lsrs	r3, r3, #1
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	004005ff 	.word	0x004005ff

080054e0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005538:	b5b0      	push	{r4, r5, r7, lr}
 800553a:	b08e      	sub	sp, #56	; 0x38
 800553c:	af04      	add	r7, sp, #16
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2203      	movs	r2, #3
 8005546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554e:	2b03      	cmp	r3, #3
 8005550:	d02e      	beq.n	80055b0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005558:	d106      	bne.n	8005568 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	639a      	str	r2, [r3, #56]	; 0x38
 8005566:	e029      	b.n	80055bc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800556e:	d10a      	bne.n	8005586 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fa01 	bl	8005978 <SD_WideBus_Enable>
 8005576:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	639a      	str	r2, [r3, #56]	; 0x38
 8005584:	e01a      	b.n	80055bc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10a      	bne.n	80055a2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 fa3e 	bl	8005a0e <SD_WideBus_Disable>
 8005592:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	639a      	str	r2, [r3, #56]	; 0x38
 80055a0:	e00c      	b.n	80055bc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	639a      	str	r2, [r3, #56]	; 0x38
 80055ae:	e005      	b.n	80055bc <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d009      	beq.n	80055d8 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a18      	ldr	r2, [pc, #96]	; (800562c <HAL_SD_ConfigWideBusOperation+0xf4>)
 80055ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e024      	b.n	8005622 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681d      	ldr	r5, [r3, #0]
 80055fe:	466c      	mov	r4, sp
 8005600:	f107 0318 	add.w	r3, r7, #24
 8005604:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005608:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800560c:	f107 030c 	add.w	r3, r7, #12
 8005610:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005612:	4628      	mov	r0, r5
 8005614:	f001 fdd6 	bl	80071c4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3728      	adds	r7, #40	; 0x28
 8005626:	46bd      	mov	sp, r7
 8005628:	bdb0      	pop	{r4, r5, r7, pc}
 800562a:	bf00      	nop
 800562c:	004005ff 	.word	0x004005ff

08005630 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005638:	2300      	movs	r3, #0
 800563a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800563c:	f107 030c 	add.w	r3, r7, #12
 8005640:	4619      	mov	r1, r3
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f970 	bl	8005928 <SD_SendStatus>
 8005648:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d005      	beq.n	800565c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	0a5b      	lsrs	r3, r3, #9
 8005660:	f003 030f 	and.w	r3, r3, #15
 8005664:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005666:	693b      	ldr	r3, [r7, #16]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005670:	b5b0      	push	{r4, r5, r7, lr}
 8005672:	b094      	sub	sp, #80	; 0x50
 8005674:	af04      	add	r7, sp, #16
 8005676:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005678:	2301      	movs	r3, #1
 800567a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4618      	mov	r0, r3
 8005682:	f001 fdf7 	bl	8007274 <SDIO_GetPowerState>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d102      	bne.n	8005692 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800568c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005690:	e0b7      	b.n	8005802 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005696:	2b03      	cmp	r3, #3
 8005698:	d02f      	beq.n	80056fa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4618      	mov	r0, r3
 80056a0:	f002 f820 	bl	80076e4 <SDMMC_CmdSendCID>
 80056a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80056a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <SD_InitCard+0x40>
    {
      return errorstate;
 80056ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ae:	e0a8      	b.n	8005802 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2100      	movs	r1, #0
 80056b6:	4618      	mov	r0, r3
 80056b8:	f001 fe21 	bl	80072fe <SDIO_GetResponse>
 80056bc:	4602      	mov	r2, r0
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2104      	movs	r1, #4
 80056c8:	4618      	mov	r0, r3
 80056ca:	f001 fe18 	bl	80072fe <SDIO_GetResponse>
 80056ce:	4602      	mov	r2, r0
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2108      	movs	r1, #8
 80056da:	4618      	mov	r0, r3
 80056dc:	f001 fe0f 	bl	80072fe <SDIO_GetResponse>
 80056e0:	4602      	mov	r2, r0
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	210c      	movs	r1, #12
 80056ec:	4618      	mov	r0, r3
 80056ee:	f001 fe06 	bl	80072fe <SDIO_GetResponse>
 80056f2:	4602      	mov	r2, r0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fe:	2b03      	cmp	r3, #3
 8005700:	d00d      	beq.n	800571e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f107 020e 	add.w	r2, r7, #14
 800570a:	4611      	mov	r1, r2
 800570c:	4618      	mov	r0, r3
 800570e:	f002 f826 	bl	800775e <SDMMC_CmdSetRelAdd>
 8005712:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <SD_InitCard+0xae>
    {
      return errorstate;
 800571a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800571c:	e071      	b.n	8005802 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005722:	2b03      	cmp	r3, #3
 8005724:	d036      	beq.n	8005794 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005726:	89fb      	ldrh	r3, [r7, #14]
 8005728:	461a      	mov	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005736:	041b      	lsls	r3, r3, #16
 8005738:	4619      	mov	r1, r3
 800573a:	4610      	mov	r0, r2
 800573c:	f001 fff0 	bl	8007720 <SDMMC_CmdSendCSD>
 8005740:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <SD_InitCard+0xdc>
    {
      return errorstate;
 8005748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574a:	e05a      	b.n	8005802 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2100      	movs	r1, #0
 8005752:	4618      	mov	r0, r3
 8005754:	f001 fdd3 	bl	80072fe <SDIO_GetResponse>
 8005758:	4602      	mov	r2, r0
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2104      	movs	r1, #4
 8005764:	4618      	mov	r0, r3
 8005766:	f001 fdca 	bl	80072fe <SDIO_GetResponse>
 800576a:	4602      	mov	r2, r0
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2108      	movs	r1, #8
 8005776:	4618      	mov	r0, r3
 8005778:	f001 fdc1 	bl	80072fe <SDIO_GetResponse>
 800577c:	4602      	mov	r2, r0
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	210c      	movs	r1, #12
 8005788:	4618      	mov	r0, r3
 800578a:	f001 fdb8 	bl	80072fe <SDIO_GetResponse>
 800578e:	4602      	mov	r2, r0
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2104      	movs	r1, #4
 800579a:	4618      	mov	r0, r3
 800579c:	f001 fdaf 	bl	80072fe <SDIO_GetResponse>
 80057a0:	4603      	mov	r3, r0
 80057a2:	0d1a      	lsrs	r2, r3, #20
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80057a8:	f107 0310 	add.w	r3, r7, #16
 80057ac:	4619      	mov	r1, r3
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7ff fcf2 	bl	8005198 <HAL_SD_GetCardCSD>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80057ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80057be:	e020      	b.n	8005802 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6819      	ldr	r1, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057c8:	041b      	lsls	r3, r3, #16
 80057ca:	f04f 0400 	mov.w	r4, #0
 80057ce:	461a      	mov	r2, r3
 80057d0:	4623      	mov	r3, r4
 80057d2:	4608      	mov	r0, r1
 80057d4:	f001 fe9e 	bl	8007514 <SDMMC_CmdSelDesel>
 80057d8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80057da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <SD_InitCard+0x174>
  {
    return errorstate;
 80057e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e2:	e00e      	b.n	8005802 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681d      	ldr	r5, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	466c      	mov	r4, sp
 80057ec:	f103 0210 	add.w	r2, r3, #16
 80057f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80057f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80057f6:	3304      	adds	r3, #4
 80057f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057fa:	4628      	mov	r0, r5
 80057fc:	f001 fce2 	bl	80071c4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3740      	adds	r7, #64	; 0x40
 8005806:	46bd      	mov	sp, r7
 8005808:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800580c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005814:	2300      	movs	r3, #0
 8005816:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	2300      	movs	r3, #0
 800581e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4618      	mov	r0, r3
 8005826:	f001 fe98 	bl	800755a <SDMMC_CmdGoIdleState>
 800582a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	e072      	b.n	800591c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	f001 feab 	bl	8007596 <SDMMC_CmdOperCond>
 8005840:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00d      	beq.n	8005864 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f001 fe81 	bl	800755a <SDMMC_CmdGoIdleState>
 8005858:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d004      	beq.n	800586a <SD_PowerON+0x5e>
    {
      return errorstate;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	e05b      	b.n	800591c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800586e:	2b01      	cmp	r3, #1
 8005870:	d137      	bne.n	80058e2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2100      	movs	r1, #0
 8005878:	4618      	mov	r0, r3
 800587a:	f001 feab 	bl	80075d4 <SDMMC_CmdAppCommand>
 800587e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d02d      	beq.n	80058e2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005886:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800588a:	e047      	b.n	800591c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2100      	movs	r1, #0
 8005892:	4618      	mov	r0, r3
 8005894:	f001 fe9e 	bl	80075d4 <SDMMC_CmdAppCommand>
 8005898:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <SD_PowerON+0x98>
    {
      return errorstate;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	e03b      	b.n	800591c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	491e      	ldr	r1, [pc, #120]	; (8005924 <SD_PowerON+0x118>)
 80058aa:	4618      	mov	r0, r3
 80058ac:	f001 feb4 	bl	8007618 <SDMMC_CmdAppOperCommand>
 80058b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d002      	beq.n	80058be <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80058b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80058bc:	e02e      	b.n	800591c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2100      	movs	r1, #0
 80058c4:	4618      	mov	r0, r3
 80058c6:	f001 fd1a 	bl	80072fe <SDIO_GetResponse>
 80058ca:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	0fdb      	lsrs	r3, r3, #31
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d101      	bne.n	80058d8 <SD_PowerON+0xcc>
 80058d4:	2301      	movs	r3, #1
 80058d6:	e000      	b.n	80058da <SD_PowerON+0xce>
 80058d8:	2300      	movs	r3, #0
 80058da:	613b      	str	r3, [r7, #16]

    count++;
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	3301      	adds	r3, #1
 80058e0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d802      	bhi.n	80058f2 <SD_PowerON+0xe6>
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0cc      	beq.n	800588c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d902      	bls.n	8005902 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80058fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005900:	e00c      	b.n	800591c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d003      	beq.n	8005914 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	645a      	str	r2, [r3, #68]	; 0x44
 8005912:	e002      	b.n	800591a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3718      	adds	r7, #24
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	c1100000 	.word	0xc1100000

08005928 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d102      	bne.n	800593e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005938:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800593c:	e018      	b.n	8005970 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005946:	041b      	lsls	r3, r3, #16
 8005948:	4619      	mov	r1, r3
 800594a:	4610      	mov	r0, r2
 800594c:	f001 ff28 	bl	80077a0 <SDMMC_CmdSendStatus>
 8005950:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <SD_SendStatus+0x34>
  {
    return errorstate;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	e009      	b.n	8005970 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2100      	movs	r1, #0
 8005962:	4618      	mov	r0, r3
 8005964:	f001 fccb 	bl	80072fe <SDIO_GetResponse>
 8005968:	4602      	mov	r2, r0
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]
 8005984:	2300      	movs	r3, #0
 8005986:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2100      	movs	r1, #0
 800598e:	4618      	mov	r0, r3
 8005990:	f001 fcb5 	bl	80072fe <SDIO_GetResponse>
 8005994:	4603      	mov	r3, r0
 8005996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800599e:	d102      	bne.n	80059a6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80059a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80059a4:	e02f      	b.n	8005a06 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80059a6:	f107 030c 	add.w	r3, r7, #12
 80059aa:	4619      	mov	r1, r3
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f879 	bl	8005aa4 <SD_FindSCR>
 80059b2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	e023      	b.n	8005a06 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d01c      	beq.n	8005a02 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d0:	041b      	lsls	r3, r3, #16
 80059d2:	4619      	mov	r1, r3
 80059d4:	4610      	mov	r0, r2
 80059d6:	f001 fdfd 	bl	80075d4 <SDMMC_CmdAppCommand>
 80059da:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	e00f      	b.n	8005a06 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2102      	movs	r1, #2
 80059ec:	4618      	mov	r0, r3
 80059ee:	f001 fe36 	bl	800765e <SDMMC_CmdBusWidth>
 80059f2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	e003      	b.n	8005a06 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80059fe:	2300      	movs	r3, #0
 8005a00:	e001      	b.n	8005a06 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005a02:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b086      	sub	sp, #24
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005a16:	2300      	movs	r3, #0
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2100      	movs	r1, #0
 8005a24:	4618      	mov	r0, r3
 8005a26:	f001 fc6a 	bl	80072fe <SDIO_GetResponse>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a34:	d102      	bne.n	8005a3c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005a36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a3a:	e02f      	b.n	8005a9c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005a3c:	f107 030c 	add.w	r3, r7, #12
 8005a40:	4619      	mov	r1, r3
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f82e 	bl	8005aa4 <SD_FindSCR>
 8005a48:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	e023      	b.n	8005a9c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d01c      	beq.n	8005a98 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a66:	041b      	lsls	r3, r3, #16
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4610      	mov	r0, r2
 8005a6c:	f001 fdb2 	bl	80075d4 <SDMMC_CmdAppCommand>
 8005a70:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	e00f      	b.n	8005a9c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2100      	movs	r1, #0
 8005a82:	4618      	mov	r0, r3
 8005a84:	f001 fdeb 	bl	800765e <SDMMC_CmdBusWidth>
 8005a88:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	e003      	b.n	8005a9c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005a94:	2300      	movs	r3, #0
 8005a96:	e001      	b.n	8005a9c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005a98:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005aa4:	b590      	push	{r4, r7, lr}
 8005aa6:	b08f      	sub	sp, #60	; 0x3c
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005aae:	f7fc f9bd 	bl	8001e2c <HAL_GetTick>
 8005ab2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005ab8:	2300      	movs	r3, #0
 8005aba:	60bb      	str	r3, [r7, #8]
 8005abc:	2300      	movs	r3, #0
 8005abe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2108      	movs	r1, #8
 8005aca:	4618      	mov	r0, r3
 8005acc:	f001 fc56 	bl	800737c <SDMMC_CmdBlockLength>
 8005ad0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <SD_FindSCR+0x38>
  {
    return errorstate;
 8005ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ada:	e0a9      	b.n	8005c30 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae4:	041b      	lsls	r3, r3, #16
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	4610      	mov	r0, r2
 8005aea:	f001 fd73 	bl	80075d4 <SDMMC_CmdAppCommand>
 8005aee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <SD_FindSCR+0x56>
  {
    return errorstate;
 8005af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af8:	e09a      	b.n	8005c30 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005afa:	f04f 33ff 	mov.w	r3, #4294967295
 8005afe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005b00:	2308      	movs	r3, #8
 8005b02:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005b04:	2330      	movs	r3, #48	; 0x30
 8005b06:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005b08:	2302      	movs	r3, #2
 8005b0a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005b10:	2301      	movs	r3, #1
 8005b12:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f107 0210 	add.w	r2, r7, #16
 8005b1c:	4611      	mov	r1, r2
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f001 fc00 	bl	8007324 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f001 fdba 	bl	80076a2 <SDMMC_CmdSendSCR>
 8005b2e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d022      	beq.n	8005b7c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8005b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b38:	e07a      	b.n	8005c30 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00e      	beq.n	8005b66 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6819      	ldr	r1, [r3, #0]
 8005b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	f107 0208 	add.w	r2, r7, #8
 8005b54:	18d4      	adds	r4, r2, r3
 8005b56:	4608      	mov	r0, r1
 8005b58:	f001 fb5f 	bl	800721a <SDIO_ReadFIFO>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	6023      	str	r3, [r4, #0]
      index++;
 8005b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b62:	3301      	adds	r3, #1
 8005b64:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005b66:	f7fc f961 	bl	8001e2c <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b74:	d102      	bne.n	8005b7c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005b76:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b7a:	e059      	b.n	8005c30 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b82:	f240 432a 	movw	r3, #1066	; 0x42a
 8005b86:	4013      	ands	r3, r2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0d6      	beq.n	8005b3a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d005      	beq.n	8005ba6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2208      	movs	r2, #8
 8005ba0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005ba2:	2308      	movs	r3, #8
 8005ba4:	e044      	b.n	8005c30 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2202      	movs	r2, #2
 8005bba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	e037      	b.n	8005c30 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc6:	f003 0320 	and.w	r3, r3, #32
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d005      	beq.n	8005bda <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005bd6:	2320      	movs	r3, #32
 8005bd8:	e02a      	b.n	8005c30 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f240 523a 	movw	r2, #1338	; 0x53a
 8005be2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	061a      	lsls	r2, r3, #24
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	021b      	lsls	r3, r3, #8
 8005bec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bf0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	0a1b      	lsrs	r3, r3, #8
 8005bf6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005bfa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	0e1b      	lsrs	r3, r3, #24
 8005c00:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	601a      	str	r2, [r3, #0]
    scr++;
 8005c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c08:	3304      	adds	r3, #4
 8005c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	061a      	lsls	r2, r3, #24
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	021b      	lsls	r3, r3, #8
 8005c14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c18:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	0a1b      	lsrs	r3, r3, #8
 8005c1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005c22:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	0e1b      	lsrs	r3, r3, #24
 8005c28:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	373c      	adds	r7, #60	; 0x3c
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd90      	pop	{r4, r7, pc}

08005c38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e056      	b.n	8005cf8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d106      	bne.n	8005c6a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7fb fd9d 	bl	80017a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c80:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	431a      	orrs	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	ea42 0103 	orr.w	r1, r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	0c1b      	lsrs	r3, r3, #16
 8005cc8:	f003 0104 	and.w	r1, r3, #4
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	69da      	ldr	r2, [r3, #28]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ce6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e01d      	b.n	8005d4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d106      	bne.n	8005d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7fb fde2 	bl	80018f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4610      	mov	r0, r2
 8005d40:	f000 fb1e 	bl	8006380 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b085      	sub	sp, #20
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f042 0201 	orr.w	r2, r2, #1
 8005d6c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f003 0307 	and.w	r3, r3, #7
 8005d78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2b06      	cmp	r3, #6
 8005d7e:	d007      	beq.n	8005d90 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0201 	orr.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b082      	sub	sp, #8
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e01d      	b.n	8005dec <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d106      	bne.n	8005dca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7fb fd35 	bl	8001834 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2202      	movs	r2, #2
 8005dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	4619      	mov	r1, r3
 8005ddc:	4610      	mov	r0, r2
 8005dde:	f000 facf 	bl	8006380 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2201      	movs	r2, #1
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 fd0a 	bl	8006820 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a15      	ldr	r2, [pc, #84]	; (8005e68 <HAL_TIM_PWM_Start+0x74>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d004      	beq.n	8005e20 <HAL_TIM_PWM_Start+0x2c>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a14      	ldr	r2, [pc, #80]	; (8005e6c <HAL_TIM_PWM_Start+0x78>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d101      	bne.n	8005e24 <HAL_TIM_PWM_Start+0x30>
 8005e20:	2301      	movs	r3, #1
 8005e22:	e000      	b.n	8005e26 <HAL_TIM_PWM_Start+0x32>
 8005e24:	2300      	movs	r3, #0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d007      	beq.n	8005e3a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f003 0307 	and.w	r3, r3, #7
 8005e44:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2b06      	cmp	r3, #6
 8005e4a:	d007      	beq.n	8005e5c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0201 	orr.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	40010000 	.word	0x40010000
 8005e6c:	40010400 	.word	0x40010400

08005e70 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e083      	b.n	8005f8c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d106      	bne.n	8005e9e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f7fb fd67 	bl	800196c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6812      	ldr	r2, [r2, #0]
 8005eb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eb4:	f023 0307 	bic.w	r3, r3, #7
 8005eb8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	f000 fa5b 	bl	8006380 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef2:	f023 0303 	bic.w	r3, r3, #3
 8005ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	021b      	lsls	r3, r3, #8
 8005f02:	4313      	orrs	r3, r2
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005f10:	f023 030c 	bic.w	r3, r3, #12
 8005f14:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	021b      	lsls	r3, r3, #8
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	011a      	lsls	r2, r3, #4
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	031b      	lsls	r3, r3, #12
 8005f40:	4313      	orrs	r3, r2
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005f4e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005f56:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	011b      	lsls	r3, r3, #4
 8005f62:	4313      	orrs	r3, r2
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3718      	adds	r7, #24
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d122      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d11b      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0202 	mvn.w	r2, #2
 8005fc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f9b4 	bl	8006344 <HAL_TIM_IC_CaptureCallback>
 8005fdc:	e005      	b.n	8005fea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f9a6 	bl	8006330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f9b7 	bl	8006358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f003 0304 	and.w	r3, r3, #4
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d122      	bne.n	8006044 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b04      	cmp	r3, #4
 800600a:	d11b      	bne.n	8006044 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f06f 0204 	mvn.w	r2, #4
 8006014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2202      	movs	r2, #2
 800601a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f98a 	bl	8006344 <HAL_TIM_IC_CaptureCallback>
 8006030:	e005      	b.n	800603e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f97c 	bl	8006330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f98d 	bl	8006358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f003 0308 	and.w	r3, r3, #8
 800604e:	2b08      	cmp	r3, #8
 8006050:	d122      	bne.n	8006098 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f003 0308 	and.w	r3, r3, #8
 800605c:	2b08      	cmp	r3, #8
 800605e:	d11b      	bne.n	8006098 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f06f 0208 	mvn.w	r2, #8
 8006068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2204      	movs	r2, #4
 800606e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	f003 0303 	and.w	r3, r3, #3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f960 	bl	8006344 <HAL_TIM_IC_CaptureCallback>
 8006084:	e005      	b.n	8006092 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f952 	bl	8006330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f963 	bl	8006358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	f003 0310 	and.w	r3, r3, #16
 80060a2:	2b10      	cmp	r3, #16
 80060a4:	d122      	bne.n	80060ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f003 0310 	and.w	r3, r3, #16
 80060b0:	2b10      	cmp	r3, #16
 80060b2:	d11b      	bne.n	80060ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0210 	mvn.w	r2, #16
 80060bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2208      	movs	r2, #8
 80060c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f936 	bl	8006344 <HAL_TIM_IC_CaptureCallback>
 80060d8:	e005      	b.n	80060e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f928 	bl	8006330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f939 	bl	8006358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d10e      	bne.n	8006118 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b01      	cmp	r3, #1
 8006106:	d107      	bne.n	8006118 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f06f 0201 	mvn.w	r2, #1
 8006110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fa fb56 	bl	80007c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006122:	2b80      	cmp	r3, #128	; 0x80
 8006124:	d10e      	bne.n	8006144 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006130:	2b80      	cmp	r3, #128	; 0x80
 8006132:	d107      	bne.n	8006144 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800613c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fc6c 	bl	8006a1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614e:	2b40      	cmp	r3, #64	; 0x40
 8006150:	d10e      	bne.n	8006170 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615c:	2b40      	cmp	r3, #64	; 0x40
 800615e:	d107      	bne.n	8006170 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f8fe 	bl	800636c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b20      	cmp	r3, #32
 800617c:	d10e      	bne.n	800619c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f003 0320 	and.w	r3, r3, #32
 8006188:	2b20      	cmp	r3, #32
 800618a:	d107      	bne.n	800619c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f06f 0220 	mvn.w	r2, #32
 8006194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fc36 	bl	8006a08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800619c:	bf00      	nop
 800619e:	3708      	adds	r7, #8
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d101      	bne.n	80061be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80061ba:	2302      	movs	r3, #2
 80061bc:	e0b4      	b.n	8006328 <HAL_TIM_PWM_ConfigChannel+0x184>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2202      	movs	r2, #2
 80061ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b0c      	cmp	r3, #12
 80061d2:	f200 809f 	bhi.w	8006314 <HAL_TIM_PWM_ConfigChannel+0x170>
 80061d6:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80061d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061dc:	08006211 	.word	0x08006211
 80061e0:	08006315 	.word	0x08006315
 80061e4:	08006315 	.word	0x08006315
 80061e8:	08006315 	.word	0x08006315
 80061ec:	08006251 	.word	0x08006251
 80061f0:	08006315 	.word	0x08006315
 80061f4:	08006315 	.word	0x08006315
 80061f8:	08006315 	.word	0x08006315
 80061fc:	08006293 	.word	0x08006293
 8006200:	08006315 	.word	0x08006315
 8006204:	08006315 	.word	0x08006315
 8006208:	08006315 	.word	0x08006315
 800620c:	080062d3 	.word	0x080062d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68b9      	ldr	r1, [r7, #8]
 8006216:	4618      	mov	r0, r3
 8006218:	f000 f952 	bl	80064c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	699a      	ldr	r2, [r3, #24]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0208 	orr.w	r2, r2, #8
 800622a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699a      	ldr	r2, [r3, #24]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0204 	bic.w	r2, r2, #4
 800623a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6999      	ldr	r1, [r3, #24]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	691a      	ldr	r2, [r3, #16]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	619a      	str	r2, [r3, #24]
      break;
 800624e:	e062      	b.n	8006316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	4618      	mov	r0, r3
 8006258:	f000 f9a2 	bl	80065a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	699a      	ldr	r2, [r3, #24]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800626a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699a      	ldr	r2, [r3, #24]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800627a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6999      	ldr	r1, [r3, #24]
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	021a      	lsls	r2, r3, #8
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	619a      	str	r2, [r3, #24]
      break;
 8006290:	e041      	b.n	8006316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68b9      	ldr	r1, [r7, #8]
 8006298:	4618      	mov	r0, r3
 800629a:	f000 f9f7 	bl	800668c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	69da      	ldr	r2, [r3, #28]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f042 0208 	orr.w	r2, r2, #8
 80062ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	69da      	ldr	r2, [r3, #28]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0204 	bic.w	r2, r2, #4
 80062bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69d9      	ldr	r1, [r3, #28]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	691a      	ldr	r2, [r3, #16]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	430a      	orrs	r2, r1
 80062ce:	61da      	str	r2, [r3, #28]
      break;
 80062d0:	e021      	b.n	8006316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68b9      	ldr	r1, [r7, #8]
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 fa4b 	bl	8006774 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	69da      	ldr	r2, [r3, #28]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69da      	ldr	r2, [r3, #28]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	69d9      	ldr	r1, [r3, #28]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	021a      	lsls	r2, r3, #8
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	61da      	str	r2, [r3, #28]
      break;
 8006312:	e000      	b.n	8006316 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006314:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a40      	ldr	r2, [pc, #256]	; (8006494 <TIM_Base_SetConfig+0x114>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d013      	beq.n	80063c0 <TIM_Base_SetConfig+0x40>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800639e:	d00f      	beq.n	80063c0 <TIM_Base_SetConfig+0x40>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a3d      	ldr	r2, [pc, #244]	; (8006498 <TIM_Base_SetConfig+0x118>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d00b      	beq.n	80063c0 <TIM_Base_SetConfig+0x40>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a3c      	ldr	r2, [pc, #240]	; (800649c <TIM_Base_SetConfig+0x11c>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d007      	beq.n	80063c0 <TIM_Base_SetConfig+0x40>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a3b      	ldr	r2, [pc, #236]	; (80064a0 <TIM_Base_SetConfig+0x120>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d003      	beq.n	80063c0 <TIM_Base_SetConfig+0x40>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a3a      	ldr	r2, [pc, #232]	; (80064a4 <TIM_Base_SetConfig+0x124>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d108      	bne.n	80063d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a2f      	ldr	r2, [pc, #188]	; (8006494 <TIM_Base_SetConfig+0x114>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d02b      	beq.n	8006432 <TIM_Base_SetConfig+0xb2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e0:	d027      	beq.n	8006432 <TIM_Base_SetConfig+0xb2>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a2c      	ldr	r2, [pc, #176]	; (8006498 <TIM_Base_SetConfig+0x118>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d023      	beq.n	8006432 <TIM_Base_SetConfig+0xb2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a2b      	ldr	r2, [pc, #172]	; (800649c <TIM_Base_SetConfig+0x11c>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d01f      	beq.n	8006432 <TIM_Base_SetConfig+0xb2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a2a      	ldr	r2, [pc, #168]	; (80064a0 <TIM_Base_SetConfig+0x120>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d01b      	beq.n	8006432 <TIM_Base_SetConfig+0xb2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a29      	ldr	r2, [pc, #164]	; (80064a4 <TIM_Base_SetConfig+0x124>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d017      	beq.n	8006432 <TIM_Base_SetConfig+0xb2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a28      	ldr	r2, [pc, #160]	; (80064a8 <TIM_Base_SetConfig+0x128>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d013      	beq.n	8006432 <TIM_Base_SetConfig+0xb2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a27      	ldr	r2, [pc, #156]	; (80064ac <TIM_Base_SetConfig+0x12c>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00f      	beq.n	8006432 <TIM_Base_SetConfig+0xb2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a26      	ldr	r2, [pc, #152]	; (80064b0 <TIM_Base_SetConfig+0x130>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d00b      	beq.n	8006432 <TIM_Base_SetConfig+0xb2>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a25      	ldr	r2, [pc, #148]	; (80064b4 <TIM_Base_SetConfig+0x134>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d007      	beq.n	8006432 <TIM_Base_SetConfig+0xb2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a24      	ldr	r2, [pc, #144]	; (80064b8 <TIM_Base_SetConfig+0x138>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d003      	beq.n	8006432 <TIM_Base_SetConfig+0xb2>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a23      	ldr	r2, [pc, #140]	; (80064bc <TIM_Base_SetConfig+0x13c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d108      	bne.n	8006444 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	4313      	orrs	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	4313      	orrs	r3, r2
 8006450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	689a      	ldr	r2, [r3, #8]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a0a      	ldr	r2, [pc, #40]	; (8006494 <TIM_Base_SetConfig+0x114>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d003      	beq.n	8006478 <TIM_Base_SetConfig+0xf8>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a0c      	ldr	r2, [pc, #48]	; (80064a4 <TIM_Base_SetConfig+0x124>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d103      	bne.n	8006480 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	691a      	ldr	r2, [r3, #16]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	615a      	str	r2, [r3, #20]
}
 8006486:	bf00      	nop
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	40010000 	.word	0x40010000
 8006498:	40000400 	.word	0x40000400
 800649c:	40000800 	.word	0x40000800
 80064a0:	40000c00 	.word	0x40000c00
 80064a4:	40010400 	.word	0x40010400
 80064a8:	40014000 	.word	0x40014000
 80064ac:	40014400 	.word	0x40014400
 80064b0:	40014800 	.word	0x40014800
 80064b4:	40001800 	.word	0x40001800
 80064b8:	40001c00 	.word	0x40001c00
 80064bc:	40002000 	.word	0x40002000

080064c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	f023 0201 	bic.w	r2, r3, #1
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f023 0303 	bic.w	r3, r3, #3
 80064f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	4313      	orrs	r3, r2
 8006500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f023 0302 	bic.w	r3, r3, #2
 8006508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	4313      	orrs	r3, r2
 8006512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a20      	ldr	r2, [pc, #128]	; (8006598 <TIM_OC1_SetConfig+0xd8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d003      	beq.n	8006524 <TIM_OC1_SetConfig+0x64>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a1f      	ldr	r2, [pc, #124]	; (800659c <TIM_OC1_SetConfig+0xdc>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d10c      	bne.n	800653e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f023 0308 	bic.w	r3, r3, #8
 800652a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	4313      	orrs	r3, r2
 8006534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f023 0304 	bic.w	r3, r3, #4
 800653c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a15      	ldr	r2, [pc, #84]	; (8006598 <TIM_OC1_SetConfig+0xd8>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d003      	beq.n	800654e <TIM_OC1_SetConfig+0x8e>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a14      	ldr	r2, [pc, #80]	; (800659c <TIM_OC1_SetConfig+0xdc>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d111      	bne.n	8006572 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800655c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	4313      	orrs	r3, r2
 8006566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	4313      	orrs	r3, r2
 8006570:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	621a      	str	r2, [r3, #32]
}
 800658c:	bf00      	nop
 800658e:	371c      	adds	r7, #28
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	40010000 	.word	0x40010000
 800659c:	40010400 	.word	0x40010400

080065a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b087      	sub	sp, #28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	f023 0210 	bic.w	r2, r3, #16
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	021b      	lsls	r3, r3, #8
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f023 0320 	bic.w	r3, r3, #32
 80065ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	011b      	lsls	r3, r3, #4
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a22      	ldr	r2, [pc, #136]	; (8006684 <TIM_OC2_SetConfig+0xe4>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d003      	beq.n	8006608 <TIM_OC2_SetConfig+0x68>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a21      	ldr	r2, [pc, #132]	; (8006688 <TIM_OC2_SetConfig+0xe8>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d10d      	bne.n	8006624 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800660e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	4313      	orrs	r3, r2
 800661a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006622:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a17      	ldr	r2, [pc, #92]	; (8006684 <TIM_OC2_SetConfig+0xe4>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d003      	beq.n	8006634 <TIM_OC2_SetConfig+0x94>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a16      	ldr	r2, [pc, #88]	; (8006688 <TIM_OC2_SetConfig+0xe8>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d113      	bne.n	800665c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800663a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006642:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	4313      	orrs	r3, r2
 800664e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	4313      	orrs	r3, r2
 800665a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	621a      	str	r2, [r3, #32]
}
 8006676:	bf00      	nop
 8006678:	371c      	adds	r7, #28
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	40010000 	.word	0x40010000
 8006688:	40010400 	.word	0x40010400

0800668c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800668c:	b480      	push	{r7}
 800668e:	b087      	sub	sp, #28
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f023 0303 	bic.w	r3, r3, #3
 80066c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	021b      	lsls	r3, r3, #8
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	4313      	orrs	r3, r2
 80066e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a21      	ldr	r2, [pc, #132]	; (800676c <TIM_OC3_SetConfig+0xe0>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d003      	beq.n	80066f2 <TIM_OC3_SetConfig+0x66>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a20      	ldr	r2, [pc, #128]	; (8006770 <TIM_OC3_SetConfig+0xe4>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d10d      	bne.n	800670e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	021b      	lsls	r3, r3, #8
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	4313      	orrs	r3, r2
 8006704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800670c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a16      	ldr	r2, [pc, #88]	; (800676c <TIM_OC3_SetConfig+0xe0>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d003      	beq.n	800671e <TIM_OC3_SetConfig+0x92>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a15      	ldr	r2, [pc, #84]	; (8006770 <TIM_OC3_SetConfig+0xe4>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d113      	bne.n	8006746 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800672c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	011b      	lsls	r3, r3, #4
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	011b      	lsls	r3, r3, #4
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	621a      	str	r2, [r3, #32]
}
 8006760:	bf00      	nop
 8006762:	371c      	adds	r7, #28
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	40010000 	.word	0x40010000
 8006770:	40010400 	.word	0x40010400

08006774 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	021b      	lsls	r3, r3, #8
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	031b      	lsls	r3, r3, #12
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a12      	ldr	r2, [pc, #72]	; (8006818 <TIM_OC4_SetConfig+0xa4>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d003      	beq.n	80067dc <TIM_OC4_SetConfig+0x68>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a11      	ldr	r2, [pc, #68]	; (800681c <TIM_OC4_SetConfig+0xa8>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d109      	bne.n	80067f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	019b      	lsls	r3, r3, #6
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	621a      	str	r2, [r3, #32]
}
 800680a:	bf00      	nop
 800680c:	371c      	adds	r7, #28
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	40010000 	.word	0x40010000
 800681c:	40010400 	.word	0x40010400

08006820 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	f003 031f 	and.w	r3, r3, #31
 8006832:	2201      	movs	r2, #1
 8006834:	fa02 f303 	lsl.w	r3, r2, r3
 8006838:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6a1a      	ldr	r2, [r3, #32]
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	43db      	mvns	r3, r3
 8006842:	401a      	ands	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6a1a      	ldr	r2, [r3, #32]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f003 031f 	and.w	r3, r3, #31
 8006852:	6879      	ldr	r1, [r7, #4]
 8006854:	fa01 f303 	lsl.w	r3, r1, r3
 8006858:	431a      	orrs	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	621a      	str	r2, [r3, #32]
}
 800685e:	bf00      	nop
 8006860:	371c      	adds	r7, #28
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
	...

0800686c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800687c:	2b01      	cmp	r3, #1
 800687e:	d101      	bne.n	8006884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006880:	2302      	movs	r3, #2
 8006882:	e05a      	b.n	800693a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2202      	movs	r2, #2
 8006890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a21      	ldr	r2, [pc, #132]	; (8006948 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d022      	beq.n	800690e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d0:	d01d      	beq.n	800690e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a1d      	ldr	r2, [pc, #116]	; (800694c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d018      	beq.n	800690e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a1b      	ldr	r2, [pc, #108]	; (8006950 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d013      	beq.n	800690e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a1a      	ldr	r2, [pc, #104]	; (8006954 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d00e      	beq.n	800690e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a18      	ldr	r2, [pc, #96]	; (8006958 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d009      	beq.n	800690e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a17      	ldr	r2, [pc, #92]	; (800695c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d004      	beq.n	800690e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a15      	ldr	r2, [pc, #84]	; (8006960 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d10c      	bne.n	8006928 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006914:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	4313      	orrs	r3, r2
 800691e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	40010000 	.word	0x40010000
 800694c:	40000400 	.word	0x40000400
 8006950:	40000800 	.word	0x40000800
 8006954:	40000c00 	.word	0x40000c00
 8006958:	40010400 	.word	0x40010400
 800695c:	40014000 	.word	0x40014000
 8006960:	40001800 	.word	0x40001800

08006964 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800696e:	2300      	movs	r3, #0
 8006970:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006978:	2b01      	cmp	r3, #1
 800697a:	d101      	bne.n	8006980 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800697c:	2302      	movs	r3, #2
 800697e:	e03d      	b.n	80069fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	4313      	orrs	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4313      	orrs	r3, r2
 80069be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	4313      	orrs	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3714      	adds	r7, #20
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e03f      	b.n	8006ac2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d106      	bne.n	8006a5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7fb f834 	bl	8001ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2224      	movs	r2, #36	; 0x24
 8006a60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68da      	ldr	r2, [r3, #12]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f829 	bl	8006acc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	691a      	ldr	r2, [r3, #16]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	695a      	ldr	r2, [r3, #20]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68da      	ldr	r2, [r3, #12]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006aa8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2220      	movs	r2, #32
 8006abc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
	...

08006acc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad0:	b085      	sub	sp, #20
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	68da      	ldr	r2, [r3, #12]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689a      	ldr	r2, [r3, #8]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	431a      	orrs	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	431a      	orrs	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006b0e:	f023 030c 	bic.w	r3, r3, #12
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	6812      	ldr	r2, [r2, #0]
 8006b16:	68f9      	ldr	r1, [r7, #12]
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	699a      	ldr	r2, [r3, #24]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b3a:	f040 818b 	bne.w	8006e54 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4ac1      	ldr	r2, [pc, #772]	; (8006e48 <UART_SetConfig+0x37c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d005      	beq.n	8006b54 <UART_SetConfig+0x88>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4abf      	ldr	r2, [pc, #764]	; (8006e4c <UART_SetConfig+0x380>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	f040 80bd 	bne.w	8006cce <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b54:	f7fd fa64 	bl	8004020 <HAL_RCC_GetPCLK2Freq>
 8006b58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	461d      	mov	r5, r3
 8006b5e:	f04f 0600 	mov.w	r6, #0
 8006b62:	46a8      	mov	r8, r5
 8006b64:	46b1      	mov	r9, r6
 8006b66:	eb18 0308 	adds.w	r3, r8, r8
 8006b6a:	eb49 0409 	adc.w	r4, r9, r9
 8006b6e:	4698      	mov	r8, r3
 8006b70:	46a1      	mov	r9, r4
 8006b72:	eb18 0805 	adds.w	r8, r8, r5
 8006b76:	eb49 0906 	adc.w	r9, r9, r6
 8006b7a:	f04f 0100 	mov.w	r1, #0
 8006b7e:	f04f 0200 	mov.w	r2, #0
 8006b82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b8e:	4688      	mov	r8, r1
 8006b90:	4691      	mov	r9, r2
 8006b92:	eb18 0005 	adds.w	r0, r8, r5
 8006b96:	eb49 0106 	adc.w	r1, r9, r6
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	461d      	mov	r5, r3
 8006ba0:	f04f 0600 	mov.w	r6, #0
 8006ba4:	196b      	adds	r3, r5, r5
 8006ba6:	eb46 0406 	adc.w	r4, r6, r6
 8006baa:	461a      	mov	r2, r3
 8006bac:	4623      	mov	r3, r4
 8006bae:	f7f9 fb77 	bl	80002a0 <__aeabi_uldivmod>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	460c      	mov	r4, r1
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	4ba5      	ldr	r3, [pc, #660]	; (8006e50 <UART_SetConfig+0x384>)
 8006bba:	fba3 2302 	umull	r2, r3, r3, r2
 8006bbe:	095b      	lsrs	r3, r3, #5
 8006bc0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	461d      	mov	r5, r3
 8006bc8:	f04f 0600 	mov.w	r6, #0
 8006bcc:	46a9      	mov	r9, r5
 8006bce:	46b2      	mov	sl, r6
 8006bd0:	eb19 0309 	adds.w	r3, r9, r9
 8006bd4:	eb4a 040a 	adc.w	r4, sl, sl
 8006bd8:	4699      	mov	r9, r3
 8006bda:	46a2      	mov	sl, r4
 8006bdc:	eb19 0905 	adds.w	r9, r9, r5
 8006be0:	eb4a 0a06 	adc.w	sl, sl, r6
 8006be4:	f04f 0100 	mov.w	r1, #0
 8006be8:	f04f 0200 	mov.w	r2, #0
 8006bec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bf0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006bf4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006bf8:	4689      	mov	r9, r1
 8006bfa:	4692      	mov	sl, r2
 8006bfc:	eb19 0005 	adds.w	r0, r9, r5
 8006c00:	eb4a 0106 	adc.w	r1, sl, r6
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	461d      	mov	r5, r3
 8006c0a:	f04f 0600 	mov.w	r6, #0
 8006c0e:	196b      	adds	r3, r5, r5
 8006c10:	eb46 0406 	adc.w	r4, r6, r6
 8006c14:	461a      	mov	r2, r3
 8006c16:	4623      	mov	r3, r4
 8006c18:	f7f9 fb42 	bl	80002a0 <__aeabi_uldivmod>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	460c      	mov	r4, r1
 8006c20:	461a      	mov	r2, r3
 8006c22:	4b8b      	ldr	r3, [pc, #556]	; (8006e50 <UART_SetConfig+0x384>)
 8006c24:	fba3 1302 	umull	r1, r3, r3, r2
 8006c28:	095b      	lsrs	r3, r3, #5
 8006c2a:	2164      	movs	r1, #100	; 0x64
 8006c2c:	fb01 f303 	mul.w	r3, r1, r3
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	00db      	lsls	r3, r3, #3
 8006c34:	3332      	adds	r3, #50	; 0x32
 8006c36:	4a86      	ldr	r2, [pc, #536]	; (8006e50 <UART_SetConfig+0x384>)
 8006c38:	fba2 2303 	umull	r2, r3, r2, r3
 8006c3c:	095b      	lsrs	r3, r3, #5
 8006c3e:	005b      	lsls	r3, r3, #1
 8006c40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c44:	4498      	add	r8, r3
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	461d      	mov	r5, r3
 8006c4a:	f04f 0600 	mov.w	r6, #0
 8006c4e:	46a9      	mov	r9, r5
 8006c50:	46b2      	mov	sl, r6
 8006c52:	eb19 0309 	adds.w	r3, r9, r9
 8006c56:	eb4a 040a 	adc.w	r4, sl, sl
 8006c5a:	4699      	mov	r9, r3
 8006c5c:	46a2      	mov	sl, r4
 8006c5e:	eb19 0905 	adds.w	r9, r9, r5
 8006c62:	eb4a 0a06 	adc.w	sl, sl, r6
 8006c66:	f04f 0100 	mov.w	r1, #0
 8006c6a:	f04f 0200 	mov.w	r2, #0
 8006c6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c7a:	4689      	mov	r9, r1
 8006c7c:	4692      	mov	sl, r2
 8006c7e:	eb19 0005 	adds.w	r0, r9, r5
 8006c82:	eb4a 0106 	adc.w	r1, sl, r6
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	461d      	mov	r5, r3
 8006c8c:	f04f 0600 	mov.w	r6, #0
 8006c90:	196b      	adds	r3, r5, r5
 8006c92:	eb46 0406 	adc.w	r4, r6, r6
 8006c96:	461a      	mov	r2, r3
 8006c98:	4623      	mov	r3, r4
 8006c9a:	f7f9 fb01 	bl	80002a0 <__aeabi_uldivmod>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	460c      	mov	r4, r1
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	4b6a      	ldr	r3, [pc, #424]	; (8006e50 <UART_SetConfig+0x384>)
 8006ca6:	fba3 1302 	umull	r1, r3, r3, r2
 8006caa:	095b      	lsrs	r3, r3, #5
 8006cac:	2164      	movs	r1, #100	; 0x64
 8006cae:	fb01 f303 	mul.w	r3, r1, r3
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	00db      	lsls	r3, r3, #3
 8006cb6:	3332      	adds	r3, #50	; 0x32
 8006cb8:	4a65      	ldr	r2, [pc, #404]	; (8006e50 <UART_SetConfig+0x384>)
 8006cba:	fba2 2303 	umull	r2, r3, r2, r3
 8006cbe:	095b      	lsrs	r3, r3, #5
 8006cc0:	f003 0207 	and.w	r2, r3, #7
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4442      	add	r2, r8
 8006cca:	609a      	str	r2, [r3, #8]
 8006ccc:	e26f      	b.n	80071ae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cce:	f7fd f993 	bl	8003ff8 <HAL_RCC_GetPCLK1Freq>
 8006cd2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	461d      	mov	r5, r3
 8006cd8:	f04f 0600 	mov.w	r6, #0
 8006cdc:	46a8      	mov	r8, r5
 8006cde:	46b1      	mov	r9, r6
 8006ce0:	eb18 0308 	adds.w	r3, r8, r8
 8006ce4:	eb49 0409 	adc.w	r4, r9, r9
 8006ce8:	4698      	mov	r8, r3
 8006cea:	46a1      	mov	r9, r4
 8006cec:	eb18 0805 	adds.w	r8, r8, r5
 8006cf0:	eb49 0906 	adc.w	r9, r9, r6
 8006cf4:	f04f 0100 	mov.w	r1, #0
 8006cf8:	f04f 0200 	mov.w	r2, #0
 8006cfc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006d00:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006d04:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006d08:	4688      	mov	r8, r1
 8006d0a:	4691      	mov	r9, r2
 8006d0c:	eb18 0005 	adds.w	r0, r8, r5
 8006d10:	eb49 0106 	adc.w	r1, r9, r6
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	461d      	mov	r5, r3
 8006d1a:	f04f 0600 	mov.w	r6, #0
 8006d1e:	196b      	adds	r3, r5, r5
 8006d20:	eb46 0406 	adc.w	r4, r6, r6
 8006d24:	461a      	mov	r2, r3
 8006d26:	4623      	mov	r3, r4
 8006d28:	f7f9 faba 	bl	80002a0 <__aeabi_uldivmod>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	460c      	mov	r4, r1
 8006d30:	461a      	mov	r2, r3
 8006d32:	4b47      	ldr	r3, [pc, #284]	; (8006e50 <UART_SetConfig+0x384>)
 8006d34:	fba3 2302 	umull	r2, r3, r3, r2
 8006d38:	095b      	lsrs	r3, r3, #5
 8006d3a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	461d      	mov	r5, r3
 8006d42:	f04f 0600 	mov.w	r6, #0
 8006d46:	46a9      	mov	r9, r5
 8006d48:	46b2      	mov	sl, r6
 8006d4a:	eb19 0309 	adds.w	r3, r9, r9
 8006d4e:	eb4a 040a 	adc.w	r4, sl, sl
 8006d52:	4699      	mov	r9, r3
 8006d54:	46a2      	mov	sl, r4
 8006d56:	eb19 0905 	adds.w	r9, r9, r5
 8006d5a:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d5e:	f04f 0100 	mov.w	r1, #0
 8006d62:	f04f 0200 	mov.w	r2, #0
 8006d66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d72:	4689      	mov	r9, r1
 8006d74:	4692      	mov	sl, r2
 8006d76:	eb19 0005 	adds.w	r0, r9, r5
 8006d7a:	eb4a 0106 	adc.w	r1, sl, r6
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	461d      	mov	r5, r3
 8006d84:	f04f 0600 	mov.w	r6, #0
 8006d88:	196b      	adds	r3, r5, r5
 8006d8a:	eb46 0406 	adc.w	r4, r6, r6
 8006d8e:	461a      	mov	r2, r3
 8006d90:	4623      	mov	r3, r4
 8006d92:	f7f9 fa85 	bl	80002a0 <__aeabi_uldivmod>
 8006d96:	4603      	mov	r3, r0
 8006d98:	460c      	mov	r4, r1
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	4b2c      	ldr	r3, [pc, #176]	; (8006e50 <UART_SetConfig+0x384>)
 8006d9e:	fba3 1302 	umull	r1, r3, r3, r2
 8006da2:	095b      	lsrs	r3, r3, #5
 8006da4:	2164      	movs	r1, #100	; 0x64
 8006da6:	fb01 f303 	mul.w	r3, r1, r3
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	00db      	lsls	r3, r3, #3
 8006dae:	3332      	adds	r3, #50	; 0x32
 8006db0:	4a27      	ldr	r2, [pc, #156]	; (8006e50 <UART_SetConfig+0x384>)
 8006db2:	fba2 2303 	umull	r2, r3, r2, r3
 8006db6:	095b      	lsrs	r3, r3, #5
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006dbe:	4498      	add	r8, r3
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	461d      	mov	r5, r3
 8006dc4:	f04f 0600 	mov.w	r6, #0
 8006dc8:	46a9      	mov	r9, r5
 8006dca:	46b2      	mov	sl, r6
 8006dcc:	eb19 0309 	adds.w	r3, r9, r9
 8006dd0:	eb4a 040a 	adc.w	r4, sl, sl
 8006dd4:	4699      	mov	r9, r3
 8006dd6:	46a2      	mov	sl, r4
 8006dd8:	eb19 0905 	adds.w	r9, r9, r5
 8006ddc:	eb4a 0a06 	adc.w	sl, sl, r6
 8006de0:	f04f 0100 	mov.w	r1, #0
 8006de4:	f04f 0200 	mov.w	r2, #0
 8006de8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006df0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006df4:	4689      	mov	r9, r1
 8006df6:	4692      	mov	sl, r2
 8006df8:	eb19 0005 	adds.w	r0, r9, r5
 8006dfc:	eb4a 0106 	adc.w	r1, sl, r6
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	461d      	mov	r5, r3
 8006e06:	f04f 0600 	mov.w	r6, #0
 8006e0a:	196b      	adds	r3, r5, r5
 8006e0c:	eb46 0406 	adc.w	r4, r6, r6
 8006e10:	461a      	mov	r2, r3
 8006e12:	4623      	mov	r3, r4
 8006e14:	f7f9 fa44 	bl	80002a0 <__aeabi_uldivmod>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	460c      	mov	r4, r1
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	4b0c      	ldr	r3, [pc, #48]	; (8006e50 <UART_SetConfig+0x384>)
 8006e20:	fba3 1302 	umull	r1, r3, r3, r2
 8006e24:	095b      	lsrs	r3, r3, #5
 8006e26:	2164      	movs	r1, #100	; 0x64
 8006e28:	fb01 f303 	mul.w	r3, r1, r3
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	00db      	lsls	r3, r3, #3
 8006e30:	3332      	adds	r3, #50	; 0x32
 8006e32:	4a07      	ldr	r2, [pc, #28]	; (8006e50 <UART_SetConfig+0x384>)
 8006e34:	fba2 2303 	umull	r2, r3, r2, r3
 8006e38:	095b      	lsrs	r3, r3, #5
 8006e3a:	f003 0207 	and.w	r2, r3, #7
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4442      	add	r2, r8
 8006e44:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006e46:	e1b2      	b.n	80071ae <UART_SetConfig+0x6e2>
 8006e48:	40011000 	.word	0x40011000
 8006e4c:	40011400 	.word	0x40011400
 8006e50:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4ad7      	ldr	r2, [pc, #860]	; (80071b8 <UART_SetConfig+0x6ec>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d005      	beq.n	8006e6a <UART_SetConfig+0x39e>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4ad6      	ldr	r2, [pc, #856]	; (80071bc <UART_SetConfig+0x6f0>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	f040 80d1 	bne.w	800700c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e6a:	f7fd f8d9 	bl	8004020 <HAL_RCC_GetPCLK2Freq>
 8006e6e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	469a      	mov	sl, r3
 8006e74:	f04f 0b00 	mov.w	fp, #0
 8006e78:	46d0      	mov	r8, sl
 8006e7a:	46d9      	mov	r9, fp
 8006e7c:	eb18 0308 	adds.w	r3, r8, r8
 8006e80:	eb49 0409 	adc.w	r4, r9, r9
 8006e84:	4698      	mov	r8, r3
 8006e86:	46a1      	mov	r9, r4
 8006e88:	eb18 080a 	adds.w	r8, r8, sl
 8006e8c:	eb49 090b 	adc.w	r9, r9, fp
 8006e90:	f04f 0100 	mov.w	r1, #0
 8006e94:	f04f 0200 	mov.w	r2, #0
 8006e98:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006e9c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006ea0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006ea4:	4688      	mov	r8, r1
 8006ea6:	4691      	mov	r9, r2
 8006ea8:	eb1a 0508 	adds.w	r5, sl, r8
 8006eac:	eb4b 0609 	adc.w	r6, fp, r9
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	f04f 0200 	mov.w	r2, #0
 8006eba:	f04f 0300 	mov.w	r3, #0
 8006ebe:	f04f 0400 	mov.w	r4, #0
 8006ec2:	0094      	lsls	r4, r2, #2
 8006ec4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ec8:	008b      	lsls	r3, r1, #2
 8006eca:	461a      	mov	r2, r3
 8006ecc:	4623      	mov	r3, r4
 8006ece:	4628      	mov	r0, r5
 8006ed0:	4631      	mov	r1, r6
 8006ed2:	f7f9 f9e5 	bl	80002a0 <__aeabi_uldivmod>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	460c      	mov	r4, r1
 8006eda:	461a      	mov	r2, r3
 8006edc:	4bb8      	ldr	r3, [pc, #736]	; (80071c0 <UART_SetConfig+0x6f4>)
 8006ede:	fba3 2302 	umull	r2, r3, r3, r2
 8006ee2:	095b      	lsrs	r3, r3, #5
 8006ee4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	469b      	mov	fp, r3
 8006eec:	f04f 0c00 	mov.w	ip, #0
 8006ef0:	46d9      	mov	r9, fp
 8006ef2:	46e2      	mov	sl, ip
 8006ef4:	eb19 0309 	adds.w	r3, r9, r9
 8006ef8:	eb4a 040a 	adc.w	r4, sl, sl
 8006efc:	4699      	mov	r9, r3
 8006efe:	46a2      	mov	sl, r4
 8006f00:	eb19 090b 	adds.w	r9, r9, fp
 8006f04:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006f08:	f04f 0100 	mov.w	r1, #0
 8006f0c:	f04f 0200 	mov.w	r2, #0
 8006f10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f1c:	4689      	mov	r9, r1
 8006f1e:	4692      	mov	sl, r2
 8006f20:	eb1b 0509 	adds.w	r5, fp, r9
 8006f24:	eb4c 060a 	adc.w	r6, ip, sl
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	f04f 0200 	mov.w	r2, #0
 8006f32:	f04f 0300 	mov.w	r3, #0
 8006f36:	f04f 0400 	mov.w	r4, #0
 8006f3a:	0094      	lsls	r4, r2, #2
 8006f3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f40:	008b      	lsls	r3, r1, #2
 8006f42:	461a      	mov	r2, r3
 8006f44:	4623      	mov	r3, r4
 8006f46:	4628      	mov	r0, r5
 8006f48:	4631      	mov	r1, r6
 8006f4a:	f7f9 f9a9 	bl	80002a0 <__aeabi_uldivmod>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	460c      	mov	r4, r1
 8006f52:	461a      	mov	r2, r3
 8006f54:	4b9a      	ldr	r3, [pc, #616]	; (80071c0 <UART_SetConfig+0x6f4>)
 8006f56:	fba3 1302 	umull	r1, r3, r3, r2
 8006f5a:	095b      	lsrs	r3, r3, #5
 8006f5c:	2164      	movs	r1, #100	; 0x64
 8006f5e:	fb01 f303 	mul.w	r3, r1, r3
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	011b      	lsls	r3, r3, #4
 8006f66:	3332      	adds	r3, #50	; 0x32
 8006f68:	4a95      	ldr	r2, [pc, #596]	; (80071c0 <UART_SetConfig+0x6f4>)
 8006f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f6e:	095b      	lsrs	r3, r3, #5
 8006f70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f74:	4498      	add	r8, r3
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	469b      	mov	fp, r3
 8006f7a:	f04f 0c00 	mov.w	ip, #0
 8006f7e:	46d9      	mov	r9, fp
 8006f80:	46e2      	mov	sl, ip
 8006f82:	eb19 0309 	adds.w	r3, r9, r9
 8006f86:	eb4a 040a 	adc.w	r4, sl, sl
 8006f8a:	4699      	mov	r9, r3
 8006f8c:	46a2      	mov	sl, r4
 8006f8e:	eb19 090b 	adds.w	r9, r9, fp
 8006f92:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006f96:	f04f 0100 	mov.w	r1, #0
 8006f9a:	f04f 0200 	mov.w	r2, #0
 8006f9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fa2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006fa6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006faa:	4689      	mov	r9, r1
 8006fac:	4692      	mov	sl, r2
 8006fae:	eb1b 0509 	adds.w	r5, fp, r9
 8006fb2:	eb4c 060a 	adc.w	r6, ip, sl
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	f04f 0200 	mov.w	r2, #0
 8006fc0:	f04f 0300 	mov.w	r3, #0
 8006fc4:	f04f 0400 	mov.w	r4, #0
 8006fc8:	0094      	lsls	r4, r2, #2
 8006fca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006fce:	008b      	lsls	r3, r1, #2
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	4623      	mov	r3, r4
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	4631      	mov	r1, r6
 8006fd8:	f7f9 f962 	bl	80002a0 <__aeabi_uldivmod>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	460c      	mov	r4, r1
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	4b77      	ldr	r3, [pc, #476]	; (80071c0 <UART_SetConfig+0x6f4>)
 8006fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8006fe8:	095b      	lsrs	r3, r3, #5
 8006fea:	2164      	movs	r1, #100	; 0x64
 8006fec:	fb01 f303 	mul.w	r3, r1, r3
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	011b      	lsls	r3, r3, #4
 8006ff4:	3332      	adds	r3, #50	; 0x32
 8006ff6:	4a72      	ldr	r2, [pc, #456]	; (80071c0 <UART_SetConfig+0x6f4>)
 8006ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	f003 020f 	and.w	r2, r3, #15
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4442      	add	r2, r8
 8007008:	609a      	str	r2, [r3, #8]
 800700a:	e0d0      	b.n	80071ae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800700c:	f7fc fff4 	bl	8003ff8 <HAL_RCC_GetPCLK1Freq>
 8007010:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	469a      	mov	sl, r3
 8007016:	f04f 0b00 	mov.w	fp, #0
 800701a:	46d0      	mov	r8, sl
 800701c:	46d9      	mov	r9, fp
 800701e:	eb18 0308 	adds.w	r3, r8, r8
 8007022:	eb49 0409 	adc.w	r4, r9, r9
 8007026:	4698      	mov	r8, r3
 8007028:	46a1      	mov	r9, r4
 800702a:	eb18 080a 	adds.w	r8, r8, sl
 800702e:	eb49 090b 	adc.w	r9, r9, fp
 8007032:	f04f 0100 	mov.w	r1, #0
 8007036:	f04f 0200 	mov.w	r2, #0
 800703a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800703e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007042:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007046:	4688      	mov	r8, r1
 8007048:	4691      	mov	r9, r2
 800704a:	eb1a 0508 	adds.w	r5, sl, r8
 800704e:	eb4b 0609 	adc.w	r6, fp, r9
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	4619      	mov	r1, r3
 8007058:	f04f 0200 	mov.w	r2, #0
 800705c:	f04f 0300 	mov.w	r3, #0
 8007060:	f04f 0400 	mov.w	r4, #0
 8007064:	0094      	lsls	r4, r2, #2
 8007066:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800706a:	008b      	lsls	r3, r1, #2
 800706c:	461a      	mov	r2, r3
 800706e:	4623      	mov	r3, r4
 8007070:	4628      	mov	r0, r5
 8007072:	4631      	mov	r1, r6
 8007074:	f7f9 f914 	bl	80002a0 <__aeabi_uldivmod>
 8007078:	4603      	mov	r3, r0
 800707a:	460c      	mov	r4, r1
 800707c:	461a      	mov	r2, r3
 800707e:	4b50      	ldr	r3, [pc, #320]	; (80071c0 <UART_SetConfig+0x6f4>)
 8007080:	fba3 2302 	umull	r2, r3, r3, r2
 8007084:	095b      	lsrs	r3, r3, #5
 8007086:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	469b      	mov	fp, r3
 800708e:	f04f 0c00 	mov.w	ip, #0
 8007092:	46d9      	mov	r9, fp
 8007094:	46e2      	mov	sl, ip
 8007096:	eb19 0309 	adds.w	r3, r9, r9
 800709a:	eb4a 040a 	adc.w	r4, sl, sl
 800709e:	4699      	mov	r9, r3
 80070a0:	46a2      	mov	sl, r4
 80070a2:	eb19 090b 	adds.w	r9, r9, fp
 80070a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80070aa:	f04f 0100 	mov.w	r1, #0
 80070ae:	f04f 0200 	mov.w	r2, #0
 80070b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80070ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80070be:	4689      	mov	r9, r1
 80070c0:	4692      	mov	sl, r2
 80070c2:	eb1b 0509 	adds.w	r5, fp, r9
 80070c6:	eb4c 060a 	adc.w	r6, ip, sl
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	4619      	mov	r1, r3
 80070d0:	f04f 0200 	mov.w	r2, #0
 80070d4:	f04f 0300 	mov.w	r3, #0
 80070d8:	f04f 0400 	mov.w	r4, #0
 80070dc:	0094      	lsls	r4, r2, #2
 80070de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80070e2:	008b      	lsls	r3, r1, #2
 80070e4:	461a      	mov	r2, r3
 80070e6:	4623      	mov	r3, r4
 80070e8:	4628      	mov	r0, r5
 80070ea:	4631      	mov	r1, r6
 80070ec:	f7f9 f8d8 	bl	80002a0 <__aeabi_uldivmod>
 80070f0:	4603      	mov	r3, r0
 80070f2:	460c      	mov	r4, r1
 80070f4:	461a      	mov	r2, r3
 80070f6:	4b32      	ldr	r3, [pc, #200]	; (80071c0 <UART_SetConfig+0x6f4>)
 80070f8:	fba3 1302 	umull	r1, r3, r3, r2
 80070fc:	095b      	lsrs	r3, r3, #5
 80070fe:	2164      	movs	r1, #100	; 0x64
 8007100:	fb01 f303 	mul.w	r3, r1, r3
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	3332      	adds	r3, #50	; 0x32
 800710a:	4a2d      	ldr	r2, [pc, #180]	; (80071c0 <UART_SetConfig+0x6f4>)
 800710c:	fba2 2303 	umull	r2, r3, r2, r3
 8007110:	095b      	lsrs	r3, r3, #5
 8007112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007116:	4498      	add	r8, r3
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	469b      	mov	fp, r3
 800711c:	f04f 0c00 	mov.w	ip, #0
 8007120:	46d9      	mov	r9, fp
 8007122:	46e2      	mov	sl, ip
 8007124:	eb19 0309 	adds.w	r3, r9, r9
 8007128:	eb4a 040a 	adc.w	r4, sl, sl
 800712c:	4699      	mov	r9, r3
 800712e:	46a2      	mov	sl, r4
 8007130:	eb19 090b 	adds.w	r9, r9, fp
 8007134:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007138:	f04f 0100 	mov.w	r1, #0
 800713c:	f04f 0200 	mov.w	r2, #0
 8007140:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007144:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007148:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800714c:	4689      	mov	r9, r1
 800714e:	4692      	mov	sl, r2
 8007150:	eb1b 0509 	adds.w	r5, fp, r9
 8007154:	eb4c 060a 	adc.w	r6, ip, sl
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	4619      	mov	r1, r3
 800715e:	f04f 0200 	mov.w	r2, #0
 8007162:	f04f 0300 	mov.w	r3, #0
 8007166:	f04f 0400 	mov.w	r4, #0
 800716a:	0094      	lsls	r4, r2, #2
 800716c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007170:	008b      	lsls	r3, r1, #2
 8007172:	461a      	mov	r2, r3
 8007174:	4623      	mov	r3, r4
 8007176:	4628      	mov	r0, r5
 8007178:	4631      	mov	r1, r6
 800717a:	f7f9 f891 	bl	80002a0 <__aeabi_uldivmod>
 800717e:	4603      	mov	r3, r0
 8007180:	460c      	mov	r4, r1
 8007182:	461a      	mov	r2, r3
 8007184:	4b0e      	ldr	r3, [pc, #56]	; (80071c0 <UART_SetConfig+0x6f4>)
 8007186:	fba3 1302 	umull	r1, r3, r3, r2
 800718a:	095b      	lsrs	r3, r3, #5
 800718c:	2164      	movs	r1, #100	; 0x64
 800718e:	fb01 f303 	mul.w	r3, r1, r3
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	011b      	lsls	r3, r3, #4
 8007196:	3332      	adds	r3, #50	; 0x32
 8007198:	4a09      	ldr	r2, [pc, #36]	; (80071c0 <UART_SetConfig+0x6f4>)
 800719a:	fba2 2303 	umull	r2, r3, r2, r3
 800719e:	095b      	lsrs	r3, r3, #5
 80071a0:	f003 020f 	and.w	r2, r3, #15
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4442      	add	r2, r8
 80071aa:	609a      	str	r2, [r3, #8]
}
 80071ac:	e7ff      	b.n	80071ae <UART_SetConfig+0x6e2>
 80071ae:	bf00      	nop
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b8:	40011000 	.word	0x40011000
 80071bc:	40011400 	.word	0x40011400
 80071c0:	51eb851f 	.word	0x51eb851f

080071c4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80071c4:	b084      	sub	sp, #16
 80071c6:	b480      	push	{r7}
 80071c8:	b085      	sub	sp, #20
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
 80071ce:	f107 001c 	add.w	r0, r7, #28
 80071d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80071d6:	2300      	movs	r3, #0
 80071d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80071da:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80071dc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80071de:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80071e2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80071e6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80071e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80071ea:	431a      	orrs	r2, r3
             Init.ClockDiv
 80071ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80071ee:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80071fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	431a      	orrs	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3714      	adds	r7, #20
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	b004      	add	sp, #16
 8007218:	4770      	bx	lr

0800721a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800721a:	b480      	push	{r7}
 800721c:	b083      	sub	sp, #12
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007228:	4618      	mov	r0, r3
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007256:	b580      	push	{r7, lr}
 8007258:	b082      	sub	sp, #8
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2203      	movs	r2, #3
 8007262:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007264:	2002      	movs	r0, #2
 8007266:	f7fa fded 	bl	8001e44 <HAL_Delay>
  
  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0303 	and.w	r3, r3, #3
}
 8007284:	4618      	mov	r0, r3
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800729a:	2300      	movs	r3, #0
 800729c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80072ae:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80072b4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80072ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	4313      	orrs	r3, r2
 80072c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80072ca:	f023 030f 	bic.w	r3, r3, #15
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	431a      	orrs	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	b2db      	uxtb	r3, r3
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	370c      	adds	r7, #12
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80072fe:	b480      	push	{r7}
 8007300:	b085      	sub	sp, #20
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	3314      	adds	r3, #20
 800730c:	461a      	mov	r2, r3
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	4413      	add	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
}  
 8007318:	4618      	mov	r0, r3
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800732e:	2300      	movs	r3, #0
 8007330:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	685a      	ldr	r2, [r3, #4]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800734a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007350:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007356:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	4313      	orrs	r3, r2
 800735c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007362:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	431a      	orrs	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800736e:	2300      	movs	r3, #0

}
 8007370:	4618      	mov	r0, r3
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b088      	sub	sp, #32
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800738a:	2310      	movs	r3, #16
 800738c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800738e:	2340      	movs	r3, #64	; 0x40
 8007390:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007392:	2300      	movs	r3, #0
 8007394:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800739a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800739c:	f107 0308 	add.w	r3, r7, #8
 80073a0:	4619      	mov	r1, r3
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7ff ff74 	bl	8007290 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80073a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ac:	2110      	movs	r1, #16
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fa40 	bl	8007834 <SDMMC_GetCmdResp1>
 80073b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073b6:	69fb      	ldr	r3, [r7, #28]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3720      	adds	r7, #32
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b088      	sub	sp, #32
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80073ce:	2311      	movs	r3, #17
 80073d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80073d2:	2340      	movs	r3, #64	; 0x40
 80073d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073d6:	2300      	movs	r3, #0
 80073d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073e0:	f107 0308 	add.w	r3, r7, #8
 80073e4:	4619      	mov	r1, r3
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7ff ff52 	bl	8007290 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80073ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80073f0:	2111      	movs	r1, #17
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fa1e 	bl	8007834 <SDMMC_GetCmdResp1>
 80073f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073fa:	69fb      	ldr	r3, [r7, #28]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3720      	adds	r7, #32
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b088      	sub	sp, #32
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007412:	2312      	movs	r3, #18
 8007414:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007416:	2340      	movs	r3, #64	; 0x40
 8007418:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800741a:	2300      	movs	r3, #0
 800741c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800741e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007422:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007424:	f107 0308 	add.w	r3, r7, #8
 8007428:	4619      	mov	r1, r3
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f7ff ff30 	bl	8007290 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007430:	f241 3288 	movw	r2, #5000	; 0x1388
 8007434:	2112      	movs	r1, #18
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f9fc 	bl	8007834 <SDMMC_GetCmdResp1>
 800743c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800743e:	69fb      	ldr	r3, [r7, #28]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3720      	adds	r7, #32
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b088      	sub	sp, #32
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007456:	2318      	movs	r3, #24
 8007458:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800745a:	2340      	movs	r3, #64	; 0x40
 800745c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800745e:	2300      	movs	r3, #0
 8007460:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007466:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007468:	f107 0308 	add.w	r3, r7, #8
 800746c:	4619      	mov	r1, r3
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7ff ff0e 	bl	8007290 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007474:	f241 3288 	movw	r2, #5000	; 0x1388
 8007478:	2118      	movs	r1, #24
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f9da 	bl	8007834 <SDMMC_GetCmdResp1>
 8007480:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007482:	69fb      	ldr	r3, [r7, #28]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3720      	adds	r7, #32
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b088      	sub	sp, #32
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800749a:	2319      	movs	r3, #25
 800749c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800749e:	2340      	movs	r3, #64	; 0x40
 80074a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074a2:	2300      	movs	r3, #0
 80074a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074ac:	f107 0308 	add.w	r3, r7, #8
 80074b0:	4619      	mov	r1, r3
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7ff feec 	bl	8007290 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80074b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074bc:	2119      	movs	r1, #25
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f9b8 	bl	8007834 <SDMMC_GetCmdResp1>
 80074c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074c6:	69fb      	ldr	r3, [r7, #28]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3720      	adds	r7, #32
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b088      	sub	sp, #32
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80074d8:	2300      	movs	r3, #0
 80074da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80074dc:	230c      	movs	r3, #12
 80074de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80074e0:	2340      	movs	r3, #64	; 0x40
 80074e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074e4:	2300      	movs	r3, #0
 80074e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074ee:	f107 0308 	add.w	r3, r7, #8
 80074f2:	4619      	mov	r1, r3
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7ff fecb 	bl	8007290 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80074fa:	4a05      	ldr	r2, [pc, #20]	; (8007510 <SDMMC_CmdStopTransfer+0x40>)
 80074fc:	210c      	movs	r1, #12
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f998 	bl	8007834 <SDMMC_GetCmdResp1>
 8007504:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007506:	69fb      	ldr	r3, [r7, #28]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3720      	adds	r7, #32
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	05f5e100 	.word	0x05f5e100

08007514 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b08a      	sub	sp, #40	; 0x28
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007524:	2307      	movs	r3, #7
 8007526:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007528:	2340      	movs	r3, #64	; 0x40
 800752a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800752c:	2300      	movs	r3, #0
 800752e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007534:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007536:	f107 0310 	add.w	r3, r7, #16
 800753a:	4619      	mov	r1, r3
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f7ff fea7 	bl	8007290 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007542:	f241 3288 	movw	r2, #5000	; 0x1388
 8007546:	2107      	movs	r1, #7
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 f973 	bl	8007834 <SDMMC_GetCmdResp1>
 800754e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007552:	4618      	mov	r0, r3
 8007554:	3728      	adds	r7, #40	; 0x28
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b088      	sub	sp, #32
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007562:	2300      	movs	r3, #0
 8007564:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007566:	2300      	movs	r3, #0
 8007568:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800756a:	2300      	movs	r3, #0
 800756c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800756e:	2300      	movs	r3, #0
 8007570:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007576:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007578:	f107 0308 	add.w	r3, r7, #8
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7ff fe86 	bl	8007290 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f92d 	bl	80077e4 <SDMMC_GetCmdError>
 800758a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800758c:	69fb      	ldr	r3, [r7, #28]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3720      	adds	r7, #32
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b088      	sub	sp, #32
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800759e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80075a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80075a4:	2308      	movs	r3, #8
 80075a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80075a8:	2340      	movs	r3, #64	; 0x40
 80075aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075ac:	2300      	movs	r3, #0
 80075ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075b6:	f107 0308 	add.w	r3, r7, #8
 80075ba:	4619      	mov	r1, r3
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f7ff fe67 	bl	8007290 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fb16 	bl	8007bf4 <SDMMC_GetCmdResp7>
 80075c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075ca:	69fb      	ldr	r3, [r7, #28]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3720      	adds	r7, #32
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b088      	sub	sp, #32
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80075e2:	2337      	movs	r3, #55	; 0x37
 80075e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80075e6:	2340      	movs	r3, #64	; 0x40
 80075e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075ea:	2300      	movs	r3, #0
 80075ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075f4:	f107 0308 	add.w	r3, r7, #8
 80075f8:	4619      	mov	r1, r3
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7ff fe48 	bl	8007290 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007600:	f241 3288 	movw	r2, #5000	; 0x1388
 8007604:	2137      	movs	r1, #55	; 0x37
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f914 	bl	8007834 <SDMMC_GetCmdResp1>
 800760c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800760e:	69fb      	ldr	r3, [r7, #28]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3720      	adds	r7, #32
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b088      	sub	sp, #32
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007628:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800762c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800762e:	2329      	movs	r3, #41	; 0x29
 8007630:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007632:	2340      	movs	r3, #64	; 0x40
 8007634:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007636:	2300      	movs	r3, #0
 8007638:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800763a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800763e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007640:	f107 0308 	add.w	r3, r7, #8
 8007644:	4619      	mov	r1, r3
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7ff fe22 	bl	8007290 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fa23 	bl	8007a98 <SDMMC_GetCmdResp3>
 8007652:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007654:	69fb      	ldr	r3, [r7, #28]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3720      	adds	r7, #32
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b088      	sub	sp, #32
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800766c:	2306      	movs	r3, #6
 800766e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007670:	2340      	movs	r3, #64	; 0x40
 8007672:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007674:	2300      	movs	r3, #0
 8007676:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800767c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800767e:	f107 0308 	add.w	r3, r7, #8
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7ff fe03 	bl	8007290 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800768a:	f241 3288 	movw	r2, #5000	; 0x1388
 800768e:	2106      	movs	r1, #6
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 f8cf 	bl	8007834 <SDMMC_GetCmdResp1>
 8007696:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007698:	69fb      	ldr	r3, [r7, #28]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3720      	adds	r7, #32
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b088      	sub	sp, #32
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80076ae:	2333      	movs	r3, #51	; 0x33
 80076b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80076b2:	2340      	movs	r3, #64	; 0x40
 80076b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80076b6:	2300      	movs	r3, #0
 80076b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80076ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80076c0:	f107 0308 	add.w	r3, r7, #8
 80076c4:	4619      	mov	r1, r3
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7ff fde2 	bl	8007290 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80076cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80076d0:	2133      	movs	r1, #51	; 0x33
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f8ae 	bl	8007834 <SDMMC_GetCmdResp1>
 80076d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076da:	69fb      	ldr	r3, [r7, #28]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3720      	adds	r7, #32
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b088      	sub	sp, #32
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80076f0:	2302      	movs	r3, #2
 80076f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80076f4:	23c0      	movs	r3, #192	; 0xc0
 80076f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80076f8:	2300      	movs	r3, #0
 80076fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80076fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007700:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007702:	f107 0308 	add.w	r3, r7, #8
 8007706:	4619      	mov	r1, r3
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f7ff fdc1 	bl	8007290 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f97c 	bl	8007a0c <SDMMC_GetCmdResp2>
 8007714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007716:	69fb      	ldr	r3, [r7, #28]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3720      	adds	r7, #32
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b088      	sub	sp, #32
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800772e:	2309      	movs	r3, #9
 8007730:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007732:	23c0      	movs	r3, #192	; 0xc0
 8007734:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007736:	2300      	movs	r3, #0
 8007738:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800773a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800773e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007740:	f107 0308 	add.w	r3, r7, #8
 8007744:	4619      	mov	r1, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7ff fda2 	bl	8007290 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f95d 	bl	8007a0c <SDMMC_GetCmdResp2>
 8007752:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007754:	69fb      	ldr	r3, [r7, #28]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3720      	adds	r7, #32
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b088      	sub	sp, #32
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007768:	2300      	movs	r3, #0
 800776a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800776c:	2303      	movs	r3, #3
 800776e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007770:	2340      	movs	r3, #64	; 0x40
 8007772:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007774:	2300      	movs	r3, #0
 8007776:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800777c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800777e:	f107 0308 	add.w	r3, r7, #8
 8007782:	4619      	mov	r1, r3
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7ff fd83 	bl	8007290 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	2103      	movs	r1, #3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f9bc 	bl	8007b0c <SDMMC_GetCmdResp6>
 8007794:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007796:	69fb      	ldr	r3, [r7, #28]
}
 8007798:	4618      	mov	r0, r3
 800779a:	3720      	adds	r7, #32
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b088      	sub	sp, #32
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80077ae:	230d      	movs	r3, #13
 80077b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077b2:	2340      	movs	r3, #64	; 0x40
 80077b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077b6:	2300      	movs	r3, #0
 80077b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077c0:	f107 0308 	add.w	r3, r7, #8
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7ff fd62 	bl	8007290 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80077cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80077d0:	210d      	movs	r1, #13
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f82e 	bl	8007834 <SDMMC_GetCmdResp1>
 80077d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077da:	69fb      	ldr	r3, [r7, #28]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3720      	adds	r7, #32
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80077e4:	b490      	push	{r4, r7}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80077ec:	4b0f      	ldr	r3, [pc, #60]	; (800782c <SDMMC_GetCmdError+0x48>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a0f      	ldr	r2, [pc, #60]	; (8007830 <SDMMC_GetCmdError+0x4c>)
 80077f2:	fba2 2303 	umull	r2, r3, r2, r3
 80077f6:	0a5b      	lsrs	r3, r3, #9
 80077f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80077fc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007800:	4623      	mov	r3, r4
 8007802:	1e5c      	subs	r4, r3, #1
 8007804:	2b00      	cmp	r3, #0
 8007806:	d102      	bne.n	800780e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007808:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800780c:	e009      	b.n	8007822 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007816:	2b00      	cmp	r3, #0
 8007818:	d0f2      	beq.n	8007800 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	22c5      	movs	r2, #197	; 0xc5
 800781e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bc90      	pop	{r4, r7}
 800782a:	4770      	bx	lr
 800782c:	20000000 	.word	0x20000000
 8007830:	10624dd3 	.word	0x10624dd3

08007834 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007834:	b590      	push	{r4, r7, lr}
 8007836:	b087      	sub	sp, #28
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	460b      	mov	r3, r1
 800783e:	607a      	str	r2, [r7, #4]
 8007840:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007842:	4b6f      	ldr	r3, [pc, #444]	; (8007a00 <SDMMC_GetCmdResp1+0x1cc>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a6f      	ldr	r2, [pc, #444]	; (8007a04 <SDMMC_GetCmdResp1+0x1d0>)
 8007848:	fba2 2303 	umull	r2, r3, r2, r3
 800784c:	0a5b      	lsrs	r3, r3, #9
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007854:	4623      	mov	r3, r4
 8007856:	1e5c      	subs	r4, r3, #1
 8007858:	2b00      	cmp	r3, #0
 800785a:	d102      	bne.n	8007862 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800785c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007860:	e0c9      	b.n	80079f6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007866:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800786e:	2b00      	cmp	r3, #0
 8007870:	d0f0      	beq.n	8007854 <SDMMC_GetCmdResp1+0x20>
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1eb      	bne.n	8007854 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007880:	f003 0304 	and.w	r3, r3, #4
 8007884:	2b00      	cmp	r3, #0
 8007886:	d004      	beq.n	8007892 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2204      	movs	r2, #4
 800788c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800788e:	2304      	movs	r3, #4
 8007890:	e0b1      	b.n	80079f6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007896:	f003 0301 	and.w	r3, r3, #1
 800789a:	2b00      	cmp	r3, #0
 800789c:	d004      	beq.n	80078a8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2201      	movs	r2, #1
 80078a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e0a6      	b.n	80079f6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	22c5      	movs	r2, #197	; 0xc5
 80078ac:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f7ff fd18 	bl	80072e4 <SDIO_GetCommandResponse>
 80078b4:	4603      	mov	r3, r0
 80078b6:	461a      	mov	r2, r3
 80078b8:	7afb      	ldrb	r3, [r7, #11]
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d001      	beq.n	80078c2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078be:	2301      	movs	r3, #1
 80078c0:	e099      	b.n	80079f6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80078c2:	2100      	movs	r1, #0
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f7ff fd1a 	bl	80072fe <SDIO_GetResponse>
 80078ca:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	4b4e      	ldr	r3, [pc, #312]	; (8007a08 <SDMMC_GetCmdResp1+0x1d4>)
 80078d0:	4013      	ands	r3, r2
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80078d6:	2300      	movs	r3, #0
 80078d8:	e08d      	b.n	80079f6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	da02      	bge.n	80078e6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80078e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078e4:	e087      	b.n	80079f6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d001      	beq.n	80078f4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80078f0:	2340      	movs	r3, #64	; 0x40
 80078f2:	e080      	b.n	80079f6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d001      	beq.n	8007902 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80078fe:	2380      	movs	r3, #128	; 0x80
 8007900:	e079      	b.n	80079f6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d002      	beq.n	8007912 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800790c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007910:	e071      	b.n	80079f6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800791c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007920:	e069      	b.n	80079f6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007928:	2b00      	cmp	r3, #0
 800792a:	d002      	beq.n	8007932 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800792c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007930:	e061      	b.n	80079f6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d002      	beq.n	8007942 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800793c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007940:	e059      	b.n	80079f6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d002      	beq.n	8007952 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800794c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007950:	e051      	b.n	80079f6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d002      	beq.n	8007962 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800795c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007960:	e049      	b.n	80079f6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800796c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007970:	e041      	b.n	80079f6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800797c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007980:	e039      	b.n	80079f6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800798c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007990:	e031      	b.n	80079f6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800799c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80079a0:	e029      	b.n	80079f6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80079ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80079b0:	e021      	b.n	80079f6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d002      	beq.n	80079c2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80079bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80079c0:	e019      	b.n	80079f6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d002      	beq.n	80079d2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80079cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80079d0:	e011      	b.n	80079f6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80079dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80079e0:	e009      	b.n	80079f6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	f003 0308 	and.w	r3, r3, #8
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80079ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80079f0:	e001      	b.n	80079f6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80079f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	371c      	adds	r7, #28
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd90      	pop	{r4, r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20000000 	.word	0x20000000
 8007a04:	10624dd3 	.word	0x10624dd3
 8007a08:	fdffe008 	.word	0xfdffe008

08007a0c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007a0c:	b490      	push	{r4, r7}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a14:	4b1e      	ldr	r3, [pc, #120]	; (8007a90 <SDMMC_GetCmdResp2+0x84>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a1e      	ldr	r2, [pc, #120]	; (8007a94 <SDMMC_GetCmdResp2+0x88>)
 8007a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a1e:	0a5b      	lsrs	r3, r3, #9
 8007a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a24:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007a28:	4623      	mov	r3, r4
 8007a2a:	1e5c      	subs	r4, r3, #1
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d102      	bne.n	8007a36 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a34:	e026      	b.n	8007a84 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a3a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d0f0      	beq.n	8007a28 <SDMMC_GetCmdResp2+0x1c>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1eb      	bne.n	8007a28 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a54:	f003 0304 	and.w	r3, r3, #4
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d004      	beq.n	8007a66 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2204      	movs	r2, #4
 8007a60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a62:	2304      	movs	r3, #4
 8007a64:	e00e      	b.n	8007a84 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d004      	beq.n	8007a7c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e003      	b.n	8007a84 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	22c5      	movs	r2, #197	; 0xc5
 8007a80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bc90      	pop	{r4, r7}
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	20000000 	.word	0x20000000
 8007a94:	10624dd3 	.word	0x10624dd3

08007a98 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007a98:	b490      	push	{r4, r7}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007aa0:	4b18      	ldr	r3, [pc, #96]	; (8007b04 <SDMMC_GetCmdResp3+0x6c>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a18      	ldr	r2, [pc, #96]	; (8007b08 <SDMMC_GetCmdResp3+0x70>)
 8007aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aaa:	0a5b      	lsrs	r3, r3, #9
 8007aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ab0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007ab4:	4623      	mov	r3, r4
 8007ab6:	1e5c      	subs	r4, r3, #1
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d102      	bne.n	8007ac2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007abc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ac0:	e01b      	b.n	8007afa <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ac6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d0f0      	beq.n	8007ab4 <SDMMC_GetCmdResp3+0x1c>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1eb      	bne.n	8007ab4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae0:	f003 0304 	and.w	r3, r3, #4
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d004      	beq.n	8007af2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2204      	movs	r2, #4
 8007aec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007aee:	2304      	movs	r3, #4
 8007af0:	e003      	b.n	8007afa <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	22c5      	movs	r2, #197	; 0xc5
 8007af6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bc90      	pop	{r4, r7}
 8007b02:	4770      	bx	lr
 8007b04:	20000000 	.word	0x20000000
 8007b08:	10624dd3 	.word	0x10624dd3

08007b0c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007b0c:	b590      	push	{r4, r7, lr}
 8007b0e:	b087      	sub	sp, #28
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	460b      	mov	r3, r1
 8007b16:	607a      	str	r2, [r7, #4]
 8007b18:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b1a:	4b34      	ldr	r3, [pc, #208]	; (8007bec <SDMMC_GetCmdResp6+0xe0>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a34      	ldr	r2, [pc, #208]	; (8007bf0 <SDMMC_GetCmdResp6+0xe4>)
 8007b20:	fba2 2303 	umull	r2, r3, r2, r3
 8007b24:	0a5b      	lsrs	r3, r3, #9
 8007b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b2a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007b2e:	4623      	mov	r3, r4
 8007b30:	1e5c      	subs	r4, r3, #1
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d102      	bne.n	8007b3c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b3a:	e052      	b.n	8007be2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b40:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d0f0      	beq.n	8007b2e <SDMMC_GetCmdResp6+0x22>
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1eb      	bne.n	8007b2e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b5a:	f003 0304 	and.w	r3, r3, #4
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d004      	beq.n	8007b6c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2204      	movs	r2, #4
 8007b66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b68:	2304      	movs	r3, #4
 8007b6a:	e03a      	b.n	8007be2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b70:	f003 0301 	and.w	r3, r3, #1
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d004      	beq.n	8007b82 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e02f      	b.n	8007be2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f7ff fbae 	bl	80072e4 <SDIO_GetCommandResponse>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	7afb      	ldrb	r3, [r7, #11]
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d001      	beq.n	8007b96 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e025      	b.n	8007be2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	22c5      	movs	r2, #197	; 0xc5
 8007b9a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f7ff fbad 	bl	80072fe <SDIO_GetResponse>
 8007ba4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d106      	bne.n	8007bbe <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	0c1b      	lsrs	r3, r3, #16
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	e011      	b.n	8007be2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d002      	beq.n	8007bce <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007bcc:	e009      	b.n	8007be2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bdc:	e001      	b.n	8007be2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007bde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	371c      	adds	r7, #28
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd90      	pop	{r4, r7, pc}
 8007bea:	bf00      	nop
 8007bec:	20000000 	.word	0x20000000
 8007bf0:	10624dd3 	.word	0x10624dd3

08007bf4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007bf4:	b490      	push	{r4, r7}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007bfc:	4b21      	ldr	r3, [pc, #132]	; (8007c84 <SDMMC_GetCmdResp7+0x90>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a21      	ldr	r2, [pc, #132]	; (8007c88 <SDMMC_GetCmdResp7+0x94>)
 8007c02:	fba2 2303 	umull	r2, r3, r2, r3
 8007c06:	0a5b      	lsrs	r3, r3, #9
 8007c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c0c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007c10:	4623      	mov	r3, r4
 8007c12:	1e5c      	subs	r4, r3, #1
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d102      	bne.n	8007c1e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c1c:	e02c      	b.n	8007c78 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c22:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d0f0      	beq.n	8007c10 <SDMMC_GetCmdResp7+0x1c>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1eb      	bne.n	8007c10 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c3c:	f003 0304 	and.w	r3, r3, #4
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d004      	beq.n	8007c4e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2204      	movs	r2, #4
 8007c48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007c4a:	2304      	movs	r3, #4
 8007c4c:	e014      	b.n	8007c78 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c52:	f003 0301 	and.w	r3, r3, #1
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d004      	beq.n	8007c64 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e009      	b.n	8007c78 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d002      	beq.n	8007c76 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2240      	movs	r2, #64	; 0x40
 8007c74:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007c76:	2300      	movs	r3, #0
  
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bc90      	pop	{r4, r7}
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	20000000 	.word	0x20000000
 8007c88:	10624dd3 	.word	0x10624dd3

08007c8c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007c90:	4904      	ldr	r1, [pc, #16]	; (8007ca4 <MX_FATFS_Init+0x18>)
 8007c92:	4805      	ldr	r0, [pc, #20]	; (8007ca8 <MX_FATFS_Init+0x1c>)
 8007c94:	f000 f9e4 	bl	8008060 <FATFS_LinkDriver>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	4b03      	ldr	r3, [pc, #12]	; (8007cac <MX_FATFS_Init+0x20>)
 8007c9e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007ca0:	bf00      	nop
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	20000478 	.word	0x20000478
 8007ca8:	08009294 	.word	0x08009294
 8007cac:	20000474 	.word	0x20000474

08007cb0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007cba:	f000 f879 	bl	8007db0 <BSP_SD_IsDetected>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d001      	beq.n	8007cc8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e012      	b.n	8007cee <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007cc8:	480b      	ldr	r0, [pc, #44]	; (8007cf8 <BSP_SD_Init+0x48>)
 8007cca:	f7fc fe3d 	bl	8004948 <HAL_SD_Init>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007cd2:	79fb      	ldrb	r3, [r7, #7]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d109      	bne.n	8007cec <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007cd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007cdc:	4806      	ldr	r0, [pc, #24]	; (8007cf8 <BSP_SD_Init+0x48>)
 8007cde:	f7fd fc2b 	bl	8005538 <HAL_SD_ConfigWideBusOperation>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d001      	beq.n	8007cec <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007cec:	79fb      	ldrb	r3, [r7, #7]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	2000036c 	.word	0x2000036c

08007cfc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b088      	sub	sp, #32
 8007d00:	af02      	add	r7, sp, #8
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
 8007d08:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	68f9      	ldr	r1, [r7, #12]
 8007d18:	4806      	ldr	r0, [pc, #24]	; (8007d34 <BSP_SD_ReadBlocks+0x38>)
 8007d1a:	f7fc fea5 	bl	8004a68 <HAL_SD_ReadBlocks>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d001      	beq.n	8007d28 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3718      	adds	r7, #24
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	2000036c 	.word	0x2000036c

08007d38 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b088      	sub	sp, #32
 8007d3c:	af02      	add	r7, sp, #8
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
 8007d44:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	68f9      	ldr	r1, [r7, #12]
 8007d54:	4806      	ldr	r0, [pc, #24]	; (8007d70 <BSP_SD_WriteBlocks+0x38>)
 8007d56:	f7fd f87f 	bl	8004e58 <HAL_SD_WriteBlocks>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d001      	beq.n	8007d64 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3718      	adds	r7, #24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	2000036c 	.word	0x2000036c

08007d74 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007d78:	4805      	ldr	r0, [pc, #20]	; (8007d90 <BSP_SD_GetCardState+0x1c>)
 8007d7a:	f7fd fc59 	bl	8005630 <HAL_SD_GetCardState>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b04      	cmp	r3, #4
 8007d82:	bf14      	ite	ne
 8007d84:	2301      	movne	r3, #1
 8007d86:	2300      	moveq	r3, #0
 8007d88:	b2db      	uxtb	r3, r3
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	2000036c 	.word	0x2000036c

08007d94 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007d9c:	6879      	ldr	r1, [r7, #4]
 8007d9e:	4803      	ldr	r0, [pc, #12]	; (8007dac <BSP_SD_GetCardInfo+0x18>)
 8007da0:	f7fd fb9e 	bl	80054e0 <HAL_SD_GetCardInfo>
}
 8007da4:	bf00      	nop
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	2000036c 	.word	0x2000036c

08007db0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007db6:	2301      	movs	r3, #1
 8007db8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007dba:	f000 f80b 	bl	8007dd4 <BSP_PlatformIsDetected>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d101      	bne.n	8007dc8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007dc8:	79fb      	ldrb	r3, [r7, #7]
 8007dca:	b2db      	uxtb	r3, r3
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007dde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007de2:	4806      	ldr	r0, [pc, #24]	; (8007dfc <BSP_PlatformIsDetected+0x28>)
 8007de4:	f7fb fa7e 	bl	80032e4 <HAL_GPIO_ReadPin>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8007dee:	2300      	movs	r3, #0
 8007df0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8007df2:	79fb      	ldrb	r3, [r7, #7]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	40020000 	.word	0x40020000

08007e00 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	4603      	mov	r3, r0
 8007e08:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007e0a:	4b0b      	ldr	r3, [pc, #44]	; (8007e38 <SD_CheckStatus+0x38>)
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007e10:	f7ff ffb0 	bl	8007d74 <BSP_SD_GetCardState>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d107      	bne.n	8007e2a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007e1a:	4b07      	ldr	r3, [pc, #28]	; (8007e38 <SD_CheckStatus+0x38>)
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	f023 0301 	bic.w	r3, r3, #1
 8007e24:	b2da      	uxtb	r2, r3
 8007e26:	4b04      	ldr	r3, [pc, #16]	; (8007e38 <SD_CheckStatus+0x38>)
 8007e28:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007e2a:	4b03      	ldr	r3, [pc, #12]	; (8007e38 <SD_CheckStatus+0x38>)
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	b2db      	uxtb	r3, r3
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	20000009 	.word	0x20000009

08007e3c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	4603      	mov	r3, r0
 8007e44:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8007e46:	4b0b      	ldr	r3, [pc, #44]	; (8007e74 <SD_initialize+0x38>)
 8007e48:	2201      	movs	r2, #1
 8007e4a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007e4c:	f7ff ff30 	bl	8007cb0 <BSP_SD_Init>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d107      	bne.n	8007e66 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8007e56:	79fb      	ldrb	r3, [r7, #7]
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7ff ffd1 	bl	8007e00 <SD_CheckStatus>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	461a      	mov	r2, r3
 8007e62:	4b04      	ldr	r3, [pc, #16]	; (8007e74 <SD_initialize+0x38>)
 8007e64:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007e66:	4b03      	ldr	r3, [pc, #12]	; (8007e74 <SD_initialize+0x38>)
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	b2db      	uxtb	r3, r3
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	20000009 	.word	0x20000009

08007e78 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	4603      	mov	r3, r0
 8007e80:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007e82:	79fb      	ldrb	r3, [r7, #7]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7ff ffbb 	bl	8007e00 <SD_CheckStatus>
 8007e8a:	4603      	mov	r3, r0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60b9      	str	r1, [r7, #8]
 8007e9c:	607a      	str	r2, [r7, #4]
 8007e9e:	603b      	str	r3, [r7, #0]
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8007ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8007eac:	683a      	ldr	r2, [r7, #0]
 8007eae:	6879      	ldr	r1, [r7, #4]
 8007eb0:	68b8      	ldr	r0, [r7, #8]
 8007eb2:	f7ff ff23 	bl	8007cfc <BSP_SD_ReadBlocks>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d107      	bne.n	8007ecc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007ebc:	bf00      	nop
 8007ebe:	f7ff ff59 	bl	8007d74 <BSP_SD_GetCardState>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1fa      	bne.n	8007ebe <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3718      	adds	r7, #24
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b086      	sub	sp, #24
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
 8007ee0:	603b      	str	r3, [r7, #0]
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8007eea:	f04f 33ff 	mov.w	r3, #4294967295
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	6879      	ldr	r1, [r7, #4]
 8007ef2:	68b8      	ldr	r0, [r7, #8]
 8007ef4:	f7ff ff20 	bl	8007d38 <BSP_SD_WriteBlocks>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d107      	bne.n	8007f0e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8007efe:	bf00      	nop
 8007f00:	f7ff ff38 	bl	8007d74 <BSP_SD_GetCardState>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1fa      	bne.n	8007f00 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3718      	adds	r7, #24
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b08c      	sub	sp, #48	; 0x30
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	4603      	mov	r3, r0
 8007f20:	603a      	str	r2, [r7, #0]
 8007f22:	71fb      	strb	r3, [r7, #7]
 8007f24:	460b      	mov	r3, r1
 8007f26:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007f2e:	4b25      	ldr	r3, [pc, #148]	; (8007fc4 <SD_ioctl+0xac>)
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	f003 0301 	and.w	r3, r3, #1
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <SD_ioctl+0x28>
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e03c      	b.n	8007fba <SD_ioctl+0xa2>

  switch (cmd)
 8007f40:	79bb      	ldrb	r3, [r7, #6]
 8007f42:	2b03      	cmp	r3, #3
 8007f44:	d834      	bhi.n	8007fb0 <SD_ioctl+0x98>
 8007f46:	a201      	add	r2, pc, #4	; (adr r2, 8007f4c <SD_ioctl+0x34>)
 8007f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4c:	08007f5d 	.word	0x08007f5d
 8007f50:	08007f65 	.word	0x08007f65
 8007f54:	08007f7d 	.word	0x08007f7d
 8007f58:	08007f97 	.word	0x08007f97
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007f62:	e028      	b.n	8007fb6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007f64:	f107 030c 	add.w	r3, r7, #12
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7ff ff13 	bl	8007d94 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007f7a:	e01c      	b.n	8007fb6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007f7c:	f107 030c 	add.w	r3, r7, #12
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7ff ff07 	bl	8007d94 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007f94:	e00f      	b.n	8007fb6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007f96:	f107 030c 	add.w	r3, r7, #12
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7ff fefa 	bl	8007d94 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa2:	0a5a      	lsrs	r2, r3, #9
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007fae:	e002      	b.n	8007fb6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007fb0:	2304      	movs	r3, #4
 8007fb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007fb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3730      	adds	r7, #48	; 0x30
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	20000009 	.word	0x20000009

08007fc8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b087      	sub	sp, #28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007fde:	4b1f      	ldr	r3, [pc, #124]	; (800805c <FATFS_LinkDriverEx+0x94>)
 8007fe0:	7a5b      	ldrb	r3, [r3, #9]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d131      	bne.n	800804c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007fe8:	4b1c      	ldr	r3, [pc, #112]	; (800805c <FATFS_LinkDriverEx+0x94>)
 8007fea:	7a5b      	ldrb	r3, [r3, #9]
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	461a      	mov	r2, r3
 8007ff0:	4b1a      	ldr	r3, [pc, #104]	; (800805c <FATFS_LinkDriverEx+0x94>)
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007ff6:	4b19      	ldr	r3, [pc, #100]	; (800805c <FATFS_LinkDriverEx+0x94>)
 8007ff8:	7a5b      	ldrb	r3, [r3, #9]
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	4a17      	ldr	r2, [pc, #92]	; (800805c <FATFS_LinkDriverEx+0x94>)
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4413      	add	r3, r2
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008006:	4b15      	ldr	r3, [pc, #84]	; (800805c <FATFS_LinkDriverEx+0x94>)
 8008008:	7a5b      	ldrb	r3, [r3, #9]
 800800a:	b2db      	uxtb	r3, r3
 800800c:	461a      	mov	r2, r3
 800800e:	4b13      	ldr	r3, [pc, #76]	; (800805c <FATFS_LinkDriverEx+0x94>)
 8008010:	4413      	add	r3, r2
 8008012:	79fa      	ldrb	r2, [r7, #7]
 8008014:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008016:	4b11      	ldr	r3, [pc, #68]	; (800805c <FATFS_LinkDriverEx+0x94>)
 8008018:	7a5b      	ldrb	r3, [r3, #9]
 800801a:	b2db      	uxtb	r3, r3
 800801c:	1c5a      	adds	r2, r3, #1
 800801e:	b2d1      	uxtb	r1, r2
 8008020:	4a0e      	ldr	r2, [pc, #56]	; (800805c <FATFS_LinkDriverEx+0x94>)
 8008022:	7251      	strb	r1, [r2, #9]
 8008024:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008026:	7dbb      	ldrb	r3, [r7, #22]
 8008028:	3330      	adds	r3, #48	; 0x30
 800802a:	b2da      	uxtb	r2, r3
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	3301      	adds	r3, #1
 8008034:	223a      	movs	r2, #58	; 0x3a
 8008036:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	3302      	adds	r3, #2
 800803c:	222f      	movs	r2, #47	; 0x2f
 800803e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	3303      	adds	r3, #3
 8008044:	2200      	movs	r2, #0
 8008046:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008048:	2300      	movs	r3, #0
 800804a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800804c:	7dfb      	ldrb	r3, [r7, #23]
}
 800804e:	4618      	mov	r0, r3
 8008050:	371c      	adds	r7, #28
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	20000090 	.word	0x20000090

08008060 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800806a:	2200      	movs	r2, #0
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7ff ffaa 	bl	8007fc8 <FATFS_LinkDriverEx>
 8008074:	4603      	mov	r3, r0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
	...

08008080 <__errno>:
 8008080:	4b01      	ldr	r3, [pc, #4]	; (8008088 <__errno+0x8>)
 8008082:	6818      	ldr	r0, [r3, #0]
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	2000000c 	.word	0x2000000c

0800808c <__libc_init_array>:
 800808c:	b570      	push	{r4, r5, r6, lr}
 800808e:	4e0d      	ldr	r6, [pc, #52]	; (80080c4 <__libc_init_array+0x38>)
 8008090:	4c0d      	ldr	r4, [pc, #52]	; (80080c8 <__libc_init_array+0x3c>)
 8008092:	1ba4      	subs	r4, r4, r6
 8008094:	10a4      	asrs	r4, r4, #2
 8008096:	2500      	movs	r5, #0
 8008098:	42a5      	cmp	r5, r4
 800809a:	d109      	bne.n	80080b0 <__libc_init_array+0x24>
 800809c:	4e0b      	ldr	r6, [pc, #44]	; (80080cc <__libc_init_array+0x40>)
 800809e:	4c0c      	ldr	r4, [pc, #48]	; (80080d0 <__libc_init_array+0x44>)
 80080a0:	f001 f8c8 	bl	8009234 <_init>
 80080a4:	1ba4      	subs	r4, r4, r6
 80080a6:	10a4      	asrs	r4, r4, #2
 80080a8:	2500      	movs	r5, #0
 80080aa:	42a5      	cmp	r5, r4
 80080ac:	d105      	bne.n	80080ba <__libc_init_array+0x2e>
 80080ae:	bd70      	pop	{r4, r5, r6, pc}
 80080b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080b4:	4798      	blx	r3
 80080b6:	3501      	adds	r5, #1
 80080b8:	e7ee      	b.n	8008098 <__libc_init_array+0xc>
 80080ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080be:	4798      	blx	r3
 80080c0:	3501      	adds	r5, #1
 80080c2:	e7f2      	b.n	80080aa <__libc_init_array+0x1e>
 80080c4:	08009348 	.word	0x08009348
 80080c8:	08009348 	.word	0x08009348
 80080cc:	08009348 	.word	0x08009348
 80080d0:	0800934c 	.word	0x0800934c

080080d4 <memset>:
 80080d4:	4402      	add	r2, r0
 80080d6:	4603      	mov	r3, r0
 80080d8:	4293      	cmp	r3, r2
 80080da:	d100      	bne.n	80080de <memset+0xa>
 80080dc:	4770      	bx	lr
 80080de:	f803 1b01 	strb.w	r1, [r3], #1
 80080e2:	e7f9      	b.n	80080d8 <memset+0x4>

080080e4 <iprintf>:
 80080e4:	b40f      	push	{r0, r1, r2, r3}
 80080e6:	4b0a      	ldr	r3, [pc, #40]	; (8008110 <iprintf+0x2c>)
 80080e8:	b513      	push	{r0, r1, r4, lr}
 80080ea:	681c      	ldr	r4, [r3, #0]
 80080ec:	b124      	cbz	r4, 80080f8 <iprintf+0x14>
 80080ee:	69a3      	ldr	r3, [r4, #24]
 80080f0:	b913      	cbnz	r3, 80080f8 <iprintf+0x14>
 80080f2:	4620      	mov	r0, r4
 80080f4:	f000 f86e 	bl	80081d4 <__sinit>
 80080f8:	ab05      	add	r3, sp, #20
 80080fa:	9a04      	ldr	r2, [sp, #16]
 80080fc:	68a1      	ldr	r1, [r4, #8]
 80080fe:	9301      	str	r3, [sp, #4]
 8008100:	4620      	mov	r0, r4
 8008102:	f000 fac7 	bl	8008694 <_vfiprintf_r>
 8008106:	b002      	add	sp, #8
 8008108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800810c:	b004      	add	sp, #16
 800810e:	4770      	bx	lr
 8008110:	2000000c 	.word	0x2000000c

08008114 <_vsiprintf_r>:
 8008114:	b500      	push	{lr}
 8008116:	b09b      	sub	sp, #108	; 0x6c
 8008118:	9100      	str	r1, [sp, #0]
 800811a:	9104      	str	r1, [sp, #16]
 800811c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008120:	9105      	str	r1, [sp, #20]
 8008122:	9102      	str	r1, [sp, #8]
 8008124:	4905      	ldr	r1, [pc, #20]	; (800813c <_vsiprintf_r+0x28>)
 8008126:	9103      	str	r1, [sp, #12]
 8008128:	4669      	mov	r1, sp
 800812a:	f000 f991 	bl	8008450 <_svfiprintf_r>
 800812e:	9b00      	ldr	r3, [sp, #0]
 8008130:	2200      	movs	r2, #0
 8008132:	701a      	strb	r2, [r3, #0]
 8008134:	b01b      	add	sp, #108	; 0x6c
 8008136:	f85d fb04 	ldr.w	pc, [sp], #4
 800813a:	bf00      	nop
 800813c:	ffff0208 	.word	0xffff0208

08008140 <vsiprintf>:
 8008140:	4613      	mov	r3, r2
 8008142:	460a      	mov	r2, r1
 8008144:	4601      	mov	r1, r0
 8008146:	4802      	ldr	r0, [pc, #8]	; (8008150 <vsiprintf+0x10>)
 8008148:	6800      	ldr	r0, [r0, #0]
 800814a:	f7ff bfe3 	b.w	8008114 <_vsiprintf_r>
 800814e:	bf00      	nop
 8008150:	2000000c 	.word	0x2000000c

08008154 <std>:
 8008154:	2300      	movs	r3, #0
 8008156:	b510      	push	{r4, lr}
 8008158:	4604      	mov	r4, r0
 800815a:	e9c0 3300 	strd	r3, r3, [r0]
 800815e:	6083      	str	r3, [r0, #8]
 8008160:	8181      	strh	r1, [r0, #12]
 8008162:	6643      	str	r3, [r0, #100]	; 0x64
 8008164:	81c2      	strh	r2, [r0, #14]
 8008166:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800816a:	6183      	str	r3, [r0, #24]
 800816c:	4619      	mov	r1, r3
 800816e:	2208      	movs	r2, #8
 8008170:	305c      	adds	r0, #92	; 0x5c
 8008172:	f7ff ffaf 	bl	80080d4 <memset>
 8008176:	4b05      	ldr	r3, [pc, #20]	; (800818c <std+0x38>)
 8008178:	6263      	str	r3, [r4, #36]	; 0x24
 800817a:	4b05      	ldr	r3, [pc, #20]	; (8008190 <std+0x3c>)
 800817c:	62a3      	str	r3, [r4, #40]	; 0x28
 800817e:	4b05      	ldr	r3, [pc, #20]	; (8008194 <std+0x40>)
 8008180:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008182:	4b05      	ldr	r3, [pc, #20]	; (8008198 <std+0x44>)
 8008184:	6224      	str	r4, [r4, #32]
 8008186:	6323      	str	r3, [r4, #48]	; 0x30
 8008188:	bd10      	pop	{r4, pc}
 800818a:	bf00      	nop
 800818c:	08008bf1 	.word	0x08008bf1
 8008190:	08008c13 	.word	0x08008c13
 8008194:	08008c4b 	.word	0x08008c4b
 8008198:	08008c6f 	.word	0x08008c6f

0800819c <_cleanup_r>:
 800819c:	4901      	ldr	r1, [pc, #4]	; (80081a4 <_cleanup_r+0x8>)
 800819e:	f000 b885 	b.w	80082ac <_fwalk_reent>
 80081a2:	bf00      	nop
 80081a4:	08008f49 	.word	0x08008f49

080081a8 <__sfmoreglue>:
 80081a8:	b570      	push	{r4, r5, r6, lr}
 80081aa:	1e4a      	subs	r2, r1, #1
 80081ac:	2568      	movs	r5, #104	; 0x68
 80081ae:	4355      	muls	r5, r2
 80081b0:	460e      	mov	r6, r1
 80081b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80081b6:	f000 f897 	bl	80082e8 <_malloc_r>
 80081ba:	4604      	mov	r4, r0
 80081bc:	b140      	cbz	r0, 80081d0 <__sfmoreglue+0x28>
 80081be:	2100      	movs	r1, #0
 80081c0:	e9c0 1600 	strd	r1, r6, [r0]
 80081c4:	300c      	adds	r0, #12
 80081c6:	60a0      	str	r0, [r4, #8]
 80081c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80081cc:	f7ff ff82 	bl	80080d4 <memset>
 80081d0:	4620      	mov	r0, r4
 80081d2:	bd70      	pop	{r4, r5, r6, pc}

080081d4 <__sinit>:
 80081d4:	6983      	ldr	r3, [r0, #24]
 80081d6:	b510      	push	{r4, lr}
 80081d8:	4604      	mov	r4, r0
 80081da:	bb33      	cbnz	r3, 800822a <__sinit+0x56>
 80081dc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80081e0:	6503      	str	r3, [r0, #80]	; 0x50
 80081e2:	4b12      	ldr	r3, [pc, #72]	; (800822c <__sinit+0x58>)
 80081e4:	4a12      	ldr	r2, [pc, #72]	; (8008230 <__sinit+0x5c>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6282      	str	r2, [r0, #40]	; 0x28
 80081ea:	4298      	cmp	r0, r3
 80081ec:	bf04      	itt	eq
 80081ee:	2301      	moveq	r3, #1
 80081f0:	6183      	streq	r3, [r0, #24]
 80081f2:	f000 f81f 	bl	8008234 <__sfp>
 80081f6:	6060      	str	r0, [r4, #4]
 80081f8:	4620      	mov	r0, r4
 80081fa:	f000 f81b 	bl	8008234 <__sfp>
 80081fe:	60a0      	str	r0, [r4, #8]
 8008200:	4620      	mov	r0, r4
 8008202:	f000 f817 	bl	8008234 <__sfp>
 8008206:	2200      	movs	r2, #0
 8008208:	60e0      	str	r0, [r4, #12]
 800820a:	2104      	movs	r1, #4
 800820c:	6860      	ldr	r0, [r4, #4]
 800820e:	f7ff ffa1 	bl	8008154 <std>
 8008212:	2201      	movs	r2, #1
 8008214:	2109      	movs	r1, #9
 8008216:	68a0      	ldr	r0, [r4, #8]
 8008218:	f7ff ff9c 	bl	8008154 <std>
 800821c:	2202      	movs	r2, #2
 800821e:	2112      	movs	r1, #18
 8008220:	68e0      	ldr	r0, [r4, #12]
 8008222:	f7ff ff97 	bl	8008154 <std>
 8008226:	2301      	movs	r3, #1
 8008228:	61a3      	str	r3, [r4, #24]
 800822a:	bd10      	pop	{r4, pc}
 800822c:	080092a8 	.word	0x080092a8
 8008230:	0800819d 	.word	0x0800819d

08008234 <__sfp>:
 8008234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008236:	4b1b      	ldr	r3, [pc, #108]	; (80082a4 <__sfp+0x70>)
 8008238:	681e      	ldr	r6, [r3, #0]
 800823a:	69b3      	ldr	r3, [r6, #24]
 800823c:	4607      	mov	r7, r0
 800823e:	b913      	cbnz	r3, 8008246 <__sfp+0x12>
 8008240:	4630      	mov	r0, r6
 8008242:	f7ff ffc7 	bl	80081d4 <__sinit>
 8008246:	3648      	adds	r6, #72	; 0x48
 8008248:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800824c:	3b01      	subs	r3, #1
 800824e:	d503      	bpl.n	8008258 <__sfp+0x24>
 8008250:	6833      	ldr	r3, [r6, #0]
 8008252:	b133      	cbz	r3, 8008262 <__sfp+0x2e>
 8008254:	6836      	ldr	r6, [r6, #0]
 8008256:	e7f7      	b.n	8008248 <__sfp+0x14>
 8008258:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800825c:	b16d      	cbz	r5, 800827a <__sfp+0x46>
 800825e:	3468      	adds	r4, #104	; 0x68
 8008260:	e7f4      	b.n	800824c <__sfp+0x18>
 8008262:	2104      	movs	r1, #4
 8008264:	4638      	mov	r0, r7
 8008266:	f7ff ff9f 	bl	80081a8 <__sfmoreglue>
 800826a:	6030      	str	r0, [r6, #0]
 800826c:	2800      	cmp	r0, #0
 800826e:	d1f1      	bne.n	8008254 <__sfp+0x20>
 8008270:	230c      	movs	r3, #12
 8008272:	603b      	str	r3, [r7, #0]
 8008274:	4604      	mov	r4, r0
 8008276:	4620      	mov	r0, r4
 8008278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800827a:	4b0b      	ldr	r3, [pc, #44]	; (80082a8 <__sfp+0x74>)
 800827c:	6665      	str	r5, [r4, #100]	; 0x64
 800827e:	e9c4 5500 	strd	r5, r5, [r4]
 8008282:	60a5      	str	r5, [r4, #8]
 8008284:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008288:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800828c:	2208      	movs	r2, #8
 800828e:	4629      	mov	r1, r5
 8008290:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008294:	f7ff ff1e 	bl	80080d4 <memset>
 8008298:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800829c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80082a0:	e7e9      	b.n	8008276 <__sfp+0x42>
 80082a2:	bf00      	nop
 80082a4:	080092a8 	.word	0x080092a8
 80082a8:	ffff0001 	.word	0xffff0001

080082ac <_fwalk_reent>:
 80082ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082b0:	4680      	mov	r8, r0
 80082b2:	4689      	mov	r9, r1
 80082b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80082b8:	2600      	movs	r6, #0
 80082ba:	b914      	cbnz	r4, 80082c2 <_fwalk_reent+0x16>
 80082bc:	4630      	mov	r0, r6
 80082be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082c2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80082c6:	3f01      	subs	r7, #1
 80082c8:	d501      	bpl.n	80082ce <_fwalk_reent+0x22>
 80082ca:	6824      	ldr	r4, [r4, #0]
 80082cc:	e7f5      	b.n	80082ba <_fwalk_reent+0xe>
 80082ce:	89ab      	ldrh	r3, [r5, #12]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d907      	bls.n	80082e4 <_fwalk_reent+0x38>
 80082d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082d8:	3301      	adds	r3, #1
 80082da:	d003      	beq.n	80082e4 <_fwalk_reent+0x38>
 80082dc:	4629      	mov	r1, r5
 80082de:	4640      	mov	r0, r8
 80082e0:	47c8      	blx	r9
 80082e2:	4306      	orrs	r6, r0
 80082e4:	3568      	adds	r5, #104	; 0x68
 80082e6:	e7ee      	b.n	80082c6 <_fwalk_reent+0x1a>

080082e8 <_malloc_r>:
 80082e8:	b570      	push	{r4, r5, r6, lr}
 80082ea:	1ccd      	adds	r5, r1, #3
 80082ec:	f025 0503 	bic.w	r5, r5, #3
 80082f0:	3508      	adds	r5, #8
 80082f2:	2d0c      	cmp	r5, #12
 80082f4:	bf38      	it	cc
 80082f6:	250c      	movcc	r5, #12
 80082f8:	2d00      	cmp	r5, #0
 80082fa:	4606      	mov	r6, r0
 80082fc:	db01      	blt.n	8008302 <_malloc_r+0x1a>
 80082fe:	42a9      	cmp	r1, r5
 8008300:	d903      	bls.n	800830a <_malloc_r+0x22>
 8008302:	230c      	movs	r3, #12
 8008304:	6033      	str	r3, [r6, #0]
 8008306:	2000      	movs	r0, #0
 8008308:	bd70      	pop	{r4, r5, r6, pc}
 800830a:	f000 fee1 	bl	80090d0 <__malloc_lock>
 800830e:	4a21      	ldr	r2, [pc, #132]	; (8008394 <_malloc_r+0xac>)
 8008310:	6814      	ldr	r4, [r2, #0]
 8008312:	4621      	mov	r1, r4
 8008314:	b991      	cbnz	r1, 800833c <_malloc_r+0x54>
 8008316:	4c20      	ldr	r4, [pc, #128]	; (8008398 <_malloc_r+0xb0>)
 8008318:	6823      	ldr	r3, [r4, #0]
 800831a:	b91b      	cbnz	r3, 8008324 <_malloc_r+0x3c>
 800831c:	4630      	mov	r0, r6
 800831e:	f000 fc57 	bl	8008bd0 <_sbrk_r>
 8008322:	6020      	str	r0, [r4, #0]
 8008324:	4629      	mov	r1, r5
 8008326:	4630      	mov	r0, r6
 8008328:	f000 fc52 	bl	8008bd0 <_sbrk_r>
 800832c:	1c43      	adds	r3, r0, #1
 800832e:	d124      	bne.n	800837a <_malloc_r+0x92>
 8008330:	230c      	movs	r3, #12
 8008332:	6033      	str	r3, [r6, #0]
 8008334:	4630      	mov	r0, r6
 8008336:	f000 fecc 	bl	80090d2 <__malloc_unlock>
 800833a:	e7e4      	b.n	8008306 <_malloc_r+0x1e>
 800833c:	680b      	ldr	r3, [r1, #0]
 800833e:	1b5b      	subs	r3, r3, r5
 8008340:	d418      	bmi.n	8008374 <_malloc_r+0x8c>
 8008342:	2b0b      	cmp	r3, #11
 8008344:	d90f      	bls.n	8008366 <_malloc_r+0x7e>
 8008346:	600b      	str	r3, [r1, #0]
 8008348:	50cd      	str	r5, [r1, r3]
 800834a:	18cc      	adds	r4, r1, r3
 800834c:	4630      	mov	r0, r6
 800834e:	f000 fec0 	bl	80090d2 <__malloc_unlock>
 8008352:	f104 000b 	add.w	r0, r4, #11
 8008356:	1d23      	adds	r3, r4, #4
 8008358:	f020 0007 	bic.w	r0, r0, #7
 800835c:	1ac3      	subs	r3, r0, r3
 800835e:	d0d3      	beq.n	8008308 <_malloc_r+0x20>
 8008360:	425a      	negs	r2, r3
 8008362:	50e2      	str	r2, [r4, r3]
 8008364:	e7d0      	b.n	8008308 <_malloc_r+0x20>
 8008366:	428c      	cmp	r4, r1
 8008368:	684b      	ldr	r3, [r1, #4]
 800836a:	bf16      	itet	ne
 800836c:	6063      	strne	r3, [r4, #4]
 800836e:	6013      	streq	r3, [r2, #0]
 8008370:	460c      	movne	r4, r1
 8008372:	e7eb      	b.n	800834c <_malloc_r+0x64>
 8008374:	460c      	mov	r4, r1
 8008376:	6849      	ldr	r1, [r1, #4]
 8008378:	e7cc      	b.n	8008314 <_malloc_r+0x2c>
 800837a:	1cc4      	adds	r4, r0, #3
 800837c:	f024 0403 	bic.w	r4, r4, #3
 8008380:	42a0      	cmp	r0, r4
 8008382:	d005      	beq.n	8008390 <_malloc_r+0xa8>
 8008384:	1a21      	subs	r1, r4, r0
 8008386:	4630      	mov	r0, r6
 8008388:	f000 fc22 	bl	8008bd0 <_sbrk_r>
 800838c:	3001      	adds	r0, #1
 800838e:	d0cf      	beq.n	8008330 <_malloc_r+0x48>
 8008390:	6025      	str	r5, [r4, #0]
 8008392:	e7db      	b.n	800834c <_malloc_r+0x64>
 8008394:	2000009c 	.word	0x2000009c
 8008398:	200000a0 	.word	0x200000a0

0800839c <__ssputs_r>:
 800839c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083a0:	688e      	ldr	r6, [r1, #8]
 80083a2:	429e      	cmp	r6, r3
 80083a4:	4682      	mov	sl, r0
 80083a6:	460c      	mov	r4, r1
 80083a8:	4690      	mov	r8, r2
 80083aa:	4699      	mov	r9, r3
 80083ac:	d837      	bhi.n	800841e <__ssputs_r+0x82>
 80083ae:	898a      	ldrh	r2, [r1, #12]
 80083b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083b4:	d031      	beq.n	800841a <__ssputs_r+0x7e>
 80083b6:	6825      	ldr	r5, [r4, #0]
 80083b8:	6909      	ldr	r1, [r1, #16]
 80083ba:	1a6f      	subs	r7, r5, r1
 80083bc:	6965      	ldr	r5, [r4, #20]
 80083be:	2302      	movs	r3, #2
 80083c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083c4:	fb95 f5f3 	sdiv	r5, r5, r3
 80083c8:	f109 0301 	add.w	r3, r9, #1
 80083cc:	443b      	add	r3, r7
 80083ce:	429d      	cmp	r5, r3
 80083d0:	bf38      	it	cc
 80083d2:	461d      	movcc	r5, r3
 80083d4:	0553      	lsls	r3, r2, #21
 80083d6:	d530      	bpl.n	800843a <__ssputs_r+0x9e>
 80083d8:	4629      	mov	r1, r5
 80083da:	f7ff ff85 	bl	80082e8 <_malloc_r>
 80083de:	4606      	mov	r6, r0
 80083e0:	b950      	cbnz	r0, 80083f8 <__ssputs_r+0x5c>
 80083e2:	230c      	movs	r3, #12
 80083e4:	f8ca 3000 	str.w	r3, [sl]
 80083e8:	89a3      	ldrh	r3, [r4, #12]
 80083ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ee:	81a3      	strh	r3, [r4, #12]
 80083f0:	f04f 30ff 	mov.w	r0, #4294967295
 80083f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083f8:	463a      	mov	r2, r7
 80083fa:	6921      	ldr	r1, [r4, #16]
 80083fc:	f000 fe44 	bl	8009088 <memcpy>
 8008400:	89a3      	ldrh	r3, [r4, #12]
 8008402:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800840a:	81a3      	strh	r3, [r4, #12]
 800840c:	6126      	str	r6, [r4, #16]
 800840e:	6165      	str	r5, [r4, #20]
 8008410:	443e      	add	r6, r7
 8008412:	1bed      	subs	r5, r5, r7
 8008414:	6026      	str	r6, [r4, #0]
 8008416:	60a5      	str	r5, [r4, #8]
 8008418:	464e      	mov	r6, r9
 800841a:	454e      	cmp	r6, r9
 800841c:	d900      	bls.n	8008420 <__ssputs_r+0x84>
 800841e:	464e      	mov	r6, r9
 8008420:	4632      	mov	r2, r6
 8008422:	4641      	mov	r1, r8
 8008424:	6820      	ldr	r0, [r4, #0]
 8008426:	f000 fe3a 	bl	800909e <memmove>
 800842a:	68a3      	ldr	r3, [r4, #8]
 800842c:	1b9b      	subs	r3, r3, r6
 800842e:	60a3      	str	r3, [r4, #8]
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	441e      	add	r6, r3
 8008434:	6026      	str	r6, [r4, #0]
 8008436:	2000      	movs	r0, #0
 8008438:	e7dc      	b.n	80083f4 <__ssputs_r+0x58>
 800843a:	462a      	mov	r2, r5
 800843c:	f000 fe98 	bl	8009170 <_realloc_r>
 8008440:	4606      	mov	r6, r0
 8008442:	2800      	cmp	r0, #0
 8008444:	d1e2      	bne.n	800840c <__ssputs_r+0x70>
 8008446:	6921      	ldr	r1, [r4, #16]
 8008448:	4650      	mov	r0, sl
 800844a:	f000 fe43 	bl	80090d4 <_free_r>
 800844e:	e7c8      	b.n	80083e2 <__ssputs_r+0x46>

08008450 <_svfiprintf_r>:
 8008450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008454:	461d      	mov	r5, r3
 8008456:	898b      	ldrh	r3, [r1, #12]
 8008458:	061f      	lsls	r7, r3, #24
 800845a:	b09d      	sub	sp, #116	; 0x74
 800845c:	4680      	mov	r8, r0
 800845e:	460c      	mov	r4, r1
 8008460:	4616      	mov	r6, r2
 8008462:	d50f      	bpl.n	8008484 <_svfiprintf_r+0x34>
 8008464:	690b      	ldr	r3, [r1, #16]
 8008466:	b96b      	cbnz	r3, 8008484 <_svfiprintf_r+0x34>
 8008468:	2140      	movs	r1, #64	; 0x40
 800846a:	f7ff ff3d 	bl	80082e8 <_malloc_r>
 800846e:	6020      	str	r0, [r4, #0]
 8008470:	6120      	str	r0, [r4, #16]
 8008472:	b928      	cbnz	r0, 8008480 <_svfiprintf_r+0x30>
 8008474:	230c      	movs	r3, #12
 8008476:	f8c8 3000 	str.w	r3, [r8]
 800847a:	f04f 30ff 	mov.w	r0, #4294967295
 800847e:	e0c8      	b.n	8008612 <_svfiprintf_r+0x1c2>
 8008480:	2340      	movs	r3, #64	; 0x40
 8008482:	6163      	str	r3, [r4, #20]
 8008484:	2300      	movs	r3, #0
 8008486:	9309      	str	r3, [sp, #36]	; 0x24
 8008488:	2320      	movs	r3, #32
 800848a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800848e:	2330      	movs	r3, #48	; 0x30
 8008490:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008494:	9503      	str	r5, [sp, #12]
 8008496:	f04f 0b01 	mov.w	fp, #1
 800849a:	4637      	mov	r7, r6
 800849c:	463d      	mov	r5, r7
 800849e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80084a2:	b10b      	cbz	r3, 80084a8 <_svfiprintf_r+0x58>
 80084a4:	2b25      	cmp	r3, #37	; 0x25
 80084a6:	d13e      	bne.n	8008526 <_svfiprintf_r+0xd6>
 80084a8:	ebb7 0a06 	subs.w	sl, r7, r6
 80084ac:	d00b      	beq.n	80084c6 <_svfiprintf_r+0x76>
 80084ae:	4653      	mov	r3, sl
 80084b0:	4632      	mov	r2, r6
 80084b2:	4621      	mov	r1, r4
 80084b4:	4640      	mov	r0, r8
 80084b6:	f7ff ff71 	bl	800839c <__ssputs_r>
 80084ba:	3001      	adds	r0, #1
 80084bc:	f000 80a4 	beq.w	8008608 <_svfiprintf_r+0x1b8>
 80084c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c2:	4453      	add	r3, sl
 80084c4:	9309      	str	r3, [sp, #36]	; 0x24
 80084c6:	783b      	ldrb	r3, [r7, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f000 809d 	beq.w	8008608 <_svfiprintf_r+0x1b8>
 80084ce:	2300      	movs	r3, #0
 80084d0:	f04f 32ff 	mov.w	r2, #4294967295
 80084d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084d8:	9304      	str	r3, [sp, #16]
 80084da:	9307      	str	r3, [sp, #28]
 80084dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084e0:	931a      	str	r3, [sp, #104]	; 0x68
 80084e2:	462f      	mov	r7, r5
 80084e4:	2205      	movs	r2, #5
 80084e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80084ea:	4850      	ldr	r0, [pc, #320]	; (800862c <_svfiprintf_r+0x1dc>)
 80084ec:	f7f7 fe88 	bl	8000200 <memchr>
 80084f0:	9b04      	ldr	r3, [sp, #16]
 80084f2:	b9d0      	cbnz	r0, 800852a <_svfiprintf_r+0xda>
 80084f4:	06d9      	lsls	r1, r3, #27
 80084f6:	bf44      	itt	mi
 80084f8:	2220      	movmi	r2, #32
 80084fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80084fe:	071a      	lsls	r2, r3, #28
 8008500:	bf44      	itt	mi
 8008502:	222b      	movmi	r2, #43	; 0x2b
 8008504:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008508:	782a      	ldrb	r2, [r5, #0]
 800850a:	2a2a      	cmp	r2, #42	; 0x2a
 800850c:	d015      	beq.n	800853a <_svfiprintf_r+0xea>
 800850e:	9a07      	ldr	r2, [sp, #28]
 8008510:	462f      	mov	r7, r5
 8008512:	2000      	movs	r0, #0
 8008514:	250a      	movs	r5, #10
 8008516:	4639      	mov	r1, r7
 8008518:	f811 3b01 	ldrb.w	r3, [r1], #1
 800851c:	3b30      	subs	r3, #48	; 0x30
 800851e:	2b09      	cmp	r3, #9
 8008520:	d94d      	bls.n	80085be <_svfiprintf_r+0x16e>
 8008522:	b1b8      	cbz	r0, 8008554 <_svfiprintf_r+0x104>
 8008524:	e00f      	b.n	8008546 <_svfiprintf_r+0xf6>
 8008526:	462f      	mov	r7, r5
 8008528:	e7b8      	b.n	800849c <_svfiprintf_r+0x4c>
 800852a:	4a40      	ldr	r2, [pc, #256]	; (800862c <_svfiprintf_r+0x1dc>)
 800852c:	1a80      	subs	r0, r0, r2
 800852e:	fa0b f000 	lsl.w	r0, fp, r0
 8008532:	4318      	orrs	r0, r3
 8008534:	9004      	str	r0, [sp, #16]
 8008536:	463d      	mov	r5, r7
 8008538:	e7d3      	b.n	80084e2 <_svfiprintf_r+0x92>
 800853a:	9a03      	ldr	r2, [sp, #12]
 800853c:	1d11      	adds	r1, r2, #4
 800853e:	6812      	ldr	r2, [r2, #0]
 8008540:	9103      	str	r1, [sp, #12]
 8008542:	2a00      	cmp	r2, #0
 8008544:	db01      	blt.n	800854a <_svfiprintf_r+0xfa>
 8008546:	9207      	str	r2, [sp, #28]
 8008548:	e004      	b.n	8008554 <_svfiprintf_r+0x104>
 800854a:	4252      	negs	r2, r2
 800854c:	f043 0302 	orr.w	r3, r3, #2
 8008550:	9207      	str	r2, [sp, #28]
 8008552:	9304      	str	r3, [sp, #16]
 8008554:	783b      	ldrb	r3, [r7, #0]
 8008556:	2b2e      	cmp	r3, #46	; 0x2e
 8008558:	d10c      	bne.n	8008574 <_svfiprintf_r+0x124>
 800855a:	787b      	ldrb	r3, [r7, #1]
 800855c:	2b2a      	cmp	r3, #42	; 0x2a
 800855e:	d133      	bne.n	80085c8 <_svfiprintf_r+0x178>
 8008560:	9b03      	ldr	r3, [sp, #12]
 8008562:	1d1a      	adds	r2, r3, #4
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	9203      	str	r2, [sp, #12]
 8008568:	2b00      	cmp	r3, #0
 800856a:	bfb8      	it	lt
 800856c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008570:	3702      	adds	r7, #2
 8008572:	9305      	str	r3, [sp, #20]
 8008574:	4d2e      	ldr	r5, [pc, #184]	; (8008630 <_svfiprintf_r+0x1e0>)
 8008576:	7839      	ldrb	r1, [r7, #0]
 8008578:	2203      	movs	r2, #3
 800857a:	4628      	mov	r0, r5
 800857c:	f7f7 fe40 	bl	8000200 <memchr>
 8008580:	b138      	cbz	r0, 8008592 <_svfiprintf_r+0x142>
 8008582:	2340      	movs	r3, #64	; 0x40
 8008584:	1b40      	subs	r0, r0, r5
 8008586:	fa03 f000 	lsl.w	r0, r3, r0
 800858a:	9b04      	ldr	r3, [sp, #16]
 800858c:	4303      	orrs	r3, r0
 800858e:	3701      	adds	r7, #1
 8008590:	9304      	str	r3, [sp, #16]
 8008592:	7839      	ldrb	r1, [r7, #0]
 8008594:	4827      	ldr	r0, [pc, #156]	; (8008634 <_svfiprintf_r+0x1e4>)
 8008596:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800859a:	2206      	movs	r2, #6
 800859c:	1c7e      	adds	r6, r7, #1
 800859e:	f7f7 fe2f 	bl	8000200 <memchr>
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d038      	beq.n	8008618 <_svfiprintf_r+0x1c8>
 80085a6:	4b24      	ldr	r3, [pc, #144]	; (8008638 <_svfiprintf_r+0x1e8>)
 80085a8:	bb13      	cbnz	r3, 80085f0 <_svfiprintf_r+0x1a0>
 80085aa:	9b03      	ldr	r3, [sp, #12]
 80085ac:	3307      	adds	r3, #7
 80085ae:	f023 0307 	bic.w	r3, r3, #7
 80085b2:	3308      	adds	r3, #8
 80085b4:	9303      	str	r3, [sp, #12]
 80085b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b8:	444b      	add	r3, r9
 80085ba:	9309      	str	r3, [sp, #36]	; 0x24
 80085bc:	e76d      	b.n	800849a <_svfiprintf_r+0x4a>
 80085be:	fb05 3202 	mla	r2, r5, r2, r3
 80085c2:	2001      	movs	r0, #1
 80085c4:	460f      	mov	r7, r1
 80085c6:	e7a6      	b.n	8008516 <_svfiprintf_r+0xc6>
 80085c8:	2300      	movs	r3, #0
 80085ca:	3701      	adds	r7, #1
 80085cc:	9305      	str	r3, [sp, #20]
 80085ce:	4619      	mov	r1, r3
 80085d0:	250a      	movs	r5, #10
 80085d2:	4638      	mov	r0, r7
 80085d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085d8:	3a30      	subs	r2, #48	; 0x30
 80085da:	2a09      	cmp	r2, #9
 80085dc:	d903      	bls.n	80085e6 <_svfiprintf_r+0x196>
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d0c8      	beq.n	8008574 <_svfiprintf_r+0x124>
 80085e2:	9105      	str	r1, [sp, #20]
 80085e4:	e7c6      	b.n	8008574 <_svfiprintf_r+0x124>
 80085e6:	fb05 2101 	mla	r1, r5, r1, r2
 80085ea:	2301      	movs	r3, #1
 80085ec:	4607      	mov	r7, r0
 80085ee:	e7f0      	b.n	80085d2 <_svfiprintf_r+0x182>
 80085f0:	ab03      	add	r3, sp, #12
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	4622      	mov	r2, r4
 80085f6:	4b11      	ldr	r3, [pc, #68]	; (800863c <_svfiprintf_r+0x1ec>)
 80085f8:	a904      	add	r1, sp, #16
 80085fa:	4640      	mov	r0, r8
 80085fc:	f3af 8000 	nop.w
 8008600:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008604:	4681      	mov	r9, r0
 8008606:	d1d6      	bne.n	80085b6 <_svfiprintf_r+0x166>
 8008608:	89a3      	ldrh	r3, [r4, #12]
 800860a:	065b      	lsls	r3, r3, #25
 800860c:	f53f af35 	bmi.w	800847a <_svfiprintf_r+0x2a>
 8008610:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008612:	b01d      	add	sp, #116	; 0x74
 8008614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008618:	ab03      	add	r3, sp, #12
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	4622      	mov	r2, r4
 800861e:	4b07      	ldr	r3, [pc, #28]	; (800863c <_svfiprintf_r+0x1ec>)
 8008620:	a904      	add	r1, sp, #16
 8008622:	4640      	mov	r0, r8
 8008624:	f000 f9c2 	bl	80089ac <_printf_i>
 8008628:	e7ea      	b.n	8008600 <_svfiprintf_r+0x1b0>
 800862a:	bf00      	nop
 800862c:	0800930c 	.word	0x0800930c
 8008630:	08009312 	.word	0x08009312
 8008634:	08009316 	.word	0x08009316
 8008638:	00000000 	.word	0x00000000
 800863c:	0800839d 	.word	0x0800839d

08008640 <__sfputc_r>:
 8008640:	6893      	ldr	r3, [r2, #8]
 8008642:	3b01      	subs	r3, #1
 8008644:	2b00      	cmp	r3, #0
 8008646:	b410      	push	{r4}
 8008648:	6093      	str	r3, [r2, #8]
 800864a:	da08      	bge.n	800865e <__sfputc_r+0x1e>
 800864c:	6994      	ldr	r4, [r2, #24]
 800864e:	42a3      	cmp	r3, r4
 8008650:	db01      	blt.n	8008656 <__sfputc_r+0x16>
 8008652:	290a      	cmp	r1, #10
 8008654:	d103      	bne.n	800865e <__sfputc_r+0x1e>
 8008656:	f85d 4b04 	ldr.w	r4, [sp], #4
 800865a:	f000 bb0d 	b.w	8008c78 <__swbuf_r>
 800865e:	6813      	ldr	r3, [r2, #0]
 8008660:	1c58      	adds	r0, r3, #1
 8008662:	6010      	str	r0, [r2, #0]
 8008664:	7019      	strb	r1, [r3, #0]
 8008666:	4608      	mov	r0, r1
 8008668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800866c:	4770      	bx	lr

0800866e <__sfputs_r>:
 800866e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008670:	4606      	mov	r6, r0
 8008672:	460f      	mov	r7, r1
 8008674:	4614      	mov	r4, r2
 8008676:	18d5      	adds	r5, r2, r3
 8008678:	42ac      	cmp	r4, r5
 800867a:	d101      	bne.n	8008680 <__sfputs_r+0x12>
 800867c:	2000      	movs	r0, #0
 800867e:	e007      	b.n	8008690 <__sfputs_r+0x22>
 8008680:	463a      	mov	r2, r7
 8008682:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008686:	4630      	mov	r0, r6
 8008688:	f7ff ffda 	bl	8008640 <__sfputc_r>
 800868c:	1c43      	adds	r3, r0, #1
 800868e:	d1f3      	bne.n	8008678 <__sfputs_r+0xa>
 8008690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008694 <_vfiprintf_r>:
 8008694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008698:	460c      	mov	r4, r1
 800869a:	b09d      	sub	sp, #116	; 0x74
 800869c:	4617      	mov	r7, r2
 800869e:	461d      	mov	r5, r3
 80086a0:	4606      	mov	r6, r0
 80086a2:	b118      	cbz	r0, 80086ac <_vfiprintf_r+0x18>
 80086a4:	6983      	ldr	r3, [r0, #24]
 80086a6:	b90b      	cbnz	r3, 80086ac <_vfiprintf_r+0x18>
 80086a8:	f7ff fd94 	bl	80081d4 <__sinit>
 80086ac:	4b7c      	ldr	r3, [pc, #496]	; (80088a0 <_vfiprintf_r+0x20c>)
 80086ae:	429c      	cmp	r4, r3
 80086b0:	d158      	bne.n	8008764 <_vfiprintf_r+0xd0>
 80086b2:	6874      	ldr	r4, [r6, #4]
 80086b4:	89a3      	ldrh	r3, [r4, #12]
 80086b6:	0718      	lsls	r0, r3, #28
 80086b8:	d55e      	bpl.n	8008778 <_vfiprintf_r+0xe4>
 80086ba:	6923      	ldr	r3, [r4, #16]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d05b      	beq.n	8008778 <_vfiprintf_r+0xe4>
 80086c0:	2300      	movs	r3, #0
 80086c2:	9309      	str	r3, [sp, #36]	; 0x24
 80086c4:	2320      	movs	r3, #32
 80086c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086ca:	2330      	movs	r3, #48	; 0x30
 80086cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086d0:	9503      	str	r5, [sp, #12]
 80086d2:	f04f 0b01 	mov.w	fp, #1
 80086d6:	46b8      	mov	r8, r7
 80086d8:	4645      	mov	r5, r8
 80086da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80086de:	b10b      	cbz	r3, 80086e4 <_vfiprintf_r+0x50>
 80086e0:	2b25      	cmp	r3, #37	; 0x25
 80086e2:	d154      	bne.n	800878e <_vfiprintf_r+0xfa>
 80086e4:	ebb8 0a07 	subs.w	sl, r8, r7
 80086e8:	d00b      	beq.n	8008702 <_vfiprintf_r+0x6e>
 80086ea:	4653      	mov	r3, sl
 80086ec:	463a      	mov	r2, r7
 80086ee:	4621      	mov	r1, r4
 80086f0:	4630      	mov	r0, r6
 80086f2:	f7ff ffbc 	bl	800866e <__sfputs_r>
 80086f6:	3001      	adds	r0, #1
 80086f8:	f000 80c2 	beq.w	8008880 <_vfiprintf_r+0x1ec>
 80086fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086fe:	4453      	add	r3, sl
 8008700:	9309      	str	r3, [sp, #36]	; 0x24
 8008702:	f898 3000 	ldrb.w	r3, [r8]
 8008706:	2b00      	cmp	r3, #0
 8008708:	f000 80ba 	beq.w	8008880 <_vfiprintf_r+0x1ec>
 800870c:	2300      	movs	r3, #0
 800870e:	f04f 32ff 	mov.w	r2, #4294967295
 8008712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008716:	9304      	str	r3, [sp, #16]
 8008718:	9307      	str	r3, [sp, #28]
 800871a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800871e:	931a      	str	r3, [sp, #104]	; 0x68
 8008720:	46a8      	mov	r8, r5
 8008722:	2205      	movs	r2, #5
 8008724:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008728:	485e      	ldr	r0, [pc, #376]	; (80088a4 <_vfiprintf_r+0x210>)
 800872a:	f7f7 fd69 	bl	8000200 <memchr>
 800872e:	9b04      	ldr	r3, [sp, #16]
 8008730:	bb78      	cbnz	r0, 8008792 <_vfiprintf_r+0xfe>
 8008732:	06d9      	lsls	r1, r3, #27
 8008734:	bf44      	itt	mi
 8008736:	2220      	movmi	r2, #32
 8008738:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800873c:	071a      	lsls	r2, r3, #28
 800873e:	bf44      	itt	mi
 8008740:	222b      	movmi	r2, #43	; 0x2b
 8008742:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008746:	782a      	ldrb	r2, [r5, #0]
 8008748:	2a2a      	cmp	r2, #42	; 0x2a
 800874a:	d02a      	beq.n	80087a2 <_vfiprintf_r+0x10e>
 800874c:	9a07      	ldr	r2, [sp, #28]
 800874e:	46a8      	mov	r8, r5
 8008750:	2000      	movs	r0, #0
 8008752:	250a      	movs	r5, #10
 8008754:	4641      	mov	r1, r8
 8008756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800875a:	3b30      	subs	r3, #48	; 0x30
 800875c:	2b09      	cmp	r3, #9
 800875e:	d969      	bls.n	8008834 <_vfiprintf_r+0x1a0>
 8008760:	b360      	cbz	r0, 80087bc <_vfiprintf_r+0x128>
 8008762:	e024      	b.n	80087ae <_vfiprintf_r+0x11a>
 8008764:	4b50      	ldr	r3, [pc, #320]	; (80088a8 <_vfiprintf_r+0x214>)
 8008766:	429c      	cmp	r4, r3
 8008768:	d101      	bne.n	800876e <_vfiprintf_r+0xda>
 800876a:	68b4      	ldr	r4, [r6, #8]
 800876c:	e7a2      	b.n	80086b4 <_vfiprintf_r+0x20>
 800876e:	4b4f      	ldr	r3, [pc, #316]	; (80088ac <_vfiprintf_r+0x218>)
 8008770:	429c      	cmp	r4, r3
 8008772:	bf08      	it	eq
 8008774:	68f4      	ldreq	r4, [r6, #12]
 8008776:	e79d      	b.n	80086b4 <_vfiprintf_r+0x20>
 8008778:	4621      	mov	r1, r4
 800877a:	4630      	mov	r0, r6
 800877c:	f000 fae0 	bl	8008d40 <__swsetup_r>
 8008780:	2800      	cmp	r0, #0
 8008782:	d09d      	beq.n	80086c0 <_vfiprintf_r+0x2c>
 8008784:	f04f 30ff 	mov.w	r0, #4294967295
 8008788:	b01d      	add	sp, #116	; 0x74
 800878a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800878e:	46a8      	mov	r8, r5
 8008790:	e7a2      	b.n	80086d8 <_vfiprintf_r+0x44>
 8008792:	4a44      	ldr	r2, [pc, #272]	; (80088a4 <_vfiprintf_r+0x210>)
 8008794:	1a80      	subs	r0, r0, r2
 8008796:	fa0b f000 	lsl.w	r0, fp, r0
 800879a:	4318      	orrs	r0, r3
 800879c:	9004      	str	r0, [sp, #16]
 800879e:	4645      	mov	r5, r8
 80087a0:	e7be      	b.n	8008720 <_vfiprintf_r+0x8c>
 80087a2:	9a03      	ldr	r2, [sp, #12]
 80087a4:	1d11      	adds	r1, r2, #4
 80087a6:	6812      	ldr	r2, [r2, #0]
 80087a8:	9103      	str	r1, [sp, #12]
 80087aa:	2a00      	cmp	r2, #0
 80087ac:	db01      	blt.n	80087b2 <_vfiprintf_r+0x11e>
 80087ae:	9207      	str	r2, [sp, #28]
 80087b0:	e004      	b.n	80087bc <_vfiprintf_r+0x128>
 80087b2:	4252      	negs	r2, r2
 80087b4:	f043 0302 	orr.w	r3, r3, #2
 80087b8:	9207      	str	r2, [sp, #28]
 80087ba:	9304      	str	r3, [sp, #16]
 80087bc:	f898 3000 	ldrb.w	r3, [r8]
 80087c0:	2b2e      	cmp	r3, #46	; 0x2e
 80087c2:	d10e      	bne.n	80087e2 <_vfiprintf_r+0x14e>
 80087c4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80087c8:	2b2a      	cmp	r3, #42	; 0x2a
 80087ca:	d138      	bne.n	800883e <_vfiprintf_r+0x1aa>
 80087cc:	9b03      	ldr	r3, [sp, #12]
 80087ce:	1d1a      	adds	r2, r3, #4
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	9203      	str	r2, [sp, #12]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	bfb8      	it	lt
 80087d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80087dc:	f108 0802 	add.w	r8, r8, #2
 80087e0:	9305      	str	r3, [sp, #20]
 80087e2:	4d33      	ldr	r5, [pc, #204]	; (80088b0 <_vfiprintf_r+0x21c>)
 80087e4:	f898 1000 	ldrb.w	r1, [r8]
 80087e8:	2203      	movs	r2, #3
 80087ea:	4628      	mov	r0, r5
 80087ec:	f7f7 fd08 	bl	8000200 <memchr>
 80087f0:	b140      	cbz	r0, 8008804 <_vfiprintf_r+0x170>
 80087f2:	2340      	movs	r3, #64	; 0x40
 80087f4:	1b40      	subs	r0, r0, r5
 80087f6:	fa03 f000 	lsl.w	r0, r3, r0
 80087fa:	9b04      	ldr	r3, [sp, #16]
 80087fc:	4303      	orrs	r3, r0
 80087fe:	f108 0801 	add.w	r8, r8, #1
 8008802:	9304      	str	r3, [sp, #16]
 8008804:	f898 1000 	ldrb.w	r1, [r8]
 8008808:	482a      	ldr	r0, [pc, #168]	; (80088b4 <_vfiprintf_r+0x220>)
 800880a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800880e:	2206      	movs	r2, #6
 8008810:	f108 0701 	add.w	r7, r8, #1
 8008814:	f7f7 fcf4 	bl	8000200 <memchr>
 8008818:	2800      	cmp	r0, #0
 800881a:	d037      	beq.n	800888c <_vfiprintf_r+0x1f8>
 800881c:	4b26      	ldr	r3, [pc, #152]	; (80088b8 <_vfiprintf_r+0x224>)
 800881e:	bb1b      	cbnz	r3, 8008868 <_vfiprintf_r+0x1d4>
 8008820:	9b03      	ldr	r3, [sp, #12]
 8008822:	3307      	adds	r3, #7
 8008824:	f023 0307 	bic.w	r3, r3, #7
 8008828:	3308      	adds	r3, #8
 800882a:	9303      	str	r3, [sp, #12]
 800882c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800882e:	444b      	add	r3, r9
 8008830:	9309      	str	r3, [sp, #36]	; 0x24
 8008832:	e750      	b.n	80086d6 <_vfiprintf_r+0x42>
 8008834:	fb05 3202 	mla	r2, r5, r2, r3
 8008838:	2001      	movs	r0, #1
 800883a:	4688      	mov	r8, r1
 800883c:	e78a      	b.n	8008754 <_vfiprintf_r+0xc0>
 800883e:	2300      	movs	r3, #0
 8008840:	f108 0801 	add.w	r8, r8, #1
 8008844:	9305      	str	r3, [sp, #20]
 8008846:	4619      	mov	r1, r3
 8008848:	250a      	movs	r5, #10
 800884a:	4640      	mov	r0, r8
 800884c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008850:	3a30      	subs	r2, #48	; 0x30
 8008852:	2a09      	cmp	r2, #9
 8008854:	d903      	bls.n	800885e <_vfiprintf_r+0x1ca>
 8008856:	2b00      	cmp	r3, #0
 8008858:	d0c3      	beq.n	80087e2 <_vfiprintf_r+0x14e>
 800885a:	9105      	str	r1, [sp, #20]
 800885c:	e7c1      	b.n	80087e2 <_vfiprintf_r+0x14e>
 800885e:	fb05 2101 	mla	r1, r5, r1, r2
 8008862:	2301      	movs	r3, #1
 8008864:	4680      	mov	r8, r0
 8008866:	e7f0      	b.n	800884a <_vfiprintf_r+0x1b6>
 8008868:	ab03      	add	r3, sp, #12
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	4622      	mov	r2, r4
 800886e:	4b13      	ldr	r3, [pc, #76]	; (80088bc <_vfiprintf_r+0x228>)
 8008870:	a904      	add	r1, sp, #16
 8008872:	4630      	mov	r0, r6
 8008874:	f3af 8000 	nop.w
 8008878:	f1b0 3fff 	cmp.w	r0, #4294967295
 800887c:	4681      	mov	r9, r0
 800887e:	d1d5      	bne.n	800882c <_vfiprintf_r+0x198>
 8008880:	89a3      	ldrh	r3, [r4, #12]
 8008882:	065b      	lsls	r3, r3, #25
 8008884:	f53f af7e 	bmi.w	8008784 <_vfiprintf_r+0xf0>
 8008888:	9809      	ldr	r0, [sp, #36]	; 0x24
 800888a:	e77d      	b.n	8008788 <_vfiprintf_r+0xf4>
 800888c:	ab03      	add	r3, sp, #12
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	4622      	mov	r2, r4
 8008892:	4b0a      	ldr	r3, [pc, #40]	; (80088bc <_vfiprintf_r+0x228>)
 8008894:	a904      	add	r1, sp, #16
 8008896:	4630      	mov	r0, r6
 8008898:	f000 f888 	bl	80089ac <_printf_i>
 800889c:	e7ec      	b.n	8008878 <_vfiprintf_r+0x1e4>
 800889e:	bf00      	nop
 80088a0:	080092cc 	.word	0x080092cc
 80088a4:	0800930c 	.word	0x0800930c
 80088a8:	080092ec 	.word	0x080092ec
 80088ac:	080092ac 	.word	0x080092ac
 80088b0:	08009312 	.word	0x08009312
 80088b4:	08009316 	.word	0x08009316
 80088b8:	00000000 	.word	0x00000000
 80088bc:	0800866f 	.word	0x0800866f

080088c0 <_printf_common>:
 80088c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088c4:	4691      	mov	r9, r2
 80088c6:	461f      	mov	r7, r3
 80088c8:	688a      	ldr	r2, [r1, #8]
 80088ca:	690b      	ldr	r3, [r1, #16]
 80088cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088d0:	4293      	cmp	r3, r2
 80088d2:	bfb8      	it	lt
 80088d4:	4613      	movlt	r3, r2
 80088d6:	f8c9 3000 	str.w	r3, [r9]
 80088da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088de:	4606      	mov	r6, r0
 80088e0:	460c      	mov	r4, r1
 80088e2:	b112      	cbz	r2, 80088ea <_printf_common+0x2a>
 80088e4:	3301      	adds	r3, #1
 80088e6:	f8c9 3000 	str.w	r3, [r9]
 80088ea:	6823      	ldr	r3, [r4, #0]
 80088ec:	0699      	lsls	r1, r3, #26
 80088ee:	bf42      	ittt	mi
 80088f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80088f4:	3302      	addmi	r3, #2
 80088f6:	f8c9 3000 	strmi.w	r3, [r9]
 80088fa:	6825      	ldr	r5, [r4, #0]
 80088fc:	f015 0506 	ands.w	r5, r5, #6
 8008900:	d107      	bne.n	8008912 <_printf_common+0x52>
 8008902:	f104 0a19 	add.w	sl, r4, #25
 8008906:	68e3      	ldr	r3, [r4, #12]
 8008908:	f8d9 2000 	ldr.w	r2, [r9]
 800890c:	1a9b      	subs	r3, r3, r2
 800890e:	42ab      	cmp	r3, r5
 8008910:	dc28      	bgt.n	8008964 <_printf_common+0xa4>
 8008912:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008916:	6822      	ldr	r2, [r4, #0]
 8008918:	3300      	adds	r3, #0
 800891a:	bf18      	it	ne
 800891c:	2301      	movne	r3, #1
 800891e:	0692      	lsls	r2, r2, #26
 8008920:	d42d      	bmi.n	800897e <_printf_common+0xbe>
 8008922:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008926:	4639      	mov	r1, r7
 8008928:	4630      	mov	r0, r6
 800892a:	47c0      	blx	r8
 800892c:	3001      	adds	r0, #1
 800892e:	d020      	beq.n	8008972 <_printf_common+0xb2>
 8008930:	6823      	ldr	r3, [r4, #0]
 8008932:	68e5      	ldr	r5, [r4, #12]
 8008934:	f8d9 2000 	ldr.w	r2, [r9]
 8008938:	f003 0306 	and.w	r3, r3, #6
 800893c:	2b04      	cmp	r3, #4
 800893e:	bf08      	it	eq
 8008940:	1aad      	subeq	r5, r5, r2
 8008942:	68a3      	ldr	r3, [r4, #8]
 8008944:	6922      	ldr	r2, [r4, #16]
 8008946:	bf0c      	ite	eq
 8008948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800894c:	2500      	movne	r5, #0
 800894e:	4293      	cmp	r3, r2
 8008950:	bfc4      	itt	gt
 8008952:	1a9b      	subgt	r3, r3, r2
 8008954:	18ed      	addgt	r5, r5, r3
 8008956:	f04f 0900 	mov.w	r9, #0
 800895a:	341a      	adds	r4, #26
 800895c:	454d      	cmp	r5, r9
 800895e:	d11a      	bne.n	8008996 <_printf_common+0xd6>
 8008960:	2000      	movs	r0, #0
 8008962:	e008      	b.n	8008976 <_printf_common+0xb6>
 8008964:	2301      	movs	r3, #1
 8008966:	4652      	mov	r2, sl
 8008968:	4639      	mov	r1, r7
 800896a:	4630      	mov	r0, r6
 800896c:	47c0      	blx	r8
 800896e:	3001      	adds	r0, #1
 8008970:	d103      	bne.n	800897a <_printf_common+0xba>
 8008972:	f04f 30ff 	mov.w	r0, #4294967295
 8008976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800897a:	3501      	adds	r5, #1
 800897c:	e7c3      	b.n	8008906 <_printf_common+0x46>
 800897e:	18e1      	adds	r1, r4, r3
 8008980:	1c5a      	adds	r2, r3, #1
 8008982:	2030      	movs	r0, #48	; 0x30
 8008984:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008988:	4422      	add	r2, r4
 800898a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800898e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008992:	3302      	adds	r3, #2
 8008994:	e7c5      	b.n	8008922 <_printf_common+0x62>
 8008996:	2301      	movs	r3, #1
 8008998:	4622      	mov	r2, r4
 800899a:	4639      	mov	r1, r7
 800899c:	4630      	mov	r0, r6
 800899e:	47c0      	blx	r8
 80089a0:	3001      	adds	r0, #1
 80089a2:	d0e6      	beq.n	8008972 <_printf_common+0xb2>
 80089a4:	f109 0901 	add.w	r9, r9, #1
 80089a8:	e7d8      	b.n	800895c <_printf_common+0x9c>
	...

080089ac <_printf_i>:
 80089ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80089b4:	460c      	mov	r4, r1
 80089b6:	7e09      	ldrb	r1, [r1, #24]
 80089b8:	b085      	sub	sp, #20
 80089ba:	296e      	cmp	r1, #110	; 0x6e
 80089bc:	4617      	mov	r7, r2
 80089be:	4606      	mov	r6, r0
 80089c0:	4698      	mov	r8, r3
 80089c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089c4:	f000 80b3 	beq.w	8008b2e <_printf_i+0x182>
 80089c8:	d822      	bhi.n	8008a10 <_printf_i+0x64>
 80089ca:	2963      	cmp	r1, #99	; 0x63
 80089cc:	d036      	beq.n	8008a3c <_printf_i+0x90>
 80089ce:	d80a      	bhi.n	80089e6 <_printf_i+0x3a>
 80089d0:	2900      	cmp	r1, #0
 80089d2:	f000 80b9 	beq.w	8008b48 <_printf_i+0x19c>
 80089d6:	2958      	cmp	r1, #88	; 0x58
 80089d8:	f000 8083 	beq.w	8008ae2 <_printf_i+0x136>
 80089dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80089e4:	e032      	b.n	8008a4c <_printf_i+0xa0>
 80089e6:	2964      	cmp	r1, #100	; 0x64
 80089e8:	d001      	beq.n	80089ee <_printf_i+0x42>
 80089ea:	2969      	cmp	r1, #105	; 0x69
 80089ec:	d1f6      	bne.n	80089dc <_printf_i+0x30>
 80089ee:	6820      	ldr	r0, [r4, #0]
 80089f0:	6813      	ldr	r3, [r2, #0]
 80089f2:	0605      	lsls	r5, r0, #24
 80089f4:	f103 0104 	add.w	r1, r3, #4
 80089f8:	d52a      	bpl.n	8008a50 <_printf_i+0xa4>
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6011      	str	r1, [r2, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	da03      	bge.n	8008a0a <_printf_i+0x5e>
 8008a02:	222d      	movs	r2, #45	; 0x2d
 8008a04:	425b      	negs	r3, r3
 8008a06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008a0a:	486f      	ldr	r0, [pc, #444]	; (8008bc8 <_printf_i+0x21c>)
 8008a0c:	220a      	movs	r2, #10
 8008a0e:	e039      	b.n	8008a84 <_printf_i+0xd8>
 8008a10:	2973      	cmp	r1, #115	; 0x73
 8008a12:	f000 809d 	beq.w	8008b50 <_printf_i+0x1a4>
 8008a16:	d808      	bhi.n	8008a2a <_printf_i+0x7e>
 8008a18:	296f      	cmp	r1, #111	; 0x6f
 8008a1a:	d020      	beq.n	8008a5e <_printf_i+0xb2>
 8008a1c:	2970      	cmp	r1, #112	; 0x70
 8008a1e:	d1dd      	bne.n	80089dc <_printf_i+0x30>
 8008a20:	6823      	ldr	r3, [r4, #0]
 8008a22:	f043 0320 	orr.w	r3, r3, #32
 8008a26:	6023      	str	r3, [r4, #0]
 8008a28:	e003      	b.n	8008a32 <_printf_i+0x86>
 8008a2a:	2975      	cmp	r1, #117	; 0x75
 8008a2c:	d017      	beq.n	8008a5e <_printf_i+0xb2>
 8008a2e:	2978      	cmp	r1, #120	; 0x78
 8008a30:	d1d4      	bne.n	80089dc <_printf_i+0x30>
 8008a32:	2378      	movs	r3, #120	; 0x78
 8008a34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a38:	4864      	ldr	r0, [pc, #400]	; (8008bcc <_printf_i+0x220>)
 8008a3a:	e055      	b.n	8008ae8 <_printf_i+0x13c>
 8008a3c:	6813      	ldr	r3, [r2, #0]
 8008a3e:	1d19      	adds	r1, r3, #4
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	6011      	str	r1, [r2, #0]
 8008a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e08c      	b.n	8008b6a <_printf_i+0x1be>
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6011      	str	r1, [r2, #0]
 8008a54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a58:	bf18      	it	ne
 8008a5a:	b21b      	sxthne	r3, r3
 8008a5c:	e7cf      	b.n	80089fe <_printf_i+0x52>
 8008a5e:	6813      	ldr	r3, [r2, #0]
 8008a60:	6825      	ldr	r5, [r4, #0]
 8008a62:	1d18      	adds	r0, r3, #4
 8008a64:	6010      	str	r0, [r2, #0]
 8008a66:	0628      	lsls	r0, r5, #24
 8008a68:	d501      	bpl.n	8008a6e <_printf_i+0xc2>
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	e002      	b.n	8008a74 <_printf_i+0xc8>
 8008a6e:	0668      	lsls	r0, r5, #25
 8008a70:	d5fb      	bpl.n	8008a6a <_printf_i+0xbe>
 8008a72:	881b      	ldrh	r3, [r3, #0]
 8008a74:	4854      	ldr	r0, [pc, #336]	; (8008bc8 <_printf_i+0x21c>)
 8008a76:	296f      	cmp	r1, #111	; 0x6f
 8008a78:	bf14      	ite	ne
 8008a7a:	220a      	movne	r2, #10
 8008a7c:	2208      	moveq	r2, #8
 8008a7e:	2100      	movs	r1, #0
 8008a80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a84:	6865      	ldr	r5, [r4, #4]
 8008a86:	60a5      	str	r5, [r4, #8]
 8008a88:	2d00      	cmp	r5, #0
 8008a8a:	f2c0 8095 	blt.w	8008bb8 <_printf_i+0x20c>
 8008a8e:	6821      	ldr	r1, [r4, #0]
 8008a90:	f021 0104 	bic.w	r1, r1, #4
 8008a94:	6021      	str	r1, [r4, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d13d      	bne.n	8008b16 <_printf_i+0x16a>
 8008a9a:	2d00      	cmp	r5, #0
 8008a9c:	f040 808e 	bne.w	8008bbc <_printf_i+0x210>
 8008aa0:	4665      	mov	r5, ip
 8008aa2:	2a08      	cmp	r2, #8
 8008aa4:	d10b      	bne.n	8008abe <_printf_i+0x112>
 8008aa6:	6823      	ldr	r3, [r4, #0]
 8008aa8:	07db      	lsls	r3, r3, #31
 8008aaa:	d508      	bpl.n	8008abe <_printf_i+0x112>
 8008aac:	6923      	ldr	r3, [r4, #16]
 8008aae:	6862      	ldr	r2, [r4, #4]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	bfde      	ittt	le
 8008ab4:	2330      	movle	r3, #48	; 0x30
 8008ab6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008aba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008abe:	ebac 0305 	sub.w	r3, ip, r5
 8008ac2:	6123      	str	r3, [r4, #16]
 8008ac4:	f8cd 8000 	str.w	r8, [sp]
 8008ac8:	463b      	mov	r3, r7
 8008aca:	aa03      	add	r2, sp, #12
 8008acc:	4621      	mov	r1, r4
 8008ace:	4630      	mov	r0, r6
 8008ad0:	f7ff fef6 	bl	80088c0 <_printf_common>
 8008ad4:	3001      	adds	r0, #1
 8008ad6:	d14d      	bne.n	8008b74 <_printf_i+0x1c8>
 8008ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8008adc:	b005      	add	sp, #20
 8008ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ae2:	4839      	ldr	r0, [pc, #228]	; (8008bc8 <_printf_i+0x21c>)
 8008ae4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008ae8:	6813      	ldr	r3, [r2, #0]
 8008aea:	6821      	ldr	r1, [r4, #0]
 8008aec:	1d1d      	adds	r5, r3, #4
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6015      	str	r5, [r2, #0]
 8008af2:	060a      	lsls	r2, r1, #24
 8008af4:	d50b      	bpl.n	8008b0e <_printf_i+0x162>
 8008af6:	07ca      	lsls	r2, r1, #31
 8008af8:	bf44      	itt	mi
 8008afa:	f041 0120 	orrmi.w	r1, r1, #32
 8008afe:	6021      	strmi	r1, [r4, #0]
 8008b00:	b91b      	cbnz	r3, 8008b0a <_printf_i+0x15e>
 8008b02:	6822      	ldr	r2, [r4, #0]
 8008b04:	f022 0220 	bic.w	r2, r2, #32
 8008b08:	6022      	str	r2, [r4, #0]
 8008b0a:	2210      	movs	r2, #16
 8008b0c:	e7b7      	b.n	8008a7e <_printf_i+0xd2>
 8008b0e:	064d      	lsls	r5, r1, #25
 8008b10:	bf48      	it	mi
 8008b12:	b29b      	uxthmi	r3, r3
 8008b14:	e7ef      	b.n	8008af6 <_printf_i+0x14a>
 8008b16:	4665      	mov	r5, ip
 8008b18:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b1c:	fb02 3311 	mls	r3, r2, r1, r3
 8008b20:	5cc3      	ldrb	r3, [r0, r3]
 8008b22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008b26:	460b      	mov	r3, r1
 8008b28:	2900      	cmp	r1, #0
 8008b2a:	d1f5      	bne.n	8008b18 <_printf_i+0x16c>
 8008b2c:	e7b9      	b.n	8008aa2 <_printf_i+0xf6>
 8008b2e:	6813      	ldr	r3, [r2, #0]
 8008b30:	6825      	ldr	r5, [r4, #0]
 8008b32:	6961      	ldr	r1, [r4, #20]
 8008b34:	1d18      	adds	r0, r3, #4
 8008b36:	6010      	str	r0, [r2, #0]
 8008b38:	0628      	lsls	r0, r5, #24
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	d501      	bpl.n	8008b42 <_printf_i+0x196>
 8008b3e:	6019      	str	r1, [r3, #0]
 8008b40:	e002      	b.n	8008b48 <_printf_i+0x19c>
 8008b42:	066a      	lsls	r2, r5, #25
 8008b44:	d5fb      	bpl.n	8008b3e <_printf_i+0x192>
 8008b46:	8019      	strh	r1, [r3, #0]
 8008b48:	2300      	movs	r3, #0
 8008b4a:	6123      	str	r3, [r4, #16]
 8008b4c:	4665      	mov	r5, ip
 8008b4e:	e7b9      	b.n	8008ac4 <_printf_i+0x118>
 8008b50:	6813      	ldr	r3, [r2, #0]
 8008b52:	1d19      	adds	r1, r3, #4
 8008b54:	6011      	str	r1, [r2, #0]
 8008b56:	681d      	ldr	r5, [r3, #0]
 8008b58:	6862      	ldr	r2, [r4, #4]
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	f7f7 fb4f 	bl	8000200 <memchr>
 8008b62:	b108      	cbz	r0, 8008b68 <_printf_i+0x1bc>
 8008b64:	1b40      	subs	r0, r0, r5
 8008b66:	6060      	str	r0, [r4, #4]
 8008b68:	6863      	ldr	r3, [r4, #4]
 8008b6a:	6123      	str	r3, [r4, #16]
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b72:	e7a7      	b.n	8008ac4 <_printf_i+0x118>
 8008b74:	6923      	ldr	r3, [r4, #16]
 8008b76:	462a      	mov	r2, r5
 8008b78:	4639      	mov	r1, r7
 8008b7a:	4630      	mov	r0, r6
 8008b7c:	47c0      	blx	r8
 8008b7e:	3001      	adds	r0, #1
 8008b80:	d0aa      	beq.n	8008ad8 <_printf_i+0x12c>
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	079b      	lsls	r3, r3, #30
 8008b86:	d413      	bmi.n	8008bb0 <_printf_i+0x204>
 8008b88:	68e0      	ldr	r0, [r4, #12]
 8008b8a:	9b03      	ldr	r3, [sp, #12]
 8008b8c:	4298      	cmp	r0, r3
 8008b8e:	bfb8      	it	lt
 8008b90:	4618      	movlt	r0, r3
 8008b92:	e7a3      	b.n	8008adc <_printf_i+0x130>
 8008b94:	2301      	movs	r3, #1
 8008b96:	464a      	mov	r2, r9
 8008b98:	4639      	mov	r1, r7
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	47c0      	blx	r8
 8008b9e:	3001      	adds	r0, #1
 8008ba0:	d09a      	beq.n	8008ad8 <_printf_i+0x12c>
 8008ba2:	3501      	adds	r5, #1
 8008ba4:	68e3      	ldr	r3, [r4, #12]
 8008ba6:	9a03      	ldr	r2, [sp, #12]
 8008ba8:	1a9b      	subs	r3, r3, r2
 8008baa:	42ab      	cmp	r3, r5
 8008bac:	dcf2      	bgt.n	8008b94 <_printf_i+0x1e8>
 8008bae:	e7eb      	b.n	8008b88 <_printf_i+0x1dc>
 8008bb0:	2500      	movs	r5, #0
 8008bb2:	f104 0919 	add.w	r9, r4, #25
 8008bb6:	e7f5      	b.n	8008ba4 <_printf_i+0x1f8>
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1ac      	bne.n	8008b16 <_printf_i+0x16a>
 8008bbc:	7803      	ldrb	r3, [r0, #0]
 8008bbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bc6:	e76c      	b.n	8008aa2 <_printf_i+0xf6>
 8008bc8:	0800931d 	.word	0x0800931d
 8008bcc:	0800932e 	.word	0x0800932e

08008bd0 <_sbrk_r>:
 8008bd0:	b538      	push	{r3, r4, r5, lr}
 8008bd2:	4c06      	ldr	r4, [pc, #24]	; (8008bec <_sbrk_r+0x1c>)
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	4608      	mov	r0, r1
 8008bda:	6023      	str	r3, [r4, #0]
 8008bdc:	f7f9 f84a 	bl	8001c74 <_sbrk>
 8008be0:	1c43      	adds	r3, r0, #1
 8008be2:	d102      	bne.n	8008bea <_sbrk_r+0x1a>
 8008be4:	6823      	ldr	r3, [r4, #0]
 8008be6:	b103      	cbz	r3, 8008bea <_sbrk_r+0x1a>
 8008be8:	602b      	str	r3, [r5, #0]
 8008bea:	bd38      	pop	{r3, r4, r5, pc}
 8008bec:	200008dc 	.word	0x200008dc

08008bf0 <__sread>:
 8008bf0:	b510      	push	{r4, lr}
 8008bf2:	460c      	mov	r4, r1
 8008bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bf8:	f000 fae0 	bl	80091bc <_read_r>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	bfab      	itete	ge
 8008c00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c02:	89a3      	ldrhlt	r3, [r4, #12]
 8008c04:	181b      	addge	r3, r3, r0
 8008c06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c0a:	bfac      	ite	ge
 8008c0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c0e:	81a3      	strhlt	r3, [r4, #12]
 8008c10:	bd10      	pop	{r4, pc}

08008c12 <__swrite>:
 8008c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c16:	461f      	mov	r7, r3
 8008c18:	898b      	ldrh	r3, [r1, #12]
 8008c1a:	05db      	lsls	r3, r3, #23
 8008c1c:	4605      	mov	r5, r0
 8008c1e:	460c      	mov	r4, r1
 8008c20:	4616      	mov	r6, r2
 8008c22:	d505      	bpl.n	8008c30 <__swrite+0x1e>
 8008c24:	2302      	movs	r3, #2
 8008c26:	2200      	movs	r2, #0
 8008c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c2c:	f000 f9b6 	bl	8008f9c <_lseek_r>
 8008c30:	89a3      	ldrh	r3, [r4, #12]
 8008c32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c3a:	81a3      	strh	r3, [r4, #12]
 8008c3c:	4632      	mov	r2, r6
 8008c3e:	463b      	mov	r3, r7
 8008c40:	4628      	mov	r0, r5
 8008c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c46:	f000 b869 	b.w	8008d1c <_write_r>

08008c4a <__sseek>:
 8008c4a:	b510      	push	{r4, lr}
 8008c4c:	460c      	mov	r4, r1
 8008c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c52:	f000 f9a3 	bl	8008f9c <_lseek_r>
 8008c56:	1c43      	adds	r3, r0, #1
 8008c58:	89a3      	ldrh	r3, [r4, #12]
 8008c5a:	bf15      	itete	ne
 8008c5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c66:	81a3      	strheq	r3, [r4, #12]
 8008c68:	bf18      	it	ne
 8008c6a:	81a3      	strhne	r3, [r4, #12]
 8008c6c:	bd10      	pop	{r4, pc}

08008c6e <__sclose>:
 8008c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c72:	f000 b8d3 	b.w	8008e1c <_close_r>
	...

08008c78 <__swbuf_r>:
 8008c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7a:	460e      	mov	r6, r1
 8008c7c:	4614      	mov	r4, r2
 8008c7e:	4605      	mov	r5, r0
 8008c80:	b118      	cbz	r0, 8008c8a <__swbuf_r+0x12>
 8008c82:	6983      	ldr	r3, [r0, #24]
 8008c84:	b90b      	cbnz	r3, 8008c8a <__swbuf_r+0x12>
 8008c86:	f7ff faa5 	bl	80081d4 <__sinit>
 8008c8a:	4b21      	ldr	r3, [pc, #132]	; (8008d10 <__swbuf_r+0x98>)
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	d12a      	bne.n	8008ce6 <__swbuf_r+0x6e>
 8008c90:	686c      	ldr	r4, [r5, #4]
 8008c92:	69a3      	ldr	r3, [r4, #24]
 8008c94:	60a3      	str	r3, [r4, #8]
 8008c96:	89a3      	ldrh	r3, [r4, #12]
 8008c98:	071a      	lsls	r2, r3, #28
 8008c9a:	d52e      	bpl.n	8008cfa <__swbuf_r+0x82>
 8008c9c:	6923      	ldr	r3, [r4, #16]
 8008c9e:	b363      	cbz	r3, 8008cfa <__swbuf_r+0x82>
 8008ca0:	6923      	ldr	r3, [r4, #16]
 8008ca2:	6820      	ldr	r0, [r4, #0]
 8008ca4:	1ac0      	subs	r0, r0, r3
 8008ca6:	6963      	ldr	r3, [r4, #20]
 8008ca8:	b2f6      	uxtb	r6, r6
 8008caa:	4283      	cmp	r3, r0
 8008cac:	4637      	mov	r7, r6
 8008cae:	dc04      	bgt.n	8008cba <__swbuf_r+0x42>
 8008cb0:	4621      	mov	r1, r4
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	f000 f948 	bl	8008f48 <_fflush_r>
 8008cb8:	bb28      	cbnz	r0, 8008d06 <__swbuf_r+0x8e>
 8008cba:	68a3      	ldr	r3, [r4, #8]
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	60a3      	str	r3, [r4, #8]
 8008cc0:	6823      	ldr	r3, [r4, #0]
 8008cc2:	1c5a      	adds	r2, r3, #1
 8008cc4:	6022      	str	r2, [r4, #0]
 8008cc6:	701e      	strb	r6, [r3, #0]
 8008cc8:	6963      	ldr	r3, [r4, #20]
 8008cca:	3001      	adds	r0, #1
 8008ccc:	4283      	cmp	r3, r0
 8008cce:	d004      	beq.n	8008cda <__swbuf_r+0x62>
 8008cd0:	89a3      	ldrh	r3, [r4, #12]
 8008cd2:	07db      	lsls	r3, r3, #31
 8008cd4:	d519      	bpl.n	8008d0a <__swbuf_r+0x92>
 8008cd6:	2e0a      	cmp	r6, #10
 8008cd8:	d117      	bne.n	8008d0a <__swbuf_r+0x92>
 8008cda:	4621      	mov	r1, r4
 8008cdc:	4628      	mov	r0, r5
 8008cde:	f000 f933 	bl	8008f48 <_fflush_r>
 8008ce2:	b190      	cbz	r0, 8008d0a <__swbuf_r+0x92>
 8008ce4:	e00f      	b.n	8008d06 <__swbuf_r+0x8e>
 8008ce6:	4b0b      	ldr	r3, [pc, #44]	; (8008d14 <__swbuf_r+0x9c>)
 8008ce8:	429c      	cmp	r4, r3
 8008cea:	d101      	bne.n	8008cf0 <__swbuf_r+0x78>
 8008cec:	68ac      	ldr	r4, [r5, #8]
 8008cee:	e7d0      	b.n	8008c92 <__swbuf_r+0x1a>
 8008cf0:	4b09      	ldr	r3, [pc, #36]	; (8008d18 <__swbuf_r+0xa0>)
 8008cf2:	429c      	cmp	r4, r3
 8008cf4:	bf08      	it	eq
 8008cf6:	68ec      	ldreq	r4, [r5, #12]
 8008cf8:	e7cb      	b.n	8008c92 <__swbuf_r+0x1a>
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	f000 f81f 	bl	8008d40 <__swsetup_r>
 8008d02:	2800      	cmp	r0, #0
 8008d04:	d0cc      	beq.n	8008ca0 <__swbuf_r+0x28>
 8008d06:	f04f 37ff 	mov.w	r7, #4294967295
 8008d0a:	4638      	mov	r0, r7
 8008d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	080092cc 	.word	0x080092cc
 8008d14:	080092ec 	.word	0x080092ec
 8008d18:	080092ac 	.word	0x080092ac

08008d1c <_write_r>:
 8008d1c:	b538      	push	{r3, r4, r5, lr}
 8008d1e:	4c07      	ldr	r4, [pc, #28]	; (8008d3c <_write_r+0x20>)
 8008d20:	4605      	mov	r5, r0
 8008d22:	4608      	mov	r0, r1
 8008d24:	4611      	mov	r1, r2
 8008d26:	2200      	movs	r2, #0
 8008d28:	6022      	str	r2, [r4, #0]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	f7f7 fd2d 	bl	800078a <_write>
 8008d30:	1c43      	adds	r3, r0, #1
 8008d32:	d102      	bne.n	8008d3a <_write_r+0x1e>
 8008d34:	6823      	ldr	r3, [r4, #0]
 8008d36:	b103      	cbz	r3, 8008d3a <_write_r+0x1e>
 8008d38:	602b      	str	r3, [r5, #0]
 8008d3a:	bd38      	pop	{r3, r4, r5, pc}
 8008d3c:	200008dc 	.word	0x200008dc

08008d40 <__swsetup_r>:
 8008d40:	4b32      	ldr	r3, [pc, #200]	; (8008e0c <__swsetup_r+0xcc>)
 8008d42:	b570      	push	{r4, r5, r6, lr}
 8008d44:	681d      	ldr	r5, [r3, #0]
 8008d46:	4606      	mov	r6, r0
 8008d48:	460c      	mov	r4, r1
 8008d4a:	b125      	cbz	r5, 8008d56 <__swsetup_r+0x16>
 8008d4c:	69ab      	ldr	r3, [r5, #24]
 8008d4e:	b913      	cbnz	r3, 8008d56 <__swsetup_r+0x16>
 8008d50:	4628      	mov	r0, r5
 8008d52:	f7ff fa3f 	bl	80081d4 <__sinit>
 8008d56:	4b2e      	ldr	r3, [pc, #184]	; (8008e10 <__swsetup_r+0xd0>)
 8008d58:	429c      	cmp	r4, r3
 8008d5a:	d10f      	bne.n	8008d7c <__swsetup_r+0x3c>
 8008d5c:	686c      	ldr	r4, [r5, #4]
 8008d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	0715      	lsls	r5, r2, #28
 8008d66:	d42c      	bmi.n	8008dc2 <__swsetup_r+0x82>
 8008d68:	06d0      	lsls	r0, r2, #27
 8008d6a:	d411      	bmi.n	8008d90 <__swsetup_r+0x50>
 8008d6c:	2209      	movs	r2, #9
 8008d6e:	6032      	str	r2, [r6, #0]
 8008d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d74:	81a3      	strh	r3, [r4, #12]
 8008d76:	f04f 30ff 	mov.w	r0, #4294967295
 8008d7a:	e03e      	b.n	8008dfa <__swsetup_r+0xba>
 8008d7c:	4b25      	ldr	r3, [pc, #148]	; (8008e14 <__swsetup_r+0xd4>)
 8008d7e:	429c      	cmp	r4, r3
 8008d80:	d101      	bne.n	8008d86 <__swsetup_r+0x46>
 8008d82:	68ac      	ldr	r4, [r5, #8]
 8008d84:	e7eb      	b.n	8008d5e <__swsetup_r+0x1e>
 8008d86:	4b24      	ldr	r3, [pc, #144]	; (8008e18 <__swsetup_r+0xd8>)
 8008d88:	429c      	cmp	r4, r3
 8008d8a:	bf08      	it	eq
 8008d8c:	68ec      	ldreq	r4, [r5, #12]
 8008d8e:	e7e6      	b.n	8008d5e <__swsetup_r+0x1e>
 8008d90:	0751      	lsls	r1, r2, #29
 8008d92:	d512      	bpl.n	8008dba <__swsetup_r+0x7a>
 8008d94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d96:	b141      	cbz	r1, 8008daa <__swsetup_r+0x6a>
 8008d98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d9c:	4299      	cmp	r1, r3
 8008d9e:	d002      	beq.n	8008da6 <__swsetup_r+0x66>
 8008da0:	4630      	mov	r0, r6
 8008da2:	f000 f997 	bl	80090d4 <_free_r>
 8008da6:	2300      	movs	r3, #0
 8008da8:	6363      	str	r3, [r4, #52]	; 0x34
 8008daa:	89a3      	ldrh	r3, [r4, #12]
 8008dac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008db0:	81a3      	strh	r3, [r4, #12]
 8008db2:	2300      	movs	r3, #0
 8008db4:	6063      	str	r3, [r4, #4]
 8008db6:	6923      	ldr	r3, [r4, #16]
 8008db8:	6023      	str	r3, [r4, #0]
 8008dba:	89a3      	ldrh	r3, [r4, #12]
 8008dbc:	f043 0308 	orr.w	r3, r3, #8
 8008dc0:	81a3      	strh	r3, [r4, #12]
 8008dc2:	6923      	ldr	r3, [r4, #16]
 8008dc4:	b94b      	cbnz	r3, 8008dda <__swsetup_r+0x9a>
 8008dc6:	89a3      	ldrh	r3, [r4, #12]
 8008dc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dd0:	d003      	beq.n	8008dda <__swsetup_r+0x9a>
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	f000 f917 	bl	8009008 <__smakebuf_r>
 8008dda:	89a2      	ldrh	r2, [r4, #12]
 8008ddc:	f012 0301 	ands.w	r3, r2, #1
 8008de0:	d00c      	beq.n	8008dfc <__swsetup_r+0xbc>
 8008de2:	2300      	movs	r3, #0
 8008de4:	60a3      	str	r3, [r4, #8]
 8008de6:	6963      	ldr	r3, [r4, #20]
 8008de8:	425b      	negs	r3, r3
 8008dea:	61a3      	str	r3, [r4, #24]
 8008dec:	6923      	ldr	r3, [r4, #16]
 8008dee:	b953      	cbnz	r3, 8008e06 <__swsetup_r+0xc6>
 8008df0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008df4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008df8:	d1ba      	bne.n	8008d70 <__swsetup_r+0x30>
 8008dfa:	bd70      	pop	{r4, r5, r6, pc}
 8008dfc:	0792      	lsls	r2, r2, #30
 8008dfe:	bf58      	it	pl
 8008e00:	6963      	ldrpl	r3, [r4, #20]
 8008e02:	60a3      	str	r3, [r4, #8]
 8008e04:	e7f2      	b.n	8008dec <__swsetup_r+0xac>
 8008e06:	2000      	movs	r0, #0
 8008e08:	e7f7      	b.n	8008dfa <__swsetup_r+0xba>
 8008e0a:	bf00      	nop
 8008e0c:	2000000c 	.word	0x2000000c
 8008e10:	080092cc 	.word	0x080092cc
 8008e14:	080092ec 	.word	0x080092ec
 8008e18:	080092ac 	.word	0x080092ac

08008e1c <_close_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	4c06      	ldr	r4, [pc, #24]	; (8008e38 <_close_r+0x1c>)
 8008e20:	2300      	movs	r3, #0
 8008e22:	4605      	mov	r5, r0
 8008e24:	4608      	mov	r0, r1
 8008e26:	6023      	str	r3, [r4, #0]
 8008e28:	f7f8 feef 	bl	8001c0a <_close>
 8008e2c:	1c43      	adds	r3, r0, #1
 8008e2e:	d102      	bne.n	8008e36 <_close_r+0x1a>
 8008e30:	6823      	ldr	r3, [r4, #0]
 8008e32:	b103      	cbz	r3, 8008e36 <_close_r+0x1a>
 8008e34:	602b      	str	r3, [r5, #0]
 8008e36:	bd38      	pop	{r3, r4, r5, pc}
 8008e38:	200008dc 	.word	0x200008dc

08008e3c <__sflush_r>:
 8008e3c:	898a      	ldrh	r2, [r1, #12]
 8008e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e42:	4605      	mov	r5, r0
 8008e44:	0710      	lsls	r0, r2, #28
 8008e46:	460c      	mov	r4, r1
 8008e48:	d458      	bmi.n	8008efc <__sflush_r+0xc0>
 8008e4a:	684b      	ldr	r3, [r1, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	dc05      	bgt.n	8008e5c <__sflush_r+0x20>
 8008e50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	dc02      	bgt.n	8008e5c <__sflush_r+0x20>
 8008e56:	2000      	movs	r0, #0
 8008e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e5e:	2e00      	cmp	r6, #0
 8008e60:	d0f9      	beq.n	8008e56 <__sflush_r+0x1a>
 8008e62:	2300      	movs	r3, #0
 8008e64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e68:	682f      	ldr	r7, [r5, #0]
 8008e6a:	6a21      	ldr	r1, [r4, #32]
 8008e6c:	602b      	str	r3, [r5, #0]
 8008e6e:	d032      	beq.n	8008ed6 <__sflush_r+0x9a>
 8008e70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e72:	89a3      	ldrh	r3, [r4, #12]
 8008e74:	075a      	lsls	r2, r3, #29
 8008e76:	d505      	bpl.n	8008e84 <__sflush_r+0x48>
 8008e78:	6863      	ldr	r3, [r4, #4]
 8008e7a:	1ac0      	subs	r0, r0, r3
 8008e7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e7e:	b10b      	cbz	r3, 8008e84 <__sflush_r+0x48>
 8008e80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e82:	1ac0      	subs	r0, r0, r3
 8008e84:	2300      	movs	r3, #0
 8008e86:	4602      	mov	r2, r0
 8008e88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e8a:	6a21      	ldr	r1, [r4, #32]
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	47b0      	blx	r6
 8008e90:	1c43      	adds	r3, r0, #1
 8008e92:	89a3      	ldrh	r3, [r4, #12]
 8008e94:	d106      	bne.n	8008ea4 <__sflush_r+0x68>
 8008e96:	6829      	ldr	r1, [r5, #0]
 8008e98:	291d      	cmp	r1, #29
 8008e9a:	d848      	bhi.n	8008f2e <__sflush_r+0xf2>
 8008e9c:	4a29      	ldr	r2, [pc, #164]	; (8008f44 <__sflush_r+0x108>)
 8008e9e:	40ca      	lsrs	r2, r1
 8008ea0:	07d6      	lsls	r6, r2, #31
 8008ea2:	d544      	bpl.n	8008f2e <__sflush_r+0xf2>
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	6062      	str	r2, [r4, #4]
 8008ea8:	04d9      	lsls	r1, r3, #19
 8008eaa:	6922      	ldr	r2, [r4, #16]
 8008eac:	6022      	str	r2, [r4, #0]
 8008eae:	d504      	bpl.n	8008eba <__sflush_r+0x7e>
 8008eb0:	1c42      	adds	r2, r0, #1
 8008eb2:	d101      	bne.n	8008eb8 <__sflush_r+0x7c>
 8008eb4:	682b      	ldr	r3, [r5, #0]
 8008eb6:	b903      	cbnz	r3, 8008eba <__sflush_r+0x7e>
 8008eb8:	6560      	str	r0, [r4, #84]	; 0x54
 8008eba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ebc:	602f      	str	r7, [r5, #0]
 8008ebe:	2900      	cmp	r1, #0
 8008ec0:	d0c9      	beq.n	8008e56 <__sflush_r+0x1a>
 8008ec2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ec6:	4299      	cmp	r1, r3
 8008ec8:	d002      	beq.n	8008ed0 <__sflush_r+0x94>
 8008eca:	4628      	mov	r0, r5
 8008ecc:	f000 f902 	bl	80090d4 <_free_r>
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	6360      	str	r0, [r4, #52]	; 0x34
 8008ed4:	e7c0      	b.n	8008e58 <__sflush_r+0x1c>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	4628      	mov	r0, r5
 8008eda:	47b0      	blx	r6
 8008edc:	1c41      	adds	r1, r0, #1
 8008ede:	d1c8      	bne.n	8008e72 <__sflush_r+0x36>
 8008ee0:	682b      	ldr	r3, [r5, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d0c5      	beq.n	8008e72 <__sflush_r+0x36>
 8008ee6:	2b1d      	cmp	r3, #29
 8008ee8:	d001      	beq.n	8008eee <__sflush_r+0xb2>
 8008eea:	2b16      	cmp	r3, #22
 8008eec:	d101      	bne.n	8008ef2 <__sflush_r+0xb6>
 8008eee:	602f      	str	r7, [r5, #0]
 8008ef0:	e7b1      	b.n	8008e56 <__sflush_r+0x1a>
 8008ef2:	89a3      	ldrh	r3, [r4, #12]
 8008ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ef8:	81a3      	strh	r3, [r4, #12]
 8008efa:	e7ad      	b.n	8008e58 <__sflush_r+0x1c>
 8008efc:	690f      	ldr	r7, [r1, #16]
 8008efe:	2f00      	cmp	r7, #0
 8008f00:	d0a9      	beq.n	8008e56 <__sflush_r+0x1a>
 8008f02:	0793      	lsls	r3, r2, #30
 8008f04:	680e      	ldr	r6, [r1, #0]
 8008f06:	bf08      	it	eq
 8008f08:	694b      	ldreq	r3, [r1, #20]
 8008f0a:	600f      	str	r7, [r1, #0]
 8008f0c:	bf18      	it	ne
 8008f0e:	2300      	movne	r3, #0
 8008f10:	eba6 0807 	sub.w	r8, r6, r7
 8008f14:	608b      	str	r3, [r1, #8]
 8008f16:	f1b8 0f00 	cmp.w	r8, #0
 8008f1a:	dd9c      	ble.n	8008e56 <__sflush_r+0x1a>
 8008f1c:	4643      	mov	r3, r8
 8008f1e:	463a      	mov	r2, r7
 8008f20:	6a21      	ldr	r1, [r4, #32]
 8008f22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f24:	4628      	mov	r0, r5
 8008f26:	47b0      	blx	r6
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	dc06      	bgt.n	8008f3a <__sflush_r+0xfe>
 8008f2c:	89a3      	ldrh	r3, [r4, #12]
 8008f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f32:	81a3      	strh	r3, [r4, #12]
 8008f34:	f04f 30ff 	mov.w	r0, #4294967295
 8008f38:	e78e      	b.n	8008e58 <__sflush_r+0x1c>
 8008f3a:	4407      	add	r7, r0
 8008f3c:	eba8 0800 	sub.w	r8, r8, r0
 8008f40:	e7e9      	b.n	8008f16 <__sflush_r+0xda>
 8008f42:	bf00      	nop
 8008f44:	20400001 	.word	0x20400001

08008f48 <_fflush_r>:
 8008f48:	b538      	push	{r3, r4, r5, lr}
 8008f4a:	690b      	ldr	r3, [r1, #16]
 8008f4c:	4605      	mov	r5, r0
 8008f4e:	460c      	mov	r4, r1
 8008f50:	b1db      	cbz	r3, 8008f8a <_fflush_r+0x42>
 8008f52:	b118      	cbz	r0, 8008f5c <_fflush_r+0x14>
 8008f54:	6983      	ldr	r3, [r0, #24]
 8008f56:	b90b      	cbnz	r3, 8008f5c <_fflush_r+0x14>
 8008f58:	f7ff f93c 	bl	80081d4 <__sinit>
 8008f5c:	4b0c      	ldr	r3, [pc, #48]	; (8008f90 <_fflush_r+0x48>)
 8008f5e:	429c      	cmp	r4, r3
 8008f60:	d109      	bne.n	8008f76 <_fflush_r+0x2e>
 8008f62:	686c      	ldr	r4, [r5, #4]
 8008f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f68:	b17b      	cbz	r3, 8008f8a <_fflush_r+0x42>
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f72:	f7ff bf63 	b.w	8008e3c <__sflush_r>
 8008f76:	4b07      	ldr	r3, [pc, #28]	; (8008f94 <_fflush_r+0x4c>)
 8008f78:	429c      	cmp	r4, r3
 8008f7a:	d101      	bne.n	8008f80 <_fflush_r+0x38>
 8008f7c:	68ac      	ldr	r4, [r5, #8]
 8008f7e:	e7f1      	b.n	8008f64 <_fflush_r+0x1c>
 8008f80:	4b05      	ldr	r3, [pc, #20]	; (8008f98 <_fflush_r+0x50>)
 8008f82:	429c      	cmp	r4, r3
 8008f84:	bf08      	it	eq
 8008f86:	68ec      	ldreq	r4, [r5, #12]
 8008f88:	e7ec      	b.n	8008f64 <_fflush_r+0x1c>
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	bd38      	pop	{r3, r4, r5, pc}
 8008f8e:	bf00      	nop
 8008f90:	080092cc 	.word	0x080092cc
 8008f94:	080092ec 	.word	0x080092ec
 8008f98:	080092ac 	.word	0x080092ac

08008f9c <_lseek_r>:
 8008f9c:	b538      	push	{r3, r4, r5, lr}
 8008f9e:	4c07      	ldr	r4, [pc, #28]	; (8008fbc <_lseek_r+0x20>)
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	4608      	mov	r0, r1
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	6022      	str	r2, [r4, #0]
 8008faa:	461a      	mov	r2, r3
 8008fac:	f7f8 fe54 	bl	8001c58 <_lseek>
 8008fb0:	1c43      	adds	r3, r0, #1
 8008fb2:	d102      	bne.n	8008fba <_lseek_r+0x1e>
 8008fb4:	6823      	ldr	r3, [r4, #0]
 8008fb6:	b103      	cbz	r3, 8008fba <_lseek_r+0x1e>
 8008fb8:	602b      	str	r3, [r5, #0]
 8008fba:	bd38      	pop	{r3, r4, r5, pc}
 8008fbc:	200008dc 	.word	0x200008dc

08008fc0 <__swhatbuf_r>:
 8008fc0:	b570      	push	{r4, r5, r6, lr}
 8008fc2:	460e      	mov	r6, r1
 8008fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fc8:	2900      	cmp	r1, #0
 8008fca:	b096      	sub	sp, #88	; 0x58
 8008fcc:	4614      	mov	r4, r2
 8008fce:	461d      	mov	r5, r3
 8008fd0:	da07      	bge.n	8008fe2 <__swhatbuf_r+0x22>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	602b      	str	r3, [r5, #0]
 8008fd6:	89b3      	ldrh	r3, [r6, #12]
 8008fd8:	061a      	lsls	r2, r3, #24
 8008fda:	d410      	bmi.n	8008ffe <__swhatbuf_r+0x3e>
 8008fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fe0:	e00e      	b.n	8009000 <__swhatbuf_r+0x40>
 8008fe2:	466a      	mov	r2, sp
 8008fe4:	f000 f8fc 	bl	80091e0 <_fstat_r>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	dbf2      	blt.n	8008fd2 <__swhatbuf_r+0x12>
 8008fec:	9a01      	ldr	r2, [sp, #4]
 8008fee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ff2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ff6:	425a      	negs	r2, r3
 8008ff8:	415a      	adcs	r2, r3
 8008ffa:	602a      	str	r2, [r5, #0]
 8008ffc:	e7ee      	b.n	8008fdc <__swhatbuf_r+0x1c>
 8008ffe:	2340      	movs	r3, #64	; 0x40
 8009000:	2000      	movs	r0, #0
 8009002:	6023      	str	r3, [r4, #0]
 8009004:	b016      	add	sp, #88	; 0x58
 8009006:	bd70      	pop	{r4, r5, r6, pc}

08009008 <__smakebuf_r>:
 8009008:	898b      	ldrh	r3, [r1, #12]
 800900a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800900c:	079d      	lsls	r5, r3, #30
 800900e:	4606      	mov	r6, r0
 8009010:	460c      	mov	r4, r1
 8009012:	d507      	bpl.n	8009024 <__smakebuf_r+0x1c>
 8009014:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009018:	6023      	str	r3, [r4, #0]
 800901a:	6123      	str	r3, [r4, #16]
 800901c:	2301      	movs	r3, #1
 800901e:	6163      	str	r3, [r4, #20]
 8009020:	b002      	add	sp, #8
 8009022:	bd70      	pop	{r4, r5, r6, pc}
 8009024:	ab01      	add	r3, sp, #4
 8009026:	466a      	mov	r2, sp
 8009028:	f7ff ffca 	bl	8008fc0 <__swhatbuf_r>
 800902c:	9900      	ldr	r1, [sp, #0]
 800902e:	4605      	mov	r5, r0
 8009030:	4630      	mov	r0, r6
 8009032:	f7ff f959 	bl	80082e8 <_malloc_r>
 8009036:	b948      	cbnz	r0, 800904c <__smakebuf_r+0x44>
 8009038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800903c:	059a      	lsls	r2, r3, #22
 800903e:	d4ef      	bmi.n	8009020 <__smakebuf_r+0x18>
 8009040:	f023 0303 	bic.w	r3, r3, #3
 8009044:	f043 0302 	orr.w	r3, r3, #2
 8009048:	81a3      	strh	r3, [r4, #12]
 800904a:	e7e3      	b.n	8009014 <__smakebuf_r+0xc>
 800904c:	4b0d      	ldr	r3, [pc, #52]	; (8009084 <__smakebuf_r+0x7c>)
 800904e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009050:	89a3      	ldrh	r3, [r4, #12]
 8009052:	6020      	str	r0, [r4, #0]
 8009054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009058:	81a3      	strh	r3, [r4, #12]
 800905a:	9b00      	ldr	r3, [sp, #0]
 800905c:	6163      	str	r3, [r4, #20]
 800905e:	9b01      	ldr	r3, [sp, #4]
 8009060:	6120      	str	r0, [r4, #16]
 8009062:	b15b      	cbz	r3, 800907c <__smakebuf_r+0x74>
 8009064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009068:	4630      	mov	r0, r6
 800906a:	f000 f8cb 	bl	8009204 <_isatty_r>
 800906e:	b128      	cbz	r0, 800907c <__smakebuf_r+0x74>
 8009070:	89a3      	ldrh	r3, [r4, #12]
 8009072:	f023 0303 	bic.w	r3, r3, #3
 8009076:	f043 0301 	orr.w	r3, r3, #1
 800907a:	81a3      	strh	r3, [r4, #12]
 800907c:	89a3      	ldrh	r3, [r4, #12]
 800907e:	431d      	orrs	r5, r3
 8009080:	81a5      	strh	r5, [r4, #12]
 8009082:	e7cd      	b.n	8009020 <__smakebuf_r+0x18>
 8009084:	0800819d 	.word	0x0800819d

08009088 <memcpy>:
 8009088:	b510      	push	{r4, lr}
 800908a:	1e43      	subs	r3, r0, #1
 800908c:	440a      	add	r2, r1
 800908e:	4291      	cmp	r1, r2
 8009090:	d100      	bne.n	8009094 <memcpy+0xc>
 8009092:	bd10      	pop	{r4, pc}
 8009094:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009098:	f803 4f01 	strb.w	r4, [r3, #1]!
 800909c:	e7f7      	b.n	800908e <memcpy+0x6>

0800909e <memmove>:
 800909e:	4288      	cmp	r0, r1
 80090a0:	b510      	push	{r4, lr}
 80090a2:	eb01 0302 	add.w	r3, r1, r2
 80090a6:	d807      	bhi.n	80090b8 <memmove+0x1a>
 80090a8:	1e42      	subs	r2, r0, #1
 80090aa:	4299      	cmp	r1, r3
 80090ac:	d00a      	beq.n	80090c4 <memmove+0x26>
 80090ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090b2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80090b6:	e7f8      	b.n	80090aa <memmove+0xc>
 80090b8:	4283      	cmp	r3, r0
 80090ba:	d9f5      	bls.n	80090a8 <memmove+0xa>
 80090bc:	1881      	adds	r1, r0, r2
 80090be:	1ad2      	subs	r2, r2, r3
 80090c0:	42d3      	cmn	r3, r2
 80090c2:	d100      	bne.n	80090c6 <memmove+0x28>
 80090c4:	bd10      	pop	{r4, pc}
 80090c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090ca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80090ce:	e7f7      	b.n	80090c0 <memmove+0x22>

080090d0 <__malloc_lock>:
 80090d0:	4770      	bx	lr

080090d2 <__malloc_unlock>:
 80090d2:	4770      	bx	lr

080090d4 <_free_r>:
 80090d4:	b538      	push	{r3, r4, r5, lr}
 80090d6:	4605      	mov	r5, r0
 80090d8:	2900      	cmp	r1, #0
 80090da:	d045      	beq.n	8009168 <_free_r+0x94>
 80090dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090e0:	1f0c      	subs	r4, r1, #4
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	bfb8      	it	lt
 80090e6:	18e4      	addlt	r4, r4, r3
 80090e8:	f7ff fff2 	bl	80090d0 <__malloc_lock>
 80090ec:	4a1f      	ldr	r2, [pc, #124]	; (800916c <_free_r+0x98>)
 80090ee:	6813      	ldr	r3, [r2, #0]
 80090f0:	4610      	mov	r0, r2
 80090f2:	b933      	cbnz	r3, 8009102 <_free_r+0x2e>
 80090f4:	6063      	str	r3, [r4, #4]
 80090f6:	6014      	str	r4, [r2, #0]
 80090f8:	4628      	mov	r0, r5
 80090fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090fe:	f7ff bfe8 	b.w	80090d2 <__malloc_unlock>
 8009102:	42a3      	cmp	r3, r4
 8009104:	d90c      	bls.n	8009120 <_free_r+0x4c>
 8009106:	6821      	ldr	r1, [r4, #0]
 8009108:	1862      	adds	r2, r4, r1
 800910a:	4293      	cmp	r3, r2
 800910c:	bf04      	itt	eq
 800910e:	681a      	ldreq	r2, [r3, #0]
 8009110:	685b      	ldreq	r3, [r3, #4]
 8009112:	6063      	str	r3, [r4, #4]
 8009114:	bf04      	itt	eq
 8009116:	1852      	addeq	r2, r2, r1
 8009118:	6022      	streq	r2, [r4, #0]
 800911a:	6004      	str	r4, [r0, #0]
 800911c:	e7ec      	b.n	80090f8 <_free_r+0x24>
 800911e:	4613      	mov	r3, r2
 8009120:	685a      	ldr	r2, [r3, #4]
 8009122:	b10a      	cbz	r2, 8009128 <_free_r+0x54>
 8009124:	42a2      	cmp	r2, r4
 8009126:	d9fa      	bls.n	800911e <_free_r+0x4a>
 8009128:	6819      	ldr	r1, [r3, #0]
 800912a:	1858      	adds	r0, r3, r1
 800912c:	42a0      	cmp	r0, r4
 800912e:	d10b      	bne.n	8009148 <_free_r+0x74>
 8009130:	6820      	ldr	r0, [r4, #0]
 8009132:	4401      	add	r1, r0
 8009134:	1858      	adds	r0, r3, r1
 8009136:	4282      	cmp	r2, r0
 8009138:	6019      	str	r1, [r3, #0]
 800913a:	d1dd      	bne.n	80090f8 <_free_r+0x24>
 800913c:	6810      	ldr	r0, [r2, #0]
 800913e:	6852      	ldr	r2, [r2, #4]
 8009140:	605a      	str	r2, [r3, #4]
 8009142:	4401      	add	r1, r0
 8009144:	6019      	str	r1, [r3, #0]
 8009146:	e7d7      	b.n	80090f8 <_free_r+0x24>
 8009148:	d902      	bls.n	8009150 <_free_r+0x7c>
 800914a:	230c      	movs	r3, #12
 800914c:	602b      	str	r3, [r5, #0]
 800914e:	e7d3      	b.n	80090f8 <_free_r+0x24>
 8009150:	6820      	ldr	r0, [r4, #0]
 8009152:	1821      	adds	r1, r4, r0
 8009154:	428a      	cmp	r2, r1
 8009156:	bf04      	itt	eq
 8009158:	6811      	ldreq	r1, [r2, #0]
 800915a:	6852      	ldreq	r2, [r2, #4]
 800915c:	6062      	str	r2, [r4, #4]
 800915e:	bf04      	itt	eq
 8009160:	1809      	addeq	r1, r1, r0
 8009162:	6021      	streq	r1, [r4, #0]
 8009164:	605c      	str	r4, [r3, #4]
 8009166:	e7c7      	b.n	80090f8 <_free_r+0x24>
 8009168:	bd38      	pop	{r3, r4, r5, pc}
 800916a:	bf00      	nop
 800916c:	2000009c 	.word	0x2000009c

08009170 <_realloc_r>:
 8009170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009172:	4607      	mov	r7, r0
 8009174:	4614      	mov	r4, r2
 8009176:	460e      	mov	r6, r1
 8009178:	b921      	cbnz	r1, 8009184 <_realloc_r+0x14>
 800917a:	4611      	mov	r1, r2
 800917c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009180:	f7ff b8b2 	b.w	80082e8 <_malloc_r>
 8009184:	b922      	cbnz	r2, 8009190 <_realloc_r+0x20>
 8009186:	f7ff ffa5 	bl	80090d4 <_free_r>
 800918a:	4625      	mov	r5, r4
 800918c:	4628      	mov	r0, r5
 800918e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009190:	f000 f848 	bl	8009224 <_malloc_usable_size_r>
 8009194:	42a0      	cmp	r0, r4
 8009196:	d20f      	bcs.n	80091b8 <_realloc_r+0x48>
 8009198:	4621      	mov	r1, r4
 800919a:	4638      	mov	r0, r7
 800919c:	f7ff f8a4 	bl	80082e8 <_malloc_r>
 80091a0:	4605      	mov	r5, r0
 80091a2:	2800      	cmp	r0, #0
 80091a4:	d0f2      	beq.n	800918c <_realloc_r+0x1c>
 80091a6:	4631      	mov	r1, r6
 80091a8:	4622      	mov	r2, r4
 80091aa:	f7ff ff6d 	bl	8009088 <memcpy>
 80091ae:	4631      	mov	r1, r6
 80091b0:	4638      	mov	r0, r7
 80091b2:	f7ff ff8f 	bl	80090d4 <_free_r>
 80091b6:	e7e9      	b.n	800918c <_realloc_r+0x1c>
 80091b8:	4635      	mov	r5, r6
 80091ba:	e7e7      	b.n	800918c <_realloc_r+0x1c>

080091bc <_read_r>:
 80091bc:	b538      	push	{r3, r4, r5, lr}
 80091be:	4c07      	ldr	r4, [pc, #28]	; (80091dc <_read_r+0x20>)
 80091c0:	4605      	mov	r5, r0
 80091c2:	4608      	mov	r0, r1
 80091c4:	4611      	mov	r1, r2
 80091c6:	2200      	movs	r2, #0
 80091c8:	6022      	str	r2, [r4, #0]
 80091ca:	461a      	mov	r2, r3
 80091cc:	f7f8 fd00 	bl	8001bd0 <_read>
 80091d0:	1c43      	adds	r3, r0, #1
 80091d2:	d102      	bne.n	80091da <_read_r+0x1e>
 80091d4:	6823      	ldr	r3, [r4, #0]
 80091d6:	b103      	cbz	r3, 80091da <_read_r+0x1e>
 80091d8:	602b      	str	r3, [r5, #0]
 80091da:	bd38      	pop	{r3, r4, r5, pc}
 80091dc:	200008dc 	.word	0x200008dc

080091e0 <_fstat_r>:
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	4c07      	ldr	r4, [pc, #28]	; (8009200 <_fstat_r+0x20>)
 80091e4:	2300      	movs	r3, #0
 80091e6:	4605      	mov	r5, r0
 80091e8:	4608      	mov	r0, r1
 80091ea:	4611      	mov	r1, r2
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	f7f8 fd18 	bl	8001c22 <_fstat>
 80091f2:	1c43      	adds	r3, r0, #1
 80091f4:	d102      	bne.n	80091fc <_fstat_r+0x1c>
 80091f6:	6823      	ldr	r3, [r4, #0]
 80091f8:	b103      	cbz	r3, 80091fc <_fstat_r+0x1c>
 80091fa:	602b      	str	r3, [r5, #0]
 80091fc:	bd38      	pop	{r3, r4, r5, pc}
 80091fe:	bf00      	nop
 8009200:	200008dc 	.word	0x200008dc

08009204 <_isatty_r>:
 8009204:	b538      	push	{r3, r4, r5, lr}
 8009206:	4c06      	ldr	r4, [pc, #24]	; (8009220 <_isatty_r+0x1c>)
 8009208:	2300      	movs	r3, #0
 800920a:	4605      	mov	r5, r0
 800920c:	4608      	mov	r0, r1
 800920e:	6023      	str	r3, [r4, #0]
 8009210:	f7f8 fd17 	bl	8001c42 <_isatty>
 8009214:	1c43      	adds	r3, r0, #1
 8009216:	d102      	bne.n	800921e <_isatty_r+0x1a>
 8009218:	6823      	ldr	r3, [r4, #0]
 800921a:	b103      	cbz	r3, 800921e <_isatty_r+0x1a>
 800921c:	602b      	str	r3, [r5, #0]
 800921e:	bd38      	pop	{r3, r4, r5, pc}
 8009220:	200008dc 	.word	0x200008dc

08009224 <_malloc_usable_size_r>:
 8009224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009228:	1f18      	subs	r0, r3, #4
 800922a:	2b00      	cmp	r3, #0
 800922c:	bfbc      	itt	lt
 800922e:	580b      	ldrlt	r3, [r1, r0]
 8009230:	18c0      	addlt	r0, r0, r3
 8009232:	4770      	bx	lr

08009234 <_init>:
 8009234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009236:	bf00      	nop
 8009238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800923a:	bc08      	pop	{r3}
 800923c:	469e      	mov	lr, r3
 800923e:	4770      	bx	lr

08009240 <_fini>:
 8009240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009242:	bf00      	nop
 8009244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009246:	bc08      	pop	{r3}
 8009248:	469e      	mov	lr, r3
 800924a:	4770      	bx	lr
