
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a48c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000954  0801a650  0801a650  0002a650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801afa4  0801afa4  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801afa4  0801afa4  0002afa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801afac  0801afac  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801afac  0801afac  0002afac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801afb4  0801afb4  0002afb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801afb8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004be40  200001e0  0801b194  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2004c020  0801b194  0003c020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000406fe  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008620  00000000  00000000  0007090a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002578  00000000  00000000  00078f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002278  00000000  00000000  0007b4a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000365da  00000000  00000000  0007d720  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00028e17  00000000  00000000  000b3cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011273a  00000000  00000000  000dcb11  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ef24b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b060  00000000  00000000  001ef2c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801a634 	.word	0x0801a634

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	0801a634 	.word	0x0801a634

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00b ffc0 	bl	800cf5c <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20049b14 	.word	0x20049b14

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00b ffa8 	bl	800cf5c <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20049b14 	.word	0x20049b14

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f00b fe31 	bl	800cc88 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f00a fb98 	bl	800b75c <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f00a fb92 	bl	800b75c <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f00a fb8c 	bl	800b75c <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f00a fb86 	bl	800b75c <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f00a fb80 	bl	800b75c <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f00a fb7a 	bl	800b75c <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f00a fb74 	bl	800b75c <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f00a fb6e 	bl	800b75c <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f00a fb68 	bl	800b75c <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f00a fb62 	bl	800b75c <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f00a fb56 	bl	800b75c <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f00a fb50 	bl	800b75c <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f016 ff0d 	bl	8017f48 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00f fc78 	bl	8010aec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00f fc74 	bl	8010aec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00f fc70 	bl	8010aec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00f fc6c 	bl	8010aec <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20049c00 	.word	0x20049c00
 8001248:	20049b68 	.word	0x20049b68
 800124c:	20049c88 	.word	0x20049c88

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20049c00 	.word	0x20049c00
 800137c:	20049c88 	.word	0x20049c88
 8001380:	20049b68 	.word	0x20049b68

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	20049c00 	.word	0x20049c00
 80013c4:	20049b68 	.word	0x20049b68
 80013c8:	20049c88 	.word	0x20049c88

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0),
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
		side_line_ignore_distance_(), cross_line_ignore_distance_(0), goal_judge_distance_(0){}
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	625a      	str	r2, [r3, #36]	; 0x24
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800143c:	213c      	movs	r1, #60	; 0x3c
 800143e:	4809      	ldr	r0, [pc, #36]	; (8001464 <_ZN7Encoder4initEv+0x30>)
 8001440:	f00f fc24 	bl	8010c8c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001444:	213c      	movs	r1, #60	; 0x3c
 8001446:	4808      	ldr	r0, [pc, #32]	; (8001468 <_ZN7Encoder4initEv+0x34>)
 8001448:	f00f fc20 	bl	8010c8c <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <_ZN7Encoder4initEv+0x38>)
 800144e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001452:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <_ZN7Encoder4initEv+0x3c>)
 8001456:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20049d68 	.word	0x20049d68
 8001468:	20049a4c 	.word	0x20049a4c
 800146c:	40010000 	.word	0x40010000
 8001470:	40010400 	.word	0x40010400
 8001474:	00000000 	.word	0x00000000

08001478 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	//static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001480:	4b45      	ldr	r3, [pc, #276]	; (8001598 <_ZN7Encoder6updateEv+0x120>)
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800148c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800159c <_ZN7Encoder6updateEv+0x124>
 8001490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001494:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80015a0 <_ZN7Encoder6updateEv+0x128>
 8001498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 80014a0:	4b40      	ldr	r3, [pc, #256]	; (80015a4 <_ZN7Encoder6updateEv+0x12c>)
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ac:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800159c <_ZN7Encoder6updateEv+0x124>
 80014b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014b4:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80015a0 <_ZN7Encoder6updateEv+0x128>
 80014b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014bc:	edc7 7a02 	vstr	s15, [r7, #8]
	//monitor_cnt_l = cnt_l;

	cnt_l_ = cnt_l;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	601a      	str	r2, [r3, #0]
	cnt_r_ = cnt_r;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	605a      	str	r2, [r3, #4]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	ed93 7a00 	vldr	s14, [r3]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80014d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014dc:	ee17 0a90 	vmov	r0, s15
 80014e0:	f7ff f84a 	bl	8000578 <__aeabi_f2d>
 80014e4:	a32a      	add	r3, pc, #168	; (adr r3, 8001590 <_ZN7Encoder6updateEv+0x118>)
 80014e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ea:	f7ff f89d 	bl	8000628 <__aeabi_dmul>
 80014ee:	4603      	mov	r3, r0
 80014f0:	460c      	mov	r4, r1
 80014f2:	4618      	mov	r0, r3
 80014f4:	4621      	mov	r1, r4
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014fe:	f7ff f9bd 	bl	800087c <__aeabi_ddiv>
 8001502:	4603      	mov	r3, r0
 8001504:	460c      	mov	r4, r1
 8001506:	4618      	mov	r0, r3
 8001508:	4621      	mov	r1, r4
 800150a:	f7ff fb85 	bl	8000c18 <__aeabi_d2f>
 800150e:	4602      	mov	r2, r0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	ed93 7a05 	vldr	s14, [r3, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	edd3 7a02 	vldr	s15, [r3, #8]
 8001536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	edc3 7a06 	vstr	s15, [r3, #24]
	side_line_ignore_distance_ += distance_;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	ed93 7a07 	vldr	s14, [r3, #28]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	edd3 7a02 	vldr	s15, [r3, #8]
 800154c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	edc3 7a07 	vstr	s15, [r3, #28]
	cross_line_ignore_distance_ += distance_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	ed93 7a08 	vldr	s14, [r3, #32]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	edc3 7a08 	vstr	s15, [r3, #32]
	goal_judge_distance_ += distance_;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	edd3 7a02 	vldr	s15, [r3, #8]
 8001578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	//monitor_distance = distance_10mm_;
}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	bd90      	pop	{r4, r7, pc}
 800158a:	bf00      	nop
 800158c:	f3af 8000 	nop.w
 8001590:	ce73a049 	.word	0xce73a049
 8001594:	3f77a3f6 	.word	0x3f77a3f6
 8001598:	40010000 	.word	0x40010000
 800159c:	47000000 	.word	0x47000000
 80015a0:	3f912547 	.word	0x3f912547
 80015a4:	40010400 	.word	0x40010400

080015a8 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <_ZN7Encoder5clearEv+0x3c>)
 80015c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <_ZN7Encoder5clearEv+0x40>)
 80015ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015ce:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40010000 	.word	0x40010000
 80015e8:	40010400 	.word	0x40010400

080015ec <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	601a      	str	r2, [r3, #0]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_ZN7Encoder15getDistance10mmEv>:
{
	return distance_;
}

float Encoder::getDistance10mm()
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	ee07 3a90 	vmov	s15, r3
}
 8001624:	eeb0 0a67 	vmov.f32	s0, s15
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
	return total_distance_;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	ee07 3a90 	vmov	s15, r3
}
 8001642:	eeb0 0a67 	vmov.f32	s0, s15
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	619a      	str	r2, [r3, #24]
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <_ZN7Encoder25getSideLineIgnoreDistanceEv>:

float Encoder::getSideLineIgnoreDistance()
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
	return side_line_ignore_distance_;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	ee07 3a90 	vmov	s15, r3
}
 80016b6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <_ZN7Encoder27clearSideLineIgnoreDistanceEv>:

void Encoder::clearSideLineIgnoreDistance()
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	side_line_ignore_distance_ = 0;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	61da      	str	r2, [r3, #28]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:
float Encoder::getCrossLineIgnoreDistance()
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	ee07 3a90 	vmov	s15, r3
}
 80016f0:	eeb0 0a67 	vmov.f32	s0, s15
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	621a      	str	r2, [r3, #32]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <_ZN7Encoder20getGoalJudgeDistanceEv>:

float Encoder::getGoalJudgeDistance()
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
	return goal_judge_distance_;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	ee07 3a90 	vmov	s15, r3
}
 800172a:	eeb0 0a67 	vmov.f32	s0, s15
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <_ZN7Encoder22clearGoalJudgeDistanceEv>:

void Encoder::clearGoalJudgeDistance()
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	goal_judge_distance_= 0;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001754:	b590      	push	{r4, r7, lr}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af02      	add	r7, sp, #8
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	4613      	mov	r3, r2
 8001762:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f000 f8e4 	bl	8001938 <create_path>

	if(state == OVER_WRITE){
 8001770:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001774:	2b00      	cmp	r3, #0
 8001776:	d108      	bne.n	800178a <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001778:	4822      	ldr	r0, [pc, #136]	; (8001804 <sd_write_array_float+0xb0>)
 800177a:	f014 f80b 	bl	8015794 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800177e:	4822      	ldr	r0, [pc, #136]	; (8001808 <sd_write_array_float+0xb4>)
 8001780:	f014 fa76 	bl	8015c70 <f_unlink>
		f_chdir("..");
 8001784:	4821      	ldr	r0, [pc, #132]	; (800180c <sd_write_array_float+0xb8>)
 8001786:	f014 f805 	bl	8015794 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 800178a:	f000 f8eb 	bl	8001964 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800178e:	2300      	movs	r3, #0
 8001790:	82fb      	strh	r3, [r7, #22]
 8001792:	e028      	b.n	80017e6 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001794:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	4413      	add	r3, r2
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fee9 	bl	8000578 <__aeabi_f2d>
 80017a6:	4603      	mov	r3, r0
 80017a8:	460c      	mov	r4, r1
 80017aa:	e9cd 3400 	strd	r3, r4, [sp]
 80017ae:	4a18      	ldr	r2, [pc, #96]	; (8001810 <sd_write_array_float+0xbc>)
 80017b0:	2180      	movs	r1, #128	; 0x80
 80017b2:	4818      	ldr	r0, [pc, #96]	; (8001814 <sd_write_array_float+0xc0>)
 80017b4:	f015 fc7c 	bl	80170b0 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <sd_write_array_float+0xc4>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	4619      	mov	r1, r3
 80017be:	4816      	ldr	r0, [pc, #88]	; (8001818 <sd_write_array_float+0xc4>)
 80017c0:	f014 f832 	bl	8015828 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80017c4:	4813      	ldr	r0, [pc, #76]	; (8001814 <sd_write_array_float+0xc0>)
 80017c6:	f7fe fd1b 	bl	8000200 <strlen>
 80017ca:	4602      	mov	r2, r0
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <sd_write_array_float+0xc8>)
 80017ce:	4911      	ldr	r1, [pc, #68]	; (8001814 <sd_write_array_float+0xc0>)
 80017d0:	4811      	ldr	r0, [pc, #68]	; (8001818 <sd_write_array_float+0xc4>)
 80017d2:	f013 fda0 	bl	8015316 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80017d6:	f000 f8df 	bl	8001998 <bufclear>
	for(short i = 0 ; i < size; i++){
 80017da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	3301      	adds	r3, #1
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	82fb      	strh	r3, [r7, #22]
 80017e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	dbd0      	blt.n	8001794 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80017f2:	4809      	ldr	r0, [pc, #36]	; (8001818 <sd_write_array_float+0xc4>)
 80017f4:	f013 ffa4 	bl	8015740 <f_close>

	return ret;
 80017f8:	7d7b      	ldrb	r3, [r7, #21]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	371c      	adds	r7, #28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd90      	pop	{r4, r7, pc}
 8001802:	bf00      	nop
 8001804:	200487c8 	.word	0x200487c8
 8001808:	20047688 	.word	0x20047688
 800180c:	0801a66c 	.word	0x0801a66c
 8001810:	0801a650 	.word	0x0801a650
 8001814:	200488c8 	.word	0x200488c8
 8001818:	20048958 	.word	0x20048958
 800181c:	20048948 	.word	0x20048948

08001820 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	4613      	mov	r3, r2
 800182e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 f87c 	bl	8001938 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001840:	f000 f890 	bl	8001964 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001844:	e019      	b.n	800187a <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 8001846:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	4413      	add	r3, r2
 8001850:	461a      	mov	r2, r3
 8001852:	4913      	ldr	r1, [pc, #76]	; (80018a0 <sd_read_array_float+0x80>)
 8001854:	4813      	ldr	r0, [pc, #76]	; (80018a4 <sd_read_array_float+0x84>)
 8001856:	f015 fc7f 	bl	8017158 <siscanf>
		i++;
 800185a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800185e:	b29b      	uxth	r3, r3
 8001860:	3301      	adds	r3, #1
 8001862:	b29b      	uxth	r3, r3
 8001864:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001866:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800186a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800186e:	429a      	cmp	r2, r3
 8001870:	db03      	blt.n	800187a <sd_read_array_float+0x5a>
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	3b01      	subs	r3, #1
 8001876:	b29b      	uxth	r3, r3
 8001878:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800187a:	4a0b      	ldr	r2, [pc, #44]	; (80018a8 <sd_read_array_float+0x88>)
 800187c:	2180      	movs	r1, #128	; 0x80
 800187e:	4809      	ldr	r0, [pc, #36]	; (80018a4 <sd_read_array_float+0x84>)
 8001880:	f014 fbd4 	bl	801602c <f_gets>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1dd      	bne.n	8001846 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800188a:	f000 f885 	bl	8001998 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800188e:	4806      	ldr	r0, [pc, #24]	; (80018a8 <sd_read_array_float+0x88>)
 8001890:	f013 ff56 	bl	8015740 <f_close>

	return ret;
 8001894:	7d7b      	ldrb	r3, [r7, #21]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	0801a65c 	.word	0x0801a65c
 80018a4:	200488c8 	.word	0x200488c8
 80018a8:	20048958 	.word	0x20048958

080018ac <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	4613      	mov	r3, r2
 80018ba:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80018c4:	68b9      	ldr	r1, [r7, #8]
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f000 f836 	bl	8001938 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80018cc:	f000 f84a 	bl	8001964 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80018d0:	e019      	b.n	8001906 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80018d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	4413      	add	r3, r2
 80018dc:	461a      	mov	r2, r3
 80018de:	4913      	ldr	r1, [pc, #76]	; (800192c <sd_read_array_double+0x80>)
 80018e0:	4813      	ldr	r0, [pc, #76]	; (8001930 <sd_read_array_double+0x84>)
 80018e2:	f015 fc39 	bl	8017158 <siscanf>
		i++;
 80018e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	3301      	adds	r3, #1
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80018f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80018f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	db03      	blt.n	8001906 <sd_read_array_double+0x5a>
 80018fe:	88fb      	ldrh	r3, [r7, #6]
 8001900:	3b01      	subs	r3, #1
 8001902:	b29b      	uxth	r3, r3
 8001904:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001906:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <sd_read_array_double+0x88>)
 8001908:	2180      	movs	r1, #128	; 0x80
 800190a:	4809      	ldr	r0, [pc, #36]	; (8001930 <sd_read_array_double+0x84>)
 800190c:	f014 fb8e 	bl	801602c <f_gets>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1dd      	bne.n	80018d2 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001916:	f000 f83f 	bl	8001998 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800191a:	4806      	ldr	r0, [pc, #24]	; (8001934 <sd_read_array_double+0x88>)
 800191c:	f013 ff10 	bl	8015740 <f_close>

	return ret;
 8001920:	7d7b      	ldrb	r3, [r7, #21]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	0801a668 	.word	0x0801a668
 8001930:	200488c8 	.word	0x200488c8
 8001934:	20048958 	.word	0x20048958

08001938 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4805      	ldr	r0, [pc, #20]	; (800195c <create_path+0x24>)
 8001946:	f015 fc33 	bl	80171b0 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 800194a:	6839      	ldr	r1, [r7, #0]
 800194c:	4804      	ldr	r0, [pc, #16]	; (8001960 <create_path+0x28>)
 800194e:	f015 fc2f 	bl	80171b0 <strcpy>

}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200487c8 	.word	0x200487c8
 8001960:	20047688 	.word	0x20047688

08001964 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001968:	4807      	ldr	r0, [pc, #28]	; (8001988 <fopen_folder_and_file+0x24>)
 800196a:	f014 fa43 	bl	8015df4 <f_mkdir>

	f_chdir(dirpath);
 800196e:	4806      	ldr	r0, [pc, #24]	; (8001988 <fopen_folder_and_file+0x24>)
 8001970:	f013 ff10 	bl	8015794 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001974:	2213      	movs	r2, #19
 8001976:	4905      	ldr	r1, [pc, #20]	; (800198c <fopen_folder_and_file+0x28>)
 8001978:	4805      	ldr	r0, [pc, #20]	; (8001990 <fopen_folder_and_file+0x2c>)
 800197a:	f013 f99f 	bl	8014cbc <f_open>

	f_chdir("..");
 800197e:	4805      	ldr	r0, [pc, #20]	; (8001994 <fopen_folder_and_file+0x30>)
 8001980:	f013 ff08 	bl	8015794 <f_chdir>


}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200487c8 	.word	0x200487c8
 800198c:	20047688 	.word	0x20047688
 8001990:	20048958 	.word	0x20048958
 8001994:	0801a66c 	.word	0x0801a66c

08001998 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	e007      	b.n	80019b4 <bufclear+0x1c>
		buffer[i] = '\0';
 80019a4:	4a08      	ldr	r2, [pc, #32]	; (80019c8 <bufclear+0x30>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3301      	adds	r3, #1
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b7f      	cmp	r3, #127	; 0x7f
 80019b8:	ddf4      	ble.n	80019a4 <bufclear+0xc>
	}
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	200488c8 	.word	0x200488c8

080019cc <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80019e0:	2200      	movs	r2, #0
 80019e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019e6:	480e      	ldr	r0, [pc, #56]	; (8001a20 <read_byte+0x54>)
 80019e8:	f00b f94e 	bl	800cc88 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80019ec:	f107 010f 	add.w	r1, r7, #15
 80019f0:	2364      	movs	r3, #100	; 0x64
 80019f2:	2201      	movs	r2, #1
 80019f4:	480b      	ldr	r0, [pc, #44]	; (8001a24 <read_byte+0x58>)
 80019f6:	f00e fb0f 	bl	8010018 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 80019fa:	f107 010e 	add.w	r1, r7, #14
 80019fe:	2364      	movs	r3, #100	; 0x64
 8001a00:	2201      	movs	r2, #1
 8001a02:	4808      	ldr	r0, [pc, #32]	; (8001a24 <read_byte+0x58>)
 8001a04:	f00e fc3c 	bl	8010280 <HAL_SPI_Receive>
	CS_SET;
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a0e:	4804      	ldr	r0, [pc, #16]	; (8001a20 <read_byte+0x54>)
 8001a10:	f00b f93a 	bl	800cc88 <HAL_GPIO_WritePin>

	return val;
 8001a14:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40020400 	.word	0x40020400
 8001a24:	200499f4 	.word	0x200499f4

08001a28 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	460a      	mov	r2, r1
 8001a32:	71fb      	strb	r3, [r7, #7]
 8001a34:	4613      	mov	r3, r2
 8001a36:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001a42:	2200      	movs	r2, #0
 8001a44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a48:	480c      	ldr	r0, [pc, #48]	; (8001a7c <write_byte+0x54>)
 8001a4a:	f00b f91d 	bl	800cc88 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001a4e:	f107 010f 	add.w	r1, r7, #15
 8001a52:	2364      	movs	r3, #100	; 0x64
 8001a54:	2201      	movs	r2, #1
 8001a56:	480a      	ldr	r0, [pc, #40]	; (8001a80 <write_byte+0x58>)
 8001a58:	f00e fade 	bl	8010018 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001a5c:	1db9      	adds	r1, r7, #6
 8001a5e:	2364      	movs	r3, #100	; 0x64
 8001a60:	2201      	movs	r2, #1
 8001a62:	4807      	ldr	r0, [pc, #28]	; (8001a80 <write_byte+0x58>)
 8001a64:	f00e fad8 	bl	8010018 <HAL_SPI_Transmit>
	CS_SET;
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a6e:	4803      	ldr	r0, [pc, #12]	; (8001a7c <write_byte+0x54>)
 8001a70:	f00b f90a 	bl	800cc88 <HAL_GPIO_WritePin>
}
 8001a74:	bf00      	nop
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	200499f4 	.word	0x200499f4

08001a84 <IMU_init>:

uint16_t IMU_init() {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7ff ff9c 	bl	80019cc <read_byte>
 8001a94:	4603      	mov	r3, r0
 8001a96:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001a98:	797b      	ldrb	r3, [r7, #5]
 8001a9a:	2be0      	cmp	r3, #224	; 0xe0
 8001a9c:	d119      	bne.n	8001ad2 <IMU_init+0x4e>
		ret = 1;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	2006      	movs	r0, #6
 8001aa6:	f7ff ffbf 	bl	8001a28 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001aaa:	2110      	movs	r1, #16
 8001aac:	2003      	movs	r0, #3
 8001aae:	f7ff ffbb 	bl	8001a28 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001ab2:	2120      	movs	r1, #32
 8001ab4:	207f      	movs	r0, #127	; 0x7f
 8001ab6:	f7ff ffb7 	bl	8001a28 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001aba:	2106      	movs	r1, #6
 8001abc:	2001      	movs	r0, #1
 8001abe:	f7ff ffb3 	bl	8001a28 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001ac2:	2106      	movs	r1, #6
 8001ac4:	2014      	movs	r0, #20
 8001ac6:	f7ff ffaf 	bl	8001a28 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001aca:	2100      	movs	r1, #0
 8001acc:	207f      	movs	r0, #127	; 0x7f
 8001ace:	f7ff ffab 	bl	8001a28 <write_byte>
	}
	return ret;
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <read_gyro_data>:

void read_gyro_data() {
 8001adc:	b598      	push	{r3, r4, r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001ae0:	2033      	movs	r0, #51	; 0x33
 8001ae2:	f7ff ff73 	bl	80019cc <read_byte>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	b21c      	sxth	r4, r3
 8001aec:	2034      	movs	r0, #52	; 0x34
 8001aee:	f7ff ff6d 	bl	80019cc <read_byte>
 8001af2:	4603      	mov	r3, r0
 8001af4:	b21b      	sxth	r3, r3
 8001af6:	4323      	orrs	r3, r4
 8001af8:	b21a      	sxth	r2, r3
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <read_gyro_data+0x64>)
 8001afc:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001afe:	2035      	movs	r0, #53	; 0x35
 8001b00:	f7ff ff64 	bl	80019cc <read_byte>
 8001b04:	4603      	mov	r3, r0
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	b21c      	sxth	r4, r3
 8001b0a:	2036      	movs	r0, #54	; 0x36
 8001b0c:	f7ff ff5e 	bl	80019cc <read_byte>
 8001b10:	4603      	mov	r3, r0
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	4323      	orrs	r3, r4
 8001b16:	b21a      	sxth	r2, r3
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <read_gyro_data+0x68>)
 8001b1a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001b1c:	2037      	movs	r0, #55	; 0x37
 8001b1e:	f7ff ff55 	bl	80019cc <read_byte>
 8001b22:	4603      	mov	r3, r0
 8001b24:	021b      	lsls	r3, r3, #8
 8001b26:	b21c      	sxth	r4, r3
 8001b28:	2038      	movs	r0, #56	; 0x38
 8001b2a:	f7ff ff4f 	bl	80019cc <read_byte>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	b21b      	sxth	r3, r3
 8001b32:	4323      	orrs	r3, r4
 8001b34:	b21a      	sxth	r2, r3
 8001b36:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <read_gyro_data+0x6c>)
 8001b38:	801a      	strh	r2, [r3, #0]
}
 8001b3a:	bf00      	nop
 8001b3c:	bd98      	pop	{r3, r4, r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20049990 	.word	0x20049990
 8001b44:	2004998e 	.word	0x2004998e
 8001b48:	20049988 	.word	0x20049988

08001b4c <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	801a      	strh	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	805a      	strh	r2, [r3, #2]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	809a      	strh	r2, [r3, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	80da      	strh	r2, [r3, #6]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	811a      	strh	r2, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	815a      	strh	r2, [r3, #10]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	60da      	str	r2, [r3, #12]
{

}
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001b98:	f7ff ff74 	bl	8001a84 <IMU_init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001ba0:	f7ff fa7e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f7ff fa8a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001bac:	4809      	ldr	r0, [pc, #36]	; (8001bd4 <_ZN3IMU4initEv+0x44>)
 8001bae:	f7ff fab1 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f7ff fa83 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001bba:	89fb      	ldrh	r3, [r7, #14]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4806      	ldr	r0, [pc, #24]	; (8001bd8 <_ZN3IMU4initEv+0x48>)
 8001bc0:	f7ff faa8 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001bc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bc8:	f009 fdc8 	bl	800b75c <HAL_Delay>

}
 8001bcc:	bf00      	nop
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	0801a67c 	.word	0x0801a67c
 8001bd8:	0801a688 	.word	0x0801a688
 8001bdc:	00000000 	.word	0x00000000

08001be0 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001be0:	b5b0      	push	{r4, r5, r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001be8:	f7ff ff78 	bl	8001adc <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001bec:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <_ZN3IMU12updateValuesEv+0xa0>)
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	b21a      	sxth	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001bf6:	4b23      	ldr	r3, [pc, #140]	; (8001c84 <_ZN3IMU12updateValuesEv+0xa4>)
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	b21a      	sxth	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001c00:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <_ZN3IMU12updateValuesEv+0xa8>)
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	b21a      	sxth	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fc9f 	bl	8000554 <__aeabi_i2d>
 8001c16:	a316      	add	r3, pc, #88	; (adr r3, 8001c70 <_ZN3IMU12updateValuesEv+0x90>)
 8001c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1c:	f7fe fd04 	bl	8000628 <__aeabi_dmul>
 8001c20:	4603      	mov	r3, r0
 8001c22:	460c      	mov	r4, r1
 8001c24:	4625      	mov	r5, r4
 8001c26:	461c      	mov	r4, r3
 8001c28:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <_ZN3IMU12updateValuesEv+0xac>)
 8001c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fc90 	bl	8000554 <__aeabi_i2d>
 8001c34:	a310      	add	r3, pc, #64	; (adr r3, 8001c78 <_ZN3IMU12updateValuesEv+0x98>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	f7fe fcf5 	bl	8000628 <__aeabi_dmul>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4620      	mov	r0, r4
 8001c44:	4629      	mov	r1, r5
 8001c46:	f7fe fb39 	bl	80002bc <__adddf3>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	460c      	mov	r4, r1
 8001c4e:	4618      	mov	r0, r3
 8001c50:	4621      	mov	r1, r4
 8001c52:	f7fe ff99 	bl	8000b88 <__aeabi_d2iz>
 8001c56:	4603      	mov	r3, r0
 8001c58:	b21a      	sxth	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <_ZN3IMU12updateValuesEv+0xac>)
 8001c66:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c70:	47ae147b 	.word	0x47ae147b
 8001c74:	3f847ae1 	.word	0x3f847ae1
 8001c78:	7ae147ae 	.word	0x7ae147ae
 8001c7c:	3fefae14 	.word	0x3fefae14
 8001c80:	20049990 	.word	0x20049990
 8001c84:	2004998e 	.word	0x2004998e
 8001c88:	20049988 	.word	0x20049988
 8001c8c:	200001fc 	.word	0x200001fc

08001c90 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001c90:	b5b0      	push	{r4, r5, r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c9e:	ee07 3a90 	vmov	s15, r3
 8001ca2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb0:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f7fe fc5f 	bl	8000578 <__aeabi_f2d>
 8001cba:	a316      	add	r3, pc, #88	; (adr r3, 8001d14 <_ZN3IMU8getOmegaEv+0x84>)
 8001cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc0:	f7fe fddc 	bl	800087c <__aeabi_ddiv>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4614      	mov	r4, r2
 8001cca:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001cce:	a313      	add	r3, pc, #76	; (adr r3, 8001d1c <_ZN3IMU8getOmegaEv+0x8c>)
 8001cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	4629      	mov	r1, r5
 8001cd8:	f7fe fca6 	bl	8000628 <__aeabi_dmul>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	460c      	mov	r4, r1
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <_ZN3IMU8getOmegaEv+0x80>)
 8001cea:	f7fe fdc7 	bl	800087c <__aeabi_ddiv>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	460c      	mov	r4, r1
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	4621      	mov	r1, r4
 8001cf6:	f7fe ff8f 	bl	8000c18 <__aeabi_d2f>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	60bb      	str	r3, [r7, #8]

	return omega;
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	ee07 3a90 	vmov	s15, r3
}
 8001d04:	eeb0 0a67 	vmov.f32	s0, s15
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40668000 	.word	0x40668000
 8001d14:	66666666 	.word	0x66666666
 8001d18:	40306666 	.word	0x40306666
 8001d1c:	54411744 	.word	0x54411744
 8001d20:	400921fb 	.word	0x400921fb

08001d24 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d26:	b08b      	sub	sp, #44	; 0x2c
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001d2c:	466b      	mov	r3, sp
 8001d2e:	461e      	mov	r6, r3
	HAL_Delay(800);
 8001d30:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001d34:	f009 fd12 	bl	800b75c <HAL_Delay>
	lcd_clear();
 8001d38:	f7ff f9b2 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f7ff f9be 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001d44:	4840      	ldr	r0, [pc, #256]	; (8001e48 <_ZN3IMU11calibrationEv+0x124>)
 8001d46:	f7ff f9e5 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f7ff f9b7 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001d52:	483e      	ldr	r0, [pc, #248]	; (8001e4c <_ZN3IMU11calibrationEv+0x128>)
 8001d54:	f7ff f9de 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001d58:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001d5c:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001d5e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d62:	1e5d      	subs	r5, r3, #1
 8001d64:	61bd      	str	r5, [r7, #24]
 8001d66:	462b      	mov	r3, r5
 8001d68:	3301      	adds	r3, #1
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	f04f 0400 	mov.w	r4, #0
 8001d78:	0154      	lsls	r4, r2, #5
 8001d7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d7e:	014b      	lsls	r3, r1, #5
 8001d80:	462b      	mov	r3, r5
 8001d82:	3301      	adds	r3, #1
 8001d84:	4619      	mov	r1, r3
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	f04f 0400 	mov.w	r4, #0
 8001d92:	0154      	lsls	r4, r2, #5
 8001d94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d98:	014b      	lsls	r3, r1, #5
 8001d9a:	462b      	mov	r3, r5
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	3303      	adds	r3, #3
 8001da2:	3307      	adds	r3, #7
 8001da4:	08db      	lsrs	r3, r3, #3
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	ebad 0d03 	sub.w	sp, sp, r3
 8001dac:	466b      	mov	r3, sp
 8001dae:	3303      	adds	r3, #3
 8001db0:	089b      	lsrs	r3, r3, #2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001db6:	2300      	movs	r3, #0
 8001db8:	83fb      	strh	r3, [r7, #30]
 8001dba:	8bfa      	ldrh	r2, [r7, #30]
 8001dbc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	da13      	bge.n	8001dec <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001dca:	8bfb      	ldrh	r3, [r7, #30]
 8001dcc:	ee07 2a90 	vmov	s15, r2
 8001dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(1);
 8001dde:	2001      	movs	r0, #1
 8001de0:	f009 fcbc 	bl	800b75c <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001de4:	8bfb      	ldrh	r3, [r7, #30]
 8001de6:	3301      	adds	r3, #1
 8001de8:	83fb      	strh	r3, [r7, #30]
 8001dea:	e7e6      	b.n	8001dba <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	462b      	mov	r3, r5
 8001df4:	3301      	adds	r3, #1
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d00e      	beq.n	8001e22 <_ZN3IMU11calibrationEv+0xfe>
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	edd3 7a00 	vldr	s15, [r3]
 8001e0e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e16:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e20:	e7ec      	b.n	8001dfc <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001e22:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e26:	ee07 3a90 	vmov	s15, r3
 8001e2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e2e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	edc3 7a03 	vstr	s15, [r3, #12]
 8001e3c:	46b5      	mov	sp, r6
}
 8001e3e:	bf00      	nop
 8001e40:	372c      	adds	r7, #44	; 0x2c
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e46:	bf00      	nop
 8001e48:	0801a68c 	.word	0x0801a68c
 8001e4c:	0801a698 	.word	0x0801a698

08001e50 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	4603      	mov	r3, r0
 8001e58:	460a      	mov	r2, r1
 8001e5a:	71fb      	strb	r3, [r7, #7]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001e60:	79bb      	ldrb	r3, [r7, #6]
 8001e62:	b299      	uxth	r1, r3
 8001e64:	1dfa      	adds	r2, r7, #7
 8001e66:	2364      	movs	r3, #100	; 0x64
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	480c      	ldr	r0, [pc, #48]	; (8001ea0 <INA260_read+0x50>)
 8001e6e:	f00b f875 	bl	800cf5c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001e72:	79bb      	ldrb	r3, [r7, #6]
 8001e74:	b299      	uxth	r1, r3
 8001e76:	f107 020c 	add.w	r2, r7, #12
 8001e7a:	2364      	movs	r3, #100	; 0x64
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	2302      	movs	r3, #2
 8001e80:	4807      	ldr	r0, [pc, #28]	; (8001ea0 <INA260_read+0x50>)
 8001e82:	f00b f969 	bl	800d158 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001e86:	7b3b      	ldrb	r3, [r7, #12]
 8001e88:	021b      	lsls	r3, r3, #8
 8001e8a:	b21a      	sxth	r2, r3
 8001e8c:	7b7b      	ldrb	r3, [r7, #13]
 8001e8e:	b21b      	sxth	r3, r3
 8001e90:	4313      	orrs	r3, r2
 8001e92:	b21b      	sxth	r3, r3
 8001e94:	81fb      	strh	r3, [r7, #14]
	return val;
 8001e96:	89fb      	ldrh	r3, [r7, #14]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20049ba8 	.word	0x20049ba8

08001ea4 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001ea4:	b590      	push	{r4, r7, lr}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	4604      	mov	r4, r0
 8001eac:	4608      	mov	r0, r1
 8001eae:	4611      	mov	r1, r2
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4623      	mov	r3, r4
 8001eb4:	71fb      	strb	r3, [r7, #7]
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71bb      	strb	r3, [r7, #6]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	717b      	strb	r3, [r7, #5]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	733b      	strb	r3, [r7, #12]
 8001ec6:	79bb      	ldrb	r3, [r7, #6]
 8001ec8:	737b      	strb	r3, [r7, #13]
 8001eca:	797b      	ldrb	r3, [r7, #5]
 8001ecc:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001ece:	793b      	ldrb	r3, [r7, #4]
 8001ed0:	b299      	uxth	r1, r3
 8001ed2:	f107 020c 	add.w	r2, r7, #12
 8001ed6:	2364      	movs	r3, #100	; 0x64
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	2303      	movs	r3, #3
 8001edc:	4803      	ldr	r0, [pc, #12]	; (8001eec <INA260_write+0x48>)
 8001ede:	f00b f83d 	bl	800cf5c <HAL_I2C_Master_Transmit>
}
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd90      	pop	{r4, r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20049ba8 	.word	0x20049ba8

08001ef0 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
 8001efa:	460b      	mov	r3, r1
 8001efc:	71bb      	strb	r3, [r7, #6]
 8001efe:	4613      	mov	r3, r2
 8001f00:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001f02:	797b      	ldrb	r3, [r7, #5]
 8001f04:	79ba      	ldrb	r2, [r7, #6]
 8001f06:	79f9      	ldrb	r1, [r7, #7]
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f7ff ffcb 	bl	8001ea4 <INA260_write>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	461a      	mov	r2, r3
 8001f24:	21df      	movs	r1, #223	; 0xdf
 8001f26:	2000      	movs	r0, #0
 8001f28:	f7ff ffe2 	bl	8001ef0 <setConfig>
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
{

}
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001f58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f5c:	482a      	ldr	r0, [pc, #168]	; (8002008 <_ZN8JoyStick8getValueEv+0xbc>)
 8001f5e:	f00a fe7b 	bl	800cc58 <HAL_GPIO_ReadPin>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bf0c      	ite	eq
 8001f68:	2301      	moveq	r3, #1
 8001f6a:	2300      	movne	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <_ZN8JoyStick8getValueEv+0x2e>
 8001f72:	89fb      	ldrh	r3, [r7, #14]
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	4823      	ldr	r0, [pc, #140]	; (800200c <_ZN8JoyStick8getValueEv+0xc0>)
 8001f7e:	f00a fe6b 	bl	800cc58 <HAL_GPIO_ReadPin>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	bf0c      	ite	eq
 8001f88:	2301      	moveq	r3, #1
 8001f8a:	2300      	movne	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <_ZN8JoyStick8getValueEv+0x4e>
 8001f92:	89fb      	ldrh	r3, [r7, #14]
 8001f94:	f043 0302 	orr.w	r3, r3, #2
 8001f98:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001f9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f9e:	481a      	ldr	r0, [pc, #104]	; (8002008 <_ZN8JoyStick8getValueEv+0xbc>)
 8001fa0:	f00a fe5a 	bl	800cc58 <HAL_GPIO_ReadPin>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	bf0c      	ite	eq
 8001faa:	2301      	moveq	r3, #1
 8001fac:	2300      	movne	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <_ZN8JoyStick8getValueEv+0x70>
 8001fb4:	89fb      	ldrh	r3, [r7, #14]
 8001fb6:	f043 0304 	orr.w	r3, r3, #4
 8001fba:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001fbc:	2104      	movs	r1, #4
 8001fbe:	4814      	ldr	r0, [pc, #80]	; (8002010 <_ZN8JoyStick8getValueEv+0xc4>)
 8001fc0:	f00a fe4a 	bl	800cc58 <HAL_GPIO_ReadPin>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	bf0c      	ite	eq
 8001fca:	2301      	moveq	r3, #1
 8001fcc:	2300      	movne	r3, #0
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <_ZN8JoyStick8getValueEv+0x90>
 8001fd4:	89fb      	ldrh	r3, [r7, #14]
 8001fd6:	f043 0308 	orr.w	r3, r3, #8
 8001fda:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001fdc:	2180      	movs	r1, #128	; 0x80
 8001fde:	480a      	ldr	r0, [pc, #40]	; (8002008 <_ZN8JoyStick8getValueEv+0xbc>)
 8001fe0:	f00a fe3a 	bl	800cc58 <HAL_GPIO_ReadPin>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	bf0c      	ite	eq
 8001fea:	2301      	moveq	r3, #1
 8001fec:	2300      	movne	r3, #0
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <_ZN8JoyStick8getValueEv+0xb0>
 8001ff4:	89fb      	ldrh	r3, [r7, #14]
 8001ff6:	f043 0310 	orr.w	r3, r3, #16
 8001ffa:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001ffc:	89fb      	ldrh	r3, [r7, #14]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	40020c00 	.word	0x40020c00
 8002010:	40020400 	.word	0x40020400

08002014 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	2b52      	cmp	r3, #82	; 0x52
 8002024:	d112      	bne.n	800204c <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800202c:	4856      	ldr	r0, [pc, #344]	; (8002188 <_ZN3LED9fullColorEc+0x174>)
 800202e:	f00a fe2b 	bl	800cc88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002032:	2201      	movs	r2, #1
 8002034:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002038:	4853      	ldr	r0, [pc, #332]	; (8002188 <_ZN3LED9fullColorEc+0x174>)
 800203a:	f00a fe25 	bl	800cc88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800203e:	2201      	movs	r2, #1
 8002040:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002044:	4850      	ldr	r0, [pc, #320]	; (8002188 <_ZN3LED9fullColorEc+0x174>)
 8002046:	f00a fe1f 	bl	800cc88 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 800204a:	e098      	b.n	800217e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	2b47      	cmp	r3, #71	; 0x47
 8002050:	d112      	bne.n	8002078 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002052:	2201      	movs	r2, #1
 8002054:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002058:	484b      	ldr	r0, [pc, #300]	; (8002188 <_ZN3LED9fullColorEc+0x174>)
 800205a:	f00a fe15 	bl	800cc88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800205e:	2200      	movs	r2, #0
 8002060:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002064:	4848      	ldr	r0, [pc, #288]	; (8002188 <_ZN3LED9fullColorEc+0x174>)
 8002066:	f00a fe0f 	bl	800cc88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800206a:	2201      	movs	r2, #1
 800206c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002070:	4845      	ldr	r0, [pc, #276]	; (8002188 <_ZN3LED9fullColorEc+0x174>)
 8002072:	f00a fe09 	bl	800cc88 <HAL_GPIO_WritePin>
}
 8002076:	e082      	b.n	800217e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	2b42      	cmp	r3, #66	; 0x42
 800207c:	d112      	bne.n	80020a4 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800207e:	2201      	movs	r2, #1
 8002080:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002084:	4840      	ldr	r0, [pc, #256]	; (8002188 <_ZN3LED9fullColorEc+0x174>)
 8002086:	f00a fdff 	bl	800cc88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800208a:	2201      	movs	r2, #1
 800208c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002090:	483d      	ldr	r0, [pc, #244]	; (8002188 <_ZN3LED9fullColorEc+0x174>)
 8002092:	f00a fdf9 	bl	800cc88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002096:	2200      	movs	r2, #0
 8002098:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800209c:	483a      	ldr	r0, [pc, #232]	; (8002188 <_ZN3LED9fullColorEc+0x174>)
 800209e:	f00a fdf3 	bl	800cc88 <HAL_GPIO_WritePin>
}
 80020a2:	e06c      	b.n	800217e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	2b43      	cmp	r3, #67	; 0x43
 80020a8:	d112      	bne.n	80020d0 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80020aa:	2201      	movs	r2, #1
 80020ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020b0:	4835      	ldr	r0, [pc, #212]	; (8002188 <_ZN3LED9fullColorEc+0x174>)
 80020b2:	f00a fde9 	bl	800cc88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80020b6:	2200      	movs	r2, #0
 80020b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020bc:	4832      	ldr	r0, [pc, #200]	; (8002188 <_ZN3LED9fullColorEc+0x174>)
 80020be:	f00a fde3 	bl	800cc88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80020c2:	2200      	movs	r2, #0
 80020c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020c8:	482f      	ldr	r0, [pc, #188]	; (8002188 <_ZN3LED9fullColorEc+0x174>)
 80020ca:	f00a fddd 	bl	800cc88 <HAL_GPIO_WritePin>
}
 80020ce:	e056      	b.n	800217e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	2b4d      	cmp	r3, #77	; 0x4d
 80020d4:	d112      	bne.n	80020fc <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80020d6:	2200      	movs	r2, #0
 80020d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020dc:	482a      	ldr	r0, [pc, #168]	; (8002188 <_ZN3LED9fullColorEc+0x174>)
 80020de:	f00a fdd3 	bl	800cc88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80020e2:	2201      	movs	r2, #1
 80020e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020e8:	4827      	ldr	r0, [pc, #156]	; (8002188 <_ZN3LED9fullColorEc+0x174>)
 80020ea:	f00a fdcd 	bl	800cc88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80020ee:	2200      	movs	r2, #0
 80020f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020f4:	4824      	ldr	r0, [pc, #144]	; (8002188 <_ZN3LED9fullColorEc+0x174>)
 80020f6:	f00a fdc7 	bl	800cc88 <HAL_GPIO_WritePin>
}
 80020fa:	e040      	b.n	800217e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	2b59      	cmp	r3, #89	; 0x59
 8002100:	d112      	bne.n	8002128 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002102:	2200      	movs	r2, #0
 8002104:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002108:	481f      	ldr	r0, [pc, #124]	; (8002188 <_ZN3LED9fullColorEc+0x174>)
 800210a:	f00a fdbd 	bl	800cc88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800210e:	2200      	movs	r2, #0
 8002110:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002114:	481c      	ldr	r0, [pc, #112]	; (8002188 <_ZN3LED9fullColorEc+0x174>)
 8002116:	f00a fdb7 	bl	800cc88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800211a:	2201      	movs	r2, #1
 800211c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002120:	4819      	ldr	r0, [pc, #100]	; (8002188 <_ZN3LED9fullColorEc+0x174>)
 8002122:	f00a fdb1 	bl	800cc88 <HAL_GPIO_WritePin>
}
 8002126:	e02a      	b.n	800217e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	2b57      	cmp	r3, #87	; 0x57
 800212c:	d112      	bne.n	8002154 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800212e:	2200      	movs	r2, #0
 8002130:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002134:	4814      	ldr	r0, [pc, #80]	; (8002188 <_ZN3LED9fullColorEc+0x174>)
 8002136:	f00a fda7 	bl	800cc88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800213a:	2200      	movs	r2, #0
 800213c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002140:	4811      	ldr	r0, [pc, #68]	; (8002188 <_ZN3LED9fullColorEc+0x174>)
 8002142:	f00a fda1 	bl	800cc88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002146:	2200      	movs	r2, #0
 8002148:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800214c:	480e      	ldr	r0, [pc, #56]	; (8002188 <_ZN3LED9fullColorEc+0x174>)
 800214e:	f00a fd9b 	bl	800cc88 <HAL_GPIO_WritePin>
}
 8002152:	e014      	b.n	800217e <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002154:	78fb      	ldrb	r3, [r7, #3]
 8002156:	2b7e      	cmp	r3, #126	; 0x7e
 8002158:	d111      	bne.n	800217e <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800215a:	2201      	movs	r2, #1
 800215c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002160:	4809      	ldr	r0, [pc, #36]	; (8002188 <_ZN3LED9fullColorEc+0x174>)
 8002162:	f00a fd91 	bl	800cc88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002166:	2201      	movs	r2, #1
 8002168:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800216c:	4806      	ldr	r0, [pc, #24]	; (8002188 <_ZN3LED9fullColorEc+0x174>)
 800216e:	f00a fd8b 	bl	800cc88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002172:	2201      	movs	r2, #1
 8002174:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002178:	4803      	ldr	r0, [pc, #12]	; (8002188 <_ZN3LED9fullColorEc+0x174>)
 800217a:	f00a fd85 	bl	800cc88 <HAL_GPIO_WritePin>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40020000 	.word	0x40020000

0800218c <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	70fb      	strb	r3, [r7, #3]
 8002198:	4613      	mov	r3, r2
 800219a:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 800219c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d106      	bne.n	80021b2 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80021a4:	2201      	movs	r2, #1
 80021a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021aa:	4813      	ldr	r0, [pc, #76]	; (80021f8 <_ZN3LED2LREaa+0x6c>)
 80021ac:	f00a fd6c 	bl	800cc88 <HAL_GPIO_WritePin>
 80021b0:	e009      	b.n	80021c6 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 80021b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d105      	bne.n	80021c6 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80021ba:	2200      	movs	r2, #0
 80021bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021c0:	480d      	ldr	r0, [pc, #52]	; (80021f8 <_ZN3LED2LREaa+0x6c>)
 80021c2:	f00a fd61 	bl	800cc88 <HAL_GPIO_WritePin>

	if(r_status == 1)
 80021c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d106      	bne.n	80021dc <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80021ce:	2201      	movs	r2, #1
 80021d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021d4:	4808      	ldr	r0, [pc, #32]	; (80021f8 <_ZN3LED2LREaa+0x6c>)
 80021d6:	f00a fd57 	bl	800cc88 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80021da:	e009      	b.n	80021f0 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80021dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d105      	bne.n	80021f0 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80021e4:	2200      	movs	r2, #0
 80021e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021ea:	4803      	ldr	r0, [pc, #12]	; (80021f8 <_ZN3LED2LREaa+0x6c>)
 80021ec:	f00a fd4c 	bl	800cc88 <HAL_GPIO_WritePin>
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40020000 	.word	0x40020000

080021fc <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b092      	sub	sp, #72	; 0x48
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fe92 	bl	8001f34 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	637b      	str	r3, [r7, #52]	; 0x34
 8002214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002216:	647b      	str	r3, [r7, #68]	; 0x44
 8002218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221a:	331c      	adds	r3, #28
 800221c:	633b      	str	r3, [r7, #48]	; 0x30
 800221e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002222:	429a      	cmp	r2, r3
 8002224:	d008      	beq.n	8002238 <_ZN10LineSensorC1Ev+0x3c>
 8002226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800222a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222c:	2200      	movs	r2, #0
 800222e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002232:	3302      	adds	r3, #2
 8002234:	647b      	str	r3, [r7, #68]	; 0x44
 8002236:	e7f2      	b.n	800221e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002242:	643b      	str	r3, [r7, #64]	; 0x40
 8002244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002246:	3338      	adds	r3, #56	; 0x38
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
 800224a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	429a      	cmp	r2, r3
 8002250:	d009      	beq.n	8002266 <_ZN10LineSensorC1Ev+0x6a>
 8002252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002254:	623b      	str	r3, [r7, #32]
		s = 0;
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800225e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002260:	3304      	adds	r3, #4
 8002262:	643b      	str	r3, [r7, #64]	; 0x40
 8002264:	e7f1      	b.n	800224a <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800226c:	61fb      	str	r3, [r7, #28]
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3338      	adds	r3, #56	; 0x38
 8002276:	61bb      	str	r3, [r7, #24]
 8002278:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	429a      	cmp	r2, r3
 800227e:	d009      	beq.n	8002294 <_ZN10LineSensorC1Ev+0x98>
 8002280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002282:	617b      	str	r3, [r7, #20]
		m = 0;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 800228c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800228e:	3304      	adds	r3, #4
 8002290:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002292:	e7f1      	b.n	8002278 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	63bb      	str	r3, [r7, #56]	; 0x38
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	3338      	adds	r3, #56	; 0x38
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d009      	beq.n	80022c2 <_ZN10LineSensorC1Ev+0xc6>
 80022ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022b0:	60bb      	str	r3, [r7, #8]
		s = 1;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022b8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80022ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022bc:	3304      	adds	r3, #4
 80022be:	63bb      	str	r3, [r7, #56]	; 0x38
 80022c0:	e7f1      	b.n	80022a6 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4618      	mov	r0, r3
 80022c6:	3748      	adds	r7, #72	; 0x48
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	220e      	movs	r2, #14
 80022d8:	4619      	mov	r1, r3
 80022da:	4803      	ldr	r0, [pc, #12]	; (80022e8 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80022dc:	f009 faa4 	bl	800b828 <HAL_ADC_Start_DMA>
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20049acc 	.word	0x20049acc

080022ec <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b0d      	cmp	r3, #13
 80022fc:	dc2f      	bgt.n	800235e <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	3392      	adds	r3, #146	; 0x92
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	3304      	adds	r3, #4
 800230a:	ed93 7a00 	vldr	s14, [r3]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002316:	ee07 3a90 	vmov	s15, r3
 800231a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	33a0      	adds	r3, #160	; 0xa0
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	3304      	adds	r3, #4
 800232a:	edd3 7a00 	vldr	s15, [r3]
 800232e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002332:	4b14      	ldr	r3, [pc, #80]	; (8002384 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	4619      	mov	r1, r3
 8002338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	460b      	mov	r3, r1
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	1a5b      	subs	r3, r3, r1
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	68f9      	ldr	r1, [r7, #12]
 8002348:	440b      	add	r3, r1
 800234a:	3306      	adds	r3, #6
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	3304      	adds	r3, #4
 8002352:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	3301      	adds	r3, #1
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	e7cc      	b.n	80022f8 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	3301      	adds	r3, #1
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4b07      	ldr	r3, [pc, #28]	; (8002384 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002368:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b09      	cmp	r3, #9
 8002370:	d902      	bls.n	8002378 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 8002372:	4b04      	ldr	r3, [pc, #16]	; (8002384 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]


}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	200001fe 	.word	0x200001fe

08002388 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002388:	b490      	push	{r4, r7}
 800238a:	b08e      	sub	sp, #56	; 0x38
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002390:	2300      	movs	r3, #0
 8002392:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002396:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800239a:	2b0d      	cmp	r3, #13
 800239c:	f200 8087 	bhi.w	80024ae <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80023a0:	2300      	movs	r3, #0
 80023a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80023a6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80023aa:	2b09      	cmp	r3, #9
 80023ac:	d81c      	bhi.n	80023e8 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80023ae:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80023b2:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80023b6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	1a9b      	subs	r3, r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	4423      	add	r3, r4
 80023c6:	3306      	adds	r3, #6
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4403      	add	r3, r0
 80023cc:	3304      	adds	r3, #4
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	008b      	lsls	r3, r1, #2
 80023d2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80023d6:	440b      	add	r3, r1
 80023d8:	3b30      	subs	r3, #48	; 0x30
 80023da:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80023dc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80023e0:	3301      	adds	r3, #1
 80023e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80023e6:	e7de      	b.n	80023a6 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80023e8:	2300      	movs	r3, #0
 80023ea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80023ee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80023f2:	2b09      	cmp	r3, #9
 80023f4:	d84d      	bhi.n	8002492 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80023f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80023fa:	3301      	adds	r3, #1
 80023fc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002400:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002404:	2b09      	cmp	r3, #9
 8002406:	d83e      	bhi.n	8002486 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002408:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002412:	4413      	add	r3, r2
 8002414:	3b30      	subs	r3, #48	; 0x30
 8002416:	ed93 7a00 	vldr	s14, [r3]
 800241a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002424:	4413      	add	r3, r2
 8002426:	3b30      	subs	r3, #48	; 0x30
 8002428:	edd3 7a00 	vldr	s15, [r3]
 800242c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002434:	d521      	bpl.n	800247a <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002436:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002440:	4413      	add	r3, r2
 8002442:	3b30      	subs	r3, #48	; 0x30
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002448:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800244c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002450:	0092      	lsls	r2, r2, #2
 8002452:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002456:	440a      	add	r2, r1
 8002458:	3a30      	subs	r2, #48	; 0x30
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002462:	440b      	add	r3, r1
 8002464:	3b30      	subs	r3, #48	; 0x30
 8002466:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002468:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002472:	4413      	add	r3, r2
 8002474:	3b30      	subs	r3, #48	; 0x30
 8002476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002478:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 800247a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800247e:	3301      	adds	r3, #1
 8002480:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002484:	e7bc      	b.n	8002400 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 8002486:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800248a:	3301      	adds	r3, #1
 800248c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002490:	e7ad      	b.n	80023ee <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 8002492:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	33b0      	adds	r3, #176	; 0xb0
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	440b      	add	r3, r1
 80024a0:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80024a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80024a6:	3301      	adds	r3, #1
 80024a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80024ac:	e773      	b.n	8002396 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	mon_sens9 = sensor[9];
	mon_sens10 = sensor[10];
	mon_sens11 = sensor[11];
	mon_sens12 = sensor[12];
	*/
}
 80024ae:	bf00      	nop
 80024b0:	3738      	adds	r7, #56	; 0x38
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc90      	pop	{r4, r7}
 80024b6:	4770      	bx	lr

080024b8 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b0a0      	sub	sp, #128	; 0x80
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80024c0:	2064      	movs	r0, #100	; 0x64
 80024c2:	f009 f94b 	bl	800b75c <HAL_Delay>

	lcd_clear();
 80024c6:	f7fe fdeb 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80024ca:	2100      	movs	r1, #0
 80024cc:	2000      	movs	r0, #0
 80024ce:	f7fe fdf7 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80024d2:	4886      	ldr	r0, [pc, #536]	; (80026ec <_ZN10LineSensor11calibrationEv+0x234>)
 80024d4:	f7fe fe1e 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80024d8:	2101      	movs	r1, #1
 80024da:	2000      	movs	r0, #0
 80024dc:	f7fe fdf0 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80024e0:	4883      	ldr	r0, [pc, #524]	; (80026f0 <_ZN10LineSensor11calibrationEv+0x238>)
 80024e2:	f7fe fe17 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024e6:	2300      	movs	r3, #0
 80024e8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80024ec:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80024f0:	2b0d      	cmp	r3, #13
 80024f2:	d823      	bhi.n	800253c <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 80024f4:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80024f8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	32b0      	adds	r2, #176	; 0xb0
 8002500:	0092      	lsls	r2, r2, #2
 8002502:	440a      	add	r2, r1
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800250c:	440b      	add	r3, r1
 800250e:	3b40      	subs	r3, #64	; 0x40
 8002510:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002512:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002516:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	32b0      	adds	r2, #176	; 0xb0
 800251e:	0092      	lsls	r2, r2, #2
 8002520:	440a      	add	r2, r1
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800252a:	440b      	add	r3, r1
 800252c:	3b78      	subs	r3, #120	; 0x78
 800252e:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002530:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002534:	3301      	adds	r3, #1
 8002536:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800253a:	e7d7      	b.n	80024ec <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fd02 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 8002548:	4603      	mov	r3, r0
 800254a:	2b02      	cmp	r3, #2
 800254c:	bf14      	ite	ne
 800254e:	2301      	movne	r3, #1
 8002550:	2300      	moveq	r3, #0
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d079      	beq.n	800264c <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002558:	2300      	movs	r3, #0
 800255a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800255e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002562:	2b0d      	cmp	r3, #13
 8002564:	d850      	bhi.n	8002608 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 8002566:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002570:	4413      	add	r3, r2
 8002572:	3b40      	subs	r3, #64	; 0x40
 8002574:	ed93 7a00 	vldr	s14, [r3]
 8002578:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	33b0      	adds	r3, #176	; 0xb0
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	edd3 7a00 	vldr	s15, [r3]
 8002588:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800258c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002590:	d50f      	bpl.n	80025b2 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 8002592:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002596:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	32b0      	adds	r2, #176	; 0xb0
 800259e:	0092      	lsls	r2, r2, #2
 80025a0:	440a      	add	r2, r1
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80025aa:	440b      	add	r3, r1
 80025ac:	3b40      	subs	r3, #64	; 0x40
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	e024      	b.n	80025fc <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80025b2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025bc:	4413      	add	r3, r2
 80025be:	3b78      	subs	r3, #120	; 0x78
 80025c0:	ed93 7a00 	vldr	s14, [r3]
 80025c4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	33b0      	adds	r3, #176	; 0xb0
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	edd3 7a00 	vldr	s15, [r3]
 80025d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025dc:	dd0e      	ble.n	80025fc <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80025de:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80025e2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	32b0      	adds	r2, #176	; 0xb0
 80025ea:	0092      	lsls	r2, r2, #2
 80025ec:	440a      	add	r2, r1
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80025f6:	440b      	add	r3, r1
 80025f8:	3b78      	subs	r3, #120	; 0x78
 80025fa:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025fc:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002600:	3301      	adds	r3, #1
 8002602:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002606:	e7aa      	b.n	800255e <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800260e:	4618      	mov	r0, r3
 8002610:	f003 fa38 	bl	8005a84 <_ZN12RotarySwitch8getValueEv>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	bf0c      	ite	eq
 800261a:	2301      	moveq	r3, #1
 800261c:	2300      	movne	r3, #0
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d009      	beq.n	8002638 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800262a:	2201      	movs	r2, #1
 800262c:	f04f 31ff 	mov.w	r1, #4294967295
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fdab 	bl	800218c <_ZN3LED2LREaa>
 8002636:	e781      	b.n	800253c <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800263e:	2200      	movs	r2, #0
 8002640:	f04f 31ff 	mov.w	r1, #4294967295
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fda1 	bl	800218c <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800264a:	e777      	b.n	800253c <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800264c:	2300      	movs	r3, #0
 800264e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002652:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002656:	2b0d      	cmp	r3, #13
 8002658:	d826      	bhi.n	80026a8 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800265a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002664:	4413      	add	r3, r2
 8002666:	3b40      	subs	r3, #64	; 0x40
 8002668:	ed93 7a00 	vldr	s14, [r3]
 800266c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002676:	4413      	add	r3, r2
 8002678:	3b78      	subs	r3, #120	; 0x78
 800267a:	edd3 7a00 	vldr	s15, [r3]
 800267e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002682:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002686:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80026f4 <_ZN10LineSensor11calibrationEv+0x23c>
 800268a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	3392      	adds	r3, #146	; 0x92
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	3304      	adds	r3, #4
 8002698:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800269c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80026a0:	3301      	adds	r3, #1
 80026a2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80026a6:	e7d4      	b.n	8002652 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80026a8:	2300      	movs	r3, #0
 80026aa:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80026ae:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80026b2:	2b0d      	cmp	r3, #13
 80026b4:	d815      	bhi.n	80026e2 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 80026b6:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80026ba:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80026be:	0092      	lsls	r2, r2, #2
 80026c0:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80026c4:	440a      	add	r2, r1
 80026c6:	3a78      	subs	r2, #120	; 0x78
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	33a0      	adds	r3, #160	; 0xa0
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	3304      	adds	r3, #4
 80026d4:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80026d6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80026da:	3301      	adds	r3, #1
 80026dc:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80026e0:	e7e5      	b.n	80026ae <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 80026e2:	bf00      	nop
 80026e4:	3780      	adds	r7, #128	; 0x80
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	0801a6a4 	.word	0x0801a6a4
 80026f0:	0801a6b0 	.word	0x0801a6b0
 80026f4:	447a0000 	.word	0x447a0000

080026f8 <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 8002704:	2303      	movs	r3, #3
 8002706:	81bb      	strh	r3, [r7, #12]
 8002708:	89bb      	ldrh	r3, [r7, #12]
 800270a:	2b0a      	cmp	r3, #10
 800270c:	d814      	bhi.n	8002738 <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 800270e:	89bb      	ldrh	r3, [r7, #12]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	33b0      	adds	r3, #176	; 0xb0
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	edd3 7a00 	vldr	s15, [r3]
 800271c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800278c <_ZN10LineSensor13emergencyStopEv+0x94>
 8002720:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002728:	db02      	blt.n	8002730 <_ZN10LineSensor13emergencyStopEv+0x38>
 800272a:	89fb      	ldrh	r3, [r7, #14]
 800272c:	3301      	adds	r3, #1
 800272e:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 8002730:	89bb      	ldrh	r3, [r7, #12]
 8002732:	3301      	adds	r3, #1
 8002734:	81bb      	strh	r3, [r7, #12]
 8002736:	e7e7      	b.n	8002708 <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 8002738:	89fb      	ldrh	r3, [r7, #14]
 800273a:	2b07      	cmp	r3, #7
 800273c:	d906      	bls.n	800274c <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 800273e:	4b14      	ldr	r3, [pc, #80]	; (8002790 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	3301      	adds	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	4b12      	ldr	r3, [pc, #72]	; (8002790 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002748:	801a      	strh	r2, [r3, #0]
 800274a:	e002      	b.n	8002752 <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 800274c:	4b10      	ldr	r3, [pc, #64]	; (8002790 <_ZN10LineSensor13emergencyStopEv+0x98>)
 800274e:	2200      	movs	r2, #0
 8002750:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 8002752:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	2b63      	cmp	r3, #99	; 0x63
 8002758:	d903      	bls.n	8002762 <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 800275a:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 800275c:	2201      	movs	r2, #1
 800275e:	701a      	strb	r2, [r3, #0]
 8002760:	e002      	b.n	8002768 <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 8002762:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002768:	4b09      	ldr	r3, [pc, #36]	; (8002790 <_ZN10LineSensor13emergencyStopEv+0x98>)
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002770:	4293      	cmp	r3, r2
 8002772:	d903      	bls.n	800277c <_ZN10LineSensor13emergencyStopEv+0x84>
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002776:	f242 7210 	movw	r2, #10000	; 0x2710
 800277a:	801a      	strh	r2, [r3, #0]

	return flag;
 800277c:	4b05      	ldr	r3, [pc, #20]	; (8002794 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 800277e:	781b      	ldrb	r3, [r3, #0]

}
 8002780:	4618      	mov	r0, r3
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	44098000 	.word	0x44098000
 8002790:	20000200 	.word	0x20000200
 8002794:	20000202 	.word	0x20000202

08002798 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	ed87 0a01 	vstr	s0, [r7, #4]
 80027a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80027a6:	eef0 7ae7 	vabs.f32	s15, s15
 80027aa:	eeb0 0a67 	vmov.f32	s0, s15
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 80027b8:	b480      	push	{r7}
 80027ba:	b089      	sub	sp, #36	; 0x24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	603b      	str	r3, [r7, #0]
				target_velocity_(0), max_velocity_(0), min_velocity_(0), max_velocity2_(0),  min_velocity2_(0), max_velocity3_(0),  min_velocity3_(0), max_velocity4_(0),  min_velocity4_(0),
				logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), sideline_idx2_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_flag_force_(false), stable_cnt_reset_flag_(false),
				max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), max_acc3_(0), max_dec3_(0), max_acc4_(0), max_dec4_(0),
				correction_check_cnt_(0), store_check_cnt_(0), ignore_check_cnt_(0), all_sideline_flag_(false)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	629a      	str	r2, [r3, #40]	; 0x28
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	631a      	str	r2, [r3, #48]	; 0x30
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	645a      	str	r2, [r3, #68]	; 0x44
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800285e:	331c      	adds	r3, #28
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800286c:	3360      	adds	r3, #96	; 0x60
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002878:	3362      	adds	r3, #98	; 0x62
 800287a:	2200      	movs	r2, #0
 800287c:	801a      	strh	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002884:	3364      	adds	r3, #100	; 0x64
 8002886:	2200      	movs	r2, #0
 8002888:	801a      	strh	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002890:	3328      	adds	r3, #40	; 0x28
 8002892:	2200      	movs	r2, #0
 8002894:	801a      	strh	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800289c:	332c      	adds	r3, #44	; 0x2c
 800289e:	2200      	movs	r2, #0
 80028a0:	801a      	strh	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80028a8:	332e      	adds	r3, #46	; 0x2e
 80028aa:	2200      	movs	r2, #0
 80028ac:	801a      	strh	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80028b4:	3330      	adds	r3, #48	; 0x30
 80028b6:	2200      	movs	r2, #0
 80028b8:	801a      	strh	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80028c0:	3332      	adds	r3, #50	; 0x32
 80028c2:	2200      	movs	r2, #0
 80028c4:	701a      	strb	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80028cc:	3333      	adds	r3, #51	; 0x33
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80028d8:	3334      	adds	r3, #52	; 0x34
 80028da:	2200      	movs	r2, #0
 80028dc:	701a      	strb	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80028e4:	3335      	adds	r3, #53	; 0x35
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80028f0:	3338      	adds	r3, #56	; 0x38
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80028fe:	333c      	adds	r3, #60	; 0x3c
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800290c:	3340      	adds	r3, #64	; 0x40
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800291a:	3344      	adds	r3, #68	; 0x44
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002928:	3348      	adds	r3, #72	; 0x48
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002936:	334c      	adds	r3, #76	; 0x4c
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002944:	3350      	adds	r3, #80	; 0x50
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002952:	3354      	adds	r3, #84	; 0x54
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002960:	3358      	adds	r3, #88	; 0x58
 8002962:	2200      	movs	r2, #0
 8002964:	801a      	strh	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800296c:	335a      	adds	r3, #90	; 0x5a
 800296e:	2200      	movs	r2, #0
 8002970:	801a      	strh	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002978:	335c      	adds	r3, #92	; 0x5c
 800297a:	2200      	movs	r2, #0
 800297c:	801a      	strh	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002984:	335e      	adds	r3, #94	; 0x5e
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029a0:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029a6:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ac:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029b2:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029b8:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029be:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80029c0:	2300      	movs	r3, #0
 80029c2:	83fb      	strh	r3, [r7, #30]
 80029c4:	8bfb      	ldrh	r3, [r7, #30]
 80029c6:	f241 726f 	movw	r2, #5999	; 0x176f
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d80d      	bhi.n	80029ea <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x232>
		velocity_table_[i] = 0;
 80029ce:	8bfb      	ldrh	r3, [r7, #30]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80029d6:	3308      	adds	r3, #8
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80029e2:	8bfb      	ldrh	r3, [r7, #30]
 80029e4:	3301      	adds	r3, #1
 80029e6:	83fb      	strh	r3, [r7, #30]
 80029e8:	e7ec      	b.n	80029c4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x20c>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80029ea:	2300      	movs	r3, #0
 80029ec:	83bb      	strh	r3, [r7, #28]
 80029ee:	8bbb      	ldrh	r3, [r7, #28]
 80029f0:	2b63      	cmp	r3, #99	; 0x63
 80029f2:	d80d      	bhi.n	8002a10 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x258>
		crossline_distance_[i] = 0;
 80029f4:	8bbb      	ldrh	r3, [r7, #28]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80029fc:	331a      	adds	r3, #26
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002a08:	8bbb      	ldrh	r3, [r7, #28]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	83bb      	strh	r3, [r7, #28]
 8002a0e:	e7ee      	b.n	80029ee <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x236>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002a10:	2300      	movs	r3, #0
 8002a12:	837b      	strh	r3, [r7, #26]
 8002a14:	8b7b      	ldrh	r3, [r7, #26]
 8002a16:	2b63      	cmp	r3, #99	; 0x63
 8002a18:	d80d      	bhi.n	8002a36 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x27e>
		crossline_distance2_[i] = 0;
 8002a1a:	8b7b      	ldrh	r3, [r7, #26]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002a22:	333e      	adds	r3, #62	; 0x3e
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002a2e:	8b7b      	ldrh	r3, [r7, #26]
 8002a30:	3301      	adds	r3, #1
 8002a32:	837b      	strh	r3, [r7, #26]
 8002a34:	e7ee      	b.n	8002a14 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x25c>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002a36:	2300      	movs	r3, #0
 8002a38:	833b      	strh	r3, [r7, #24]
 8002a3a:	8b3b      	ldrh	r3, [r7, #24]
 8002a3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a40:	d20d      	bcs.n	8002a5e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x2a6>
		sideline_distance_[i] = 0;
 8002a42:	8b3b      	ldrh	r3, [r7, #24]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8002a4a:	3322      	adds	r3, #34	; 0x22
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002a56:	8b3b      	ldrh	r3, [r7, #24]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	833b      	strh	r3, [r7, #24]
 8002a5c:	e7ed      	b.n	8002a3a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x282>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002a5e:	2300      	movs	r3, #0
 8002a60:	82fb      	strh	r3, [r7, #22]
 8002a62:	8afb      	ldrh	r3, [r7, #22]
 8002a64:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a68:	d20d      	bcs.n	8002a86 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x2ce>
		sideline_distance2_[i] = 0;
 8002a6a:	8afb      	ldrh	r3, [r7, #22]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8002a72:	3316      	adds	r3, #22
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002a7e:	8afb      	ldrh	r3, [r7, #22]
 8002a80:	3301      	adds	r3, #1
 8002a82:	82fb      	strh	r3, [r7, #22]
 8002a84:	e7ed      	b.n	8002a62 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x2aa>
	/*
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
		all_sideline_distance_[i] = 0;
	}
	*/
}
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3724      	adds	r7, #36	; 0x24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002aac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002ab8:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002acc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002ad8:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002adc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ae0:	edc7 7a03 	vstr	s15, [r7, #12]
	//mon_diff = diff;

	return diff;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	ee07 3a90 	vmov	s15, r3

}
 8002aea:	eeb0 0a67 	vmov.f32	s0, s15
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002af8:	b5b0      	push	{r4, r5, r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff ffc7 	bl	8002a94 <_ZN9LineTrace9calcErrorEv>
 8002b06:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d007      	beq.n	8002b24 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002b14:	4b6a      	ldr	r3, [pc, #424]	; (8002cc0 <_ZN9LineTrace8pidTraceEv+0x1c8>)
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b2a:	3364      	adds	r3, #100	; 0x64
 8002b2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d150      	bne.n	8002bd6 <_ZN9LineTrace8pidTraceEv+0xde>
		p = kp_slow_ * diff;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002b3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b42:	edc7 7a05 	vstr	s15, [r7, #20]
		d = (kd_slow_ / 10) * (diff - pre_diff) / DELTA_T;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002b4c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002b50:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b54:	4b5b      	ldr	r3, [pc, #364]	; (8002cc4 <_ZN9LineTrace8pidTraceEv+0x1cc>)
 8002b56:	edd3 7a00 	vldr	s15, [r3]
 8002b5a:	edd7 6a03 	vldr	s13, [r7, #12]
 8002b5e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b66:	ee17 0a90 	vmov	r0, s15
 8002b6a:	f7fd fd05 	bl	8000578 <__aeabi_f2d>
 8002b6e:	a352      	add	r3, pc, #328	; (adr r3, 8002cb8 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b74:	f7fd fe82 	bl	800087c <__aeabi_ddiv>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	460c      	mov	r4, r1
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	4621      	mov	r1, r4
 8002b80:	f7fe f84a 	bl	8000c18 <__aeabi_d2f>
 8002b84:	4603      	mov	r3, r0
 8002b86:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002b88:	4b4d      	ldr	r3, [pc, #308]	; (8002cc0 <_ZN9LineTrace8pidTraceEv+0x1c8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fd fcf3 	bl	8000578 <__aeabi_f2d>
 8002b92:	4604      	mov	r4, r0
 8002b94:	460d      	mov	r5, r1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002b9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba4:	ee17 0a90 	vmov	r0, s15
 8002ba8:	f7fd fce6 	bl	8000578 <__aeabi_f2d>
 8002bac:	a342      	add	r3, pc, #264	; (adr r3, 8002cb8 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb2:	f7fd fd39 	bl	8000628 <__aeabi_dmul>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4620      	mov	r0, r4
 8002bbc:	4629      	mov	r1, r5
 8002bbe:	f7fd fb7d 	bl	80002bc <__adddf3>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	460c      	mov	r4, r1
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	4621      	mov	r1, r4
 8002bca:	f7fe f825 	bl	8000c18 <__aeabi_d2f>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	4b3b      	ldr	r3, [pc, #236]	; (8002cc0 <_ZN9LineTrace8pidTraceEv+0x1c8>)
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	e04f      	b.n	8002c76 <_ZN9LineTrace8pidTraceEv+0x17e>
	}
	else{
		p = kp_ * diff;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002bdc:	ed97 7a03 	vldr	s14, [r7, #12]
 8002be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002be4:	edc7 7a05 	vstr	s15, [r7, #20]
		d = (kd_ / 10) * (diff - pre_diff) / DELTA_T;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002bee:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002bf2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002bf6:	4b33      	ldr	r3, [pc, #204]	; (8002cc4 <_ZN9LineTrace8pidTraceEv+0x1cc>)
 8002bf8:	edd3 7a00 	vldr	s15, [r3]
 8002bfc:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c00:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c08:	ee17 0a90 	vmov	r0, s15
 8002c0c:	f7fd fcb4 	bl	8000578 <__aeabi_f2d>
 8002c10:	a329      	add	r3, pc, #164	; (adr r3, 8002cb8 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c16:	f7fd fe31 	bl	800087c <__aeabi_ddiv>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	460c      	mov	r4, r1
 8002c1e:	4618      	mov	r0, r3
 8002c20:	4621      	mov	r1, r4
 8002c22:	f7fd fff9 	bl	8000c18 <__aeabi_d2f>
 8002c26:	4603      	mov	r3, r0
 8002c28:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002c2a:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <_ZN9LineTrace8pidTraceEv+0x1c8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fd fca2 	bl	8000578 <__aeabi_f2d>
 8002c34:	4604      	mov	r4, r0
 8002c36:	460d      	mov	r5, r1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002c3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c46:	ee17 0a90 	vmov	r0, s15
 8002c4a:	f7fd fc95 	bl	8000578 <__aeabi_f2d>
 8002c4e:	a31a      	add	r3, pc, #104	; (adr r3, 8002cb8 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c54:	f7fd fce8 	bl	8000628 <__aeabi_dmul>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	4629      	mov	r1, r5
 8002c60:	f7fd fb2c 	bl	80002bc <__adddf3>
 8002c64:	4603      	mov	r3, r0
 8002c66:	460c      	mov	r4, r1
 8002c68:	4618      	mov	r0, r3
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	f7fd ffd4 	bl	8000c18 <__aeabi_d2f>
 8002c70:	4602      	mov	r2, r0
 8002c72:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <_ZN9LineTrace8pidTraceEv+0x1c8>)
 8002c74:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002c76:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c82:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <_ZN9LineTrace8pidTraceEv+0x1c8>)
 8002c84:	edd3 7a00 	vldr	s15, [r3]
 8002c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c8c:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002c9a:	edd7 0a02 	vldr	s1, [r7, #8]
 8002c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	f003 fb80 	bl	80063a8 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002ca8:	4a06      	ldr	r2, [pc, #24]	; (8002cc4 <_ZN9LineTrace8pidTraceEv+0x1cc>)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6013      	str	r3, [r2, #0]

}
 8002cae:	bf00      	nop
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002cbc:	3f50624d 	.word	0x3f50624d
 8002cc0:	20000214 	.word	0x20000214
 8002cc4:	20000210 	.word	0x20000210

08002cc8 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fe fcca 	bl	800166e <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f002 fd8f 	bl	8005802 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogsDis2();
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f002 fa66 	bl	80051ba <_ZN6Logger13resetLogsDis2Ev>

	logging_flag_ = true;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f002 fb2c 	bl	8005368 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
}
 8002d18:	bf00      	nop
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002d20:	b590      	push	{r4, r7, lr}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	695a      	ldr	r2, [r3, #20]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d32:	3328      	adds	r3, #40	; 0x28
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	461c      	mov	r4, r3
 8002d38:	4610      	mov	r0, r2
 8002d3a:	f7fe fc7a 	bl	8001632 <_ZN7Encoder16getTotalDistanceEv>
 8002d3e:	eef0 7a40 	vmov.f32	s15, s0
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002d48:	331a      	adds	r3, #26
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d58:	3328      	adds	r3, #40	; 0x28
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d66:	3328      	adds	r3, #40	; 0x28
 8002d68:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d70:	3328      	adds	r3, #40	; 0x28
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	2b63      	cmp	r3, #99	; 0x63
 8002d76:	d905      	bls.n	8002d84 <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d7e:	3328      	adds	r3, #40	; 0x28
 8002d80:	2263      	movs	r2, #99	; 0x63
 8002d82:	801a      	strh	r2, [r3, #0]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd90      	pop	{r4, r7, pc}

08002d8c <_ZN9LineTrace23storeCrossLineDistance2Ev>:

void LineTrace::storeCrossLineDistance2()
{
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
	crossline_distance2_[crossline_idx2_] = encoder_->getTotalDistance();
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	695a      	ldr	r2, [r3, #20]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d9e:	332a      	adds	r3, #42	; 0x2a
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	461c      	mov	r4, r3
 8002da4:	4610      	mov	r0, r2
 8002da6:	f7fe fc44 	bl	8001632 <_ZN7Encoder16getTotalDistanceEv>
 8002daa:	eef0 7a40 	vmov.f32	s15, s0
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8002db4:	333e      	adds	r3, #62	; 0x3e
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx2_++;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002dc4:	332a      	adds	r3, #42	; 0x2a
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002dd2:	332a      	adds	r3, #42	; 0x2a
 8002dd4:	801a      	strh	r2, [r3, #0]

	if(crossline_idx2_ >= CROSSLINE_SIZE) crossline_idx2_ = CROSSLINE_SIZE - 1;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ddc:	332a      	adds	r3, #42	; 0x2a
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	2b63      	cmp	r3, #99	; 0x63
 8002de2:	d905      	bls.n	8002df0 <_ZN9LineTrace23storeCrossLineDistance2Ev+0x64>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002dea:	332a      	adds	r3, #42	; 0x2a
 8002dec:	2263      	movs	r2, #99	; 0x63
 8002dee:	801a      	strh	r2, [r3, #0]
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd90      	pop	{r4, r7, pc}

08002df8 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8002df8:	b590      	push	{r4, r7, lr}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	695a      	ldr	r2, [r3, #20]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e0a:	332c      	adds	r3, #44	; 0x2c
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	461c      	mov	r4, r3
 8002e10:	4610      	mov	r0, r2
 8002e12:	f7fe fc0e 	bl	8001632 <_ZN7Encoder16getTotalDistanceEv>
 8002e16:	eef0 7a40 	vmov.f32	s15, s0
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	f504 533f 	add.w	r3, r4, #12224	; 0x2fc0
 8002e20:	3322      	adds	r3, #34	; 0x22
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e30:	332c      	adds	r3, #44	; 0x2c
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	3301      	adds	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e3e:	332c      	adds	r3, #44	; 0x2c
 8002e40:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e48:	332c      	adds	r3, #44	; 0x2c
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e50:	d306      	bcc.n	8002e60 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e58:	332c      	adds	r3, #44	; 0x2c
 8002e5a:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002e5e:	801a      	strh	r2, [r3, #0]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd90      	pop	{r4, r7, pc}

08002e68 <_ZN9LineTrace22storeSideLineDistance2Ev>:

void LineTrace::storeSideLineDistance2()
{
 8002e68:	b590      	push	{r4, r7, lr}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
	sideline_distance2_[sideline_idx2_] = encoder_->getTotalDistance();
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	695a      	ldr	r2, [r3, #20]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e7a:	332e      	adds	r3, #46	; 0x2e
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	461c      	mov	r4, r3
 8002e80:	4610      	mov	r0, r2
 8002e82:	f7fe fbd6 	bl	8001632 <_ZN7Encoder16getTotalDistanceEv>
 8002e86:	eef0 7a40 	vmov.f32	s15, s0
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	f504 5347 	add.w	r3, r4, #12736	; 0x31c0
 8002e90:	3316      	adds	r3, #22
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx2_++;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ea0:	332e      	adds	r3, #46	; 0x2e
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002eae:	332e      	adds	r3, #46	; 0x2e
 8002eb0:	801a      	strh	r2, [r3, #0]

	if(sideline_idx2_ >= SIDELINE_SIZE) sideline_idx2_ = SIDELINE_SIZE - 1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002eb8:	332e      	adds	r3, #46	; 0x2e
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ec0:	d306      	bcc.n	8002ed0 <_ZN9LineTrace22storeSideLineDistance2Ev+0x68>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ec8:	332e      	adds	r3, #46	; 0x2e
 8002eca:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002ece:	801a      	strh	r2, [r3, #0]
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd90      	pop	{r4, r7, pc}

08002ed8 <_ZN9LineTrace23clearCrossLineDistance2Ev>:
		c = 0;
	}
}

void LineTrace::clearCrossLineDistance2()
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
	for(auto &c : crossline_distance2_){
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8002ee6:	33f8      	adds	r3, #248	; 0xf8
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d009      	beq.n	8002f12 <_ZN9LineTrace23clearCrossLineDistance2Ev+0x3a>
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	60bb      	str	r3, [r7, #8]
		c = 0;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
	for(auto &c : crossline_distance2_){
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	e7f1      	b.n	8002ef6 <_ZN9LineTrace23clearCrossLineDistance2Ev+0x1e>
	}

}
 8002f12:	bf00      	nop
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <_ZN9LineTrace22clearSideLineDistance2Ev>:
	}

}

void LineTrace::clearSideLineDistance2()
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b087      	sub	sp, #28
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
	for(auto &s : sideline_distance2_){
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f503 4347 	add.w	r3, r3, #50944	; 0xc700
 8002f2c:	3358      	adds	r3, #88	; 0x58
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d009      	beq.n	8002f58 <_ZN9LineTrace22clearSideLineDistance2Ev+0x3a>
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	60bb      	str	r3, [r7, #8]
		s = 0;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
	for(auto &s : sideline_distance2_){
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	3304      	adds	r3, #4
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	e7f1      	b.n	8002f3c <_ZN9LineTrace22clearSideLineDistance2Ev+0x1e>
	}

}
 8002f58:	bf00      	nop
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <_ZN9LineTrace9storeLogsEv>:
	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}
*/

void LineTrace::storeLogs()
{
 8002f64:	b590      	push	{r4, r7, lr}
 8002f66:	ed2d 8b02 	vpush	{d8}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d046      	beq.n	8003008 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002f80:	3364      	adds	r3, #100	; 0x64
 8002f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d11c      	bne.n	8002fc4 <_ZN9LineTrace9storeLogsEv+0x60>
			//logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getDeltaTheta());
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69dc      	ldr	r4, [r3, #28]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fe fb3e 	bl	8001614 <_ZN7Encoder15getDistance10mmEv>
 8002f98:	eeb0 8a40 	vmov.f32	s16, s0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f002 fc1d 	bl	80057e0 <_ZN8Odometry13getDeltaThetaEv>
 8002fa6:	ec53 2b10 	vmov	r2, r3, d0
 8002faa:	4610      	mov	r0, r2
 8002fac:	4619      	mov	r1, r3
 8002fae:	f7fd fe33 	bl	8000c18 <__aeabi_d2f>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	ee00 3a90 	vmov	s1, r3
 8002fb8:	eeb0 0a48 	vmov.f32	s0, s16
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f002 f807 	bl	8004fd0 <_ZN6Logger21storeDistanceAndThetaEff>
 8002fc2:	e01b      	b.n	8002ffc <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getDeltaTheta());
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69dc      	ldr	r4, [r3, #28]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fe fb21 	bl	8001614 <_ZN7Encoder15getDistance10mmEv>
 8002fd2:	eeb0 8a40 	vmov.f32	s16, s0
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f002 fc00 	bl	80057e0 <_ZN8Odometry13getDeltaThetaEv>
 8002fe0:	ec53 2b10 	vmov	r2, r3, d0
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	f7fd fe16 	bl	8000c18 <__aeabi_d2f>
 8002fec:	4603      	mov	r3, r0
 8002fee:	ee00 3a90 	vmov	s1, r3
 8002ff2:	eeb0 0a48 	vmov.f32	s0, s16
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	f001 ffea 	bl	8004fd0 <_ZN6Logger21storeDistanceAndThetaEff>
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());

		mon_store_cnt++;
 8002ffc:	4b05      	ldr	r3, [pc, #20]	; (8003014 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	3301      	adds	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	4b03      	ldr	r3, [pc, #12]	; (8003014 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003006:	801a      	strh	r2, [r3, #0]
	}
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	ecbd 8b02 	vpop	{d8}
 8003012:	bd90      	pop	{r4, r7, pc}
 8003014:	20000204 	.word	0x20000204

08003018 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
			break;
		}
	}
	*/

	while(crossline_idx_ <= CROSSLINE_SIZE){
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003026:	3328      	adds	r3, #40	; 0x28
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	2b64      	cmp	r3, #100	; 0x64
 800302c:	d85a      	bhi.n	80030e4 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		float temp_crossline_distance = crossline_distance_[crossline_idx_];
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003034:	3328      	adds	r3, #40	; 0x28
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800303e:	331a      	adds	r3, #26
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	60fb      	str	r3, [r7, #12]
		float diff = abs(temp_crossline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	4618      	mov	r0, r3
 800304e:	f7fe faf0 	bl	8001632 <_ZN7Encoder16getTotalDistanceEv>
 8003052:	eeb0 7a40 	vmov.f32	s14, s0
 8003056:	edd7 7a03 	vldr	s15, [r7, #12]
 800305a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800305e:	eeb0 0a67 	vmov.f32	s0, s15
 8003062:	f7ff fb99 	bl	8002798 <_ZSt3absf>
 8003066:	ed87 0a02 	vstr	s0, [r7, #8]
		if(diff <= 250){
 800306a:	edd7 7a02 	vldr	s15, [r7, #8]
 800306e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003108 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xf0>
 8003072:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307a:	d826      	bhi.n	80030ca <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xb2>
			correction_check_cnt_ = 0;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003082:	3358      	adds	r3, #88	; 0x58
 8003084:	2200      	movs	r2, #0
 8003086:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(crossline_distance_[crossline_idx_] / DISTANCE_CORRECTION_CONST);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6959      	ldr	r1, [r3, #20]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003092:	3328      	adds	r3, #40	; 0x28
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800309c:	331a      	adds	r3, #26
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	edd3 7a00 	vldr	s15, [r3]
 80030a6:	eeb0 0a67 	vmov.f32	s0, s15
 80030aa:	4608      	mov	r0, r1
 80030ac:	f7fe fad0 	bl	8001650 <_ZN7Encoder16setTotalDistanceEf>
			crossline_idx_++;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030b6:	3328      	adds	r3, #40	; 0x28
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	3301      	adds	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030c4:	3328      	adds	r3, #40	; 0x28
 80030c6:	801a      	strh	r2, [r3, #0]
			break;
 80030c8:	e00c      	b.n	80030e4 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		}
		crossline_idx_++;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030d0:	3328      	adds	r3, #40	; 0x28
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	3301      	adds	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030de:	3328      	adds	r3, #40	; 0x28
 80030e0:	801a      	strh	r2, [r3, #0]
	while(crossline_idx_ <= CROSSLINE_SIZE){
 80030e2:	e79d      	b.n	8003020 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x8>
	}

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030ea:	3328      	adds	r3, #40	; 0x28
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	2b63      	cmp	r3, #99	; 0x63
 80030f0:	d905      	bls.n	80030fe <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xe6>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030f8:	3328      	adds	r3, #40	; 0x28
 80030fa:	2263      	movs	r2, #99	; 0x63
 80030fc:	801a      	strh	r2, [r3, #0]

}
 80030fe:	bf00      	nop
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	437a0000 	.word	0x437a0000

0800310c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003114:	2300      	movs	r3, #0
 8003116:	82fb      	strh	r3, [r7, #22]
 8003118:	8afb      	ldrh	r3, [r7, #22]
 800311a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800311e:	d23d      	bcs.n	800319c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
		float temp_sideline_distance = sideline_distance_[i];
 8003120:	8afb      	ldrh	r3, [r7, #22]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8003128:	3322      	adds	r3, #34	; 0x22
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	4618      	mov	r0, r3
 8003138:	f7fe fa7b 	bl	8001632 <_ZN7Encoder16getTotalDistanceEv>
 800313c:	eeb0 7a40 	vmov.f32	s14, s0
 8003140:	edd7 7a04 	vldr	s15, [r7, #16]
 8003144:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003148:	eeb0 0a67 	vmov.f32	s0, s15
 800314c:	f7ff fb24 	bl	8002798 <_ZSt3absf>
 8003150:	ed87 0a03 	vstr	s0, [r7, #12]
		//if(diff <= 230){
		if(diff <= 550){
 8003154:	edd7 7a03 	vldr	s15, [r7, #12]
 8003158:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80031c4 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb8>
 800315c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003164:	d816      	bhi.n	8003194 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
			correction_check_cnt_ = 0;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800316c:	3358      	adds	r3, #88	; 0x58
 800316e:	2200      	movs	r2, #0
 8003170:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(sideline_distance_[i] / DISTANCE_CORRECTION_CONST);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6959      	ldr	r1, [r3, #20]
 8003176:	8afb      	ldrh	r3, [r7, #22]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 800317e:	3322      	adds	r3, #34	; 0x22
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	edd3 7a00 	vldr	s15, [r3]
 8003188:	eeb0 0a67 	vmov.f32	s0, s15
 800318c:	4608      	mov	r0, r1
 800318e:	f7fe fa5f 	bl	8001650 <_ZN7Encoder16setTotalDistanceEf>
			break;
 8003192:	e003      	b.n	800319c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003194:	8afb      	ldrh	r3, [r7, #22]
 8003196:	3301      	adds	r3, #1
 8003198:	82fb      	strh	r3, [r7, #22]
 800319a:	e7bd      	b.n	8003118 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
		sideline_idx_++;
	}
	*/

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80031a2:	332c      	adds	r3, #44	; 0x2c
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031aa:	d306      	bcc.n	80031ba <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xae>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80031b2:	332c      	adds	r3, #44	; 0x2c
 80031b4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80031b8:	801a      	strh	r2, [r3, #0]

}
 80031ba:	bf00      	nop
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	44098000 	.word	0x44098000

080031c8 <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	ed87 0a00 	vstr	s0, [r7]
		else if(radius < 800) velocity = 1.7;
		else if(radius < 1400) velocity = 2.0;
		else velocity = max_velocity_;
	}
	*/
	if(mode_selector_ == SECOND_RUNNING){
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80031da:	3364      	adds	r3, #100	; 0x64
 80031dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d144      	bne.n	800326e <_ZN9LineTrace15radius2VelocityEf+0xa6>
		if(radius < 400) velocity = min_velocity_;
 80031e4:	edd7 7a00 	vldr	s15, [r7]
 80031e8:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8003484 <_ZN9LineTrace15radius2VelocityEf+0x2bc>
 80031ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f4:	d504      	bpl.n	8003200 <_ZN9LineTrace15radius2VelocityEf+0x38>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	e136      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 500) velocity = 1.5;
 8003200:	edd7 7a00 	vldr	s15, [r7]
 8003204:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8003488 <_ZN9LineTrace15radius2VelocityEf+0x2c0>
 8003208:	eef4 7ac7 	vcmpe.f32	s15, s14
 800320c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003210:	d503      	bpl.n	800321a <_ZN9LineTrace15radius2VelocityEf+0x52>
 8003212:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	e129      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 650) velocity = 2.0;
 800321a:	edd7 7a00 	vldr	s15, [r7]
 800321e:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 800348c <_ZN9LineTrace15radius2VelocityEf+0x2c4>
 8003222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322a:	d503      	bpl.n	8003234 <_ZN9LineTrace15radius2VelocityEf+0x6c>
 800322c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	e11c      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 1500) velocity = 2.5;
 8003234:	edd7 7a00 	vldr	s15, [r7]
 8003238:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8003490 <_ZN9LineTrace15radius2VelocityEf+0x2c8>
 800323c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003244:	d502      	bpl.n	800324c <_ZN9LineTrace15radius2VelocityEf+0x84>
 8003246:	4b93      	ldr	r3, [pc, #588]	; (8003494 <_ZN9LineTrace15radius2VelocityEf+0x2cc>)
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	e110      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 2000) velocity = 3.0;
 800324c:	edd7 7a00 	vldr	s15, [r7]
 8003250:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8003498 <_ZN9LineTrace15radius2VelocityEf+0x2d0>
 8003254:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325c:	d502      	bpl.n	8003264 <_ZN9LineTrace15radius2VelocityEf+0x9c>
 800325e:	4b8f      	ldr	r3, [pc, #572]	; (800349c <_ZN9LineTrace15radius2VelocityEf+0x2d4>)
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	e104      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else velocity = max_velocity_;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	e0ff      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003274:	3364      	adds	r3, #100	; 0x64
 8003276:	f9b3 3000 	ldrsh.w	r3, [r3]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d144      	bne.n	8003308 <_ZN9LineTrace15radius2VelocityEf+0x140>
		if(radius < 400) velocity = min_velocity2_;
 800327e:	edd7 7a00 	vldr	s15, [r7]
 8003282:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8003484 <_ZN9LineTrace15radius2VelocityEf+0x2bc>
 8003286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800328a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328e:	d504      	bpl.n	800329a <_ZN9LineTrace15radius2VelocityEf+0xd2>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	e0e9      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 500) velocity = 1.5;
 800329a:	edd7 7a00 	vldr	s15, [r7]
 800329e:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8003488 <_ZN9LineTrace15radius2VelocityEf+0x2c0>
 80032a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032aa:	d503      	bpl.n	80032b4 <_ZN9LineTrace15radius2VelocityEf+0xec>
 80032ac:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	e0dc      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 650) velocity = 2.0;
 80032b4:	edd7 7a00 	vldr	s15, [r7]
 80032b8:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800348c <_ZN9LineTrace15radius2VelocityEf+0x2c4>
 80032bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c4:	d503      	bpl.n	80032ce <_ZN9LineTrace15radius2VelocityEf+0x106>
 80032c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	e0cf      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 1500) velocity = 2.5;
 80032ce:	edd7 7a00 	vldr	s15, [r7]
 80032d2:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8003490 <_ZN9LineTrace15radius2VelocityEf+0x2c8>
 80032d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032de:	d502      	bpl.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x11e>
 80032e0:	4b6c      	ldr	r3, [pc, #432]	; (8003494 <_ZN9LineTrace15radius2VelocityEf+0x2cc>)
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	e0c3      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 2000) velocity = 3.3;
 80032e6:	edd7 7a00 	vldr	s15, [r7]
 80032ea:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8003498 <_ZN9LineTrace15radius2VelocityEf+0x2d0>
 80032ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f6:	d502      	bpl.n	80032fe <_ZN9LineTrace15radius2VelocityEf+0x136>
 80032f8:	4b69      	ldr	r3, [pc, #420]	; (80034a0 <_ZN9LineTrace15radius2VelocityEf+0x2d8>)
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	e0b7      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else velocity = max_velocity2_;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	e0b2      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
	}
	else if(mode_selector_ == FOURTH_RUNNING){
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800330e:	3364      	adds	r3, #100	; 0x64
 8003310:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003314:	2b03      	cmp	r3, #3
 8003316:	d150      	bne.n	80033ba <_ZN9LineTrace15radius2VelocityEf+0x1f2>
		if(radius < 400) velocity = min_velocity3_;
 8003318:	edd7 7a00 	vldr	s15, [r7]
 800331c:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8003484 <_ZN9LineTrace15radius2VelocityEf+0x2bc>
 8003320:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003328:	d504      	bpl.n	8003334 <_ZN9LineTrace15radius2VelocityEf+0x16c>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	e09c      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 500) velocity = 2.0;
 8003334:	edd7 7a00 	vldr	s15, [r7]
 8003338:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003488 <_ZN9LineTrace15radius2VelocityEf+0x2c0>
 800333c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003344:	d503      	bpl.n	800334e <_ZN9LineTrace15radius2VelocityEf+0x186>
 8003346:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	e08f      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 650) velocity = 2.0;
 800334e:	edd7 7a00 	vldr	s15, [r7]
 8003352:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800348c <_ZN9LineTrace15radius2VelocityEf+0x2c4>
 8003356:	eef4 7ac7 	vcmpe.f32	s15, s14
 800335a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335e:	d503      	bpl.n	8003368 <_ZN9LineTrace15radius2VelocityEf+0x1a0>
 8003360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	e082      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 1100) velocity = 3.0;
 8003368:	edd7 7a00 	vldr	s15, [r7]
 800336c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80034a4 <_ZN9LineTrace15radius2VelocityEf+0x2dc>
 8003370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003378:	d502      	bpl.n	8003380 <_ZN9LineTrace15radius2VelocityEf+0x1b8>
 800337a:	4b48      	ldr	r3, [pc, #288]	; (800349c <_ZN9LineTrace15radius2VelocityEf+0x2d4>)
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	e076      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 1900) velocity = 3.0;
 8003380:	edd7 7a00 	vldr	s15, [r7]
 8003384:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80034a8 <_ZN9LineTrace15radius2VelocityEf+0x2e0>
 8003388:	eef4 7ac7 	vcmpe.f32	s15, s14
 800338c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003390:	d502      	bpl.n	8003398 <_ZN9LineTrace15radius2VelocityEf+0x1d0>
 8003392:	4b42      	ldr	r3, [pc, #264]	; (800349c <_ZN9LineTrace15radius2VelocityEf+0x2d4>)
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	e06a      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 2500) velocity = 3.5;
 8003398:	edd7 7a00 	vldr	s15, [r7]
 800339c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80034ac <_ZN9LineTrace15radius2VelocityEf+0x2e4>
 80033a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a8:	d502      	bpl.n	80033b0 <_ZN9LineTrace15radius2VelocityEf+0x1e8>
 80033aa:	4b41      	ldr	r3, [pc, #260]	; (80034b0 <_ZN9LineTrace15radius2VelocityEf+0x2e8>)
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	e05e      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else velocity = max_velocity3_;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	e059      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
	}
	else if(mode_selector_ == FIFTH_RUNNING){
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033c0:	3364      	adds	r3, #100	; 0x64
 80033c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d14f      	bne.n	800346a <_ZN9LineTrace15radius2VelocityEf+0x2a2>
		if(radius < 400) velocity = min_velocity4_;
 80033ca:	edd7 7a00 	vldr	s15, [r7]
 80033ce:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003484 <_ZN9LineTrace15radius2VelocityEf+0x2bc>
 80033d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033da:	d504      	bpl.n	80033e6 <_ZN9LineTrace15radius2VelocityEf+0x21e>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	e043      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 500) velocity = 2.5;
 80033e6:	edd7 7a00 	vldr	s15, [r7]
 80033ea:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003488 <_ZN9LineTrace15radius2VelocityEf+0x2c0>
 80033ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f6:	d502      	bpl.n	80033fe <_ZN9LineTrace15radius2VelocityEf+0x236>
 80033f8:	4b26      	ldr	r3, [pc, #152]	; (8003494 <_ZN9LineTrace15radius2VelocityEf+0x2cc>)
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	e037      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 650) velocity = 3.0;
 80033fe:	edd7 7a00 	vldr	s15, [r7]
 8003402:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800348c <_ZN9LineTrace15radius2VelocityEf+0x2c4>
 8003406:	eef4 7ac7 	vcmpe.f32	s15, s14
 800340a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340e:	d502      	bpl.n	8003416 <_ZN9LineTrace15radius2VelocityEf+0x24e>
 8003410:	4b22      	ldr	r3, [pc, #136]	; (800349c <_ZN9LineTrace15radius2VelocityEf+0x2d4>)
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	e02b      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 1100) velocity = 3.0;
 8003416:	edd7 7a00 	vldr	s15, [r7]
 800341a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80034a4 <_ZN9LineTrace15radius2VelocityEf+0x2dc>
 800341e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003426:	d502      	bpl.n	800342e <_ZN9LineTrace15radius2VelocityEf+0x266>
 8003428:	4b1c      	ldr	r3, [pc, #112]	; (800349c <_ZN9LineTrace15radius2VelocityEf+0x2d4>)
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	e01f      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 1900) velocity = 3.3;
 800342e:	edd7 7a00 	vldr	s15, [r7]
 8003432:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80034a8 <_ZN9LineTrace15radius2VelocityEf+0x2e0>
 8003436:	eef4 7ac7 	vcmpe.f32	s15, s14
 800343a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343e:	d502      	bpl.n	8003446 <_ZN9LineTrace15radius2VelocityEf+0x27e>
 8003440:	4b17      	ldr	r3, [pc, #92]	; (80034a0 <_ZN9LineTrace15radius2VelocityEf+0x2d8>)
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	e013      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 2500) velocity = 4.0;
 8003446:	edd7 7a00 	vldr	s15, [r7]
 800344a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80034ac <_ZN9LineTrace15radius2VelocityEf+0x2e4>
 800344e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003456:	d503      	bpl.n	8003460 <_ZN9LineTrace15radius2VelocityEf+0x298>
 8003458:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	e006      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else velocity = max_velocity4_;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	e001      	b.n	800346e <_ZN9LineTrace15radius2VelocityEf+0x2a6>
	}
	else velocity = 1.3;
 800346a:	4b12      	ldr	r3, [pc, #72]	; (80034b4 <_ZN9LineTrace15radius2VelocityEf+0x2ec>)
 800346c:	60fb      	str	r3, [r7, #12]

	return velocity;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	ee07 3a90 	vmov	s15, r3
}
 8003474:	eeb0 0a67 	vmov.f32	s0, s15
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	43c80000 	.word	0x43c80000
 8003488:	43fa0000 	.word	0x43fa0000
 800348c:	44228000 	.word	0x44228000
 8003490:	44bb8000 	.word	0x44bb8000
 8003494:	40200000 	.word	0x40200000
 8003498:	44fa0000 	.word	0x44fa0000
 800349c:	40400000 	.word	0x40400000
 80034a0:	40533333 	.word	0x40533333
 80034a4:	44898000 	.word	0x44898000
 80034a8:	44ed8000 	.word	0x44ed8000
 80034ac:	451c4000 	.word	0x451c4000
 80034b0:	40600000 	.word	0x40600000
 80034b4:	3fa66666 	.word	0x3fa66666

080034b8 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 80034b8:	b5b0      	push	{r4, r5, r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80034c4:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80034c6:	f241 736f 	movw	r3, #5999	; 0x176f
 80034ca:	83fb      	strh	r3, [r7, #30]
 80034cc:	8bfb      	ldrh	r3, [r7, #30]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 808d 	beq.w	80035ee <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 80034d4:	8bfb      	ldrh	r3, [r7, #30]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034de:	3308      	adds	r3, #8
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	ed93 7a00 	vldr	s14, [r3]
 80034e8:	8bfb      	ldrh	r3, [r7, #30]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034f0:	3308      	adds	r3, #8
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	edd3 7a00 	vldr	s15, [r3]
 80034fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034fe:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003502:	edd7 7a06 	vldr	s15, [r7, #24]
 8003506:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800350a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350e:	dd6a      	ble.n	80035e6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003510:	8bfb      	ldrh	r3, [r7, #30]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	4413      	add	r3, r2
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f7fd f82c 	bl	8000578 <__aeabi_f2d>
 8003520:	a335      	add	r3, pc, #212	; (adr r3, 80035f8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003526:	f7fd f87f 	bl	8000628 <__aeabi_dmul>
 800352a:	4603      	mov	r3, r0
 800352c:	460c      	mov	r4, r1
 800352e:	4625      	mov	r5, r4
 8003530:	461c      	mov	r4, r3
 8003532:	69b8      	ldr	r0, [r7, #24]
 8003534:	f7fd f820 	bl	8000578 <__aeabi_f2d>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4620      	mov	r0, r4
 800353e:	4629      	mov	r1, r5
 8003540:	f7fd f99c 	bl	800087c <__aeabi_ddiv>
 8003544:	4603      	mov	r3, r0
 8003546:	460c      	mov	r4, r1
 8003548:	4618      	mov	r0, r3
 800354a:	4621      	mov	r1, r4
 800354c:	f7fd fb64 	bl	8000c18 <__aeabi_d2f>
 8003550:	4603      	mov	r3, r0
 8003552:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003554:	edd7 6a06 	vldr	s13, [r7, #24]
 8003558:	ed97 7a05 	vldr	s14, [r7, #20]
 800355c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003560:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003564:	ed97 7a04 	vldr	s14, [r7, #16]
 8003568:	edd7 7a02 	vldr	s15, [r7, #8]
 800356c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003574:	dd37      	ble.n	80035e6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003576:	8bfb      	ldrh	r3, [r7, #30]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800357e:	3308      	adds	r3, #8
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f7fc fff6 	bl	8000578 <__aeabi_f2d>
 800358c:	4604      	mov	r4, r0
 800358e:	460d      	mov	r5, r1
 8003590:	8bfb      	ldrh	r3, [r7, #30]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	4413      	add	r3, r2
 8003598:	ed93 7a00 	vldr	s14, [r3]
 800359c:	edd7 7a02 	vldr	s15, [r7, #8]
 80035a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a4:	ee17 0a90 	vmov	r0, s15
 80035a8:	f7fc ffe6 	bl	8000578 <__aeabi_f2d>
 80035ac:	a312      	add	r3, pc, #72	; (adr r3, 80035f8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 80035ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b2:	f7fd f839 	bl	8000628 <__aeabi_dmul>
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	4620      	mov	r0, r4
 80035bc:	4629      	mov	r1, r5
 80035be:	f7fc fe7d 	bl	80002bc <__adddf3>
 80035c2:	4603      	mov	r3, r0
 80035c4:	460c      	mov	r4, r1
 80035c6:	4619      	mov	r1, r3
 80035c8:	4622      	mov	r2, r4
 80035ca:	8bfb      	ldrh	r3, [r7, #30]
 80035cc:	1e5c      	subs	r4, r3, #1
 80035ce:	4608      	mov	r0, r1
 80035d0:	4611      	mov	r1, r2
 80035d2:	f7fd fb21 	bl	8000c18 <__aeabi_d2f>
 80035d6:	4601      	mov	r1, r0
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80035de:	3308      	adds	r3, #8
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80035e6:	8bfb      	ldrh	r3, [r7, #30]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	83fb      	strh	r3, [r7, #30]
 80035ec:	e76e      	b.n	80034cc <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 80035ee:	bf00      	nop
 80035f0:	3720      	adds	r7, #32
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bdb0      	pop	{r4, r5, r7, pc}
 80035f6:	bf00      	nop
 80035f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80035fc:	3f50624d 	.word	0x3f50624d

08003600 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003600:	b5b0      	push	{r4, r5, r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	ed87 0a02 	vstr	s0, [r7, #8]
 800360c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 800360e:	2300      	movs	r3, #0
 8003610:	83fb      	strh	r3, [r7, #30]
 8003612:	8bfb      	ldrh	r3, [r7, #30]
 8003614:	f241 726f 	movw	r2, #5999	; 0x176f
 8003618:	4293      	cmp	r3, r2
 800361a:	f200 808d 	bhi.w	8003738 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 800361e:	8bfb      	ldrh	r3, [r7, #30]
 8003620:	3301      	adds	r3, #1
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003628:	3308      	adds	r3, #8
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	ed93 7a00 	vldr	s14, [r3]
 8003632:	8bfb      	ldrh	r3, [r7, #30]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800363a:	3308      	adds	r3, #8
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	edd3 7a00 	vldr	s15, [r3]
 8003644:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003648:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800364c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003650:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003658:	dd6a      	ble.n	8003730 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 800365a:	8bfb      	ldrh	r3, [r7, #30]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	4413      	add	r3, r2
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f7fc ff87 	bl	8000578 <__aeabi_f2d>
 800366a:	a335      	add	r3, pc, #212	; (adr r3, 8003740 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 800366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003670:	f7fc ffda 	bl	8000628 <__aeabi_dmul>
 8003674:	4603      	mov	r3, r0
 8003676:	460c      	mov	r4, r1
 8003678:	4625      	mov	r5, r4
 800367a:	461c      	mov	r4, r3
 800367c:	69b8      	ldr	r0, [r7, #24]
 800367e:	f7fc ff7b 	bl	8000578 <__aeabi_f2d>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4620      	mov	r0, r4
 8003688:	4629      	mov	r1, r5
 800368a:	f7fd f8f7 	bl	800087c <__aeabi_ddiv>
 800368e:	4603      	mov	r3, r0
 8003690:	460c      	mov	r4, r1
 8003692:	4618      	mov	r0, r3
 8003694:	4621      	mov	r1, r4
 8003696:	f7fd fabf 	bl	8000c18 <__aeabi_d2f>
 800369a:	4603      	mov	r3, r0
 800369c:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 800369e:	edd7 6a06 	vldr	s13, [r7, #24]
 80036a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80036a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036aa:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80036ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80036b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80036b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036be:	dd37      	ble.n	8003730 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80036c0:	8bfb      	ldrh	r3, [r7, #30]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80036c8:	3308      	adds	r3, #8
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fc ff51 	bl	8000578 <__aeabi_f2d>
 80036d6:	4604      	mov	r4, r0
 80036d8:	460d      	mov	r5, r1
 80036da:	8bfb      	ldrh	r3, [r7, #30]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	ed93 7a00 	vldr	s14, [r3]
 80036e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80036ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ee:	ee17 0a90 	vmov	r0, s15
 80036f2:	f7fc ff41 	bl	8000578 <__aeabi_f2d>
 80036f6:	a312      	add	r3, pc, #72	; (adr r3, 8003740 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80036f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fc:	f7fc ff94 	bl	8000628 <__aeabi_dmul>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4620      	mov	r0, r4
 8003706:	4629      	mov	r1, r5
 8003708:	f7fc fdd8 	bl	80002bc <__adddf3>
 800370c:	4603      	mov	r3, r0
 800370e:	460c      	mov	r4, r1
 8003710:	4619      	mov	r1, r3
 8003712:	4622      	mov	r2, r4
 8003714:	8bfb      	ldrh	r3, [r7, #30]
 8003716:	1c5c      	adds	r4, r3, #1
 8003718:	4608      	mov	r0, r1
 800371a:	4611      	mov	r1, r2
 800371c:	f7fd fa7c 	bl	8000c18 <__aeabi_d2f>
 8003720:	4601      	mov	r1, r0
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003728:	3308      	adds	r3, #8
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003730:	8bfb      	ldrh	r3, [r7, #30]
 8003732:	3301      	adds	r3, #1
 8003734:	83fb      	strh	r3, [r7, #30]
 8003736:	e76c      	b.n	8003612 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003738:	bf00      	nop
 800373a:	3720      	adds	r7, #32
 800373c:	46bd      	mov	sp, r7
 800373e:	bdb0      	pop	{r4, r5, r7, pc}
 8003740:	d2f1a9fc 	.word	0xd2f1a9fc
 8003744:	3f50624d 	.word	0x3f50624d

08003748 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	4618      	mov	r0, r3
 8003756:	f7fd ff98 	bl	800168a <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003760:	3360      	adds	r3, #96	; 0x60
 8003762:	2201      	movs	r2, #1
 8003764:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800376c:	3362      	adds	r3, #98	; 0x62
 800376e:	2200      	movs	r2, #0
 8003770:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003778:	331c      	adds	r3, #28
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
}
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003796:	3360      	adds	r3, #96	; 0x60
 8003798:	2200      	movs	r2, #0
 800379a:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037a2:	3362      	adds	r3, #98	; 0x62
 80037a4:	2200      	movs	r2, #0
 80037a6:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80037ae:	331c      	adds	r3, #28
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b082      	sub	sp, #8
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037d0:	3360      	adds	r3, #96	; 0x60
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d05e      	beq.n	8003896 <_ZN9LineTrace20updateTargetVelocityEv+0xd4>
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
			velocity_table_idx_++;
		}
		*/
		if(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fd ff28 	bl	8001632 <_ZN7Encoder16getTotalDistanceEv>
 80037e2:	eeb0 7a40 	vmov.f32	s14, s0
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80037ec:	331c      	adds	r3, #28
 80037ee:	edd3 7a00 	vldr	s15, [r3]
 80037f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037fa:	bfac      	ite	ge
 80037fc:	2301      	movge	r3, #1
 80037fe:	2300      	movlt	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d025      	beq.n	8003852 <_ZN9LineTrace20updateTargetVelocityEv+0x90>
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800380c:	331c      	adds	r3, #28
 800380e:	ed93 7a00 	vldr	s14, [r3]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003818:	3362      	adds	r3, #98	; 0x62
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	3336      	adds	r3, #54	; 0x36
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	3304      	adds	r3, #4
 8003826:	edd3 7a00 	vldr	s15, [r3]
 800382a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003834:	331c      	adds	r3, #28
 8003836:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx_++;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003840:	3362      	adds	r3, #98	; 0x62
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	3301      	adds	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800384e:	3362      	adds	r3, #98	; 0x62
 8003850:	801a      	strh	r2, [r3, #0]
		}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003858:	3362      	adds	r3, #98	; 0x62
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003860:	4293      	cmp	r3, r2
 8003862:	d906      	bls.n	8003872 <_ZN9LineTrace20updateTargetVelocityEv+0xb0>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800386a:	3362      	adds	r3, #98	; 0x62
 800386c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003870:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003878:	3362      	adds	r3, #98	; 0x62
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003882:	3308      	adds	r3, #8
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	edd3 7a00 	vldr	s15, [r3]
 800388c:	eeb0 0a67 	vmov.f32	s0, s15
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 fb41 	bl	8003f18 <_ZN9LineTrace17setTargetVelocityEf>
		mon_vel_idx = velocity_table_idx_;
		mon_tar_vel = velocity_table_[velocity_table_idx_];
		*/

	}
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 80038aa:	2300      	movs	r3, #0
 80038ac:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fd feae 	bl	8001614 <_ZN7Encoder15getDistance10mmEv>
 80038b8:	eeb0 7a40 	vmov.f32	s14, s0
 80038bc:	edd7 7a00 	vldr	s15, [r7]
 80038c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c8:	bf94      	ite	ls
 80038ca:	2301      	movls	r3, #1
 80038cc:	2300      	movhi	r3, #0
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	//float sensor_edge_val_l = (line_sensor_->sensor[3] + line_sensor_->sensor[4]) / 2;
	//float sensor_edge_val_r = (line_sensor_->sensor[9] + line_sensor_->sensor[10]) / 2;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1]) / 2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80038fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003900:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003904:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003908:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	ed93 7abc 	vldr	s14, [r3, #752]	; 0x2f0
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 800391c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003920:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003924:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003928:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	//static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 800392c:	4a3b      	ldr	r2, [pc, #236]	; (8003a1c <_ZN9LineTrace11isCrossLineEv+0x138>)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8003932:	4a3b      	ldr	r2, [pc, #236]	; (8003a20 <_ZN9LineTrace11isCrossLineEv+0x13c>)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	6013      	str	r3, [r2, #0]

	//if(white_flag == false){
		if(sensor_edge_val_l < 700 && sensor_edge_val_r < 700 && encoder_->getCrossLineIgnoreDistance() >= 50){
 8003938:	edd7 7a03 	vldr	s15, [r7, #12]
 800393c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8003a24 <_ZN9LineTrace11isCrossLineEv+0x140>
 8003940:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003948:	d518      	bpl.n	800397c <_ZN9LineTrace11isCrossLineEv+0x98>
 800394a:	edd7 7a02 	vldr	s15, [r7, #8]
 800394e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003a24 <_ZN9LineTrace11isCrossLineEv+0x140>
 8003952:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800395a:	d50f      	bpl.n	800397c <_ZN9LineTrace11isCrossLineEv+0x98>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	4618      	mov	r0, r3
 8003962:	f7fd febd 	bl	80016e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003966:	eeb0 7a40 	vmov.f32	s14, s0
 800396a:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8003a28 <_ZN9LineTrace11isCrossLineEv+0x144>
 800396e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003976:	db01      	blt.n	800397c <_ZN9LineTrace11isCrossLineEv+0x98>
 8003978:	2301      	movs	r3, #1
 800397a:	e000      	b.n	800397e <_ZN9LineTrace11isCrossLineEv+0x9a>
 800397c:	2300      	movs	r3, #0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d006      	beq.n	8003990 <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 8003982:	4b2a      	ldr	r3, [pc, #168]	; (8003a2c <_ZN9LineTrace11isCrossLineEv+0x148>)
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	3301      	adds	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	4b28      	ldr	r3, [pc, #160]	; (8003a2c <_ZN9LineTrace11isCrossLineEv+0x148>)
 800398c:	801a      	strh	r2, [r3, #0]
 800398e:	e002      	b.n	8003996 <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8003990:	4b26      	ldr	r3, [pc, #152]	; (8003a2c <_ZN9LineTrace11isCrossLineEv+0x148>)
 8003992:	2200      	movs	r2, #0
 8003994:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8003996:	4b25      	ldr	r3, [pc, #148]	; (8003a2c <_ZN9LineTrace11isCrossLineEv+0x148>)
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d938      	bls.n	8003a10 <_ZN9LineTrace11isCrossLineEv+0x12c>
			flag = true;
 800399e:	4b24      	ldr	r3, [pc, #144]	; (8003a30 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 80039a0:	2201      	movs	r2, #1
 80039a2:	701a      	strb	r2, [r3, #0]
			//white_flag = true;
			cnt = 0;
 80039a4:	4b21      	ldr	r3, [pc, #132]	; (8003a2c <_ZN9LineTrace11isCrossLineEv+0x148>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	801a      	strh	r2, [r3, #0]

			side_sensor_->enableIgnore();
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f002 f9c2 	bl	8005d38 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearSideLineIgnoreDistance();
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fd fe83 	bl	80016c4 <_ZN7Encoder27clearSideLineIgnoreDistanceEv>
			encoder_->clearCrossLineIgnoreDistance();
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fd fe9b 	bl	80016fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80039ce:	3335      	adds	r3, #53	; 0x35
 80039d0:	2201      	movs	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]
			//stable_flag_force_ = true;
			if(mode_selector_ == FIRST_RUNNING){
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80039da:	3364      	adds	r3, #100	; 0x64
 80039dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d109      	bne.n	80039f8 <_ZN9LineTrace11isCrossLineEv+0x114>
				store_check_cnt_ = 0;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80039ea:	335a      	adds	r3, #90	; 0x5a
 80039ec:	2200      	movs	r2, #0
 80039ee:	801a      	strh	r2, [r3, #0]
				storeCrossLineDistance();
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff f995 	bl	8002d20 <_ZN9LineTrace22storeCrossLineDistanceEv>
 80039f6:	e00b      	b.n	8003a10 <_ZN9LineTrace11isCrossLineEv+0x12c>
			}
			else{
				store_check_cnt_ = 0;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80039fe:	335a      	adds	r3, #90	; 0x5a
 8003a00:	2200      	movs	r2, #0
 8003a02:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff fb07 	bl	8003018 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				storeCrossLineDistance2(); //for correction check
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff f9be 	bl	8002d8c <_ZN9LineTrace23storeCrossLineDistance2Ev>
		}

	}
	*/

	return flag;
 8003a10:	4b07      	ldr	r3, [pc, #28]	; (8003a30 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	20000208 	.word	0x20000208
 8003a20:	2000020c 	.word	0x2000020c
 8003a24:	442f0000 	.word	0x442f0000
 8003a28:	42480000 	.word	0x42480000
 8003a2c:	20000218 	.word	0x20000218
 8003a30:	2000021a 	.word	0x2000021a

08003a34 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003a34:	b590      	push	{r4, r7, lr}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fd fde5 	bl	8001614 <_ZN7Encoder15getDistance10mmEv>
 8003a4a:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f001 feb3 	bl	80057be <_ZN8Odometry8getThetaEv>
 8003a58:	ec54 3b10 	vmov	r3, r4, d0
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	4621      	mov	r1, r4
 8003a60:	f7fd f8da 	bl	8000c18 <__aeabi_d2f>
 8003a64:	4603      	mov	r3, r0
 8003a66:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003a68:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a6c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a74:	d101      	bne.n	8003a7a <_ZN9LineTrace8isStableEv+0x46>
 8003a76:	4b23      	ldr	r3, [pc, #140]	; (8003b04 <_ZN9LineTrace8isStableEv+0xd0>)
 8003a78:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 8003a7a:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a82:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a86:	eeb0 0a66 	vmov.f32	s0, s13
 8003a8a:	f7fe fe85 	bl	8002798 <_ZSt3absf>
 8003a8e:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 8003a92:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a96:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003b08 <_ZN9LineTrace8isStableEv+0xd4>
 8003a9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa2:	db01      	blt.n	8003aa8 <_ZN9LineTrace8isStableEv+0x74>
 8003aa4:	4b19      	ldr	r3, [pc, #100]	; (8003b0c <_ZN9LineTrace8isStableEv+0xd8>)
 8003aa6:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003aae:	3335      	adds	r3, #53	; 0x35
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d008      	beq.n	8003ac8 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003ab6:	4b16      	ldr	r3, [pc, #88]	; (8003b10 <_ZN9LineTrace8isStableEv+0xdc>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ac2:	3335      	adds	r3, #53	; 0x35
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 8003ac8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003acc:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003b14 <_ZN9LineTrace8isStableEv+0xe0>
 8003ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad8:	db06      	blt.n	8003ae8 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003ada:	4b0d      	ldr	r3, [pc, #52]	; (8003b10 <_ZN9LineTrace8isStableEv+0xdc>)
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <_ZN9LineTrace8isStableEv+0xdc>)
 8003ae4:	801a      	strh	r2, [r3, #0]
 8003ae6:	e002      	b.n	8003aee <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <_ZN9LineTrace8isStableEv+0xdc>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 25){ //250mm
 8003aee:	4b08      	ldr	r3, [pc, #32]	; (8003b10 <_ZN9LineTrace8isStableEv+0xdc>)
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	2b18      	cmp	r3, #24
 8003af4:	d901      	bls.n	8003afa <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 8003af6:	2301      	movs	r3, #1
 8003af8:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	371c      	adds	r7, #28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd90      	pop	{r4, r7, pc}
 8003b04:	3727c5ac 	.word	0x3727c5ac
 8003b08:	459c4000 	.word	0x459c4000
 8003b0c:	459c4000 	.word	0x459c4000
 8003b10:	2000021c 	.word	0x2000021c
 8003b14:	44fa0000 	.word	0x44fa0000

08003b18 <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b09a      	sub	sp, #104	; 0x68
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8003b20:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003b24:	2201      	movs	r2, #1
 8003b26:	499e      	ldr	r1, [pc, #632]	; (8003da0 <_ZN9LineTrace4initEv+0x288>)
 8003b28:	489e      	ldr	r0, [pc, #632]	; (8003da4 <_ZN9LineTrace4initEv+0x28c>)
 8003b2a:	f7fd fe79 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8003b2e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003b32:	2201      	movs	r2, #1
 8003b34:	499c      	ldr	r1, [pc, #624]	; (8003da8 <_ZN9LineTrace4initEv+0x290>)
 8003b36:	489b      	ldr	r0, [pc, #620]	; (8003da4 <_ZN9LineTrace4initEv+0x28c>)
 8003b38:	f7fd fe72 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003b3c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003b40:	2201      	movs	r2, #1
 8003b42:	499a      	ldr	r1, [pc, #616]	; (8003dac <_ZN9LineTrace4initEv+0x294>)
 8003b44:	4897      	ldr	r0, [pc, #604]	; (8003da4 <_ZN9LineTrace4initEv+0x28c>)
 8003b46:	f7fd fe6b 	bl	8001820 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003b4a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003b4e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003b52:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8003b56:	eeb0 1a66 	vmov.f32	s2, s13
 8003b5a:	eef0 0a47 	vmov.f32	s1, s14
 8003b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f94c 	bl	8003e00 <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 8003b68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	4990      	ldr	r1, [pc, #576]	; (8003db0 <_ZN9LineTrace4initEv+0x298>)
 8003b70:	488c      	ldr	r0, [pc, #560]	; (8003da4 <_ZN9LineTrace4initEv+0x28c>)
 8003b72:	f7fd fe55 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 8003b76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	498d      	ldr	r1, [pc, #564]	; (8003db4 <_ZN9LineTrace4initEv+0x29c>)
 8003b7e:	4889      	ldr	r0, [pc, #548]	; (8003da4 <_ZN9LineTrace4initEv+0x28c>)
 8003b80:	f7fd fe4e 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 8003b84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b88:	2201      	movs	r2, #1
 8003b8a:	498b      	ldr	r1, [pc, #556]	; (8003db8 <_ZN9LineTrace4initEv+0x2a0>)
 8003b8c:	4885      	ldr	r0, [pc, #532]	; (8003da4 <_ZN9LineTrace4initEv+0x28c>)
 8003b8e:	f7fd fe47 	bl	8001820 <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 8003b92:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003b96:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003b9a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8003b9e:	eeb0 1a66 	vmov.f32	s2, s13
 8003ba2:	eef0 0a47 	vmov.f32	s1, s14
 8003ba6:	eeb0 0a67 	vmov.f32	s0, s15
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f96e 	bl	8003e8c <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_min_velocity, temp_max_velocity2, temp_min_velocity2,
		temp_max_velocity3, temp_min_velocity3, temp_max_velocity4, temp_min_velocity4;
	sd_read_array_float("PARAMS", "TARVEL.TXT", 1, &temp_velocity);
 8003bb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	4981      	ldr	r1, [pc, #516]	; (8003dbc <_ZN9LineTrace4initEv+0x2a4>)
 8003bb8:	487a      	ldr	r0, [pc, #488]	; (8003da4 <_ZN9LineTrace4initEv+0x28c>)
 8003bba:	f7fd fe31 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003bbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	497e      	ldr	r1, [pc, #504]	; (8003dc0 <_ZN9LineTrace4initEv+0x2a8>)
 8003bc6:	4877      	ldr	r0, [pc, #476]	; (8003da4 <_ZN9LineTrace4initEv+0x28c>)
 8003bc8:	f7fd fe2a 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity);
 8003bcc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	497c      	ldr	r1, [pc, #496]	; (8003dc4 <_ZN9LineTrace4initEv+0x2ac>)
 8003bd4:	4873      	ldr	r0, [pc, #460]	; (8003da4 <_ZN9LineTrace4initEv+0x28c>)
 8003bd6:	f7fd fe23 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003bda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003bde:	2201      	movs	r2, #1
 8003be0:	4979      	ldr	r1, [pc, #484]	; (8003dc8 <_ZN9LineTrace4initEv+0x2b0>)
 8003be2:	4870      	ldr	r0, [pc, #448]	; (8003da4 <_ZN9LineTrace4initEv+0x28c>)
 8003be4:	f7fd fe1c 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL3.TXT", 1, &temp_min_velocity2);
 8003be8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bec:	2201      	movs	r2, #1
 8003bee:	4977      	ldr	r1, [pc, #476]	; (8003dcc <_ZN9LineTrace4initEv+0x2b4>)
 8003bf0:	486c      	ldr	r0, [pc, #432]	; (8003da4 <_ZN9LineTrace4initEv+0x28c>)
 8003bf2:	f7fd fe15 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL4.TXT", 1, &temp_max_velocity3);
 8003bf6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	4974      	ldr	r1, [pc, #464]	; (8003dd0 <_ZN9LineTrace4initEv+0x2b8>)
 8003bfe:	4869      	ldr	r0, [pc, #420]	; (8003da4 <_ZN9LineTrace4initEv+0x28c>)
 8003c00:	f7fd fe0e 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL4.TXT", 1, &temp_min_velocity3);
 8003c04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c08:	2201      	movs	r2, #1
 8003c0a:	4972      	ldr	r1, [pc, #456]	; (8003dd4 <_ZN9LineTrace4initEv+0x2bc>)
 8003c0c:	4865      	ldr	r0, [pc, #404]	; (8003da4 <_ZN9LineTrace4initEv+0x28c>)
 8003c0e:	f7fd fe07 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL5.TXT", 1, &temp_max_velocity4);
 8003c12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c16:	2201      	movs	r2, #1
 8003c18:	496f      	ldr	r1, [pc, #444]	; (8003dd8 <_ZN9LineTrace4initEv+0x2c0>)
 8003c1a:	4862      	ldr	r0, [pc, #392]	; (8003da4 <_ZN9LineTrace4initEv+0x28c>)
 8003c1c:	f7fd fe00 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL5.TXT", 1, &temp_min_velocity4);
 8003c20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c24:	2201      	movs	r2, #1
 8003c26:	496d      	ldr	r1, [pc, #436]	; (8003ddc <_ZN9LineTrace4initEv+0x2c4>)
 8003c28:	485e      	ldr	r0, [pc, #376]	; (8003da4 <_ZN9LineTrace4initEv+0x28c>)
 8003c2a:	f7fd fdf9 	bl	8001820 <sd_read_array_float>

	setTargetVelocity(temp_velocity);
 8003c2e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003c32:	eeb0 0a67 	vmov.f32	s0, s15
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f96e 	bl	8003f18 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003c3c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003c40:	eeb0 0a67 	vmov.f32	s0, s15
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f977 	bl	8003f38 <_ZN9LineTrace14setMaxVelocityEf>
	setMinVelocity(temp_min_velocity);
 8003c4a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f980 	bl	8003f58 <_ZN9LineTrace14setMinVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003c58:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f989 	bl	8003f78 <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity2(temp_min_velocity2);
 8003c66:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f992 	bl	8003f98 <_ZN9LineTrace15setMinVelocity2Ef>
	setMaxVelocity3(temp_max_velocity3);
 8003c74:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003c78:	eeb0 0a67 	vmov.f32	s0, s15
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f99b 	bl	8003fb8 <_ZN9LineTrace15setMaxVelocity3Ef>
	setMinVelocity3(temp_min_velocity3);
 8003c82:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003c86:	eeb0 0a67 	vmov.f32	s0, s15
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f9a4 	bl	8003fd8 <_ZN9LineTrace15setMinVelocity3Ef>
	setMaxVelocity4(temp_max_velocity4);
 8003c90:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003c94:	eeb0 0a67 	vmov.f32	s0, s15
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f9ad 	bl	8003ff8 <_ZN9LineTrace15setMaxVelocity4Ef>
	setMinVelocity4(temp_min_velocity4);
 8003c9e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003ca2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f9b6 	bl	8004018 <_ZN9LineTrace15setMinVelocity4Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003cac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	494b      	ldr	r1, [pc, #300]	; (8003de0 <_ZN9LineTrace4initEv+0x2c8>)
 8003cb4:	483b      	ldr	r0, [pc, #236]	; (8003da4 <_ZN9LineTrace4initEv+0x28c>)
 8003cb6:	f7fd fdb3 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	4948      	ldr	r1, [pc, #288]	; (8003de4 <_ZN9LineTrace4initEv+0x2cc>)
 8003cc2:	4838      	ldr	r0, [pc, #224]	; (8003da4 <_ZN9LineTrace4initEv+0x28c>)
 8003cc4:	f7fd fdac 	bl	8001820 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003cc8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003ccc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003cd0:	eef0 0a47 	vmov.f32	s1, s14
 8003cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 fa3d 	bl	8004158 <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	623b      	str	r3, [r7, #32]
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	61fb      	str	r3, [r7, #28]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003cea:	f107 0320 	add.w	r3, r7, #32
 8003cee:	2201      	movs	r2, #1
 8003cf0:	493d      	ldr	r1, [pc, #244]	; (8003de8 <_ZN9LineTrace4initEv+0x2d0>)
 8003cf2:	482c      	ldr	r0, [pc, #176]	; (8003da4 <_ZN9LineTrace4initEv+0x28c>)
 8003cf4:	f7fd fd94 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003cf8:	f107 031c 	add.w	r3, r7, #28
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	493b      	ldr	r1, [pc, #236]	; (8003dec <_ZN9LineTrace4initEv+0x2d4>)
 8003d00:	4828      	ldr	r0, [pc, #160]	; (8003da4 <_ZN9LineTrace4initEv+0x28c>)
 8003d02:	f7fd fd8d 	bl	8001820 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003d06:	edd7 7a08 	vldr	s15, [r7, #32]
 8003d0a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d0e:	eef0 0a47 	vmov.f32	s1, s14
 8003d12:	eeb0 0a67 	vmov.f32	s0, s15
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fa38 	bl	800418c <_ZN9LineTrace13setMaxAccDec2Eff>

	float temp_acc3 = 0, temp_dec3 = 0;
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	61bb      	str	r3, [r7, #24]
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]
	sd_read_array_float("PARAMS", "ACC3.TXT", 1, &temp_acc3);
 8003d28:	f107 0318 	add.w	r3, r7, #24
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	4930      	ldr	r1, [pc, #192]	; (8003df0 <_ZN9LineTrace4initEv+0x2d8>)
 8003d30:	481c      	ldr	r0, [pc, #112]	; (8003da4 <_ZN9LineTrace4initEv+0x28c>)
 8003d32:	f7fd fd75 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC3.TXT", 1, &temp_dec3);
 8003d36:	f107 0314 	add.w	r3, r7, #20
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	492d      	ldr	r1, [pc, #180]	; (8003df4 <_ZN9LineTrace4initEv+0x2dc>)
 8003d3e:	4819      	ldr	r0, [pc, #100]	; (8003da4 <_ZN9LineTrace4initEv+0x28c>)
 8003d40:	f7fd fd6e 	bl	8001820 <sd_read_array_float>
	setMaxAccDec3(temp_acc3, temp_dec3);
 8003d44:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d48:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d4c:	eef0 0a47 	vmov.f32	s1, s14
 8003d50:	eeb0 0a67 	vmov.f32	s0, s15
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 fa33 	bl	80041c0 <_ZN9LineTrace13setMaxAccDec3Eff>

	float temp_acc4 = 0, temp_dec4 = 0;
 8003d5a:	f04f 0300 	mov.w	r3, #0
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC4.TXT", 1, &temp_acc4);
 8003d66:	f107 0310 	add.w	r3, r7, #16
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	4922      	ldr	r1, [pc, #136]	; (8003df8 <_ZN9LineTrace4initEv+0x2e0>)
 8003d6e:	480d      	ldr	r0, [pc, #52]	; (8003da4 <_ZN9LineTrace4initEv+0x28c>)
 8003d70:	f7fd fd56 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC4.TXT", 1, &temp_dec4);
 8003d74:	f107 030c 	add.w	r3, r7, #12
 8003d78:	2201      	movs	r2, #1
 8003d7a:	4920      	ldr	r1, [pc, #128]	; (8003dfc <_ZN9LineTrace4initEv+0x2e4>)
 8003d7c:	4809      	ldr	r0, [pc, #36]	; (8003da4 <_ZN9LineTrace4initEv+0x28c>)
 8003d7e:	f7fd fd4f 	bl	8001820 <sd_read_array_float>
	setMaxAccDec4(temp_acc4, temp_dec4);
 8003d82:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d86:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d8a:	eef0 0a47 	vmov.f32	s1, s14
 8003d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fa2e 	bl	80041f4 <_ZN9LineTrace13setMaxAccDec4Eff>
}
 8003d98:	bf00      	nop
 8003d9a:	3768      	adds	r7, #104	; 0x68
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	0801a6f0 	.word	0x0801a6f0
 8003da4:	0801a6f8 	.word	0x0801a6f8
 8003da8:	0801a700 	.word	0x0801a700
 8003dac:	0801a708 	.word	0x0801a708
 8003db0:	0801a710 	.word	0x0801a710
 8003db4:	0801a71c 	.word	0x0801a71c
 8003db8:	0801a728 	.word	0x0801a728
 8003dbc:	0801a734 	.word	0x0801a734
 8003dc0:	0801a740 	.word	0x0801a740
 8003dc4:	0801a74c 	.word	0x0801a74c
 8003dc8:	0801a758 	.word	0x0801a758
 8003dcc:	0801a764 	.word	0x0801a764
 8003dd0:	0801a770 	.word	0x0801a770
 8003dd4:	0801a77c 	.word	0x0801a77c
 8003dd8:	0801a788 	.word	0x0801a788
 8003ddc:	0801a794 	.word	0x0801a794
 8003de0:	0801a7a0 	.word	0x0801a7a0
 8003de4:	0801a7a8 	.word	0x0801a7a8
 8003de8:	0801a7b0 	.word	0x0801a7b0
 8003dec:	0801a7bc 	.word	0x0801a7bc
 8003df0:	0801a7c8 	.word	0x0801a7c8
 8003df4:	0801a7d4 	.word	0x0801a7d4
 8003df8:	0801a7e0 	.word	0x0801a7e0
 8003dfc:	0801a7ec 	.word	0x0801a7ec

08003e00 <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e0c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003e10:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003e26:	bf00      	nop
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
	return kp_;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3e:	ee07 3a90 	vmov	s15, r3
}
 8003e42:	eeb0 0a67 	vmov.f32	s0, s15
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
	return ki_;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	ee07 3a90 	vmov	s15, r3
}
 8003e60:	eeb0 0a67 	vmov.f32	s0, s15
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
	return kd_;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7a:	ee07 3a90 	vmov	s15, r3
}
 8003e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e98:	edc7 0a01 	vstr	s1, [r7, #4]
 8003e9c:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003eb2:	bf00      	nop
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eca:	ee07 3a90 	vmov	s15, r3
}
 8003ece:	eeb0 0a67 	vmov.f32	s0, s15
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee8:	ee07 3a90 	vmov	s15, r3
}
 8003eec:	eeb0 0a67 	vmov.f32	s0, s15
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f06:	ee07 3a90 	vmov	s15, r3
}
 8003f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <_ZN9LineTrace17setTargetVelocityEf>:
{
	normal_ratio_ = ratio;
}

void LineTrace::setTargetVelocity(float velocity)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <_ZN9LineTrace15setMaxVelocity3Ef>:

void LineTrace::setMaxVelocity3(float velocity)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	ed87 0a00 	vstr	s0, [r7]
	max_velocity3_ = velocity;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <_ZN9LineTrace15setMinVelocity3Ef>:

void LineTrace::setMinVelocity3(float velocity)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	ed87 0a00 	vstr	s0, [r7]
	min_velocity3_ = velocity;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <_ZN9LineTrace15setMaxVelocity4Ef>:

void LineTrace::setMaxVelocity4(float velocity)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	ed87 0a00 	vstr	s0, [r7]
	max_velocity4_ = velocity;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <_ZN9LineTrace15setMinVelocity4Ef>:

void LineTrace::setMinVelocity4(float velocity)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	ed87 0a00 	vstr	s0, [r7]
	min_velocity4_ = velocity;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004046:	ee07 3a90 	vmov	s15, r3
}
 800404a:	eeb0 0a67 	vmov.f32	s0, s15
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004066:	ee07 3a90 	vmov	s15, r3
}
 800406a:	eeb0 0a67 	vmov.f32	s0, s15
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004086:	ee07 3a90 	vmov	s15, r3
}
 800408a:	eeb0 0a67 	vmov.f32	s0, s15
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80040a6:	ee07 3a90 	vmov	s15, r3
}
 80040aa:	eeb0 0a67 	vmov.f32	s0, s15
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80040c6:	ee07 3a90 	vmov	s15, r3
}
 80040ca:	eeb0 0a67 	vmov.f32	s0, s15
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <_ZN9LineTrace15getMaxVelocity3Ev>:

float LineTrace::getMaxVelocity3()
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	return max_velocity3_;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80040e6:	ee07 3a90 	vmov	s15, r3
}
 80040ea:	eeb0 0a67 	vmov.f32	s0, s15
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <_ZN9LineTrace15getMinVelocity3Ev>:

float LineTrace::getMinVelocity3()
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
	return min_velocity3_;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004106:	ee07 3a90 	vmov	s15, r3
}
 800410a:	eeb0 0a67 	vmov.f32	s0, s15
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <_ZN9LineTrace15getMaxVelocity4Ev>:

float LineTrace::getMaxVelocity4()

{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	return max_velocity4_;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004126:	ee07 3a90 	vmov	s15, r3
}
 800412a:	eeb0 0a67 	vmov.f32	s0, s15
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <_ZN9LineTrace15getMinVelocity4Ev>:

float LineTrace::getMinVelocity4()
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
	return min_velocity4_;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004146:	ee07 3a90 	vmov	s15, r3
}
 800414a:	eeb0 0a67 	vmov.f32	s0, s15
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <_ZN9LineTrace12setMaxAccDecEff>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	ed87 0a02 	vstr	s0, [r7, #8]
 8004164:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800416e:	3338      	adds	r3, #56	; 0x38
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800417a:	333c      	adds	r3, #60	; 0x3c
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	601a      	str	r2, [r3, #0]
}
 8004180:	bf00      	nop
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	ed87 0a02 	vstr	s0, [r7, #8]
 8004198:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041a2:	3340      	adds	r3, #64	; 0x40
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041ae:	3344      	adds	r3, #68	; 0x44
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	601a      	str	r2, [r3, #0]
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <_ZN9LineTrace13setMaxAccDec3Eff>:

void LineTrace::setMaxAccDec3(const float acc, const float dec)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80041cc:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc3_ = acc;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041d6:	3348      	adds	r3, #72	; 0x48
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	601a      	str	r2, [r3, #0]
	max_dec3_ = dec;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041e2:	334c      	adds	r3, #76	; 0x4c
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	601a      	str	r2, [r3, #0]
}
 80041e8:	bf00      	nop
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <_ZN9LineTrace13setMaxAccDec4Eff>:

void LineTrace::setMaxAccDec4(const float acc, const float dec)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8004200:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc4_ = acc;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800420a:	3350      	adds	r3, #80	; 0x50
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	601a      	str	r2, [r3, #0]
	max_dec4_ = dec;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004216:	3354      	adds	r3, #84	; 0x54
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	601a      	str	r2, [r3, #0]
}
 800421c:	bf00      	nop
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004236:	3338      	adds	r3, #56	; 0x38
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	ee07 3a90 	vmov	s15, r3
}
 800423e:	eeb0 0a67 	vmov.f32	s0, s15
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800425a:	333c      	adds	r3, #60	; 0x3c
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	ee07 3a90 	vmov	s15, r3
}
 8004262:	eeb0 0a67 	vmov.f32	s0, s15
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800427e:	3340      	adds	r3, #64	; 0x40
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	ee07 3a90 	vmov	s15, r3
}
 8004286:	eeb0 0a67 	vmov.f32	s0, s15
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042a2:	3344      	adds	r3, #68	; 0x44
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	ee07 3a90 	vmov	s15, r3
}
 80042aa:	eeb0 0a67 	vmov.f32	s0, s15
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <_ZN9LineTrace10getMaxAcc3Ev>:

float LineTrace::getMaxAcc3()
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
	return max_acc3_;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042c6:	3348      	adds	r3, #72	; 0x48
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	ee07 3a90 	vmov	s15, r3
}
 80042ce:	eeb0 0a67 	vmov.f32	s0, s15
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <_ZN9LineTrace10getMaxDec3Ev>:

float LineTrace::getMaxDec3()
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
	return max_dec3_;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042ea:	334c      	adds	r3, #76	; 0x4c
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	ee07 3a90 	vmov	s15, r3
}
 80042f2:	eeb0 0a67 	vmov.f32	s0, s15
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <_ZN9LineTrace10getMaxAcc4Ev>:

float LineTrace::getMaxAcc4()
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
	return max_acc4_;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800430e:	3350      	adds	r3, #80	; 0x50
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	ee07 3a90 	vmov	s15, r3
}
 8004316:	eeb0 0a67 	vmov.f32	s0, s15
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <_ZN9LineTrace10getMaxDec4Ev>:

float LineTrace::getMaxDec4()
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
	return max_dec4_;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004332:	3354      	adds	r3, #84	; 0x54
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	ee07 3a90 	vmov	s15, r3
}
 800433a:	eeb0 0a67 	vmov.f32	s0, s15
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 80b4 	beq.w	80044c4 <_ZN9LineTrace4flipEv+0x17c>
		// ---- line following processing -----//
		pidTrace();
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7fe fbcb 	bl	8002af8 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7ff fa2d 	bl	80037c2 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- Processing at regular distances -----//

		if(isTargetDistance(10) == true){
 8004368:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff fa96 	bl	800389e <_ZN9LineTrace16isTargetDistanceEf>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d028      	beq.n	80043ca <_ZN9LineTrace4flipEv+0x82>
			// ---- Store Logs ------//
			storeLogs();
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7fe fdf3 	bl	8002f64 <_ZN9LineTrace9storeLogsEv>

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff fb58 	bl	8003a34 <_ZN9LineTrace8isStableEv>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00c      	beq.n	80043a4 <_ZN9LineTrace4flipEv+0x5c>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	4618      	mov	r0, r3
 8004390:	f001 fcaa 	bl	8005ce8 <_ZN10SideSensor10getStatusLEv>
 8004394:	4603      	mov	r3, r0
 8004396:	f083 0301 	eor.w	r3, r3, #1
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <_ZN9LineTrace4flipEv+0x5c>
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <_ZN9LineTrace4flipEv+0x5e>
 80043a4:	2300      	movs	r3, #0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d005      	beq.n	80043b6 <_ZN9LineTrace4flipEv+0x6e>
				stable_flag_ = true;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043b0:	3333      	adds	r3, #51	; 0x33
 80043b2:	2201      	movs	r2, #1
 80043b4:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fd f957 	bl	800166e <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f001 fa1c 	bl	8005802 <_ZN8Odometry13clearPotitionEv>
		}

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7ff fa8a 	bl	80038e4 <_ZN9LineTrace11isCrossLineEv>
			// Note: Store cross line distance here.
			//led_.LR(1, -1);
		}

		// ------- Store side line distance or correction distance------//
		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043d6:	3333      	adds	r3, #51	; 0x33
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d009      	beq.n	80043f2 <_ZN9LineTrace4flipEv+0xaa>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f001 fc80 	bl	8005ce8 <_ZN10SideSensor10getStatusLEv>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <_ZN9LineTrace4flipEv+0xaa>
 80043ee:	2301      	movs	r3, #1
 80043f0:	e000      	b.n	80043f4 <_ZN9LineTrace4flipEv+0xac>
 80043f2:	2300      	movs	r3, #0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d02f      	beq.n	8004458 <_ZN9LineTrace4flipEv+0x110>
		//if((stable_flag_force_ == true || stable_flag_ == true) && side_sensor_->getStatusL() == true && encoder_->getSideLineIgnoreDistance() >= 120){ //Stabilizing and side sensor is white
			//correction_check_cnt_ = 0;

			if(mode_selector_ == FIRST_RUNNING){
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80043fe:	3364      	adds	r3, #100	; 0x64
 8004400:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d109      	bne.n	800441c <_ZN9LineTrace4flipEv+0xd4>
				store_check_cnt_ = 0;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800440e:	335a      	adds	r3, #90	; 0x5a
 8004410:	2200      	movs	r2, #0
 8004412:	801a      	strh	r2, [r3, #0]
				storeSideLineDistance();
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7fe fcef 	bl	8002df8 <_ZN9LineTrace21storeSideLineDistanceEv>
 800441a:	e00b      	b.n	8004434 <_ZN9LineTrace4flipEv+0xec>
			}
			else{
				store_check_cnt_ = 0;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004422:	335a      	adds	r3, #90	; 0x5a
 8004424:	2200      	movs	r2, #0
 8004426:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromSideMarker();
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7fe fe6f 	bl	800310c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				storeSideLineDistance2(); //for correction check
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fe fd1a 	bl	8002e68 <_ZN9LineTrace22storeSideLineDistance2Ev>
			}

			stable_flag_ = false;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800443a:	3333      	adds	r3, #51	; 0x33
 800443c:	2200      	movs	r2, #0
 800443e:	701a      	strb	r2, [r3, #0]
			stable_flag_force_ = false;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004446:	3334      	adds	r3, #52	; 0x34
 8004448:	2200      	movs	r2, #0
 800444a:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004452:	3335      	adds	r3, #53	; 0x35
 8004454:	2201      	movs	r2, #1
 8004456:	701a      	strb	r2, [r3, #0]
		}



		if(side_sensor_->getIgnoreFlag() == true && encoder_->getSideLineIgnoreDistance() >= 100){
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	4618      	mov	r0, r3
 800445e:	f001 fc85 	bl	8005d6c <_ZN10SideSensor13getIgnoreFlagEv>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00f      	beq.n	8004488 <_ZN9LineTrace4flipEv+0x140>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	4618      	mov	r0, r3
 800446e:	f7fd f91a 	bl	80016a6 <_ZN7Encoder25getSideLineIgnoreDistanceEv>
 8004472:	eeb0 7a40 	vmov.f32	s14, s0
 8004476:	eddf 7a15 	vldr	s15, [pc, #84]	; 80044cc <_ZN9LineTrace4flipEv+0x184>
 800447a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800447e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004482:	db01      	blt.n	8004488 <_ZN9LineTrace4flipEv+0x140>
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <_ZN9LineTrace4flipEv+0x142>
 8004488:	2300      	movs	r3, #0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d004      	beq.n	8004498 <_ZN9LineTrace4flipEv+0x150>
			side_sensor_->disableIgnore();
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	4618      	mov	r0, r3
 8004494:	f001 fc5d 	bl	8005d52 <_ZN10SideSensor13disableIgnoreEv>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	4618      	mov	r0, r3
 800449e:	f7fe f92b 	bl	80026f8 <_ZN10LineSensor13emergencyStopEv>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00d      	beq.n	80044c4 <_ZN9LineTrace4flipEv+0x17c>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	eddf 0a08 	vldr	s1, [pc, #32]	; 80044d0 <_ZN9LineTrace4flipEv+0x188>
 80044b0:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80044d0 <_ZN9LineTrace4flipEv+0x188>
 80044b4:	4618      	mov	r0, r3
 80044b6:	f001 ff77 	bl	80063a8 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fc ff60 	bl	8001384 <_ZN3ESC3offEv>
			//led_.LR(0, -1);
		}


	}
}
 80044c4:	bf00      	nop
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	42c80000 	.word	0x42c80000
 80044d0:	00000000 	.word	0x00000000

080044d4 <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80044e6:	3364      	adds	r3, #100	; 0x64
 80044e8:	887a      	ldrh	r2, [r7, #2]
 80044ea:	801a      	strh	r2, [r3, #0]
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	4618      	mov	r0, r3
 8004516:	f001 ffa0 	bl	800645a <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	4618      	mov	r0, r3
 8004520:	f001 fbfa 	bl	8005d18 <_ZN10SideSensor17resetWhiteLineCntEv>
	//clearSideLineDistance();
	clearSideLineDistance2();
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7fe fcfa 	bl	8002f1e <_ZN9LineTrace22clearSideLineDistance2Ev>
	//clearCrossLineDistance();
	clearCrossLineDistance2();
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fe fcd4 	bl	8002ed8 <_ZN9LineTrace23clearCrossLineDistance2Ev>
	crossline_idx_ = 0;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004536:	3328      	adds	r3, #40	; 0x28
 8004538:	2200      	movs	r2, #0
 800453a:	801a      	strh	r2, [r3, #0]
	crossline_idx2_ = 0;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004542:	332a      	adds	r3, #42	; 0x2a
 8004544:	2200      	movs	r2, #0
 8004546:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800454e:	332c      	adds	r3, #44	; 0x2c
 8004550:	2200      	movs	r2, #0
 8004552:	801a      	strh	r2, [r3, #0]
	sideline_idx2_ = 0;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800455a:	332e      	adds	r3, #46	; 0x2e
 800455c:	2200      	movs	r2, #0
 800455e:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004566:	3330      	adds	r3, #48	; 0x30
 8004568:	2200      	movs	r2, #0
 800456a:	801a      	strh	r2, [r3, #0]
}
 800456c:	bf00      	nop
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 800457c:	2300      	movs	r3, #0
 800457e:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8004580:	2300      	movs	r3, #0
 8004582:	737b      	strb	r3, [r7, #13]
	bool goal_judge_flag = false;
 8004584:	2300      	movs	r3, #0
 8004586:	733b      	strb	r3, [r7, #12]
	start();
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7ff ffb5 	bl	80044f8 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 800458e:	7b7b      	ldrb	r3, [r7, #13]
 8004590:	2b00      	cmp	r3, #0
 8004592:	f040 815f 	bne.w	8004854 <_ZN9LineTrace7runningEv+0x2e0>
		switch(stage){
 8004596:	89fb      	ldrh	r3, [r7, #14]
 8004598:	2b05      	cmp	r3, #5
 800459a:	d03a      	beq.n	8004612 <_ZN9LineTrace7runningEv+0x9e>
 800459c:	2b0a      	cmp	r3, #10
 800459e:	d047      	beq.n	8004630 <_ZN9LineTrace7runningEv+0xbc>
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f040 80c7 	bne.w	8004734 <_ZN9LineTrace7runningEv+0x1c0>
		case 0:
			//if(side_sensor_->getWhiteLineCntR() == 1){
			if(side_sensor_->getStatusR() == true){
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f001 fba8 	bl	8005d00 <_ZN10SideSensor10getStatusREv>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 80b9 	beq.w	800472a <_ZN9LineTrace7runningEv+0x1b6>
				loggerStart();
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7fe fb85 	bl	8002cc8 <_ZN9LineTrace11loggerStartEv>
				logger_->start();
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 feb1 	bl	800532a <_ZN6Logger5startEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80045ce:	3364      	adds	r3, #100	; 0x64
 80045d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <_ZN9LineTrace7runningEv+0x6a>
					startVelocityPlay();
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff f8b5 	bl	8003748 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearSideLineIgnoreDistance();
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fd f86e 	bl	80016c4 <_ZN7Encoder27clearSideLineIgnoreDistanceEv>
				encoder_->clearCrossLineIgnoreDistance();
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fd f886 	bl	80016fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fd f847 	bl	800168a <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	330c      	adds	r3, #12
 8004600:	f04f 32ff 	mov.w	r2, #4294967295
 8004604:	2100      	movs	r1, #0
 8004606:	4618      	mov	r0, r3
 8004608:	f7fd fdc0 	bl	800218c <_ZN3LED2LREaa>
				stage = 5;
 800460c:	2305      	movs	r3, #5
 800460e:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8004610:	e08b      	b.n	800472a <_ZN9LineTrace7runningEv+0x1b6>

		case 5:
			if(side_sensor_->getStatusR() == false) stage = 10;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	4618      	mov	r0, r3
 8004618:	f001 fb72 	bl	8005d00 <_ZN10SideSensor10getStatusREv>
 800461c:	4603      	mov	r3, r0
 800461e:	f083 0301 	eor.w	r3, r3, #1
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 8082 	beq.w	800472e <_ZN9LineTrace7runningEv+0x1ba>
 800462a:	230a      	movs	r3, #10
 800462c:	81fb      	strh	r3, [r7, #14]

			break;
 800462e:	e07e      	b.n	800472e <_ZN9LineTrace7runningEv+0x1ba>
		case 10:
			//if(side_sensor_->getWhiteLineCntR() == 2){
			if(side_sensor_->getStatusL() == true){
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	4618      	mov	r0, r3
 8004636:	f001 fb57 	bl	8005ce8 <_ZN10SideSensor10getStatusLEv>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00c      	beq.n	800465a <_ZN9LineTrace7runningEv+0xe6>
				goal_judge_flag = false;
 8004640:	2300      	movs	r3, #0
 8004642:	733b      	strb	r3, [r7, #12]
				encoder_->clearGoalJudgeDistance();
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	4618      	mov	r0, r3
 800464a:	f7fd f875 	bl	8001738 <_ZN7Encoder22clearGoalJudgeDistanceEv>
				led_.fullColor('B');
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	330c      	adds	r3, #12
 8004652:	2142      	movs	r1, #66	; 0x42
 8004654:	4618      	mov	r0, r3
 8004656:	f7fd fcdd 	bl	8002014 <_ZN3LED9fullColorEc>
			}

			if(goal_judge_flag == false && side_sensor_->getStatusR() == true && encoder_->getGoalJudgeDistance() >= 30){
 800465a:	7b3b      	ldrb	r3, [r7, #12]
 800465c:	f083 0301 	eor.w	r3, r3, #1
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d017      	beq.n	8004696 <_ZN9LineTrace7runningEv+0x122>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	4618      	mov	r0, r3
 800466c:	f001 fb48 	bl	8005d00 <_ZN10SideSensor10getStatusREv>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00f      	beq.n	8004696 <_ZN9LineTrace7runningEv+0x122>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	4618      	mov	r0, r3
 800467c:	f7fd f84d 	bl	800171a <_ZN7Encoder20getGoalJudgeDistanceEv>
 8004680:	eeb0 7a40 	vmov.f32	s14, s0
 8004684:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8004688:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800468c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004690:	db01      	blt.n	8004696 <_ZN9LineTrace7runningEv+0x122>
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <_ZN9LineTrace7runningEv+0x124>
 8004696:	2300      	movs	r3, #0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d013      	beq.n	80046c4 <_ZN9LineTrace7runningEv+0x150>
				goal_judge_flag = true;
 800469c:	2301      	movs	r3, #1
 800469e:	733b      	strb	r3, [r7, #12]
				encoder_->clearGoalJudgeDistance();
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fd f847 	bl	8001738 <_ZN7Encoder22clearGoalJudgeDistanceEv>
				ignore_check_cnt_ = 0;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80046b0:	335c      	adds	r3, #92	; 0x5c
 80046b2:	2200      	movs	r2, #0
 80046b4:	801a      	strh	r2, [r3, #0]

				led_.fullColor('Y');
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	330c      	adds	r3, #12
 80046ba:	2159      	movs	r1, #89	; 0x59
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fd fca9 	bl	8002014 <_ZN3LED9fullColorEc>
				goal_flag = true;
				goal_judge_flag = false;

			}

			break;
 80046c2:	e036      	b.n	8004732 <_ZN9LineTrace7runningEv+0x1be>
			else if(goal_judge_flag == true && encoder_->getGoalJudgeDistance() >= 30){
 80046c4:	7b3b      	ldrb	r3, [r7, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00f      	beq.n	80046ea <_ZN9LineTrace7runningEv+0x176>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fd f823 	bl	800171a <_ZN7Encoder20getGoalJudgeDistanceEv>
 80046d4:	eeb0 7a40 	vmov.f32	s14, s0
 80046d8:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80046dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e4:	db01      	blt.n	80046ea <_ZN9LineTrace7runningEv+0x176>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e000      	b.n	80046ec <_ZN9LineTrace7runningEv+0x178>
 80046ea:	2300      	movs	r3, #0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d020      	beq.n	8004732 <_ZN9LineTrace7runningEv+0x1be>
				led_.fullColor('M');
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	330c      	adds	r3, #12
 80046f4:	214d      	movs	r1, #77	; 0x4d
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fd fc8c 	bl	8002014 <_ZN3LED9fullColorEc>
				loggerStop();
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7fe fafe 	bl	8002cfe <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff f840 	bl	8003788 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8004708:	2064      	movs	r0, #100	; 0x64
 800470a:	f007 f827 	bl	800b75c <HAL_Delay>
				setTargetVelocity(0);
 800470e:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8004864 <_ZN9LineTrace7runningEv+0x2f0>
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7ff fc00 	bl	8003f18 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8004718:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800471c:	f007 f81e 	bl	800b75c <HAL_Delay>
				goal_flag = true;
 8004720:	2301      	movs	r3, #1
 8004722:	737b      	strb	r3, [r7, #13]
				goal_judge_flag = false;
 8004724:	2300      	movs	r3, #0
 8004726:	733b      	strb	r3, [r7, #12]
			break;
 8004728:	e003      	b.n	8004732 <_ZN9LineTrace7runningEv+0x1be>
			break;
 800472a:	bf00      	nop
 800472c:	e002      	b.n	8004734 <_ZN9LineTrace7runningEv+0x1c0>
			break;
 800472e:	bf00      	nop
 8004730:	e000      	b.n	8004734 <_ZN9LineTrace7runningEv+0x1c0>
			break;
 8004732:	bf00      	nop
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800473a:	3358      	adds	r3, #88	; 0x58
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	3301      	adds	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004748:	3358      	adds	r3, #88	; 0x58
 800474a:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004752:	3358      	adds	r3, #88	; 0x58
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	f242 720f 	movw	r2, #9999	; 0x270f
 800475a:	4293      	cmp	r3, r2
 800475c:	d906      	bls.n	800476c <_ZN9LineTrace7runningEv+0x1f8>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004764:	3358      	adds	r3, #88	; 0x58
 8004766:	f242 7210 	movw	r2, #10000	; 0x2710
 800476a:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 300) led_.fullColor('R');
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004772:	3358      	adds	r3, #88	; 0x58
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800477a:	d805      	bhi.n	8004788 <_ZN9LineTrace7runningEv+0x214>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	330c      	adds	r3, #12
 8004780:	2152      	movs	r1, #82	; 0x52
 8004782:	4618      	mov	r0, r3
 8004784:	f7fd fc46 	bl	8002014 <_ZN3LED9fullColorEc>

		store_check_cnt_++;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800478e:	335a      	adds	r3, #90	; 0x5a
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	3301      	adds	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800479c:	335a      	adds	r3, #90	; 0x5a
 800479e:	801a      	strh	r2, [r3, #0]
		if(store_check_cnt_>= 10000) store_check_cnt_ = 10000;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047a6:	335a      	adds	r3, #90	; 0x5a
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	f242 720f 	movw	r2, #9999	; 0x270f
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d906      	bls.n	80047c0 <_ZN9LineTrace7runningEv+0x24c>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047b8:	335a      	adds	r3, #90	; 0x5a
 80047ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80047be:	801a      	strh	r2, [r3, #0]

		if(store_check_cnt_ <= 500) led_.LR(1, -1);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047c6:	335a      	adds	r3, #90	; 0x5a
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80047ce:	d808      	bhi.n	80047e2 <_ZN9LineTrace7runningEv+0x26e>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	330c      	adds	r3, #12
 80047d4:	f04f 32ff 	mov.w	r2, #4294967295
 80047d8:	2101      	movs	r1, #1
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fd fcd6 	bl	800218c <_ZN3LED2LREaa>
 80047e0:	e007      	b.n	80047f2 <_ZN9LineTrace7runningEv+0x27e>
		else led_.LR(0, -1);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	330c      	adds	r3, #12
 80047e6:	f04f 32ff 	mov.w	r2, #4294967295
 80047ea:	2100      	movs	r1, #0
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7fd fccd 	bl	800218c <_ZN3LED2LREaa>

		ignore_check_cnt_++;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047f8:	335c      	adds	r3, #92	; 0x5c
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	3301      	adds	r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004806:	335c      	adds	r3, #92	; 0x5c
 8004808:	801a      	strh	r2, [r3, #0]
		if(ignore_check_cnt_>= 10000) ignore_check_cnt_= 10000;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004810:	335c      	adds	r3, #92	; 0x5c
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	f242 720f 	movw	r2, #9999	; 0x270f
 8004818:	4293      	cmp	r3, r2
 800481a:	d906      	bls.n	800482a <_ZN9LineTrace7runningEv+0x2b6>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004822:	335c      	adds	r3, #92	; 0x5c
 8004824:	f242 7210 	movw	r2, #10000	; 0x2710
 8004828:	801a      	strh	r2, [r3, #0]

		if(ignore_check_cnt_ <= 200) led_.fullColor('Y');
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004830:	335c      	adds	r3, #92	; 0x5c
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	2bc8      	cmp	r3, #200	; 0xc8
 8004836:	d806      	bhi.n	8004846 <_ZN9LineTrace7runningEv+0x2d2>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	330c      	adds	r3, #12
 800483c:	2159      	movs	r1, #89	; 0x59
 800483e:	4618      	mov	r0, r3
 8004840:	f7fd fbe8 	bl	8002014 <_ZN3LED9fullColorEc>
 8004844:	e6a3      	b.n	800458e <_ZN9LineTrace7runningEv+0x1a>
		else led_.fullColor('B');
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	330c      	adds	r3, #12
 800484a:	2142      	movs	r1, #66	; 0x42
 800484c:	4618      	mov	r0, r3
 800484e:	f7fd fbe1 	bl	8002014 <_ZN3LED9fullColorEc>
	while(goal_flag == false){
 8004852:	e69c      	b.n	800458e <_ZN9LineTrace7runningEv+0x1a>
	}

	stop();
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f807 	bl	8004868 <_ZN9LineTrace4stopEv>
}
 800485a:	bf00      	nop
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	00000000 	.word	0x00000000

08004868 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af02      	add	r7, sp, #8
 800486e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	4618      	mov	r0, r3
 800487e:	f001 fdff 	bl	8006480 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	330c      	adds	r3, #12
 8004886:	2201      	movs	r2, #1
 8004888:	f04f 31ff 	mov.w	r1, #4294967295
 800488c:	4618      	mov	r0, r3
 800488e:	f7fd fc7d 	bl	800218c <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004898:	3364      	adds	r3, #100	; 0x64
 800489a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d11e      	bne.n	80048e0 <_ZN9LineTrace4stopEv+0x78>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69d8      	ldr	r0, [r3, #28]
 80048a6:	4b26      	ldr	r3, [pc, #152]	; (8004940 <_ZN9LineTrace4stopEv+0xd8>)
 80048a8:	4a26      	ldr	r2, [pc, #152]	; (8004944 <_ZN9LineTrace4stopEv+0xdc>)
 80048aa:	4927      	ldr	r1, [pc, #156]	; (8004948 <_ZN9LineTrace4stopEv+0xe0>)
 80048ac:	f000 fc1f 	bl	80050ee <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80048b6:	3368      	adds	r3, #104	; 0x68
 80048b8:	2200      	movs	r2, #0
 80048ba:	9200      	str	r2, [sp, #0]
 80048bc:	2264      	movs	r2, #100	; 0x64
 80048be:	4923      	ldr	r1, [pc, #140]	; (800494c <_ZN9LineTrace4stopEv+0xe4>)
 80048c0:	4821      	ldr	r0, [pc, #132]	; (8004948 <_ZN9LineTrace4stopEv+0xe0>)
 80048c2:	f7fc ff47 	bl	8001754 <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 80048cc:	3388      	adds	r3, #136	; 0x88
 80048ce:	2200      	movs	r2, #0
 80048d0:	9200      	str	r2, [sp, #0]
 80048d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80048d6:	491e      	ldr	r1, [pc, #120]	; (8004950 <_ZN9LineTrace4stopEv+0xe8>)
 80048d8:	481b      	ldr	r0, [pc, #108]	; (8004948 <_ZN9LineTrace4stopEv+0xe0>)
 80048da:	f7fc ff3b 	bl	8001754 <sd_write_array_float>
 80048de:	e01d      	b.n	800491c <_ZN9LineTrace4stopEv+0xb4>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	69d8      	ldr	r0, [r3, #28]
 80048e4:	4b1b      	ldr	r3, [pc, #108]	; (8004954 <_ZN9LineTrace4stopEv+0xec>)
 80048e6:	4a1c      	ldr	r2, [pc, #112]	; (8004958 <_ZN9LineTrace4stopEv+0xf0>)
 80048e8:	4917      	ldr	r1, [pc, #92]	; (8004948 <_ZN9LineTrace4stopEv+0xe0>)
 80048ea:	f000 fc23 	bl	8005134 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDI2.TXT", CROSSLINE_SIZE, crossline_distance2_, OVER_WRITE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 80048f4:	33f8      	adds	r3, #248	; 0xf8
 80048f6:	2200      	movs	r2, #0
 80048f8:	9200      	str	r2, [sp, #0]
 80048fa:	2264      	movs	r2, #100	; 0x64
 80048fc:	4917      	ldr	r1, [pc, #92]	; (800495c <_ZN9LineTrace4stopEv+0xf4>)
 80048fe:	4812      	ldr	r0, [pc, #72]	; (8004948 <_ZN9LineTrace4stopEv+0xe0>)
 8004900:	f7fc ff28 	bl	8001754 <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS2.TXT", SIDELINE_SIZE, sideline_distance2_, OVER_WRITE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f503 4347 	add.w	r3, r3, #50944	; 0xc700
 800490a:	3358      	adds	r3, #88	; 0x58
 800490c:	2200      	movs	r2, #0
 800490e:	9200      	str	r2, [sp, #0]
 8004910:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004914:	4912      	ldr	r1, [pc, #72]	; (8004960 <_ZN9LineTrace4stopEv+0xf8>)
 8004916:	480c      	ldr	r0, [pc, #48]	; (8004948 <_ZN9LineTrace4stopEv+0xe0>)
 8004918:	f7fc ff1c 	bl	8001754 <sd_write_array_float>
	}
	//sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);

	led_.LR(-1, 0);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	330c      	adds	r3, #12
 8004920:	2200      	movs	r2, #0
 8004922:	f04f 31ff 	mov.w	r1, #4294967295
 8004926:	4618      	mov	r0, r3
 8004928:	f7fd fc30 	bl	800218c <_ZN3LED2LREaa>

	logger_->resetIdx();
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	4618      	mov	r0, r3
 8004932:	f000 fcdb 	bl	80052ec <_ZN6Logger8resetIdxEv>
	//logger_->resetLogsDis2();
}
 8004936:	bf00      	nop
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	0801a7f8 	.word	0x0801a7f8
 8004944:	0801a804 	.word	0x0801a804
 8004948:	0801a814 	.word	0x0801a814
 800494c:	0801a820 	.word	0x0801a820
 8004950:	0801a830 	.word	0x0801a830
 8004954:	0801a83c 	.word	0x0801a83c
 8004958:	0801a848 	.word	0x0801a848
 800495c:	0801a858 	.word	0x0801a858
 8004960:	0801a868 	.word	0x0801a868

08004964 <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 8004964:	b590      	push	{r4, r7, lr}
 8004966:	b08b      	sub	sp, #44	; 0x2c
 8004968:	af02      	add	r7, sp, #8
 800496a:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	4618      	mov	r0, r3
 8004972:	f000 fb76 	bl	8005062 <_ZN6Logger23getDistanceArrayPointerEv>
 8004976:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fb7e 	bl	800507e <_ZN6Logger20getThetaArrayPointerEv>
 8004982:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004984:	2300      	movs	r3, #0
 8004986:	837b      	strh	r3, [r7, #26]
 8004988:	8b7b      	ldrh	r3, [r7, #26]
 800498a:	f241 726f 	movw	r2, #5999	; 0x176f
 800498e:	4293      	cmp	r3, r2
 8004990:	d84b      	bhi.n	8004a2a <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8004992:	8b7b      	ldrh	r3, [r7, #26]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4413      	add	r3, r2
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 800499e:	8b7b      	ldrh	r3, [r7, #26]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4413      	add	r3, r2
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 80049aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80049ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80049b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b6:	d101      	bne.n	80049bc <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 80049b8:	4b75      	ldr	r3, [pc, #468]	; (8004b90 <_ZN9LineTrace20createVelocityTabeleEv+0x22c>)
 80049ba:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 80049bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80049c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80049c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80049c8:	eeb0 0a66 	vmov.f32	s0, s13
 80049cc:	f7fd fee4 	bl	8002798 <_ZSt3absf>
 80049d0:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 80049d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80049d8:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8004b94 <_ZN9LineTrace20createVelocityTabeleEv+0x230>
 80049dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e4:	db01      	blt.n	80049ea <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 80049e6:	4b6c      	ldr	r3, [pc, #432]	; (8004b98 <_ZN9LineTrace20createVelocityTabeleEv+0x234>)
 80049e8:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 80049ea:	8b7c      	ldrh	r4, [r7, #26]
 80049ec:	ed97 0a05 	vldr	s0, [r7, #20]
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7fe fbe9 	bl	80031c8 <_ZN9LineTrace15radius2VelocityEf>
 80049f6:	eef0 7a40 	vmov.f32	s15, s0
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004a00:	3308      	adds	r3, #8
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004a0a:	8b7b      	ldrh	r3, [r7, #26]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	441a      	add	r2, r3
 8004a12:	8b7b      	ldrh	r3, [r7, #26]
 8004a14:	6812      	ldr	r2, [r2, #0]
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	3336      	adds	r3, #54	; 0x36
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	3304      	adds	r3, #4
 8004a20:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004a22:	8b7b      	ldrh	r3, [r7, #26]
 8004a24:	3301      	adds	r3, #1
 8004a26:	837b      	strh	r3, [r7, #26]
 8004a28:	e7ae      	b.n	8004988 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004a30:	3364      	adds	r3, #100	; 0x64
 8004a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d120      	bne.n	8004a7c <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004a46:	3320      	adds	r3, #32
 8004a48:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004a50:	333c      	adds	r3, #60	; 0x3c
 8004a52:	edd3 7a00 	vldr	s15, [r3]
 8004a56:	6939      	ldr	r1, [r7, #16]
 8004a58:	eeb0 0a67 	vmov.f32	s0, s15
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7fe fd2b 	bl	80034b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004a68:	3338      	adds	r3, #56	; 0x38
 8004a6a:	edd3 7a00 	vldr	s15, [r3]
 8004a6e:	6939      	ldr	r1, [r7, #16]
 8004a70:	eeb0 0a67 	vmov.f32	s0, s15
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7fe fdc3 	bl	8003600 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004a7a:	e079      	b.n	8004b70 <_ZN9LineTrace20createVelocityTabeleEv+0x20c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004a82:	3364      	adds	r3, #100	; 0x64
 8004a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d120      	bne.n	8004ace <_ZN9LineTrace20createVelocityTabeleEv+0x16a>
		velocity_table_[0] = min_velocity2_;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004a98:	3320      	adds	r3, #32
 8004a9a:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004aa2:	3344      	adds	r3, #68	; 0x44
 8004aa4:	edd3 7a00 	vldr	s15, [r3]
 8004aa8:	6939      	ldr	r1, [r7, #16]
 8004aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fe fd02 	bl	80034b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004aba:	3340      	adds	r3, #64	; 0x40
 8004abc:	edd3 7a00 	vldr	s15, [r3]
 8004ac0:	6939      	ldr	r1, [r7, #16]
 8004ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fe fd9a 	bl	8003600 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004acc:	e050      	b.n	8004b70 <_ZN9LineTrace20createVelocityTabeleEv+0x20c>
	}
	else if(mode_selector_ == FOURTH_RUNNING){
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004ad4:	3364      	adds	r3, #100	; 0x64
 8004ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ada:	2b03      	cmp	r3, #3
 8004adc:	d120      	bne.n	8004b20 <_ZN9LineTrace20createVelocityTabeleEv+0x1bc>
		velocity_table_[0] = min_velocity3_;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004aea:	3320      	adds	r3, #32
 8004aec:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec3_, p_distance);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004af4:	334c      	adds	r3, #76	; 0x4c
 8004af6:	edd3 7a00 	vldr	s15, [r3]
 8004afa:	6939      	ldr	r1, [r7, #16]
 8004afc:	eeb0 0a67 	vmov.f32	s0, s15
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7fe fcd9 	bl	80034b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc3_, p_distance);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004b0c:	3348      	adds	r3, #72	; 0x48
 8004b0e:	edd3 7a00 	vldr	s15, [r3]
 8004b12:	6939      	ldr	r1, [r7, #16]
 8004b14:	eeb0 0a67 	vmov.f32	s0, s15
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7fe fd71 	bl	8003600 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004b1e:	e027      	b.n	8004b70 <_ZN9LineTrace20createVelocityTabeleEv+0x20c>
	}
	else if(mode_selector_ == FIFTH_RUNNING){
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004b26:	3364      	adds	r3, #100	; 0x64
 8004b28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d11f      	bne.n	8004b70 <_ZN9LineTrace20createVelocityTabeleEv+0x20c>
		velocity_table_[0] = min_velocity4_;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004b3c:	3320      	adds	r3, #32
 8004b3e:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec4_, p_distance);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004b46:	3354      	adds	r3, #84	; 0x54
 8004b48:	edd3 7a00 	vldr	s15, [r3]
 8004b4c:	6939      	ldr	r1, [r7, #16]
 8004b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fe fcb0 	bl	80034b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc4_, p_distance);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004b5e:	3350      	adds	r3, #80	; 0x50
 8004b60:	edd3 7a00 	vldr	s15, [r3]
 8004b64:	6939      	ldr	r1, [r7, #16]
 8004b66:	eeb0 0a67 	vmov.f32	s0, s15
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fe fd48 	bl	8003600 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004b76:	3320      	adds	r3, #32
 8004b78:	2200      	movs	r2, #0
 8004b7a:	9200      	str	r2, [sp, #0]
 8004b7c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b80:	4906      	ldr	r1, [pc, #24]	; (8004b9c <_ZN9LineTrace20createVelocityTabeleEv+0x238>)
 8004b82:	4807      	ldr	r0, [pc, #28]	; (8004ba0 <_ZN9LineTrace20createVelocityTabeleEv+0x23c>)
 8004b84:	f7fc fde6 	bl	8001754 <sd_write_array_float>

}
 8004b88:	bf00      	nop
 8004b8a:	3724      	adds	r7, #36	; 0x24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd90      	pop	{r4, r7, pc}
 8004b90:	3727c5ac 	.word	0x3727c5ac
 8004b94:	459c4000 	.word	0x459c4000
 8004b98:	459c4000 	.word	0x459c4000
 8004b9c:	0801a878 	.word	0x0801a878
 8004ba0:	0801a814 	.word	0x0801a814

08004ba4 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 8004ba4:	b590      	push	{r4, r7, lr}
 8004ba6:	b08b      	sub	sp, #44	; 0x2c
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	69d8      	ldr	r0, [r3, #28]
 8004bb0:	4b94      	ldr	r3, [pc, #592]	; (8004e04 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x260>)
 8004bb2:	4a95      	ldr	r2, [pc, #596]	; (8004e08 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x264>)
 8004bb4:	4995      	ldr	r1, [pc, #596]	; (8004e0c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x268>)
 8004bb6:	f000 fae1 	bl	800517c <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004bc0:	3368      	adds	r3, #104	; 0x68
 8004bc2:	2264      	movs	r2, #100	; 0x64
 8004bc4:	4992      	ldr	r1, [pc, #584]	; (8004e10 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x26c>)
 8004bc6:	4891      	ldr	r0, [pc, #580]	; (8004e0c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x268>)
 8004bc8:	f7fc fe2a 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8004bd2:	3388      	adds	r3, #136	; 0x88
 8004bd4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004bd8:	498e      	ldr	r1, [pc, #568]	; (8004e14 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x270>)
 8004bda:	488c      	ldr	r0, [pc, #560]	; (8004e0c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x268>)
 8004bdc:	f7fc fe20 	bl	8001820 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fa3c 	bl	8005062 <_ZN6Logger23getDistanceArrayPointerEv>
 8004bea:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 fa44 	bl	800507e <_ZN6Logger20getThetaArrayPointerEv>
 8004bf6:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	837b      	strh	r3, [r7, #26]
 8004bfc:	8b7b      	ldrh	r3, [r7, #26]
 8004bfe:	f241 726f 	movw	r2, #5999	; 0x176f
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d84b      	bhi.n	8004c9e <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 8004c06:	8b7b      	ldrh	r3, [r7, #26]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8004c12:	8b7b      	ldrh	r3, [r7, #26]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	4413      	add	r3, r2
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004c1e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004c22:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c2a:	d101      	bne.n	8004c30 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8004c2c:	4b7a      	ldr	r3, [pc, #488]	; (8004e18 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x274>)
 8004c2e:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 8004c30:	ed97 7a02 	vldr	s14, [r7, #8]
 8004c34:	edd7 7a07 	vldr	s15, [r7, #28]
 8004c38:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c3c:	eeb0 0a66 	vmov.f32	s0, s13
 8004c40:	f7fd fdaa 	bl	8002798 <_ZSt3absf>
 8004c44:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 8004c48:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c4c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8004e1c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x278>
 8004c50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c58:	db01      	blt.n	8004c5e <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 8004c5a:	4b71      	ldr	r3, [pc, #452]	; (8004e20 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x27c>)
 8004c5c:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 8004c5e:	8b7c      	ldrh	r4, [r7, #26]
 8004c60:	ed97 0a05 	vldr	s0, [r7, #20]
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7fe faaf 	bl	80031c8 <_ZN9LineTrace15radius2VelocityEf>
 8004c6a:	eef0 7a40 	vmov.f32	s15, s0
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004c74:	3308      	adds	r3, #8
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004c7e:	8b7b      	ldrh	r3, [r7, #26]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	441a      	add	r2, r3
 8004c86:	8b7b      	ldrh	r3, [r7, #26]
 8004c88:	6812      	ldr	r2, [r2, #0]
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	3336      	adds	r3, #54	; 0x36
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	3304      	adds	r3, #4
 8004c94:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004c96:	8b7b      	ldrh	r3, [r7, #26]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	837b      	strh	r3, [r7, #26]
 8004c9c:	e7ae      	b.n	8004bfc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004ca4:	3364      	adds	r3, #100	; 0x64
 8004ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d120      	bne.n	8004cf0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004cba:	3320      	adds	r3, #32
 8004cbc:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004cc4:	333c      	adds	r3, #60	; 0x3c
 8004cc6:	edd3 7a00 	vldr	s15, [r3]
 8004cca:	6939      	ldr	r1, [r7, #16]
 8004ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7fe fbf1 	bl	80034b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004cdc:	3338      	adds	r3, #56	; 0x38
 8004cde:	edd3 7a00 	vldr	s15, [r3]
 8004ce2:	6939      	ldr	r1, [r7, #16]
 8004ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7fe fc89 	bl	8003600 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004cee:	e079      	b.n	8004de4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x240>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004cf6:	3364      	adds	r3, #100	; 0x64
 8004cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d120      	bne.n	8004d42 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19e>
		velocity_table_[0] = min_velocity2_;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004d0c:	3320      	adds	r3, #32
 8004d0e:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004d16:	3344      	adds	r3, #68	; 0x44
 8004d18:	edd3 7a00 	vldr	s15, [r3]
 8004d1c:	6939      	ldr	r1, [r7, #16]
 8004d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7fe fbc8 	bl	80034b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004d2e:	3340      	adds	r3, #64	; 0x40
 8004d30:	edd3 7a00 	vldr	s15, [r3]
 8004d34:	6939      	ldr	r1, [r7, #16]
 8004d36:	eeb0 0a67 	vmov.f32	s0, s15
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7fe fc60 	bl	8003600 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004d40:	e050      	b.n	8004de4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x240>
	}
	else if(mode_selector_ == FOURTH_RUNNING){
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004d48:	3364      	adds	r3, #100	; 0x64
 8004d4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	d120      	bne.n	8004d94 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1f0>
		velocity_table_[0] = min_velocity3_;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004d5e:	3320      	adds	r3, #32
 8004d60:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec3_, p_distance);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004d68:	334c      	adds	r3, #76	; 0x4c
 8004d6a:	edd3 7a00 	vldr	s15, [r3]
 8004d6e:	6939      	ldr	r1, [r7, #16]
 8004d70:	eeb0 0a67 	vmov.f32	s0, s15
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7fe fb9f 	bl	80034b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc3_, p_distance);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004d80:	3348      	adds	r3, #72	; 0x48
 8004d82:	edd3 7a00 	vldr	s15, [r3]
 8004d86:	6939      	ldr	r1, [r7, #16]
 8004d88:	eeb0 0a67 	vmov.f32	s0, s15
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7fe fc37 	bl	8003600 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004d92:	e027      	b.n	8004de4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x240>
	}
	else if(mode_selector_ == FIFTH_RUNNING){
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004d9a:	3364      	adds	r3, #100	; 0x64
 8004d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d11f      	bne.n	8004de4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x240>
		velocity_table_[0] = min_velocity4_;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004db0:	3320      	adds	r3, #32
 8004db2:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec4_, p_distance);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004dba:	3354      	adds	r3, #84	; 0x54
 8004dbc:	edd3 7a00 	vldr	s15, [r3]
 8004dc0:	6939      	ldr	r1, [r7, #16]
 8004dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7fe fb76 	bl	80034b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc4_, p_distance);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004dd2:	3350      	adds	r3, #80	; 0x50
 8004dd4:	edd3 7a00 	vldr	s15, [r3]
 8004dd8:	6939      	ldr	r1, [r7, #16]
 8004dda:	eeb0 0a67 	vmov.f32	s0, s15
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fe fc0e 	bl	8003600 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004dea:	3320      	adds	r3, #32
 8004dec:	2200      	movs	r2, #0
 8004dee:	9200      	str	r2, [sp, #0]
 8004df0:	f241 7270 	movw	r2, #6000	; 0x1770
 8004df4:	490b      	ldr	r1, [pc, #44]	; (8004e24 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x280>)
 8004df6:	4805      	ldr	r0, [pc, #20]	; (8004e0c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x268>)
 8004df8:	f7fc fcac 	bl	8001754 <sd_write_array_float>

}
 8004dfc:	bf00      	nop
 8004dfe:	3724      	adds	r7, #36	; 0x24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd90      	pop	{r4, r7, pc}
 8004e04:	0801a7f8 	.word	0x0801a7f8
 8004e08:	0801a804 	.word	0x0801a804
 8004e0c:	0801a814 	.word	0x0801a814
 8004e10:	0801a820 	.word	0x0801a820
 8004e14:	0801a830 	.word	0x0801a830
 8004e18:	3727c5ac 	.word	0x3727c5ac
 8004e1c:	459c4000 	.word	0x459c4000
 8004e20:	459c4000 	.word	0x459c4000
 8004e24:	0801a878 	.word	0x0801a878

08004e28 <_ZN6LoggerC1Ev>:
#include "AQM0802.h"

uint16_t mon_idx1, mon_idx2;
float mon_data1, mon_data2, mon_data3;

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004e36:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	701a      	strb	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004e44:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004e48:	2200      	movs	r2, #0
 8004e4a:	801a      	strh	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004e52:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004e56:	2200      	movs	r2, #0
 8004e58:	801a      	strh	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004e60:	f203 33a6 	addw	r3, r3, #934	; 0x3a6
 8004e64:	2200      	movs	r2, #0
 8004e66:	801a      	strh	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004e6e:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8004e72:	2200      	movs	r2, #0
 8004e74:	801a      	strh	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004e7c:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004e80:	2200      	movs	r2, #0
 8004e82:	801a      	strh	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4618      	mov	r0, r3
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
	...

08004e94 <_ZN6Logger8storeLogEf>:
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
}
void Logger::storeLog(float data)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004ea6:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d034      	beq.n	8004f1a <_ZN6Logger8storeLogEf+0x86>
		store_data_float_[log_index_tim_] = data;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004eb6:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004eba:	881b      	ldrh	r3, [r3, #0]
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004ecc:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004edc:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004ee0:	801a      	strh	r2, [r3, #0]
		mon_idx1 = log_index_tim_;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004ee8:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004eec:	881a      	ldrh	r2, [r3, #0]
 8004eee:	4b0e      	ldr	r3, [pc, #56]	; (8004f28 <_ZN6Logger8storeLogEf+0x94>)
 8004ef0:	801a      	strh	r2, [r3, #0]
		mon_data1 = data;
 8004ef2:	4a0e      	ldr	r2, [pc, #56]	; (8004f2c <_ZN6Logger8storeLogEf+0x98>)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	6013      	str	r3, [r2, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004efe:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d906      	bls.n	8004f1a <_ZN6Logger8storeLogEf+0x86>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004f12:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004f16:	2200      	movs	r2, #0
 8004f18:	801a      	strh	r2, [r3, #0]
	}
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	2000021e 	.word	0x2000021e
 8004f2c:	20000224 	.word	0x20000224

08004f30 <_ZN6Logger9storeLog2Ef>:

void Logger::storeLog2(float data)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004f42:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d036      	beq.n	8004fba <_ZN6Logger9storeLog2Ef+0x8a>
		store_data_float2_[log_index_tim2_] = data;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004f52:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004f6c:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	3301      	adds	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004f7c:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004f80:	801a      	strh	r2, [r3, #0]
		mon_idx2 = log_index_tim2_;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004f88:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004f8c:	881a      	ldrh	r2, [r3, #0]
 8004f8e:	4b0e      	ldr	r3, [pc, #56]	; (8004fc8 <_ZN6Logger9storeLog2Ef+0x98>)
 8004f90:	801a      	strh	r2, [r3, #0]
		mon_data2 = data;
 8004f92:	4a0e      	ldr	r2, [pc, #56]	; (8004fcc <_ZN6Logger9storeLog2Ef+0x9c>)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	6013      	str	r3, [r2, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004f9e:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d906      	bls.n	8004fba <_ZN6Logger9storeLog2Ef+0x8a>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004fb2:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	801a      	strh	r2, [r3, #0]
	}
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	20000220 	.word	0x20000220
 8004fcc:	20000228 	.word	0x20000228

08004fd0 <_ZN6Logger21storeDistanceAndThetaEff>:
	}

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	ed87 0a02 	vstr	s0, [r7, #8]
 8004fdc:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004fe6:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	f503 530c 	add.w	r3, r3, #8960	; 0x2300
 8004ff2:	3328      	adds	r3, #40	; 0x28
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005002:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 800500e:	3318      	adds	r3, #24
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800501e:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	3301      	adds	r3, #1
 8005026:	b29a      	uxth	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800502e:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8005032:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800503a:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 800503e:	881b      	ldrh	r3, [r3, #0]
 8005040:	f241 726f 	movw	r2, #5999	; 0x176f
 8005044:	4293      	cmp	r3, r2
 8005046:	d906      	bls.n	8005056 <_ZN6Logger21storeDistanceAndThetaEff+0x86>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800504e:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8005052:	2200      	movs	r2, #0
 8005054:	801a      	strh	r2, [r3, #0]
	//}
}
 8005056:	bf00      	nop
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <_ZN6Logger23getDistanceArrayPointerEv>:

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
	//}
}
const float *Logger::getDistanceArrayPointer()
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
	return store_distance_;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8005070:	33a0      	adds	r3, #160	; 0xa0
}
 8005072:	4618      	mov	r0, r3
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 800508c:	3360      	adds	r3, #96	; 0x60
}
 800508e:	4618      	mov	r0, r3
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b086      	sub	sp, #24
 800509e:	af02      	add	r7, sp, #8
 80050a0:	60f8      	str	r0, [r7, #12]
 80050a2:	60b9      	str	r1, [r7, #8]
 80050a4:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	2300      	movs	r3, #0
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	4613      	mov	r3, r2
 80050ae:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	68b8      	ldr	r0, [r7, #8]
 80050b6:	f7fc fb4d 	bl	8001754 <sd_write_array_float>
}
 80050ba:	bf00      	nop
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b086      	sub	sp, #24
 80050c6:	af02      	add	r7, sp, #8
 80050c8:	60f8      	str	r0, [r7, #12]
 80050ca:	60b9      	str	r1, [r7, #8]
 80050cc:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80050d4:	3320      	adds	r3, #32
 80050d6:	2200      	movs	r2, #0
 80050d8:	9200      	str	r2, [sp, #0]
 80050da:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80050de:	6879      	ldr	r1, [r7, #4]
 80050e0:	68b8      	ldr	r0, [r7, #8]
 80050e2:	f7fc fb37 	bl	8001754 <sd_write_array_float>
}
 80050e6:	bf00      	nop
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
}
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b086      	sub	sp, #24
 80050f2:	af02      	add	r7, sp, #8
 80050f4:	60f8      	str	r0, [r7, #12]
 80050f6:	60b9      	str	r1, [r7, #8]
 80050f8:	607a      	str	r2, [r7, #4]
 80050fa:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8005102:	33a0      	adds	r3, #160	; 0xa0
 8005104:	2200      	movs	r2, #0
 8005106:	9200      	str	r2, [sp, #0]
 8005108:	f241 7270 	movw	r2, #6000	; 0x1770
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	68b8      	ldr	r0, [r7, #8]
 8005110:	f7fc fb20 	bl	8001754 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 800511a:	3360      	adds	r3, #96	; 0x60
 800511c:	2200      	movs	r2, #0
 800511e:	9200      	str	r2, [sp, #0]
 8005120:	f241 7270 	movw	r2, #6000	; 0x1770
 8005124:	6839      	ldr	r1, [r7, #0]
 8005126:	68b8      	ldr	r0, [r7, #8]
 8005128:	f7fc fb14 	bl	8001754 <sd_write_array_float>
}
 800512c:	bf00      	nop
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af02      	add	r7, sp, #8
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 8005148:	3320      	adds	r3, #32
 800514a:	2200      	movs	r2, #0
 800514c:	9200      	str	r2, [sp, #0]
 800514e:	f241 7270 	movw	r2, #6000	; 0x1770
 8005152:	6879      	ldr	r1, [r7, #4]
 8005154:	68b8      	ldr	r0, [r7, #8]
 8005156:	f7fc fafd 	bl	8001754 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f503 33d2 	add.w	r3, r3, #107520	; 0x1a400
 8005160:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8005164:	2200      	movs	r2, #0
 8005166:	9200      	str	r2, [sp, #0]
 8005168:	f241 7270 	movw	r2, #6000	; 0x1770
 800516c:	6839      	ldr	r1, [r7, #0]
 800516e:	68b8      	ldr	r0, [r7, #8]
 8005170:	f7fc faf0 	bl	8001754 <sd_write_array_float>
}
 8005174:	bf00      	nop
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8005190:	33a0      	adds	r3, #160	; 0xa0
 8005192:	f241 7270 	movw	r2, #6000	; 0x1770
 8005196:	6879      	ldr	r1, [r7, #4]
 8005198:	68b8      	ldr	r0, [r7, #8]
 800519a:	f7fc fb41 	bl	8001820 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 80051a4:	3360      	adds	r3, #96	; 0x60
 80051a6:	f241 7270 	movw	r2, #6000	; 0x1770
 80051aa:	6839      	ldr	r1, [r7, #0]
 80051ac:	68b8      	ldr	r0, [r7, #8]
 80051ae:	f7fc fb37 	bl	8001820 <sd_read_array_float>
}
 80051b2:	bf00      	nop
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <_ZN6Logger13resetLogsDis2Ev>:

	log_index_tim_ = 0;
}

void Logger::resetLogsDis2()
{
 80051ba:	b480      	push	{r7}
 80051bc:	b08b      	sub	sp, #44	; 0x2c
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 80051c8:	3320      	adds	r3, #32
 80051ca:	61fb      	str	r3, [r7, #28]
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	627b      	str	r3, [r7, #36]	; 0x24
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80051d6:	3340      	adds	r3, #64	; 0x40
 80051d8:	61bb      	str	r3, [r7, #24]
 80051da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d009      	beq.n	80051f6 <_ZN6Logger13resetLogsDis2Ev+0x3c>
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	617b      	str	r3, [r7, #20]
		log = 0;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	3304      	adds	r3, #4
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24
 80051f4:	e7f1      	b.n	80051da <_ZN6Logger13resetLogsDis2Ev+0x20>
	}
	for(auto &log : store_theta2_){
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f503 33d2 	add.w	r3, r3, #107520	; 0x1a400
 80051fc:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8005200:	613b      	str	r3, [r7, #16]
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	623b      	str	r3, [r7, #32]
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800520c:	3340      	adds	r3, #64	; 0x40
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	6a3a      	ldr	r2, [r7, #32]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	429a      	cmp	r2, r3
 8005216:	d009      	beq.n	800522c <_ZN6Logger13resetLogsDis2Ev+0x72>
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	60bb      	str	r3, [r7, #8]
		log = 0;
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	3304      	adds	r3, #4
 8005228:	623b      	str	r3, [r7, #32]
 800522a:	e7f1      	b.n	8005210 <_ZN6Logger13resetLogsDis2Ev+0x56>
	}

	log_index_tim2_ = 0;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005232:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8005236:	2200      	movs	r2, #0
 8005238:	801a      	strh	r2, [r3, #0]
}
 800523a:	bf00      	nop
 800523c:	372c      	adds	r7, #44	; 0x2c
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <_ZN6Logger13resetLogsTim1Ev>:

void Logger::resetLogsTim1()
{
 8005246:	b480      	push	{r7}
 8005248:	b087      	sub	sp, #28
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
	for(auto &log : store_data_float_){
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	613b      	str	r3, [r7, #16]
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 800525c:	3320      	adds	r3, #32
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	429a      	cmp	r2, r3
 8005266:	d009      	beq.n	800527c <_ZN6Logger13resetLogsTim1Ev+0x36>
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	60bb      	str	r3, [r7, #8]
		log = 0;
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f04f 0200 	mov.w	r2, #0
 8005272:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float_){
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	3304      	adds	r3, #4
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	e7f1      	b.n	8005260 <_ZN6Logger13resetLogsTim1Ev+0x1a>
	}

	log_index_tim_ = 0;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005282:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8005286:	2200      	movs	r2, #0
 8005288:	801a      	strh	r2, [r3, #0]
}
 800528a:	bf00      	nop
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <_ZN6Logger13resetLogsTim2Ev>:

void Logger::resetLogsTim2()
{
 8005296:	b480      	push	{r7}
 8005298:	b087      	sub	sp, #28
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
	for(auto &log : store_data_float2_){
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80052a4:	3320      	adds	r3, #32
 80052a6:	613b      	str	r3, [r7, #16]
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80052b2:	3320      	adds	r3, #32
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d009      	beq.n	80052d2 <_ZN6Logger13resetLogsTim2Ev+0x3c>
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	60bb      	str	r3, [r7, #8]
		log = 0;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float2_){
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	3304      	adds	r3, #4
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	e7f1      	b.n	80052b6 <_ZN6Logger13resetLogsTim2Ev+0x20>
	}

	log_index_tim2_ = 0;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80052d8:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80052dc:	2200      	movs	r2, #0
 80052de:	801a      	strh	r2, [r3, #0]
}
 80052e0:	bf00      	nop
 80052e2:	371c      	adds	r7, #28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80052fa:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 80052fe:	2200      	movs	r2, #0
 8005300:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005308:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 800530c:	2200      	movs	r2, #0
 800530e:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005316:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 800531a:	2200      	movs	r2, #0
 800531c:	801a      	strh	r2, [r3, #0]
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <_ZN6Logger5startEv>:

void Logger::start()
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005338:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 800533c:	2200      	movs	r2, #0
 800533e:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005346:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 800534a:	2200      	movs	r2, #0
 800534c:	801a      	strh	r2, [r3, #0]
	recording_flag_ = true;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005354:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8005358:	2201      	movs	r2, #1
 800535a:	701a      	strb	r2, [r3, #0]
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005376:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 800537a:	2200      	movs	r2, #0
 800537c:	701a      	strb	r2, [r3, #0]
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
	...

0800538c <_ZN7Logger2C1EP6sdCardt>:
 *      Author: Haruki Shimotori
 */

#include "Logger2.hpp"

Logger2::Logger2(sdCard *sd_card, uint16_t size) : sd_card_(sd_card), log_idx_(0), recording_flag_(false), max_log_size_(size)
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	4613      	mov	r3, r2
 8005398:	80fb      	strh	r3, [r7, #6]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	809a      	strh	r2, [r3, #4]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	731a      	strb	r2, [r3, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	88fa      	ldrh	r2, [r7, #6]
 80053b0:	81da      	strh	r2, [r3, #14]
{
	logs_ = new float[size];
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	4a09      	ldr	r2, [pc, #36]	; (80053dc <_ZN7Logger2C1EP6sdCardt+0x50>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d801      	bhi.n	80053be <_ZN7Logger2C1EP6sdCardt+0x32>
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	e001      	b.n	80053c2 <_ZN7Logger2C1EP6sdCardt+0x36>
 80053be:	f04f 33ff 	mov.w	r3, #4294967295
 80053c2:	4618      	mov	r0, r3
 80053c4:	f010 fec7 	bl	8016156 <_Znaj>
 80053c8:	4603      	mov	r3, r0
 80053ca:	461a      	mov	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	609a      	str	r2, [r3, #8]
}
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	1ffffffe 	.word	0x1ffffffe

080053e0 <_ZN7Logger29storeLogsEf>:

void Logger2::storeLogs(float data)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	7b1b      	ldrb	r3, [r3, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d016      	beq.n	8005422 <_ZN7Logger29storeLogsEf+0x42>
		logs_[log_idx_] = data;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	889b      	ldrh	r3, [r3, #4]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	601a      	str	r2, [r3, #0]

		log_idx_++;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	889b      	ldrh	r3, [r3, #4]
 8005408:	3301      	adds	r3, #1
 800540a:	b29a      	uxth	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	809a      	strh	r2, [r3, #4]

		if(log_idx_ >= max_log_size_) log_idx_ = 0;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	889a      	ldrh	r2, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	89db      	ldrh	r3, [r3, #14]
 8005418:	429a      	cmp	r2, r3
 800541a:	d302      	bcc.n	8005422 <_ZN7Logger29storeLogsEf+0x42>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	809a      	strh	r2, [r3, #4]
	}

}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
	...

08005430 <_ZN7Logger28saveLogsEPKcS1_>:
void Logger2::saveLogs(const char *directory_name, const char *file_name)
{
 8005430:	b5b0      	push	{r4, r5, r7, lr}
 8005432:	b090      	sub	sp, #64	; 0x40
 8005434:	af02      	add	r7, sp, #8
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
	float soiya[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
 800543c:	4b0e      	ldr	r3, [pc, #56]	; (8005478 <_ZN7Logger28saveLogsEPKcS1_+0x48>)
 800543e:	f107 0410 	add.w	r4, r7, #16
 8005442:	461d      	mov	r5, r3
 8005444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800544a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800544c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005450:	e884 0003 	stmia.w	r4, {r0, r1}
	sd_card_->write_(directory_name, file_name, max_log_size_, logs_, OVER_WRITE);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6818      	ldr	r0, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	89d9      	ldrh	r1, [r3, #14]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	2200      	movs	r2, #0
 8005462:	9201      	str	r2, [sp, #4]
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	460b      	mov	r3, r1
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	68b9      	ldr	r1, [r7, #8]
 800546c:	f002 f848 	bl	8007500 <_ZN6sdCard6write_EPKcS1_tPfc>
}
 8005470:	bf00      	nop
 8005472:	3738      	adds	r7, #56	; 0x38
 8005474:	46bd      	mov	sp, r7
 8005476:	bdb0      	pop	{r4, r5, r7, pc}
 8005478:	0801a888 	.word	0x0801a888

0800547c <_ZN7Logger29clearLogsEv>:
void Logger2::clearLogs()
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < max_log_size_; i++){
 8005484:	2300      	movs	r3, #0
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	89db      	ldrh	r3, [r3, #14]
 800548c:	461a      	mov	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	4293      	cmp	r3, r2
 8005492:	da0b      	bge.n	80054ac <_ZN7Logger29clearLogsEv+0x30>
		logs_[i] = 0;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < max_log_size_; i++){
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	3301      	adds	r3, #1
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	e7ed      	b.n	8005488 <_ZN7Logger29clearLogsEv+0xc>
	}

	log_idx_ = 0;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	809a      	strh	r2, [r3, #4]

}
 80054b2:	bf00      	nop
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <_ZN7Logger25startEv>:

void Logger2::start()
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	731a      	strb	r2, [r3, #12]
	log_idx_ = 0;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	809a      	strh	r2, [r3, #4]

}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <_ZN7Logger24stopEv>:

void Logger2::stop()
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	731a      	strb	r2, [r3, #12]
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	801a      	strh	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	805a      	strh	r2, [r3, #2]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4618      	mov	r0, r3
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
	...

0800551c <_ZN5Motor4initEv>:

void Motor::init()
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8005524:	2108      	movs	r1, #8
 8005526:	4805      	ldr	r0, [pc, #20]	; (800553c <_ZN5Motor4initEv+0x20>)
 8005528:	f00b fae0 	bl	8010aec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800552c:	210c      	movs	r1, #12
 800552e:	4803      	ldr	r0, [pc, #12]	; (800553c <_ZN5Motor4initEv+0x20>)
 8005530:	f00b fadc 	bl	8010aec <HAL_TIM_PWM_Start>

}
 8005534:	bf00      	nop
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	20049a8c 	.word	0x20049a8c

08005540 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800554e:	2b00      	cmp	r3, #0
 8005550:	da0d      	bge.n	800556e <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8005552:	2200      	movs	r2, #0
 8005554:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005558:	481f      	ldr	r0, [pc, #124]	; (80055d8 <_ZN5Motor9motorCtrlEv+0x98>)
 800555a:	f007 fb95 	bl	800cc88 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005564:	b29b      	uxth	r3, r3
 8005566:	425b      	negs	r3, r3
 8005568:	b29b      	uxth	r3, r3
 800556a:	81fb      	strh	r3, [r7, #14]
 800556c:	e00a      	b.n	8005584 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 800556e:	2201      	movs	r2, #1
 8005570:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005574:	4818      	ldr	r0, [pc, #96]	; (80055d8 <_ZN5Motor9motorCtrlEv+0x98>)
 8005576:	f007 fb87 	bl	800cc88 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005580:	b29b      	uxth	r3, r3
 8005582:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800558a:	2b00      	cmp	r3, #0
 800558c:	da0d      	bge.n	80055aa <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 800558e:	2201      	movs	r2, #1
 8005590:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005594:	4810      	ldr	r0, [pc, #64]	; (80055d8 <_ZN5Motor9motorCtrlEv+0x98>)
 8005596:	f007 fb77 	bl	800cc88 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	425b      	negs	r3, r3
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	81bb      	strh	r3, [r7, #12]
 80055a8:	e00a      	b.n	80055c0 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80055aa:	2200      	movs	r2, #0
 80055ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80055b0:	4809      	ldr	r0, [pc, #36]	; (80055d8 <_ZN5Motor9motorCtrlEv+0x98>)
 80055b2:	f007 fb69 	bl	800cc88 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80055bc:	b29b      	uxth	r3, r3
 80055be:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 80055c0:	89fa      	ldrh	r2, [r7, #14]
 80055c2:	4b06      	ldr	r3, [pc, #24]	; (80055dc <_ZN5Motor9motorCtrlEv+0x9c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 80055c8:	89ba      	ldrh	r2, [r7, #12]
 80055ca:	4b04      	ldr	r3, [pc, #16]	; (80055dc <_ZN5Motor9motorCtrlEv+0x9c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	641a      	str	r2, [r3, #64]	; 0x40
}
 80055d0:	bf00      	nop
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40020c00 	.word	0x40020c00
 80055dc:	20049a8c 	.word	0x20049a8c

080055e0 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 80055e0:	b590      	push	{r4, r7, lr}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6178      	str	r0, [r7, #20]
 80055e8:	ed87 0b02 	vstr	d0, [r7, #8]
 80055ec:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	4b30      	ldr	r3, [pc, #192]	; (80056b8 <_ZN5Motor8setRatioEdd+0xd8>)
 80055f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055fa:	f7fb faa5 	bl	8000b48 <__aeabi_dcmpgt>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d005      	beq.n	8005610 <_ZN5Motor8setRatioEdd+0x30>
 8005604:	f04f 0300 	mov.w	r3, #0
 8005608:	4c2b      	ldr	r4, [pc, #172]	; (80056b8 <_ZN5Motor8setRatioEdd+0xd8>)
 800560a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800560e:	e00e      	b.n	800562e <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8005610:	f04f 0200 	mov.w	r2, #0
 8005614:	4b29      	ldr	r3, [pc, #164]	; (80056bc <_ZN5Motor8setRatioEdd+0xdc>)
 8005616:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800561a:	f7fb fa77 	bl	8000b0c <__aeabi_dcmplt>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d004      	beq.n	800562e <_ZN5Motor8setRatioEdd+0x4e>
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	4c24      	ldr	r4, [pc, #144]	; (80056bc <_ZN5Motor8setRatioEdd+0xdc>)
 800562a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 800562e:	f04f 0200 	mov.w	r2, #0
 8005632:	4b21      	ldr	r3, [pc, #132]	; (80056b8 <_ZN5Motor8setRatioEdd+0xd8>)
 8005634:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005638:	f7fb fa86 	bl	8000b48 <__aeabi_dcmpgt>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d005      	beq.n	800564e <_ZN5Motor8setRatioEdd+0x6e>
 8005642:	f04f 0300 	mov.w	r3, #0
 8005646:	4c1c      	ldr	r4, [pc, #112]	; (80056b8 <_ZN5Motor8setRatioEdd+0xd8>)
 8005648:	e9c7 3400 	strd	r3, r4, [r7]
 800564c:	e00e      	b.n	800566c <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 800564e:	f04f 0200 	mov.w	r2, #0
 8005652:	4b1a      	ldr	r3, [pc, #104]	; (80056bc <_ZN5Motor8setRatioEdd+0xdc>)
 8005654:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005658:	f7fb fa58 	bl	8000b0c <__aeabi_dcmplt>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d004      	beq.n	800566c <_ZN5Motor8setRatioEdd+0x8c>
 8005662:	f04f 0300 	mov.w	r3, #0
 8005666:	4c15      	ldr	r4, [pc, #84]	; (80056bc <_ZN5Motor8setRatioEdd+0xdc>)
 8005668:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 800566c:	f04f 0200 	mov.w	r2, #0
 8005670:	4b13      	ldr	r3, [pc, #76]	; (80056c0 <_ZN5Motor8setRatioEdd+0xe0>)
 8005672:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005676:	f7fa ffd7 	bl	8000628 <__aeabi_dmul>
 800567a:	4603      	mov	r3, r0
 800567c:	460c      	mov	r4, r1
 800567e:	4618      	mov	r0, r3
 8005680:	4621      	mov	r1, r4
 8005682:	f7fb fa81 	bl	8000b88 <__aeabi_d2iz>
 8005686:	4603      	mov	r3, r0
 8005688:	b21a      	sxth	r2, r3
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 800568e:	f04f 0200 	mov.w	r2, #0
 8005692:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <_ZN5Motor8setRatioEdd+0xe0>)
 8005694:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005698:	f7fa ffc6 	bl	8000628 <__aeabi_dmul>
 800569c:	4603      	mov	r3, r0
 800569e:	460c      	mov	r4, r1
 80056a0:	4618      	mov	r0, r3
 80056a2:	4621      	mov	r1, r4
 80056a4:	f7fb fa70 	bl	8000b88 <__aeabi_d2iz>
 80056a8:	4603      	mov	r3, r0
 80056aa:	b21a      	sxth	r2, r3
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	805a      	strh	r2, [r3, #2]

}
 80056b0:	bf00      	nop
 80056b2:	371c      	adds	r7, #28
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd90      	pop	{r4, r7, pc}
 80056b8:	3ff00000 	.word	0x3ff00000
 80056bc:	bff00000 	.word	0xbff00000
 80056c0:	409c2000 	.word	0x409c2000

080056c4 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 80056c4:	b490      	push	{r4, r7}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	603b      	str	r3, [r7, #0]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	f04f 0300 	mov.w	r3, #0
 80056d8:	f04f 0400 	mov.w	r4, #0
 80056dc:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	f04f 0300 	mov.w	r3, #0
 80056e6:	f04f 0400 	mov.w	r4, #0
 80056ea:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	f04f 0300 	mov.w	r3, #0
 80056f4:	f04f 0400 	mov.w	r4, #0
 80056f8:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	f04f 0300 	mov.w	r3, #0
 8005702:	f04f 0400 	mov.w	r4, #0
 8005706:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	f04f 0300 	mov.w	r3, #0
 8005710:	f04f 0400 	mov.w	r4, #0
 8005714:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	609a      	str	r2, [r3, #8]
}
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bc90      	pop	{r4, r7}
 8005734:	4770      	bx	lr
	...

08005738 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8005738:	b590      	push	{r4, r7, lr}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	4618      	mov	r0, r3
 8005746:	f7fc faa3 	bl	8001c90 <_ZN3IMU8getOmegaEv>
 800574a:	ee10 3a10 	vmov	r3, s0
 800574e:	4618      	mov	r0, r3
 8005750:	f7fa ff12 	bl	8000578 <__aeabi_f2d>
 8005754:	4603      	mov	r3, r0
 8005756:	460c      	mov	r4, r1
 8005758:	e9c7 3402 	strd	r3, r4, [r7, #8]
	//float distance = encoder_->getDistance();

	delta_theta_ = current_omega * DELTA_T;
 800575c:	a310      	add	r3, pc, #64	; (adr r3, 80057a0 <_ZN8Odometry12calcPotitionEv+0x68>)
 800575e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005762:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005766:	f7fa ff5f 	bl	8000628 <__aeabi_dmul>
 800576a:	4603      	mov	r3, r0
 800576c:	460c      	mov	r4, r1
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	//x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
	//y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
	theta_= theta_ + delta_theta_;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005780:	461a      	mov	r2, r3
 8005782:	4623      	mov	r3, r4
 8005784:	f7fa fd9a 	bl	80002bc <__adddf3>
 8005788:	4603      	mov	r3, r0
 800578a:	460c      	mov	r4, r1
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	//y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);

	//monitor_x = x_sens_;
	//monitor_y = y_sens_;
	//monitor_theta = theta_;
}
 8005792:	bf00      	nop
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	bd90      	pop	{r4, r7, pc}
 800579a:	bf00      	nop
 800579c:	f3af 8000 	nop.w
 80057a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80057a4:	3f50624d 	.word	0x3f50624d

080057a8 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
	calcPotition();
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f7ff ffc1 	bl	8005738 <_ZN8Odometry12calcPotitionEv>
}
 80057b6:	bf00      	nop
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 80057be:	b490      	push	{r4, r7}
 80057c0:	b082      	sub	sp, #8
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
	return theta_;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80057cc:	ec44 3b17 	vmov	d7, r3, r4
}
 80057d0:	eeb0 0a47 	vmov.f32	s0, s14
 80057d4:	eef0 0a67 	vmov.f32	s1, s15
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc90      	pop	{r4, r7}
 80057de:	4770      	bx	lr

080057e0 <_ZN8Odometry13getDeltaThetaEv>:

double Odometry::getDeltaTheta()
{
 80057e0:	b490      	push	{r4, r7}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
	return delta_theta_;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80057ee:	ec44 3b17 	vmov	d7, r3, r4
}
 80057f2:	eeb0 0a47 	vmov.f32	s0, s14
 80057f6:	eef0 0a67 	vmov.f32	s1, s15
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bc90      	pop	{r4, r7}
 8005800:	4770      	bx	lr

08005802 <_ZN8Odometry13clearPotitionEv>:

void Odometry::clearPotition()
{
 8005802:	b490      	push	{r4, r7}
 8005804:	b082      	sub	sp, #8
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	f04f 0300 	mov.w	r3, #0
 8005810:	f04f 0400 	mov.w	r4, #0
 8005814:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	f04f 0300 	mov.w	r3, #0
 800581e:	f04f 0400 	mov.w	r4, #0
 8005822:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	f04f 0300 	mov.w	r3, #0
 800582c:	f04f 0400 	mov.w	r4, #0
 8005830:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8005834:	bf00      	nop
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bc90      	pop	{r4, r7}
 800583c:	4770      	bx	lr
	...

08005840 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8005840:	b490      	push	{r4, r7}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	701a      	strb	r2, [r3, #0]
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	f04f 0300 	mov.w	r3, #0
 8005854:	f04f 0400 	mov.w	r4, #0
 8005858:	e9c2 3402 	strd	r3, r4, [r2, #8]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	f04f 0300 	mov.w	r3, #0
 8005862:	f04f 0400 	mov.w	r4, #0
 8005866:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	f04f 0300 	mov.w	r3, #0
 8005870:	f04f 0400 	mov.w	r4, #0
 8005874:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800587e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005882:	2200      	movs	r2, #0
 8005884:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8005886:	4a29      	ldr	r2, [pc, #164]	; (800592c <_ZN13PathFollowingC1Ev+0xec>)
 8005888:	f04f 0300 	mov.w	r3, #0
 800588c:	f04f 0400 	mov.w	r4, #0
 8005890:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8005894:	4a25      	ldr	r2, [pc, #148]	; (800592c <_ZN13PathFollowingC1Ev+0xec>)
 8005896:	f04f 0300 	mov.w	r3, #0
 800589a:	f04f 0400 	mov.w	r4, #0
 800589e:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 80058a2:	4a22      	ldr	r2, [pc, #136]	; (800592c <_ZN13PathFollowingC1Ev+0xec>)
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	f04f 0400 	mov.w	r4, #0
 80058ac:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 80058b0:	4a1f      	ldr	r2, [pc, #124]	; (8005930 <_ZN13PathFollowingC1Ev+0xf0>)
 80058b2:	f04f 0300 	mov.w	r3, #0
 80058b6:	f04f 0400 	mov.w	r4, #0
 80058ba:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 80058be:	4a1c      	ldr	r2, [pc, #112]	; (8005930 <_ZN13PathFollowingC1Ev+0xf0>)
 80058c0:	f04f 0300 	mov.w	r3, #0
 80058c4:	f04f 0400 	mov.w	r4, #0
 80058c8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 80058cc:	4a18      	ldr	r2, [pc, #96]	; (8005930 <_ZN13PathFollowingC1Ev+0xf0>)
 80058ce:	f04f 0300 	mov.w	r3, #0
 80058d2:	f04f 0400 	mov.w	r4, #0
 80058d6:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 80058da:	4a15      	ldr	r2, [pc, #84]	; (8005930 <_ZN13PathFollowingC1Ev+0xf0>)
 80058dc:	f04f 0300 	mov.w	r3, #0
 80058e0:	f04f 0400 	mov.w	r4, #0
 80058e4:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 80058e8:	4a11      	ldr	r2, [pc, #68]	; (8005930 <_ZN13PathFollowingC1Ev+0xf0>)
 80058ea:	f04f 0300 	mov.w	r3, #0
 80058ee:	f04f 0400 	mov.w	r4, #0
 80058f2:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 80058f6:	4a0e      	ldr	r2, [pc, #56]	; (8005930 <_ZN13PathFollowingC1Ev+0xf0>)
 80058f8:	f04f 0300 	mov.w	r3, #0
 80058fc:	f04f 0400 	mov.w	r4, #0
 8005900:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8005904:	4a0b      	ldr	r2, [pc, #44]	; (8005934 <_ZN13PathFollowingC1Ev+0xf4>)
 8005906:	f04f 0300 	mov.w	r3, #0
 800590a:	f04f 0400 	mov.w	r4, #0
 800590e:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8005912:	4a08      	ldr	r2, [pc, #32]	; (8005934 <_ZN13PathFollowingC1Ev+0xf4>)
 8005914:	f04f 0300 	mov.w	r3, #0
 8005918:	f04f 0400 	mov.w	r4, #0
 800591c:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4618      	mov	r0, r3
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bc90      	pop	{r4, r7}
 800592a:	4770      	bx	lr
 800592c:	20049f90 	.word	0x20049f90
 8005930:	20049f20 	.word	0x20049f20
 8005934:	20049f80 	.word	0x20049f80

08005938 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b088      	sub	sp, #32
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8005940:	f001 fd62 	bl	8007408 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8005944:	f107 0318 	add.w	r3, r7, #24
 8005948:	2201      	movs	r2, #1
 800594a:	4915      	ldr	r1, [pc, #84]	; (80059a0 <_ZN13PathFollowing4initEv+0x68>)
 800594c:	4815      	ldr	r0, [pc, #84]	; (80059a4 <_ZN13PathFollowing4initEv+0x6c>)
 800594e:	f7fb ffad 	bl	80018ac <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8005952:	f107 0310 	add.w	r3, r7, #16
 8005956:	2201      	movs	r2, #1
 8005958:	4913      	ldr	r1, [pc, #76]	; (80059a8 <_ZN13PathFollowing4initEv+0x70>)
 800595a:	4812      	ldr	r0, [pc, #72]	; (80059a4 <_ZN13PathFollowing4initEv+0x6c>)
 800595c:	f7fb ffa6 	bl	80018ac <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8005960:	f107 0308 	add.w	r3, r7, #8
 8005964:	2201      	movs	r2, #1
 8005966:	4911      	ldr	r1, [pc, #68]	; (80059ac <_ZN13PathFollowing4initEv+0x74>)
 8005968:	480e      	ldr	r0, [pc, #56]	; (80059a4 <_ZN13PathFollowing4initEv+0x6c>)
 800596a:	f7fb ff9f 	bl	80018ac <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 800596e:	ed97 7b06 	vldr	d7, [r7, #24]
 8005972:	ed97 6b04 	vldr	d6, [r7, #16]
 8005976:	ed97 5b02 	vldr	d5, [r7, #8]
 800597a:	eeb0 2a45 	vmov.f32	s4, s10
 800597e:	eef0 2a65 	vmov.f32	s5, s11
 8005982:	eeb0 1a46 	vmov.f32	s2, s12
 8005986:	eef0 1a66 	vmov.f32	s3, s13
 800598a:	eeb0 0a47 	vmov.f32	s0, s14
 800598e:	eef0 0a67 	vmov.f32	s1, s15
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f80c 	bl	80059b0 <_ZN13PathFollowing7setGainEddd>
}
 8005998:	bf00      	nop
 800599a:	3720      	adds	r7, #32
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	0801a8b0 	.word	0x0801a8b0
 80059a4:	0801a8b8 	.word	0x0801a8b8
 80059a8:	0801a8c0 	.word	0x0801a8c0
 80059ac:	0801a8c8 	.word	0x0801a8c8

080059b0 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 80059b0:	b490      	push	{r4, r7}
 80059b2:	b088      	sub	sp, #32
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	61f8      	str	r0, [r7, #28]
 80059b8:	ed87 0b04 	vstr	d0, [r7, #16]
 80059bc:	ed87 1b02 	vstr	d1, [r7, #8]
 80059c0:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 80059c4:	4a09      	ldr	r2, [pc, #36]	; (80059ec <_ZN13PathFollowing7setGainEddd+0x3c>)
 80059c6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80059ca:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 80059ce:	4a07      	ldr	r2, [pc, #28]	; (80059ec <_ZN13PathFollowing7setGainEddd+0x3c>)
 80059d0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80059d4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 80059d8:	4a04      	ldr	r2, [pc, #16]	; (80059ec <_ZN13PathFollowing7setGainEddd+0x3c>)
 80059da:	e9d7 3400 	ldrd	r3, r4, [r7]
 80059de:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80059e2:	bf00      	nop
 80059e4:	3720      	adds	r7, #32
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bc90      	pop	{r4, r7}
 80059ea:	4770      	bx	lr
 80059ec:	20049f90 	.word	0x20049f90

080059f0 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80059f8:	2088      	movs	r0, #136	; 0x88
 80059fa:	f7fc fa8c 	bl	8001f16 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80059fe:	2080      	movs	r0, #128	; 0x80
 8005a00:	f7fc fa89 	bl	8001f16 <INA260_init>
}
 8005a04:	bf00      	nop
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	0000      	movs	r0, r0
	...

08005a10 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8005a10:	b590      	push	{r4, r7, lr}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8005a18:	2188      	movs	r1, #136	; 0x88
 8005a1a:	2002      	movs	r0, #2
 8005a1c:	f7fc fa18 	bl	8001e50 <INA260_read>
 8005a20:	4603      	mov	r3, r0
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fa fd96 	bl	8000554 <__aeabi_i2d>
 8005a28:	a30c      	add	r3, pc, #48	; (adr r3, 8005a5c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8005a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2e:	f7fa fdfb 	bl	8000628 <__aeabi_dmul>
 8005a32:	4603      	mov	r3, r0
 8005a34:	460c      	mov	r4, r1
 8005a36:	4618      	mov	r0, r3
 8005a38:	4621      	mov	r1, r4
 8005a3a:	f7fb f8ed 	bl	8000c18 <__aeabi_d2f>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	4a03      	ldr	r2, [pc, #12]	; (8005a58 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8005a4a:	6013      	str	r3, [r2, #0]
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd90      	pop	{r4, r7, pc}
 8005a54:	f3af 8000 	nop.w
 8005a58:	2000022c 	.word	0x2000022c
 8005a5c:	47ae147b 	.word	0x47ae147b
 8005a60:	3f547ae1 	.word	0x3f547ae1

08005a64 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	ee07 3a90 	vmov	s15, r3

}
 8005a74:	eeb0 0a67 	vmov.f32	s0, s15
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
	...

08005a84 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005a90:	2102      	movs	r1, #2
 8005a92:	4822      	ldr	r0, [pc, #136]	; (8005b1c <_ZN12RotarySwitch8getValueEv+0x98>)
 8005a94:	f007 f8e0 	bl	800cc58 <HAL_GPIO_ReadPin>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	bf0c      	ite	eq
 8005a9e:	2301      	moveq	r3, #1
 8005aa0:	2300      	movne	r3, #0
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005aa8:	89fb      	ldrh	r3, [r7, #14]
 8005aaa:	f043 0301 	orr.w	r3, r3, #1
 8005aae:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005ab0:	2108      	movs	r1, #8
 8005ab2:	481a      	ldr	r0, [pc, #104]	; (8005b1c <_ZN12RotarySwitch8getValueEv+0x98>)
 8005ab4:	f007 f8d0 	bl	800cc58 <HAL_GPIO_ReadPin>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	bf0c      	ite	eq
 8005abe:	2301      	moveq	r3, #1
 8005ac0:	2300      	movne	r3, #0
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005ac8:	89fb      	ldrh	r3, [r7, #14]
 8005aca:	f043 0302 	orr.w	r3, r3, #2
 8005ace:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8005ad0:	2110      	movs	r1, #16
 8005ad2:	4812      	ldr	r0, [pc, #72]	; (8005b1c <_ZN12RotarySwitch8getValueEv+0x98>)
 8005ad4:	f007 f8c0 	bl	800cc58 <HAL_GPIO_ReadPin>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	bf0c      	ite	eq
 8005ade:	2301      	moveq	r3, #1
 8005ae0:	2300      	movne	r3, #0
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d003      	beq.n	8005af0 <_ZN12RotarySwitch8getValueEv+0x6c>
 8005ae8:	89fb      	ldrh	r3, [r7, #14]
 8005aea:	f043 0304 	orr.w	r3, r3, #4
 8005aee:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8005af0:	2180      	movs	r1, #128	; 0x80
 8005af2:	480a      	ldr	r0, [pc, #40]	; (8005b1c <_ZN12RotarySwitch8getValueEv+0x98>)
 8005af4:	f007 f8b0 	bl	800cc58 <HAL_GPIO_ReadPin>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	bf0c      	ite	eq
 8005afe:	2301      	moveq	r3, #1
 8005b00:	2300      	movne	r3, #0
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <_ZN12RotarySwitch8getValueEv+0x8c>
 8005b08:	89fb      	ldrh	r3, [r7, #14]
 8005b0a:	f043 0308 	orr.w	r3, r3, #8
 8005b0e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8005b10:	89fb      	ldrh	r3, [r7, #14]

}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	40020c00 	.word	0x40020c00

08005b20 <_ZN10SideSensorC1Ev>:
uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;
bool mon_rise_fall_flag = true;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false),
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
		timer_R_(0), timer_L_(0), rise_fall_flag_R_(true), rise_fall_flag_L_(true)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	801a      	strh	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	709a      	strb	r2, [r3, #2]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	70da      	strb	r2, [r3, #3]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	809a      	strh	r2, [r3, #4]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	80da      	strh	r2, [r3, #6]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	721a      	strb	r2, [r3, #8]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	815a      	strh	r2, [r3, #10]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	819a      	strh	r2, [r3, #12]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	739a      	strb	r2, [r3, #14]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	73da      	strb	r2, [r3, #15]
{

}
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4618      	mov	r0, r3
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
	...

08005b74 <_ZN10SideSensor21updateStatusRightExtiEv>:

void SideSensor::updateStatusRightExti()
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2) == GPIO_PIN_SET){ // 立ち上がり Black
 8005b7c:	2104      	movs	r1, #4
 8005b7e:	480e      	ldr	r0, [pc, #56]	; (8005bb8 <_ZN10SideSensor21updateStatusRightExtiEv+0x44>)
 8005b80:	f007 f86a 	bl	800cc58 <HAL_GPIO_ReadPin>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	bf0c      	ite	eq
 8005b8a:	2301      	moveq	r3, #1
 8005b8c:	2300      	movne	r3, #0
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d006      	beq.n	8005ba2 <_ZN10SideSensor21updateStatusRightExtiEv+0x2e>
		timer_R_ = 0;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	815a      	strh	r2, [r3, #10]
		rise_fall_flag_R_ = true;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	739a      	strb	r2, [r3, #14]
	}
	else{	//White
		timer_R_ = 0;
		rise_fall_flag_R_ = false;
	}
}
 8005ba0:	e005      	b.n	8005bae <_ZN10SideSensor21updateStatusRightExtiEv+0x3a>
		timer_R_ = 0;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	815a      	strh	r2, [r3, #10]
		rise_fall_flag_R_ = false;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	739a      	strb	r2, [r3, #14]
}
 8005bae:	bf00      	nop
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	40021000 	.word	0x40021000

08005bbc <_ZN10SideSensor20updateStatusLeftExtiEv>:

void SideSensor::updateStatusLeftExti()
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8) == GPIO_PIN_SET){ // 立ち上がり Black
 8005bc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005bc8:	480d      	ldr	r0, [pc, #52]	; (8005c00 <_ZN10SideSensor20updateStatusLeftExtiEv+0x44>)
 8005bca:	f007 f845 	bl	800cc58 <HAL_GPIO_ReadPin>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	bf0c      	ite	eq
 8005bd4:	2301      	moveq	r3, #1
 8005bd6:	2300      	movne	r3, #0
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d006      	beq.n	8005bec <_ZN10SideSensor20updateStatusLeftExtiEv+0x30>
		timer_L_ = 0;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	819a      	strh	r2, [r3, #12]
		rise_fall_flag_L_ = true;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	73da      	strb	r2, [r3, #15]
	}
	else{	//White
		timer_L_ = 0;
		rise_fall_flag_L_ = false;
	}
}
 8005bea:	e005      	b.n	8005bf8 <_ZN10SideSensor20updateStatusLeftExtiEv+0x3c>
		timer_L_ = 0;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	819a      	strh	r2, [r3, #12]
		rise_fall_flag_L_ = false;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	73da      	strb	r2, [r3, #15]
}
 8005bf8:	bf00      	nop
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	40020c00 	.word	0x40020c00

08005c04 <_ZN10SideSensor12updateStatusEv>:

void SideSensor::updateStatus() // called timer flip
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
	timer_R_++;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	895b      	ldrh	r3, [r3, #10]
 8005c10:	3301      	adds	r3, #1
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	815a      	strh	r2, [r3, #10]
	timer_L_++;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	899b      	ldrh	r3, [r3, #12]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	819a      	strh	r2, [r3, #12]
	if(timer_R_ >= 10000) timer_R_ = 10000;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	895b      	ldrh	r3, [r3, #10]
 8005c28:	f242 720f 	movw	r2, #9999	; 0x270f
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d903      	bls.n	8005c38 <_ZN10SideSensor12updateStatusEv+0x34>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f242 7210 	movw	r2, #10000	; 0x2710
 8005c36:	815a      	strh	r2, [r3, #10]
	if(timer_L_ >= 10000) timer_L_ = 10000;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	899b      	ldrh	r3, [r3, #12]
 8005c3c:	f242 720f 	movw	r2, #9999	; 0x270f
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d903      	bls.n	8005c4c <_ZN10SideSensor12updateStatusEv+0x48>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f242 7210 	movw	r2, #10000	; 0x2710
 8005c4a:	819a      	strh	r2, [r3, #12]

	if(ignore_flag_ == false){
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	7a1b      	ldrb	r3, [r3, #8]
 8005c50:	f083 0301 	eor.w	r3, r3, #1
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d019      	beq.n	8005c8e <_ZN10SideSensor12updateStatusEv+0x8a>
		if(rise_fall_flag_R_ == true && timer_R_ >= 2){
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	7b9b      	ldrb	r3, [r3, #14]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d007      	beq.n	8005c72 <_ZN10SideSensor12updateStatusEv+0x6e>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	895b      	ldrh	r3, [r3, #10]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d903      	bls.n	8005c72 <_ZN10SideSensor12updateStatusEv+0x6e>
			status_R_ = false;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	70da      	strb	r2, [r3, #3]
 8005c70:	e00d      	b.n	8005c8e <_ZN10SideSensor12updateStatusEv+0x8a>
		}
		else if(rise_fall_flag_R_ == false && timer_R_ >= 2){
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	7b9b      	ldrb	r3, [r3, #14]
 8005c76:	f083 0301 	eor.w	r3, r3, #1
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d006      	beq.n	8005c8e <_ZN10SideSensor12updateStatusEv+0x8a>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	895b      	ldrh	r3, [r3, #10]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d902      	bls.n	8005c8e <_ZN10SideSensor12updateStatusEv+0x8a>
			status_R_ = true;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	70da      	strb	r2, [r3, #3]
		}
	}

	if(rise_fall_flag_L_ == true && timer_L_ >= 2){
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	7bdb      	ldrb	r3, [r3, #15]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d007      	beq.n	8005ca6 <_ZN10SideSensor12updateStatusEv+0xa2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	899b      	ldrh	r3, [r3, #12]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d903      	bls.n	8005ca6 <_ZN10SideSensor12updateStatusEv+0xa2>
		status_L_ = false;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	709a      	strb	r2, [r3, #2]
 8005ca4:	e00d      	b.n	8005cc2 <_ZN10SideSensor12updateStatusEv+0xbe>
	}
	else if(rise_fall_flag_L_ == false && timer_L_ >= 2){
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	7bdb      	ldrb	r3, [r3, #15]
 8005caa:	f083 0301 	eor.w	r3, r3, #1
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d006      	beq.n	8005cc2 <_ZN10SideSensor12updateStatusEv+0xbe>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	899b      	ldrh	r3, [r3, #12]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d902      	bls.n	8005cc2 <_ZN10SideSensor12updateStatusEv+0xbe>
		status_L_ = true;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	709a      	strb	r2, [r3, #2]
	}

	mon_status_R = status_R_;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	78da      	ldrb	r2, [r3, #3]
 8005cc6:	4b06      	ldr	r3, [pc, #24]	; (8005ce0 <_ZN10SideSensor12updateStatusEv+0xdc>)
 8005cc8:	701a      	strb	r2, [r3, #0]
	mon_status_L = status_L_;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	789a      	ldrb	r2, [r3, #2]
 8005cce:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <_ZN10SideSensor12updateStatusEv+0xe0>)
 8005cd0:	701a      	strb	r2, [r3, #0]
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	20000231 	.word	0x20000231
 8005ce4:	20000230 	.word	0x20000230

08005ce8 <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
	return status_L_;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	789b      	ldrb	r3, [r3, #2]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <_ZN10SideSensor10getStatusREv>:

bool SideSensor::getStatusR()
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
	return status_R_;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	78db      	ldrb	r3, [r3, #3]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <_ZN10SideSensor17resetWhiteLineCntEv>:
{
	return white_line_cnt_r_;
}

void SideSensor::resetWhiteLineCnt()
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	80da      	strh	r2, [r3, #6]
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	721a      	strb	r2, [r3, #8]
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	721a      	strb	r2, [r3, #8]
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	7a1b      	ldrb	r3, [r3, #8]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	3308      	adds	r3, #8
 8005d94:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005d98:	2100      	movs	r1, #0
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f010 fa40 	bl	8016220 <memset>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005da6:	811a      	strh	r2, [r3, #8]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dae:	815a      	strh	r2, [r3, #10]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005db6:	819a      	strh	r2, [r3, #12]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dbe:	81da      	strh	r2, [r3, #14]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dc6:	821a      	strh	r2, [r3, #16]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dce:	825a      	strh	r2, [r3, #18]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	829a      	strh	r2, [r3, #20]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	82da      	strh	r2, [r3, #22]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2201      	movs	r2, #1
 8005de0:	831a      	strh	r2, [r3, #24]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2201      	movs	r2, #1
 8005de6:	835a      	strh	r2, [r3, #26]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2201      	movs	r2, #1
 8005dec:	839a      	strh	r2, [r3, #28]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2201      	movs	r2, #1
 8005df2:	83da      	strh	r2, [r3, #30]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2201      	movs	r2, #1
 8005df8:	841a      	strh	r2, [r3, #32]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e00:	845a      	strh	r2, [r3, #34]	; 0x22
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	849a      	strh	r2, [r3, #36]	; 0x24
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e0e:	84da      	strh	r2, [r3, #38]	; 0x26
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2201      	movs	r2, #1
 8005e14:	851a      	strh	r2, [r3, #40]	; 0x28
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2201      	movs	r2, #1
 8005e22:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e2a:	85da      	strh	r2, [r3, #46]	; 0x2e
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e32:	861a      	strh	r2, [r3, #48]	; 0x30
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	865a      	strh	r2, [r3, #50]	; 0x32
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	869a      	strh	r2, [r3, #52]	; 0x34
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e46:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e4e:	871a      	strh	r2, [r3, #56]	; 0x38
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2201      	movs	r2, #1
 8005e54:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e9c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ea6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005eb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ed2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005edc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ee6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f2a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f44:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f56:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f70:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f8a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f94:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fa6:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fb0:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fc2:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fcc:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fd6:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ff8:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006002:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800600c:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006016:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2201      	movs	r2, #1
 800601e:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006028:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2201      	movs	r2, #1
 8006030:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2201      	movs	r2, #1
 8006038:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2201      	movs	r2, #1
 8006040:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2201      	movs	r2, #1
 8006048:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2201      	movs	r2, #1
 8006050:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800605a:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006064:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2201      	movs	r2, #1
 800606c:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006076:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2201      	movs	r2, #1
 800607e:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006088:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2201      	movs	r2, #1
 8006090:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2201      	movs	r2, #1
 8006098:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2201      	movs	r2, #1
 80060a0:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060aa:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060b4:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060ce:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060e0:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f04f 0200 	mov.w	r2, #0
 80060f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	4618      	mov	r0, r3
 800610e:	3710      	adds	r7, #16
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f04f 0200 	mov.w	r2, #0
 8006128:	601a      	str	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	605a      	str	r2, [r3, #4]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f04f 0200 	mov.w	r2, #0
 8006138:	609a      	str	r2, [r3, #8]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f04f 0200 	mov.w	r2, #0
 8006140:	60da      	str	r2, [r3, #12]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f04f 0200 	mov.w	r2, #0
 8006148:	611a      	str	r2, [r3, #16]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f04f 0200 	mov.w	r2, #0
 8006150:	615a      	str	r2, [r3, #20]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	619a      	str	r2, [r3, #24]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f04f 0200 	mov.w	r2, #0
 8006160:	61da      	str	r2, [r3, #28]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f04f 0200 	mov.w	r2, #0
 8006168:	621a      	str	r2, [r3, #32]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f04f 0200 	mov.w	r2, #0
 8006170:	625a      	str	r2, [r3, #36]	; 0x24
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	639a      	str	r2, [r3, #56]	; 0x38

}
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	0000      	movs	r0, r0
 80061ac:	0000      	movs	r0, r0
	...

080061b0 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 80061b0:	b590      	push	{r4, r7, lr}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061bc:	f107 020c 	add.w	r2, r7, #12
 80061c0:	f107 0110 	add.w	r1, r7, #16
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7fb fa11 	bl	80015ec <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 80061ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80061ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80061d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061d6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80061da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061de:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 80061e2:	6978      	ldr	r0, [r7, #20]
 80061e4:	f7fa f9c8 	bl	8000578 <__aeabi_f2d>
 80061e8:	a30e      	add	r3, pc, #56	; (adr r3, 8006224 <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 80061ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ee:	f7fa fa1b 	bl	8000628 <__aeabi_dmul>
 80061f2:	4603      	mov	r3, r0
 80061f4:	460c      	mov	r4, r1
 80061f6:	4618      	mov	r0, r3
 80061f8:	4621      	mov	r1, r4
 80061fa:	f7fa fd0d 	bl	8000c18 <__aeabi_d2f>
 80061fe:	4602      	mov	r2, r0
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	4a05      	ldr	r2, [pc, #20]	; (8006220 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 800620a:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	ee07 3a90 	vmov	s15, r3
}
 8006214:	eeb0 0a67 	vmov.f32	s0, s15
 8006218:	371c      	adds	r7, #28
 800621a:	46bd      	mov	sp, r7
 800621c:	bd90      	pop	{r4, r7, pc}
 800621e:	bf00      	nop
 8006220:	20000234 	.word	0x20000234
 8006224:	1ab1d998 	.word	0x1ab1d998
 8006228:	3f7830b5 	.word	0x3f7830b5
 800622c:	00000000 	.word	0x00000000

08006230 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8006230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	ed93 7a00 	vldr	s14, [r3]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	edd3 7a02 	vldr	s15, [r3, #8]
 8006244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006248:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006252:	2b00      	cmp	r3, #0
 8006254:	d007      	beq.n	8006266 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8006256:	4b48      	ldr	r3, [pc, #288]	; (8006378 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8006258:	f04f 0200 	mov.w	r2, #0
 800625c:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	edd3 7a04 	vldr	s15, [r3, #16]
 800626c:	ed97 7a05 	vldr	s14, [r7, #20]
 8006270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006274:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8006278:	4b3f      	ldr	r3, [pc, #252]	; (8006378 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4618      	mov	r0, r3
 800627e:	f7fa f97b 	bl	8000578 <__aeabi_f2d>
 8006282:	4604      	mov	r4, r0
 8006284:	460d      	mov	r5, r1
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	ed93 7a06 	vldr	s14, [r3, #24]
 800628c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006294:	ee17 0a90 	vmov	r0, s15
 8006298:	f7fa f96e 	bl	8000578 <__aeabi_f2d>
 800629c:	a334      	add	r3, pc, #208	; (adr r3, 8006370 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 800629e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a2:	f7fa f9c1 	bl	8000628 <__aeabi_dmul>
 80062a6:	4602      	mov	r2, r0
 80062a8:	460b      	mov	r3, r1
 80062aa:	4620      	mov	r0, r4
 80062ac:	4629      	mov	r1, r5
 80062ae:	f7fa f805 	bl	80002bc <__adddf3>
 80062b2:	4603      	mov	r3, r0
 80062b4:	460c      	mov	r4, r1
 80062b6:	4618      	mov	r0, r3
 80062b8:	4621      	mov	r1, r4
 80062ba:	f7fa fcad 	bl	8000c18 <__aeabi_d2f>
 80062be:	4602      	mov	r2, r0
 80062c0:	4b2d      	ldr	r3, [pc, #180]	; (8006378 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80062c2:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	ed93 7a05 	vldr	s14, [r3, #20]
 80062ca:	4b2c      	ldr	r3, [pc, #176]	; (800637c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 80062cc:	edd3 7a00 	vldr	s15, [r3]
 80062d0:	edd7 6a05 	vldr	s13, [r7, #20]
 80062d4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80062d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062dc:	ee17 0a90 	vmov	r0, s15
 80062e0:	f7fa f94a 	bl	8000578 <__aeabi_f2d>
 80062e4:	a322      	add	r3, pc, #136	; (adr r3, 8006370 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 80062e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ea:	f7fa fac7 	bl	800087c <__aeabi_ddiv>
 80062ee:	4603      	mov	r3, r0
 80062f0:	460c      	mov	r4, r1
 80062f2:	4618      	mov	r0, r3
 80062f4:	4621      	mov	r1, r4
 80062f6:	f7fa fc8f 	bl	8000c18 <__aeabi_d2f>
 80062fa:	4603      	mov	r3, r0
 80062fc:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 80062fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8006302:	edd7 7a03 	vldr	s15, [r7, #12]
 8006306:	ee37 7a27 	vadd.f32	s14, s14, s15
 800630a:	4b1b      	ldr	r3, [pc, #108]	; (8006378 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800630c:	edd3 7a00 	vldr	s15, [r3]
 8006310:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006314:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8006322:	edd7 7a02 	vldr	s15, [r7, #8]
 8006326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800632a:	ee17 0a90 	vmov	r0, s15
 800632e:	f7fa f923 	bl	8000578 <__aeabi_f2d>
 8006332:	4605      	mov	r5, r0
 8006334:	460e      	mov	r6, r1
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800633c:	ed97 7a02 	vldr	s14, [r7, #8]
 8006340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006344:	ee17 0a90 	vmov	r0, s15
 8006348:	f7fa f916 	bl	8000578 <__aeabi_f2d>
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	ec43 2b11 	vmov	d1, r2, r3
 8006354:	ec46 5b10 	vmov	d0, r5, r6
 8006358:	4620      	mov	r0, r4
 800635a:	f7ff f941 	bl	80055e0 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 800635e:	4a07      	ldr	r2, [pc, #28]	; (800637c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	6013      	str	r3, [r2, #0]
}
 8006364:	bf00      	nop
 8006366:	371c      	adds	r7, #28
 8006368:	46bd      	mov	sp, r7
 800636a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800636c:	f3af 8000 	nop.w
 8006370:	d2f1a9fc 	.word	0xd2f1a9fc
 8006374:	3f50624d 	.word	0x3f50624d
 8006378:	2000023c 	.word	0x2000023c
 800637c:	20000238 	.word	0x20000238

08006380 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	ed87 0a02 	vstr	s0, [r7, #8]
 800638c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	605a      	str	r2, [r3, #4]
}
 800639c:	bf00      	nop
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80063b4:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80063c4:	bf00      	nop
 80063c6:	3714      	adds	r7, #20
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80063dc:	edc7 0a01 	vstr	s1, [r7, #4]
 80063e0:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	615a      	str	r2, [r3, #20]
}
 80063f6:	bf00      	nop
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8006402:	b480      	push	{r7}
 8006404:	b085      	sub	sp, #20
 8006406:	af00      	add	r7, sp, #0
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	ed87 0a02 	vstr	s0, [r7, #8]
 800640e:	edc7 0a01 	vstr	s1, [r7, #4]
 8006412:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	621a      	str	r2, [r3, #32]
}
 8006428:	bf00      	nop
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
    calcVelocity();
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7ff feb7 	bl	80061b0 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f7ff feef 	bl	8006230 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8006452:	bf00      	nop
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 800645a:	b480      	push	{r7}
 800645c:	b083      	sub	sp, #12
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8006472:	bf00      	nop
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
	...

08006480 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006494:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80064b0 <_ZN12VelocityCtrl4stopEv+0x30>
 8006498:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80064b0 <_ZN12VelocityCtrl4stopEv+0x30>
 800649c:	4618      	mov	r0, r3
 800649e:	f7ff f89f 	bl	80055e0 <_ZN5Motor8setRatioEdd>

}
 80064a2:	bf00      	nop
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	f3af 8000 	nop.w
	...

080064b8 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	ee07 3a90 	vmov	s15, r3
}
 80064c8:	eeb0 0a67 	vmov.f32	s0, s15
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <HAL_GPIO_EXTI_Callback>:
  return len;
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	4603      	mov	r3, r0
 80064de:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 80064e0:	88fb      	ldrh	r3, [r7, #6]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f001 ffc2 	bl	800846c <cppExit>
}
 80064e8:	bf00      	nop
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a1e      	ldr	r2, [pc, #120]	; (8006578 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d10e      	bne.n	8006520 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8006502:	f001 ff8b 	bl	800841c <cppFlip100ns>

		tim7_timer++;
 8006506:	4b1d      	ldr	r3, [pc, #116]	; (800657c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3301      	adds	r3, #1
 800650c:	4a1b      	ldr	r2, [pc, #108]	; (800657c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800650e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8006510:	4b1a      	ldr	r3, [pc, #104]	; (800657c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a1a      	ldr	r2, [pc, #104]	; (8006580 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d902      	bls.n	8006520 <HAL_TIM_PeriodElapsedCallback+0x30>
 800651a:	4b18      	ldr	r3, [pc, #96]	; (800657c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a17      	ldr	r2, [pc, #92]	; (8006584 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d10e      	bne.n	8006548 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 800652a:	f001 ff47 	bl	80083bc <cppFlip1ms>

		tim6_timer++;
 800652e:	4b16      	ldr	r3, [pc, #88]	; (8006588 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	3301      	adds	r3, #1
 8006534:	4a14      	ldr	r2, [pc, #80]	; (8006588 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8006536:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8006538:	4b13      	ldr	r3, [pc, #76]	; (8006588 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a10      	ldr	r2, [pc, #64]	; (8006580 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d902      	bls.n	8006548 <HAL_TIM_PeriodElapsedCallback+0x58>
 8006542:	4b11      	ldr	r3, [pc, #68]	; (8006588 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8006544:	2200      	movs	r2, #0
 8006546:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a0f      	ldr	r2, [pc, #60]	; (800658c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d10e      	bne.n	8006570 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8006552:	f001 ff6d 	bl	8008430 <cppFlip10ms>

		tim13_timer++;
 8006556:	4b0e      	ldr	r3, [pc, #56]	; (8006590 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3301      	adds	r3, #1
 800655c:	4a0c      	ldr	r2, [pc, #48]	; (8006590 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800655e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8006560:	4b0b      	ldr	r3, [pc, #44]	; (8006590 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a06      	ldr	r2, [pc, #24]	; (8006580 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d902      	bls.n	8006570 <HAL_TIM_PeriodElapsedCallback+0x80>
 800656a:	4b09      	ldr	r3, [pc, #36]	; (8006590 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800656c:	2200      	movs	r2, #0
 800656e:	601a      	str	r2, [r3, #0]
	}

}
 8006570:	bf00      	nop
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	40001400 	.word	0x40001400
 800657c:	20049c40 	.word	0x20049c40
 8006580:	0001869f 	.word	0x0001869f
 8006584:	40001000 	.word	0x40001000
 8006588:	20049bfc 	.word	0x20049bfc
 800658c:	40001c00 	.word	0x40001c00
 8006590:	20049c44 	.word	0x20049c44

08006594 <init>:

void init()
{
 8006594:	b580      	push	{r7, lr}
 8006596:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8006598:	2201      	movs	r2, #1
 800659a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800659e:	4808      	ldr	r0, [pc, #32]	; (80065c0 <init+0x2c>)
 80065a0:	f006 fb72 	bl	800cc88 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 80065a4:	4807      	ldr	r0, [pc, #28]	; (80065c4 <init+0x30>)
 80065a6:	f00a fa52 	bl	8010a4e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80065aa:	4807      	ldr	r0, [pc, #28]	; (80065c8 <init+0x34>)
 80065ac:	f00a fa4f 	bl	8010a4e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 80065b0:	4806      	ldr	r0, [pc, #24]	; (80065cc <init+0x38>)
 80065b2:	f00a fa4c 	bl	8010a4e <HAL_TIM_Base_Start_IT>

	cppInit();
 80065b6:	f001 fe3f 	bl	8008238 <cppInit>

	//path_following_initialize();

}
 80065ba:	bf00      	nop
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	40021000 	.word	0x40021000
 80065c4:	20049d28 	.word	0x20049d28
 80065c8:	20049ecc 	.word	0x20049ecc
 80065cc:	20049c48 	.word	0x20049c48

080065d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80065d4:	f005 f850 	bl	800b678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80065d8:	f000 f82a 	bl	8006630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80065dc:	f000 fdbc 	bl	8007158 <MX_GPIO_Init>
  MX_DMA_Init();
 80065e0:	f000 fd8a 	bl	80070f8 <MX_DMA_Init>
  MX_I2C2_Init();
 80065e4:	f000 f9e8 	bl	80069b8 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 80065e8:	f000 fa14 	bl	8006a14 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 80065ec:	f000 fa32 	bl	8006a54 <MX_SPI2_Init>
  MX_TIM1_Init();
 80065f0:	f000 fa66 	bl	8006ac0 <MX_TIM1_Init>
  MX_TIM4_Init();
 80065f4:	f000 fb70 	bl	8006cd8 <MX_TIM4_Init>
  MX_TIM8_Init();
 80065f8:	f000 fc3c 	bl	8006e74 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80065fc:	f000 fd52 	bl	80070a4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8006600:	f00c f9f8 	bl	80129f4 <MX_FATFS_Init>
  MX_TIM6_Init();
 8006604:	f000 fbcc 	bl	8006da0 <MX_TIM6_Init>
  MX_I2C1_Init();
 8006608:	f000 f9a8 	bl	800695c <MX_I2C1_Init>
  MX_TIM3_Init();
 800660c:	f000 fb00 	bl	8006c10 <MX_TIM3_Init>
  MX_TIM10_Init();
 8006610:	f000 fc88 	bl	8006f24 <MX_TIM10_Init>
  MX_TIM11_Init();
 8006614:	f000 fcd4 	bl	8006fc0 <MX_TIM11_Init>
  MX_ADC2_Init();
 8006618:	f000 f898 	bl	800674c <MX_ADC2_Init>
  MX_TIM7_Init();
 800661c:	f000 fbf6 	bl	8006e0c <MX_TIM7_Init>
  MX_TIM13_Init();
 8006620:	f000 fd1c 	bl	800705c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8006624:	f7ff ffb6 	bl	8006594 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8006628:	f001 ff3a 	bl	80084a0 <cppLoop>
 800662c:	e7fc      	b.n	8006628 <main+0x58>
	...

08006630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b0a4      	sub	sp, #144	; 0x90
 8006634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006636:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800663a:	2234      	movs	r2, #52	; 0x34
 800663c:	2100      	movs	r1, #0
 800663e:	4618      	mov	r0, r3
 8006640:	f00f fdee 	bl	8016220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006644:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	605a      	str	r2, [r3, #4]
 800664e:	609a      	str	r2, [r3, #8]
 8006650:	60da      	str	r2, [r3, #12]
 8006652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006654:	f107 030c 	add.w	r3, r7, #12
 8006658:	223c      	movs	r2, #60	; 0x3c
 800665a:	2100      	movs	r1, #0
 800665c:	4618      	mov	r0, r3
 800665e:	f00f fddf 	bl	8016220 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006662:	2300      	movs	r3, #0
 8006664:	60bb      	str	r3, [r7, #8]
 8006666:	4b37      	ldr	r3, [pc, #220]	; (8006744 <SystemClock_Config+0x114>)
 8006668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666a:	4a36      	ldr	r2, [pc, #216]	; (8006744 <SystemClock_Config+0x114>)
 800666c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006670:	6413      	str	r3, [r2, #64]	; 0x40
 8006672:	4b34      	ldr	r3, [pc, #208]	; (8006744 <SystemClock_Config+0x114>)
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800667a:	60bb      	str	r3, [r7, #8]
 800667c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800667e:	2300      	movs	r3, #0
 8006680:	607b      	str	r3, [r7, #4]
 8006682:	4b31      	ldr	r3, [pc, #196]	; (8006748 <SystemClock_Config+0x118>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a30      	ldr	r2, [pc, #192]	; (8006748 <SystemClock_Config+0x118>)
 8006688:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800668c:	6013      	str	r3, [r2, #0]
 800668e:	4b2e      	ldr	r3, [pc, #184]	; (8006748 <SystemClock_Config+0x118>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006696:	607b      	str	r3, [r7, #4]
 8006698:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800669a:	2301      	movs	r3, #1
 800669c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800669e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80066a2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80066a4:	2302      	movs	r3, #2
 80066a6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80066a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80066ac:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 80066ae:	2308      	movs	r3, #8
 80066b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80066b2:	23b4      	movs	r3, #180	; 0xb4
 80066b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80066b8:	2302      	movs	r3, #2
 80066ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80066be:	2308      	movs	r3, #8
 80066c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 80066c4:	2302      	movs	r3, #2
 80066c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80066ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80066ce:	4618      	mov	r0, r3
 80066d0:	f007 ff14 	bl	800e4fc <HAL_RCC_OscConfig>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80066da:	f000 fe91 	bl	8007400 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80066de:	f007 fa8f 	bl	800dc00 <HAL_PWREx_EnableOverDrive>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d001      	beq.n	80066ec <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80066e8:	f000 fe8a 	bl	8007400 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80066ec:	230f      	movs	r3, #15
 80066ee:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80066f0:	2302      	movs	r3, #2
 80066f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80066f4:	2300      	movs	r3, #0
 80066f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80066f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80066fc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80066fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006702:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006704:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006708:	2105      	movs	r1, #5
 800670a:	4618      	mov	r0, r3
 800670c:	f007 fac8 	bl	800dca0 <HAL_RCC_ClockConfig>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8006716:	f000 fe73 	bl	8007400 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800671a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800671e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8006720:	2300      	movs	r3, #0
 8006722:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8006724:	2300      	movs	r3, #0
 8006726:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006728:	f107 030c 	add.w	r3, r7, #12
 800672c:	4618      	mov	r0, r3
 800672e:	f007 fca7 	bl	800e080 <HAL_RCCEx_PeriphCLKConfig>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8006738:	f000 fe62 	bl	8007400 <Error_Handler>
  }
}
 800673c:	bf00      	nop
 800673e:	3790      	adds	r7, #144	; 0x90
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	40023800 	.word	0x40023800
 8006748:	40007000 	.word	0x40007000

0800674c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006752:	463b      	mov	r3, r7
 8006754:	2200      	movs	r2, #0
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	605a      	str	r2, [r3, #4]
 800675a:	609a      	str	r2, [r3, #8]
 800675c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800675e:	4b7c      	ldr	r3, [pc, #496]	; (8006950 <MX_ADC2_Init+0x204>)
 8006760:	4a7c      	ldr	r2, [pc, #496]	; (8006954 <MX_ADC2_Init+0x208>)
 8006762:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006764:	4b7a      	ldr	r3, [pc, #488]	; (8006950 <MX_ADC2_Init+0x204>)
 8006766:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800676a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800676c:	4b78      	ldr	r3, [pc, #480]	; (8006950 <MX_ADC2_Init+0x204>)
 800676e:	2200      	movs	r2, #0
 8006770:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8006772:	4b77      	ldr	r3, [pc, #476]	; (8006950 <MX_ADC2_Init+0x204>)
 8006774:	2201      	movs	r2, #1
 8006776:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006778:	4b75      	ldr	r3, [pc, #468]	; (8006950 <MX_ADC2_Init+0x204>)
 800677a:	2201      	movs	r2, #1
 800677c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800677e:	4b74      	ldr	r3, [pc, #464]	; (8006950 <MX_ADC2_Init+0x204>)
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006786:	4b72      	ldr	r3, [pc, #456]	; (8006950 <MX_ADC2_Init+0x204>)
 8006788:	2200      	movs	r2, #0
 800678a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800678c:	4b70      	ldr	r3, [pc, #448]	; (8006950 <MX_ADC2_Init+0x204>)
 800678e:	4a72      	ldr	r2, [pc, #456]	; (8006958 <MX_ADC2_Init+0x20c>)
 8006790:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006792:	4b6f      	ldr	r3, [pc, #444]	; (8006950 <MX_ADC2_Init+0x204>)
 8006794:	2200      	movs	r2, #0
 8006796:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8006798:	4b6d      	ldr	r3, [pc, #436]	; (8006950 <MX_ADC2_Init+0x204>)
 800679a:	220e      	movs	r2, #14
 800679c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800679e:	4b6c      	ldr	r3, [pc, #432]	; (8006950 <MX_ADC2_Init+0x204>)
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80067a6:	4b6a      	ldr	r3, [pc, #424]	; (8006950 <MX_ADC2_Init+0x204>)
 80067a8:	2201      	movs	r2, #1
 80067aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80067ac:	4868      	ldr	r0, [pc, #416]	; (8006950 <MX_ADC2_Init+0x204>)
 80067ae:	f004 fff7 	bl	800b7a0 <HAL_ADC_Init>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80067b8:	f000 fe22 	bl	8007400 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80067bc:	230a      	movs	r3, #10
 80067be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80067c0:	2301      	movs	r3, #1
 80067c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80067c4:	2306      	movs	r3, #6
 80067c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80067c8:	463b      	mov	r3, r7
 80067ca:	4619      	mov	r1, r3
 80067cc:	4860      	ldr	r0, [pc, #384]	; (8006950 <MX_ADC2_Init+0x204>)
 80067ce:	f005 f93b 	bl	800ba48 <HAL_ADC_ConfigChannel>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80067d8:	f000 fe12 	bl	8007400 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80067dc:	230b      	movs	r3, #11
 80067de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80067e0:	2302      	movs	r3, #2
 80067e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80067e4:	463b      	mov	r3, r7
 80067e6:	4619      	mov	r1, r3
 80067e8:	4859      	ldr	r0, [pc, #356]	; (8006950 <MX_ADC2_Init+0x204>)
 80067ea:	f005 f92d 	bl	800ba48 <HAL_ADC_ConfigChannel>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80067f4:	f000 fe04 	bl	8007400 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80067f8:	230c      	movs	r3, #12
 80067fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80067fc:	2303      	movs	r3, #3
 80067fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006800:	463b      	mov	r3, r7
 8006802:	4619      	mov	r1, r3
 8006804:	4852      	ldr	r0, [pc, #328]	; (8006950 <MX_ADC2_Init+0x204>)
 8006806:	f005 f91f 	bl	800ba48 <HAL_ADC_ConfigChannel>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d001      	beq.n	8006814 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8006810:	f000 fdf6 	bl	8007400 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8006814:	230d      	movs	r3, #13
 8006816:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8006818:	2304      	movs	r3, #4
 800681a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800681c:	463b      	mov	r3, r7
 800681e:	4619      	mov	r1, r3
 8006820:	484b      	ldr	r0, [pc, #300]	; (8006950 <MX_ADC2_Init+0x204>)
 8006822:	f005 f911 	bl	800ba48 <HAL_ADC_ConfigChannel>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d001      	beq.n	8006830 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 800682c:	f000 fde8 	bl	8007400 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8006830:	2300      	movs	r3, #0
 8006832:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8006834:	2305      	movs	r3, #5
 8006836:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006838:	463b      	mov	r3, r7
 800683a:	4619      	mov	r1, r3
 800683c:	4844      	ldr	r0, [pc, #272]	; (8006950 <MX_ADC2_Init+0x204>)
 800683e:	f005 f903 	bl	800ba48 <HAL_ADC_ConfigChannel>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8006848:	f000 fdda 	bl	8007400 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800684c:	2301      	movs	r3, #1
 800684e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8006850:	2306      	movs	r3, #6
 8006852:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006854:	463b      	mov	r3, r7
 8006856:	4619      	mov	r1, r3
 8006858:	483d      	ldr	r0, [pc, #244]	; (8006950 <MX_ADC2_Init+0x204>)
 800685a:	f005 f8f5 	bl	800ba48 <HAL_ADC_ConfigChannel>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d001      	beq.n	8006868 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8006864:	f000 fdcc 	bl	8007400 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006868:	2302      	movs	r3, #2
 800686a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800686c:	2307      	movs	r3, #7
 800686e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006870:	463b      	mov	r3, r7
 8006872:	4619      	mov	r1, r3
 8006874:	4836      	ldr	r0, [pc, #216]	; (8006950 <MX_ADC2_Init+0x204>)
 8006876:	f005 f8e7 	bl	800ba48 <HAL_ADC_ConfigChannel>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8006880:	f000 fdbe 	bl	8007400 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006884:	2303      	movs	r3, #3
 8006886:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8006888:	2308      	movs	r3, #8
 800688a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800688c:	463b      	mov	r3, r7
 800688e:	4619      	mov	r1, r3
 8006890:	482f      	ldr	r0, [pc, #188]	; (8006950 <MX_ADC2_Init+0x204>)
 8006892:	f005 f8d9 	bl	800ba48 <HAL_ADC_ConfigChannel>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 800689c:	f000 fdb0 	bl	8007400 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80068a0:	2304      	movs	r3, #4
 80068a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80068a4:	2309      	movs	r3, #9
 80068a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80068a8:	463b      	mov	r3, r7
 80068aa:	4619      	mov	r1, r3
 80068ac:	4828      	ldr	r0, [pc, #160]	; (8006950 <MX_ADC2_Init+0x204>)
 80068ae:	f005 f8cb 	bl	800ba48 <HAL_ADC_ConfigChannel>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 80068b8:	f000 fda2 	bl	8007400 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80068bc:	2305      	movs	r3, #5
 80068be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80068c0:	230a      	movs	r3, #10
 80068c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80068c4:	463b      	mov	r3, r7
 80068c6:	4619      	mov	r1, r3
 80068c8:	4821      	ldr	r0, [pc, #132]	; (8006950 <MX_ADC2_Init+0x204>)
 80068ca:	f005 f8bd 	bl	800ba48 <HAL_ADC_ConfigChannel>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d001      	beq.n	80068d8 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 80068d4:	f000 fd94 	bl	8007400 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80068d8:	2306      	movs	r3, #6
 80068da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80068dc:	230b      	movs	r3, #11
 80068de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80068e0:	463b      	mov	r3, r7
 80068e2:	4619      	mov	r1, r3
 80068e4:	481a      	ldr	r0, [pc, #104]	; (8006950 <MX_ADC2_Init+0x204>)
 80068e6:	f005 f8af 	bl	800ba48 <HAL_ADC_ConfigChannel>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d001      	beq.n	80068f4 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80068f0:	f000 fd86 	bl	8007400 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80068f4:	2307      	movs	r3, #7
 80068f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80068f8:	230c      	movs	r3, #12
 80068fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80068fc:	463b      	mov	r3, r7
 80068fe:	4619      	mov	r1, r3
 8006900:	4813      	ldr	r0, [pc, #76]	; (8006950 <MX_ADC2_Init+0x204>)
 8006902:	f005 f8a1 	bl	800ba48 <HAL_ADC_ConfigChannel>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 800690c:	f000 fd78 	bl	8007400 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8006910:	2308      	movs	r3, #8
 8006912:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8006914:	230d      	movs	r3, #13
 8006916:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006918:	463b      	mov	r3, r7
 800691a:	4619      	mov	r1, r3
 800691c:	480c      	ldr	r0, [pc, #48]	; (8006950 <MX_ADC2_Init+0x204>)
 800691e:	f005 f893 	bl	800ba48 <HAL_ADC_ConfigChannel>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8006928:	f000 fd6a 	bl	8007400 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800692c:	2309      	movs	r3, #9
 800692e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8006930:	230e      	movs	r3, #14
 8006932:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006934:	463b      	mov	r3, r7
 8006936:	4619      	mov	r1, r3
 8006938:	4805      	ldr	r0, [pc, #20]	; (8006950 <MX_ADC2_Init+0x204>)
 800693a:	f005 f885 	bl	800ba48 <HAL_ADC_ConfigChannel>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d001      	beq.n	8006948 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8006944:	f000 fd5c 	bl	8007400 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006948:	bf00      	nop
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	20049acc 	.word	0x20049acc
 8006954:	40012100 	.word	0x40012100
 8006958:	0f000001 	.word	0x0f000001

0800695c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006960:	4b12      	ldr	r3, [pc, #72]	; (80069ac <MX_I2C1_Init+0x50>)
 8006962:	4a13      	ldr	r2, [pc, #76]	; (80069b0 <MX_I2C1_Init+0x54>)
 8006964:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006966:	4b11      	ldr	r3, [pc, #68]	; (80069ac <MX_I2C1_Init+0x50>)
 8006968:	4a12      	ldr	r2, [pc, #72]	; (80069b4 <MX_I2C1_Init+0x58>)
 800696a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800696c:	4b0f      	ldr	r3, [pc, #60]	; (80069ac <MX_I2C1_Init+0x50>)
 800696e:	2200      	movs	r2, #0
 8006970:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006972:	4b0e      	ldr	r3, [pc, #56]	; (80069ac <MX_I2C1_Init+0x50>)
 8006974:	2200      	movs	r2, #0
 8006976:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006978:	4b0c      	ldr	r3, [pc, #48]	; (80069ac <MX_I2C1_Init+0x50>)
 800697a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800697e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006980:	4b0a      	ldr	r3, [pc, #40]	; (80069ac <MX_I2C1_Init+0x50>)
 8006982:	2200      	movs	r2, #0
 8006984:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006986:	4b09      	ldr	r3, [pc, #36]	; (80069ac <MX_I2C1_Init+0x50>)
 8006988:	2200      	movs	r2, #0
 800698a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800698c:	4b07      	ldr	r3, [pc, #28]	; (80069ac <MX_I2C1_Init+0x50>)
 800698e:	2200      	movs	r2, #0
 8006990:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006992:	4b06      	ldr	r3, [pc, #24]	; (80069ac <MX_I2C1_Init+0x50>)
 8006994:	2280      	movs	r2, #128	; 0x80
 8006996:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006998:	4804      	ldr	r0, [pc, #16]	; (80069ac <MX_I2C1_Init+0x50>)
 800699a:	f006 f9a7 	bl	800ccec <HAL_I2C_Init>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80069a4:	f000 fd2c 	bl	8007400 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80069a8:	bf00      	nop
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	20049b14 	.word	0x20049b14
 80069b0:	40005400 	.word	0x40005400
 80069b4:	000186a0 	.word	0x000186a0

080069b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80069bc:	4b12      	ldr	r3, [pc, #72]	; (8006a08 <MX_I2C2_Init+0x50>)
 80069be:	4a13      	ldr	r2, [pc, #76]	; (8006a0c <MX_I2C2_Init+0x54>)
 80069c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80069c2:	4b11      	ldr	r3, [pc, #68]	; (8006a08 <MX_I2C2_Init+0x50>)
 80069c4:	4a12      	ldr	r2, [pc, #72]	; (8006a10 <MX_I2C2_Init+0x58>)
 80069c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80069c8:	4b0f      	ldr	r3, [pc, #60]	; (8006a08 <MX_I2C2_Init+0x50>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80069ce:	4b0e      	ldr	r3, [pc, #56]	; (8006a08 <MX_I2C2_Init+0x50>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80069d4:	4b0c      	ldr	r3, [pc, #48]	; (8006a08 <MX_I2C2_Init+0x50>)
 80069d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80069da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80069dc:	4b0a      	ldr	r3, [pc, #40]	; (8006a08 <MX_I2C2_Init+0x50>)
 80069de:	2200      	movs	r2, #0
 80069e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80069e2:	4b09      	ldr	r3, [pc, #36]	; (8006a08 <MX_I2C2_Init+0x50>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80069e8:	4b07      	ldr	r3, [pc, #28]	; (8006a08 <MX_I2C2_Init+0x50>)
 80069ea:	2200      	movs	r2, #0
 80069ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80069ee:	4b06      	ldr	r3, [pc, #24]	; (8006a08 <MX_I2C2_Init+0x50>)
 80069f0:	2280      	movs	r2, #128	; 0x80
 80069f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80069f4:	4804      	ldr	r0, [pc, #16]	; (8006a08 <MX_I2C2_Init+0x50>)
 80069f6:	f006 f979 	bl	800ccec <HAL_I2C_Init>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006a00:	f000 fcfe 	bl	8007400 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006a04:	bf00      	nop
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	20049ba8 	.word	0x20049ba8
 8006a0c:	40005800 	.word	0x40005800
 8006a10:	000186a0 	.word	0x000186a0

08006a14 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8006a14:	b480      	push	{r7}
 8006a16:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8006a18:	4b0c      	ldr	r3, [pc, #48]	; (8006a4c <MX_SDIO_SD_Init+0x38>)
 8006a1a:	4a0d      	ldr	r2, [pc, #52]	; (8006a50 <MX_SDIO_SD_Init+0x3c>)
 8006a1c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8006a1e:	4b0b      	ldr	r3, [pc, #44]	; (8006a4c <MX_SDIO_SD_Init+0x38>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8006a24:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <MX_SDIO_SD_Init+0x38>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006a2a:	4b08      	ldr	r3, [pc, #32]	; (8006a4c <MX_SDIO_SD_Init+0x38>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8006a30:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <MX_SDIO_SD_Init+0x38>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006a36:	4b05      	ldr	r3, [pc, #20]	; (8006a4c <MX_SDIO_SD_Init+0x38>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8006a3c:	4b03      	ldr	r3, [pc, #12]	; (8006a4c <MX_SDIO_SD_Init+0x38>)
 8006a3e:	2204      	movs	r2, #4
 8006a40:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8006a42:	bf00      	nop
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	20049da8 	.word	0x20049da8
 8006a50:	40012c00 	.word	0x40012c00

08006a54 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006a58:	4b17      	ldr	r3, [pc, #92]	; (8006ab8 <MX_SPI2_Init+0x64>)
 8006a5a:	4a18      	ldr	r2, [pc, #96]	; (8006abc <MX_SPI2_Init+0x68>)
 8006a5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006a5e:	4b16      	ldr	r3, [pc, #88]	; (8006ab8 <MX_SPI2_Init+0x64>)
 8006a60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006a64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006a66:	4b14      	ldr	r3, [pc, #80]	; (8006ab8 <MX_SPI2_Init+0x64>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006a6c:	4b12      	ldr	r3, [pc, #72]	; (8006ab8 <MX_SPI2_Init+0x64>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006a72:	4b11      	ldr	r3, [pc, #68]	; (8006ab8 <MX_SPI2_Init+0x64>)
 8006a74:	2202      	movs	r2, #2
 8006a76:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006a78:	4b0f      	ldr	r3, [pc, #60]	; (8006ab8 <MX_SPI2_Init+0x64>)
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006a7e:	4b0e      	ldr	r3, [pc, #56]	; (8006ab8 <MX_SPI2_Init+0x64>)
 8006a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a84:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006a86:	4b0c      	ldr	r3, [pc, #48]	; (8006ab8 <MX_SPI2_Init+0x64>)
 8006a88:	2220      	movs	r2, #32
 8006a8a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006a8c:	4b0a      	ldr	r3, [pc, #40]	; (8006ab8 <MX_SPI2_Init+0x64>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006a92:	4b09      	ldr	r3, [pc, #36]	; (8006ab8 <MX_SPI2_Init+0x64>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a98:	4b07      	ldr	r3, [pc, #28]	; (8006ab8 <MX_SPI2_Init+0x64>)
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006a9e:	4b06      	ldr	r3, [pc, #24]	; (8006ab8 <MX_SPI2_Init+0x64>)
 8006aa0:	220a      	movs	r2, #10
 8006aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006aa4:	4804      	ldr	r0, [pc, #16]	; (8006ab8 <MX_SPI2_Init+0x64>)
 8006aa6:	f009 fa53 	bl	800ff50 <HAL_SPI_Init>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d001      	beq.n	8006ab4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006ab0:	f000 fca6 	bl	8007400 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006ab4:	bf00      	nop
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	200499f4 	.word	0x200499f4
 8006abc:	40003800 	.word	0x40003800

08006ac0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b09a      	sub	sp, #104	; 0x68
 8006ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006ac6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006aca:	2224      	movs	r2, #36	; 0x24
 8006acc:	2100      	movs	r1, #0
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f00f fba6 	bl	8016220 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ad4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006ade:	f107 0320 	add.w	r3, r7, #32
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	601a      	str	r2, [r3, #0]
 8006ae6:	605a      	str	r2, [r3, #4]
 8006ae8:	609a      	str	r2, [r3, #8]
 8006aea:	60da      	str	r2, [r3, #12]
 8006aec:	611a      	str	r2, [r3, #16]
 8006aee:	615a      	str	r2, [r3, #20]
 8006af0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006af2:	463b      	mov	r3, r7
 8006af4:	2220      	movs	r2, #32
 8006af6:	2100      	movs	r1, #0
 8006af8:	4618      	mov	r0, r3
 8006afa:	f00f fb91 	bl	8016220 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006afe:	4b42      	ldr	r3, [pc, #264]	; (8006c08 <MX_TIM1_Init+0x148>)
 8006b00:	4a42      	ldr	r2, [pc, #264]	; (8006c0c <MX_TIM1_Init+0x14c>)
 8006b02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006b04:	4b40      	ldr	r3, [pc, #256]	; (8006c08 <MX_TIM1_Init+0x148>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b0a:	4b3f      	ldr	r3, [pc, #252]	; (8006c08 <MX_TIM1_Init+0x148>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006b10:	4b3d      	ldr	r3, [pc, #244]	; (8006c08 <MX_TIM1_Init+0x148>)
 8006b12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b18:	4b3b      	ldr	r3, [pc, #236]	; (8006c08 <MX_TIM1_Init+0x148>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006b1e:	4b3a      	ldr	r3, [pc, #232]	; (8006c08 <MX_TIM1_Init+0x148>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b24:	4b38      	ldr	r3, [pc, #224]	; (8006c08 <MX_TIM1_Init+0x148>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006b2a:	4837      	ldr	r0, [pc, #220]	; (8006c08 <MX_TIM1_Init+0x148>)
 8006b2c:	f009 ffb3 	bl	8010a96 <HAL_TIM_PWM_Init>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8006b36:	f000 fc63 	bl	8007400 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006b42:	2301      	movs	r3, #1
 8006b44:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006b46:	2300      	movs	r3, #0
 8006b48:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006b52:	2301      	movs	r3, #1
 8006b54:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006b56:	2300      	movs	r3, #0
 8006b58:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8006b5e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006b62:	4619      	mov	r1, r3
 8006b64:	4828      	ldr	r0, [pc, #160]	; (8006c08 <MX_TIM1_Init+0x148>)
 8006b66:	f009 ffff 	bl	8010b68 <HAL_TIM_Encoder_Init>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d001      	beq.n	8006b74 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006b70:	f000 fc46 	bl	8007400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b74:	2300      	movs	r3, #0
 8006b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006b7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006b80:	4619      	mov	r1, r3
 8006b82:	4821      	ldr	r0, [pc, #132]	; (8006c08 <MX_TIM1_Init+0x148>)
 8006b84:	f00a fd26 	bl	80115d4 <HAL_TIMEx_MasterConfigSynchronization>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8006b8e:	f000 fc37 	bl	8007400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006b92:	2360      	movs	r3, #96	; 0x60
 8006b94:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8006b96:	2300      	movs	r3, #0
 8006b98:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006baa:	2300      	movs	r3, #0
 8006bac:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006bae:	f107 0320 	add.w	r3, r7, #32
 8006bb2:	2208      	movs	r2, #8
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	4814      	ldr	r0, [pc, #80]	; (8006c08 <MX_TIM1_Init+0x148>)
 8006bb8:	f00a f9a8 	bl	8010f0c <HAL_TIM_PWM_ConfigChannel>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d001      	beq.n	8006bc6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8006bc2:	f000 fc1d 	bl	8007400 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006bde:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006be0:	2300      	movs	r3, #0
 8006be2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006be4:	463b      	mov	r3, r7
 8006be6:	4619      	mov	r1, r3
 8006be8:	4807      	ldr	r0, [pc, #28]	; (8006c08 <MX_TIM1_Init+0x148>)
 8006bea:	f00a fd6f 	bl	80116cc <HAL_TIMEx_ConfigBreakDeadTime>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8006bf4:	f000 fc04 	bl	8007400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006bf8:	4803      	ldr	r0, [pc, #12]	; (8006c08 <MX_TIM1_Init+0x148>)
 8006bfa:	f001 f909 	bl	8007e10 <HAL_TIM_MspPostInit>

}
 8006bfe:	bf00      	nop
 8006c00:	3768      	adds	r7, #104	; 0x68
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20049d68 	.word	0x20049d68
 8006c0c:	40010000 	.word	0x40010000

08006c10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08a      	sub	sp, #40	; 0x28
 8006c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006c16:	f107 0320 	add.w	r3, r7, #32
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006c20:	1d3b      	adds	r3, r7, #4
 8006c22:	2200      	movs	r2, #0
 8006c24:	601a      	str	r2, [r3, #0]
 8006c26:	605a      	str	r2, [r3, #4]
 8006c28:	609a      	str	r2, [r3, #8]
 8006c2a:	60da      	str	r2, [r3, #12]
 8006c2c:	611a      	str	r2, [r3, #16]
 8006c2e:	615a      	str	r2, [r3, #20]
 8006c30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006c32:	4b27      	ldr	r3, [pc, #156]	; (8006cd0 <MX_TIM3_Init+0xc0>)
 8006c34:	4a27      	ldr	r2, [pc, #156]	; (8006cd4 <MX_TIM3_Init+0xc4>)
 8006c36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8006c38:	4b25      	ldr	r3, [pc, #148]	; (8006cd0 <MX_TIM3_Init+0xc0>)
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c3e:	4b24      	ldr	r3, [pc, #144]	; (8006cd0 <MX_TIM3_Init+0xc0>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 8006c44:	4b22      	ldr	r3, [pc, #136]	; (8006cd0 <MX_TIM3_Init+0xc0>)
 8006c46:	f241 1293 	movw	r2, #4499	; 0x1193
 8006c4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c4c:	4b20      	ldr	r3, [pc, #128]	; (8006cd0 <MX_TIM3_Init+0xc0>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c52:	4b1f      	ldr	r3, [pc, #124]	; (8006cd0 <MX_TIM3_Init+0xc0>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006c58:	481d      	ldr	r0, [pc, #116]	; (8006cd0 <MX_TIM3_Init+0xc0>)
 8006c5a:	f009 ff1c 	bl	8010a96 <HAL_TIM_PWM_Init>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d001      	beq.n	8006c68 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006c64:	f000 fbcc 	bl	8007400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006c70:	f107 0320 	add.w	r3, r7, #32
 8006c74:	4619      	mov	r1, r3
 8006c76:	4816      	ldr	r0, [pc, #88]	; (8006cd0 <MX_TIM3_Init+0xc0>)
 8006c78:	f00a fcac 	bl	80115d4 <HAL_TIMEx_MasterConfigSynchronization>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d001      	beq.n	8006c86 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006c82:	f000 fbbd 	bl	8007400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006c86:	2360      	movs	r3, #96	; 0x60
 8006c88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006c92:	2300      	movs	r3, #0
 8006c94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006c96:	1d3b      	adds	r3, r7, #4
 8006c98:	2200      	movs	r2, #0
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	480c      	ldr	r0, [pc, #48]	; (8006cd0 <MX_TIM3_Init+0xc0>)
 8006c9e:	f00a f935 	bl	8010f0c <HAL_TIM_PWM_ConfigChannel>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d001      	beq.n	8006cac <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006ca8:	f000 fbaa 	bl	8007400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006cac:	1d3b      	adds	r3, r7, #4
 8006cae:	2204      	movs	r2, #4
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	4807      	ldr	r0, [pc, #28]	; (8006cd0 <MX_TIM3_Init+0xc0>)
 8006cb4:	f00a f92a 	bl	8010f0c <HAL_TIM_PWM_ConfigChannel>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8006cbe:	f000 fb9f 	bl	8007400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006cc2:	4803      	ldr	r0, [pc, #12]	; (8006cd0 <MX_TIM3_Init+0xc0>)
 8006cc4:	f001 f8a4 	bl	8007e10 <HAL_TIM_MspPostInit>

}
 8006cc8:	bf00      	nop
 8006cca:	3728      	adds	r7, #40	; 0x28
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	20049c00 	.word	0x20049c00
 8006cd4:	40000400 	.word	0x40000400

08006cd8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b08a      	sub	sp, #40	; 0x28
 8006cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006cde:	f107 0320 	add.w	r3, r7, #32
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006ce8:	1d3b      	adds	r3, r7, #4
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	605a      	str	r2, [r3, #4]
 8006cf0:	609a      	str	r2, [r3, #8]
 8006cf2:	60da      	str	r2, [r3, #12]
 8006cf4:	611a      	str	r2, [r3, #16]
 8006cf6:	615a      	str	r2, [r3, #20]
 8006cf8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006cfa:	4b27      	ldr	r3, [pc, #156]	; (8006d98 <MX_TIM4_Init+0xc0>)
 8006cfc:	4a27      	ldr	r2, [pc, #156]	; (8006d9c <MX_TIM4_Init+0xc4>)
 8006cfe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006d00:	4b25      	ldr	r3, [pc, #148]	; (8006d98 <MX_TIM4_Init+0xc0>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d06:	4b24      	ldr	r3, [pc, #144]	; (8006d98 <MX_TIM4_Init+0xc0>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8006d0c:	4b22      	ldr	r3, [pc, #136]	; (8006d98 <MX_TIM4_Init+0xc0>)
 8006d0e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8006d12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d14:	4b20      	ldr	r3, [pc, #128]	; (8006d98 <MX_TIM4_Init+0xc0>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d1a:	4b1f      	ldr	r3, [pc, #124]	; (8006d98 <MX_TIM4_Init+0xc0>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006d20:	481d      	ldr	r0, [pc, #116]	; (8006d98 <MX_TIM4_Init+0xc0>)
 8006d22:	f009 feb8 	bl	8010a96 <HAL_TIM_PWM_Init>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8006d2c:	f000 fb68 	bl	8007400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006d30:	2300      	movs	r3, #0
 8006d32:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006d34:	2300      	movs	r3, #0
 8006d36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006d38:	f107 0320 	add.w	r3, r7, #32
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	4816      	ldr	r0, [pc, #88]	; (8006d98 <MX_TIM4_Init+0xc0>)
 8006d40:	f00a fc48 	bl	80115d4 <HAL_TIMEx_MasterConfigSynchronization>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8006d4a:	f000 fb59 	bl	8007400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006d4e:	2360      	movs	r3, #96	; 0x60
 8006d50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006d52:	2300      	movs	r3, #0
 8006d54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006d56:	2300      	movs	r3, #0
 8006d58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006d5e:	1d3b      	adds	r3, r7, #4
 8006d60:	2208      	movs	r2, #8
 8006d62:	4619      	mov	r1, r3
 8006d64:	480c      	ldr	r0, [pc, #48]	; (8006d98 <MX_TIM4_Init+0xc0>)
 8006d66:	f00a f8d1 	bl	8010f0c <HAL_TIM_PWM_ConfigChannel>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d001      	beq.n	8006d74 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006d70:	f000 fb46 	bl	8007400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006d74:	1d3b      	adds	r3, r7, #4
 8006d76:	220c      	movs	r2, #12
 8006d78:	4619      	mov	r1, r3
 8006d7a:	4807      	ldr	r0, [pc, #28]	; (8006d98 <MX_TIM4_Init+0xc0>)
 8006d7c:	f00a f8c6 	bl	8010f0c <HAL_TIM_PWM_ConfigChannel>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8006d86:	f000 fb3b 	bl	8007400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8006d8a:	4803      	ldr	r0, [pc, #12]	; (8006d98 <MX_TIM4_Init+0xc0>)
 8006d8c:	f001 f840 	bl	8007e10 <HAL_TIM_MspPostInit>

}
 8006d90:	bf00      	nop
 8006d92:	3728      	adds	r7, #40	; 0x28
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	20049a8c 	.word	0x20049a8c
 8006d9c:	40000800 	.word	0x40000800

08006da0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006da6:	463b      	mov	r3, r7
 8006da8:	2200      	movs	r2, #0
 8006daa:	601a      	str	r2, [r3, #0]
 8006dac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006dae:	4b15      	ldr	r3, [pc, #84]	; (8006e04 <MX_TIM6_Init+0x64>)
 8006db0:	4a15      	ldr	r2, [pc, #84]	; (8006e08 <MX_TIM6_Init+0x68>)
 8006db2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8006db4:	4b13      	ldr	r3, [pc, #76]	; (8006e04 <MX_TIM6_Init+0x64>)
 8006db6:	2259      	movs	r2, #89	; 0x59
 8006db8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006dba:	4b12      	ldr	r3, [pc, #72]	; (8006e04 <MX_TIM6_Init+0x64>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006dc0:	4b10      	ldr	r3, [pc, #64]	; (8006e04 <MX_TIM6_Init+0x64>)
 8006dc2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006dc6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006dc8:	4b0e      	ldr	r3, [pc, #56]	; (8006e04 <MX_TIM6_Init+0x64>)
 8006dca:	2280      	movs	r2, #128	; 0x80
 8006dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006dce:	480d      	ldr	r0, [pc, #52]	; (8006e04 <MX_TIM6_Init+0x64>)
 8006dd0:	f009 fe12 	bl	80109f8 <HAL_TIM_Base_Init>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d001      	beq.n	8006dde <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8006dda:	f000 fb11 	bl	8007400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006dde:	2300      	movs	r3, #0
 8006de0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006de2:	2300      	movs	r3, #0
 8006de4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006de6:	463b      	mov	r3, r7
 8006de8:	4619      	mov	r1, r3
 8006dea:	4806      	ldr	r0, [pc, #24]	; (8006e04 <MX_TIM6_Init+0x64>)
 8006dec:	f00a fbf2 	bl	80115d4 <HAL_TIMEx_MasterConfigSynchronization>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8006df6:	f000 fb03 	bl	8007400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006dfa:	bf00      	nop
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	20049d28 	.word	0x20049d28
 8006e08:	40001000 	.word	0x40001000

08006e0c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006e12:	463b      	mov	r3, r7
 8006e14:	2200      	movs	r2, #0
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006e1a:	4b14      	ldr	r3, [pc, #80]	; (8006e6c <MX_TIM7_Init+0x60>)
 8006e1c:	4a14      	ldr	r2, [pc, #80]	; (8006e70 <MX_TIM7_Init+0x64>)
 8006e1e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8006e20:	4b12      	ldr	r3, [pc, #72]	; (8006e6c <MX_TIM7_Init+0x60>)
 8006e22:	22b3      	movs	r2, #179	; 0xb3
 8006e24:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006e26:	4b11      	ldr	r3, [pc, #68]	; (8006e6c <MX_TIM7_Init+0x60>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8006e2c:	4b0f      	ldr	r3, [pc, #60]	; (8006e6c <MX_TIM7_Init+0x60>)
 8006e2e:	2231      	movs	r2, #49	; 0x31
 8006e30:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006e32:	4b0e      	ldr	r3, [pc, #56]	; (8006e6c <MX_TIM7_Init+0x60>)
 8006e34:	2280      	movs	r2, #128	; 0x80
 8006e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006e38:	480c      	ldr	r0, [pc, #48]	; (8006e6c <MX_TIM7_Init+0x60>)
 8006e3a:	f009 fddd 	bl	80109f8 <HAL_TIM_Base_Init>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8006e44:	f000 fadc 	bl	8007400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006e50:	463b      	mov	r3, r7
 8006e52:	4619      	mov	r1, r3
 8006e54:	4805      	ldr	r0, [pc, #20]	; (8006e6c <MX_TIM7_Init+0x60>)
 8006e56:	f00a fbbd 	bl	80115d4 <HAL_TIMEx_MasterConfigSynchronization>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d001      	beq.n	8006e64 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006e60:	f000 face 	bl	8007400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006e64:	bf00      	nop
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	20049ecc 	.word	0x20049ecc
 8006e70:	40001400 	.word	0x40001400

08006e74 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08c      	sub	sp, #48	; 0x30
 8006e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006e7a:	f107 030c 	add.w	r3, r7, #12
 8006e7e:	2224      	movs	r2, #36	; 0x24
 8006e80:	2100      	movs	r1, #0
 8006e82:	4618      	mov	r0, r3
 8006e84:	f00f f9cc 	bl	8016220 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006e88:	1d3b      	adds	r3, r7, #4
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006e90:	4b22      	ldr	r3, [pc, #136]	; (8006f1c <MX_TIM8_Init+0xa8>)
 8006e92:	4a23      	ldr	r2, [pc, #140]	; (8006f20 <MX_TIM8_Init+0xac>)
 8006e94:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006e96:	4b21      	ldr	r3, [pc, #132]	; (8006f1c <MX_TIM8_Init+0xa8>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006e9c:	4b1f      	ldr	r3, [pc, #124]	; (8006f1c <MX_TIM8_Init+0xa8>)
 8006e9e:	2210      	movs	r2, #16
 8006ea0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006ea2:	4b1e      	ldr	r3, [pc, #120]	; (8006f1c <MX_TIM8_Init+0xa8>)
 8006ea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ea8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006eaa:	4b1c      	ldr	r3, [pc, #112]	; (8006f1c <MX_TIM8_Init+0xa8>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006eb0:	4b1a      	ldr	r3, [pc, #104]	; (8006f1c <MX_TIM8_Init+0xa8>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006eb6:	4b19      	ldr	r3, [pc, #100]	; (8006f1c <MX_TIM8_Init+0xa8>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006edc:	2300      	movs	r3, #0
 8006ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006ee0:	f107 030c 	add.w	r3, r7, #12
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	480d      	ldr	r0, [pc, #52]	; (8006f1c <MX_TIM8_Init+0xa8>)
 8006ee8:	f009 fe3e 	bl	8010b68 <HAL_TIM_Encoder_Init>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006ef2:	f000 fa85 	bl	8007400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006efa:	2300      	movs	r3, #0
 8006efc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006efe:	1d3b      	adds	r3, r7, #4
 8006f00:	4619      	mov	r1, r3
 8006f02:	4806      	ldr	r0, [pc, #24]	; (8006f1c <MX_TIM8_Init+0xa8>)
 8006f04:	f00a fb66 	bl	80115d4 <HAL_TIMEx_MasterConfigSynchronization>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8006f0e:	f000 fa77 	bl	8007400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006f12:	bf00      	nop
 8006f14:	3730      	adds	r7, #48	; 0x30
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	20049a4c 	.word	0x20049a4c
 8006f20:	40010400 	.word	0x40010400

08006f24 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b088      	sub	sp, #32
 8006f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006f2a:	1d3b      	adds	r3, r7, #4
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	605a      	str	r2, [r3, #4]
 8006f32:	609a      	str	r2, [r3, #8]
 8006f34:	60da      	str	r2, [r3, #12]
 8006f36:	611a      	str	r2, [r3, #16]
 8006f38:	615a      	str	r2, [r3, #20]
 8006f3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006f3c:	4b1e      	ldr	r3, [pc, #120]	; (8006fb8 <MX_TIM10_Init+0x94>)
 8006f3e:	4a1f      	ldr	r2, [pc, #124]	; (8006fbc <MX_TIM10_Init+0x98>)
 8006f40:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 8006f42:	4b1d      	ldr	r3, [pc, #116]	; (8006fb8 <MX_TIM10_Init+0x94>)
 8006f44:	2201      	movs	r2, #1
 8006f46:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f48:	4b1b      	ldr	r3, [pc, #108]	; (8006fb8 <MX_TIM10_Init+0x94>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 8006f4e:	4b1a      	ldr	r3, [pc, #104]	; (8006fb8 <MX_TIM10_Init+0x94>)
 8006f50:	f242 3227 	movw	r2, #8999	; 0x2327
 8006f54:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006f56:	4b18      	ldr	r3, [pc, #96]	; (8006fb8 <MX_TIM10_Init+0x94>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006f5c:	4b16      	ldr	r3, [pc, #88]	; (8006fb8 <MX_TIM10_Init+0x94>)
 8006f5e:	2200      	movs	r2, #0
 8006f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006f62:	4815      	ldr	r0, [pc, #84]	; (8006fb8 <MX_TIM10_Init+0x94>)
 8006f64:	f009 fd48 	bl	80109f8 <HAL_TIM_Base_Init>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8006f6e:	f000 fa47 	bl	8007400 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006f72:	4811      	ldr	r0, [pc, #68]	; (8006fb8 <MX_TIM10_Init+0x94>)
 8006f74:	f009 fd8f 	bl	8010a96 <HAL_TIM_PWM_Init>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8006f7e:	f000 fa3f 	bl	8007400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006f82:	2360      	movs	r3, #96	; 0x60
 8006f84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006f86:	2300      	movs	r3, #0
 8006f88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006f92:	1d3b      	adds	r3, r7, #4
 8006f94:	2200      	movs	r2, #0
 8006f96:	4619      	mov	r1, r3
 8006f98:	4807      	ldr	r0, [pc, #28]	; (8006fb8 <MX_TIM10_Init+0x94>)
 8006f9a:	f009 ffb7 	bl	8010f0c <HAL_TIM_PWM_ConfigChannel>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006fa4:	f000 fa2c 	bl	8007400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006fa8:	4803      	ldr	r0, [pc, #12]	; (8006fb8 <MX_TIM10_Init+0x94>)
 8006faa:	f000 ff31 	bl	8007e10 <HAL_TIM_MspPostInit>

}
 8006fae:	bf00      	nop
 8006fb0:	3720      	adds	r7, #32
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	20049b68 	.word	0x20049b68
 8006fbc:	40014400 	.word	0x40014400

08006fc0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b088      	sub	sp, #32
 8006fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006fc6:	1d3b      	adds	r3, r7, #4
 8006fc8:	2200      	movs	r2, #0
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	605a      	str	r2, [r3, #4]
 8006fce:	609a      	str	r2, [r3, #8]
 8006fd0:	60da      	str	r2, [r3, #12]
 8006fd2:	611a      	str	r2, [r3, #16]
 8006fd4:	615a      	str	r2, [r3, #20]
 8006fd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006fd8:	4b1e      	ldr	r3, [pc, #120]	; (8007054 <MX_TIM11_Init+0x94>)
 8006fda:	4a1f      	ldr	r2, [pc, #124]	; (8007058 <MX_TIM11_Init+0x98>)
 8006fdc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 8006fde:	4b1d      	ldr	r3, [pc, #116]	; (8007054 <MX_TIM11_Init+0x94>)
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006fe4:	4b1b      	ldr	r3, [pc, #108]	; (8007054 <MX_TIM11_Init+0x94>)
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 8006fea:	4b1a      	ldr	r3, [pc, #104]	; (8007054 <MX_TIM11_Init+0x94>)
 8006fec:	f242 3227 	movw	r2, #8999	; 0x2327
 8006ff0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ff2:	4b18      	ldr	r3, [pc, #96]	; (8007054 <MX_TIM11_Init+0x94>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ff8:	4b16      	ldr	r3, [pc, #88]	; (8007054 <MX_TIM11_Init+0x94>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006ffe:	4815      	ldr	r0, [pc, #84]	; (8007054 <MX_TIM11_Init+0x94>)
 8007000:	f009 fcfa 	bl	80109f8 <HAL_TIM_Base_Init>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d001      	beq.n	800700e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800700a:	f000 f9f9 	bl	8007400 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800700e:	4811      	ldr	r0, [pc, #68]	; (8007054 <MX_TIM11_Init+0x94>)
 8007010:	f009 fd41 	bl	8010a96 <HAL_TIM_PWM_Init>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800701a:	f000 f9f1 	bl	8007400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800701e:	2360      	movs	r3, #96	; 0x60
 8007020:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007022:	2300      	movs	r3, #0
 8007024:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007026:	2300      	movs	r3, #0
 8007028:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800702a:	2300      	movs	r3, #0
 800702c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800702e:	1d3b      	adds	r3, r7, #4
 8007030:	2200      	movs	r2, #0
 8007032:	4619      	mov	r1, r3
 8007034:	4807      	ldr	r0, [pc, #28]	; (8007054 <MX_TIM11_Init+0x94>)
 8007036:	f009 ff69 	bl	8010f0c <HAL_TIM_PWM_ConfigChannel>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d001      	beq.n	8007044 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8007040:	f000 f9de 	bl	8007400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8007044:	4803      	ldr	r0, [pc, #12]	; (8007054 <MX_TIM11_Init+0x94>)
 8007046:	f000 fee3 	bl	8007e10 <HAL_TIM_MspPostInit>

}
 800704a:	bf00      	nop
 800704c:	3720      	adds	r7, #32
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20049c88 	.word	0x20049c88
 8007058:	40014800 	.word	0x40014800

0800705c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8007060:	4b0e      	ldr	r3, [pc, #56]	; (800709c <MX_TIM13_Init+0x40>)
 8007062:	4a0f      	ldr	r2, [pc, #60]	; (80070a0 <MX_TIM13_Init+0x44>)
 8007064:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8007066:	4b0d      	ldr	r3, [pc, #52]	; (800709c <MX_TIM13_Init+0x40>)
 8007068:	2259      	movs	r2, #89	; 0x59
 800706a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800706c:	4b0b      	ldr	r3, [pc, #44]	; (800709c <MX_TIM13_Init+0x40>)
 800706e:	2200      	movs	r2, #0
 8007070:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8007072:	4b0a      	ldr	r3, [pc, #40]	; (800709c <MX_TIM13_Init+0x40>)
 8007074:	f242 720f 	movw	r2, #9999	; 0x270f
 8007078:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800707a:	4b08      	ldr	r3, [pc, #32]	; (800709c <MX_TIM13_Init+0x40>)
 800707c:	2200      	movs	r2, #0
 800707e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007080:	4b06      	ldr	r3, [pc, #24]	; (800709c <MX_TIM13_Init+0x40>)
 8007082:	2280      	movs	r2, #128	; 0x80
 8007084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8007086:	4805      	ldr	r0, [pc, #20]	; (800709c <MX_TIM13_Init+0x40>)
 8007088:	f009 fcb6 	bl	80109f8 <HAL_TIM_Base_Init>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d001      	beq.n	8007096 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8007092:	f000 f9b5 	bl	8007400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8007096:	bf00      	nop
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	20049c48 	.word	0x20049c48
 80070a0:	40001c00 	.word	0x40001c00

080070a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80070a8:	4b11      	ldr	r3, [pc, #68]	; (80070f0 <MX_USART2_UART_Init+0x4c>)
 80070aa:	4a12      	ldr	r2, [pc, #72]	; (80070f4 <MX_USART2_UART_Init+0x50>)
 80070ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80070ae:	4b10      	ldr	r3, [pc, #64]	; (80070f0 <MX_USART2_UART_Init+0x4c>)
 80070b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80070b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80070b6:	4b0e      	ldr	r3, [pc, #56]	; (80070f0 <MX_USART2_UART_Init+0x4c>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80070bc:	4b0c      	ldr	r3, [pc, #48]	; (80070f0 <MX_USART2_UART_Init+0x4c>)
 80070be:	2200      	movs	r2, #0
 80070c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80070c2:	4b0b      	ldr	r3, [pc, #44]	; (80070f0 <MX_USART2_UART_Init+0x4c>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80070c8:	4b09      	ldr	r3, [pc, #36]	; (80070f0 <MX_USART2_UART_Init+0x4c>)
 80070ca:	220c      	movs	r2, #12
 80070cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80070ce:	4b08      	ldr	r3, [pc, #32]	; (80070f0 <MX_USART2_UART_Init+0x4c>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80070d4:	4b06      	ldr	r3, [pc, #24]	; (80070f0 <MX_USART2_UART_Init+0x4c>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80070da:	4805      	ldr	r0, [pc, #20]	; (80070f0 <MX_USART2_UART_Init+0x4c>)
 80070dc:	f00a fb5c 	bl	8011798 <HAL_UART_Init>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80070e6:	f000 f98b 	bl	8007400 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80070ea:	bf00      	nop
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	20049e2c 	.word	0x20049e2c
 80070f4:	40004400 	.word	0x40004400

080070f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80070fe:	2300      	movs	r3, #0
 8007100:	607b      	str	r3, [r7, #4]
 8007102:	4b14      	ldr	r3, [pc, #80]	; (8007154 <MX_DMA_Init+0x5c>)
 8007104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007106:	4a13      	ldr	r2, [pc, #76]	; (8007154 <MX_DMA_Init+0x5c>)
 8007108:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800710c:	6313      	str	r3, [r2, #48]	; 0x30
 800710e:	4b11      	ldr	r3, [pc, #68]	; (8007154 <MX_DMA_Init+0x5c>)
 8007110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007116:	607b      	str	r3, [r7, #4]
 8007118:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800711a:	2200      	movs	r2, #0
 800711c:	2100      	movs	r1, #0
 800711e:	203a      	movs	r0, #58	; 0x3a
 8007120:	f005 f81d 	bl	800c15e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8007124:	203a      	movs	r0, #58	; 0x3a
 8007126:	f005 f836 	bl	800c196 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800712a:	2200      	movs	r2, #0
 800712c:	2100      	movs	r1, #0
 800712e:	203b      	movs	r0, #59	; 0x3b
 8007130:	f005 f815 	bl	800c15e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8007134:	203b      	movs	r0, #59	; 0x3b
 8007136:	f005 f82e 	bl	800c196 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800713a:	2200      	movs	r2, #0
 800713c:	2100      	movs	r1, #0
 800713e:	2045      	movs	r0, #69	; 0x45
 8007140:	f005 f80d 	bl	800c15e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8007144:	2045      	movs	r0, #69	; 0x45
 8007146:	f005 f826 	bl	800c196 <HAL_NVIC_EnableIRQ>

}
 800714a:	bf00      	nop
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	40023800 	.word	0x40023800

08007158 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08c      	sub	sp, #48	; 0x30
 800715c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800715e:	f107 031c 	add.w	r3, r7, #28
 8007162:	2200      	movs	r2, #0
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	605a      	str	r2, [r3, #4]
 8007168:	609a      	str	r2, [r3, #8]
 800716a:	60da      	str	r2, [r3, #12]
 800716c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800716e:	2300      	movs	r3, #0
 8007170:	61bb      	str	r3, [r7, #24]
 8007172:	4b9c      	ldr	r3, [pc, #624]	; (80073e4 <MX_GPIO_Init+0x28c>)
 8007174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007176:	4a9b      	ldr	r2, [pc, #620]	; (80073e4 <MX_GPIO_Init+0x28c>)
 8007178:	f043 0310 	orr.w	r3, r3, #16
 800717c:	6313      	str	r3, [r2, #48]	; 0x30
 800717e:	4b99      	ldr	r3, [pc, #612]	; (80073e4 <MX_GPIO_Init+0x28c>)
 8007180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007182:	f003 0310 	and.w	r3, r3, #16
 8007186:	61bb      	str	r3, [r7, #24]
 8007188:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800718a:	2300      	movs	r3, #0
 800718c:	617b      	str	r3, [r7, #20]
 800718e:	4b95      	ldr	r3, [pc, #596]	; (80073e4 <MX_GPIO_Init+0x28c>)
 8007190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007192:	4a94      	ldr	r2, [pc, #592]	; (80073e4 <MX_GPIO_Init+0x28c>)
 8007194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007198:	6313      	str	r3, [r2, #48]	; 0x30
 800719a:	4b92      	ldr	r3, [pc, #584]	; (80073e4 <MX_GPIO_Init+0x28c>)
 800719c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071a2:	617b      	str	r3, [r7, #20]
 80071a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80071a6:	2300      	movs	r3, #0
 80071a8:	613b      	str	r3, [r7, #16]
 80071aa:	4b8e      	ldr	r3, [pc, #568]	; (80073e4 <MX_GPIO_Init+0x28c>)
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ae:	4a8d      	ldr	r2, [pc, #564]	; (80073e4 <MX_GPIO_Init+0x28c>)
 80071b0:	f043 0304 	orr.w	r3, r3, #4
 80071b4:	6313      	str	r3, [r2, #48]	; 0x30
 80071b6:	4b8b      	ldr	r3, [pc, #556]	; (80073e4 <MX_GPIO_Init+0x28c>)
 80071b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ba:	f003 0304 	and.w	r3, r3, #4
 80071be:	613b      	str	r3, [r7, #16]
 80071c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80071c2:	2300      	movs	r3, #0
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	4b87      	ldr	r3, [pc, #540]	; (80073e4 <MX_GPIO_Init+0x28c>)
 80071c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ca:	4a86      	ldr	r2, [pc, #536]	; (80073e4 <MX_GPIO_Init+0x28c>)
 80071cc:	f043 0301 	orr.w	r3, r3, #1
 80071d0:	6313      	str	r3, [r2, #48]	; 0x30
 80071d2:	4b84      	ldr	r3, [pc, #528]	; (80073e4 <MX_GPIO_Init+0x28c>)
 80071d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80071de:	2300      	movs	r3, #0
 80071e0:	60bb      	str	r3, [r7, #8]
 80071e2:	4b80      	ldr	r3, [pc, #512]	; (80073e4 <MX_GPIO_Init+0x28c>)
 80071e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e6:	4a7f      	ldr	r2, [pc, #508]	; (80073e4 <MX_GPIO_Init+0x28c>)
 80071e8:	f043 0302 	orr.w	r3, r3, #2
 80071ec:	6313      	str	r3, [r2, #48]	; 0x30
 80071ee:	4b7d      	ldr	r3, [pc, #500]	; (80073e4 <MX_GPIO_Init+0x28c>)
 80071f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	60bb      	str	r3, [r7, #8]
 80071f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80071fa:	2300      	movs	r3, #0
 80071fc:	607b      	str	r3, [r7, #4]
 80071fe:	4b79      	ldr	r3, [pc, #484]	; (80073e4 <MX_GPIO_Init+0x28c>)
 8007200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007202:	4a78      	ldr	r2, [pc, #480]	; (80073e4 <MX_GPIO_Init+0x28c>)
 8007204:	f043 0308 	orr.w	r3, r3, #8
 8007208:	6313      	str	r3, [r2, #48]	; 0x30
 800720a:	4b76      	ldr	r3, [pc, #472]	; (80073e4 <MX_GPIO_Init+0x28c>)
 800720c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720e:	f003 0308 	and.w	r3, r3, #8
 8007212:	607b      	str	r3, [r7, #4]
 8007214:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8007216:	2200      	movs	r2, #0
 8007218:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800721c:	4872      	ldr	r0, [pc, #456]	; (80073e8 <MX_GPIO_Init+0x290>)
 800721e:	f005 fd33 	bl	800cc88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8007222:	2200      	movs	r2, #0
 8007224:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007228:	4870      	ldr	r0, [pc, #448]	; (80073ec <MX_GPIO_Init+0x294>)
 800722a:	f005 fd2d 	bl	800cc88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800722e:	2200      	movs	r2, #0
 8007230:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007234:	486e      	ldr	r0, [pc, #440]	; (80073f0 <MX_GPIO_Init+0x298>)
 8007236:	f005 fd27 	bl	800cc88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800723a:	2200      	movs	r2, #0
 800723c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8007240:	486c      	ldr	r0, [pc, #432]	; (80073f4 <MX_GPIO_Init+0x29c>)
 8007242:	f005 fd21 	bl	800cc88 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007246:	2304      	movs	r3, #4
 8007248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800724a:	4b6b      	ldr	r3, [pc, #428]	; (80073f8 <MX_GPIO_Init+0x2a0>)
 800724c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800724e:	2300      	movs	r3, #0
 8007250:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007252:	f107 031c 	add.w	r3, r7, #28
 8007256:	4619      	mov	r1, r3
 8007258:	4863      	ldr	r0, [pc, #396]	; (80073e8 <MX_GPIO_Init+0x290>)
 800725a:	f005 fb53 	bl	800c904 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800725e:	230f      	movs	r3, #15
 8007260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007262:	2303      	movs	r3, #3
 8007264:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007266:	2300      	movs	r3, #0
 8007268:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800726a:	f107 031c 	add.w	r3, r7, #28
 800726e:	4619      	mov	r1, r3
 8007270:	4862      	ldr	r0, [pc, #392]	; (80073fc <MX_GPIO_Init+0x2a4>)
 8007272:	f005 fb47 	bl	800c904 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007276:	23e1      	movs	r3, #225	; 0xe1
 8007278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800727a:	2303      	movs	r3, #3
 800727c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800727e:	2300      	movs	r3, #0
 8007280:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007282:	f107 031c 	add.w	r3, r7, #28
 8007286:	4619      	mov	r1, r3
 8007288:	485a      	ldr	r0, [pc, #360]	; (80073f4 <MX_GPIO_Init+0x29c>)
 800728a:	f005 fb3b 	bl	800c904 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800728e:	2303      	movs	r3, #3
 8007290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007292:	2303      	movs	r3, #3
 8007294:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007296:	2300      	movs	r3, #0
 8007298:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800729a:	f107 031c 	add.w	r3, r7, #28
 800729e:	4619      	mov	r1, r3
 80072a0:	4852      	ldr	r0, [pc, #328]	; (80073ec <MX_GPIO_Init+0x294>)
 80072a2:	f005 fb2f 	bl	800c904 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80072a6:	2304      	movs	r3, #4
 80072a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80072aa:	2300      	movs	r3, #0
 80072ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80072ae:	2301      	movs	r3, #1
 80072b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072b2:	f107 031c 	add.w	r3, r7, #28
 80072b6:	4619      	mov	r1, r3
 80072b8:	484c      	ldr	r0, [pc, #304]	; (80073ec <MX_GPIO_Init+0x294>)
 80072ba:	f005 fb23 	bl	800c904 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80072be:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80072c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80072c4:	2300      	movs	r3, #0
 80072c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80072c8:	2301      	movs	r3, #1
 80072ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80072cc:	f107 031c 	add.w	r3, r7, #28
 80072d0:	4619      	mov	r1, r3
 80072d2:	4845      	ldr	r0, [pc, #276]	; (80073e8 <MX_GPIO_Init+0x290>)
 80072d4:	f005 fb16 	bl	800c904 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80072d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80072dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072de:	2301      	movs	r3, #1
 80072e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072e2:	2300      	movs	r3, #0
 80072e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072e6:	2300      	movs	r3, #0
 80072e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80072ea:	f107 031c 	add.w	r3, r7, #28
 80072ee:	4619      	mov	r1, r3
 80072f0:	483d      	ldr	r0, [pc, #244]	; (80073e8 <MX_GPIO_Init+0x290>)
 80072f2:	f005 fb07 	bl	800c904 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80072f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072fc:	2301      	movs	r3, #1
 80072fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007300:	2300      	movs	r3, #0
 8007302:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007304:	2300      	movs	r3, #0
 8007306:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007308:	f107 031c 	add.w	r3, r7, #28
 800730c:	4619      	mov	r1, r3
 800730e:	4837      	ldr	r0, [pc, #220]	; (80073ec <MX_GPIO_Init+0x294>)
 8007310:	f005 faf8 	bl	800c904 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800731a:	4b37      	ldr	r3, [pc, #220]	; (80073f8 <MX_GPIO_Init+0x2a0>)
 800731c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800731e:	2300      	movs	r3, #0
 8007320:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007322:	f107 031c 	add.w	r3, r7, #28
 8007326:	4619      	mov	r1, r3
 8007328:	4831      	ldr	r0, [pc, #196]	; (80073f0 <MX_GPIO_Init+0x298>)
 800732a:	f005 faeb 	bl	800c904 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800732e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007334:	2301      	movs	r3, #1
 8007336:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007338:	2300      	movs	r3, #0
 800733a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800733c:	2300      	movs	r3, #0
 800733e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007340:	f107 031c 	add.w	r3, r7, #28
 8007344:	4619      	mov	r1, r3
 8007346:	482a      	ldr	r0, [pc, #168]	; (80073f0 <MX_GPIO_Init+0x298>)
 8007348:	f005 fadc 	bl	800c904 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800734c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007352:	2301      	movs	r3, #1
 8007354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007356:	2301      	movs	r3, #1
 8007358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800735a:	2300      	movs	r3, #0
 800735c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800735e:	f107 031c 	add.w	r3, r7, #28
 8007362:	4619      	mov	r1, r3
 8007364:	4822      	ldr	r0, [pc, #136]	; (80073f0 <MX_GPIO_Init+0x298>)
 8007366:	f005 facd 	bl	800c904 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800736a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800736e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007370:	2301      	movs	r3, #1
 8007372:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007374:	2300      	movs	r3, #0
 8007376:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007378:	2300      	movs	r3, #0
 800737a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800737c:	f107 031c 	add.w	r3, r7, #28
 8007380:	4619      	mov	r1, r3
 8007382:	481c      	ldr	r0, [pc, #112]	; (80073f4 <MX_GPIO_Init+0x29c>)
 8007384:	f005 fabe 	bl	800c904 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800738c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800738e:	2300      	movs	r3, #0
 8007390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007392:	2300      	movs	r3, #0
 8007394:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007396:	f107 031c 	add.w	r3, r7, #28
 800739a:	4619      	mov	r1, r3
 800739c:	4815      	ldr	r0, [pc, #84]	; (80073f4 <MX_GPIO_Init+0x29c>)
 800739e:	f005 fab1 	bl	800c904 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80073a2:	239b      	movs	r3, #155	; 0x9b
 80073a4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80073a6:	2300      	movs	r3, #0
 80073a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80073aa:	2301      	movs	r3, #1
 80073ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80073ae:	f107 031c 	add.w	r3, r7, #28
 80073b2:	4619      	mov	r1, r3
 80073b4:	480e      	ldr	r0, [pc, #56]	; (80073f0 <MX_GPIO_Init+0x298>)
 80073b6:	f005 faa5 	bl	800c904 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80073ba:	2200      	movs	r2, #0
 80073bc:	2100      	movs	r1, #0
 80073be:	2008      	movs	r0, #8
 80073c0:	f004 fecd 	bl	800c15e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80073c4:	2008      	movs	r0, #8
 80073c6:	f004 fee6 	bl	800c196 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80073ca:	2200      	movs	r2, #0
 80073cc:	2100      	movs	r1, #0
 80073ce:	2017      	movs	r0, #23
 80073d0:	f004 fec5 	bl	800c15e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80073d4:	2017      	movs	r0, #23
 80073d6:	f004 fede 	bl	800c196 <HAL_NVIC_EnableIRQ>

}
 80073da:	bf00      	nop
 80073dc:	3730      	adds	r7, #48	; 0x30
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	40023800 	.word	0x40023800
 80073e8:	40021000 	.word	0x40021000
 80073ec:	40020400 	.word	0x40020400
 80073f0:	40020c00 	.word	0x40020c00
 80073f4:	40020000 	.word	0x40020000
 80073f8:	10310000 	.word	0x10310000
 80073fc:	40020800 	.word	0x40020800

08007400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007400:	b480      	push	{r7}
 8007402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007404:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007406:	e7fe      	b.n	8007406 <Error_Handler+0x6>

08007408 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8007408:	b480      	push	{r7}
 800740a:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 800740c:	bf00      	nop
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <_ZN6sdCard9clearBuffEv>:
	f_open(&fil_, filepath_, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
	f_chdir("..");
}

void sdCard::clearBuff()
{
 8007416:	b480      	push	{r7}
 8007418:	b085      	sub	sp, #20
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < BUFF_SIZE; i++){
 800741e:	2300      	movs	r3, #0
 8007420:	60fb      	str	r3, [r7, #12]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2b7f      	cmp	r3, #127	; 0x7f
 8007426:	dc0b      	bgt.n	8007440 <_ZN6sdCard9clearBuffEv+0x2a>
		buffer_[i] = '\0';
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	4413      	add	r3, r2
 800742e:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8007432:	3329      	adds	r3, #41	; 0x29
 8007434:	2200      	movs	r2, #0
 8007436:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	3301      	adds	r3, #1
 800743c:	60fb      	str	r3, [r7, #12]
 800743e:	e7f0      	b.n	8007422 <_ZN6sdCard9clearBuffEv+0xc>
	}
}
 8007440:	bf00      	nop
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <_ZN6sdCardC1Ev>:

sdCard::sdCard() : buffer_{0}, filepath_{0}, dirpath_{0}{}
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800745a:	3329      	adds	r3, #41	; 0x29
 800745c:	4618      	mov	r0, r3
 800745e:	2380      	movs	r3, #128	; 0x80
 8007460:	461a      	mov	r2, r3
 8007462:	2100      	movs	r1, #0
 8007464:	f00e fedc 	bl	8016220 <memset>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800746e:	3304      	adds	r3, #4
 8007470:	4618      	mov	r0, r3
 8007472:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007476:	461a      	mov	r2, r3
 8007478:	2100      	movs	r1, #0
 800747a:	f00e fed1 	bl	8016220 <memset>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007484:	3304      	adds	r3, #4
 8007486:	4618      	mov	r0, r3
 8007488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800748c:	461a      	mov	r2, r3
 800748e:	2100      	movs	r1, #0
 8007490:	f00e fec6 	bl	8016220 <memset>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4618      	mov	r0, r3
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <_ZN6sdCard4initEv>:

bool sdCard::init()
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b082      	sub	sp, #8
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
	if(mount_() == 1){
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f80a 	bl	80074c0 <_ZN6sdCard6mount_Ev>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <_ZN6sdCard4initEv+0x18>
		return true;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e000      	b.n	80074b8 <_ZN6sdCard4initEv+0x1a>

	}
	else{
		return false;
 80074b6:	2300      	movs	r3, #0
	}

}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <_ZN6sdCard6mount_Ev>:


bool sdCard::mount_()
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80074c8:	2300      	movs	r3, #0
 80074ca:	73fb      	strb	r3, [r7, #15]

	if(f_mount(&fs_, "", 1) == FR_OK) ret = true;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	490a      	ldr	r1, [pc, #40]	; (80074fc <_ZN6sdCard6mount_Ev+0x3c>)
 80074d2:	4618      	mov	r0, r3
 80074d4:	f00d fbac 	bl	8014c30 <f_mount>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	bf0c      	ite	eq
 80074de:	2301      	moveq	r3, #1
 80074e0:	2300      	movne	r3, #0
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <_ZN6sdCard6mount_Ev+0x2e>
 80074e8:	2301      	movs	r3, #1
 80074ea:	73fb      	strb	r3, [r7, #15]
 80074ec:	e001      	b.n	80074f2 <_ZN6sdCard6mount_Ev+0x32>
	else ret = false;
 80074ee:	2300      	movs	r3, #0
 80074f0:	73fb      	strb	r3, [r7, #15]

	return ret;
 80074f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	0801a8f0 	.word	0x0801a8f0

08007500 <_ZN6sdCard6write_EPKcS1_tPfc>:
	f_close(&fil_);	//ファイル閉じる


}
void sdCard::write_(const char *p_folder_name, const char *p_file_name, uint16_t size, float *data, char state)
{
 8007500:	b5b0      	push	{r4, r5, r7, lr}
 8007502:	b088      	sub	sp, #32
 8007504:	af02      	add	r7, sp, #8
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
 800750c:	807b      	strh	r3, [r7, #2]
	//openFile(p_folder_name, p_file_name);

	sprintf(dirpath_, "%s", p_folder_name);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007514:	3304      	adds	r3, #4
 8007516:	68b9      	ldr	r1, [r7, #8]
 8007518:	4618      	mov	r0, r3
 800751a:	f00f fe49 	bl	80171b0 <strcpy>
	sprintf(filepath_, "%s", p_file_name);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8007524:	3304      	adds	r3, #4
 8007526:	6879      	ldr	r1, [r7, #4]
 8007528:	4618      	mov	r0, r3
 800752a:	f00f fe41 	bl	80171b0 <strcpy>

	if(state == OVER_WRITE){
 800752e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007532:	2b00      	cmp	r3, #0
 8007534:	d110      	bne.n	8007558 <_ZN6sdCard6write_EPKcS1_tPfc+0x58>
		f_chdir(dirpath_);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 800753c:	3304      	adds	r3, #4
 800753e:	4618      	mov	r0, r3
 8007540:	f00e f928 	bl	8015794 <f_chdir>
		f_unlink(filepath_);	//	一回消す
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800754a:	3304      	adds	r3, #4
 800754c:	4618      	mov	r0, r3
 800754e:	f00e fb8f 	bl	8015c70 <f_unlink>
		f_chdir("..");
 8007552:	483b      	ldr	r0, [pc, #236]	; (8007640 <_ZN6sdCard6write_EPKcS1_tPfc+0x140>)
 8007554:	f00e f91e 	bl	8015794 <f_chdir>
	}

	f_mkdir(dirpath_);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 800755e:	3304      	adds	r3, #4
 8007560:	4618      	mov	r0, r3
 8007562:	f00e fc47 	bl	8015df4 <f_mkdir>
	f_chdir(dirpath_);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 800756c:	3304      	adds	r3, #4
 800756e:	4618      	mov	r0, r3
 8007570:	f00e f910 	bl	8015794 <f_chdir>
	f_open(&fil_, filepath_, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800757a:	3318      	adds	r3, #24
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	f502 5104 	add.w	r1, r2, #8448	; 0x2100
 8007582:	3104      	adds	r1, #4
 8007584:	2213      	movs	r2, #19
 8007586:	4618      	mov	r0, r3
 8007588:	f00d fb98 	bl	8014cbc <f_open>
	f_chdir("..");
 800758c:	482c      	ldr	r0, [pc, #176]	; (8007640 <_ZN6sdCard6write_EPKcS1_tPfc+0x140>)
 800758e:	f00e f901 	bl	8015794 <f_chdir>

	for(short i = 0 ; i < size; i++){
 8007592:	2300      	movs	r3, #0
 8007594:	82fb      	strh	r3, [r7, #22]
 8007596:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800759a:	887b      	ldrh	r3, [r7, #2]
 800759c:	429a      	cmp	r2, r3
 800759e:	da44      	bge.n	800762a <_ZN6sdCard6write_EPKcS1_tPfc+0x12a>
		snprintf(buffer_, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f503 5401 	add.w	r4, r3, #8256	; 0x2040
 80075a6:	3429      	adds	r4, #41	; 0x29
 80075a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075b0:	4413      	add	r3, r2
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7f8 ffdf 	bl	8000578 <__aeabi_f2d>
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	e9cd 2300 	strd	r2, r3, [sp]
 80075c2:	4a20      	ldr	r2, [pc, #128]	; (8007644 <_ZN6sdCard6write_EPKcS1_tPfc+0x144>)
 80075c4:	2180      	movs	r1, #128	; 0x80
 80075c6:	4620      	mov	r0, r4
 80075c8:	f00f fd72 	bl	80170b0 <sniprintf>

		f_lseek(&fil_, f_size(&fil_));	//	ファイルの最後に移動
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 80075d2:	3218      	adds	r2, #24
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80075da:	3304      	adds	r3, #4
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4619      	mov	r1, r3
 80075e0:	4610      	mov	r0, r2
 80075e2:	f00e f921 	bl	8015828 <f_lseek>
		f_write(&fil_, buffer_, strlen(buffer_), &bw_);	//	書き込む
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f503 5481 	add.w	r4, r3, #4128	; 0x1020
 80075ec:	3418      	adds	r4, #24
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f503 5501 	add.w	r5, r3, #8256	; 0x2040
 80075f4:	3529      	adds	r5, #41	; 0x29
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80075fc:	3329      	adds	r3, #41	; 0x29
 80075fe:	4618      	mov	r0, r3
 8007600:	f7f8 fdfe 	bl	8000200 <strlen>
 8007604:	4602      	mov	r2, r0
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800760c:	3330      	adds	r3, #48	; 0x30
 800760e:	4629      	mov	r1, r5
 8007610:	4620      	mov	r0, r4
 8007612:	f00d fe80 	bl	8015316 <f_write>

		clearBuff();	//	書き込み用のバッファをクリア
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f7ff fefd 	bl	8007416 <_ZN6sdCard9clearBuffEv>
	for(short i = 0 ; i < size; i++){
 800761c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007620:	b29b      	uxth	r3, r3
 8007622:	3301      	adds	r3, #1
 8007624:	b29b      	uxth	r3, r3
 8007626:	82fb      	strh	r3, [r7, #22]
 8007628:	e7b5      	b.n	8007596 <_ZN6sdCard6write_EPKcS1_tPfc+0x96>
	}

	f_close(&fil_);	//	ファイル閉じる
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007630:	3318      	adds	r3, #24
 8007632:	4618      	mov	r0, r3
 8007634:	f00e f884 	bl	8015740 <f_close>

}
 8007638:	bf00      	nop
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bdb0      	pop	{r4, r5, r7, pc}
 8007640:	0801a8ec 	.word	0x0801a8ec
 8007644:	0801a8f4 	.word	0x0801a8f4

08007648 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800764e:	2300      	movs	r3, #0
 8007650:	607b      	str	r3, [r7, #4]
 8007652:	4b10      	ldr	r3, [pc, #64]	; (8007694 <HAL_MspInit+0x4c>)
 8007654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007656:	4a0f      	ldr	r2, [pc, #60]	; (8007694 <HAL_MspInit+0x4c>)
 8007658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800765c:	6453      	str	r3, [r2, #68]	; 0x44
 800765e:	4b0d      	ldr	r3, [pc, #52]	; (8007694 <HAL_MspInit+0x4c>)
 8007660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007666:	607b      	str	r3, [r7, #4]
 8007668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800766a:	2300      	movs	r3, #0
 800766c:	603b      	str	r3, [r7, #0]
 800766e:	4b09      	ldr	r3, [pc, #36]	; (8007694 <HAL_MspInit+0x4c>)
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	4a08      	ldr	r2, [pc, #32]	; (8007694 <HAL_MspInit+0x4c>)
 8007674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007678:	6413      	str	r3, [r2, #64]	; 0x40
 800767a:	4b06      	ldr	r3, [pc, #24]	; (8007694 <HAL_MspInit+0x4c>)
 800767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007682:	603b      	str	r3, [r7, #0]
 8007684:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007686:	bf00      	nop
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	40023800 	.word	0x40023800

08007698 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b08c      	sub	sp, #48	; 0x30
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076a0:	f107 031c 	add.w	r3, r7, #28
 80076a4:	2200      	movs	r2, #0
 80076a6:	601a      	str	r2, [r3, #0]
 80076a8:	605a      	str	r2, [r3, #4]
 80076aa:	609a      	str	r2, [r3, #8]
 80076ac:	60da      	str	r2, [r3, #12]
 80076ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a4a      	ldr	r2, [pc, #296]	; (80077e0 <HAL_ADC_MspInit+0x148>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	f040 808e 	bne.w	80077d8 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80076bc:	2300      	movs	r3, #0
 80076be:	61bb      	str	r3, [r7, #24]
 80076c0:	4b48      	ldr	r3, [pc, #288]	; (80077e4 <HAL_ADC_MspInit+0x14c>)
 80076c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c4:	4a47      	ldr	r2, [pc, #284]	; (80077e4 <HAL_ADC_MspInit+0x14c>)
 80076c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80076ca:	6453      	str	r3, [r2, #68]	; 0x44
 80076cc:	4b45      	ldr	r3, [pc, #276]	; (80077e4 <HAL_ADC_MspInit+0x14c>)
 80076ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076d4:	61bb      	str	r3, [r7, #24]
 80076d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80076d8:	2300      	movs	r3, #0
 80076da:	617b      	str	r3, [r7, #20]
 80076dc:	4b41      	ldr	r3, [pc, #260]	; (80077e4 <HAL_ADC_MspInit+0x14c>)
 80076de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e0:	4a40      	ldr	r2, [pc, #256]	; (80077e4 <HAL_ADC_MspInit+0x14c>)
 80076e2:	f043 0304 	orr.w	r3, r3, #4
 80076e6:	6313      	str	r3, [r2, #48]	; 0x30
 80076e8:	4b3e      	ldr	r3, [pc, #248]	; (80077e4 <HAL_ADC_MspInit+0x14c>)
 80076ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ec:	f003 0304 	and.w	r3, r3, #4
 80076f0:	617b      	str	r3, [r7, #20]
 80076f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076f4:	2300      	movs	r3, #0
 80076f6:	613b      	str	r3, [r7, #16]
 80076f8:	4b3a      	ldr	r3, [pc, #232]	; (80077e4 <HAL_ADC_MspInit+0x14c>)
 80076fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fc:	4a39      	ldr	r2, [pc, #228]	; (80077e4 <HAL_ADC_MspInit+0x14c>)
 80076fe:	f043 0301 	orr.w	r3, r3, #1
 8007702:	6313      	str	r3, [r2, #48]	; 0x30
 8007704:	4b37      	ldr	r3, [pc, #220]	; (80077e4 <HAL_ADC_MspInit+0x14c>)
 8007706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	613b      	str	r3, [r7, #16]
 800770e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007710:	2300      	movs	r3, #0
 8007712:	60fb      	str	r3, [r7, #12]
 8007714:	4b33      	ldr	r3, [pc, #204]	; (80077e4 <HAL_ADC_MspInit+0x14c>)
 8007716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007718:	4a32      	ldr	r2, [pc, #200]	; (80077e4 <HAL_ADC_MspInit+0x14c>)
 800771a:	f043 0302 	orr.w	r3, r3, #2
 800771e:	6313      	str	r3, [r2, #48]	; 0x30
 8007720:	4b30      	ldr	r3, [pc, #192]	; (80077e4 <HAL_ADC_MspInit+0x14c>)
 8007722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007724:	f003 0302 	and.w	r3, r3, #2
 8007728:	60fb      	str	r3, [r7, #12]
 800772a:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800772c:	230f      	movs	r3, #15
 800772e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007730:	2303      	movs	r3, #3
 8007732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007734:	2300      	movs	r3, #0
 8007736:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007738:	f107 031c 	add.w	r3, r7, #28
 800773c:	4619      	mov	r1, r3
 800773e:	482a      	ldr	r0, [pc, #168]	; (80077e8 <HAL_ADC_MspInit+0x150>)
 8007740:	f005 f8e0 	bl	800c904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8007744:	23ff      	movs	r3, #255	; 0xff
 8007746:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007748:	2303      	movs	r3, #3
 800774a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800774c:	2300      	movs	r3, #0
 800774e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007750:	f107 031c 	add.w	r3, r7, #28
 8007754:	4619      	mov	r1, r3
 8007756:	4825      	ldr	r0, [pc, #148]	; (80077ec <HAL_ADC_MspInit+0x154>)
 8007758:	f005 f8d4 	bl	800c904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800775c:	2303      	movs	r3, #3
 800775e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007760:	2303      	movs	r3, #3
 8007762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007764:	2300      	movs	r3, #0
 8007766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007768:	f107 031c 	add.w	r3, r7, #28
 800776c:	4619      	mov	r1, r3
 800776e:	4820      	ldr	r0, [pc, #128]	; (80077f0 <HAL_ADC_MspInit+0x158>)
 8007770:	f005 f8c8 	bl	800c904 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8007774:	4b1f      	ldr	r3, [pc, #124]	; (80077f4 <HAL_ADC_MspInit+0x15c>)
 8007776:	4a20      	ldr	r2, [pc, #128]	; (80077f8 <HAL_ADC_MspInit+0x160>)
 8007778:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800777a:	4b1e      	ldr	r3, [pc, #120]	; (80077f4 <HAL_ADC_MspInit+0x15c>)
 800777c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007780:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007782:	4b1c      	ldr	r3, [pc, #112]	; (80077f4 <HAL_ADC_MspInit+0x15c>)
 8007784:	2200      	movs	r2, #0
 8007786:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8007788:	4b1a      	ldr	r3, [pc, #104]	; (80077f4 <HAL_ADC_MspInit+0x15c>)
 800778a:	2200      	movs	r2, #0
 800778c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800778e:	4b19      	ldr	r3, [pc, #100]	; (80077f4 <HAL_ADC_MspInit+0x15c>)
 8007790:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007794:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007796:	4b17      	ldr	r3, [pc, #92]	; (80077f4 <HAL_ADC_MspInit+0x15c>)
 8007798:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800779c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800779e:	4b15      	ldr	r3, [pc, #84]	; (80077f4 <HAL_ADC_MspInit+0x15c>)
 80077a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80077a4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80077a6:	4b13      	ldr	r3, [pc, #76]	; (80077f4 <HAL_ADC_MspInit+0x15c>)
 80077a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077ac:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80077ae:	4b11      	ldr	r3, [pc, #68]	; (80077f4 <HAL_ADC_MspInit+0x15c>)
 80077b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80077b4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80077b6:	4b0f      	ldr	r3, [pc, #60]	; (80077f4 <HAL_ADC_MspInit+0x15c>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80077bc:	480d      	ldr	r0, [pc, #52]	; (80077f4 <HAL_ADC_MspInit+0x15c>)
 80077be:	f004 fd05 	bl	800c1cc <HAL_DMA_Init>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80077c8:	f7ff fe1a 	bl	8007400 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a09      	ldr	r2, [pc, #36]	; (80077f4 <HAL_ADC_MspInit+0x15c>)
 80077d0:	639a      	str	r2, [r3, #56]	; 0x38
 80077d2:	4a08      	ldr	r2, [pc, #32]	; (80077f4 <HAL_ADC_MspInit+0x15c>)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80077d8:	bf00      	nop
 80077da:	3730      	adds	r7, #48	; 0x30
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	40012100 	.word	0x40012100
 80077e4:	40023800 	.word	0x40023800
 80077e8:	40020800 	.word	0x40020800
 80077ec:	40020000 	.word	0x40020000
 80077f0:	40020400 	.word	0x40020400
 80077f4:	20049e6c 	.word	0x20049e6c
 80077f8:	40026440 	.word	0x40026440

080077fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b08c      	sub	sp, #48	; 0x30
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007804:	f107 031c 	add.w	r3, r7, #28
 8007808:	2200      	movs	r2, #0
 800780a:	601a      	str	r2, [r3, #0]
 800780c:	605a      	str	r2, [r3, #4]
 800780e:	609a      	str	r2, [r3, #8]
 8007810:	60da      	str	r2, [r3, #12]
 8007812:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a32      	ldr	r2, [pc, #200]	; (80078e4 <HAL_I2C_MspInit+0xe8>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d12c      	bne.n	8007878 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800781e:	2300      	movs	r3, #0
 8007820:	61bb      	str	r3, [r7, #24]
 8007822:	4b31      	ldr	r3, [pc, #196]	; (80078e8 <HAL_I2C_MspInit+0xec>)
 8007824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007826:	4a30      	ldr	r2, [pc, #192]	; (80078e8 <HAL_I2C_MspInit+0xec>)
 8007828:	f043 0302 	orr.w	r3, r3, #2
 800782c:	6313      	str	r3, [r2, #48]	; 0x30
 800782e:	4b2e      	ldr	r3, [pc, #184]	; (80078e8 <HAL_I2C_MspInit+0xec>)
 8007830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007832:	f003 0302 	and.w	r3, r3, #2
 8007836:	61bb      	str	r3, [r7, #24]
 8007838:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800783a:	23c0      	movs	r3, #192	; 0xc0
 800783c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800783e:	2312      	movs	r3, #18
 8007840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007842:	2301      	movs	r3, #1
 8007844:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007846:	2303      	movs	r3, #3
 8007848:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800784a:	2304      	movs	r3, #4
 800784c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800784e:	f107 031c 	add.w	r3, r7, #28
 8007852:	4619      	mov	r1, r3
 8007854:	4825      	ldr	r0, [pc, #148]	; (80078ec <HAL_I2C_MspInit+0xf0>)
 8007856:	f005 f855 	bl	800c904 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800785a:	2300      	movs	r3, #0
 800785c:	617b      	str	r3, [r7, #20]
 800785e:	4b22      	ldr	r3, [pc, #136]	; (80078e8 <HAL_I2C_MspInit+0xec>)
 8007860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007862:	4a21      	ldr	r2, [pc, #132]	; (80078e8 <HAL_I2C_MspInit+0xec>)
 8007864:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007868:	6413      	str	r3, [r2, #64]	; 0x40
 800786a:	4b1f      	ldr	r3, [pc, #124]	; (80078e8 <HAL_I2C_MspInit+0xec>)
 800786c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007872:	617b      	str	r3, [r7, #20]
 8007874:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007876:	e031      	b.n	80078dc <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a1c      	ldr	r2, [pc, #112]	; (80078f0 <HAL_I2C_MspInit+0xf4>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d12c      	bne.n	80078dc <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007882:	2300      	movs	r3, #0
 8007884:	613b      	str	r3, [r7, #16]
 8007886:	4b18      	ldr	r3, [pc, #96]	; (80078e8 <HAL_I2C_MspInit+0xec>)
 8007888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788a:	4a17      	ldr	r2, [pc, #92]	; (80078e8 <HAL_I2C_MspInit+0xec>)
 800788c:	f043 0302 	orr.w	r3, r3, #2
 8007890:	6313      	str	r3, [r2, #48]	; 0x30
 8007892:	4b15      	ldr	r3, [pc, #84]	; (80078e8 <HAL_I2C_MspInit+0xec>)
 8007894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007896:	f003 0302 	and.w	r3, r3, #2
 800789a:	613b      	str	r3, [r7, #16]
 800789c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800789e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80078a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80078a4:	2312      	movs	r3, #18
 80078a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80078a8:	2301      	movs	r3, #1
 80078aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078ac:	2303      	movs	r3, #3
 80078ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80078b0:	2304      	movs	r3, #4
 80078b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078b4:	f107 031c 	add.w	r3, r7, #28
 80078b8:	4619      	mov	r1, r3
 80078ba:	480c      	ldr	r0, [pc, #48]	; (80078ec <HAL_I2C_MspInit+0xf0>)
 80078bc:	f005 f822 	bl	800c904 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80078c0:	2300      	movs	r3, #0
 80078c2:	60fb      	str	r3, [r7, #12]
 80078c4:	4b08      	ldr	r3, [pc, #32]	; (80078e8 <HAL_I2C_MspInit+0xec>)
 80078c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c8:	4a07      	ldr	r2, [pc, #28]	; (80078e8 <HAL_I2C_MspInit+0xec>)
 80078ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80078ce:	6413      	str	r3, [r2, #64]	; 0x40
 80078d0:	4b05      	ldr	r3, [pc, #20]	; (80078e8 <HAL_I2C_MspInit+0xec>)
 80078d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078d8:	60fb      	str	r3, [r7, #12]
 80078da:	68fb      	ldr	r3, [r7, #12]
}
 80078dc:	bf00      	nop
 80078de:	3730      	adds	r7, #48	; 0x30
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	40005400 	.word	0x40005400
 80078e8:	40023800 	.word	0x40023800
 80078ec:	40020400 	.word	0x40020400
 80078f0:	40005800 	.word	0x40005800

080078f4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b08a      	sub	sp, #40	; 0x28
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078fc:	f107 0314 	add.w	r3, r7, #20
 8007900:	2200      	movs	r2, #0
 8007902:	601a      	str	r2, [r3, #0]
 8007904:	605a      	str	r2, [r3, #4]
 8007906:	609a      	str	r2, [r3, #8]
 8007908:	60da      	str	r2, [r3, #12]
 800790a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a69      	ldr	r2, [pc, #420]	; (8007ab8 <HAL_SD_MspInit+0x1c4>)
 8007912:	4293      	cmp	r3, r2
 8007914:	f040 80cb 	bne.w	8007aae <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8007918:	2300      	movs	r3, #0
 800791a:	613b      	str	r3, [r7, #16]
 800791c:	4b67      	ldr	r3, [pc, #412]	; (8007abc <HAL_SD_MspInit+0x1c8>)
 800791e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007920:	4a66      	ldr	r2, [pc, #408]	; (8007abc <HAL_SD_MspInit+0x1c8>)
 8007922:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007926:	6453      	str	r3, [r2, #68]	; 0x44
 8007928:	4b64      	ldr	r3, [pc, #400]	; (8007abc <HAL_SD_MspInit+0x1c8>)
 800792a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800792c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007930:	613b      	str	r3, [r7, #16]
 8007932:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007934:	2300      	movs	r3, #0
 8007936:	60fb      	str	r3, [r7, #12]
 8007938:	4b60      	ldr	r3, [pc, #384]	; (8007abc <HAL_SD_MspInit+0x1c8>)
 800793a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793c:	4a5f      	ldr	r2, [pc, #380]	; (8007abc <HAL_SD_MspInit+0x1c8>)
 800793e:	f043 0304 	orr.w	r3, r3, #4
 8007942:	6313      	str	r3, [r2, #48]	; 0x30
 8007944:	4b5d      	ldr	r3, [pc, #372]	; (8007abc <HAL_SD_MspInit+0x1c8>)
 8007946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007948:	f003 0304 	and.w	r3, r3, #4
 800794c:	60fb      	str	r3, [r7, #12]
 800794e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007950:	2300      	movs	r3, #0
 8007952:	60bb      	str	r3, [r7, #8]
 8007954:	4b59      	ldr	r3, [pc, #356]	; (8007abc <HAL_SD_MspInit+0x1c8>)
 8007956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007958:	4a58      	ldr	r2, [pc, #352]	; (8007abc <HAL_SD_MspInit+0x1c8>)
 800795a:	f043 0308 	orr.w	r3, r3, #8
 800795e:	6313      	str	r3, [r2, #48]	; 0x30
 8007960:	4b56      	ldr	r3, [pc, #344]	; (8007abc <HAL_SD_MspInit+0x1c8>)
 8007962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007964:	f003 0308 	and.w	r3, r3, #8
 8007968:	60bb      	str	r3, [r7, #8]
 800796a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800796c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8007970:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007972:	2302      	movs	r3, #2
 8007974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007976:	2300      	movs	r3, #0
 8007978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800797a:	2303      	movs	r3, #3
 800797c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800797e:	230c      	movs	r3, #12
 8007980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007982:	f107 0314 	add.w	r3, r7, #20
 8007986:	4619      	mov	r1, r3
 8007988:	484d      	ldr	r0, [pc, #308]	; (8007ac0 <HAL_SD_MspInit+0x1cc>)
 800798a:	f004 ffbb 	bl	800c904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800798e:	2304      	movs	r3, #4
 8007990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007992:	2302      	movs	r3, #2
 8007994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007996:	2300      	movs	r3, #0
 8007998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800799a:	2303      	movs	r3, #3
 800799c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800799e:	230c      	movs	r3, #12
 80079a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80079a2:	f107 0314 	add.w	r3, r7, #20
 80079a6:	4619      	mov	r1, r3
 80079a8:	4846      	ldr	r0, [pc, #280]	; (8007ac4 <HAL_SD_MspInit+0x1d0>)
 80079aa:	f004 ffab 	bl	800c904 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80079ae:	4b46      	ldr	r3, [pc, #280]	; (8007ac8 <HAL_SD_MspInit+0x1d4>)
 80079b0:	4a46      	ldr	r2, [pc, #280]	; (8007acc <HAL_SD_MspInit+0x1d8>)
 80079b2:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80079b4:	4b44      	ldr	r3, [pc, #272]	; (8007ac8 <HAL_SD_MspInit+0x1d4>)
 80079b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80079ba:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80079bc:	4b42      	ldr	r3, [pc, #264]	; (8007ac8 <HAL_SD_MspInit+0x1d4>)
 80079be:	2200      	movs	r2, #0
 80079c0:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80079c2:	4b41      	ldr	r3, [pc, #260]	; (8007ac8 <HAL_SD_MspInit+0x1d4>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80079c8:	4b3f      	ldr	r3, [pc, #252]	; (8007ac8 <HAL_SD_MspInit+0x1d4>)
 80079ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80079ce:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80079d0:	4b3d      	ldr	r3, [pc, #244]	; (8007ac8 <HAL_SD_MspInit+0x1d4>)
 80079d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80079d6:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80079d8:	4b3b      	ldr	r3, [pc, #236]	; (8007ac8 <HAL_SD_MspInit+0x1d4>)
 80079da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80079de:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80079e0:	4b39      	ldr	r3, [pc, #228]	; (8007ac8 <HAL_SD_MspInit+0x1d4>)
 80079e2:	2220      	movs	r2, #32
 80079e4:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80079e6:	4b38      	ldr	r3, [pc, #224]	; (8007ac8 <HAL_SD_MspInit+0x1d4>)
 80079e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80079ec:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80079ee:	4b36      	ldr	r3, [pc, #216]	; (8007ac8 <HAL_SD_MspInit+0x1d4>)
 80079f0:	2204      	movs	r2, #4
 80079f2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80079f4:	4b34      	ldr	r3, [pc, #208]	; (8007ac8 <HAL_SD_MspInit+0x1d4>)
 80079f6:	2203      	movs	r2, #3
 80079f8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80079fa:	4b33      	ldr	r3, [pc, #204]	; (8007ac8 <HAL_SD_MspInit+0x1d4>)
 80079fc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007a00:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8007a02:	4b31      	ldr	r3, [pc, #196]	; (8007ac8 <HAL_SD_MspInit+0x1d4>)
 8007a04:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007a08:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8007a0a:	482f      	ldr	r0, [pc, #188]	; (8007ac8 <HAL_SD_MspInit+0x1d4>)
 8007a0c:	f004 fbde 	bl	800c1cc <HAL_DMA_Init>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8007a16:	f7ff fcf3 	bl	8007400 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a2a      	ldr	r2, [pc, #168]	; (8007ac8 <HAL_SD_MspInit+0x1d4>)
 8007a1e:	641a      	str	r2, [r3, #64]	; 0x40
 8007a20:	4a29      	ldr	r2, [pc, #164]	; (8007ac8 <HAL_SD_MspInit+0x1d4>)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8007a26:	4b2a      	ldr	r3, [pc, #168]	; (8007ad0 <HAL_SD_MspInit+0x1dc>)
 8007a28:	4a2a      	ldr	r2, [pc, #168]	; (8007ad4 <HAL_SD_MspInit+0x1e0>)
 8007a2a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8007a2c:	4b28      	ldr	r3, [pc, #160]	; (8007ad0 <HAL_SD_MspInit+0x1dc>)
 8007a2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007a32:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007a34:	4b26      	ldr	r3, [pc, #152]	; (8007ad0 <HAL_SD_MspInit+0x1dc>)
 8007a36:	2240      	movs	r2, #64	; 0x40
 8007a38:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007a3a:	4b25      	ldr	r3, [pc, #148]	; (8007ad0 <HAL_SD_MspInit+0x1dc>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007a40:	4b23      	ldr	r3, [pc, #140]	; (8007ad0 <HAL_SD_MspInit+0x1dc>)
 8007a42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a46:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007a48:	4b21      	ldr	r3, [pc, #132]	; (8007ad0 <HAL_SD_MspInit+0x1dc>)
 8007a4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007a4e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007a50:	4b1f      	ldr	r3, [pc, #124]	; (8007ad0 <HAL_SD_MspInit+0x1dc>)
 8007a52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007a56:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8007a58:	4b1d      	ldr	r3, [pc, #116]	; (8007ad0 <HAL_SD_MspInit+0x1dc>)
 8007a5a:	2220      	movs	r2, #32
 8007a5c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007a5e:	4b1c      	ldr	r3, [pc, #112]	; (8007ad0 <HAL_SD_MspInit+0x1dc>)
 8007a60:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007a64:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007a66:	4b1a      	ldr	r3, [pc, #104]	; (8007ad0 <HAL_SD_MspInit+0x1dc>)
 8007a68:	2204      	movs	r2, #4
 8007a6a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007a6c:	4b18      	ldr	r3, [pc, #96]	; (8007ad0 <HAL_SD_MspInit+0x1dc>)
 8007a6e:	2203      	movs	r2, #3
 8007a70:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8007a72:	4b17      	ldr	r3, [pc, #92]	; (8007ad0 <HAL_SD_MspInit+0x1dc>)
 8007a74:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007a78:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8007a7a:	4b15      	ldr	r3, [pc, #84]	; (8007ad0 <HAL_SD_MspInit+0x1dc>)
 8007a7c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007a80:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8007a82:	4813      	ldr	r0, [pc, #76]	; (8007ad0 <HAL_SD_MspInit+0x1dc>)
 8007a84:	f004 fba2 	bl	800c1cc <HAL_DMA_Init>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d001      	beq.n	8007a92 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8007a8e:	f7ff fcb7 	bl	8007400 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a0e      	ldr	r2, [pc, #56]	; (8007ad0 <HAL_SD_MspInit+0x1dc>)
 8007a96:	63da      	str	r2, [r3, #60]	; 0x3c
 8007a98:	4a0d      	ldr	r2, [pc, #52]	; (8007ad0 <HAL_SD_MspInit+0x1dc>)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	2031      	movs	r0, #49	; 0x31
 8007aa4:	f004 fb5b 	bl	800c15e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8007aa8:	2031      	movs	r0, #49	; 0x31
 8007aaa:	f004 fb74 	bl	800c196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8007aae:	bf00      	nop
 8007ab0:	3728      	adds	r7, #40	; 0x28
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	40012c00 	.word	0x40012c00
 8007abc:	40023800 	.word	0x40023800
 8007ac0:	40020800 	.word	0x40020800
 8007ac4:	40020c00 	.word	0x40020c00
 8007ac8:	20049994 	.word	0x20049994
 8007acc:	40026458 	.word	0x40026458
 8007ad0:	20049cc8 	.word	0x20049cc8
 8007ad4:	400264a0 	.word	0x400264a0

08007ad8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b08a      	sub	sp, #40	; 0x28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ae0:	f107 0314 	add.w	r3, r7, #20
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	601a      	str	r2, [r3, #0]
 8007ae8:	605a      	str	r2, [r3, #4]
 8007aea:	609a      	str	r2, [r3, #8]
 8007aec:	60da      	str	r2, [r3, #12]
 8007aee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a19      	ldr	r2, [pc, #100]	; (8007b5c <HAL_SPI_MspInit+0x84>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d12c      	bne.n	8007b54 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007afa:	2300      	movs	r3, #0
 8007afc:	613b      	str	r3, [r7, #16]
 8007afe:	4b18      	ldr	r3, [pc, #96]	; (8007b60 <HAL_SPI_MspInit+0x88>)
 8007b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b02:	4a17      	ldr	r2, [pc, #92]	; (8007b60 <HAL_SPI_MspInit+0x88>)
 8007b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b08:	6413      	str	r3, [r2, #64]	; 0x40
 8007b0a:	4b15      	ldr	r3, [pc, #84]	; (8007b60 <HAL_SPI_MspInit+0x88>)
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b12:	613b      	str	r3, [r7, #16]
 8007b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b16:	2300      	movs	r3, #0
 8007b18:	60fb      	str	r3, [r7, #12]
 8007b1a:	4b11      	ldr	r3, [pc, #68]	; (8007b60 <HAL_SPI_MspInit+0x88>)
 8007b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1e:	4a10      	ldr	r2, [pc, #64]	; (8007b60 <HAL_SPI_MspInit+0x88>)
 8007b20:	f043 0302 	orr.w	r3, r3, #2
 8007b24:	6313      	str	r3, [r2, #48]	; 0x30
 8007b26:	4b0e      	ldr	r3, [pc, #56]	; (8007b60 <HAL_SPI_MspInit+0x88>)
 8007b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2a:	f003 0302 	and.w	r3, r3, #2
 8007b2e:	60fb      	str	r3, [r7, #12]
 8007b30:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007b32:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b38:	2302      	movs	r3, #2
 8007b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b40:	2303      	movs	r3, #3
 8007b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007b44:	2305      	movs	r3, #5
 8007b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b48:	f107 0314 	add.w	r3, r7, #20
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	4805      	ldr	r0, [pc, #20]	; (8007b64 <HAL_SPI_MspInit+0x8c>)
 8007b50:	f004 fed8 	bl	800c904 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007b54:	bf00      	nop
 8007b56:	3728      	adds	r7, #40	; 0x28
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	40003800 	.word	0x40003800
 8007b60:	40023800 	.word	0x40023800
 8007b64:	40020400 	.word	0x40020400

08007b68 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08c      	sub	sp, #48	; 0x30
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b70:	f107 031c 	add.w	r3, r7, #28
 8007b74:	2200      	movs	r2, #0
 8007b76:	601a      	str	r2, [r3, #0]
 8007b78:	605a      	str	r2, [r3, #4]
 8007b7a:	609a      	str	r2, [r3, #8]
 8007b7c:	60da      	str	r2, [r3, #12]
 8007b7e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a2d      	ldr	r2, [pc, #180]	; (8007c3c <HAL_TIM_PWM_MspInit+0xd4>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d12d      	bne.n	8007be6 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	61bb      	str	r3, [r7, #24]
 8007b8e:	4b2c      	ldr	r3, [pc, #176]	; (8007c40 <HAL_TIM_PWM_MspInit+0xd8>)
 8007b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b92:	4a2b      	ldr	r2, [pc, #172]	; (8007c40 <HAL_TIM_PWM_MspInit+0xd8>)
 8007b94:	f043 0301 	orr.w	r3, r3, #1
 8007b98:	6453      	str	r3, [r2, #68]	; 0x44
 8007b9a:	4b29      	ldr	r3, [pc, #164]	; (8007c40 <HAL_TIM_PWM_MspInit+0xd8>)
 8007b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	61bb      	str	r3, [r7, #24]
 8007ba4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	617b      	str	r3, [r7, #20]
 8007baa:	4b25      	ldr	r3, [pc, #148]	; (8007c40 <HAL_TIM_PWM_MspInit+0xd8>)
 8007bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bae:	4a24      	ldr	r2, [pc, #144]	; (8007c40 <HAL_TIM_PWM_MspInit+0xd8>)
 8007bb0:	f043 0310 	orr.w	r3, r3, #16
 8007bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8007bb6:	4b22      	ldr	r3, [pc, #136]	; (8007c40 <HAL_TIM_PWM_MspInit+0xd8>)
 8007bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bba:	f003 0310 	and.w	r3, r3, #16
 8007bbe:	617b      	str	r3, [r7, #20]
 8007bc0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8007bc2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bc8:	2302      	movs	r3, #2
 8007bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007bd8:	f107 031c 	add.w	r3, r7, #28
 8007bdc:	4619      	mov	r1, r3
 8007bde:	4819      	ldr	r0, [pc, #100]	; (8007c44 <HAL_TIM_PWM_MspInit+0xdc>)
 8007be0:	f004 fe90 	bl	800c904 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007be4:	e026      	b.n	8007c34 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a17      	ldr	r2, [pc, #92]	; (8007c48 <HAL_TIM_PWM_MspInit+0xe0>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d10e      	bne.n	8007c0e <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	613b      	str	r3, [r7, #16]
 8007bf4:	4b12      	ldr	r3, [pc, #72]	; (8007c40 <HAL_TIM_PWM_MspInit+0xd8>)
 8007bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf8:	4a11      	ldr	r2, [pc, #68]	; (8007c40 <HAL_TIM_PWM_MspInit+0xd8>)
 8007bfa:	f043 0302 	orr.w	r3, r3, #2
 8007bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8007c00:	4b0f      	ldr	r3, [pc, #60]	; (8007c40 <HAL_TIM_PWM_MspInit+0xd8>)
 8007c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c04:	f003 0302 	and.w	r3, r3, #2
 8007c08:	613b      	str	r3, [r7, #16]
 8007c0a:	693b      	ldr	r3, [r7, #16]
}
 8007c0c:	e012      	b.n	8007c34 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a0e      	ldr	r2, [pc, #56]	; (8007c4c <HAL_TIM_PWM_MspInit+0xe4>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d10d      	bne.n	8007c34 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007c18:	2300      	movs	r3, #0
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	4b08      	ldr	r3, [pc, #32]	; (8007c40 <HAL_TIM_PWM_MspInit+0xd8>)
 8007c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c20:	4a07      	ldr	r2, [pc, #28]	; (8007c40 <HAL_TIM_PWM_MspInit+0xd8>)
 8007c22:	f043 0304 	orr.w	r3, r3, #4
 8007c26:	6413      	str	r3, [r2, #64]	; 0x40
 8007c28:	4b05      	ldr	r3, [pc, #20]	; (8007c40 <HAL_TIM_PWM_MspInit+0xd8>)
 8007c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2c:	f003 0304 	and.w	r3, r3, #4
 8007c30:	60fb      	str	r3, [r7, #12]
 8007c32:	68fb      	ldr	r3, [r7, #12]
}
 8007c34:	bf00      	nop
 8007c36:	3730      	adds	r7, #48	; 0x30
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	40010000 	.word	0x40010000
 8007c40:	40023800 	.word	0x40023800
 8007c44:	40021000 	.word	0x40021000
 8007c48:	40000400 	.word	0x40000400
 8007c4c:	40000800 	.word	0x40000800

08007c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b088      	sub	sp, #32
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a3e      	ldr	r2, [pc, #248]	; (8007d58 <HAL_TIM_Base_MspInit+0x108>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d116      	bne.n	8007c90 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007c62:	2300      	movs	r3, #0
 8007c64:	61fb      	str	r3, [r7, #28]
 8007c66:	4b3d      	ldr	r3, [pc, #244]	; (8007d5c <HAL_TIM_Base_MspInit+0x10c>)
 8007c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6a:	4a3c      	ldr	r2, [pc, #240]	; (8007d5c <HAL_TIM_Base_MspInit+0x10c>)
 8007c6c:	f043 0310 	orr.w	r3, r3, #16
 8007c70:	6413      	str	r3, [r2, #64]	; 0x40
 8007c72:	4b3a      	ldr	r3, [pc, #232]	; (8007d5c <HAL_TIM_Base_MspInit+0x10c>)
 8007c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c76:	f003 0310 	and.w	r3, r3, #16
 8007c7a:	61fb      	str	r3, [r7, #28]
 8007c7c:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8007c7e:	2200      	movs	r2, #0
 8007c80:	2101      	movs	r1, #1
 8007c82:	2036      	movs	r0, #54	; 0x36
 8007c84:	f004 fa6b 	bl	800c15e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007c88:	2036      	movs	r0, #54	; 0x36
 8007c8a:	f004 fa84 	bl	800c196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8007c8e:	e05e      	b.n	8007d4e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a32      	ldr	r2, [pc, #200]	; (8007d60 <HAL_TIM_Base_MspInit+0x110>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d116      	bne.n	8007cc8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	61bb      	str	r3, [r7, #24]
 8007c9e:	4b2f      	ldr	r3, [pc, #188]	; (8007d5c <HAL_TIM_Base_MspInit+0x10c>)
 8007ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca2:	4a2e      	ldr	r2, [pc, #184]	; (8007d5c <HAL_TIM_Base_MspInit+0x10c>)
 8007ca4:	f043 0320 	orr.w	r3, r3, #32
 8007ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8007caa:	4b2c      	ldr	r3, [pc, #176]	; (8007d5c <HAL_TIM_Base_MspInit+0x10c>)
 8007cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cae:	f003 0320 	and.w	r3, r3, #32
 8007cb2:	61bb      	str	r3, [r7, #24]
 8007cb4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	2100      	movs	r1, #0
 8007cba:	2037      	movs	r0, #55	; 0x37
 8007cbc:	f004 fa4f 	bl	800c15e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007cc0:	2037      	movs	r0, #55	; 0x37
 8007cc2:	f004 fa68 	bl	800c196 <HAL_NVIC_EnableIRQ>
}
 8007cc6:	e042      	b.n	8007d4e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a25      	ldr	r2, [pc, #148]	; (8007d64 <HAL_TIM_Base_MspInit+0x114>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d10e      	bne.n	8007cf0 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	617b      	str	r3, [r7, #20]
 8007cd6:	4b21      	ldr	r3, [pc, #132]	; (8007d5c <HAL_TIM_Base_MspInit+0x10c>)
 8007cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cda:	4a20      	ldr	r2, [pc, #128]	; (8007d5c <HAL_TIM_Base_MspInit+0x10c>)
 8007cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8007ce2:	4b1e      	ldr	r3, [pc, #120]	; (8007d5c <HAL_TIM_Base_MspInit+0x10c>)
 8007ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cea:	617b      	str	r3, [r7, #20]
 8007cec:	697b      	ldr	r3, [r7, #20]
}
 8007cee:	e02e      	b.n	8007d4e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a1c      	ldr	r2, [pc, #112]	; (8007d68 <HAL_TIM_Base_MspInit+0x118>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d10e      	bne.n	8007d18 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	613b      	str	r3, [r7, #16]
 8007cfe:	4b17      	ldr	r3, [pc, #92]	; (8007d5c <HAL_TIM_Base_MspInit+0x10c>)
 8007d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d02:	4a16      	ldr	r2, [pc, #88]	; (8007d5c <HAL_TIM_Base_MspInit+0x10c>)
 8007d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d08:	6453      	str	r3, [r2, #68]	; 0x44
 8007d0a:	4b14      	ldr	r3, [pc, #80]	; (8007d5c <HAL_TIM_Base_MspInit+0x10c>)
 8007d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d12:	613b      	str	r3, [r7, #16]
 8007d14:	693b      	ldr	r3, [r7, #16]
}
 8007d16:	e01a      	b.n	8007d4e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a13      	ldr	r2, [pc, #76]	; (8007d6c <HAL_TIM_Base_MspInit+0x11c>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d115      	bne.n	8007d4e <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007d22:	2300      	movs	r3, #0
 8007d24:	60fb      	str	r3, [r7, #12]
 8007d26:	4b0d      	ldr	r3, [pc, #52]	; (8007d5c <HAL_TIM_Base_MspInit+0x10c>)
 8007d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2a:	4a0c      	ldr	r2, [pc, #48]	; (8007d5c <HAL_TIM_Base_MspInit+0x10c>)
 8007d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d30:	6413      	str	r3, [r2, #64]	; 0x40
 8007d32:	4b0a      	ldr	r3, [pc, #40]	; (8007d5c <HAL_TIM_Base_MspInit+0x10c>)
 8007d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d3a:	60fb      	str	r3, [r7, #12]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007d3e:	2200      	movs	r2, #0
 8007d40:	2100      	movs	r1, #0
 8007d42:	202c      	movs	r0, #44	; 0x2c
 8007d44:	f004 fa0b 	bl	800c15e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007d48:	202c      	movs	r0, #44	; 0x2c
 8007d4a:	f004 fa24 	bl	800c196 <HAL_NVIC_EnableIRQ>
}
 8007d4e:	bf00      	nop
 8007d50:	3720      	adds	r7, #32
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	40001000 	.word	0x40001000
 8007d5c:	40023800 	.word	0x40023800
 8007d60:	40001400 	.word	0x40001400
 8007d64:	40014400 	.word	0x40014400
 8007d68:	40014800 	.word	0x40014800
 8007d6c:	40001c00 	.word	0x40001c00

08007d70 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b08a      	sub	sp, #40	; 0x28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d78:	f107 0314 	add.w	r3, r7, #20
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	601a      	str	r2, [r3, #0]
 8007d80:	605a      	str	r2, [r3, #4]
 8007d82:	609a      	str	r2, [r3, #8]
 8007d84:	60da      	str	r2, [r3, #12]
 8007d86:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a1d      	ldr	r2, [pc, #116]	; (8007e04 <HAL_TIM_Encoder_MspInit+0x94>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d133      	bne.n	8007dfa <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007d92:	2300      	movs	r3, #0
 8007d94:	613b      	str	r3, [r7, #16]
 8007d96:	4b1c      	ldr	r3, [pc, #112]	; (8007e08 <HAL_TIM_Encoder_MspInit+0x98>)
 8007d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d9a:	4a1b      	ldr	r2, [pc, #108]	; (8007e08 <HAL_TIM_Encoder_MspInit+0x98>)
 8007d9c:	f043 0302 	orr.w	r3, r3, #2
 8007da0:	6453      	str	r3, [r2, #68]	; 0x44
 8007da2:	4b19      	ldr	r3, [pc, #100]	; (8007e08 <HAL_TIM_Encoder_MspInit+0x98>)
 8007da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da6:	f003 0302 	and.w	r3, r3, #2
 8007daa:	613b      	str	r3, [r7, #16]
 8007dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007dae:	2300      	movs	r3, #0
 8007db0:	60fb      	str	r3, [r7, #12]
 8007db2:	4b15      	ldr	r3, [pc, #84]	; (8007e08 <HAL_TIM_Encoder_MspInit+0x98>)
 8007db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db6:	4a14      	ldr	r2, [pc, #80]	; (8007e08 <HAL_TIM_Encoder_MspInit+0x98>)
 8007db8:	f043 0304 	orr.w	r3, r3, #4
 8007dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8007dbe:	4b12      	ldr	r3, [pc, #72]	; (8007e08 <HAL_TIM_Encoder_MspInit+0x98>)
 8007dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc2:	f003 0304 	and.w	r3, r3, #4
 8007dc6:	60fb      	str	r3, [r7, #12]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007dca:	23c0      	movs	r3, #192	; 0xc0
 8007dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dce:	2302      	movs	r3, #2
 8007dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007dde:	f107 0314 	add.w	r3, r7, #20
 8007de2:	4619      	mov	r1, r3
 8007de4:	4809      	ldr	r0, [pc, #36]	; (8007e0c <HAL_TIM_Encoder_MspInit+0x9c>)
 8007de6:	f004 fd8d 	bl	800c904 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007dea:	2200      	movs	r2, #0
 8007dec:	2100      	movs	r1, #0
 8007dee:	202c      	movs	r0, #44	; 0x2c
 8007df0:	f004 f9b5 	bl	800c15e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007df4:	202c      	movs	r0, #44	; 0x2c
 8007df6:	f004 f9ce 	bl	800c196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007dfa:	bf00      	nop
 8007dfc:	3728      	adds	r7, #40	; 0x28
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	40010400 	.word	0x40010400
 8007e08:	40023800 	.word	0x40023800
 8007e0c:	40020800 	.word	0x40020800

08007e10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b08c      	sub	sp, #48	; 0x30
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e18:	f107 031c 	add.w	r3, r7, #28
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	601a      	str	r2, [r3, #0]
 8007e20:	605a      	str	r2, [r3, #4]
 8007e22:	609a      	str	r2, [r3, #8]
 8007e24:	60da      	str	r2, [r3, #12]
 8007e26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a5c      	ldr	r2, [pc, #368]	; (8007fa0 <HAL_TIM_MspPostInit+0x190>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d11f      	bne.n	8007e72 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007e32:	2300      	movs	r3, #0
 8007e34:	61bb      	str	r3, [r7, #24]
 8007e36:	4b5b      	ldr	r3, [pc, #364]	; (8007fa4 <HAL_TIM_MspPostInit+0x194>)
 8007e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3a:	4a5a      	ldr	r2, [pc, #360]	; (8007fa4 <HAL_TIM_MspPostInit+0x194>)
 8007e3c:	f043 0310 	orr.w	r3, r3, #16
 8007e40:	6313      	str	r3, [r2, #48]	; 0x30
 8007e42:	4b58      	ldr	r3, [pc, #352]	; (8007fa4 <HAL_TIM_MspPostInit+0x194>)
 8007e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e46:	f003 0310 	and.w	r3, r3, #16
 8007e4a:	61bb      	str	r3, [r7, #24]
 8007e4c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007e4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e54:	2302      	movs	r3, #2
 8007e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007e60:	2301      	movs	r3, #1
 8007e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007e64:	f107 031c 	add.w	r3, r7, #28
 8007e68:	4619      	mov	r1, r3
 8007e6a:	484f      	ldr	r0, [pc, #316]	; (8007fa8 <HAL_TIM_MspPostInit+0x198>)
 8007e6c:	f004 fd4a 	bl	800c904 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8007e70:	e091      	b.n	8007f96 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a4d      	ldr	r2, [pc, #308]	; (8007fac <HAL_TIM_MspPostInit+0x19c>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d11e      	bne.n	8007eba <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	617b      	str	r3, [r7, #20]
 8007e80:	4b48      	ldr	r3, [pc, #288]	; (8007fa4 <HAL_TIM_MspPostInit+0x194>)
 8007e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e84:	4a47      	ldr	r2, [pc, #284]	; (8007fa4 <HAL_TIM_MspPostInit+0x194>)
 8007e86:	f043 0302 	orr.w	r3, r3, #2
 8007e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8007e8c:	4b45      	ldr	r3, [pc, #276]	; (8007fa4 <HAL_TIM_MspPostInit+0x194>)
 8007e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e90:	f003 0302 	and.w	r3, r3, #2
 8007e94:	617b      	str	r3, [r7, #20]
 8007e96:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007e98:	2330      	movs	r3, #48	; 0x30
 8007e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007eac:	f107 031c 	add.w	r3, r7, #28
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	483f      	ldr	r0, [pc, #252]	; (8007fb0 <HAL_TIM_MspPostInit+0x1a0>)
 8007eb4:	f004 fd26 	bl	800c904 <HAL_GPIO_Init>
}
 8007eb8:	e06d      	b.n	8007f96 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a3d      	ldr	r2, [pc, #244]	; (8007fb4 <HAL_TIM_MspPostInit+0x1a4>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d11f      	bne.n	8007f04 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	613b      	str	r3, [r7, #16]
 8007ec8:	4b36      	ldr	r3, [pc, #216]	; (8007fa4 <HAL_TIM_MspPostInit+0x194>)
 8007eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ecc:	4a35      	ldr	r2, [pc, #212]	; (8007fa4 <HAL_TIM_MspPostInit+0x194>)
 8007ece:	f043 0308 	orr.w	r3, r3, #8
 8007ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8007ed4:	4b33      	ldr	r3, [pc, #204]	; (8007fa4 <HAL_TIM_MspPostInit+0x194>)
 8007ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed8:	f003 0308 	and.w	r3, r3, #8
 8007edc:	613b      	str	r3, [r7, #16]
 8007ede:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007ee0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ee6:	2302      	movs	r3, #2
 8007ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eea:	2300      	movs	r3, #0
 8007eec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007ef2:	2302      	movs	r3, #2
 8007ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007ef6:	f107 031c 	add.w	r3, r7, #28
 8007efa:	4619      	mov	r1, r3
 8007efc:	482e      	ldr	r0, [pc, #184]	; (8007fb8 <HAL_TIM_MspPostInit+0x1a8>)
 8007efe:	f004 fd01 	bl	800c904 <HAL_GPIO_Init>
}
 8007f02:	e048      	b.n	8007f96 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a2c      	ldr	r2, [pc, #176]	; (8007fbc <HAL_TIM_MspPostInit+0x1ac>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d11f      	bne.n	8007f4e <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f0e:	2300      	movs	r3, #0
 8007f10:	60fb      	str	r3, [r7, #12]
 8007f12:	4b24      	ldr	r3, [pc, #144]	; (8007fa4 <HAL_TIM_MspPostInit+0x194>)
 8007f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f16:	4a23      	ldr	r2, [pc, #140]	; (8007fa4 <HAL_TIM_MspPostInit+0x194>)
 8007f18:	f043 0302 	orr.w	r3, r3, #2
 8007f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8007f1e:	4b21      	ldr	r3, [pc, #132]	; (8007fa4 <HAL_TIM_MspPostInit+0x194>)
 8007f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f22:	f003 0302 	and.w	r3, r3, #2
 8007f26:	60fb      	str	r3, [r7, #12]
 8007f28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007f2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f30:	2302      	movs	r3, #2
 8007f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f34:	2300      	movs	r3, #0
 8007f36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f40:	f107 031c 	add.w	r3, r7, #28
 8007f44:	4619      	mov	r1, r3
 8007f46:	481a      	ldr	r0, [pc, #104]	; (8007fb0 <HAL_TIM_MspPostInit+0x1a0>)
 8007f48:	f004 fcdc 	bl	800c904 <HAL_GPIO_Init>
}
 8007f4c:	e023      	b.n	8007f96 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a1b      	ldr	r2, [pc, #108]	; (8007fc0 <HAL_TIM_MspPostInit+0x1b0>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d11e      	bne.n	8007f96 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f58:	2300      	movs	r3, #0
 8007f5a:	60bb      	str	r3, [r7, #8]
 8007f5c:	4b11      	ldr	r3, [pc, #68]	; (8007fa4 <HAL_TIM_MspPostInit+0x194>)
 8007f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f60:	4a10      	ldr	r2, [pc, #64]	; (8007fa4 <HAL_TIM_MspPostInit+0x194>)
 8007f62:	f043 0302 	orr.w	r3, r3, #2
 8007f66:	6313      	str	r3, [r2, #48]	; 0x30
 8007f68:	4b0e      	ldr	r3, [pc, #56]	; (8007fa4 <HAL_TIM_MspPostInit+0x194>)
 8007f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6c:	f003 0302 	and.w	r3, r3, #2
 8007f70:	60bb      	str	r3, [r7, #8]
 8007f72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007f74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f7a:	2302      	movs	r3, #2
 8007f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f82:	2300      	movs	r3, #0
 8007f84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8007f86:	2303      	movs	r3, #3
 8007f88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f8a:	f107 031c 	add.w	r3, r7, #28
 8007f8e:	4619      	mov	r1, r3
 8007f90:	4807      	ldr	r0, [pc, #28]	; (8007fb0 <HAL_TIM_MspPostInit+0x1a0>)
 8007f92:	f004 fcb7 	bl	800c904 <HAL_GPIO_Init>
}
 8007f96:	bf00      	nop
 8007f98:	3730      	adds	r7, #48	; 0x30
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	40010000 	.word	0x40010000
 8007fa4:	40023800 	.word	0x40023800
 8007fa8:	40021000 	.word	0x40021000
 8007fac:	40000400 	.word	0x40000400
 8007fb0:	40020400 	.word	0x40020400
 8007fb4:	40000800 	.word	0x40000800
 8007fb8:	40020c00 	.word	0x40020c00
 8007fbc:	40014400 	.word	0x40014400
 8007fc0:	40014800 	.word	0x40014800

08007fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b08a      	sub	sp, #40	; 0x28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fcc:	f107 0314 	add.w	r3, r7, #20
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	605a      	str	r2, [r3, #4]
 8007fd6:	609a      	str	r2, [r3, #8]
 8007fd8:	60da      	str	r2, [r3, #12]
 8007fda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a19      	ldr	r2, [pc, #100]	; (8008048 <HAL_UART_MspInit+0x84>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d12b      	bne.n	800803e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	613b      	str	r3, [r7, #16]
 8007fea:	4b18      	ldr	r3, [pc, #96]	; (800804c <HAL_UART_MspInit+0x88>)
 8007fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fee:	4a17      	ldr	r2, [pc, #92]	; (800804c <HAL_UART_MspInit+0x88>)
 8007ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ff6:	4b15      	ldr	r3, [pc, #84]	; (800804c <HAL_UART_MspInit+0x88>)
 8007ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ffe:	613b      	str	r3, [r7, #16]
 8008000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008002:	2300      	movs	r3, #0
 8008004:	60fb      	str	r3, [r7, #12]
 8008006:	4b11      	ldr	r3, [pc, #68]	; (800804c <HAL_UART_MspInit+0x88>)
 8008008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800a:	4a10      	ldr	r2, [pc, #64]	; (800804c <HAL_UART_MspInit+0x88>)
 800800c:	f043 0308 	orr.w	r3, r3, #8
 8008010:	6313      	str	r3, [r2, #48]	; 0x30
 8008012:	4b0e      	ldr	r3, [pc, #56]	; (800804c <HAL_UART_MspInit+0x88>)
 8008014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008016:	f003 0308 	and.w	r3, r3, #8
 800801a:	60fb      	str	r3, [r7, #12]
 800801c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800801e:	2360      	movs	r3, #96	; 0x60
 8008020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008022:	2302      	movs	r3, #2
 8008024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008026:	2300      	movs	r3, #0
 8008028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800802a:	2303      	movs	r3, #3
 800802c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800802e:	2307      	movs	r3, #7
 8008030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008032:	f107 0314 	add.w	r3, r7, #20
 8008036:	4619      	mov	r1, r3
 8008038:	4805      	ldr	r0, [pc, #20]	; (8008050 <HAL_UART_MspInit+0x8c>)
 800803a:	f004 fc63 	bl	800c904 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800803e:	bf00      	nop
 8008040:	3728      	adds	r7, #40	; 0x28
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	40004400 	.word	0x40004400
 800804c:	40023800 	.word	0x40023800
 8008050:	40020c00 	.word	0x40020c00

08008054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008054:	b480      	push	{r7}
 8008056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008058:	e7fe      	b.n	8008058 <NMI_Handler+0x4>

0800805a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800805a:	b480      	push	{r7}
 800805c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800805e:	e7fe      	b.n	800805e <HardFault_Handler+0x4>

08008060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008060:	b480      	push	{r7}
 8008062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008064:	e7fe      	b.n	8008064 <MemManage_Handler+0x4>

08008066 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008066:	b480      	push	{r7}
 8008068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800806a:	e7fe      	b.n	800806a <BusFault_Handler+0x4>

0800806c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800806c:	b480      	push	{r7}
 800806e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008070:	e7fe      	b.n	8008070 <UsageFault_Handler+0x4>

08008072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008072:	b480      	push	{r7}
 8008074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008076:	bf00      	nop
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008080:	b480      	push	{r7}
 8008082:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008084:	bf00      	nop
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr

0800808e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800808e:	b480      	push	{r7}
 8008090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008092:	bf00      	nop
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80080a0:	f003 fb3c 	bl	800b71c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80080a4:	bf00      	nop
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80080ac:	2004      	movs	r0, #4
 80080ae:	f004 fe05 	bl	800ccbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80080b2:	bf00      	nop
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80080ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80080be:	f004 fdfd 	bl	800ccbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80080c2:	bf00      	nop
 80080c4:	bd80      	pop	{r7, pc}
	...

080080c8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80080cc:	4803      	ldr	r0, [pc, #12]	; (80080dc <TIM8_UP_TIM13_IRQHandler+0x14>)
 80080ce:	f008 fe14 	bl	8010cfa <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80080d2:	4803      	ldr	r0, [pc, #12]	; (80080e0 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80080d4:	f008 fe11 	bl	8010cfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80080d8:	bf00      	nop
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	20049a4c 	.word	0x20049a4c
 80080e0:	20049c48 	.word	0x20049c48

080080e4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80080e8:	4802      	ldr	r0, [pc, #8]	; (80080f4 <SDIO_IRQHandler+0x10>)
 80080ea:	f006 fead 	bl	800ee48 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80080ee:	bf00      	nop
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	20049da8 	.word	0x20049da8

080080f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80080fc:	4802      	ldr	r0, [pc, #8]	; (8008108 <TIM6_DAC_IRQHandler+0x10>)
 80080fe:	f008 fdfc 	bl	8010cfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8008102:	bf00      	nop
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	20049d28 	.word	0x20049d28

0800810c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8008110:	4802      	ldr	r0, [pc, #8]	; (800811c <TIM7_IRQHandler+0x10>)
 8008112:	f008 fdf2 	bl	8010cfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8008116:	bf00      	nop
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	20049ecc 	.word	0x20049ecc

08008120 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8008124:	4802      	ldr	r0, [pc, #8]	; (8008130 <DMA2_Stream2_IRQHandler+0x10>)
 8008126:	f004 f979 	bl	800c41c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800812a:	bf00      	nop
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	20049e6c 	.word	0x20049e6c

08008134 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8008138:	4802      	ldr	r0, [pc, #8]	; (8008144 <DMA2_Stream3_IRQHandler+0x10>)
 800813a:	f004 f96f 	bl	800c41c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800813e:	bf00      	nop
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	20049994 	.word	0x20049994

08008148 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800814c:	4802      	ldr	r0, [pc, #8]	; (8008158 <DMA2_Stream6_IRQHandler+0x10>)
 800814e:	f004 f965 	bl	800c41c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8008152:	bf00      	nop
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	20049cc8 	.word	0x20049cc8

0800815c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800815c:	b480      	push	{r7}
 800815e:	af00      	add	r7, sp, #0
	return 1;
 8008160:	2301      	movs	r3, #1
}
 8008162:	4618      	mov	r0, r3
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <_kill>:

int _kill(int pid, int sig)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008176:	f00e f821 	bl	80161bc <__errno>
 800817a:	4602      	mov	r2, r0
 800817c:	2316      	movs	r3, #22
 800817e:	6013      	str	r3, [r2, #0]
	return -1;
 8008180:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008184:	4618      	mov	r0, r3
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <_exit>:

void _exit (int status)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008194:	f04f 31ff 	mov.w	r1, #4294967295
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7ff ffe7 	bl	800816c <_kill>
	while (1) {}		/* Make sure we hang here */
 800819e:	e7fe      	b.n	800819e <_exit+0x12>

080081a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80081a8:	4a14      	ldr	r2, [pc, #80]	; (80081fc <_sbrk+0x5c>)
 80081aa:	4b15      	ldr	r3, [pc, #84]	; (8008200 <_sbrk+0x60>)
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80081b4:	4b13      	ldr	r3, [pc, #76]	; (8008204 <_sbrk+0x64>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d102      	bne.n	80081c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80081bc:	4b11      	ldr	r3, [pc, #68]	; (8008204 <_sbrk+0x64>)
 80081be:	4a12      	ldr	r2, [pc, #72]	; (8008208 <_sbrk+0x68>)
 80081c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80081c2:	4b10      	ldr	r3, [pc, #64]	; (8008204 <_sbrk+0x64>)
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4413      	add	r3, r2
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d207      	bcs.n	80081e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80081d0:	f00d fff4 	bl	80161bc <__errno>
 80081d4:	4602      	mov	r2, r0
 80081d6:	230c      	movs	r3, #12
 80081d8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80081da:	f04f 33ff 	mov.w	r3, #4294967295
 80081de:	e009      	b.n	80081f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80081e0:	4b08      	ldr	r3, [pc, #32]	; (8008204 <_sbrk+0x64>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80081e6:	4b07      	ldr	r3, [pc, #28]	; (8008204 <_sbrk+0x64>)
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4413      	add	r3, r2
 80081ee:	4a05      	ldr	r2, [pc, #20]	; (8008204 <_sbrk+0x64>)
 80081f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80081f2:	68fb      	ldr	r3, [r7, #12]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3718      	adds	r7, #24
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	20050000 	.word	0x20050000
 8008200:	00000800 	.word	0x00000800
 8008204:	20000240 	.word	0x20000240
 8008208:	2004c020 	.word	0x2004c020

0800820c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800820c:	b480      	push	{r7}
 800820e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008210:	4b08      	ldr	r3, [pc, #32]	; (8008234 <SystemInit+0x28>)
 8008212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008216:	4a07      	ldr	r2, [pc, #28]	; (8008234 <SystemInit+0x28>)
 8008218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800821c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008220:	4b04      	ldr	r3, [pc, #16]	; (8008234 <SystemInit+0x28>)
 8008222:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008226:	609a      	str	r2, [r3, #8]
#endif
}
 8008228:	bf00      	nop
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	e000ed00 	.word	0xe000ed00

08008238 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8008238:	b598      	push	{r3, r4, r7, lr}
 800823a:	af00      	add	r7, sp, #0
	lcd_init();
 800823c:	f7f8 feec 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8008240:	4848      	ldr	r0, [pc, #288]	; (8008364 <cppInit+0x12c>)
 8008242:	f7fd fbd5 	bl	80059f0 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8008246:	2064      	movs	r0, #100	; 0x64
 8008248:	f003 fa88 	bl	800b75c <HAL_Delay>
	power_sensor.updateValues();
 800824c:	4845      	ldr	r0, [pc, #276]	; (8008364 <cppInit+0x12c>)
 800824e:	f7fd fbdf 	bl	8005a10 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8008252:	f7f8 ff25 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8008256:	2100      	movs	r1, #0
 8008258:	2000      	movs	r0, #0
 800825a:	f7f8 ff31 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 800825e:	4842      	ldr	r0, [pc, #264]	; (8008368 <cppInit+0x130>)
 8008260:	f7f8 ff58 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8008264:	2101      	movs	r1, #1
 8008266:	2000      	movs	r0, #0
 8008268:	f7f8 ff2a 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 800826c:	483d      	ldr	r0, [pc, #244]	; (8008364 <cppInit+0x12c>)
 800826e:	f7fd fbf9 	bl	8005a64 <_ZN11PowerSensor17getButteryVoltageEv>
 8008272:	ee10 3a10 	vmov	r3, s0
 8008276:	4618      	mov	r0, r3
 8008278:	f7f8 f97e 	bl	8000578 <__aeabi_f2d>
 800827c:	4603      	mov	r3, r0
 800827e:	460c      	mov	r4, r1
 8008280:	461a      	mov	r2, r3
 8008282:	4623      	mov	r3, r4
 8008284:	4839      	ldr	r0, [pc, #228]	; (800836c <cppInit+0x134>)
 8008286:	f7f8 ff45 	bl	8001114 <lcd_printf>
	HAL_Delay(800);
 800828a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800828e:	f003 fa65 	bl	800b75c <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//

	if(sd_card.init() == true){
 8008292:	4837      	ldr	r0, [pc, #220]	; (8008370 <cppInit+0x138>)
 8008294:	f7ff f903 	bl	800749e <_ZN6sdCard4initEv>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d014      	beq.n	80082c8 <cppInit+0x90>
	  lcd_clear();
 800829e:	f7f8 feff 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80082a2:	2100      	movs	r1, #0
 80082a4:	2000      	movs	r0, #0
 80082a6:	f7f8 ff0b 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80082aa:	4832      	ldr	r0, [pc, #200]	; (8008374 <cppInit+0x13c>)
 80082ac:	f7f8 ff32 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80082b0:	2101      	movs	r1, #1
 80082b2:	2000      	movs	r0, #0
 80082b4:	f7f8 ff04 	bl	80010c0 <lcd_locate>
	  lcd_printf("Success");
 80082b8:	482f      	ldr	r0, [pc, #188]	; (8008378 <cppInit+0x140>)
 80082ba:	f7f8 ff2b 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 80082be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80082c2:	f003 fa4b 	bl	800b75c <HAL_Delay>
 80082c6:	e013      	b.n	80082f0 <cppInit+0xb8>

	}
	else{
	  lcd_clear();
 80082c8:	f7f8 feea 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80082cc:	2100      	movs	r1, #0
 80082ce:	2000      	movs	r0, #0
 80082d0:	f7f8 fef6 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80082d4:	4827      	ldr	r0, [pc, #156]	; (8008374 <cppInit+0x13c>)
 80082d6:	f7f8 ff1d 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80082da:	2101      	movs	r1, #1
 80082dc:	2000      	movs	r0, #0
 80082de:	f7f8 feef 	bl	80010c0 <lcd_locate>
	  lcd_printf("Fail");
 80082e2:	4826      	ldr	r0, [pc, #152]	; (800837c <cppInit+0x144>)
 80082e4:	f7f8 ff16 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 80082e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80082ec:	f003 fa36 	bl	800b75c <HAL_Delay>
		led.fullColor('R');
		HAL_Delay(100);
	}
	*/

	line_sensor.ADCStart();
 80082f0:	4823      	ldr	r0, [pc, #140]	; (8008380 <cppInit+0x148>)
 80082f2:	f7f9 ffeb 	bl	80022cc <_ZN10LineSensor8ADCStartEv>
	motor.init();
 80082f6:	4823      	ldr	r0, [pc, #140]	; (8008384 <cppInit+0x14c>)
 80082f8:	f7fd f910 	bl	800551c <_ZN5Motor4initEv>
	encoder.init();
 80082fc:	4822      	ldr	r0, [pc, #136]	; (8008388 <cppInit+0x150>)
 80082fe:	f7f9 f899 	bl	8001434 <_ZN7Encoder4initEv>
	imu.init();
 8008302:	4822      	ldr	r0, [pc, #136]	; (800838c <cppInit+0x154>)
 8008304:	f7f9 fc44 	bl	8001b90 <_ZN3IMU4initEv>
	line_trace.init();
 8008308:	4821      	ldr	r0, [pc, #132]	; (8008390 <cppInit+0x158>)
 800830a:	f7fb fc05 	bl	8003b18 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 800830e:	481c      	ldr	r0, [pc, #112]	; (8008380 <cppInit+0x148>)
 8008310:	f7fa f8d2 	bl	80024b8 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8008314:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008318:	f003 fa20 	bl	800b75c <HAL_Delay>

	led.fullColor('M');
 800831c:	214d      	movs	r1, #77	; 0x4d
 800831e:	481d      	ldr	r0, [pc, #116]	; (8008394 <cppInit+0x15c>)
 8008320:	f7f9 fe78 	bl	8002014 <_ZN3LED9fullColorEc>
	imu.calibration();
 8008324:	4819      	ldr	r0, [pc, #100]	; (800838c <cppInit+0x154>)
 8008326:	f7f9 fcfd 	bl	8001d24 <_ZN3IMU11calibrationEv>
	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	//velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s dorone
	velocity_ctrl.setVelocityGain(1.2, 10.6, 0.0); //3s hand tune
 800832a:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8008398 <cppInit+0x160>
 800832e:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800839c <cppInit+0x164>
 8008332:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 80083a0 <cppInit+0x168>
 8008336:	481b      	ldr	r0, [pc, #108]	; (80083a4 <cppInit+0x16c>)
 8008338:	f7fe f84a 	bl	80063d0 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 800833c:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8008398 <cppInit+0x160>
 8008340:	eddf 0a19 	vldr	s1, [pc, #100]	; 80083a8 <cppInit+0x170>
 8008344:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80083ac <cppInit+0x174>
 8008348:	4816      	ldr	r0, [pc, #88]	; (80083a4 <cppInit+0x16c>)
 800834a:	f7fe f85a 	bl	8006402 <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 800834e:	4818      	ldr	r0, [pc, #96]	; (80083b0 <cppInit+0x178>)
 8008350:	f7fd fa57 	bl	8005802 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8008354:	4817      	ldr	r0, [pc, #92]	; (80083b4 <cppInit+0x17c>)
 8008356:	f7fd faef 	bl	8005938 <_ZN13PathFollowing4initEv>

	esc.init();
 800835a:	4817      	ldr	r0, [pc, #92]	; (80083b8 <cppInit+0x180>)
 800835c:	f7f8 ff46 	bl	80011ec <_ZN3ESC4initEv>

}
 8008360:	bf00      	nop
 8008362:	bd98      	pop	{r3, r4, r7, pc}
 8008364:	2000055c 	.word	0x2000055c
 8008368:	0801a908 	.word	0x0801a908
 800836c:	0801a910 	.word	0x0801a910
 8008370:	20045268 	.word	0x20045268
 8008374:	0801a914 	.word	0x0801a914
 8008378:	0801a920 	.word	0x0801a920
 800837c:	0801a928 	.word	0x0801a928
 8008380:	20000244 	.word	0x20000244
 8008384:	20000554 	.word	0x20000554
 8008388:	20020928 	.word	0x20020928
 800838c:	20000568 	.word	0x20000568
 8008390:	200209d4 	.word	0x200209d4
 8008394:	20000558 	.word	0x20000558
 8008398:	00000000 	.word	0x00000000
 800839c:	4129999a 	.word	0x4129999a
 80083a0:	3f99999a 	.word	0x3f99999a
 80083a4:	20020950 	.word	0x20020950
 80083a8:	3f5e3fbc 	.word	0x3f5e3fbc
 80083ac:	3d75c28f 	.word	0x3d75c28f
 80083b0:	20020990 	.word	0x20020990
 80083b4:	2002db40 	.word	0x2002db40
 80083b8:	200209d0 	.word	0x200209d0

080083bc <cppFlip1ms>:

void cppFlip1ms(void)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 80083c0:	480e      	ldr	r0, [pc, #56]	; (80083fc <cppFlip1ms+0x40>)
 80083c2:	f7f9 ffe1 	bl	8002388 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 80083c6:	480e      	ldr	r0, [pc, #56]	; (8008400 <cppFlip1ms+0x44>)
 80083c8:	f7f9 fc0a 	bl	8001be0 <_ZN3IMU12updateValuesEv>
	encoder.update();
 80083cc:	480d      	ldr	r0, [pc, #52]	; (8008404 <cppFlip1ms+0x48>)
 80083ce:	f7f9 f853 	bl	8001478 <_ZN7Encoder6updateEv>
	line_trace.flip();
 80083d2:	480d      	ldr	r0, [pc, #52]	; (8008408 <cppFlip1ms+0x4c>)
 80083d4:	f7fb ffb8 	bl	8004348 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 80083d8:	480c      	ldr	r0, [pc, #48]	; (800840c <cppFlip1ms+0x50>)
 80083da:	f7fe f82b 	bl	8006434 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 80083de:	480c      	ldr	r0, [pc, #48]	; (8008410 <cppFlip1ms+0x54>)
 80083e0:	f7fd f9e2 	bl	80057a8 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 80083e4:	480b      	ldr	r0, [pc, #44]	; (8008414 <cppFlip1ms+0x58>)
 80083e6:	f7fd fc0d 	bl	8005c04 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 80083ea:	480b      	ldr	r0, [pc, #44]	; (8008418 <cppFlip1ms+0x5c>)
 80083ec:	f7fd f8a8 	bl	8005540 <_ZN5Motor9motorCtrlEv>
*/
	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 80083f0:	4804      	ldr	r0, [pc, #16]	; (8008404 <cppFlip1ms+0x48>)
 80083f2:	f7f9 f8d9 	bl	80015a8 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 80083f6:	bf00      	nop
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	20000244 	.word	0x20000244
 8008400:	20000568 	.word	0x20000568
 8008404:	20020928 	.word	0x20020928
 8008408:	200209d4 	.word	0x200209d4
 800840c:	20020950 	.word	0x20020950
 8008410:	20020990 	.word	0x20020990
 8008414:	2000053c 	.word	0x2000053c
 8008418:	20000554 	.word	0x20000554

0800841c <cppFlip100ns>:

void cppFlip100ns(void)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8008420:	4802      	ldr	r0, [pc, #8]	; (800842c <cppFlip100ns+0x10>)
 8008422:	f7f9 ff63 	bl	80022ec <_ZN10LineSensor17storeSensorValuesEv>
}
 8008426:	bf00      	nop
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	20000244 	.word	0x20000244

08008430 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	af00      	add	r7, sp, #0
		sys_ident.updateMsig();
		twice_cnt = 0;
	}
	*/

	logger.storeLog(line_trace.getTargetVelocity());
 8008434:	480a      	ldr	r0, [pc, #40]	; (8008460 <cppFlip10ms+0x30>)
 8008436:	f7fb fdff 	bl	8004038 <_ZN9LineTrace17getTargetVelocityEv>
 800843a:	eef0 7a40 	vmov.f32	s15, s0
 800843e:	eeb0 0a67 	vmov.f32	s0, s15
 8008442:	4808      	ldr	r0, [pc, #32]	; (8008464 <cppFlip10ms+0x34>)
 8008444:	f7fc fd26 	bl	8004e94 <_ZN6Logger8storeLogEf>
	logger.storeLog2(velocity_ctrl.getCurrentVelocity());
 8008448:	4807      	ldr	r0, [pc, #28]	; (8008468 <cppFlip10ms+0x38>)
 800844a:	f7fe f835 	bl	80064b8 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 800844e:	eef0 7a40 	vmov.f32	s15, s0
 8008452:	eeb0 0a67 	vmov.f32	s0, s15
 8008456:	4803      	ldr	r0, [pc, #12]	; (8008464 <cppFlip10ms+0x34>)
 8008458:	f7fc fd6a 	bl	8004f30 <_ZN6Logger9storeLog2Ef>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 800845c:	bf00      	nop
 800845e:	bd80      	pop	{r7, pc}
 8008460:	200209d4 	.word	0x200209d4
 8008464:	2000057c 	.word	0x2000057c
 8008468:	20020950 	.word	0x20020950

0800846c <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	4603      	mov	r3, r0
 8008474:	80fb      	strh	r3, [r7, #6]
	if(gpio_pin == GPIO_PIN_2){ //Right
 8008476:	88fb      	ldrh	r3, [r7, #6]
 8008478:	2b04      	cmp	r3, #4
 800847a:	d103      	bne.n	8008484 <cppExit+0x18>
		side_sensor.updateStatusRightExti();
 800847c:	4807      	ldr	r0, [pc, #28]	; (800849c <cppExit+0x30>)
 800847e:	f7fd fb79 	bl	8005b74 <_ZN10SideSensor21updateStatusRightExtiEv>
	}
	else if(gpio_pin == GPIO_PIN_8){ //Left
		side_sensor.updateStatusLeftExti();
	}
}
 8008482:	e006      	b.n	8008492 <cppExit+0x26>
	else if(gpio_pin == GPIO_PIN_8){ //Left
 8008484:	88fb      	ldrh	r3, [r7, #6]
 8008486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800848a:	d102      	bne.n	8008492 <cppExit+0x26>
		side_sensor.updateStatusLeftExti();
 800848c:	4803      	ldr	r0, [pc, #12]	; (800849c <cppExit+0x30>)
 800848e:	f7fd fb95 	bl	8005bbc <_ZN10SideSensor20updateStatusLeftExtiEv>
}
 8008492:	bf00      	nop
 8008494:	3708      	adds	r7, #8
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	2000053c 	.word	0x2000053c

080084a0 <cppLoop>:

void cppLoop(void)
{
 80084a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af02      	add	r7, sp, #8
	static int16_t selector_gain;
	static int16_t selector_run;
	static int16_t selector_acc;
	static int16_t selector_vel;

	static float adj_kp = line_trace.getKp();
 80084a6:	4baf      	ldr	r3, [pc, #700]	; (8008764 <cppLoop+0x2c4>)
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	f3bf 8f5b 	dmb	ish
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	f003 0301 	and.w	r3, r3, #1
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	bf0c      	ite	eq
 80084b8:	2301      	moveq	r3, #1
 80084ba:	2300      	movne	r3, #0
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d015      	beq.n	80084ee <cppLoop+0x4e>
 80084c2:	48a8      	ldr	r0, [pc, #672]	; (8008764 <cppLoop+0x2c4>)
 80084c4:	f00d fe5a 	bl	801617c <__cxa_guard_acquire>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	bf14      	ite	ne
 80084ce:	2301      	movne	r3, #1
 80084d0:	2300      	moveq	r3, #0
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00a      	beq.n	80084ee <cppLoop+0x4e>
 80084d8:	48a3      	ldr	r0, [pc, #652]	; (8008768 <cppLoop+0x2c8>)
 80084da:	f7fb fcaa 	bl	8003e32 <_ZN9LineTrace5getKpEv>
 80084de:	eef0 7a40 	vmov.f32	s15, s0
 80084e2:	4ba2      	ldr	r3, [pc, #648]	; (800876c <cppLoop+0x2cc>)
 80084e4:	edc3 7a00 	vstr	s15, [r3]
 80084e8:	489e      	ldr	r0, [pc, #632]	; (8008764 <cppLoop+0x2c4>)
 80084ea:	f00d fe53 	bl	8016194 <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 80084ee:	4ba0      	ldr	r3, [pc, #640]	; (8008770 <cppLoop+0x2d0>)
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	f3bf 8f5b 	dmb	ish
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	f003 0301 	and.w	r3, r3, #1
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	bf0c      	ite	eq
 8008500:	2301      	moveq	r3, #1
 8008502:	2300      	movne	r3, #0
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	d015      	beq.n	8008536 <cppLoop+0x96>
 800850a:	4899      	ldr	r0, [pc, #612]	; (8008770 <cppLoop+0x2d0>)
 800850c:	f00d fe36 	bl	801617c <__cxa_guard_acquire>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	bf14      	ite	ne
 8008516:	2301      	movne	r3, #1
 8008518:	2300      	moveq	r3, #0
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00a      	beq.n	8008536 <cppLoop+0x96>
 8008520:	4891      	ldr	r0, [pc, #580]	; (8008768 <cppLoop+0x2c8>)
 8008522:	f7fb fc95 	bl	8003e50 <_ZN9LineTrace5getKiEv>
 8008526:	eef0 7a40 	vmov.f32	s15, s0
 800852a:	4b92      	ldr	r3, [pc, #584]	; (8008774 <cppLoop+0x2d4>)
 800852c:	edc3 7a00 	vstr	s15, [r3]
 8008530:	488f      	ldr	r0, [pc, #572]	; (8008770 <cppLoop+0x2d0>)
 8008532:	f00d fe2f 	bl	8016194 <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8008536:	4b90      	ldr	r3, [pc, #576]	; (8008778 <cppLoop+0x2d8>)
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	f3bf 8f5b 	dmb	ish
 800853e:	b2db      	uxtb	r3, r3
 8008540:	f003 0301 	and.w	r3, r3, #1
 8008544:	2b00      	cmp	r3, #0
 8008546:	bf0c      	ite	eq
 8008548:	2301      	moveq	r3, #1
 800854a:	2300      	movne	r3, #0
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d015      	beq.n	800857e <cppLoop+0xde>
 8008552:	4889      	ldr	r0, [pc, #548]	; (8008778 <cppLoop+0x2d8>)
 8008554:	f00d fe12 	bl	801617c <__cxa_guard_acquire>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	bf14      	ite	ne
 800855e:	2301      	movne	r3, #1
 8008560:	2300      	moveq	r3, #0
 8008562:	b2db      	uxtb	r3, r3
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00a      	beq.n	800857e <cppLoop+0xde>
 8008568:	487f      	ldr	r0, [pc, #508]	; (8008768 <cppLoop+0x2c8>)
 800856a:	f7fb fc80 	bl	8003e6e <_ZN9LineTrace5getKdEv>
 800856e:	eef0 7a40 	vmov.f32	s15, s0
 8008572:	4b82      	ldr	r3, [pc, #520]	; (800877c <cppLoop+0x2dc>)
 8008574:	edc3 7a00 	vstr	s15, [r3]
 8008578:	487f      	ldr	r0, [pc, #508]	; (8008778 <cppLoop+0x2d8>)
 800857a:	f00d fe0b 	bl	8016194 <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 800857e:	4b80      	ldr	r3, [pc, #512]	; (8008780 <cppLoop+0x2e0>)
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	f3bf 8f5b 	dmb	ish
 8008586:	b2db      	uxtb	r3, r3
 8008588:	f003 0301 	and.w	r3, r3, #1
 800858c:	2b00      	cmp	r3, #0
 800858e:	bf0c      	ite	eq
 8008590:	2301      	moveq	r3, #1
 8008592:	2300      	movne	r3, #0
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d015      	beq.n	80085c6 <cppLoop+0x126>
 800859a:	4879      	ldr	r0, [pc, #484]	; (8008780 <cppLoop+0x2e0>)
 800859c:	f00d fdee 	bl	801617c <__cxa_guard_acquire>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	bf14      	ite	ne
 80085a6:	2301      	movne	r3, #1
 80085a8:	2300      	moveq	r3, #0
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00a      	beq.n	80085c6 <cppLoop+0x126>
 80085b0:	486d      	ldr	r0, [pc, #436]	; (8008768 <cppLoop+0x2c8>)
 80085b2:	f7fb fc84 	bl	8003ebe <_ZN9LineTrace9getKpSlowEv>
 80085b6:	eef0 7a40 	vmov.f32	s15, s0
 80085ba:	4b72      	ldr	r3, [pc, #456]	; (8008784 <cppLoop+0x2e4>)
 80085bc:	edc3 7a00 	vstr	s15, [r3]
 80085c0:	486f      	ldr	r0, [pc, #444]	; (8008780 <cppLoop+0x2e0>)
 80085c2:	f00d fde7 	bl	8016194 <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 80085c6:	4b70      	ldr	r3, [pc, #448]	; (8008788 <cppLoop+0x2e8>)
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	f3bf 8f5b 	dmb	ish
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	f003 0301 	and.w	r3, r3, #1
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	bf0c      	ite	eq
 80085d8:	2301      	moveq	r3, #1
 80085da:	2300      	movne	r3, #0
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d015      	beq.n	800860e <cppLoop+0x16e>
 80085e2:	4869      	ldr	r0, [pc, #420]	; (8008788 <cppLoop+0x2e8>)
 80085e4:	f00d fdca 	bl	801617c <__cxa_guard_acquire>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	bf14      	ite	ne
 80085ee:	2301      	movne	r3, #1
 80085f0:	2300      	moveq	r3, #0
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00a      	beq.n	800860e <cppLoop+0x16e>
 80085f8:	485b      	ldr	r0, [pc, #364]	; (8008768 <cppLoop+0x2c8>)
 80085fa:	f7fb fc6f 	bl	8003edc <_ZN9LineTrace9getKiSlowEv>
 80085fe:	eef0 7a40 	vmov.f32	s15, s0
 8008602:	4b62      	ldr	r3, [pc, #392]	; (800878c <cppLoop+0x2ec>)
 8008604:	edc3 7a00 	vstr	s15, [r3]
 8008608:	485f      	ldr	r0, [pc, #380]	; (8008788 <cppLoop+0x2e8>)
 800860a:	f00d fdc3 	bl	8016194 <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 800860e:	4b60      	ldr	r3, [pc, #384]	; (8008790 <cppLoop+0x2f0>)
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	f3bf 8f5b 	dmb	ish
 8008616:	b2db      	uxtb	r3, r3
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	bf0c      	ite	eq
 8008620:	2301      	moveq	r3, #1
 8008622:	2300      	movne	r3, #0
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b00      	cmp	r3, #0
 8008628:	d015      	beq.n	8008656 <cppLoop+0x1b6>
 800862a:	4859      	ldr	r0, [pc, #356]	; (8008790 <cppLoop+0x2f0>)
 800862c:	f00d fda6 	bl	801617c <__cxa_guard_acquire>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	bf14      	ite	ne
 8008636:	2301      	movne	r3, #1
 8008638:	2300      	moveq	r3, #0
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00a      	beq.n	8008656 <cppLoop+0x1b6>
 8008640:	4849      	ldr	r0, [pc, #292]	; (8008768 <cppLoop+0x2c8>)
 8008642:	f7fb fc5a 	bl	8003efa <_ZN9LineTrace9getKdSlowEv>
 8008646:	eef0 7a40 	vmov.f32	s15, s0
 800864a:	4b52      	ldr	r3, [pc, #328]	; (8008794 <cppLoop+0x2f4>)
 800864c:	edc3 7a00 	vstr	s15, [r3]
 8008650:	484f      	ldr	r0, [pc, #316]	; (8008790 <cppLoop+0x2f0>)
 8008652:	f00d fd9f 	bl	8016194 <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8008656:	4b50      	ldr	r3, [pc, #320]	; (8008798 <cppLoop+0x2f8>)
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	f3bf 8f5b 	dmb	ish
 800865e:	b2db      	uxtb	r3, r3
 8008660:	f003 0301 	and.w	r3, r3, #1
 8008664:	2b00      	cmp	r3, #0
 8008666:	bf0c      	ite	eq
 8008668:	2301      	moveq	r3, #1
 800866a:	2300      	movne	r3, #0
 800866c:	b2db      	uxtb	r3, r3
 800866e:	2b00      	cmp	r3, #0
 8008670:	d015      	beq.n	800869e <cppLoop+0x1fe>
 8008672:	4849      	ldr	r0, [pc, #292]	; (8008798 <cppLoop+0x2f8>)
 8008674:	f00d fd82 	bl	801617c <__cxa_guard_acquire>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	bf14      	ite	ne
 800867e:	2301      	movne	r3, #1
 8008680:	2300      	moveq	r3, #0
 8008682:	b2db      	uxtb	r3, r3
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00a      	beq.n	800869e <cppLoop+0x1fe>
 8008688:	4837      	ldr	r0, [pc, #220]	; (8008768 <cppLoop+0x2c8>)
 800868a:	f7fb fcd5 	bl	8004038 <_ZN9LineTrace17getTargetVelocityEv>
 800868e:	eef0 7a40 	vmov.f32	s15, s0
 8008692:	4b42      	ldr	r3, [pc, #264]	; (800879c <cppLoop+0x2fc>)
 8008694:	edc3 7a00 	vstr	s15, [r3]
 8008698:	483f      	ldr	r0, [pc, #252]	; (8008798 <cppLoop+0x2f8>)
 800869a:	f00d fd7b 	bl	8016194 <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 800869e:	4b40      	ldr	r3, [pc, #256]	; (80087a0 <cppLoop+0x300>)
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	f3bf 8f5b 	dmb	ish
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	f003 0301 	and.w	r3, r3, #1
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	bf0c      	ite	eq
 80086b0:	2301      	moveq	r3, #1
 80086b2:	2300      	movne	r3, #0
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d015      	beq.n	80086e6 <cppLoop+0x246>
 80086ba:	4839      	ldr	r0, [pc, #228]	; (80087a0 <cppLoop+0x300>)
 80086bc:	f00d fd5e 	bl	801617c <__cxa_guard_acquire>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	bf14      	ite	ne
 80086c6:	2301      	movne	r3, #1
 80086c8:	2300      	moveq	r3, #0
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00a      	beq.n	80086e6 <cppLoop+0x246>
 80086d0:	4825      	ldr	r0, [pc, #148]	; (8008768 <cppLoop+0x2c8>)
 80086d2:	f7fb fcc1 	bl	8004058 <_ZN9LineTrace14getMaxVelocityEv>
 80086d6:	eef0 7a40 	vmov.f32	s15, s0
 80086da:	4b32      	ldr	r3, [pc, #200]	; (80087a4 <cppLoop+0x304>)
 80086dc:	edc3 7a00 	vstr	s15, [r3]
 80086e0:	482f      	ldr	r0, [pc, #188]	; (80087a0 <cppLoop+0x300>)
 80086e2:	f00d fd57 	bl	8016194 <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 80086e6:	4b30      	ldr	r3, [pc, #192]	; (80087a8 <cppLoop+0x308>)
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	f3bf 8f5b 	dmb	ish
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	bf0c      	ite	eq
 80086f8:	2301      	moveq	r3, #1
 80086fa:	2300      	movne	r3, #0
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d015      	beq.n	800872e <cppLoop+0x28e>
 8008702:	4829      	ldr	r0, [pc, #164]	; (80087a8 <cppLoop+0x308>)
 8008704:	f00d fd3a 	bl	801617c <__cxa_guard_acquire>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	bf14      	ite	ne
 800870e:	2301      	movne	r3, #1
 8008710:	2300      	moveq	r3, #0
 8008712:	b2db      	uxtb	r3, r3
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00a      	beq.n	800872e <cppLoop+0x28e>
 8008718:	4813      	ldr	r0, [pc, #76]	; (8008768 <cppLoop+0x2c8>)
 800871a:	f7fb fcad 	bl	8004078 <_ZN9LineTrace14getMinVelocityEv>
 800871e:	eef0 7a40 	vmov.f32	s15, s0
 8008722:	4b22      	ldr	r3, [pc, #136]	; (80087ac <cppLoop+0x30c>)
 8008724:	edc3 7a00 	vstr	s15, [r3]
 8008728:	481f      	ldr	r0, [pc, #124]	; (80087a8 <cppLoop+0x308>)
 800872a:	f00d fd33 	bl	8016194 <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 800872e:	4b20      	ldr	r3, [pc, #128]	; (80087b0 <cppLoop+0x310>)
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	f3bf 8f5b 	dmb	ish
 8008736:	b2db      	uxtb	r3, r3
 8008738:	f003 0301 	and.w	r3, r3, #1
 800873c:	2b00      	cmp	r3, #0
 800873e:	bf0c      	ite	eq
 8008740:	2301      	moveq	r3, #1
 8008742:	2300      	movne	r3, #0
 8008744:	b2db      	uxtb	r3, r3
 8008746:	2b00      	cmp	r3, #0
 8008748:	d03f      	beq.n	80087ca <cppLoop+0x32a>
 800874a:	4819      	ldr	r0, [pc, #100]	; (80087b0 <cppLoop+0x310>)
 800874c:	f00d fd16 	bl	801617c <__cxa_guard_acquire>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	bf14      	ite	ne
 8008756:	2301      	movne	r3, #1
 8008758:	2300      	moveq	r3, #0
 800875a:	b2db      	uxtb	r3, r3
 800875c:	2b00      	cmp	r3, #0
 800875e:	d034      	beq.n	80087ca <cppLoop+0x32a>
 8008760:	e028      	b.n	80087b4 <cppLoop+0x314>
 8008762:	bf00      	nop
 8008764:	20047588 	.word	0x20047588
 8008768:	200209d4 	.word	0x200209d4
 800876c:	20047584 	.word	0x20047584
 8008770:	20047590 	.word	0x20047590
 8008774:	2004758c 	.word	0x2004758c
 8008778:	20047598 	.word	0x20047598
 800877c:	20047594 	.word	0x20047594
 8008780:	200475a0 	.word	0x200475a0
 8008784:	2004759c 	.word	0x2004759c
 8008788:	200475a8 	.word	0x200475a8
 800878c:	200475a4 	.word	0x200475a4
 8008790:	200475b0 	.word	0x200475b0
 8008794:	200475ac 	.word	0x200475ac
 8008798:	200475b8 	.word	0x200475b8
 800879c:	200475b4 	.word	0x200475b4
 80087a0:	200475c0 	.word	0x200475c0
 80087a4:	200475bc 	.word	0x200475bc
 80087a8:	200475c8 	.word	0x200475c8
 80087ac:	200475c4 	.word	0x200475c4
 80087b0:	200475d0 	.word	0x200475d0
 80087b4:	48ae      	ldr	r0, [pc, #696]	; (8008a70 <cppLoop+0x5d0>)
 80087b6:	f7fb fc6f 	bl	8004098 <_ZN9LineTrace15getMaxVelocity2Ev>
 80087ba:	eef0 7a40 	vmov.f32	s15, s0
 80087be:	4bad      	ldr	r3, [pc, #692]	; (8008a74 <cppLoop+0x5d4>)
 80087c0:	edc3 7a00 	vstr	s15, [r3]
 80087c4:	48ac      	ldr	r0, [pc, #688]	; (8008a78 <cppLoop+0x5d8>)
 80087c6:	f00d fce5 	bl	8016194 <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 80087ca:	4bac      	ldr	r3, [pc, #688]	; (8008a7c <cppLoop+0x5dc>)
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	f3bf 8f5b 	dmb	ish
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	f003 0301 	and.w	r3, r3, #1
 80087d8:	2b00      	cmp	r3, #0
 80087da:	bf0c      	ite	eq
 80087dc:	2301      	moveq	r3, #1
 80087de:	2300      	movne	r3, #0
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d015      	beq.n	8008812 <cppLoop+0x372>
 80087e6:	48a5      	ldr	r0, [pc, #660]	; (8008a7c <cppLoop+0x5dc>)
 80087e8:	f00d fcc8 	bl	801617c <__cxa_guard_acquire>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	bf14      	ite	ne
 80087f2:	2301      	movne	r3, #1
 80087f4:	2300      	moveq	r3, #0
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00a      	beq.n	8008812 <cppLoop+0x372>
 80087fc:	489c      	ldr	r0, [pc, #624]	; (8008a70 <cppLoop+0x5d0>)
 80087fe:	f7fb fc5b 	bl	80040b8 <_ZN9LineTrace15getMinVelocity2Ev>
 8008802:	eef0 7a40 	vmov.f32	s15, s0
 8008806:	4b9e      	ldr	r3, [pc, #632]	; (8008a80 <cppLoop+0x5e0>)
 8008808:	edc3 7a00 	vstr	s15, [r3]
 800880c:	489b      	ldr	r0, [pc, #620]	; (8008a7c <cppLoop+0x5dc>)
 800880e:	f00d fcc1 	bl	8016194 <__cxa_guard_release>
	static float adj_max_velocity3 = line_trace.getMaxVelocity3();
 8008812:	4b9c      	ldr	r3, [pc, #624]	; (8008a84 <cppLoop+0x5e4>)
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	f3bf 8f5b 	dmb	ish
 800881a:	b2db      	uxtb	r3, r3
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	2b00      	cmp	r3, #0
 8008822:	bf0c      	ite	eq
 8008824:	2301      	moveq	r3, #1
 8008826:	2300      	movne	r3, #0
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	d015      	beq.n	800885a <cppLoop+0x3ba>
 800882e:	4895      	ldr	r0, [pc, #596]	; (8008a84 <cppLoop+0x5e4>)
 8008830:	f00d fca4 	bl	801617c <__cxa_guard_acquire>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	bf14      	ite	ne
 800883a:	2301      	movne	r3, #1
 800883c:	2300      	moveq	r3, #0
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00a      	beq.n	800885a <cppLoop+0x3ba>
 8008844:	488a      	ldr	r0, [pc, #552]	; (8008a70 <cppLoop+0x5d0>)
 8008846:	f7fb fc47 	bl	80040d8 <_ZN9LineTrace15getMaxVelocity3Ev>
 800884a:	eef0 7a40 	vmov.f32	s15, s0
 800884e:	4b8e      	ldr	r3, [pc, #568]	; (8008a88 <cppLoop+0x5e8>)
 8008850:	edc3 7a00 	vstr	s15, [r3]
 8008854:	488b      	ldr	r0, [pc, #556]	; (8008a84 <cppLoop+0x5e4>)
 8008856:	f00d fc9d 	bl	8016194 <__cxa_guard_release>
	static float adj_min_velocity3 = line_trace.getMinVelocity3();
 800885a:	4b8c      	ldr	r3, [pc, #560]	; (8008a8c <cppLoop+0x5ec>)
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	f3bf 8f5b 	dmb	ish
 8008862:	b2db      	uxtb	r3, r3
 8008864:	f003 0301 	and.w	r3, r3, #1
 8008868:	2b00      	cmp	r3, #0
 800886a:	bf0c      	ite	eq
 800886c:	2301      	moveq	r3, #1
 800886e:	2300      	movne	r3, #0
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d015      	beq.n	80088a2 <cppLoop+0x402>
 8008876:	4885      	ldr	r0, [pc, #532]	; (8008a8c <cppLoop+0x5ec>)
 8008878:	f00d fc80 	bl	801617c <__cxa_guard_acquire>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	bf14      	ite	ne
 8008882:	2301      	movne	r3, #1
 8008884:	2300      	moveq	r3, #0
 8008886:	b2db      	uxtb	r3, r3
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00a      	beq.n	80088a2 <cppLoop+0x402>
 800888c:	4878      	ldr	r0, [pc, #480]	; (8008a70 <cppLoop+0x5d0>)
 800888e:	f7fb fc33 	bl	80040f8 <_ZN9LineTrace15getMinVelocity3Ev>
 8008892:	eef0 7a40 	vmov.f32	s15, s0
 8008896:	4b7e      	ldr	r3, [pc, #504]	; (8008a90 <cppLoop+0x5f0>)
 8008898:	edc3 7a00 	vstr	s15, [r3]
 800889c:	487b      	ldr	r0, [pc, #492]	; (8008a8c <cppLoop+0x5ec>)
 800889e:	f00d fc79 	bl	8016194 <__cxa_guard_release>
	static float adj_max_velocity4 = line_trace.getMaxVelocity4();
 80088a2:	4b7c      	ldr	r3, [pc, #496]	; (8008a94 <cppLoop+0x5f4>)
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	f3bf 8f5b 	dmb	ish
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	f003 0301 	and.w	r3, r3, #1
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	bf0c      	ite	eq
 80088b4:	2301      	moveq	r3, #1
 80088b6:	2300      	movne	r3, #0
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d015      	beq.n	80088ea <cppLoop+0x44a>
 80088be:	4875      	ldr	r0, [pc, #468]	; (8008a94 <cppLoop+0x5f4>)
 80088c0:	f00d fc5c 	bl	801617c <__cxa_guard_acquire>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	bf14      	ite	ne
 80088ca:	2301      	movne	r3, #1
 80088cc:	2300      	moveq	r3, #0
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00a      	beq.n	80088ea <cppLoop+0x44a>
 80088d4:	4866      	ldr	r0, [pc, #408]	; (8008a70 <cppLoop+0x5d0>)
 80088d6:	f7fb fc1f 	bl	8004118 <_ZN9LineTrace15getMaxVelocity4Ev>
 80088da:	eef0 7a40 	vmov.f32	s15, s0
 80088de:	4b6e      	ldr	r3, [pc, #440]	; (8008a98 <cppLoop+0x5f8>)
 80088e0:	edc3 7a00 	vstr	s15, [r3]
 80088e4:	486b      	ldr	r0, [pc, #428]	; (8008a94 <cppLoop+0x5f4>)
 80088e6:	f00d fc55 	bl	8016194 <__cxa_guard_release>
	static float adj_min_velocity4 = line_trace.getMinVelocity4();
 80088ea:	4b6c      	ldr	r3, [pc, #432]	; (8008a9c <cppLoop+0x5fc>)
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	f3bf 8f5b 	dmb	ish
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	f003 0301 	and.w	r3, r3, #1
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	bf0c      	ite	eq
 80088fc:	2301      	moveq	r3, #1
 80088fe:	2300      	movne	r3, #0
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b00      	cmp	r3, #0
 8008904:	d015      	beq.n	8008932 <cppLoop+0x492>
 8008906:	4865      	ldr	r0, [pc, #404]	; (8008a9c <cppLoop+0x5fc>)
 8008908:	f00d fc38 	bl	801617c <__cxa_guard_acquire>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	bf14      	ite	ne
 8008912:	2301      	movne	r3, #1
 8008914:	2300      	moveq	r3, #0
 8008916:	b2db      	uxtb	r3, r3
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00a      	beq.n	8008932 <cppLoop+0x492>
 800891c:	4854      	ldr	r0, [pc, #336]	; (8008a70 <cppLoop+0x5d0>)
 800891e:	f7fb fc0b 	bl	8004138 <_ZN9LineTrace15getMinVelocity4Ev>
 8008922:	eef0 7a40 	vmov.f32	s15, s0
 8008926:	4b5e      	ldr	r3, [pc, #376]	; (8008aa0 <cppLoop+0x600>)
 8008928:	edc3 7a00 	vstr	s15, [r3]
 800892c:	485b      	ldr	r0, [pc, #364]	; (8008a9c <cppLoop+0x5fc>)
 800892e:	f00d fc31 	bl	8016194 <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8008932:	4b5c      	ldr	r3, [pc, #368]	; (8008aa4 <cppLoop+0x604>)
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	f3bf 8f5b 	dmb	ish
 800893a:	b2db      	uxtb	r3, r3
 800893c:	f003 0301 	and.w	r3, r3, #1
 8008940:	2b00      	cmp	r3, #0
 8008942:	bf0c      	ite	eq
 8008944:	2301      	moveq	r3, #1
 8008946:	2300      	movne	r3, #0
 8008948:	b2db      	uxtb	r3, r3
 800894a:	2b00      	cmp	r3, #0
 800894c:	d015      	beq.n	800897a <cppLoop+0x4da>
 800894e:	4855      	ldr	r0, [pc, #340]	; (8008aa4 <cppLoop+0x604>)
 8008950:	f00d fc14 	bl	801617c <__cxa_guard_acquire>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	bf14      	ite	ne
 800895a:	2301      	movne	r3, #1
 800895c:	2300      	moveq	r3, #0
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00a      	beq.n	800897a <cppLoop+0x4da>
 8008964:	4842      	ldr	r0, [pc, #264]	; (8008a70 <cppLoop+0x5d0>)
 8008966:	f7fb fc5f 	bl	8004228 <_ZN9LineTrace9getMaxAccEv>
 800896a:	eef0 7a40 	vmov.f32	s15, s0
 800896e:	4b4e      	ldr	r3, [pc, #312]	; (8008aa8 <cppLoop+0x608>)
 8008970:	edc3 7a00 	vstr	s15, [r3]
 8008974:	484b      	ldr	r0, [pc, #300]	; (8008aa4 <cppLoop+0x604>)
 8008976:	f00d fc0d 	bl	8016194 <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 800897a:	4b4c      	ldr	r3, [pc, #304]	; (8008aac <cppLoop+0x60c>)
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	f3bf 8f5b 	dmb	ish
 8008982:	b2db      	uxtb	r3, r3
 8008984:	f003 0301 	and.w	r3, r3, #1
 8008988:	2b00      	cmp	r3, #0
 800898a:	bf0c      	ite	eq
 800898c:	2301      	moveq	r3, #1
 800898e:	2300      	movne	r3, #0
 8008990:	b2db      	uxtb	r3, r3
 8008992:	2b00      	cmp	r3, #0
 8008994:	d015      	beq.n	80089c2 <cppLoop+0x522>
 8008996:	4845      	ldr	r0, [pc, #276]	; (8008aac <cppLoop+0x60c>)
 8008998:	f00d fbf0 	bl	801617c <__cxa_guard_acquire>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	bf14      	ite	ne
 80089a2:	2301      	movne	r3, #1
 80089a4:	2300      	moveq	r3, #0
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00a      	beq.n	80089c2 <cppLoop+0x522>
 80089ac:	4830      	ldr	r0, [pc, #192]	; (8008a70 <cppLoop+0x5d0>)
 80089ae:	f7fb fc4d 	bl	800424c <_ZN9LineTrace9getMaxDecEv>
 80089b2:	eef0 7a40 	vmov.f32	s15, s0
 80089b6:	4b3e      	ldr	r3, [pc, #248]	; (8008ab0 <cppLoop+0x610>)
 80089b8:	edc3 7a00 	vstr	s15, [r3]
 80089bc:	483b      	ldr	r0, [pc, #236]	; (8008aac <cppLoop+0x60c>)
 80089be:	f00d fbe9 	bl	8016194 <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 80089c2:	4b3c      	ldr	r3, [pc, #240]	; (8008ab4 <cppLoop+0x614>)
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	f3bf 8f5b 	dmb	ish
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	f003 0301 	and.w	r3, r3, #1
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	bf0c      	ite	eq
 80089d4:	2301      	moveq	r3, #1
 80089d6:	2300      	movne	r3, #0
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d015      	beq.n	8008a0a <cppLoop+0x56a>
 80089de:	4835      	ldr	r0, [pc, #212]	; (8008ab4 <cppLoop+0x614>)
 80089e0:	f00d fbcc 	bl	801617c <__cxa_guard_acquire>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	bf14      	ite	ne
 80089ea:	2301      	movne	r3, #1
 80089ec:	2300      	moveq	r3, #0
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00a      	beq.n	8008a0a <cppLoop+0x56a>
 80089f4:	481e      	ldr	r0, [pc, #120]	; (8008a70 <cppLoop+0x5d0>)
 80089f6:	f7fb fc3b 	bl	8004270 <_ZN9LineTrace10getMaxAcc2Ev>
 80089fa:	eef0 7a40 	vmov.f32	s15, s0
 80089fe:	4b2e      	ldr	r3, [pc, #184]	; (8008ab8 <cppLoop+0x618>)
 8008a00:	edc3 7a00 	vstr	s15, [r3]
 8008a04:	482b      	ldr	r0, [pc, #172]	; (8008ab4 <cppLoop+0x614>)
 8008a06:	f00d fbc5 	bl	8016194 <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8008a0a:	4b2c      	ldr	r3, [pc, #176]	; (8008abc <cppLoop+0x61c>)
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	f3bf 8f5b 	dmb	ish
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	f003 0301 	and.w	r3, r3, #1
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	bf0c      	ite	eq
 8008a1c:	2301      	moveq	r3, #1
 8008a1e:	2300      	movne	r3, #0
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d015      	beq.n	8008a52 <cppLoop+0x5b2>
 8008a26:	4825      	ldr	r0, [pc, #148]	; (8008abc <cppLoop+0x61c>)
 8008a28:	f00d fba8 	bl	801617c <__cxa_guard_acquire>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	bf14      	ite	ne
 8008a32:	2301      	movne	r3, #1
 8008a34:	2300      	moveq	r3, #0
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00a      	beq.n	8008a52 <cppLoop+0x5b2>
 8008a3c:	480c      	ldr	r0, [pc, #48]	; (8008a70 <cppLoop+0x5d0>)
 8008a3e:	f7fb fc29 	bl	8004294 <_ZN9LineTrace10getMaxDec2Ev>
 8008a42:	eef0 7a40 	vmov.f32	s15, s0
 8008a46:	4b1e      	ldr	r3, [pc, #120]	; (8008ac0 <cppLoop+0x620>)
 8008a48:	edc3 7a00 	vstr	s15, [r3]
 8008a4c:	481b      	ldr	r0, [pc, #108]	; (8008abc <cppLoop+0x61c>)
 8008a4e:	f00d fba1 	bl	8016194 <__cxa_guard_release>
	static float adj_acc3 = line_trace.getMaxAcc3();
 8008a52:	4b1c      	ldr	r3, [pc, #112]	; (8008ac4 <cppLoop+0x624>)
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	f3bf 8f5b 	dmb	ish
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	f003 0301 	and.w	r3, r3, #1
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	bf0c      	ite	eq
 8008a64:	2301      	moveq	r3, #1
 8008a66:	2300      	movne	r3, #0
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d042      	beq.n	8008af4 <cppLoop+0x654>
 8008a6e:	e02b      	b.n	8008ac8 <cppLoop+0x628>
 8008a70:	200209d4 	.word	0x200209d4
 8008a74:	200475cc 	.word	0x200475cc
 8008a78:	200475d0 	.word	0x200475d0
 8008a7c:	200475d8 	.word	0x200475d8
 8008a80:	200475d4 	.word	0x200475d4
 8008a84:	200475e0 	.word	0x200475e0
 8008a88:	200475dc 	.word	0x200475dc
 8008a8c:	200475e8 	.word	0x200475e8
 8008a90:	200475e4 	.word	0x200475e4
 8008a94:	200475f0 	.word	0x200475f0
 8008a98:	200475ec 	.word	0x200475ec
 8008a9c:	200475f8 	.word	0x200475f8
 8008aa0:	200475f4 	.word	0x200475f4
 8008aa4:	20047600 	.word	0x20047600
 8008aa8:	200475fc 	.word	0x200475fc
 8008aac:	20047608 	.word	0x20047608
 8008ab0:	20047604 	.word	0x20047604
 8008ab4:	20047610 	.word	0x20047610
 8008ab8:	2004760c 	.word	0x2004760c
 8008abc:	20047618 	.word	0x20047618
 8008ac0:	20047614 	.word	0x20047614
 8008ac4:	20047620 	.word	0x20047620
 8008ac8:	48bf      	ldr	r0, [pc, #764]	; (8008dc8 <cppLoop+0x928>)
 8008aca:	f00d fb57 	bl	801617c <__cxa_guard_acquire>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	bf14      	ite	ne
 8008ad4:	2301      	movne	r3, #1
 8008ad6:	2300      	moveq	r3, #0
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00a      	beq.n	8008af4 <cppLoop+0x654>
 8008ade:	48bb      	ldr	r0, [pc, #748]	; (8008dcc <cppLoop+0x92c>)
 8008ae0:	f7fb fbea 	bl	80042b8 <_ZN9LineTrace10getMaxAcc3Ev>
 8008ae4:	eef0 7a40 	vmov.f32	s15, s0
 8008ae8:	4bb9      	ldr	r3, [pc, #740]	; (8008dd0 <cppLoop+0x930>)
 8008aea:	edc3 7a00 	vstr	s15, [r3]
 8008aee:	48b6      	ldr	r0, [pc, #728]	; (8008dc8 <cppLoop+0x928>)
 8008af0:	f00d fb50 	bl	8016194 <__cxa_guard_release>
	static float adj_dec3 = line_trace.getMaxDec3();
 8008af4:	4bb7      	ldr	r3, [pc, #732]	; (8008dd4 <cppLoop+0x934>)
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	f3bf 8f5b 	dmb	ish
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	f003 0301 	and.w	r3, r3, #1
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	bf0c      	ite	eq
 8008b06:	2301      	moveq	r3, #1
 8008b08:	2300      	movne	r3, #0
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d015      	beq.n	8008b3c <cppLoop+0x69c>
 8008b10:	48b0      	ldr	r0, [pc, #704]	; (8008dd4 <cppLoop+0x934>)
 8008b12:	f00d fb33 	bl	801617c <__cxa_guard_acquire>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	bf14      	ite	ne
 8008b1c:	2301      	movne	r3, #1
 8008b1e:	2300      	moveq	r3, #0
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00a      	beq.n	8008b3c <cppLoop+0x69c>
 8008b26:	48a9      	ldr	r0, [pc, #676]	; (8008dcc <cppLoop+0x92c>)
 8008b28:	f7fb fbd8 	bl	80042dc <_ZN9LineTrace10getMaxDec3Ev>
 8008b2c:	eef0 7a40 	vmov.f32	s15, s0
 8008b30:	4ba9      	ldr	r3, [pc, #676]	; (8008dd8 <cppLoop+0x938>)
 8008b32:	edc3 7a00 	vstr	s15, [r3]
 8008b36:	48a7      	ldr	r0, [pc, #668]	; (8008dd4 <cppLoop+0x934>)
 8008b38:	f00d fb2c 	bl	8016194 <__cxa_guard_release>
	static float adj_acc4 = line_trace.getMaxAcc4();
 8008b3c:	4ba7      	ldr	r3, [pc, #668]	; (8008ddc <cppLoop+0x93c>)
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	f3bf 8f5b 	dmb	ish
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	f003 0301 	and.w	r3, r3, #1
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	bf0c      	ite	eq
 8008b4e:	2301      	moveq	r3, #1
 8008b50:	2300      	movne	r3, #0
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d015      	beq.n	8008b84 <cppLoop+0x6e4>
 8008b58:	48a0      	ldr	r0, [pc, #640]	; (8008ddc <cppLoop+0x93c>)
 8008b5a:	f00d fb0f 	bl	801617c <__cxa_guard_acquire>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	bf14      	ite	ne
 8008b64:	2301      	movne	r3, #1
 8008b66:	2300      	moveq	r3, #0
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00a      	beq.n	8008b84 <cppLoop+0x6e4>
 8008b6e:	4897      	ldr	r0, [pc, #604]	; (8008dcc <cppLoop+0x92c>)
 8008b70:	f7fb fbc6 	bl	8004300 <_ZN9LineTrace10getMaxAcc4Ev>
 8008b74:	eef0 7a40 	vmov.f32	s15, s0
 8008b78:	4b99      	ldr	r3, [pc, #612]	; (8008de0 <cppLoop+0x940>)
 8008b7a:	edc3 7a00 	vstr	s15, [r3]
 8008b7e:	4897      	ldr	r0, [pc, #604]	; (8008ddc <cppLoop+0x93c>)
 8008b80:	f00d fb08 	bl	8016194 <__cxa_guard_release>
	static float adj_dec4 = line_trace.getMaxDec4();
 8008b84:	4b97      	ldr	r3, [pc, #604]	; (8008de4 <cppLoop+0x944>)
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	f3bf 8f5b 	dmb	ish
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	f003 0301 	and.w	r3, r3, #1
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	bf0c      	ite	eq
 8008b96:	2301      	moveq	r3, #1
 8008b98:	2300      	movne	r3, #0
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d015      	beq.n	8008bcc <cppLoop+0x72c>
 8008ba0:	4890      	ldr	r0, [pc, #576]	; (8008de4 <cppLoop+0x944>)
 8008ba2:	f00d faeb 	bl	801617c <__cxa_guard_acquire>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	bf14      	ite	ne
 8008bac:	2301      	movne	r3, #1
 8008bae:	2300      	moveq	r3, #0
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d00a      	beq.n	8008bcc <cppLoop+0x72c>
 8008bb6:	4885      	ldr	r0, [pc, #532]	; (8008dcc <cppLoop+0x92c>)
 8008bb8:	f7fb fbb4 	bl	8004324 <_ZN9LineTrace10getMaxDec4Ev>
 8008bbc:	eef0 7a40 	vmov.f32	s15, s0
 8008bc0:	4b89      	ldr	r3, [pc, #548]	; (8008de8 <cppLoop+0x948>)
 8008bc2:	edc3 7a00 	vstr	s15, [r3]
 8008bc6:	4887      	ldr	r0, [pc, #540]	; (8008de4 <cppLoop+0x944>)
 8008bc8:	f00d fae4 	bl	8016194 <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8008bcc:	4887      	ldr	r0, [pc, #540]	; (8008dec <cppLoop+0x94c>)
 8008bce:	f7fc ff59 	bl	8005a84 <_ZN12RotarySwitch8getValueEv>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b0f      	cmp	r3, #15
 8008bd6:	f202 8469 	bhi.w	800b4ac <cppLoop+0x300c>
 8008bda:	a201      	add	r2, pc, #4	; (adr r2, 8008be0 <cppLoop+0x740>)
 8008bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be0:	08008c21 	.word	0x08008c21
 8008be4:	08008fad 	.word	0x08008fad
 8008be8:	0800936d 	.word	0x0800936d
 8008bec:	08009625 	.word	0x08009625
 8008bf0:	08009a0b 	.word	0x08009a0b
 8008bf4:	08009e55 	.word	0x08009e55
 8008bf8:	0800a259 	.word	0x0800a259
 8008bfc:	0800a66d 	.word	0x0800a66d
 8008c00:	0800a8f7 	.word	0x0800a8f7
 8008c04:	0800ab83 	.word	0x0800ab83
 8008c08:	0800ae09 	.word	0x0800ae09
 8008c0c:	0800b095 	.word	0x0800b095
 8008c10:	0800b135 	.word	0x0800b135
 8008c14:	0800b1d1 	.word	0x0800b1d1
 8008c18:	0800b297 	.word	0x0800b297
 8008c1c:	0800b3d5 	.word	0x0800b3d5
	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Gain setting 1 -----------------------*/
	/*-------------------------------------------------------------------------*/
	case 0:
		led.fullColor('W');
 8008c20:	2157      	movs	r1, #87	; 0x57
 8008c22:	4873      	ldr	r0, [pc, #460]	; (8008df0 <cppLoop+0x950>)
 8008c24:	f7f9 f9f6 	bl	8002014 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008c28:	f7f8 fa3a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	2000      	movs	r0, #0
 8008c30:	f7f8 fa46 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", abs(line_trace.getKpSlow()*10000));
 8008c34:	4865      	ldr	r0, [pc, #404]	; (8008dcc <cppLoop+0x92c>)
 8008c36:	f7fb f942 	bl	8003ebe <_ZN9LineTrace9getKpSlowEv>
 8008c3a:	eeb0 7a40 	vmov.f32	s14, s0
 8008c3e:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8008df4 <cppLoop+0x954>
 8008c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c46:	eeb0 0a67 	vmov.f32	s0, s15
 8008c4a:	f7f9 fda5 	bl	8002798 <_ZSt3absf>
 8008c4e:	ee10 3a10 	vmov	r3, s0
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7f7 fc90 	bl	8000578 <__aeabi_f2d>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	460c      	mov	r4, r1
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	4623      	mov	r3, r4
 8008c60:	4865      	ldr	r0, [pc, #404]	; (8008df8 <cppLoop+0x958>)
 8008c62:	f7f8 fa57 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008c66:	2101      	movs	r1, #1
 8008c68:	2000      	movs	r0, #0
 8008c6a:	f7f8 fa29 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKiSlow()*1000), abs(line_trace.getKdSlow()*10000));
 8008c6e:	4857      	ldr	r0, [pc, #348]	; (8008dcc <cppLoop+0x92c>)
 8008c70:	f7fb f934 	bl	8003edc <_ZN9LineTrace9getKiSlowEv>
 8008c74:	eeb0 7a40 	vmov.f32	s14, s0
 8008c78:	eddf 7a60 	vldr	s15, [pc, #384]	; 8008dfc <cppLoop+0x95c>
 8008c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c80:	eeb0 0a67 	vmov.f32	s0, s15
 8008c84:	f7f9 fd88 	bl	8002798 <_ZSt3absf>
 8008c88:	ee10 3a10 	vmov	r3, s0
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7f7 fc73 	bl	8000578 <__aeabi_f2d>
 8008c92:	4605      	mov	r5, r0
 8008c94:	460e      	mov	r6, r1
 8008c96:	484d      	ldr	r0, [pc, #308]	; (8008dcc <cppLoop+0x92c>)
 8008c98:	f7fb f92f 	bl	8003efa <_ZN9LineTrace9getKdSlowEv>
 8008c9c:	eeb0 7a40 	vmov.f32	s14, s0
 8008ca0:	eddf 7a54 	vldr	s15, [pc, #336]	; 8008df4 <cppLoop+0x954>
 8008ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8008cac:	f7f9 fd74 	bl	8002798 <_ZSt3absf>
 8008cb0:	ee10 3a10 	vmov	r3, s0
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7f7 fc5f 	bl	8000578 <__aeabi_f2d>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	460c      	mov	r4, r1
 8008cbe:	e9cd 3400 	strd	r3, r4, [sp]
 8008cc2:	462a      	mov	r2, r5
 8008cc4:	4633      	mov	r3, r6
 8008cc6:	484e      	ldr	r0, [pc, #312]	; (8008e00 <cppLoop+0x960>)
 8008cc8:	f7f8 fa24 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 8008ccc:	484d      	ldr	r0, [pc, #308]	; (8008e04 <cppLoop+0x964>)
 8008cce:	f7f9 f93d 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b04      	cmp	r3, #4
 8008cd6:	bf0c      	ite	eq
 8008cd8:	2301      	moveq	r3, #1
 8008cda:	2300      	movne	r3, #0
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d022      	beq.n	8008d28 <cppLoop+0x888>
			led.LR(-1, 1);
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8008ce8:	4841      	ldr	r0, [pc, #260]	; (8008df0 <cppLoop+0x950>)
 8008cea:	f7f9 fa4f 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008cee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008cf2:	f002 fd33 	bl	800b75c <HAL_Delay>

			selector_gain++;
 8008cf6:	4b44      	ldr	r3, [pc, #272]	; (8008e08 <cppLoop+0x968>)
 8008cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	3301      	adds	r3, #1
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	b21a      	sxth	r2, r3
 8008d04:	4b40      	ldr	r3, [pc, #256]	; (8008e08 <cppLoop+0x968>)
 8008d06:	801a      	strh	r2, [r3, #0]
			if(selector_gain >= 3) selector_gain = 0;
 8008d08:	4b3f      	ldr	r3, [pc, #252]	; (8008e08 <cppLoop+0x968>)
 8008d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	dd02      	ble.n	8008d18 <cppLoop+0x878>
 8008d12:	4b3d      	ldr	r3, [pc, #244]	; (8008e08 <cppLoop+0x968>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f04f 31ff 	mov.w	r1, #4294967295
 8008d1e:	4834      	ldr	r0, [pc, #208]	; (8008df0 <cppLoop+0x950>)
 8008d20:	f7f9 fa34 	bl	800218c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 8008d24:	f002 bbc4 	b.w	800b4b0 <cppLoop+0x3010>
		else if(joy_stick.getValue() == JOY_R){
 8008d28:	4836      	ldr	r0, [pc, #216]	; (8008e04 <cppLoop+0x964>)
 8008d2a:	f7f9 f90f 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b10      	cmp	r3, #16
 8008d32:	bf0c      	ite	eq
 8008d34:	2301      	moveq	r3, #1
 8008d36:	2300      	movne	r3, #0
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	f000 8089 	beq.w	8008e52 <cppLoop+0x9b2>
			led.LR(-1, 1);
 8008d40:	2201      	movs	r2, #1
 8008d42:	f04f 31ff 	mov.w	r1, #4294967295
 8008d46:	482a      	ldr	r0, [pc, #168]	; (8008df0 <cppLoop+0x950>)
 8008d48:	f7f9 fa20 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008d4c:	2064      	movs	r0, #100	; 0x64
 8008d4e:	f002 fd05 	bl	800b75c <HAL_Delay>
			if(selector_gain == 0){
 8008d52:	4b2d      	ldr	r3, [pc, #180]	; (8008e08 <cppLoop+0x968>)
 8008d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d113      	bne.n	8008d84 <cppLoop+0x8e4>
				adj_kp_slow = adj_kp_slow + 0.000001;
 8008d5c:	4b2b      	ldr	r3, [pc, #172]	; (8008e0c <cppLoop+0x96c>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7f7 fc09 	bl	8000578 <__aeabi_f2d>
 8008d66:	a314      	add	r3, pc, #80	; (adr r3, 8008db8 <cppLoop+0x918>)
 8008d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6c:	f7f7 faa6 	bl	80002bc <__adddf3>
 8008d70:	4603      	mov	r3, r0
 8008d72:	460c      	mov	r4, r1
 8008d74:	4618      	mov	r0, r3
 8008d76:	4621      	mov	r1, r4
 8008d78:	f7f7 ff4e 	bl	8000c18 <__aeabi_d2f>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	4b23      	ldr	r3, [pc, #140]	; (8008e0c <cppLoop+0x96c>)
 8008d80:	601a      	str	r2, [r3, #0]
 8008d82:	e05a      	b.n	8008e3a <cppLoop+0x99a>
			else if(selector_gain == 1){
 8008d84:	4b20      	ldr	r3, [pc, #128]	; (8008e08 <cppLoop+0x968>)
 8008d86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d142      	bne.n	8008e14 <cppLoop+0x974>
				adj_ki_slow = adj_ki_slow + 0.00001;
 8008d8e:	4b20      	ldr	r3, [pc, #128]	; (8008e10 <cppLoop+0x970>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7f7 fbf0 	bl	8000578 <__aeabi_f2d>
 8008d98:	a309      	add	r3, pc, #36	; (adr r3, 8008dc0 <cppLoop+0x920>)
 8008d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9e:	f7f7 fa8d 	bl	80002bc <__adddf3>
 8008da2:	4603      	mov	r3, r0
 8008da4:	460c      	mov	r4, r1
 8008da6:	4618      	mov	r0, r3
 8008da8:	4621      	mov	r1, r4
 8008daa:	f7f7 ff35 	bl	8000c18 <__aeabi_d2f>
 8008dae:	4602      	mov	r2, r0
 8008db0:	4b17      	ldr	r3, [pc, #92]	; (8008e10 <cppLoop+0x970>)
 8008db2:	601a      	str	r2, [r3, #0]
 8008db4:	e041      	b.n	8008e3a <cppLoop+0x99a>
 8008db6:	bf00      	nop
 8008db8:	a0b5ed8d 	.word	0xa0b5ed8d
 8008dbc:	3eb0c6f7 	.word	0x3eb0c6f7
 8008dc0:	88e368f1 	.word	0x88e368f1
 8008dc4:	3ee4f8b5 	.word	0x3ee4f8b5
 8008dc8:	20047620 	.word	0x20047620
 8008dcc:	200209d4 	.word	0x200209d4
 8008dd0:	2004761c 	.word	0x2004761c
 8008dd4:	20047628 	.word	0x20047628
 8008dd8:	20047624 	.word	0x20047624
 8008ddc:	20047630 	.word	0x20047630
 8008de0:	2004762c 	.word	0x2004762c
 8008de4:	20047638 	.word	0x20047638
 8008de8:	20047634 	.word	0x20047634
 8008dec:	20000550 	.word	0x20000550
 8008df0:	20000558 	.word	0x20000558
 8008df4:	461c4000 	.word	0x461c4000
 8008df8:	0801a930 	.word	0x0801a930
 8008dfc:	447a0000 	.word	0x447a0000
 8008e00:	0801a93c 	.word	0x0801a93c
 8008e04:	2000054c 	.word	0x2000054c
 8008e08:	2004757c 	.word	0x2004757c
 8008e0c:	2004759c 	.word	0x2004759c
 8008e10:	200475a4 	.word	0x200475a4
				adj_kd_slow = adj_kd_slow + 0.000001;
 8008e14:	4bc2      	ldr	r3, [pc, #776]	; (8009120 <cppLoop+0xc80>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7f7 fbad 	bl	8000578 <__aeabi_f2d>
 8008e1e:	a3bc      	add	r3, pc, #752	; (adr r3, 8009110 <cppLoop+0xc70>)
 8008e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e24:	f7f7 fa4a 	bl	80002bc <__adddf3>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	460c      	mov	r4, r1
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	4621      	mov	r1, r4
 8008e30:	f7f7 fef2 	bl	8000c18 <__aeabi_d2f>
 8008e34:	4602      	mov	r2, r0
 8008e36:	4bba      	ldr	r3, [pc, #744]	; (8009120 <cppLoop+0xc80>)
 8008e38:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008e3a:	2152      	movs	r1, #82	; 0x52
 8008e3c:	48b9      	ldr	r0, [pc, #740]	; (8009124 <cppLoop+0xc84>)
 8008e3e:	f7f9 f8e9 	bl	8002014 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008e42:	2200      	movs	r2, #0
 8008e44:	f04f 31ff 	mov.w	r1, #4294967295
 8008e48:	48b6      	ldr	r0, [pc, #728]	; (8009124 <cppLoop+0xc84>)
 8008e4a:	f7f9 f99f 	bl	800218c <_ZN3LED2LREaa>
		break;
 8008e4e:	f002 bb2f 	b.w	800b4b0 <cppLoop+0x3010>
		else if(joy_stick.getValue() == JOY_L){
 8008e52:	48b5      	ldr	r0, [pc, #724]	; (8009128 <cppLoop+0xc88>)
 8008e54:	f7f9 f87a 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	bf0c      	ite	eq
 8008e5e:	2301      	moveq	r3, #1
 8008e60:	2300      	movne	r3, #0
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d059      	beq.n	8008f1c <cppLoop+0xa7c>
			led.LR(-1, 1);
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f04f 31ff 	mov.w	r1, #4294967295
 8008e6e:	48ad      	ldr	r0, [pc, #692]	; (8009124 <cppLoop+0xc84>)
 8008e70:	f7f9 f98c 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008e74:	2064      	movs	r0, #100	; 0x64
 8008e76:	f002 fc71 	bl	800b75c <HAL_Delay>
			if(selector_gain == 0){
 8008e7a:	4bac      	ldr	r3, [pc, #688]	; (800912c <cppLoop+0xc8c>)
 8008e7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d113      	bne.n	8008eac <cppLoop+0xa0c>
				adj_kp_slow = adj_kp_slow - 0.000001;
 8008e84:	4baa      	ldr	r3, [pc, #680]	; (8009130 <cppLoop+0xc90>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7f7 fb75 	bl	8000578 <__aeabi_f2d>
 8008e8e:	a3a0      	add	r3, pc, #640	; (adr r3, 8009110 <cppLoop+0xc70>)
 8008e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e94:	f7f7 fa10 	bl	80002b8 <__aeabi_dsub>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	f7f7 feba 	bl	8000c18 <__aeabi_d2f>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	4ba2      	ldr	r3, [pc, #648]	; (8009130 <cppLoop+0xc90>)
 8008ea8:	601a      	str	r2, [r3, #0]
 8008eaa:	e02b      	b.n	8008f04 <cppLoop+0xa64>
			else if(selector_gain == 1){
 8008eac:	4b9f      	ldr	r3, [pc, #636]	; (800912c <cppLoop+0xc8c>)
 8008eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d113      	bne.n	8008ede <cppLoop+0xa3e>
				adj_ki_slow = adj_ki_slow - 0.00001;
 8008eb6:	4b9f      	ldr	r3, [pc, #636]	; (8009134 <cppLoop+0xc94>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7f7 fb5c 	bl	8000578 <__aeabi_f2d>
 8008ec0:	a395      	add	r3, pc, #596	; (adr r3, 8009118 <cppLoop+0xc78>)
 8008ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec6:	f7f7 f9f7 	bl	80002b8 <__aeabi_dsub>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	460c      	mov	r4, r1
 8008ece:	4618      	mov	r0, r3
 8008ed0:	4621      	mov	r1, r4
 8008ed2:	f7f7 fea1 	bl	8000c18 <__aeabi_d2f>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	4b96      	ldr	r3, [pc, #600]	; (8009134 <cppLoop+0xc94>)
 8008eda:	601a      	str	r2, [r3, #0]
 8008edc:	e012      	b.n	8008f04 <cppLoop+0xa64>
				adj_kd_slow = adj_kd_slow - 0.000001;
 8008ede:	4b90      	ldr	r3, [pc, #576]	; (8009120 <cppLoop+0xc80>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7f7 fb48 	bl	8000578 <__aeabi_f2d>
 8008ee8:	a389      	add	r3, pc, #548	; (adr r3, 8009110 <cppLoop+0xc70>)
 8008eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eee:	f7f7 f9e3 	bl	80002b8 <__aeabi_dsub>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	460c      	mov	r4, r1
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	4621      	mov	r1, r4
 8008efa:	f7f7 fe8d 	bl	8000c18 <__aeabi_d2f>
 8008efe:	4602      	mov	r2, r0
 8008f00:	4b87      	ldr	r3, [pc, #540]	; (8009120 <cppLoop+0xc80>)
 8008f02:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008f04:	2152      	movs	r1, #82	; 0x52
 8008f06:	4887      	ldr	r0, [pc, #540]	; (8009124 <cppLoop+0xc84>)
 8008f08:	f7f9 f884 	bl	8002014 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f04f 31ff 	mov.w	r1, #4294967295
 8008f12:	4884      	ldr	r0, [pc, #528]	; (8009124 <cppLoop+0xc84>)
 8008f14:	f7f9 f93a 	bl	800218c <_ZN3LED2LREaa>
		break;
 8008f18:	f002 baca 	b.w	800b4b0 <cppLoop+0x3010>
		else if(joy_stick.getValue() == JOY_C){
 8008f1c:	4882      	ldr	r0, [pc, #520]	; (8009128 <cppLoop+0xc88>)
 8008f1e:	f7f9 f815 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	bf0c      	ite	eq
 8008f28:	2301      	moveq	r3, #1
 8008f2a:	2300      	movne	r3, #0
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	f002 82be 	beq.w	800b4b0 <cppLoop+0x3010>
			led.LR(-1, 1);
 8008f34:	2201      	movs	r2, #1
 8008f36:	f04f 31ff 	mov.w	r1, #4294967295
 8008f3a:	487a      	ldr	r0, [pc, #488]	; (8009124 <cppLoop+0xc84>)
 8008f3c:	f7f9 f926 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008f40:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008f44:	f002 fc0a 	bl	800b75c <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 8008f48:	2300      	movs	r3, #0
 8008f4a:	9300      	str	r3, [sp, #0]
 8008f4c:	4b78      	ldr	r3, [pc, #480]	; (8009130 <cppLoop+0xc90>)
 8008f4e:	2201      	movs	r2, #1
 8008f50:	4979      	ldr	r1, [pc, #484]	; (8009138 <cppLoop+0xc98>)
 8008f52:	487a      	ldr	r0, [pc, #488]	; (800913c <cppLoop+0xc9c>)
 8008f54:	f7f8 fbfe 	bl	8001754 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 8008f58:	2300      	movs	r3, #0
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	4b75      	ldr	r3, [pc, #468]	; (8009134 <cppLoop+0xc94>)
 8008f5e:	2201      	movs	r2, #1
 8008f60:	4977      	ldr	r1, [pc, #476]	; (8009140 <cppLoop+0xca0>)
 8008f62:	4876      	ldr	r0, [pc, #472]	; (800913c <cppLoop+0xc9c>)
 8008f64:	f7f8 fbf6 	bl	8001754 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 8008f68:	2300      	movs	r3, #0
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	4b6c      	ldr	r3, [pc, #432]	; (8009120 <cppLoop+0xc80>)
 8008f6e:	2201      	movs	r2, #1
 8008f70:	4974      	ldr	r1, [pc, #464]	; (8009144 <cppLoop+0xca4>)
 8008f72:	4872      	ldr	r0, [pc, #456]	; (800913c <cppLoop+0xc9c>)
 8008f74:	f7f8 fbee 	bl	8001754 <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 8008f78:	4b6d      	ldr	r3, [pc, #436]	; (8009130 <cppLoop+0xc90>)
 8008f7a:	edd3 7a00 	vldr	s15, [r3]
 8008f7e:	4b6d      	ldr	r3, [pc, #436]	; (8009134 <cppLoop+0xc94>)
 8008f80:	ed93 7a00 	vldr	s14, [r3]
 8008f84:	4b66      	ldr	r3, [pc, #408]	; (8009120 <cppLoop+0xc80>)
 8008f86:	edd3 6a00 	vldr	s13, [r3]
 8008f8a:	eeb0 1a66 	vmov.f32	s2, s13
 8008f8e:	eef0 0a47 	vmov.f32	s1, s14
 8008f92:	eeb0 0a67 	vmov.f32	s0, s15
 8008f96:	486c      	ldr	r0, [pc, #432]	; (8009148 <cppLoop+0xca8>)
 8008f98:	f7fa ff78 	bl	8003e8c <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f04f 31ff 	mov.w	r1, #4294967295
 8008fa2:	4860      	ldr	r0, [pc, #384]	; (8009124 <cppLoop+0xc84>)
 8008fa4:	f7f9 f8f2 	bl	800218c <_ZN3LED2LREaa>
		break;
 8008fa8:	f002 ba82 	b.w	800b4b0 <cppLoop+0x3010>
	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Gain setting 2 -----------------------*/
	/*-------------------------------------------------------------------------*/

	case 1:
		led.fullColor('W');
 8008fac:	2157      	movs	r1, #87	; 0x57
 8008fae:	485d      	ldr	r0, [pc, #372]	; (8009124 <cppLoop+0xc84>)
 8008fb0:	f7f9 f830 	bl	8002014 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008fb4:	f7f8 f874 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008fb8:	2100      	movs	r1, #0
 8008fba:	2000      	movs	r0, #0
 8008fbc:	f7f8 f880 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast%4.2lf", abs(line_trace.getKp()*10000));
 8008fc0:	4861      	ldr	r0, [pc, #388]	; (8009148 <cppLoop+0xca8>)
 8008fc2:	f7fa ff36 	bl	8003e32 <_ZN9LineTrace5getKpEv>
 8008fc6:	eeb0 7a40 	vmov.f32	s14, s0
 8008fca:	eddf 7a60 	vldr	s15, [pc, #384]	; 800914c <cppLoop+0xcac>
 8008fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fd2:	eeb0 0a67 	vmov.f32	s0, s15
 8008fd6:	f7f9 fbdf 	bl	8002798 <_ZSt3absf>
 8008fda:	ee10 3a10 	vmov	r3, s0
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7f7 faca 	bl	8000578 <__aeabi_f2d>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	460c      	mov	r4, r1
 8008fe8:	461a      	mov	r2, r3
 8008fea:	4623      	mov	r3, r4
 8008fec:	4858      	ldr	r0, [pc, #352]	; (8009150 <cppLoop+0xcb0>)
 8008fee:	f7f8 f891 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008ff2:	2101      	movs	r1, #1
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	f7f8 f863 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKi()*1000), abs(line_trace.getKd()*10000));
 8008ffa:	4853      	ldr	r0, [pc, #332]	; (8009148 <cppLoop+0xca8>)
 8008ffc:	f7fa ff28 	bl	8003e50 <_ZN9LineTrace5getKiEv>
 8009000:	eeb0 7a40 	vmov.f32	s14, s0
 8009004:	eddf 7a53 	vldr	s15, [pc, #332]	; 8009154 <cppLoop+0xcb4>
 8009008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800900c:	eeb0 0a67 	vmov.f32	s0, s15
 8009010:	f7f9 fbc2 	bl	8002798 <_ZSt3absf>
 8009014:	ee10 3a10 	vmov	r3, s0
 8009018:	4618      	mov	r0, r3
 800901a:	f7f7 faad 	bl	8000578 <__aeabi_f2d>
 800901e:	4605      	mov	r5, r0
 8009020:	460e      	mov	r6, r1
 8009022:	4849      	ldr	r0, [pc, #292]	; (8009148 <cppLoop+0xca8>)
 8009024:	f7fa ff23 	bl	8003e6e <_ZN9LineTrace5getKdEv>
 8009028:	eeb0 7a40 	vmov.f32	s14, s0
 800902c:	eddf 7a47 	vldr	s15, [pc, #284]	; 800914c <cppLoop+0xcac>
 8009030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009034:	eeb0 0a67 	vmov.f32	s0, s15
 8009038:	f7f9 fbae 	bl	8002798 <_ZSt3absf>
 800903c:	ee10 3a10 	vmov	r3, s0
 8009040:	4618      	mov	r0, r3
 8009042:	f7f7 fa99 	bl	8000578 <__aeabi_f2d>
 8009046:	4603      	mov	r3, r0
 8009048:	460c      	mov	r4, r1
 800904a:	e9cd 3400 	strd	r3, r4, [sp]
 800904e:	462a      	mov	r2, r5
 8009050:	4633      	mov	r3, r6
 8009052:	4841      	ldr	r0, [pc, #260]	; (8009158 <cppLoop+0xcb8>)
 8009054:	f7f8 f85e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 8009058:	4833      	ldr	r0, [pc, #204]	; (8009128 <cppLoop+0xc88>)
 800905a:	f7f8 ff77 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800905e:	4603      	mov	r3, r0
 8009060:	2b04      	cmp	r3, #4
 8009062:	bf0c      	ite	eq
 8009064:	2301      	moveq	r3, #1
 8009066:	2300      	movne	r3, #0
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b00      	cmp	r3, #0
 800906c:	d022      	beq.n	80090b4 <cppLoop+0xc14>
			led.LR(-1, 1);
 800906e:	2201      	movs	r2, #1
 8009070:	f04f 31ff 	mov.w	r1, #4294967295
 8009074:	482b      	ldr	r0, [pc, #172]	; (8009124 <cppLoop+0xc84>)
 8009076:	f7f9 f889 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(300);
 800907a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800907e:	f002 fb6d 	bl	800b75c <HAL_Delay>

			selector_gain++;
 8009082:	4b2a      	ldr	r3, [pc, #168]	; (800912c <cppLoop+0xc8c>)
 8009084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009088:	b29b      	uxth	r3, r3
 800908a:	3301      	adds	r3, #1
 800908c:	b29b      	uxth	r3, r3
 800908e:	b21a      	sxth	r2, r3
 8009090:	4b26      	ldr	r3, [pc, #152]	; (800912c <cppLoop+0xc8c>)
 8009092:	801a      	strh	r2, [r3, #0]
			if(selector_gain >= 3) selector_gain = 0;
 8009094:	4b25      	ldr	r3, [pc, #148]	; (800912c <cppLoop+0xc8c>)
 8009096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800909a:	2b02      	cmp	r3, #2
 800909c:	dd02      	ble.n	80090a4 <cppLoop+0xc04>
 800909e:	4b23      	ldr	r3, [pc, #140]	; (800912c <cppLoop+0xc8c>)
 80090a0:	2200      	movs	r2, #0
 80090a2:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80090a4:	2200      	movs	r2, #0
 80090a6:	f04f 31ff 	mov.w	r1, #4294967295
 80090aa:	481e      	ldr	r0, [pc, #120]	; (8009124 <cppLoop+0xc84>)
 80090ac:	f7f9 f86e 	bl	800218c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 80090b0:	f002 ba00 	b.w	800b4b4 <cppLoop+0x3014>
		else if(joy_stick.getValue() == JOY_R){
 80090b4:	481c      	ldr	r0, [pc, #112]	; (8009128 <cppLoop+0xc88>)
 80090b6:	f7f8 ff49 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b10      	cmp	r3, #16
 80090be:	bf0c      	ite	eq
 80090c0:	2301      	moveq	r3, #1
 80090c2:	2300      	movne	r3, #0
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f000 8082 	beq.w	80091d0 <cppLoop+0xd30>
			led.LR(-1, 1);
 80090cc:	2201      	movs	r2, #1
 80090ce:	f04f 31ff 	mov.w	r1, #4294967295
 80090d2:	4814      	ldr	r0, [pc, #80]	; (8009124 <cppLoop+0xc84>)
 80090d4:	f7f9 f85a 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80090d8:	2064      	movs	r0, #100	; 0x64
 80090da:	f002 fb3f 	bl	800b75c <HAL_Delay>
			if(selector_gain == 0){
 80090de:	4b13      	ldr	r3, [pc, #76]	; (800912c <cppLoop+0xc8c>)
 80090e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d13b      	bne.n	8009160 <cppLoop+0xcc0>
				adj_kp = adj_kp + 0.000001;
 80090e8:	4b1c      	ldr	r3, [pc, #112]	; (800915c <cppLoop+0xcbc>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7f7 fa43 	bl	8000578 <__aeabi_f2d>
 80090f2:	a307      	add	r3, pc, #28	; (adr r3, 8009110 <cppLoop+0xc70>)
 80090f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f8:	f7f7 f8e0 	bl	80002bc <__adddf3>
 80090fc:	4603      	mov	r3, r0
 80090fe:	460c      	mov	r4, r1
 8009100:	4618      	mov	r0, r3
 8009102:	4621      	mov	r1, r4
 8009104:	f7f7 fd88 	bl	8000c18 <__aeabi_d2f>
 8009108:	4602      	mov	r2, r0
 800910a:	4b14      	ldr	r3, [pc, #80]	; (800915c <cppLoop+0xcbc>)
 800910c:	601a      	str	r2, [r3, #0]
 800910e:	e053      	b.n	80091b8 <cppLoop+0xd18>
 8009110:	a0b5ed8d 	.word	0xa0b5ed8d
 8009114:	3eb0c6f7 	.word	0x3eb0c6f7
 8009118:	88e368f1 	.word	0x88e368f1
 800911c:	3ee4f8b5 	.word	0x3ee4f8b5
 8009120:	200475ac 	.word	0x200475ac
 8009124:	20000558 	.word	0x20000558
 8009128:	2000054c 	.word	0x2000054c
 800912c:	2004757c 	.word	0x2004757c
 8009130:	2004759c 	.word	0x2004759c
 8009134:	200475a4 	.word	0x200475a4
 8009138:	0801a94c 	.word	0x0801a94c
 800913c:	0801a958 	.word	0x0801a958
 8009140:	0801a960 	.word	0x0801a960
 8009144:	0801a96c 	.word	0x0801a96c
 8009148:	200209d4 	.word	0x200209d4
 800914c:	461c4000 	.word	0x461c4000
 8009150:	0801a978 	.word	0x0801a978
 8009154:	447a0000 	.word	0x447a0000
 8009158:	0801a93c 	.word	0x0801a93c
 800915c:	20047584 	.word	0x20047584
			else if(selector_gain == 1){
 8009160:	4b77      	ldr	r3, [pc, #476]	; (8009340 <cppLoop+0xea0>)
 8009162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009166:	2b01      	cmp	r3, #1
 8009168:	d113      	bne.n	8009192 <cppLoop+0xcf2>
				adj_ki = adj_ki + 0.00001;
 800916a:	4b76      	ldr	r3, [pc, #472]	; (8009344 <cppLoop+0xea4>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4618      	mov	r0, r3
 8009170:	f7f7 fa02 	bl	8000578 <__aeabi_f2d>
 8009174:	a36e      	add	r3, pc, #440	; (adr r3, 8009330 <cppLoop+0xe90>)
 8009176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917a:	f7f7 f89f 	bl	80002bc <__adddf3>
 800917e:	4603      	mov	r3, r0
 8009180:	460c      	mov	r4, r1
 8009182:	4618      	mov	r0, r3
 8009184:	4621      	mov	r1, r4
 8009186:	f7f7 fd47 	bl	8000c18 <__aeabi_d2f>
 800918a:	4602      	mov	r2, r0
 800918c:	4b6d      	ldr	r3, [pc, #436]	; (8009344 <cppLoop+0xea4>)
 800918e:	601a      	str	r2, [r3, #0]
 8009190:	e012      	b.n	80091b8 <cppLoop+0xd18>
				adj_kd = adj_kd + 0.000001;
 8009192:	4b6d      	ldr	r3, [pc, #436]	; (8009348 <cppLoop+0xea8>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4618      	mov	r0, r3
 8009198:	f7f7 f9ee 	bl	8000578 <__aeabi_f2d>
 800919c:	a366      	add	r3, pc, #408	; (adr r3, 8009338 <cppLoop+0xe98>)
 800919e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a2:	f7f7 f88b 	bl	80002bc <__adddf3>
 80091a6:	4603      	mov	r3, r0
 80091a8:	460c      	mov	r4, r1
 80091aa:	4618      	mov	r0, r3
 80091ac:	4621      	mov	r1, r4
 80091ae:	f7f7 fd33 	bl	8000c18 <__aeabi_d2f>
 80091b2:	4602      	mov	r2, r0
 80091b4:	4b64      	ldr	r3, [pc, #400]	; (8009348 <cppLoop+0xea8>)
 80091b6:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80091b8:	2152      	movs	r1, #82	; 0x52
 80091ba:	4864      	ldr	r0, [pc, #400]	; (800934c <cppLoop+0xeac>)
 80091bc:	f7f8 ff2a 	bl	8002014 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80091c0:	2200      	movs	r2, #0
 80091c2:	f04f 31ff 	mov.w	r1, #4294967295
 80091c6:	4861      	ldr	r0, [pc, #388]	; (800934c <cppLoop+0xeac>)
 80091c8:	f7f8 ffe0 	bl	800218c <_ZN3LED2LREaa>
		break;
 80091cc:	f002 b972 	b.w	800b4b4 <cppLoop+0x3014>
		else if(joy_stick.getValue() == JOY_L){
 80091d0:	485f      	ldr	r0, [pc, #380]	; (8009350 <cppLoop+0xeb0>)
 80091d2:	f7f8 febb 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b01      	cmp	r3, #1
 80091da:	bf0c      	ite	eq
 80091dc:	2301      	moveq	r3, #1
 80091de:	2300      	movne	r3, #0
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d059      	beq.n	800929a <cppLoop+0xdfa>
			led.LR(-1, 1);
 80091e6:	2201      	movs	r2, #1
 80091e8:	f04f 31ff 	mov.w	r1, #4294967295
 80091ec:	4857      	ldr	r0, [pc, #348]	; (800934c <cppLoop+0xeac>)
 80091ee:	f7f8 ffcd 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80091f2:	2064      	movs	r0, #100	; 0x64
 80091f4:	f002 fab2 	bl	800b75c <HAL_Delay>
			if(selector_gain == 0){
 80091f8:	4b51      	ldr	r3, [pc, #324]	; (8009340 <cppLoop+0xea0>)
 80091fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d113      	bne.n	800922a <cppLoop+0xd8a>
				adj_kp = adj_kp - 0.000001;
 8009202:	4b54      	ldr	r3, [pc, #336]	; (8009354 <cppLoop+0xeb4>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4618      	mov	r0, r3
 8009208:	f7f7 f9b6 	bl	8000578 <__aeabi_f2d>
 800920c:	a34a      	add	r3, pc, #296	; (adr r3, 8009338 <cppLoop+0xe98>)
 800920e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009212:	f7f7 f851 	bl	80002b8 <__aeabi_dsub>
 8009216:	4603      	mov	r3, r0
 8009218:	460c      	mov	r4, r1
 800921a:	4618      	mov	r0, r3
 800921c:	4621      	mov	r1, r4
 800921e:	f7f7 fcfb 	bl	8000c18 <__aeabi_d2f>
 8009222:	4602      	mov	r2, r0
 8009224:	4b4b      	ldr	r3, [pc, #300]	; (8009354 <cppLoop+0xeb4>)
 8009226:	601a      	str	r2, [r3, #0]
 8009228:	e02b      	b.n	8009282 <cppLoop+0xde2>
			else if(selector_gain == 1){
 800922a:	4b45      	ldr	r3, [pc, #276]	; (8009340 <cppLoop+0xea0>)
 800922c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d113      	bne.n	800925c <cppLoop+0xdbc>
				adj_ki = adj_ki - 0.00001;
 8009234:	4b43      	ldr	r3, [pc, #268]	; (8009344 <cppLoop+0xea4>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4618      	mov	r0, r3
 800923a:	f7f7 f99d 	bl	8000578 <__aeabi_f2d>
 800923e:	a33c      	add	r3, pc, #240	; (adr r3, 8009330 <cppLoop+0xe90>)
 8009240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009244:	f7f7 f838 	bl	80002b8 <__aeabi_dsub>
 8009248:	4603      	mov	r3, r0
 800924a:	460c      	mov	r4, r1
 800924c:	4618      	mov	r0, r3
 800924e:	4621      	mov	r1, r4
 8009250:	f7f7 fce2 	bl	8000c18 <__aeabi_d2f>
 8009254:	4602      	mov	r2, r0
 8009256:	4b3b      	ldr	r3, [pc, #236]	; (8009344 <cppLoop+0xea4>)
 8009258:	601a      	str	r2, [r3, #0]
 800925a:	e012      	b.n	8009282 <cppLoop+0xde2>
				adj_kd = adj_kd - 0.000001;
 800925c:	4b3a      	ldr	r3, [pc, #232]	; (8009348 <cppLoop+0xea8>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4618      	mov	r0, r3
 8009262:	f7f7 f989 	bl	8000578 <__aeabi_f2d>
 8009266:	a334      	add	r3, pc, #208	; (adr r3, 8009338 <cppLoop+0xe98>)
 8009268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926c:	f7f7 f824 	bl	80002b8 <__aeabi_dsub>
 8009270:	4603      	mov	r3, r0
 8009272:	460c      	mov	r4, r1
 8009274:	4618      	mov	r0, r3
 8009276:	4621      	mov	r1, r4
 8009278:	f7f7 fcce 	bl	8000c18 <__aeabi_d2f>
 800927c:	4602      	mov	r2, r0
 800927e:	4b32      	ldr	r3, [pc, #200]	; (8009348 <cppLoop+0xea8>)
 8009280:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009282:	2152      	movs	r1, #82	; 0x52
 8009284:	4831      	ldr	r0, [pc, #196]	; (800934c <cppLoop+0xeac>)
 8009286:	f7f8 fec5 	bl	8002014 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800928a:	2200      	movs	r2, #0
 800928c:	f04f 31ff 	mov.w	r1, #4294967295
 8009290:	482e      	ldr	r0, [pc, #184]	; (800934c <cppLoop+0xeac>)
 8009292:	f7f8 ff7b 	bl	800218c <_ZN3LED2LREaa>
		break;
 8009296:	f002 b90d 	b.w	800b4b4 <cppLoop+0x3014>
		else if(joy_stick.getValue() == JOY_C){
 800929a:	482d      	ldr	r0, [pc, #180]	; (8009350 <cppLoop+0xeb0>)
 800929c:	f7f8 fe56 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	bf0c      	ite	eq
 80092a6:	2301      	moveq	r3, #1
 80092a8:	2300      	movne	r3, #0
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f002 8101 	beq.w	800b4b4 <cppLoop+0x3014>
			led.LR(-1, 1);
 80092b2:	2201      	movs	r2, #1
 80092b4:	f04f 31ff 	mov.w	r1, #4294967295
 80092b8:	4824      	ldr	r0, [pc, #144]	; (800934c <cppLoop+0xeac>)
 80092ba:	f7f8 ff67 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80092be:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80092c2:	f002 fa4b 	bl	800b75c <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 80092c6:	2300      	movs	r3, #0
 80092c8:	9300      	str	r3, [sp, #0]
 80092ca:	4b22      	ldr	r3, [pc, #136]	; (8009354 <cppLoop+0xeb4>)
 80092cc:	2201      	movs	r2, #1
 80092ce:	4922      	ldr	r1, [pc, #136]	; (8009358 <cppLoop+0xeb8>)
 80092d0:	4822      	ldr	r0, [pc, #136]	; (800935c <cppLoop+0xebc>)
 80092d2:	f7f8 fa3f 	bl	8001754 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 80092d6:	2300      	movs	r3, #0
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	4b1a      	ldr	r3, [pc, #104]	; (8009344 <cppLoop+0xea4>)
 80092dc:	2201      	movs	r2, #1
 80092de:	4920      	ldr	r1, [pc, #128]	; (8009360 <cppLoop+0xec0>)
 80092e0:	481e      	ldr	r0, [pc, #120]	; (800935c <cppLoop+0xebc>)
 80092e2:	f7f8 fa37 	bl	8001754 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 80092e6:	2300      	movs	r3, #0
 80092e8:	9300      	str	r3, [sp, #0]
 80092ea:	4b17      	ldr	r3, [pc, #92]	; (8009348 <cppLoop+0xea8>)
 80092ec:	2201      	movs	r2, #1
 80092ee:	491d      	ldr	r1, [pc, #116]	; (8009364 <cppLoop+0xec4>)
 80092f0:	481a      	ldr	r0, [pc, #104]	; (800935c <cppLoop+0xebc>)
 80092f2:	f7f8 fa2f 	bl	8001754 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 80092f6:	4b17      	ldr	r3, [pc, #92]	; (8009354 <cppLoop+0xeb4>)
 80092f8:	edd3 7a00 	vldr	s15, [r3]
 80092fc:	4b11      	ldr	r3, [pc, #68]	; (8009344 <cppLoop+0xea4>)
 80092fe:	ed93 7a00 	vldr	s14, [r3]
 8009302:	4b11      	ldr	r3, [pc, #68]	; (8009348 <cppLoop+0xea8>)
 8009304:	edd3 6a00 	vldr	s13, [r3]
 8009308:	eeb0 1a66 	vmov.f32	s2, s13
 800930c:	eef0 0a47 	vmov.f32	s1, s14
 8009310:	eeb0 0a67 	vmov.f32	s0, s15
 8009314:	4814      	ldr	r0, [pc, #80]	; (8009368 <cppLoop+0xec8>)
 8009316:	f7fa fd73 	bl	8003e00 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 800931a:	2200      	movs	r2, #0
 800931c:	f04f 31ff 	mov.w	r1, #4294967295
 8009320:	480a      	ldr	r0, [pc, #40]	; (800934c <cppLoop+0xeac>)
 8009322:	f7f8 ff33 	bl	800218c <_ZN3LED2LREaa>
		break;
 8009326:	f002 b8c5 	b.w	800b4b4 <cppLoop+0x3014>
 800932a:	bf00      	nop
 800932c:	f3af 8000 	nop.w
 8009330:	88e368f1 	.word	0x88e368f1
 8009334:	3ee4f8b5 	.word	0x3ee4f8b5
 8009338:	a0b5ed8d 	.word	0xa0b5ed8d
 800933c:	3eb0c6f7 	.word	0x3eb0c6f7
 8009340:	2004757c 	.word	0x2004757c
 8009344:	2004758c 	.word	0x2004758c
 8009348:	20047594 	.word	0x20047594
 800934c:	20000558 	.word	0x20000558
 8009350:	2000054c 	.word	0x2000054c
 8009354:	20047584 	.word	0x20047584
 8009358:	0801a984 	.word	0x0801a984
 800935c:	0801a958 	.word	0x0801a958
 8009360:	0801a98c 	.word	0x0801a98c
 8009364:	0801a994 	.word	0x0801a994
 8009368:	200209d4 	.word	0x200209d4

	/*-------------------------------------------------------------------------*/
	/*----------------------------------- First running -----------------------*/
	/*-------------------------------------------------------------------------*/
	case 2:
		led.fullColor('C');
 800936c:	2143      	movs	r1, #67	; 0x43
 800936e:	489e      	ldr	r0, [pc, #632]	; (80095e8 <cppLoop+0x1148>)
 8009370:	f7f8 fe50 	bl	8002014 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 8009374:	489d      	ldr	r0, [pc, #628]	; (80095ec <cppLoop+0x114c>)
 8009376:	f7f8 fde9 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800937a:	4603      	mov	r3, r0
 800937c:	2b04      	cmp	r3, #4
 800937e:	bf0c      	ite	eq
 8009380:	2301      	moveq	r3, #1
 8009382:	2300      	movne	r3, #0
 8009384:	b2db      	uxtb	r3, r3
 8009386:	2b00      	cmp	r3, #0
 8009388:	d020      	beq.n	80093cc <cppLoop+0xf2c>
			led.LR(-1, 1);
 800938a:	2201      	movs	r2, #1
 800938c:	f04f 31ff 	mov.w	r1, #4294967295
 8009390:	4895      	ldr	r0, [pc, #596]	; (80095e8 <cppLoop+0x1148>)
 8009392:	f7f8 fefb 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009396:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800939a:	f002 f9df 	bl	800b75c <HAL_Delay>

			selector_run++;
 800939e:	4b94      	ldr	r3, [pc, #592]	; (80095f0 <cppLoop+0x1150>)
 80093a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	3301      	adds	r3, #1
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	b21a      	sxth	r2, r3
 80093ac:	4b90      	ldr	r3, [pc, #576]	; (80095f0 <cppLoop+0x1150>)
 80093ae:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 80093b0:	4b8f      	ldr	r3, [pc, #572]	; (80095f0 <cppLoop+0x1150>)
 80093b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	dd02      	ble.n	80093c0 <cppLoop+0xf20>
 80093ba:	4b8d      	ldr	r3, [pc, #564]	; (80095f0 <cppLoop+0x1150>)
 80093bc:	2200      	movs	r2, #0
 80093be:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80093c0:	2200      	movs	r2, #0
 80093c2:	f04f 31ff 	mov.w	r1, #4294967295
 80093c6:	4888      	ldr	r0, [pc, #544]	; (80095e8 <cppLoop+0x1148>)
 80093c8:	f7f8 fee0 	bl	800218c <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 80093cc:	4b88      	ldr	r3, [pc, #544]	; (80095f0 <cppLoop+0x1150>)
 80093ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d15c      	bne.n	8009490 <cppLoop+0xff0>
			lcd_clear();
 80093d6:	f7f7 fe63 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 80093da:	2100      	movs	r1, #0
 80093dc:	2000      	movs	r0, #0
 80093de:	f7f7 fe6f 	bl	80010c0 <lcd_locate>
			lcd_printf("1:   ");
 80093e2:	4884      	ldr	r0, [pc, #528]	; (80095f4 <cppLoop+0x1154>)
 80093e4:	f7f7 fe96 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 80093e8:	2101      	movs	r1, #1
 80093ea:	2000      	movs	r0, #0
 80093ec:	f7f7 fe68 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_velocity);
 80093f0:	4b81      	ldr	r3, [pc, #516]	; (80095f8 <cppLoop+0x1158>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7f7 f8bf 	bl	8000578 <__aeabi_f2d>
 80093fa:	4603      	mov	r3, r0
 80093fc:	460c      	mov	r4, r1
 80093fe:	461a      	mov	r2, r3
 8009400:	4623      	mov	r3, r4
 8009402:	487e      	ldr	r0, [pc, #504]	; (80095fc <cppLoop+0x115c>)
 8009404:	f7f7 fe86 	bl	8001114 <lcd_printf>

			if(joy_stick.getValue() == JOY_C){
 8009408:	4878      	ldr	r0, [pc, #480]	; (80095ec <cppLoop+0x114c>)
 800940a:	f7f8 fd9f 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800940e:	4603      	mov	r3, r0
 8009410:	2b02      	cmp	r3, #2
 8009412:	bf0c      	ite	eq
 8009414:	2301      	moveq	r3, #1
 8009416:	2300      	movne	r3, #0
 8009418:	b2db      	uxtb	r3, r3
 800941a:	2b00      	cmp	r3, #0
 800941c:	f002 804c 	beq.w	800b4b8 <cppLoop+0x3018>
				HAL_Delay(500);
 8009420:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009424:	f002 f99a 	bl	800b75c <HAL_Delay>

				line_trace.setTargetVelocity(adj_velocity);
 8009428:	4b73      	ldr	r3, [pc, #460]	; (80095f8 <cppLoop+0x1158>)
 800942a:	edd3 7a00 	vldr	s15, [r3]
 800942e:	eeb0 0a67 	vmov.f32	s0, s15
 8009432:	4873      	ldr	r0, [pc, #460]	; (8009600 <cppLoop+0x1160>)
 8009434:	f7fa fd70 	bl	8003f18 <_ZN9LineTrace17setTargetVelocityEf>
				led.LR(1, -1);
 8009438:	f04f 32ff 	mov.w	r2, #4294967295
 800943c:	2101      	movs	r1, #1
 800943e:	486a      	ldr	r0, [pc, #424]	; (80095e8 <cppLoop+0x1148>)
 8009440:	f7f8 fea4 	bl	800218c <_ZN3LED2LREaa>

				// Record start
				HAL_Delay(1000);
 8009444:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009448:	f002 f988 	bl	800b75c <HAL_Delay>

				// Run
				line_trace.setMode(FIRST_RUNNING);
 800944c:	2100      	movs	r1, #0
 800944e:	486c      	ldr	r0, [pc, #432]	; (8009600 <cppLoop+0x1160>)
 8009450:	f7fb f840 	bl	80044d4 <_ZN9LineTrace7setModeEs>

				logger.resetLogsTim1();
 8009454:	486b      	ldr	r0, [pc, #428]	; (8009604 <cppLoop+0x1164>)
 8009456:	f7fb fef6 	bl	8005246 <_ZN6Logger13resetLogsTim1Ev>
				logger.resetLogsTim2();
 800945a:	486a      	ldr	r0, [pc, #424]	; (8009604 <cppLoop+0x1164>)
 800945c:	f7fb ff1b 	bl	8005296 <_ZN6Logger13resetLogsTim2Ev>

				line_trace.running();
 8009460:	4867      	ldr	r0, [pc, #412]	; (8009600 <cppLoop+0x1160>)
 8009462:	f7fb f887 	bl	8004574 <_ZN9LineTrace7runningEv>

				logger.stop();
 8009466:	4867      	ldr	r0, [pc, #412]	; (8009604 <cppLoop+0x1164>)
 8009468:	f7fb ff7e 	bl	8005368 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 800946c:	4a66      	ldr	r2, [pc, #408]	; (8009608 <cppLoop+0x1168>)
 800946e:	4967      	ldr	r1, [pc, #412]	; (800960c <cppLoop+0x116c>)
 8009470:	4864      	ldr	r0, [pc, #400]	; (8009604 <cppLoop+0x1164>)
 8009472:	f7fb fe12 	bl	800509a <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 8009476:	4a66      	ldr	r2, [pc, #408]	; (8009610 <cppLoop+0x1170>)
 8009478:	4964      	ldr	r1, [pc, #400]	; (800960c <cppLoop+0x116c>)
 800947a:	4862      	ldr	r0, [pc, #392]	; (8009604 <cppLoop+0x1164>)
 800947c:	f7fb fe21 	bl	80050c2 <_ZN6Logger9saveLogs2EPKcS1_>


				led.LR(0, -1);
 8009480:	f04f 32ff 	mov.w	r2, #4294967295
 8009484:	2100      	movs	r1, #0
 8009486:	4858      	ldr	r0, [pc, #352]	; (80095e8 <cppLoop+0x1148>)
 8009488:	f7f8 fe80 	bl	800218c <_ZN3LED2LREaa>

				led.LR(-1, 0);
			}
		}

		break;
 800948c:	f002 b814 	b.w	800b4b8 <cppLoop+0x3018>
			lcd_clear();
 8009490:	f7f7 fe06 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8009494:	2100      	movs	r1, #0
 8009496:	2000      	movs	r0, #0
 8009498:	f7f7 fe12 	bl	80010c0 <lcd_locate>
			lcd_printf("1: ");
 800949c:	485d      	ldr	r0, [pc, #372]	; (8009614 <cppLoop+0x1174>)
 800949e:	f7f7 fe39 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 80094a2:	2101      	movs	r1, #1
 80094a4:	2000      	movs	r0, #0
 80094a6:	f7f7 fe0b 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", adj_velocity);
 80094aa:	4b53      	ldr	r3, [pc, #332]	; (80095f8 <cppLoop+0x1158>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7f7 f862 	bl	8000578 <__aeabi_f2d>
 80094b4:	4603      	mov	r3, r0
 80094b6:	460c      	mov	r4, r1
 80094b8:	461a      	mov	r2, r3
 80094ba:	4623      	mov	r3, r4
 80094bc:	4856      	ldr	r0, [pc, #344]	; (8009618 <cppLoop+0x1178>)
 80094be:	f7f7 fe29 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_R){
 80094c2:	484a      	ldr	r0, [pc, #296]	; (80095ec <cppLoop+0x114c>)
 80094c4:	f7f8 fd42 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b10      	cmp	r3, #16
 80094cc:	bf0c      	ite	eq
 80094ce:	2301      	moveq	r3, #1
 80094d0:	2300      	movne	r3, #0
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d023      	beq.n	8009520 <cppLoop+0x1080>
				led.LR(-1, 1);
 80094d8:	2201      	movs	r2, #1
 80094da:	f04f 31ff 	mov.w	r1, #4294967295
 80094de:	4842      	ldr	r0, [pc, #264]	; (80095e8 <cppLoop+0x1148>)
 80094e0:	f7f8 fe54 	bl	800218c <_ZN3LED2LREaa>
				HAL_Delay(100);
 80094e4:	2064      	movs	r0, #100	; 0x64
 80094e6:	f002 f939 	bl	800b75c <HAL_Delay>
				adj_velocity = adj_velocity + 0.1;
 80094ea:	4b43      	ldr	r3, [pc, #268]	; (80095f8 <cppLoop+0x1158>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7f7 f842 	bl	8000578 <__aeabi_f2d>
 80094f4:	a33a      	add	r3, pc, #232	; (adr r3, 80095e0 <cppLoop+0x1140>)
 80094f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fa:	f7f6 fedf 	bl	80002bc <__adddf3>
 80094fe:	4603      	mov	r3, r0
 8009500:	460c      	mov	r4, r1
 8009502:	4618      	mov	r0, r3
 8009504:	4621      	mov	r1, r4
 8009506:	f7f7 fb87 	bl	8000c18 <__aeabi_d2f>
 800950a:	4602      	mov	r2, r0
 800950c:	4b3a      	ldr	r3, [pc, #232]	; (80095f8 <cppLoop+0x1158>)
 800950e:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8009510:	2200      	movs	r2, #0
 8009512:	f04f 31ff 	mov.w	r1, #4294967295
 8009516:	4834      	ldr	r0, [pc, #208]	; (80095e8 <cppLoop+0x1148>)
 8009518:	f7f8 fe38 	bl	800218c <_ZN3LED2LREaa>
		break;
 800951c:	f001 bfcc 	b.w	800b4b8 <cppLoop+0x3018>
			else if(joy_stick.getValue() == JOY_L){
 8009520:	4832      	ldr	r0, [pc, #200]	; (80095ec <cppLoop+0x114c>)
 8009522:	f7f8 fd13 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 8009526:	4603      	mov	r3, r0
 8009528:	2b01      	cmp	r3, #1
 800952a:	bf0c      	ite	eq
 800952c:	2301      	moveq	r3, #1
 800952e:	2300      	movne	r3, #0
 8009530:	b2db      	uxtb	r3, r3
 8009532:	2b00      	cmp	r3, #0
 8009534:	d023      	beq.n	800957e <cppLoop+0x10de>
				led.LR(-1, 1);
 8009536:	2201      	movs	r2, #1
 8009538:	f04f 31ff 	mov.w	r1, #4294967295
 800953c:	482a      	ldr	r0, [pc, #168]	; (80095e8 <cppLoop+0x1148>)
 800953e:	f7f8 fe25 	bl	800218c <_ZN3LED2LREaa>
				HAL_Delay(100);
 8009542:	2064      	movs	r0, #100	; 0x64
 8009544:	f002 f90a 	bl	800b75c <HAL_Delay>
				adj_velocity = adj_velocity - 0.1;
 8009548:	4b2b      	ldr	r3, [pc, #172]	; (80095f8 <cppLoop+0x1158>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4618      	mov	r0, r3
 800954e:	f7f7 f813 	bl	8000578 <__aeabi_f2d>
 8009552:	a323      	add	r3, pc, #140	; (adr r3, 80095e0 <cppLoop+0x1140>)
 8009554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009558:	f7f6 feae 	bl	80002b8 <__aeabi_dsub>
 800955c:	4603      	mov	r3, r0
 800955e:	460c      	mov	r4, r1
 8009560:	4618      	mov	r0, r3
 8009562:	4621      	mov	r1, r4
 8009564:	f7f7 fb58 	bl	8000c18 <__aeabi_d2f>
 8009568:	4602      	mov	r2, r0
 800956a:	4b23      	ldr	r3, [pc, #140]	; (80095f8 <cppLoop+0x1158>)
 800956c:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 800956e:	2200      	movs	r2, #0
 8009570:	f04f 31ff 	mov.w	r1, #4294967295
 8009574:	481c      	ldr	r0, [pc, #112]	; (80095e8 <cppLoop+0x1148>)
 8009576:	f7f8 fe09 	bl	800218c <_ZN3LED2LREaa>
		break;
 800957a:	f001 bf9d 	b.w	800b4b8 <cppLoop+0x3018>
			else if(joy_stick.getValue() == JOY_C){
 800957e:	481b      	ldr	r0, [pc, #108]	; (80095ec <cppLoop+0x114c>)
 8009580:	f7f8 fce4 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 8009584:	4603      	mov	r3, r0
 8009586:	2b02      	cmp	r3, #2
 8009588:	bf0c      	ite	eq
 800958a:	2301      	moveq	r3, #1
 800958c:	2300      	movne	r3, #0
 800958e:	b2db      	uxtb	r3, r3
 8009590:	2b00      	cmp	r3, #0
 8009592:	f001 8791 	beq.w	800b4b8 <cppLoop+0x3018>
				led.LR(-1, 1);
 8009596:	2201      	movs	r2, #1
 8009598:	f04f 31ff 	mov.w	r1, #4294967295
 800959c:	4812      	ldr	r0, [pc, #72]	; (80095e8 <cppLoop+0x1148>)
 800959e:	f7f8 fdf5 	bl	800218c <_ZN3LED2LREaa>
				HAL_Delay(300);
 80095a2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80095a6:	f002 f8d9 	bl	800b75c <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL.TXT", 1, &adj_velocity, OVER_WRITE);
 80095aa:	2300      	movs	r3, #0
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	4b12      	ldr	r3, [pc, #72]	; (80095f8 <cppLoop+0x1158>)
 80095b0:	2201      	movs	r2, #1
 80095b2:	491a      	ldr	r1, [pc, #104]	; (800961c <cppLoop+0x117c>)
 80095b4:	481a      	ldr	r0, [pc, #104]	; (8009620 <cppLoop+0x1180>)
 80095b6:	f7f8 f8cd 	bl	8001754 <sd_write_array_float>
				line_trace.setTargetVelocity(adj_velocity);
 80095ba:	4b0f      	ldr	r3, [pc, #60]	; (80095f8 <cppLoop+0x1158>)
 80095bc:	edd3 7a00 	vldr	s15, [r3]
 80095c0:	eeb0 0a67 	vmov.f32	s0, s15
 80095c4:	480e      	ldr	r0, [pc, #56]	; (8009600 <cppLoop+0x1160>)
 80095c6:	f7fa fca7 	bl	8003f18 <_ZN9LineTrace17setTargetVelocityEf>
				led.LR(-1, 0);
 80095ca:	2200      	movs	r2, #0
 80095cc:	f04f 31ff 	mov.w	r1, #4294967295
 80095d0:	4805      	ldr	r0, [pc, #20]	; (80095e8 <cppLoop+0x1148>)
 80095d2:	f7f8 fddb 	bl	800218c <_ZN3LED2LREaa>
		break;
 80095d6:	f001 bf6f 	b.w	800b4b8 <cppLoop+0x3018>
 80095da:	bf00      	nop
 80095dc:	f3af 8000 	nop.w
 80095e0:	9999999a 	.word	0x9999999a
 80095e4:	3fb99999 	.word	0x3fb99999
 80095e8:	20000558 	.word	0x20000558
 80095ec:	2000054c 	.word	0x2000054c
 80095f0:	2004757e 	.word	0x2004757e
 80095f4:	0801a99c 	.word	0x0801a99c
 80095f8:	200475b4 	.word	0x200475b4
 80095fc:	0801a9a4 	.word	0x0801a9a4
 8009600:	200209d4 	.word	0x200209d4
 8009604:	2000057c 	.word	0x2000057c
 8009608:	0801a9b0 	.word	0x0801a9b0
 800960c:	0801a9bc 	.word	0x0801a9bc
 8009610:	0801a9c8 	.word	0x0801a9c8
 8009614:	0801a9d4 	.word	0x0801a9d4
 8009618:	0801a9d8 	.word	0x0801a9d8
 800961c:	0801a9e4 	.word	0x0801a9e4
 8009620:	0801a958 	.word	0x0801a958

	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Second running -----------------------*/
	/*-------------------------------------------------------------------------*/
	case 3:
		led.fullColor('Y');
 8009624:	2159      	movs	r1, #89	; 0x59
 8009626:	48be      	ldr	r0, [pc, #760]	; (8009920 <cppLoop+0x1480>)
 8009628:	f7f8 fcf4 	bl	8002014 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 800962c:	48bd      	ldr	r0, [pc, #756]	; (8009924 <cppLoop+0x1484>)
 800962e:	f7f8 fc8d 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 8009632:	4603      	mov	r3, r0
 8009634:	2b04      	cmp	r3, #4
 8009636:	bf0c      	ite	eq
 8009638:	2301      	moveq	r3, #1
 800963a:	2300      	movne	r3, #0
 800963c:	b2db      	uxtb	r3, r3
 800963e:	2b00      	cmp	r3, #0
 8009640:	d020      	beq.n	8009684 <cppLoop+0x11e4>
			led.LR(-1, 1);
 8009642:	2201      	movs	r2, #1
 8009644:	f04f 31ff 	mov.w	r1, #4294967295
 8009648:	48b5      	ldr	r0, [pc, #724]	; (8009920 <cppLoop+0x1480>)
 800964a:	f7f8 fd9f 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(300);
 800964e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009652:	f002 f883 	bl	800b75c <HAL_Delay>

			selector_run++;
 8009656:	4bb4      	ldr	r3, [pc, #720]	; (8009928 <cppLoop+0x1488>)
 8009658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800965c:	b29b      	uxth	r3, r3
 800965e:	3301      	adds	r3, #1
 8009660:	b29b      	uxth	r3, r3
 8009662:	b21a      	sxth	r2, r3
 8009664:	4bb0      	ldr	r3, [pc, #704]	; (8009928 <cppLoop+0x1488>)
 8009666:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 8009668:	4baf      	ldr	r3, [pc, #700]	; (8009928 <cppLoop+0x1488>)
 800966a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800966e:	2b01      	cmp	r3, #1
 8009670:	dd02      	ble.n	8009678 <cppLoop+0x11d8>
 8009672:	4bad      	ldr	r3, [pc, #692]	; (8009928 <cppLoop+0x1488>)
 8009674:	2200      	movs	r2, #0
 8009676:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009678:	2200      	movs	r2, #0
 800967a:	f04f 31ff 	mov.w	r1, #4294967295
 800967e:	48a8      	ldr	r0, [pc, #672]	; (8009920 <cppLoop+0x1480>)
 8009680:	f7f8 fd84 	bl	800218c <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 8009684:	4ba8      	ldr	r3, [pc, #672]	; (8009928 <cppLoop+0x1488>)
 8009686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d178      	bne.n	8009780 <cppLoop+0x12e0>
			lcd_clear();
 800968e:	f7f7 fd07 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8009692:	2100      	movs	r1, #0
 8009694:	2000      	movs	r0, #0
 8009696:	f7f7 fd13 	bl	80010c0 <lcd_locate>
			lcd_printf("2:   %3.1f", adj_max_velocity);
 800969a:	4ba4      	ldr	r3, [pc, #656]	; (800992c <cppLoop+0x148c>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4618      	mov	r0, r3
 80096a0:	f7f6 ff6a 	bl	8000578 <__aeabi_f2d>
 80096a4:	4603      	mov	r3, r0
 80096a6:	460c      	mov	r4, r1
 80096a8:	461a      	mov	r2, r3
 80096aa:	4623      	mov	r3, r4
 80096ac:	48a0      	ldr	r0, [pc, #640]	; (8009930 <cppLoop+0x1490>)
 80096ae:	f7f7 fd31 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 80096b2:	2101      	movs	r1, #1
 80096b4:	2000      	movs	r0, #0
 80096b6:	f7f7 fd03 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_min_velocity);
 80096ba:	4b9e      	ldr	r3, [pc, #632]	; (8009934 <cppLoop+0x1494>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4618      	mov	r0, r3
 80096c0:	f7f6 ff5a 	bl	8000578 <__aeabi_f2d>
 80096c4:	4603      	mov	r3, r0
 80096c6:	460c      	mov	r4, r1
 80096c8:	461a      	mov	r2, r3
 80096ca:	4623      	mov	r3, r4
 80096cc:	489a      	ldr	r0, [pc, #616]	; (8009938 <cppLoop+0x1498>)
 80096ce:	f7f7 fd21 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_C){
 80096d2:	4894      	ldr	r0, [pc, #592]	; (8009924 <cppLoop+0x1484>)
 80096d4:	f7f8 fc3a 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b02      	cmp	r3, #2
 80096dc:	bf0c      	ite	eq
 80096de:	2301      	moveq	r3, #1
 80096e0:	2300      	movne	r3, #0
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f001 86e9 	beq.w	800b4bc <cppLoop+0x301c>
				HAL_Delay(500);
 80096ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80096ee:	f002 f835 	bl	800b75c <HAL_Delay>

				led.LR(1, -1);
 80096f2:	f04f 32ff 	mov.w	r2, #4294967295
 80096f6:	2101      	movs	r1, #1
 80096f8:	4889      	ldr	r0, [pc, #548]	; (8009920 <cppLoop+0x1480>)
 80096fa:	f7f8 fd47 	bl	800218c <_ZN3LED2LREaa>
				line_trace.setMode(SECOND_RUNNING);
 80096fe:	2101      	movs	r1, #1
 8009700:	488e      	ldr	r0, [pc, #568]	; (800993c <cppLoop+0x149c>)
 8009702:	f7fa fee7 	bl	80044d4 <_ZN9LineTrace7setModeEs>
				line_trace.setTargetVelocity(adj_min_velocity);
 8009706:	4b8b      	ldr	r3, [pc, #556]	; (8009934 <cppLoop+0x1494>)
 8009708:	edd3 7a00 	vldr	s15, [r3]
 800970c:	eeb0 0a67 	vmov.f32	s0, s15
 8009710:	488a      	ldr	r0, [pc, #552]	; (800993c <cppLoop+0x149c>)
 8009712:	f7fa fc01 	bl	8003f18 <_ZN9LineTrace17setTargetVelocityEf>
				line_trace.setMaxVelocity(adj_max_velocity);
 8009716:	4b85      	ldr	r3, [pc, #532]	; (800992c <cppLoop+0x148c>)
 8009718:	edd3 7a00 	vldr	s15, [r3]
 800971c:	eeb0 0a67 	vmov.f32	s0, s15
 8009720:	4886      	ldr	r0, [pc, #536]	; (800993c <cppLoop+0x149c>)
 8009722:	f7fa fc09 	bl	8003f38 <_ZN9LineTrace14setMaxVelocityEf>
				line_trace.setMinVelocity(adj_min_velocity);
 8009726:	4b83      	ldr	r3, [pc, #524]	; (8009934 <cppLoop+0x1494>)
 8009728:	edd3 7a00 	vldr	s15, [r3]
 800972c:	eeb0 0a67 	vmov.f32	s0, s15
 8009730:	4882      	ldr	r0, [pc, #520]	; (800993c <cppLoop+0x149c>)
 8009732:	f7fa fc11 	bl	8003f58 <_ZN9LineTrace14setMinVelocityEf>
				line_trace.createVelocityTabele();
 8009736:	4881      	ldr	r0, [pc, #516]	; (800993c <cppLoop+0x149c>)
 8009738:	f7fb f914 	bl	8004964 <_ZN9LineTrace20createVelocityTabeleEv>

				HAL_Delay(1000);
 800973c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009740:	f002 f80c 	bl	800b75c <HAL_Delay>

				logger.resetLogsTim1();
 8009744:	487e      	ldr	r0, [pc, #504]	; (8009940 <cppLoop+0x14a0>)
 8009746:	f7fb fd7e 	bl	8005246 <_ZN6Logger13resetLogsTim1Ev>
				logger.resetLogsTim2();
 800974a:	487d      	ldr	r0, [pc, #500]	; (8009940 <cppLoop+0x14a0>)
 800974c:	f7fb fda3 	bl	8005296 <_ZN6Logger13resetLogsTim2Ev>
				//logger.start();

				line_trace.running();
 8009750:	487a      	ldr	r0, [pc, #488]	; (800993c <cppLoop+0x149c>)
 8009752:	f7fa ff0f 	bl	8004574 <_ZN9LineTrace7runningEv>

				logger.stop();
 8009756:	487a      	ldr	r0, [pc, #488]	; (8009940 <cppLoop+0x14a0>)
 8009758:	f7fb fe06 	bl	8005368 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 800975c:	4a79      	ldr	r2, [pc, #484]	; (8009944 <cppLoop+0x14a4>)
 800975e:	497a      	ldr	r1, [pc, #488]	; (8009948 <cppLoop+0x14a8>)
 8009760:	4877      	ldr	r0, [pc, #476]	; (8009940 <cppLoop+0x14a0>)
 8009762:	f7fb fc9a 	bl	800509a <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 8009766:	4a79      	ldr	r2, [pc, #484]	; (800994c <cppLoop+0x14ac>)
 8009768:	4977      	ldr	r1, [pc, #476]	; (8009948 <cppLoop+0x14a8>)
 800976a:	4875      	ldr	r0, [pc, #468]	; (8009940 <cppLoop+0x14a0>)
 800976c:	f7fb fca9 	bl	80050c2 <_ZN6Logger9saveLogs2EPKcS1_>

				led.LR(0, -1);
 8009770:	f04f 32ff 	mov.w	r2, #4294967295
 8009774:	2100      	movs	r1, #0
 8009776:	486a      	ldr	r0, [pc, #424]	; (8009920 <cppLoop+0x1480>)
 8009778:	f7f8 fd08 	bl	800218c <_ZN3LED2LREaa>
				line_trace.setMinVelocity(adj_min_velocity);

				led.LR(-1, 0);
			}
		}
		break;
 800977c:	f001 be9e 	b.w	800b4bc <cppLoop+0x301c>
			lcd_clear();
 8009780:	f7f7 fc8e 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8009784:	2100      	movs	r1, #0
 8009786:	2000      	movs	r0, #0
 8009788:	f7f7 fc9a 	bl	80010c0 <lcd_locate>
			lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 800978c:	486b      	ldr	r0, [pc, #428]	; (800993c <cppLoop+0x149c>)
 800978e:	f7fa fc63 	bl	8004058 <_ZN9LineTrace14getMaxVelocityEv>
 8009792:	ee10 3a10 	vmov	r3, s0
 8009796:	4618      	mov	r0, r3
 8009798:	f7f6 feee 	bl	8000578 <__aeabi_f2d>
 800979c:	4603      	mov	r3, r0
 800979e:	460c      	mov	r4, r1
 80097a0:	461a      	mov	r2, r3
 80097a2:	4623      	mov	r3, r4
 80097a4:	4862      	ldr	r0, [pc, #392]	; (8009930 <cppLoop+0x1490>)
 80097a6:	f7f7 fcb5 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 80097aa:	2101      	movs	r1, #1
 80097ac:	2000      	movs	r0, #0
 80097ae:	f7f7 fc87 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 80097b2:	4862      	ldr	r0, [pc, #392]	; (800993c <cppLoop+0x149c>)
 80097b4:	f7fa fc60 	bl	8004078 <_ZN9LineTrace14getMinVelocityEv>
 80097b8:	ee10 3a10 	vmov	r3, s0
 80097bc:	4618      	mov	r0, r3
 80097be:	f7f6 fedb 	bl	8000578 <__aeabi_f2d>
 80097c2:	4603      	mov	r3, r0
 80097c4:	460c      	mov	r4, r1
 80097c6:	461a      	mov	r2, r3
 80097c8:	4623      	mov	r3, r4
 80097ca:	4861      	ldr	r0, [pc, #388]	; (8009950 <cppLoop+0x14b0>)
 80097cc:	f7f7 fca2 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_U){
 80097d0:	4854      	ldr	r0, [pc, #336]	; (8009924 <cppLoop+0x1484>)
 80097d2:	f7f8 fbbb 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b08      	cmp	r3, #8
 80097da:	bf0c      	ite	eq
 80097dc:	2301      	moveq	r3, #1
 80097de:	2300      	movne	r3, #0
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d022      	beq.n	800982c <cppLoop+0x138c>
				led.LR(-1, 1);
 80097e6:	2201      	movs	r2, #1
 80097e8:	f04f 31ff 	mov.w	r1, #4294967295
 80097ec:	484c      	ldr	r0, [pc, #304]	; (8009920 <cppLoop+0x1480>)
 80097ee:	f7f8 fccd 	bl	800218c <_ZN3LED2LREaa>
				HAL_Delay(300);
 80097f2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80097f6:	f001 ffb1 	bl	800b75c <HAL_Delay>
				selector_vel++;
 80097fa:	4b56      	ldr	r3, [pc, #344]	; (8009954 <cppLoop+0x14b4>)
 80097fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009800:	b29b      	uxth	r3, r3
 8009802:	3301      	adds	r3, #1
 8009804:	b29b      	uxth	r3, r3
 8009806:	b21a      	sxth	r2, r3
 8009808:	4b52      	ldr	r3, [pc, #328]	; (8009954 <cppLoop+0x14b4>)
 800980a:	801a      	strh	r2, [r3, #0]
				if(selector_vel >= 2) selector_vel = 0;
 800980c:	4b51      	ldr	r3, [pc, #324]	; (8009954 <cppLoop+0x14b4>)
 800980e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009812:	2b01      	cmp	r3, #1
 8009814:	dd02      	ble.n	800981c <cppLoop+0x137c>
 8009816:	4b4f      	ldr	r3, [pc, #316]	; (8009954 <cppLoop+0x14b4>)
 8009818:	2200      	movs	r2, #0
 800981a:	801a      	strh	r2, [r3, #0]
				led.LR(-1, 0);
 800981c:	2200      	movs	r2, #0
 800981e:	f04f 31ff 	mov.w	r1, #4294967295
 8009822:	483f      	ldr	r0, [pc, #252]	; (8009920 <cppLoop+0x1480>)
 8009824:	f7f8 fcb2 	bl	800218c <_ZN3LED2LREaa>
		break;
 8009828:	f001 be48 	b.w	800b4bc <cppLoop+0x301c>
			else if(joy_stick.getValue() == JOY_R){
 800982c:	483d      	ldr	r0, [pc, #244]	; (8009924 <cppLoop+0x1484>)
 800982e:	f7f8 fb8d 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 8009832:	4603      	mov	r3, r0
 8009834:	2b10      	cmp	r3, #16
 8009836:	bf0c      	ite	eq
 8009838:	2301      	moveq	r3, #1
 800983a:	2300      	movne	r3, #0
 800983c:	b2db      	uxtb	r3, r3
 800983e:	2b00      	cmp	r3, #0
 8009840:	d03c      	beq.n	80098bc <cppLoop+0x141c>
				led.LR(-1, 1);
 8009842:	2201      	movs	r2, #1
 8009844:	f04f 31ff 	mov.w	r1, #4294967295
 8009848:	4835      	ldr	r0, [pc, #212]	; (8009920 <cppLoop+0x1480>)
 800984a:	f7f8 fc9f 	bl	800218c <_ZN3LED2LREaa>
				HAL_Delay(100);
 800984e:	2064      	movs	r0, #100	; 0x64
 8009850:	f001 ff84 	bl	800b75c <HAL_Delay>
				if(selector_vel == 0)
 8009854:	4b3f      	ldr	r3, [pc, #252]	; (8009954 <cppLoop+0x14b4>)
 8009856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d113      	bne.n	8009886 <cppLoop+0x13e6>
					adj_max_velocity = adj_max_velocity + 0.1;
 800985e:	4b33      	ldr	r3, [pc, #204]	; (800992c <cppLoop+0x148c>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4618      	mov	r0, r3
 8009864:	f7f6 fe88 	bl	8000578 <__aeabi_f2d>
 8009868:	a32b      	add	r3, pc, #172	; (adr r3, 8009918 <cppLoop+0x1478>)
 800986a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986e:	f7f6 fd25 	bl	80002bc <__adddf3>
 8009872:	4603      	mov	r3, r0
 8009874:	460c      	mov	r4, r1
 8009876:	4618      	mov	r0, r3
 8009878:	4621      	mov	r1, r4
 800987a:	f7f7 f9cd 	bl	8000c18 <__aeabi_d2f>
 800987e:	4602      	mov	r2, r0
 8009880:	4b2a      	ldr	r3, [pc, #168]	; (800992c <cppLoop+0x148c>)
 8009882:	601a      	str	r2, [r3, #0]
 8009884:	e012      	b.n	80098ac <cppLoop+0x140c>
					adj_min_velocity = adj_min_velocity + 0.1;
 8009886:	4b2b      	ldr	r3, [pc, #172]	; (8009934 <cppLoop+0x1494>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4618      	mov	r0, r3
 800988c:	f7f6 fe74 	bl	8000578 <__aeabi_f2d>
 8009890:	a321      	add	r3, pc, #132	; (adr r3, 8009918 <cppLoop+0x1478>)
 8009892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009896:	f7f6 fd11 	bl	80002bc <__adddf3>
 800989a:	4603      	mov	r3, r0
 800989c:	460c      	mov	r4, r1
 800989e:	4618      	mov	r0, r3
 80098a0:	4621      	mov	r1, r4
 80098a2:	f7f7 f9b9 	bl	8000c18 <__aeabi_d2f>
 80098a6:	4602      	mov	r2, r0
 80098a8:	4b22      	ldr	r3, [pc, #136]	; (8009934 <cppLoop+0x1494>)
 80098aa:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 80098ac:	2200      	movs	r2, #0
 80098ae:	f04f 31ff 	mov.w	r1, #4294967295
 80098b2:	481b      	ldr	r0, [pc, #108]	; (8009920 <cppLoop+0x1480>)
 80098b4:	f7f8 fc6a 	bl	800218c <_ZN3LED2LREaa>
		break;
 80098b8:	f001 be00 	b.w	800b4bc <cppLoop+0x301c>
			else if(joy_stick.getValue() == JOY_L){
 80098bc:	4819      	ldr	r0, [pc, #100]	; (8009924 <cppLoop+0x1484>)
 80098be:	f7f8 fb45 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	bf0c      	ite	eq
 80098c8:	2301      	moveq	r3, #1
 80098ca:	2300      	movne	r3, #0
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d05d      	beq.n	800998e <cppLoop+0x14ee>
				led.LR(-1, 1);
 80098d2:	2201      	movs	r2, #1
 80098d4:	f04f 31ff 	mov.w	r1, #4294967295
 80098d8:	4811      	ldr	r0, [pc, #68]	; (8009920 <cppLoop+0x1480>)
 80098da:	f7f8 fc57 	bl	800218c <_ZN3LED2LREaa>
				HAL_Delay(100);
 80098de:	2064      	movs	r0, #100	; 0x64
 80098e0:	f001 ff3c 	bl	800b75c <HAL_Delay>
				if(selector_vel == 0)
 80098e4:	4b1b      	ldr	r3, [pc, #108]	; (8009954 <cppLoop+0x14b4>)
 80098e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d134      	bne.n	8009958 <cppLoop+0x14b8>
					adj_max_velocity = adj_max_velocity - 0.1;
 80098ee:	4b0f      	ldr	r3, [pc, #60]	; (800992c <cppLoop+0x148c>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7f6 fe40 	bl	8000578 <__aeabi_f2d>
 80098f8:	a307      	add	r3, pc, #28	; (adr r3, 8009918 <cppLoop+0x1478>)
 80098fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fe:	f7f6 fcdb 	bl	80002b8 <__aeabi_dsub>
 8009902:	4603      	mov	r3, r0
 8009904:	460c      	mov	r4, r1
 8009906:	4618      	mov	r0, r3
 8009908:	4621      	mov	r1, r4
 800990a:	f7f7 f985 	bl	8000c18 <__aeabi_d2f>
 800990e:	4602      	mov	r2, r0
 8009910:	4b06      	ldr	r3, [pc, #24]	; (800992c <cppLoop+0x148c>)
 8009912:	601a      	str	r2, [r3, #0]
 8009914:	e033      	b.n	800997e <cppLoop+0x14de>
 8009916:	bf00      	nop
 8009918:	9999999a 	.word	0x9999999a
 800991c:	3fb99999 	.word	0x3fb99999
 8009920:	20000558 	.word	0x20000558
 8009924:	2000054c 	.word	0x2000054c
 8009928:	2004757e 	.word	0x2004757e
 800992c:	200475bc 	.word	0x200475bc
 8009930:	0801a9f0 	.word	0x0801a9f0
 8009934:	200475c4 	.word	0x200475c4
 8009938:	0801a9a4 	.word	0x0801a9a4
 800993c:	200209d4 	.word	0x200209d4
 8009940:	2000057c 	.word	0x2000057c
 8009944:	0801a9b0 	.word	0x0801a9b0
 8009948:	0801a9bc 	.word	0x0801a9bc
 800994c:	0801a9c8 	.word	0x0801a9c8
 8009950:	0801a9d8 	.word	0x0801a9d8
 8009954:	20047582 	.word	0x20047582
					adj_min_velocity = adj_min_velocity - 0.1;
 8009958:	4bb5      	ldr	r3, [pc, #724]	; (8009c30 <cppLoop+0x1790>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4618      	mov	r0, r3
 800995e:	f7f6 fe0b 	bl	8000578 <__aeabi_f2d>
 8009962:	a3b1      	add	r3, pc, #708	; (adr r3, 8009c28 <cppLoop+0x1788>)
 8009964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009968:	f7f6 fca6 	bl	80002b8 <__aeabi_dsub>
 800996c:	4603      	mov	r3, r0
 800996e:	460c      	mov	r4, r1
 8009970:	4618      	mov	r0, r3
 8009972:	4621      	mov	r1, r4
 8009974:	f7f7 f950 	bl	8000c18 <__aeabi_d2f>
 8009978:	4602      	mov	r2, r0
 800997a:	4bad      	ldr	r3, [pc, #692]	; (8009c30 <cppLoop+0x1790>)
 800997c:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 800997e:	2200      	movs	r2, #0
 8009980:	f04f 31ff 	mov.w	r1, #4294967295
 8009984:	48ab      	ldr	r0, [pc, #684]	; (8009c34 <cppLoop+0x1794>)
 8009986:	f7f8 fc01 	bl	800218c <_ZN3LED2LREaa>
		break;
 800998a:	f001 bd97 	b.w	800b4bc <cppLoop+0x301c>
			else if(joy_stick.getValue() == JOY_C){
 800998e:	48aa      	ldr	r0, [pc, #680]	; (8009c38 <cppLoop+0x1798>)
 8009990:	f7f8 fadc 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 8009994:	4603      	mov	r3, r0
 8009996:	2b02      	cmp	r3, #2
 8009998:	bf0c      	ite	eq
 800999a:	2301      	moveq	r3, #1
 800999c:	2300      	movne	r3, #0
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f001 858b 	beq.w	800b4bc <cppLoop+0x301c>
				led.LR(-1, 1);
 80099a6:	2201      	movs	r2, #1
 80099a8:	f04f 31ff 	mov.w	r1, #4294967295
 80099ac:	48a1      	ldr	r0, [pc, #644]	; (8009c34 <cppLoop+0x1794>)
 80099ae:	f7f8 fbed 	bl	800218c <_ZN3LED2LREaa>
				HAL_Delay(300);
 80099b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80099b6:	f001 fed1 	bl	800b75c <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 80099ba:	2300      	movs	r3, #0
 80099bc:	9300      	str	r3, [sp, #0]
 80099be:	4b9f      	ldr	r3, [pc, #636]	; (8009c3c <cppLoop+0x179c>)
 80099c0:	2201      	movs	r2, #1
 80099c2:	499f      	ldr	r1, [pc, #636]	; (8009c40 <cppLoop+0x17a0>)
 80099c4:	489f      	ldr	r0, [pc, #636]	; (8009c44 <cppLoop+0x17a4>)
 80099c6:	f7f7 fec5 	bl	8001754 <sd_write_array_float>
				sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity, OVER_WRITE);
 80099ca:	2300      	movs	r3, #0
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	4b98      	ldr	r3, [pc, #608]	; (8009c30 <cppLoop+0x1790>)
 80099d0:	2201      	movs	r2, #1
 80099d2:	499d      	ldr	r1, [pc, #628]	; (8009c48 <cppLoop+0x17a8>)
 80099d4:	489b      	ldr	r0, [pc, #620]	; (8009c44 <cppLoop+0x17a4>)
 80099d6:	f7f7 febd 	bl	8001754 <sd_write_array_float>
				line_trace.setMaxVelocity(adj_max_velocity);
 80099da:	4b98      	ldr	r3, [pc, #608]	; (8009c3c <cppLoop+0x179c>)
 80099dc:	edd3 7a00 	vldr	s15, [r3]
 80099e0:	eeb0 0a67 	vmov.f32	s0, s15
 80099e4:	4899      	ldr	r0, [pc, #612]	; (8009c4c <cppLoop+0x17ac>)
 80099e6:	f7fa faa7 	bl	8003f38 <_ZN9LineTrace14setMaxVelocityEf>
				line_trace.setMinVelocity(adj_min_velocity);
 80099ea:	4b91      	ldr	r3, [pc, #580]	; (8009c30 <cppLoop+0x1790>)
 80099ec:	edd3 7a00 	vldr	s15, [r3]
 80099f0:	eeb0 0a67 	vmov.f32	s0, s15
 80099f4:	4895      	ldr	r0, [pc, #596]	; (8009c4c <cppLoop+0x17ac>)
 80099f6:	f7fa faaf 	bl	8003f58 <_ZN9LineTrace14setMinVelocityEf>
				led.LR(-1, 0);
 80099fa:	2200      	movs	r2, #0
 80099fc:	f04f 31ff 	mov.w	r1, #4294967295
 8009a00:	488c      	ldr	r0, [pc, #560]	; (8009c34 <cppLoop+0x1794>)
 8009a02:	f7f8 fbc3 	bl	800218c <_ZN3LED2LREaa>
		break;
 8009a06:	f001 bd59 	b.w	800b4bc <cppLoop+0x301c>

	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Third running-----------------------*/
	/*-------------------------------------------------------------------------*/
	case 4:
		led.fullColor('M');
 8009a0a:	214d      	movs	r1, #77	; 0x4d
 8009a0c:	4889      	ldr	r0, [pc, #548]	; (8009c34 <cppLoop+0x1794>)
 8009a0e:	f7f8 fb01 	bl	8002014 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 8009a12:	4889      	ldr	r0, [pc, #548]	; (8009c38 <cppLoop+0x1798>)
 8009a14:	f7f8 fa9a 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b04      	cmp	r3, #4
 8009a1c:	bf0c      	ite	eq
 8009a1e:	2301      	moveq	r3, #1
 8009a20:	2300      	movne	r3, #0
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d020      	beq.n	8009a6a <cppLoop+0x15ca>
			led.LR(-1, 1);
 8009a28:	2201      	movs	r2, #1
 8009a2a:	f04f 31ff 	mov.w	r1, #4294967295
 8009a2e:	4881      	ldr	r0, [pc, #516]	; (8009c34 <cppLoop+0x1794>)
 8009a30:	f7f8 fbac 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009a34:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009a38:	f001 fe90 	bl	800b75c <HAL_Delay>

			selector_run++;
 8009a3c:	4b84      	ldr	r3, [pc, #528]	; (8009c50 <cppLoop+0x17b0>)
 8009a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	3301      	adds	r3, #1
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	b21a      	sxth	r2, r3
 8009a4a:	4b81      	ldr	r3, [pc, #516]	; (8009c50 <cppLoop+0x17b0>)
 8009a4c:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 8009a4e:	4b80      	ldr	r3, [pc, #512]	; (8009c50 <cppLoop+0x17b0>)
 8009a50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	dd02      	ble.n	8009a5e <cppLoop+0x15be>
 8009a58:	4b7d      	ldr	r3, [pc, #500]	; (8009c50 <cppLoop+0x17b0>)
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f04f 31ff 	mov.w	r1, #4294967295
 8009a64:	4873      	ldr	r0, [pc, #460]	; (8009c34 <cppLoop+0x1794>)
 8009a66:	f7f8 fb91 	bl	800218c <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 8009a6a:	4b79      	ldr	r3, [pc, #484]	; (8009c50 <cppLoop+0x17b0>)
 8009a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f040 8081 	bne.w	8009b78 <cppLoop+0x16d8>
			lcd_clear();
 8009a76:	f7f7 fb13 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8009a7a:	2100      	movs	r1, #0
 8009a7c:	2000      	movs	r0, #0
 8009a7e:	f7f7 fb1f 	bl	80010c0 <lcd_locate>
			lcd_printf("3:   %3.1f", adj_max_velocity2);
 8009a82:	4b74      	ldr	r3, [pc, #464]	; (8009c54 <cppLoop+0x17b4>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7f6 fd76 	bl	8000578 <__aeabi_f2d>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	460c      	mov	r4, r1
 8009a90:	461a      	mov	r2, r3
 8009a92:	4623      	mov	r3, r4
 8009a94:	4870      	ldr	r0, [pc, #448]	; (8009c58 <cppLoop+0x17b8>)
 8009a96:	f7f7 fb3d 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8009a9a:	2101      	movs	r1, #1
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	f7f7 fb0f 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_min_velocity2);
 8009aa2:	4b6e      	ldr	r3, [pc, #440]	; (8009c5c <cppLoop+0x17bc>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7f6 fd66 	bl	8000578 <__aeabi_f2d>
 8009aac:	4603      	mov	r3, r0
 8009aae:	460c      	mov	r4, r1
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	4623      	mov	r3, r4
 8009ab4:	486a      	ldr	r0, [pc, #424]	; (8009c60 <cppLoop+0x17c0>)
 8009ab6:	f7f7 fb2d 	bl	8001114 <lcd_printf>

			if(joy_stick.getValue() == JOY_C){
 8009aba:	485f      	ldr	r0, [pc, #380]	; (8009c38 <cppLoop+0x1798>)
 8009abc:	f7f8 fa46 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	bf0c      	ite	eq
 8009ac6:	2301      	moveq	r3, #1
 8009ac8:	2300      	movne	r3, #0
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f001 84f7 	beq.w	800b4c0 <cppLoop+0x3020>
				HAL_Delay(500);
 8009ad2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009ad6:	f001 fe41 	bl	800b75c <HAL_Delay>

				led.LR(1, -1);
 8009ada:	f04f 32ff 	mov.w	r2, #4294967295
 8009ade:	2101      	movs	r1, #1
 8009ae0:	4854      	ldr	r0, [pc, #336]	; (8009c34 <cppLoop+0x1794>)
 8009ae2:	f7f8 fb53 	bl	800218c <_ZN3LED2LREaa>
				line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8009ae6:	4b5f      	ldr	r3, [pc, #380]	; (8009c64 <cppLoop+0x17c4>)
 8009ae8:	edd3 7a00 	vldr	s15, [r3]
 8009aec:	4b5e      	ldr	r3, [pc, #376]	; (8009c68 <cppLoop+0x17c8>)
 8009aee:	ed93 7a00 	vldr	s14, [r3]
 8009af2:	4b5e      	ldr	r3, [pc, #376]	; (8009c6c <cppLoop+0x17cc>)
 8009af4:	edd3 6a00 	vldr	s13, [r3]
 8009af8:	eeb0 1a66 	vmov.f32	s2, s13
 8009afc:	eef0 0a47 	vmov.f32	s1, s14
 8009b00:	eeb0 0a67 	vmov.f32	s0, s15
 8009b04:	4851      	ldr	r0, [pc, #324]	; (8009c4c <cppLoop+0x17ac>)
 8009b06:	f7fa f97b 	bl	8003e00 <_ZN9LineTrace7setGainEfff>
				line_trace.setMode(THIRD_RUNNING);
 8009b0a:	2102      	movs	r1, #2
 8009b0c:	484f      	ldr	r0, [pc, #316]	; (8009c4c <cppLoop+0x17ac>)
 8009b0e:	f7fa fce1 	bl	80044d4 <_ZN9LineTrace7setModeEs>
				line_trace.setTargetVelocity(adj_min_velocity2);
 8009b12:	4b52      	ldr	r3, [pc, #328]	; (8009c5c <cppLoop+0x17bc>)
 8009b14:	edd3 7a00 	vldr	s15, [r3]
 8009b18:	eeb0 0a67 	vmov.f32	s0, s15
 8009b1c:	484b      	ldr	r0, [pc, #300]	; (8009c4c <cppLoop+0x17ac>)
 8009b1e:	f7fa f9fb 	bl	8003f18 <_ZN9LineTrace17setTargetVelocityEf>
				line_trace.setMaxVelocity2(adj_max_velocity2);
 8009b22:	4b4c      	ldr	r3, [pc, #304]	; (8009c54 <cppLoop+0x17b4>)
 8009b24:	edd3 7a00 	vldr	s15, [r3]
 8009b28:	eeb0 0a67 	vmov.f32	s0, s15
 8009b2c:	4847      	ldr	r0, [pc, #284]	; (8009c4c <cppLoop+0x17ac>)
 8009b2e:	f7fa fa23 	bl	8003f78 <_ZN9LineTrace15setMaxVelocity2Ef>
				line_trace.setMinVelocity2(adj_min_velocity2);
 8009b32:	4b4a      	ldr	r3, [pc, #296]	; (8009c5c <cppLoop+0x17bc>)
 8009b34:	edd3 7a00 	vldr	s15, [r3]
 8009b38:	eeb0 0a67 	vmov.f32	s0, s15
 8009b3c:	4843      	ldr	r0, [pc, #268]	; (8009c4c <cppLoop+0x17ac>)
 8009b3e:	f7fa fa2b 	bl	8003f98 <_ZN9LineTrace15setMinVelocity2Ef>
				line_trace.createVelocityTabele();
 8009b42:	4842      	ldr	r0, [pc, #264]	; (8009c4c <cppLoop+0x17ac>)
 8009b44:	f7fa ff0e 	bl	8004964 <_ZN9LineTrace20createVelocityTabeleEv>

				//logger.start();

				line_trace.running();
 8009b48:	4840      	ldr	r0, [pc, #256]	; (8009c4c <cppLoop+0x17ac>)
 8009b4a:	f7fa fd13 	bl	8004574 <_ZN9LineTrace7runningEv>

				logger.stop();
 8009b4e:	4848      	ldr	r0, [pc, #288]	; (8009c70 <cppLoop+0x17d0>)
 8009b50:	f7fb fc0a 	bl	8005368 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 8009b54:	4a47      	ldr	r2, [pc, #284]	; (8009c74 <cppLoop+0x17d4>)
 8009b56:	4948      	ldr	r1, [pc, #288]	; (8009c78 <cppLoop+0x17d8>)
 8009b58:	4845      	ldr	r0, [pc, #276]	; (8009c70 <cppLoop+0x17d0>)
 8009b5a:	f7fb fa9e 	bl	800509a <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 8009b5e:	4a47      	ldr	r2, [pc, #284]	; (8009c7c <cppLoop+0x17dc>)
 8009b60:	4945      	ldr	r1, [pc, #276]	; (8009c78 <cppLoop+0x17d8>)
 8009b62:	4843      	ldr	r0, [pc, #268]	; (8009c70 <cppLoop+0x17d0>)
 8009b64:	f7fb faad 	bl	80050c2 <_ZN6Logger9saveLogs2EPKcS1_>

				led.LR(0, -1);
 8009b68:	f04f 32ff 	mov.w	r2, #4294967295
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	4831      	ldr	r0, [pc, #196]	; (8009c34 <cppLoop+0x1794>)
 8009b70:	f7f8 fb0c 	bl	800218c <_ZN3LED2LREaa>

				led.LR(-1, 0);
			}

		}
		break;
 8009b74:	f001 bca4 	b.w	800b4c0 <cppLoop+0x3020>
			lcd_clear();
 8009b78:	f7f7 fa92 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	2000      	movs	r0, #0
 8009b80:	f7f7 fa9e 	bl	80010c0 <lcd_locate>
			lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8009b84:	4831      	ldr	r0, [pc, #196]	; (8009c4c <cppLoop+0x17ac>)
 8009b86:	f7fa fa87 	bl	8004098 <_ZN9LineTrace15getMaxVelocity2Ev>
 8009b8a:	ee10 3a10 	vmov	r3, s0
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7f6 fcf2 	bl	8000578 <__aeabi_f2d>
 8009b94:	4603      	mov	r3, r0
 8009b96:	460c      	mov	r4, r1
 8009b98:	461a      	mov	r2, r3
 8009b9a:	4623      	mov	r3, r4
 8009b9c:	482e      	ldr	r0, [pc, #184]	; (8009c58 <cppLoop+0x17b8>)
 8009b9e:	f7f7 fab9 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8009ba2:	2101      	movs	r1, #1
 8009ba4:	2000      	movs	r0, #0
 8009ba6:	f7f7 fa8b 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 8009baa:	4828      	ldr	r0, [pc, #160]	; (8009c4c <cppLoop+0x17ac>)
 8009bac:	f7fa fa84 	bl	80040b8 <_ZN9LineTrace15getMinVelocity2Ev>
 8009bb0:	ee10 3a10 	vmov	r3, s0
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f7f6 fcdf 	bl	8000578 <__aeabi_f2d>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	460c      	mov	r4, r1
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	4623      	mov	r3, r4
 8009bc2:	482f      	ldr	r0, [pc, #188]	; (8009c80 <cppLoop+0x17e0>)
 8009bc4:	f7f7 faa6 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_U){
 8009bc8:	481b      	ldr	r0, [pc, #108]	; (8009c38 <cppLoop+0x1798>)
 8009bca:	f7f8 f9bf 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b08      	cmp	r3, #8
 8009bd2:	bf0c      	ite	eq
 8009bd4:	2301      	moveq	r3, #1
 8009bd6:	2300      	movne	r3, #0
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d054      	beq.n	8009c88 <cppLoop+0x17e8>
				led.LR(-1, 1);
 8009bde:	2201      	movs	r2, #1
 8009be0:	f04f 31ff 	mov.w	r1, #4294967295
 8009be4:	4813      	ldr	r0, [pc, #76]	; (8009c34 <cppLoop+0x1794>)
 8009be6:	f7f8 fad1 	bl	800218c <_ZN3LED2LREaa>
				HAL_Delay(300);
 8009bea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009bee:	f001 fdb5 	bl	800b75c <HAL_Delay>
				selector_vel++;
 8009bf2:	4b24      	ldr	r3, [pc, #144]	; (8009c84 <cppLoop+0x17e4>)
 8009bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	b21a      	sxth	r2, r3
 8009c00:	4b20      	ldr	r3, [pc, #128]	; (8009c84 <cppLoop+0x17e4>)
 8009c02:	801a      	strh	r2, [r3, #0]
				if(selector_vel >= 2) selector_vel = 0;
 8009c04:	4b1f      	ldr	r3, [pc, #124]	; (8009c84 <cppLoop+0x17e4>)
 8009c06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	dd02      	ble.n	8009c14 <cppLoop+0x1774>
 8009c0e:	4b1d      	ldr	r3, [pc, #116]	; (8009c84 <cppLoop+0x17e4>)
 8009c10:	2200      	movs	r2, #0
 8009c12:	801a      	strh	r2, [r3, #0]
				led.LR(-1, 0);
 8009c14:	2200      	movs	r2, #0
 8009c16:	f04f 31ff 	mov.w	r1, #4294967295
 8009c1a:	4806      	ldr	r0, [pc, #24]	; (8009c34 <cppLoop+0x1794>)
 8009c1c:	f7f8 fab6 	bl	800218c <_ZN3LED2LREaa>
		break;
 8009c20:	f001 bc4e 	b.w	800b4c0 <cppLoop+0x3020>
 8009c24:	f3af 8000 	nop.w
 8009c28:	9999999a 	.word	0x9999999a
 8009c2c:	3fb99999 	.word	0x3fb99999
 8009c30:	200475c4 	.word	0x200475c4
 8009c34:	20000558 	.word	0x20000558
 8009c38:	2000054c 	.word	0x2000054c
 8009c3c:	200475bc 	.word	0x200475bc
 8009c40:	0801a9fc 	.word	0x0801a9fc
 8009c44:	0801a958 	.word	0x0801a958
 8009c48:	0801aa08 	.word	0x0801aa08
 8009c4c:	200209d4 	.word	0x200209d4
 8009c50:	2004757e 	.word	0x2004757e
 8009c54:	200475cc 	.word	0x200475cc
 8009c58:	0801aa14 	.word	0x0801aa14
 8009c5c:	200475d4 	.word	0x200475d4
 8009c60:	0801a9a4 	.word	0x0801a9a4
 8009c64:	20047584 	.word	0x20047584
 8009c68:	2004758c 	.word	0x2004758c
 8009c6c:	20047594 	.word	0x20047594
 8009c70:	2000057c 	.word	0x2000057c
 8009c74:	0801a9b0 	.word	0x0801a9b0
 8009c78:	0801a9bc 	.word	0x0801a9bc
 8009c7c:	0801a9c8 	.word	0x0801a9c8
 8009c80:	0801a9d8 	.word	0x0801a9d8
 8009c84:	20047582 	.word	0x20047582
			else if(joy_stick.getValue() == JOY_R){
 8009c88:	4869      	ldr	r0, [pc, #420]	; (8009e30 <cppLoop+0x1990>)
 8009c8a:	f7f8 f95f 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b10      	cmp	r3, #16
 8009c92:	bf0c      	ite	eq
 8009c94:	2301      	moveq	r3, #1
 8009c96:	2300      	movne	r3, #0
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d03c      	beq.n	8009d18 <cppLoop+0x1878>
				led.LR(-1, 1);
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8009ca4:	4863      	ldr	r0, [pc, #396]	; (8009e34 <cppLoop+0x1994>)
 8009ca6:	f7f8 fa71 	bl	800218c <_ZN3LED2LREaa>
				HAL_Delay(100);
 8009caa:	2064      	movs	r0, #100	; 0x64
 8009cac:	f001 fd56 	bl	800b75c <HAL_Delay>
				if(selector_vel == 0)
 8009cb0:	4b61      	ldr	r3, [pc, #388]	; (8009e38 <cppLoop+0x1998>)
 8009cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d113      	bne.n	8009ce2 <cppLoop+0x1842>
					adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8009cba:	4b60      	ldr	r3, [pc, #384]	; (8009e3c <cppLoop+0x199c>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7f6 fc5a 	bl	8000578 <__aeabi_f2d>
 8009cc4:	a358      	add	r3, pc, #352	; (adr r3, 8009e28 <cppLoop+0x1988>)
 8009cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cca:	f7f6 faf7 	bl	80002bc <__adddf3>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	460c      	mov	r4, r1
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	f7f6 ff9f 	bl	8000c18 <__aeabi_d2f>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	4b57      	ldr	r3, [pc, #348]	; (8009e3c <cppLoop+0x199c>)
 8009cde:	601a      	str	r2, [r3, #0]
 8009ce0:	e012      	b.n	8009d08 <cppLoop+0x1868>
					adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8009ce2:	4b57      	ldr	r3, [pc, #348]	; (8009e40 <cppLoop+0x19a0>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7f6 fc46 	bl	8000578 <__aeabi_f2d>
 8009cec:	a34e      	add	r3, pc, #312	; (adr r3, 8009e28 <cppLoop+0x1988>)
 8009cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf2:	f7f6 fae3 	bl	80002bc <__adddf3>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	460c      	mov	r4, r1
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	4621      	mov	r1, r4
 8009cfe:	f7f6 ff8b 	bl	8000c18 <__aeabi_d2f>
 8009d02:	4602      	mov	r2, r0
 8009d04:	4b4e      	ldr	r3, [pc, #312]	; (8009e40 <cppLoop+0x19a0>)
 8009d06:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f04f 31ff 	mov.w	r1, #4294967295
 8009d0e:	4849      	ldr	r0, [pc, #292]	; (8009e34 <cppLoop+0x1994>)
 8009d10:	f7f8 fa3c 	bl	800218c <_ZN3LED2LREaa>
		break;
 8009d14:	f001 bbd4 	b.w	800b4c0 <cppLoop+0x3020>
			else if(joy_stick.getValue() == JOY_L){
 8009d18:	4845      	ldr	r0, [pc, #276]	; (8009e30 <cppLoop+0x1990>)
 8009d1a:	f7f8 f917 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	bf0c      	ite	eq
 8009d24:	2301      	moveq	r3, #1
 8009d26:	2300      	movne	r3, #0
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d03c      	beq.n	8009da8 <cppLoop+0x1908>
				led.LR(-1, 1);
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f04f 31ff 	mov.w	r1, #4294967295
 8009d34:	483f      	ldr	r0, [pc, #252]	; (8009e34 <cppLoop+0x1994>)
 8009d36:	f7f8 fa29 	bl	800218c <_ZN3LED2LREaa>
				HAL_Delay(100);
 8009d3a:	2064      	movs	r0, #100	; 0x64
 8009d3c:	f001 fd0e 	bl	800b75c <HAL_Delay>
				if(selector_vel == 0)
 8009d40:	4b3d      	ldr	r3, [pc, #244]	; (8009e38 <cppLoop+0x1998>)
 8009d42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d113      	bne.n	8009d72 <cppLoop+0x18d2>
					adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8009d4a:	4b3c      	ldr	r3, [pc, #240]	; (8009e3c <cppLoop+0x199c>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7f6 fc12 	bl	8000578 <__aeabi_f2d>
 8009d54:	a334      	add	r3, pc, #208	; (adr r3, 8009e28 <cppLoop+0x1988>)
 8009d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5a:	f7f6 faad 	bl	80002b8 <__aeabi_dsub>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	460c      	mov	r4, r1
 8009d62:	4618      	mov	r0, r3
 8009d64:	4621      	mov	r1, r4
 8009d66:	f7f6 ff57 	bl	8000c18 <__aeabi_d2f>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	4b33      	ldr	r3, [pc, #204]	; (8009e3c <cppLoop+0x199c>)
 8009d6e:	601a      	str	r2, [r3, #0]
 8009d70:	e012      	b.n	8009d98 <cppLoop+0x18f8>
					adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8009d72:	4b33      	ldr	r3, [pc, #204]	; (8009e40 <cppLoop+0x19a0>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7f6 fbfe 	bl	8000578 <__aeabi_f2d>
 8009d7c:	a32a      	add	r3, pc, #168	; (adr r3, 8009e28 <cppLoop+0x1988>)
 8009d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d82:	f7f6 fa99 	bl	80002b8 <__aeabi_dsub>
 8009d86:	4603      	mov	r3, r0
 8009d88:	460c      	mov	r4, r1
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	4621      	mov	r1, r4
 8009d8e:	f7f6 ff43 	bl	8000c18 <__aeabi_d2f>
 8009d92:	4602      	mov	r2, r0
 8009d94:	4b2a      	ldr	r3, [pc, #168]	; (8009e40 <cppLoop+0x19a0>)
 8009d96:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f04f 31ff 	mov.w	r1, #4294967295
 8009d9e:	4825      	ldr	r0, [pc, #148]	; (8009e34 <cppLoop+0x1994>)
 8009da0:	f7f8 f9f4 	bl	800218c <_ZN3LED2LREaa>
		break;
 8009da4:	f001 bb8c 	b.w	800b4c0 <cppLoop+0x3020>
			else if(joy_stick.getValue() == JOY_C){
 8009da8:	4821      	ldr	r0, [pc, #132]	; (8009e30 <cppLoop+0x1990>)
 8009daa:	f7f8 f8cf 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b02      	cmp	r3, #2
 8009db2:	bf0c      	ite	eq
 8009db4:	2301      	moveq	r3, #1
 8009db6:	2300      	movne	r3, #0
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f001 8380 	beq.w	800b4c0 <cppLoop+0x3020>
				led.LR(-1, 1);
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	f04f 31ff 	mov.w	r1, #4294967295
 8009dc6:	481b      	ldr	r0, [pc, #108]	; (8009e34 <cppLoop+0x1994>)
 8009dc8:	f7f8 f9e0 	bl	800218c <_ZN3LED2LREaa>
				HAL_Delay(300);
 8009dcc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009dd0:	f001 fcc4 	bl	800b75c <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	9300      	str	r3, [sp, #0]
 8009dd8:	4b18      	ldr	r3, [pc, #96]	; (8009e3c <cppLoop+0x199c>)
 8009dda:	2201      	movs	r2, #1
 8009ddc:	4919      	ldr	r1, [pc, #100]	; (8009e44 <cppLoop+0x19a4>)
 8009dde:	481a      	ldr	r0, [pc, #104]	; (8009e48 <cppLoop+0x19a8>)
 8009de0:	f7f7 fcb8 	bl	8001754 <sd_write_array_float>
				sd_write_array_float("PARAMS", "MINVEL3.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8009de4:	2300      	movs	r3, #0
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	4b15      	ldr	r3, [pc, #84]	; (8009e40 <cppLoop+0x19a0>)
 8009dea:	2201      	movs	r2, #1
 8009dec:	4917      	ldr	r1, [pc, #92]	; (8009e4c <cppLoop+0x19ac>)
 8009dee:	4816      	ldr	r0, [pc, #88]	; (8009e48 <cppLoop+0x19a8>)
 8009df0:	f7f7 fcb0 	bl	8001754 <sd_write_array_float>
				line_trace.setMaxVelocity2(adj_max_velocity2);
 8009df4:	4b11      	ldr	r3, [pc, #68]	; (8009e3c <cppLoop+0x199c>)
 8009df6:	edd3 7a00 	vldr	s15, [r3]
 8009dfa:	eeb0 0a67 	vmov.f32	s0, s15
 8009dfe:	4814      	ldr	r0, [pc, #80]	; (8009e50 <cppLoop+0x19b0>)
 8009e00:	f7fa f8ba 	bl	8003f78 <_ZN9LineTrace15setMaxVelocity2Ef>
				line_trace.setMinVelocity2(adj_min_velocity2);
 8009e04:	4b0e      	ldr	r3, [pc, #56]	; (8009e40 <cppLoop+0x19a0>)
 8009e06:	edd3 7a00 	vldr	s15, [r3]
 8009e0a:	eeb0 0a67 	vmov.f32	s0, s15
 8009e0e:	4810      	ldr	r0, [pc, #64]	; (8009e50 <cppLoop+0x19b0>)
 8009e10:	f7fa f8c2 	bl	8003f98 <_ZN9LineTrace15setMinVelocity2Ef>
				led.LR(-1, 0);
 8009e14:	2200      	movs	r2, #0
 8009e16:	f04f 31ff 	mov.w	r1, #4294967295
 8009e1a:	4806      	ldr	r0, [pc, #24]	; (8009e34 <cppLoop+0x1994>)
 8009e1c:	f7f8 f9b6 	bl	800218c <_ZN3LED2LREaa>
		break;
 8009e20:	f001 bb4e 	b.w	800b4c0 <cppLoop+0x3020>
 8009e24:	f3af 8000 	nop.w
 8009e28:	9999999a 	.word	0x9999999a
 8009e2c:	3fb99999 	.word	0x3fb99999
 8009e30:	2000054c 	.word	0x2000054c
 8009e34:	20000558 	.word	0x20000558
 8009e38:	20047582 	.word	0x20047582
 8009e3c:	200475cc 	.word	0x200475cc
 8009e40:	200475d4 	.word	0x200475d4
 8009e44:	0801aa20 	.word	0x0801aa20
 8009e48:	0801a958 	.word	0x0801a958
 8009e4c:	0801aa2c 	.word	0x0801aa2c
 8009e50:	200209d4 	.word	0x200209d4

	case 5:
		led.fullColor('B');
 8009e54:	2142      	movs	r1, #66	; 0x42
 8009e56:	48ac      	ldr	r0, [pc, #688]	; (800a108 <cppLoop+0x1c68>)
 8009e58:	f7f8 f8dc 	bl	8002014 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 8009e5c:	48ab      	ldr	r0, [pc, #684]	; (800a10c <cppLoop+0x1c6c>)
 8009e5e:	f7f8 f875 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b04      	cmp	r3, #4
 8009e66:	bf0c      	ite	eq
 8009e68:	2301      	moveq	r3, #1
 8009e6a:	2300      	movne	r3, #0
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d020      	beq.n	8009eb4 <cppLoop+0x1a14>
			led.LR(-1, 1);
 8009e72:	2201      	movs	r2, #1
 8009e74:	f04f 31ff 	mov.w	r1, #4294967295
 8009e78:	48a3      	ldr	r0, [pc, #652]	; (800a108 <cppLoop+0x1c68>)
 8009e7a:	f7f8 f987 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009e7e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009e82:	f001 fc6b 	bl	800b75c <HAL_Delay>

			selector_run++;
 8009e86:	4ba2      	ldr	r3, [pc, #648]	; (800a110 <cppLoop+0x1c70>)
 8009e88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	3301      	adds	r3, #1
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	b21a      	sxth	r2, r3
 8009e94:	4b9e      	ldr	r3, [pc, #632]	; (800a110 <cppLoop+0x1c70>)
 8009e96:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 8009e98:	4b9d      	ldr	r3, [pc, #628]	; (800a110 <cppLoop+0x1c70>)
 8009e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	dd02      	ble.n	8009ea8 <cppLoop+0x1a08>
 8009ea2:	4b9b      	ldr	r3, [pc, #620]	; (800a110 <cppLoop+0x1c70>)
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f04f 31ff 	mov.w	r1, #4294967295
 8009eae:	4896      	ldr	r0, [pc, #600]	; (800a108 <cppLoop+0x1c68>)
 8009eb0:	f7f8 f96c 	bl	800218c <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 8009eb4:	4b96      	ldr	r3, [pc, #600]	; (800a110 <cppLoop+0x1c70>)
 8009eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	f040 8081 	bne.w	8009fc2 <cppLoop+0x1b22>
			lcd_clear();
 8009ec0:	f7f7 f8ee 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	2000      	movs	r0, #0
 8009ec8:	f7f7 f8fa 	bl	80010c0 <lcd_locate>
			lcd_printf("4:   %3.1f", adj_max_velocity3);
 8009ecc:	4b91      	ldr	r3, [pc, #580]	; (800a114 <cppLoop+0x1c74>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7f6 fb51 	bl	8000578 <__aeabi_f2d>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	460c      	mov	r4, r1
 8009eda:	461a      	mov	r2, r3
 8009edc:	4623      	mov	r3, r4
 8009ede:	488e      	ldr	r0, [pc, #568]	; (800a118 <cppLoop+0x1c78>)
 8009ee0:	f7f7 f918 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8009ee4:	2101      	movs	r1, #1
 8009ee6:	2000      	movs	r0, #0
 8009ee8:	f7f7 f8ea 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_min_velocity3);
 8009eec:	4b8b      	ldr	r3, [pc, #556]	; (800a11c <cppLoop+0x1c7c>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7f6 fb41 	bl	8000578 <__aeabi_f2d>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	460c      	mov	r4, r1
 8009efa:	461a      	mov	r2, r3
 8009efc:	4623      	mov	r3, r4
 8009efe:	4888      	ldr	r0, [pc, #544]	; (800a120 <cppLoop+0x1c80>)
 8009f00:	f7f7 f908 	bl	8001114 <lcd_printf>

			if(joy_stick.getValue() == JOY_C){
 8009f04:	4881      	ldr	r0, [pc, #516]	; (800a10c <cppLoop+0x1c6c>)
 8009f06:	f7f8 f821 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b02      	cmp	r3, #2
 8009f0e:	bf0c      	ite	eq
 8009f10:	2301      	moveq	r3, #1
 8009f12:	2300      	movne	r3, #0
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	f001 82d4 	beq.w	800b4c4 <cppLoop+0x3024>
				HAL_Delay(500);
 8009f1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009f20:	f001 fc1c 	bl	800b75c <HAL_Delay>

				led.LR(1, -1);
 8009f24:	f04f 32ff 	mov.w	r2, #4294967295
 8009f28:	2101      	movs	r1, #1
 8009f2a:	4877      	ldr	r0, [pc, #476]	; (800a108 <cppLoop+0x1c68>)
 8009f2c:	f7f8 f92e 	bl	800218c <_ZN3LED2LREaa>
				line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8009f30:	4b7c      	ldr	r3, [pc, #496]	; (800a124 <cppLoop+0x1c84>)
 8009f32:	edd3 7a00 	vldr	s15, [r3]
 8009f36:	4b7c      	ldr	r3, [pc, #496]	; (800a128 <cppLoop+0x1c88>)
 8009f38:	ed93 7a00 	vldr	s14, [r3]
 8009f3c:	4b7b      	ldr	r3, [pc, #492]	; (800a12c <cppLoop+0x1c8c>)
 8009f3e:	edd3 6a00 	vldr	s13, [r3]
 8009f42:	eeb0 1a66 	vmov.f32	s2, s13
 8009f46:	eef0 0a47 	vmov.f32	s1, s14
 8009f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8009f4e:	4878      	ldr	r0, [pc, #480]	; (800a130 <cppLoop+0x1c90>)
 8009f50:	f7f9 ff56 	bl	8003e00 <_ZN9LineTrace7setGainEfff>
				line_trace.setMode(FOURTH_RUNNING);
 8009f54:	2103      	movs	r1, #3
 8009f56:	4876      	ldr	r0, [pc, #472]	; (800a130 <cppLoop+0x1c90>)
 8009f58:	f7fa fabc 	bl	80044d4 <_ZN9LineTrace7setModeEs>
				line_trace.setTargetVelocity(adj_min_velocity3);
 8009f5c:	4b6f      	ldr	r3, [pc, #444]	; (800a11c <cppLoop+0x1c7c>)
 8009f5e:	edd3 7a00 	vldr	s15, [r3]
 8009f62:	eeb0 0a67 	vmov.f32	s0, s15
 8009f66:	4872      	ldr	r0, [pc, #456]	; (800a130 <cppLoop+0x1c90>)
 8009f68:	f7f9 ffd6 	bl	8003f18 <_ZN9LineTrace17setTargetVelocityEf>
				line_trace.setMaxVelocity3(adj_max_velocity3);
 8009f6c:	4b69      	ldr	r3, [pc, #420]	; (800a114 <cppLoop+0x1c74>)
 8009f6e:	edd3 7a00 	vldr	s15, [r3]
 8009f72:	eeb0 0a67 	vmov.f32	s0, s15
 8009f76:	486e      	ldr	r0, [pc, #440]	; (800a130 <cppLoop+0x1c90>)
 8009f78:	f7fa f81e 	bl	8003fb8 <_ZN9LineTrace15setMaxVelocity3Ef>
				line_trace.setMinVelocity3(adj_min_velocity3);
 8009f7c:	4b67      	ldr	r3, [pc, #412]	; (800a11c <cppLoop+0x1c7c>)
 8009f7e:	edd3 7a00 	vldr	s15, [r3]
 8009f82:	eeb0 0a67 	vmov.f32	s0, s15
 8009f86:	486a      	ldr	r0, [pc, #424]	; (800a130 <cppLoop+0x1c90>)
 8009f88:	f7fa f826 	bl	8003fd8 <_ZN9LineTrace15setMinVelocity3Ef>
				line_trace.createVelocityTabele();
 8009f8c:	4868      	ldr	r0, [pc, #416]	; (800a130 <cppLoop+0x1c90>)
 8009f8e:	f7fa fce9 	bl	8004964 <_ZN9LineTrace20createVelocityTabeleEv>

				//logger.start();

				line_trace.running();
 8009f92:	4867      	ldr	r0, [pc, #412]	; (800a130 <cppLoop+0x1c90>)
 8009f94:	f7fa faee 	bl	8004574 <_ZN9LineTrace7runningEv>

				logger.stop();
 8009f98:	4866      	ldr	r0, [pc, #408]	; (800a134 <cppLoop+0x1c94>)
 8009f9a:	f7fb f9e5 	bl	8005368 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 8009f9e:	4a66      	ldr	r2, [pc, #408]	; (800a138 <cppLoop+0x1c98>)
 8009fa0:	4966      	ldr	r1, [pc, #408]	; (800a13c <cppLoop+0x1c9c>)
 8009fa2:	4864      	ldr	r0, [pc, #400]	; (800a134 <cppLoop+0x1c94>)
 8009fa4:	f7fb f879 	bl	800509a <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 8009fa8:	4a65      	ldr	r2, [pc, #404]	; (800a140 <cppLoop+0x1ca0>)
 8009faa:	4964      	ldr	r1, [pc, #400]	; (800a13c <cppLoop+0x1c9c>)
 8009fac:	4861      	ldr	r0, [pc, #388]	; (800a134 <cppLoop+0x1c94>)
 8009fae:	f7fb f888 	bl	80050c2 <_ZN6Logger9saveLogs2EPKcS1_>

				led.LR(0, -1);
 8009fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	4853      	ldr	r0, [pc, #332]	; (800a108 <cppLoop+0x1c68>)
 8009fba:	f7f8 f8e7 	bl	800218c <_ZN3LED2LREaa>
				led.LR(-1, 0);
			}

		}

		break;
 8009fbe:	f001 ba81 	b.w	800b4c4 <cppLoop+0x3024>
			lcd_clear();
 8009fc2:	f7f7 f86d 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	2000      	movs	r0, #0
 8009fca:	f7f7 f879 	bl	80010c0 <lcd_locate>
			lcd_printf("4:   %3.1f", line_trace.getMaxVelocity3());
 8009fce:	4858      	ldr	r0, [pc, #352]	; (800a130 <cppLoop+0x1c90>)
 8009fd0:	f7fa f882 	bl	80040d8 <_ZN9LineTrace15getMaxVelocity3Ev>
 8009fd4:	ee10 3a10 	vmov	r3, s0
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7f6 facd 	bl	8000578 <__aeabi_f2d>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	460c      	mov	r4, r1
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	4623      	mov	r3, r4
 8009fe6:	484c      	ldr	r0, [pc, #304]	; (800a118 <cppLoop+0x1c78>)
 8009fe8:	f7f7 f894 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8009fec:	2101      	movs	r1, #1
 8009fee:	2000      	movs	r0, #0
 8009ff0:	f7f7 f866 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity3());
 8009ff4:	484e      	ldr	r0, [pc, #312]	; (800a130 <cppLoop+0x1c90>)
 8009ff6:	f7fa f87f 	bl	80040f8 <_ZN9LineTrace15getMinVelocity3Ev>
 8009ffa:	ee10 3a10 	vmov	r3, s0
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7f6 faba 	bl	8000578 <__aeabi_f2d>
 800a004:	4603      	mov	r3, r0
 800a006:	460c      	mov	r4, r1
 800a008:	461a      	mov	r2, r3
 800a00a:	4623      	mov	r3, r4
 800a00c:	484d      	ldr	r0, [pc, #308]	; (800a144 <cppLoop+0x1ca4>)
 800a00e:	f7f7 f881 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_U){
 800a012:	483e      	ldr	r0, [pc, #248]	; (800a10c <cppLoop+0x1c6c>)
 800a014:	f7f7 ff9a 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b08      	cmp	r3, #8
 800a01c:	bf0c      	ite	eq
 800a01e:	2301      	moveq	r3, #1
 800a020:	2300      	movne	r3, #0
 800a022:	b2db      	uxtb	r3, r3
 800a024:	2b00      	cmp	r3, #0
 800a026:	d022      	beq.n	800a06e <cppLoop+0x1bce>
				led.LR(-1, 1);
 800a028:	2201      	movs	r2, #1
 800a02a:	f04f 31ff 	mov.w	r1, #4294967295
 800a02e:	4836      	ldr	r0, [pc, #216]	; (800a108 <cppLoop+0x1c68>)
 800a030:	f7f8 f8ac 	bl	800218c <_ZN3LED2LREaa>
				HAL_Delay(300);
 800a034:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a038:	f001 fb90 	bl	800b75c <HAL_Delay>
				selector_vel++;
 800a03c:	4b42      	ldr	r3, [pc, #264]	; (800a148 <cppLoop+0x1ca8>)
 800a03e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a042:	b29b      	uxth	r3, r3
 800a044:	3301      	adds	r3, #1
 800a046:	b29b      	uxth	r3, r3
 800a048:	b21a      	sxth	r2, r3
 800a04a:	4b3f      	ldr	r3, [pc, #252]	; (800a148 <cppLoop+0x1ca8>)
 800a04c:	801a      	strh	r2, [r3, #0]
				if(selector_vel >= 2) selector_vel = 0;
 800a04e:	4b3e      	ldr	r3, [pc, #248]	; (800a148 <cppLoop+0x1ca8>)
 800a050:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a054:	2b01      	cmp	r3, #1
 800a056:	dd02      	ble.n	800a05e <cppLoop+0x1bbe>
 800a058:	4b3b      	ldr	r3, [pc, #236]	; (800a148 <cppLoop+0x1ca8>)
 800a05a:	2200      	movs	r2, #0
 800a05c:	801a      	strh	r2, [r3, #0]
				led.LR(-1, 0);
 800a05e:	2200      	movs	r2, #0
 800a060:	f04f 31ff 	mov.w	r1, #4294967295
 800a064:	4828      	ldr	r0, [pc, #160]	; (800a108 <cppLoop+0x1c68>)
 800a066:	f7f8 f891 	bl	800218c <_ZN3LED2LREaa>
		break;
 800a06a:	f001 ba2b 	b.w	800b4c4 <cppLoop+0x3024>
			else if(joy_stick.getValue() == JOY_R){
 800a06e:	4827      	ldr	r0, [pc, #156]	; (800a10c <cppLoop+0x1c6c>)
 800a070:	f7f7 ff6c 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800a074:	4603      	mov	r3, r0
 800a076:	2b10      	cmp	r3, #16
 800a078:	bf0c      	ite	eq
 800a07a:	2301      	moveq	r3, #1
 800a07c:	2300      	movne	r3, #0
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	2b00      	cmp	r3, #0
 800a082:	d063      	beq.n	800a14c <cppLoop+0x1cac>
				led.LR(-1, 1);
 800a084:	2201      	movs	r2, #1
 800a086:	f04f 31ff 	mov.w	r1, #4294967295
 800a08a:	481f      	ldr	r0, [pc, #124]	; (800a108 <cppLoop+0x1c68>)
 800a08c:	f7f8 f87e 	bl	800218c <_ZN3LED2LREaa>
				HAL_Delay(100);
 800a090:	2064      	movs	r0, #100	; 0x64
 800a092:	f001 fb63 	bl	800b75c <HAL_Delay>
				if(selector_vel == 0)
 800a096:	4b2c      	ldr	r3, [pc, #176]	; (800a148 <cppLoop+0x1ca8>)
 800a098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d113      	bne.n	800a0c8 <cppLoop+0x1c28>
					adj_max_velocity3 = adj_max_velocity3 + 0.1;
 800a0a0:	4b1c      	ldr	r3, [pc, #112]	; (800a114 <cppLoop+0x1c74>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7f6 fa67 	bl	8000578 <__aeabi_f2d>
 800a0aa:	a315      	add	r3, pc, #84	; (adr r3, 800a100 <cppLoop+0x1c60>)
 800a0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b0:	f7f6 f904 	bl	80002bc <__adddf3>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	460c      	mov	r4, r1
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	4621      	mov	r1, r4
 800a0bc:	f7f6 fdac 	bl	8000c18 <__aeabi_d2f>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	4b14      	ldr	r3, [pc, #80]	; (800a114 <cppLoop+0x1c74>)
 800a0c4:	601a      	str	r2, [r3, #0]
 800a0c6:	e012      	b.n	800a0ee <cppLoop+0x1c4e>
					adj_min_velocity3 = adj_min_velocity3 + 0.1;
 800a0c8:	4b14      	ldr	r3, [pc, #80]	; (800a11c <cppLoop+0x1c7c>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7f6 fa53 	bl	8000578 <__aeabi_f2d>
 800a0d2:	a30b      	add	r3, pc, #44	; (adr r3, 800a100 <cppLoop+0x1c60>)
 800a0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d8:	f7f6 f8f0 	bl	80002bc <__adddf3>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	460c      	mov	r4, r1
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	4621      	mov	r1, r4
 800a0e4:	f7f6 fd98 	bl	8000c18 <__aeabi_d2f>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	4b0c      	ldr	r3, [pc, #48]	; (800a11c <cppLoop+0x1c7c>)
 800a0ec:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f04f 31ff 	mov.w	r1, #4294967295
 800a0f4:	4804      	ldr	r0, [pc, #16]	; (800a108 <cppLoop+0x1c68>)
 800a0f6:	f7f8 f849 	bl	800218c <_ZN3LED2LREaa>
		break;
 800a0fa:	f001 b9e3 	b.w	800b4c4 <cppLoop+0x3024>
 800a0fe:	bf00      	nop
 800a100:	9999999a 	.word	0x9999999a
 800a104:	3fb99999 	.word	0x3fb99999
 800a108:	20000558 	.word	0x20000558
 800a10c:	2000054c 	.word	0x2000054c
 800a110:	2004757e 	.word	0x2004757e
 800a114:	200475dc 	.word	0x200475dc
 800a118:	0801aa38 	.word	0x0801aa38
 800a11c:	200475e4 	.word	0x200475e4
 800a120:	0801a9a4 	.word	0x0801a9a4
 800a124:	20047584 	.word	0x20047584
 800a128:	2004758c 	.word	0x2004758c
 800a12c:	20047594 	.word	0x20047594
 800a130:	200209d4 	.word	0x200209d4
 800a134:	2000057c 	.word	0x2000057c
 800a138:	0801a9b0 	.word	0x0801a9b0
 800a13c:	0801a9bc 	.word	0x0801a9bc
 800a140:	0801a9c8 	.word	0x0801a9c8
 800a144:	0801a9d8 	.word	0x0801a9d8
 800a148:	20047582 	.word	0x20047582
			else if(joy_stick.getValue() == JOY_L){
 800a14c:	48a0      	ldr	r0, [pc, #640]	; (800a3d0 <cppLoop+0x1f30>)
 800a14e:	f7f7 fefd 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800a152:	4603      	mov	r3, r0
 800a154:	2b01      	cmp	r3, #1
 800a156:	bf0c      	ite	eq
 800a158:	2301      	moveq	r3, #1
 800a15a:	2300      	movne	r3, #0
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d03c      	beq.n	800a1dc <cppLoop+0x1d3c>
				led.LR(-1, 1);
 800a162:	2201      	movs	r2, #1
 800a164:	f04f 31ff 	mov.w	r1, #4294967295
 800a168:	489a      	ldr	r0, [pc, #616]	; (800a3d4 <cppLoop+0x1f34>)
 800a16a:	f7f8 f80f 	bl	800218c <_ZN3LED2LREaa>
				HAL_Delay(100);
 800a16e:	2064      	movs	r0, #100	; 0x64
 800a170:	f001 faf4 	bl	800b75c <HAL_Delay>
				if(selector_vel == 0)
 800a174:	4b98      	ldr	r3, [pc, #608]	; (800a3d8 <cppLoop+0x1f38>)
 800a176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d113      	bne.n	800a1a6 <cppLoop+0x1d06>
					adj_max_velocity3 = adj_max_velocity3 - 0.1;
 800a17e:	4b97      	ldr	r3, [pc, #604]	; (800a3dc <cppLoop+0x1f3c>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4618      	mov	r0, r3
 800a184:	f7f6 f9f8 	bl	8000578 <__aeabi_f2d>
 800a188:	a38f      	add	r3, pc, #572	; (adr r3, 800a3c8 <cppLoop+0x1f28>)
 800a18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18e:	f7f6 f893 	bl	80002b8 <__aeabi_dsub>
 800a192:	4603      	mov	r3, r0
 800a194:	460c      	mov	r4, r1
 800a196:	4618      	mov	r0, r3
 800a198:	4621      	mov	r1, r4
 800a19a:	f7f6 fd3d 	bl	8000c18 <__aeabi_d2f>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	4b8e      	ldr	r3, [pc, #568]	; (800a3dc <cppLoop+0x1f3c>)
 800a1a2:	601a      	str	r2, [r3, #0]
 800a1a4:	e012      	b.n	800a1cc <cppLoop+0x1d2c>
					adj_min_velocity3 = adj_min_velocity3 - 0.1;
 800a1a6:	4b8e      	ldr	r3, [pc, #568]	; (800a3e0 <cppLoop+0x1f40>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7f6 f9e4 	bl	8000578 <__aeabi_f2d>
 800a1b0:	a385      	add	r3, pc, #532	; (adr r3, 800a3c8 <cppLoop+0x1f28>)
 800a1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b6:	f7f6 f87f 	bl	80002b8 <__aeabi_dsub>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	460c      	mov	r4, r1
 800a1be:	4618      	mov	r0, r3
 800a1c0:	4621      	mov	r1, r4
 800a1c2:	f7f6 fd29 	bl	8000c18 <__aeabi_d2f>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	4b85      	ldr	r3, [pc, #532]	; (800a3e0 <cppLoop+0x1f40>)
 800a1ca:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f04f 31ff 	mov.w	r1, #4294967295
 800a1d2:	4880      	ldr	r0, [pc, #512]	; (800a3d4 <cppLoop+0x1f34>)
 800a1d4:	f7f7 ffda 	bl	800218c <_ZN3LED2LREaa>
		break;
 800a1d8:	f001 b974 	b.w	800b4c4 <cppLoop+0x3024>
			else if(joy_stick.getValue() == JOY_C){
 800a1dc:	487c      	ldr	r0, [pc, #496]	; (800a3d0 <cppLoop+0x1f30>)
 800a1de:	f7f7 feb5 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	bf0c      	ite	eq
 800a1e8:	2301      	moveq	r3, #1
 800a1ea:	2300      	movne	r3, #0
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	f001 8168 	beq.w	800b4c4 <cppLoop+0x3024>
				led.LR(-1, 1);
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	f04f 31ff 	mov.w	r1, #4294967295
 800a1fa:	4876      	ldr	r0, [pc, #472]	; (800a3d4 <cppLoop+0x1f34>)
 800a1fc:	f7f7 ffc6 	bl	800218c <_ZN3LED2LREaa>
				HAL_Delay(300);
 800a200:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a204:	f001 faaa 	bl	800b75c <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL4.TXT", 1, &adj_max_velocity3, OVER_WRITE);
 800a208:	2300      	movs	r3, #0
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	4b73      	ldr	r3, [pc, #460]	; (800a3dc <cppLoop+0x1f3c>)
 800a20e:	2201      	movs	r2, #1
 800a210:	4974      	ldr	r1, [pc, #464]	; (800a3e4 <cppLoop+0x1f44>)
 800a212:	4875      	ldr	r0, [pc, #468]	; (800a3e8 <cppLoop+0x1f48>)
 800a214:	f7f7 fa9e 	bl	8001754 <sd_write_array_float>
				sd_write_array_float("PARAMS", "MINVEL4.TXT", 1, &adj_min_velocity3, OVER_WRITE);
 800a218:	2300      	movs	r3, #0
 800a21a:	9300      	str	r3, [sp, #0]
 800a21c:	4b70      	ldr	r3, [pc, #448]	; (800a3e0 <cppLoop+0x1f40>)
 800a21e:	2201      	movs	r2, #1
 800a220:	4972      	ldr	r1, [pc, #456]	; (800a3ec <cppLoop+0x1f4c>)
 800a222:	4871      	ldr	r0, [pc, #452]	; (800a3e8 <cppLoop+0x1f48>)
 800a224:	f7f7 fa96 	bl	8001754 <sd_write_array_float>
				line_trace.setMaxVelocity3(adj_max_velocity3);
 800a228:	4b6c      	ldr	r3, [pc, #432]	; (800a3dc <cppLoop+0x1f3c>)
 800a22a:	edd3 7a00 	vldr	s15, [r3]
 800a22e:	eeb0 0a67 	vmov.f32	s0, s15
 800a232:	486f      	ldr	r0, [pc, #444]	; (800a3f0 <cppLoop+0x1f50>)
 800a234:	f7f9 fec0 	bl	8003fb8 <_ZN9LineTrace15setMaxVelocity3Ef>
				line_trace.setMinVelocity3(adj_min_velocity3);
 800a238:	4b69      	ldr	r3, [pc, #420]	; (800a3e0 <cppLoop+0x1f40>)
 800a23a:	edd3 7a00 	vldr	s15, [r3]
 800a23e:	eeb0 0a67 	vmov.f32	s0, s15
 800a242:	486b      	ldr	r0, [pc, #428]	; (800a3f0 <cppLoop+0x1f50>)
 800a244:	f7f9 fec8 	bl	8003fd8 <_ZN9LineTrace15setMinVelocity3Ef>
				led.LR(-1, 0);
 800a248:	2200      	movs	r2, #0
 800a24a:	f04f 31ff 	mov.w	r1, #4294967295
 800a24e:	4861      	ldr	r0, [pc, #388]	; (800a3d4 <cppLoop+0x1f34>)
 800a250:	f7f7 ff9c 	bl	800218c <_ZN3LED2LREaa>
		break;
 800a254:	f001 b936 	b.w	800b4c4 <cppLoop+0x3024>

	case 6:
		led.fullColor('R');
 800a258:	2152      	movs	r1, #82	; 0x52
 800a25a:	485e      	ldr	r0, [pc, #376]	; (800a3d4 <cppLoop+0x1f34>)
 800a25c:	f7f7 feda 	bl	8002014 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 800a260:	485b      	ldr	r0, [pc, #364]	; (800a3d0 <cppLoop+0x1f30>)
 800a262:	f7f7 fe73 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800a266:	4603      	mov	r3, r0
 800a268:	2b04      	cmp	r3, #4
 800a26a:	bf0c      	ite	eq
 800a26c:	2301      	moveq	r3, #1
 800a26e:	2300      	movne	r3, #0
 800a270:	b2db      	uxtb	r3, r3
 800a272:	2b00      	cmp	r3, #0
 800a274:	d020      	beq.n	800a2b8 <cppLoop+0x1e18>
			led.LR(-1, 1);
 800a276:	2201      	movs	r2, #1
 800a278:	f04f 31ff 	mov.w	r1, #4294967295
 800a27c:	4855      	ldr	r0, [pc, #340]	; (800a3d4 <cppLoop+0x1f34>)
 800a27e:	f7f7 ff85 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(300);
 800a282:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a286:	f001 fa69 	bl	800b75c <HAL_Delay>

			selector_run++;
 800a28a:	4b5a      	ldr	r3, [pc, #360]	; (800a3f4 <cppLoop+0x1f54>)
 800a28c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a290:	b29b      	uxth	r3, r3
 800a292:	3301      	adds	r3, #1
 800a294:	b29b      	uxth	r3, r3
 800a296:	b21a      	sxth	r2, r3
 800a298:	4b56      	ldr	r3, [pc, #344]	; (800a3f4 <cppLoop+0x1f54>)
 800a29a:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 800a29c:	4b55      	ldr	r3, [pc, #340]	; (800a3f4 <cppLoop+0x1f54>)
 800a29e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	dd02      	ble.n	800a2ac <cppLoop+0x1e0c>
 800a2a6:	4b53      	ldr	r3, [pc, #332]	; (800a3f4 <cppLoop+0x1f54>)
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f04f 31ff 	mov.w	r1, #4294967295
 800a2b2:	4848      	ldr	r0, [pc, #288]	; (800a3d4 <cppLoop+0x1f34>)
 800a2b4:	f7f7 ff6a 	bl	800218c <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 800a2b8:	4b4e      	ldr	r3, [pc, #312]	; (800a3f4 <cppLoop+0x1f54>)
 800a2ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f040 80b0 	bne.w	800a424 <cppLoop+0x1f84>
			lcd_clear();
 800a2c4:	f7f6 feec 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	2000      	movs	r0, #0
 800a2cc:	f7f6 fef8 	bl	80010c0 <lcd_locate>
			lcd_printf("5:   %3.1f", adj_max_velocity4);
 800a2d0:	4b49      	ldr	r3, [pc, #292]	; (800a3f8 <cppLoop+0x1f58>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7f6 f94f 	bl	8000578 <__aeabi_f2d>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	460c      	mov	r4, r1
 800a2de:	461a      	mov	r2, r3
 800a2e0:	4623      	mov	r3, r4
 800a2e2:	4846      	ldr	r0, [pc, #280]	; (800a3fc <cppLoop+0x1f5c>)
 800a2e4:	f7f6 ff16 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 800a2e8:	2101      	movs	r1, #1
 800a2ea:	2000      	movs	r0, #0
 800a2ec:	f7f6 fee8 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_min_velocity4);
 800a2f0:	4b43      	ldr	r3, [pc, #268]	; (800a400 <cppLoop+0x1f60>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7f6 f93f 	bl	8000578 <__aeabi_f2d>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	460c      	mov	r4, r1
 800a2fe:	461a      	mov	r2, r3
 800a300:	4623      	mov	r3, r4
 800a302:	4840      	ldr	r0, [pc, #256]	; (800a404 <cppLoop+0x1f64>)
 800a304:	f7f6 ff06 	bl	8001114 <lcd_printf>

			if(joy_stick.getValue() == JOY_C){
 800a308:	4831      	ldr	r0, [pc, #196]	; (800a3d0 <cppLoop+0x1f30>)
 800a30a:	f7f7 fe1f 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b02      	cmp	r3, #2
 800a312:	bf0c      	ite	eq
 800a314:	2301      	moveq	r3, #1
 800a316:	2300      	movne	r3, #0
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	f001 80d4 	beq.w	800b4c8 <cppLoop+0x3028>
				HAL_Delay(500);
 800a320:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a324:	f001 fa1a 	bl	800b75c <HAL_Delay>

				led.LR(1, -1);
 800a328:	f04f 32ff 	mov.w	r2, #4294967295
 800a32c:	2101      	movs	r1, #1
 800a32e:	4829      	ldr	r0, [pc, #164]	; (800a3d4 <cppLoop+0x1f34>)
 800a330:	f7f7 ff2c 	bl	800218c <_ZN3LED2LREaa>
				line_trace.setGain(adj_kp, adj_ki, adj_kd);
 800a334:	4b34      	ldr	r3, [pc, #208]	; (800a408 <cppLoop+0x1f68>)
 800a336:	edd3 7a00 	vldr	s15, [r3]
 800a33a:	4b34      	ldr	r3, [pc, #208]	; (800a40c <cppLoop+0x1f6c>)
 800a33c:	ed93 7a00 	vldr	s14, [r3]
 800a340:	4b33      	ldr	r3, [pc, #204]	; (800a410 <cppLoop+0x1f70>)
 800a342:	edd3 6a00 	vldr	s13, [r3]
 800a346:	eeb0 1a66 	vmov.f32	s2, s13
 800a34a:	eef0 0a47 	vmov.f32	s1, s14
 800a34e:	eeb0 0a67 	vmov.f32	s0, s15
 800a352:	4827      	ldr	r0, [pc, #156]	; (800a3f0 <cppLoop+0x1f50>)
 800a354:	f7f9 fd54 	bl	8003e00 <_ZN9LineTrace7setGainEfff>
				line_trace.setMode(FIFTH_RUNNING);
 800a358:	2104      	movs	r1, #4
 800a35a:	4825      	ldr	r0, [pc, #148]	; (800a3f0 <cppLoop+0x1f50>)
 800a35c:	f7fa f8ba 	bl	80044d4 <_ZN9LineTrace7setModeEs>
				line_trace.setTargetVelocity(adj_min_velocity4);
 800a360:	4b27      	ldr	r3, [pc, #156]	; (800a400 <cppLoop+0x1f60>)
 800a362:	edd3 7a00 	vldr	s15, [r3]
 800a366:	eeb0 0a67 	vmov.f32	s0, s15
 800a36a:	4821      	ldr	r0, [pc, #132]	; (800a3f0 <cppLoop+0x1f50>)
 800a36c:	f7f9 fdd4 	bl	8003f18 <_ZN9LineTrace17setTargetVelocityEf>
				line_trace.setMaxVelocity4(adj_max_velocity4);
 800a370:	4b21      	ldr	r3, [pc, #132]	; (800a3f8 <cppLoop+0x1f58>)
 800a372:	edd3 7a00 	vldr	s15, [r3]
 800a376:	eeb0 0a67 	vmov.f32	s0, s15
 800a37a:	481d      	ldr	r0, [pc, #116]	; (800a3f0 <cppLoop+0x1f50>)
 800a37c:	f7f9 fe3c 	bl	8003ff8 <_ZN9LineTrace15setMaxVelocity4Ef>
				line_trace.setMinVelocity4(adj_min_velocity4);
 800a380:	4b1f      	ldr	r3, [pc, #124]	; (800a400 <cppLoop+0x1f60>)
 800a382:	edd3 7a00 	vldr	s15, [r3]
 800a386:	eeb0 0a67 	vmov.f32	s0, s15
 800a38a:	4819      	ldr	r0, [pc, #100]	; (800a3f0 <cppLoop+0x1f50>)
 800a38c:	f7f9 fe44 	bl	8004018 <_ZN9LineTrace15setMinVelocity4Ef>
				line_trace.createVelocityTabele();
 800a390:	4817      	ldr	r0, [pc, #92]	; (800a3f0 <cppLoop+0x1f50>)
 800a392:	f7fa fae7 	bl	8004964 <_ZN9LineTrace20createVelocityTabeleEv>

				//logger.start();

				line_trace.running();
 800a396:	4816      	ldr	r0, [pc, #88]	; (800a3f0 <cppLoop+0x1f50>)
 800a398:	f7fa f8ec 	bl	8004574 <_ZN9LineTrace7runningEv>

				logger.stop();
 800a39c:	481d      	ldr	r0, [pc, #116]	; (800a414 <cppLoop+0x1f74>)
 800a39e:	f7fa ffe3 	bl	8005368 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 800a3a2:	4a1d      	ldr	r2, [pc, #116]	; (800a418 <cppLoop+0x1f78>)
 800a3a4:	491d      	ldr	r1, [pc, #116]	; (800a41c <cppLoop+0x1f7c>)
 800a3a6:	481b      	ldr	r0, [pc, #108]	; (800a414 <cppLoop+0x1f74>)
 800a3a8:	f7fa fe77 	bl	800509a <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 800a3ac:	4a1c      	ldr	r2, [pc, #112]	; (800a420 <cppLoop+0x1f80>)
 800a3ae:	491b      	ldr	r1, [pc, #108]	; (800a41c <cppLoop+0x1f7c>)
 800a3b0:	4818      	ldr	r0, [pc, #96]	; (800a414 <cppLoop+0x1f74>)
 800a3b2:	f7fa fe86 	bl	80050c2 <_ZN6Logger9saveLogs2EPKcS1_>

				led.LR(0, -1);
 800a3b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	4805      	ldr	r0, [pc, #20]	; (800a3d4 <cppLoop+0x1f34>)
 800a3be:	f7f7 fee5 	bl	800218c <_ZN3LED2LREaa>

				led.LR(-1, 0);
			}

		}
		break;
 800a3c2:	f001 b881 	b.w	800b4c8 <cppLoop+0x3028>
 800a3c6:	bf00      	nop
 800a3c8:	9999999a 	.word	0x9999999a
 800a3cc:	3fb99999 	.word	0x3fb99999
 800a3d0:	2000054c 	.word	0x2000054c
 800a3d4:	20000558 	.word	0x20000558
 800a3d8:	20047582 	.word	0x20047582
 800a3dc:	200475dc 	.word	0x200475dc
 800a3e0:	200475e4 	.word	0x200475e4
 800a3e4:	0801aa44 	.word	0x0801aa44
 800a3e8:	0801a958 	.word	0x0801a958
 800a3ec:	0801aa50 	.word	0x0801aa50
 800a3f0:	200209d4 	.word	0x200209d4
 800a3f4:	2004757e 	.word	0x2004757e
 800a3f8:	200475ec 	.word	0x200475ec
 800a3fc:	0801aa5c 	.word	0x0801aa5c
 800a400:	200475f4 	.word	0x200475f4
 800a404:	0801a9a4 	.word	0x0801a9a4
 800a408:	20047584 	.word	0x20047584
 800a40c:	2004758c 	.word	0x2004758c
 800a410:	20047594 	.word	0x20047594
 800a414:	2000057c 	.word	0x2000057c
 800a418:	0801a9b0 	.word	0x0801a9b0
 800a41c:	0801a9bc 	.word	0x0801a9bc
 800a420:	0801a9c8 	.word	0x0801a9c8
			lcd_clear();
 800a424:	f7f6 fe3c 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 800a428:	2100      	movs	r1, #0
 800a42a:	2000      	movs	r0, #0
 800a42c:	f7f6 fe48 	bl	80010c0 <lcd_locate>
			lcd_printf("5:   %3.1f", line_trace.getMaxVelocity4());
 800a430:	48bd      	ldr	r0, [pc, #756]	; (800a728 <cppLoop+0x2288>)
 800a432:	f7f9 fe71 	bl	8004118 <_ZN9LineTrace15getMaxVelocity4Ev>
 800a436:	ee10 3a10 	vmov	r3, s0
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7f6 f89c 	bl	8000578 <__aeabi_f2d>
 800a440:	4603      	mov	r3, r0
 800a442:	460c      	mov	r4, r1
 800a444:	461a      	mov	r2, r3
 800a446:	4623      	mov	r3, r4
 800a448:	48b8      	ldr	r0, [pc, #736]	; (800a72c <cppLoop+0x228c>)
 800a44a:	f7f6 fe63 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 800a44e:	2101      	movs	r1, #1
 800a450:	2000      	movs	r0, #0
 800a452:	f7f6 fe35 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity4());
 800a456:	48b4      	ldr	r0, [pc, #720]	; (800a728 <cppLoop+0x2288>)
 800a458:	f7f9 fe6e 	bl	8004138 <_ZN9LineTrace15getMinVelocity4Ev>
 800a45c:	ee10 3a10 	vmov	r3, s0
 800a460:	4618      	mov	r0, r3
 800a462:	f7f6 f889 	bl	8000578 <__aeabi_f2d>
 800a466:	4603      	mov	r3, r0
 800a468:	460c      	mov	r4, r1
 800a46a:	461a      	mov	r2, r3
 800a46c:	4623      	mov	r3, r4
 800a46e:	48b0      	ldr	r0, [pc, #704]	; (800a730 <cppLoop+0x2290>)
 800a470:	f7f6 fe50 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_U){
 800a474:	48af      	ldr	r0, [pc, #700]	; (800a734 <cppLoop+0x2294>)
 800a476:	f7f7 fd69 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800a47a:	4603      	mov	r3, r0
 800a47c:	2b08      	cmp	r3, #8
 800a47e:	bf0c      	ite	eq
 800a480:	2301      	moveq	r3, #1
 800a482:	2300      	movne	r3, #0
 800a484:	b2db      	uxtb	r3, r3
 800a486:	2b00      	cmp	r3, #0
 800a488:	d022      	beq.n	800a4d0 <cppLoop+0x2030>
				led.LR(-1, 1);
 800a48a:	2201      	movs	r2, #1
 800a48c:	f04f 31ff 	mov.w	r1, #4294967295
 800a490:	48a9      	ldr	r0, [pc, #676]	; (800a738 <cppLoop+0x2298>)
 800a492:	f7f7 fe7b 	bl	800218c <_ZN3LED2LREaa>
				HAL_Delay(300);
 800a496:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a49a:	f001 f95f 	bl	800b75c <HAL_Delay>
				selector_vel++;
 800a49e:	4ba7      	ldr	r3, [pc, #668]	; (800a73c <cppLoop+0x229c>)
 800a4a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	b21a      	sxth	r2, r3
 800a4ac:	4ba3      	ldr	r3, [pc, #652]	; (800a73c <cppLoop+0x229c>)
 800a4ae:	801a      	strh	r2, [r3, #0]
				if(selector_vel >= 2) selector_vel = 0;
 800a4b0:	4ba2      	ldr	r3, [pc, #648]	; (800a73c <cppLoop+0x229c>)
 800a4b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	dd02      	ble.n	800a4c0 <cppLoop+0x2020>
 800a4ba:	4ba0      	ldr	r3, [pc, #640]	; (800a73c <cppLoop+0x229c>)
 800a4bc:	2200      	movs	r2, #0
 800a4be:	801a      	strh	r2, [r3, #0]
				led.LR(-1, 0);
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f04f 31ff 	mov.w	r1, #4294967295
 800a4c6:	489c      	ldr	r0, [pc, #624]	; (800a738 <cppLoop+0x2298>)
 800a4c8:	f7f7 fe60 	bl	800218c <_ZN3LED2LREaa>
		break;
 800a4cc:	f000 bffc 	b.w	800b4c8 <cppLoop+0x3028>
			else if(joy_stick.getValue() == JOY_R){
 800a4d0:	4898      	ldr	r0, [pc, #608]	; (800a734 <cppLoop+0x2294>)
 800a4d2:	f7f7 fd3b 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b10      	cmp	r3, #16
 800a4da:	bf0c      	ite	eq
 800a4dc:	2301      	moveq	r3, #1
 800a4de:	2300      	movne	r3, #0
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d03c      	beq.n	800a560 <cppLoop+0x20c0>
				led.LR(-1, 1);
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f04f 31ff 	mov.w	r1, #4294967295
 800a4ec:	4892      	ldr	r0, [pc, #584]	; (800a738 <cppLoop+0x2298>)
 800a4ee:	f7f7 fe4d 	bl	800218c <_ZN3LED2LREaa>
				HAL_Delay(100);
 800a4f2:	2064      	movs	r0, #100	; 0x64
 800a4f4:	f001 f932 	bl	800b75c <HAL_Delay>
				if(selector_vel == 0)
 800a4f8:	4b90      	ldr	r3, [pc, #576]	; (800a73c <cppLoop+0x229c>)
 800a4fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d113      	bne.n	800a52a <cppLoop+0x208a>
					adj_max_velocity4 = adj_max_velocity4 + 0.1;
 800a502:	4b8f      	ldr	r3, [pc, #572]	; (800a740 <cppLoop+0x22a0>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4618      	mov	r0, r3
 800a508:	f7f6 f836 	bl	8000578 <__aeabi_f2d>
 800a50c:	a384      	add	r3, pc, #528	; (adr r3, 800a720 <cppLoop+0x2280>)
 800a50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a512:	f7f5 fed3 	bl	80002bc <__adddf3>
 800a516:	4603      	mov	r3, r0
 800a518:	460c      	mov	r4, r1
 800a51a:	4618      	mov	r0, r3
 800a51c:	4621      	mov	r1, r4
 800a51e:	f7f6 fb7b 	bl	8000c18 <__aeabi_d2f>
 800a522:	4602      	mov	r2, r0
 800a524:	4b86      	ldr	r3, [pc, #536]	; (800a740 <cppLoop+0x22a0>)
 800a526:	601a      	str	r2, [r3, #0]
 800a528:	e012      	b.n	800a550 <cppLoop+0x20b0>
					adj_min_velocity4 = adj_min_velocity4 + 0.1;
 800a52a:	4b86      	ldr	r3, [pc, #536]	; (800a744 <cppLoop+0x22a4>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4618      	mov	r0, r3
 800a530:	f7f6 f822 	bl	8000578 <__aeabi_f2d>
 800a534:	a37a      	add	r3, pc, #488	; (adr r3, 800a720 <cppLoop+0x2280>)
 800a536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53a:	f7f5 febf 	bl	80002bc <__adddf3>
 800a53e:	4603      	mov	r3, r0
 800a540:	460c      	mov	r4, r1
 800a542:	4618      	mov	r0, r3
 800a544:	4621      	mov	r1, r4
 800a546:	f7f6 fb67 	bl	8000c18 <__aeabi_d2f>
 800a54a:	4602      	mov	r2, r0
 800a54c:	4b7d      	ldr	r3, [pc, #500]	; (800a744 <cppLoop+0x22a4>)
 800a54e:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 800a550:	2200      	movs	r2, #0
 800a552:	f04f 31ff 	mov.w	r1, #4294967295
 800a556:	4878      	ldr	r0, [pc, #480]	; (800a738 <cppLoop+0x2298>)
 800a558:	f7f7 fe18 	bl	800218c <_ZN3LED2LREaa>
		break;
 800a55c:	f000 bfb4 	b.w	800b4c8 <cppLoop+0x3028>
			else if(joy_stick.getValue() == JOY_L){
 800a560:	4874      	ldr	r0, [pc, #464]	; (800a734 <cppLoop+0x2294>)
 800a562:	f7f7 fcf3 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800a566:	4603      	mov	r3, r0
 800a568:	2b01      	cmp	r3, #1
 800a56a:	bf0c      	ite	eq
 800a56c:	2301      	moveq	r3, #1
 800a56e:	2300      	movne	r3, #0
 800a570:	b2db      	uxtb	r3, r3
 800a572:	2b00      	cmp	r3, #0
 800a574:	d03c      	beq.n	800a5f0 <cppLoop+0x2150>
				led.LR(-1, 1);
 800a576:	2201      	movs	r2, #1
 800a578:	f04f 31ff 	mov.w	r1, #4294967295
 800a57c:	486e      	ldr	r0, [pc, #440]	; (800a738 <cppLoop+0x2298>)
 800a57e:	f7f7 fe05 	bl	800218c <_ZN3LED2LREaa>
				HAL_Delay(100);
 800a582:	2064      	movs	r0, #100	; 0x64
 800a584:	f001 f8ea 	bl	800b75c <HAL_Delay>
				if(selector_vel == 0)
 800a588:	4b6c      	ldr	r3, [pc, #432]	; (800a73c <cppLoop+0x229c>)
 800a58a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d113      	bne.n	800a5ba <cppLoop+0x211a>
					adj_max_velocity4 = adj_max_velocity4 - 0.1;
 800a592:	4b6b      	ldr	r3, [pc, #428]	; (800a740 <cppLoop+0x22a0>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4618      	mov	r0, r3
 800a598:	f7f5 ffee 	bl	8000578 <__aeabi_f2d>
 800a59c:	a360      	add	r3, pc, #384	; (adr r3, 800a720 <cppLoop+0x2280>)
 800a59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a2:	f7f5 fe89 	bl	80002b8 <__aeabi_dsub>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	460c      	mov	r4, r1
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	4621      	mov	r1, r4
 800a5ae:	f7f6 fb33 	bl	8000c18 <__aeabi_d2f>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	4b62      	ldr	r3, [pc, #392]	; (800a740 <cppLoop+0x22a0>)
 800a5b6:	601a      	str	r2, [r3, #0]
 800a5b8:	e012      	b.n	800a5e0 <cppLoop+0x2140>
					adj_min_velocity4 = adj_min_velocity4 - 0.1;
 800a5ba:	4b62      	ldr	r3, [pc, #392]	; (800a744 <cppLoop+0x22a4>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7f5 ffda 	bl	8000578 <__aeabi_f2d>
 800a5c4:	a356      	add	r3, pc, #344	; (adr r3, 800a720 <cppLoop+0x2280>)
 800a5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ca:	f7f5 fe75 	bl	80002b8 <__aeabi_dsub>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	460c      	mov	r4, r1
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	4621      	mov	r1, r4
 800a5d6:	f7f6 fb1f 	bl	8000c18 <__aeabi_d2f>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	4b59      	ldr	r3, [pc, #356]	; (800a744 <cppLoop+0x22a4>)
 800a5de:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f04f 31ff 	mov.w	r1, #4294967295
 800a5e6:	4854      	ldr	r0, [pc, #336]	; (800a738 <cppLoop+0x2298>)
 800a5e8:	f7f7 fdd0 	bl	800218c <_ZN3LED2LREaa>
		break;
 800a5ec:	f000 bf6c 	b.w	800b4c8 <cppLoop+0x3028>
			else if(joy_stick.getValue() == JOY_C){
 800a5f0:	4850      	ldr	r0, [pc, #320]	; (800a734 <cppLoop+0x2294>)
 800a5f2:	f7f7 fcab 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	bf0c      	ite	eq
 800a5fc:	2301      	moveq	r3, #1
 800a5fe:	2300      	movne	r3, #0
 800a600:	b2db      	uxtb	r3, r3
 800a602:	2b00      	cmp	r3, #0
 800a604:	f000 8760 	beq.w	800b4c8 <cppLoop+0x3028>
				led.LR(-1, 1);
 800a608:	2201      	movs	r2, #1
 800a60a:	f04f 31ff 	mov.w	r1, #4294967295
 800a60e:	484a      	ldr	r0, [pc, #296]	; (800a738 <cppLoop+0x2298>)
 800a610:	f7f7 fdbc 	bl	800218c <_ZN3LED2LREaa>
				HAL_Delay(300);
 800a614:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a618:	f001 f8a0 	bl	800b75c <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL5.TXT", 1, &adj_max_velocity4, OVER_WRITE);
 800a61c:	2300      	movs	r3, #0
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	4b47      	ldr	r3, [pc, #284]	; (800a740 <cppLoop+0x22a0>)
 800a622:	2201      	movs	r2, #1
 800a624:	4948      	ldr	r1, [pc, #288]	; (800a748 <cppLoop+0x22a8>)
 800a626:	4849      	ldr	r0, [pc, #292]	; (800a74c <cppLoop+0x22ac>)
 800a628:	f7f7 f894 	bl	8001754 <sd_write_array_float>
				sd_write_array_float("PARAMS", "MINVEL5.TXT", 1, &adj_min_velocity4, OVER_WRITE);
 800a62c:	2300      	movs	r3, #0
 800a62e:	9300      	str	r3, [sp, #0]
 800a630:	4b44      	ldr	r3, [pc, #272]	; (800a744 <cppLoop+0x22a4>)
 800a632:	2201      	movs	r2, #1
 800a634:	4946      	ldr	r1, [pc, #280]	; (800a750 <cppLoop+0x22b0>)
 800a636:	4845      	ldr	r0, [pc, #276]	; (800a74c <cppLoop+0x22ac>)
 800a638:	f7f7 f88c 	bl	8001754 <sd_write_array_float>
				line_trace.setMaxVelocity4(adj_max_velocity4);
 800a63c:	4b40      	ldr	r3, [pc, #256]	; (800a740 <cppLoop+0x22a0>)
 800a63e:	edd3 7a00 	vldr	s15, [r3]
 800a642:	eeb0 0a67 	vmov.f32	s0, s15
 800a646:	4838      	ldr	r0, [pc, #224]	; (800a728 <cppLoop+0x2288>)
 800a648:	f7f9 fcd6 	bl	8003ff8 <_ZN9LineTrace15setMaxVelocity4Ef>
				line_trace.setMinVelocity4(adj_min_velocity4);
 800a64c:	4b3d      	ldr	r3, [pc, #244]	; (800a744 <cppLoop+0x22a4>)
 800a64e:	edd3 7a00 	vldr	s15, [r3]
 800a652:	eeb0 0a67 	vmov.f32	s0, s15
 800a656:	4834      	ldr	r0, [pc, #208]	; (800a728 <cppLoop+0x2288>)
 800a658:	f7f9 fcde 	bl	8004018 <_ZN9LineTrace15setMinVelocity4Ef>
				led.LR(-1, 0);
 800a65c:	2200      	movs	r2, #0
 800a65e:	f04f 31ff 	mov.w	r1, #4294967295
 800a662:	4835      	ldr	r0, [pc, #212]	; (800a738 <cppLoop+0x2298>)
 800a664:	f7f7 fd92 	bl	800218c <_ZN3LED2LREaa>
		break;
 800a668:	f000 bf2e 	b.w	800b4c8 <cppLoop+0x3028>
	case 7:
		led.fullColor('W');
 800a66c:	2157      	movs	r1, #87	; 0x57
 800a66e:	4832      	ldr	r0, [pc, #200]	; (800a738 <cppLoop+0x2298>)
 800a670:	f7f7 fcd0 	bl	8002014 <_ZN3LED9fullColorEc>

		lcd_clear();
 800a674:	f7f6 fd14 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800a678:	2100      	movs	r1, #0
 800a67a:	2000      	movs	r0, #0
 800a67c:	f7f6 fd20 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc());
 800a680:	4829      	ldr	r0, [pc, #164]	; (800a728 <cppLoop+0x2288>)
 800a682:	f7f9 fdd1 	bl	8004228 <_ZN9LineTrace9getMaxAccEv>
 800a686:	ee10 3a10 	vmov	r3, s0
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7f5 ff74 	bl	8000578 <__aeabi_f2d>
 800a690:	4603      	mov	r3, r0
 800a692:	460c      	mov	r4, r1
 800a694:	461a      	mov	r2, r3
 800a696:	4623      	mov	r3, r4
 800a698:	482e      	ldr	r0, [pc, #184]	; (800a754 <cppLoop+0x22b4>)
 800a69a:	f7f6 fd3b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800a69e:	2101      	movs	r1, #1
 800a6a0:	2000      	movs	r0, #0
 800a6a2:	f7f6 fd0d 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec());
 800a6a6:	4820      	ldr	r0, [pc, #128]	; (800a728 <cppLoop+0x2288>)
 800a6a8:	f7f9 fdd0 	bl	800424c <_ZN9LineTrace9getMaxDecEv>
 800a6ac:	ee10 3a10 	vmov	r3, s0
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f7f5 ff61 	bl	8000578 <__aeabi_f2d>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	460c      	mov	r4, r1
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	4623      	mov	r3, r4
 800a6be:	4826      	ldr	r0, [pc, #152]	; (800a758 <cppLoop+0x22b8>)
 800a6c0:	f7f6 fd28 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 800a6c4:	481b      	ldr	r0, [pc, #108]	; (800a734 <cppLoop+0x2294>)
 800a6c6:	f7f7 fc41 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b04      	cmp	r3, #4
 800a6ce:	bf0c      	ite	eq
 800a6d0:	2301      	moveq	r3, #1
 800a6d2:	2300      	movne	r3, #0
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d042      	beq.n	800a760 <cppLoop+0x22c0>
			led.LR(-1, 1);
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f04f 31ff 	mov.w	r1, #4294967295
 800a6e0:	4815      	ldr	r0, [pc, #84]	; (800a738 <cppLoop+0x2298>)
 800a6e2:	f7f7 fd53 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(300);
 800a6e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a6ea:	f001 f837 	bl	800b75c <HAL_Delay>

			selector_acc++;
 800a6ee:	4b1b      	ldr	r3, [pc, #108]	; (800a75c <cppLoop+0x22bc>)
 800a6f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	b21a      	sxth	r2, r3
 800a6fc:	4b17      	ldr	r3, [pc, #92]	; (800a75c <cppLoop+0x22bc>)
 800a6fe:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 800a700:	4b16      	ldr	r3, [pc, #88]	; (800a75c <cppLoop+0x22bc>)
 800a702:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a706:	2b01      	cmp	r3, #1
 800a708:	dd02      	ble.n	800a710 <cppLoop+0x2270>
 800a70a:	4b14      	ldr	r3, [pc, #80]	; (800a75c <cppLoop+0x22bc>)
 800a70c:	2200      	movs	r2, #0
 800a70e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800a710:	2200      	movs	r2, #0
 800a712:	f04f 31ff 	mov.w	r1, #4294967295
 800a716:	4808      	ldr	r0, [pc, #32]	; (800a738 <cppLoop+0x2298>)
 800a718:	f7f7 fd38 	bl	800218c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 800a71c:	f000 bed6 	b.w	800b4cc <cppLoop+0x302c>
 800a720:	9999999a 	.word	0x9999999a
 800a724:	3fb99999 	.word	0x3fb99999
 800a728:	200209d4 	.word	0x200209d4
 800a72c:	0801aa5c 	.word	0x0801aa5c
 800a730:	0801a9d8 	.word	0x0801a9d8
 800a734:	2000054c 	.word	0x2000054c
 800a738:	20000558 	.word	0x20000558
 800a73c:	20047582 	.word	0x20047582
 800a740:	200475ec 	.word	0x200475ec
 800a744:	200475f4 	.word	0x200475f4
 800a748:	0801aa68 	.word	0x0801aa68
 800a74c:	0801a958 	.word	0x0801a958
 800a750:	0801aa74 	.word	0x0801aa74
 800a754:	0801aa80 	.word	0x0801aa80
 800a758:	0801aa8c 	.word	0x0801aa8c
 800a75c:	20047580 	.word	0x20047580
		else if(joy_stick.getValue() == JOY_R){
 800a760:	48b9      	ldr	r0, [pc, #740]	; (800aa48 <cppLoop+0x25a8>)
 800a762:	f7f7 fbf3 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800a766:	4603      	mov	r3, r0
 800a768:	2b10      	cmp	r3, #16
 800a76a:	bf0c      	ite	eq
 800a76c:	2301      	moveq	r3, #1
 800a76e:	2300      	movne	r3, #0
 800a770:	b2db      	uxtb	r3, r3
 800a772:	2b00      	cmp	r3, #0
 800a774:	d03c      	beq.n	800a7f0 <cppLoop+0x2350>
			led.LR(-1, 1);
 800a776:	2201      	movs	r2, #1
 800a778:	f04f 31ff 	mov.w	r1, #4294967295
 800a77c:	48b3      	ldr	r0, [pc, #716]	; (800aa4c <cppLoop+0x25ac>)
 800a77e:	f7f7 fd05 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800a782:	2064      	movs	r0, #100	; 0x64
 800a784:	f000 ffea 	bl	800b75c <HAL_Delay>
			if(selector_acc == 0){
 800a788:	4bb1      	ldr	r3, [pc, #708]	; (800aa50 <cppLoop+0x25b0>)
 800a78a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d113      	bne.n	800a7ba <cppLoop+0x231a>
				adj_acc = adj_acc + 0.1;
 800a792:	4bb0      	ldr	r3, [pc, #704]	; (800aa54 <cppLoop+0x25b4>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4618      	mov	r0, r3
 800a798:	f7f5 feee 	bl	8000578 <__aeabi_f2d>
 800a79c:	a3a8      	add	r3, pc, #672	; (adr r3, 800aa40 <cppLoop+0x25a0>)
 800a79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a2:	f7f5 fd8b 	bl	80002bc <__adddf3>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	460c      	mov	r4, r1
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	4621      	mov	r1, r4
 800a7ae:	f7f6 fa33 	bl	8000c18 <__aeabi_d2f>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	4ba7      	ldr	r3, [pc, #668]	; (800aa54 <cppLoop+0x25b4>)
 800a7b6:	601a      	str	r2, [r3, #0]
 800a7b8:	e012      	b.n	800a7e0 <cppLoop+0x2340>
				adj_dec = adj_dec + 0.1;
 800a7ba:	4ba7      	ldr	r3, [pc, #668]	; (800aa58 <cppLoop+0x25b8>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7f5 feda 	bl	8000578 <__aeabi_f2d>
 800a7c4:	a39e      	add	r3, pc, #632	; (adr r3, 800aa40 <cppLoop+0x25a0>)
 800a7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ca:	f7f5 fd77 	bl	80002bc <__adddf3>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	460c      	mov	r4, r1
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	4621      	mov	r1, r4
 800a7d6:	f7f6 fa1f 	bl	8000c18 <__aeabi_d2f>
 800a7da:	4602      	mov	r2, r0
 800a7dc:	4b9e      	ldr	r3, [pc, #632]	; (800aa58 <cppLoop+0x25b8>)
 800a7de:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f04f 31ff 	mov.w	r1, #4294967295
 800a7e6:	4899      	ldr	r0, [pc, #612]	; (800aa4c <cppLoop+0x25ac>)
 800a7e8:	f7f7 fcd0 	bl	800218c <_ZN3LED2LREaa>
		break;
 800a7ec:	f000 be6e 	b.w	800b4cc <cppLoop+0x302c>
		else if(joy_stick.getValue() == JOY_L){
 800a7f0:	4895      	ldr	r0, [pc, #596]	; (800aa48 <cppLoop+0x25a8>)
 800a7f2:	f7f7 fbab 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	bf0c      	ite	eq
 800a7fc:	2301      	moveq	r3, #1
 800a7fe:	2300      	movne	r3, #0
 800a800:	b2db      	uxtb	r3, r3
 800a802:	2b00      	cmp	r3, #0
 800a804:	d03c      	beq.n	800a880 <cppLoop+0x23e0>
			led.LR(-1, 1);
 800a806:	2201      	movs	r2, #1
 800a808:	f04f 31ff 	mov.w	r1, #4294967295
 800a80c:	488f      	ldr	r0, [pc, #572]	; (800aa4c <cppLoop+0x25ac>)
 800a80e:	f7f7 fcbd 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800a812:	2064      	movs	r0, #100	; 0x64
 800a814:	f000 ffa2 	bl	800b75c <HAL_Delay>
			if(selector_acc == 0){
 800a818:	4b8d      	ldr	r3, [pc, #564]	; (800aa50 <cppLoop+0x25b0>)
 800a81a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d113      	bne.n	800a84a <cppLoop+0x23aa>
				adj_acc = adj_acc - 0.1;
 800a822:	4b8c      	ldr	r3, [pc, #560]	; (800aa54 <cppLoop+0x25b4>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4618      	mov	r0, r3
 800a828:	f7f5 fea6 	bl	8000578 <__aeabi_f2d>
 800a82c:	a384      	add	r3, pc, #528	; (adr r3, 800aa40 <cppLoop+0x25a0>)
 800a82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a832:	f7f5 fd41 	bl	80002b8 <__aeabi_dsub>
 800a836:	4603      	mov	r3, r0
 800a838:	460c      	mov	r4, r1
 800a83a:	4618      	mov	r0, r3
 800a83c:	4621      	mov	r1, r4
 800a83e:	f7f6 f9eb 	bl	8000c18 <__aeabi_d2f>
 800a842:	4602      	mov	r2, r0
 800a844:	4b83      	ldr	r3, [pc, #524]	; (800aa54 <cppLoop+0x25b4>)
 800a846:	601a      	str	r2, [r3, #0]
 800a848:	e012      	b.n	800a870 <cppLoop+0x23d0>
				adj_dec = adj_dec - 0.1;
 800a84a:	4b83      	ldr	r3, [pc, #524]	; (800aa58 <cppLoop+0x25b8>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4618      	mov	r0, r3
 800a850:	f7f5 fe92 	bl	8000578 <__aeabi_f2d>
 800a854:	a37a      	add	r3, pc, #488	; (adr r3, 800aa40 <cppLoop+0x25a0>)
 800a856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85a:	f7f5 fd2d 	bl	80002b8 <__aeabi_dsub>
 800a85e:	4603      	mov	r3, r0
 800a860:	460c      	mov	r4, r1
 800a862:	4618      	mov	r0, r3
 800a864:	4621      	mov	r1, r4
 800a866:	f7f6 f9d7 	bl	8000c18 <__aeabi_d2f>
 800a86a:	4602      	mov	r2, r0
 800a86c:	4b7a      	ldr	r3, [pc, #488]	; (800aa58 <cppLoop+0x25b8>)
 800a86e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800a870:	2200      	movs	r2, #0
 800a872:	f04f 31ff 	mov.w	r1, #4294967295
 800a876:	4875      	ldr	r0, [pc, #468]	; (800aa4c <cppLoop+0x25ac>)
 800a878:	f7f7 fc88 	bl	800218c <_ZN3LED2LREaa>
		break;
 800a87c:	f000 be26 	b.w	800b4cc <cppLoop+0x302c>
		else if(joy_stick.getValue() == JOY_C){
 800a880:	4871      	ldr	r0, [pc, #452]	; (800aa48 <cppLoop+0x25a8>)
 800a882:	f7f7 fb63 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800a886:	4603      	mov	r3, r0
 800a888:	2b02      	cmp	r3, #2
 800a88a:	bf0c      	ite	eq
 800a88c:	2301      	moveq	r3, #1
 800a88e:	2300      	movne	r3, #0
 800a890:	b2db      	uxtb	r3, r3
 800a892:	2b00      	cmp	r3, #0
 800a894:	f000 861a 	beq.w	800b4cc <cppLoop+0x302c>
			led.LR(-1, 1);
 800a898:	2201      	movs	r2, #1
 800a89a:	f04f 31ff 	mov.w	r1, #4294967295
 800a89e:	486b      	ldr	r0, [pc, #428]	; (800aa4c <cppLoop+0x25ac>)
 800a8a0:	f7f7 fc74 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(300);
 800a8a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a8a8:	f000 ff58 	bl	800b75c <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	9300      	str	r3, [sp, #0]
 800a8b0:	4b68      	ldr	r3, [pc, #416]	; (800aa54 <cppLoop+0x25b4>)
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	4969      	ldr	r1, [pc, #420]	; (800aa5c <cppLoop+0x25bc>)
 800a8b6:	486a      	ldr	r0, [pc, #424]	; (800aa60 <cppLoop+0x25c0>)
 800a8b8:	f7f6 ff4c 	bl	8001754 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 800a8bc:	2300      	movs	r3, #0
 800a8be:	9300      	str	r3, [sp, #0]
 800a8c0:	4b65      	ldr	r3, [pc, #404]	; (800aa58 <cppLoop+0x25b8>)
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	4967      	ldr	r1, [pc, #412]	; (800aa64 <cppLoop+0x25c4>)
 800a8c6:	4866      	ldr	r0, [pc, #408]	; (800aa60 <cppLoop+0x25c0>)
 800a8c8:	f7f6 ff44 	bl	8001754 <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 800a8cc:	4b61      	ldr	r3, [pc, #388]	; (800aa54 <cppLoop+0x25b4>)
 800a8ce:	edd3 7a00 	vldr	s15, [r3]
 800a8d2:	4b61      	ldr	r3, [pc, #388]	; (800aa58 <cppLoop+0x25b8>)
 800a8d4:	ed93 7a00 	vldr	s14, [r3]
 800a8d8:	eef0 0a47 	vmov.f32	s1, s14
 800a8dc:	eeb0 0a67 	vmov.f32	s0, s15
 800a8e0:	4861      	ldr	r0, [pc, #388]	; (800aa68 <cppLoop+0x25c8>)
 800a8e2:	f7f9 fc39 	bl	8004158 <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f04f 31ff 	mov.w	r1, #4294967295
 800a8ec:	4857      	ldr	r0, [pc, #348]	; (800aa4c <cppLoop+0x25ac>)
 800a8ee:	f7f7 fc4d 	bl	800218c <_ZN3LED2LREaa>
		break;
 800a8f2:	f000 bdeb 	b.w	800b4cc <cppLoop+0x302c>

	case 8 :
		led.fullColor('W');
 800a8f6:	2157      	movs	r1, #87	; 0x57
 800a8f8:	4854      	ldr	r0, [pc, #336]	; (800aa4c <cppLoop+0x25ac>)
 800a8fa:	f7f7 fb8b 	bl	8002014 <_ZN3LED9fullColorEc>

		lcd_clear();
 800a8fe:	f7f6 fbcf 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800a902:	2100      	movs	r1, #0
 800a904:	2000      	movs	r0, #0
 800a906:	f7f6 fbdb 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC3:%3.1f", line_trace.getMaxAcc2());
 800a90a:	4857      	ldr	r0, [pc, #348]	; (800aa68 <cppLoop+0x25c8>)
 800a90c:	f7f9 fcb0 	bl	8004270 <_ZN9LineTrace10getMaxAcc2Ev>
 800a910:	ee10 3a10 	vmov	r3, s0
 800a914:	4618      	mov	r0, r3
 800a916:	f7f5 fe2f 	bl	8000578 <__aeabi_f2d>
 800a91a:	4603      	mov	r3, r0
 800a91c:	460c      	mov	r4, r1
 800a91e:	461a      	mov	r2, r3
 800a920:	4623      	mov	r3, r4
 800a922:	4852      	ldr	r0, [pc, #328]	; (800aa6c <cppLoop+0x25cc>)
 800a924:	f7f6 fbf6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800a928:	2101      	movs	r1, #1
 800a92a:	2000      	movs	r0, #0
 800a92c:	f7f6 fbc8 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC3:%3.1f", line_trace.getMaxDec2());
 800a930:	484d      	ldr	r0, [pc, #308]	; (800aa68 <cppLoop+0x25c8>)
 800a932:	f7f9 fcaf 	bl	8004294 <_ZN9LineTrace10getMaxDec2Ev>
 800a936:	ee10 3a10 	vmov	r3, s0
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7f5 fe1c 	bl	8000578 <__aeabi_f2d>
 800a940:	4603      	mov	r3, r0
 800a942:	460c      	mov	r4, r1
 800a944:	461a      	mov	r2, r3
 800a946:	4623      	mov	r3, r4
 800a948:	4849      	ldr	r0, [pc, #292]	; (800aa70 <cppLoop+0x25d0>)
 800a94a:	f7f6 fbe3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 800a94e:	483e      	ldr	r0, [pc, #248]	; (800aa48 <cppLoop+0x25a8>)
 800a950:	f7f7 fafc 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800a954:	4603      	mov	r3, r0
 800a956:	2b04      	cmp	r3, #4
 800a958:	bf0c      	ite	eq
 800a95a:	2301      	moveq	r3, #1
 800a95c:	2300      	movne	r3, #0
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	2b00      	cmp	r3, #0
 800a962:	d022      	beq.n	800a9aa <cppLoop+0x250a>
			led.LR(-1, 1);
 800a964:	2201      	movs	r2, #1
 800a966:	f04f 31ff 	mov.w	r1, #4294967295
 800a96a:	4838      	ldr	r0, [pc, #224]	; (800aa4c <cppLoop+0x25ac>)
 800a96c:	f7f7 fc0e 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(300);
 800a970:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a974:	f000 fef2 	bl	800b75c <HAL_Delay>

			selector_acc++;
 800a978:	4b35      	ldr	r3, [pc, #212]	; (800aa50 <cppLoop+0x25b0>)
 800a97a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a97e:	b29b      	uxth	r3, r3
 800a980:	3301      	adds	r3, #1
 800a982:	b29b      	uxth	r3, r3
 800a984:	b21a      	sxth	r2, r3
 800a986:	4b32      	ldr	r3, [pc, #200]	; (800aa50 <cppLoop+0x25b0>)
 800a988:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 800a98a:	4b31      	ldr	r3, [pc, #196]	; (800aa50 <cppLoop+0x25b0>)
 800a98c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a990:	2b01      	cmp	r3, #1
 800a992:	dd02      	ble.n	800a99a <cppLoop+0x24fa>
 800a994:	4b2e      	ldr	r3, [pc, #184]	; (800aa50 <cppLoop+0x25b0>)
 800a996:	2200      	movs	r2, #0
 800a998:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800a99a:	2200      	movs	r2, #0
 800a99c:	f04f 31ff 	mov.w	r1, #4294967295
 800a9a0:	482a      	ldr	r0, [pc, #168]	; (800aa4c <cppLoop+0x25ac>)
 800a9a2:	f7f7 fbf3 	bl	800218c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 800a9a6:	f000 bd93 	b.w	800b4d0 <cppLoop+0x3030>
		else if(joy_stick.getValue() == JOY_R){
 800a9aa:	4827      	ldr	r0, [pc, #156]	; (800aa48 <cppLoop+0x25a8>)
 800a9ac:	f7f7 face 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b10      	cmp	r3, #16
 800a9b4:	bf0c      	ite	eq
 800a9b6:	2301      	moveq	r3, #1
 800a9b8:	2300      	movne	r3, #0
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d05d      	beq.n	800aa7c <cppLoop+0x25dc>
			led.LR(-1, 1);
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	f04f 31ff 	mov.w	r1, #4294967295
 800a9c6:	4821      	ldr	r0, [pc, #132]	; (800aa4c <cppLoop+0x25ac>)
 800a9c8:	f7f7 fbe0 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800a9cc:	2064      	movs	r0, #100	; 0x64
 800a9ce:	f000 fec5 	bl	800b75c <HAL_Delay>
			if(selector_acc == 0){
 800a9d2:	4b1f      	ldr	r3, [pc, #124]	; (800aa50 <cppLoop+0x25b0>)
 800a9d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d113      	bne.n	800aa04 <cppLoop+0x2564>
				adj_acc2 = adj_acc2 + 0.1;
 800a9dc:	4b25      	ldr	r3, [pc, #148]	; (800aa74 <cppLoop+0x25d4>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7f5 fdc9 	bl	8000578 <__aeabi_f2d>
 800a9e6:	a316      	add	r3, pc, #88	; (adr r3, 800aa40 <cppLoop+0x25a0>)
 800a9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ec:	f7f5 fc66 	bl	80002bc <__adddf3>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	4621      	mov	r1, r4
 800a9f8:	f7f6 f90e 	bl	8000c18 <__aeabi_d2f>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	4b1d      	ldr	r3, [pc, #116]	; (800aa74 <cppLoop+0x25d4>)
 800aa00:	601a      	str	r2, [r3, #0]
 800aa02:	e012      	b.n	800aa2a <cppLoop+0x258a>
				adj_dec2 = adj_dec2 + 0.1;
 800aa04:	4b1c      	ldr	r3, [pc, #112]	; (800aa78 <cppLoop+0x25d8>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7f5 fdb5 	bl	8000578 <__aeabi_f2d>
 800aa0e:	a30c      	add	r3, pc, #48	; (adr r3, 800aa40 <cppLoop+0x25a0>)
 800aa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa14:	f7f5 fc52 	bl	80002bc <__adddf3>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	460c      	mov	r4, r1
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	4621      	mov	r1, r4
 800aa20:	f7f6 f8fa 	bl	8000c18 <__aeabi_d2f>
 800aa24:	4602      	mov	r2, r0
 800aa26:	4b14      	ldr	r3, [pc, #80]	; (800aa78 <cppLoop+0x25d8>)
 800aa28:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f04f 31ff 	mov.w	r1, #4294967295
 800aa30:	4806      	ldr	r0, [pc, #24]	; (800aa4c <cppLoop+0x25ac>)
 800aa32:	f7f7 fbab 	bl	800218c <_ZN3LED2LREaa>
		break;
 800aa36:	f000 bd4b 	b.w	800b4d0 <cppLoop+0x3030>
 800aa3a:	bf00      	nop
 800aa3c:	f3af 8000 	nop.w
 800aa40:	9999999a 	.word	0x9999999a
 800aa44:	3fb99999 	.word	0x3fb99999
 800aa48:	2000054c 	.word	0x2000054c
 800aa4c:	20000558 	.word	0x20000558
 800aa50:	20047580 	.word	0x20047580
 800aa54:	200475fc 	.word	0x200475fc
 800aa58:	20047604 	.word	0x20047604
 800aa5c:	0801aa98 	.word	0x0801aa98
 800aa60:	0801a958 	.word	0x0801a958
 800aa64:	0801aaa0 	.word	0x0801aaa0
 800aa68:	200209d4 	.word	0x200209d4
 800aa6c:	0801aaa8 	.word	0x0801aaa8
 800aa70:	0801aab4 	.word	0x0801aab4
 800aa74:	2004760c 	.word	0x2004760c
 800aa78:	20047614 	.word	0x20047614
		else if(joy_stick.getValue() == JOY_L){
 800aa7c:	48b8      	ldr	r0, [pc, #736]	; (800ad60 <cppLoop+0x28c0>)
 800aa7e:	f7f7 fa65 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	bf0c      	ite	eq
 800aa88:	2301      	moveq	r3, #1
 800aa8a:	2300      	movne	r3, #0
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d03c      	beq.n	800ab0c <cppLoop+0x266c>
			led.LR(-1, 1);
 800aa92:	2201      	movs	r2, #1
 800aa94:	f04f 31ff 	mov.w	r1, #4294967295
 800aa98:	48b2      	ldr	r0, [pc, #712]	; (800ad64 <cppLoop+0x28c4>)
 800aa9a:	f7f7 fb77 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800aa9e:	2064      	movs	r0, #100	; 0x64
 800aaa0:	f000 fe5c 	bl	800b75c <HAL_Delay>
			if(selector_acc == 0){
 800aaa4:	4bb0      	ldr	r3, [pc, #704]	; (800ad68 <cppLoop+0x28c8>)
 800aaa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d113      	bne.n	800aad6 <cppLoop+0x2636>
				adj_acc2 = adj_acc2 - 0.1;
 800aaae:	4baf      	ldr	r3, [pc, #700]	; (800ad6c <cppLoop+0x28cc>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7f5 fd60 	bl	8000578 <__aeabi_f2d>
 800aab8:	a3a7      	add	r3, pc, #668	; (adr r3, 800ad58 <cppLoop+0x28b8>)
 800aaba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabe:	f7f5 fbfb 	bl	80002b8 <__aeabi_dsub>
 800aac2:	4603      	mov	r3, r0
 800aac4:	460c      	mov	r4, r1
 800aac6:	4618      	mov	r0, r3
 800aac8:	4621      	mov	r1, r4
 800aaca:	f7f6 f8a5 	bl	8000c18 <__aeabi_d2f>
 800aace:	4602      	mov	r2, r0
 800aad0:	4ba6      	ldr	r3, [pc, #664]	; (800ad6c <cppLoop+0x28cc>)
 800aad2:	601a      	str	r2, [r3, #0]
 800aad4:	e012      	b.n	800aafc <cppLoop+0x265c>
				adj_dec2 = adj_dec2 - 0.1;
 800aad6:	4ba6      	ldr	r3, [pc, #664]	; (800ad70 <cppLoop+0x28d0>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4618      	mov	r0, r3
 800aadc:	f7f5 fd4c 	bl	8000578 <__aeabi_f2d>
 800aae0:	a39d      	add	r3, pc, #628	; (adr r3, 800ad58 <cppLoop+0x28b8>)
 800aae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae6:	f7f5 fbe7 	bl	80002b8 <__aeabi_dsub>
 800aaea:	4603      	mov	r3, r0
 800aaec:	460c      	mov	r4, r1
 800aaee:	4618      	mov	r0, r3
 800aaf0:	4621      	mov	r1, r4
 800aaf2:	f7f6 f891 	bl	8000c18 <__aeabi_d2f>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	4b9d      	ldr	r3, [pc, #628]	; (800ad70 <cppLoop+0x28d0>)
 800aafa:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800aafc:	2200      	movs	r2, #0
 800aafe:	f04f 31ff 	mov.w	r1, #4294967295
 800ab02:	4898      	ldr	r0, [pc, #608]	; (800ad64 <cppLoop+0x28c4>)
 800ab04:	f7f7 fb42 	bl	800218c <_ZN3LED2LREaa>
		break;
 800ab08:	f000 bce2 	b.w	800b4d0 <cppLoop+0x3030>
		else if(joy_stick.getValue() == JOY_C){
 800ab0c:	4894      	ldr	r0, [pc, #592]	; (800ad60 <cppLoop+0x28c0>)
 800ab0e:	f7f7 fa1d 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b02      	cmp	r3, #2
 800ab16:	bf0c      	ite	eq
 800ab18:	2301      	moveq	r3, #1
 800ab1a:	2300      	movne	r3, #0
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	f000 84d6 	beq.w	800b4d0 <cppLoop+0x3030>
			led.LR(-1, 1);
 800ab24:	2201      	movs	r2, #1
 800ab26:	f04f 31ff 	mov.w	r1, #4294967295
 800ab2a:	488e      	ldr	r0, [pc, #568]	; (800ad64 <cppLoop+0x28c4>)
 800ab2c:	f7f7 fb2e 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(300);
 800ab30:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ab34:	f000 fe12 	bl	800b75c <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 800ab38:	2300      	movs	r3, #0
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	4b8b      	ldr	r3, [pc, #556]	; (800ad6c <cppLoop+0x28cc>)
 800ab3e:	2201      	movs	r2, #1
 800ab40:	498c      	ldr	r1, [pc, #560]	; (800ad74 <cppLoop+0x28d4>)
 800ab42:	488d      	ldr	r0, [pc, #564]	; (800ad78 <cppLoop+0x28d8>)
 800ab44:	f7f6 fe06 	bl	8001754 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 800ab48:	2300      	movs	r3, #0
 800ab4a:	9300      	str	r3, [sp, #0]
 800ab4c:	4b88      	ldr	r3, [pc, #544]	; (800ad70 <cppLoop+0x28d0>)
 800ab4e:	2201      	movs	r2, #1
 800ab50:	498a      	ldr	r1, [pc, #552]	; (800ad7c <cppLoop+0x28dc>)
 800ab52:	4889      	ldr	r0, [pc, #548]	; (800ad78 <cppLoop+0x28d8>)
 800ab54:	f7f6 fdfe 	bl	8001754 <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 800ab58:	4b84      	ldr	r3, [pc, #528]	; (800ad6c <cppLoop+0x28cc>)
 800ab5a:	edd3 7a00 	vldr	s15, [r3]
 800ab5e:	4b84      	ldr	r3, [pc, #528]	; (800ad70 <cppLoop+0x28d0>)
 800ab60:	ed93 7a00 	vldr	s14, [r3]
 800ab64:	eef0 0a47 	vmov.f32	s1, s14
 800ab68:	eeb0 0a67 	vmov.f32	s0, s15
 800ab6c:	4884      	ldr	r0, [pc, #528]	; (800ad80 <cppLoop+0x28e0>)
 800ab6e:	f7f9 fb0d 	bl	800418c <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 800ab72:	2200      	movs	r2, #0
 800ab74:	f04f 31ff 	mov.w	r1, #4294967295
 800ab78:	487a      	ldr	r0, [pc, #488]	; (800ad64 <cppLoop+0x28c4>)
 800ab7a:	f7f7 fb07 	bl	800218c <_ZN3LED2LREaa>
		break;
 800ab7e:	f000 bca7 	b.w	800b4d0 <cppLoop+0x3030>


	case 9:
		led.fullColor('W');
 800ab82:	2157      	movs	r1, #87	; 0x57
 800ab84:	4877      	ldr	r0, [pc, #476]	; (800ad64 <cppLoop+0x28c4>)
 800ab86:	f7f7 fa45 	bl	8002014 <_ZN3LED9fullColorEc>

		lcd_clear();
 800ab8a:	f7f6 fa89 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800ab8e:	2100      	movs	r1, #0
 800ab90:	2000      	movs	r0, #0
 800ab92:	f7f6 fa95 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC4:%3.1f", line_trace.getMaxAcc3());
 800ab96:	487a      	ldr	r0, [pc, #488]	; (800ad80 <cppLoop+0x28e0>)
 800ab98:	f7f9 fb8e 	bl	80042b8 <_ZN9LineTrace10getMaxAcc3Ev>
 800ab9c:	ee10 3a10 	vmov	r3, s0
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7f5 fce9 	bl	8000578 <__aeabi_f2d>
 800aba6:	4603      	mov	r3, r0
 800aba8:	460c      	mov	r4, r1
 800abaa:	461a      	mov	r2, r3
 800abac:	4623      	mov	r3, r4
 800abae:	4875      	ldr	r0, [pc, #468]	; (800ad84 <cppLoop+0x28e4>)
 800abb0:	f7f6 fab0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800abb4:	2101      	movs	r1, #1
 800abb6:	2000      	movs	r0, #0
 800abb8:	f7f6 fa82 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC4:%3.1f", line_trace.getMaxDec3());
 800abbc:	4870      	ldr	r0, [pc, #448]	; (800ad80 <cppLoop+0x28e0>)
 800abbe:	f7f9 fb8d 	bl	80042dc <_ZN9LineTrace10getMaxDec3Ev>
 800abc2:	ee10 3a10 	vmov	r3, s0
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7f5 fcd6 	bl	8000578 <__aeabi_f2d>
 800abcc:	4603      	mov	r3, r0
 800abce:	460c      	mov	r4, r1
 800abd0:	461a      	mov	r2, r3
 800abd2:	4623      	mov	r3, r4
 800abd4:	486c      	ldr	r0, [pc, #432]	; (800ad88 <cppLoop+0x28e8>)
 800abd6:	f7f6 fa9d 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 800abda:	4861      	ldr	r0, [pc, #388]	; (800ad60 <cppLoop+0x28c0>)
 800abdc:	f7f7 f9b6 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800abe0:	4603      	mov	r3, r0
 800abe2:	2b04      	cmp	r3, #4
 800abe4:	bf0c      	ite	eq
 800abe6:	2301      	moveq	r3, #1
 800abe8:	2300      	movne	r3, #0
 800abea:	b2db      	uxtb	r3, r3
 800abec:	2b00      	cmp	r3, #0
 800abee:	d022      	beq.n	800ac36 <cppLoop+0x2796>
			led.LR(-1, 1);
 800abf0:	2201      	movs	r2, #1
 800abf2:	f04f 31ff 	mov.w	r1, #4294967295
 800abf6:	485b      	ldr	r0, [pc, #364]	; (800ad64 <cppLoop+0x28c4>)
 800abf8:	f7f7 fac8 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(300);
 800abfc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ac00:	f000 fdac 	bl	800b75c <HAL_Delay>

			selector_acc++;
 800ac04:	4b58      	ldr	r3, [pc, #352]	; (800ad68 <cppLoop+0x28c8>)
 800ac06:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	b21a      	sxth	r2, r3
 800ac12:	4b55      	ldr	r3, [pc, #340]	; (800ad68 <cppLoop+0x28c8>)
 800ac14:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 800ac16:	4b54      	ldr	r3, [pc, #336]	; (800ad68 <cppLoop+0x28c8>)
 800ac18:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	dd02      	ble.n	800ac26 <cppLoop+0x2786>
 800ac20:	4b51      	ldr	r3, [pc, #324]	; (800ad68 <cppLoop+0x28c8>)
 800ac22:	2200      	movs	r2, #0
 800ac24:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800ac26:	2200      	movs	r2, #0
 800ac28:	f04f 31ff 	mov.w	r1, #4294967295
 800ac2c:	484d      	ldr	r0, [pc, #308]	; (800ad64 <cppLoop+0x28c4>)
 800ac2e:	f7f7 faad 	bl	800218c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC3.TXT", 1, &adj_dec3, OVER_WRITE);
			line_trace.setMaxAccDec3(adj_acc3, adj_dec3);

			led.LR(-1, 0);
		}
		break;
 800ac32:	f000 bc4f 	b.w	800b4d4 <cppLoop+0x3034>
		else if(joy_stick.getValue() == JOY_R){
 800ac36:	484a      	ldr	r0, [pc, #296]	; (800ad60 <cppLoop+0x28c0>)
 800ac38:	f7f7 f988 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b10      	cmp	r3, #16
 800ac40:	bf0c      	ite	eq
 800ac42:	2301      	moveq	r3, #1
 800ac44:	2300      	movne	r3, #0
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d03c      	beq.n	800acc6 <cppLoop+0x2826>
			led.LR(-1, 1);
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	f04f 31ff 	mov.w	r1, #4294967295
 800ac52:	4844      	ldr	r0, [pc, #272]	; (800ad64 <cppLoop+0x28c4>)
 800ac54:	f7f7 fa9a 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800ac58:	2064      	movs	r0, #100	; 0x64
 800ac5a:	f000 fd7f 	bl	800b75c <HAL_Delay>
			if(selector_acc == 0){
 800ac5e:	4b42      	ldr	r3, [pc, #264]	; (800ad68 <cppLoop+0x28c8>)
 800ac60:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d113      	bne.n	800ac90 <cppLoop+0x27f0>
				adj_acc3 = adj_acc3 + 0.1;
 800ac68:	4b48      	ldr	r3, [pc, #288]	; (800ad8c <cppLoop+0x28ec>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7f5 fc83 	bl	8000578 <__aeabi_f2d>
 800ac72:	a339      	add	r3, pc, #228	; (adr r3, 800ad58 <cppLoop+0x28b8>)
 800ac74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac78:	f7f5 fb20 	bl	80002bc <__adddf3>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	460c      	mov	r4, r1
 800ac80:	4618      	mov	r0, r3
 800ac82:	4621      	mov	r1, r4
 800ac84:	f7f5 ffc8 	bl	8000c18 <__aeabi_d2f>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	4b40      	ldr	r3, [pc, #256]	; (800ad8c <cppLoop+0x28ec>)
 800ac8c:	601a      	str	r2, [r3, #0]
 800ac8e:	e012      	b.n	800acb6 <cppLoop+0x2816>
				adj_dec3 = adj_dec3 + 0.1;
 800ac90:	4b3f      	ldr	r3, [pc, #252]	; (800ad90 <cppLoop+0x28f0>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4618      	mov	r0, r3
 800ac96:	f7f5 fc6f 	bl	8000578 <__aeabi_f2d>
 800ac9a:	a32f      	add	r3, pc, #188	; (adr r3, 800ad58 <cppLoop+0x28b8>)
 800ac9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca0:	f7f5 fb0c 	bl	80002bc <__adddf3>
 800aca4:	4603      	mov	r3, r0
 800aca6:	460c      	mov	r4, r1
 800aca8:	4618      	mov	r0, r3
 800acaa:	4621      	mov	r1, r4
 800acac:	f7f5 ffb4 	bl	8000c18 <__aeabi_d2f>
 800acb0:	4602      	mov	r2, r0
 800acb2:	4b37      	ldr	r3, [pc, #220]	; (800ad90 <cppLoop+0x28f0>)
 800acb4:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800acb6:	2200      	movs	r2, #0
 800acb8:	f04f 31ff 	mov.w	r1, #4294967295
 800acbc:	4829      	ldr	r0, [pc, #164]	; (800ad64 <cppLoop+0x28c4>)
 800acbe:	f7f7 fa65 	bl	800218c <_ZN3LED2LREaa>
		break;
 800acc2:	f000 bc07 	b.w	800b4d4 <cppLoop+0x3034>
		else if(joy_stick.getValue() == JOY_L){
 800acc6:	4826      	ldr	r0, [pc, #152]	; (800ad60 <cppLoop+0x28c0>)
 800acc8:	f7f7 f940 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800accc:	4603      	mov	r3, r0
 800acce:	2b01      	cmp	r3, #1
 800acd0:	bf0c      	ite	eq
 800acd2:	2301      	moveq	r3, #1
 800acd4:	2300      	movne	r3, #0
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d05b      	beq.n	800ad94 <cppLoop+0x28f4>
			led.LR(-1, 1);
 800acdc:	2201      	movs	r2, #1
 800acde:	f04f 31ff 	mov.w	r1, #4294967295
 800ace2:	4820      	ldr	r0, [pc, #128]	; (800ad64 <cppLoop+0x28c4>)
 800ace4:	f7f7 fa52 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800ace8:	2064      	movs	r0, #100	; 0x64
 800acea:	f000 fd37 	bl	800b75c <HAL_Delay>
			if(selector_acc == 0){
 800acee:	4b1e      	ldr	r3, [pc, #120]	; (800ad68 <cppLoop+0x28c8>)
 800acf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d113      	bne.n	800ad20 <cppLoop+0x2880>
				adj_acc3 = adj_acc3 - 0.1;
 800acf8:	4b24      	ldr	r3, [pc, #144]	; (800ad8c <cppLoop+0x28ec>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7f5 fc3b 	bl	8000578 <__aeabi_f2d>
 800ad02:	a315      	add	r3, pc, #84	; (adr r3, 800ad58 <cppLoop+0x28b8>)
 800ad04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad08:	f7f5 fad6 	bl	80002b8 <__aeabi_dsub>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	460c      	mov	r4, r1
 800ad10:	4618      	mov	r0, r3
 800ad12:	4621      	mov	r1, r4
 800ad14:	f7f5 ff80 	bl	8000c18 <__aeabi_d2f>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	4b1c      	ldr	r3, [pc, #112]	; (800ad8c <cppLoop+0x28ec>)
 800ad1c:	601a      	str	r2, [r3, #0]
 800ad1e:	e012      	b.n	800ad46 <cppLoop+0x28a6>
				adj_dec3 = adj_dec3 - 0.1;
 800ad20:	4b1b      	ldr	r3, [pc, #108]	; (800ad90 <cppLoop+0x28f0>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7f5 fc27 	bl	8000578 <__aeabi_f2d>
 800ad2a:	a30b      	add	r3, pc, #44	; (adr r3, 800ad58 <cppLoop+0x28b8>)
 800ad2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad30:	f7f5 fac2 	bl	80002b8 <__aeabi_dsub>
 800ad34:	4603      	mov	r3, r0
 800ad36:	460c      	mov	r4, r1
 800ad38:	4618      	mov	r0, r3
 800ad3a:	4621      	mov	r1, r4
 800ad3c:	f7f5 ff6c 	bl	8000c18 <__aeabi_d2f>
 800ad40:	4602      	mov	r2, r0
 800ad42:	4b13      	ldr	r3, [pc, #76]	; (800ad90 <cppLoop+0x28f0>)
 800ad44:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800ad46:	2200      	movs	r2, #0
 800ad48:	f04f 31ff 	mov.w	r1, #4294967295
 800ad4c:	4805      	ldr	r0, [pc, #20]	; (800ad64 <cppLoop+0x28c4>)
 800ad4e:	f7f7 fa1d 	bl	800218c <_ZN3LED2LREaa>
		break;
 800ad52:	e3bf      	b.n	800b4d4 <cppLoop+0x3034>
 800ad54:	f3af 8000 	nop.w
 800ad58:	9999999a 	.word	0x9999999a
 800ad5c:	3fb99999 	.word	0x3fb99999
 800ad60:	2000054c 	.word	0x2000054c
 800ad64:	20000558 	.word	0x20000558
 800ad68:	20047580 	.word	0x20047580
 800ad6c:	2004760c 	.word	0x2004760c
 800ad70:	20047614 	.word	0x20047614
 800ad74:	0801aac0 	.word	0x0801aac0
 800ad78:	0801a958 	.word	0x0801a958
 800ad7c:	0801aacc 	.word	0x0801aacc
 800ad80:	200209d4 	.word	0x200209d4
 800ad84:	0801aad8 	.word	0x0801aad8
 800ad88:	0801aae4 	.word	0x0801aae4
 800ad8c:	2004761c 	.word	0x2004761c
 800ad90:	20047624 	.word	0x20047624
		else if(joy_stick.getValue() == JOY_C){
 800ad94:	48b0      	ldr	r0, [pc, #704]	; (800b058 <cppLoop+0x2bb8>)
 800ad96:	f7f7 f8d9 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b02      	cmp	r3, #2
 800ad9e:	bf0c      	ite	eq
 800ada0:	2301      	moveq	r3, #1
 800ada2:	2300      	movne	r3, #0
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f000 8394 	beq.w	800b4d4 <cppLoop+0x3034>
			led.LR(-1, 1);
 800adac:	2201      	movs	r2, #1
 800adae:	f04f 31ff 	mov.w	r1, #4294967295
 800adb2:	48aa      	ldr	r0, [pc, #680]	; (800b05c <cppLoop+0x2bbc>)
 800adb4:	f7f7 f9ea 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(300);
 800adb8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800adbc:	f000 fcce 	bl	800b75c <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC3.TXT", 1, &adj_acc3, OVER_WRITE);
 800adc0:	2300      	movs	r3, #0
 800adc2:	9300      	str	r3, [sp, #0]
 800adc4:	4ba6      	ldr	r3, [pc, #664]	; (800b060 <cppLoop+0x2bc0>)
 800adc6:	2201      	movs	r2, #1
 800adc8:	49a6      	ldr	r1, [pc, #664]	; (800b064 <cppLoop+0x2bc4>)
 800adca:	48a7      	ldr	r0, [pc, #668]	; (800b068 <cppLoop+0x2bc8>)
 800adcc:	f7f6 fcc2 	bl	8001754 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC3.TXT", 1, &adj_dec3, OVER_WRITE);
 800add0:	2300      	movs	r3, #0
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	4ba5      	ldr	r3, [pc, #660]	; (800b06c <cppLoop+0x2bcc>)
 800add6:	2201      	movs	r2, #1
 800add8:	49a5      	ldr	r1, [pc, #660]	; (800b070 <cppLoop+0x2bd0>)
 800adda:	48a3      	ldr	r0, [pc, #652]	; (800b068 <cppLoop+0x2bc8>)
 800addc:	f7f6 fcba 	bl	8001754 <sd_write_array_float>
			line_trace.setMaxAccDec3(adj_acc3, adj_dec3);
 800ade0:	4b9f      	ldr	r3, [pc, #636]	; (800b060 <cppLoop+0x2bc0>)
 800ade2:	edd3 7a00 	vldr	s15, [r3]
 800ade6:	4ba1      	ldr	r3, [pc, #644]	; (800b06c <cppLoop+0x2bcc>)
 800ade8:	ed93 7a00 	vldr	s14, [r3]
 800adec:	eef0 0a47 	vmov.f32	s1, s14
 800adf0:	eeb0 0a67 	vmov.f32	s0, s15
 800adf4:	489f      	ldr	r0, [pc, #636]	; (800b074 <cppLoop+0x2bd4>)
 800adf6:	f7f9 f9e3 	bl	80041c0 <_ZN9LineTrace13setMaxAccDec3Eff>
			led.LR(-1, 0);
 800adfa:	2200      	movs	r2, #0
 800adfc:	f04f 31ff 	mov.w	r1, #4294967295
 800ae00:	4896      	ldr	r0, [pc, #600]	; (800b05c <cppLoop+0x2bbc>)
 800ae02:	f7f7 f9c3 	bl	800218c <_ZN3LED2LREaa>
		break;
 800ae06:	e365      	b.n	800b4d4 <cppLoop+0x3034>

	case 10:
		led.fullColor('W');
 800ae08:	2157      	movs	r1, #87	; 0x57
 800ae0a:	4894      	ldr	r0, [pc, #592]	; (800b05c <cppLoop+0x2bbc>)
 800ae0c:	f7f7 f902 	bl	8002014 <_ZN3LED9fullColorEc>

		lcd_clear();
 800ae10:	f7f6 f946 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800ae14:	2100      	movs	r1, #0
 800ae16:	2000      	movs	r0, #0
 800ae18:	f7f6 f952 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC5:%3.1f", line_trace.getMaxAcc4());
 800ae1c:	4895      	ldr	r0, [pc, #596]	; (800b074 <cppLoop+0x2bd4>)
 800ae1e:	f7f9 fa6f 	bl	8004300 <_ZN9LineTrace10getMaxAcc4Ev>
 800ae22:	ee10 3a10 	vmov	r3, s0
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7f5 fba6 	bl	8000578 <__aeabi_f2d>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	460c      	mov	r4, r1
 800ae30:	461a      	mov	r2, r3
 800ae32:	4623      	mov	r3, r4
 800ae34:	4890      	ldr	r0, [pc, #576]	; (800b078 <cppLoop+0x2bd8>)
 800ae36:	f7f6 f96d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800ae3a:	2101      	movs	r1, #1
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	f7f6 f93f 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC5:%3.1f", line_trace.getMaxDec4());
 800ae42:	488c      	ldr	r0, [pc, #560]	; (800b074 <cppLoop+0x2bd4>)
 800ae44:	f7f9 fa6e 	bl	8004324 <_ZN9LineTrace10getMaxDec4Ev>
 800ae48:	ee10 3a10 	vmov	r3, s0
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f7f5 fb93 	bl	8000578 <__aeabi_f2d>
 800ae52:	4603      	mov	r3, r0
 800ae54:	460c      	mov	r4, r1
 800ae56:	461a      	mov	r2, r3
 800ae58:	4623      	mov	r3, r4
 800ae5a:	4888      	ldr	r0, [pc, #544]	; (800b07c <cppLoop+0x2bdc>)
 800ae5c:	f7f6 f95a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 800ae60:	487d      	ldr	r0, [pc, #500]	; (800b058 <cppLoop+0x2bb8>)
 800ae62:	f7f7 f873 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b04      	cmp	r3, #4
 800ae6a:	bf0c      	ite	eq
 800ae6c:	2301      	moveq	r3, #1
 800ae6e:	2300      	movne	r3, #0
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d021      	beq.n	800aeba <cppLoop+0x2a1a>
			led.LR(-1, 1);
 800ae76:	2201      	movs	r2, #1
 800ae78:	f04f 31ff 	mov.w	r1, #4294967295
 800ae7c:	4877      	ldr	r0, [pc, #476]	; (800b05c <cppLoop+0x2bbc>)
 800ae7e:	f7f7 f985 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(300);
 800ae82:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ae86:	f000 fc69 	bl	800b75c <HAL_Delay>

			selector_acc++;
 800ae8a:	4b7d      	ldr	r3, [pc, #500]	; (800b080 <cppLoop+0x2be0>)
 800ae8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	3301      	adds	r3, #1
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	b21a      	sxth	r2, r3
 800ae98:	4b79      	ldr	r3, [pc, #484]	; (800b080 <cppLoop+0x2be0>)
 800ae9a:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 800ae9c:	4b78      	ldr	r3, [pc, #480]	; (800b080 <cppLoop+0x2be0>)
 800ae9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	dd02      	ble.n	800aeac <cppLoop+0x2a0c>
 800aea6:	4b76      	ldr	r3, [pc, #472]	; (800b080 <cppLoop+0x2be0>)
 800aea8:	2200      	movs	r2, #0
 800aeaa:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800aeac:	2200      	movs	r2, #0
 800aeae:	f04f 31ff 	mov.w	r1, #4294967295
 800aeb2:	486a      	ldr	r0, [pc, #424]	; (800b05c <cppLoop+0x2bbc>)
 800aeb4:	f7f7 f96a 	bl	800218c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC4.TXT", 1, &adj_dec4, OVER_WRITE);
			line_trace.setMaxAccDec4(adj_acc4, adj_dec4);

			led.LR(-1, 0);
		}
		break;
 800aeb8:	e30e      	b.n	800b4d8 <cppLoop+0x3038>
		else if(joy_stick.getValue() == JOY_R){
 800aeba:	4867      	ldr	r0, [pc, #412]	; (800b058 <cppLoop+0x2bb8>)
 800aebc:	f7f7 f846 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800aec0:	4603      	mov	r3, r0
 800aec2:	2b10      	cmp	r3, #16
 800aec4:	bf0c      	ite	eq
 800aec6:	2301      	moveq	r3, #1
 800aec8:	2300      	movne	r3, #0
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d03b      	beq.n	800af48 <cppLoop+0x2aa8>
			led.LR(-1, 1);
 800aed0:	2201      	movs	r2, #1
 800aed2:	f04f 31ff 	mov.w	r1, #4294967295
 800aed6:	4861      	ldr	r0, [pc, #388]	; (800b05c <cppLoop+0x2bbc>)
 800aed8:	f7f7 f958 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800aedc:	2064      	movs	r0, #100	; 0x64
 800aede:	f000 fc3d 	bl	800b75c <HAL_Delay>
			if(selector_acc == 0){
 800aee2:	4b67      	ldr	r3, [pc, #412]	; (800b080 <cppLoop+0x2be0>)
 800aee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d113      	bne.n	800af14 <cppLoop+0x2a74>
				adj_acc4 = adj_acc4 + 0.1;
 800aeec:	4b65      	ldr	r3, [pc, #404]	; (800b084 <cppLoop+0x2be4>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7f5 fb41 	bl	8000578 <__aeabi_f2d>
 800aef6:	a356      	add	r3, pc, #344	; (adr r3, 800b050 <cppLoop+0x2bb0>)
 800aef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefc:	f7f5 f9de 	bl	80002bc <__adddf3>
 800af00:	4603      	mov	r3, r0
 800af02:	460c      	mov	r4, r1
 800af04:	4618      	mov	r0, r3
 800af06:	4621      	mov	r1, r4
 800af08:	f7f5 fe86 	bl	8000c18 <__aeabi_d2f>
 800af0c:	4602      	mov	r2, r0
 800af0e:	4b5d      	ldr	r3, [pc, #372]	; (800b084 <cppLoop+0x2be4>)
 800af10:	601a      	str	r2, [r3, #0]
 800af12:	e012      	b.n	800af3a <cppLoop+0x2a9a>
				adj_dec4 = adj_dec4 + 0.1;
 800af14:	4b5c      	ldr	r3, [pc, #368]	; (800b088 <cppLoop+0x2be8>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4618      	mov	r0, r3
 800af1a:	f7f5 fb2d 	bl	8000578 <__aeabi_f2d>
 800af1e:	a34c      	add	r3, pc, #304	; (adr r3, 800b050 <cppLoop+0x2bb0>)
 800af20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af24:	f7f5 f9ca 	bl	80002bc <__adddf3>
 800af28:	4603      	mov	r3, r0
 800af2a:	460c      	mov	r4, r1
 800af2c:	4618      	mov	r0, r3
 800af2e:	4621      	mov	r1, r4
 800af30:	f7f5 fe72 	bl	8000c18 <__aeabi_d2f>
 800af34:	4602      	mov	r2, r0
 800af36:	4b54      	ldr	r3, [pc, #336]	; (800b088 <cppLoop+0x2be8>)
 800af38:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800af3a:	2200      	movs	r2, #0
 800af3c:	f04f 31ff 	mov.w	r1, #4294967295
 800af40:	4846      	ldr	r0, [pc, #280]	; (800b05c <cppLoop+0x2bbc>)
 800af42:	f7f7 f923 	bl	800218c <_ZN3LED2LREaa>
		break;
 800af46:	e2c7      	b.n	800b4d8 <cppLoop+0x3038>
		else if(joy_stick.getValue() == JOY_L){
 800af48:	4843      	ldr	r0, [pc, #268]	; (800b058 <cppLoop+0x2bb8>)
 800af4a:	f7f6 ffff 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800af4e:	4603      	mov	r3, r0
 800af50:	2b01      	cmp	r3, #1
 800af52:	bf0c      	ite	eq
 800af54:	2301      	moveq	r3, #1
 800af56:	2300      	movne	r3, #0
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d03b      	beq.n	800afd6 <cppLoop+0x2b36>
			led.LR(-1, 1);
 800af5e:	2201      	movs	r2, #1
 800af60:	f04f 31ff 	mov.w	r1, #4294967295
 800af64:	483d      	ldr	r0, [pc, #244]	; (800b05c <cppLoop+0x2bbc>)
 800af66:	f7f7 f911 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800af6a:	2064      	movs	r0, #100	; 0x64
 800af6c:	f000 fbf6 	bl	800b75c <HAL_Delay>
			if(selector_acc == 0){
 800af70:	4b43      	ldr	r3, [pc, #268]	; (800b080 <cppLoop+0x2be0>)
 800af72:	f9b3 3000 	ldrsh.w	r3, [r3]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d113      	bne.n	800afa2 <cppLoop+0x2b02>
				adj_acc4 = adj_acc4 - 0.1;
 800af7a:	4b42      	ldr	r3, [pc, #264]	; (800b084 <cppLoop+0x2be4>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4618      	mov	r0, r3
 800af80:	f7f5 fafa 	bl	8000578 <__aeabi_f2d>
 800af84:	a332      	add	r3, pc, #200	; (adr r3, 800b050 <cppLoop+0x2bb0>)
 800af86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8a:	f7f5 f995 	bl	80002b8 <__aeabi_dsub>
 800af8e:	4603      	mov	r3, r0
 800af90:	460c      	mov	r4, r1
 800af92:	4618      	mov	r0, r3
 800af94:	4621      	mov	r1, r4
 800af96:	f7f5 fe3f 	bl	8000c18 <__aeabi_d2f>
 800af9a:	4602      	mov	r2, r0
 800af9c:	4b39      	ldr	r3, [pc, #228]	; (800b084 <cppLoop+0x2be4>)
 800af9e:	601a      	str	r2, [r3, #0]
 800afa0:	e012      	b.n	800afc8 <cppLoop+0x2b28>
				adj_dec4 = adj_dec4 - 0.1;
 800afa2:	4b39      	ldr	r3, [pc, #228]	; (800b088 <cppLoop+0x2be8>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7f5 fae6 	bl	8000578 <__aeabi_f2d>
 800afac:	a328      	add	r3, pc, #160	; (adr r3, 800b050 <cppLoop+0x2bb0>)
 800afae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb2:	f7f5 f981 	bl	80002b8 <__aeabi_dsub>
 800afb6:	4603      	mov	r3, r0
 800afb8:	460c      	mov	r4, r1
 800afba:	4618      	mov	r0, r3
 800afbc:	4621      	mov	r1, r4
 800afbe:	f7f5 fe2b 	bl	8000c18 <__aeabi_d2f>
 800afc2:	4602      	mov	r2, r0
 800afc4:	4b30      	ldr	r3, [pc, #192]	; (800b088 <cppLoop+0x2be8>)
 800afc6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800afc8:	2200      	movs	r2, #0
 800afca:	f04f 31ff 	mov.w	r1, #4294967295
 800afce:	4823      	ldr	r0, [pc, #140]	; (800b05c <cppLoop+0x2bbc>)
 800afd0:	f7f7 f8dc 	bl	800218c <_ZN3LED2LREaa>
		break;
 800afd4:	e280      	b.n	800b4d8 <cppLoop+0x3038>
		else if(joy_stick.getValue() == JOY_C){
 800afd6:	4820      	ldr	r0, [pc, #128]	; (800b058 <cppLoop+0x2bb8>)
 800afd8:	f7f6 ffb8 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b02      	cmp	r3, #2
 800afe0:	bf0c      	ite	eq
 800afe2:	2301      	moveq	r3, #1
 800afe4:	2300      	movne	r3, #0
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	2b00      	cmp	r3, #0
 800afea:	f000 8275 	beq.w	800b4d8 <cppLoop+0x3038>
			led.LR(-1, 1);
 800afee:	2201      	movs	r2, #1
 800aff0:	f04f 31ff 	mov.w	r1, #4294967295
 800aff4:	4819      	ldr	r0, [pc, #100]	; (800b05c <cppLoop+0x2bbc>)
 800aff6:	f7f7 f8c9 	bl	800218c <_ZN3LED2LREaa>
			HAL_Delay(300);
 800affa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800affe:	f000 fbad 	bl	800b75c <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC4.TXT", 1, &adj_acc4, OVER_WRITE);
 800b002:	2300      	movs	r3, #0
 800b004:	9300      	str	r3, [sp, #0]
 800b006:	4b1f      	ldr	r3, [pc, #124]	; (800b084 <cppLoop+0x2be4>)
 800b008:	2201      	movs	r2, #1
 800b00a:	4920      	ldr	r1, [pc, #128]	; (800b08c <cppLoop+0x2bec>)
 800b00c:	4816      	ldr	r0, [pc, #88]	; (800b068 <cppLoop+0x2bc8>)
 800b00e:	f7f6 fba1 	bl	8001754 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC4.TXT", 1, &adj_dec4, OVER_WRITE);
 800b012:	2300      	movs	r3, #0
 800b014:	9300      	str	r3, [sp, #0]
 800b016:	4b1c      	ldr	r3, [pc, #112]	; (800b088 <cppLoop+0x2be8>)
 800b018:	2201      	movs	r2, #1
 800b01a:	491d      	ldr	r1, [pc, #116]	; (800b090 <cppLoop+0x2bf0>)
 800b01c:	4812      	ldr	r0, [pc, #72]	; (800b068 <cppLoop+0x2bc8>)
 800b01e:	f7f6 fb99 	bl	8001754 <sd_write_array_float>
			line_trace.setMaxAccDec4(adj_acc4, adj_dec4);
 800b022:	4b18      	ldr	r3, [pc, #96]	; (800b084 <cppLoop+0x2be4>)
 800b024:	edd3 7a00 	vldr	s15, [r3]
 800b028:	4b17      	ldr	r3, [pc, #92]	; (800b088 <cppLoop+0x2be8>)
 800b02a:	ed93 7a00 	vldr	s14, [r3]
 800b02e:	eef0 0a47 	vmov.f32	s1, s14
 800b032:	eeb0 0a67 	vmov.f32	s0, s15
 800b036:	480f      	ldr	r0, [pc, #60]	; (800b074 <cppLoop+0x2bd4>)
 800b038:	f7f9 f8dc 	bl	80041f4 <_ZN9LineTrace13setMaxAccDec4Eff>
			led.LR(-1, 0);
 800b03c:	2200      	movs	r2, #0
 800b03e:	f04f 31ff 	mov.w	r1, #4294967295
 800b042:	4806      	ldr	r0, [pc, #24]	; (800b05c <cppLoop+0x2bbc>)
 800b044:	f7f7 f8a2 	bl	800218c <_ZN3LED2LREaa>
		break;
 800b048:	e246      	b.n	800b4d8 <cppLoop+0x3038>
 800b04a:	bf00      	nop
 800b04c:	f3af 8000 	nop.w
 800b050:	9999999a 	.word	0x9999999a
 800b054:	3fb99999 	.word	0x3fb99999
 800b058:	2000054c 	.word	0x2000054c
 800b05c:	20000558 	.word	0x20000558
 800b060:	2004761c 	.word	0x2004761c
 800b064:	0801aaf0 	.word	0x0801aaf0
 800b068:	0801a958 	.word	0x0801a958
 800b06c:	20047624 	.word	0x20047624
 800b070:	0801aafc 	.word	0x0801aafc
 800b074:	200209d4 	.word	0x200209d4
 800b078:	0801ab08 	.word	0x0801ab08
 800b07c:	0801ab14 	.word	0x0801ab14
 800b080:	20047580 	.word	0x20047580
 800b084:	2004762c 	.word	0x2004762c
 800b088:	20047634 	.word	0x20047634
 800b08c:	0801ab20 	.word	0x0801ab20
 800b090:	0801ab2c 	.word	0x0801ab2c

	case 11:
		led.fullColor('~');
 800b094:	217e      	movs	r1, #126	; 0x7e
 800b096:	48b6      	ldr	r0, [pc, #728]	; (800b370 <cppLoop+0x2ed0>)
 800b098:	f7f6 ffbc 	bl	8002014 <_ZN3LED9fullColorEc>

		lcd_clear();
 800b09c:	f7f6 f800 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800b0a0:	2100      	movs	r1, #0
 800b0a2:	2000      	movs	r0, #0
 800b0a4:	f7f6 f80c 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 800b0a8:	48b2      	ldr	r0, [pc, #712]	; (800b374 <cppLoop+0x2ed4>)
 800b0aa:	f7f6 f833 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800b0ae:	2101      	movs	r1, #1
 800b0b0:	2000      	movs	r0, #0
 800b0b2:	f7f6 f805 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 800b0b6:	48b0      	ldr	r0, [pc, #704]	; (800b378 <cppLoop+0x2ed8>)
 800b0b8:	f7f6 f82c 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 800b0bc:	48af      	ldr	r0, [pc, #700]	; (800b37c <cppLoop+0x2edc>)
 800b0be:	f7f6 ff45 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b02      	cmp	r3, #2
 800b0c6:	bf0c      	ite	eq
 800b0c8:	2301      	moveq	r3, #1
 800b0ca:	2300      	movne	r3, #0
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	f000 8204 	beq.w	800b4dc <cppLoop+0x303c>
			HAL_Delay(500);
 800b0d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b0d8:	f000 fb40 	bl	800b75c <HAL_Delay>
			led.LR(-1, 1);
 800b0dc:	2201      	movs	r2, #1
 800b0de:	f04f 31ff 	mov.w	r1, #4294967295
 800b0e2:	48a3      	ldr	r0, [pc, #652]	; (800b370 <cppLoop+0x2ed0>)
 800b0e4:	f7f7 f852 	bl	800218c <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 800b0e8:	2102      	movs	r1, #2
 800b0ea:	48a5      	ldr	r0, [pc, #660]	; (800b380 <cppLoop+0x2ee0>)
 800b0ec:	f7f9 f9f2 	bl	80044d4 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 800b0f0:	4ba4      	ldr	r3, [pc, #656]	; (800b384 <cppLoop+0x2ee4>)
 800b0f2:	edd3 7a00 	vldr	s15, [r3]
 800b0f6:	eeb0 0a67 	vmov.f32	s0, s15
 800b0fa:	48a1      	ldr	r0, [pc, #644]	; (800b380 <cppLoop+0x2ee0>)
 800b0fc:	f7f8 ff0c 	bl	8003f18 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800b100:	4ba0      	ldr	r3, [pc, #640]	; (800b384 <cppLoop+0x2ee4>)
 800b102:	edd3 7a00 	vldr	s15, [r3]
 800b106:	eeb0 0a67 	vmov.f32	s0, s15
 800b10a:	489d      	ldr	r0, [pc, #628]	; (800b380 <cppLoop+0x2ee0>)
 800b10c:	f7f8 ff14 	bl	8003f38 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 800b110:	4b9c      	ldr	r3, [pc, #624]	; (800b384 <cppLoop+0x2ee4>)
 800b112:	edd3 7a00 	vldr	s15, [r3]
 800b116:	eeb0 0a67 	vmov.f32	s0, s15
 800b11a:	4899      	ldr	r0, [pc, #612]	; (800b380 <cppLoop+0x2ee0>)
 800b11c:	f7f8 ff1c 	bl	8003f58 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800b120:	4897      	ldr	r0, [pc, #604]	; (800b380 <cppLoop+0x2ee0>)
 800b122:	f7f9 fd3f 	bl	8004ba4 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 800b126:	2200      	movs	r2, #0
 800b128:	f04f 31ff 	mov.w	r1, #4294967295
 800b12c:	4890      	ldr	r0, [pc, #576]	; (800b370 <cppLoop+0x2ed0>)
 800b12e:	f7f7 f82d 	bl	800218c <_ZN3LED2LREaa>
		}

		break;
 800b132:	e1d3      	b.n	800b4dc <cppLoop+0x303c>

	case 12:
		led.fullColor('~');
 800b134:	217e      	movs	r1, #126	; 0x7e
 800b136:	488e      	ldr	r0, [pc, #568]	; (800b370 <cppLoop+0x2ed0>)
 800b138:	f7f6 ff6c 	bl	8002014 <_ZN3LED9fullColorEc>

			led.LR(-1, 0);
		}
		*/

		lcd_clear();
 800b13c:	f7f5 ffb0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800b140:	2100      	movs	r1, #0
 800b142:	2000      	movs	r0, #0
 800b144:	f7f5 ffbc 	bl	80010c0 <lcd_locate>
		lcd_printf("LOG");
 800b148:	488f      	ldr	r0, [pc, #572]	; (800b388 <cppLoop+0x2ee8>)
 800b14a:	f7f5 ffe3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800b14e:	2101      	movs	r1, #1
 800b150:	2000      	movs	r0, #0
 800b152:	f7f5 ffb5 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 800b156:	488d      	ldr	r0, [pc, #564]	; (800b38c <cppLoop+0x2eec>)
 800b158:	f7f5 ffdc 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800b15c:	4887      	ldr	r0, [pc, #540]	; (800b37c <cppLoop+0x2edc>)
 800b15e:	f7f6 fef5 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800b162:	4603      	mov	r3, r0
 800b164:	2b02      	cmp	r3, #2
 800b166:	bf0c      	ite	eq
 800b168:	2301      	moveq	r3, #1
 800b16a:	2300      	movne	r3, #0
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	2b00      	cmp	r3, #0
 800b170:	f000 81b6 	beq.w	800b4e0 <cppLoop+0x3040>
			led.fullColor('R');
 800b174:	2152      	movs	r1, #82	; 0x52
 800b176:	487e      	ldr	r0, [pc, #504]	; (800b370 <cppLoop+0x2ed0>)
 800b178:	f7f6 ff4c 	bl	8002014 <_ZN3LED9fullColorEc>
			test_logger.clearLogs();
 800b17c:	4884      	ldr	r0, [pc, #528]	; (800b390 <cppLoop+0x2ef0>)
 800b17e:	f7fa f97d 	bl	800547c <_ZN7Logger29clearLogsEv>
			test_logger.start();
 800b182:	4883      	ldr	r0, [pc, #524]	; (800b390 <cppLoop+0x2ef0>)
 800b184:	f7fa f99b 	bl	80054be <_ZN7Logger25startEv>

			for(int i = 1; i < 10; i++){
 800b188:	2301      	movs	r3, #1
 800b18a:	607b      	str	r3, [r7, #4]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2b09      	cmp	r3, #9
 800b190:	dc0d      	bgt.n	800b1ae <cppLoop+0x2d0e>
				test_logger.storeLogs(float(i));
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	ee07 3a90 	vmov	s15, r3
 800b198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b19c:	eeb0 0a67 	vmov.f32	s0, s15
 800b1a0:	487b      	ldr	r0, [pc, #492]	; (800b390 <cppLoop+0x2ef0>)
 800b1a2:	f7fa f91d 	bl	80053e0 <_ZN7Logger29storeLogsEf>
			for(int i = 1; i < 10; i++){
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	607b      	str	r3, [r7, #4]
 800b1ac:	e7ee      	b.n	800b18c <cppLoop+0x2cec>
			}
			HAL_Delay(1000);
 800b1ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b1b2:	f000 fad3 	bl	800b75c <HAL_Delay>

			test_logger.stop();
 800b1b6:	4876      	ldr	r0, [pc, #472]	; (800b390 <cppLoop+0x2ef0>)
 800b1b8:	f7fa f991 	bl	80054de <_ZN7Logger24stopEv>
			test_logger.saveLogs("TEST", "SOIYA.txt");
 800b1bc:	4a75      	ldr	r2, [pc, #468]	; (800b394 <cppLoop+0x2ef4>)
 800b1be:	4973      	ldr	r1, [pc, #460]	; (800b38c <cppLoop+0x2eec>)
 800b1c0:	4873      	ldr	r0, [pc, #460]	; (800b390 <cppLoop+0x2ef0>)
 800b1c2:	f7fa f935 	bl	8005430 <_ZN7Logger28saveLogsEPKcS1_>
			led.fullColor('~');
 800b1c6:	217e      	movs	r1, #126	; 0x7e
 800b1c8:	4869      	ldr	r0, [pc, #420]	; (800b370 <cppLoop+0x2ed0>)
 800b1ca:	f7f6 ff23 	bl	8002014 <_ZN3LED9fullColorEc>

			led.LR(-1, 0);
		}
		*/

		break;
 800b1ce:	e187      	b.n	800b4e0 <cppLoop+0x3040>

	case 13:
		led.fullColor('~');
 800b1d0:	217e      	movs	r1, #126	; 0x7e
 800b1d2:	4867      	ldr	r0, [pc, #412]	; (800b370 <cppLoop+0x2ed0>)
 800b1d4:	f7f6 ff1e 	bl	8002014 <_ZN3LED9fullColorEc>

		lcd_clear();
 800b1d8:	f7f5 ff62 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800b1dc:	2100      	movs	r1, #0
 800b1de:	2000      	movs	r0, #0
 800b1e0:	f7f5 ff6e 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 800b1e4:	486c      	ldr	r0, [pc, #432]	; (800b398 <cppLoop+0x2ef8>)
 800b1e6:	f7f5 ff95 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800b1ea:	2101      	movs	r1, #1
 800b1ec:	2000      	movs	r0, #0
 800b1ee:	f7f5 ff67 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 800b1f2:	486a      	ldr	r0, [pc, #424]	; (800b39c <cppLoop+0x2efc>)
 800b1f4:	f7f5 ff8e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800b1f8:	4860      	ldr	r0, [pc, #384]	; (800b37c <cppLoop+0x2edc>)
 800b1fa:	f7f6 fea7 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b02      	cmp	r3, #2
 800b202:	bf0c      	ite	eq
 800b204:	2301      	moveq	r3, #1
 800b206:	2300      	movne	r3, #0
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	f000 816a 	beq.w	800b4e4 <cppLoop+0x3044>
			HAL_Delay(1500);
 800b210:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800b214:	f000 faa2 	bl	800b75c <HAL_Delay>
			led.LR(-1, 1);
 800b218:	2201      	movs	r2, #1
 800b21a:	f04f 31ff 	mov.w	r1, #4294967295
 800b21e:	4854      	ldr	r0, [pc, #336]	; (800b370 <cppLoop+0x2ed0>)
 800b220:	f7f6 ffb4 	bl	800218c <_ZN3LED2LREaa>

			HAL_Delay(3000);
 800b224:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800b228:	f000 fa98 	bl	800b75c <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 800b22c:	eddf 1a5c 	vldr	s3, [pc, #368]	; 800b3a0 <cppLoop+0x2f00>
 800b230:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800b3a0 <cppLoop+0x2f00>
 800b234:	eddf 0a5a 	vldr	s1, [pc, #360]	; 800b3a0 <cppLoop+0x2f00>
 800b238:	ed9f 0a59 	vldr	s0, [pc, #356]	; 800b3a0 <cppLoop+0x2f00>
 800b23c:	4859      	ldr	r0, [pc, #356]	; (800b3a4 <cppLoop+0x2f04>)
 800b23e:	f7f6 f807 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 800b242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b246:	f000 fa89 	bl	800b75c <HAL_Delay>

			logger.start();
 800b24a:	4857      	ldr	r0, [pc, #348]	; (800b3a8 <cppLoop+0x2f08>)
 800b24c:	f7fa f86d 	bl	800532a <_ZN6Logger5startEv>
			velocity_ctrl.start();
 800b250:	4856      	ldr	r0, [pc, #344]	; (800b3ac <cppLoop+0x2f0c>)
 800b252:	f7fb f902 	bl	800645a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 800b256:	eddf 0a56 	vldr	s1, [pc, #344]	; 800b3b0 <cppLoop+0x2f10>
 800b25a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b25e:	4853      	ldr	r0, [pc, #332]	; (800b3ac <cppLoop+0x2f0c>)
 800b260:	f7fb f88e 	bl	8006380 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 800b264:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b268:	f000 fa78 	bl	800b75c <HAL_Delay>

			logger.stop();
 800b26c:	484e      	ldr	r0, [pc, #312]	; (800b3a8 <cppLoop+0x2f08>)
 800b26e:	f7fa f87b 	bl	8005368 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 800b272:	484e      	ldr	r0, [pc, #312]	; (800b3ac <cppLoop+0x2f0c>)
 800b274:	f7fb f904 	bl	8006480 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 800b278:	484a      	ldr	r0, [pc, #296]	; (800b3a4 <cppLoop+0x2f04>)
 800b27a:	f7f6 f883 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 800b27e:	4a4d      	ldr	r2, [pc, #308]	; (800b3b4 <cppLoop+0x2f14>)
 800b280:	494d      	ldr	r1, [pc, #308]	; (800b3b8 <cppLoop+0x2f18>)
 800b282:	4849      	ldr	r0, [pc, #292]	; (800b3a8 <cppLoop+0x2f08>)
 800b284:	f7f9 ff09 	bl	800509a <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 800b288:	2200      	movs	r2, #0
 800b28a:	f04f 31ff 	mov.w	r1, #4294967295
 800b28e:	4838      	ldr	r0, [pc, #224]	; (800b370 <cppLoop+0x2ed0>)
 800b290:	f7f6 ff7c 	bl	800218c <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 800b294:	e126      	b.n	800b4e4 <cppLoop+0x3044>

	case 14:

		led.fullColor('W');
 800b296:	2157      	movs	r1, #87	; 0x57
 800b298:	4835      	ldr	r0, [pc, #212]	; (800b370 <cppLoop+0x2ed0>)
 800b29a:	f7f6 febb 	bl	8002014 <_ZN3LED9fullColorEc>

		lcd_clear();
 800b29e:	f7f5 feff 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800b2a2:	2100      	movs	r1, #0
 800b2a4:	2000      	movs	r0, #0
 800b2a6:	f7f5 ff0b 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 800b2aa:	4844      	ldr	r0, [pc, #272]	; (800b3bc <cppLoop+0x2f1c>)
 800b2ac:	f7f5 ff32 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800b2b0:	2101      	movs	r1, #1
 800b2b2:	2000      	movs	r0, #0
 800b2b4:	f7f5 ff04 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 800b2b8:	4b32      	ldr	r3, [pc, #200]	; (800b384 <cppLoop+0x2ee4>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f7f5 f95b 	bl	8000578 <__aeabi_f2d>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	460c      	mov	r4, r1
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	4623      	mov	r3, r4
 800b2ca:	483d      	ldr	r0, [pc, #244]	; (800b3c0 <cppLoop+0x2f20>)
 800b2cc:	f7f5 ff22 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800b2d0:	482a      	ldr	r0, [pc, #168]	; (800b37c <cppLoop+0x2edc>)
 800b2d2:	f7f6 fe3b 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b02      	cmp	r3, #2
 800b2da:	bf0c      	ite	eq
 800b2dc:	2301      	moveq	r3, #1
 800b2de:	2300      	movne	r3, #0
 800b2e0:	b2db      	uxtb	r3, r3
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	f000 8100 	beq.w	800b4e8 <cppLoop+0x3048>
			HAL_Delay(500);
 800b2e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b2ec:	f000 fa36 	bl	800b75c <HAL_Delay>

			led.LR(1, -1);
 800b2f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b2f4:	2101      	movs	r1, #1
 800b2f6:	481e      	ldr	r0, [pc, #120]	; (800b370 <cppLoop+0x2ed0>)
 800b2f8:	f7f6 ff48 	bl	800218c <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 800b2fc:	2102      	movs	r1, #2
 800b2fe:	4820      	ldr	r0, [pc, #128]	; (800b380 <cppLoop+0x2ee0>)
 800b300:	f7f9 f8e8 	bl	80044d4 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 800b304:	4b2f      	ldr	r3, [pc, #188]	; (800b3c4 <cppLoop+0x2f24>)
 800b306:	edd3 7a00 	vldr	s15, [r3]
 800b30a:	eeb0 0a67 	vmov.f32	s0, s15
 800b30e:	481c      	ldr	r0, [pc, #112]	; (800b380 <cppLoop+0x2ee0>)
 800b310:	f7f8 fe02 	bl	8003f18 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800b314:	4b1b      	ldr	r3, [pc, #108]	; (800b384 <cppLoop+0x2ee4>)
 800b316:	edd3 7a00 	vldr	s15, [r3]
 800b31a:	eeb0 0a67 	vmov.f32	s0, s15
 800b31e:	4818      	ldr	r0, [pc, #96]	; (800b380 <cppLoop+0x2ee0>)
 800b320:	f7f8 fe0a 	bl	8003f38 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 800b324:	4b17      	ldr	r3, [pc, #92]	; (800b384 <cppLoop+0x2ee4>)
 800b326:	edd3 7a00 	vldr	s15, [r3]
 800b32a:	eeb0 0a67 	vmov.f32	s0, s15
 800b32e:	4814      	ldr	r0, [pc, #80]	; (800b380 <cppLoop+0x2ee0>)
 800b330:	f7f8 fe12 	bl	8003f58 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800b334:	4812      	ldr	r0, [pc, #72]	; (800b380 <cppLoop+0x2ee0>)
 800b336:	f7f9 fc35 	bl	8004ba4 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(1000);
 800b33a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b33e:	f000 fa0d 	bl	800b75c <HAL_Delay>

			line_trace.running();
 800b342:	480f      	ldr	r0, [pc, #60]	; (800b380 <cppLoop+0x2ee0>)
 800b344:	f7f9 f916 	bl	8004574 <_ZN9LineTrace7runningEv>
			logger.stop();
 800b348:	4817      	ldr	r0, [pc, #92]	; (800b3a8 <cppLoop+0x2f08>)
 800b34a:	f7fa f80d 	bl	8005368 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 800b34e:	4a1e      	ldr	r2, [pc, #120]	; (800b3c8 <cppLoop+0x2f28>)
 800b350:	491e      	ldr	r1, [pc, #120]	; (800b3cc <cppLoop+0x2f2c>)
 800b352:	4815      	ldr	r0, [pc, #84]	; (800b3a8 <cppLoop+0x2f08>)
 800b354:	f7f9 fea1 	bl	800509a <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 800b358:	4a1d      	ldr	r2, [pc, #116]	; (800b3d0 <cppLoop+0x2f30>)
 800b35a:	491c      	ldr	r1, [pc, #112]	; (800b3cc <cppLoop+0x2f2c>)
 800b35c:	4812      	ldr	r0, [pc, #72]	; (800b3a8 <cppLoop+0x2f08>)
 800b35e:	f7f9 feb0 	bl	80050c2 <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 800b362:	f04f 32ff 	mov.w	r2, #4294967295
 800b366:	2100      	movs	r1, #0
 800b368:	4801      	ldr	r0, [pc, #4]	; (800b370 <cppLoop+0x2ed0>)
 800b36a:	f7f6 ff0f 	bl	800218c <_ZN3LED2LREaa>
		}

		break;
 800b36e:	e0bb      	b.n	800b4e8 <cppLoop+0x3048>
 800b370:	20000558 	.word	0x20000558
 800b374:	0801ab38 	.word	0x0801ab38
 800b378:	0801ab44 	.word	0x0801ab44
 800b37c:	2000054c 	.word	0x2000054c
 800b380:	200209d4 	.word	0x200209d4
 800b384:	200475cc 	.word	0x200475cc
 800b388:	0801ab50 	.word	0x0801ab50
 800b38c:	0801ab54 	.word	0x0801ab54
 800b390:	2004756c 	.word	0x2004756c
 800b394:	0801ab5c 	.word	0x0801ab5c
 800b398:	0801ab68 	.word	0x0801ab68
 800b39c:	0801ab6c 	.word	0x0801ab6c
 800b3a0:	3ea3d70a 	.word	0x3ea3d70a
 800b3a4:	200209d0 	.word	0x200209d0
 800b3a8:	2000057c 	.word	0x2000057c
 800b3ac:	20020950 	.word	0x20020950
 800b3b0:	00000000 	.word	0x00000000
 800b3b4:	0801ab78 	.word	0x0801ab78
 800b3b8:	0801ab84 	.word	0x0801ab84
 800b3bc:	0801ab90 	.word	0x0801ab90
 800b3c0:	0801a9a4 	.word	0x0801a9a4
 800b3c4:	200475d4 	.word	0x200475d4
 800b3c8:	0801a9b0 	.word	0x0801a9b0
 800b3cc:	0801a9bc 	.word	0x0801a9bc
 800b3d0:	0801a9c8 	.word	0x0801a9c8

	case 15:
		led.fullColor('W');
 800b3d4:	2157      	movs	r1, #87	; 0x57
 800b3d6:	4849      	ldr	r0, [pc, #292]	; (800b4fc <cppLoop+0x305c>)
 800b3d8:	f7f6 fe1c 	bl	8002014 <_ZN3LED9fullColorEc>

		lcd_clear();
 800b3dc:	f7f5 fe60 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	2000      	movs	r0, #0
 800b3e4:	f7f5 fe6c 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 800b3e8:	4845      	ldr	r0, [pc, #276]	; (800b500 <cppLoop+0x3060>)
 800b3ea:	f7f5 fe93 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800b3ee:	2101      	movs	r1, #1
 800b3f0:	2000      	movs	r0, #0
 800b3f2:	f7f5 fe65 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 800b3f6:	4b43      	ldr	r3, [pc, #268]	; (800b504 <cppLoop+0x3064>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7f5 f8bc 	bl	8000578 <__aeabi_f2d>
 800b400:	4603      	mov	r3, r0
 800b402:	460c      	mov	r4, r1
 800b404:	461a      	mov	r2, r3
 800b406:	4623      	mov	r3, r4
 800b408:	483f      	ldr	r0, [pc, #252]	; (800b508 <cppLoop+0x3068>)
 800b40a:	f7f5 fe83 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800b40e:	483f      	ldr	r0, [pc, #252]	; (800b50c <cppLoop+0x306c>)
 800b410:	f7f6 fd9c 	bl	8001f4c <_ZN8JoyStick8getValueEv>
 800b414:	4603      	mov	r3, r0
 800b416:	2b02      	cmp	r3, #2
 800b418:	bf0c      	ite	eq
 800b41a:	2301      	moveq	r3, #1
 800b41c:	2300      	movne	r3, #0
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	2b00      	cmp	r3, #0
 800b422:	d063      	beq.n	800b4ec <cppLoop+0x304c>
			HAL_Delay(500);
 800b424:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b428:	f000 f998 	bl	800b75c <HAL_Delay>

			led.LR(1, -1);
 800b42c:	f04f 32ff 	mov.w	r2, #4294967295
 800b430:	2101      	movs	r1, #1
 800b432:	4832      	ldr	r0, [pc, #200]	; (800b4fc <cppLoop+0x305c>)
 800b434:	f7f6 feaa 	bl	800218c <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800b438:	2101      	movs	r1, #1
 800b43a:	4835      	ldr	r0, [pc, #212]	; (800b510 <cppLoop+0x3070>)
 800b43c:	f7f9 f84a 	bl	80044d4 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 800b440:	4b34      	ldr	r3, [pc, #208]	; (800b514 <cppLoop+0x3074>)
 800b442:	edd3 7a00 	vldr	s15, [r3]
 800b446:	eeb0 0a67 	vmov.f32	s0, s15
 800b44a:	4831      	ldr	r0, [pc, #196]	; (800b510 <cppLoop+0x3070>)
 800b44c:	f7f8 fd64 	bl	8003f18 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 800b450:	4b2c      	ldr	r3, [pc, #176]	; (800b504 <cppLoop+0x3064>)
 800b452:	edd3 7a00 	vldr	s15, [r3]
 800b456:	eeb0 0a67 	vmov.f32	s0, s15
 800b45a:	482d      	ldr	r0, [pc, #180]	; (800b510 <cppLoop+0x3070>)
 800b45c:	f7f8 fd6c 	bl	8003f38 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 800b460:	4b2c      	ldr	r3, [pc, #176]	; (800b514 <cppLoop+0x3074>)
 800b462:	edd3 7a00 	vldr	s15, [r3]
 800b466:	eeb0 0a67 	vmov.f32	s0, s15
 800b46a:	4829      	ldr	r0, [pc, #164]	; (800b510 <cppLoop+0x3070>)
 800b46c:	f7f8 fd74 	bl	8003f58 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800b470:	4827      	ldr	r0, [pc, #156]	; (800b510 <cppLoop+0x3070>)
 800b472:	f7f9 fb97 	bl	8004ba4 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(1000);
 800b476:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b47a:	f000 f96f 	bl	800b75c <HAL_Delay>

			line_trace.running();
 800b47e:	4824      	ldr	r0, [pc, #144]	; (800b510 <cppLoop+0x3070>)
 800b480:	f7f9 f878 	bl	8004574 <_ZN9LineTrace7runningEv>

			logger.stop();
 800b484:	4824      	ldr	r0, [pc, #144]	; (800b518 <cppLoop+0x3078>)
 800b486:	f7f9 ff6f 	bl	8005368 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 800b48a:	4a24      	ldr	r2, [pc, #144]	; (800b51c <cppLoop+0x307c>)
 800b48c:	4924      	ldr	r1, [pc, #144]	; (800b520 <cppLoop+0x3080>)
 800b48e:	4822      	ldr	r0, [pc, #136]	; (800b518 <cppLoop+0x3078>)
 800b490:	f7f9 fe03 	bl	800509a <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 800b494:	4a23      	ldr	r2, [pc, #140]	; (800b524 <cppLoop+0x3084>)
 800b496:	4922      	ldr	r1, [pc, #136]	; (800b520 <cppLoop+0x3080>)
 800b498:	481f      	ldr	r0, [pc, #124]	; (800b518 <cppLoop+0x3078>)
 800b49a:	f7f9 fe12 	bl	80050c2 <_ZN6Logger9saveLogs2EPKcS1_>
;

			led.LR(0, -1);
 800b49e:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	4815      	ldr	r0, [pc, #84]	; (800b4fc <cppLoop+0x305c>)
 800b4a6:	f7f6 fe71 	bl	800218c <_ZN3LED2LREaa>
		}

		break;
 800b4aa:	e01f      	b.n	800b4ec <cppLoop+0x304c>


	default:
		break;
 800b4ac:	bf00      	nop
 800b4ae:	e01e      	b.n	800b4ee <cppLoop+0x304e>
		break;
 800b4b0:	bf00      	nop
 800b4b2:	e01c      	b.n	800b4ee <cppLoop+0x304e>
		break;
 800b4b4:	bf00      	nop
 800b4b6:	e01a      	b.n	800b4ee <cppLoop+0x304e>
		break;
 800b4b8:	bf00      	nop
 800b4ba:	e018      	b.n	800b4ee <cppLoop+0x304e>
		break;
 800b4bc:	bf00      	nop
 800b4be:	e016      	b.n	800b4ee <cppLoop+0x304e>
		break;
 800b4c0:	bf00      	nop
 800b4c2:	e014      	b.n	800b4ee <cppLoop+0x304e>
		break;
 800b4c4:	bf00      	nop
 800b4c6:	e012      	b.n	800b4ee <cppLoop+0x304e>
		break;
 800b4c8:	bf00      	nop
 800b4ca:	e010      	b.n	800b4ee <cppLoop+0x304e>
		break;
 800b4cc:	bf00      	nop
 800b4ce:	e00e      	b.n	800b4ee <cppLoop+0x304e>
		break;
 800b4d0:	bf00      	nop
 800b4d2:	e00c      	b.n	800b4ee <cppLoop+0x304e>
		break;
 800b4d4:	bf00      	nop
 800b4d6:	e00a      	b.n	800b4ee <cppLoop+0x304e>
		break;
 800b4d8:	bf00      	nop
 800b4da:	e008      	b.n	800b4ee <cppLoop+0x304e>
		break;
 800b4dc:	bf00      	nop
 800b4de:	e006      	b.n	800b4ee <cppLoop+0x304e>
		break;
 800b4e0:	bf00      	nop
 800b4e2:	e004      	b.n	800b4ee <cppLoop+0x304e>
		break;
 800b4e4:	bf00      	nop
 800b4e6:	e002      	b.n	800b4ee <cppLoop+0x304e>
		break;
 800b4e8:	bf00      	nop
 800b4ea:	e000      	b.n	800b4ee <cppLoop+0x304e>
		break;
 800b4ec:	bf00      	nop

	}

	HAL_Delay(30);
 800b4ee:	201e      	movs	r0, #30
 800b4f0:	f000 f934 	bl	800b75c <HAL_Delay>

}
 800b4f4:	bf00      	nop
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4fc:	20000558 	.word	0x20000558
 800b500:	0801ab9c 	.word	0x0801ab9c
 800b504:	200475bc 	.word	0x200475bc
 800b508:	0801a9a4 	.word	0x0801a9a4
 800b50c:	2000054c 	.word	0x2000054c
 800b510:	200209d4 	.word	0x200209d4
 800b514:	200475c4 	.word	0x200475c4
 800b518:	2000057c 	.word	0x2000057c
 800b51c:	0801a9b0 	.word	0x0801a9b0
 800b520:	0801a9bc 	.word	0x0801a9bc
 800b524:	0801a9c8 	.word	0x0801a9c8

0800b528 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 800b528:	b580      	push	{r7, lr}
 800b52a:	b088      	sub	sp, #32
 800b52c:	af06      	add	r7, sp, #24
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2b01      	cmp	r3, #1
 800b536:	d14a      	bne.n	800b5ce <_Z41__static_initialization_and_destruction_0ii+0xa6>
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b53e:	4293      	cmp	r3, r2
 800b540:	d145      	bne.n	800b5ce <_Z41__static_initialization_and_destruction_0ii+0xa6>
LineSensor line_sensor;
 800b542:	4825      	ldr	r0, [pc, #148]	; (800b5d8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800b544:	f7f6 fe5a 	bl	80021fc <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 800b548:	4824      	ldr	r0, [pc, #144]	; (800b5dc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800b54a:	f7fa fae9 	bl	8005b20 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 800b54e:	4824      	ldr	r0, [pc, #144]	; (800b5e0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800b550:	f7f6 fcf0 	bl	8001f34 <_ZN8JoyStickC1Ev>
Motor motor;
 800b554:	4823      	ldr	r0, [pc, #140]	; (800b5e4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800b556:	f7f9 ffcf 	bl	80054f8 <_ZN5MotorC1Ev>
IMU imu;
 800b55a:	4823      	ldr	r0, [pc, #140]	; (800b5e8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800b55c:	f7f6 faf6 	bl	8001b4c <_ZN3IMUC1Ev>
Logger logger;
 800b560:	4822      	ldr	r0, [pc, #136]	; (800b5ec <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800b562:	f7f9 fc61 	bl	8004e28 <_ZN6LoggerC1Ev>
Encoder encoder;
 800b566:	4822      	ldr	r0, [pc, #136]	; (800b5f0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800b568:	f7f5 ff30 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 800b56c:	4b1e      	ldr	r3, [pc, #120]	; (800b5e8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800b56e:	4a20      	ldr	r2, [pc, #128]	; (800b5f0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800b570:	491c      	ldr	r1, [pc, #112]	; (800b5e4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800b572:	4820      	ldr	r0, [pc, #128]	; (800b5f4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800b574:	f7fa fdce 	bl	8006114 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 800b578:	4b1e      	ldr	r3, [pc, #120]	; (800b5f4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800b57a:	4a1b      	ldr	r2, [pc, #108]	; (800b5e8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800b57c:	491c      	ldr	r1, [pc, #112]	; (800b5f0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800b57e:	481e      	ldr	r0, [pc, #120]	; (800b5f8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800b580:	f7fa f8a0 	bl	80056c4 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 800b584:	481d      	ldr	r0, [pc, #116]	; (800b5fc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800b586:	f7f5 fe25 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 800b58a:	4b1c      	ldr	r3, [pc, #112]	; (800b5fc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800b58c:	9305      	str	r3, [sp, #20]
 800b58e:	4b16      	ldr	r3, [pc, #88]	; (800b5e8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800b590:	9304      	str	r3, [sp, #16]
 800b592:	4b16      	ldr	r3, [pc, #88]	; (800b5ec <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800b594:	9303      	str	r3, [sp, #12]
 800b596:	4b18      	ldr	r3, [pc, #96]	; (800b5f8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800b598:	9302      	str	r3, [sp, #8]
 800b59a:	4b15      	ldr	r3, [pc, #84]	; (800b5f0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800b59c:	9301      	str	r3, [sp, #4]
 800b59e:	4b0f      	ldr	r3, [pc, #60]	; (800b5dc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800b5a0:	9300      	str	r3, [sp, #0]
 800b5a2:	4b14      	ldr	r3, [pc, #80]	; (800b5f4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800b5a4:	4a0c      	ldr	r2, [pc, #48]	; (800b5d8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800b5a6:	490f      	ldr	r1, [pc, #60]	; (800b5e4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800b5a8:	4815      	ldr	r0, [pc, #84]	; (800b600 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 800b5aa:	f7f7 f905 	bl	80027b8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 800b5ae:	4a0d      	ldr	r2, [pc, #52]	; (800b5e4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800b5b0:	490e      	ldr	r1, [pc, #56]	; (800b5ec <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800b5b2:	4814      	ldr	r0, [pc, #80]	; (800b604 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 800b5b4:	f7fa fbe6 	bl	8005d84 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 800b5b8:	4813      	ldr	r0, [pc, #76]	; (800b608 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 800b5ba:	f7fa f941 	bl	8005840 <_ZN13PathFollowingC1Ev>
sdCard sd_card;
 800b5be:	4813      	ldr	r0, [pc, #76]	; (800b60c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 800b5c0:	f7fb ff44 	bl	800744c <_ZN6sdCardC1Ev>
Logger2 test_logger(&sd_card, 10);
 800b5c4:	220a      	movs	r2, #10
 800b5c6:	4911      	ldr	r1, [pc, #68]	; (800b60c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 800b5c8:	4811      	ldr	r0, [pc, #68]	; (800b610 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 800b5ca:	f7f9 fedf 	bl	800538c <_ZN7Logger2C1EP6sdCardt>
}
 800b5ce:	bf00      	nop
 800b5d0:	3708      	adds	r7, #8
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	20000244 	.word	0x20000244
 800b5dc:	2000053c 	.word	0x2000053c
 800b5e0:	2000054c 	.word	0x2000054c
 800b5e4:	20000554 	.word	0x20000554
 800b5e8:	20000568 	.word	0x20000568
 800b5ec:	2000057c 	.word	0x2000057c
 800b5f0:	20020928 	.word	0x20020928
 800b5f4:	20020950 	.word	0x20020950
 800b5f8:	20020990 	.word	0x20020990
 800b5fc:	200209d0 	.word	0x200209d0
 800b600:	200209d4 	.word	0x200209d4
 800b604:	2002d934 	.word	0x2002d934
 800b608:	2002db40 	.word	0x2002db40
 800b60c:	20045268 	.word	0x20045268
 800b610:	2004756c 	.word	0x2004756c

0800b614 <_GLOBAL__sub_I_line_sensor>:
 800b614:	b580      	push	{r7, lr}
 800b616:	af00      	add	r7, sp, #0
 800b618:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b61c:	2001      	movs	r0, #1
 800b61e:	f7ff ff83 	bl	800b528 <_Z41__static_initialization_and_destruction_0ii>
 800b622:	bd80      	pop	{r7, pc}

0800b624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b65c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b628:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b62a:	e003      	b.n	800b634 <LoopCopyDataInit>

0800b62c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b62c:	4b0c      	ldr	r3, [pc, #48]	; (800b660 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b62e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b630:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b632:	3104      	adds	r1, #4

0800b634 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b634:	480b      	ldr	r0, [pc, #44]	; (800b664 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b636:	4b0c      	ldr	r3, [pc, #48]	; (800b668 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b638:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b63a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b63c:	d3f6      	bcc.n	800b62c <CopyDataInit>
  ldr  r2, =_sbss
 800b63e:	4a0b      	ldr	r2, [pc, #44]	; (800b66c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b640:	e002      	b.n	800b648 <LoopFillZerobss>

0800b642 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b642:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b644:	f842 3b04 	str.w	r3, [r2], #4

0800b648 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b648:	4b09      	ldr	r3, [pc, #36]	; (800b670 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b64a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b64c:	d3f9      	bcc.n	800b642 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b64e:	f7fc fddd 	bl	800820c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b652:	f00a fdb9 	bl	80161c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b656:	f7fa ffbb 	bl	80065d0 <main>
  bx  lr    
 800b65a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b65c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800b660:	0801afb8 	.word	0x0801afb8
  ldr  r0, =_sdata
 800b664:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b668:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800b66c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800b670:	2004c020 	.word	0x2004c020

0800b674 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b674:	e7fe      	b.n	800b674 <ADC_IRQHandler>
	...

0800b678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b67c:	4b0e      	ldr	r3, [pc, #56]	; (800b6b8 <HAL_Init+0x40>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a0d      	ldr	r2, [pc, #52]	; (800b6b8 <HAL_Init+0x40>)
 800b682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b686:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b688:	4b0b      	ldr	r3, [pc, #44]	; (800b6b8 <HAL_Init+0x40>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a0a      	ldr	r2, [pc, #40]	; (800b6b8 <HAL_Init+0x40>)
 800b68e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b692:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b694:	4b08      	ldr	r3, [pc, #32]	; (800b6b8 <HAL_Init+0x40>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a07      	ldr	r2, [pc, #28]	; (800b6b8 <HAL_Init+0x40>)
 800b69a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b69e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b6a0:	2003      	movs	r0, #3
 800b6a2:	f000 fd51 	bl	800c148 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b6a6:	2000      	movs	r0, #0
 800b6a8:	f000 f808 	bl	800b6bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b6ac:	f7fb ffcc 	bl	8007648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b6b0:	2300      	movs	r3, #0
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	40023c00 	.word	0x40023c00

0800b6bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b6c4:	4b12      	ldr	r3, [pc, #72]	; (800b710 <HAL_InitTick+0x54>)
 800b6c6:	681a      	ldr	r2, [r3, #0]
 800b6c8:	4b12      	ldr	r3, [pc, #72]	; (800b714 <HAL_InitTick+0x58>)
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b6d2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b6d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f000 fd69 	bl	800c1b2 <HAL_SYSTICK_Config>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d001      	beq.n	800b6ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e00e      	b.n	800b708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2b0f      	cmp	r3, #15
 800b6ee:	d80a      	bhi.n	800b706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	6879      	ldr	r1, [r7, #4]
 800b6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f8:	f000 fd31 	bl	800c15e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b6fc:	4a06      	ldr	r2, [pc, #24]	; (800b718 <HAL_InitTick+0x5c>)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b702:	2300      	movs	r3, #0
 800b704:	e000      	b.n	800b708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b706:	2301      	movs	r3, #1
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3708      	adds	r7, #8
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	20000000 	.word	0x20000000
 800b714:	20000008 	.word	0x20000008
 800b718:	20000004 	.word	0x20000004

0800b71c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b71c:	b480      	push	{r7}
 800b71e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b720:	4b06      	ldr	r3, [pc, #24]	; (800b73c <HAL_IncTick+0x20>)
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	461a      	mov	r2, r3
 800b726:	4b06      	ldr	r3, [pc, #24]	; (800b740 <HAL_IncTick+0x24>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4413      	add	r3, r2
 800b72c:	4a04      	ldr	r2, [pc, #16]	; (800b740 <HAL_IncTick+0x24>)
 800b72e:	6013      	str	r3, [r2, #0]
}
 800b730:	bf00      	nop
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	20000008 	.word	0x20000008
 800b740:	20049fa8 	.word	0x20049fa8

0800b744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b744:	b480      	push	{r7}
 800b746:	af00      	add	r7, sp, #0
  return uwTick;
 800b748:	4b03      	ldr	r3, [pc, #12]	; (800b758 <HAL_GetTick+0x14>)
 800b74a:	681b      	ldr	r3, [r3, #0]
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop
 800b758:	20049fa8 	.word	0x20049fa8

0800b75c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b764:	f7ff ffee 	bl	800b744 <HAL_GetTick>
 800b768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b774:	d005      	beq.n	800b782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b776:	4b09      	ldr	r3, [pc, #36]	; (800b79c <HAL_Delay+0x40>)
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	461a      	mov	r2, r3
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	4413      	add	r3, r2
 800b780:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b782:	bf00      	nop
 800b784:	f7ff ffde 	bl	800b744 <HAL_GetTick>
 800b788:	4602      	mov	r2, r0
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	1ad3      	subs	r3, r2, r3
 800b78e:	68fa      	ldr	r2, [r7, #12]
 800b790:	429a      	cmp	r2, r3
 800b792:	d8f7      	bhi.n	800b784 <HAL_Delay+0x28>
  {
  }
}
 800b794:	bf00      	nop
 800b796:	3710      	adds	r7, #16
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	20000008 	.word	0x20000008

0800b7a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d101      	bne.n	800b7b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e033      	b.n	800b81e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d109      	bne.n	800b7d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f7fb ff6a 	bl	8007698 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7d6:	f003 0310 	and.w	r3, r3, #16
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d118      	bne.n	800b810 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800b7e6:	f023 0302 	bic.w	r3, r3, #2
 800b7ea:	f043 0202 	orr.w	r2, r3, #2
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f000 fa5a 	bl	800bcac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b802:	f023 0303 	bic.w	r3, r3, #3
 800b806:	f043 0201 	orr.w	r2, r3, #1
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	641a      	str	r2, [r3, #64]	; 0x40
 800b80e:	e001      	b.n	800b814 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800b810:	2301      	movs	r3, #1
 800b812:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800b81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3710      	adds	r7, #16
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
	...

0800b828 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800b834:	2300      	movs	r3, #0
 800b836:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d101      	bne.n	800b846 <HAL_ADC_Start_DMA+0x1e>
 800b842:	2302      	movs	r3, #2
 800b844:	e0cc      	b.n	800b9e0 <HAL_ADC_Start_DMA+0x1b8>
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2201      	movs	r2, #1
 800b84a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	f003 0301 	and.w	r3, r3, #1
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d018      	beq.n	800b88e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	689a      	ldr	r2, [r3, #8]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f042 0201 	orr.w	r2, r2, #1
 800b86a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800b86c:	4b5e      	ldr	r3, [pc, #376]	; (800b9e8 <HAL_ADC_Start_DMA+0x1c0>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a5e      	ldr	r2, [pc, #376]	; (800b9ec <HAL_ADC_Start_DMA+0x1c4>)
 800b872:	fba2 2303 	umull	r2, r3, r2, r3
 800b876:	0c9a      	lsrs	r2, r3, #18
 800b878:	4613      	mov	r3, r2
 800b87a:	005b      	lsls	r3, r3, #1
 800b87c:	4413      	add	r3, r2
 800b87e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800b880:	e002      	b.n	800b888 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	3b01      	subs	r3, #1
 800b886:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d1f9      	bne.n	800b882 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	689b      	ldr	r3, [r3, #8]
 800b894:	f003 0301 	and.w	r3, r3, #1
 800b898:	2b01      	cmp	r3, #1
 800b89a:	f040 80a0 	bne.w	800b9de <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b8a6:	f023 0301 	bic.w	r3, r3, #1
 800b8aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d007      	beq.n	800b8d0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b8c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b8d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8dc:	d106      	bne.n	800b8ec <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8e2:	f023 0206 	bic.w	r2, r3, #6
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	645a      	str	r2, [r3, #68]	; 0x44
 800b8ea:	e002      	b.n	800b8f2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b8fa:	4b3d      	ldr	r3, [pc, #244]	; (800b9f0 <HAL_ADC_Start_DMA+0x1c8>)
 800b8fc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b902:	4a3c      	ldr	r2, [pc, #240]	; (800b9f4 <HAL_ADC_Start_DMA+0x1cc>)
 800b904:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b90a:	4a3b      	ldr	r2, [pc, #236]	; (800b9f8 <HAL_ADC_Start_DMA+0x1d0>)
 800b90c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b912:	4a3a      	ldr	r2, [pc, #232]	; (800b9fc <HAL_ADC_Start_DMA+0x1d4>)
 800b914:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800b91e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	685a      	ldr	r2, [r3, #4]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b92e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	689a      	ldr	r2, [r3, #8]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b93e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	334c      	adds	r3, #76	; 0x4c
 800b94a:	4619      	mov	r1, r3
 800b94c:	68ba      	ldr	r2, [r7, #8]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f000 fcea 	bl	800c328 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	f003 031f 	and.w	r3, r3, #31
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d12a      	bne.n	800b9b6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4a26      	ldr	r2, [pc, #152]	; (800ba00 <HAL_ADC_Start_DMA+0x1d8>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d015      	beq.n	800b996 <HAL_ADC_Start_DMA+0x16e>
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a25      	ldr	r2, [pc, #148]	; (800ba04 <HAL_ADC_Start_DMA+0x1dc>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d105      	bne.n	800b980 <HAL_ADC_Start_DMA+0x158>
 800b974:	4b1e      	ldr	r3, [pc, #120]	; (800b9f0 <HAL_ADC_Start_DMA+0x1c8>)
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	f003 031f 	and.w	r3, r3, #31
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00a      	beq.n	800b996 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a20      	ldr	r2, [pc, #128]	; (800ba08 <HAL_ADC_Start_DMA+0x1e0>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d129      	bne.n	800b9de <HAL_ADC_Start_DMA+0x1b6>
 800b98a:	4b19      	ldr	r3, [pc, #100]	; (800b9f0 <HAL_ADC_Start_DMA+0x1c8>)
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	f003 031f 	and.w	r3, r3, #31
 800b992:	2b0f      	cmp	r3, #15
 800b994:	d823      	bhi.n	800b9de <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d11c      	bne.n	800b9de <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	689a      	ldr	r2, [r3, #8]
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b9b2:	609a      	str	r2, [r3, #8]
 800b9b4:	e013      	b.n	800b9de <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a11      	ldr	r2, [pc, #68]	; (800ba00 <HAL_ADC_Start_DMA+0x1d8>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d10e      	bne.n	800b9de <HAL_ADC_Start_DMA+0x1b6>
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	689b      	ldr	r3, [r3, #8]
 800b9c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d107      	bne.n	800b9de <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	689a      	ldr	r2, [r3, #8]
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b9dc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800b9de:	2300      	movs	r3, #0
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3718      	adds	r7, #24
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	20000000 	.word	0x20000000
 800b9ec:	431bde83 	.word	0x431bde83
 800b9f0:	40012300 	.word	0x40012300
 800b9f4:	0800bea5 	.word	0x0800bea5
 800b9f8:	0800bf5f 	.word	0x0800bf5f
 800b9fc:	0800bf7b 	.word	0x0800bf7b
 800ba00:	40012000 	.word	0x40012000
 800ba04:	40012100 	.word	0x40012100
 800ba08:	40012200 	.word	0x40012200

0800ba0c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800ba14:	bf00      	nop
 800ba16:	370c      	adds	r7, #12
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800ba28:	bf00      	nop
 800ba2a:	370c      	adds	r7, #12
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr

0800ba34 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b083      	sub	sp, #12
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800ba3c:	bf00      	nop
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b085      	sub	sp, #20
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800ba52:	2300      	movs	r3, #0
 800ba54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d101      	bne.n	800ba64 <HAL_ADC_ConfigChannel+0x1c>
 800ba60:	2302      	movs	r3, #2
 800ba62:	e113      	b.n	800bc8c <HAL_ADC_ConfigChannel+0x244>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2201      	movs	r2, #1
 800ba68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2b09      	cmp	r3, #9
 800ba72:	d925      	bls.n	800bac0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	68d9      	ldr	r1, [r3, #12]
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	461a      	mov	r2, r3
 800ba82:	4613      	mov	r3, r2
 800ba84:	005b      	lsls	r3, r3, #1
 800ba86:	4413      	add	r3, r2
 800ba88:	3b1e      	subs	r3, #30
 800ba8a:	2207      	movs	r2, #7
 800ba8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ba90:	43da      	mvns	r2, r3
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	400a      	ands	r2, r1
 800ba98:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	68d9      	ldr	r1, [r3, #12]
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	689a      	ldr	r2, [r3, #8]
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	4618      	mov	r0, r3
 800baac:	4603      	mov	r3, r0
 800baae:	005b      	lsls	r3, r3, #1
 800bab0:	4403      	add	r3, r0
 800bab2:	3b1e      	subs	r3, #30
 800bab4:	409a      	lsls	r2, r3
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	430a      	orrs	r2, r1
 800babc:	60da      	str	r2, [r3, #12]
 800babe:	e022      	b.n	800bb06 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	6919      	ldr	r1, [r3, #16]
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	b29b      	uxth	r3, r3
 800bacc:	461a      	mov	r2, r3
 800bace:	4613      	mov	r3, r2
 800bad0:	005b      	lsls	r3, r3, #1
 800bad2:	4413      	add	r3, r2
 800bad4:	2207      	movs	r2, #7
 800bad6:	fa02 f303 	lsl.w	r3, r2, r3
 800bada:	43da      	mvns	r2, r3
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	400a      	ands	r2, r1
 800bae2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	6919      	ldr	r1, [r3, #16]
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	689a      	ldr	r2, [r3, #8]
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	4618      	mov	r0, r3
 800baf6:	4603      	mov	r3, r0
 800baf8:	005b      	lsls	r3, r3, #1
 800bafa:	4403      	add	r3, r0
 800bafc:	409a      	lsls	r2, r3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	430a      	orrs	r2, r1
 800bb04:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	2b06      	cmp	r3, #6
 800bb0c:	d824      	bhi.n	800bb58 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	685a      	ldr	r2, [r3, #4]
 800bb18:	4613      	mov	r3, r2
 800bb1a:	009b      	lsls	r3, r3, #2
 800bb1c:	4413      	add	r3, r2
 800bb1e:	3b05      	subs	r3, #5
 800bb20:	221f      	movs	r2, #31
 800bb22:	fa02 f303 	lsl.w	r3, r2, r3
 800bb26:	43da      	mvns	r2, r3
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	400a      	ands	r2, r1
 800bb2e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	685a      	ldr	r2, [r3, #4]
 800bb42:	4613      	mov	r3, r2
 800bb44:	009b      	lsls	r3, r3, #2
 800bb46:	4413      	add	r3, r2
 800bb48:	3b05      	subs	r3, #5
 800bb4a:	fa00 f203 	lsl.w	r2, r0, r3
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	430a      	orrs	r2, r1
 800bb54:	635a      	str	r2, [r3, #52]	; 0x34
 800bb56:	e04c      	b.n	800bbf2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	2b0c      	cmp	r3, #12
 800bb5e:	d824      	bhi.n	800bbaa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	685a      	ldr	r2, [r3, #4]
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	4413      	add	r3, r2
 800bb70:	3b23      	subs	r3, #35	; 0x23
 800bb72:	221f      	movs	r2, #31
 800bb74:	fa02 f303 	lsl.w	r3, r2, r3
 800bb78:	43da      	mvns	r2, r3
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	400a      	ands	r2, r1
 800bb80:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	4618      	mov	r0, r3
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	685a      	ldr	r2, [r3, #4]
 800bb94:	4613      	mov	r3, r2
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	4413      	add	r3, r2
 800bb9a:	3b23      	subs	r3, #35	; 0x23
 800bb9c:	fa00 f203 	lsl.w	r2, r0, r3
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	430a      	orrs	r2, r1
 800bba6:	631a      	str	r2, [r3, #48]	; 0x30
 800bba8:	e023      	b.n	800bbf2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	685a      	ldr	r2, [r3, #4]
 800bbb4:	4613      	mov	r3, r2
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	4413      	add	r3, r2
 800bbba:	3b41      	subs	r3, #65	; 0x41
 800bbbc:	221f      	movs	r2, #31
 800bbbe:	fa02 f303 	lsl.w	r3, r2, r3
 800bbc2:	43da      	mvns	r2, r3
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	400a      	ands	r2, r1
 800bbca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	4618      	mov	r0, r3
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	685a      	ldr	r2, [r3, #4]
 800bbde:	4613      	mov	r3, r2
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	4413      	add	r3, r2
 800bbe4:	3b41      	subs	r3, #65	; 0x41
 800bbe6:	fa00 f203 	lsl.w	r2, r0, r3
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	430a      	orrs	r2, r1
 800bbf0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800bbf2:	4b29      	ldr	r3, [pc, #164]	; (800bc98 <HAL_ADC_ConfigChannel+0x250>)
 800bbf4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a28      	ldr	r2, [pc, #160]	; (800bc9c <HAL_ADC_ConfigChannel+0x254>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d10f      	bne.n	800bc20 <HAL_ADC_ConfigChannel+0x1d8>
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	2b12      	cmp	r3, #18
 800bc06:	d10b      	bne.n	800bc20 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4a1d      	ldr	r2, [pc, #116]	; (800bc9c <HAL_ADC_ConfigChannel+0x254>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d12b      	bne.n	800bc82 <HAL_ADC_ConfigChannel+0x23a>
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a1c      	ldr	r2, [pc, #112]	; (800bca0 <HAL_ADC_ConfigChannel+0x258>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d003      	beq.n	800bc3c <HAL_ADC_ConfigChannel+0x1f4>
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	2b11      	cmp	r3, #17
 800bc3a:	d122      	bne.n	800bc82 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4a11      	ldr	r2, [pc, #68]	; (800bca0 <HAL_ADC_ConfigChannel+0x258>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d111      	bne.n	800bc82 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800bc5e:	4b11      	ldr	r3, [pc, #68]	; (800bca4 <HAL_ADC_ConfigChannel+0x25c>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4a11      	ldr	r2, [pc, #68]	; (800bca8 <HAL_ADC_ConfigChannel+0x260>)
 800bc64:	fba2 2303 	umull	r2, r3, r2, r3
 800bc68:	0c9a      	lsrs	r2, r3, #18
 800bc6a:	4613      	mov	r3, r2
 800bc6c:	009b      	lsls	r3, r3, #2
 800bc6e:	4413      	add	r3, r2
 800bc70:	005b      	lsls	r3, r3, #1
 800bc72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800bc74:	e002      	b.n	800bc7c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	3b01      	subs	r3, #1
 800bc7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d1f9      	bne.n	800bc76 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2200      	movs	r2, #0
 800bc86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800bc8a:	2300      	movs	r3, #0
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3714      	adds	r7, #20
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr
 800bc98:	40012300 	.word	0x40012300
 800bc9c:	40012000 	.word	0x40012000
 800bca0:	10000012 	.word	0x10000012
 800bca4:	20000000 	.word	0x20000000
 800bca8:	431bde83 	.word	0x431bde83

0800bcac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b085      	sub	sp, #20
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800bcb4:	4b79      	ldr	r3, [pc, #484]	; (800be9c <ADC_Init+0x1f0>)
 800bcb6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	685a      	ldr	r2, [r3, #4]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	431a      	orrs	r2, r3
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	685a      	ldr	r2, [r3, #4]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bce0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	6859      	ldr	r1, [r3, #4]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	691b      	ldr	r3, [r3, #16]
 800bcec:	021a      	lsls	r2, r3, #8
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	430a      	orrs	r2, r1
 800bcf4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	685a      	ldr	r2, [r3, #4]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800bd04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	6859      	ldr	r1, [r3, #4]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	689a      	ldr	r2, [r3, #8]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	430a      	orrs	r2, r1
 800bd16:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	689a      	ldr	r2, [r3, #8]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bd26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	6899      	ldr	r1, [r3, #8]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	68da      	ldr	r2, [r3, #12]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	430a      	orrs	r2, r1
 800bd38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd3e:	4a58      	ldr	r2, [pc, #352]	; (800bea0 <ADC_Init+0x1f4>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d022      	beq.n	800bd8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	689a      	ldr	r2, [r3, #8]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bd52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	6899      	ldr	r1, [r3, #8]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	430a      	orrs	r2, r1
 800bd64:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	689a      	ldr	r2, [r3, #8]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800bd74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	6899      	ldr	r1, [r3, #8]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	430a      	orrs	r2, r1
 800bd86:	609a      	str	r2, [r3, #8]
 800bd88:	e00f      	b.n	800bdaa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	689a      	ldr	r2, [r3, #8]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bd98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	689a      	ldr	r2, [r3, #8]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800bda8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	689a      	ldr	r2, [r3, #8]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f022 0202 	bic.w	r2, r2, #2
 800bdb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	6899      	ldr	r1, [r3, #8]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	7e1b      	ldrb	r3, [r3, #24]
 800bdc4:	005a      	lsls	r2, r3, #1
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	430a      	orrs	r2, r1
 800bdcc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d01b      	beq.n	800be10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	685a      	ldr	r2, [r3, #4]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bde6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	685a      	ldr	r2, [r3, #4]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800bdf6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	6859      	ldr	r1, [r3, #4]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be02:	3b01      	subs	r3, #1
 800be04:	035a      	lsls	r2, r3, #13
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	430a      	orrs	r2, r1
 800be0c:	605a      	str	r2, [r3, #4]
 800be0e:	e007      	b.n	800be20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	685a      	ldr	r2, [r3, #4]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800be1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800be2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	69db      	ldr	r3, [r3, #28]
 800be3a:	3b01      	subs	r3, #1
 800be3c:	051a      	lsls	r2, r3, #20
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	430a      	orrs	r2, r1
 800be44:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	689a      	ldr	r2, [r3, #8]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800be54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	6899      	ldr	r1, [r3, #8]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be62:	025a      	lsls	r2, r3, #9
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	430a      	orrs	r2, r1
 800be6a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	689a      	ldr	r2, [r3, #8]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	6899      	ldr	r1, [r3, #8]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	695b      	ldr	r3, [r3, #20]
 800be86:	029a      	lsls	r2, r3, #10
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	430a      	orrs	r2, r1
 800be8e:	609a      	str	r2, [r3, #8]
}
 800be90:	bf00      	nop
 800be92:	3714      	adds	r7, #20
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr
 800be9c:	40012300 	.word	0x40012300
 800bea0:	0f000001 	.word	0x0f000001

0800bea4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beb0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d13c      	bne.n	800bf38 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bec2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d12b      	bne.n	800bf30 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d127      	bne.n	800bf30 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800beea:	2b00      	cmp	r3, #0
 800beec:	d006      	beq.n	800befc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d119      	bne.n	800bf30 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	685a      	ldr	r2, [r3, #4]
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f022 0220 	bic.w	r2, r2, #32
 800bf0a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d105      	bne.n	800bf30 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf28:	f043 0201 	orr.w	r2, r3, #1
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	f7ff fd6b 	bl	800ba0c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800bf36:	e00e      	b.n	800bf56 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf3c:	f003 0310 	and.w	r3, r3, #16
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d003      	beq.n	800bf4c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800bf44:	68f8      	ldr	r0, [r7, #12]
 800bf46:	f7ff fd75 	bl	800ba34 <HAL_ADC_ErrorCallback>
}
 800bf4a:	e004      	b.n	800bf56 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	4798      	blx	r3
}
 800bf56:	bf00      	nop
 800bf58:	3710      	adds	r7, #16
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}

0800bf5e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800bf5e:	b580      	push	{r7, lr}
 800bf60:	b084      	sub	sp, #16
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf6a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800bf6c:	68f8      	ldr	r0, [r7, #12]
 800bf6e:	f7ff fd57 	bl	800ba20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800bf72:	bf00      	nop
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b084      	sub	sp, #16
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf86:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2240      	movs	r2, #64	; 0x40
 800bf8c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf92:	f043 0204 	orr.w	r2, r3, #4
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800bf9a:	68f8      	ldr	r0, [r7, #12]
 800bf9c:	f7ff fd4a 	bl	800ba34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800bfa0:	bf00      	nop
 800bfa2:	3710      	adds	r7, #16
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b085      	sub	sp, #20
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f003 0307 	and.w	r3, r3, #7
 800bfb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bfb8:	4b0c      	ldr	r3, [pc, #48]	; (800bfec <__NVIC_SetPriorityGrouping+0x44>)
 800bfba:	68db      	ldr	r3, [r3, #12]
 800bfbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bfbe:	68ba      	ldr	r2, [r7, #8]
 800bfc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bfc4:	4013      	ands	r3, r2
 800bfc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bfd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800bfd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bfd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bfda:	4a04      	ldr	r2, [pc, #16]	; (800bfec <__NVIC_SetPriorityGrouping+0x44>)
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	60d3      	str	r3, [r2, #12]
}
 800bfe0:	bf00      	nop
 800bfe2:	3714      	adds	r7, #20
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr
 800bfec:	e000ed00 	.word	0xe000ed00

0800bff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bff0:	b480      	push	{r7}
 800bff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bff4:	4b04      	ldr	r3, [pc, #16]	; (800c008 <__NVIC_GetPriorityGrouping+0x18>)
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	0a1b      	lsrs	r3, r3, #8
 800bffa:	f003 0307 	and.w	r3, r3, #7
}
 800bffe:	4618      	mov	r0, r3
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr
 800c008:	e000ed00 	.word	0xe000ed00

0800c00c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	4603      	mov	r3, r0
 800c014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	db0b      	blt.n	800c036 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c01e:	79fb      	ldrb	r3, [r7, #7]
 800c020:	f003 021f 	and.w	r2, r3, #31
 800c024:	4907      	ldr	r1, [pc, #28]	; (800c044 <__NVIC_EnableIRQ+0x38>)
 800c026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c02a:	095b      	lsrs	r3, r3, #5
 800c02c:	2001      	movs	r0, #1
 800c02e:	fa00 f202 	lsl.w	r2, r0, r2
 800c032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c036:	bf00      	nop
 800c038:	370c      	adds	r7, #12
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	e000e100 	.word	0xe000e100

0800c048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c048:	b480      	push	{r7}
 800c04a:	b083      	sub	sp, #12
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	4603      	mov	r3, r0
 800c050:	6039      	str	r1, [r7, #0]
 800c052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	db0a      	blt.n	800c072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	b2da      	uxtb	r2, r3
 800c060:	490c      	ldr	r1, [pc, #48]	; (800c094 <__NVIC_SetPriority+0x4c>)
 800c062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c066:	0112      	lsls	r2, r2, #4
 800c068:	b2d2      	uxtb	r2, r2
 800c06a:	440b      	add	r3, r1
 800c06c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c070:	e00a      	b.n	800c088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	b2da      	uxtb	r2, r3
 800c076:	4908      	ldr	r1, [pc, #32]	; (800c098 <__NVIC_SetPriority+0x50>)
 800c078:	79fb      	ldrb	r3, [r7, #7]
 800c07a:	f003 030f 	and.w	r3, r3, #15
 800c07e:	3b04      	subs	r3, #4
 800c080:	0112      	lsls	r2, r2, #4
 800c082:	b2d2      	uxtb	r2, r2
 800c084:	440b      	add	r3, r1
 800c086:	761a      	strb	r2, [r3, #24]
}
 800c088:	bf00      	nop
 800c08a:	370c      	adds	r7, #12
 800c08c:	46bd      	mov	sp, r7
 800c08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c092:	4770      	bx	lr
 800c094:	e000e100 	.word	0xe000e100
 800c098:	e000ed00 	.word	0xe000ed00

0800c09c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c09c:	b480      	push	{r7}
 800c09e:	b089      	sub	sp, #36	; 0x24
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f003 0307 	and.w	r3, r3, #7
 800c0ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	f1c3 0307 	rsb	r3, r3, #7
 800c0b6:	2b04      	cmp	r3, #4
 800c0b8:	bf28      	it	cs
 800c0ba:	2304      	movcs	r3, #4
 800c0bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c0be:	69fb      	ldr	r3, [r7, #28]
 800c0c0:	3304      	adds	r3, #4
 800c0c2:	2b06      	cmp	r3, #6
 800c0c4:	d902      	bls.n	800c0cc <NVIC_EncodePriority+0x30>
 800c0c6:	69fb      	ldr	r3, [r7, #28]
 800c0c8:	3b03      	subs	r3, #3
 800c0ca:	e000      	b.n	800c0ce <NVIC_EncodePriority+0x32>
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c0d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c0d4:	69bb      	ldr	r3, [r7, #24]
 800c0d6:	fa02 f303 	lsl.w	r3, r2, r3
 800c0da:	43da      	mvns	r2, r3
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	401a      	ands	r2, r3
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c0e4:	f04f 31ff 	mov.w	r1, #4294967295
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	fa01 f303 	lsl.w	r3, r1, r3
 800c0ee:	43d9      	mvns	r1, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c0f4:	4313      	orrs	r3, r2
         );
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3724      	adds	r7, #36	; 0x24
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr
	...

0800c104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	3b01      	subs	r3, #1
 800c110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c114:	d301      	bcc.n	800c11a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c116:	2301      	movs	r3, #1
 800c118:	e00f      	b.n	800c13a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c11a:	4a0a      	ldr	r2, [pc, #40]	; (800c144 <SysTick_Config+0x40>)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	3b01      	subs	r3, #1
 800c120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c122:	210f      	movs	r1, #15
 800c124:	f04f 30ff 	mov.w	r0, #4294967295
 800c128:	f7ff ff8e 	bl	800c048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c12c:	4b05      	ldr	r3, [pc, #20]	; (800c144 <SysTick_Config+0x40>)
 800c12e:	2200      	movs	r2, #0
 800c130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c132:	4b04      	ldr	r3, [pc, #16]	; (800c144 <SysTick_Config+0x40>)
 800c134:	2207      	movs	r2, #7
 800c136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c138:	2300      	movs	r3, #0
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3708      	adds	r7, #8
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	e000e010 	.word	0xe000e010

0800c148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f7ff ff29 	bl	800bfa8 <__NVIC_SetPriorityGrouping>
}
 800c156:	bf00      	nop
 800c158:	3708      	adds	r7, #8
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}

0800c15e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c15e:	b580      	push	{r7, lr}
 800c160:	b086      	sub	sp, #24
 800c162:	af00      	add	r7, sp, #0
 800c164:	4603      	mov	r3, r0
 800c166:	60b9      	str	r1, [r7, #8]
 800c168:	607a      	str	r2, [r7, #4]
 800c16a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c16c:	2300      	movs	r3, #0
 800c16e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c170:	f7ff ff3e 	bl	800bff0 <__NVIC_GetPriorityGrouping>
 800c174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	68b9      	ldr	r1, [r7, #8]
 800c17a:	6978      	ldr	r0, [r7, #20]
 800c17c:	f7ff ff8e 	bl	800c09c <NVIC_EncodePriority>
 800c180:	4602      	mov	r2, r0
 800c182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c186:	4611      	mov	r1, r2
 800c188:	4618      	mov	r0, r3
 800c18a:	f7ff ff5d 	bl	800c048 <__NVIC_SetPriority>
}
 800c18e:	bf00      	nop
 800c190:	3718      	adds	r7, #24
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}

0800c196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c196:	b580      	push	{r7, lr}
 800c198:	b082      	sub	sp, #8
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	4603      	mov	r3, r0
 800c19e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c1a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f7ff ff31 	bl	800c00c <__NVIC_EnableIRQ>
}
 800c1aa:	bf00      	nop
 800c1ac:	3708      	adds	r7, #8
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b082      	sub	sp, #8
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f7ff ffa2 	bl	800c104 <SysTick_Config>
 800c1c0:	4603      	mov	r3, r0
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3708      	adds	r7, #8
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
	...

0800c1cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b086      	sub	sp, #24
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c1d8:	f7ff fab4 	bl	800b744 <HAL_GetTick>
 800c1dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d101      	bne.n	800c1e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	e099      	b.n	800c31c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2202      	movs	r2, #2
 800c1f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	681a      	ldr	r2, [r3, #0]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f022 0201 	bic.w	r2, r2, #1
 800c206:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c208:	e00f      	b.n	800c22a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c20a:	f7ff fa9b 	bl	800b744 <HAL_GetTick>
 800c20e:	4602      	mov	r2, r0
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	1ad3      	subs	r3, r2, r3
 800c214:	2b05      	cmp	r3, #5
 800c216:	d908      	bls.n	800c22a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2220      	movs	r2, #32
 800c21c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2203      	movs	r2, #3
 800c222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800c226:	2303      	movs	r3, #3
 800c228:	e078      	b.n	800c31c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f003 0301 	and.w	r3, r3, #1
 800c234:	2b00      	cmp	r3, #0
 800c236:	d1e8      	bne.n	800c20a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c240:	697a      	ldr	r2, [r7, #20]
 800c242:	4b38      	ldr	r3, [pc, #224]	; (800c324 <HAL_DMA_Init+0x158>)
 800c244:	4013      	ands	r3, r2
 800c246:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	685a      	ldr	r2, [r3, #4]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	689b      	ldr	r3, [r3, #8]
 800c250:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c256:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	691b      	ldr	r3, [r3, #16]
 800c25c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c262:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	699b      	ldr	r3, [r3, #24]
 800c268:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c26e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6a1b      	ldr	r3, [r3, #32]
 800c274:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c276:	697a      	ldr	r2, [r7, #20]
 800c278:	4313      	orrs	r3, r2
 800c27a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c280:	2b04      	cmp	r3, #4
 800c282:	d107      	bne.n	800c294 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c28c:	4313      	orrs	r3, r2
 800c28e:	697a      	ldr	r2, [r7, #20]
 800c290:	4313      	orrs	r3, r2
 800c292:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	697a      	ldr	r2, [r7, #20]
 800c29a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	695b      	ldr	r3, [r3, #20]
 800c2a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	f023 0307 	bic.w	r3, r3, #7
 800c2aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b0:	697a      	ldr	r2, [r7, #20]
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ba:	2b04      	cmp	r3, #4
 800c2bc:	d117      	bne.n	800c2ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2c2:	697a      	ldr	r2, [r7, #20]
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d00e      	beq.n	800c2ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 fa9d 	bl	800c810 <DMA_CheckFifoParam>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d008      	beq.n	800c2ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2240      	movs	r2, #64	; 0x40
 800c2e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	e016      	b.n	800c31c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	697a      	ldr	r2, [r7, #20]
 800c2f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 fa54 	bl	800c7a4 <DMA_CalcBaseAndBitshift>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c304:	223f      	movs	r2, #63	; 0x3f
 800c306:	409a      	lsls	r2, r3
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2200      	movs	r2, #0
 800c310:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2201      	movs	r2, #1
 800c316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c31a:	2300      	movs	r3, #0
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3718      	adds	r7, #24
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}
 800c324:	f010803f 	.word	0xf010803f

0800c328 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b086      	sub	sp, #24
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
 800c334:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c336:	2300      	movs	r3, #0
 800c338:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c33e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c346:	2b01      	cmp	r3, #1
 800c348:	d101      	bne.n	800c34e <HAL_DMA_Start_IT+0x26>
 800c34a:	2302      	movs	r3, #2
 800c34c:	e040      	b.n	800c3d0 <HAL_DMA_Start_IT+0xa8>
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2201      	movs	r2, #1
 800c352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c35c:	b2db      	uxtb	r3, r3
 800c35e:	2b01      	cmp	r3, #1
 800c360:	d12f      	bne.n	800c3c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2202      	movs	r2, #2
 800c366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	2200      	movs	r2, #0
 800c36e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	687a      	ldr	r2, [r7, #4]
 800c374:	68b9      	ldr	r1, [r7, #8]
 800c376:	68f8      	ldr	r0, [r7, #12]
 800c378:	f000 f9e6 	bl	800c748 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c380:	223f      	movs	r2, #63	; 0x3f
 800c382:	409a      	lsls	r2, r3
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	681a      	ldr	r2, [r3, #0]
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f042 0216 	orr.w	r2, r2, #22
 800c396:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d007      	beq.n	800c3b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	681a      	ldr	r2, [r3, #0]
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f042 0208 	orr.w	r2, r2, #8
 800c3ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	681a      	ldr	r2, [r3, #0]
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f042 0201 	orr.w	r2, r2, #1
 800c3be:	601a      	str	r2, [r3, #0]
 800c3c0:	e005      	b.n	800c3ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c3ca:	2302      	movs	r3, #2
 800c3cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c3ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3718      	adds	r7, #24
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b083      	sub	sp, #12
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	2b02      	cmp	r3, #2
 800c3ea:	d004      	beq.n	800c3f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2280      	movs	r2, #128	; 0x80
 800c3f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	e00c      	b.n	800c410 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2205      	movs	r2, #5
 800c3fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f022 0201 	bic.w	r2, r2, #1
 800c40c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c40e:	2300      	movs	r3, #0
}
 800c410:	4618      	mov	r0, r3
 800c412:	370c      	adds	r7, #12
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr

0800c41c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b086      	sub	sp, #24
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c424:	2300      	movs	r3, #0
 800c426:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c428:	4b92      	ldr	r3, [pc, #584]	; (800c674 <HAL_DMA_IRQHandler+0x258>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a92      	ldr	r2, [pc, #584]	; (800c678 <HAL_DMA_IRQHandler+0x25c>)
 800c42e:	fba2 2303 	umull	r2, r3, r2, r3
 800c432:	0a9b      	lsrs	r3, r3, #10
 800c434:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c43a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c446:	2208      	movs	r2, #8
 800c448:	409a      	lsls	r2, r3
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	4013      	ands	r3, r2
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d01a      	beq.n	800c488 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f003 0304 	and.w	r3, r3, #4
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d013      	beq.n	800c488 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	681a      	ldr	r2, [r3, #0]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f022 0204 	bic.w	r2, r2, #4
 800c46e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c474:	2208      	movs	r2, #8
 800c476:	409a      	lsls	r2, r3
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c480:	f043 0201 	orr.w	r2, r3, #1
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c48c:	2201      	movs	r2, #1
 800c48e:	409a      	lsls	r2, r3
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	4013      	ands	r3, r2
 800c494:	2b00      	cmp	r3, #0
 800c496:	d012      	beq.n	800c4be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	695b      	ldr	r3, [r3, #20]
 800c49e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d00b      	beq.n	800c4be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	409a      	lsls	r2, r3
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4b6:	f043 0202 	orr.w	r2, r3, #2
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4c2:	2204      	movs	r2, #4
 800c4c4:	409a      	lsls	r2, r3
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	4013      	ands	r3, r2
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d012      	beq.n	800c4f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f003 0302 	and.w	r3, r3, #2
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d00b      	beq.n	800c4f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4e0:	2204      	movs	r2, #4
 800c4e2:	409a      	lsls	r2, r3
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4ec:	f043 0204 	orr.w	r2, r3, #4
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4f8:	2210      	movs	r2, #16
 800c4fa:	409a      	lsls	r2, r3
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	4013      	ands	r3, r2
 800c500:	2b00      	cmp	r3, #0
 800c502:	d043      	beq.n	800c58c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f003 0308 	and.w	r3, r3, #8
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d03c      	beq.n	800c58c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c516:	2210      	movs	r2, #16
 800c518:	409a      	lsls	r2, r3
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d018      	beq.n	800c55e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c536:	2b00      	cmp	r3, #0
 800c538:	d108      	bne.n	800c54c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d024      	beq.n	800c58c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	4798      	blx	r3
 800c54a:	e01f      	b.n	800c58c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c550:	2b00      	cmp	r3, #0
 800c552:	d01b      	beq.n	800c58c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	4798      	blx	r3
 800c55c:	e016      	b.n	800c58c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d107      	bne.n	800c57c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	681a      	ldr	r2, [r3, #0]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f022 0208 	bic.w	r2, r2, #8
 800c57a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c580:	2b00      	cmp	r3, #0
 800c582:	d003      	beq.n	800c58c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c590:	2220      	movs	r2, #32
 800c592:	409a      	lsls	r2, r3
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	4013      	ands	r3, r2
 800c598:	2b00      	cmp	r3, #0
 800c59a:	f000 808e 	beq.w	800c6ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f003 0310 	and.w	r3, r3, #16
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	f000 8086 	beq.w	800c6ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5b2:	2220      	movs	r2, #32
 800c5b4:	409a      	lsls	r2, r3
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	2b05      	cmp	r3, #5
 800c5c4:	d136      	bne.n	800c634 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	681a      	ldr	r2, [r3, #0]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f022 0216 	bic.w	r2, r2, #22
 800c5d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	695a      	ldr	r2, [r3, #20]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c5e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d103      	bne.n	800c5f6 <HAL_DMA_IRQHandler+0x1da>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d007      	beq.n	800c606 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f022 0208 	bic.w	r2, r2, #8
 800c604:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c60a:	223f      	movs	r2, #63	; 0x3f
 800c60c:	409a      	lsls	r2, r3
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2200      	movs	r2, #0
 800c616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2201      	movs	r2, #1
 800c61e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c626:	2b00      	cmp	r3, #0
 800c628:	d07d      	beq.n	800c726 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	4798      	blx	r3
        }
        return;
 800c632:	e078      	b.n	800c726 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d01c      	beq.n	800c67c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d108      	bne.n	800c662 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c654:	2b00      	cmp	r3, #0
 800c656:	d030      	beq.n	800c6ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	4798      	blx	r3
 800c660:	e02b      	b.n	800c6ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c666:	2b00      	cmp	r3, #0
 800c668:	d027      	beq.n	800c6ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	4798      	blx	r3
 800c672:	e022      	b.n	800c6ba <HAL_DMA_IRQHandler+0x29e>
 800c674:	20000000 	.word	0x20000000
 800c678:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c686:	2b00      	cmp	r3, #0
 800c688:	d10f      	bne.n	800c6aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	681a      	ldr	r2, [r3, #0]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f022 0210 	bic.w	r2, r2, #16
 800c698:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d003      	beq.n	800c6ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d032      	beq.n	800c728 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6c6:	f003 0301 	and.w	r3, r3, #1
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d022      	beq.n	800c714 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2205      	movs	r2, #5
 800c6d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f022 0201 	bic.w	r2, r2, #1
 800c6e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	60bb      	str	r3, [r7, #8]
 800c6ec:	697a      	ldr	r2, [r7, #20]
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	d307      	bcc.n	800c702 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f003 0301 	and.w	r3, r3, #1
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d1f2      	bne.n	800c6e6 <HAL_DMA_IRQHandler+0x2ca>
 800c700:	e000      	b.n	800c704 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800c702:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2200      	movs	r2, #0
 800c708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2201      	movs	r2, #1
 800c710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d005      	beq.n	800c728 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	4798      	blx	r3
 800c724:	e000      	b.n	800c728 <HAL_DMA_IRQHandler+0x30c>
        return;
 800c726:	bf00      	nop
    }
  }
}
 800c728:	3718      	adds	r7, #24
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
 800c72e:	bf00      	nop

0800c730 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	370c      	adds	r7, #12
 800c740:	46bd      	mov	sp, r7
 800c742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c746:	4770      	bx	lr

0800c748 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c748:	b480      	push	{r7}
 800c74a:	b085      	sub	sp, #20
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	60f8      	str	r0, [r7, #12]
 800c750:	60b9      	str	r1, [r7, #8]
 800c752:	607a      	str	r2, [r7, #4]
 800c754:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c764:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	683a      	ldr	r2, [r7, #0]
 800c76c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	689b      	ldr	r3, [r3, #8]
 800c772:	2b40      	cmp	r3, #64	; 0x40
 800c774:	d108      	bne.n	800c788 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	68ba      	ldr	r2, [r7, #8]
 800c784:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c786:	e007      	b.n	800c798 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	68ba      	ldr	r2, [r7, #8]
 800c78e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	60da      	str	r2, [r3, #12]
}
 800c798:	bf00      	nop
 800c79a:	3714      	adds	r7, #20
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr

0800c7a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b085      	sub	sp, #20
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	3b10      	subs	r3, #16
 800c7b4:	4a14      	ldr	r2, [pc, #80]	; (800c808 <DMA_CalcBaseAndBitshift+0x64>)
 800c7b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c7ba:	091b      	lsrs	r3, r3, #4
 800c7bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c7be:	4a13      	ldr	r2, [pc, #76]	; (800c80c <DMA_CalcBaseAndBitshift+0x68>)
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	4413      	add	r3, r2
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2b03      	cmp	r3, #3
 800c7d0:	d909      	bls.n	800c7e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c7da:	f023 0303 	bic.w	r3, r3, #3
 800c7de:	1d1a      	adds	r2, r3, #4
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	659a      	str	r2, [r3, #88]	; 0x58
 800c7e4:	e007      	b.n	800c7f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c7ee:	f023 0303 	bic.w	r3, r3, #3
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3714      	adds	r7, #20
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr
 800c806:	bf00      	nop
 800c808:	aaaaaaab 	.word	0xaaaaaaab
 800c80c:	0801abdc 	.word	0x0801abdc

0800c810 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c810:	b480      	push	{r7}
 800c812:	b085      	sub	sp, #20
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c818:	2300      	movs	r3, #0
 800c81a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c820:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	699b      	ldr	r3, [r3, #24]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d11f      	bne.n	800c86a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	2b03      	cmp	r3, #3
 800c82e:	d855      	bhi.n	800c8dc <DMA_CheckFifoParam+0xcc>
 800c830:	a201      	add	r2, pc, #4	; (adr r2, 800c838 <DMA_CheckFifoParam+0x28>)
 800c832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c836:	bf00      	nop
 800c838:	0800c849 	.word	0x0800c849
 800c83c:	0800c85b 	.word	0x0800c85b
 800c840:	0800c849 	.word	0x0800c849
 800c844:	0800c8dd 	.word	0x0800c8dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c84c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c850:	2b00      	cmp	r3, #0
 800c852:	d045      	beq.n	800c8e0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800c854:	2301      	movs	r3, #1
 800c856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c858:	e042      	b.n	800c8e0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c85e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c862:	d13f      	bne.n	800c8e4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800c864:	2301      	movs	r3, #1
 800c866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c868:	e03c      	b.n	800c8e4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	699b      	ldr	r3, [r3, #24]
 800c86e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c872:	d121      	bne.n	800c8b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	2b03      	cmp	r3, #3
 800c878:	d836      	bhi.n	800c8e8 <DMA_CheckFifoParam+0xd8>
 800c87a:	a201      	add	r2, pc, #4	; (adr r2, 800c880 <DMA_CheckFifoParam+0x70>)
 800c87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c880:	0800c891 	.word	0x0800c891
 800c884:	0800c897 	.word	0x0800c897
 800c888:	0800c891 	.word	0x0800c891
 800c88c:	0800c8a9 	.word	0x0800c8a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c890:	2301      	movs	r3, #1
 800c892:	73fb      	strb	r3, [r7, #15]
      break;
 800c894:	e02f      	b.n	800c8f6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c89a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d024      	beq.n	800c8ec <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c8a6:	e021      	b.n	800c8ec <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c8b0:	d11e      	bne.n	800c8f0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c8b6:	e01b      	b.n	800c8f0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	2b02      	cmp	r3, #2
 800c8bc:	d902      	bls.n	800c8c4 <DMA_CheckFifoParam+0xb4>
 800c8be:	2b03      	cmp	r3, #3
 800c8c0:	d003      	beq.n	800c8ca <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c8c2:	e018      	b.n	800c8f6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	73fb      	strb	r3, [r7, #15]
      break;
 800c8c8:	e015      	b.n	800c8f6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d00e      	beq.n	800c8f4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	73fb      	strb	r3, [r7, #15]
      break;
 800c8da:	e00b      	b.n	800c8f4 <DMA_CheckFifoParam+0xe4>
      break;
 800c8dc:	bf00      	nop
 800c8de:	e00a      	b.n	800c8f6 <DMA_CheckFifoParam+0xe6>
      break;
 800c8e0:	bf00      	nop
 800c8e2:	e008      	b.n	800c8f6 <DMA_CheckFifoParam+0xe6>
      break;
 800c8e4:	bf00      	nop
 800c8e6:	e006      	b.n	800c8f6 <DMA_CheckFifoParam+0xe6>
      break;
 800c8e8:	bf00      	nop
 800c8ea:	e004      	b.n	800c8f6 <DMA_CheckFifoParam+0xe6>
      break;
 800c8ec:	bf00      	nop
 800c8ee:	e002      	b.n	800c8f6 <DMA_CheckFifoParam+0xe6>
      break;   
 800c8f0:	bf00      	nop
 800c8f2:	e000      	b.n	800c8f6 <DMA_CheckFifoParam+0xe6>
      break;
 800c8f4:	bf00      	nop
    }
  } 
  
  return status; 
 800c8f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3714      	adds	r7, #20
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c904:	b480      	push	{r7}
 800c906:	b089      	sub	sp, #36	; 0x24
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c90e:	2300      	movs	r3, #0
 800c910:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c912:	2300      	movs	r3, #0
 800c914:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c916:	2300      	movs	r3, #0
 800c918:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c91a:	2300      	movs	r3, #0
 800c91c:	61fb      	str	r3, [r7, #28]
 800c91e:	e177      	b.n	800cc10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c920:	2201      	movs	r2, #1
 800c922:	69fb      	ldr	r3, [r7, #28]
 800c924:	fa02 f303 	lsl.w	r3, r2, r3
 800c928:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	697a      	ldr	r2, [r7, #20]
 800c930:	4013      	ands	r3, r2
 800c932:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c934:	693a      	ldr	r2, [r7, #16]
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	429a      	cmp	r2, r3
 800c93a:	f040 8166 	bne.w	800cc0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	2b01      	cmp	r3, #1
 800c944:	d00b      	beq.n	800c95e <HAL_GPIO_Init+0x5a>
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	2b02      	cmp	r3, #2
 800c94c:	d007      	beq.n	800c95e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c952:	2b11      	cmp	r3, #17
 800c954:	d003      	beq.n	800c95e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	2b12      	cmp	r3, #18
 800c95c:	d130      	bne.n	800c9c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c964:	69fb      	ldr	r3, [r7, #28]
 800c966:	005b      	lsls	r3, r3, #1
 800c968:	2203      	movs	r2, #3
 800c96a:	fa02 f303 	lsl.w	r3, r2, r3
 800c96e:	43db      	mvns	r3, r3
 800c970:	69ba      	ldr	r2, [r7, #24]
 800c972:	4013      	ands	r3, r2
 800c974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	68da      	ldr	r2, [r3, #12]
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	005b      	lsls	r3, r3, #1
 800c97e:	fa02 f303 	lsl.w	r3, r2, r3
 800c982:	69ba      	ldr	r2, [r7, #24]
 800c984:	4313      	orrs	r3, r2
 800c986:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	69ba      	ldr	r2, [r7, #24]
 800c98c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	685b      	ldr	r3, [r3, #4]
 800c992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c994:	2201      	movs	r2, #1
 800c996:	69fb      	ldr	r3, [r7, #28]
 800c998:	fa02 f303 	lsl.w	r3, r2, r3
 800c99c:	43db      	mvns	r3, r3
 800c99e:	69ba      	ldr	r2, [r7, #24]
 800c9a0:	4013      	ands	r3, r2
 800c9a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	685b      	ldr	r3, [r3, #4]
 800c9a8:	091b      	lsrs	r3, r3, #4
 800c9aa:	f003 0201 	and.w	r2, r3, #1
 800c9ae:	69fb      	ldr	r3, [r7, #28]
 800c9b0:	fa02 f303 	lsl.w	r3, r2, r3
 800c9b4:	69ba      	ldr	r2, [r7, #24]
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	69ba      	ldr	r2, [r7, #24]
 800c9be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	68db      	ldr	r3, [r3, #12]
 800c9c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	005b      	lsls	r3, r3, #1
 800c9ca:	2203      	movs	r2, #3
 800c9cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c9d0:	43db      	mvns	r3, r3
 800c9d2:	69ba      	ldr	r2, [r7, #24]
 800c9d4:	4013      	ands	r3, r2
 800c9d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	689a      	ldr	r2, [r3, #8]
 800c9dc:	69fb      	ldr	r3, [r7, #28]
 800c9de:	005b      	lsls	r3, r3, #1
 800c9e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c9e4:	69ba      	ldr	r2, [r7, #24]
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	69ba      	ldr	r2, [r7, #24]
 800c9ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	2b02      	cmp	r3, #2
 800c9f6:	d003      	beq.n	800ca00 <HAL_GPIO_Init+0xfc>
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	2b12      	cmp	r3, #18
 800c9fe:	d123      	bne.n	800ca48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ca00:	69fb      	ldr	r3, [r7, #28]
 800ca02:	08da      	lsrs	r2, r3, #3
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	3208      	adds	r2, #8
 800ca08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ca0e:	69fb      	ldr	r3, [r7, #28]
 800ca10:	f003 0307 	and.w	r3, r3, #7
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	220f      	movs	r2, #15
 800ca18:	fa02 f303 	lsl.w	r3, r2, r3
 800ca1c:	43db      	mvns	r3, r3
 800ca1e:	69ba      	ldr	r2, [r7, #24]
 800ca20:	4013      	ands	r3, r2
 800ca22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	691a      	ldr	r2, [r3, #16]
 800ca28:	69fb      	ldr	r3, [r7, #28]
 800ca2a:	f003 0307 	and.w	r3, r3, #7
 800ca2e:	009b      	lsls	r3, r3, #2
 800ca30:	fa02 f303 	lsl.w	r3, r2, r3
 800ca34:	69ba      	ldr	r2, [r7, #24]
 800ca36:	4313      	orrs	r3, r2
 800ca38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ca3a:	69fb      	ldr	r3, [r7, #28]
 800ca3c:	08da      	lsrs	r2, r3, #3
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	3208      	adds	r2, #8
 800ca42:	69b9      	ldr	r1, [r7, #24]
 800ca44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ca4e:	69fb      	ldr	r3, [r7, #28]
 800ca50:	005b      	lsls	r3, r3, #1
 800ca52:	2203      	movs	r2, #3
 800ca54:	fa02 f303 	lsl.w	r3, r2, r3
 800ca58:	43db      	mvns	r3, r3
 800ca5a:	69ba      	ldr	r2, [r7, #24]
 800ca5c:	4013      	ands	r3, r2
 800ca5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	685b      	ldr	r3, [r3, #4]
 800ca64:	f003 0203 	and.w	r2, r3, #3
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	005b      	lsls	r3, r3, #1
 800ca6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ca70:	69ba      	ldr	r2, [r7, #24]
 800ca72:	4313      	orrs	r3, r2
 800ca74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	69ba      	ldr	r2, [r7, #24]
 800ca7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	f000 80c0 	beq.w	800cc0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	60fb      	str	r3, [r7, #12]
 800ca8e:	4b65      	ldr	r3, [pc, #404]	; (800cc24 <HAL_GPIO_Init+0x320>)
 800ca90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca92:	4a64      	ldr	r2, [pc, #400]	; (800cc24 <HAL_GPIO_Init+0x320>)
 800ca94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ca98:	6453      	str	r3, [r2, #68]	; 0x44
 800ca9a:	4b62      	ldr	r3, [pc, #392]	; (800cc24 <HAL_GPIO_Init+0x320>)
 800ca9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800caa2:	60fb      	str	r3, [r7, #12]
 800caa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800caa6:	4a60      	ldr	r2, [pc, #384]	; (800cc28 <HAL_GPIO_Init+0x324>)
 800caa8:	69fb      	ldr	r3, [r7, #28]
 800caaa:	089b      	lsrs	r3, r3, #2
 800caac:	3302      	adds	r3, #2
 800caae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800cab4:	69fb      	ldr	r3, [r7, #28]
 800cab6:	f003 0303 	and.w	r3, r3, #3
 800caba:	009b      	lsls	r3, r3, #2
 800cabc:	220f      	movs	r2, #15
 800cabe:	fa02 f303 	lsl.w	r3, r2, r3
 800cac2:	43db      	mvns	r3, r3
 800cac4:	69ba      	ldr	r2, [r7, #24]
 800cac6:	4013      	ands	r3, r2
 800cac8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	4a57      	ldr	r2, [pc, #348]	; (800cc2c <HAL_GPIO_Init+0x328>)
 800cace:	4293      	cmp	r3, r2
 800cad0:	d037      	beq.n	800cb42 <HAL_GPIO_Init+0x23e>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	4a56      	ldr	r2, [pc, #344]	; (800cc30 <HAL_GPIO_Init+0x32c>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d031      	beq.n	800cb3e <HAL_GPIO_Init+0x23a>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	4a55      	ldr	r2, [pc, #340]	; (800cc34 <HAL_GPIO_Init+0x330>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d02b      	beq.n	800cb3a <HAL_GPIO_Init+0x236>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	4a54      	ldr	r2, [pc, #336]	; (800cc38 <HAL_GPIO_Init+0x334>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d025      	beq.n	800cb36 <HAL_GPIO_Init+0x232>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	4a53      	ldr	r2, [pc, #332]	; (800cc3c <HAL_GPIO_Init+0x338>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d01f      	beq.n	800cb32 <HAL_GPIO_Init+0x22e>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	4a52      	ldr	r2, [pc, #328]	; (800cc40 <HAL_GPIO_Init+0x33c>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d019      	beq.n	800cb2e <HAL_GPIO_Init+0x22a>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	4a51      	ldr	r2, [pc, #324]	; (800cc44 <HAL_GPIO_Init+0x340>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d013      	beq.n	800cb2a <HAL_GPIO_Init+0x226>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	4a50      	ldr	r2, [pc, #320]	; (800cc48 <HAL_GPIO_Init+0x344>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d00d      	beq.n	800cb26 <HAL_GPIO_Init+0x222>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4a4f      	ldr	r2, [pc, #316]	; (800cc4c <HAL_GPIO_Init+0x348>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d007      	beq.n	800cb22 <HAL_GPIO_Init+0x21e>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	4a4e      	ldr	r2, [pc, #312]	; (800cc50 <HAL_GPIO_Init+0x34c>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d101      	bne.n	800cb1e <HAL_GPIO_Init+0x21a>
 800cb1a:	2309      	movs	r3, #9
 800cb1c:	e012      	b.n	800cb44 <HAL_GPIO_Init+0x240>
 800cb1e:	230a      	movs	r3, #10
 800cb20:	e010      	b.n	800cb44 <HAL_GPIO_Init+0x240>
 800cb22:	2308      	movs	r3, #8
 800cb24:	e00e      	b.n	800cb44 <HAL_GPIO_Init+0x240>
 800cb26:	2307      	movs	r3, #7
 800cb28:	e00c      	b.n	800cb44 <HAL_GPIO_Init+0x240>
 800cb2a:	2306      	movs	r3, #6
 800cb2c:	e00a      	b.n	800cb44 <HAL_GPIO_Init+0x240>
 800cb2e:	2305      	movs	r3, #5
 800cb30:	e008      	b.n	800cb44 <HAL_GPIO_Init+0x240>
 800cb32:	2304      	movs	r3, #4
 800cb34:	e006      	b.n	800cb44 <HAL_GPIO_Init+0x240>
 800cb36:	2303      	movs	r3, #3
 800cb38:	e004      	b.n	800cb44 <HAL_GPIO_Init+0x240>
 800cb3a:	2302      	movs	r3, #2
 800cb3c:	e002      	b.n	800cb44 <HAL_GPIO_Init+0x240>
 800cb3e:	2301      	movs	r3, #1
 800cb40:	e000      	b.n	800cb44 <HAL_GPIO_Init+0x240>
 800cb42:	2300      	movs	r3, #0
 800cb44:	69fa      	ldr	r2, [r7, #28]
 800cb46:	f002 0203 	and.w	r2, r2, #3
 800cb4a:	0092      	lsls	r2, r2, #2
 800cb4c:	4093      	lsls	r3, r2
 800cb4e:	69ba      	ldr	r2, [r7, #24]
 800cb50:	4313      	orrs	r3, r2
 800cb52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cb54:	4934      	ldr	r1, [pc, #208]	; (800cc28 <HAL_GPIO_Init+0x324>)
 800cb56:	69fb      	ldr	r3, [r7, #28]
 800cb58:	089b      	lsrs	r3, r3, #2
 800cb5a:	3302      	adds	r3, #2
 800cb5c:	69ba      	ldr	r2, [r7, #24]
 800cb5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800cb62:	4b3c      	ldr	r3, [pc, #240]	; (800cc54 <HAL_GPIO_Init+0x350>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	43db      	mvns	r3, r3
 800cb6c:	69ba      	ldr	r2, [r7, #24]
 800cb6e:	4013      	ands	r3, r2
 800cb70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	685b      	ldr	r3, [r3, #4]
 800cb76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d003      	beq.n	800cb86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800cb7e:	69ba      	ldr	r2, [r7, #24]
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	4313      	orrs	r3, r2
 800cb84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800cb86:	4a33      	ldr	r2, [pc, #204]	; (800cc54 <HAL_GPIO_Init+0x350>)
 800cb88:	69bb      	ldr	r3, [r7, #24]
 800cb8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800cb8c:	4b31      	ldr	r3, [pc, #196]	; (800cc54 <HAL_GPIO_Init+0x350>)
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	43db      	mvns	r3, r3
 800cb96:	69ba      	ldr	r2, [r7, #24]
 800cb98:	4013      	ands	r3, r2
 800cb9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d003      	beq.n	800cbb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800cba8:	69ba      	ldr	r2, [r7, #24]
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	4313      	orrs	r3, r2
 800cbae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800cbb0:	4a28      	ldr	r2, [pc, #160]	; (800cc54 <HAL_GPIO_Init+0x350>)
 800cbb2:	69bb      	ldr	r3, [r7, #24]
 800cbb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cbb6:	4b27      	ldr	r3, [pc, #156]	; (800cc54 <HAL_GPIO_Init+0x350>)
 800cbb8:	689b      	ldr	r3, [r3, #8]
 800cbba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	43db      	mvns	r3, r3
 800cbc0:	69ba      	ldr	r2, [r7, #24]
 800cbc2:	4013      	ands	r3, r2
 800cbc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d003      	beq.n	800cbda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800cbd2:	69ba      	ldr	r2, [r7, #24]
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800cbda:	4a1e      	ldr	r2, [pc, #120]	; (800cc54 <HAL_GPIO_Init+0x350>)
 800cbdc:	69bb      	ldr	r3, [r7, #24]
 800cbde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800cbe0:	4b1c      	ldr	r3, [pc, #112]	; (800cc54 <HAL_GPIO_Init+0x350>)
 800cbe2:	68db      	ldr	r3, [r3, #12]
 800cbe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	43db      	mvns	r3, r3
 800cbea:	69ba      	ldr	r2, [r7, #24]
 800cbec:	4013      	ands	r3, r2
 800cbee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	685b      	ldr	r3, [r3, #4]
 800cbf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d003      	beq.n	800cc04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800cbfc:	69ba      	ldr	r2, [r7, #24]
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	4313      	orrs	r3, r2
 800cc02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800cc04:	4a13      	ldr	r2, [pc, #76]	; (800cc54 <HAL_GPIO_Init+0x350>)
 800cc06:	69bb      	ldr	r3, [r7, #24]
 800cc08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cc0a:	69fb      	ldr	r3, [r7, #28]
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	61fb      	str	r3, [r7, #28]
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	2b0f      	cmp	r3, #15
 800cc14:	f67f ae84 	bls.w	800c920 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800cc18:	bf00      	nop
 800cc1a:	3724      	adds	r7, #36	; 0x24
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr
 800cc24:	40023800 	.word	0x40023800
 800cc28:	40013800 	.word	0x40013800
 800cc2c:	40020000 	.word	0x40020000
 800cc30:	40020400 	.word	0x40020400
 800cc34:	40020800 	.word	0x40020800
 800cc38:	40020c00 	.word	0x40020c00
 800cc3c:	40021000 	.word	0x40021000
 800cc40:	40021400 	.word	0x40021400
 800cc44:	40021800 	.word	0x40021800
 800cc48:	40021c00 	.word	0x40021c00
 800cc4c:	40022000 	.word	0x40022000
 800cc50:	40022400 	.word	0x40022400
 800cc54:	40013c00 	.word	0x40013c00

0800cc58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b085      	sub	sp, #20
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	460b      	mov	r3, r1
 800cc62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	691a      	ldr	r2, [r3, #16]
 800cc68:	887b      	ldrh	r3, [r7, #2]
 800cc6a:	4013      	ands	r3, r2
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d002      	beq.n	800cc76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800cc70:	2301      	movs	r3, #1
 800cc72:	73fb      	strb	r3, [r7, #15]
 800cc74:	e001      	b.n	800cc7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800cc76:	2300      	movs	r3, #0
 800cc78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800cc7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3714      	adds	r7, #20
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr

0800cc88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b083      	sub	sp, #12
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	460b      	mov	r3, r1
 800cc92:	807b      	strh	r3, [r7, #2]
 800cc94:	4613      	mov	r3, r2
 800cc96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800cc98:	787b      	ldrb	r3, [r7, #1]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d003      	beq.n	800cca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cc9e:	887a      	ldrh	r2, [r7, #2]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800cca4:	e003      	b.n	800ccae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800cca6:	887b      	ldrh	r3, [r7, #2]
 800cca8:	041a      	lsls	r2, r3, #16
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	619a      	str	r2, [r3, #24]
}
 800ccae:	bf00      	nop
 800ccb0:	370c      	adds	r7, #12
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb8:	4770      	bx	lr
	...

0800ccbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b082      	sub	sp, #8
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800ccc6:	4b08      	ldr	r3, [pc, #32]	; (800cce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ccc8:	695a      	ldr	r2, [r3, #20]
 800ccca:	88fb      	ldrh	r3, [r7, #6]
 800cccc:	4013      	ands	r3, r2
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d006      	beq.n	800cce0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ccd2:	4a05      	ldr	r2, [pc, #20]	; (800cce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ccd4:	88fb      	ldrh	r3, [r7, #6]
 800ccd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ccd8:	88fb      	ldrh	r3, [r7, #6]
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7f9 fbfb 	bl	80064d6 <HAL_GPIO_EXTI_Callback>
  }
}
 800cce0:	bf00      	nop
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	40013c00 	.word	0x40013c00

0800ccec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d101      	bne.n	800ccfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	e11f      	b.n	800cf3e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d106      	bne.n	800cd18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f7fa fd72 	bl	80077fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2224      	movs	r2, #36	; 0x24
 800cd1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	681a      	ldr	r2, [r3, #0]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f022 0201 	bic.w	r2, r2, #1
 800cd2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	681a      	ldr	r2, [r3, #0]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cd3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	681a      	ldr	r2, [r3, #0]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cd4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800cd50:	f001 f96e 	bl	800e030 <HAL_RCC_GetPCLK1Freq>
 800cd54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	4a7b      	ldr	r2, [pc, #492]	; (800cf48 <HAL_I2C_Init+0x25c>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d807      	bhi.n	800cd70 <HAL_I2C_Init+0x84>
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	4a7a      	ldr	r2, [pc, #488]	; (800cf4c <HAL_I2C_Init+0x260>)
 800cd64:	4293      	cmp	r3, r2
 800cd66:	bf94      	ite	ls
 800cd68:	2301      	movls	r3, #1
 800cd6a:	2300      	movhi	r3, #0
 800cd6c:	b2db      	uxtb	r3, r3
 800cd6e:	e006      	b.n	800cd7e <HAL_I2C_Init+0x92>
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	4a77      	ldr	r2, [pc, #476]	; (800cf50 <HAL_I2C_Init+0x264>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	bf94      	ite	ls
 800cd78:	2301      	movls	r3, #1
 800cd7a:	2300      	movhi	r3, #0
 800cd7c:	b2db      	uxtb	r3, r3
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d001      	beq.n	800cd86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800cd82:	2301      	movs	r3, #1
 800cd84:	e0db      	b.n	800cf3e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	4a72      	ldr	r2, [pc, #456]	; (800cf54 <HAL_I2C_Init+0x268>)
 800cd8a:	fba2 2303 	umull	r2, r3, r2, r3
 800cd8e:	0c9b      	lsrs	r3, r3, #18
 800cd90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	685b      	ldr	r3, [r3, #4]
 800cd98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	68ba      	ldr	r2, [r7, #8]
 800cda2:	430a      	orrs	r2, r1
 800cda4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	6a1b      	ldr	r3, [r3, #32]
 800cdac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	4a64      	ldr	r2, [pc, #400]	; (800cf48 <HAL_I2C_Init+0x25c>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d802      	bhi.n	800cdc0 <HAL_I2C_Init+0xd4>
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	e009      	b.n	800cdd4 <HAL_I2C_Init+0xe8>
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800cdc6:	fb02 f303 	mul.w	r3, r2, r3
 800cdca:	4a63      	ldr	r2, [pc, #396]	; (800cf58 <HAL_I2C_Init+0x26c>)
 800cdcc:	fba2 2303 	umull	r2, r3, r2, r3
 800cdd0:	099b      	lsrs	r3, r3, #6
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	687a      	ldr	r2, [r7, #4]
 800cdd6:	6812      	ldr	r2, [r2, #0]
 800cdd8:	430b      	orrs	r3, r1
 800cdda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	69db      	ldr	r3, [r3, #28]
 800cde2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800cde6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	4956      	ldr	r1, [pc, #344]	; (800cf48 <HAL_I2C_Init+0x25c>)
 800cdf0:	428b      	cmp	r3, r1
 800cdf2:	d80d      	bhi.n	800ce10 <HAL_I2C_Init+0x124>
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	1e59      	subs	r1, r3, #1
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	685b      	ldr	r3, [r3, #4]
 800cdfc:	005b      	lsls	r3, r3, #1
 800cdfe:	fbb1 f3f3 	udiv	r3, r1, r3
 800ce02:	3301      	adds	r3, #1
 800ce04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce08:	2b04      	cmp	r3, #4
 800ce0a:	bf38      	it	cc
 800ce0c:	2304      	movcc	r3, #4
 800ce0e:	e04f      	b.n	800ceb0 <HAL_I2C_Init+0x1c4>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	689b      	ldr	r3, [r3, #8]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d111      	bne.n	800ce3c <HAL_I2C_Init+0x150>
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	1e58      	subs	r0, r3, #1
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6859      	ldr	r1, [r3, #4]
 800ce20:	460b      	mov	r3, r1
 800ce22:	005b      	lsls	r3, r3, #1
 800ce24:	440b      	add	r3, r1
 800ce26:	fbb0 f3f3 	udiv	r3, r0, r3
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	bf0c      	ite	eq
 800ce34:	2301      	moveq	r3, #1
 800ce36:	2300      	movne	r3, #0
 800ce38:	b2db      	uxtb	r3, r3
 800ce3a:	e012      	b.n	800ce62 <HAL_I2C_Init+0x176>
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	1e58      	subs	r0, r3, #1
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6859      	ldr	r1, [r3, #4]
 800ce44:	460b      	mov	r3, r1
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	440b      	add	r3, r1
 800ce4a:	0099      	lsls	r1, r3, #2
 800ce4c:	440b      	add	r3, r1
 800ce4e:	fbb0 f3f3 	udiv	r3, r0, r3
 800ce52:	3301      	adds	r3, #1
 800ce54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	bf0c      	ite	eq
 800ce5c:	2301      	moveq	r3, #1
 800ce5e:	2300      	movne	r3, #0
 800ce60:	b2db      	uxtb	r3, r3
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d001      	beq.n	800ce6a <HAL_I2C_Init+0x17e>
 800ce66:	2301      	movs	r3, #1
 800ce68:	e022      	b.n	800ceb0 <HAL_I2C_Init+0x1c4>
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	689b      	ldr	r3, [r3, #8]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d10e      	bne.n	800ce90 <HAL_I2C_Init+0x1a4>
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	1e58      	subs	r0, r3, #1
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6859      	ldr	r1, [r3, #4]
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	005b      	lsls	r3, r3, #1
 800ce7e:	440b      	add	r3, r1
 800ce80:	fbb0 f3f3 	udiv	r3, r0, r3
 800ce84:	3301      	adds	r3, #1
 800ce86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce8e:	e00f      	b.n	800ceb0 <HAL_I2C_Init+0x1c4>
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	1e58      	subs	r0, r3, #1
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6859      	ldr	r1, [r3, #4]
 800ce98:	460b      	mov	r3, r1
 800ce9a:	009b      	lsls	r3, r3, #2
 800ce9c:	440b      	add	r3, r1
 800ce9e:	0099      	lsls	r1, r3, #2
 800cea0:	440b      	add	r3, r1
 800cea2:	fbb0 f3f3 	udiv	r3, r0, r3
 800cea6:	3301      	adds	r3, #1
 800cea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ceac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ceb0:	6879      	ldr	r1, [r7, #4]
 800ceb2:	6809      	ldr	r1, [r1, #0]
 800ceb4:	4313      	orrs	r3, r2
 800ceb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	69da      	ldr	r2, [r3, #28]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6a1b      	ldr	r3, [r3, #32]
 800ceca:	431a      	orrs	r2, r3
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	430a      	orrs	r2, r1
 800ced2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800cede:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cee2:	687a      	ldr	r2, [r7, #4]
 800cee4:	6911      	ldr	r1, [r2, #16]
 800cee6:	687a      	ldr	r2, [r7, #4]
 800cee8:	68d2      	ldr	r2, [r2, #12]
 800ceea:	4311      	orrs	r1, r2
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	6812      	ldr	r2, [r2, #0]
 800cef0:	430b      	orrs	r3, r1
 800cef2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	68db      	ldr	r3, [r3, #12]
 800cefa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	695a      	ldr	r2, [r3, #20]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	699b      	ldr	r3, [r3, #24]
 800cf06:	431a      	orrs	r2, r3
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	430a      	orrs	r2, r1
 800cf0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	681a      	ldr	r2, [r3, #0]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f042 0201 	orr.w	r2, r2, #1
 800cf1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2200      	movs	r2, #0
 800cf24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2220      	movs	r2, #32
 800cf2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2200      	movs	r2, #0
 800cf32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2200      	movs	r2, #0
 800cf38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800cf3c:	2300      	movs	r3, #0
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3710      	adds	r7, #16
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	000186a0 	.word	0x000186a0
 800cf4c:	001e847f 	.word	0x001e847f
 800cf50:	003d08ff 	.word	0x003d08ff
 800cf54:	431bde83 	.word	0x431bde83
 800cf58:	10624dd3 	.word	0x10624dd3

0800cf5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b088      	sub	sp, #32
 800cf60:	af02      	add	r7, sp, #8
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	607a      	str	r2, [r7, #4]
 800cf66:	461a      	mov	r2, r3
 800cf68:	460b      	mov	r3, r1
 800cf6a:	817b      	strh	r3, [r7, #10]
 800cf6c:	4613      	mov	r3, r2
 800cf6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800cf70:	f7fe fbe8 	bl	800b744 <HAL_GetTick>
 800cf74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf7c:	b2db      	uxtb	r3, r3
 800cf7e:	2b20      	cmp	r3, #32
 800cf80:	f040 80e0 	bne.w	800d144 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	9300      	str	r3, [sp, #0]
 800cf88:	2319      	movs	r3, #25
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	4970      	ldr	r1, [pc, #448]	; (800d150 <HAL_I2C_Master_Transmit+0x1f4>)
 800cf8e:	68f8      	ldr	r0, [r7, #12]
 800cf90:	f000 fc58 	bl	800d844 <I2C_WaitOnFlagUntilTimeout>
 800cf94:	4603      	mov	r3, r0
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d001      	beq.n	800cf9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800cf9a:	2302      	movs	r3, #2
 800cf9c:	e0d3      	b.n	800d146 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d101      	bne.n	800cfac <HAL_I2C_Master_Transmit+0x50>
 800cfa8:	2302      	movs	r3, #2
 800cfaa:	e0cc      	b.n	800d146 <HAL_I2C_Master_Transmit+0x1ea>
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2201      	movs	r2, #1
 800cfb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f003 0301 	and.w	r3, r3, #1
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d007      	beq.n	800cfd2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	681a      	ldr	r2, [r3, #0]
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f042 0201 	orr.w	r2, r2, #1
 800cfd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	681a      	ldr	r2, [r3, #0]
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cfe0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2221      	movs	r2, #33	; 0x21
 800cfe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2210      	movs	r2, #16
 800cfee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	2200      	movs	r2, #0
 800cff6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	687a      	ldr	r2, [r7, #4]
 800cffc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	893a      	ldrh	r2, [r7, #8]
 800d002:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d008:	b29a      	uxth	r2, r3
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	4a50      	ldr	r2, [pc, #320]	; (800d154 <HAL_I2C_Master_Transmit+0x1f8>)
 800d012:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d014:	8979      	ldrh	r1, [r7, #10]
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	6a3a      	ldr	r2, [r7, #32]
 800d01a:	68f8      	ldr	r0, [r7, #12]
 800d01c:	f000 fac2 	bl	800d5a4 <I2C_MasterRequestWrite>
 800d020:	4603      	mov	r3, r0
 800d022:	2b00      	cmp	r3, #0
 800d024:	d001      	beq.n	800d02a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800d026:	2301      	movs	r3, #1
 800d028:	e08d      	b.n	800d146 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d02a:	2300      	movs	r3, #0
 800d02c:	613b      	str	r3, [r7, #16]
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	695b      	ldr	r3, [r3, #20]
 800d034:	613b      	str	r3, [r7, #16]
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	699b      	ldr	r3, [r3, #24]
 800d03c:	613b      	str	r3, [r7, #16]
 800d03e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800d040:	e066      	b.n	800d110 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d042:	697a      	ldr	r2, [r7, #20]
 800d044:	6a39      	ldr	r1, [r7, #32]
 800d046:	68f8      	ldr	r0, [r7, #12]
 800d048:	f000 fcd2 	bl	800d9f0 <I2C_WaitOnTXEFlagUntilTimeout>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d00d      	beq.n	800d06e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d056:	2b04      	cmp	r3, #4
 800d058:	d107      	bne.n	800d06a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	681a      	ldr	r2, [r3, #0]
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d068:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d06a:	2301      	movs	r3, #1
 800d06c:	e06b      	b.n	800d146 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d072:	781a      	ldrb	r2, [r3, #0]
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d07e:	1c5a      	adds	r2, r3, #1
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d088:	b29b      	uxth	r3, r3
 800d08a:	3b01      	subs	r3, #1
 800d08c:	b29a      	uxth	r2, r3
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d096:	3b01      	subs	r3, #1
 800d098:	b29a      	uxth	r2, r3
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	695b      	ldr	r3, [r3, #20]
 800d0a4:	f003 0304 	and.w	r3, r3, #4
 800d0a8:	2b04      	cmp	r3, #4
 800d0aa:	d11b      	bne.n	800d0e4 <HAL_I2C_Master_Transmit+0x188>
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d017      	beq.n	800d0e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0b8:	781a      	ldrb	r2, [r3, #0]
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c4:	1c5a      	adds	r2, r3, #1
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0ce:	b29b      	uxth	r3, r3
 800d0d0:	3b01      	subs	r3, #1
 800d0d2:	b29a      	uxth	r2, r3
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0dc:	3b01      	subs	r3, #1
 800d0de:	b29a      	uxth	r2, r3
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d0e4:	697a      	ldr	r2, [r7, #20]
 800d0e6:	6a39      	ldr	r1, [r7, #32]
 800d0e8:	68f8      	ldr	r0, [r7, #12]
 800d0ea:	f000 fcc2 	bl	800da72 <I2C_WaitOnBTFFlagUntilTimeout>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d00d      	beq.n	800d110 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0f8:	2b04      	cmp	r3, #4
 800d0fa:	d107      	bne.n	800d10c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	681a      	ldr	r2, [r3, #0]
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d10a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d10c:	2301      	movs	r3, #1
 800d10e:	e01a      	b.n	800d146 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d114:	2b00      	cmp	r3, #0
 800d116:	d194      	bne.n	800d042 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	681a      	ldr	r2, [r3, #0]
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d126:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	2220      	movs	r2, #32
 800d12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2200      	movs	r2, #0
 800d134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2200      	movs	r2, #0
 800d13c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d140:	2300      	movs	r3, #0
 800d142:	e000      	b.n	800d146 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800d144:	2302      	movs	r3, #2
  }
}
 800d146:	4618      	mov	r0, r3
 800d148:	3718      	adds	r7, #24
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	bf00      	nop
 800d150:	00100002 	.word	0x00100002
 800d154:	ffff0000 	.word	0xffff0000

0800d158 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b08c      	sub	sp, #48	; 0x30
 800d15c:	af02      	add	r7, sp, #8
 800d15e:	60f8      	str	r0, [r7, #12]
 800d160:	607a      	str	r2, [r7, #4]
 800d162:	461a      	mov	r2, r3
 800d164:	460b      	mov	r3, r1
 800d166:	817b      	strh	r3, [r7, #10]
 800d168:	4613      	mov	r3, r2
 800d16a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d16c:	f7fe faea 	bl	800b744 <HAL_GetTick>
 800d170:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d178:	b2db      	uxtb	r3, r3
 800d17a:	2b20      	cmp	r3, #32
 800d17c:	f040 820b 	bne.w	800d596 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d182:	9300      	str	r3, [sp, #0]
 800d184:	2319      	movs	r3, #25
 800d186:	2201      	movs	r2, #1
 800d188:	497c      	ldr	r1, [pc, #496]	; (800d37c <HAL_I2C_Master_Receive+0x224>)
 800d18a:	68f8      	ldr	r0, [r7, #12]
 800d18c:	f000 fb5a 	bl	800d844 <I2C_WaitOnFlagUntilTimeout>
 800d190:	4603      	mov	r3, r0
 800d192:	2b00      	cmp	r3, #0
 800d194:	d001      	beq.n	800d19a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800d196:	2302      	movs	r3, #2
 800d198:	e1fe      	b.n	800d598 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d101      	bne.n	800d1a8 <HAL_I2C_Master_Receive+0x50>
 800d1a4:	2302      	movs	r3, #2
 800d1a6:	e1f7      	b.n	800d598 <HAL_I2C_Master_Receive+0x440>
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f003 0301 	and.w	r3, r3, #1
 800d1ba:	2b01      	cmp	r3, #1
 800d1bc:	d007      	beq.n	800d1ce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	681a      	ldr	r2, [r3, #0]
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f042 0201 	orr.w	r2, r2, #1
 800d1cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	681a      	ldr	r2, [r3, #0]
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d1dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2222      	movs	r2, #34	; 0x22
 800d1e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2210      	movs	r2, #16
 800d1ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	687a      	ldr	r2, [r7, #4]
 800d1f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	893a      	ldrh	r2, [r7, #8]
 800d1fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d204:	b29a      	uxth	r2, r3
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	4a5c      	ldr	r2, [pc, #368]	; (800d380 <HAL_I2C_Master_Receive+0x228>)
 800d20e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d210:	8979      	ldrh	r1, [r7, #10]
 800d212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d216:	68f8      	ldr	r0, [r7, #12]
 800d218:	f000 fa46 	bl	800d6a8 <I2C_MasterRequestRead>
 800d21c:	4603      	mov	r3, r0
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d001      	beq.n	800d226 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800d222:	2301      	movs	r3, #1
 800d224:	e1b8      	b.n	800d598 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d113      	bne.n	800d256 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d22e:	2300      	movs	r3, #0
 800d230:	623b      	str	r3, [r7, #32]
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	695b      	ldr	r3, [r3, #20]
 800d238:	623b      	str	r3, [r7, #32]
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	699b      	ldr	r3, [r3, #24]
 800d240:	623b      	str	r3, [r7, #32]
 800d242:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	681a      	ldr	r2, [r3, #0]
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d252:	601a      	str	r2, [r3, #0]
 800d254:	e18c      	b.n	800d570 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d11b      	bne.n	800d296 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	681a      	ldr	r2, [r3, #0]
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d26c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d26e:	2300      	movs	r3, #0
 800d270:	61fb      	str	r3, [r7, #28]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	695b      	ldr	r3, [r3, #20]
 800d278:	61fb      	str	r3, [r7, #28]
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	699b      	ldr	r3, [r3, #24]
 800d280:	61fb      	str	r3, [r7, #28]
 800d282:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	681a      	ldr	r2, [r3, #0]
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d292:	601a      	str	r2, [r3, #0]
 800d294:	e16c      	b.n	800d570 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d29a:	2b02      	cmp	r3, #2
 800d29c:	d11b      	bne.n	800d2d6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d2ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d2bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d2be:	2300      	movs	r3, #0
 800d2c0:	61bb      	str	r3, [r7, #24]
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	695b      	ldr	r3, [r3, #20]
 800d2c8:	61bb      	str	r3, [r7, #24]
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	699b      	ldr	r3, [r3, #24]
 800d2d0:	61bb      	str	r3, [r7, #24]
 800d2d2:	69bb      	ldr	r3, [r7, #24]
 800d2d4:	e14c      	b.n	800d570 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	681a      	ldr	r2, [r3, #0]
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d2e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	617b      	str	r3, [r7, #20]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	695b      	ldr	r3, [r3, #20]
 800d2f0:	617b      	str	r3, [r7, #20]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	699b      	ldr	r3, [r3, #24]
 800d2f8:	617b      	str	r3, [r7, #20]
 800d2fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d2fc:	e138      	b.n	800d570 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d302:	2b03      	cmp	r3, #3
 800d304:	f200 80f1 	bhi.w	800d4ea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d123      	bne.n	800d358 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d312:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d314:	68f8      	ldr	r0, [r7, #12]
 800d316:	f000 fbed 	bl	800daf4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d31a:	4603      	mov	r3, r0
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d001      	beq.n	800d324 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800d320:	2301      	movs	r3, #1
 800d322:	e139      	b.n	800d598 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	691a      	ldr	r2, [r3, #16]
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d32e:	b2d2      	uxtb	r2, r2
 800d330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d336:	1c5a      	adds	r2, r3, #1
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d340:	3b01      	subs	r3, #1
 800d342:	b29a      	uxth	r2, r3
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d34c:	b29b      	uxth	r3, r3
 800d34e:	3b01      	subs	r3, #1
 800d350:	b29a      	uxth	r2, r3
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d356:	e10b      	b.n	800d570 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d35c:	2b02      	cmp	r3, #2
 800d35e:	d14e      	bne.n	800d3fe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d362:	9300      	str	r3, [sp, #0]
 800d364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d366:	2200      	movs	r2, #0
 800d368:	4906      	ldr	r1, [pc, #24]	; (800d384 <HAL_I2C_Master_Receive+0x22c>)
 800d36a:	68f8      	ldr	r0, [r7, #12]
 800d36c:	f000 fa6a 	bl	800d844 <I2C_WaitOnFlagUntilTimeout>
 800d370:	4603      	mov	r3, r0
 800d372:	2b00      	cmp	r3, #0
 800d374:	d008      	beq.n	800d388 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800d376:	2301      	movs	r3, #1
 800d378:	e10e      	b.n	800d598 <HAL_I2C_Master_Receive+0x440>
 800d37a:	bf00      	nop
 800d37c:	00100002 	.word	0x00100002
 800d380:	ffff0000 	.word	0xffff0000
 800d384:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d396:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	691a      	ldr	r2, [r3, #16]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a2:	b2d2      	uxtb	r2, r2
 800d3a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3aa:	1c5a      	adds	r2, r3, #1
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3b4:	3b01      	subs	r3, #1
 800d3b6:	b29a      	uxth	r2, r3
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	3b01      	subs	r3, #1
 800d3c4:	b29a      	uxth	r2, r3
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	691a      	ldr	r2, [r3, #16]
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3d4:	b2d2      	uxtb	r2, r2
 800d3d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3dc:	1c5a      	adds	r2, r3, #1
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3e6:	3b01      	subs	r3, #1
 800d3e8:	b29a      	uxth	r2, r3
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3f2:	b29b      	uxth	r3, r3
 800d3f4:	3b01      	subs	r3, #1
 800d3f6:	b29a      	uxth	r2, r3
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d3fc:	e0b8      	b.n	800d570 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d400:	9300      	str	r3, [sp, #0]
 800d402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d404:	2200      	movs	r2, #0
 800d406:	4966      	ldr	r1, [pc, #408]	; (800d5a0 <HAL_I2C_Master_Receive+0x448>)
 800d408:	68f8      	ldr	r0, [r7, #12]
 800d40a:	f000 fa1b 	bl	800d844 <I2C_WaitOnFlagUntilTimeout>
 800d40e:	4603      	mov	r3, r0
 800d410:	2b00      	cmp	r3, #0
 800d412:	d001      	beq.n	800d418 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800d414:	2301      	movs	r3, #1
 800d416:	e0bf      	b.n	800d598 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	681a      	ldr	r2, [r3, #0]
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d426:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	691a      	ldr	r2, [r3, #16]
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d432:	b2d2      	uxtb	r2, r2
 800d434:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d43a:	1c5a      	adds	r2, r3, #1
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d444:	3b01      	subs	r3, #1
 800d446:	b29a      	uxth	r2, r3
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d450:	b29b      	uxth	r3, r3
 800d452:	3b01      	subs	r3, #1
 800d454:	b29a      	uxth	r2, r3
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d45c:	9300      	str	r3, [sp, #0]
 800d45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d460:	2200      	movs	r2, #0
 800d462:	494f      	ldr	r1, [pc, #316]	; (800d5a0 <HAL_I2C_Master_Receive+0x448>)
 800d464:	68f8      	ldr	r0, [r7, #12]
 800d466:	f000 f9ed 	bl	800d844 <I2C_WaitOnFlagUntilTimeout>
 800d46a:	4603      	mov	r3, r0
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d001      	beq.n	800d474 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800d470:	2301      	movs	r3, #1
 800d472:	e091      	b.n	800d598 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	681a      	ldr	r2, [r3, #0]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d482:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	691a      	ldr	r2, [r3, #16]
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d48e:	b2d2      	uxtb	r2, r2
 800d490:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d496:	1c5a      	adds	r2, r3, #1
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4a0:	3b01      	subs	r3, #1
 800d4a2:	b29a      	uxth	r2, r3
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4ac:	b29b      	uxth	r3, r3
 800d4ae:	3b01      	subs	r3, #1
 800d4b0:	b29a      	uxth	r2, r3
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	691a      	ldr	r2, [r3, #16]
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c0:	b2d2      	uxtb	r2, r2
 800d4c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c8:	1c5a      	adds	r2, r3, #1
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4d2:	3b01      	subs	r3, #1
 800d4d4:	b29a      	uxth	r2, r3
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4de:	b29b      	uxth	r3, r3
 800d4e0:	3b01      	subs	r3, #1
 800d4e2:	b29a      	uxth	r2, r3
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d4e8:	e042      	b.n	800d570 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d4ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d4ee:	68f8      	ldr	r0, [r7, #12]
 800d4f0:	f000 fb00 	bl	800daf4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d001      	beq.n	800d4fe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	e04c      	b.n	800d598 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	691a      	ldr	r2, [r3, #16]
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d508:	b2d2      	uxtb	r2, r2
 800d50a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d510:	1c5a      	adds	r2, r3, #1
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d51a:	3b01      	subs	r3, #1
 800d51c:	b29a      	uxth	r2, r3
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d526:	b29b      	uxth	r3, r3
 800d528:	3b01      	subs	r3, #1
 800d52a:	b29a      	uxth	r2, r3
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	695b      	ldr	r3, [r3, #20]
 800d536:	f003 0304 	and.w	r3, r3, #4
 800d53a:	2b04      	cmp	r3, #4
 800d53c:	d118      	bne.n	800d570 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	691a      	ldr	r2, [r3, #16]
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d548:	b2d2      	uxtb	r2, r2
 800d54a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d550:	1c5a      	adds	r2, r3, #1
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d55a:	3b01      	subs	r3, #1
 800d55c:	b29a      	uxth	r2, r3
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d566:	b29b      	uxth	r3, r3
 800d568:	3b01      	subs	r3, #1
 800d56a:	b29a      	uxth	r2, r3
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d574:	2b00      	cmp	r3, #0
 800d576:	f47f aec2 	bne.w	800d2fe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	2220      	movs	r2, #32
 800d57e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2200      	movs	r2, #0
 800d586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	2200      	movs	r2, #0
 800d58e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d592:	2300      	movs	r3, #0
 800d594:	e000      	b.n	800d598 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800d596:	2302      	movs	r3, #2
  }
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3728      	adds	r7, #40	; 0x28
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}
 800d5a0:	00010004 	.word	0x00010004

0800d5a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b088      	sub	sp, #32
 800d5a8:	af02      	add	r7, sp, #8
 800d5aa:	60f8      	str	r0, [r7, #12]
 800d5ac:	607a      	str	r2, [r7, #4]
 800d5ae:	603b      	str	r3, [r7, #0]
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	2b08      	cmp	r3, #8
 800d5be:	d006      	beq.n	800d5ce <I2C_MasterRequestWrite+0x2a>
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	2b01      	cmp	r3, #1
 800d5c4:	d003      	beq.n	800d5ce <I2C_MasterRequestWrite+0x2a>
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d5cc:	d108      	bne.n	800d5e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	681a      	ldr	r2, [r3, #0]
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d5dc:	601a      	str	r2, [r3, #0]
 800d5de:	e00b      	b.n	800d5f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5e4:	2b12      	cmp	r3, #18
 800d5e6:	d107      	bne.n	800d5f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d5f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	9300      	str	r3, [sp, #0]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2200      	movs	r2, #0
 800d600:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d604:	68f8      	ldr	r0, [r7, #12]
 800d606:	f000 f91d 	bl	800d844 <I2C_WaitOnFlagUntilTimeout>
 800d60a:	4603      	mov	r3, r0
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d00d      	beq.n	800d62c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d61a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d61e:	d103      	bne.n	800d628 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d626:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d628:	2303      	movs	r3, #3
 800d62a:	e035      	b.n	800d698 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	691b      	ldr	r3, [r3, #16]
 800d630:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d634:	d108      	bne.n	800d648 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d636:	897b      	ldrh	r3, [r7, #10]
 800d638:	b2db      	uxtb	r3, r3
 800d63a:	461a      	mov	r2, r3
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d644:	611a      	str	r2, [r3, #16]
 800d646:	e01b      	b.n	800d680 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d648:	897b      	ldrh	r3, [r7, #10]
 800d64a:	11db      	asrs	r3, r3, #7
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	f003 0306 	and.w	r3, r3, #6
 800d652:	b2db      	uxtb	r3, r3
 800d654:	f063 030f 	orn	r3, r3, #15
 800d658:	b2da      	uxtb	r2, r3
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	687a      	ldr	r2, [r7, #4]
 800d664:	490e      	ldr	r1, [pc, #56]	; (800d6a0 <I2C_MasterRequestWrite+0xfc>)
 800d666:	68f8      	ldr	r0, [r7, #12]
 800d668:	f000 f943 	bl	800d8f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d66c:	4603      	mov	r3, r0
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d001      	beq.n	800d676 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800d672:	2301      	movs	r3, #1
 800d674:	e010      	b.n	800d698 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d676:	897b      	ldrh	r3, [r7, #10]
 800d678:	b2da      	uxtb	r2, r3
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	687a      	ldr	r2, [r7, #4]
 800d684:	4907      	ldr	r1, [pc, #28]	; (800d6a4 <I2C_MasterRequestWrite+0x100>)
 800d686:	68f8      	ldr	r0, [r7, #12]
 800d688:	f000 f933 	bl	800d8f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d68c:	4603      	mov	r3, r0
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d001      	beq.n	800d696 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800d692:	2301      	movs	r3, #1
 800d694:	e000      	b.n	800d698 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800d696:	2300      	movs	r3, #0
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3718      	adds	r7, #24
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}
 800d6a0:	00010008 	.word	0x00010008
 800d6a4:	00010002 	.word	0x00010002

0800d6a8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b088      	sub	sp, #32
 800d6ac:	af02      	add	r7, sp, #8
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	607a      	str	r2, [r7, #4]
 800d6b2:	603b      	str	r3, [r7, #0]
 800d6b4:	460b      	mov	r3, r1
 800d6b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6bc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	681a      	ldr	r2, [r3, #0]
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d6cc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	2b08      	cmp	r3, #8
 800d6d2:	d006      	beq.n	800d6e2 <I2C_MasterRequestRead+0x3a>
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d003      	beq.n	800d6e2 <I2C_MasterRequestRead+0x3a>
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d6e0:	d108      	bne.n	800d6f4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	681a      	ldr	r2, [r3, #0]
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d6f0:	601a      	str	r2, [r3, #0]
 800d6f2:	e00b      	b.n	800d70c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6f8:	2b11      	cmp	r3, #17
 800d6fa:	d107      	bne.n	800d70c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	681a      	ldr	r2, [r3, #0]
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d70a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	9300      	str	r3, [sp, #0]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2200      	movs	r2, #0
 800d714:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d718:	68f8      	ldr	r0, [r7, #12]
 800d71a:	f000 f893 	bl	800d844 <I2C_WaitOnFlagUntilTimeout>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b00      	cmp	r3, #0
 800d722:	d00d      	beq.n	800d740 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d72e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d732:	d103      	bne.n	800d73c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d73a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d73c:	2303      	movs	r3, #3
 800d73e:	e079      	b.n	800d834 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	691b      	ldr	r3, [r3, #16]
 800d744:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d748:	d108      	bne.n	800d75c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d74a:	897b      	ldrh	r3, [r7, #10]
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	f043 0301 	orr.w	r3, r3, #1
 800d752:	b2da      	uxtb	r2, r3
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	611a      	str	r2, [r3, #16]
 800d75a:	e05f      	b.n	800d81c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d75c:	897b      	ldrh	r3, [r7, #10]
 800d75e:	11db      	asrs	r3, r3, #7
 800d760:	b2db      	uxtb	r3, r3
 800d762:	f003 0306 	and.w	r3, r3, #6
 800d766:	b2db      	uxtb	r3, r3
 800d768:	f063 030f 	orn	r3, r3, #15
 800d76c:	b2da      	uxtb	r2, r3
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	4930      	ldr	r1, [pc, #192]	; (800d83c <I2C_MasterRequestRead+0x194>)
 800d77a:	68f8      	ldr	r0, [r7, #12]
 800d77c:	f000 f8b9 	bl	800d8f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d780:	4603      	mov	r3, r0
 800d782:	2b00      	cmp	r3, #0
 800d784:	d001      	beq.n	800d78a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800d786:	2301      	movs	r3, #1
 800d788:	e054      	b.n	800d834 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d78a:	897b      	ldrh	r3, [r7, #10]
 800d78c:	b2da      	uxtb	r2, r3
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	687a      	ldr	r2, [r7, #4]
 800d798:	4929      	ldr	r1, [pc, #164]	; (800d840 <I2C_MasterRequestRead+0x198>)
 800d79a:	68f8      	ldr	r0, [r7, #12]
 800d79c:	f000 f8a9 	bl	800d8f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d001      	beq.n	800d7aa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	e044      	b.n	800d834 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	613b      	str	r3, [r7, #16]
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	695b      	ldr	r3, [r3, #20]
 800d7b4:	613b      	str	r3, [r7, #16]
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	699b      	ldr	r3, [r3, #24]
 800d7bc:	613b      	str	r3, [r7, #16]
 800d7be:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	681a      	ldr	r2, [r3, #0]
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d7ce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	9300      	str	r3, [sp, #0]
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d7dc:	68f8      	ldr	r0, [r7, #12]
 800d7de:	f000 f831 	bl	800d844 <I2C_WaitOnFlagUntilTimeout>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d00d      	beq.n	800d804 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7f6:	d103      	bne.n	800d800 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d7fe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800d800:	2303      	movs	r3, #3
 800d802:	e017      	b.n	800d834 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800d804:	897b      	ldrh	r3, [r7, #10]
 800d806:	11db      	asrs	r3, r3, #7
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	f003 0306 	and.w	r3, r3, #6
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	f063 030e 	orn	r3, r3, #14
 800d814:	b2da      	uxtb	r2, r3
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	4907      	ldr	r1, [pc, #28]	; (800d840 <I2C_MasterRequestRead+0x198>)
 800d822:	68f8      	ldr	r0, [r7, #12]
 800d824:	f000 f865 	bl	800d8f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d828:	4603      	mov	r3, r0
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d001      	beq.n	800d832 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800d82e:	2301      	movs	r3, #1
 800d830:	e000      	b.n	800d834 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800d832:	2300      	movs	r3, #0
}
 800d834:	4618      	mov	r0, r3
 800d836:	3718      	adds	r7, #24
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}
 800d83c:	00010008 	.word	0x00010008
 800d840:	00010002 	.word	0x00010002

0800d844 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b084      	sub	sp, #16
 800d848:	af00      	add	r7, sp, #0
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	60b9      	str	r1, [r7, #8]
 800d84e:	603b      	str	r3, [r7, #0]
 800d850:	4613      	mov	r3, r2
 800d852:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d854:	e025      	b.n	800d8a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d85c:	d021      	beq.n	800d8a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d85e:	f7fd ff71 	bl	800b744 <HAL_GetTick>
 800d862:	4602      	mov	r2, r0
 800d864:	69bb      	ldr	r3, [r7, #24]
 800d866:	1ad3      	subs	r3, r2, r3
 800d868:	683a      	ldr	r2, [r7, #0]
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d302      	bcc.n	800d874 <I2C_WaitOnFlagUntilTimeout+0x30>
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d116      	bne.n	800d8a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	2200      	movs	r2, #0
 800d878:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	2220      	movs	r2, #32
 800d87e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	2200      	movs	r2, #0
 800d886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d88e:	f043 0220 	orr.w	r2, r3, #32
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	2200      	movs	r2, #0
 800d89a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	e023      	b.n	800d8ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	0c1b      	lsrs	r3, r3, #16
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d10d      	bne.n	800d8c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	695b      	ldr	r3, [r3, #20]
 800d8b2:	43da      	mvns	r2, r3
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	4013      	ands	r3, r2
 800d8b8:	b29b      	uxth	r3, r3
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	bf0c      	ite	eq
 800d8be:	2301      	moveq	r3, #1
 800d8c0:	2300      	movne	r3, #0
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	461a      	mov	r2, r3
 800d8c6:	e00c      	b.n	800d8e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	699b      	ldr	r3, [r3, #24]
 800d8ce:	43da      	mvns	r2, r3
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	4013      	ands	r3, r2
 800d8d4:	b29b      	uxth	r3, r3
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	bf0c      	ite	eq
 800d8da:	2301      	moveq	r3, #1
 800d8dc:	2300      	movne	r3, #0
 800d8de:	b2db      	uxtb	r3, r3
 800d8e0:	461a      	mov	r2, r3
 800d8e2:	79fb      	ldrb	r3, [r7, #7]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d0b6      	beq.n	800d856 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d8e8:	2300      	movs	r3, #0
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3710      	adds	r7, #16
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}

0800d8f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800d8f2:	b580      	push	{r7, lr}
 800d8f4:	b084      	sub	sp, #16
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	60f8      	str	r0, [r7, #12]
 800d8fa:	60b9      	str	r1, [r7, #8]
 800d8fc:	607a      	str	r2, [r7, #4]
 800d8fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d900:	e051      	b.n	800d9a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	695b      	ldr	r3, [r3, #20]
 800d908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d90c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d910:	d123      	bne.n	800d95a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	681a      	ldr	r2, [r3, #0]
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d920:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d92a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	2200      	movs	r2, #0
 800d930:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2220      	movs	r2, #32
 800d936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2200      	movs	r2, #0
 800d93e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d946:	f043 0204 	orr.w	r2, r3, #4
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	2200      	movs	r2, #0
 800d952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d956:	2301      	movs	r3, #1
 800d958:	e046      	b.n	800d9e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d960:	d021      	beq.n	800d9a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d962:	f7fd feef 	bl	800b744 <HAL_GetTick>
 800d966:	4602      	mov	r2, r0
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	1ad3      	subs	r3, r2, r3
 800d96c:	687a      	ldr	r2, [r7, #4]
 800d96e:	429a      	cmp	r2, r3
 800d970:	d302      	bcc.n	800d978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d116      	bne.n	800d9a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2200      	movs	r2, #0
 800d97c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	2220      	movs	r2, #32
 800d982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	2200      	movs	r2, #0
 800d98a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d992:	f043 0220 	orr.w	r2, r3, #32
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2200      	movs	r2, #0
 800d99e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	e020      	b.n	800d9e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	0c1b      	lsrs	r3, r3, #16
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	2b01      	cmp	r3, #1
 800d9ae:	d10c      	bne.n	800d9ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	695b      	ldr	r3, [r3, #20]
 800d9b6:	43da      	mvns	r2, r3
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	4013      	ands	r3, r2
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	bf14      	ite	ne
 800d9c2:	2301      	movne	r3, #1
 800d9c4:	2300      	moveq	r3, #0
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	e00b      	b.n	800d9e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	699b      	ldr	r3, [r3, #24]
 800d9d0:	43da      	mvns	r2, r3
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	4013      	ands	r3, r2
 800d9d6:	b29b      	uxth	r3, r3
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	bf14      	ite	ne
 800d9dc:	2301      	movne	r3, #1
 800d9de:	2300      	moveq	r3, #0
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d18d      	bne.n	800d902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800d9e6:	2300      	movs	r3, #0
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3710      	adds	r7, #16
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}

0800d9f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b084      	sub	sp, #16
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	60f8      	str	r0, [r7, #12]
 800d9f8:	60b9      	str	r1, [r7, #8]
 800d9fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d9fc:	e02d      	b.n	800da5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d9fe:	68f8      	ldr	r0, [r7, #12]
 800da00:	f000 f8ce 	bl	800dba0 <I2C_IsAcknowledgeFailed>
 800da04:	4603      	mov	r3, r0
 800da06:	2b00      	cmp	r3, #0
 800da08:	d001      	beq.n	800da0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800da0a:	2301      	movs	r3, #1
 800da0c:	e02d      	b.n	800da6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da14:	d021      	beq.n	800da5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da16:	f7fd fe95 	bl	800b744 <HAL_GetTick>
 800da1a:	4602      	mov	r2, r0
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	1ad3      	subs	r3, r2, r3
 800da20:	68ba      	ldr	r2, [r7, #8]
 800da22:	429a      	cmp	r2, r3
 800da24:	d302      	bcc.n	800da2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d116      	bne.n	800da5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	2200      	movs	r2, #0
 800da30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2220      	movs	r2, #32
 800da36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2200      	movs	r2, #0
 800da3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da46:	f043 0220 	orr.w	r2, r3, #32
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	2200      	movs	r2, #0
 800da52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800da56:	2301      	movs	r3, #1
 800da58:	e007      	b.n	800da6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	695b      	ldr	r3, [r3, #20]
 800da60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da64:	2b80      	cmp	r3, #128	; 0x80
 800da66:	d1ca      	bne.n	800d9fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800da68:	2300      	movs	r3, #0
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	3710      	adds	r7, #16
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}

0800da72 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800da72:	b580      	push	{r7, lr}
 800da74:	b084      	sub	sp, #16
 800da76:	af00      	add	r7, sp, #0
 800da78:	60f8      	str	r0, [r7, #12]
 800da7a:	60b9      	str	r1, [r7, #8]
 800da7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800da7e:	e02d      	b.n	800dadc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800da80:	68f8      	ldr	r0, [r7, #12]
 800da82:	f000 f88d 	bl	800dba0 <I2C_IsAcknowledgeFailed>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d001      	beq.n	800da90 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800da8c:	2301      	movs	r3, #1
 800da8e:	e02d      	b.n	800daec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da96:	d021      	beq.n	800dadc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da98:	f7fd fe54 	bl	800b744 <HAL_GetTick>
 800da9c:	4602      	mov	r2, r0
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	1ad3      	subs	r3, r2, r3
 800daa2:	68ba      	ldr	r2, [r7, #8]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d302      	bcc.n	800daae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d116      	bne.n	800dadc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	2200      	movs	r2, #0
 800dab2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2220      	movs	r2, #32
 800dab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2200      	movs	r2, #0
 800dac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dac8:	f043 0220 	orr.w	r2, r3, #32
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	2200      	movs	r2, #0
 800dad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dad8:	2301      	movs	r3, #1
 800dada:	e007      	b.n	800daec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	695b      	ldr	r3, [r3, #20]
 800dae2:	f003 0304 	and.w	r3, r3, #4
 800dae6:	2b04      	cmp	r3, #4
 800dae8:	d1ca      	bne.n	800da80 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800daea:	2300      	movs	r3, #0
}
 800daec:	4618      	mov	r0, r3
 800daee:	3710      	adds	r7, #16
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b084      	sub	sp, #16
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	60f8      	str	r0, [r7, #12]
 800dafc:	60b9      	str	r1, [r7, #8]
 800dafe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800db00:	e042      	b.n	800db88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	695b      	ldr	r3, [r3, #20]
 800db08:	f003 0310 	and.w	r3, r3, #16
 800db0c:	2b10      	cmp	r3, #16
 800db0e:	d119      	bne.n	800db44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	f06f 0210 	mvn.w	r2, #16
 800db18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	2200      	movs	r2, #0
 800db1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	2220      	movs	r2, #32
 800db24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	2200      	movs	r2, #0
 800db2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	2200      	movs	r2, #0
 800db3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800db40:	2301      	movs	r3, #1
 800db42:	e029      	b.n	800db98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db44:	f7fd fdfe 	bl	800b744 <HAL_GetTick>
 800db48:	4602      	mov	r2, r0
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	1ad3      	subs	r3, r2, r3
 800db4e:	68ba      	ldr	r2, [r7, #8]
 800db50:	429a      	cmp	r2, r3
 800db52:	d302      	bcc.n	800db5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d116      	bne.n	800db88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	2200      	movs	r2, #0
 800db5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	2220      	movs	r2, #32
 800db64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2200      	movs	r2, #0
 800db6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db74:	f043 0220 	orr.w	r2, r3, #32
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	2200      	movs	r2, #0
 800db80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800db84:	2301      	movs	r3, #1
 800db86:	e007      	b.n	800db98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	695b      	ldr	r3, [r3, #20]
 800db8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db92:	2b40      	cmp	r3, #64	; 0x40
 800db94:	d1b5      	bne.n	800db02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800db96:	2300      	movs	r3, #0
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3710      	adds	r7, #16
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}

0800dba0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800dba0:	b480      	push	{r7}
 800dba2:	b083      	sub	sp, #12
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	695b      	ldr	r3, [r3, #20]
 800dbae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dbb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dbb6:	d11b      	bne.n	800dbf0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800dbc0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2220      	movs	r2, #32
 800dbcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbdc:	f043 0204 	orr.w	r2, r3, #4
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800dbec:	2301      	movs	r3, #1
 800dbee:	e000      	b.n	800dbf2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800dbf0:	2300      	movs	r3, #0
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	370c      	adds	r7, #12
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfc:	4770      	bx	lr
	...

0800dc00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800dc06:	2300      	movs	r3, #0
 800dc08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	603b      	str	r3, [r7, #0]
 800dc0e:	4b20      	ldr	r3, [pc, #128]	; (800dc90 <HAL_PWREx_EnableOverDrive+0x90>)
 800dc10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc12:	4a1f      	ldr	r2, [pc, #124]	; (800dc90 <HAL_PWREx_EnableOverDrive+0x90>)
 800dc14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc18:	6413      	str	r3, [r2, #64]	; 0x40
 800dc1a:	4b1d      	ldr	r3, [pc, #116]	; (800dc90 <HAL_PWREx_EnableOverDrive+0x90>)
 800dc1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc22:	603b      	str	r3, [r7, #0]
 800dc24:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800dc26:	4b1b      	ldr	r3, [pc, #108]	; (800dc94 <HAL_PWREx_EnableOverDrive+0x94>)
 800dc28:	2201      	movs	r2, #1
 800dc2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800dc2c:	f7fd fd8a 	bl	800b744 <HAL_GetTick>
 800dc30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800dc32:	e009      	b.n	800dc48 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800dc34:	f7fd fd86 	bl	800b744 <HAL_GetTick>
 800dc38:	4602      	mov	r2, r0
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	1ad3      	subs	r3, r2, r3
 800dc3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dc42:	d901      	bls.n	800dc48 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800dc44:	2303      	movs	r3, #3
 800dc46:	e01f      	b.n	800dc88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800dc48:	4b13      	ldr	r3, [pc, #76]	; (800dc98 <HAL_PWREx_EnableOverDrive+0x98>)
 800dc4a:	685b      	ldr	r3, [r3, #4]
 800dc4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc54:	d1ee      	bne.n	800dc34 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800dc56:	4b11      	ldr	r3, [pc, #68]	; (800dc9c <HAL_PWREx_EnableOverDrive+0x9c>)
 800dc58:	2201      	movs	r2, #1
 800dc5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800dc5c:	f7fd fd72 	bl	800b744 <HAL_GetTick>
 800dc60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800dc62:	e009      	b.n	800dc78 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800dc64:	f7fd fd6e 	bl	800b744 <HAL_GetTick>
 800dc68:	4602      	mov	r2, r0
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	1ad3      	subs	r3, r2, r3
 800dc6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dc72:	d901      	bls.n	800dc78 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800dc74:	2303      	movs	r3, #3
 800dc76:	e007      	b.n	800dc88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800dc78:	4b07      	ldr	r3, [pc, #28]	; (800dc98 <HAL_PWREx_EnableOverDrive+0x98>)
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dc84:	d1ee      	bne.n	800dc64 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800dc86:	2300      	movs	r3, #0
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3708      	adds	r7, #8
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}
 800dc90:	40023800 	.word	0x40023800
 800dc94:	420e0040 	.word	0x420e0040
 800dc98:	40007000 	.word	0x40007000
 800dc9c:	420e0044 	.word	0x420e0044

0800dca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b084      	sub	sp, #16
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d101      	bne.n	800dcb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	e0cc      	b.n	800de4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800dcb4:	4b68      	ldr	r3, [pc, #416]	; (800de58 <HAL_RCC_ClockConfig+0x1b8>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f003 030f 	and.w	r3, r3, #15
 800dcbc:	683a      	ldr	r2, [r7, #0]
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d90c      	bls.n	800dcdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dcc2:	4b65      	ldr	r3, [pc, #404]	; (800de58 <HAL_RCC_ClockConfig+0x1b8>)
 800dcc4:	683a      	ldr	r2, [r7, #0]
 800dcc6:	b2d2      	uxtb	r2, r2
 800dcc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dcca:	4b63      	ldr	r3, [pc, #396]	; (800de58 <HAL_RCC_ClockConfig+0x1b8>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	f003 030f 	and.w	r3, r3, #15
 800dcd2:	683a      	ldr	r2, [r7, #0]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d001      	beq.n	800dcdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800dcd8:	2301      	movs	r3, #1
 800dcda:	e0b8      	b.n	800de4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	f003 0302 	and.w	r3, r3, #2
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d020      	beq.n	800dd2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	f003 0304 	and.w	r3, r3, #4
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d005      	beq.n	800dd00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dcf4:	4b59      	ldr	r3, [pc, #356]	; (800de5c <HAL_RCC_ClockConfig+0x1bc>)
 800dcf6:	689b      	ldr	r3, [r3, #8]
 800dcf8:	4a58      	ldr	r2, [pc, #352]	; (800de5c <HAL_RCC_ClockConfig+0x1bc>)
 800dcfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800dcfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	f003 0308 	and.w	r3, r3, #8
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d005      	beq.n	800dd18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dd0c:	4b53      	ldr	r3, [pc, #332]	; (800de5c <HAL_RCC_ClockConfig+0x1bc>)
 800dd0e:	689b      	ldr	r3, [r3, #8]
 800dd10:	4a52      	ldr	r2, [pc, #328]	; (800de5c <HAL_RCC_ClockConfig+0x1bc>)
 800dd12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800dd16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dd18:	4b50      	ldr	r3, [pc, #320]	; (800de5c <HAL_RCC_ClockConfig+0x1bc>)
 800dd1a:	689b      	ldr	r3, [r3, #8]
 800dd1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	689b      	ldr	r3, [r3, #8]
 800dd24:	494d      	ldr	r1, [pc, #308]	; (800de5c <HAL_RCC_ClockConfig+0x1bc>)
 800dd26:	4313      	orrs	r3, r2
 800dd28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f003 0301 	and.w	r3, r3, #1
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d044      	beq.n	800ddc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	d107      	bne.n	800dd4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dd3e:	4b47      	ldr	r3, [pc, #284]	; (800de5c <HAL_RCC_ClockConfig+0x1bc>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d119      	bne.n	800dd7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	e07f      	b.n	800de4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	685b      	ldr	r3, [r3, #4]
 800dd52:	2b02      	cmp	r3, #2
 800dd54:	d003      	beq.n	800dd5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dd5a:	2b03      	cmp	r3, #3
 800dd5c:	d107      	bne.n	800dd6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dd5e:	4b3f      	ldr	r3, [pc, #252]	; (800de5c <HAL_RCC_ClockConfig+0x1bc>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d109      	bne.n	800dd7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	e06f      	b.n	800de4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dd6e:	4b3b      	ldr	r3, [pc, #236]	; (800de5c <HAL_RCC_ClockConfig+0x1bc>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	f003 0302 	and.w	r3, r3, #2
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d101      	bne.n	800dd7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	e067      	b.n	800de4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dd7e:	4b37      	ldr	r3, [pc, #220]	; (800de5c <HAL_RCC_ClockConfig+0x1bc>)
 800dd80:	689b      	ldr	r3, [r3, #8]
 800dd82:	f023 0203 	bic.w	r2, r3, #3
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	685b      	ldr	r3, [r3, #4]
 800dd8a:	4934      	ldr	r1, [pc, #208]	; (800de5c <HAL_RCC_ClockConfig+0x1bc>)
 800dd8c:	4313      	orrs	r3, r2
 800dd8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800dd90:	f7fd fcd8 	bl	800b744 <HAL_GetTick>
 800dd94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dd96:	e00a      	b.n	800ddae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dd98:	f7fd fcd4 	bl	800b744 <HAL_GetTick>
 800dd9c:	4602      	mov	r2, r0
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	1ad3      	subs	r3, r2, r3
 800dda2:	f241 3288 	movw	r2, #5000	; 0x1388
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d901      	bls.n	800ddae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ddaa:	2303      	movs	r3, #3
 800ddac:	e04f      	b.n	800de4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ddae:	4b2b      	ldr	r3, [pc, #172]	; (800de5c <HAL_RCC_ClockConfig+0x1bc>)
 800ddb0:	689b      	ldr	r3, [r3, #8]
 800ddb2:	f003 020c 	and.w	r2, r3, #12
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	009b      	lsls	r3, r3, #2
 800ddbc:	429a      	cmp	r2, r3
 800ddbe:	d1eb      	bne.n	800dd98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ddc0:	4b25      	ldr	r3, [pc, #148]	; (800de58 <HAL_RCC_ClockConfig+0x1b8>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f003 030f 	and.w	r3, r3, #15
 800ddc8:	683a      	ldr	r2, [r7, #0]
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d20c      	bcs.n	800dde8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ddce:	4b22      	ldr	r3, [pc, #136]	; (800de58 <HAL_RCC_ClockConfig+0x1b8>)
 800ddd0:	683a      	ldr	r2, [r7, #0]
 800ddd2:	b2d2      	uxtb	r2, r2
 800ddd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ddd6:	4b20      	ldr	r3, [pc, #128]	; (800de58 <HAL_RCC_ClockConfig+0x1b8>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	f003 030f 	and.w	r3, r3, #15
 800ddde:	683a      	ldr	r2, [r7, #0]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d001      	beq.n	800dde8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800dde4:	2301      	movs	r3, #1
 800dde6:	e032      	b.n	800de4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	f003 0304 	and.w	r3, r3, #4
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d008      	beq.n	800de06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ddf4:	4b19      	ldr	r3, [pc, #100]	; (800de5c <HAL_RCC_ClockConfig+0x1bc>)
 800ddf6:	689b      	ldr	r3, [r3, #8]
 800ddf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	68db      	ldr	r3, [r3, #12]
 800de00:	4916      	ldr	r1, [pc, #88]	; (800de5c <HAL_RCC_ClockConfig+0x1bc>)
 800de02:	4313      	orrs	r3, r2
 800de04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f003 0308 	and.w	r3, r3, #8
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d009      	beq.n	800de26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800de12:	4b12      	ldr	r3, [pc, #72]	; (800de5c <HAL_RCC_ClockConfig+0x1bc>)
 800de14:	689b      	ldr	r3, [r3, #8]
 800de16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	691b      	ldr	r3, [r3, #16]
 800de1e:	00db      	lsls	r3, r3, #3
 800de20:	490e      	ldr	r1, [pc, #56]	; (800de5c <HAL_RCC_ClockConfig+0x1bc>)
 800de22:	4313      	orrs	r3, r2
 800de24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800de26:	f000 f821 	bl	800de6c <HAL_RCC_GetSysClockFreq>
 800de2a:	4601      	mov	r1, r0
 800de2c:	4b0b      	ldr	r3, [pc, #44]	; (800de5c <HAL_RCC_ClockConfig+0x1bc>)
 800de2e:	689b      	ldr	r3, [r3, #8]
 800de30:	091b      	lsrs	r3, r3, #4
 800de32:	f003 030f 	and.w	r3, r3, #15
 800de36:	4a0a      	ldr	r2, [pc, #40]	; (800de60 <HAL_RCC_ClockConfig+0x1c0>)
 800de38:	5cd3      	ldrb	r3, [r2, r3]
 800de3a:	fa21 f303 	lsr.w	r3, r1, r3
 800de3e:	4a09      	ldr	r2, [pc, #36]	; (800de64 <HAL_RCC_ClockConfig+0x1c4>)
 800de40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800de42:	4b09      	ldr	r3, [pc, #36]	; (800de68 <HAL_RCC_ClockConfig+0x1c8>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	4618      	mov	r0, r3
 800de48:	f7fd fc38 	bl	800b6bc <HAL_InitTick>

  return HAL_OK;
 800de4c:	2300      	movs	r3, #0
}
 800de4e:	4618      	mov	r0, r3
 800de50:	3710      	adds	r7, #16
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}
 800de56:	bf00      	nop
 800de58:	40023c00 	.word	0x40023c00
 800de5c:	40023800 	.word	0x40023800
 800de60:	0801abc4 	.word	0x0801abc4
 800de64:	20000000 	.word	0x20000000
 800de68:	20000004 	.word	0x20000004

0800de6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800de6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de6e:	b085      	sub	sp, #20
 800de70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800de72:	2300      	movs	r3, #0
 800de74:	607b      	str	r3, [r7, #4]
 800de76:	2300      	movs	r3, #0
 800de78:	60fb      	str	r3, [r7, #12]
 800de7a:	2300      	movs	r3, #0
 800de7c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800de7e:	2300      	movs	r3, #0
 800de80:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800de82:	4b63      	ldr	r3, [pc, #396]	; (800e010 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800de84:	689b      	ldr	r3, [r3, #8]
 800de86:	f003 030c 	and.w	r3, r3, #12
 800de8a:	2b04      	cmp	r3, #4
 800de8c:	d007      	beq.n	800de9e <HAL_RCC_GetSysClockFreq+0x32>
 800de8e:	2b08      	cmp	r3, #8
 800de90:	d008      	beq.n	800dea4 <HAL_RCC_GetSysClockFreq+0x38>
 800de92:	2b00      	cmp	r3, #0
 800de94:	f040 80b4 	bne.w	800e000 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800de98:	4b5e      	ldr	r3, [pc, #376]	; (800e014 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800de9a:	60bb      	str	r3, [r7, #8]
       break;
 800de9c:	e0b3      	b.n	800e006 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800de9e:	4b5d      	ldr	r3, [pc, #372]	; (800e014 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800dea0:	60bb      	str	r3, [r7, #8]
      break;
 800dea2:	e0b0      	b.n	800e006 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dea4:	4b5a      	ldr	r3, [pc, #360]	; (800e010 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dea6:	685b      	ldr	r3, [r3, #4]
 800dea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800deac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800deae:	4b58      	ldr	r3, [pc, #352]	; (800e010 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800deb0:	685b      	ldr	r3, [r3, #4]
 800deb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d04a      	beq.n	800df50 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800deba:	4b55      	ldr	r3, [pc, #340]	; (800e010 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	099b      	lsrs	r3, r3, #6
 800dec0:	f04f 0400 	mov.w	r4, #0
 800dec4:	f240 11ff 	movw	r1, #511	; 0x1ff
 800dec8:	f04f 0200 	mov.w	r2, #0
 800decc:	ea03 0501 	and.w	r5, r3, r1
 800ded0:	ea04 0602 	and.w	r6, r4, r2
 800ded4:	4629      	mov	r1, r5
 800ded6:	4632      	mov	r2, r6
 800ded8:	f04f 0300 	mov.w	r3, #0
 800dedc:	f04f 0400 	mov.w	r4, #0
 800dee0:	0154      	lsls	r4, r2, #5
 800dee2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800dee6:	014b      	lsls	r3, r1, #5
 800dee8:	4619      	mov	r1, r3
 800deea:	4622      	mov	r2, r4
 800deec:	1b49      	subs	r1, r1, r5
 800deee:	eb62 0206 	sbc.w	r2, r2, r6
 800def2:	f04f 0300 	mov.w	r3, #0
 800def6:	f04f 0400 	mov.w	r4, #0
 800defa:	0194      	lsls	r4, r2, #6
 800defc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800df00:	018b      	lsls	r3, r1, #6
 800df02:	1a5b      	subs	r3, r3, r1
 800df04:	eb64 0402 	sbc.w	r4, r4, r2
 800df08:	f04f 0100 	mov.w	r1, #0
 800df0c:	f04f 0200 	mov.w	r2, #0
 800df10:	00e2      	lsls	r2, r4, #3
 800df12:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800df16:	00d9      	lsls	r1, r3, #3
 800df18:	460b      	mov	r3, r1
 800df1a:	4614      	mov	r4, r2
 800df1c:	195b      	adds	r3, r3, r5
 800df1e:	eb44 0406 	adc.w	r4, r4, r6
 800df22:	f04f 0100 	mov.w	r1, #0
 800df26:	f04f 0200 	mov.w	r2, #0
 800df2a:	02a2      	lsls	r2, r4, #10
 800df2c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800df30:	0299      	lsls	r1, r3, #10
 800df32:	460b      	mov	r3, r1
 800df34:	4614      	mov	r4, r2
 800df36:	4618      	mov	r0, r3
 800df38:	4621      	mov	r1, r4
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f04f 0400 	mov.w	r4, #0
 800df40:	461a      	mov	r2, r3
 800df42:	4623      	mov	r3, r4
 800df44:	f7f2 feb8 	bl	8000cb8 <__aeabi_uldivmod>
 800df48:	4603      	mov	r3, r0
 800df4a:	460c      	mov	r4, r1
 800df4c:	60fb      	str	r3, [r7, #12]
 800df4e:	e049      	b.n	800dfe4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800df50:	4b2f      	ldr	r3, [pc, #188]	; (800e010 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	099b      	lsrs	r3, r3, #6
 800df56:	f04f 0400 	mov.w	r4, #0
 800df5a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800df5e:	f04f 0200 	mov.w	r2, #0
 800df62:	ea03 0501 	and.w	r5, r3, r1
 800df66:	ea04 0602 	and.w	r6, r4, r2
 800df6a:	4629      	mov	r1, r5
 800df6c:	4632      	mov	r2, r6
 800df6e:	f04f 0300 	mov.w	r3, #0
 800df72:	f04f 0400 	mov.w	r4, #0
 800df76:	0154      	lsls	r4, r2, #5
 800df78:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800df7c:	014b      	lsls	r3, r1, #5
 800df7e:	4619      	mov	r1, r3
 800df80:	4622      	mov	r2, r4
 800df82:	1b49      	subs	r1, r1, r5
 800df84:	eb62 0206 	sbc.w	r2, r2, r6
 800df88:	f04f 0300 	mov.w	r3, #0
 800df8c:	f04f 0400 	mov.w	r4, #0
 800df90:	0194      	lsls	r4, r2, #6
 800df92:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800df96:	018b      	lsls	r3, r1, #6
 800df98:	1a5b      	subs	r3, r3, r1
 800df9a:	eb64 0402 	sbc.w	r4, r4, r2
 800df9e:	f04f 0100 	mov.w	r1, #0
 800dfa2:	f04f 0200 	mov.w	r2, #0
 800dfa6:	00e2      	lsls	r2, r4, #3
 800dfa8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800dfac:	00d9      	lsls	r1, r3, #3
 800dfae:	460b      	mov	r3, r1
 800dfb0:	4614      	mov	r4, r2
 800dfb2:	195b      	adds	r3, r3, r5
 800dfb4:	eb44 0406 	adc.w	r4, r4, r6
 800dfb8:	f04f 0100 	mov.w	r1, #0
 800dfbc:	f04f 0200 	mov.w	r2, #0
 800dfc0:	02a2      	lsls	r2, r4, #10
 800dfc2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800dfc6:	0299      	lsls	r1, r3, #10
 800dfc8:	460b      	mov	r3, r1
 800dfca:	4614      	mov	r4, r2
 800dfcc:	4618      	mov	r0, r3
 800dfce:	4621      	mov	r1, r4
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f04f 0400 	mov.w	r4, #0
 800dfd6:	461a      	mov	r2, r3
 800dfd8:	4623      	mov	r3, r4
 800dfda:	f7f2 fe6d 	bl	8000cb8 <__aeabi_uldivmod>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	460c      	mov	r4, r1
 800dfe2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800dfe4:	4b0a      	ldr	r3, [pc, #40]	; (800e010 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dfe6:	685b      	ldr	r3, [r3, #4]
 800dfe8:	0c1b      	lsrs	r3, r3, #16
 800dfea:	f003 0303 	and.w	r3, r3, #3
 800dfee:	3301      	adds	r3, #1
 800dff0:	005b      	lsls	r3, r3, #1
 800dff2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800dff4:	68fa      	ldr	r2, [r7, #12]
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dffc:	60bb      	str	r3, [r7, #8]
      break;
 800dffe:	e002      	b.n	800e006 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e000:	4b04      	ldr	r3, [pc, #16]	; (800e014 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800e002:	60bb      	str	r3, [r7, #8]
      break;
 800e004:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e006:	68bb      	ldr	r3, [r7, #8]
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3714      	adds	r7, #20
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e010:	40023800 	.word	0x40023800
 800e014:	00f42400 	.word	0x00f42400

0800e018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e018:	b480      	push	{r7}
 800e01a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e01c:	4b03      	ldr	r3, [pc, #12]	; (800e02c <HAL_RCC_GetHCLKFreq+0x14>)
 800e01e:	681b      	ldr	r3, [r3, #0]
}
 800e020:	4618      	mov	r0, r3
 800e022:	46bd      	mov	sp, r7
 800e024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e028:	4770      	bx	lr
 800e02a:	bf00      	nop
 800e02c:	20000000 	.word	0x20000000

0800e030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e034:	f7ff fff0 	bl	800e018 <HAL_RCC_GetHCLKFreq>
 800e038:	4601      	mov	r1, r0
 800e03a:	4b05      	ldr	r3, [pc, #20]	; (800e050 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e03c:	689b      	ldr	r3, [r3, #8]
 800e03e:	0a9b      	lsrs	r3, r3, #10
 800e040:	f003 0307 	and.w	r3, r3, #7
 800e044:	4a03      	ldr	r2, [pc, #12]	; (800e054 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e046:	5cd3      	ldrb	r3, [r2, r3]
 800e048:	fa21 f303 	lsr.w	r3, r1, r3
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	bd80      	pop	{r7, pc}
 800e050:	40023800 	.word	0x40023800
 800e054:	0801abd4 	.word	0x0801abd4

0800e058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e05c:	f7ff ffdc 	bl	800e018 <HAL_RCC_GetHCLKFreq>
 800e060:	4601      	mov	r1, r0
 800e062:	4b05      	ldr	r3, [pc, #20]	; (800e078 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e064:	689b      	ldr	r3, [r3, #8]
 800e066:	0b5b      	lsrs	r3, r3, #13
 800e068:	f003 0307 	and.w	r3, r3, #7
 800e06c:	4a03      	ldr	r2, [pc, #12]	; (800e07c <HAL_RCC_GetPCLK2Freq+0x24>)
 800e06e:	5cd3      	ldrb	r3, [r2, r3]
 800e070:	fa21 f303 	lsr.w	r3, r1, r3
}
 800e074:	4618      	mov	r0, r3
 800e076:	bd80      	pop	{r7, pc}
 800e078:	40023800 	.word	0x40023800
 800e07c:	0801abd4 	.word	0x0801abd4

0800e080 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b088      	sub	sp, #32
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e088:	2300      	movs	r3, #0
 800e08a:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800e08c:	2300      	movs	r3, #0
 800e08e:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800e090:	2300      	movs	r3, #0
 800e092:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800e094:	2300      	movs	r3, #0
 800e096:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800e098:	2300      	movs	r3, #0
 800e09a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d00a      	beq.n	800e0be <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e0a8:	4b66      	ldr	r3, [pc, #408]	; (800e244 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800e0aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0ae:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0b6:	4963      	ldr	r1, [pc, #396]	; (800e244 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800e0b8:	4313      	orrs	r3, r2
 800e0ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d00a      	beq.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800e0ca:	4b5e      	ldr	r3, [pc, #376]	; (800e244 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800e0cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0d0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0d8:	495a      	ldr	r1, [pc, #360]	; (800e244 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800e0da:	4313      	orrs	r3, r2
 800e0dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	f003 0301 	and.w	r3, r3, #1
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d10b      	bne.n	800e104 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d105      	bne.n	800e104 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800e100:	2b00      	cmp	r3, #0
 800e102:	d075      	beq.n	800e1f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e104:	4b50      	ldr	r3, [pc, #320]	; (800e248 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800e106:	2200      	movs	r2, #0
 800e108:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e10a:	f7fd fb1b 	bl	800b744 <HAL_GetTick>
 800e10e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e110:	e008      	b.n	800e124 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800e112:	f7fd fb17 	bl	800b744 <HAL_GetTick>
 800e116:	4602      	mov	r2, r0
 800e118:	69fb      	ldr	r3, [r7, #28]
 800e11a:	1ad3      	subs	r3, r2, r3
 800e11c:	2b02      	cmp	r3, #2
 800e11e:	d901      	bls.n	800e124 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e120:	2303      	movs	r3, #3
 800e122:	e1dc      	b.n	800e4de <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e124:	4b47      	ldr	r3, [pc, #284]	; (800e244 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d1f0      	bne.n	800e112 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	f003 0301 	and.w	r3, r3, #1
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d009      	beq.n	800e150 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	019a      	lsls	r2, r3, #6
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	689b      	ldr	r3, [r3, #8]
 800e146:	071b      	lsls	r3, r3, #28
 800e148:	493e      	ldr	r1, [pc, #248]	; (800e244 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800e14a:	4313      	orrs	r3, r2
 800e14c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	f003 0302 	and.w	r3, r3, #2
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d01f      	beq.n	800e19c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e15c:	4b39      	ldr	r3, [pc, #228]	; (800e244 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800e15e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e162:	0f1b      	lsrs	r3, r3, #28
 800e164:	f003 0307 	and.w	r3, r3, #7
 800e168:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	019a      	lsls	r2, r3, #6
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	68db      	ldr	r3, [r3, #12]
 800e174:	061b      	lsls	r3, r3, #24
 800e176:	431a      	orrs	r2, r3
 800e178:	69bb      	ldr	r3, [r7, #24]
 800e17a:	071b      	lsls	r3, r3, #28
 800e17c:	4931      	ldr	r1, [pc, #196]	; (800e244 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800e17e:	4313      	orrs	r3, r2
 800e180:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e184:	4b2f      	ldr	r3, [pc, #188]	; (800e244 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800e186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e18a:	f023 021f 	bic.w	r2, r3, #31
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6a1b      	ldr	r3, [r3, #32]
 800e192:	3b01      	subs	r3, #1
 800e194:	492b      	ldr	r1, [pc, #172]	; (800e244 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800e196:	4313      	orrs	r3, r2
 800e198:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d00d      	beq.n	800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	685b      	ldr	r3, [r3, #4]
 800e1ac:	019a      	lsls	r2, r3, #6
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	68db      	ldr	r3, [r3, #12]
 800e1b2:	061b      	lsls	r3, r3, #24
 800e1b4:	431a      	orrs	r2, r3
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	689b      	ldr	r3, [r3, #8]
 800e1ba:	071b      	lsls	r3, r3, #28
 800e1bc:	4921      	ldr	r1, [pc, #132]	; (800e244 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800e1be:	4313      	orrs	r3, r2
 800e1c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e1c4:	4b20      	ldr	r3, [pc, #128]	; (800e248 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800e1c6:	2201      	movs	r2, #1
 800e1c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e1ca:	f7fd fabb 	bl	800b744 <HAL_GetTick>
 800e1ce:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e1d0:	e008      	b.n	800e1e4 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800e1d2:	f7fd fab7 	bl	800b744 <HAL_GetTick>
 800e1d6:	4602      	mov	r2, r0
 800e1d8:	69fb      	ldr	r3, [r7, #28]
 800e1da:	1ad3      	subs	r3, r2, r3
 800e1dc:	2b02      	cmp	r3, #2
 800e1de:	d901      	bls.n	800e1e4 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e1e0:	2303      	movs	r3, #3
 800e1e2:	e17c      	b.n	800e4de <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e1e4:	4b17      	ldr	r3, [pc, #92]	; (800e244 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d0f0      	beq.n	800e1d2 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	f003 0304 	and.w	r3, r3, #4
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d112      	bne.n	800e222 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800e204:	2b00      	cmp	r3, #0
 800e206:	d10c      	bne.n	800e222 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800e210:	2b00      	cmp	r3, #0
 800e212:	f000 80ce 	beq.w	800e3b2 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800e21a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e21e:	f040 80c8 	bne.w	800e3b2 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800e222:	4b0a      	ldr	r3, [pc, #40]	; (800e24c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800e224:	2200      	movs	r2, #0
 800e226:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e228:	f7fd fa8c 	bl	800b744 <HAL_GetTick>
 800e22c:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e22e:	e00f      	b.n	800e250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800e230:	f7fd fa88 	bl	800b744 <HAL_GetTick>
 800e234:	4602      	mov	r2, r0
 800e236:	69fb      	ldr	r3, [r7, #28]
 800e238:	1ad3      	subs	r3, r2, r3
 800e23a:	2b02      	cmp	r3, #2
 800e23c:	d908      	bls.n	800e250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e23e:	2303      	movs	r3, #3
 800e240:	e14d      	b.n	800e4de <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800e242:	bf00      	nop
 800e244:	40023800 	.word	0x40023800
 800e248:	42470068 	.word	0x42470068
 800e24c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e250:	4ba5      	ldr	r3, [pc, #660]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e25c:	d0e8      	beq.n	800e230 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f003 0304 	and.w	r3, r3, #4
 800e266:	2b00      	cmp	r3, #0
 800e268:	d02e      	beq.n	800e2c8 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800e26a:	4b9f      	ldr	r3, [pc, #636]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e26c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e270:	0c1b      	lsrs	r3, r3, #16
 800e272:	f003 0303 	and.w	r3, r3, #3
 800e276:	3301      	adds	r3, #1
 800e278:	005b      	lsls	r3, r3, #1
 800e27a:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e27c:	4b9a      	ldr	r3, [pc, #616]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e27e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e282:	0f1b      	lsrs	r3, r3, #28
 800e284:	f003 0307 	and.w	r3, r3, #7
 800e288:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	691b      	ldr	r3, [r3, #16]
 800e28e:	019a      	lsls	r2, r3, #6
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	085b      	lsrs	r3, r3, #1
 800e294:	3b01      	subs	r3, #1
 800e296:	041b      	lsls	r3, r3, #16
 800e298:	431a      	orrs	r2, r3
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	699b      	ldr	r3, [r3, #24]
 800e29e:	061b      	lsls	r3, r3, #24
 800e2a0:	431a      	orrs	r2, r3
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	071b      	lsls	r3, r3, #28
 800e2a6:	4990      	ldr	r1, [pc, #576]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e2a8:	4313      	orrs	r3, r2
 800e2aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e2ae:	4b8e      	ldr	r3, [pc, #568]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e2b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e2b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2bc:	3b01      	subs	r3, #1
 800e2be:	021b      	lsls	r3, r3, #8
 800e2c0:	4989      	ldr	r1, [pc, #548]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e2c2:	4313      	orrs	r3, r2
 800e2c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	f003 0308 	and.w	r3, r3, #8
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d02c      	beq.n	800e32e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800e2d4:	4b84      	ldr	r3, [pc, #528]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e2d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2da:	0c1b      	lsrs	r3, r3, #16
 800e2dc:	f003 0303 	and.w	r3, r3, #3
 800e2e0:	3301      	adds	r3, #1
 800e2e2:	005b      	lsls	r3, r3, #1
 800e2e4:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e2e6:	4b80      	ldr	r3, [pc, #512]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e2e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2ec:	0e1b      	lsrs	r3, r3, #24
 800e2ee:	f003 030f 	and.w	r3, r3, #15
 800e2f2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	691b      	ldr	r3, [r3, #16]
 800e2f8:	019a      	lsls	r2, r3, #6
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	085b      	lsrs	r3, r3, #1
 800e2fe:	3b01      	subs	r3, #1
 800e300:	041b      	lsls	r3, r3, #16
 800e302:	431a      	orrs	r2, r3
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	061b      	lsls	r3, r3, #24
 800e308:	431a      	orrs	r2, r3
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	69db      	ldr	r3, [r3, #28]
 800e30e:	071b      	lsls	r3, r3, #28
 800e310:	4975      	ldr	r1, [pc, #468]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e312:	4313      	orrs	r3, r2
 800e314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e318:	4b73      	ldr	r3, [pc, #460]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e31a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e31e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e326:	4970      	ldr	r1, [pc, #448]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e328:	4313      	orrs	r3, r2
 800e32a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e336:	2b00      	cmp	r3, #0
 800e338:	d024      	beq.n	800e384 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800e33e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e342:	d11f      	bne.n	800e384 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e344:	4b68      	ldr	r3, [pc, #416]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e34a:	0e1b      	lsrs	r3, r3, #24
 800e34c:	f003 030f 	and.w	r3, r3, #15
 800e350:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e352:	4b65      	ldr	r3, [pc, #404]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e358:	0f1b      	lsrs	r3, r3, #28
 800e35a:	f003 0307 	and.w	r3, r3, #7
 800e35e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	691b      	ldr	r3, [r3, #16]
 800e364:	019a      	lsls	r2, r3, #6
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	695b      	ldr	r3, [r3, #20]
 800e36a:	085b      	lsrs	r3, r3, #1
 800e36c:	3b01      	subs	r3, #1
 800e36e:	041b      	lsls	r3, r3, #16
 800e370:	431a      	orrs	r2, r3
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	061b      	lsls	r3, r3, #24
 800e376:	431a      	orrs	r2, r3
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	071b      	lsls	r3, r3, #28
 800e37c:	495a      	ldr	r1, [pc, #360]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e37e:	4313      	orrs	r3, r2
 800e380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e384:	4b59      	ldr	r3, [pc, #356]	; (800e4ec <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800e386:	2201      	movs	r2, #1
 800e388:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e38a:	f7fd f9db 	bl	800b744 <HAL_GetTick>
 800e38e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e390:	e008      	b.n	800e3a4 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800e392:	f7fd f9d7 	bl	800b744 <HAL_GetTick>
 800e396:	4602      	mov	r2, r0
 800e398:	69fb      	ldr	r3, [r7, #28]
 800e39a:	1ad3      	subs	r3, r2, r3
 800e39c:	2b02      	cmp	r3, #2
 800e39e:	d901      	bls.n	800e3a4 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e3a0:	2303      	movs	r3, #3
 800e3a2:	e09c      	b.n	800e4de <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e3a4:	4b50      	ldr	r3, [pc, #320]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e3ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e3b0:	d1ef      	bne.n	800e392 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	f003 0320 	and.w	r3, r3, #32
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	f000 8083 	beq.w	800e4c6 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	60bb      	str	r3, [r7, #8]
 800e3c4:	4b48      	ldr	r3, [pc, #288]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3c8:	4a47      	ldr	r2, [pc, #284]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e3ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e3ce:	6413      	str	r3, [r2, #64]	; 0x40
 800e3d0:	4b45      	ldr	r3, [pc, #276]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e3d8:	60bb      	str	r3, [r7, #8]
 800e3da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800e3dc:	4b44      	ldr	r3, [pc, #272]	; (800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	4a43      	ldr	r2, [pc, #268]	; (800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800e3e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e3e6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e3e8:	f7fd f9ac 	bl	800b744 <HAL_GetTick>
 800e3ec:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800e3ee:	e008      	b.n	800e402 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800e3f0:	f7fd f9a8 	bl	800b744 <HAL_GetTick>
 800e3f4:	4602      	mov	r2, r0
 800e3f6:	69fb      	ldr	r3, [r7, #28]
 800e3f8:	1ad3      	subs	r3, r2, r3
 800e3fa:	2b02      	cmp	r3, #2
 800e3fc:	d901      	bls.n	800e402 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800e3fe:	2303      	movs	r3, #3
 800e400:	e06d      	b.n	800e4de <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800e402:	4b3b      	ldr	r3, [pc, #236]	; (800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d0f0      	beq.n	800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e40e:	4b36      	ldr	r3, [pc, #216]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e416:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e418:	69bb      	ldr	r3, [r7, #24]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d02f      	beq.n	800e47e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e426:	69ba      	ldr	r2, [r7, #24]
 800e428:	429a      	cmp	r2, r3
 800e42a:	d028      	beq.n	800e47e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e42c:	4b2e      	ldr	r3, [pc, #184]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e42e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e434:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e436:	4b2f      	ldr	r3, [pc, #188]	; (800e4f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800e438:	2201      	movs	r2, #1
 800e43a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e43c:	4b2d      	ldr	r3, [pc, #180]	; (800e4f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800e43e:	2200      	movs	r2, #0
 800e440:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800e442:	4a29      	ldr	r2, [pc, #164]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e444:	69bb      	ldr	r3, [r7, #24]
 800e446:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e448:	4b27      	ldr	r3, [pc, #156]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e44a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e44c:	f003 0301 	and.w	r3, r3, #1
 800e450:	2b01      	cmp	r3, #1
 800e452:	d114      	bne.n	800e47e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800e454:	f7fd f976 	bl	800b744 <HAL_GetTick>
 800e458:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e45a:	e00a      	b.n	800e472 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e45c:	f7fd f972 	bl	800b744 <HAL_GetTick>
 800e460:	4602      	mov	r2, r0
 800e462:	69fb      	ldr	r3, [r7, #28]
 800e464:	1ad3      	subs	r3, r2, r3
 800e466:	f241 3288 	movw	r2, #5000	; 0x1388
 800e46a:	4293      	cmp	r3, r2
 800e46c:	d901      	bls.n	800e472 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800e46e:	2303      	movs	r3, #3
 800e470:	e035      	b.n	800e4de <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e472:	4b1d      	ldr	r3, [pc, #116]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e476:	f003 0302 	and.w	r3, r3, #2
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d0ee      	beq.n	800e45c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e486:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e48a:	d10d      	bne.n	800e4a8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800e48c:	4b16      	ldr	r3, [pc, #88]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e48e:	689b      	ldr	r3, [r3, #8]
 800e490:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e498:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e49c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e4a0:	4911      	ldr	r1, [pc, #68]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e4a2:	4313      	orrs	r3, r2
 800e4a4:	608b      	str	r3, [r1, #8]
 800e4a6:	e005      	b.n	800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800e4a8:	4b0f      	ldr	r3, [pc, #60]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e4aa:	689b      	ldr	r3, [r3, #8]
 800e4ac:	4a0e      	ldr	r2, [pc, #56]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e4ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800e4b2:	6093      	str	r3, [r2, #8]
 800e4b4:	4b0c      	ldr	r3, [pc, #48]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e4b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e4c0:	4909      	ldr	r1, [pc, #36]	; (800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e4c2:	4313      	orrs	r3, r2
 800e4c4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f003 0310 	and.w	r3, r3, #16
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d004      	beq.n	800e4dc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800e4d8:	4b07      	ldr	r3, [pc, #28]	; (800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800e4da:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800e4dc:	2300      	movs	r3, #0
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3720      	adds	r7, #32
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	40023800 	.word	0x40023800
 800e4ec:	42470070 	.word	0x42470070
 800e4f0:	40007000 	.word	0x40007000
 800e4f4:	42470e40 	.word	0x42470e40
 800e4f8:	424711e0 	.word	0x424711e0

0800e4fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b086      	sub	sp, #24
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e504:	2300      	movs	r3, #0
 800e506:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f003 0301 	and.w	r3, r3, #1
 800e510:	2b00      	cmp	r3, #0
 800e512:	d075      	beq.n	800e600 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800e514:	4ba2      	ldr	r3, [pc, #648]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e516:	689b      	ldr	r3, [r3, #8]
 800e518:	f003 030c 	and.w	r3, r3, #12
 800e51c:	2b04      	cmp	r3, #4
 800e51e:	d00c      	beq.n	800e53a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e520:	4b9f      	ldr	r3, [pc, #636]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e522:	689b      	ldr	r3, [r3, #8]
 800e524:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800e528:	2b08      	cmp	r3, #8
 800e52a:	d112      	bne.n	800e552 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e52c:	4b9c      	ldr	r3, [pc, #624]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e52e:	685b      	ldr	r3, [r3, #4]
 800e530:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e538:	d10b      	bne.n	800e552 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e53a:	4b99      	ldr	r3, [pc, #612]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e542:	2b00      	cmp	r3, #0
 800e544:	d05b      	beq.n	800e5fe <HAL_RCC_OscConfig+0x102>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	685b      	ldr	r3, [r3, #4]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d157      	bne.n	800e5fe <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800e54e:	2301      	movs	r3, #1
 800e550:	e20b      	b.n	800e96a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	685b      	ldr	r3, [r3, #4]
 800e556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e55a:	d106      	bne.n	800e56a <HAL_RCC_OscConfig+0x6e>
 800e55c:	4b90      	ldr	r3, [pc, #576]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	4a8f      	ldr	r2, [pc, #572]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e566:	6013      	str	r3, [r2, #0]
 800e568:	e01d      	b.n	800e5a6 <HAL_RCC_OscConfig+0xaa>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	685b      	ldr	r3, [r3, #4]
 800e56e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e572:	d10c      	bne.n	800e58e <HAL_RCC_OscConfig+0x92>
 800e574:	4b8a      	ldr	r3, [pc, #552]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	4a89      	ldr	r2, [pc, #548]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e57a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e57e:	6013      	str	r3, [r2, #0]
 800e580:	4b87      	ldr	r3, [pc, #540]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	4a86      	ldr	r2, [pc, #536]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e58a:	6013      	str	r3, [r2, #0]
 800e58c:	e00b      	b.n	800e5a6 <HAL_RCC_OscConfig+0xaa>
 800e58e:	4b84      	ldr	r3, [pc, #528]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	4a83      	ldr	r2, [pc, #524]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e598:	6013      	str	r3, [r2, #0]
 800e59a:	4b81      	ldr	r3, [pc, #516]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	4a80      	ldr	r2, [pc, #512]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e5a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e5a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	685b      	ldr	r3, [r3, #4]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d013      	beq.n	800e5d6 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e5ae:	f7fd f8c9 	bl	800b744 <HAL_GetTick>
 800e5b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e5b4:	e008      	b.n	800e5c8 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e5b6:	f7fd f8c5 	bl	800b744 <HAL_GetTick>
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	693b      	ldr	r3, [r7, #16]
 800e5be:	1ad3      	subs	r3, r2, r3
 800e5c0:	2b64      	cmp	r3, #100	; 0x64
 800e5c2:	d901      	bls.n	800e5c8 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800e5c4:	2303      	movs	r3, #3
 800e5c6:	e1d0      	b.n	800e96a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e5c8:	4b75      	ldr	r3, [pc, #468]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d0f0      	beq.n	800e5b6 <HAL_RCC_OscConfig+0xba>
 800e5d4:	e014      	b.n	800e600 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e5d6:	f7fd f8b5 	bl	800b744 <HAL_GetTick>
 800e5da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e5dc:	e008      	b.n	800e5f0 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e5de:	f7fd f8b1 	bl	800b744 <HAL_GetTick>
 800e5e2:	4602      	mov	r2, r0
 800e5e4:	693b      	ldr	r3, [r7, #16]
 800e5e6:	1ad3      	subs	r3, r2, r3
 800e5e8:	2b64      	cmp	r3, #100	; 0x64
 800e5ea:	d901      	bls.n	800e5f0 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800e5ec:	2303      	movs	r3, #3
 800e5ee:	e1bc      	b.n	800e96a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e5f0:	4b6b      	ldr	r3, [pc, #428]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d1f0      	bne.n	800e5de <HAL_RCC_OscConfig+0xe2>
 800e5fc:	e000      	b.n	800e600 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e5fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f003 0302 	and.w	r3, r3, #2
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d063      	beq.n	800e6d4 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800e60c:	4b64      	ldr	r3, [pc, #400]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e60e:	689b      	ldr	r3, [r3, #8]
 800e610:	f003 030c 	and.w	r3, r3, #12
 800e614:	2b00      	cmp	r3, #0
 800e616:	d00b      	beq.n	800e630 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e618:	4b61      	ldr	r3, [pc, #388]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e61a:	689b      	ldr	r3, [r3, #8]
 800e61c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800e620:	2b08      	cmp	r3, #8
 800e622:	d11c      	bne.n	800e65e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e624:	4b5e      	ldr	r3, [pc, #376]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e626:	685b      	ldr	r3, [r3, #4]
 800e628:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d116      	bne.n	800e65e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e630:	4b5b      	ldr	r3, [pc, #364]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	f003 0302 	and.w	r3, r3, #2
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d005      	beq.n	800e648 <HAL_RCC_OscConfig+0x14c>
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	68db      	ldr	r3, [r3, #12]
 800e640:	2b01      	cmp	r3, #1
 800e642:	d001      	beq.n	800e648 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800e644:	2301      	movs	r3, #1
 800e646:	e190      	b.n	800e96a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e648:	4b55      	ldr	r3, [pc, #340]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	691b      	ldr	r3, [r3, #16]
 800e654:	00db      	lsls	r3, r3, #3
 800e656:	4952      	ldr	r1, [pc, #328]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e658:	4313      	orrs	r3, r2
 800e65a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e65c:	e03a      	b.n	800e6d4 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	68db      	ldr	r3, [r3, #12]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d020      	beq.n	800e6a8 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e666:	4b4f      	ldr	r3, [pc, #316]	; (800e7a4 <HAL_RCC_OscConfig+0x2a8>)
 800e668:	2201      	movs	r2, #1
 800e66a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e66c:	f7fd f86a 	bl	800b744 <HAL_GetTick>
 800e670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e672:	e008      	b.n	800e686 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e674:	f7fd f866 	bl	800b744 <HAL_GetTick>
 800e678:	4602      	mov	r2, r0
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	1ad3      	subs	r3, r2, r3
 800e67e:	2b02      	cmp	r3, #2
 800e680:	d901      	bls.n	800e686 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800e682:	2303      	movs	r3, #3
 800e684:	e171      	b.n	800e96a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e686:	4b46      	ldr	r3, [pc, #280]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f003 0302 	and.w	r3, r3, #2
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d0f0      	beq.n	800e674 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e692:	4b43      	ldr	r3, [pc, #268]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	691b      	ldr	r3, [r3, #16]
 800e69e:	00db      	lsls	r3, r3, #3
 800e6a0:	493f      	ldr	r1, [pc, #252]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e6a2:	4313      	orrs	r3, r2
 800e6a4:	600b      	str	r3, [r1, #0]
 800e6a6:	e015      	b.n	800e6d4 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e6a8:	4b3e      	ldr	r3, [pc, #248]	; (800e7a4 <HAL_RCC_OscConfig+0x2a8>)
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e6ae:	f7fd f849 	bl	800b744 <HAL_GetTick>
 800e6b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e6b4:	e008      	b.n	800e6c8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e6b6:	f7fd f845 	bl	800b744 <HAL_GetTick>
 800e6ba:	4602      	mov	r2, r0
 800e6bc:	693b      	ldr	r3, [r7, #16]
 800e6be:	1ad3      	subs	r3, r2, r3
 800e6c0:	2b02      	cmp	r3, #2
 800e6c2:	d901      	bls.n	800e6c8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800e6c4:	2303      	movs	r3, #3
 800e6c6:	e150      	b.n	800e96a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e6c8:	4b35      	ldr	r3, [pc, #212]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	f003 0302 	and.w	r3, r3, #2
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d1f0      	bne.n	800e6b6 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f003 0308 	and.w	r3, r3, #8
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d030      	beq.n	800e742 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	695b      	ldr	r3, [r3, #20]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d016      	beq.n	800e716 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e6e8:	4b2f      	ldr	r3, [pc, #188]	; (800e7a8 <HAL_RCC_OscConfig+0x2ac>)
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e6ee:	f7fd f829 	bl	800b744 <HAL_GetTick>
 800e6f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e6f4:	e008      	b.n	800e708 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e6f6:	f7fd f825 	bl	800b744 <HAL_GetTick>
 800e6fa:	4602      	mov	r2, r0
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	1ad3      	subs	r3, r2, r3
 800e700:	2b02      	cmp	r3, #2
 800e702:	d901      	bls.n	800e708 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800e704:	2303      	movs	r3, #3
 800e706:	e130      	b.n	800e96a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e708:	4b25      	ldr	r3, [pc, #148]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e70a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e70c:	f003 0302 	and.w	r3, r3, #2
 800e710:	2b00      	cmp	r3, #0
 800e712:	d0f0      	beq.n	800e6f6 <HAL_RCC_OscConfig+0x1fa>
 800e714:	e015      	b.n	800e742 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e716:	4b24      	ldr	r3, [pc, #144]	; (800e7a8 <HAL_RCC_OscConfig+0x2ac>)
 800e718:	2200      	movs	r2, #0
 800e71a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e71c:	f7fd f812 	bl	800b744 <HAL_GetTick>
 800e720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e722:	e008      	b.n	800e736 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e724:	f7fd f80e 	bl	800b744 <HAL_GetTick>
 800e728:	4602      	mov	r2, r0
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	1ad3      	subs	r3, r2, r3
 800e72e:	2b02      	cmp	r3, #2
 800e730:	d901      	bls.n	800e736 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800e732:	2303      	movs	r3, #3
 800e734:	e119      	b.n	800e96a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e736:	4b1a      	ldr	r3, [pc, #104]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e73a:	f003 0302 	and.w	r3, r3, #2
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d1f0      	bne.n	800e724 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	f003 0304 	and.w	r3, r3, #4
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	f000 809f 	beq.w	800e88e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e750:	2300      	movs	r3, #0
 800e752:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e754:	4b12      	ldr	r3, [pc, #72]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d10f      	bne.n	800e780 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e760:	2300      	movs	r3, #0
 800e762:	60fb      	str	r3, [r7, #12]
 800e764:	4b0e      	ldr	r3, [pc, #56]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e768:	4a0d      	ldr	r2, [pc, #52]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e76a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e76e:	6413      	str	r3, [r2, #64]	; 0x40
 800e770:	4b0b      	ldr	r3, [pc, #44]	; (800e7a0 <HAL_RCC_OscConfig+0x2a4>)
 800e772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e778:	60fb      	str	r3, [r7, #12]
 800e77a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800e77c:	2301      	movs	r3, #1
 800e77e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e780:	4b0a      	ldr	r3, [pc, #40]	; (800e7ac <HAL_RCC_OscConfig+0x2b0>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d120      	bne.n	800e7ce <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e78c:	4b07      	ldr	r3, [pc, #28]	; (800e7ac <HAL_RCC_OscConfig+0x2b0>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	4a06      	ldr	r2, [pc, #24]	; (800e7ac <HAL_RCC_OscConfig+0x2b0>)
 800e792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e796:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e798:	f7fc ffd4 	bl	800b744 <HAL_GetTick>
 800e79c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e79e:	e010      	b.n	800e7c2 <HAL_RCC_OscConfig+0x2c6>
 800e7a0:	40023800 	.word	0x40023800
 800e7a4:	42470000 	.word	0x42470000
 800e7a8:	42470e80 	.word	0x42470e80
 800e7ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e7b0:	f7fc ffc8 	bl	800b744 <HAL_GetTick>
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	1ad3      	subs	r3, r2, r3
 800e7ba:	2b02      	cmp	r3, #2
 800e7bc:	d901      	bls.n	800e7c2 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800e7be:	2303      	movs	r3, #3
 800e7c0:	e0d3      	b.n	800e96a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e7c2:	4b6c      	ldr	r3, [pc, #432]	; (800e974 <HAL_RCC_OscConfig+0x478>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d0f0      	beq.n	800e7b0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	689b      	ldr	r3, [r3, #8]
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d106      	bne.n	800e7e4 <HAL_RCC_OscConfig+0x2e8>
 800e7d6:	4b68      	ldr	r3, [pc, #416]	; (800e978 <HAL_RCC_OscConfig+0x47c>)
 800e7d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7da:	4a67      	ldr	r2, [pc, #412]	; (800e978 <HAL_RCC_OscConfig+0x47c>)
 800e7dc:	f043 0301 	orr.w	r3, r3, #1
 800e7e0:	6713      	str	r3, [r2, #112]	; 0x70
 800e7e2:	e01c      	b.n	800e81e <HAL_RCC_OscConfig+0x322>
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	689b      	ldr	r3, [r3, #8]
 800e7e8:	2b05      	cmp	r3, #5
 800e7ea:	d10c      	bne.n	800e806 <HAL_RCC_OscConfig+0x30a>
 800e7ec:	4b62      	ldr	r3, [pc, #392]	; (800e978 <HAL_RCC_OscConfig+0x47c>)
 800e7ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7f0:	4a61      	ldr	r2, [pc, #388]	; (800e978 <HAL_RCC_OscConfig+0x47c>)
 800e7f2:	f043 0304 	orr.w	r3, r3, #4
 800e7f6:	6713      	str	r3, [r2, #112]	; 0x70
 800e7f8:	4b5f      	ldr	r3, [pc, #380]	; (800e978 <HAL_RCC_OscConfig+0x47c>)
 800e7fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7fc:	4a5e      	ldr	r2, [pc, #376]	; (800e978 <HAL_RCC_OscConfig+0x47c>)
 800e7fe:	f043 0301 	orr.w	r3, r3, #1
 800e802:	6713      	str	r3, [r2, #112]	; 0x70
 800e804:	e00b      	b.n	800e81e <HAL_RCC_OscConfig+0x322>
 800e806:	4b5c      	ldr	r3, [pc, #368]	; (800e978 <HAL_RCC_OscConfig+0x47c>)
 800e808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e80a:	4a5b      	ldr	r2, [pc, #364]	; (800e978 <HAL_RCC_OscConfig+0x47c>)
 800e80c:	f023 0301 	bic.w	r3, r3, #1
 800e810:	6713      	str	r3, [r2, #112]	; 0x70
 800e812:	4b59      	ldr	r3, [pc, #356]	; (800e978 <HAL_RCC_OscConfig+0x47c>)
 800e814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e816:	4a58      	ldr	r2, [pc, #352]	; (800e978 <HAL_RCC_OscConfig+0x47c>)
 800e818:	f023 0304 	bic.w	r3, r3, #4
 800e81c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	689b      	ldr	r3, [r3, #8]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d015      	beq.n	800e852 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e826:	f7fc ff8d 	bl	800b744 <HAL_GetTick>
 800e82a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e82c:	e00a      	b.n	800e844 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e82e:	f7fc ff89 	bl	800b744 <HAL_GetTick>
 800e832:	4602      	mov	r2, r0
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	1ad3      	subs	r3, r2, r3
 800e838:	f241 3288 	movw	r2, #5000	; 0x1388
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d901      	bls.n	800e844 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800e840:	2303      	movs	r3, #3
 800e842:	e092      	b.n	800e96a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e844:	4b4c      	ldr	r3, [pc, #304]	; (800e978 <HAL_RCC_OscConfig+0x47c>)
 800e846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e848:	f003 0302 	and.w	r3, r3, #2
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d0ee      	beq.n	800e82e <HAL_RCC_OscConfig+0x332>
 800e850:	e014      	b.n	800e87c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e852:	f7fc ff77 	bl	800b744 <HAL_GetTick>
 800e856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e858:	e00a      	b.n	800e870 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e85a:	f7fc ff73 	bl	800b744 <HAL_GetTick>
 800e85e:	4602      	mov	r2, r0
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	1ad3      	subs	r3, r2, r3
 800e864:	f241 3288 	movw	r2, #5000	; 0x1388
 800e868:	4293      	cmp	r3, r2
 800e86a:	d901      	bls.n	800e870 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800e86c:	2303      	movs	r3, #3
 800e86e:	e07c      	b.n	800e96a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e870:	4b41      	ldr	r3, [pc, #260]	; (800e978 <HAL_RCC_OscConfig+0x47c>)
 800e872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e874:	f003 0302 	and.w	r3, r3, #2
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d1ee      	bne.n	800e85a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e87c:	7dfb      	ldrb	r3, [r7, #23]
 800e87e:	2b01      	cmp	r3, #1
 800e880:	d105      	bne.n	800e88e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e882:	4b3d      	ldr	r3, [pc, #244]	; (800e978 <HAL_RCC_OscConfig+0x47c>)
 800e884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e886:	4a3c      	ldr	r2, [pc, #240]	; (800e978 <HAL_RCC_OscConfig+0x47c>)
 800e888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e88c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	699b      	ldr	r3, [r3, #24]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d068      	beq.n	800e968 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e896:	4b38      	ldr	r3, [pc, #224]	; (800e978 <HAL_RCC_OscConfig+0x47c>)
 800e898:	689b      	ldr	r3, [r3, #8]
 800e89a:	f003 030c 	and.w	r3, r3, #12
 800e89e:	2b08      	cmp	r3, #8
 800e8a0:	d060      	beq.n	800e964 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	699b      	ldr	r3, [r3, #24]
 800e8a6:	2b02      	cmp	r3, #2
 800e8a8:	d145      	bne.n	800e936 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e8aa:	4b34      	ldr	r3, [pc, #208]	; (800e97c <HAL_RCC_OscConfig+0x480>)
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e8b0:	f7fc ff48 	bl	800b744 <HAL_GetTick>
 800e8b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e8b6:	e008      	b.n	800e8ca <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e8b8:	f7fc ff44 	bl	800b744 <HAL_GetTick>
 800e8bc:	4602      	mov	r2, r0
 800e8be:	693b      	ldr	r3, [r7, #16]
 800e8c0:	1ad3      	subs	r3, r2, r3
 800e8c2:	2b02      	cmp	r3, #2
 800e8c4:	d901      	bls.n	800e8ca <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800e8c6:	2303      	movs	r3, #3
 800e8c8:	e04f      	b.n	800e96a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e8ca:	4b2b      	ldr	r3, [pc, #172]	; (800e978 <HAL_RCC_OscConfig+0x47c>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d1f0      	bne.n	800e8b8 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	69da      	ldr	r2, [r3, #28]
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	6a1b      	ldr	r3, [r3, #32]
 800e8de:	431a      	orrs	r2, r3
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8e4:	019b      	lsls	r3, r3, #6
 800e8e6:	431a      	orrs	r2, r3
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8ec:	085b      	lsrs	r3, r3, #1
 800e8ee:	3b01      	subs	r3, #1
 800e8f0:	041b      	lsls	r3, r3, #16
 800e8f2:	431a      	orrs	r2, r3
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8f8:	061b      	lsls	r3, r3, #24
 800e8fa:	431a      	orrs	r2, r3
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e900:	071b      	lsls	r3, r3, #28
 800e902:	491d      	ldr	r1, [pc, #116]	; (800e978 <HAL_RCC_OscConfig+0x47c>)
 800e904:	4313      	orrs	r3, r2
 800e906:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e908:	4b1c      	ldr	r3, [pc, #112]	; (800e97c <HAL_RCC_OscConfig+0x480>)
 800e90a:	2201      	movs	r2, #1
 800e90c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e90e:	f7fc ff19 	bl	800b744 <HAL_GetTick>
 800e912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e914:	e008      	b.n	800e928 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e916:	f7fc ff15 	bl	800b744 <HAL_GetTick>
 800e91a:	4602      	mov	r2, r0
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	1ad3      	subs	r3, r2, r3
 800e920:	2b02      	cmp	r3, #2
 800e922:	d901      	bls.n	800e928 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800e924:	2303      	movs	r3, #3
 800e926:	e020      	b.n	800e96a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e928:	4b13      	ldr	r3, [pc, #76]	; (800e978 <HAL_RCC_OscConfig+0x47c>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e930:	2b00      	cmp	r3, #0
 800e932:	d0f0      	beq.n	800e916 <HAL_RCC_OscConfig+0x41a>
 800e934:	e018      	b.n	800e968 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e936:	4b11      	ldr	r3, [pc, #68]	; (800e97c <HAL_RCC_OscConfig+0x480>)
 800e938:	2200      	movs	r2, #0
 800e93a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e93c:	f7fc ff02 	bl	800b744 <HAL_GetTick>
 800e940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e942:	e008      	b.n	800e956 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e944:	f7fc fefe 	bl	800b744 <HAL_GetTick>
 800e948:	4602      	mov	r2, r0
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	1ad3      	subs	r3, r2, r3
 800e94e:	2b02      	cmp	r3, #2
 800e950:	d901      	bls.n	800e956 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800e952:	2303      	movs	r3, #3
 800e954:	e009      	b.n	800e96a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e956:	4b08      	ldr	r3, [pc, #32]	; (800e978 <HAL_RCC_OscConfig+0x47c>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d1f0      	bne.n	800e944 <HAL_RCC_OscConfig+0x448>
 800e962:	e001      	b.n	800e968 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800e964:	2301      	movs	r3, #1
 800e966:	e000      	b.n	800e96a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800e968:	2300      	movs	r3, #0
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3718      	adds	r7, #24
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	40007000 	.word	0x40007000
 800e978:	40023800 	.word	0x40023800
 800e97c:	42470060 	.word	0x42470060

0800e980 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b082      	sub	sp, #8
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d101      	bne.n	800e992 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800e98e:	2301      	movs	r3, #1
 800e990:	e022      	b.n	800e9d8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e998:	b2db      	uxtb	r3, r3
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d105      	bne.n	800e9aa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f7f8 ffa5 	bl	80078f4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2203      	movs	r2, #3
 800e9ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f000 f814 	bl	800e9e0 <HAL_SD_InitCard>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d001      	beq.n	800e9c2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800e9be:	2301      	movs	r3, #1
 800e9c0:	e00a      	b.n	800e9d8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2201      	movs	r2, #1
 800e9d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800e9d6:	2300      	movs	r3, #0
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	3708      	adds	r7, #8
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}

0800e9e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e9e0:	b5b0      	push	{r4, r5, r7, lr}
 800e9e2:	b08e      	sub	sp, #56	; 0x38
 800e9e4:	af04      	add	r7, sp, #16
 800e9e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800e9fc:	2376      	movs	r3, #118	; 0x76
 800e9fe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681d      	ldr	r5, [r3, #0]
 800ea04:	466c      	mov	r4, sp
 800ea06:	f107 0314 	add.w	r3, r7, #20
 800ea0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ea0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ea12:	f107 0308 	add.w	r3, r7, #8
 800ea16:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ea18:	4628      	mov	r0, r5
 800ea1a:	f003 fa87 	bl	8011f2c <SDIO_Init>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800ea24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d001      	beq.n	800ea30 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	e031      	b.n	800ea94 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800ea30:	4b1a      	ldr	r3, [pc, #104]	; (800ea9c <HAL_SD_InitCard+0xbc>)
 800ea32:	2200      	movs	r2, #0
 800ea34:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f003 fabf 	bl	8011fbe <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800ea40:	4b16      	ldr	r3, [pc, #88]	; (800ea9c <HAL_SD_InitCard+0xbc>)
 800ea42:	2201      	movs	r2, #1
 800ea44:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f000 ffc6 	bl	800f9d8 <SD_PowerON>
 800ea4c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ea4e:	6a3b      	ldr	r3, [r7, #32]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d00b      	beq.n	800ea6c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2201      	movs	r2, #1
 800ea58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea60:	6a3b      	ldr	r3, [r7, #32]
 800ea62:	431a      	orrs	r2, r3
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ea68:	2301      	movs	r3, #1
 800ea6a:	e013      	b.n	800ea94 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f000 fee5 	bl	800f83c <SD_InitCard>
 800ea72:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ea74:	6a3b      	ldr	r3, [r7, #32]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d00b      	beq.n	800ea92 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2201      	movs	r2, #1
 800ea7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea86:	6a3b      	ldr	r3, [r7, #32]
 800ea88:	431a      	orrs	r2, r3
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ea8e:	2301      	movs	r3, #1
 800ea90:	e000      	b.n	800ea94 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800ea92:	2300      	movs	r3, #0
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3728      	adds	r7, #40	; 0x28
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bdb0      	pop	{r4, r5, r7, pc}
 800ea9c:	422580a0 	.word	0x422580a0

0800eaa0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b08c      	sub	sp, #48	; 0x30
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	60f8      	str	r0, [r7, #12]
 800eaa8:	60b9      	str	r1, [r7, #8]
 800eaaa:	607a      	str	r2, [r7, #4]
 800eaac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d107      	bne.n	800eac8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eabc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800eac4:	2301      	movs	r3, #1
 800eac6:	e0c7      	b.n	800ec58 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eace:	b2db      	uxtb	r3, r3
 800ead0:	2b01      	cmp	r3, #1
 800ead2:	f040 80c0 	bne.w	800ec56 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	2200      	movs	r2, #0
 800eada:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800eadc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	441a      	add	r2, r3
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d907      	bls.n	800eafa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	e0ae      	b.n	800ec58 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	2203      	movs	r2, #3
 800eafe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	2200      	movs	r2, #0
 800eb08:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800eb18:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb1e:	4a50      	ldr	r2, [pc, #320]	; (800ec60 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800eb20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb26:	4a4f      	ldr	r2, [pc, #316]	; (800ec64 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800eb28:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb2e:	2200      	movs	r2, #0
 800eb30:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	3380      	adds	r3, #128	; 0x80
 800eb3c:	4619      	mov	r1, r3
 800eb3e:	68ba      	ldr	r2, [r7, #8]
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	025b      	lsls	r3, r3, #9
 800eb44:	089b      	lsrs	r3, r3, #2
 800eb46:	f7fd fbef 	bl	800c328 <HAL_DMA_Start_IT>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d017      	beq.n	800eb80 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800eb5e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	4a40      	ldr	r2, [pc, #256]	; (800ec68 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800eb66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	2201      	movs	r2, #1
 800eb78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	e06b      	b.n	800ec58 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800eb80:	4b3a      	ldr	r3, [pc, #232]	; (800ec6c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800eb82:	2201      	movs	r2, #1
 800eb84:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb8a:	2b01      	cmp	r3, #1
 800eb8c:	d002      	beq.n	800eb94 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800eb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb90:	025b      	lsls	r3, r3, #9
 800eb92:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	f44f 7100 	mov.w	r1, #512	; 0x200
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f003 faa1 	bl	80120e4 <SDMMC_CmdBlockLength>
 800eba2:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800eba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d00f      	beq.n	800ebca <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	4a2e      	ldr	r2, [pc, #184]	; (800ec68 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800ebb0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb8:	431a      	orrs	r2, r3
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	2201      	movs	r2, #1
 800ebc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	e046      	b.n	800ec58 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ebca:	f04f 33ff 	mov.w	r3, #4294967295
 800ebce:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	025b      	lsls	r3, r3, #9
 800ebd4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ebd6:	2390      	movs	r3, #144	; 0x90
 800ebd8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800ebda:	2302      	movs	r3, #2
 800ebdc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f107 0210 	add.w	r2, r7, #16
 800ebee:	4611      	mov	r1, r2
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f003 fa4b 	bl	801208c <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	2b01      	cmp	r3, #1
 800ebfa:	d90a      	bls.n	800ec12 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2282      	movs	r2, #130	; 0x82
 800ec00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f003 faaf 	bl	801216c <SDMMC_CmdReadMultiBlock>
 800ec0e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ec10:	e009      	b.n	800ec26 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	2281      	movs	r2, #129	; 0x81
 800ec16:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f003 fa82 	bl	8012128 <SDMMC_CmdReadSingleBlock>
 800ec24:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800ec26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d012      	beq.n	800ec52 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4a0d      	ldr	r2, [pc, #52]	; (800ec68 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800ec32:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3a:	431a      	orrs	r2, r3
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	2201      	movs	r2, #1
 800ec44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800ec4e:	2301      	movs	r3, #1
 800ec50:	e002      	b.n	800ec58 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800ec52:	2300      	movs	r3, #0
 800ec54:	e000      	b.n	800ec58 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800ec56:	2302      	movs	r3, #2
  }
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3730      	adds	r7, #48	; 0x30
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}
 800ec60:	0800f64b 	.word	0x0800f64b
 800ec64:	0800f6bd 	.word	0x0800f6bd
 800ec68:	004005ff 	.word	0x004005ff
 800ec6c:	4225858c 	.word	0x4225858c

0800ec70 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b08c      	sub	sp, #48	; 0x30
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	60f8      	str	r0, [r7, #12]
 800ec78:	60b9      	str	r1, [r7, #8]
 800ec7a:	607a      	str	r2, [r7, #4]
 800ec7c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d107      	bne.n	800ec98 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec8c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ec94:	2301      	movs	r3, #1
 800ec96:	e0ca      	b.n	800ee2e <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ec9e:	b2db      	uxtb	r3, r3
 800eca0:	2b01      	cmp	r3, #1
 800eca2:	f040 80c3 	bne.w	800ee2c <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ecac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	441a      	add	r2, r3
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	d907      	bls.n	800ecca <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecbe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	e0b1      	b.n	800ee2e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	2203      	movs	r2, #3
 800ecce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	f042 021a 	orr.w	r2, r2, #26
 800ece8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecee:	4a52      	ldr	r2, [pc, #328]	; (800ee38 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800ecf0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecf6:	4a51      	ldr	r2, [pc, #324]	; (800ee3c <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800ecf8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecfe:	2200      	movs	r2, #0
 800ed00:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed06:	2b01      	cmp	r3, #1
 800ed08:	d002      	beq.n	800ed10 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800ed0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed0c:	025b      	lsls	r3, r3, #9
 800ed0e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f003 f9e3 	bl	80120e4 <SDMMC_CmdBlockLength>
 800ed1e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ed20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d00f      	beq.n	800ed46 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	4a45      	ldr	r2, [pc, #276]	; (800ee40 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800ed2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed34:	431a      	orrs	r2, r3
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	2201      	movs	r2, #1
 800ed3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ed42:	2301      	movs	r3, #1
 800ed44:	e073      	b.n	800ee2e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	2b01      	cmp	r3, #1
 800ed4a:	d90a      	bls.n	800ed62 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	22a0      	movs	r2, #160	; 0xa0
 800ed50:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f003 fa4b 	bl	80121f4 <SDMMC_CmdWriteMultiBlock>
 800ed5e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ed60:	e009      	b.n	800ed76 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	2290      	movs	r2, #144	; 0x90
 800ed66:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f003 fa1e 	bl	80121b0 <SDMMC_CmdWriteSingleBlock>
 800ed74:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ed76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d012      	beq.n	800eda2 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	4a2f      	ldr	r2, [pc, #188]	; (800ee40 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800ed82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed8a:	431a      	orrs	r2, r3
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	2201      	movs	r2, #1
 800ed94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ed9e:	2301      	movs	r3, #1
 800eda0:	e045      	b.n	800ee2e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800eda2:	4b28      	ldr	r3, [pc, #160]	; (800ee44 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800eda4:	2201      	movs	r2, #1
 800eda6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800edac:	68b9      	ldr	r1, [r7, #8]
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	3380      	adds	r3, #128	; 0x80
 800edb4:	461a      	mov	r2, r3
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	025b      	lsls	r3, r3, #9
 800edba:	089b      	lsrs	r3, r3, #2
 800edbc:	f7fd fab4 	bl	800c328 <HAL_DMA_Start_IT>
 800edc0:	4603      	mov	r3, r0
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d01a      	beq.n	800edfc <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	f022 021a 	bic.w	r2, r2, #26
 800edd4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	4a19      	ldr	r2, [pc, #100]	; (800ee40 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800eddc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ede2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	2201      	movs	r2, #1
 800edee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	2200      	movs	r2, #0
 800edf6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800edf8:	2301      	movs	r3, #1
 800edfa:	e018      	b.n	800ee2e <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800edfc:	f04f 33ff 	mov.w	r3, #4294967295
 800ee00:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	025b      	lsls	r3, r3, #9
 800ee06:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ee08:	2390      	movs	r3, #144	; 0x90
 800ee0a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ee10:	2300      	movs	r3, #0
 800ee12:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800ee14:	2301      	movs	r3, #1
 800ee16:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	f107 0210 	add.w	r2, r7, #16
 800ee20:	4611      	mov	r1, r2
 800ee22:	4618      	mov	r0, r3
 800ee24:	f003 f932 	bl	801208c <SDIO_ConfigData>

      return HAL_OK;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	e000      	b.n	800ee2e <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800ee2c:	2302      	movs	r3, #2
  }
}
 800ee2e:	4618      	mov	r0, r3
 800ee30:	3730      	adds	r7, #48	; 0x30
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
 800ee36:	bf00      	nop
 800ee38:	0800f621 	.word	0x0800f621
 800ee3c:	0800f6bd 	.word	0x0800f6bd
 800ee40:	004005ff 	.word	0x004005ff
 800ee44:	4225858c 	.word	0x4225858c

0800ee48 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b084      	sub	sp, #16
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee54:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d008      	beq.n	800ee76 <HAL_SD_IRQHandler+0x2e>
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f003 0308 	and.w	r3, r3, #8
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d003      	beq.n	800ee76 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f000 ffc8 	bl	800fe04 <SD_Read_IT>
 800ee74:	e155      	b.n	800f122 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f000 808f 	beq.w	800efa4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ee8e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee96:	687a      	ldr	r2, [r7, #4]
 800ee98:	6812      	ldr	r2, [r2, #0]
 800ee9a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800ee9e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800eea2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	f022 0201 	bic.w	r2, r2, #1
 800eeb2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	f003 0308 	and.w	r3, r3, #8
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d039      	beq.n	800ef32 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	f003 0302 	and.w	r3, r3, #2
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d104      	bne.n	800eed2 <HAL_SD_IRQHandler+0x8a>
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	f003 0320 	and.w	r3, r3, #32
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d011      	beq.n	800eef6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	4618      	mov	r0, r3
 800eed8:	f003 f9ae 	bl	8012238 <SDMMC_CmdStopTransfer>
 800eedc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d008      	beq.n	800eef6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	431a      	orrs	r2, r3
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800eef0:	6878      	ldr	r0, [r7, #4]
 800eef2:	f000 f91f 	bl	800f134 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	f240 523a 	movw	r2, #1338	; 0x53a
 800eefe:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2201      	movs	r2, #1
 800ef04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	f003 0301 	and.w	r3, r3, #1
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d104      	bne.n	800ef22 <HAL_SD_IRQHandler+0xda>
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	f003 0302 	and.w	r3, r3, #2
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d003      	beq.n	800ef2a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f003 fe04 	bl	8012b30 <HAL_SD_RxCpltCallback>
 800ef28:	e0fb      	b.n	800f122 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	f003 fdf6 	bl	8012b1c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ef30:	e0f7      	b.n	800f122 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	f000 80f2 	beq.w	800f122 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	f003 0320 	and.w	r3, r3, #32
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d011      	beq.n	800ef6c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f003 f973 	bl	8012238 <SDMMC_CmdStopTransfer>
 800ef52:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d008      	beq.n	800ef6c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	431a      	orrs	r2, r3
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f000 f8e4 	bl	800f134 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	f003 0301 	and.w	r3, r3, #1
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	f040 80d5 	bne.w	800f122 <HAL_SD_IRQHandler+0x2da>
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f003 0302 	and.w	r3, r3, #2
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	f040 80cf 	bne.w	800f122 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	f022 0208 	bic.w	r2, r2, #8
 800ef92:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2201      	movs	r2, #1
 800ef98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f003 fdbd 	bl	8012b1c <HAL_SD_TxCpltCallback>
}
 800efa2:	e0be      	b.n	800f122 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d008      	beq.n	800efc4 <HAL_SD_IRQHandler+0x17c>
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	f003 0308 	and.w	r3, r3, #8
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d003      	beq.n	800efc4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	f000 ff72 	bl	800fea6 <SD_Write_IT>
 800efc2:	e0ae      	b.n	800f122 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efca:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800efce:	2b00      	cmp	r3, #0
 800efd0:	f000 80a7 	beq.w	800f122 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efda:	f003 0302 	and.w	r3, r3, #2
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d005      	beq.n	800efee <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efe6:	f043 0202 	orr.w	r2, r3, #2
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eff4:	f003 0308 	and.w	r3, r3, #8
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d005      	beq.n	800f008 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f000:	f043 0208 	orr.w	r2, r3, #8
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f00e:	f003 0320 	and.w	r3, r3, #32
 800f012:	2b00      	cmp	r3, #0
 800f014:	d005      	beq.n	800f022 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f01a:	f043 0220 	orr.w	r2, r3, #32
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f028:	f003 0310 	and.w	r3, r3, #16
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d005      	beq.n	800f03c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f034:	f043 0210 	orr.w	r2, r3, #16
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	f240 523a 	movw	r2, #1338	; 0x53a
 800f044:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800f054:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	4618      	mov	r0, r3
 800f05c:	f003 f8ec 	bl	8012238 <SDMMC_CmdStopTransfer>
 800f060:	4602      	mov	r2, r0
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f066:	431a      	orrs	r2, r3
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	f003 0308 	and.w	r3, r3, #8
 800f072:	2b00      	cmp	r3, #0
 800f074:	d00a      	beq.n	800f08c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2201      	movs	r2, #1
 800f07a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2200      	movs	r2, #0
 800f082:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f000 f855 	bl	800f134 <HAL_SD_ErrorCallback>
}
 800f08a:	e04a      	b.n	800f122 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f092:	2b00      	cmp	r3, #0
 800f094:	d045      	beq.n	800f122 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	f003 0310 	and.w	r3, r3, #16
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d104      	bne.n	800f0aa <HAL_SD_IRQHandler+0x262>
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	f003 0320 	and.w	r3, r3, #32
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d011      	beq.n	800f0ce <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0ae:	4a1f      	ldr	r2, [pc, #124]	; (800f12c <HAL_SD_IRQHandler+0x2e4>)
 800f0b0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f7fd f98e 	bl	800c3d8 <HAL_DMA_Abort_IT>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d02f      	beq.n	800f122 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f000 fb4a 	bl	800f760 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800f0cc:	e029      	b.n	800f122 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	f003 0301 	and.w	r3, r3, #1
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d104      	bne.n	800f0e2 <HAL_SD_IRQHandler+0x29a>
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	f003 0302 	and.w	r3, r3, #2
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d011      	beq.n	800f106 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0e6:	4a12      	ldr	r2, [pc, #72]	; (800f130 <HAL_SD_IRQHandler+0x2e8>)
 800f0e8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7fd f972 	bl	800c3d8 <HAL_DMA_Abort_IT>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d013      	beq.n	800f122 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0fe:	4618      	mov	r0, r3
 800f100:	f000 fb65 	bl	800f7ce <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800f104:	e00d      	b.n	800f122 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2200      	movs	r2, #0
 800f10a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2201      	movs	r2, #1
 800f110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2200      	movs	r2, #0
 800f118:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f003 fcf4 	bl	8012b08 <HAL_SD_AbortCallback>
}
 800f120:	e7ff      	b.n	800f122 <HAL_SD_IRQHandler+0x2da>
 800f122:	bf00      	nop
 800f124:	3710      	adds	r7, #16
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}
 800f12a:	bf00      	nop
 800f12c:	0800f761 	.word	0x0800f761
 800f130:	0800f7cf 	.word	0x0800f7cf

0800f134 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800f134:	b480      	push	{r7}
 800f136:	b083      	sub	sp, #12
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800f13c:	bf00      	nop
 800f13e:	370c      	adds	r7, #12
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr

0800f148 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800f148:	b480      	push	{r7}
 800f14a:	b083      	sub	sp, #12
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f156:	0f9b      	lsrs	r3, r3, #30
 800f158:	b2da      	uxtb	r2, r3
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f162:	0e9b      	lsrs	r3, r3, #26
 800f164:	b2db      	uxtb	r3, r3
 800f166:	f003 030f 	and.w	r3, r3, #15
 800f16a:	b2da      	uxtb	r2, r3
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f174:	0e1b      	lsrs	r3, r3, #24
 800f176:	b2db      	uxtb	r3, r3
 800f178:	f003 0303 	and.w	r3, r3, #3
 800f17c:	b2da      	uxtb	r2, r3
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f186:	0c1b      	lsrs	r3, r3, #16
 800f188:	b2da      	uxtb	r2, r3
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f192:	0a1b      	lsrs	r3, r3, #8
 800f194:	b2da      	uxtb	r2, r3
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f19e:	b2da      	uxtb	r2, r3
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f1a8:	0d1b      	lsrs	r3, r3, #20
 800f1aa:	b29a      	uxth	r2, r3
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f1b4:	0c1b      	lsrs	r3, r3, #16
 800f1b6:	b2db      	uxtb	r3, r3
 800f1b8:	f003 030f 	and.w	r3, r3, #15
 800f1bc:	b2da      	uxtb	r2, r3
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f1c6:	0bdb      	lsrs	r3, r3, #15
 800f1c8:	b2db      	uxtb	r3, r3
 800f1ca:	f003 0301 	and.w	r3, r3, #1
 800f1ce:	b2da      	uxtb	r2, r3
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f1d8:	0b9b      	lsrs	r3, r3, #14
 800f1da:	b2db      	uxtb	r3, r3
 800f1dc:	f003 0301 	and.w	r3, r3, #1
 800f1e0:	b2da      	uxtb	r2, r3
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f1ea:	0b5b      	lsrs	r3, r3, #13
 800f1ec:	b2db      	uxtb	r3, r3
 800f1ee:	f003 0301 	and.w	r3, r3, #1
 800f1f2:	b2da      	uxtb	r2, r3
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f1fc:	0b1b      	lsrs	r3, r3, #12
 800f1fe:	b2db      	uxtb	r3, r3
 800f200:	f003 0301 	and.w	r3, r3, #1
 800f204:	b2da      	uxtb	r2, r3
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	2200      	movs	r2, #0
 800f20e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f214:	2b00      	cmp	r3, #0
 800f216:	d163      	bne.n	800f2e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f21c:	009a      	lsls	r2, r3, #2
 800f21e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800f222:	4013      	ands	r3, r2
 800f224:	687a      	ldr	r2, [r7, #4]
 800f226:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800f228:	0f92      	lsrs	r2, r2, #30
 800f22a:	431a      	orrs	r2, r3
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f234:	0edb      	lsrs	r3, r3, #27
 800f236:	b2db      	uxtb	r3, r3
 800f238:	f003 0307 	and.w	r3, r3, #7
 800f23c:	b2da      	uxtb	r2, r3
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f246:	0e1b      	lsrs	r3, r3, #24
 800f248:	b2db      	uxtb	r3, r3
 800f24a:	f003 0307 	and.w	r3, r3, #7
 800f24e:	b2da      	uxtb	r2, r3
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f258:	0d5b      	lsrs	r3, r3, #21
 800f25a:	b2db      	uxtb	r3, r3
 800f25c:	f003 0307 	and.w	r3, r3, #7
 800f260:	b2da      	uxtb	r2, r3
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f26a:	0c9b      	lsrs	r3, r3, #18
 800f26c:	b2db      	uxtb	r3, r3
 800f26e:	f003 0307 	and.w	r3, r3, #7
 800f272:	b2da      	uxtb	r2, r3
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f27c:	0bdb      	lsrs	r3, r3, #15
 800f27e:	b2db      	uxtb	r3, r3
 800f280:	f003 0307 	and.w	r3, r3, #7
 800f284:	b2da      	uxtb	r2, r3
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	691b      	ldr	r3, [r3, #16]
 800f28e:	1c5a      	adds	r2, r3, #1
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	7e1b      	ldrb	r3, [r3, #24]
 800f298:	b2db      	uxtb	r3, r3
 800f29a:	f003 0307 	and.w	r3, r3, #7
 800f29e:	3302      	adds	r3, #2
 800f2a0:	2201      	movs	r2, #1
 800f2a2:	fa02 f303 	lsl.w	r3, r2, r3
 800f2a6:	687a      	ldr	r2, [r7, #4]
 800f2a8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800f2aa:	fb02 f203 	mul.w	r2, r2, r3
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	7a1b      	ldrb	r3, [r3, #8]
 800f2b6:	b2db      	uxtb	r3, r3
 800f2b8:	f003 030f 	and.w	r3, r3, #15
 800f2bc:	2201      	movs	r2, #1
 800f2be:	409a      	lsls	r2, r3
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2c8:	687a      	ldr	r2, [r7, #4]
 800f2ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800f2cc:	0a52      	lsrs	r2, r2, #9
 800f2ce:	fb02 f203 	mul.w	r2, r2, r3
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f2dc:	661a      	str	r2, [r3, #96]	; 0x60
 800f2de:	e031      	b.n	800f344 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2e4:	2b01      	cmp	r3, #1
 800f2e6:	d11d      	bne.n	800f324 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f2ec:	041b      	lsls	r3, r3, #16
 800f2ee:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2f6:	0c1b      	lsrs	r3, r3, #16
 800f2f8:	431a      	orrs	r2, r3
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	691b      	ldr	r3, [r3, #16]
 800f302:	3301      	adds	r3, #1
 800f304:	029a      	lsls	r2, r3, #10
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f318:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	661a      	str	r2, [r3, #96]	; 0x60
 800f322:	e00f      	b.n	800f344 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	4a58      	ldr	r2, [pc, #352]	; (800f48c <HAL_SD_GetCardCSD+0x344>)
 800f32a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f330:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2201      	movs	r2, #1
 800f33c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800f340:	2301      	movs	r3, #1
 800f342:	e09d      	b.n	800f480 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f348:	0b9b      	lsrs	r3, r3, #14
 800f34a:	b2db      	uxtb	r3, r3
 800f34c:	f003 0301 	and.w	r3, r3, #1
 800f350:	b2da      	uxtb	r2, r3
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f35a:	09db      	lsrs	r3, r3, #7
 800f35c:	b2db      	uxtb	r3, r3
 800f35e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f362:	b2da      	uxtb	r2, r3
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f36c:	b2db      	uxtb	r3, r3
 800f36e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f372:	b2da      	uxtb	r2, r3
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f37c:	0fdb      	lsrs	r3, r3, #31
 800f37e:	b2da      	uxtb	r2, r3
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f388:	0f5b      	lsrs	r3, r3, #29
 800f38a:	b2db      	uxtb	r3, r3
 800f38c:	f003 0303 	and.w	r3, r3, #3
 800f390:	b2da      	uxtb	r2, r3
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f39a:	0e9b      	lsrs	r3, r3, #26
 800f39c:	b2db      	uxtb	r3, r3
 800f39e:	f003 0307 	and.w	r3, r3, #7
 800f3a2:	b2da      	uxtb	r2, r3
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3ac:	0d9b      	lsrs	r3, r3, #22
 800f3ae:	b2db      	uxtb	r3, r3
 800f3b0:	f003 030f 	and.w	r3, r3, #15
 800f3b4:	b2da      	uxtb	r2, r3
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3be:	0d5b      	lsrs	r3, r3, #21
 800f3c0:	b2db      	uxtb	r3, r3
 800f3c2:	f003 0301 	and.w	r3, r3, #1
 800f3c6:	b2da      	uxtb	r2, r3
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3da:	0c1b      	lsrs	r3, r3, #16
 800f3dc:	b2db      	uxtb	r3, r3
 800f3de:	f003 0301 	and.w	r3, r3, #1
 800f3e2:	b2da      	uxtb	r2, r3
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3ee:	0bdb      	lsrs	r3, r3, #15
 800f3f0:	b2db      	uxtb	r3, r3
 800f3f2:	f003 0301 	and.w	r3, r3, #1
 800f3f6:	b2da      	uxtb	r2, r3
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f402:	0b9b      	lsrs	r3, r3, #14
 800f404:	b2db      	uxtb	r3, r3
 800f406:	f003 0301 	and.w	r3, r3, #1
 800f40a:	b2da      	uxtb	r2, r3
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f416:	0b5b      	lsrs	r3, r3, #13
 800f418:	b2db      	uxtb	r3, r3
 800f41a:	f003 0301 	and.w	r3, r3, #1
 800f41e:	b2da      	uxtb	r2, r3
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f42a:	0b1b      	lsrs	r3, r3, #12
 800f42c:	b2db      	uxtb	r3, r3
 800f42e:	f003 0301 	and.w	r3, r3, #1
 800f432:	b2da      	uxtb	r2, r3
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f43e:	0a9b      	lsrs	r3, r3, #10
 800f440:	b2db      	uxtb	r3, r3
 800f442:	f003 0303 	and.w	r3, r3, #3
 800f446:	b2da      	uxtb	r2, r3
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f452:	0a1b      	lsrs	r3, r3, #8
 800f454:	b2db      	uxtb	r3, r3
 800f456:	f003 0303 	and.w	r3, r3, #3
 800f45a:	b2da      	uxtb	r2, r3
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f466:	085b      	lsrs	r3, r3, #1
 800f468:	b2db      	uxtb	r3, r3
 800f46a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f46e:	b2da      	uxtb	r2, r3
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	2201      	movs	r2, #1
 800f47a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800f47e:	2300      	movs	r3, #0
}
 800f480:	4618      	mov	r0, r3
 800f482:	370c      	adds	r7, #12
 800f484:	46bd      	mov	sp, r7
 800f486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48a:	4770      	bx	lr
 800f48c:	004005ff 	.word	0x004005ff

0800f490 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800f490:	b480      	push	{r7}
 800f492:	b083      	sub	sp, #12
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
 800f498:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800f4da:	2300      	movs	r3, #0
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	370c      	adds	r7, #12
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e6:	4770      	bx	lr

0800f4e8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800f4e8:	b5b0      	push	{r4, r5, r7, lr}
 800f4ea:	b08e      	sub	sp, #56	; 0x38
 800f4ec:	af04      	add	r7, sp, #16
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2203      	movs	r2, #3
 800f4f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4fe:	2b03      	cmp	r3, #3
 800f500:	d02e      	beq.n	800f560 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f508:	d106      	bne.n	800f518 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f50e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	639a      	str	r2, [r3, #56]	; 0x38
 800f516:	e029      	b.n	800f56c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f51e:	d10a      	bne.n	800f536 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800f520:	6878      	ldr	r0, [r7, #4]
 800f522:	f000 fb0f 	bl	800fb44 <SD_WideBus_Enable>
 800f526:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52e:	431a      	orrs	r2, r3
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	639a      	str	r2, [r3, #56]	; 0x38
 800f534:	e01a      	b.n	800f56c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d10a      	bne.n	800f552 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f000 fb4c 	bl	800fbda <SD_WideBus_Disable>
 800f542:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f54a:	431a      	orrs	r2, r3
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	639a      	str	r2, [r3, #56]	; 0x38
 800f550:	e00c      	b.n	800f56c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f556:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	639a      	str	r2, [r3, #56]	; 0x38
 800f55e:	e005      	b.n	800f56c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f564:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f570:	2b00      	cmp	r3, #0
 800f572:	d009      	beq.n	800f588 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	4a18      	ldr	r2, [pc, #96]	; (800f5dc <HAL_SD_ConfigWideBusOperation+0xf4>)
 800f57a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2201      	movs	r2, #1
 800f580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800f584:	2301      	movs	r3, #1
 800f586:	e024      	b.n	800f5d2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	685b      	ldr	r3, [r3, #4]
 800f58c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	689b      	ldr	r3, [r3, #8]
 800f592:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	68db      	ldr	r3, [r3, #12]
 800f598:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	695b      	ldr	r3, [r3, #20]
 800f5a2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	699b      	ldr	r3, [r3, #24]
 800f5a8:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681d      	ldr	r5, [r3, #0]
 800f5ae:	466c      	mov	r4, sp
 800f5b0:	f107 0318 	add.w	r3, r7, #24
 800f5b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f5b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f5bc:	f107 030c 	add.w	r3, r7, #12
 800f5c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f5c2:	4628      	mov	r0, r5
 800f5c4:	f002 fcb2 	bl	8011f2c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800f5d0:	2300      	movs	r3, #0
}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	3728      	adds	r7, #40	; 0x28
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bdb0      	pop	{r4, r5, r7, pc}
 800f5da:	bf00      	nop
 800f5dc:	004005ff 	.word	0x004005ff

0800f5e0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b086      	sub	sp, #24
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800f5ec:	f107 030c 	add.w	r3, r7, #12
 800f5f0:	4619      	mov	r1, r3
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f000 fa7e 	bl	800faf4 <SD_SendStatus>
 800f5f8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d005      	beq.n	800f60c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	431a      	orrs	r2, r3
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	0a5b      	lsrs	r3, r3, #9
 800f610:	f003 030f 	and.w	r3, r3, #15
 800f614:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800f616:	693b      	ldr	r3, [r7, #16]
}
 800f618:	4618      	mov	r0, r3
 800f61a:	3718      	adds	r7, #24
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd80      	pop	{r7, pc}

0800f620 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f620:	b480      	push	{r7}
 800f622:	b085      	sub	sp, #20
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f62c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f63c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800f63e:	bf00      	nop
 800f640:	3714      	adds	r7, #20
 800f642:	46bd      	mov	sp, r7
 800f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f648:	4770      	bx	lr

0800f64a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f64a:	b580      	push	{r7, lr}
 800f64c:	b084      	sub	sp, #16
 800f64e:	af00      	add	r7, sp, #0
 800f650:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f656:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f65c:	2b82      	cmp	r3, #130	; 0x82
 800f65e:	d111      	bne.n	800f684 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	4618      	mov	r0, r3
 800f666:	f002 fde7 	bl	8012238 <SDMMC_CmdStopTransfer>
 800f66a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d008      	beq.n	800f684 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	431a      	orrs	r2, r3
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800f67e:	68f8      	ldr	r0, [r7, #12]
 800f680:	f7ff fd58 	bl	800f134 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	f022 0208 	bic.w	r2, r2, #8
 800f692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	f240 523a 	movw	r2, #1338	; 0x53a
 800f69c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	2201      	movs	r2, #1
 800f6a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800f6ac:	68f8      	ldr	r0, [r7, #12]
 800f6ae:	f003 fa3f 	bl	8012b30 <HAL_SD_RxCpltCallback>
#endif
}
 800f6b2:	bf00      	nop
 800f6b4:	3710      	adds	r7, #16
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}
	...

0800f6bc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b086      	sub	sp, #24
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6c8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f7fd f830 	bl	800c730 <HAL_DMA_GetError>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	2b02      	cmp	r3, #2
 800f6d4:	d03e      	beq.n	800f754 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800f6d6:	697b      	ldr	r3, [r7, #20]
 800f6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6dc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800f6de:	697b      	ldr	r3, [r7, #20]
 800f6e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6e4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800f6e6:	693b      	ldr	r3, [r7, #16]
 800f6e8:	2b01      	cmp	r3, #1
 800f6ea:	d002      	beq.n	800f6f2 <SD_DMAError+0x36>
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	2b01      	cmp	r3, #1
 800f6f0:	d12d      	bne.n	800f74e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	4a19      	ldr	r2, [pc, #100]	; (800f75c <SD_DMAError+0xa0>)
 800f6f8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f700:	697b      	ldr	r3, [r7, #20]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800f708:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800f70a:	697b      	ldr	r3, [r7, #20]
 800f70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f70e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800f716:	6978      	ldr	r0, [r7, #20]
 800f718:	f7ff ff62 	bl	800f5e0 <HAL_SD_GetCardState>
 800f71c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	2b06      	cmp	r3, #6
 800f722:	d002      	beq.n	800f72a <SD_DMAError+0x6e>
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	2b05      	cmp	r3, #5
 800f728:	d10a      	bne.n	800f740 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800f72a:	697b      	ldr	r3, [r7, #20]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	4618      	mov	r0, r3
 800f730:	f002 fd82 	bl	8012238 <SDMMC_CmdStopTransfer>
 800f734:	4602      	mov	r2, r0
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f73a:	431a      	orrs	r2, r3
 800f73c:	697b      	ldr	r3, [r7, #20]
 800f73e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	2201      	movs	r2, #1
 800f744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	2200      	movs	r2, #0
 800f74c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800f74e:	6978      	ldr	r0, [r7, #20]
 800f750:	f7ff fcf0 	bl	800f134 <HAL_SD_ErrorCallback>
#endif
  }
}
 800f754:	bf00      	nop
 800f756:	3718      	adds	r7, #24
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}
 800f75c:	004005ff 	.word	0x004005ff

0800f760 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b084      	sub	sp, #16
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f76c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	f240 523a 	movw	r2, #1338	; 0x53a
 800f776:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800f778:	68f8      	ldr	r0, [r7, #12]
 800f77a:	f7ff ff31 	bl	800f5e0 <HAL_SD_GetCardState>
 800f77e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	2201      	movs	r2, #1
 800f784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	2200      	movs	r2, #0
 800f78c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	2b06      	cmp	r3, #6
 800f792:	d002      	beq.n	800f79a <SD_DMATxAbort+0x3a>
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	2b05      	cmp	r3, #5
 800f798:	d10a      	bne.n	800f7b0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f002 fd4a 	bl	8012238 <SDMMC_CmdStopTransfer>
 800f7a4:	4602      	mov	r2, r0
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7aa:	431a      	orrs	r2, r3
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d103      	bne.n	800f7c0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800f7b8:	68f8      	ldr	r0, [r7, #12]
 800f7ba:	f003 f9a5 	bl	8012b08 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800f7be:	e002      	b.n	800f7c6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800f7c0:	68f8      	ldr	r0, [r7, #12]
 800f7c2:	f7ff fcb7 	bl	800f134 <HAL_SD_ErrorCallback>
}
 800f7c6:	bf00      	nop
 800f7c8:	3710      	adds	r7, #16
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}

0800f7ce <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800f7ce:	b580      	push	{r7, lr}
 800f7d0:	b084      	sub	sp, #16
 800f7d2:	af00      	add	r7, sp, #0
 800f7d4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7da:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	f240 523a 	movw	r2, #1338	; 0x53a
 800f7e4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800f7e6:	68f8      	ldr	r0, [r7, #12]
 800f7e8:	f7ff fefa 	bl	800f5e0 <HAL_SD_GetCardState>
 800f7ec:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	2201      	movs	r2, #1
 800f7f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	2b06      	cmp	r3, #6
 800f800:	d002      	beq.n	800f808 <SD_DMARxAbort+0x3a>
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	2b05      	cmp	r3, #5
 800f806:	d10a      	bne.n	800f81e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	4618      	mov	r0, r3
 800f80e:	f002 fd13 	bl	8012238 <SDMMC_CmdStopTransfer>
 800f812:	4602      	mov	r2, r0
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f818:	431a      	orrs	r2, r3
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f822:	2b00      	cmp	r3, #0
 800f824:	d103      	bne.n	800f82e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800f826:	68f8      	ldr	r0, [r7, #12]
 800f828:	f003 f96e 	bl	8012b08 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800f82c:	e002      	b.n	800f834 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800f82e:	68f8      	ldr	r0, [r7, #12]
 800f830:	f7ff fc80 	bl	800f134 <HAL_SD_ErrorCallback>
}
 800f834:	bf00      	nop
 800f836:	3710      	adds	r7, #16
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd80      	pop	{r7, pc}

0800f83c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f83c:	b5b0      	push	{r4, r5, r7, lr}
 800f83e:	b094      	sub	sp, #80	; 0x50
 800f840:	af04      	add	r7, sp, #16
 800f842:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800f844:	2301      	movs	r3, #1
 800f846:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	4618      	mov	r0, r3
 800f84e:	f002 fbc5 	bl	8011fdc <SDIO_GetPowerState>
 800f852:	4603      	mov	r3, r0
 800f854:	2b00      	cmp	r3, #0
 800f856:	d102      	bne.n	800f85e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f858:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800f85c:	e0b7      	b.n	800f9ce <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f862:	2b03      	cmp	r3, #3
 800f864:	d02f      	beq.n	800f8c6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	4618      	mov	r0, r3
 800f86c:	f002 fdee 	bl	801244c <SDMMC_CmdSendCID>
 800f870:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f874:	2b00      	cmp	r3, #0
 800f876:	d001      	beq.n	800f87c <SD_InitCard+0x40>
    {
      return errorstate;
 800f878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f87a:	e0a8      	b.n	800f9ce <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	2100      	movs	r1, #0
 800f882:	4618      	mov	r0, r3
 800f884:	f002 fbef 	bl	8012066 <SDIO_GetResponse>
 800f888:	4602      	mov	r2, r0
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	2104      	movs	r1, #4
 800f894:	4618      	mov	r0, r3
 800f896:	f002 fbe6 	bl	8012066 <SDIO_GetResponse>
 800f89a:	4602      	mov	r2, r0
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	2108      	movs	r1, #8
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f002 fbdd 	bl	8012066 <SDIO_GetResponse>
 800f8ac:	4602      	mov	r2, r0
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	210c      	movs	r1, #12
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f002 fbd4 	bl	8012066 <SDIO_GetResponse>
 800f8be:	4602      	mov	r2, r0
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8ca:	2b03      	cmp	r3, #3
 800f8cc:	d00d      	beq.n	800f8ea <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	f107 020e 	add.w	r2, r7, #14
 800f8d6:	4611      	mov	r1, r2
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f002 fdf4 	bl	80124c6 <SDMMC_CmdSetRelAdd>
 800f8de:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f8e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d001      	beq.n	800f8ea <SD_InitCard+0xae>
    {
      return errorstate;
 800f8e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8e8:	e071      	b.n	800f9ce <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8ee:	2b03      	cmp	r3, #3
 800f8f0:	d036      	beq.n	800f960 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800f8f2:	89fb      	ldrh	r3, [r7, #14]
 800f8f4:	461a      	mov	r2, r3
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681a      	ldr	r2, [r3, #0]
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f902:	041b      	lsls	r3, r3, #16
 800f904:	4619      	mov	r1, r3
 800f906:	4610      	mov	r0, r2
 800f908:	f002 fdbe 	bl	8012488 <SDMMC_CmdSendCSD>
 800f90c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f90e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f910:	2b00      	cmp	r3, #0
 800f912:	d001      	beq.n	800f918 <SD_InitCard+0xdc>
    {
      return errorstate;
 800f914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f916:	e05a      	b.n	800f9ce <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	2100      	movs	r1, #0
 800f91e:	4618      	mov	r0, r3
 800f920:	f002 fba1 	bl	8012066 <SDIO_GetResponse>
 800f924:	4602      	mov	r2, r0
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	2104      	movs	r1, #4
 800f930:	4618      	mov	r0, r3
 800f932:	f002 fb98 	bl	8012066 <SDIO_GetResponse>
 800f936:	4602      	mov	r2, r0
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	2108      	movs	r1, #8
 800f942:	4618      	mov	r0, r3
 800f944:	f002 fb8f 	bl	8012066 <SDIO_GetResponse>
 800f948:	4602      	mov	r2, r0
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	210c      	movs	r1, #12
 800f954:	4618      	mov	r0, r3
 800f956:	f002 fb86 	bl	8012066 <SDIO_GetResponse>
 800f95a:	4602      	mov	r2, r0
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	2104      	movs	r1, #4
 800f966:	4618      	mov	r0, r3
 800f968:	f002 fb7d 	bl	8012066 <SDIO_GetResponse>
 800f96c:	4603      	mov	r3, r0
 800f96e:	0d1a      	lsrs	r2, r3, #20
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f974:	f107 0310 	add.w	r3, r7, #16
 800f978:	4619      	mov	r1, r3
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f7ff fbe4 	bl	800f148 <HAL_SD_GetCardCSD>
 800f980:	4603      	mov	r3, r0
 800f982:	2b00      	cmp	r3, #0
 800f984:	d002      	beq.n	800f98c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f986:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f98a:	e020      	b.n	800f9ce <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	6819      	ldr	r1, [r3, #0]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f994:	041b      	lsls	r3, r3, #16
 800f996:	f04f 0400 	mov.w	r4, #0
 800f99a:	461a      	mov	r2, r3
 800f99c:	4623      	mov	r3, r4
 800f99e:	4608      	mov	r0, r1
 800f9a0:	f002 fc6c 	bl	801227c <SDMMC_CmdSelDesel>
 800f9a4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800f9a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d001      	beq.n	800f9b0 <SD_InitCard+0x174>
  {
    return errorstate;
 800f9ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9ae:	e00e      	b.n	800f9ce <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681d      	ldr	r5, [r3, #0]
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	466c      	mov	r4, sp
 800f9b8:	f103 0210 	add.w	r2, r3, #16
 800f9bc:	ca07      	ldmia	r2, {r0, r1, r2}
 800f9be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f9c2:	3304      	adds	r3, #4
 800f9c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f9c6:	4628      	mov	r0, r5
 800f9c8:	f002 fab0 	bl	8011f2c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f9cc:	2300      	movs	r3, #0
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3740      	adds	r7, #64	; 0x40
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800f9d8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b086      	sub	sp, #24
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	617b      	str	r3, [r7, #20]
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f002 fc66 	bl	80122c2 <SDMMC_CmdGoIdleState>
 800f9f6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d001      	beq.n	800fa02 <SD_PowerON+0x2a>
  {
    return errorstate;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	e072      	b.n	800fae8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	4618      	mov	r0, r3
 800fa08:	f002 fc79 	bl	80122fe <SDMMC_CmdOperCond>
 800fa0c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d00d      	beq.n	800fa30 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2200      	movs	r2, #0
 800fa18:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f002 fc4f 	bl	80122c2 <SDMMC_CmdGoIdleState>
 800fa24:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d004      	beq.n	800fa36 <SD_PowerON+0x5e>
    {
      return errorstate;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	e05b      	b.n	800fae8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2201      	movs	r2, #1
 800fa34:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa3a:	2b01      	cmp	r3, #1
 800fa3c:	d137      	bne.n	800faae <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	2100      	movs	r1, #0
 800fa44:	4618      	mov	r0, r3
 800fa46:	f002 fc79 	bl	801233c <SDMMC_CmdAppCommand>
 800fa4a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d02d      	beq.n	800faae <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fa52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fa56:	e047      	b.n	800fae8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	2100      	movs	r1, #0
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f002 fc6c 	bl	801233c <SDMMC_CmdAppCommand>
 800fa64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d001      	beq.n	800fa70 <SD_PowerON+0x98>
    {
      return errorstate;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	e03b      	b.n	800fae8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	491e      	ldr	r1, [pc, #120]	; (800faf0 <SD_PowerON+0x118>)
 800fa76:	4618      	mov	r0, r3
 800fa78:	f002 fc82 	bl	8012380 <SDMMC_CmdAppOperCommand>
 800fa7c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d002      	beq.n	800fa8a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fa84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fa88:	e02e      	b.n	800fae8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	2100      	movs	r1, #0
 800fa90:	4618      	mov	r0, r3
 800fa92:	f002 fae8 	bl	8012066 <SDIO_GetResponse>
 800fa96:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800fa98:	697b      	ldr	r3, [r7, #20]
 800fa9a:	0fdb      	lsrs	r3, r3, #31
 800fa9c:	2b01      	cmp	r3, #1
 800fa9e:	d101      	bne.n	800faa4 <SD_PowerON+0xcc>
 800faa0:	2301      	movs	r3, #1
 800faa2:	e000      	b.n	800faa6 <SD_PowerON+0xce>
 800faa4:	2300      	movs	r3, #0
 800faa6:	613b      	str	r3, [r7, #16]

    count++;
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	3301      	adds	r3, #1
 800faac:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fab4:	4293      	cmp	r3, r2
 800fab6:	d802      	bhi.n	800fabe <SD_PowerON+0xe6>
 800fab8:	693b      	ldr	r3, [r7, #16]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d0cc      	beq.n	800fa58 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fac4:	4293      	cmp	r3, r2
 800fac6:	d902      	bls.n	800face <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800fac8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800facc:	e00c      	b.n	800fae8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d003      	beq.n	800fae0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2201      	movs	r2, #1
 800fadc:	645a      	str	r2, [r3, #68]	; 0x44
 800fade:	e002      	b.n	800fae6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2200      	movs	r2, #0
 800fae4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800fae6:	2300      	movs	r3, #0
}
 800fae8:	4618      	mov	r0, r3
 800faea:	3718      	adds	r7, #24
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}
 800faf0:	c1100000 	.word	0xc1100000

0800faf4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b084      	sub	sp, #16
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
 800fafc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d102      	bne.n	800fb0a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800fb04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fb08:	e018      	b.n	800fb3c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681a      	ldr	r2, [r3, #0]
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb12:	041b      	lsls	r3, r3, #16
 800fb14:	4619      	mov	r1, r3
 800fb16:	4610      	mov	r0, r2
 800fb18:	f002 fcf6 	bl	8012508 <SDMMC_CmdSendStatus>
 800fb1c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d001      	beq.n	800fb28 <SD_SendStatus+0x34>
  {
    return errorstate;
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	e009      	b.n	800fb3c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	2100      	movs	r1, #0
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f002 fa99 	bl	8012066 <SDIO_GetResponse>
 800fb34:	4602      	mov	r2, r0
 800fb36:	683b      	ldr	r3, [r7, #0]
 800fb38:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800fb3a:	2300      	movs	r3, #0
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3710      	adds	r7, #16
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}

0800fb44 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b086      	sub	sp, #24
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	60fb      	str	r3, [r7, #12]
 800fb50:	2300      	movs	r3, #0
 800fb52:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	2100      	movs	r1, #0
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f002 fa83 	bl	8012066 <SDIO_GetResponse>
 800fb60:	4603      	mov	r3, r0
 800fb62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fb66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fb6a:	d102      	bne.n	800fb72 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800fb6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fb70:	e02f      	b.n	800fbd2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800fb72:	f107 030c 	add.w	r3, r7, #12
 800fb76:	4619      	mov	r1, r3
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	f000 f879 	bl	800fc70 <SD_FindSCR>
 800fb7e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d001      	beq.n	800fb8a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800fb86:	697b      	ldr	r3, [r7, #20]
 800fb88:	e023      	b.n	800fbd2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d01c      	beq.n	800fbce <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681a      	ldr	r2, [r3, #0]
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb9c:	041b      	lsls	r3, r3, #16
 800fb9e:	4619      	mov	r1, r3
 800fba0:	4610      	mov	r0, r2
 800fba2:	f002 fbcb 	bl	801233c <SDMMC_CmdAppCommand>
 800fba6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d001      	beq.n	800fbb2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800fbae:	697b      	ldr	r3, [r7, #20]
 800fbb0:	e00f      	b.n	800fbd2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	2102      	movs	r1, #2
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f002 fc04 	bl	80123c6 <SDMMC_CmdBusWidth>
 800fbbe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d001      	beq.n	800fbca <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	e003      	b.n	800fbd2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	e001      	b.n	800fbd2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800fbce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3718      	adds	r7, #24
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}

0800fbda <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800fbda:	b580      	push	{r7, lr}
 800fbdc:	b086      	sub	sp, #24
 800fbde:	af00      	add	r7, sp, #0
 800fbe0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	60fb      	str	r3, [r7, #12]
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	2100      	movs	r1, #0
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f002 fa38 	bl	8012066 <SDIO_GetResponse>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fbfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fc00:	d102      	bne.n	800fc08 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800fc02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fc06:	e02f      	b.n	800fc68 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800fc08:	f107 030c 	add.w	r3, r7, #12
 800fc0c:	4619      	mov	r1, r3
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	f000 f82e 	bl	800fc70 <SD_FindSCR>
 800fc14:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d001      	beq.n	800fc20 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	e023      	b.n	800fc68 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800fc20:	693b      	ldr	r3, [r7, #16]
 800fc22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d01c      	beq.n	800fc64 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681a      	ldr	r2, [r3, #0]
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc32:	041b      	lsls	r3, r3, #16
 800fc34:	4619      	mov	r1, r3
 800fc36:	4610      	mov	r0, r2
 800fc38:	f002 fb80 	bl	801233c <SDMMC_CmdAppCommand>
 800fc3c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d001      	beq.n	800fc48 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	e00f      	b.n	800fc68 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	2100      	movs	r1, #0
 800fc4e:	4618      	mov	r0, r3
 800fc50:	f002 fbb9 	bl	80123c6 <SDMMC_CmdBusWidth>
 800fc54:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d001      	beq.n	800fc60 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800fc5c:	697b      	ldr	r3, [r7, #20]
 800fc5e:	e003      	b.n	800fc68 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800fc60:	2300      	movs	r3, #0
 800fc62:	e001      	b.n	800fc68 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800fc64:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3718      	adds	r7, #24
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}

0800fc70 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800fc70:	b590      	push	{r4, r7, lr}
 800fc72:	b08f      	sub	sp, #60	; 0x3c
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800fc7a:	f7fb fd63 	bl	800b744 <HAL_GetTick>
 800fc7e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800fc80:	2300      	movs	r3, #0
 800fc82:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800fc84:	2300      	movs	r3, #0
 800fc86:	60bb      	str	r3, [r7, #8]
 800fc88:	2300      	movs	r3, #0
 800fc8a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	2108      	movs	r1, #8
 800fc96:	4618      	mov	r0, r3
 800fc98:	f002 fa24 	bl	80120e4 <SDMMC_CmdBlockLength>
 800fc9c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800fc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d001      	beq.n	800fca8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800fca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca6:	e0a9      	b.n	800fdfc <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681a      	ldr	r2, [r3, #0]
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fcb0:	041b      	lsls	r3, r3, #16
 800fcb2:	4619      	mov	r1, r3
 800fcb4:	4610      	mov	r0, r2
 800fcb6:	f002 fb41 	bl	801233c <SDMMC_CmdAppCommand>
 800fcba:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800fcbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d001      	beq.n	800fcc6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800fcc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcc4:	e09a      	b.n	800fdfc <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800fcc6:	f04f 33ff 	mov.w	r3, #4294967295
 800fcca:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800fccc:	2308      	movs	r3, #8
 800fcce:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800fcd0:	2330      	movs	r3, #48	; 0x30
 800fcd2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800fcd4:	2302      	movs	r3, #2
 800fcd6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800fcd8:	2300      	movs	r3, #0
 800fcda:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800fcdc:	2301      	movs	r3, #1
 800fcde:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f107 0210 	add.w	r2, r7, #16
 800fce8:	4611      	mov	r1, r2
 800fcea:	4618      	mov	r0, r3
 800fcec:	f002 f9ce 	bl	801208c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	f002 fb88 	bl	801240a <SDMMC_CmdSendSCR>
 800fcfa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800fcfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d022      	beq.n	800fd48 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800fd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd04:	e07a      	b.n	800fdfc <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d00e      	beq.n	800fd32 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	6819      	ldr	r1, [r3, #0]
 800fd18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd1a:	009b      	lsls	r3, r3, #2
 800fd1c:	f107 0208 	add.w	r2, r7, #8
 800fd20:	18d4      	adds	r4, r2, r3
 800fd22:	4608      	mov	r0, r1
 800fd24:	f002 f92d 	bl	8011f82 <SDIO_ReadFIFO>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	6023      	str	r3, [r4, #0]
      index++;
 800fd2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd2e:	3301      	adds	r3, #1
 800fd30:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800fd32:	f7fb fd07 	bl	800b744 <HAL_GetTick>
 800fd36:	4602      	mov	r2, r0
 800fd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd3a:	1ad3      	subs	r3, r2, r3
 800fd3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd40:	d102      	bne.n	800fd48 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800fd42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fd46:	e059      	b.n	800fdfc <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fd4e:	f240 432a 	movw	r3, #1066	; 0x42a
 800fd52:	4013      	ands	r3, r2
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d0d6      	beq.n	800fd06 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd5e:	f003 0308 	and.w	r3, r3, #8
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d005      	beq.n	800fd72 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	2208      	movs	r2, #8
 800fd6c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800fd6e:	2308      	movs	r3, #8
 800fd70:	e044      	b.n	800fdfc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd78:	f003 0302 	and.w	r3, r3, #2
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d005      	beq.n	800fd8c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	2202      	movs	r2, #2
 800fd86:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800fd88:	2302      	movs	r3, #2
 800fd8a:	e037      	b.n	800fdfc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd92:	f003 0320 	and.w	r3, r3, #32
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d005      	beq.n	800fda6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	2220      	movs	r2, #32
 800fda0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800fda2:	2320      	movs	r3, #32
 800fda4:	e02a      	b.n	800fdfc <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	f240 523a 	movw	r2, #1338	; 0x53a
 800fdae:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	061a      	lsls	r2, r3, #24
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	021b      	lsls	r3, r3, #8
 800fdb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fdbc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	0a1b      	lsrs	r3, r3, #8
 800fdc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800fdc6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	0e1b      	lsrs	r3, r3, #24
 800fdcc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800fdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd0:	601a      	str	r2, [r3, #0]
    scr++;
 800fdd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd4:	3304      	adds	r3, #4
 800fdd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	061a      	lsls	r2, r3, #24
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	021b      	lsls	r3, r3, #8
 800fde0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fde4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	0a1b      	lsrs	r3, r3, #8
 800fdea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800fdee:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	0e1b      	lsrs	r3, r3, #24
 800fdf4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800fdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800fdfa:	2300      	movs	r3, #0
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	373c      	adds	r7, #60	; 0x3c
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd90      	pop	{r4, r7, pc}

0800fe04 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b086      	sub	sp, #24
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe10:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe16:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800fe18:	693b      	ldr	r3, [r7, #16]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d03f      	beq.n	800fe9e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800fe1e:	2300      	movs	r3, #0
 800fe20:	617b      	str	r3, [r7, #20]
 800fe22:	e033      	b.n	800fe8c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f002 f8aa 	bl	8011f82 <SDIO_ReadFIFO>
 800fe2e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	b2da      	uxtb	r2, r3
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	3301      	adds	r3, #1
 800fe3c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fe3e:	693b      	ldr	r3, [r7, #16]
 800fe40:	3b01      	subs	r3, #1
 800fe42:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	0a1b      	lsrs	r3, r3, #8
 800fe48:	b2da      	uxtb	r2, r3
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	3301      	adds	r3, #1
 800fe52:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fe54:	693b      	ldr	r3, [r7, #16]
 800fe56:	3b01      	subs	r3, #1
 800fe58:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	0c1b      	lsrs	r3, r3, #16
 800fe5e:	b2da      	uxtb	r2, r3
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	3301      	adds	r3, #1
 800fe68:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fe6a:	693b      	ldr	r3, [r7, #16]
 800fe6c:	3b01      	subs	r3, #1
 800fe6e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	0e1b      	lsrs	r3, r3, #24
 800fe74:	b2da      	uxtb	r2, r3
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	3301      	adds	r3, #1
 800fe7e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	3b01      	subs	r3, #1
 800fe84:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	3301      	adds	r3, #1
 800fe8a:	617b      	str	r3, [r7, #20]
 800fe8c:	697b      	ldr	r3, [r7, #20]
 800fe8e:	2b07      	cmp	r3, #7
 800fe90:	d9c8      	bls.n	800fe24 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	68fa      	ldr	r2, [r7, #12]
 800fe96:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	693a      	ldr	r2, [r7, #16]
 800fe9c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800fe9e:	bf00      	nop
 800fea0:	3718      	adds	r7, #24
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}

0800fea6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800fea6:	b580      	push	{r7, lr}
 800fea8:	b086      	sub	sp, #24
 800feaa:	af00      	add	r7, sp, #0
 800feac:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	6a1b      	ldr	r3, [r3, #32]
 800feb2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feb8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800feba:	693b      	ldr	r3, [r7, #16]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d043      	beq.n	800ff48 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800fec0:	2300      	movs	r3, #0
 800fec2:	617b      	str	r3, [r7, #20]
 800fec4:	e037      	b.n	800ff36 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	781b      	ldrb	r3, [r3, #0]
 800feca:	60bb      	str	r3, [r7, #8]
      tmp++;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	3301      	adds	r3, #1
 800fed0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fed2:	693b      	ldr	r3, [r7, #16]
 800fed4:	3b01      	subs	r3, #1
 800fed6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	021a      	lsls	r2, r3, #8
 800fede:	68bb      	ldr	r3, [r7, #8]
 800fee0:	4313      	orrs	r3, r2
 800fee2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	3301      	adds	r3, #1
 800fee8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800feea:	693b      	ldr	r3, [r7, #16]
 800feec:	3b01      	subs	r3, #1
 800feee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	781b      	ldrb	r3, [r3, #0]
 800fef4:	041a      	lsls	r2, r3, #16
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	4313      	orrs	r3, r2
 800fefa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	3301      	adds	r3, #1
 800ff00:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ff02:	693b      	ldr	r3, [r7, #16]
 800ff04:	3b01      	subs	r3, #1
 800ff06:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	781b      	ldrb	r3, [r3, #0]
 800ff0c:	061a      	lsls	r2, r3, #24
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	4313      	orrs	r3, r2
 800ff12:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	3301      	adds	r3, #1
 800ff18:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ff1a:	693b      	ldr	r3, [r7, #16]
 800ff1c:	3b01      	subs	r3, #1
 800ff1e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	f107 0208 	add.w	r2, r7, #8
 800ff28:	4611      	mov	r1, r2
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f002 f836 	bl	8011f9c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	3301      	adds	r3, #1
 800ff34:	617b      	str	r3, [r7, #20]
 800ff36:	697b      	ldr	r3, [r7, #20]
 800ff38:	2b07      	cmp	r3, #7
 800ff3a:	d9c4      	bls.n	800fec6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	68fa      	ldr	r2, [r7, #12]
 800ff40:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	693a      	ldr	r2, [r7, #16]
 800ff46:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800ff48:	bf00      	nop
 800ff4a:	3718      	adds	r7, #24
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}

0800ff50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b082      	sub	sp, #8
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d101      	bne.n	800ff62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ff5e:	2301      	movs	r3, #1
 800ff60:	e056      	b.n	8010010 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	2200      	movs	r2, #0
 800ff66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ff6e:	b2db      	uxtb	r3, r3
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d106      	bne.n	800ff82 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	2200      	movs	r2, #0
 800ff78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f7f7 fdab 	bl	8007ad8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2202      	movs	r2, #2
 800ff86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	681a      	ldr	r2, [r3, #0]
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ff98:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	685a      	ldr	r2, [r3, #4]
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	689b      	ldr	r3, [r3, #8]
 800ffa2:	431a      	orrs	r2, r3
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	68db      	ldr	r3, [r3, #12]
 800ffa8:	431a      	orrs	r2, r3
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	691b      	ldr	r3, [r3, #16]
 800ffae:	431a      	orrs	r2, r3
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	695b      	ldr	r3, [r3, #20]
 800ffb4:	431a      	orrs	r2, r3
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	699b      	ldr	r3, [r3, #24]
 800ffba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ffbe:	431a      	orrs	r2, r3
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	69db      	ldr	r3, [r3, #28]
 800ffc4:	431a      	orrs	r2, r3
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6a1b      	ldr	r3, [r3, #32]
 800ffca:	ea42 0103 	orr.w	r1, r2, r3
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	430a      	orrs	r2, r1
 800ffd8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	699b      	ldr	r3, [r3, #24]
 800ffde:	0c1b      	lsrs	r3, r3, #16
 800ffe0:	f003 0104 	and.w	r1, r3, #4
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	430a      	orrs	r2, r1
 800ffee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	69da      	ldr	r2, [r3, #28]
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fffe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2200      	movs	r2, #0
 8010004:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2201      	movs	r2, #1
 801000a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801000e:	2300      	movs	r3, #0
}
 8010010:	4618      	mov	r0, r3
 8010012:	3708      	adds	r7, #8
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}

08010018 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b088      	sub	sp, #32
 801001c:	af00      	add	r7, sp, #0
 801001e:	60f8      	str	r0, [r7, #12]
 8010020:	60b9      	str	r1, [r7, #8]
 8010022:	603b      	str	r3, [r7, #0]
 8010024:	4613      	mov	r3, r2
 8010026:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010028:	2300      	movs	r3, #0
 801002a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010032:	2b01      	cmp	r3, #1
 8010034:	d101      	bne.n	801003a <HAL_SPI_Transmit+0x22>
 8010036:	2302      	movs	r3, #2
 8010038:	e11e      	b.n	8010278 <HAL_SPI_Transmit+0x260>
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	2201      	movs	r2, #1
 801003e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010042:	f7fb fb7f 	bl	800b744 <HAL_GetTick>
 8010046:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8010048:	88fb      	ldrh	r3, [r7, #6]
 801004a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010052:	b2db      	uxtb	r3, r3
 8010054:	2b01      	cmp	r3, #1
 8010056:	d002      	beq.n	801005e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8010058:	2302      	movs	r3, #2
 801005a:	77fb      	strb	r3, [r7, #31]
    goto error;
 801005c:	e103      	b.n	8010266 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d002      	beq.n	801006a <HAL_SPI_Transmit+0x52>
 8010064:	88fb      	ldrh	r3, [r7, #6]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d102      	bne.n	8010070 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801006a:	2301      	movs	r3, #1
 801006c:	77fb      	strb	r3, [r7, #31]
    goto error;
 801006e:	e0fa      	b.n	8010266 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	2203      	movs	r2, #3
 8010074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	2200      	movs	r2, #0
 801007c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	68ba      	ldr	r2, [r7, #8]
 8010082:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	88fa      	ldrh	r2, [r7, #6]
 8010088:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	88fa      	ldrh	r2, [r7, #6]
 801008e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	2200      	movs	r2, #0
 8010094:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	2200      	movs	r2, #0
 801009a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	2200      	movs	r2, #0
 80100a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	2200      	movs	r2, #0
 80100a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	2200      	movs	r2, #0
 80100ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	689b      	ldr	r3, [r3, #8]
 80100b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80100b6:	d107      	bne.n	80100c8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	681a      	ldr	r2, [r3, #0]
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80100c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100d2:	2b40      	cmp	r3, #64	; 0x40
 80100d4:	d007      	beq.n	80100e6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	681a      	ldr	r2, [r3, #0]
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80100e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	68db      	ldr	r3, [r3, #12]
 80100ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80100ee:	d14b      	bne.n	8010188 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	685b      	ldr	r3, [r3, #4]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d002      	beq.n	80100fe <HAL_SPI_Transmit+0xe6>
 80100f8:	8afb      	ldrh	r3, [r7, #22]
 80100fa:	2b01      	cmp	r3, #1
 80100fc:	d13e      	bne.n	801017c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010102:	881a      	ldrh	r2, [r3, #0]
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801010e:	1c9a      	adds	r2, r3, #2
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010118:	b29b      	uxth	r3, r3
 801011a:	3b01      	subs	r3, #1
 801011c:	b29a      	uxth	r2, r3
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8010122:	e02b      	b.n	801017c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	689b      	ldr	r3, [r3, #8]
 801012a:	f003 0302 	and.w	r3, r3, #2
 801012e:	2b02      	cmp	r3, #2
 8010130:	d112      	bne.n	8010158 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010136:	881a      	ldrh	r2, [r3, #0]
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010142:	1c9a      	adds	r2, r3, #2
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801014c:	b29b      	uxth	r3, r3
 801014e:	3b01      	subs	r3, #1
 8010150:	b29a      	uxth	r2, r3
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	86da      	strh	r2, [r3, #54]	; 0x36
 8010156:	e011      	b.n	801017c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010158:	f7fb faf4 	bl	800b744 <HAL_GetTick>
 801015c:	4602      	mov	r2, r0
 801015e:	69bb      	ldr	r3, [r7, #24]
 8010160:	1ad3      	subs	r3, r2, r3
 8010162:	683a      	ldr	r2, [r7, #0]
 8010164:	429a      	cmp	r2, r3
 8010166:	d803      	bhi.n	8010170 <HAL_SPI_Transmit+0x158>
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801016e:	d102      	bne.n	8010176 <HAL_SPI_Transmit+0x15e>
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d102      	bne.n	801017c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8010176:	2303      	movs	r3, #3
 8010178:	77fb      	strb	r3, [r7, #31]
          goto error;
 801017a:	e074      	b.n	8010266 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010180:	b29b      	uxth	r3, r3
 8010182:	2b00      	cmp	r3, #0
 8010184:	d1ce      	bne.n	8010124 <HAL_SPI_Transmit+0x10c>
 8010186:	e04c      	b.n	8010222 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	685b      	ldr	r3, [r3, #4]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d002      	beq.n	8010196 <HAL_SPI_Transmit+0x17e>
 8010190:	8afb      	ldrh	r3, [r7, #22]
 8010192:	2b01      	cmp	r3, #1
 8010194:	d140      	bne.n	8010218 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	330c      	adds	r3, #12
 80101a0:	7812      	ldrb	r2, [r2, #0]
 80101a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101a8:	1c5a      	adds	r2, r3, #1
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80101b2:	b29b      	uxth	r3, r3
 80101b4:	3b01      	subs	r3, #1
 80101b6:	b29a      	uxth	r2, r3
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80101bc:	e02c      	b.n	8010218 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	689b      	ldr	r3, [r3, #8]
 80101c4:	f003 0302 	and.w	r3, r3, #2
 80101c8:	2b02      	cmp	r3, #2
 80101ca:	d113      	bne.n	80101f4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	330c      	adds	r3, #12
 80101d6:	7812      	ldrb	r2, [r2, #0]
 80101d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101de:	1c5a      	adds	r2, r3, #1
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80101e8:	b29b      	uxth	r3, r3
 80101ea:	3b01      	subs	r3, #1
 80101ec:	b29a      	uxth	r2, r3
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80101f2:	e011      	b.n	8010218 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80101f4:	f7fb faa6 	bl	800b744 <HAL_GetTick>
 80101f8:	4602      	mov	r2, r0
 80101fa:	69bb      	ldr	r3, [r7, #24]
 80101fc:	1ad3      	subs	r3, r2, r3
 80101fe:	683a      	ldr	r2, [r7, #0]
 8010200:	429a      	cmp	r2, r3
 8010202:	d803      	bhi.n	801020c <HAL_SPI_Transmit+0x1f4>
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	f1b3 3fff 	cmp.w	r3, #4294967295
 801020a:	d102      	bne.n	8010212 <HAL_SPI_Transmit+0x1fa>
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d102      	bne.n	8010218 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8010212:	2303      	movs	r3, #3
 8010214:	77fb      	strb	r3, [r7, #31]
          goto error;
 8010216:	e026      	b.n	8010266 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801021c:	b29b      	uxth	r3, r3
 801021e:	2b00      	cmp	r3, #0
 8010220:	d1cd      	bne.n	80101be <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010222:	69ba      	ldr	r2, [r7, #24]
 8010224:	6839      	ldr	r1, [r7, #0]
 8010226:	68f8      	ldr	r0, [r7, #12]
 8010228:	f000 fba4 	bl	8010974 <SPI_EndRxTxTransaction>
 801022c:	4603      	mov	r3, r0
 801022e:	2b00      	cmp	r3, #0
 8010230:	d002      	beq.n	8010238 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	2220      	movs	r2, #32
 8010236:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	689b      	ldr	r3, [r3, #8]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d10a      	bne.n	8010256 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010240:	2300      	movs	r3, #0
 8010242:	613b      	str	r3, [r7, #16]
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	68db      	ldr	r3, [r3, #12]
 801024a:	613b      	str	r3, [r7, #16]
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	689b      	ldr	r3, [r3, #8]
 8010252:	613b      	str	r3, [r7, #16]
 8010254:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801025a:	2b00      	cmp	r3, #0
 801025c:	d002      	beq.n	8010264 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 801025e:	2301      	movs	r3, #1
 8010260:	77fb      	strb	r3, [r7, #31]
 8010262:	e000      	b.n	8010266 <HAL_SPI_Transmit+0x24e>
  }

error:
 8010264:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	2201      	movs	r2, #1
 801026a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	2200      	movs	r2, #0
 8010272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010276:	7ffb      	ldrb	r3, [r7, #31]
}
 8010278:	4618      	mov	r0, r3
 801027a:	3720      	adds	r7, #32
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}

08010280 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b088      	sub	sp, #32
 8010284:	af02      	add	r7, sp, #8
 8010286:	60f8      	str	r0, [r7, #12]
 8010288:	60b9      	str	r1, [r7, #8]
 801028a:	603b      	str	r3, [r7, #0]
 801028c:	4613      	mov	r3, r2
 801028e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010290:	2300      	movs	r3, #0
 8010292:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	685b      	ldr	r3, [r3, #4]
 8010298:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801029c:	d112      	bne.n	80102c4 <HAL_SPI_Receive+0x44>
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	689b      	ldr	r3, [r3, #8]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d10e      	bne.n	80102c4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	2204      	movs	r2, #4
 80102aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80102ae:	88fa      	ldrh	r2, [r7, #6]
 80102b0:	683b      	ldr	r3, [r7, #0]
 80102b2:	9300      	str	r3, [sp, #0]
 80102b4:	4613      	mov	r3, r2
 80102b6:	68ba      	ldr	r2, [r7, #8]
 80102b8:	68b9      	ldr	r1, [r7, #8]
 80102ba:	68f8      	ldr	r0, [r7, #12]
 80102bc:	f000 f8e9 	bl	8010492 <HAL_SPI_TransmitReceive>
 80102c0:	4603      	mov	r3, r0
 80102c2:	e0e2      	b.n	801048a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80102ca:	2b01      	cmp	r3, #1
 80102cc:	d101      	bne.n	80102d2 <HAL_SPI_Receive+0x52>
 80102ce:	2302      	movs	r3, #2
 80102d0:	e0db      	b.n	801048a <HAL_SPI_Receive+0x20a>
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	2201      	movs	r2, #1
 80102d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80102da:	f7fb fa33 	bl	800b744 <HAL_GetTick>
 80102de:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80102e6:	b2db      	uxtb	r3, r3
 80102e8:	2b01      	cmp	r3, #1
 80102ea:	d002      	beq.n	80102f2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80102ec:	2302      	movs	r3, #2
 80102ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80102f0:	e0c2      	b.n	8010478 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d002      	beq.n	80102fe <HAL_SPI_Receive+0x7e>
 80102f8:	88fb      	ldrh	r3, [r7, #6]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d102      	bne.n	8010304 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80102fe:	2301      	movs	r3, #1
 8010300:	75fb      	strb	r3, [r7, #23]
    goto error;
 8010302:	e0b9      	b.n	8010478 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	2204      	movs	r2, #4
 8010308:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	2200      	movs	r2, #0
 8010310:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	68ba      	ldr	r2, [r7, #8]
 8010316:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	88fa      	ldrh	r2, [r7, #6]
 801031c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	88fa      	ldrh	r2, [r7, #6]
 8010322:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	2200      	movs	r2, #0
 8010328:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	2200      	movs	r2, #0
 801032e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	2200      	movs	r2, #0
 8010334:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	2200      	movs	r2, #0
 801033a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	2200      	movs	r2, #0
 8010340:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	689b      	ldr	r3, [r3, #8]
 8010346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801034a:	d107      	bne.n	801035c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	681a      	ldr	r2, [r3, #0]
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801035a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010366:	2b40      	cmp	r3, #64	; 0x40
 8010368:	d007      	beq.n	801037a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	681a      	ldr	r2, [r3, #0]
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010378:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	68db      	ldr	r3, [r3, #12]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d162      	bne.n	8010448 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8010382:	e02e      	b.n	80103e2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	689b      	ldr	r3, [r3, #8]
 801038a:	f003 0301 	and.w	r3, r3, #1
 801038e:	2b01      	cmp	r3, #1
 8010390:	d115      	bne.n	80103be <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	f103 020c 	add.w	r2, r3, #12
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801039e:	7812      	ldrb	r2, [r2, #0]
 80103a0:	b2d2      	uxtb	r2, r2
 80103a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103a8:	1c5a      	adds	r2, r3, #1
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80103b2:	b29b      	uxth	r3, r3
 80103b4:	3b01      	subs	r3, #1
 80103b6:	b29a      	uxth	r2, r3
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80103bc:	e011      	b.n	80103e2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80103be:	f7fb f9c1 	bl	800b744 <HAL_GetTick>
 80103c2:	4602      	mov	r2, r0
 80103c4:	693b      	ldr	r3, [r7, #16]
 80103c6:	1ad3      	subs	r3, r2, r3
 80103c8:	683a      	ldr	r2, [r7, #0]
 80103ca:	429a      	cmp	r2, r3
 80103cc:	d803      	bhi.n	80103d6 <HAL_SPI_Receive+0x156>
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103d4:	d102      	bne.n	80103dc <HAL_SPI_Receive+0x15c>
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d102      	bne.n	80103e2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80103dc:	2303      	movs	r3, #3
 80103de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80103e0:	e04a      	b.n	8010478 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80103e6:	b29b      	uxth	r3, r3
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d1cb      	bne.n	8010384 <HAL_SPI_Receive+0x104>
 80103ec:	e031      	b.n	8010452 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	689b      	ldr	r3, [r3, #8]
 80103f4:	f003 0301 	and.w	r3, r3, #1
 80103f8:	2b01      	cmp	r3, #1
 80103fa:	d113      	bne.n	8010424 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	68da      	ldr	r2, [r3, #12]
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010406:	b292      	uxth	r2, r2
 8010408:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801040e:	1c9a      	adds	r2, r3, #2
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010418:	b29b      	uxth	r3, r3
 801041a:	3b01      	subs	r3, #1
 801041c:	b29a      	uxth	r2, r3
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010422:	e011      	b.n	8010448 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010424:	f7fb f98e 	bl	800b744 <HAL_GetTick>
 8010428:	4602      	mov	r2, r0
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	1ad3      	subs	r3, r2, r3
 801042e:	683a      	ldr	r2, [r7, #0]
 8010430:	429a      	cmp	r2, r3
 8010432:	d803      	bhi.n	801043c <HAL_SPI_Receive+0x1bc>
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	f1b3 3fff 	cmp.w	r3, #4294967295
 801043a:	d102      	bne.n	8010442 <HAL_SPI_Receive+0x1c2>
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d102      	bne.n	8010448 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8010442:	2303      	movs	r3, #3
 8010444:	75fb      	strb	r3, [r7, #23]
          goto error;
 8010446:	e017      	b.n	8010478 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801044c:	b29b      	uxth	r3, r3
 801044e:	2b00      	cmp	r3, #0
 8010450:	d1cd      	bne.n	80103ee <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010452:	693a      	ldr	r2, [r7, #16]
 8010454:	6839      	ldr	r1, [r7, #0]
 8010456:	68f8      	ldr	r0, [r7, #12]
 8010458:	f000 fa27 	bl	80108aa <SPI_EndRxTransaction>
 801045c:	4603      	mov	r3, r0
 801045e:	2b00      	cmp	r3, #0
 8010460:	d002      	beq.n	8010468 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	2220      	movs	r2, #32
 8010466:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801046c:	2b00      	cmp	r3, #0
 801046e:	d002      	beq.n	8010476 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8010470:	2301      	movs	r3, #1
 8010472:	75fb      	strb	r3, [r7, #23]
 8010474:	e000      	b.n	8010478 <HAL_SPI_Receive+0x1f8>
  }

error :
 8010476:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	2201      	movs	r2, #1
 801047c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	2200      	movs	r2, #0
 8010484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010488:	7dfb      	ldrb	r3, [r7, #23]
}
 801048a:	4618      	mov	r0, r3
 801048c:	3718      	adds	r7, #24
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}

08010492 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8010492:	b580      	push	{r7, lr}
 8010494:	b08c      	sub	sp, #48	; 0x30
 8010496:	af00      	add	r7, sp, #0
 8010498:	60f8      	str	r0, [r7, #12]
 801049a:	60b9      	str	r1, [r7, #8]
 801049c:	607a      	str	r2, [r7, #4]
 801049e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80104a0:	2301      	movs	r3, #1
 80104a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80104a4:	2300      	movs	r3, #0
 80104a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80104b0:	2b01      	cmp	r3, #1
 80104b2:	d101      	bne.n	80104b8 <HAL_SPI_TransmitReceive+0x26>
 80104b4:	2302      	movs	r3, #2
 80104b6:	e18a      	b.n	80107ce <HAL_SPI_TransmitReceive+0x33c>
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	2201      	movs	r2, #1
 80104bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80104c0:	f7fb f940 	bl	800b744 <HAL_GetTick>
 80104c4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80104cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	685b      	ldr	r3, [r3, #4]
 80104d4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80104d6:	887b      	ldrh	r3, [r7, #2]
 80104d8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80104da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80104de:	2b01      	cmp	r3, #1
 80104e0:	d00f      	beq.n	8010502 <HAL_SPI_TransmitReceive+0x70>
 80104e2:	69fb      	ldr	r3, [r7, #28]
 80104e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80104e8:	d107      	bne.n	80104fa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	689b      	ldr	r3, [r3, #8]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d103      	bne.n	80104fa <HAL_SPI_TransmitReceive+0x68>
 80104f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80104f6:	2b04      	cmp	r3, #4
 80104f8:	d003      	beq.n	8010502 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80104fa:	2302      	movs	r3, #2
 80104fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8010500:	e15b      	b.n	80107ba <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d005      	beq.n	8010514 <HAL_SPI_TransmitReceive+0x82>
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d002      	beq.n	8010514 <HAL_SPI_TransmitReceive+0x82>
 801050e:	887b      	ldrh	r3, [r7, #2]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d103      	bne.n	801051c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8010514:	2301      	movs	r3, #1
 8010516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801051a:	e14e      	b.n	80107ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010522:	b2db      	uxtb	r3, r3
 8010524:	2b04      	cmp	r3, #4
 8010526:	d003      	beq.n	8010530 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	2205      	movs	r2, #5
 801052c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	2200      	movs	r2, #0
 8010534:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	687a      	ldr	r2, [r7, #4]
 801053a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	887a      	ldrh	r2, [r7, #2]
 8010540:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	887a      	ldrh	r2, [r7, #2]
 8010546:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	68ba      	ldr	r2, [r7, #8]
 801054c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	887a      	ldrh	r2, [r7, #2]
 8010552:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	887a      	ldrh	r2, [r7, #2]
 8010558:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2200      	movs	r2, #0
 801055e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	2200      	movs	r2, #0
 8010564:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010570:	2b40      	cmp	r3, #64	; 0x40
 8010572:	d007      	beq.n	8010584 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	681a      	ldr	r2, [r3, #0]
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010582:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	68db      	ldr	r3, [r3, #12]
 8010588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801058c:	d178      	bne.n	8010680 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	685b      	ldr	r3, [r3, #4]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d002      	beq.n	801059c <HAL_SPI_TransmitReceive+0x10a>
 8010596:	8b7b      	ldrh	r3, [r7, #26]
 8010598:	2b01      	cmp	r3, #1
 801059a:	d166      	bne.n	801066a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105a0:	881a      	ldrh	r2, [r3, #0]
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105ac:	1c9a      	adds	r2, r3, #2
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80105b6:	b29b      	uxth	r3, r3
 80105b8:	3b01      	subs	r3, #1
 80105ba:	b29a      	uxth	r2, r3
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80105c0:	e053      	b.n	801066a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	689b      	ldr	r3, [r3, #8]
 80105c8:	f003 0302 	and.w	r3, r3, #2
 80105cc:	2b02      	cmp	r3, #2
 80105ce:	d11b      	bne.n	8010608 <HAL_SPI_TransmitReceive+0x176>
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80105d4:	b29b      	uxth	r3, r3
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d016      	beq.n	8010608 <HAL_SPI_TransmitReceive+0x176>
 80105da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105dc:	2b01      	cmp	r3, #1
 80105de:	d113      	bne.n	8010608 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105e4:	881a      	ldrh	r2, [r3, #0]
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105f0:	1c9a      	adds	r2, r3, #2
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80105fa:	b29b      	uxth	r3, r3
 80105fc:	3b01      	subs	r3, #1
 80105fe:	b29a      	uxth	r2, r3
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010604:	2300      	movs	r3, #0
 8010606:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	689b      	ldr	r3, [r3, #8]
 801060e:	f003 0301 	and.w	r3, r3, #1
 8010612:	2b01      	cmp	r3, #1
 8010614:	d119      	bne.n	801064a <HAL_SPI_TransmitReceive+0x1b8>
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801061a:	b29b      	uxth	r3, r3
 801061c:	2b00      	cmp	r3, #0
 801061e:	d014      	beq.n	801064a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	68da      	ldr	r2, [r3, #12]
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801062a:	b292      	uxth	r2, r2
 801062c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010632:	1c9a      	adds	r2, r3, #2
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801063c:	b29b      	uxth	r3, r3
 801063e:	3b01      	subs	r3, #1
 8010640:	b29a      	uxth	r2, r3
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010646:	2301      	movs	r3, #1
 8010648:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801064a:	f7fb f87b 	bl	800b744 <HAL_GetTick>
 801064e:	4602      	mov	r2, r0
 8010650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010652:	1ad3      	subs	r3, r2, r3
 8010654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010656:	429a      	cmp	r2, r3
 8010658:	d807      	bhi.n	801066a <HAL_SPI_TransmitReceive+0x1d8>
 801065a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801065c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010660:	d003      	beq.n	801066a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8010662:	2303      	movs	r3, #3
 8010664:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8010668:	e0a7      	b.n	80107ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801066e:	b29b      	uxth	r3, r3
 8010670:	2b00      	cmp	r3, #0
 8010672:	d1a6      	bne.n	80105c2 <HAL_SPI_TransmitReceive+0x130>
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010678:	b29b      	uxth	r3, r3
 801067a:	2b00      	cmp	r3, #0
 801067c:	d1a1      	bne.n	80105c2 <HAL_SPI_TransmitReceive+0x130>
 801067e:	e07c      	b.n	801077a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	685b      	ldr	r3, [r3, #4]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d002      	beq.n	801068e <HAL_SPI_TransmitReceive+0x1fc>
 8010688:	8b7b      	ldrh	r3, [r7, #26]
 801068a:	2b01      	cmp	r3, #1
 801068c:	d16b      	bne.n	8010766 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	330c      	adds	r3, #12
 8010698:	7812      	ldrb	r2, [r2, #0]
 801069a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106a0:	1c5a      	adds	r2, r3, #1
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80106aa:	b29b      	uxth	r3, r3
 80106ac:	3b01      	subs	r3, #1
 80106ae:	b29a      	uxth	r2, r3
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80106b4:	e057      	b.n	8010766 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	689b      	ldr	r3, [r3, #8]
 80106bc:	f003 0302 	and.w	r3, r3, #2
 80106c0:	2b02      	cmp	r3, #2
 80106c2:	d11c      	bne.n	80106fe <HAL_SPI_TransmitReceive+0x26c>
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80106c8:	b29b      	uxth	r3, r3
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d017      	beq.n	80106fe <HAL_SPI_TransmitReceive+0x26c>
 80106ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106d0:	2b01      	cmp	r3, #1
 80106d2:	d114      	bne.n	80106fe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	330c      	adds	r3, #12
 80106de:	7812      	ldrb	r2, [r2, #0]
 80106e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106e6:	1c5a      	adds	r2, r3, #1
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80106f0:	b29b      	uxth	r3, r3
 80106f2:	3b01      	subs	r3, #1
 80106f4:	b29a      	uxth	r2, r3
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80106fa:	2300      	movs	r3, #0
 80106fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	689b      	ldr	r3, [r3, #8]
 8010704:	f003 0301 	and.w	r3, r3, #1
 8010708:	2b01      	cmp	r3, #1
 801070a:	d119      	bne.n	8010740 <HAL_SPI_TransmitReceive+0x2ae>
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010710:	b29b      	uxth	r3, r3
 8010712:	2b00      	cmp	r3, #0
 8010714:	d014      	beq.n	8010740 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	68da      	ldr	r2, [r3, #12]
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010720:	b2d2      	uxtb	r2, r2
 8010722:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010728:	1c5a      	adds	r2, r3, #1
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010732:	b29b      	uxth	r3, r3
 8010734:	3b01      	subs	r3, #1
 8010736:	b29a      	uxth	r2, r3
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801073c:	2301      	movs	r3, #1
 801073e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8010740:	f7fb f800 	bl	800b744 <HAL_GetTick>
 8010744:	4602      	mov	r2, r0
 8010746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010748:	1ad3      	subs	r3, r2, r3
 801074a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801074c:	429a      	cmp	r2, r3
 801074e:	d803      	bhi.n	8010758 <HAL_SPI_TransmitReceive+0x2c6>
 8010750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010756:	d102      	bne.n	801075e <HAL_SPI_TransmitReceive+0x2cc>
 8010758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801075a:	2b00      	cmp	r3, #0
 801075c:	d103      	bne.n	8010766 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801075e:	2303      	movs	r3, #3
 8010760:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8010764:	e029      	b.n	80107ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801076a:	b29b      	uxth	r3, r3
 801076c:	2b00      	cmp	r3, #0
 801076e:	d1a2      	bne.n	80106b6 <HAL_SPI_TransmitReceive+0x224>
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010774:	b29b      	uxth	r3, r3
 8010776:	2b00      	cmp	r3, #0
 8010778:	d19d      	bne.n	80106b6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801077a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801077c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801077e:	68f8      	ldr	r0, [r7, #12]
 8010780:	f000 f8f8 	bl	8010974 <SPI_EndRxTxTransaction>
 8010784:	4603      	mov	r3, r0
 8010786:	2b00      	cmp	r3, #0
 8010788:	d006      	beq.n	8010798 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 801078a:	2301      	movs	r3, #1
 801078c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	2220      	movs	r2, #32
 8010794:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8010796:	e010      	b.n	80107ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	689b      	ldr	r3, [r3, #8]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d10b      	bne.n	80107b8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80107a0:	2300      	movs	r3, #0
 80107a2:	617b      	str	r3, [r7, #20]
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	68db      	ldr	r3, [r3, #12]
 80107aa:	617b      	str	r3, [r7, #20]
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	689b      	ldr	r3, [r3, #8]
 80107b2:	617b      	str	r3, [r7, #20]
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	e000      	b.n	80107ba <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80107b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	2201      	movs	r2, #1
 80107be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	2200      	movs	r2, #0
 80107c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80107ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80107ce:	4618      	mov	r0, r3
 80107d0:	3730      	adds	r7, #48	; 0x30
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd80      	pop	{r7, pc}

080107d6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80107d6:	b580      	push	{r7, lr}
 80107d8:	b084      	sub	sp, #16
 80107da:	af00      	add	r7, sp, #0
 80107dc:	60f8      	str	r0, [r7, #12]
 80107de:	60b9      	str	r1, [r7, #8]
 80107e0:	603b      	str	r3, [r7, #0]
 80107e2:	4613      	mov	r3, r2
 80107e4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80107e6:	e04c      	b.n	8010882 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107ee:	d048      	beq.n	8010882 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80107f0:	f7fa ffa8 	bl	800b744 <HAL_GetTick>
 80107f4:	4602      	mov	r2, r0
 80107f6:	69bb      	ldr	r3, [r7, #24]
 80107f8:	1ad3      	subs	r3, r2, r3
 80107fa:	683a      	ldr	r2, [r7, #0]
 80107fc:	429a      	cmp	r2, r3
 80107fe:	d902      	bls.n	8010806 <SPI_WaitFlagStateUntilTimeout+0x30>
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d13d      	bne.n	8010882 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	685a      	ldr	r2, [r3, #4]
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010814:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801081e:	d111      	bne.n	8010844 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	689b      	ldr	r3, [r3, #8]
 8010824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010828:	d004      	beq.n	8010834 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	689b      	ldr	r3, [r3, #8]
 801082e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010832:	d107      	bne.n	8010844 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	681a      	ldr	r2, [r3, #0]
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010842:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801084c:	d10f      	bne.n	801086e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	681a      	ldr	r2, [r3, #0]
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801085c:	601a      	str	r2, [r3, #0]
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	681a      	ldr	r2, [r3, #0]
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801086c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	2201      	movs	r2, #1
 8010872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	2200      	movs	r2, #0
 801087a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801087e:	2303      	movs	r3, #3
 8010880:	e00f      	b.n	80108a2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	689a      	ldr	r2, [r3, #8]
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	4013      	ands	r3, r2
 801088c:	68ba      	ldr	r2, [r7, #8]
 801088e:	429a      	cmp	r2, r3
 8010890:	bf0c      	ite	eq
 8010892:	2301      	moveq	r3, #1
 8010894:	2300      	movne	r3, #0
 8010896:	b2db      	uxtb	r3, r3
 8010898:	461a      	mov	r2, r3
 801089a:	79fb      	ldrb	r3, [r7, #7]
 801089c:	429a      	cmp	r2, r3
 801089e:	d1a3      	bne.n	80107e8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80108a0:	2300      	movs	r3, #0
}
 80108a2:	4618      	mov	r0, r3
 80108a4:	3710      	adds	r7, #16
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}

080108aa <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80108aa:	b580      	push	{r7, lr}
 80108ac:	b086      	sub	sp, #24
 80108ae:	af02      	add	r7, sp, #8
 80108b0:	60f8      	str	r0, [r7, #12]
 80108b2:	60b9      	str	r1, [r7, #8]
 80108b4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	685b      	ldr	r3, [r3, #4]
 80108ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80108be:	d111      	bne.n	80108e4 <SPI_EndRxTransaction+0x3a>
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	689b      	ldr	r3, [r3, #8]
 80108c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80108c8:	d004      	beq.n	80108d4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	689b      	ldr	r3, [r3, #8]
 80108ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80108d2:	d107      	bne.n	80108e4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	681a      	ldr	r2, [r3, #0]
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80108e2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	685b      	ldr	r3, [r3, #4]
 80108e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80108ec:	d12a      	bne.n	8010944 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	689b      	ldr	r3, [r3, #8]
 80108f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80108f6:	d012      	beq.n	801091e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	9300      	str	r3, [sp, #0]
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	2200      	movs	r2, #0
 8010900:	2180      	movs	r1, #128	; 0x80
 8010902:	68f8      	ldr	r0, [r7, #12]
 8010904:	f7ff ff67 	bl	80107d6 <SPI_WaitFlagStateUntilTimeout>
 8010908:	4603      	mov	r3, r0
 801090a:	2b00      	cmp	r3, #0
 801090c:	d02d      	beq.n	801096a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010912:	f043 0220 	orr.w	r2, r3, #32
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801091a:	2303      	movs	r3, #3
 801091c:	e026      	b.n	801096c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	9300      	str	r3, [sp, #0]
 8010922:	68bb      	ldr	r3, [r7, #8]
 8010924:	2200      	movs	r2, #0
 8010926:	2101      	movs	r1, #1
 8010928:	68f8      	ldr	r0, [r7, #12]
 801092a:	f7ff ff54 	bl	80107d6 <SPI_WaitFlagStateUntilTimeout>
 801092e:	4603      	mov	r3, r0
 8010930:	2b00      	cmp	r3, #0
 8010932:	d01a      	beq.n	801096a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010938:	f043 0220 	orr.w	r2, r3, #32
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8010940:	2303      	movs	r3, #3
 8010942:	e013      	b.n	801096c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	9300      	str	r3, [sp, #0]
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	2200      	movs	r2, #0
 801094c:	2101      	movs	r1, #1
 801094e:	68f8      	ldr	r0, [r7, #12]
 8010950:	f7ff ff41 	bl	80107d6 <SPI_WaitFlagStateUntilTimeout>
 8010954:	4603      	mov	r3, r0
 8010956:	2b00      	cmp	r3, #0
 8010958:	d007      	beq.n	801096a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801095e:	f043 0220 	orr.w	r2, r3, #32
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8010966:	2303      	movs	r3, #3
 8010968:	e000      	b.n	801096c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 801096a:	2300      	movs	r3, #0
}
 801096c:	4618      	mov	r0, r3
 801096e:	3710      	adds	r7, #16
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}

08010974 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b088      	sub	sp, #32
 8010978:	af02      	add	r7, sp, #8
 801097a:	60f8      	str	r0, [r7, #12]
 801097c:	60b9      	str	r1, [r7, #8]
 801097e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010980:	4b1b      	ldr	r3, [pc, #108]	; (80109f0 <SPI_EndRxTxTransaction+0x7c>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	4a1b      	ldr	r2, [pc, #108]	; (80109f4 <SPI_EndRxTxTransaction+0x80>)
 8010986:	fba2 2303 	umull	r2, r3, r2, r3
 801098a:	0d5b      	lsrs	r3, r3, #21
 801098c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010990:	fb02 f303 	mul.w	r3, r2, r3
 8010994:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	685b      	ldr	r3, [r3, #4]
 801099a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801099e:	d112      	bne.n	80109c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	9300      	str	r3, [sp, #0]
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	2200      	movs	r2, #0
 80109a8:	2180      	movs	r1, #128	; 0x80
 80109aa:	68f8      	ldr	r0, [r7, #12]
 80109ac:	f7ff ff13 	bl	80107d6 <SPI_WaitFlagStateUntilTimeout>
 80109b0:	4603      	mov	r3, r0
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d016      	beq.n	80109e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109ba:	f043 0220 	orr.w	r2, r3, #32
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80109c2:	2303      	movs	r3, #3
 80109c4:	e00f      	b.n	80109e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80109c6:	697b      	ldr	r3, [r7, #20]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d00a      	beq.n	80109e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	3b01      	subs	r3, #1
 80109d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	689b      	ldr	r3, [r3, #8]
 80109d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109dc:	2b80      	cmp	r3, #128	; 0x80
 80109de:	d0f2      	beq.n	80109c6 <SPI_EndRxTxTransaction+0x52>
 80109e0:	e000      	b.n	80109e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80109e2:	bf00      	nop
  }

  return HAL_OK;
 80109e4:	2300      	movs	r3, #0
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	3718      	adds	r7, #24
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}
 80109ee:	bf00      	nop
 80109f0:	20000000 	.word	0x20000000
 80109f4:	165e9f81 	.word	0x165e9f81

080109f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b082      	sub	sp, #8
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d101      	bne.n	8010a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010a06:	2301      	movs	r3, #1
 8010a08:	e01d      	b.n	8010a46 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010a10:	b2db      	uxtb	r3, r3
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d106      	bne.n	8010a24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f7f7 f916 	bl	8007c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2202      	movs	r2, #2
 8010a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681a      	ldr	r2, [r3, #0]
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	3304      	adds	r3, #4
 8010a34:	4619      	mov	r1, r3
 8010a36:	4610      	mov	r0, r2
 8010a38:	f000 fb56 	bl	80110e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2201      	movs	r2, #1
 8010a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010a44:	2300      	movs	r3, #0
}
 8010a46:	4618      	mov	r0, r3
 8010a48:	3708      	adds	r7, #8
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}

08010a4e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010a4e:	b480      	push	{r7}
 8010a50:	b085      	sub	sp, #20
 8010a52:	af00      	add	r7, sp, #0
 8010a54:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	68da      	ldr	r2, [r3, #12]
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	f042 0201 	orr.w	r2, r2, #1
 8010a64:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	689b      	ldr	r3, [r3, #8]
 8010a6c:	f003 0307 	and.w	r3, r3, #7
 8010a70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	2b06      	cmp	r3, #6
 8010a76:	d007      	beq.n	8010a88 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	681a      	ldr	r2, [r3, #0]
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	f042 0201 	orr.w	r2, r2, #1
 8010a86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010a88:	2300      	movs	r3, #0
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3714      	adds	r7, #20
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a94:	4770      	bx	lr

08010a96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010a96:	b580      	push	{r7, lr}
 8010a98:	b082      	sub	sp, #8
 8010a9a:	af00      	add	r7, sp, #0
 8010a9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d101      	bne.n	8010aa8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010aa4:	2301      	movs	r3, #1
 8010aa6:	e01d      	b.n	8010ae4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010aae:	b2db      	uxtb	r3, r3
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d106      	bne.n	8010ac2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010abc:	6878      	ldr	r0, [r7, #4]
 8010abe:	f7f7 f853 	bl	8007b68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2202      	movs	r2, #2
 8010ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681a      	ldr	r2, [r3, #0]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	3304      	adds	r3, #4
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	4610      	mov	r0, r2
 8010ad6:	f000 fb07 	bl	80110e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	2201      	movs	r2, #1
 8010ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010ae2:	2300      	movs	r3, #0
}
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	3708      	adds	r7, #8
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}

08010aec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b084      	sub	sp, #16
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
 8010af4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	2201      	movs	r2, #1
 8010afc:	6839      	ldr	r1, [r7, #0]
 8010afe:	4618      	mov	r0, r3
 8010b00:	f000 fd42 	bl	8011588 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	4a15      	ldr	r2, [pc, #84]	; (8010b60 <HAL_TIM_PWM_Start+0x74>)
 8010b0a:	4293      	cmp	r3, r2
 8010b0c:	d004      	beq.n	8010b18 <HAL_TIM_PWM_Start+0x2c>
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	4a14      	ldr	r2, [pc, #80]	; (8010b64 <HAL_TIM_PWM_Start+0x78>)
 8010b14:	4293      	cmp	r3, r2
 8010b16:	d101      	bne.n	8010b1c <HAL_TIM_PWM_Start+0x30>
 8010b18:	2301      	movs	r3, #1
 8010b1a:	e000      	b.n	8010b1e <HAL_TIM_PWM_Start+0x32>
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d007      	beq.n	8010b32 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010b30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	689b      	ldr	r3, [r3, #8]
 8010b38:	f003 0307 	and.w	r3, r3, #7
 8010b3c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	2b06      	cmp	r3, #6
 8010b42:	d007      	beq.n	8010b54 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	681a      	ldr	r2, [r3, #0]
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	f042 0201 	orr.w	r2, r2, #1
 8010b52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010b54:	2300      	movs	r3, #0
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3710      	adds	r7, #16
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}
 8010b5e:	bf00      	nop
 8010b60:	40010000 	.word	0x40010000
 8010b64:	40010400 	.word	0x40010400

08010b68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b086      	sub	sp, #24
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
 8010b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d101      	bne.n	8010b7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8010b78:	2301      	movs	r3, #1
 8010b7a:	e083      	b.n	8010c84 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010b82:	b2db      	uxtb	r3, r3
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d106      	bne.n	8010b96 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f7f7 f8ed 	bl	8007d70 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	2202      	movs	r2, #2
 8010b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	689b      	ldr	r3, [r3, #8]
 8010ba4:	687a      	ldr	r2, [r7, #4]
 8010ba6:	6812      	ldr	r2, [r2, #0]
 8010ba8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010bac:	f023 0307 	bic.w	r3, r3, #7
 8010bb0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681a      	ldr	r2, [r3, #0]
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	3304      	adds	r3, #4
 8010bba:	4619      	mov	r1, r3
 8010bbc:	4610      	mov	r0, r2
 8010bbe:	f000 fa93 	bl	80110e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	689b      	ldr	r3, [r3, #8]
 8010bc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	699b      	ldr	r3, [r3, #24]
 8010bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	6a1b      	ldr	r3, [r3, #32]
 8010bd8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	697a      	ldr	r2, [r7, #20]
 8010be0:	4313      	orrs	r3, r2
 8010be2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8010be4:	693b      	ldr	r3, [r7, #16]
 8010be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010bea:	f023 0303 	bic.w	r3, r3, #3
 8010bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	689a      	ldr	r2, [r3, #8]
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	699b      	ldr	r3, [r3, #24]
 8010bf8:	021b      	lsls	r3, r3, #8
 8010bfa:	4313      	orrs	r3, r2
 8010bfc:	693a      	ldr	r2, [r7, #16]
 8010bfe:	4313      	orrs	r3, r2
 8010c00:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8010c02:	693b      	ldr	r3, [r7, #16]
 8010c04:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8010c08:	f023 030c 	bic.w	r3, r3, #12
 8010c0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8010c0e:	693b      	ldr	r3, [r7, #16]
 8010c10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010c14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010c18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8010c1a:	683b      	ldr	r3, [r7, #0]
 8010c1c:	68da      	ldr	r2, [r3, #12]
 8010c1e:	683b      	ldr	r3, [r7, #0]
 8010c20:	69db      	ldr	r3, [r3, #28]
 8010c22:	021b      	lsls	r3, r3, #8
 8010c24:	4313      	orrs	r3, r2
 8010c26:	693a      	ldr	r2, [r7, #16]
 8010c28:	4313      	orrs	r3, r2
 8010c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	691b      	ldr	r3, [r3, #16]
 8010c30:	011a      	lsls	r2, r3, #4
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	6a1b      	ldr	r3, [r3, #32]
 8010c36:	031b      	lsls	r3, r3, #12
 8010c38:	4313      	orrs	r3, r2
 8010c3a:	693a      	ldr	r2, [r7, #16]
 8010c3c:	4313      	orrs	r3, r2
 8010c3e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8010c46:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8010c4e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	685a      	ldr	r2, [r3, #4]
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	695b      	ldr	r3, [r3, #20]
 8010c58:	011b      	lsls	r3, r3, #4
 8010c5a:	4313      	orrs	r3, r2
 8010c5c:	68fa      	ldr	r2, [r7, #12]
 8010c5e:	4313      	orrs	r3, r2
 8010c60:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	697a      	ldr	r2, [r7, #20]
 8010c68:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	693a      	ldr	r2, [r7, #16]
 8010c70:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	68fa      	ldr	r2, [r7, #12]
 8010c78:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	2201      	movs	r2, #1
 8010c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010c82:	2300      	movs	r3, #0
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	3718      	adds	r7, #24
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}

08010c8c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b082      	sub	sp, #8
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
 8010c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8010c96:	683b      	ldr	r3, [r7, #0]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d002      	beq.n	8010ca2 <HAL_TIM_Encoder_Start+0x16>
 8010c9c:	2b04      	cmp	r3, #4
 8010c9e:	d008      	beq.n	8010cb2 <HAL_TIM_Encoder_Start+0x26>
 8010ca0:	e00f      	b.n	8010cc2 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	2201      	movs	r2, #1
 8010ca8:	2100      	movs	r1, #0
 8010caa:	4618      	mov	r0, r3
 8010cac:	f000 fc6c 	bl	8011588 <TIM_CCxChannelCmd>
      break;
 8010cb0:	e016      	b.n	8010ce0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	2201      	movs	r2, #1
 8010cb8:	2104      	movs	r1, #4
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f000 fc64 	bl	8011588 <TIM_CCxChannelCmd>
      break;
 8010cc0:	e00e      	b.n	8010ce0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	2201      	movs	r2, #1
 8010cc8:	2100      	movs	r1, #0
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f000 fc5c 	bl	8011588 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	2201      	movs	r2, #1
 8010cd6:	2104      	movs	r1, #4
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f000 fc55 	bl	8011588 <TIM_CCxChannelCmd>
      break;
 8010cde:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	681a      	ldr	r2, [r3, #0]
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	f042 0201 	orr.w	r2, r2, #1
 8010cee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8010cf0:	2300      	movs	r3, #0
}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	3708      	adds	r7, #8
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd80      	pop	{r7, pc}

08010cfa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010cfa:	b580      	push	{r7, lr}
 8010cfc:	b082      	sub	sp, #8
 8010cfe:	af00      	add	r7, sp, #0
 8010d00:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	691b      	ldr	r3, [r3, #16]
 8010d08:	f003 0302 	and.w	r3, r3, #2
 8010d0c:	2b02      	cmp	r3, #2
 8010d0e:	d122      	bne.n	8010d56 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	68db      	ldr	r3, [r3, #12]
 8010d16:	f003 0302 	and.w	r3, r3, #2
 8010d1a:	2b02      	cmp	r3, #2
 8010d1c:	d11b      	bne.n	8010d56 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	f06f 0202 	mvn.w	r2, #2
 8010d26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2201      	movs	r2, #1
 8010d2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	699b      	ldr	r3, [r3, #24]
 8010d34:	f003 0303 	and.w	r3, r3, #3
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d003      	beq.n	8010d44 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010d3c:	6878      	ldr	r0, [r7, #4]
 8010d3e:	f000 f9b5 	bl	80110ac <HAL_TIM_IC_CaptureCallback>
 8010d42:	e005      	b.n	8010d50 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010d44:	6878      	ldr	r0, [r7, #4]
 8010d46:	f000 f9a7 	bl	8011098 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d4a:	6878      	ldr	r0, [r7, #4]
 8010d4c:	f000 f9b8 	bl	80110c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	2200      	movs	r2, #0
 8010d54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	691b      	ldr	r3, [r3, #16]
 8010d5c:	f003 0304 	and.w	r3, r3, #4
 8010d60:	2b04      	cmp	r3, #4
 8010d62:	d122      	bne.n	8010daa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	68db      	ldr	r3, [r3, #12]
 8010d6a:	f003 0304 	and.w	r3, r3, #4
 8010d6e:	2b04      	cmp	r3, #4
 8010d70:	d11b      	bne.n	8010daa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	f06f 0204 	mvn.w	r2, #4
 8010d7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2202      	movs	r2, #2
 8010d80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	699b      	ldr	r3, [r3, #24]
 8010d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d003      	beq.n	8010d98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010d90:	6878      	ldr	r0, [r7, #4]
 8010d92:	f000 f98b 	bl	80110ac <HAL_TIM_IC_CaptureCallback>
 8010d96:	e005      	b.n	8010da4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	f000 f97d 	bl	8011098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d9e:	6878      	ldr	r0, [r7, #4]
 8010da0:	f000 f98e 	bl	80110c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2200      	movs	r2, #0
 8010da8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	691b      	ldr	r3, [r3, #16]
 8010db0:	f003 0308 	and.w	r3, r3, #8
 8010db4:	2b08      	cmp	r3, #8
 8010db6:	d122      	bne.n	8010dfe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	68db      	ldr	r3, [r3, #12]
 8010dbe:	f003 0308 	and.w	r3, r3, #8
 8010dc2:	2b08      	cmp	r3, #8
 8010dc4:	d11b      	bne.n	8010dfe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	f06f 0208 	mvn.w	r2, #8
 8010dce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	2204      	movs	r2, #4
 8010dd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	69db      	ldr	r3, [r3, #28]
 8010ddc:	f003 0303 	and.w	r3, r3, #3
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d003      	beq.n	8010dec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	f000 f961 	bl	80110ac <HAL_TIM_IC_CaptureCallback>
 8010dea:	e005      	b.n	8010df8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010dec:	6878      	ldr	r0, [r7, #4]
 8010dee:	f000 f953 	bl	8011098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f000 f964 	bl	80110c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	691b      	ldr	r3, [r3, #16]
 8010e04:	f003 0310 	and.w	r3, r3, #16
 8010e08:	2b10      	cmp	r3, #16
 8010e0a:	d122      	bne.n	8010e52 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	68db      	ldr	r3, [r3, #12]
 8010e12:	f003 0310 	and.w	r3, r3, #16
 8010e16:	2b10      	cmp	r3, #16
 8010e18:	d11b      	bne.n	8010e52 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	f06f 0210 	mvn.w	r2, #16
 8010e22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	2208      	movs	r2, #8
 8010e28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	69db      	ldr	r3, [r3, #28]
 8010e30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d003      	beq.n	8010e40 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010e38:	6878      	ldr	r0, [r7, #4]
 8010e3a:	f000 f937 	bl	80110ac <HAL_TIM_IC_CaptureCallback>
 8010e3e:	e005      	b.n	8010e4c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010e40:	6878      	ldr	r0, [r7, #4]
 8010e42:	f000 f929 	bl	8011098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010e46:	6878      	ldr	r0, [r7, #4]
 8010e48:	f000 f93a 	bl	80110c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	2200      	movs	r2, #0
 8010e50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	691b      	ldr	r3, [r3, #16]
 8010e58:	f003 0301 	and.w	r3, r3, #1
 8010e5c:	2b01      	cmp	r3, #1
 8010e5e:	d10e      	bne.n	8010e7e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	68db      	ldr	r3, [r3, #12]
 8010e66:	f003 0301 	and.w	r3, r3, #1
 8010e6a:	2b01      	cmp	r3, #1
 8010e6c:	d107      	bne.n	8010e7e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	f06f 0201 	mvn.w	r2, #1
 8010e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010e78:	6878      	ldr	r0, [r7, #4]
 8010e7a:	f7f5 fb39 	bl	80064f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	691b      	ldr	r3, [r3, #16]
 8010e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e88:	2b80      	cmp	r3, #128	; 0x80
 8010e8a:	d10e      	bne.n	8010eaa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	68db      	ldr	r3, [r3, #12]
 8010e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e96:	2b80      	cmp	r3, #128	; 0x80
 8010e98:	d107      	bne.n	8010eaa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	f000 fc6d 	bl	8011784 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	691b      	ldr	r3, [r3, #16]
 8010eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010eb4:	2b40      	cmp	r3, #64	; 0x40
 8010eb6:	d10e      	bne.n	8010ed6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	68db      	ldr	r3, [r3, #12]
 8010ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ec2:	2b40      	cmp	r3, #64	; 0x40
 8010ec4:	d107      	bne.n	8010ed6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	f000 f8ff 	bl	80110d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	691b      	ldr	r3, [r3, #16]
 8010edc:	f003 0320 	and.w	r3, r3, #32
 8010ee0:	2b20      	cmp	r3, #32
 8010ee2:	d10e      	bne.n	8010f02 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	68db      	ldr	r3, [r3, #12]
 8010eea:	f003 0320 	and.w	r3, r3, #32
 8010eee:	2b20      	cmp	r3, #32
 8010ef0:	d107      	bne.n	8010f02 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	f06f 0220 	mvn.w	r2, #32
 8010efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	f000 fc37 	bl	8011770 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010f02:	bf00      	nop
 8010f04:	3708      	adds	r7, #8
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}
	...

08010f0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b084      	sub	sp, #16
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	60f8      	str	r0, [r7, #12]
 8010f14:	60b9      	str	r1, [r7, #8]
 8010f16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010f1e:	2b01      	cmp	r3, #1
 8010f20:	d101      	bne.n	8010f26 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8010f22:	2302      	movs	r3, #2
 8010f24:	e0b4      	b.n	8011090 <HAL_TIM_PWM_ConfigChannel+0x184>
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	2201      	movs	r2, #1
 8010f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	2202      	movs	r2, #2
 8010f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2b0c      	cmp	r3, #12
 8010f3a:	f200 809f 	bhi.w	801107c <HAL_TIM_PWM_ConfigChannel+0x170>
 8010f3e:	a201      	add	r2, pc, #4	; (adr r2, 8010f44 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8010f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f44:	08010f79 	.word	0x08010f79
 8010f48:	0801107d 	.word	0x0801107d
 8010f4c:	0801107d 	.word	0x0801107d
 8010f50:	0801107d 	.word	0x0801107d
 8010f54:	08010fb9 	.word	0x08010fb9
 8010f58:	0801107d 	.word	0x0801107d
 8010f5c:	0801107d 	.word	0x0801107d
 8010f60:	0801107d 	.word	0x0801107d
 8010f64:	08010ffb 	.word	0x08010ffb
 8010f68:	0801107d 	.word	0x0801107d
 8010f6c:	0801107d 	.word	0x0801107d
 8010f70:	0801107d 	.word	0x0801107d
 8010f74:	0801103b 	.word	0x0801103b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	68b9      	ldr	r1, [r7, #8]
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f000 f952 	bl	8011228 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	699a      	ldr	r2, [r3, #24]
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	f042 0208 	orr.w	r2, r2, #8
 8010f92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	699a      	ldr	r2, [r3, #24]
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	f022 0204 	bic.w	r2, r2, #4
 8010fa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	6999      	ldr	r1, [r3, #24]
 8010faa:	68bb      	ldr	r3, [r7, #8]
 8010fac:	691a      	ldr	r2, [r3, #16]
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	430a      	orrs	r2, r1
 8010fb4:	619a      	str	r2, [r3, #24]
      break;
 8010fb6:	e062      	b.n	801107e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	68b9      	ldr	r1, [r7, #8]
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	f000 f9a2 	bl	8011308 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	699a      	ldr	r2, [r3, #24]
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010fd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	699a      	ldr	r2, [r3, #24]
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010fe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	6999      	ldr	r1, [r3, #24]
 8010fea:	68bb      	ldr	r3, [r7, #8]
 8010fec:	691b      	ldr	r3, [r3, #16]
 8010fee:	021a      	lsls	r2, r3, #8
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	430a      	orrs	r2, r1
 8010ff6:	619a      	str	r2, [r3, #24]
      break;
 8010ff8:	e041      	b.n	801107e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	68b9      	ldr	r1, [r7, #8]
 8011000:	4618      	mov	r0, r3
 8011002:	f000 f9f7 	bl	80113f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	69da      	ldr	r2, [r3, #28]
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	f042 0208 	orr.w	r2, r2, #8
 8011014:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	69da      	ldr	r2, [r3, #28]
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	f022 0204 	bic.w	r2, r2, #4
 8011024:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	69d9      	ldr	r1, [r3, #28]
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	691a      	ldr	r2, [r3, #16]
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	430a      	orrs	r2, r1
 8011036:	61da      	str	r2, [r3, #28]
      break;
 8011038:	e021      	b.n	801107e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	68b9      	ldr	r1, [r7, #8]
 8011040:	4618      	mov	r0, r3
 8011042:	f000 fa4b 	bl	80114dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	69da      	ldr	r2, [r3, #28]
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011054:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	69da      	ldr	r2, [r3, #28]
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011064:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	69d9      	ldr	r1, [r3, #28]
 801106c:	68bb      	ldr	r3, [r7, #8]
 801106e:	691b      	ldr	r3, [r3, #16]
 8011070:	021a      	lsls	r2, r3, #8
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	430a      	orrs	r2, r1
 8011078:	61da      	str	r2, [r3, #28]
      break;
 801107a:	e000      	b.n	801107e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 801107c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	2201      	movs	r2, #1
 8011082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	2200      	movs	r2, #0
 801108a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801108e:	2300      	movs	r3, #0
}
 8011090:	4618      	mov	r0, r3
 8011092:	3710      	adds	r7, #16
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}

08011098 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011098:	b480      	push	{r7}
 801109a:	b083      	sub	sp, #12
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80110a0:	bf00      	nop
 80110a2:	370c      	adds	r7, #12
 80110a4:	46bd      	mov	sp, r7
 80110a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110aa:	4770      	bx	lr

080110ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80110ac:	b480      	push	{r7}
 80110ae:	b083      	sub	sp, #12
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80110b4:	bf00      	nop
 80110b6:	370c      	adds	r7, #12
 80110b8:	46bd      	mov	sp, r7
 80110ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110be:	4770      	bx	lr

080110c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80110c0:	b480      	push	{r7}
 80110c2:	b083      	sub	sp, #12
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80110c8:	bf00      	nop
 80110ca:	370c      	adds	r7, #12
 80110cc:	46bd      	mov	sp, r7
 80110ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d2:	4770      	bx	lr

080110d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80110d4:	b480      	push	{r7}
 80110d6:	b083      	sub	sp, #12
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80110dc:	bf00      	nop
 80110de:	370c      	adds	r7, #12
 80110e0:	46bd      	mov	sp, r7
 80110e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e6:	4770      	bx	lr

080110e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80110e8:	b480      	push	{r7}
 80110ea:	b085      	sub	sp, #20
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
 80110f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	4a40      	ldr	r2, [pc, #256]	; (80111fc <TIM_Base_SetConfig+0x114>)
 80110fc:	4293      	cmp	r3, r2
 80110fe:	d013      	beq.n	8011128 <TIM_Base_SetConfig+0x40>
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011106:	d00f      	beq.n	8011128 <TIM_Base_SetConfig+0x40>
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	4a3d      	ldr	r2, [pc, #244]	; (8011200 <TIM_Base_SetConfig+0x118>)
 801110c:	4293      	cmp	r3, r2
 801110e:	d00b      	beq.n	8011128 <TIM_Base_SetConfig+0x40>
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	4a3c      	ldr	r2, [pc, #240]	; (8011204 <TIM_Base_SetConfig+0x11c>)
 8011114:	4293      	cmp	r3, r2
 8011116:	d007      	beq.n	8011128 <TIM_Base_SetConfig+0x40>
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	4a3b      	ldr	r2, [pc, #236]	; (8011208 <TIM_Base_SetConfig+0x120>)
 801111c:	4293      	cmp	r3, r2
 801111e:	d003      	beq.n	8011128 <TIM_Base_SetConfig+0x40>
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	4a3a      	ldr	r2, [pc, #232]	; (801120c <TIM_Base_SetConfig+0x124>)
 8011124:	4293      	cmp	r3, r2
 8011126:	d108      	bne.n	801113a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801112e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	685b      	ldr	r3, [r3, #4]
 8011134:	68fa      	ldr	r2, [r7, #12]
 8011136:	4313      	orrs	r3, r2
 8011138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	4a2f      	ldr	r2, [pc, #188]	; (80111fc <TIM_Base_SetConfig+0x114>)
 801113e:	4293      	cmp	r3, r2
 8011140:	d02b      	beq.n	801119a <TIM_Base_SetConfig+0xb2>
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011148:	d027      	beq.n	801119a <TIM_Base_SetConfig+0xb2>
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	4a2c      	ldr	r2, [pc, #176]	; (8011200 <TIM_Base_SetConfig+0x118>)
 801114e:	4293      	cmp	r3, r2
 8011150:	d023      	beq.n	801119a <TIM_Base_SetConfig+0xb2>
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	4a2b      	ldr	r2, [pc, #172]	; (8011204 <TIM_Base_SetConfig+0x11c>)
 8011156:	4293      	cmp	r3, r2
 8011158:	d01f      	beq.n	801119a <TIM_Base_SetConfig+0xb2>
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	4a2a      	ldr	r2, [pc, #168]	; (8011208 <TIM_Base_SetConfig+0x120>)
 801115e:	4293      	cmp	r3, r2
 8011160:	d01b      	beq.n	801119a <TIM_Base_SetConfig+0xb2>
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	4a29      	ldr	r2, [pc, #164]	; (801120c <TIM_Base_SetConfig+0x124>)
 8011166:	4293      	cmp	r3, r2
 8011168:	d017      	beq.n	801119a <TIM_Base_SetConfig+0xb2>
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	4a28      	ldr	r2, [pc, #160]	; (8011210 <TIM_Base_SetConfig+0x128>)
 801116e:	4293      	cmp	r3, r2
 8011170:	d013      	beq.n	801119a <TIM_Base_SetConfig+0xb2>
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	4a27      	ldr	r2, [pc, #156]	; (8011214 <TIM_Base_SetConfig+0x12c>)
 8011176:	4293      	cmp	r3, r2
 8011178:	d00f      	beq.n	801119a <TIM_Base_SetConfig+0xb2>
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	4a26      	ldr	r2, [pc, #152]	; (8011218 <TIM_Base_SetConfig+0x130>)
 801117e:	4293      	cmp	r3, r2
 8011180:	d00b      	beq.n	801119a <TIM_Base_SetConfig+0xb2>
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	4a25      	ldr	r2, [pc, #148]	; (801121c <TIM_Base_SetConfig+0x134>)
 8011186:	4293      	cmp	r3, r2
 8011188:	d007      	beq.n	801119a <TIM_Base_SetConfig+0xb2>
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	4a24      	ldr	r2, [pc, #144]	; (8011220 <TIM_Base_SetConfig+0x138>)
 801118e:	4293      	cmp	r3, r2
 8011190:	d003      	beq.n	801119a <TIM_Base_SetConfig+0xb2>
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	4a23      	ldr	r2, [pc, #140]	; (8011224 <TIM_Base_SetConfig+0x13c>)
 8011196:	4293      	cmp	r3, r2
 8011198:	d108      	bne.n	80111ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80111a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	68db      	ldr	r3, [r3, #12]
 80111a6:	68fa      	ldr	r2, [r7, #12]
 80111a8:	4313      	orrs	r3, r2
 80111aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80111b2:	683b      	ldr	r3, [r7, #0]
 80111b4:	695b      	ldr	r3, [r3, #20]
 80111b6:	4313      	orrs	r3, r2
 80111b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	68fa      	ldr	r2, [r7, #12]
 80111be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	689a      	ldr	r2, [r3, #8]
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	681a      	ldr	r2, [r3, #0]
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	4a0a      	ldr	r2, [pc, #40]	; (80111fc <TIM_Base_SetConfig+0x114>)
 80111d4:	4293      	cmp	r3, r2
 80111d6:	d003      	beq.n	80111e0 <TIM_Base_SetConfig+0xf8>
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	4a0c      	ldr	r2, [pc, #48]	; (801120c <TIM_Base_SetConfig+0x124>)
 80111dc:	4293      	cmp	r3, r2
 80111de:	d103      	bne.n	80111e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	691a      	ldr	r2, [r3, #16]
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2201      	movs	r2, #1
 80111ec:	615a      	str	r2, [r3, #20]
}
 80111ee:	bf00      	nop
 80111f0:	3714      	adds	r7, #20
 80111f2:	46bd      	mov	sp, r7
 80111f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f8:	4770      	bx	lr
 80111fa:	bf00      	nop
 80111fc:	40010000 	.word	0x40010000
 8011200:	40000400 	.word	0x40000400
 8011204:	40000800 	.word	0x40000800
 8011208:	40000c00 	.word	0x40000c00
 801120c:	40010400 	.word	0x40010400
 8011210:	40014000 	.word	0x40014000
 8011214:	40014400 	.word	0x40014400
 8011218:	40014800 	.word	0x40014800
 801121c:	40001800 	.word	0x40001800
 8011220:	40001c00 	.word	0x40001c00
 8011224:	40002000 	.word	0x40002000

08011228 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011228:	b480      	push	{r7}
 801122a:	b087      	sub	sp, #28
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
 8011230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6a1b      	ldr	r3, [r3, #32]
 8011236:	f023 0201 	bic.w	r2, r3, #1
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	6a1b      	ldr	r3, [r3, #32]
 8011242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	685b      	ldr	r3, [r3, #4]
 8011248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	699b      	ldr	r3, [r3, #24]
 801124e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	f023 0303 	bic.w	r3, r3, #3
 801125e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	68fa      	ldr	r2, [r7, #12]
 8011266:	4313      	orrs	r3, r2
 8011268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801126a:	697b      	ldr	r3, [r7, #20]
 801126c:	f023 0302 	bic.w	r3, r3, #2
 8011270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	689b      	ldr	r3, [r3, #8]
 8011276:	697a      	ldr	r2, [r7, #20]
 8011278:	4313      	orrs	r3, r2
 801127a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	4a20      	ldr	r2, [pc, #128]	; (8011300 <TIM_OC1_SetConfig+0xd8>)
 8011280:	4293      	cmp	r3, r2
 8011282:	d003      	beq.n	801128c <TIM_OC1_SetConfig+0x64>
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	4a1f      	ldr	r2, [pc, #124]	; (8011304 <TIM_OC1_SetConfig+0xdc>)
 8011288:	4293      	cmp	r3, r2
 801128a:	d10c      	bne.n	80112a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801128c:	697b      	ldr	r3, [r7, #20]
 801128e:	f023 0308 	bic.w	r3, r3, #8
 8011292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	68db      	ldr	r3, [r3, #12]
 8011298:	697a      	ldr	r2, [r7, #20]
 801129a:	4313      	orrs	r3, r2
 801129c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801129e:	697b      	ldr	r3, [r7, #20]
 80112a0:	f023 0304 	bic.w	r3, r3, #4
 80112a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	4a15      	ldr	r2, [pc, #84]	; (8011300 <TIM_OC1_SetConfig+0xd8>)
 80112aa:	4293      	cmp	r3, r2
 80112ac:	d003      	beq.n	80112b6 <TIM_OC1_SetConfig+0x8e>
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	4a14      	ldr	r2, [pc, #80]	; (8011304 <TIM_OC1_SetConfig+0xdc>)
 80112b2:	4293      	cmp	r3, r2
 80112b4:	d111      	bne.n	80112da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80112b6:	693b      	ldr	r3, [r7, #16]
 80112b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80112bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80112be:	693b      	ldr	r3, [r7, #16]
 80112c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80112c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	695b      	ldr	r3, [r3, #20]
 80112ca:	693a      	ldr	r2, [r7, #16]
 80112cc:	4313      	orrs	r3, r2
 80112ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80112d0:	683b      	ldr	r3, [r7, #0]
 80112d2:	699b      	ldr	r3, [r3, #24]
 80112d4:	693a      	ldr	r2, [r7, #16]
 80112d6:	4313      	orrs	r3, r2
 80112d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	693a      	ldr	r2, [r7, #16]
 80112de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	68fa      	ldr	r2, [r7, #12]
 80112e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80112e6:	683b      	ldr	r3, [r7, #0]
 80112e8:	685a      	ldr	r2, [r3, #4]
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	697a      	ldr	r2, [r7, #20]
 80112f2:	621a      	str	r2, [r3, #32]
}
 80112f4:	bf00      	nop
 80112f6:	371c      	adds	r7, #28
 80112f8:	46bd      	mov	sp, r7
 80112fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fe:	4770      	bx	lr
 8011300:	40010000 	.word	0x40010000
 8011304:	40010400 	.word	0x40010400

08011308 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011308:	b480      	push	{r7}
 801130a:	b087      	sub	sp, #28
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
 8011310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6a1b      	ldr	r3, [r3, #32]
 8011316:	f023 0210 	bic.w	r2, r3, #16
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	6a1b      	ldr	r3, [r3, #32]
 8011322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	685b      	ldr	r3, [r3, #4]
 8011328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	699b      	ldr	r3, [r3, #24]
 801132e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801133e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	021b      	lsls	r3, r3, #8
 8011346:	68fa      	ldr	r2, [r7, #12]
 8011348:	4313      	orrs	r3, r2
 801134a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801134c:	697b      	ldr	r3, [r7, #20]
 801134e:	f023 0320 	bic.w	r3, r3, #32
 8011352:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	689b      	ldr	r3, [r3, #8]
 8011358:	011b      	lsls	r3, r3, #4
 801135a:	697a      	ldr	r2, [r7, #20]
 801135c:	4313      	orrs	r3, r2
 801135e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	4a22      	ldr	r2, [pc, #136]	; (80113ec <TIM_OC2_SetConfig+0xe4>)
 8011364:	4293      	cmp	r3, r2
 8011366:	d003      	beq.n	8011370 <TIM_OC2_SetConfig+0x68>
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	4a21      	ldr	r2, [pc, #132]	; (80113f0 <TIM_OC2_SetConfig+0xe8>)
 801136c:	4293      	cmp	r3, r2
 801136e:	d10d      	bne.n	801138c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011370:	697b      	ldr	r3, [r7, #20]
 8011372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	68db      	ldr	r3, [r3, #12]
 801137c:	011b      	lsls	r3, r3, #4
 801137e:	697a      	ldr	r2, [r7, #20]
 8011380:	4313      	orrs	r3, r2
 8011382:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011384:	697b      	ldr	r3, [r7, #20]
 8011386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801138a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	4a17      	ldr	r2, [pc, #92]	; (80113ec <TIM_OC2_SetConfig+0xe4>)
 8011390:	4293      	cmp	r3, r2
 8011392:	d003      	beq.n	801139c <TIM_OC2_SetConfig+0x94>
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	4a16      	ldr	r2, [pc, #88]	; (80113f0 <TIM_OC2_SetConfig+0xe8>)
 8011398:	4293      	cmp	r3, r2
 801139a:	d113      	bne.n	80113c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801139c:	693b      	ldr	r3, [r7, #16]
 801139e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80113a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80113a4:	693b      	ldr	r3, [r7, #16]
 80113a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80113aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	695b      	ldr	r3, [r3, #20]
 80113b0:	009b      	lsls	r3, r3, #2
 80113b2:	693a      	ldr	r2, [r7, #16]
 80113b4:	4313      	orrs	r3, r2
 80113b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	699b      	ldr	r3, [r3, #24]
 80113bc:	009b      	lsls	r3, r3, #2
 80113be:	693a      	ldr	r2, [r7, #16]
 80113c0:	4313      	orrs	r3, r2
 80113c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	693a      	ldr	r2, [r7, #16]
 80113c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	68fa      	ldr	r2, [r7, #12]
 80113ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80113d0:	683b      	ldr	r3, [r7, #0]
 80113d2:	685a      	ldr	r2, [r3, #4]
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	697a      	ldr	r2, [r7, #20]
 80113dc:	621a      	str	r2, [r3, #32]
}
 80113de:	bf00      	nop
 80113e0:	371c      	adds	r7, #28
 80113e2:	46bd      	mov	sp, r7
 80113e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e8:	4770      	bx	lr
 80113ea:	bf00      	nop
 80113ec:	40010000 	.word	0x40010000
 80113f0:	40010400 	.word	0x40010400

080113f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80113f4:	b480      	push	{r7}
 80113f6:	b087      	sub	sp, #28
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
 80113fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	6a1b      	ldr	r3, [r3, #32]
 8011402:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	6a1b      	ldr	r3, [r3, #32]
 801140e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	685b      	ldr	r3, [r3, #4]
 8011414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	69db      	ldr	r3, [r3, #28]
 801141a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	f023 0303 	bic.w	r3, r3, #3
 801142a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	68fa      	ldr	r2, [r7, #12]
 8011432:	4313      	orrs	r3, r2
 8011434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011436:	697b      	ldr	r3, [r7, #20]
 8011438:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801143c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	689b      	ldr	r3, [r3, #8]
 8011442:	021b      	lsls	r3, r3, #8
 8011444:	697a      	ldr	r2, [r7, #20]
 8011446:	4313      	orrs	r3, r2
 8011448:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	4a21      	ldr	r2, [pc, #132]	; (80114d4 <TIM_OC3_SetConfig+0xe0>)
 801144e:	4293      	cmp	r3, r2
 8011450:	d003      	beq.n	801145a <TIM_OC3_SetConfig+0x66>
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	4a20      	ldr	r2, [pc, #128]	; (80114d8 <TIM_OC3_SetConfig+0xe4>)
 8011456:	4293      	cmp	r3, r2
 8011458:	d10d      	bne.n	8011476 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801145a:	697b      	ldr	r3, [r7, #20]
 801145c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011460:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	68db      	ldr	r3, [r3, #12]
 8011466:	021b      	lsls	r3, r3, #8
 8011468:	697a      	ldr	r2, [r7, #20]
 801146a:	4313      	orrs	r3, r2
 801146c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801146e:	697b      	ldr	r3, [r7, #20]
 8011470:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	4a16      	ldr	r2, [pc, #88]	; (80114d4 <TIM_OC3_SetConfig+0xe0>)
 801147a:	4293      	cmp	r3, r2
 801147c:	d003      	beq.n	8011486 <TIM_OC3_SetConfig+0x92>
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	4a15      	ldr	r2, [pc, #84]	; (80114d8 <TIM_OC3_SetConfig+0xe4>)
 8011482:	4293      	cmp	r3, r2
 8011484:	d113      	bne.n	80114ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011486:	693b      	ldr	r3, [r7, #16]
 8011488:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801148c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801148e:	693b      	ldr	r3, [r7, #16]
 8011490:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011496:	683b      	ldr	r3, [r7, #0]
 8011498:	695b      	ldr	r3, [r3, #20]
 801149a:	011b      	lsls	r3, r3, #4
 801149c:	693a      	ldr	r2, [r7, #16]
 801149e:	4313      	orrs	r3, r2
 80114a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80114a2:	683b      	ldr	r3, [r7, #0]
 80114a4:	699b      	ldr	r3, [r3, #24]
 80114a6:	011b      	lsls	r3, r3, #4
 80114a8:	693a      	ldr	r2, [r7, #16]
 80114aa:	4313      	orrs	r3, r2
 80114ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	693a      	ldr	r2, [r7, #16]
 80114b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	68fa      	ldr	r2, [r7, #12]
 80114b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80114ba:	683b      	ldr	r3, [r7, #0]
 80114bc:	685a      	ldr	r2, [r3, #4]
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	697a      	ldr	r2, [r7, #20]
 80114c6:	621a      	str	r2, [r3, #32]
}
 80114c8:	bf00      	nop
 80114ca:	371c      	adds	r7, #28
 80114cc:	46bd      	mov	sp, r7
 80114ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d2:	4770      	bx	lr
 80114d4:	40010000 	.word	0x40010000
 80114d8:	40010400 	.word	0x40010400

080114dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80114dc:	b480      	push	{r7}
 80114de:	b087      	sub	sp, #28
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
 80114e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	6a1b      	ldr	r3, [r3, #32]
 80114ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	6a1b      	ldr	r3, [r3, #32]
 80114f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	685b      	ldr	r3, [r3, #4]
 80114fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	69db      	ldr	r3, [r3, #28]
 8011502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801150a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011514:	683b      	ldr	r3, [r7, #0]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	021b      	lsls	r3, r3, #8
 801151a:	68fa      	ldr	r2, [r7, #12]
 801151c:	4313      	orrs	r3, r2
 801151e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011520:	693b      	ldr	r3, [r7, #16]
 8011522:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011526:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	689b      	ldr	r3, [r3, #8]
 801152c:	031b      	lsls	r3, r3, #12
 801152e:	693a      	ldr	r2, [r7, #16]
 8011530:	4313      	orrs	r3, r2
 8011532:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	4a12      	ldr	r2, [pc, #72]	; (8011580 <TIM_OC4_SetConfig+0xa4>)
 8011538:	4293      	cmp	r3, r2
 801153a:	d003      	beq.n	8011544 <TIM_OC4_SetConfig+0x68>
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	4a11      	ldr	r2, [pc, #68]	; (8011584 <TIM_OC4_SetConfig+0xa8>)
 8011540:	4293      	cmp	r3, r2
 8011542:	d109      	bne.n	8011558 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801154a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801154c:	683b      	ldr	r3, [r7, #0]
 801154e:	695b      	ldr	r3, [r3, #20]
 8011550:	019b      	lsls	r3, r3, #6
 8011552:	697a      	ldr	r2, [r7, #20]
 8011554:	4313      	orrs	r3, r2
 8011556:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	697a      	ldr	r2, [r7, #20]
 801155c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	68fa      	ldr	r2, [r7, #12]
 8011562:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	685a      	ldr	r2, [r3, #4]
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	693a      	ldr	r2, [r7, #16]
 8011570:	621a      	str	r2, [r3, #32]
}
 8011572:	bf00      	nop
 8011574:	371c      	adds	r7, #28
 8011576:	46bd      	mov	sp, r7
 8011578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157c:	4770      	bx	lr
 801157e:	bf00      	nop
 8011580:	40010000 	.word	0x40010000
 8011584:	40010400 	.word	0x40010400

08011588 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011588:	b480      	push	{r7}
 801158a:	b087      	sub	sp, #28
 801158c:	af00      	add	r7, sp, #0
 801158e:	60f8      	str	r0, [r7, #12]
 8011590:	60b9      	str	r1, [r7, #8]
 8011592:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	f003 031f 	and.w	r3, r3, #31
 801159a:	2201      	movs	r2, #1
 801159c:	fa02 f303 	lsl.w	r3, r2, r3
 80115a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	6a1a      	ldr	r2, [r3, #32]
 80115a6:	697b      	ldr	r3, [r7, #20]
 80115a8:	43db      	mvns	r3, r3
 80115aa:	401a      	ands	r2, r3
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	6a1a      	ldr	r2, [r3, #32]
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	f003 031f 	and.w	r3, r3, #31
 80115ba:	6879      	ldr	r1, [r7, #4]
 80115bc:	fa01 f303 	lsl.w	r3, r1, r3
 80115c0:	431a      	orrs	r2, r3
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	621a      	str	r2, [r3, #32]
}
 80115c6:	bf00      	nop
 80115c8:	371c      	adds	r7, #28
 80115ca:	46bd      	mov	sp, r7
 80115cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d0:	4770      	bx	lr
	...

080115d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80115d4:	b480      	push	{r7}
 80115d6:	b085      	sub	sp, #20
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
 80115dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80115e4:	2b01      	cmp	r3, #1
 80115e6:	d101      	bne.n	80115ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80115e8:	2302      	movs	r3, #2
 80115ea:	e05a      	b.n	80116a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	2201      	movs	r2, #1
 80115f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	2202      	movs	r2, #2
 80115f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	685b      	ldr	r3, [r3, #4]
 8011602:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	689b      	ldr	r3, [r3, #8]
 801160a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011612:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	68fa      	ldr	r2, [r7, #12]
 801161a:	4313      	orrs	r3, r2
 801161c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	68fa      	ldr	r2, [r7, #12]
 8011624:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	4a21      	ldr	r2, [pc, #132]	; (80116b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801162c:	4293      	cmp	r3, r2
 801162e:	d022      	beq.n	8011676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011638:	d01d      	beq.n	8011676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	4a1d      	ldr	r2, [pc, #116]	; (80116b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8011640:	4293      	cmp	r3, r2
 8011642:	d018      	beq.n	8011676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	4a1b      	ldr	r2, [pc, #108]	; (80116b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801164a:	4293      	cmp	r3, r2
 801164c:	d013      	beq.n	8011676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	4a1a      	ldr	r2, [pc, #104]	; (80116bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8011654:	4293      	cmp	r3, r2
 8011656:	d00e      	beq.n	8011676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	4a18      	ldr	r2, [pc, #96]	; (80116c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801165e:	4293      	cmp	r3, r2
 8011660:	d009      	beq.n	8011676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	4a17      	ldr	r2, [pc, #92]	; (80116c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8011668:	4293      	cmp	r3, r2
 801166a:	d004      	beq.n	8011676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	4a15      	ldr	r2, [pc, #84]	; (80116c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8011672:	4293      	cmp	r3, r2
 8011674:	d10c      	bne.n	8011690 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011676:	68bb      	ldr	r3, [r7, #8]
 8011678:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801167c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	685b      	ldr	r3, [r3, #4]
 8011682:	68ba      	ldr	r2, [r7, #8]
 8011684:	4313      	orrs	r3, r2
 8011686:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	68ba      	ldr	r2, [r7, #8]
 801168e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	2201      	movs	r2, #1
 8011694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2200      	movs	r2, #0
 801169c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80116a0:	2300      	movs	r3, #0
}
 80116a2:	4618      	mov	r0, r3
 80116a4:	3714      	adds	r7, #20
 80116a6:	46bd      	mov	sp, r7
 80116a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ac:	4770      	bx	lr
 80116ae:	bf00      	nop
 80116b0:	40010000 	.word	0x40010000
 80116b4:	40000400 	.word	0x40000400
 80116b8:	40000800 	.word	0x40000800
 80116bc:	40000c00 	.word	0x40000c00
 80116c0:	40010400 	.word	0x40010400
 80116c4:	40014000 	.word	0x40014000
 80116c8:	40001800 	.word	0x40001800

080116cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80116cc:	b480      	push	{r7}
 80116ce:	b085      	sub	sp, #20
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]
 80116d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80116d6:	2300      	movs	r3, #0
 80116d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80116e0:	2b01      	cmp	r3, #1
 80116e2:	d101      	bne.n	80116e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80116e4:	2302      	movs	r3, #2
 80116e6:	e03d      	b.n	8011764 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	2201      	movs	r2, #1
 80116ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80116f6:	683b      	ldr	r3, [r7, #0]
 80116f8:	68db      	ldr	r3, [r3, #12]
 80116fa:	4313      	orrs	r3, r2
 80116fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011704:	683b      	ldr	r3, [r7, #0]
 8011706:	689b      	ldr	r3, [r3, #8]
 8011708:	4313      	orrs	r3, r2
 801170a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	685b      	ldr	r3, [r3, #4]
 8011716:	4313      	orrs	r3, r2
 8011718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	4313      	orrs	r3, r2
 8011726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801172e:	683b      	ldr	r3, [r7, #0]
 8011730:	691b      	ldr	r3, [r3, #16]
 8011732:	4313      	orrs	r3, r2
 8011734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	695b      	ldr	r3, [r3, #20]
 8011740:	4313      	orrs	r3, r2
 8011742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801174a:	683b      	ldr	r3, [r7, #0]
 801174c:	69db      	ldr	r3, [r3, #28]
 801174e:	4313      	orrs	r3, r2
 8011750:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	68fa      	ldr	r2, [r7, #12]
 8011758:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	2200      	movs	r2, #0
 801175e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011762:	2300      	movs	r3, #0
}
 8011764:	4618      	mov	r0, r3
 8011766:	3714      	adds	r7, #20
 8011768:	46bd      	mov	sp, r7
 801176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176e:	4770      	bx	lr

08011770 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011770:	b480      	push	{r7}
 8011772:	b083      	sub	sp, #12
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011778:	bf00      	nop
 801177a:	370c      	adds	r7, #12
 801177c:	46bd      	mov	sp, r7
 801177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011782:	4770      	bx	lr

08011784 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011784:	b480      	push	{r7}
 8011786:	b083      	sub	sp, #12
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801178c:	bf00      	nop
 801178e:	370c      	adds	r7, #12
 8011790:	46bd      	mov	sp, r7
 8011792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011796:	4770      	bx	lr

08011798 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b082      	sub	sp, #8
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d101      	bne.n	80117aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80117a6:	2301      	movs	r3, #1
 80117a8:	e03f      	b.n	801182a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80117b0:	b2db      	uxtb	r3, r3
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d106      	bne.n	80117c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	2200      	movs	r2, #0
 80117ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80117be:	6878      	ldr	r0, [r7, #4]
 80117c0:	f7f6 fc00 	bl	8007fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	2224      	movs	r2, #36	; 0x24
 80117c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	68da      	ldr	r2, [r3, #12]
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80117da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80117dc:	6878      	ldr	r0, [r7, #4]
 80117de:	f000 f829 	bl	8011834 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	691a      	ldr	r2, [r3, #16]
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80117f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	695a      	ldr	r2, [r3, #20]
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011800:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	68da      	ldr	r2, [r3, #12]
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011810:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	2200      	movs	r2, #0
 8011816:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	2220      	movs	r2, #32
 801181c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2220      	movs	r2, #32
 8011824:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8011828:	2300      	movs	r3, #0
}
 801182a:	4618      	mov	r0, r3
 801182c:	3708      	adds	r7, #8
 801182e:	46bd      	mov	sp, r7
 8011830:	bd80      	pop	{r7, pc}
	...

08011834 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011838:	b085      	sub	sp, #20
 801183a:	af00      	add	r7, sp, #0
 801183c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	691b      	ldr	r3, [r3, #16]
 8011844:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	68da      	ldr	r2, [r3, #12]
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	430a      	orrs	r2, r1
 8011852:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	689a      	ldr	r2, [r3, #8]
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	691b      	ldr	r3, [r3, #16]
 801185c:	431a      	orrs	r2, r3
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	695b      	ldr	r3, [r3, #20]
 8011862:	431a      	orrs	r2, r3
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	69db      	ldr	r3, [r3, #28]
 8011868:	4313      	orrs	r3, r2
 801186a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	68db      	ldr	r3, [r3, #12]
 8011872:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8011876:	f023 030c 	bic.w	r3, r3, #12
 801187a:	687a      	ldr	r2, [r7, #4]
 801187c:	6812      	ldr	r2, [r2, #0]
 801187e:	68f9      	ldr	r1, [r7, #12]
 8011880:	430b      	orrs	r3, r1
 8011882:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	695b      	ldr	r3, [r3, #20]
 801188a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	699a      	ldr	r2, [r3, #24]
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	430a      	orrs	r2, r1
 8011898:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	69db      	ldr	r3, [r3, #28]
 801189e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80118a2:	f040 818b 	bne.w	8011bbc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	4ac1      	ldr	r2, [pc, #772]	; (8011bb0 <UART_SetConfig+0x37c>)
 80118ac:	4293      	cmp	r3, r2
 80118ae:	d005      	beq.n	80118bc <UART_SetConfig+0x88>
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	4abf      	ldr	r2, [pc, #764]	; (8011bb4 <UART_SetConfig+0x380>)
 80118b6:	4293      	cmp	r3, r2
 80118b8:	f040 80bd 	bne.w	8011a36 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80118bc:	f7fc fbcc 	bl	800e058 <HAL_RCC_GetPCLK2Freq>
 80118c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	461d      	mov	r5, r3
 80118c6:	f04f 0600 	mov.w	r6, #0
 80118ca:	46a8      	mov	r8, r5
 80118cc:	46b1      	mov	r9, r6
 80118ce:	eb18 0308 	adds.w	r3, r8, r8
 80118d2:	eb49 0409 	adc.w	r4, r9, r9
 80118d6:	4698      	mov	r8, r3
 80118d8:	46a1      	mov	r9, r4
 80118da:	eb18 0805 	adds.w	r8, r8, r5
 80118de:	eb49 0906 	adc.w	r9, r9, r6
 80118e2:	f04f 0100 	mov.w	r1, #0
 80118e6:	f04f 0200 	mov.w	r2, #0
 80118ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80118ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80118f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80118f6:	4688      	mov	r8, r1
 80118f8:	4691      	mov	r9, r2
 80118fa:	eb18 0005 	adds.w	r0, r8, r5
 80118fe:	eb49 0106 	adc.w	r1, r9, r6
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	685b      	ldr	r3, [r3, #4]
 8011906:	461d      	mov	r5, r3
 8011908:	f04f 0600 	mov.w	r6, #0
 801190c:	196b      	adds	r3, r5, r5
 801190e:	eb46 0406 	adc.w	r4, r6, r6
 8011912:	461a      	mov	r2, r3
 8011914:	4623      	mov	r3, r4
 8011916:	f7ef f9cf 	bl	8000cb8 <__aeabi_uldivmod>
 801191a:	4603      	mov	r3, r0
 801191c:	460c      	mov	r4, r1
 801191e:	461a      	mov	r2, r3
 8011920:	4ba5      	ldr	r3, [pc, #660]	; (8011bb8 <UART_SetConfig+0x384>)
 8011922:	fba3 2302 	umull	r2, r3, r3, r2
 8011926:	095b      	lsrs	r3, r3, #5
 8011928:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801192c:	68bb      	ldr	r3, [r7, #8]
 801192e:	461d      	mov	r5, r3
 8011930:	f04f 0600 	mov.w	r6, #0
 8011934:	46a9      	mov	r9, r5
 8011936:	46b2      	mov	sl, r6
 8011938:	eb19 0309 	adds.w	r3, r9, r9
 801193c:	eb4a 040a 	adc.w	r4, sl, sl
 8011940:	4699      	mov	r9, r3
 8011942:	46a2      	mov	sl, r4
 8011944:	eb19 0905 	adds.w	r9, r9, r5
 8011948:	eb4a 0a06 	adc.w	sl, sl, r6
 801194c:	f04f 0100 	mov.w	r1, #0
 8011950:	f04f 0200 	mov.w	r2, #0
 8011954:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011958:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801195c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011960:	4689      	mov	r9, r1
 8011962:	4692      	mov	sl, r2
 8011964:	eb19 0005 	adds.w	r0, r9, r5
 8011968:	eb4a 0106 	adc.w	r1, sl, r6
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	685b      	ldr	r3, [r3, #4]
 8011970:	461d      	mov	r5, r3
 8011972:	f04f 0600 	mov.w	r6, #0
 8011976:	196b      	adds	r3, r5, r5
 8011978:	eb46 0406 	adc.w	r4, r6, r6
 801197c:	461a      	mov	r2, r3
 801197e:	4623      	mov	r3, r4
 8011980:	f7ef f99a 	bl	8000cb8 <__aeabi_uldivmod>
 8011984:	4603      	mov	r3, r0
 8011986:	460c      	mov	r4, r1
 8011988:	461a      	mov	r2, r3
 801198a:	4b8b      	ldr	r3, [pc, #556]	; (8011bb8 <UART_SetConfig+0x384>)
 801198c:	fba3 1302 	umull	r1, r3, r3, r2
 8011990:	095b      	lsrs	r3, r3, #5
 8011992:	2164      	movs	r1, #100	; 0x64
 8011994:	fb01 f303 	mul.w	r3, r1, r3
 8011998:	1ad3      	subs	r3, r2, r3
 801199a:	00db      	lsls	r3, r3, #3
 801199c:	3332      	adds	r3, #50	; 0x32
 801199e:	4a86      	ldr	r2, [pc, #536]	; (8011bb8 <UART_SetConfig+0x384>)
 80119a0:	fba2 2303 	umull	r2, r3, r2, r3
 80119a4:	095b      	lsrs	r3, r3, #5
 80119a6:	005b      	lsls	r3, r3, #1
 80119a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80119ac:	4498      	add	r8, r3
 80119ae:	68bb      	ldr	r3, [r7, #8]
 80119b0:	461d      	mov	r5, r3
 80119b2:	f04f 0600 	mov.w	r6, #0
 80119b6:	46a9      	mov	r9, r5
 80119b8:	46b2      	mov	sl, r6
 80119ba:	eb19 0309 	adds.w	r3, r9, r9
 80119be:	eb4a 040a 	adc.w	r4, sl, sl
 80119c2:	4699      	mov	r9, r3
 80119c4:	46a2      	mov	sl, r4
 80119c6:	eb19 0905 	adds.w	r9, r9, r5
 80119ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80119ce:	f04f 0100 	mov.w	r1, #0
 80119d2:	f04f 0200 	mov.w	r2, #0
 80119d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80119da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80119de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80119e2:	4689      	mov	r9, r1
 80119e4:	4692      	mov	sl, r2
 80119e6:	eb19 0005 	adds.w	r0, r9, r5
 80119ea:	eb4a 0106 	adc.w	r1, sl, r6
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	685b      	ldr	r3, [r3, #4]
 80119f2:	461d      	mov	r5, r3
 80119f4:	f04f 0600 	mov.w	r6, #0
 80119f8:	196b      	adds	r3, r5, r5
 80119fa:	eb46 0406 	adc.w	r4, r6, r6
 80119fe:	461a      	mov	r2, r3
 8011a00:	4623      	mov	r3, r4
 8011a02:	f7ef f959 	bl	8000cb8 <__aeabi_uldivmod>
 8011a06:	4603      	mov	r3, r0
 8011a08:	460c      	mov	r4, r1
 8011a0a:	461a      	mov	r2, r3
 8011a0c:	4b6a      	ldr	r3, [pc, #424]	; (8011bb8 <UART_SetConfig+0x384>)
 8011a0e:	fba3 1302 	umull	r1, r3, r3, r2
 8011a12:	095b      	lsrs	r3, r3, #5
 8011a14:	2164      	movs	r1, #100	; 0x64
 8011a16:	fb01 f303 	mul.w	r3, r1, r3
 8011a1a:	1ad3      	subs	r3, r2, r3
 8011a1c:	00db      	lsls	r3, r3, #3
 8011a1e:	3332      	adds	r3, #50	; 0x32
 8011a20:	4a65      	ldr	r2, [pc, #404]	; (8011bb8 <UART_SetConfig+0x384>)
 8011a22:	fba2 2303 	umull	r2, r3, r2, r3
 8011a26:	095b      	lsrs	r3, r3, #5
 8011a28:	f003 0207 	and.w	r2, r3, #7
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	4442      	add	r2, r8
 8011a32:	609a      	str	r2, [r3, #8]
 8011a34:	e26f      	b.n	8011f16 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011a36:	f7fc fafb 	bl	800e030 <HAL_RCC_GetPCLK1Freq>
 8011a3a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	461d      	mov	r5, r3
 8011a40:	f04f 0600 	mov.w	r6, #0
 8011a44:	46a8      	mov	r8, r5
 8011a46:	46b1      	mov	r9, r6
 8011a48:	eb18 0308 	adds.w	r3, r8, r8
 8011a4c:	eb49 0409 	adc.w	r4, r9, r9
 8011a50:	4698      	mov	r8, r3
 8011a52:	46a1      	mov	r9, r4
 8011a54:	eb18 0805 	adds.w	r8, r8, r5
 8011a58:	eb49 0906 	adc.w	r9, r9, r6
 8011a5c:	f04f 0100 	mov.w	r1, #0
 8011a60:	f04f 0200 	mov.w	r2, #0
 8011a64:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011a68:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011a6c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8011a70:	4688      	mov	r8, r1
 8011a72:	4691      	mov	r9, r2
 8011a74:	eb18 0005 	adds.w	r0, r8, r5
 8011a78:	eb49 0106 	adc.w	r1, r9, r6
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	685b      	ldr	r3, [r3, #4]
 8011a80:	461d      	mov	r5, r3
 8011a82:	f04f 0600 	mov.w	r6, #0
 8011a86:	196b      	adds	r3, r5, r5
 8011a88:	eb46 0406 	adc.w	r4, r6, r6
 8011a8c:	461a      	mov	r2, r3
 8011a8e:	4623      	mov	r3, r4
 8011a90:	f7ef f912 	bl	8000cb8 <__aeabi_uldivmod>
 8011a94:	4603      	mov	r3, r0
 8011a96:	460c      	mov	r4, r1
 8011a98:	461a      	mov	r2, r3
 8011a9a:	4b47      	ldr	r3, [pc, #284]	; (8011bb8 <UART_SetConfig+0x384>)
 8011a9c:	fba3 2302 	umull	r2, r3, r3, r2
 8011aa0:	095b      	lsrs	r3, r3, #5
 8011aa2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8011aa6:	68bb      	ldr	r3, [r7, #8]
 8011aa8:	461d      	mov	r5, r3
 8011aaa:	f04f 0600 	mov.w	r6, #0
 8011aae:	46a9      	mov	r9, r5
 8011ab0:	46b2      	mov	sl, r6
 8011ab2:	eb19 0309 	adds.w	r3, r9, r9
 8011ab6:	eb4a 040a 	adc.w	r4, sl, sl
 8011aba:	4699      	mov	r9, r3
 8011abc:	46a2      	mov	sl, r4
 8011abe:	eb19 0905 	adds.w	r9, r9, r5
 8011ac2:	eb4a 0a06 	adc.w	sl, sl, r6
 8011ac6:	f04f 0100 	mov.w	r1, #0
 8011aca:	f04f 0200 	mov.w	r2, #0
 8011ace:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011ad2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011ad6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011ada:	4689      	mov	r9, r1
 8011adc:	4692      	mov	sl, r2
 8011ade:	eb19 0005 	adds.w	r0, r9, r5
 8011ae2:	eb4a 0106 	adc.w	r1, sl, r6
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	685b      	ldr	r3, [r3, #4]
 8011aea:	461d      	mov	r5, r3
 8011aec:	f04f 0600 	mov.w	r6, #0
 8011af0:	196b      	adds	r3, r5, r5
 8011af2:	eb46 0406 	adc.w	r4, r6, r6
 8011af6:	461a      	mov	r2, r3
 8011af8:	4623      	mov	r3, r4
 8011afa:	f7ef f8dd 	bl	8000cb8 <__aeabi_uldivmod>
 8011afe:	4603      	mov	r3, r0
 8011b00:	460c      	mov	r4, r1
 8011b02:	461a      	mov	r2, r3
 8011b04:	4b2c      	ldr	r3, [pc, #176]	; (8011bb8 <UART_SetConfig+0x384>)
 8011b06:	fba3 1302 	umull	r1, r3, r3, r2
 8011b0a:	095b      	lsrs	r3, r3, #5
 8011b0c:	2164      	movs	r1, #100	; 0x64
 8011b0e:	fb01 f303 	mul.w	r3, r1, r3
 8011b12:	1ad3      	subs	r3, r2, r3
 8011b14:	00db      	lsls	r3, r3, #3
 8011b16:	3332      	adds	r3, #50	; 0x32
 8011b18:	4a27      	ldr	r2, [pc, #156]	; (8011bb8 <UART_SetConfig+0x384>)
 8011b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8011b1e:	095b      	lsrs	r3, r3, #5
 8011b20:	005b      	lsls	r3, r3, #1
 8011b22:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011b26:	4498      	add	r8, r3
 8011b28:	68bb      	ldr	r3, [r7, #8]
 8011b2a:	461d      	mov	r5, r3
 8011b2c:	f04f 0600 	mov.w	r6, #0
 8011b30:	46a9      	mov	r9, r5
 8011b32:	46b2      	mov	sl, r6
 8011b34:	eb19 0309 	adds.w	r3, r9, r9
 8011b38:	eb4a 040a 	adc.w	r4, sl, sl
 8011b3c:	4699      	mov	r9, r3
 8011b3e:	46a2      	mov	sl, r4
 8011b40:	eb19 0905 	adds.w	r9, r9, r5
 8011b44:	eb4a 0a06 	adc.w	sl, sl, r6
 8011b48:	f04f 0100 	mov.w	r1, #0
 8011b4c:	f04f 0200 	mov.w	r2, #0
 8011b50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011b54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011b58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011b5c:	4689      	mov	r9, r1
 8011b5e:	4692      	mov	sl, r2
 8011b60:	eb19 0005 	adds.w	r0, r9, r5
 8011b64:	eb4a 0106 	adc.w	r1, sl, r6
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	685b      	ldr	r3, [r3, #4]
 8011b6c:	461d      	mov	r5, r3
 8011b6e:	f04f 0600 	mov.w	r6, #0
 8011b72:	196b      	adds	r3, r5, r5
 8011b74:	eb46 0406 	adc.w	r4, r6, r6
 8011b78:	461a      	mov	r2, r3
 8011b7a:	4623      	mov	r3, r4
 8011b7c:	f7ef f89c 	bl	8000cb8 <__aeabi_uldivmod>
 8011b80:	4603      	mov	r3, r0
 8011b82:	460c      	mov	r4, r1
 8011b84:	461a      	mov	r2, r3
 8011b86:	4b0c      	ldr	r3, [pc, #48]	; (8011bb8 <UART_SetConfig+0x384>)
 8011b88:	fba3 1302 	umull	r1, r3, r3, r2
 8011b8c:	095b      	lsrs	r3, r3, #5
 8011b8e:	2164      	movs	r1, #100	; 0x64
 8011b90:	fb01 f303 	mul.w	r3, r1, r3
 8011b94:	1ad3      	subs	r3, r2, r3
 8011b96:	00db      	lsls	r3, r3, #3
 8011b98:	3332      	adds	r3, #50	; 0x32
 8011b9a:	4a07      	ldr	r2, [pc, #28]	; (8011bb8 <UART_SetConfig+0x384>)
 8011b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8011ba0:	095b      	lsrs	r3, r3, #5
 8011ba2:	f003 0207 	and.w	r2, r3, #7
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	4442      	add	r2, r8
 8011bac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8011bae:	e1b2      	b.n	8011f16 <UART_SetConfig+0x6e2>
 8011bb0:	40011000 	.word	0x40011000
 8011bb4:	40011400 	.word	0x40011400
 8011bb8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	4ad7      	ldr	r2, [pc, #860]	; (8011f20 <UART_SetConfig+0x6ec>)
 8011bc2:	4293      	cmp	r3, r2
 8011bc4:	d005      	beq.n	8011bd2 <UART_SetConfig+0x39e>
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	4ad6      	ldr	r2, [pc, #856]	; (8011f24 <UART_SetConfig+0x6f0>)
 8011bcc:	4293      	cmp	r3, r2
 8011bce:	f040 80d1 	bne.w	8011d74 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8011bd2:	f7fc fa41 	bl	800e058 <HAL_RCC_GetPCLK2Freq>
 8011bd6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011bd8:	68bb      	ldr	r3, [r7, #8]
 8011bda:	469a      	mov	sl, r3
 8011bdc:	f04f 0b00 	mov.w	fp, #0
 8011be0:	46d0      	mov	r8, sl
 8011be2:	46d9      	mov	r9, fp
 8011be4:	eb18 0308 	adds.w	r3, r8, r8
 8011be8:	eb49 0409 	adc.w	r4, r9, r9
 8011bec:	4698      	mov	r8, r3
 8011bee:	46a1      	mov	r9, r4
 8011bf0:	eb18 080a 	adds.w	r8, r8, sl
 8011bf4:	eb49 090b 	adc.w	r9, r9, fp
 8011bf8:	f04f 0100 	mov.w	r1, #0
 8011bfc:	f04f 0200 	mov.w	r2, #0
 8011c00:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011c04:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011c08:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8011c0c:	4688      	mov	r8, r1
 8011c0e:	4691      	mov	r9, r2
 8011c10:	eb1a 0508 	adds.w	r5, sl, r8
 8011c14:	eb4b 0609 	adc.w	r6, fp, r9
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	685b      	ldr	r3, [r3, #4]
 8011c1c:	4619      	mov	r1, r3
 8011c1e:	f04f 0200 	mov.w	r2, #0
 8011c22:	f04f 0300 	mov.w	r3, #0
 8011c26:	f04f 0400 	mov.w	r4, #0
 8011c2a:	0094      	lsls	r4, r2, #2
 8011c2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011c30:	008b      	lsls	r3, r1, #2
 8011c32:	461a      	mov	r2, r3
 8011c34:	4623      	mov	r3, r4
 8011c36:	4628      	mov	r0, r5
 8011c38:	4631      	mov	r1, r6
 8011c3a:	f7ef f83d 	bl	8000cb8 <__aeabi_uldivmod>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	460c      	mov	r4, r1
 8011c42:	461a      	mov	r2, r3
 8011c44:	4bb8      	ldr	r3, [pc, #736]	; (8011f28 <UART_SetConfig+0x6f4>)
 8011c46:	fba3 2302 	umull	r2, r3, r3, r2
 8011c4a:	095b      	lsrs	r3, r3, #5
 8011c4c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8011c50:	68bb      	ldr	r3, [r7, #8]
 8011c52:	469b      	mov	fp, r3
 8011c54:	f04f 0c00 	mov.w	ip, #0
 8011c58:	46d9      	mov	r9, fp
 8011c5a:	46e2      	mov	sl, ip
 8011c5c:	eb19 0309 	adds.w	r3, r9, r9
 8011c60:	eb4a 040a 	adc.w	r4, sl, sl
 8011c64:	4699      	mov	r9, r3
 8011c66:	46a2      	mov	sl, r4
 8011c68:	eb19 090b 	adds.w	r9, r9, fp
 8011c6c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011c70:	f04f 0100 	mov.w	r1, #0
 8011c74:	f04f 0200 	mov.w	r2, #0
 8011c78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011c7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011c80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011c84:	4689      	mov	r9, r1
 8011c86:	4692      	mov	sl, r2
 8011c88:	eb1b 0509 	adds.w	r5, fp, r9
 8011c8c:	eb4c 060a 	adc.w	r6, ip, sl
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	685b      	ldr	r3, [r3, #4]
 8011c94:	4619      	mov	r1, r3
 8011c96:	f04f 0200 	mov.w	r2, #0
 8011c9a:	f04f 0300 	mov.w	r3, #0
 8011c9e:	f04f 0400 	mov.w	r4, #0
 8011ca2:	0094      	lsls	r4, r2, #2
 8011ca4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011ca8:	008b      	lsls	r3, r1, #2
 8011caa:	461a      	mov	r2, r3
 8011cac:	4623      	mov	r3, r4
 8011cae:	4628      	mov	r0, r5
 8011cb0:	4631      	mov	r1, r6
 8011cb2:	f7ef f801 	bl	8000cb8 <__aeabi_uldivmod>
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	460c      	mov	r4, r1
 8011cba:	461a      	mov	r2, r3
 8011cbc:	4b9a      	ldr	r3, [pc, #616]	; (8011f28 <UART_SetConfig+0x6f4>)
 8011cbe:	fba3 1302 	umull	r1, r3, r3, r2
 8011cc2:	095b      	lsrs	r3, r3, #5
 8011cc4:	2164      	movs	r1, #100	; 0x64
 8011cc6:	fb01 f303 	mul.w	r3, r1, r3
 8011cca:	1ad3      	subs	r3, r2, r3
 8011ccc:	011b      	lsls	r3, r3, #4
 8011cce:	3332      	adds	r3, #50	; 0x32
 8011cd0:	4a95      	ldr	r2, [pc, #596]	; (8011f28 <UART_SetConfig+0x6f4>)
 8011cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8011cd6:	095b      	lsrs	r3, r3, #5
 8011cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011cdc:	4498      	add	r8, r3
 8011cde:	68bb      	ldr	r3, [r7, #8]
 8011ce0:	469b      	mov	fp, r3
 8011ce2:	f04f 0c00 	mov.w	ip, #0
 8011ce6:	46d9      	mov	r9, fp
 8011ce8:	46e2      	mov	sl, ip
 8011cea:	eb19 0309 	adds.w	r3, r9, r9
 8011cee:	eb4a 040a 	adc.w	r4, sl, sl
 8011cf2:	4699      	mov	r9, r3
 8011cf4:	46a2      	mov	sl, r4
 8011cf6:	eb19 090b 	adds.w	r9, r9, fp
 8011cfa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011cfe:	f04f 0100 	mov.w	r1, #0
 8011d02:	f04f 0200 	mov.w	r2, #0
 8011d06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011d0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011d0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011d12:	4689      	mov	r9, r1
 8011d14:	4692      	mov	sl, r2
 8011d16:	eb1b 0509 	adds.w	r5, fp, r9
 8011d1a:	eb4c 060a 	adc.w	r6, ip, sl
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	685b      	ldr	r3, [r3, #4]
 8011d22:	4619      	mov	r1, r3
 8011d24:	f04f 0200 	mov.w	r2, #0
 8011d28:	f04f 0300 	mov.w	r3, #0
 8011d2c:	f04f 0400 	mov.w	r4, #0
 8011d30:	0094      	lsls	r4, r2, #2
 8011d32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011d36:	008b      	lsls	r3, r1, #2
 8011d38:	461a      	mov	r2, r3
 8011d3a:	4623      	mov	r3, r4
 8011d3c:	4628      	mov	r0, r5
 8011d3e:	4631      	mov	r1, r6
 8011d40:	f7ee ffba 	bl	8000cb8 <__aeabi_uldivmod>
 8011d44:	4603      	mov	r3, r0
 8011d46:	460c      	mov	r4, r1
 8011d48:	461a      	mov	r2, r3
 8011d4a:	4b77      	ldr	r3, [pc, #476]	; (8011f28 <UART_SetConfig+0x6f4>)
 8011d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8011d50:	095b      	lsrs	r3, r3, #5
 8011d52:	2164      	movs	r1, #100	; 0x64
 8011d54:	fb01 f303 	mul.w	r3, r1, r3
 8011d58:	1ad3      	subs	r3, r2, r3
 8011d5a:	011b      	lsls	r3, r3, #4
 8011d5c:	3332      	adds	r3, #50	; 0x32
 8011d5e:	4a72      	ldr	r2, [pc, #456]	; (8011f28 <UART_SetConfig+0x6f4>)
 8011d60:	fba2 2303 	umull	r2, r3, r2, r3
 8011d64:	095b      	lsrs	r3, r3, #5
 8011d66:	f003 020f 	and.w	r2, r3, #15
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	4442      	add	r2, r8
 8011d70:	609a      	str	r2, [r3, #8]
 8011d72:	e0d0      	b.n	8011f16 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8011d74:	f7fc f95c 	bl	800e030 <HAL_RCC_GetPCLK1Freq>
 8011d78:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	469a      	mov	sl, r3
 8011d7e:	f04f 0b00 	mov.w	fp, #0
 8011d82:	46d0      	mov	r8, sl
 8011d84:	46d9      	mov	r9, fp
 8011d86:	eb18 0308 	adds.w	r3, r8, r8
 8011d8a:	eb49 0409 	adc.w	r4, r9, r9
 8011d8e:	4698      	mov	r8, r3
 8011d90:	46a1      	mov	r9, r4
 8011d92:	eb18 080a 	adds.w	r8, r8, sl
 8011d96:	eb49 090b 	adc.w	r9, r9, fp
 8011d9a:	f04f 0100 	mov.w	r1, #0
 8011d9e:	f04f 0200 	mov.w	r2, #0
 8011da2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011da6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011daa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8011dae:	4688      	mov	r8, r1
 8011db0:	4691      	mov	r9, r2
 8011db2:	eb1a 0508 	adds.w	r5, sl, r8
 8011db6:	eb4b 0609 	adc.w	r6, fp, r9
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	685b      	ldr	r3, [r3, #4]
 8011dbe:	4619      	mov	r1, r3
 8011dc0:	f04f 0200 	mov.w	r2, #0
 8011dc4:	f04f 0300 	mov.w	r3, #0
 8011dc8:	f04f 0400 	mov.w	r4, #0
 8011dcc:	0094      	lsls	r4, r2, #2
 8011dce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011dd2:	008b      	lsls	r3, r1, #2
 8011dd4:	461a      	mov	r2, r3
 8011dd6:	4623      	mov	r3, r4
 8011dd8:	4628      	mov	r0, r5
 8011dda:	4631      	mov	r1, r6
 8011ddc:	f7ee ff6c 	bl	8000cb8 <__aeabi_uldivmod>
 8011de0:	4603      	mov	r3, r0
 8011de2:	460c      	mov	r4, r1
 8011de4:	461a      	mov	r2, r3
 8011de6:	4b50      	ldr	r3, [pc, #320]	; (8011f28 <UART_SetConfig+0x6f4>)
 8011de8:	fba3 2302 	umull	r2, r3, r3, r2
 8011dec:	095b      	lsrs	r3, r3, #5
 8011dee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8011df2:	68bb      	ldr	r3, [r7, #8]
 8011df4:	469b      	mov	fp, r3
 8011df6:	f04f 0c00 	mov.w	ip, #0
 8011dfa:	46d9      	mov	r9, fp
 8011dfc:	46e2      	mov	sl, ip
 8011dfe:	eb19 0309 	adds.w	r3, r9, r9
 8011e02:	eb4a 040a 	adc.w	r4, sl, sl
 8011e06:	4699      	mov	r9, r3
 8011e08:	46a2      	mov	sl, r4
 8011e0a:	eb19 090b 	adds.w	r9, r9, fp
 8011e0e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011e12:	f04f 0100 	mov.w	r1, #0
 8011e16:	f04f 0200 	mov.w	r2, #0
 8011e1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011e1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011e22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011e26:	4689      	mov	r9, r1
 8011e28:	4692      	mov	sl, r2
 8011e2a:	eb1b 0509 	adds.w	r5, fp, r9
 8011e2e:	eb4c 060a 	adc.w	r6, ip, sl
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	685b      	ldr	r3, [r3, #4]
 8011e36:	4619      	mov	r1, r3
 8011e38:	f04f 0200 	mov.w	r2, #0
 8011e3c:	f04f 0300 	mov.w	r3, #0
 8011e40:	f04f 0400 	mov.w	r4, #0
 8011e44:	0094      	lsls	r4, r2, #2
 8011e46:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011e4a:	008b      	lsls	r3, r1, #2
 8011e4c:	461a      	mov	r2, r3
 8011e4e:	4623      	mov	r3, r4
 8011e50:	4628      	mov	r0, r5
 8011e52:	4631      	mov	r1, r6
 8011e54:	f7ee ff30 	bl	8000cb8 <__aeabi_uldivmod>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	460c      	mov	r4, r1
 8011e5c:	461a      	mov	r2, r3
 8011e5e:	4b32      	ldr	r3, [pc, #200]	; (8011f28 <UART_SetConfig+0x6f4>)
 8011e60:	fba3 1302 	umull	r1, r3, r3, r2
 8011e64:	095b      	lsrs	r3, r3, #5
 8011e66:	2164      	movs	r1, #100	; 0x64
 8011e68:	fb01 f303 	mul.w	r3, r1, r3
 8011e6c:	1ad3      	subs	r3, r2, r3
 8011e6e:	011b      	lsls	r3, r3, #4
 8011e70:	3332      	adds	r3, #50	; 0x32
 8011e72:	4a2d      	ldr	r2, [pc, #180]	; (8011f28 <UART_SetConfig+0x6f4>)
 8011e74:	fba2 2303 	umull	r2, r3, r2, r3
 8011e78:	095b      	lsrs	r3, r3, #5
 8011e7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011e7e:	4498      	add	r8, r3
 8011e80:	68bb      	ldr	r3, [r7, #8]
 8011e82:	469b      	mov	fp, r3
 8011e84:	f04f 0c00 	mov.w	ip, #0
 8011e88:	46d9      	mov	r9, fp
 8011e8a:	46e2      	mov	sl, ip
 8011e8c:	eb19 0309 	adds.w	r3, r9, r9
 8011e90:	eb4a 040a 	adc.w	r4, sl, sl
 8011e94:	4699      	mov	r9, r3
 8011e96:	46a2      	mov	sl, r4
 8011e98:	eb19 090b 	adds.w	r9, r9, fp
 8011e9c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011ea0:	f04f 0100 	mov.w	r1, #0
 8011ea4:	f04f 0200 	mov.w	r2, #0
 8011ea8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011eac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011eb0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011eb4:	4689      	mov	r9, r1
 8011eb6:	4692      	mov	sl, r2
 8011eb8:	eb1b 0509 	adds.w	r5, fp, r9
 8011ebc:	eb4c 060a 	adc.w	r6, ip, sl
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	685b      	ldr	r3, [r3, #4]
 8011ec4:	4619      	mov	r1, r3
 8011ec6:	f04f 0200 	mov.w	r2, #0
 8011eca:	f04f 0300 	mov.w	r3, #0
 8011ece:	f04f 0400 	mov.w	r4, #0
 8011ed2:	0094      	lsls	r4, r2, #2
 8011ed4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011ed8:	008b      	lsls	r3, r1, #2
 8011eda:	461a      	mov	r2, r3
 8011edc:	4623      	mov	r3, r4
 8011ede:	4628      	mov	r0, r5
 8011ee0:	4631      	mov	r1, r6
 8011ee2:	f7ee fee9 	bl	8000cb8 <__aeabi_uldivmod>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	460c      	mov	r4, r1
 8011eea:	461a      	mov	r2, r3
 8011eec:	4b0e      	ldr	r3, [pc, #56]	; (8011f28 <UART_SetConfig+0x6f4>)
 8011eee:	fba3 1302 	umull	r1, r3, r3, r2
 8011ef2:	095b      	lsrs	r3, r3, #5
 8011ef4:	2164      	movs	r1, #100	; 0x64
 8011ef6:	fb01 f303 	mul.w	r3, r1, r3
 8011efa:	1ad3      	subs	r3, r2, r3
 8011efc:	011b      	lsls	r3, r3, #4
 8011efe:	3332      	adds	r3, #50	; 0x32
 8011f00:	4a09      	ldr	r2, [pc, #36]	; (8011f28 <UART_SetConfig+0x6f4>)
 8011f02:	fba2 2303 	umull	r2, r3, r2, r3
 8011f06:	095b      	lsrs	r3, r3, #5
 8011f08:	f003 020f 	and.w	r2, r3, #15
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	4442      	add	r2, r8
 8011f12:	609a      	str	r2, [r3, #8]
}
 8011f14:	e7ff      	b.n	8011f16 <UART_SetConfig+0x6e2>
 8011f16:	bf00      	nop
 8011f18:	3714      	adds	r7, #20
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f20:	40011000 	.word	0x40011000
 8011f24:	40011400 	.word	0x40011400
 8011f28:	51eb851f 	.word	0x51eb851f

08011f2c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8011f2c:	b084      	sub	sp, #16
 8011f2e:	b480      	push	{r7}
 8011f30:	b085      	sub	sp, #20
 8011f32:	af00      	add	r7, sp, #0
 8011f34:	6078      	str	r0, [r7, #4]
 8011f36:	f107 001c 	add.w	r0, r7, #28
 8011f3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011f3e:	2300      	movs	r3, #0
 8011f40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8011f42:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8011f44:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8011f46:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8011f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8011f4a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8011f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8011f4e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8011f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8011f52:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8011f56:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8011f58:	68fa      	ldr	r2, [r7, #12]
 8011f5a:	4313      	orrs	r3, r2
 8011f5c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	685b      	ldr	r3, [r3, #4]
 8011f62:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8011f66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011f6a:	68fa      	ldr	r2, [r7, #12]
 8011f6c:	431a      	orrs	r2, r3
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011f72:	2300      	movs	r3, #0
}
 8011f74:	4618      	mov	r0, r3
 8011f76:	3714      	adds	r7, #20
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7e:	b004      	add	sp, #16
 8011f80:	4770      	bx	lr

08011f82 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8011f82:	b480      	push	{r7}
 8011f84:	b083      	sub	sp, #12
 8011f86:	af00      	add	r7, sp, #0
 8011f88:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011f90:	4618      	mov	r0, r3
 8011f92:	370c      	adds	r7, #12
 8011f94:	46bd      	mov	sp, r7
 8011f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9a:	4770      	bx	lr

08011f9c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8011f9c:	b480      	push	{r7}
 8011f9e:	b083      	sub	sp, #12
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
 8011fa4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8011fa6:	683b      	ldr	r3, [r7, #0]
 8011fa8:	681a      	ldr	r2, [r3, #0]
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011fb0:	2300      	movs	r3, #0
}
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	370c      	adds	r7, #12
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbc:	4770      	bx	lr

08011fbe <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8011fbe:	b580      	push	{r7, lr}
 8011fc0:	b082      	sub	sp, #8
 8011fc2:	af00      	add	r7, sp, #0
 8011fc4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	2203      	movs	r2, #3
 8011fca:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8011fcc:	2002      	movs	r0, #2
 8011fce:	f7f9 fbc5 	bl	800b75c <HAL_Delay>
  
  return HAL_OK;
 8011fd2:	2300      	movs	r3, #0
}
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	3708      	adds	r7, #8
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	bd80      	pop	{r7, pc}

08011fdc <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8011fdc:	b480      	push	{r7}
 8011fde:	b083      	sub	sp, #12
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	f003 0303 	and.w	r3, r3, #3
}
 8011fec:	4618      	mov	r0, r3
 8011fee:	370c      	adds	r7, #12
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff6:	4770      	bx	lr

08011ff8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8011ff8:	b480      	push	{r7}
 8011ffa:	b085      	sub	sp, #20
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
 8012000:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012002:	2300      	movs	r3, #0
 8012004:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8012006:	683b      	ldr	r3, [r7, #0]
 8012008:	681a      	ldr	r2, [r3, #0]
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012016:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 801201c:	431a      	orrs	r2, r3
                       Command->CPSM);
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8012022:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012024:	68fa      	ldr	r2, [r7, #12]
 8012026:	4313      	orrs	r3, r2
 8012028:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	68db      	ldr	r3, [r3, #12]
 801202e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012032:	f023 030f 	bic.w	r3, r3, #15
 8012036:	68fa      	ldr	r2, [r7, #12]
 8012038:	431a      	orrs	r2, r3
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 801203e:	2300      	movs	r3, #0
}
 8012040:	4618      	mov	r0, r3
 8012042:	3714      	adds	r7, #20
 8012044:	46bd      	mov	sp, r7
 8012046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204a:	4770      	bx	lr

0801204c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 801204c:	b480      	push	{r7}
 801204e:	b083      	sub	sp, #12
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	691b      	ldr	r3, [r3, #16]
 8012058:	b2db      	uxtb	r3, r3
}
 801205a:	4618      	mov	r0, r3
 801205c:	370c      	adds	r7, #12
 801205e:	46bd      	mov	sp, r7
 8012060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012064:	4770      	bx	lr

08012066 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8012066:	b480      	push	{r7}
 8012068:	b085      	sub	sp, #20
 801206a:	af00      	add	r7, sp, #0
 801206c:	6078      	str	r0, [r7, #4]
 801206e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	3314      	adds	r3, #20
 8012074:	461a      	mov	r2, r3
 8012076:	683b      	ldr	r3, [r7, #0]
 8012078:	4413      	add	r3, r2
 801207a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	681b      	ldr	r3, [r3, #0]
}  
 8012080:	4618      	mov	r0, r3
 8012082:	3714      	adds	r7, #20
 8012084:	46bd      	mov	sp, r7
 8012086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208a:	4770      	bx	lr

0801208c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 801208c:	b480      	push	{r7}
 801208e:	b085      	sub	sp, #20
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
 8012094:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012096:	2300      	movs	r3, #0
 8012098:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	681a      	ldr	r2, [r3, #0]
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80120a2:	683b      	ldr	r3, [r7, #0]
 80120a4:	685a      	ldr	r2, [r3, #4]
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80120aa:	683b      	ldr	r3, [r7, #0]
 80120ac:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80120b2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80120b8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80120ba:	683b      	ldr	r3, [r7, #0]
 80120bc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80120be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80120c0:	68fa      	ldr	r2, [r7, #12]
 80120c2:	4313      	orrs	r3, r2
 80120c4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120ca:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	431a      	orrs	r2, r3
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80120d6:	2300      	movs	r3, #0

}
 80120d8:	4618      	mov	r0, r3
 80120da:	3714      	adds	r7, #20
 80120dc:	46bd      	mov	sp, r7
 80120de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e2:	4770      	bx	lr

080120e4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b088      	sub	sp, #32
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
 80120ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80120f2:	2310      	movs	r3, #16
 80120f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80120f6:	2340      	movs	r3, #64	; 0x40
 80120f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80120fa:	2300      	movs	r3, #0
 80120fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80120fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012102:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012104:	f107 0308 	add.w	r3, r7, #8
 8012108:	4619      	mov	r1, r3
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	f7ff ff74 	bl	8011ff8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8012110:	f241 3288 	movw	r2, #5000	; 0x1388
 8012114:	2110      	movs	r1, #16
 8012116:	6878      	ldr	r0, [r7, #4]
 8012118:	f000 fa40 	bl	801259c <SDMMC_GetCmdResp1>
 801211c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801211e:	69fb      	ldr	r3, [r7, #28]
}
 8012120:	4618      	mov	r0, r3
 8012122:	3720      	adds	r7, #32
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}

08012128 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b088      	sub	sp, #32
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
 8012130:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012132:	683b      	ldr	r3, [r7, #0]
 8012134:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012136:	2311      	movs	r3, #17
 8012138:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801213a:	2340      	movs	r3, #64	; 0x40
 801213c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801213e:	2300      	movs	r3, #0
 8012140:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012146:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012148:	f107 0308 	add.w	r3, r7, #8
 801214c:	4619      	mov	r1, r3
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	f7ff ff52 	bl	8011ff8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8012154:	f241 3288 	movw	r2, #5000	; 0x1388
 8012158:	2111      	movs	r1, #17
 801215a:	6878      	ldr	r0, [r7, #4]
 801215c:	f000 fa1e 	bl	801259c <SDMMC_GetCmdResp1>
 8012160:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012162:	69fb      	ldr	r3, [r7, #28]
}
 8012164:	4618      	mov	r0, r3
 8012166:	3720      	adds	r7, #32
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}

0801216c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b088      	sub	sp, #32
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
 8012174:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801217a:	2312      	movs	r3, #18
 801217c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801217e:	2340      	movs	r3, #64	; 0x40
 8012180:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012182:	2300      	movs	r3, #0
 8012184:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801218a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801218c:	f107 0308 	add.w	r3, r7, #8
 8012190:	4619      	mov	r1, r3
 8012192:	6878      	ldr	r0, [r7, #4]
 8012194:	f7ff ff30 	bl	8011ff8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8012198:	f241 3288 	movw	r2, #5000	; 0x1388
 801219c:	2112      	movs	r1, #18
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f000 f9fc 	bl	801259c <SDMMC_GetCmdResp1>
 80121a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121a6:	69fb      	ldr	r3, [r7, #28]
}
 80121a8:	4618      	mov	r0, r3
 80121aa:	3720      	adds	r7, #32
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}

080121b0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b088      	sub	sp, #32
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
 80121b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80121be:	2318      	movs	r3, #24
 80121c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80121c2:	2340      	movs	r3, #64	; 0x40
 80121c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80121c6:	2300      	movs	r3, #0
 80121c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80121ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80121ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80121d0:	f107 0308 	add.w	r3, r7, #8
 80121d4:	4619      	mov	r1, r3
 80121d6:	6878      	ldr	r0, [r7, #4]
 80121d8:	f7ff ff0e 	bl	8011ff8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80121dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80121e0:	2118      	movs	r1, #24
 80121e2:	6878      	ldr	r0, [r7, #4]
 80121e4:	f000 f9da 	bl	801259c <SDMMC_GetCmdResp1>
 80121e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121ea:	69fb      	ldr	r3, [r7, #28]
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	3720      	adds	r7, #32
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}

080121f4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b088      	sub	sp, #32
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
 80121fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80121fe:	683b      	ldr	r3, [r7, #0]
 8012200:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012202:	2319      	movs	r3, #25
 8012204:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012206:	2340      	movs	r3, #64	; 0x40
 8012208:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801220a:	2300      	movs	r3, #0
 801220c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801220e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012212:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012214:	f107 0308 	add.w	r3, r7, #8
 8012218:	4619      	mov	r1, r3
 801221a:	6878      	ldr	r0, [r7, #4]
 801221c:	f7ff feec 	bl	8011ff8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8012220:	f241 3288 	movw	r2, #5000	; 0x1388
 8012224:	2119      	movs	r1, #25
 8012226:	6878      	ldr	r0, [r7, #4]
 8012228:	f000 f9b8 	bl	801259c <SDMMC_GetCmdResp1>
 801222c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801222e:	69fb      	ldr	r3, [r7, #28]
}
 8012230:	4618      	mov	r0, r3
 8012232:	3720      	adds	r7, #32
 8012234:	46bd      	mov	sp, r7
 8012236:	bd80      	pop	{r7, pc}

08012238 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b088      	sub	sp, #32
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012240:	2300      	movs	r3, #0
 8012242:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012244:	230c      	movs	r3, #12
 8012246:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012248:	2340      	movs	r3, #64	; 0x40
 801224a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801224c:	2300      	movs	r3, #0
 801224e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012254:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012256:	f107 0308 	add.w	r3, r7, #8
 801225a:	4619      	mov	r1, r3
 801225c:	6878      	ldr	r0, [r7, #4]
 801225e:	f7ff fecb 	bl	8011ff8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8012262:	4a05      	ldr	r2, [pc, #20]	; (8012278 <SDMMC_CmdStopTransfer+0x40>)
 8012264:	210c      	movs	r1, #12
 8012266:	6878      	ldr	r0, [r7, #4]
 8012268:	f000 f998 	bl	801259c <SDMMC_GetCmdResp1>
 801226c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801226e:	69fb      	ldr	r3, [r7, #28]
}
 8012270:	4618      	mov	r0, r3
 8012272:	3720      	adds	r7, #32
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}
 8012278:	05f5e100 	.word	0x05f5e100

0801227c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b08a      	sub	sp, #40	; 0x28
 8012280:	af00      	add	r7, sp, #0
 8012282:	60f8      	str	r0, [r7, #12]
 8012284:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801228c:	2307      	movs	r3, #7
 801228e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012290:	2340      	movs	r3, #64	; 0x40
 8012292:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012294:	2300      	movs	r3, #0
 8012296:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801229c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801229e:	f107 0310 	add.w	r3, r7, #16
 80122a2:	4619      	mov	r1, r3
 80122a4:	68f8      	ldr	r0, [r7, #12]
 80122a6:	f7ff fea7 	bl	8011ff8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80122aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80122ae:	2107      	movs	r1, #7
 80122b0:	68f8      	ldr	r0, [r7, #12]
 80122b2:	f000 f973 	bl	801259c <SDMMC_GetCmdResp1>
 80122b6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80122b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80122ba:	4618      	mov	r0, r3
 80122bc:	3728      	adds	r7, #40	; 0x28
 80122be:	46bd      	mov	sp, r7
 80122c0:	bd80      	pop	{r7, pc}

080122c2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80122c2:	b580      	push	{r7, lr}
 80122c4:	b088      	sub	sp, #32
 80122c6:	af00      	add	r7, sp, #0
 80122c8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80122ca:	2300      	movs	r3, #0
 80122cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80122ce:	2300      	movs	r3, #0
 80122d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80122d2:	2300      	movs	r3, #0
 80122d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80122d6:	2300      	movs	r3, #0
 80122d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80122da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80122de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80122e0:	f107 0308 	add.w	r3, r7, #8
 80122e4:	4619      	mov	r1, r3
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f7ff fe86 	bl	8011ff8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80122ec:	6878      	ldr	r0, [r7, #4]
 80122ee:	f000 f92d 	bl	801254c <SDMMC_GetCmdError>
 80122f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122f4:	69fb      	ldr	r3, [r7, #28]
}
 80122f6:	4618      	mov	r0, r3
 80122f8:	3720      	adds	r7, #32
 80122fa:	46bd      	mov	sp, r7
 80122fc:	bd80      	pop	{r7, pc}

080122fe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80122fe:	b580      	push	{r7, lr}
 8012300:	b088      	sub	sp, #32
 8012302:	af00      	add	r7, sp, #0
 8012304:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012306:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801230a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801230c:	2308      	movs	r3, #8
 801230e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012310:	2340      	movs	r3, #64	; 0x40
 8012312:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012314:	2300      	movs	r3, #0
 8012316:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801231c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801231e:	f107 0308 	add.w	r3, r7, #8
 8012322:	4619      	mov	r1, r3
 8012324:	6878      	ldr	r0, [r7, #4]
 8012326:	f7ff fe67 	bl	8011ff8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	f000 fb16 	bl	801295c <SDMMC_GetCmdResp7>
 8012330:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012332:	69fb      	ldr	r3, [r7, #28]
}
 8012334:	4618      	mov	r0, r3
 8012336:	3720      	adds	r7, #32
 8012338:	46bd      	mov	sp, r7
 801233a:	bd80      	pop	{r7, pc}

0801233c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b088      	sub	sp, #32
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
 8012344:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012346:	683b      	ldr	r3, [r7, #0]
 8012348:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801234a:	2337      	movs	r3, #55	; 0x37
 801234c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801234e:	2340      	movs	r3, #64	; 0x40
 8012350:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012352:	2300      	movs	r3, #0
 8012354:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801235a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801235c:	f107 0308 	add.w	r3, r7, #8
 8012360:	4619      	mov	r1, r3
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f7ff fe48 	bl	8011ff8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8012368:	f241 3288 	movw	r2, #5000	; 0x1388
 801236c:	2137      	movs	r1, #55	; 0x37
 801236e:	6878      	ldr	r0, [r7, #4]
 8012370:	f000 f914 	bl	801259c <SDMMC_GetCmdResp1>
 8012374:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012376:	69fb      	ldr	r3, [r7, #28]
}
 8012378:	4618      	mov	r0, r3
 801237a:	3720      	adds	r7, #32
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}

08012380 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b088      	sub	sp, #32
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
 8012388:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 801238a:	683b      	ldr	r3, [r7, #0]
 801238c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012390:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012394:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012396:	2329      	movs	r3, #41	; 0x29
 8012398:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801239a:	2340      	movs	r3, #64	; 0x40
 801239c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801239e:	2300      	movs	r3, #0
 80123a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80123a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80123a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80123a8:	f107 0308 	add.w	r3, r7, #8
 80123ac:	4619      	mov	r1, r3
 80123ae:	6878      	ldr	r0, [r7, #4]
 80123b0:	f7ff fe22 	bl	8011ff8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80123b4:	6878      	ldr	r0, [r7, #4]
 80123b6:	f000 fa23 	bl	8012800 <SDMMC_GetCmdResp3>
 80123ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123bc:	69fb      	ldr	r3, [r7, #28]
}
 80123be:	4618      	mov	r0, r3
 80123c0:	3720      	adds	r7, #32
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd80      	pop	{r7, pc}

080123c6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80123c6:	b580      	push	{r7, lr}
 80123c8:	b088      	sub	sp, #32
 80123ca:	af00      	add	r7, sp, #0
 80123cc:	6078      	str	r0, [r7, #4]
 80123ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80123d4:	2306      	movs	r3, #6
 80123d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80123d8:	2340      	movs	r3, #64	; 0x40
 80123da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80123dc:	2300      	movs	r3, #0
 80123de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80123e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80123e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80123e6:	f107 0308 	add.w	r3, r7, #8
 80123ea:	4619      	mov	r1, r3
 80123ec:	6878      	ldr	r0, [r7, #4]
 80123ee:	f7ff fe03 	bl	8011ff8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80123f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80123f6:	2106      	movs	r1, #6
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	f000 f8cf 	bl	801259c <SDMMC_GetCmdResp1>
 80123fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012400:	69fb      	ldr	r3, [r7, #28]
}
 8012402:	4618      	mov	r0, r3
 8012404:	3720      	adds	r7, #32
 8012406:	46bd      	mov	sp, r7
 8012408:	bd80      	pop	{r7, pc}

0801240a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 801240a:	b580      	push	{r7, lr}
 801240c:	b088      	sub	sp, #32
 801240e:	af00      	add	r7, sp, #0
 8012410:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012412:	2300      	movs	r3, #0
 8012414:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012416:	2333      	movs	r3, #51	; 0x33
 8012418:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801241a:	2340      	movs	r3, #64	; 0x40
 801241c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801241e:	2300      	movs	r3, #0
 8012420:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012426:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012428:	f107 0308 	add.w	r3, r7, #8
 801242c:	4619      	mov	r1, r3
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	f7ff fde2 	bl	8011ff8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8012434:	f241 3288 	movw	r2, #5000	; 0x1388
 8012438:	2133      	movs	r1, #51	; 0x33
 801243a:	6878      	ldr	r0, [r7, #4]
 801243c:	f000 f8ae 	bl	801259c <SDMMC_GetCmdResp1>
 8012440:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012442:	69fb      	ldr	r3, [r7, #28]
}
 8012444:	4618      	mov	r0, r3
 8012446:	3720      	adds	r7, #32
 8012448:	46bd      	mov	sp, r7
 801244a:	bd80      	pop	{r7, pc}

0801244c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b088      	sub	sp, #32
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012454:	2300      	movs	r3, #0
 8012456:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012458:	2302      	movs	r3, #2
 801245a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 801245c:	23c0      	movs	r3, #192	; 0xc0
 801245e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012460:	2300      	movs	r3, #0
 8012462:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012468:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801246a:	f107 0308 	add.w	r3, r7, #8
 801246e:	4619      	mov	r1, r3
 8012470:	6878      	ldr	r0, [r7, #4]
 8012472:	f7ff fdc1 	bl	8011ff8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8012476:	6878      	ldr	r0, [r7, #4]
 8012478:	f000 f97c 	bl	8012774 <SDMMC_GetCmdResp2>
 801247c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801247e:	69fb      	ldr	r3, [r7, #28]
}
 8012480:	4618      	mov	r0, r3
 8012482:	3720      	adds	r7, #32
 8012484:	46bd      	mov	sp, r7
 8012486:	bd80      	pop	{r7, pc}

08012488 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8012488:	b580      	push	{r7, lr}
 801248a:	b088      	sub	sp, #32
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
 8012490:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012492:	683b      	ldr	r3, [r7, #0]
 8012494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012496:	2309      	movs	r3, #9
 8012498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 801249a:	23c0      	movs	r3, #192	; 0xc0
 801249c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801249e:	2300      	movs	r3, #0
 80124a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80124a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80124a8:	f107 0308 	add.w	r3, r7, #8
 80124ac:	4619      	mov	r1, r3
 80124ae:	6878      	ldr	r0, [r7, #4]
 80124b0:	f7ff fda2 	bl	8011ff8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80124b4:	6878      	ldr	r0, [r7, #4]
 80124b6:	f000 f95d 	bl	8012774 <SDMMC_GetCmdResp2>
 80124ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124bc:	69fb      	ldr	r3, [r7, #28]
}
 80124be:	4618      	mov	r0, r3
 80124c0:	3720      	adds	r7, #32
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bd80      	pop	{r7, pc}

080124c6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80124c6:	b580      	push	{r7, lr}
 80124c8:	b088      	sub	sp, #32
 80124ca:	af00      	add	r7, sp, #0
 80124cc:	6078      	str	r0, [r7, #4]
 80124ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80124d0:	2300      	movs	r3, #0
 80124d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80124d4:	2303      	movs	r3, #3
 80124d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80124d8:	2340      	movs	r3, #64	; 0x40
 80124da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80124dc:	2300      	movs	r3, #0
 80124de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80124e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80124e6:	f107 0308 	add.w	r3, r7, #8
 80124ea:	4619      	mov	r1, r3
 80124ec:	6878      	ldr	r0, [r7, #4]
 80124ee:	f7ff fd83 	bl	8011ff8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80124f2:	683a      	ldr	r2, [r7, #0]
 80124f4:	2103      	movs	r1, #3
 80124f6:	6878      	ldr	r0, [r7, #4]
 80124f8:	f000 f9bc 	bl	8012874 <SDMMC_GetCmdResp6>
 80124fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124fe:	69fb      	ldr	r3, [r7, #28]
}
 8012500:	4618      	mov	r0, r3
 8012502:	3720      	adds	r7, #32
 8012504:	46bd      	mov	sp, r7
 8012506:	bd80      	pop	{r7, pc}

08012508 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b088      	sub	sp, #32
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
 8012510:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012516:	230d      	movs	r3, #13
 8012518:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801251a:	2340      	movs	r3, #64	; 0x40
 801251c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801251e:	2300      	movs	r3, #0
 8012520:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012526:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012528:	f107 0308 	add.w	r3, r7, #8
 801252c:	4619      	mov	r1, r3
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f7ff fd62 	bl	8011ff8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8012534:	f241 3288 	movw	r2, #5000	; 0x1388
 8012538:	210d      	movs	r1, #13
 801253a:	6878      	ldr	r0, [r7, #4]
 801253c:	f000 f82e 	bl	801259c <SDMMC_GetCmdResp1>
 8012540:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012542:	69fb      	ldr	r3, [r7, #28]
}
 8012544:	4618      	mov	r0, r3
 8012546:	3720      	adds	r7, #32
 8012548:	46bd      	mov	sp, r7
 801254a:	bd80      	pop	{r7, pc}

0801254c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 801254c:	b490      	push	{r4, r7}
 801254e:	b082      	sub	sp, #8
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012554:	4b0f      	ldr	r3, [pc, #60]	; (8012594 <SDMMC_GetCmdError+0x48>)
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	4a0f      	ldr	r2, [pc, #60]	; (8012598 <SDMMC_GetCmdError+0x4c>)
 801255a:	fba2 2303 	umull	r2, r3, r2, r3
 801255e:	0a5b      	lsrs	r3, r3, #9
 8012560:	f241 3288 	movw	r2, #5000	; 0x1388
 8012564:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012568:	4623      	mov	r3, r4
 801256a:	1e5c      	subs	r4, r3, #1
 801256c:	2b00      	cmp	r3, #0
 801256e:	d102      	bne.n	8012576 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012570:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012574:	e009      	b.n	801258a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801257a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801257e:	2b00      	cmp	r3, #0
 8012580:	d0f2      	beq.n	8012568 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	22c5      	movs	r2, #197	; 0xc5
 8012586:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8012588:	2300      	movs	r3, #0
}
 801258a:	4618      	mov	r0, r3
 801258c:	3708      	adds	r7, #8
 801258e:	46bd      	mov	sp, r7
 8012590:	bc90      	pop	{r4, r7}
 8012592:	4770      	bx	lr
 8012594:	20000000 	.word	0x20000000
 8012598:	10624dd3 	.word	0x10624dd3

0801259c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 801259c:	b590      	push	{r4, r7, lr}
 801259e:	b087      	sub	sp, #28
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	60f8      	str	r0, [r7, #12]
 80125a4:	460b      	mov	r3, r1
 80125a6:	607a      	str	r2, [r7, #4]
 80125a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80125aa:	4b6f      	ldr	r3, [pc, #444]	; (8012768 <SDMMC_GetCmdResp1+0x1cc>)
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	4a6f      	ldr	r2, [pc, #444]	; (801276c <SDMMC_GetCmdResp1+0x1d0>)
 80125b0:	fba2 2303 	umull	r2, r3, r2, r3
 80125b4:	0a5b      	lsrs	r3, r3, #9
 80125b6:	687a      	ldr	r2, [r7, #4]
 80125b8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80125bc:	4623      	mov	r3, r4
 80125be:	1e5c      	subs	r4, r3, #1
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d102      	bne.n	80125ca <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80125c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80125c8:	e0c9      	b.n	801275e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125ce:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80125d0:	697b      	ldr	r3, [r7, #20]
 80125d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d0f0      	beq.n	80125bc <SDMMC_GetCmdResp1+0x20>
 80125da:	697b      	ldr	r3, [r7, #20]
 80125dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d1eb      	bne.n	80125bc <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125e8:	f003 0304 	and.w	r3, r3, #4
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d004      	beq.n	80125fa <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	2204      	movs	r2, #4
 80125f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80125f6:	2304      	movs	r3, #4
 80125f8:	e0b1      	b.n	801275e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125fe:	f003 0301 	and.w	r3, r3, #1
 8012602:	2b00      	cmp	r3, #0
 8012604:	d004      	beq.n	8012610 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	2201      	movs	r2, #1
 801260a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801260c:	2301      	movs	r3, #1
 801260e:	e0a6      	b.n	801275e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	22c5      	movs	r2, #197	; 0xc5
 8012614:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8012616:	68f8      	ldr	r0, [r7, #12]
 8012618:	f7ff fd18 	bl	801204c <SDIO_GetCommandResponse>
 801261c:	4603      	mov	r3, r0
 801261e:	461a      	mov	r2, r3
 8012620:	7afb      	ldrb	r3, [r7, #11]
 8012622:	4293      	cmp	r3, r2
 8012624:	d001      	beq.n	801262a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012626:	2301      	movs	r3, #1
 8012628:	e099      	b.n	801275e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 801262a:	2100      	movs	r1, #0
 801262c:	68f8      	ldr	r0, [r7, #12]
 801262e:	f7ff fd1a 	bl	8012066 <SDIO_GetResponse>
 8012632:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012634:	693a      	ldr	r2, [r7, #16]
 8012636:	4b4e      	ldr	r3, [pc, #312]	; (8012770 <SDMMC_GetCmdResp1+0x1d4>)
 8012638:	4013      	ands	r3, r2
 801263a:	2b00      	cmp	r3, #0
 801263c:	d101      	bne.n	8012642 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 801263e:	2300      	movs	r3, #0
 8012640:	e08d      	b.n	801275e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012642:	693b      	ldr	r3, [r7, #16]
 8012644:	2b00      	cmp	r3, #0
 8012646:	da02      	bge.n	801264e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012648:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801264c:	e087      	b.n	801275e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801264e:	693b      	ldr	r3, [r7, #16]
 8012650:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012654:	2b00      	cmp	r3, #0
 8012656:	d001      	beq.n	801265c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012658:	2340      	movs	r3, #64	; 0x40
 801265a:	e080      	b.n	801275e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801265c:	693b      	ldr	r3, [r7, #16]
 801265e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012662:	2b00      	cmp	r3, #0
 8012664:	d001      	beq.n	801266a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012666:	2380      	movs	r3, #128	; 0x80
 8012668:	e079      	b.n	801275e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801266a:	693b      	ldr	r3, [r7, #16]
 801266c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012670:	2b00      	cmp	r3, #0
 8012672:	d002      	beq.n	801267a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012678:	e071      	b.n	801275e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801267a:	693b      	ldr	r3, [r7, #16]
 801267c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012680:	2b00      	cmp	r3, #0
 8012682:	d002      	beq.n	801268a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012688:	e069      	b.n	801275e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801268a:	693b      	ldr	r3, [r7, #16]
 801268c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012690:	2b00      	cmp	r3, #0
 8012692:	d002      	beq.n	801269a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012698:	e061      	b.n	801275e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801269a:	693b      	ldr	r3, [r7, #16]
 801269c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d002      	beq.n	80126aa <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80126a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80126a8:	e059      	b.n	801275e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80126aa:	693b      	ldr	r3, [r7, #16]
 80126ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d002      	beq.n	80126ba <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80126b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80126b8:	e051      	b.n	801275e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80126ba:	693b      	ldr	r3, [r7, #16]
 80126bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d002      	beq.n	80126ca <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80126c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80126c8:	e049      	b.n	801275e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80126ca:	693b      	ldr	r3, [r7, #16]
 80126cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d002      	beq.n	80126da <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80126d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80126d8:	e041      	b.n	801275e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80126da:	693b      	ldr	r3, [r7, #16]
 80126dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d002      	beq.n	80126ea <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80126e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80126e8:	e039      	b.n	801275e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80126ea:	693b      	ldr	r3, [r7, #16]
 80126ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d002      	beq.n	80126fa <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80126f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80126f8:	e031      	b.n	801275e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80126fa:	693b      	ldr	r3, [r7, #16]
 80126fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012700:	2b00      	cmp	r3, #0
 8012702:	d002      	beq.n	801270a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012704:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012708:	e029      	b.n	801275e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801270a:	693b      	ldr	r3, [r7, #16]
 801270c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012710:	2b00      	cmp	r3, #0
 8012712:	d002      	beq.n	801271a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012714:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012718:	e021      	b.n	801275e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801271a:	693b      	ldr	r3, [r7, #16]
 801271c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012720:	2b00      	cmp	r3, #0
 8012722:	d002      	beq.n	801272a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012724:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012728:	e019      	b.n	801275e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801272a:	693b      	ldr	r3, [r7, #16]
 801272c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012730:	2b00      	cmp	r3, #0
 8012732:	d002      	beq.n	801273a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012734:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012738:	e011      	b.n	801275e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801273a:	693b      	ldr	r3, [r7, #16]
 801273c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012740:	2b00      	cmp	r3, #0
 8012742:	d002      	beq.n	801274a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012744:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012748:	e009      	b.n	801275e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801274a:	693b      	ldr	r3, [r7, #16]
 801274c:	f003 0308 	and.w	r3, r3, #8
 8012750:	2b00      	cmp	r3, #0
 8012752:	d002      	beq.n	801275a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012754:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012758:	e001      	b.n	801275e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801275a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801275e:	4618      	mov	r0, r3
 8012760:	371c      	adds	r7, #28
 8012762:	46bd      	mov	sp, r7
 8012764:	bd90      	pop	{r4, r7, pc}
 8012766:	bf00      	nop
 8012768:	20000000 	.word	0x20000000
 801276c:	10624dd3 	.word	0x10624dd3
 8012770:	fdffe008 	.word	0xfdffe008

08012774 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8012774:	b490      	push	{r4, r7}
 8012776:	b084      	sub	sp, #16
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801277c:	4b1e      	ldr	r3, [pc, #120]	; (80127f8 <SDMMC_GetCmdResp2+0x84>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	4a1e      	ldr	r2, [pc, #120]	; (80127fc <SDMMC_GetCmdResp2+0x88>)
 8012782:	fba2 2303 	umull	r2, r3, r2, r3
 8012786:	0a5b      	lsrs	r3, r3, #9
 8012788:	f241 3288 	movw	r2, #5000	; 0x1388
 801278c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012790:	4623      	mov	r3, r4
 8012792:	1e5c      	subs	r4, r3, #1
 8012794:	2b00      	cmp	r3, #0
 8012796:	d102      	bne.n	801279e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012798:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801279c:	e026      	b.n	80127ec <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127a2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d0f0      	beq.n	8012790 <SDMMC_GetCmdResp2+0x1c>
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d1eb      	bne.n	8012790 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127bc:	f003 0304 	and.w	r3, r3, #4
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d004      	beq.n	80127ce <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	2204      	movs	r2, #4
 80127c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80127ca:	2304      	movs	r3, #4
 80127cc:	e00e      	b.n	80127ec <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127d2:	f003 0301 	and.w	r3, r3, #1
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d004      	beq.n	80127e4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	2201      	movs	r2, #1
 80127de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80127e0:	2301      	movs	r3, #1
 80127e2:	e003      	b.n	80127ec <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	22c5      	movs	r2, #197	; 0xc5
 80127e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80127ea:	2300      	movs	r3, #0
}
 80127ec:	4618      	mov	r0, r3
 80127ee:	3710      	adds	r7, #16
 80127f0:	46bd      	mov	sp, r7
 80127f2:	bc90      	pop	{r4, r7}
 80127f4:	4770      	bx	lr
 80127f6:	bf00      	nop
 80127f8:	20000000 	.word	0x20000000
 80127fc:	10624dd3 	.word	0x10624dd3

08012800 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8012800:	b490      	push	{r4, r7}
 8012802:	b084      	sub	sp, #16
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012808:	4b18      	ldr	r3, [pc, #96]	; (801286c <SDMMC_GetCmdResp3+0x6c>)
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	4a18      	ldr	r2, [pc, #96]	; (8012870 <SDMMC_GetCmdResp3+0x70>)
 801280e:	fba2 2303 	umull	r2, r3, r2, r3
 8012812:	0a5b      	lsrs	r3, r3, #9
 8012814:	f241 3288 	movw	r2, #5000	; 0x1388
 8012818:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801281c:	4623      	mov	r3, r4
 801281e:	1e5c      	subs	r4, r3, #1
 8012820:	2b00      	cmp	r3, #0
 8012822:	d102      	bne.n	801282a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012824:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012828:	e01b      	b.n	8012862 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801282e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012836:	2b00      	cmp	r3, #0
 8012838:	d0f0      	beq.n	801281c <SDMMC_GetCmdResp3+0x1c>
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012840:	2b00      	cmp	r3, #0
 8012842:	d1eb      	bne.n	801281c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012848:	f003 0304 	and.w	r3, r3, #4
 801284c:	2b00      	cmp	r3, #0
 801284e:	d004      	beq.n	801285a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	2204      	movs	r2, #4
 8012854:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012856:	2304      	movs	r3, #4
 8012858:	e003      	b.n	8012862 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	22c5      	movs	r2, #197	; 0xc5
 801285e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012860:	2300      	movs	r3, #0
}
 8012862:	4618      	mov	r0, r3
 8012864:	3710      	adds	r7, #16
 8012866:	46bd      	mov	sp, r7
 8012868:	bc90      	pop	{r4, r7}
 801286a:	4770      	bx	lr
 801286c:	20000000 	.word	0x20000000
 8012870:	10624dd3 	.word	0x10624dd3

08012874 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012874:	b590      	push	{r4, r7, lr}
 8012876:	b087      	sub	sp, #28
 8012878:	af00      	add	r7, sp, #0
 801287a:	60f8      	str	r0, [r7, #12]
 801287c:	460b      	mov	r3, r1
 801287e:	607a      	str	r2, [r7, #4]
 8012880:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012882:	4b34      	ldr	r3, [pc, #208]	; (8012954 <SDMMC_GetCmdResp6+0xe0>)
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	4a34      	ldr	r2, [pc, #208]	; (8012958 <SDMMC_GetCmdResp6+0xe4>)
 8012888:	fba2 2303 	umull	r2, r3, r2, r3
 801288c:	0a5b      	lsrs	r3, r3, #9
 801288e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012892:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012896:	4623      	mov	r3, r4
 8012898:	1e5c      	subs	r4, r3, #1
 801289a:	2b00      	cmp	r3, #0
 801289c:	d102      	bne.n	80128a4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 801289e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80128a2:	e052      	b.n	801294a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128a8:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80128aa:	697b      	ldr	r3, [r7, #20]
 80128ac:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d0f0      	beq.n	8012896 <SDMMC_GetCmdResp6+0x22>
 80128b4:	697b      	ldr	r3, [r7, #20]
 80128b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d1eb      	bne.n	8012896 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128c2:	f003 0304 	and.w	r3, r3, #4
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d004      	beq.n	80128d4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	2204      	movs	r2, #4
 80128ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80128d0:	2304      	movs	r3, #4
 80128d2:	e03a      	b.n	801294a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128d8:	f003 0301 	and.w	r3, r3, #1
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d004      	beq.n	80128ea <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	2201      	movs	r2, #1
 80128e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80128e6:	2301      	movs	r3, #1
 80128e8:	e02f      	b.n	801294a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80128ea:	68f8      	ldr	r0, [r7, #12]
 80128ec:	f7ff fbae 	bl	801204c <SDIO_GetCommandResponse>
 80128f0:	4603      	mov	r3, r0
 80128f2:	461a      	mov	r2, r3
 80128f4:	7afb      	ldrb	r3, [r7, #11]
 80128f6:	4293      	cmp	r3, r2
 80128f8:	d001      	beq.n	80128fe <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80128fa:	2301      	movs	r3, #1
 80128fc:	e025      	b.n	801294a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	22c5      	movs	r2, #197	; 0xc5
 8012902:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8012904:	2100      	movs	r1, #0
 8012906:	68f8      	ldr	r0, [r7, #12]
 8012908:	f7ff fbad 	bl	8012066 <SDIO_GetResponse>
 801290c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801290e:	693b      	ldr	r3, [r7, #16]
 8012910:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012914:	2b00      	cmp	r3, #0
 8012916:	d106      	bne.n	8012926 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8012918:	693b      	ldr	r3, [r7, #16]
 801291a:	0c1b      	lsrs	r3, r3, #16
 801291c:	b29a      	uxth	r2, r3
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8012922:	2300      	movs	r3, #0
 8012924:	e011      	b.n	801294a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012926:	693b      	ldr	r3, [r7, #16]
 8012928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801292c:	2b00      	cmp	r3, #0
 801292e:	d002      	beq.n	8012936 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012934:	e009      	b.n	801294a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012936:	693b      	ldr	r3, [r7, #16]
 8012938:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801293c:	2b00      	cmp	r3, #0
 801293e:	d002      	beq.n	8012946 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012944:	e001      	b.n	801294a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012946:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801294a:	4618      	mov	r0, r3
 801294c:	371c      	adds	r7, #28
 801294e:	46bd      	mov	sp, r7
 8012950:	bd90      	pop	{r4, r7, pc}
 8012952:	bf00      	nop
 8012954:	20000000 	.word	0x20000000
 8012958:	10624dd3 	.word	0x10624dd3

0801295c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 801295c:	b490      	push	{r4, r7}
 801295e:	b084      	sub	sp, #16
 8012960:	af00      	add	r7, sp, #0
 8012962:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012964:	4b21      	ldr	r3, [pc, #132]	; (80129ec <SDMMC_GetCmdResp7+0x90>)
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	4a21      	ldr	r2, [pc, #132]	; (80129f0 <SDMMC_GetCmdResp7+0x94>)
 801296a:	fba2 2303 	umull	r2, r3, r2, r3
 801296e:	0a5b      	lsrs	r3, r3, #9
 8012970:	f241 3288 	movw	r2, #5000	; 0x1388
 8012974:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012978:	4623      	mov	r3, r4
 801297a:	1e5c      	subs	r4, r3, #1
 801297c:	2b00      	cmp	r3, #0
 801297e:	d102      	bne.n	8012986 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012980:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012984:	e02c      	b.n	80129e0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801298a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012992:	2b00      	cmp	r3, #0
 8012994:	d0f0      	beq.n	8012978 <SDMMC_GetCmdResp7+0x1c>
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801299c:	2b00      	cmp	r3, #0
 801299e:	d1eb      	bne.n	8012978 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129a4:	f003 0304 	and.w	r3, r3, #4
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d004      	beq.n	80129b6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	2204      	movs	r2, #4
 80129b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80129b2:	2304      	movs	r3, #4
 80129b4:	e014      	b.n	80129e0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129ba:	f003 0301 	and.w	r3, r3, #1
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d004      	beq.n	80129cc <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	2201      	movs	r2, #1
 80129c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80129c8:	2301      	movs	r3, #1
 80129ca:	e009      	b.n	80129e0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d002      	beq.n	80129de <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	2240      	movs	r2, #64	; 0x40
 80129dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80129de:	2300      	movs	r3, #0
  
}
 80129e0:	4618      	mov	r0, r3
 80129e2:	3710      	adds	r7, #16
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bc90      	pop	{r4, r7}
 80129e8:	4770      	bx	lr
 80129ea:	bf00      	nop
 80129ec:	20000000 	.word	0x20000000
 80129f0:	10624dd3 	.word	0x10624dd3

080129f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80129f8:	4904      	ldr	r1, [pc, #16]	; (8012a0c <MX_FATFS_Init+0x18>)
 80129fa:	4805      	ldr	r0, [pc, #20]	; (8012a10 <MX_FATFS_Init+0x1c>)
 80129fc:	f003 fb9c 	bl	8016138 <FATFS_LinkDriver>
 8012a00:	4603      	mov	r3, r0
 8012a02:	461a      	mov	r2, r3
 8012a04:	4b03      	ldr	r3, [pc, #12]	; (8012a14 <MX_FATFS_Init+0x20>)
 8012a06:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012a08:	bf00      	nop
 8012a0a:	bd80      	pop	{r7, pc}
 8012a0c:	20049fb0 	.word	0x20049fb0
 8012a10:	0801abe4 	.word	0x0801abe4
 8012a14:	20049fac 	.word	0x20049fac

08012a18 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b082      	sub	sp, #8
 8012a1c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8012a1e:	2300      	movs	r3, #0
 8012a20:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8012a22:	f000 f896 	bl	8012b52 <BSP_SD_IsDetected>
 8012a26:	4603      	mov	r3, r0
 8012a28:	2b01      	cmp	r3, #1
 8012a2a:	d001      	beq.n	8012a30 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8012a2c:	2301      	movs	r3, #1
 8012a2e:	e012      	b.n	8012a56 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8012a30:	480b      	ldr	r0, [pc, #44]	; (8012a60 <BSP_SD_Init+0x48>)
 8012a32:	f7fb ffa5 	bl	800e980 <HAL_SD_Init>
 8012a36:	4603      	mov	r3, r0
 8012a38:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8012a3a:	79fb      	ldrb	r3, [r7, #7]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d109      	bne.n	8012a54 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8012a40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012a44:	4806      	ldr	r0, [pc, #24]	; (8012a60 <BSP_SD_Init+0x48>)
 8012a46:	f7fc fd4f 	bl	800f4e8 <HAL_SD_ConfigWideBusOperation>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d001      	beq.n	8012a54 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8012a50:	2301      	movs	r3, #1
 8012a52:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8012a54:	79fb      	ldrb	r3, [r7, #7]
}
 8012a56:	4618      	mov	r0, r3
 8012a58:	3708      	adds	r7, #8
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd80      	pop	{r7, pc}
 8012a5e:	bf00      	nop
 8012a60:	20049da8 	.word	0x20049da8

08012a64 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b086      	sub	sp, #24
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	60f8      	str	r0, [r7, #12]
 8012a6c:	60b9      	str	r1, [r7, #8]
 8012a6e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012a70:	2300      	movs	r3, #0
 8012a72:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	68ba      	ldr	r2, [r7, #8]
 8012a78:	68f9      	ldr	r1, [r7, #12]
 8012a7a:	4806      	ldr	r0, [pc, #24]	; (8012a94 <BSP_SD_ReadBlocks_DMA+0x30>)
 8012a7c:	f7fc f810 	bl	800eaa0 <HAL_SD_ReadBlocks_DMA>
 8012a80:	4603      	mov	r3, r0
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d001      	beq.n	8012a8a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012a86:	2301      	movs	r3, #1
 8012a88:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	3718      	adds	r7, #24
 8012a90:	46bd      	mov	sp, r7
 8012a92:	bd80      	pop	{r7, pc}
 8012a94:	20049da8 	.word	0x20049da8

08012a98 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b086      	sub	sp, #24
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	60f8      	str	r0, [r7, #12]
 8012aa0:	60b9      	str	r1, [r7, #8]
 8012aa2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	68ba      	ldr	r2, [r7, #8]
 8012aac:	68f9      	ldr	r1, [r7, #12]
 8012aae:	4806      	ldr	r0, [pc, #24]	; (8012ac8 <BSP_SD_WriteBlocks_DMA+0x30>)
 8012ab0:	f7fc f8de 	bl	800ec70 <HAL_SD_WriteBlocks_DMA>
 8012ab4:	4603      	mov	r3, r0
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d001      	beq.n	8012abe <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012aba:	2301      	movs	r3, #1
 8012abc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	3718      	adds	r7, #24
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	bd80      	pop	{r7, pc}
 8012ac8:	20049da8 	.word	0x20049da8

08012acc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012ad0:	4805      	ldr	r0, [pc, #20]	; (8012ae8 <BSP_SD_GetCardState+0x1c>)
 8012ad2:	f7fc fd85 	bl	800f5e0 <HAL_SD_GetCardState>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	2b04      	cmp	r3, #4
 8012ada:	bf14      	ite	ne
 8012adc:	2301      	movne	r3, #1
 8012ade:	2300      	moveq	r3, #0
 8012ae0:	b2db      	uxtb	r3, r3
}
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	bd80      	pop	{r7, pc}
 8012ae6:	bf00      	nop
 8012ae8:	20049da8 	.word	0x20049da8

08012aec <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b082      	sub	sp, #8
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8012af4:	6879      	ldr	r1, [r7, #4]
 8012af6:	4803      	ldr	r0, [pc, #12]	; (8012b04 <BSP_SD_GetCardInfo+0x18>)
 8012af8:	f7fc fcca 	bl	800f490 <HAL_SD_GetCardInfo>
}
 8012afc:	bf00      	nop
 8012afe:	3708      	adds	r7, #8
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd80      	pop	{r7, pc}
 8012b04:	20049da8 	.word	0x20049da8

08012b08 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b082      	sub	sp, #8
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8012b10:	f000 f818 	bl	8012b44 <BSP_SD_AbortCallback>
}
 8012b14:	bf00      	nop
 8012b16:	3708      	adds	r7, #8
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	bd80      	pop	{r7, pc}

08012b1c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b082      	sub	sp, #8
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8012b24:	f000 f9a8 	bl	8012e78 <BSP_SD_WriteCpltCallback>
}
 8012b28:	bf00      	nop
 8012b2a:	3708      	adds	r7, #8
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	bd80      	pop	{r7, pc}

08012b30 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b082      	sub	sp, #8
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8012b38:	f000 f9aa 	bl	8012e90 <BSP_SD_ReadCpltCallback>
}
 8012b3c:	bf00      	nop
 8012b3e:	3708      	adds	r7, #8
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bd80      	pop	{r7, pc}

08012b44 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8012b44:	b480      	push	{r7}
 8012b46:	af00      	add	r7, sp, #0

}
 8012b48:	bf00      	nop
 8012b4a:	46bd      	mov	sp, r7
 8012b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b50:	4770      	bx	lr

08012b52 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012b52:	b580      	push	{r7, lr}
 8012b54:	b082      	sub	sp, #8
 8012b56:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8012b58:	2301      	movs	r3, #1
 8012b5a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8012b5c:	f000 f80c 	bl	8012b78 <BSP_PlatformIsDetected>
 8012b60:	4603      	mov	r3, r0
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d101      	bne.n	8012b6a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8012b66:	2300      	movs	r3, #0
 8012b68:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8012b6a:	79fb      	ldrb	r3, [r7, #7]
 8012b6c:	b2db      	uxtb	r3, r3
}
 8012b6e:	4618      	mov	r0, r3
 8012b70:	3708      	adds	r7, #8
 8012b72:	46bd      	mov	sp, r7
 8012b74:	bd80      	pop	{r7, pc}
	...

08012b78 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b082      	sub	sp, #8
 8012b7c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8012b7e:	2301      	movs	r3, #1
 8012b80:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8012b82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8012b86:	4806      	ldr	r0, [pc, #24]	; (8012ba0 <BSP_PlatformIsDetected+0x28>)
 8012b88:	f7fa f866 	bl	800cc58 <HAL_GPIO_ReadPin>
 8012b8c:	4603      	mov	r3, r0
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d001      	beq.n	8012b96 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8012b92:	2300      	movs	r3, #0
 8012b94:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8012b96:	79fb      	ldrb	r3, [r7, #7]
}
 8012b98:	4618      	mov	r0, r3
 8012b9a:	3708      	adds	r7, #8
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	bd80      	pop	{r7, pc}
 8012ba0:	40020000 	.word	0x40020000

08012ba4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b084      	sub	sp, #16
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8012bac:	f7f8 fdca 	bl	800b744 <HAL_GetTick>
 8012bb0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8012bb2:	e006      	b.n	8012bc2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012bb4:	f7ff ff8a 	bl	8012acc <BSP_SD_GetCardState>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d101      	bne.n	8012bc2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	e009      	b.n	8012bd6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8012bc2:	f7f8 fdbf 	bl	800b744 <HAL_GetTick>
 8012bc6:	4602      	mov	r2, r0
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	1ad3      	subs	r3, r2, r3
 8012bcc:	687a      	ldr	r2, [r7, #4]
 8012bce:	429a      	cmp	r2, r3
 8012bd0:	d8f0      	bhi.n	8012bb4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8012bd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	3710      	adds	r7, #16
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bd80      	pop	{r7, pc}
	...

08012be0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b082      	sub	sp, #8
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	4603      	mov	r3, r0
 8012be8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012bea:	4b0b      	ldr	r3, [pc, #44]	; (8012c18 <SD_CheckStatus+0x38>)
 8012bec:	2201      	movs	r2, #1
 8012bee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8012bf0:	f7ff ff6c 	bl	8012acc <BSP_SD_GetCardState>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d107      	bne.n	8012c0a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8012bfa:	4b07      	ldr	r3, [pc, #28]	; (8012c18 <SD_CheckStatus+0x38>)
 8012bfc:	781b      	ldrb	r3, [r3, #0]
 8012bfe:	b2db      	uxtb	r3, r3
 8012c00:	f023 0301 	bic.w	r3, r3, #1
 8012c04:	b2da      	uxtb	r2, r3
 8012c06:	4b04      	ldr	r3, [pc, #16]	; (8012c18 <SD_CheckStatus+0x38>)
 8012c08:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8012c0a:	4b03      	ldr	r3, [pc, #12]	; (8012c18 <SD_CheckStatus+0x38>)
 8012c0c:	781b      	ldrb	r3, [r3, #0]
 8012c0e:	b2db      	uxtb	r3, r3
}
 8012c10:	4618      	mov	r0, r3
 8012c12:	3708      	adds	r7, #8
 8012c14:	46bd      	mov	sp, r7
 8012c16:	bd80      	pop	{r7, pc}
 8012c18:	20000009 	.word	0x20000009

08012c1c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b082      	sub	sp, #8
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	4603      	mov	r3, r0
 8012c24:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8012c26:	f7ff fef7 	bl	8012a18 <BSP_SD_Init>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d107      	bne.n	8012c40 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8012c30:	79fb      	ldrb	r3, [r7, #7]
 8012c32:	4618      	mov	r0, r3
 8012c34:	f7ff ffd4 	bl	8012be0 <SD_CheckStatus>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	461a      	mov	r2, r3
 8012c3c:	4b04      	ldr	r3, [pc, #16]	; (8012c50 <SD_initialize+0x34>)
 8012c3e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8012c40:	4b03      	ldr	r3, [pc, #12]	; (8012c50 <SD_initialize+0x34>)
 8012c42:	781b      	ldrb	r3, [r3, #0]
 8012c44:	b2db      	uxtb	r3, r3
}
 8012c46:	4618      	mov	r0, r3
 8012c48:	3708      	adds	r7, #8
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	bd80      	pop	{r7, pc}
 8012c4e:	bf00      	nop
 8012c50:	20000009 	.word	0x20000009

08012c54 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b082      	sub	sp, #8
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012c5e:	79fb      	ldrb	r3, [r7, #7]
 8012c60:	4618      	mov	r0, r3
 8012c62:	f7ff ffbd 	bl	8012be0 <SD_CheckStatus>
 8012c66:	4603      	mov	r3, r0
}
 8012c68:	4618      	mov	r0, r3
 8012c6a:	3708      	adds	r7, #8
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	bd80      	pop	{r7, pc}

08012c70 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b086      	sub	sp, #24
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	60b9      	str	r1, [r7, #8]
 8012c78:	607a      	str	r2, [r7, #4]
 8012c7a:	603b      	str	r3, [r7, #0]
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012c80:	2301      	movs	r3, #1
 8012c82:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012c84:	f247 5030 	movw	r0, #30000	; 0x7530
 8012c88:	f7ff ff8c 	bl	8012ba4 <SD_CheckStatusWithTimeout>
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	da01      	bge.n	8012c96 <SD_read+0x26>
  {
    return res;
 8012c92:	7dfb      	ldrb	r3, [r7, #23]
 8012c94:	e03b      	b.n	8012d0e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8012c96:	683a      	ldr	r2, [r7, #0]
 8012c98:	6879      	ldr	r1, [r7, #4]
 8012c9a:	68b8      	ldr	r0, [r7, #8]
 8012c9c:	f7ff fee2 	bl	8012a64 <BSP_SD_ReadBlocks_DMA>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d132      	bne.n	8012d0c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8012ca6:	4b1c      	ldr	r3, [pc, #112]	; (8012d18 <SD_read+0xa8>)
 8012ca8:	2200      	movs	r2, #0
 8012caa:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8012cac:	f7f8 fd4a 	bl	800b744 <HAL_GetTick>
 8012cb0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012cb2:	bf00      	nop
 8012cb4:	4b18      	ldr	r3, [pc, #96]	; (8012d18 <SD_read+0xa8>)
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d108      	bne.n	8012cce <SD_read+0x5e>
 8012cbc:	f7f8 fd42 	bl	800b744 <HAL_GetTick>
 8012cc0:	4602      	mov	r2, r0
 8012cc2:	693b      	ldr	r3, [r7, #16]
 8012cc4:	1ad3      	subs	r3, r2, r3
 8012cc6:	f247 522f 	movw	r2, #29999	; 0x752f
 8012cca:	4293      	cmp	r3, r2
 8012ccc:	d9f2      	bls.n	8012cb4 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8012cce:	4b12      	ldr	r3, [pc, #72]	; (8012d18 <SD_read+0xa8>)
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d102      	bne.n	8012cdc <SD_read+0x6c>
      {
        res = RES_ERROR;
 8012cd6:	2301      	movs	r3, #1
 8012cd8:	75fb      	strb	r3, [r7, #23]
 8012cda:	e017      	b.n	8012d0c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8012cdc:	4b0e      	ldr	r3, [pc, #56]	; (8012d18 <SD_read+0xa8>)
 8012cde:	2200      	movs	r2, #0
 8012ce0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8012ce2:	f7f8 fd2f 	bl	800b744 <HAL_GetTick>
 8012ce6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012ce8:	e007      	b.n	8012cfa <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012cea:	f7ff feef 	bl	8012acc <BSP_SD_GetCardState>
 8012cee:	4603      	mov	r3, r0
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d102      	bne.n	8012cfa <SD_read+0x8a>
          {
            res = RES_OK;
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8012cf8:	e008      	b.n	8012d0c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012cfa:	f7f8 fd23 	bl	800b744 <HAL_GetTick>
 8012cfe:	4602      	mov	r2, r0
 8012d00:	693b      	ldr	r3, [r7, #16]
 8012d02:	1ad3      	subs	r3, r2, r3
 8012d04:	f247 522f 	movw	r2, #29999	; 0x752f
 8012d08:	4293      	cmp	r3, r2
 8012d0a:	d9ee      	bls.n	8012cea <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8012d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d0e:	4618      	mov	r0, r3
 8012d10:	3718      	adds	r7, #24
 8012d12:	46bd      	mov	sp, r7
 8012d14:	bd80      	pop	{r7, pc}
 8012d16:	bf00      	nop
 8012d18:	20047640 	.word	0x20047640

08012d1c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b086      	sub	sp, #24
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	60b9      	str	r1, [r7, #8]
 8012d24:	607a      	str	r2, [r7, #4]
 8012d26:	603b      	str	r3, [r7, #0]
 8012d28:	4603      	mov	r3, r0
 8012d2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012d2c:	2301      	movs	r3, #1
 8012d2e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8012d30:	4b24      	ldr	r3, [pc, #144]	; (8012dc4 <SD_write+0xa8>)
 8012d32:	2200      	movs	r2, #0
 8012d34:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012d36:	f247 5030 	movw	r0, #30000	; 0x7530
 8012d3a:	f7ff ff33 	bl	8012ba4 <SD_CheckStatusWithTimeout>
 8012d3e:	4603      	mov	r3, r0
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	da01      	bge.n	8012d48 <SD_write+0x2c>
  {
    return res;
 8012d44:	7dfb      	ldrb	r3, [r7, #23]
 8012d46:	e038      	b.n	8012dba <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8012d48:	683a      	ldr	r2, [r7, #0]
 8012d4a:	6879      	ldr	r1, [r7, #4]
 8012d4c:	68b8      	ldr	r0, [r7, #8]
 8012d4e:	f7ff fea3 	bl	8012a98 <BSP_SD_WriteBlocks_DMA>
 8012d52:	4603      	mov	r3, r0
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d12f      	bne.n	8012db8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8012d58:	f7f8 fcf4 	bl	800b744 <HAL_GetTick>
 8012d5c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012d5e:	bf00      	nop
 8012d60:	4b18      	ldr	r3, [pc, #96]	; (8012dc4 <SD_write+0xa8>)
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d108      	bne.n	8012d7a <SD_write+0x5e>
 8012d68:	f7f8 fcec 	bl	800b744 <HAL_GetTick>
 8012d6c:	4602      	mov	r2, r0
 8012d6e:	693b      	ldr	r3, [r7, #16]
 8012d70:	1ad3      	subs	r3, r2, r3
 8012d72:	f247 522f 	movw	r2, #29999	; 0x752f
 8012d76:	4293      	cmp	r3, r2
 8012d78:	d9f2      	bls.n	8012d60 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8012d7a:	4b12      	ldr	r3, [pc, #72]	; (8012dc4 <SD_write+0xa8>)
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d102      	bne.n	8012d88 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8012d82:	2301      	movs	r3, #1
 8012d84:	75fb      	strb	r3, [r7, #23]
 8012d86:	e017      	b.n	8012db8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8012d88:	4b0e      	ldr	r3, [pc, #56]	; (8012dc4 <SD_write+0xa8>)
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8012d8e:	f7f8 fcd9 	bl	800b744 <HAL_GetTick>
 8012d92:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012d94:	e007      	b.n	8012da6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012d96:	f7ff fe99 	bl	8012acc <BSP_SD_GetCardState>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d102      	bne.n	8012da6 <SD_write+0x8a>
          {
            res = RES_OK;
 8012da0:	2300      	movs	r3, #0
 8012da2:	75fb      	strb	r3, [r7, #23]
            break;
 8012da4:	e008      	b.n	8012db8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012da6:	f7f8 fccd 	bl	800b744 <HAL_GetTick>
 8012daa:	4602      	mov	r2, r0
 8012dac:	693b      	ldr	r3, [r7, #16]
 8012dae:	1ad3      	subs	r3, r2, r3
 8012db0:	f247 522f 	movw	r2, #29999	; 0x752f
 8012db4:	4293      	cmp	r3, r2
 8012db6:	d9ee      	bls.n	8012d96 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8012db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8012dba:	4618      	mov	r0, r3
 8012dbc:	3718      	adds	r7, #24
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd80      	pop	{r7, pc}
 8012dc2:	bf00      	nop
 8012dc4:	2004763c 	.word	0x2004763c

08012dc8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b08c      	sub	sp, #48	; 0x30
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	4603      	mov	r3, r0
 8012dd0:	603a      	str	r2, [r7, #0]
 8012dd2:	71fb      	strb	r3, [r7, #7]
 8012dd4:	460b      	mov	r3, r1
 8012dd6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012dd8:	2301      	movs	r3, #1
 8012dda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012dde:	4b25      	ldr	r3, [pc, #148]	; (8012e74 <SD_ioctl+0xac>)
 8012de0:	781b      	ldrb	r3, [r3, #0]
 8012de2:	b2db      	uxtb	r3, r3
 8012de4:	f003 0301 	and.w	r3, r3, #1
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d001      	beq.n	8012df0 <SD_ioctl+0x28>
 8012dec:	2303      	movs	r3, #3
 8012dee:	e03c      	b.n	8012e6a <SD_ioctl+0xa2>

  switch (cmd)
 8012df0:	79bb      	ldrb	r3, [r7, #6]
 8012df2:	2b03      	cmp	r3, #3
 8012df4:	d834      	bhi.n	8012e60 <SD_ioctl+0x98>
 8012df6:	a201      	add	r2, pc, #4	; (adr r2, 8012dfc <SD_ioctl+0x34>)
 8012df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dfc:	08012e0d 	.word	0x08012e0d
 8012e00:	08012e15 	.word	0x08012e15
 8012e04:	08012e2d 	.word	0x08012e2d
 8012e08:	08012e47 	.word	0x08012e47
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012e12:	e028      	b.n	8012e66 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012e14:	f107 030c 	add.w	r3, r7, #12
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7ff fe67 	bl	8012aec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e20:	683b      	ldr	r3, [r7, #0]
 8012e22:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012e24:	2300      	movs	r3, #0
 8012e26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012e2a:	e01c      	b.n	8012e66 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012e2c:	f107 030c 	add.w	r3, r7, #12
 8012e30:	4618      	mov	r0, r3
 8012e32:	f7ff fe5b 	bl	8012aec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e38:	b29a      	uxth	r2, r3
 8012e3a:	683b      	ldr	r3, [r7, #0]
 8012e3c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012e3e:	2300      	movs	r3, #0
 8012e40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012e44:	e00f      	b.n	8012e66 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012e46:	f107 030c 	add.w	r3, r7, #12
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	f7ff fe4e 	bl	8012aec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e52:	0a5a      	lsrs	r2, r3, #9
 8012e54:	683b      	ldr	r3, [r7, #0]
 8012e56:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012e58:	2300      	movs	r3, #0
 8012e5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012e5e:	e002      	b.n	8012e66 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012e60:	2304      	movs	r3, #4
 8012e62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8012e66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	3730      	adds	r7, #48	; 0x30
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	bd80      	pop	{r7, pc}
 8012e72:	bf00      	nop
 8012e74:	20000009 	.word	0x20000009

08012e78 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8012e78:	b480      	push	{r7}
 8012e7a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8012e7c:	4b03      	ldr	r3, [pc, #12]	; (8012e8c <BSP_SD_WriteCpltCallback+0x14>)
 8012e7e:	2201      	movs	r2, #1
 8012e80:	601a      	str	r2, [r3, #0]
}
 8012e82:	bf00      	nop
 8012e84:	46bd      	mov	sp, r7
 8012e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8a:	4770      	bx	lr
 8012e8c:	2004763c 	.word	0x2004763c

08012e90 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8012e90:	b480      	push	{r7}
 8012e92:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8012e94:	4b03      	ldr	r3, [pc, #12]	; (8012ea4 <BSP_SD_ReadCpltCallback+0x14>)
 8012e96:	2201      	movs	r2, #1
 8012e98:	601a      	str	r2, [r3, #0]
}
 8012e9a:	bf00      	nop
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea2:	4770      	bx	lr
 8012ea4:	20047640 	.word	0x20047640

08012ea8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b084      	sub	sp, #16
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	4603      	mov	r3, r0
 8012eb0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012eb2:	79fb      	ldrb	r3, [r7, #7]
 8012eb4:	4a08      	ldr	r2, [pc, #32]	; (8012ed8 <disk_status+0x30>)
 8012eb6:	009b      	lsls	r3, r3, #2
 8012eb8:	4413      	add	r3, r2
 8012eba:	685b      	ldr	r3, [r3, #4]
 8012ebc:	685b      	ldr	r3, [r3, #4]
 8012ebe:	79fa      	ldrb	r2, [r7, #7]
 8012ec0:	4905      	ldr	r1, [pc, #20]	; (8012ed8 <disk_status+0x30>)
 8012ec2:	440a      	add	r2, r1
 8012ec4:	7a12      	ldrb	r2, [r2, #8]
 8012ec6:	4610      	mov	r0, r2
 8012ec8:	4798      	blx	r3
 8012eca:	4603      	mov	r3, r0
 8012ecc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	3710      	adds	r7, #16
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	bd80      	pop	{r7, pc}
 8012ed8:	2004766c 	.word	0x2004766c

08012edc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b084      	sub	sp, #16
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012eea:	79fb      	ldrb	r3, [r7, #7]
 8012eec:	4a0d      	ldr	r2, [pc, #52]	; (8012f24 <disk_initialize+0x48>)
 8012eee:	5cd3      	ldrb	r3, [r2, r3]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d111      	bne.n	8012f18 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012ef4:	79fb      	ldrb	r3, [r7, #7]
 8012ef6:	4a0b      	ldr	r2, [pc, #44]	; (8012f24 <disk_initialize+0x48>)
 8012ef8:	2101      	movs	r1, #1
 8012efa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012efc:	79fb      	ldrb	r3, [r7, #7]
 8012efe:	4a09      	ldr	r2, [pc, #36]	; (8012f24 <disk_initialize+0x48>)
 8012f00:	009b      	lsls	r3, r3, #2
 8012f02:	4413      	add	r3, r2
 8012f04:	685b      	ldr	r3, [r3, #4]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	79fa      	ldrb	r2, [r7, #7]
 8012f0a:	4906      	ldr	r1, [pc, #24]	; (8012f24 <disk_initialize+0x48>)
 8012f0c:	440a      	add	r2, r1
 8012f0e:	7a12      	ldrb	r2, [r2, #8]
 8012f10:	4610      	mov	r0, r2
 8012f12:	4798      	blx	r3
 8012f14:	4603      	mov	r3, r0
 8012f16:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	3710      	adds	r7, #16
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bd80      	pop	{r7, pc}
 8012f22:	bf00      	nop
 8012f24:	2004766c 	.word	0x2004766c

08012f28 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012f28:	b590      	push	{r4, r7, lr}
 8012f2a:	b087      	sub	sp, #28
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	60b9      	str	r1, [r7, #8]
 8012f30:	607a      	str	r2, [r7, #4]
 8012f32:	603b      	str	r3, [r7, #0]
 8012f34:	4603      	mov	r3, r0
 8012f36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012f38:	7bfb      	ldrb	r3, [r7, #15]
 8012f3a:	4a0a      	ldr	r2, [pc, #40]	; (8012f64 <disk_read+0x3c>)
 8012f3c:	009b      	lsls	r3, r3, #2
 8012f3e:	4413      	add	r3, r2
 8012f40:	685b      	ldr	r3, [r3, #4]
 8012f42:	689c      	ldr	r4, [r3, #8]
 8012f44:	7bfb      	ldrb	r3, [r7, #15]
 8012f46:	4a07      	ldr	r2, [pc, #28]	; (8012f64 <disk_read+0x3c>)
 8012f48:	4413      	add	r3, r2
 8012f4a:	7a18      	ldrb	r0, [r3, #8]
 8012f4c:	683b      	ldr	r3, [r7, #0]
 8012f4e:	687a      	ldr	r2, [r7, #4]
 8012f50:	68b9      	ldr	r1, [r7, #8]
 8012f52:	47a0      	blx	r4
 8012f54:	4603      	mov	r3, r0
 8012f56:	75fb      	strb	r3, [r7, #23]
  return res;
 8012f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	371c      	adds	r7, #28
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	bd90      	pop	{r4, r7, pc}
 8012f62:	bf00      	nop
 8012f64:	2004766c 	.word	0x2004766c

08012f68 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012f68:	b590      	push	{r4, r7, lr}
 8012f6a:	b087      	sub	sp, #28
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	60b9      	str	r1, [r7, #8]
 8012f70:	607a      	str	r2, [r7, #4]
 8012f72:	603b      	str	r3, [r7, #0]
 8012f74:	4603      	mov	r3, r0
 8012f76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012f78:	7bfb      	ldrb	r3, [r7, #15]
 8012f7a:	4a0a      	ldr	r2, [pc, #40]	; (8012fa4 <disk_write+0x3c>)
 8012f7c:	009b      	lsls	r3, r3, #2
 8012f7e:	4413      	add	r3, r2
 8012f80:	685b      	ldr	r3, [r3, #4]
 8012f82:	68dc      	ldr	r4, [r3, #12]
 8012f84:	7bfb      	ldrb	r3, [r7, #15]
 8012f86:	4a07      	ldr	r2, [pc, #28]	; (8012fa4 <disk_write+0x3c>)
 8012f88:	4413      	add	r3, r2
 8012f8a:	7a18      	ldrb	r0, [r3, #8]
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	687a      	ldr	r2, [r7, #4]
 8012f90:	68b9      	ldr	r1, [r7, #8]
 8012f92:	47a0      	blx	r4
 8012f94:	4603      	mov	r3, r0
 8012f96:	75fb      	strb	r3, [r7, #23]
  return res;
 8012f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	371c      	adds	r7, #28
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	bd90      	pop	{r4, r7, pc}
 8012fa2:	bf00      	nop
 8012fa4:	2004766c 	.word	0x2004766c

08012fa8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b084      	sub	sp, #16
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	4603      	mov	r3, r0
 8012fb0:	603a      	str	r2, [r7, #0]
 8012fb2:	71fb      	strb	r3, [r7, #7]
 8012fb4:	460b      	mov	r3, r1
 8012fb6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012fb8:	79fb      	ldrb	r3, [r7, #7]
 8012fba:	4a09      	ldr	r2, [pc, #36]	; (8012fe0 <disk_ioctl+0x38>)
 8012fbc:	009b      	lsls	r3, r3, #2
 8012fbe:	4413      	add	r3, r2
 8012fc0:	685b      	ldr	r3, [r3, #4]
 8012fc2:	691b      	ldr	r3, [r3, #16]
 8012fc4:	79fa      	ldrb	r2, [r7, #7]
 8012fc6:	4906      	ldr	r1, [pc, #24]	; (8012fe0 <disk_ioctl+0x38>)
 8012fc8:	440a      	add	r2, r1
 8012fca:	7a10      	ldrb	r0, [r2, #8]
 8012fcc:	79b9      	ldrb	r1, [r7, #6]
 8012fce:	683a      	ldr	r2, [r7, #0]
 8012fd0:	4798      	blx	r3
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	73fb      	strb	r3, [r7, #15]
  return res;
 8012fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fd8:	4618      	mov	r0, r3
 8012fda:	3710      	adds	r7, #16
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}
 8012fe0:	2004766c 	.word	0x2004766c

08012fe4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012fe4:	b480      	push	{r7}
 8012fe6:	b085      	sub	sp, #20
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	3301      	adds	r3, #1
 8012ff0:	781b      	ldrb	r3, [r3, #0]
 8012ff2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012ff4:	89fb      	ldrh	r3, [r7, #14]
 8012ff6:	021b      	lsls	r3, r3, #8
 8012ff8:	b21a      	sxth	r2, r3
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	781b      	ldrb	r3, [r3, #0]
 8012ffe:	b21b      	sxth	r3, r3
 8013000:	4313      	orrs	r3, r2
 8013002:	b21b      	sxth	r3, r3
 8013004:	81fb      	strh	r3, [r7, #14]
	return rv;
 8013006:	89fb      	ldrh	r3, [r7, #14]
}
 8013008:	4618      	mov	r0, r3
 801300a:	3714      	adds	r7, #20
 801300c:	46bd      	mov	sp, r7
 801300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013012:	4770      	bx	lr

08013014 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8013014:	b480      	push	{r7}
 8013016:	b085      	sub	sp, #20
 8013018:	af00      	add	r7, sp, #0
 801301a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	3303      	adds	r3, #3
 8013020:	781b      	ldrb	r3, [r3, #0]
 8013022:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	021b      	lsls	r3, r3, #8
 8013028:	687a      	ldr	r2, [r7, #4]
 801302a:	3202      	adds	r2, #2
 801302c:	7812      	ldrb	r2, [r2, #0]
 801302e:	4313      	orrs	r3, r2
 8013030:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	021b      	lsls	r3, r3, #8
 8013036:	687a      	ldr	r2, [r7, #4]
 8013038:	3201      	adds	r2, #1
 801303a:	7812      	ldrb	r2, [r2, #0]
 801303c:	4313      	orrs	r3, r2
 801303e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	021b      	lsls	r3, r3, #8
 8013044:	687a      	ldr	r2, [r7, #4]
 8013046:	7812      	ldrb	r2, [r2, #0]
 8013048:	4313      	orrs	r3, r2
 801304a:	60fb      	str	r3, [r7, #12]
	return rv;
 801304c:	68fb      	ldr	r3, [r7, #12]
}
 801304e:	4618      	mov	r0, r3
 8013050:	3714      	adds	r7, #20
 8013052:	46bd      	mov	sp, r7
 8013054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013058:	4770      	bx	lr

0801305a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801305a:	b480      	push	{r7}
 801305c:	b083      	sub	sp, #12
 801305e:	af00      	add	r7, sp, #0
 8013060:	6078      	str	r0, [r7, #4]
 8013062:	460b      	mov	r3, r1
 8013064:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	1c5a      	adds	r2, r3, #1
 801306a:	607a      	str	r2, [r7, #4]
 801306c:	887a      	ldrh	r2, [r7, #2]
 801306e:	b2d2      	uxtb	r2, r2
 8013070:	701a      	strb	r2, [r3, #0]
 8013072:	887b      	ldrh	r3, [r7, #2]
 8013074:	0a1b      	lsrs	r3, r3, #8
 8013076:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	1c5a      	adds	r2, r3, #1
 801307c:	607a      	str	r2, [r7, #4]
 801307e:	887a      	ldrh	r2, [r7, #2]
 8013080:	b2d2      	uxtb	r2, r2
 8013082:	701a      	strb	r2, [r3, #0]
}
 8013084:	bf00      	nop
 8013086:	370c      	adds	r7, #12
 8013088:	46bd      	mov	sp, r7
 801308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801308e:	4770      	bx	lr

08013090 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8013090:	b480      	push	{r7}
 8013092:	b083      	sub	sp, #12
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
 8013098:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	1c5a      	adds	r2, r3, #1
 801309e:	607a      	str	r2, [r7, #4]
 80130a0:	683a      	ldr	r2, [r7, #0]
 80130a2:	b2d2      	uxtb	r2, r2
 80130a4:	701a      	strb	r2, [r3, #0]
 80130a6:	683b      	ldr	r3, [r7, #0]
 80130a8:	0a1b      	lsrs	r3, r3, #8
 80130aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	1c5a      	adds	r2, r3, #1
 80130b0:	607a      	str	r2, [r7, #4]
 80130b2:	683a      	ldr	r2, [r7, #0]
 80130b4:	b2d2      	uxtb	r2, r2
 80130b6:	701a      	strb	r2, [r3, #0]
 80130b8:	683b      	ldr	r3, [r7, #0]
 80130ba:	0a1b      	lsrs	r3, r3, #8
 80130bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	1c5a      	adds	r2, r3, #1
 80130c2:	607a      	str	r2, [r7, #4]
 80130c4:	683a      	ldr	r2, [r7, #0]
 80130c6:	b2d2      	uxtb	r2, r2
 80130c8:	701a      	strb	r2, [r3, #0]
 80130ca:	683b      	ldr	r3, [r7, #0]
 80130cc:	0a1b      	lsrs	r3, r3, #8
 80130ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	1c5a      	adds	r2, r3, #1
 80130d4:	607a      	str	r2, [r7, #4]
 80130d6:	683a      	ldr	r2, [r7, #0]
 80130d8:	b2d2      	uxtb	r2, r2
 80130da:	701a      	strb	r2, [r3, #0]
}
 80130dc:	bf00      	nop
 80130de:	370c      	adds	r7, #12
 80130e0:	46bd      	mov	sp, r7
 80130e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e6:	4770      	bx	lr

080130e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80130e8:	b480      	push	{r7}
 80130ea:	b087      	sub	sp, #28
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	60f8      	str	r0, [r7, #12]
 80130f0:	60b9      	str	r1, [r7, #8]
 80130f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80130f8:	68bb      	ldr	r3, [r7, #8]
 80130fa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d00d      	beq.n	801311e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8013102:	693a      	ldr	r2, [r7, #16]
 8013104:	1c53      	adds	r3, r2, #1
 8013106:	613b      	str	r3, [r7, #16]
 8013108:	697b      	ldr	r3, [r7, #20]
 801310a:	1c59      	adds	r1, r3, #1
 801310c:	6179      	str	r1, [r7, #20]
 801310e:	7812      	ldrb	r2, [r2, #0]
 8013110:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	3b01      	subs	r3, #1
 8013116:	607b      	str	r3, [r7, #4]
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d1f1      	bne.n	8013102 <mem_cpy+0x1a>
	}
}
 801311e:	bf00      	nop
 8013120:	371c      	adds	r7, #28
 8013122:	46bd      	mov	sp, r7
 8013124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013128:	4770      	bx	lr

0801312a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801312a:	b480      	push	{r7}
 801312c:	b087      	sub	sp, #28
 801312e:	af00      	add	r7, sp, #0
 8013130:	60f8      	str	r0, [r7, #12]
 8013132:	60b9      	str	r1, [r7, #8]
 8013134:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801313a:	697b      	ldr	r3, [r7, #20]
 801313c:	1c5a      	adds	r2, r3, #1
 801313e:	617a      	str	r2, [r7, #20]
 8013140:	68ba      	ldr	r2, [r7, #8]
 8013142:	b2d2      	uxtb	r2, r2
 8013144:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	3b01      	subs	r3, #1
 801314a:	607b      	str	r3, [r7, #4]
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d1f3      	bne.n	801313a <mem_set+0x10>
}
 8013152:	bf00      	nop
 8013154:	371c      	adds	r7, #28
 8013156:	46bd      	mov	sp, r7
 8013158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801315c:	4770      	bx	lr

0801315e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801315e:	b480      	push	{r7}
 8013160:	b089      	sub	sp, #36	; 0x24
 8013162:	af00      	add	r7, sp, #0
 8013164:	60f8      	str	r0, [r7, #12]
 8013166:	60b9      	str	r1, [r7, #8]
 8013168:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	61fb      	str	r3, [r7, #28]
 801316e:	68bb      	ldr	r3, [r7, #8]
 8013170:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8013172:	2300      	movs	r3, #0
 8013174:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8013176:	69fb      	ldr	r3, [r7, #28]
 8013178:	1c5a      	adds	r2, r3, #1
 801317a:	61fa      	str	r2, [r7, #28]
 801317c:	781b      	ldrb	r3, [r3, #0]
 801317e:	4619      	mov	r1, r3
 8013180:	69bb      	ldr	r3, [r7, #24]
 8013182:	1c5a      	adds	r2, r3, #1
 8013184:	61ba      	str	r2, [r7, #24]
 8013186:	781b      	ldrb	r3, [r3, #0]
 8013188:	1acb      	subs	r3, r1, r3
 801318a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	3b01      	subs	r3, #1
 8013190:	607b      	str	r3, [r7, #4]
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d002      	beq.n	801319e <mem_cmp+0x40>
 8013198:	697b      	ldr	r3, [r7, #20]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d0eb      	beq.n	8013176 <mem_cmp+0x18>

	return r;
 801319e:	697b      	ldr	r3, [r7, #20]
}
 80131a0:	4618      	mov	r0, r3
 80131a2:	3724      	adds	r7, #36	; 0x24
 80131a4:	46bd      	mov	sp, r7
 80131a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131aa:	4770      	bx	lr

080131ac <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80131ac:	b480      	push	{r7}
 80131ae:	b083      	sub	sp, #12
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
 80131b4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80131b6:	e002      	b.n	80131be <chk_chr+0x12>
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	3301      	adds	r3, #1
 80131bc:	607b      	str	r3, [r7, #4]
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	781b      	ldrb	r3, [r3, #0]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d005      	beq.n	80131d2 <chk_chr+0x26>
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	781b      	ldrb	r3, [r3, #0]
 80131ca:	461a      	mov	r2, r3
 80131cc:	683b      	ldr	r3, [r7, #0]
 80131ce:	4293      	cmp	r3, r2
 80131d0:	d1f2      	bne.n	80131b8 <chk_chr+0xc>
	return *str;
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	781b      	ldrb	r3, [r3, #0]
}
 80131d6:	4618      	mov	r0, r3
 80131d8:	370c      	adds	r7, #12
 80131da:	46bd      	mov	sp, r7
 80131dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e0:	4770      	bx	lr
	...

080131e4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80131e4:	b480      	push	{r7}
 80131e6:	b085      	sub	sp, #20
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
 80131ec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80131ee:	2300      	movs	r3, #0
 80131f0:	60bb      	str	r3, [r7, #8]
 80131f2:	68bb      	ldr	r3, [r7, #8]
 80131f4:	60fb      	str	r3, [r7, #12]
 80131f6:	e029      	b.n	801324c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80131f8:	4a27      	ldr	r2, [pc, #156]	; (8013298 <chk_lock+0xb4>)
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	011b      	lsls	r3, r3, #4
 80131fe:	4413      	add	r3, r2
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d01d      	beq.n	8013242 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013206:	4a24      	ldr	r2, [pc, #144]	; (8013298 <chk_lock+0xb4>)
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	011b      	lsls	r3, r3, #4
 801320c:	4413      	add	r3, r2
 801320e:	681a      	ldr	r2, [r3, #0]
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	429a      	cmp	r2, r3
 8013216:	d116      	bne.n	8013246 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8013218:	4a1f      	ldr	r2, [pc, #124]	; (8013298 <chk_lock+0xb4>)
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	011b      	lsls	r3, r3, #4
 801321e:	4413      	add	r3, r2
 8013220:	3304      	adds	r3, #4
 8013222:	681a      	ldr	r2, [r3, #0]
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013228:	429a      	cmp	r2, r3
 801322a:	d10c      	bne.n	8013246 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801322c:	4a1a      	ldr	r2, [pc, #104]	; (8013298 <chk_lock+0xb4>)
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	011b      	lsls	r3, r3, #4
 8013232:	4413      	add	r3, r2
 8013234:	3308      	adds	r3, #8
 8013236:	681a      	ldr	r2, [r3, #0]
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801323c:	429a      	cmp	r2, r3
 801323e:	d102      	bne.n	8013246 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013240:	e007      	b.n	8013252 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8013242:	2301      	movs	r3, #1
 8013244:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	3301      	adds	r3, #1
 801324a:	60fb      	str	r3, [r7, #12]
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	2b01      	cmp	r3, #1
 8013250:	d9d2      	bls.n	80131f8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	2b02      	cmp	r3, #2
 8013256:	d109      	bne.n	801326c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8013258:	68bb      	ldr	r3, [r7, #8]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d102      	bne.n	8013264 <chk_lock+0x80>
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	2b02      	cmp	r3, #2
 8013262:	d101      	bne.n	8013268 <chk_lock+0x84>
 8013264:	2300      	movs	r3, #0
 8013266:	e010      	b.n	801328a <chk_lock+0xa6>
 8013268:	2312      	movs	r3, #18
 801326a:	e00e      	b.n	801328a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801326c:	683b      	ldr	r3, [r7, #0]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d108      	bne.n	8013284 <chk_lock+0xa0>
 8013272:	4a09      	ldr	r2, [pc, #36]	; (8013298 <chk_lock+0xb4>)
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	011b      	lsls	r3, r3, #4
 8013278:	4413      	add	r3, r2
 801327a:	330c      	adds	r3, #12
 801327c:	881b      	ldrh	r3, [r3, #0]
 801327e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013282:	d101      	bne.n	8013288 <chk_lock+0xa4>
 8013284:	2310      	movs	r3, #16
 8013286:	e000      	b.n	801328a <chk_lock+0xa6>
 8013288:	2300      	movs	r3, #0
}
 801328a:	4618      	mov	r0, r3
 801328c:	3714      	adds	r7, #20
 801328e:	46bd      	mov	sp, r7
 8013290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013294:	4770      	bx	lr
 8013296:	bf00      	nop
 8013298:	2004764c 	.word	0x2004764c

0801329c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801329c:	b480      	push	{r7}
 801329e:	b083      	sub	sp, #12
 80132a0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80132a2:	2300      	movs	r3, #0
 80132a4:	607b      	str	r3, [r7, #4]
 80132a6:	e002      	b.n	80132ae <enq_lock+0x12>
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	3301      	adds	r3, #1
 80132ac:	607b      	str	r3, [r7, #4]
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	2b01      	cmp	r3, #1
 80132b2:	d806      	bhi.n	80132c2 <enq_lock+0x26>
 80132b4:	4a09      	ldr	r2, [pc, #36]	; (80132dc <enq_lock+0x40>)
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	011b      	lsls	r3, r3, #4
 80132ba:	4413      	add	r3, r2
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d1f2      	bne.n	80132a8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	2b02      	cmp	r3, #2
 80132c6:	bf14      	ite	ne
 80132c8:	2301      	movne	r3, #1
 80132ca:	2300      	moveq	r3, #0
 80132cc:	b2db      	uxtb	r3, r3
}
 80132ce:	4618      	mov	r0, r3
 80132d0:	370c      	adds	r7, #12
 80132d2:	46bd      	mov	sp, r7
 80132d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d8:	4770      	bx	lr
 80132da:	bf00      	nop
 80132dc:	2004764c 	.word	0x2004764c

080132e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80132e0:	b480      	push	{r7}
 80132e2:	b085      	sub	sp, #20
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
 80132e8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80132ea:	2300      	movs	r3, #0
 80132ec:	60fb      	str	r3, [r7, #12]
 80132ee:	e01f      	b.n	8013330 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80132f0:	4a41      	ldr	r2, [pc, #260]	; (80133f8 <inc_lock+0x118>)
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	011b      	lsls	r3, r3, #4
 80132f6:	4413      	add	r3, r2
 80132f8:	681a      	ldr	r2, [r3, #0]
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	429a      	cmp	r2, r3
 8013300:	d113      	bne.n	801332a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8013302:	4a3d      	ldr	r2, [pc, #244]	; (80133f8 <inc_lock+0x118>)
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	011b      	lsls	r3, r3, #4
 8013308:	4413      	add	r3, r2
 801330a:	3304      	adds	r3, #4
 801330c:	681a      	ldr	r2, [r3, #0]
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8013312:	429a      	cmp	r2, r3
 8013314:	d109      	bne.n	801332a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8013316:	4a38      	ldr	r2, [pc, #224]	; (80133f8 <inc_lock+0x118>)
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	011b      	lsls	r3, r3, #4
 801331c:	4413      	add	r3, r2
 801331e:	3308      	adds	r3, #8
 8013320:	681a      	ldr	r2, [r3, #0]
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8013326:	429a      	cmp	r2, r3
 8013328:	d006      	beq.n	8013338 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	3301      	adds	r3, #1
 801332e:	60fb      	str	r3, [r7, #12]
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	2b01      	cmp	r3, #1
 8013334:	d9dc      	bls.n	80132f0 <inc_lock+0x10>
 8013336:	e000      	b.n	801333a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8013338:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	2b02      	cmp	r3, #2
 801333e:	d132      	bne.n	80133a6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013340:	2300      	movs	r3, #0
 8013342:	60fb      	str	r3, [r7, #12]
 8013344:	e002      	b.n	801334c <inc_lock+0x6c>
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	3301      	adds	r3, #1
 801334a:	60fb      	str	r3, [r7, #12]
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	2b01      	cmp	r3, #1
 8013350:	d806      	bhi.n	8013360 <inc_lock+0x80>
 8013352:	4a29      	ldr	r2, [pc, #164]	; (80133f8 <inc_lock+0x118>)
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	011b      	lsls	r3, r3, #4
 8013358:	4413      	add	r3, r2
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d1f2      	bne.n	8013346 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	2b02      	cmp	r3, #2
 8013364:	d101      	bne.n	801336a <inc_lock+0x8a>
 8013366:	2300      	movs	r3, #0
 8013368:	e040      	b.n	80133ec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	681a      	ldr	r2, [r3, #0]
 801336e:	4922      	ldr	r1, [pc, #136]	; (80133f8 <inc_lock+0x118>)
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	011b      	lsls	r3, r3, #4
 8013374:	440b      	add	r3, r1
 8013376:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	689a      	ldr	r2, [r3, #8]
 801337c:	491e      	ldr	r1, [pc, #120]	; (80133f8 <inc_lock+0x118>)
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	011b      	lsls	r3, r3, #4
 8013382:	440b      	add	r3, r1
 8013384:	3304      	adds	r3, #4
 8013386:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	695a      	ldr	r2, [r3, #20]
 801338c:	491a      	ldr	r1, [pc, #104]	; (80133f8 <inc_lock+0x118>)
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	011b      	lsls	r3, r3, #4
 8013392:	440b      	add	r3, r1
 8013394:	3308      	adds	r3, #8
 8013396:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8013398:	4a17      	ldr	r2, [pc, #92]	; (80133f8 <inc_lock+0x118>)
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	011b      	lsls	r3, r3, #4
 801339e:	4413      	add	r3, r2
 80133a0:	330c      	adds	r3, #12
 80133a2:	2200      	movs	r2, #0
 80133a4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80133a6:	683b      	ldr	r3, [r7, #0]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d009      	beq.n	80133c0 <inc_lock+0xe0>
 80133ac:	4a12      	ldr	r2, [pc, #72]	; (80133f8 <inc_lock+0x118>)
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	011b      	lsls	r3, r3, #4
 80133b2:	4413      	add	r3, r2
 80133b4:	330c      	adds	r3, #12
 80133b6:	881b      	ldrh	r3, [r3, #0]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d001      	beq.n	80133c0 <inc_lock+0xe0>
 80133bc:	2300      	movs	r3, #0
 80133be:	e015      	b.n	80133ec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80133c0:	683b      	ldr	r3, [r7, #0]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d108      	bne.n	80133d8 <inc_lock+0xf8>
 80133c6:	4a0c      	ldr	r2, [pc, #48]	; (80133f8 <inc_lock+0x118>)
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	011b      	lsls	r3, r3, #4
 80133cc:	4413      	add	r3, r2
 80133ce:	330c      	adds	r3, #12
 80133d0:	881b      	ldrh	r3, [r3, #0]
 80133d2:	3301      	adds	r3, #1
 80133d4:	b29a      	uxth	r2, r3
 80133d6:	e001      	b.n	80133dc <inc_lock+0xfc>
 80133d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80133dc:	4906      	ldr	r1, [pc, #24]	; (80133f8 <inc_lock+0x118>)
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	011b      	lsls	r3, r3, #4
 80133e2:	440b      	add	r3, r1
 80133e4:	330c      	adds	r3, #12
 80133e6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	3301      	adds	r3, #1
}
 80133ec:	4618      	mov	r0, r3
 80133ee:	3714      	adds	r7, #20
 80133f0:	46bd      	mov	sp, r7
 80133f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f6:	4770      	bx	lr
 80133f8:	2004764c 	.word	0x2004764c

080133fc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80133fc:	b480      	push	{r7}
 80133fe:	b085      	sub	sp, #20
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	3b01      	subs	r3, #1
 8013408:	607b      	str	r3, [r7, #4]
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	2b01      	cmp	r3, #1
 801340e:	d825      	bhi.n	801345c <dec_lock+0x60>
		n = Files[i].ctr;
 8013410:	4a17      	ldr	r2, [pc, #92]	; (8013470 <dec_lock+0x74>)
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	011b      	lsls	r3, r3, #4
 8013416:	4413      	add	r3, r2
 8013418:	330c      	adds	r3, #12
 801341a:	881b      	ldrh	r3, [r3, #0]
 801341c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801341e:	89fb      	ldrh	r3, [r7, #14]
 8013420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013424:	d101      	bne.n	801342a <dec_lock+0x2e>
 8013426:	2300      	movs	r3, #0
 8013428:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801342a:	89fb      	ldrh	r3, [r7, #14]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d002      	beq.n	8013436 <dec_lock+0x3a>
 8013430:	89fb      	ldrh	r3, [r7, #14]
 8013432:	3b01      	subs	r3, #1
 8013434:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8013436:	4a0e      	ldr	r2, [pc, #56]	; (8013470 <dec_lock+0x74>)
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	011b      	lsls	r3, r3, #4
 801343c:	4413      	add	r3, r2
 801343e:	330c      	adds	r3, #12
 8013440:	89fa      	ldrh	r2, [r7, #14]
 8013442:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8013444:	89fb      	ldrh	r3, [r7, #14]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d105      	bne.n	8013456 <dec_lock+0x5a>
 801344a:	4a09      	ldr	r2, [pc, #36]	; (8013470 <dec_lock+0x74>)
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	011b      	lsls	r3, r3, #4
 8013450:	4413      	add	r3, r2
 8013452:	2200      	movs	r2, #0
 8013454:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8013456:	2300      	movs	r3, #0
 8013458:	737b      	strb	r3, [r7, #13]
 801345a:	e001      	b.n	8013460 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801345c:	2302      	movs	r3, #2
 801345e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8013460:	7b7b      	ldrb	r3, [r7, #13]
}
 8013462:	4618      	mov	r0, r3
 8013464:	3714      	adds	r7, #20
 8013466:	46bd      	mov	sp, r7
 8013468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346c:	4770      	bx	lr
 801346e:	bf00      	nop
 8013470:	2004764c 	.word	0x2004764c

08013474 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8013474:	b480      	push	{r7}
 8013476:	b085      	sub	sp, #20
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801347c:	2300      	movs	r3, #0
 801347e:	60fb      	str	r3, [r7, #12]
 8013480:	e010      	b.n	80134a4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8013482:	4a0d      	ldr	r2, [pc, #52]	; (80134b8 <clear_lock+0x44>)
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	011b      	lsls	r3, r3, #4
 8013488:	4413      	add	r3, r2
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	687a      	ldr	r2, [r7, #4]
 801348e:	429a      	cmp	r2, r3
 8013490:	d105      	bne.n	801349e <clear_lock+0x2a>
 8013492:	4a09      	ldr	r2, [pc, #36]	; (80134b8 <clear_lock+0x44>)
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	011b      	lsls	r3, r3, #4
 8013498:	4413      	add	r3, r2
 801349a:	2200      	movs	r2, #0
 801349c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	3301      	adds	r3, #1
 80134a2:	60fb      	str	r3, [r7, #12]
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	2b01      	cmp	r3, #1
 80134a8:	d9eb      	bls.n	8013482 <clear_lock+0xe>
	}
}
 80134aa:	bf00      	nop
 80134ac:	3714      	adds	r7, #20
 80134ae:	46bd      	mov	sp, r7
 80134b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b4:	4770      	bx	lr
 80134b6:	bf00      	nop
 80134b8:	2004764c 	.word	0x2004764c

080134bc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b086      	sub	sp, #24
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80134c4:	2300      	movs	r3, #0
 80134c6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	78db      	ldrb	r3, [r3, #3]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d034      	beq.n	801353a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80134d4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	7858      	ldrb	r0, [r3, #1]
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80134e0:	2301      	movs	r3, #1
 80134e2:	697a      	ldr	r2, [r7, #20]
 80134e4:	f7ff fd40 	bl	8012f68 <disk_write>
 80134e8:	4603      	mov	r3, r0
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d002      	beq.n	80134f4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80134ee:	2301      	movs	r3, #1
 80134f0:	73fb      	strb	r3, [r7, #15]
 80134f2:	e022      	b.n	801353a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	2200      	movs	r2, #0
 80134f8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134fe:	697a      	ldr	r2, [r7, #20]
 8013500:	1ad2      	subs	r2, r2, r3
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	6a1b      	ldr	r3, [r3, #32]
 8013506:	429a      	cmp	r2, r3
 8013508:	d217      	bcs.n	801353a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	789b      	ldrb	r3, [r3, #2]
 801350e:	613b      	str	r3, [r7, #16]
 8013510:	e010      	b.n	8013534 <sync_window+0x78>
					wsect += fs->fsize;
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	6a1b      	ldr	r3, [r3, #32]
 8013516:	697a      	ldr	r2, [r7, #20]
 8013518:	4413      	add	r3, r2
 801351a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	7858      	ldrb	r0, [r3, #1]
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013526:	2301      	movs	r3, #1
 8013528:	697a      	ldr	r2, [r7, #20]
 801352a:	f7ff fd1d 	bl	8012f68 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801352e:	693b      	ldr	r3, [r7, #16]
 8013530:	3b01      	subs	r3, #1
 8013532:	613b      	str	r3, [r7, #16]
 8013534:	693b      	ldr	r3, [r7, #16]
 8013536:	2b01      	cmp	r3, #1
 8013538:	d8eb      	bhi.n	8013512 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801353a:	7bfb      	ldrb	r3, [r7, #15]
}
 801353c:	4618      	mov	r0, r3
 801353e:	3718      	adds	r7, #24
 8013540:	46bd      	mov	sp, r7
 8013542:	bd80      	pop	{r7, pc}

08013544 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b084      	sub	sp, #16
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
 801354c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801354e:	2300      	movs	r3, #0
 8013550:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013556:	683a      	ldr	r2, [r7, #0]
 8013558:	429a      	cmp	r2, r3
 801355a:	d01b      	beq.n	8013594 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	f7ff ffad 	bl	80134bc <sync_window>
 8013562:	4603      	mov	r3, r0
 8013564:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013566:	7bfb      	ldrb	r3, [r7, #15]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d113      	bne.n	8013594 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	7858      	ldrb	r0, [r3, #1]
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013576:	2301      	movs	r3, #1
 8013578:	683a      	ldr	r2, [r7, #0]
 801357a:	f7ff fcd5 	bl	8012f28 <disk_read>
 801357e:	4603      	mov	r3, r0
 8013580:	2b00      	cmp	r3, #0
 8013582:	d004      	beq.n	801358e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013584:	f04f 33ff 	mov.w	r3, #4294967295
 8013588:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801358a:	2301      	movs	r3, #1
 801358c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	683a      	ldr	r2, [r7, #0]
 8013592:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8013594:	7bfb      	ldrb	r3, [r7, #15]
}
 8013596:	4618      	mov	r0, r3
 8013598:	3710      	adds	r7, #16
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}
	...

080135a0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b084      	sub	sp, #16
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80135a8:	6878      	ldr	r0, [r7, #4]
 80135aa:	f7ff ff87 	bl	80134bc <sync_window>
 80135ae:	4603      	mov	r3, r0
 80135b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80135b2:	7bfb      	ldrb	r3, [r7, #15]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d159      	bne.n	801366c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	781b      	ldrb	r3, [r3, #0]
 80135bc:	2b03      	cmp	r3, #3
 80135be:	d149      	bne.n	8013654 <sync_fs+0xb4>
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	791b      	ldrb	r3, [r3, #4]
 80135c4:	2b01      	cmp	r3, #1
 80135c6:	d145      	bne.n	8013654 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	899b      	ldrh	r3, [r3, #12]
 80135d2:	461a      	mov	r2, r3
 80135d4:	2100      	movs	r1, #0
 80135d6:	f7ff fda8 	bl	801312a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	3338      	adds	r3, #56	; 0x38
 80135de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80135e2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80135e6:	4618      	mov	r0, r3
 80135e8:	f7ff fd37 	bl	801305a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	3338      	adds	r3, #56	; 0x38
 80135f0:	4921      	ldr	r1, [pc, #132]	; (8013678 <sync_fs+0xd8>)
 80135f2:	4618      	mov	r0, r3
 80135f4:	f7ff fd4c 	bl	8013090 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	3338      	adds	r3, #56	; 0x38
 80135fc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013600:	491e      	ldr	r1, [pc, #120]	; (801367c <sync_fs+0xdc>)
 8013602:	4618      	mov	r0, r3
 8013604:	f7ff fd44 	bl	8013090 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	3338      	adds	r3, #56	; 0x38
 801360c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	695b      	ldr	r3, [r3, #20]
 8013614:	4619      	mov	r1, r3
 8013616:	4610      	mov	r0, r2
 8013618:	f7ff fd3a 	bl	8013090 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	3338      	adds	r3, #56	; 0x38
 8013620:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	691b      	ldr	r3, [r3, #16]
 8013628:	4619      	mov	r1, r3
 801362a:	4610      	mov	r0, r2
 801362c:	f7ff fd30 	bl	8013090 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013634:	1c5a      	adds	r2, r3, #1
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	7858      	ldrb	r0, [r3, #1]
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013648:	2301      	movs	r3, #1
 801364a:	f7ff fc8d 	bl	8012f68 <disk_write>
			fs->fsi_flag = 0;
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	2200      	movs	r2, #0
 8013652:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	785b      	ldrb	r3, [r3, #1]
 8013658:	2200      	movs	r2, #0
 801365a:	2100      	movs	r1, #0
 801365c:	4618      	mov	r0, r3
 801365e:	f7ff fca3 	bl	8012fa8 <disk_ioctl>
 8013662:	4603      	mov	r3, r0
 8013664:	2b00      	cmp	r3, #0
 8013666:	d001      	beq.n	801366c <sync_fs+0xcc>
 8013668:	2301      	movs	r3, #1
 801366a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801366c:	7bfb      	ldrb	r3, [r7, #15]
}
 801366e:	4618      	mov	r0, r3
 8013670:	3710      	adds	r7, #16
 8013672:	46bd      	mov	sp, r7
 8013674:	bd80      	pop	{r7, pc}
 8013676:	bf00      	nop
 8013678:	41615252 	.word	0x41615252
 801367c:	61417272 	.word	0x61417272

08013680 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013680:	b480      	push	{r7}
 8013682:	b083      	sub	sp, #12
 8013684:	af00      	add	r7, sp, #0
 8013686:	6078      	str	r0, [r7, #4]
 8013688:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801368a:	683b      	ldr	r3, [r7, #0]
 801368c:	3b02      	subs	r3, #2
 801368e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	69db      	ldr	r3, [r3, #28]
 8013694:	3b02      	subs	r3, #2
 8013696:	683a      	ldr	r2, [r7, #0]
 8013698:	429a      	cmp	r2, r3
 801369a:	d301      	bcc.n	80136a0 <clust2sect+0x20>
 801369c:	2300      	movs	r3, #0
 801369e:	e008      	b.n	80136b2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	895b      	ldrh	r3, [r3, #10]
 80136a4:	461a      	mov	r2, r3
 80136a6:	683b      	ldr	r3, [r7, #0]
 80136a8:	fb03 f202 	mul.w	r2, r3, r2
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136b0:	4413      	add	r3, r2
}
 80136b2:	4618      	mov	r0, r3
 80136b4:	370c      	adds	r7, #12
 80136b6:	46bd      	mov	sp, r7
 80136b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136bc:	4770      	bx	lr

080136be <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80136be:	b580      	push	{r7, lr}
 80136c0:	b086      	sub	sp, #24
 80136c2:	af00      	add	r7, sp, #0
 80136c4:	6078      	str	r0, [r7, #4]
 80136c6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80136ce:	683b      	ldr	r3, [r7, #0]
 80136d0:	2b01      	cmp	r3, #1
 80136d2:	d904      	bls.n	80136de <get_fat+0x20>
 80136d4:	693b      	ldr	r3, [r7, #16]
 80136d6:	69db      	ldr	r3, [r3, #28]
 80136d8:	683a      	ldr	r2, [r7, #0]
 80136da:	429a      	cmp	r2, r3
 80136dc:	d302      	bcc.n	80136e4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80136de:	2301      	movs	r3, #1
 80136e0:	617b      	str	r3, [r7, #20]
 80136e2:	e0b7      	b.n	8013854 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80136e4:	f04f 33ff 	mov.w	r3, #4294967295
 80136e8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80136ea:	693b      	ldr	r3, [r7, #16]
 80136ec:	781b      	ldrb	r3, [r3, #0]
 80136ee:	2b02      	cmp	r3, #2
 80136f0:	d05a      	beq.n	80137a8 <get_fat+0xea>
 80136f2:	2b03      	cmp	r3, #3
 80136f4:	d07d      	beq.n	80137f2 <get_fat+0x134>
 80136f6:	2b01      	cmp	r3, #1
 80136f8:	f040 80a2 	bne.w	8013840 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80136fc:	683b      	ldr	r3, [r7, #0]
 80136fe:	60fb      	str	r3, [r7, #12]
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	085b      	lsrs	r3, r3, #1
 8013704:	68fa      	ldr	r2, [r7, #12]
 8013706:	4413      	add	r3, r2
 8013708:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801370a:	693b      	ldr	r3, [r7, #16]
 801370c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801370e:	693b      	ldr	r3, [r7, #16]
 8013710:	899b      	ldrh	r3, [r3, #12]
 8013712:	4619      	mov	r1, r3
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	fbb3 f3f1 	udiv	r3, r3, r1
 801371a:	4413      	add	r3, r2
 801371c:	4619      	mov	r1, r3
 801371e:	6938      	ldr	r0, [r7, #16]
 8013720:	f7ff ff10 	bl	8013544 <move_window>
 8013724:	4603      	mov	r3, r0
 8013726:	2b00      	cmp	r3, #0
 8013728:	f040 808d 	bne.w	8013846 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	1c5a      	adds	r2, r3, #1
 8013730:	60fa      	str	r2, [r7, #12]
 8013732:	693a      	ldr	r2, [r7, #16]
 8013734:	8992      	ldrh	r2, [r2, #12]
 8013736:	fbb3 f1f2 	udiv	r1, r3, r2
 801373a:	fb02 f201 	mul.w	r2, r2, r1
 801373e:	1a9b      	subs	r3, r3, r2
 8013740:	693a      	ldr	r2, [r7, #16]
 8013742:	4413      	add	r3, r2
 8013744:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013748:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801374a:	693b      	ldr	r3, [r7, #16]
 801374c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801374e:	693b      	ldr	r3, [r7, #16]
 8013750:	899b      	ldrh	r3, [r3, #12]
 8013752:	4619      	mov	r1, r3
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	fbb3 f3f1 	udiv	r3, r3, r1
 801375a:	4413      	add	r3, r2
 801375c:	4619      	mov	r1, r3
 801375e:	6938      	ldr	r0, [r7, #16]
 8013760:	f7ff fef0 	bl	8013544 <move_window>
 8013764:	4603      	mov	r3, r0
 8013766:	2b00      	cmp	r3, #0
 8013768:	d16f      	bne.n	801384a <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	899b      	ldrh	r3, [r3, #12]
 801376e:	461a      	mov	r2, r3
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	fbb3 f1f2 	udiv	r1, r3, r2
 8013776:	fb02 f201 	mul.w	r2, r2, r1
 801377a:	1a9b      	subs	r3, r3, r2
 801377c:	693a      	ldr	r2, [r7, #16]
 801377e:	4413      	add	r3, r2
 8013780:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013784:	021b      	lsls	r3, r3, #8
 8013786:	461a      	mov	r2, r3
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	4313      	orrs	r3, r2
 801378c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801378e:	683b      	ldr	r3, [r7, #0]
 8013790:	f003 0301 	and.w	r3, r3, #1
 8013794:	2b00      	cmp	r3, #0
 8013796:	d002      	beq.n	801379e <get_fat+0xe0>
 8013798:	68bb      	ldr	r3, [r7, #8]
 801379a:	091b      	lsrs	r3, r3, #4
 801379c:	e002      	b.n	80137a4 <get_fat+0xe6>
 801379e:	68bb      	ldr	r3, [r7, #8]
 80137a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80137a4:	617b      	str	r3, [r7, #20]
			break;
 80137a6:	e055      	b.n	8013854 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80137a8:	693b      	ldr	r3, [r7, #16]
 80137aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80137ac:	693b      	ldr	r3, [r7, #16]
 80137ae:	899b      	ldrh	r3, [r3, #12]
 80137b0:	085b      	lsrs	r3, r3, #1
 80137b2:	b29b      	uxth	r3, r3
 80137b4:	4619      	mov	r1, r3
 80137b6:	683b      	ldr	r3, [r7, #0]
 80137b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80137bc:	4413      	add	r3, r2
 80137be:	4619      	mov	r1, r3
 80137c0:	6938      	ldr	r0, [r7, #16]
 80137c2:	f7ff febf 	bl	8013544 <move_window>
 80137c6:	4603      	mov	r3, r0
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d140      	bne.n	801384e <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80137cc:	693b      	ldr	r3, [r7, #16]
 80137ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80137d2:	683b      	ldr	r3, [r7, #0]
 80137d4:	005b      	lsls	r3, r3, #1
 80137d6:	693a      	ldr	r2, [r7, #16]
 80137d8:	8992      	ldrh	r2, [r2, #12]
 80137da:	fbb3 f0f2 	udiv	r0, r3, r2
 80137de:	fb02 f200 	mul.w	r2, r2, r0
 80137e2:	1a9b      	subs	r3, r3, r2
 80137e4:	440b      	add	r3, r1
 80137e6:	4618      	mov	r0, r3
 80137e8:	f7ff fbfc 	bl	8012fe4 <ld_word>
 80137ec:	4603      	mov	r3, r0
 80137ee:	617b      	str	r3, [r7, #20]
			break;
 80137f0:	e030      	b.n	8013854 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80137f2:	693b      	ldr	r3, [r7, #16]
 80137f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80137f6:	693b      	ldr	r3, [r7, #16]
 80137f8:	899b      	ldrh	r3, [r3, #12]
 80137fa:	089b      	lsrs	r3, r3, #2
 80137fc:	b29b      	uxth	r3, r3
 80137fe:	4619      	mov	r1, r3
 8013800:	683b      	ldr	r3, [r7, #0]
 8013802:	fbb3 f3f1 	udiv	r3, r3, r1
 8013806:	4413      	add	r3, r2
 8013808:	4619      	mov	r1, r3
 801380a:	6938      	ldr	r0, [r7, #16]
 801380c:	f7ff fe9a 	bl	8013544 <move_window>
 8013810:	4603      	mov	r3, r0
 8013812:	2b00      	cmp	r3, #0
 8013814:	d11d      	bne.n	8013852 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013816:	693b      	ldr	r3, [r7, #16]
 8013818:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801381c:	683b      	ldr	r3, [r7, #0]
 801381e:	009b      	lsls	r3, r3, #2
 8013820:	693a      	ldr	r2, [r7, #16]
 8013822:	8992      	ldrh	r2, [r2, #12]
 8013824:	fbb3 f0f2 	udiv	r0, r3, r2
 8013828:	fb02 f200 	mul.w	r2, r2, r0
 801382c:	1a9b      	subs	r3, r3, r2
 801382e:	440b      	add	r3, r1
 8013830:	4618      	mov	r0, r3
 8013832:	f7ff fbef 	bl	8013014 <ld_dword>
 8013836:	4603      	mov	r3, r0
 8013838:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801383c:	617b      	str	r3, [r7, #20]
			break;
 801383e:	e009      	b.n	8013854 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013840:	2301      	movs	r3, #1
 8013842:	617b      	str	r3, [r7, #20]
 8013844:	e006      	b.n	8013854 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013846:	bf00      	nop
 8013848:	e004      	b.n	8013854 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801384a:	bf00      	nop
 801384c:	e002      	b.n	8013854 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801384e:	bf00      	nop
 8013850:	e000      	b.n	8013854 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013852:	bf00      	nop
		}
	}

	return val;
 8013854:	697b      	ldr	r3, [r7, #20]
}
 8013856:	4618      	mov	r0, r3
 8013858:	3718      	adds	r7, #24
 801385a:	46bd      	mov	sp, r7
 801385c:	bd80      	pop	{r7, pc}

0801385e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801385e:	b590      	push	{r4, r7, lr}
 8013860:	b089      	sub	sp, #36	; 0x24
 8013862:	af00      	add	r7, sp, #0
 8013864:	60f8      	str	r0, [r7, #12]
 8013866:	60b9      	str	r1, [r7, #8]
 8013868:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801386a:	2302      	movs	r3, #2
 801386c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801386e:	68bb      	ldr	r3, [r7, #8]
 8013870:	2b01      	cmp	r3, #1
 8013872:	f240 8106 	bls.w	8013a82 <put_fat+0x224>
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	69db      	ldr	r3, [r3, #28]
 801387a:	68ba      	ldr	r2, [r7, #8]
 801387c:	429a      	cmp	r2, r3
 801387e:	f080 8100 	bcs.w	8013a82 <put_fat+0x224>
		switch (fs->fs_type) {
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	781b      	ldrb	r3, [r3, #0]
 8013886:	2b02      	cmp	r3, #2
 8013888:	f000 8088 	beq.w	801399c <put_fat+0x13e>
 801388c:	2b03      	cmp	r3, #3
 801388e:	f000 80b0 	beq.w	80139f2 <put_fat+0x194>
 8013892:	2b01      	cmp	r3, #1
 8013894:	f040 80f5 	bne.w	8013a82 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013898:	68bb      	ldr	r3, [r7, #8]
 801389a:	61bb      	str	r3, [r7, #24]
 801389c:	69bb      	ldr	r3, [r7, #24]
 801389e:	085b      	lsrs	r3, r3, #1
 80138a0:	69ba      	ldr	r2, [r7, #24]
 80138a2:	4413      	add	r3, r2
 80138a4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	899b      	ldrh	r3, [r3, #12]
 80138ae:	4619      	mov	r1, r3
 80138b0:	69bb      	ldr	r3, [r7, #24]
 80138b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80138b6:	4413      	add	r3, r2
 80138b8:	4619      	mov	r1, r3
 80138ba:	68f8      	ldr	r0, [r7, #12]
 80138bc:	f7ff fe42 	bl	8013544 <move_window>
 80138c0:	4603      	mov	r3, r0
 80138c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80138c4:	7ffb      	ldrb	r3, [r7, #31]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	f040 80d4 	bne.w	8013a74 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80138d2:	69bb      	ldr	r3, [r7, #24]
 80138d4:	1c5a      	adds	r2, r3, #1
 80138d6:	61ba      	str	r2, [r7, #24]
 80138d8:	68fa      	ldr	r2, [r7, #12]
 80138da:	8992      	ldrh	r2, [r2, #12]
 80138dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80138e0:	fb02 f200 	mul.w	r2, r2, r0
 80138e4:	1a9b      	subs	r3, r3, r2
 80138e6:	440b      	add	r3, r1
 80138e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80138ea:	68bb      	ldr	r3, [r7, #8]
 80138ec:	f003 0301 	and.w	r3, r3, #1
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d00d      	beq.n	8013910 <put_fat+0xb2>
 80138f4:	697b      	ldr	r3, [r7, #20]
 80138f6:	781b      	ldrb	r3, [r3, #0]
 80138f8:	b25b      	sxtb	r3, r3
 80138fa:	f003 030f 	and.w	r3, r3, #15
 80138fe:	b25a      	sxtb	r2, r3
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	b2db      	uxtb	r3, r3
 8013904:	011b      	lsls	r3, r3, #4
 8013906:	b25b      	sxtb	r3, r3
 8013908:	4313      	orrs	r3, r2
 801390a:	b25b      	sxtb	r3, r3
 801390c:	b2db      	uxtb	r3, r3
 801390e:	e001      	b.n	8013914 <put_fat+0xb6>
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	b2db      	uxtb	r3, r3
 8013914:	697a      	ldr	r2, [r7, #20]
 8013916:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	2201      	movs	r2, #1
 801391c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	899b      	ldrh	r3, [r3, #12]
 8013926:	4619      	mov	r1, r3
 8013928:	69bb      	ldr	r3, [r7, #24]
 801392a:	fbb3 f3f1 	udiv	r3, r3, r1
 801392e:	4413      	add	r3, r2
 8013930:	4619      	mov	r1, r3
 8013932:	68f8      	ldr	r0, [r7, #12]
 8013934:	f7ff fe06 	bl	8013544 <move_window>
 8013938:	4603      	mov	r3, r0
 801393a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801393c:	7ffb      	ldrb	r3, [r7, #31]
 801393e:	2b00      	cmp	r3, #0
 8013940:	f040 809a 	bne.w	8013a78 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	899b      	ldrh	r3, [r3, #12]
 801394e:	461a      	mov	r2, r3
 8013950:	69bb      	ldr	r3, [r7, #24]
 8013952:	fbb3 f0f2 	udiv	r0, r3, r2
 8013956:	fb02 f200 	mul.w	r2, r2, r0
 801395a:	1a9b      	subs	r3, r3, r2
 801395c:	440b      	add	r3, r1
 801395e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013960:	68bb      	ldr	r3, [r7, #8]
 8013962:	f003 0301 	and.w	r3, r3, #1
 8013966:	2b00      	cmp	r3, #0
 8013968:	d003      	beq.n	8013972 <put_fat+0x114>
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	091b      	lsrs	r3, r3, #4
 801396e:	b2db      	uxtb	r3, r3
 8013970:	e00e      	b.n	8013990 <put_fat+0x132>
 8013972:	697b      	ldr	r3, [r7, #20]
 8013974:	781b      	ldrb	r3, [r3, #0]
 8013976:	b25b      	sxtb	r3, r3
 8013978:	f023 030f 	bic.w	r3, r3, #15
 801397c:	b25a      	sxtb	r2, r3
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	0a1b      	lsrs	r3, r3, #8
 8013982:	b25b      	sxtb	r3, r3
 8013984:	f003 030f 	and.w	r3, r3, #15
 8013988:	b25b      	sxtb	r3, r3
 801398a:	4313      	orrs	r3, r2
 801398c:	b25b      	sxtb	r3, r3
 801398e:	b2db      	uxtb	r3, r3
 8013990:	697a      	ldr	r2, [r7, #20]
 8013992:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	2201      	movs	r2, #1
 8013998:	70da      	strb	r2, [r3, #3]
			break;
 801399a:	e072      	b.n	8013a82 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	899b      	ldrh	r3, [r3, #12]
 80139a4:	085b      	lsrs	r3, r3, #1
 80139a6:	b29b      	uxth	r3, r3
 80139a8:	4619      	mov	r1, r3
 80139aa:	68bb      	ldr	r3, [r7, #8]
 80139ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80139b0:	4413      	add	r3, r2
 80139b2:	4619      	mov	r1, r3
 80139b4:	68f8      	ldr	r0, [r7, #12]
 80139b6:	f7ff fdc5 	bl	8013544 <move_window>
 80139ba:	4603      	mov	r3, r0
 80139bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80139be:	7ffb      	ldrb	r3, [r7, #31]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d15b      	bne.n	8013a7c <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80139ca:	68bb      	ldr	r3, [r7, #8]
 80139cc:	005b      	lsls	r3, r3, #1
 80139ce:	68fa      	ldr	r2, [r7, #12]
 80139d0:	8992      	ldrh	r2, [r2, #12]
 80139d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80139d6:	fb02 f200 	mul.w	r2, r2, r0
 80139da:	1a9b      	subs	r3, r3, r2
 80139dc:	440b      	add	r3, r1
 80139de:	687a      	ldr	r2, [r7, #4]
 80139e0:	b292      	uxth	r2, r2
 80139e2:	4611      	mov	r1, r2
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7ff fb38 	bl	801305a <st_word>
			fs->wflag = 1;
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	2201      	movs	r2, #1
 80139ee:	70da      	strb	r2, [r3, #3]
			break;
 80139f0:	e047      	b.n	8013a82 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	899b      	ldrh	r3, [r3, #12]
 80139fa:	089b      	lsrs	r3, r3, #2
 80139fc:	b29b      	uxth	r3, r3
 80139fe:	4619      	mov	r1, r3
 8013a00:	68bb      	ldr	r3, [r7, #8]
 8013a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8013a06:	4413      	add	r3, r2
 8013a08:	4619      	mov	r1, r3
 8013a0a:	68f8      	ldr	r0, [r7, #12]
 8013a0c:	f7ff fd9a 	bl	8013544 <move_window>
 8013a10:	4603      	mov	r3, r0
 8013a12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013a14:	7ffb      	ldrb	r3, [r7, #31]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d132      	bne.n	8013a80 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013a26:	68bb      	ldr	r3, [r7, #8]
 8013a28:	009b      	lsls	r3, r3, #2
 8013a2a:	68fa      	ldr	r2, [r7, #12]
 8013a2c:	8992      	ldrh	r2, [r2, #12]
 8013a2e:	fbb3 f0f2 	udiv	r0, r3, r2
 8013a32:	fb02 f200 	mul.w	r2, r2, r0
 8013a36:	1a9b      	subs	r3, r3, r2
 8013a38:	440b      	add	r3, r1
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	f7ff faea 	bl	8013014 <ld_dword>
 8013a40:	4603      	mov	r3, r0
 8013a42:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013a46:	4323      	orrs	r3, r4
 8013a48:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013a50:	68bb      	ldr	r3, [r7, #8]
 8013a52:	009b      	lsls	r3, r3, #2
 8013a54:	68fa      	ldr	r2, [r7, #12]
 8013a56:	8992      	ldrh	r2, [r2, #12]
 8013a58:	fbb3 f0f2 	udiv	r0, r3, r2
 8013a5c:	fb02 f200 	mul.w	r2, r2, r0
 8013a60:	1a9b      	subs	r3, r3, r2
 8013a62:	440b      	add	r3, r1
 8013a64:	6879      	ldr	r1, [r7, #4]
 8013a66:	4618      	mov	r0, r3
 8013a68:	f7ff fb12 	bl	8013090 <st_dword>
			fs->wflag = 1;
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	2201      	movs	r2, #1
 8013a70:	70da      	strb	r2, [r3, #3]
			break;
 8013a72:	e006      	b.n	8013a82 <put_fat+0x224>
			if (res != FR_OK) break;
 8013a74:	bf00      	nop
 8013a76:	e004      	b.n	8013a82 <put_fat+0x224>
			if (res != FR_OK) break;
 8013a78:	bf00      	nop
 8013a7a:	e002      	b.n	8013a82 <put_fat+0x224>
			if (res != FR_OK) break;
 8013a7c:	bf00      	nop
 8013a7e:	e000      	b.n	8013a82 <put_fat+0x224>
			if (res != FR_OK) break;
 8013a80:	bf00      	nop
		}
	}
	return res;
 8013a82:	7ffb      	ldrb	r3, [r7, #31]
}
 8013a84:	4618      	mov	r0, r3
 8013a86:	3724      	adds	r7, #36	; 0x24
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	bd90      	pop	{r4, r7, pc}

08013a8c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b088      	sub	sp, #32
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	60f8      	str	r0, [r7, #12]
 8013a94:	60b9      	str	r1, [r7, #8]
 8013a96:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8013a98:	2300      	movs	r3, #0
 8013a9a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013aa2:	68bb      	ldr	r3, [r7, #8]
 8013aa4:	2b01      	cmp	r3, #1
 8013aa6:	d904      	bls.n	8013ab2 <remove_chain+0x26>
 8013aa8:	69bb      	ldr	r3, [r7, #24]
 8013aaa:	69db      	ldr	r3, [r3, #28]
 8013aac:	68ba      	ldr	r2, [r7, #8]
 8013aae:	429a      	cmp	r2, r3
 8013ab0:	d301      	bcc.n	8013ab6 <remove_chain+0x2a>
 8013ab2:	2302      	movs	r3, #2
 8013ab4:	e04b      	b.n	8013b4e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d00c      	beq.n	8013ad6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8013abc:	f04f 32ff 	mov.w	r2, #4294967295
 8013ac0:	6879      	ldr	r1, [r7, #4]
 8013ac2:	69b8      	ldr	r0, [r7, #24]
 8013ac4:	f7ff fecb 	bl	801385e <put_fat>
 8013ac8:	4603      	mov	r3, r0
 8013aca:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013acc:	7ffb      	ldrb	r3, [r7, #31]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d001      	beq.n	8013ad6 <remove_chain+0x4a>
 8013ad2:	7ffb      	ldrb	r3, [r7, #31]
 8013ad4:	e03b      	b.n	8013b4e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013ad6:	68b9      	ldr	r1, [r7, #8]
 8013ad8:	68f8      	ldr	r0, [r7, #12]
 8013ada:	f7ff fdf0 	bl	80136be <get_fat>
 8013ade:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013ae0:	697b      	ldr	r3, [r7, #20]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d031      	beq.n	8013b4a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013ae6:	697b      	ldr	r3, [r7, #20]
 8013ae8:	2b01      	cmp	r3, #1
 8013aea:	d101      	bne.n	8013af0 <remove_chain+0x64>
 8013aec:	2302      	movs	r3, #2
 8013aee:	e02e      	b.n	8013b4e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013af0:	697b      	ldr	r3, [r7, #20]
 8013af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013af6:	d101      	bne.n	8013afc <remove_chain+0x70>
 8013af8:	2301      	movs	r3, #1
 8013afa:	e028      	b.n	8013b4e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013afc:	2200      	movs	r2, #0
 8013afe:	68b9      	ldr	r1, [r7, #8]
 8013b00:	69b8      	ldr	r0, [r7, #24]
 8013b02:	f7ff feac 	bl	801385e <put_fat>
 8013b06:	4603      	mov	r3, r0
 8013b08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8013b0a:	7ffb      	ldrb	r3, [r7, #31]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d001      	beq.n	8013b14 <remove_chain+0x88>
 8013b10:	7ffb      	ldrb	r3, [r7, #31]
 8013b12:	e01c      	b.n	8013b4e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013b14:	69bb      	ldr	r3, [r7, #24]
 8013b16:	695a      	ldr	r2, [r3, #20]
 8013b18:	69bb      	ldr	r3, [r7, #24]
 8013b1a:	69db      	ldr	r3, [r3, #28]
 8013b1c:	3b02      	subs	r3, #2
 8013b1e:	429a      	cmp	r2, r3
 8013b20:	d20b      	bcs.n	8013b3a <remove_chain+0xae>
			fs->free_clst++;
 8013b22:	69bb      	ldr	r3, [r7, #24]
 8013b24:	695b      	ldr	r3, [r3, #20]
 8013b26:	1c5a      	adds	r2, r3, #1
 8013b28:	69bb      	ldr	r3, [r7, #24]
 8013b2a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8013b2c:	69bb      	ldr	r3, [r7, #24]
 8013b2e:	791b      	ldrb	r3, [r3, #4]
 8013b30:	f043 0301 	orr.w	r3, r3, #1
 8013b34:	b2da      	uxtb	r2, r3
 8013b36:	69bb      	ldr	r3, [r7, #24]
 8013b38:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013b3a:	697b      	ldr	r3, [r7, #20]
 8013b3c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013b3e:	69bb      	ldr	r3, [r7, #24]
 8013b40:	69db      	ldr	r3, [r3, #28]
 8013b42:	68ba      	ldr	r2, [r7, #8]
 8013b44:	429a      	cmp	r2, r3
 8013b46:	d3c6      	bcc.n	8013ad6 <remove_chain+0x4a>
 8013b48:	e000      	b.n	8013b4c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013b4a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8013b4c:	2300      	movs	r3, #0
}
 8013b4e:	4618      	mov	r0, r3
 8013b50:	3720      	adds	r7, #32
 8013b52:	46bd      	mov	sp, r7
 8013b54:	bd80      	pop	{r7, pc}

08013b56 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013b56:	b580      	push	{r7, lr}
 8013b58:	b088      	sub	sp, #32
 8013b5a:	af00      	add	r7, sp, #0
 8013b5c:	6078      	str	r0, [r7, #4]
 8013b5e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013b66:	683b      	ldr	r3, [r7, #0]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d10d      	bne.n	8013b88 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013b6c:	693b      	ldr	r3, [r7, #16]
 8013b6e:	691b      	ldr	r3, [r3, #16]
 8013b70:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013b72:	69bb      	ldr	r3, [r7, #24]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d004      	beq.n	8013b82 <create_chain+0x2c>
 8013b78:	693b      	ldr	r3, [r7, #16]
 8013b7a:	69db      	ldr	r3, [r3, #28]
 8013b7c:	69ba      	ldr	r2, [r7, #24]
 8013b7e:	429a      	cmp	r2, r3
 8013b80:	d31b      	bcc.n	8013bba <create_chain+0x64>
 8013b82:	2301      	movs	r3, #1
 8013b84:	61bb      	str	r3, [r7, #24]
 8013b86:	e018      	b.n	8013bba <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013b88:	6839      	ldr	r1, [r7, #0]
 8013b8a:	6878      	ldr	r0, [r7, #4]
 8013b8c:	f7ff fd97 	bl	80136be <get_fat>
 8013b90:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	2b01      	cmp	r3, #1
 8013b96:	d801      	bhi.n	8013b9c <create_chain+0x46>
 8013b98:	2301      	movs	r3, #1
 8013b9a:	e070      	b.n	8013c7e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ba2:	d101      	bne.n	8013ba8 <create_chain+0x52>
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	e06a      	b.n	8013c7e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013ba8:	693b      	ldr	r3, [r7, #16]
 8013baa:	69db      	ldr	r3, [r3, #28]
 8013bac:	68fa      	ldr	r2, [r7, #12]
 8013bae:	429a      	cmp	r2, r3
 8013bb0:	d201      	bcs.n	8013bb6 <create_chain+0x60>
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	e063      	b.n	8013c7e <create_chain+0x128>
		scl = clst;
 8013bb6:	683b      	ldr	r3, [r7, #0]
 8013bb8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013bba:	69bb      	ldr	r3, [r7, #24]
 8013bbc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013bbe:	69fb      	ldr	r3, [r7, #28]
 8013bc0:	3301      	adds	r3, #1
 8013bc2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013bc4:	693b      	ldr	r3, [r7, #16]
 8013bc6:	69db      	ldr	r3, [r3, #28]
 8013bc8:	69fa      	ldr	r2, [r7, #28]
 8013bca:	429a      	cmp	r2, r3
 8013bcc:	d307      	bcc.n	8013bde <create_chain+0x88>
				ncl = 2;
 8013bce:	2302      	movs	r3, #2
 8013bd0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013bd2:	69fa      	ldr	r2, [r7, #28]
 8013bd4:	69bb      	ldr	r3, [r7, #24]
 8013bd6:	429a      	cmp	r2, r3
 8013bd8:	d901      	bls.n	8013bde <create_chain+0x88>
 8013bda:	2300      	movs	r3, #0
 8013bdc:	e04f      	b.n	8013c7e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013bde:	69f9      	ldr	r1, [r7, #28]
 8013be0:	6878      	ldr	r0, [r7, #4]
 8013be2:	f7ff fd6c 	bl	80136be <get_fat>
 8013be6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d00e      	beq.n	8013c0c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	2b01      	cmp	r3, #1
 8013bf2:	d003      	beq.n	8013bfc <create_chain+0xa6>
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bfa:	d101      	bne.n	8013c00 <create_chain+0xaa>
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	e03e      	b.n	8013c7e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013c00:	69fa      	ldr	r2, [r7, #28]
 8013c02:	69bb      	ldr	r3, [r7, #24]
 8013c04:	429a      	cmp	r2, r3
 8013c06:	d1da      	bne.n	8013bbe <create_chain+0x68>
 8013c08:	2300      	movs	r3, #0
 8013c0a:	e038      	b.n	8013c7e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013c0c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8013c12:	69f9      	ldr	r1, [r7, #28]
 8013c14:	6938      	ldr	r0, [r7, #16]
 8013c16:	f7ff fe22 	bl	801385e <put_fat>
 8013c1a:	4603      	mov	r3, r0
 8013c1c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013c1e:	7dfb      	ldrb	r3, [r7, #23]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d109      	bne.n	8013c38 <create_chain+0xe2>
 8013c24:	683b      	ldr	r3, [r7, #0]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d006      	beq.n	8013c38 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013c2a:	69fa      	ldr	r2, [r7, #28]
 8013c2c:	6839      	ldr	r1, [r7, #0]
 8013c2e:	6938      	ldr	r0, [r7, #16]
 8013c30:	f7ff fe15 	bl	801385e <put_fat>
 8013c34:	4603      	mov	r3, r0
 8013c36:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013c38:	7dfb      	ldrb	r3, [r7, #23]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d116      	bne.n	8013c6c <create_chain+0x116>
		fs->last_clst = ncl;
 8013c3e:	693b      	ldr	r3, [r7, #16]
 8013c40:	69fa      	ldr	r2, [r7, #28]
 8013c42:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013c44:	693b      	ldr	r3, [r7, #16]
 8013c46:	695a      	ldr	r2, [r3, #20]
 8013c48:	693b      	ldr	r3, [r7, #16]
 8013c4a:	69db      	ldr	r3, [r3, #28]
 8013c4c:	3b02      	subs	r3, #2
 8013c4e:	429a      	cmp	r2, r3
 8013c50:	d804      	bhi.n	8013c5c <create_chain+0x106>
 8013c52:	693b      	ldr	r3, [r7, #16]
 8013c54:	695b      	ldr	r3, [r3, #20]
 8013c56:	1e5a      	subs	r2, r3, #1
 8013c58:	693b      	ldr	r3, [r7, #16]
 8013c5a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8013c5c:	693b      	ldr	r3, [r7, #16]
 8013c5e:	791b      	ldrb	r3, [r3, #4]
 8013c60:	f043 0301 	orr.w	r3, r3, #1
 8013c64:	b2da      	uxtb	r2, r3
 8013c66:	693b      	ldr	r3, [r7, #16]
 8013c68:	711a      	strb	r2, [r3, #4]
 8013c6a:	e007      	b.n	8013c7c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8013c6c:	7dfb      	ldrb	r3, [r7, #23]
 8013c6e:	2b01      	cmp	r3, #1
 8013c70:	d102      	bne.n	8013c78 <create_chain+0x122>
 8013c72:	f04f 33ff 	mov.w	r3, #4294967295
 8013c76:	e000      	b.n	8013c7a <create_chain+0x124>
 8013c78:	2301      	movs	r3, #1
 8013c7a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013c7c:	69fb      	ldr	r3, [r7, #28]
}
 8013c7e:	4618      	mov	r0, r3
 8013c80:	3720      	adds	r7, #32
 8013c82:	46bd      	mov	sp, r7
 8013c84:	bd80      	pop	{r7, pc}

08013c86 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013c86:	b480      	push	{r7}
 8013c88:	b087      	sub	sp, #28
 8013c8a:	af00      	add	r7, sp, #0
 8013c8c:	6078      	str	r0, [r7, #4]
 8013c8e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c9a:	3304      	adds	r3, #4
 8013c9c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	899b      	ldrh	r3, [r3, #12]
 8013ca2:	461a      	mov	r2, r3
 8013ca4:	683b      	ldr	r3, [r7, #0]
 8013ca6:	fbb3 f3f2 	udiv	r3, r3, r2
 8013caa:	68fa      	ldr	r2, [r7, #12]
 8013cac:	8952      	ldrh	r2, [r2, #10]
 8013cae:	fbb3 f3f2 	udiv	r3, r3, r2
 8013cb2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013cb4:	693b      	ldr	r3, [r7, #16]
 8013cb6:	1d1a      	adds	r2, r3, #4
 8013cb8:	613a      	str	r2, [r7, #16]
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013cbe:	68bb      	ldr	r3, [r7, #8]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d101      	bne.n	8013cc8 <clmt_clust+0x42>
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	e010      	b.n	8013cea <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8013cc8:	697a      	ldr	r2, [r7, #20]
 8013cca:	68bb      	ldr	r3, [r7, #8]
 8013ccc:	429a      	cmp	r2, r3
 8013cce:	d307      	bcc.n	8013ce0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8013cd0:	697a      	ldr	r2, [r7, #20]
 8013cd2:	68bb      	ldr	r3, [r7, #8]
 8013cd4:	1ad3      	subs	r3, r2, r3
 8013cd6:	617b      	str	r3, [r7, #20]
 8013cd8:	693b      	ldr	r3, [r7, #16]
 8013cda:	3304      	adds	r3, #4
 8013cdc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013cde:	e7e9      	b.n	8013cb4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8013ce0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013ce2:	693b      	ldr	r3, [r7, #16]
 8013ce4:	681a      	ldr	r2, [r3, #0]
 8013ce6:	697b      	ldr	r3, [r7, #20]
 8013ce8:	4413      	add	r3, r2
}
 8013cea:	4618      	mov	r0, r3
 8013cec:	371c      	adds	r7, #28
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf4:	4770      	bx	lr

08013cf6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013cf6:	b580      	push	{r7, lr}
 8013cf8:	b086      	sub	sp, #24
 8013cfa:	af00      	add	r7, sp, #0
 8013cfc:	6078      	str	r0, [r7, #4]
 8013cfe:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013d06:	683b      	ldr	r3, [r7, #0]
 8013d08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013d0c:	d204      	bcs.n	8013d18 <dir_sdi+0x22>
 8013d0e:	683b      	ldr	r3, [r7, #0]
 8013d10:	f003 031f 	and.w	r3, r3, #31
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d001      	beq.n	8013d1c <dir_sdi+0x26>
		return FR_INT_ERR;
 8013d18:	2302      	movs	r3, #2
 8013d1a:	e071      	b.n	8013e00 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	683a      	ldr	r2, [r7, #0]
 8013d20:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	689b      	ldr	r3, [r3, #8]
 8013d26:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013d28:	697b      	ldr	r3, [r7, #20]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d106      	bne.n	8013d3c <dir_sdi+0x46>
 8013d2e:	693b      	ldr	r3, [r7, #16]
 8013d30:	781b      	ldrb	r3, [r3, #0]
 8013d32:	2b02      	cmp	r3, #2
 8013d34:	d902      	bls.n	8013d3c <dir_sdi+0x46>
		clst = fs->dirbase;
 8013d36:	693b      	ldr	r3, [r7, #16]
 8013d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d3a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013d3c:	697b      	ldr	r3, [r7, #20]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d10c      	bne.n	8013d5c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013d42:	683b      	ldr	r3, [r7, #0]
 8013d44:	095b      	lsrs	r3, r3, #5
 8013d46:	693a      	ldr	r2, [r7, #16]
 8013d48:	8912      	ldrh	r2, [r2, #8]
 8013d4a:	4293      	cmp	r3, r2
 8013d4c:	d301      	bcc.n	8013d52 <dir_sdi+0x5c>
 8013d4e:	2302      	movs	r3, #2
 8013d50:	e056      	b.n	8013e00 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8013d52:	693b      	ldr	r3, [r7, #16]
 8013d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	61da      	str	r2, [r3, #28]
 8013d5a:	e02d      	b.n	8013db8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013d5c:	693b      	ldr	r3, [r7, #16]
 8013d5e:	895b      	ldrh	r3, [r3, #10]
 8013d60:	461a      	mov	r2, r3
 8013d62:	693b      	ldr	r3, [r7, #16]
 8013d64:	899b      	ldrh	r3, [r3, #12]
 8013d66:	fb03 f302 	mul.w	r3, r3, r2
 8013d6a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013d6c:	e019      	b.n	8013da2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	6979      	ldr	r1, [r7, #20]
 8013d72:	4618      	mov	r0, r3
 8013d74:	f7ff fca3 	bl	80136be <get_fat>
 8013d78:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d80:	d101      	bne.n	8013d86 <dir_sdi+0x90>
 8013d82:	2301      	movs	r3, #1
 8013d84:	e03c      	b.n	8013e00 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013d86:	697b      	ldr	r3, [r7, #20]
 8013d88:	2b01      	cmp	r3, #1
 8013d8a:	d904      	bls.n	8013d96 <dir_sdi+0xa0>
 8013d8c:	693b      	ldr	r3, [r7, #16]
 8013d8e:	69db      	ldr	r3, [r3, #28]
 8013d90:	697a      	ldr	r2, [r7, #20]
 8013d92:	429a      	cmp	r2, r3
 8013d94:	d301      	bcc.n	8013d9a <dir_sdi+0xa4>
 8013d96:	2302      	movs	r3, #2
 8013d98:	e032      	b.n	8013e00 <dir_sdi+0x10a>
			ofs -= csz;
 8013d9a:	683a      	ldr	r2, [r7, #0]
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	1ad3      	subs	r3, r2, r3
 8013da0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013da2:	683a      	ldr	r2, [r7, #0]
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	429a      	cmp	r2, r3
 8013da8:	d2e1      	bcs.n	8013d6e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8013daa:	6979      	ldr	r1, [r7, #20]
 8013dac:	6938      	ldr	r0, [r7, #16]
 8013dae:	f7ff fc67 	bl	8013680 <clust2sect>
 8013db2:	4602      	mov	r2, r0
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	697a      	ldr	r2, [r7, #20]
 8013dbc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	69db      	ldr	r3, [r3, #28]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d101      	bne.n	8013dca <dir_sdi+0xd4>
 8013dc6:	2302      	movs	r3, #2
 8013dc8:	e01a      	b.n	8013e00 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	69da      	ldr	r2, [r3, #28]
 8013dce:	693b      	ldr	r3, [r7, #16]
 8013dd0:	899b      	ldrh	r3, [r3, #12]
 8013dd2:	4619      	mov	r1, r3
 8013dd4:	683b      	ldr	r3, [r7, #0]
 8013dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8013dda:	441a      	add	r2, r3
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013de0:	693b      	ldr	r3, [r7, #16]
 8013de2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013de6:	693b      	ldr	r3, [r7, #16]
 8013de8:	899b      	ldrh	r3, [r3, #12]
 8013dea:	461a      	mov	r2, r3
 8013dec:	683b      	ldr	r3, [r7, #0]
 8013dee:	fbb3 f0f2 	udiv	r0, r3, r2
 8013df2:	fb02 f200 	mul.w	r2, r2, r0
 8013df6:	1a9b      	subs	r3, r3, r2
 8013df8:	18ca      	adds	r2, r1, r3
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013dfe:	2300      	movs	r3, #0
}
 8013e00:	4618      	mov	r0, r3
 8013e02:	3718      	adds	r7, #24
 8013e04:	46bd      	mov	sp, r7
 8013e06:	bd80      	pop	{r7, pc}

08013e08 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b086      	sub	sp, #24
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
 8013e10:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	695b      	ldr	r3, [r3, #20]
 8013e1c:	3320      	adds	r3, #32
 8013e1e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	69db      	ldr	r3, [r3, #28]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d003      	beq.n	8013e30 <dir_next+0x28>
 8013e28:	68bb      	ldr	r3, [r7, #8]
 8013e2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013e2e:	d301      	bcc.n	8013e34 <dir_next+0x2c>
 8013e30:	2304      	movs	r3, #4
 8013e32:	e0bb      	b.n	8013fac <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	899b      	ldrh	r3, [r3, #12]
 8013e38:	461a      	mov	r2, r3
 8013e3a:	68bb      	ldr	r3, [r7, #8]
 8013e3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013e40:	fb02 f201 	mul.w	r2, r2, r1
 8013e44:	1a9b      	subs	r3, r3, r2
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	f040 809d 	bne.w	8013f86 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	69db      	ldr	r3, [r3, #28]
 8013e50:	1c5a      	adds	r2, r3, #1
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	699b      	ldr	r3, [r3, #24]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d10b      	bne.n	8013e76 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013e5e:	68bb      	ldr	r3, [r7, #8]
 8013e60:	095b      	lsrs	r3, r3, #5
 8013e62:	68fa      	ldr	r2, [r7, #12]
 8013e64:	8912      	ldrh	r2, [r2, #8]
 8013e66:	4293      	cmp	r3, r2
 8013e68:	f0c0 808d 	bcc.w	8013f86 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	2200      	movs	r2, #0
 8013e70:	61da      	str	r2, [r3, #28]
 8013e72:	2304      	movs	r3, #4
 8013e74:	e09a      	b.n	8013fac <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	899b      	ldrh	r3, [r3, #12]
 8013e7a:	461a      	mov	r2, r3
 8013e7c:	68bb      	ldr	r3, [r7, #8]
 8013e7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e82:	68fa      	ldr	r2, [r7, #12]
 8013e84:	8952      	ldrh	r2, [r2, #10]
 8013e86:	3a01      	subs	r2, #1
 8013e88:	4013      	ands	r3, r2
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d17b      	bne.n	8013f86 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013e8e:	687a      	ldr	r2, [r7, #4]
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	699b      	ldr	r3, [r3, #24]
 8013e94:	4619      	mov	r1, r3
 8013e96:	4610      	mov	r0, r2
 8013e98:	f7ff fc11 	bl	80136be <get_fat>
 8013e9c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013e9e:	697b      	ldr	r3, [r7, #20]
 8013ea0:	2b01      	cmp	r3, #1
 8013ea2:	d801      	bhi.n	8013ea8 <dir_next+0xa0>
 8013ea4:	2302      	movs	r3, #2
 8013ea6:	e081      	b.n	8013fac <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013ea8:	697b      	ldr	r3, [r7, #20]
 8013eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013eae:	d101      	bne.n	8013eb4 <dir_next+0xac>
 8013eb0:	2301      	movs	r3, #1
 8013eb2:	e07b      	b.n	8013fac <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	69db      	ldr	r3, [r3, #28]
 8013eb8:	697a      	ldr	r2, [r7, #20]
 8013eba:	429a      	cmp	r2, r3
 8013ebc:	d359      	bcc.n	8013f72 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013ebe:	683b      	ldr	r3, [r7, #0]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d104      	bne.n	8013ece <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	61da      	str	r2, [r3, #28]
 8013eca:	2304      	movs	r3, #4
 8013ecc:	e06e      	b.n	8013fac <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013ece:	687a      	ldr	r2, [r7, #4]
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	699b      	ldr	r3, [r3, #24]
 8013ed4:	4619      	mov	r1, r3
 8013ed6:	4610      	mov	r0, r2
 8013ed8:	f7ff fe3d 	bl	8013b56 <create_chain>
 8013edc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013ede:	697b      	ldr	r3, [r7, #20]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d101      	bne.n	8013ee8 <dir_next+0xe0>
 8013ee4:	2307      	movs	r3, #7
 8013ee6:	e061      	b.n	8013fac <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013ee8:	697b      	ldr	r3, [r7, #20]
 8013eea:	2b01      	cmp	r3, #1
 8013eec:	d101      	bne.n	8013ef2 <dir_next+0xea>
 8013eee:	2302      	movs	r3, #2
 8013ef0:	e05c      	b.n	8013fac <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013ef2:	697b      	ldr	r3, [r7, #20]
 8013ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ef8:	d101      	bne.n	8013efe <dir_next+0xf6>
 8013efa:	2301      	movs	r3, #1
 8013efc:	e056      	b.n	8013fac <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013efe:	68f8      	ldr	r0, [r7, #12]
 8013f00:	f7ff fadc 	bl	80134bc <sync_window>
 8013f04:	4603      	mov	r3, r0
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d001      	beq.n	8013f0e <dir_next+0x106>
 8013f0a:	2301      	movs	r3, #1
 8013f0c:	e04e      	b.n	8013fac <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	899b      	ldrh	r3, [r3, #12]
 8013f18:	461a      	mov	r2, r3
 8013f1a:	2100      	movs	r1, #0
 8013f1c:	f7ff f905 	bl	801312a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013f20:	2300      	movs	r3, #0
 8013f22:	613b      	str	r3, [r7, #16]
 8013f24:	6979      	ldr	r1, [r7, #20]
 8013f26:	68f8      	ldr	r0, [r7, #12]
 8013f28:	f7ff fbaa 	bl	8013680 <clust2sect>
 8013f2c:	4602      	mov	r2, r0
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	635a      	str	r2, [r3, #52]	; 0x34
 8013f32:	e012      	b.n	8013f5a <dir_next+0x152>
						fs->wflag = 1;
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	2201      	movs	r2, #1
 8013f38:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013f3a:	68f8      	ldr	r0, [r7, #12]
 8013f3c:	f7ff fabe 	bl	80134bc <sync_window>
 8013f40:	4603      	mov	r3, r0
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d001      	beq.n	8013f4a <dir_next+0x142>
 8013f46:	2301      	movs	r3, #1
 8013f48:	e030      	b.n	8013fac <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013f4a:	693b      	ldr	r3, [r7, #16]
 8013f4c:	3301      	adds	r3, #1
 8013f4e:	613b      	str	r3, [r7, #16]
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f54:	1c5a      	adds	r2, r3, #1
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	635a      	str	r2, [r3, #52]	; 0x34
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	895b      	ldrh	r3, [r3, #10]
 8013f5e:	461a      	mov	r2, r3
 8013f60:	693b      	ldr	r3, [r7, #16]
 8013f62:	4293      	cmp	r3, r2
 8013f64:	d3e6      	bcc.n	8013f34 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013f6a:	693b      	ldr	r3, [r7, #16]
 8013f6c:	1ad2      	subs	r2, r2, r3
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	697a      	ldr	r2, [r7, #20]
 8013f76:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013f78:	6979      	ldr	r1, [r7, #20]
 8013f7a:	68f8      	ldr	r0, [r7, #12]
 8013f7c:	f7ff fb80 	bl	8013680 <clust2sect>
 8013f80:	4602      	mov	r2, r0
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	68ba      	ldr	r2, [r7, #8]
 8013f8a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	899b      	ldrh	r3, [r3, #12]
 8013f96:	461a      	mov	r2, r3
 8013f98:	68bb      	ldr	r3, [r7, #8]
 8013f9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8013f9e:	fb02 f200 	mul.w	r2, r2, r0
 8013fa2:	1a9b      	subs	r3, r3, r2
 8013fa4:	18ca      	adds	r2, r1, r3
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013faa:	2300      	movs	r3, #0
}
 8013fac:	4618      	mov	r0, r3
 8013fae:	3718      	adds	r7, #24
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	bd80      	pop	{r7, pc}

08013fb4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b086      	sub	sp, #24
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
 8013fbc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013fc4:	2100      	movs	r1, #0
 8013fc6:	6878      	ldr	r0, [r7, #4]
 8013fc8:	f7ff fe95 	bl	8013cf6 <dir_sdi>
 8013fcc:	4603      	mov	r3, r0
 8013fce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013fd0:	7dfb      	ldrb	r3, [r7, #23]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d12b      	bne.n	801402e <dir_alloc+0x7a>
		n = 0;
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	69db      	ldr	r3, [r3, #28]
 8013fde:	4619      	mov	r1, r3
 8013fe0:	68f8      	ldr	r0, [r7, #12]
 8013fe2:	f7ff faaf 	bl	8013544 <move_window>
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013fea:	7dfb      	ldrb	r3, [r7, #23]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d11d      	bne.n	801402c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	6a1b      	ldr	r3, [r3, #32]
 8013ff4:	781b      	ldrb	r3, [r3, #0]
 8013ff6:	2be5      	cmp	r3, #229	; 0xe5
 8013ff8:	d004      	beq.n	8014004 <dir_alloc+0x50>
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	6a1b      	ldr	r3, [r3, #32]
 8013ffe:	781b      	ldrb	r3, [r3, #0]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d107      	bne.n	8014014 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8014004:	693b      	ldr	r3, [r7, #16]
 8014006:	3301      	adds	r3, #1
 8014008:	613b      	str	r3, [r7, #16]
 801400a:	693a      	ldr	r2, [r7, #16]
 801400c:	683b      	ldr	r3, [r7, #0]
 801400e:	429a      	cmp	r2, r3
 8014010:	d102      	bne.n	8014018 <dir_alloc+0x64>
 8014012:	e00c      	b.n	801402e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8014014:	2300      	movs	r3, #0
 8014016:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8014018:	2101      	movs	r1, #1
 801401a:	6878      	ldr	r0, [r7, #4]
 801401c:	f7ff fef4 	bl	8013e08 <dir_next>
 8014020:	4603      	mov	r3, r0
 8014022:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8014024:	7dfb      	ldrb	r3, [r7, #23]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d0d7      	beq.n	8013fda <dir_alloc+0x26>
 801402a:	e000      	b.n	801402e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801402c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801402e:	7dfb      	ldrb	r3, [r7, #23]
 8014030:	2b04      	cmp	r3, #4
 8014032:	d101      	bne.n	8014038 <dir_alloc+0x84>
 8014034:	2307      	movs	r3, #7
 8014036:	75fb      	strb	r3, [r7, #23]
	return res;
 8014038:	7dfb      	ldrb	r3, [r7, #23]
}
 801403a:	4618      	mov	r0, r3
 801403c:	3718      	adds	r7, #24
 801403e:	46bd      	mov	sp, r7
 8014040:	bd80      	pop	{r7, pc}

08014042 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8014042:	b580      	push	{r7, lr}
 8014044:	b084      	sub	sp, #16
 8014046:	af00      	add	r7, sp, #0
 8014048:	6078      	str	r0, [r7, #4]
 801404a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801404c:	683b      	ldr	r3, [r7, #0]
 801404e:	331a      	adds	r3, #26
 8014050:	4618      	mov	r0, r3
 8014052:	f7fe ffc7 	bl	8012fe4 <ld_word>
 8014056:	4603      	mov	r3, r0
 8014058:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	781b      	ldrb	r3, [r3, #0]
 801405e:	2b03      	cmp	r3, #3
 8014060:	d109      	bne.n	8014076 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8014062:	683b      	ldr	r3, [r7, #0]
 8014064:	3314      	adds	r3, #20
 8014066:	4618      	mov	r0, r3
 8014068:	f7fe ffbc 	bl	8012fe4 <ld_word>
 801406c:	4603      	mov	r3, r0
 801406e:	041b      	lsls	r3, r3, #16
 8014070:	68fa      	ldr	r2, [r7, #12]
 8014072:	4313      	orrs	r3, r2
 8014074:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8014076:	68fb      	ldr	r3, [r7, #12]
}
 8014078:	4618      	mov	r0, r3
 801407a:	3710      	adds	r7, #16
 801407c:	46bd      	mov	sp, r7
 801407e:	bd80      	pop	{r7, pc}

08014080 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8014080:	b580      	push	{r7, lr}
 8014082:	b084      	sub	sp, #16
 8014084:	af00      	add	r7, sp, #0
 8014086:	60f8      	str	r0, [r7, #12]
 8014088:	60b9      	str	r1, [r7, #8]
 801408a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801408c:	68bb      	ldr	r3, [r7, #8]
 801408e:	331a      	adds	r3, #26
 8014090:	687a      	ldr	r2, [r7, #4]
 8014092:	b292      	uxth	r2, r2
 8014094:	4611      	mov	r1, r2
 8014096:	4618      	mov	r0, r3
 8014098:	f7fe ffdf 	bl	801305a <st_word>
	if (fs->fs_type == FS_FAT32) {
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	781b      	ldrb	r3, [r3, #0]
 80140a0:	2b03      	cmp	r3, #3
 80140a2:	d109      	bne.n	80140b8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80140a4:	68bb      	ldr	r3, [r7, #8]
 80140a6:	f103 0214 	add.w	r2, r3, #20
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	0c1b      	lsrs	r3, r3, #16
 80140ae:	b29b      	uxth	r3, r3
 80140b0:	4619      	mov	r1, r3
 80140b2:	4610      	mov	r0, r2
 80140b4:	f7fe ffd1 	bl	801305a <st_word>
	}
}
 80140b8:	bf00      	nop
 80140ba:	3710      	adds	r7, #16
 80140bc:	46bd      	mov	sp, r7
 80140be:	bd80      	pop	{r7, pc}

080140c0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b086      	sub	sp, #24
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	6078      	str	r0, [r7, #4]
 80140c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80140ca:	2304      	movs	r3, #4
 80140cc:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80140d4:	e03c      	b.n	8014150 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	69db      	ldr	r3, [r3, #28]
 80140da:	4619      	mov	r1, r3
 80140dc:	6938      	ldr	r0, [r7, #16]
 80140de:	f7ff fa31 	bl	8013544 <move_window>
 80140e2:	4603      	mov	r3, r0
 80140e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80140e6:	7dfb      	ldrb	r3, [r7, #23]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d136      	bne.n	801415a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	6a1b      	ldr	r3, [r3, #32]
 80140f0:	781b      	ldrb	r3, [r3, #0]
 80140f2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80140f4:	7bfb      	ldrb	r3, [r7, #15]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d102      	bne.n	8014100 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80140fa:	2304      	movs	r3, #4
 80140fc:	75fb      	strb	r3, [r7, #23]
 80140fe:	e031      	b.n	8014164 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	6a1b      	ldr	r3, [r3, #32]
 8014104:	330b      	adds	r3, #11
 8014106:	781b      	ldrb	r3, [r3, #0]
 8014108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801410c:	73bb      	strb	r3, [r7, #14]
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	7bba      	ldrb	r2, [r7, #14]
 8014112:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8014114:	7bfb      	ldrb	r3, [r7, #15]
 8014116:	2be5      	cmp	r3, #229	; 0xe5
 8014118:	d011      	beq.n	801413e <dir_read+0x7e>
 801411a:	7bfb      	ldrb	r3, [r7, #15]
 801411c:	2b2e      	cmp	r3, #46	; 0x2e
 801411e:	d00e      	beq.n	801413e <dir_read+0x7e>
 8014120:	7bbb      	ldrb	r3, [r7, #14]
 8014122:	2b0f      	cmp	r3, #15
 8014124:	d00b      	beq.n	801413e <dir_read+0x7e>
 8014126:	7bbb      	ldrb	r3, [r7, #14]
 8014128:	f023 0320 	bic.w	r3, r3, #32
 801412c:	2b08      	cmp	r3, #8
 801412e:	bf0c      	ite	eq
 8014130:	2301      	moveq	r3, #1
 8014132:	2300      	movne	r3, #0
 8014134:	b2db      	uxtb	r3, r3
 8014136:	461a      	mov	r2, r3
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	4293      	cmp	r3, r2
 801413c:	d00f      	beq.n	801415e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801413e:	2100      	movs	r1, #0
 8014140:	6878      	ldr	r0, [r7, #4]
 8014142:	f7ff fe61 	bl	8013e08 <dir_next>
 8014146:	4603      	mov	r3, r0
 8014148:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801414a:	7dfb      	ldrb	r3, [r7, #23]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d108      	bne.n	8014162 <dir_read+0xa2>
	while (dp->sect) {
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	69db      	ldr	r3, [r3, #28]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d1be      	bne.n	80140d6 <dir_read+0x16>
 8014158:	e004      	b.n	8014164 <dir_read+0xa4>
		if (res != FR_OK) break;
 801415a:	bf00      	nop
 801415c:	e002      	b.n	8014164 <dir_read+0xa4>
				break;
 801415e:	bf00      	nop
 8014160:	e000      	b.n	8014164 <dir_read+0xa4>
		if (res != FR_OK) break;
 8014162:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8014164:	7dfb      	ldrb	r3, [r7, #23]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d002      	beq.n	8014170 <dir_read+0xb0>
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	2200      	movs	r2, #0
 801416e:	61da      	str	r2, [r3, #28]
	return res;
 8014170:	7dfb      	ldrb	r3, [r7, #23]
}
 8014172:	4618      	mov	r0, r3
 8014174:	3718      	adds	r7, #24
 8014176:	46bd      	mov	sp, r7
 8014178:	bd80      	pop	{r7, pc}

0801417a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801417a:	b580      	push	{r7, lr}
 801417c:	b086      	sub	sp, #24
 801417e:	af00      	add	r7, sp, #0
 8014180:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8014188:	2100      	movs	r1, #0
 801418a:	6878      	ldr	r0, [r7, #4]
 801418c:	f7ff fdb3 	bl	8013cf6 <dir_sdi>
 8014190:	4603      	mov	r3, r0
 8014192:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8014194:	7dfb      	ldrb	r3, [r7, #23]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d001      	beq.n	801419e <dir_find+0x24>
 801419a:	7dfb      	ldrb	r3, [r7, #23]
 801419c:	e03e      	b.n	801421c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	69db      	ldr	r3, [r3, #28]
 80141a2:	4619      	mov	r1, r3
 80141a4:	6938      	ldr	r0, [r7, #16]
 80141a6:	f7ff f9cd 	bl	8013544 <move_window>
 80141aa:	4603      	mov	r3, r0
 80141ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80141ae:	7dfb      	ldrb	r3, [r7, #23]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d12f      	bne.n	8014214 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	6a1b      	ldr	r3, [r3, #32]
 80141b8:	781b      	ldrb	r3, [r3, #0]
 80141ba:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80141bc:	7bfb      	ldrb	r3, [r7, #15]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d102      	bne.n	80141c8 <dir_find+0x4e>
 80141c2:	2304      	movs	r3, #4
 80141c4:	75fb      	strb	r3, [r7, #23]
 80141c6:	e028      	b.n	801421a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	6a1b      	ldr	r3, [r3, #32]
 80141cc:	330b      	adds	r3, #11
 80141ce:	781b      	ldrb	r3, [r3, #0]
 80141d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80141d4:	b2da      	uxtb	r2, r3
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	6a1b      	ldr	r3, [r3, #32]
 80141de:	330b      	adds	r3, #11
 80141e0:	781b      	ldrb	r3, [r3, #0]
 80141e2:	f003 0308 	and.w	r3, r3, #8
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d10a      	bne.n	8014200 <dir_find+0x86>
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	6a18      	ldr	r0, [r3, #32]
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	3324      	adds	r3, #36	; 0x24
 80141f2:	220b      	movs	r2, #11
 80141f4:	4619      	mov	r1, r3
 80141f6:	f7fe ffb2 	bl	801315e <mem_cmp>
 80141fa:	4603      	mov	r3, r0
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d00b      	beq.n	8014218 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8014200:	2100      	movs	r1, #0
 8014202:	6878      	ldr	r0, [r7, #4]
 8014204:	f7ff fe00 	bl	8013e08 <dir_next>
 8014208:	4603      	mov	r3, r0
 801420a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801420c:	7dfb      	ldrb	r3, [r7, #23]
 801420e:	2b00      	cmp	r3, #0
 8014210:	d0c5      	beq.n	801419e <dir_find+0x24>
 8014212:	e002      	b.n	801421a <dir_find+0xa0>
		if (res != FR_OK) break;
 8014214:	bf00      	nop
 8014216:	e000      	b.n	801421a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8014218:	bf00      	nop

	return res;
 801421a:	7dfb      	ldrb	r3, [r7, #23]
}
 801421c:	4618      	mov	r0, r3
 801421e:	3718      	adds	r7, #24
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}

08014224 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b084      	sub	sp, #16
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8014232:	2101      	movs	r1, #1
 8014234:	6878      	ldr	r0, [r7, #4]
 8014236:	f7ff febd 	bl	8013fb4 <dir_alloc>
 801423a:	4603      	mov	r3, r0
 801423c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801423e:	7bfb      	ldrb	r3, [r7, #15]
 8014240:	2b00      	cmp	r3, #0
 8014242:	d11c      	bne.n	801427e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	69db      	ldr	r3, [r3, #28]
 8014248:	4619      	mov	r1, r3
 801424a:	68b8      	ldr	r0, [r7, #8]
 801424c:	f7ff f97a 	bl	8013544 <move_window>
 8014250:	4603      	mov	r3, r0
 8014252:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014254:	7bfb      	ldrb	r3, [r7, #15]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d111      	bne.n	801427e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	6a1b      	ldr	r3, [r3, #32]
 801425e:	2220      	movs	r2, #32
 8014260:	2100      	movs	r1, #0
 8014262:	4618      	mov	r0, r3
 8014264:	f7fe ff61 	bl	801312a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	6a18      	ldr	r0, [r3, #32]
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	3324      	adds	r3, #36	; 0x24
 8014270:	220b      	movs	r2, #11
 8014272:	4619      	mov	r1, r3
 8014274:	f7fe ff38 	bl	80130e8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8014278:	68bb      	ldr	r3, [r7, #8]
 801427a:	2201      	movs	r2, #1
 801427c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801427e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014280:	4618      	mov	r0, r3
 8014282:	3710      	adds	r7, #16
 8014284:	46bd      	mov	sp, r7
 8014286:	bd80      	pop	{r7, pc}

08014288 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8014288:	b580      	push	{r7, lr}
 801428a:	b084      	sub	sp, #16
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	69db      	ldr	r3, [r3, #28]
 801429a:	4619      	mov	r1, r3
 801429c:	68f8      	ldr	r0, [r7, #12]
 801429e:	f7ff f951 	bl	8013544 <move_window>
 80142a2:	4603      	mov	r3, r0
 80142a4:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80142a6:	7afb      	ldrb	r3, [r7, #11]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d106      	bne.n	80142ba <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	6a1b      	ldr	r3, [r3, #32]
 80142b0:	22e5      	movs	r2, #229	; 0xe5
 80142b2:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	2201      	movs	r2, #1
 80142b8:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80142ba:	7afb      	ldrb	r3, [r7, #11]
}
 80142bc:	4618      	mov	r0, r3
 80142be:	3710      	adds	r7, #16
 80142c0:	46bd      	mov	sp, r7
 80142c2:	bd80      	pop	{r7, pc}

080142c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80142c4:	b580      	push	{r7, lr}
 80142c6:	b088      	sub	sp, #32
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	6078      	str	r0, [r7, #4]
 80142cc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80142ce:	683b      	ldr	r3, [r7, #0]
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	60fb      	str	r3, [r7, #12]
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	3324      	adds	r3, #36	; 0x24
 80142d8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80142da:	220b      	movs	r2, #11
 80142dc:	2120      	movs	r1, #32
 80142de:	68b8      	ldr	r0, [r7, #8]
 80142e0:	f7fe ff23 	bl	801312a <mem_set>
	si = i = 0; ni = 8;
 80142e4:	2300      	movs	r3, #0
 80142e6:	613b      	str	r3, [r7, #16]
 80142e8:	693b      	ldr	r3, [r7, #16]
 80142ea:	617b      	str	r3, [r7, #20]
 80142ec:	2308      	movs	r3, #8
 80142ee:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 80142f0:	68fa      	ldr	r2, [r7, #12]
 80142f2:	697b      	ldr	r3, [r7, #20]
 80142f4:	4413      	add	r3, r2
 80142f6:	781b      	ldrb	r3, [r3, #0]
 80142f8:	2b2e      	cmp	r3, #46	; 0x2e
 80142fa:	d12f      	bne.n	801435c <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 80142fc:	697b      	ldr	r3, [r7, #20]
 80142fe:	1c5a      	adds	r2, r3, #1
 8014300:	617a      	str	r2, [r7, #20]
 8014302:	68fa      	ldr	r2, [r7, #12]
 8014304:	4413      	add	r3, r2
 8014306:	781b      	ldrb	r3, [r3, #0]
 8014308:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 801430a:	7ffb      	ldrb	r3, [r7, #31]
 801430c:	2b2e      	cmp	r3, #46	; 0x2e
 801430e:	d10a      	bne.n	8014326 <create_name+0x62>
 8014310:	697b      	ldr	r3, [r7, #20]
 8014312:	2b02      	cmp	r3, #2
 8014314:	d807      	bhi.n	8014326 <create_name+0x62>
			sfn[i++] = c;
 8014316:	693b      	ldr	r3, [r7, #16]
 8014318:	1c5a      	adds	r2, r3, #1
 801431a:	613a      	str	r2, [r7, #16]
 801431c:	68ba      	ldr	r2, [r7, #8]
 801431e:	4413      	add	r3, r2
 8014320:	7ffa      	ldrb	r2, [r7, #31]
 8014322:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8014324:	e7ea      	b.n	80142fc <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8014326:	7ffb      	ldrb	r3, [r7, #31]
 8014328:	2b2f      	cmp	r3, #47	; 0x2f
 801432a:	d007      	beq.n	801433c <create_name+0x78>
 801432c:	7ffb      	ldrb	r3, [r7, #31]
 801432e:	2b5c      	cmp	r3, #92	; 0x5c
 8014330:	d004      	beq.n	801433c <create_name+0x78>
 8014332:	7ffb      	ldrb	r3, [r7, #31]
 8014334:	2b20      	cmp	r3, #32
 8014336:	d901      	bls.n	801433c <create_name+0x78>
 8014338:	2306      	movs	r3, #6
 801433a:	e084      	b.n	8014446 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 801433c:	68fa      	ldr	r2, [r7, #12]
 801433e:	697b      	ldr	r3, [r7, #20]
 8014340:	441a      	add	r2, r3
 8014342:	683b      	ldr	r3, [r7, #0]
 8014344:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8014346:	7ffb      	ldrb	r3, [r7, #31]
 8014348:	2b20      	cmp	r3, #32
 801434a:	d801      	bhi.n	8014350 <create_name+0x8c>
 801434c:	2224      	movs	r2, #36	; 0x24
 801434e:	e000      	b.n	8014352 <create_name+0x8e>
 8014350:	2220      	movs	r2, #32
 8014352:	68bb      	ldr	r3, [r7, #8]
 8014354:	330b      	adds	r3, #11
 8014356:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8014358:	2300      	movs	r3, #0
 801435a:	e074      	b.n	8014446 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801435c:	697b      	ldr	r3, [r7, #20]
 801435e:	1c5a      	adds	r2, r3, #1
 8014360:	617a      	str	r2, [r7, #20]
 8014362:	68fa      	ldr	r2, [r7, #12]
 8014364:	4413      	add	r3, r2
 8014366:	781b      	ldrb	r3, [r3, #0]
 8014368:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801436a:	7ffb      	ldrb	r3, [r7, #31]
 801436c:	2b20      	cmp	r3, #32
 801436e:	d94e      	bls.n	801440e <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8014370:	7ffb      	ldrb	r3, [r7, #31]
 8014372:	2b2f      	cmp	r3, #47	; 0x2f
 8014374:	d006      	beq.n	8014384 <create_name+0xc0>
 8014376:	7ffb      	ldrb	r3, [r7, #31]
 8014378:	2b5c      	cmp	r3, #92	; 0x5c
 801437a:	d110      	bne.n	801439e <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801437c:	e002      	b.n	8014384 <create_name+0xc0>
 801437e:	697b      	ldr	r3, [r7, #20]
 8014380:	3301      	adds	r3, #1
 8014382:	617b      	str	r3, [r7, #20]
 8014384:	68fa      	ldr	r2, [r7, #12]
 8014386:	697b      	ldr	r3, [r7, #20]
 8014388:	4413      	add	r3, r2
 801438a:	781b      	ldrb	r3, [r3, #0]
 801438c:	2b2f      	cmp	r3, #47	; 0x2f
 801438e:	d0f6      	beq.n	801437e <create_name+0xba>
 8014390:	68fa      	ldr	r2, [r7, #12]
 8014392:	697b      	ldr	r3, [r7, #20]
 8014394:	4413      	add	r3, r2
 8014396:	781b      	ldrb	r3, [r3, #0]
 8014398:	2b5c      	cmp	r3, #92	; 0x5c
 801439a:	d0f0      	beq.n	801437e <create_name+0xba>
			break;
 801439c:	e038      	b.n	8014410 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801439e:	7ffb      	ldrb	r3, [r7, #31]
 80143a0:	2b2e      	cmp	r3, #46	; 0x2e
 80143a2:	d003      	beq.n	80143ac <create_name+0xe8>
 80143a4:	693a      	ldr	r2, [r7, #16]
 80143a6:	69bb      	ldr	r3, [r7, #24]
 80143a8:	429a      	cmp	r2, r3
 80143aa:	d30c      	bcc.n	80143c6 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80143ac:	69bb      	ldr	r3, [r7, #24]
 80143ae:	2b0b      	cmp	r3, #11
 80143b0:	d002      	beq.n	80143b8 <create_name+0xf4>
 80143b2:	7ffb      	ldrb	r3, [r7, #31]
 80143b4:	2b2e      	cmp	r3, #46	; 0x2e
 80143b6:	d001      	beq.n	80143bc <create_name+0xf8>
 80143b8:	2306      	movs	r3, #6
 80143ba:	e044      	b.n	8014446 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 80143bc:	2308      	movs	r3, #8
 80143be:	613b      	str	r3, [r7, #16]
 80143c0:	230b      	movs	r3, #11
 80143c2:	61bb      	str	r3, [r7, #24]
			continue;
 80143c4:	e022      	b.n	801440c <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 80143c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	da04      	bge.n	80143d8 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80143ce:	7ffb      	ldrb	r3, [r7, #31]
 80143d0:	3b80      	subs	r3, #128	; 0x80
 80143d2:	4a1f      	ldr	r2, [pc, #124]	; (8014450 <create_name+0x18c>)
 80143d4:	5cd3      	ldrb	r3, [r2, r3]
 80143d6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80143d8:	7ffb      	ldrb	r3, [r7, #31]
 80143da:	4619      	mov	r1, r3
 80143dc:	481d      	ldr	r0, [pc, #116]	; (8014454 <create_name+0x190>)
 80143de:	f7fe fee5 	bl	80131ac <chk_chr>
 80143e2:	4603      	mov	r3, r0
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d001      	beq.n	80143ec <create_name+0x128>
 80143e8:	2306      	movs	r3, #6
 80143ea:	e02c      	b.n	8014446 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80143ec:	7ffb      	ldrb	r3, [r7, #31]
 80143ee:	2b60      	cmp	r3, #96	; 0x60
 80143f0:	d905      	bls.n	80143fe <create_name+0x13a>
 80143f2:	7ffb      	ldrb	r3, [r7, #31]
 80143f4:	2b7a      	cmp	r3, #122	; 0x7a
 80143f6:	d802      	bhi.n	80143fe <create_name+0x13a>
 80143f8:	7ffb      	ldrb	r3, [r7, #31]
 80143fa:	3b20      	subs	r3, #32
 80143fc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80143fe:	693b      	ldr	r3, [r7, #16]
 8014400:	1c5a      	adds	r2, r3, #1
 8014402:	613a      	str	r2, [r7, #16]
 8014404:	68ba      	ldr	r2, [r7, #8]
 8014406:	4413      	add	r3, r2
 8014408:	7ffa      	ldrb	r2, [r7, #31]
 801440a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801440c:	e7a6      	b.n	801435c <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801440e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8014410:	68fa      	ldr	r2, [r7, #12]
 8014412:	697b      	ldr	r3, [r7, #20]
 8014414:	441a      	add	r2, r3
 8014416:	683b      	ldr	r3, [r7, #0]
 8014418:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801441a:	693b      	ldr	r3, [r7, #16]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d101      	bne.n	8014424 <create_name+0x160>
 8014420:	2306      	movs	r3, #6
 8014422:	e010      	b.n	8014446 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8014424:	68bb      	ldr	r3, [r7, #8]
 8014426:	781b      	ldrb	r3, [r3, #0]
 8014428:	2be5      	cmp	r3, #229	; 0xe5
 801442a:	d102      	bne.n	8014432 <create_name+0x16e>
 801442c:	68bb      	ldr	r3, [r7, #8]
 801442e:	2205      	movs	r2, #5
 8014430:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8014432:	7ffb      	ldrb	r3, [r7, #31]
 8014434:	2b20      	cmp	r3, #32
 8014436:	d801      	bhi.n	801443c <create_name+0x178>
 8014438:	2204      	movs	r2, #4
 801443a:	e000      	b.n	801443e <create_name+0x17a>
 801443c:	2200      	movs	r2, #0
 801443e:	68bb      	ldr	r3, [r7, #8]
 8014440:	330b      	adds	r3, #11
 8014442:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8014444:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8014446:	4618      	mov	r0, r3
 8014448:	3720      	adds	r7, #32
 801444a:	46bd      	mov	sp, r7
 801444c:	bd80      	pop	{r7, pc}
 801444e:	bf00      	nop
 8014450:	0801abf8 	.word	0x0801abf8
 8014454:	0801aba8 	.word	0x0801aba8

08014458 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b086      	sub	sp, #24
 801445c:	af00      	add	r7, sp, #0
 801445e:	6078      	str	r0, [r7, #4]
 8014460:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8014466:	693b      	ldr	r3, [r7, #16]
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 801446c:	683b      	ldr	r3, [r7, #0]
 801446e:	781b      	ldrb	r3, [r3, #0]
 8014470:	2b2f      	cmp	r3, #47	; 0x2f
 8014472:	d00b      	beq.n	801448c <follow_path+0x34>
 8014474:	683b      	ldr	r3, [r7, #0]
 8014476:	781b      	ldrb	r3, [r3, #0]
 8014478:	2b5c      	cmp	r3, #92	; 0x5c
 801447a:	d007      	beq.n	801448c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	699a      	ldr	r2, [r3, #24]
 8014480:	693b      	ldr	r3, [r7, #16]
 8014482:	609a      	str	r2, [r3, #8]
 8014484:	e00d      	b.n	80144a2 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014486:	683b      	ldr	r3, [r7, #0]
 8014488:	3301      	adds	r3, #1
 801448a:	603b      	str	r3, [r7, #0]
 801448c:	683b      	ldr	r3, [r7, #0]
 801448e:	781b      	ldrb	r3, [r3, #0]
 8014490:	2b2f      	cmp	r3, #47	; 0x2f
 8014492:	d0f8      	beq.n	8014486 <follow_path+0x2e>
 8014494:	683b      	ldr	r3, [r7, #0]
 8014496:	781b      	ldrb	r3, [r3, #0]
 8014498:	2b5c      	cmp	r3, #92	; 0x5c
 801449a:	d0f4      	beq.n	8014486 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 801449c:	693b      	ldr	r3, [r7, #16]
 801449e:	2200      	movs	r2, #0
 80144a0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80144a2:	683b      	ldr	r3, [r7, #0]
 80144a4:	781b      	ldrb	r3, [r3, #0]
 80144a6:	2b1f      	cmp	r3, #31
 80144a8:	d80a      	bhi.n	80144c0 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	2280      	movs	r2, #128	; 0x80
 80144ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80144b2:	2100      	movs	r1, #0
 80144b4:	6878      	ldr	r0, [r7, #4]
 80144b6:	f7ff fc1e 	bl	8013cf6 <dir_sdi>
 80144ba:	4603      	mov	r3, r0
 80144bc:	75fb      	strb	r3, [r7, #23]
 80144be:	e05b      	b.n	8014578 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80144c0:	463b      	mov	r3, r7
 80144c2:	4619      	mov	r1, r3
 80144c4:	6878      	ldr	r0, [r7, #4]
 80144c6:	f7ff fefd 	bl	80142c4 <create_name>
 80144ca:	4603      	mov	r3, r0
 80144cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80144ce:	7dfb      	ldrb	r3, [r7, #23]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d14c      	bne.n	801456e <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 80144d4:	6878      	ldr	r0, [r7, #4]
 80144d6:	f7ff fe50 	bl	801417a <dir_find>
 80144da:	4603      	mov	r3, r0
 80144dc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80144e4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80144e6:	7dfb      	ldrb	r3, [r7, #23]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d01b      	beq.n	8014524 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80144ec:	7dfb      	ldrb	r3, [r7, #23]
 80144ee:	2b04      	cmp	r3, #4
 80144f0:	d13f      	bne.n	8014572 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80144f2:	7afb      	ldrb	r3, [r7, #11]
 80144f4:	f003 0320 	and.w	r3, r3, #32
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d00b      	beq.n	8014514 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80144fc:	7afb      	ldrb	r3, [r7, #11]
 80144fe:	f003 0304 	and.w	r3, r3, #4
 8014502:	2b00      	cmp	r3, #0
 8014504:	d031      	beq.n	801456a <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	2280      	movs	r2, #128	; 0x80
 801450a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 801450e:	2300      	movs	r3, #0
 8014510:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8014512:	e02e      	b.n	8014572 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8014514:	7afb      	ldrb	r3, [r7, #11]
 8014516:	f003 0304 	and.w	r3, r3, #4
 801451a:	2b00      	cmp	r3, #0
 801451c:	d129      	bne.n	8014572 <follow_path+0x11a>
 801451e:	2305      	movs	r3, #5
 8014520:	75fb      	strb	r3, [r7, #23]
				break;
 8014522:	e026      	b.n	8014572 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014524:	7afb      	ldrb	r3, [r7, #11]
 8014526:	f003 0304 	and.w	r3, r3, #4
 801452a:	2b00      	cmp	r3, #0
 801452c:	d123      	bne.n	8014576 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801452e:	693b      	ldr	r3, [r7, #16]
 8014530:	799b      	ldrb	r3, [r3, #6]
 8014532:	f003 0310 	and.w	r3, r3, #16
 8014536:	2b00      	cmp	r3, #0
 8014538:	d102      	bne.n	8014540 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 801453a:	2305      	movs	r3, #5
 801453c:	75fb      	strb	r3, [r7, #23]
 801453e:	e01b      	b.n	8014578 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	695b      	ldr	r3, [r3, #20]
 801454a:	68fa      	ldr	r2, [r7, #12]
 801454c:	8992      	ldrh	r2, [r2, #12]
 801454e:	fbb3 f0f2 	udiv	r0, r3, r2
 8014552:	fb02 f200 	mul.w	r2, r2, r0
 8014556:	1a9b      	subs	r3, r3, r2
 8014558:	440b      	add	r3, r1
 801455a:	4619      	mov	r1, r3
 801455c:	68f8      	ldr	r0, [r7, #12]
 801455e:	f7ff fd70 	bl	8014042 <ld_clust>
 8014562:	4602      	mov	r2, r0
 8014564:	693b      	ldr	r3, [r7, #16]
 8014566:	609a      	str	r2, [r3, #8]
 8014568:	e7aa      	b.n	80144c0 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801456a:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801456c:	e7a8      	b.n	80144c0 <follow_path+0x68>
			if (res != FR_OK) break;
 801456e:	bf00      	nop
 8014570:	e002      	b.n	8014578 <follow_path+0x120>
				break;
 8014572:	bf00      	nop
 8014574:	e000      	b.n	8014578 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014576:	bf00      	nop
			}
		}
	}

	return res;
 8014578:	7dfb      	ldrb	r3, [r7, #23]
}
 801457a:	4618      	mov	r0, r3
 801457c:	3718      	adds	r7, #24
 801457e:	46bd      	mov	sp, r7
 8014580:	bd80      	pop	{r7, pc}

08014582 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8014582:	b480      	push	{r7}
 8014584:	b087      	sub	sp, #28
 8014586:	af00      	add	r7, sp, #0
 8014588:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801458a:	f04f 33ff 	mov.w	r3, #4294967295
 801458e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d031      	beq.n	80145fc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	617b      	str	r3, [r7, #20]
 801459e:	e002      	b.n	80145a6 <get_ldnumber+0x24>
 80145a0:	697b      	ldr	r3, [r7, #20]
 80145a2:	3301      	adds	r3, #1
 80145a4:	617b      	str	r3, [r7, #20]
 80145a6:	697b      	ldr	r3, [r7, #20]
 80145a8:	781b      	ldrb	r3, [r3, #0]
 80145aa:	2b20      	cmp	r3, #32
 80145ac:	d903      	bls.n	80145b6 <get_ldnumber+0x34>
 80145ae:	697b      	ldr	r3, [r7, #20]
 80145b0:	781b      	ldrb	r3, [r3, #0]
 80145b2:	2b3a      	cmp	r3, #58	; 0x3a
 80145b4:	d1f4      	bne.n	80145a0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80145b6:	697b      	ldr	r3, [r7, #20]
 80145b8:	781b      	ldrb	r3, [r3, #0]
 80145ba:	2b3a      	cmp	r3, #58	; 0x3a
 80145bc:	d11c      	bne.n	80145f8 <get_ldnumber+0x76>
			tp = *path;
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	1c5a      	adds	r2, r3, #1
 80145c8:	60fa      	str	r2, [r7, #12]
 80145ca:	781b      	ldrb	r3, [r3, #0]
 80145cc:	3b30      	subs	r3, #48	; 0x30
 80145ce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80145d0:	68bb      	ldr	r3, [r7, #8]
 80145d2:	2b09      	cmp	r3, #9
 80145d4:	d80e      	bhi.n	80145f4 <get_ldnumber+0x72>
 80145d6:	68fa      	ldr	r2, [r7, #12]
 80145d8:	697b      	ldr	r3, [r7, #20]
 80145da:	429a      	cmp	r2, r3
 80145dc:	d10a      	bne.n	80145f4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80145de:	68bb      	ldr	r3, [r7, #8]
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d107      	bne.n	80145f4 <get_ldnumber+0x72>
					vol = (int)i;
 80145e4:	68bb      	ldr	r3, [r7, #8]
 80145e6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80145e8:	697b      	ldr	r3, [r7, #20]
 80145ea:	3301      	adds	r3, #1
 80145ec:	617b      	str	r3, [r7, #20]
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	697a      	ldr	r2, [r7, #20]
 80145f2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80145f4:	693b      	ldr	r3, [r7, #16]
 80145f6:	e002      	b.n	80145fe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80145f8:	2300      	movs	r3, #0
 80145fa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80145fc:	693b      	ldr	r3, [r7, #16]
}
 80145fe:	4618      	mov	r0, r3
 8014600:	371c      	adds	r7, #28
 8014602:	46bd      	mov	sp, r7
 8014604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014608:	4770      	bx	lr
	...

0801460c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801460c:	b580      	push	{r7, lr}
 801460e:	b082      	sub	sp, #8
 8014610:	af00      	add	r7, sp, #0
 8014612:	6078      	str	r0, [r7, #4]
 8014614:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	2200      	movs	r2, #0
 801461a:	70da      	strb	r2, [r3, #3]
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	f04f 32ff 	mov.w	r2, #4294967295
 8014622:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014624:	6839      	ldr	r1, [r7, #0]
 8014626:	6878      	ldr	r0, [r7, #4]
 8014628:	f7fe ff8c 	bl	8013544 <move_window>
 801462c:	4603      	mov	r3, r0
 801462e:	2b00      	cmp	r3, #0
 8014630:	d001      	beq.n	8014636 <check_fs+0x2a>
 8014632:	2304      	movs	r3, #4
 8014634:	e038      	b.n	80146a8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	3338      	adds	r3, #56	; 0x38
 801463a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801463e:	4618      	mov	r0, r3
 8014640:	f7fe fcd0 	bl	8012fe4 <ld_word>
 8014644:	4603      	mov	r3, r0
 8014646:	461a      	mov	r2, r3
 8014648:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801464c:	429a      	cmp	r2, r3
 801464e:	d001      	beq.n	8014654 <check_fs+0x48>
 8014650:	2303      	movs	r3, #3
 8014652:	e029      	b.n	80146a8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801465a:	2be9      	cmp	r3, #233	; 0xe9
 801465c:	d009      	beq.n	8014672 <check_fs+0x66>
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014664:	2beb      	cmp	r3, #235	; 0xeb
 8014666:	d11e      	bne.n	80146a6 <check_fs+0x9a>
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801466e:	2b90      	cmp	r3, #144	; 0x90
 8014670:	d119      	bne.n	80146a6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	3338      	adds	r3, #56	; 0x38
 8014676:	3336      	adds	r3, #54	; 0x36
 8014678:	4618      	mov	r0, r3
 801467a:	f7fe fccb 	bl	8013014 <ld_dword>
 801467e:	4603      	mov	r3, r0
 8014680:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014684:	4a0a      	ldr	r2, [pc, #40]	; (80146b0 <check_fs+0xa4>)
 8014686:	4293      	cmp	r3, r2
 8014688:	d101      	bne.n	801468e <check_fs+0x82>
 801468a:	2300      	movs	r3, #0
 801468c:	e00c      	b.n	80146a8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	3338      	adds	r3, #56	; 0x38
 8014692:	3352      	adds	r3, #82	; 0x52
 8014694:	4618      	mov	r0, r3
 8014696:	f7fe fcbd 	bl	8013014 <ld_dword>
 801469a:	4602      	mov	r2, r0
 801469c:	4b05      	ldr	r3, [pc, #20]	; (80146b4 <check_fs+0xa8>)
 801469e:	429a      	cmp	r2, r3
 80146a0:	d101      	bne.n	80146a6 <check_fs+0x9a>
 80146a2:	2300      	movs	r3, #0
 80146a4:	e000      	b.n	80146a8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80146a6:	2302      	movs	r3, #2
}
 80146a8:	4618      	mov	r0, r3
 80146aa:	3708      	adds	r7, #8
 80146ac:	46bd      	mov	sp, r7
 80146ae:	bd80      	pop	{r7, pc}
 80146b0:	00544146 	.word	0x00544146
 80146b4:	33544146 	.word	0x33544146

080146b8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b096      	sub	sp, #88	; 0x58
 80146bc:	af00      	add	r7, sp, #0
 80146be:	60f8      	str	r0, [r7, #12]
 80146c0:	60b9      	str	r1, [r7, #8]
 80146c2:	4613      	mov	r3, r2
 80146c4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80146c6:	68bb      	ldr	r3, [r7, #8]
 80146c8:	2200      	movs	r2, #0
 80146ca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80146cc:	68f8      	ldr	r0, [r7, #12]
 80146ce:	f7ff ff58 	bl	8014582 <get_ldnumber>
 80146d2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80146d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	da01      	bge.n	80146de <find_volume+0x26>
 80146da:	230b      	movs	r3, #11
 80146dc:	e268      	b.n	8014bb0 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80146de:	4ab0      	ldr	r2, [pc, #704]	; (80149a0 <find_volume+0x2e8>)
 80146e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80146e6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80146e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d101      	bne.n	80146f2 <find_volume+0x3a>
 80146ee:	230c      	movs	r3, #12
 80146f0:	e25e      	b.n	8014bb0 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80146f2:	68bb      	ldr	r3, [r7, #8]
 80146f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80146f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80146f8:	79fb      	ldrb	r3, [r7, #7]
 80146fa:	f023 0301 	bic.w	r3, r3, #1
 80146fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014702:	781b      	ldrb	r3, [r3, #0]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d01a      	beq.n	801473e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8014708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801470a:	785b      	ldrb	r3, [r3, #1]
 801470c:	4618      	mov	r0, r3
 801470e:	f7fe fbcb 	bl	8012ea8 <disk_status>
 8014712:	4603      	mov	r3, r0
 8014714:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8014718:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801471c:	f003 0301 	and.w	r3, r3, #1
 8014720:	2b00      	cmp	r3, #0
 8014722:	d10c      	bne.n	801473e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014724:	79fb      	ldrb	r3, [r7, #7]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d007      	beq.n	801473a <find_volume+0x82>
 801472a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801472e:	f003 0304 	and.w	r3, r3, #4
 8014732:	2b00      	cmp	r3, #0
 8014734:	d001      	beq.n	801473a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8014736:	230a      	movs	r3, #10
 8014738:	e23a      	b.n	8014bb0 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 801473a:	2300      	movs	r3, #0
 801473c:	e238      	b.n	8014bb0 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801473e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014740:	2200      	movs	r2, #0
 8014742:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014746:	b2da      	uxtb	r2, r3
 8014748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801474a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801474c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801474e:	785b      	ldrb	r3, [r3, #1]
 8014750:	4618      	mov	r0, r3
 8014752:	f7fe fbc3 	bl	8012edc <disk_initialize>
 8014756:	4603      	mov	r3, r0
 8014758:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801475c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014760:	f003 0301 	and.w	r3, r3, #1
 8014764:	2b00      	cmp	r3, #0
 8014766:	d001      	beq.n	801476c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014768:	2303      	movs	r3, #3
 801476a:	e221      	b.n	8014bb0 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801476c:	79fb      	ldrb	r3, [r7, #7]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d007      	beq.n	8014782 <find_volume+0xca>
 8014772:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014776:	f003 0304 	and.w	r3, r3, #4
 801477a:	2b00      	cmp	r3, #0
 801477c:	d001      	beq.n	8014782 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801477e:	230a      	movs	r3, #10
 8014780:	e216      	b.n	8014bb0 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8014782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014784:	7858      	ldrb	r0, [r3, #1]
 8014786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014788:	330c      	adds	r3, #12
 801478a:	461a      	mov	r2, r3
 801478c:	2102      	movs	r1, #2
 801478e:	f7fe fc0b 	bl	8012fa8 <disk_ioctl>
 8014792:	4603      	mov	r3, r0
 8014794:	2b00      	cmp	r3, #0
 8014796:	d001      	beq.n	801479c <find_volume+0xe4>
 8014798:	2301      	movs	r3, #1
 801479a:	e209      	b.n	8014bb0 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801479c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801479e:	899b      	ldrh	r3, [r3, #12]
 80147a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80147a4:	d80d      	bhi.n	80147c2 <find_volume+0x10a>
 80147a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147a8:	899b      	ldrh	r3, [r3, #12]
 80147aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80147ae:	d308      	bcc.n	80147c2 <find_volume+0x10a>
 80147b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147b2:	899b      	ldrh	r3, [r3, #12]
 80147b4:	461a      	mov	r2, r3
 80147b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147b8:	899b      	ldrh	r3, [r3, #12]
 80147ba:	3b01      	subs	r3, #1
 80147bc:	4013      	ands	r3, r2
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d001      	beq.n	80147c6 <find_volume+0x10e>
 80147c2:	2301      	movs	r3, #1
 80147c4:	e1f4      	b.n	8014bb0 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80147c6:	2300      	movs	r3, #0
 80147c8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80147ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80147cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80147ce:	f7ff ff1d 	bl	801460c <check_fs>
 80147d2:	4603      	mov	r3, r0
 80147d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80147d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80147dc:	2b02      	cmp	r3, #2
 80147de:	d14b      	bne.n	8014878 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80147e0:	2300      	movs	r3, #0
 80147e2:	643b      	str	r3, [r7, #64]	; 0x40
 80147e4:	e01f      	b.n	8014826 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80147e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147e8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80147ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80147ee:	011b      	lsls	r3, r3, #4
 80147f0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80147f4:	4413      	add	r3, r2
 80147f6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80147f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147fa:	3304      	adds	r3, #4
 80147fc:	781b      	ldrb	r3, [r3, #0]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d006      	beq.n	8014810 <find_volume+0x158>
 8014802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014804:	3308      	adds	r3, #8
 8014806:	4618      	mov	r0, r3
 8014808:	f7fe fc04 	bl	8013014 <ld_dword>
 801480c:	4602      	mov	r2, r0
 801480e:	e000      	b.n	8014812 <find_volume+0x15a>
 8014810:	2200      	movs	r2, #0
 8014812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014814:	009b      	lsls	r3, r3, #2
 8014816:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801481a:	440b      	add	r3, r1
 801481c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014822:	3301      	adds	r3, #1
 8014824:	643b      	str	r3, [r7, #64]	; 0x40
 8014826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014828:	2b03      	cmp	r3, #3
 801482a:	d9dc      	bls.n	80147e6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801482c:	2300      	movs	r3, #0
 801482e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8014830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014832:	2b00      	cmp	r3, #0
 8014834:	d002      	beq.n	801483c <find_volume+0x184>
 8014836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014838:	3b01      	subs	r3, #1
 801483a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801483c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801483e:	009b      	lsls	r3, r3, #2
 8014840:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014844:	4413      	add	r3, r2
 8014846:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801484a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801484c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801484e:	2b00      	cmp	r3, #0
 8014850:	d005      	beq.n	801485e <find_volume+0x1a6>
 8014852:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014854:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014856:	f7ff fed9 	bl	801460c <check_fs>
 801485a:	4603      	mov	r3, r0
 801485c:	e000      	b.n	8014860 <find_volume+0x1a8>
 801485e:	2303      	movs	r3, #3
 8014860:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014864:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014868:	2b01      	cmp	r3, #1
 801486a:	d905      	bls.n	8014878 <find_volume+0x1c0>
 801486c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801486e:	3301      	adds	r3, #1
 8014870:	643b      	str	r3, [r7, #64]	; 0x40
 8014872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014874:	2b03      	cmp	r3, #3
 8014876:	d9e1      	bls.n	801483c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014878:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801487c:	2b04      	cmp	r3, #4
 801487e:	d101      	bne.n	8014884 <find_volume+0x1cc>
 8014880:	2301      	movs	r3, #1
 8014882:	e195      	b.n	8014bb0 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014884:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014888:	2b01      	cmp	r3, #1
 801488a:	d901      	bls.n	8014890 <find_volume+0x1d8>
 801488c:	230d      	movs	r3, #13
 801488e:	e18f      	b.n	8014bb0 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8014890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014892:	3338      	adds	r3, #56	; 0x38
 8014894:	330b      	adds	r3, #11
 8014896:	4618      	mov	r0, r3
 8014898:	f7fe fba4 	bl	8012fe4 <ld_word>
 801489c:	4603      	mov	r3, r0
 801489e:	461a      	mov	r2, r3
 80148a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148a2:	899b      	ldrh	r3, [r3, #12]
 80148a4:	429a      	cmp	r2, r3
 80148a6:	d001      	beq.n	80148ac <find_volume+0x1f4>
 80148a8:	230d      	movs	r3, #13
 80148aa:	e181      	b.n	8014bb0 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80148ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148ae:	3338      	adds	r3, #56	; 0x38
 80148b0:	3316      	adds	r3, #22
 80148b2:	4618      	mov	r0, r3
 80148b4:	f7fe fb96 	bl	8012fe4 <ld_word>
 80148b8:	4603      	mov	r3, r0
 80148ba:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80148bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d106      	bne.n	80148d0 <find_volume+0x218>
 80148c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148c4:	3338      	adds	r3, #56	; 0x38
 80148c6:	3324      	adds	r3, #36	; 0x24
 80148c8:	4618      	mov	r0, r3
 80148ca:	f7fe fba3 	bl	8013014 <ld_dword>
 80148ce:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80148d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80148d4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80148d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148d8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80148dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148de:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80148e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148e2:	789b      	ldrb	r3, [r3, #2]
 80148e4:	2b01      	cmp	r3, #1
 80148e6:	d005      	beq.n	80148f4 <find_volume+0x23c>
 80148e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148ea:	789b      	ldrb	r3, [r3, #2]
 80148ec:	2b02      	cmp	r3, #2
 80148ee:	d001      	beq.n	80148f4 <find_volume+0x23c>
 80148f0:	230d      	movs	r3, #13
 80148f2:	e15d      	b.n	8014bb0 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80148f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148f6:	789b      	ldrb	r3, [r3, #2]
 80148f8:	461a      	mov	r2, r3
 80148fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148fc:	fb02 f303 	mul.w	r3, r2, r3
 8014900:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8014902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014904:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014908:	b29a      	uxth	r2, r3
 801490a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801490c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014910:	895b      	ldrh	r3, [r3, #10]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d008      	beq.n	8014928 <find_volume+0x270>
 8014916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014918:	895b      	ldrh	r3, [r3, #10]
 801491a:	461a      	mov	r2, r3
 801491c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801491e:	895b      	ldrh	r3, [r3, #10]
 8014920:	3b01      	subs	r3, #1
 8014922:	4013      	ands	r3, r2
 8014924:	2b00      	cmp	r3, #0
 8014926:	d001      	beq.n	801492c <find_volume+0x274>
 8014928:	230d      	movs	r3, #13
 801492a:	e141      	b.n	8014bb0 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801492c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801492e:	3338      	adds	r3, #56	; 0x38
 8014930:	3311      	adds	r3, #17
 8014932:	4618      	mov	r0, r3
 8014934:	f7fe fb56 	bl	8012fe4 <ld_word>
 8014938:	4603      	mov	r3, r0
 801493a:	461a      	mov	r2, r3
 801493c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801493e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014942:	891b      	ldrh	r3, [r3, #8]
 8014944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014946:	8992      	ldrh	r2, [r2, #12]
 8014948:	0952      	lsrs	r2, r2, #5
 801494a:	b292      	uxth	r2, r2
 801494c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014950:	fb02 f201 	mul.w	r2, r2, r1
 8014954:	1a9b      	subs	r3, r3, r2
 8014956:	b29b      	uxth	r3, r3
 8014958:	2b00      	cmp	r3, #0
 801495a:	d001      	beq.n	8014960 <find_volume+0x2a8>
 801495c:	230d      	movs	r3, #13
 801495e:	e127      	b.n	8014bb0 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8014960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014962:	3338      	adds	r3, #56	; 0x38
 8014964:	3313      	adds	r3, #19
 8014966:	4618      	mov	r0, r3
 8014968:	f7fe fb3c 	bl	8012fe4 <ld_word>
 801496c:	4603      	mov	r3, r0
 801496e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8014970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014972:	2b00      	cmp	r3, #0
 8014974:	d106      	bne.n	8014984 <find_volume+0x2cc>
 8014976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014978:	3338      	adds	r3, #56	; 0x38
 801497a:	3320      	adds	r3, #32
 801497c:	4618      	mov	r0, r3
 801497e:	f7fe fb49 	bl	8013014 <ld_dword>
 8014982:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8014984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014986:	3338      	adds	r3, #56	; 0x38
 8014988:	330e      	adds	r3, #14
 801498a:	4618      	mov	r0, r3
 801498c:	f7fe fb2a 	bl	8012fe4 <ld_word>
 8014990:	4603      	mov	r3, r0
 8014992:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014994:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014996:	2b00      	cmp	r3, #0
 8014998:	d104      	bne.n	80149a4 <find_volume+0x2ec>
 801499a:	230d      	movs	r3, #13
 801499c:	e108      	b.n	8014bb0 <find_volume+0x4f8>
 801499e:	bf00      	nop
 80149a0:	20047644 	.word	0x20047644

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80149a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80149a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80149a8:	4413      	add	r3, r2
 80149aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80149ac:	8911      	ldrh	r1, [r2, #8]
 80149ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80149b0:	8992      	ldrh	r2, [r2, #12]
 80149b2:	0952      	lsrs	r2, r2, #5
 80149b4:	b292      	uxth	r2, r2
 80149b6:	fbb1 f2f2 	udiv	r2, r1, r2
 80149ba:	b292      	uxth	r2, r2
 80149bc:	4413      	add	r3, r2
 80149be:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80149c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80149c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149c4:	429a      	cmp	r2, r3
 80149c6:	d201      	bcs.n	80149cc <find_volume+0x314>
 80149c8:	230d      	movs	r3, #13
 80149ca:	e0f1      	b.n	8014bb0 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80149cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80149ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149d0:	1ad3      	subs	r3, r2, r3
 80149d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80149d4:	8952      	ldrh	r2, [r2, #10]
 80149d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80149da:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80149dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d101      	bne.n	80149e6 <find_volume+0x32e>
 80149e2:	230d      	movs	r3, #13
 80149e4:	e0e4      	b.n	8014bb0 <find_volume+0x4f8>
		fmt = FS_FAT32;
 80149e6:	2303      	movs	r3, #3
 80149e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80149ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ee:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80149f2:	4293      	cmp	r3, r2
 80149f4:	d802      	bhi.n	80149fc <find_volume+0x344>
 80149f6:	2302      	movs	r3, #2
 80149f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80149fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149fe:	f640 72f5 	movw	r2, #4085	; 0xff5
 8014a02:	4293      	cmp	r3, r2
 8014a04:	d802      	bhi.n	8014a0c <find_volume+0x354>
 8014a06:	2301      	movs	r3, #1
 8014a08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a0e:	1c9a      	adds	r2, r3, #2
 8014a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a12:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8014a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014a18:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014a1a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a1e:	441a      	add	r2, r3
 8014a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a22:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8014a24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a28:	441a      	add	r2, r3
 8014a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a2c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8014a2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014a32:	2b03      	cmp	r3, #3
 8014a34:	d11e      	bne.n	8014a74 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a38:	3338      	adds	r3, #56	; 0x38
 8014a3a:	332a      	adds	r3, #42	; 0x2a
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	f7fe fad1 	bl	8012fe4 <ld_word>
 8014a42:	4603      	mov	r3, r0
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d001      	beq.n	8014a4c <find_volume+0x394>
 8014a48:	230d      	movs	r3, #13
 8014a4a:	e0b1      	b.n	8014bb0 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a4e:	891b      	ldrh	r3, [r3, #8]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d001      	beq.n	8014a58 <find_volume+0x3a0>
 8014a54:	230d      	movs	r3, #13
 8014a56:	e0ab      	b.n	8014bb0 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a5a:	3338      	adds	r3, #56	; 0x38
 8014a5c:	332c      	adds	r3, #44	; 0x2c
 8014a5e:	4618      	mov	r0, r3
 8014a60:	f7fe fad8 	bl	8013014 <ld_dword>
 8014a64:	4602      	mov	r2, r0
 8014a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a68:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a6c:	69db      	ldr	r3, [r3, #28]
 8014a6e:	009b      	lsls	r3, r3, #2
 8014a70:	647b      	str	r3, [r7, #68]	; 0x44
 8014a72:	e01f      	b.n	8014ab4 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a76:	891b      	ldrh	r3, [r3, #8]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d101      	bne.n	8014a80 <find_volume+0x3c8>
 8014a7c:	230d      	movs	r3, #13
 8014a7e:	e097      	b.n	8014bb0 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a86:	441a      	add	r2, r3
 8014a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a8a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014a8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014a90:	2b02      	cmp	r3, #2
 8014a92:	d103      	bne.n	8014a9c <find_volume+0x3e4>
 8014a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a96:	69db      	ldr	r3, [r3, #28]
 8014a98:	005b      	lsls	r3, r3, #1
 8014a9a:	e00a      	b.n	8014ab2 <find_volume+0x3fa>
 8014a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a9e:	69da      	ldr	r2, [r3, #28]
 8014aa0:	4613      	mov	r3, r2
 8014aa2:	005b      	lsls	r3, r3, #1
 8014aa4:	4413      	add	r3, r2
 8014aa6:	085a      	lsrs	r2, r3, #1
 8014aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aaa:	69db      	ldr	r3, [r3, #28]
 8014aac:	f003 0301 	and.w	r3, r3, #1
 8014ab0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014ab2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ab6:	6a1a      	ldr	r2, [r3, #32]
 8014ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aba:	899b      	ldrh	r3, [r3, #12]
 8014abc:	4619      	mov	r1, r3
 8014abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ac0:	440b      	add	r3, r1
 8014ac2:	3b01      	subs	r3, #1
 8014ac4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014ac6:	8989      	ldrh	r1, [r1, #12]
 8014ac8:	fbb3 f3f1 	udiv	r3, r3, r1
 8014acc:	429a      	cmp	r2, r3
 8014ace:	d201      	bcs.n	8014ad4 <find_volume+0x41c>
 8014ad0:	230d      	movs	r3, #13
 8014ad2:	e06d      	b.n	8014bb0 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8014ada:	615a      	str	r2, [r3, #20]
 8014adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ade:	695a      	ldr	r2, [r3, #20]
 8014ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ae2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8014ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ae6:	2280      	movs	r2, #128	; 0x80
 8014ae8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014aea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014aee:	2b03      	cmp	r3, #3
 8014af0:	d149      	bne.n	8014b86 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014af4:	3338      	adds	r3, #56	; 0x38
 8014af6:	3330      	adds	r3, #48	; 0x30
 8014af8:	4618      	mov	r0, r3
 8014afa:	f7fe fa73 	bl	8012fe4 <ld_word>
 8014afe:	4603      	mov	r3, r0
 8014b00:	2b01      	cmp	r3, #1
 8014b02:	d140      	bne.n	8014b86 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b06:	3301      	adds	r3, #1
 8014b08:	4619      	mov	r1, r3
 8014b0a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014b0c:	f7fe fd1a 	bl	8013544 <move_window>
 8014b10:	4603      	mov	r3, r0
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d137      	bne.n	8014b86 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8014b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b18:	2200      	movs	r2, #0
 8014b1a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b1e:	3338      	adds	r3, #56	; 0x38
 8014b20:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7fe fa5d 	bl	8012fe4 <ld_word>
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	461a      	mov	r2, r3
 8014b2e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014b32:	429a      	cmp	r2, r3
 8014b34:	d127      	bne.n	8014b86 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b38:	3338      	adds	r3, #56	; 0x38
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f7fe fa6a 	bl	8013014 <ld_dword>
 8014b40:	4602      	mov	r2, r0
 8014b42:	4b1d      	ldr	r3, [pc, #116]	; (8014bb8 <find_volume+0x500>)
 8014b44:	429a      	cmp	r2, r3
 8014b46:	d11e      	bne.n	8014b86 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b4a:	3338      	adds	r3, #56	; 0x38
 8014b4c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014b50:	4618      	mov	r0, r3
 8014b52:	f7fe fa5f 	bl	8013014 <ld_dword>
 8014b56:	4602      	mov	r2, r0
 8014b58:	4b18      	ldr	r3, [pc, #96]	; (8014bbc <find_volume+0x504>)
 8014b5a:	429a      	cmp	r2, r3
 8014b5c:	d113      	bne.n	8014b86 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b60:	3338      	adds	r3, #56	; 0x38
 8014b62:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8014b66:	4618      	mov	r0, r3
 8014b68:	f7fe fa54 	bl	8013014 <ld_dword>
 8014b6c:	4602      	mov	r2, r0
 8014b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b70:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b74:	3338      	adds	r3, #56	; 0x38
 8014b76:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	f7fe fa4a 	bl	8013014 <ld_dword>
 8014b80:	4602      	mov	r2, r0
 8014b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b84:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b88:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8014b8c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014b8e:	4b0c      	ldr	r3, [pc, #48]	; (8014bc0 <find_volume+0x508>)
 8014b90:	881b      	ldrh	r3, [r3, #0]
 8014b92:	3301      	adds	r3, #1
 8014b94:	b29a      	uxth	r2, r3
 8014b96:	4b0a      	ldr	r3, [pc, #40]	; (8014bc0 <find_volume+0x508>)
 8014b98:	801a      	strh	r2, [r3, #0]
 8014b9a:	4b09      	ldr	r3, [pc, #36]	; (8014bc0 <find_volume+0x508>)
 8014b9c:	881a      	ldrh	r2, [r3, #0]
 8014b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ba0:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8014ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ba4:	2200      	movs	r2, #0
 8014ba6:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014ba8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014baa:	f7fe fc63 	bl	8013474 <clear_lock>
#endif
	return FR_OK;
 8014bae:	2300      	movs	r3, #0
}
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	3758      	adds	r7, #88	; 0x58
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	bd80      	pop	{r7, pc}
 8014bb8:	41615252 	.word	0x41615252
 8014bbc:	61417272 	.word	0x61417272
 8014bc0:	20047648 	.word	0x20047648

08014bc4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b084      	sub	sp, #16
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]
 8014bcc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014bce:	2309      	movs	r3, #9
 8014bd0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d01c      	beq.n	8014c12 <validate+0x4e>
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d018      	beq.n	8014c12 <validate+0x4e>
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	781b      	ldrb	r3, [r3, #0]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d013      	beq.n	8014c12 <validate+0x4e>
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	889a      	ldrh	r2, [r3, #4]
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	88db      	ldrh	r3, [r3, #6]
 8014bf4:	429a      	cmp	r2, r3
 8014bf6:	d10c      	bne.n	8014c12 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	785b      	ldrb	r3, [r3, #1]
 8014bfe:	4618      	mov	r0, r3
 8014c00:	f7fe f952 	bl	8012ea8 <disk_status>
 8014c04:	4603      	mov	r3, r0
 8014c06:	f003 0301 	and.w	r3, r3, #1
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d101      	bne.n	8014c12 <validate+0x4e>
			res = FR_OK;
 8014c0e:	2300      	movs	r3, #0
 8014c10:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014c12:	7bfb      	ldrb	r3, [r7, #15]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d102      	bne.n	8014c1e <validate+0x5a>
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	e000      	b.n	8014c20 <validate+0x5c>
 8014c1e:	2300      	movs	r3, #0
 8014c20:	683a      	ldr	r2, [r7, #0]
 8014c22:	6013      	str	r3, [r2, #0]
	return res;
 8014c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c26:	4618      	mov	r0, r3
 8014c28:	3710      	adds	r7, #16
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	bd80      	pop	{r7, pc}
	...

08014c30 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b088      	sub	sp, #32
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	60f8      	str	r0, [r7, #12]
 8014c38:	60b9      	str	r1, [r7, #8]
 8014c3a:	4613      	mov	r3, r2
 8014c3c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014c3e:	68bb      	ldr	r3, [r7, #8]
 8014c40:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014c42:	f107 0310 	add.w	r3, r7, #16
 8014c46:	4618      	mov	r0, r3
 8014c48:	f7ff fc9b 	bl	8014582 <get_ldnumber>
 8014c4c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014c4e:	69fb      	ldr	r3, [r7, #28]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	da01      	bge.n	8014c58 <f_mount+0x28>
 8014c54:	230b      	movs	r3, #11
 8014c56:	e02b      	b.n	8014cb0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014c58:	4a17      	ldr	r2, [pc, #92]	; (8014cb8 <f_mount+0x88>)
 8014c5a:	69fb      	ldr	r3, [r7, #28]
 8014c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014c60:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014c62:	69bb      	ldr	r3, [r7, #24]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d005      	beq.n	8014c74 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014c68:	69b8      	ldr	r0, [r7, #24]
 8014c6a:	f7fe fc03 	bl	8013474 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014c6e:	69bb      	ldr	r3, [r7, #24]
 8014c70:	2200      	movs	r2, #0
 8014c72:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d002      	beq.n	8014c80 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	2200      	movs	r2, #0
 8014c7e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014c80:	68fa      	ldr	r2, [r7, #12]
 8014c82:	490d      	ldr	r1, [pc, #52]	; (8014cb8 <f_mount+0x88>)
 8014c84:	69fb      	ldr	r3, [r7, #28]
 8014c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d002      	beq.n	8014c96 <f_mount+0x66>
 8014c90:	79fb      	ldrb	r3, [r7, #7]
 8014c92:	2b01      	cmp	r3, #1
 8014c94:	d001      	beq.n	8014c9a <f_mount+0x6a>
 8014c96:	2300      	movs	r3, #0
 8014c98:	e00a      	b.n	8014cb0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014c9a:	f107 010c 	add.w	r1, r7, #12
 8014c9e:	f107 0308 	add.w	r3, r7, #8
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	f7ff fd07 	bl	80146b8 <find_volume>
 8014caa:	4603      	mov	r3, r0
 8014cac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	3720      	adds	r7, #32
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	bd80      	pop	{r7, pc}
 8014cb8:	20047644 	.word	0x20047644

08014cbc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b098      	sub	sp, #96	; 0x60
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	60f8      	str	r0, [r7, #12]
 8014cc4:	60b9      	str	r1, [r7, #8]
 8014cc6:	4613      	mov	r3, r2
 8014cc8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d101      	bne.n	8014cd4 <f_open+0x18>
 8014cd0:	2309      	movs	r3, #9
 8014cd2:	e1ba      	b.n	801504a <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014cd4:	79fb      	ldrb	r3, [r7, #7]
 8014cd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014cda:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014cdc:	79fa      	ldrb	r2, [r7, #7]
 8014cde:	f107 0110 	add.w	r1, r7, #16
 8014ce2:	f107 0308 	add.w	r3, r7, #8
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	f7ff fce6 	bl	80146b8 <find_volume>
 8014cec:	4603      	mov	r3, r0
 8014cee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8014cf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	f040 819e 	bne.w	8015038 <f_open+0x37c>
		dj.obj.fs = fs;
 8014cfc:	693b      	ldr	r3, [r7, #16]
 8014cfe:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014d00:	68ba      	ldr	r2, [r7, #8]
 8014d02:	f107 0314 	add.w	r3, r7, #20
 8014d06:	4611      	mov	r1, r2
 8014d08:	4618      	mov	r0, r3
 8014d0a:	f7ff fba5 	bl	8014458 <follow_path>
 8014d0e:	4603      	mov	r3, r0
 8014d10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014d14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d11a      	bne.n	8014d52 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014d1c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014d20:	b25b      	sxtb	r3, r3
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	da03      	bge.n	8014d2e <f_open+0x72>
				res = FR_INVALID_NAME;
 8014d26:	2306      	movs	r3, #6
 8014d28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014d2c:	e011      	b.n	8014d52 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014d2e:	79fb      	ldrb	r3, [r7, #7]
 8014d30:	f023 0301 	bic.w	r3, r3, #1
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	bf14      	ite	ne
 8014d38:	2301      	movne	r3, #1
 8014d3a:	2300      	moveq	r3, #0
 8014d3c:	b2db      	uxtb	r3, r3
 8014d3e:	461a      	mov	r2, r3
 8014d40:	f107 0314 	add.w	r3, r7, #20
 8014d44:	4611      	mov	r1, r2
 8014d46:	4618      	mov	r0, r3
 8014d48:	f7fe fa4c 	bl	80131e4 <chk_lock>
 8014d4c:	4603      	mov	r3, r0
 8014d4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014d52:	79fb      	ldrb	r3, [r7, #7]
 8014d54:	f003 031c 	and.w	r3, r3, #28
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d07e      	beq.n	8014e5a <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8014d5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d017      	beq.n	8014d94 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014d64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d68:	2b04      	cmp	r3, #4
 8014d6a:	d10e      	bne.n	8014d8a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014d6c:	f7fe fa96 	bl	801329c <enq_lock>
 8014d70:	4603      	mov	r3, r0
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d006      	beq.n	8014d84 <f_open+0xc8>
 8014d76:	f107 0314 	add.w	r3, r7, #20
 8014d7a:	4618      	mov	r0, r3
 8014d7c:	f7ff fa52 	bl	8014224 <dir_register>
 8014d80:	4603      	mov	r3, r0
 8014d82:	e000      	b.n	8014d86 <f_open+0xca>
 8014d84:	2312      	movs	r3, #18
 8014d86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014d8a:	79fb      	ldrb	r3, [r7, #7]
 8014d8c:	f043 0308 	orr.w	r3, r3, #8
 8014d90:	71fb      	strb	r3, [r7, #7]
 8014d92:	e010      	b.n	8014db6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014d94:	7ebb      	ldrb	r3, [r7, #26]
 8014d96:	f003 0311 	and.w	r3, r3, #17
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d003      	beq.n	8014da6 <f_open+0xea>
					res = FR_DENIED;
 8014d9e:	2307      	movs	r3, #7
 8014da0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014da4:	e007      	b.n	8014db6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014da6:	79fb      	ldrb	r3, [r7, #7]
 8014da8:	f003 0304 	and.w	r3, r3, #4
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d002      	beq.n	8014db6 <f_open+0xfa>
 8014db0:	2308      	movs	r3, #8
 8014db2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014db6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d167      	bne.n	8014e8e <f_open+0x1d2>
 8014dbe:	79fb      	ldrb	r3, [r7, #7]
 8014dc0:	f003 0308 	and.w	r3, r3, #8
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d062      	beq.n	8014e8e <f_open+0x1d2>
				dw = GET_FATTIME();
 8014dc8:	4ba2      	ldr	r3, [pc, #648]	; (8015054 <f_open+0x398>)
 8014dca:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dce:	330e      	adds	r3, #14
 8014dd0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014dd2:	4618      	mov	r0, r3
 8014dd4:	f7fe f95c 	bl	8013090 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dda:	3316      	adds	r3, #22
 8014ddc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014dde:	4618      	mov	r0, r3
 8014de0:	f7fe f956 	bl	8013090 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014de6:	330b      	adds	r3, #11
 8014de8:	2220      	movs	r2, #32
 8014dea:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014dec:	693b      	ldr	r3, [r7, #16]
 8014dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014df0:	4611      	mov	r1, r2
 8014df2:	4618      	mov	r0, r3
 8014df4:	f7ff f925 	bl	8014042 <ld_clust>
 8014df8:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014dfa:	693b      	ldr	r3, [r7, #16]
 8014dfc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014dfe:	2200      	movs	r2, #0
 8014e00:	4618      	mov	r0, r3
 8014e02:	f7ff f93d 	bl	8014080 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e08:	331c      	adds	r3, #28
 8014e0a:	2100      	movs	r1, #0
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	f7fe f93f 	bl	8013090 <st_dword>
					fs->wflag = 1;
 8014e12:	693b      	ldr	r3, [r7, #16]
 8014e14:	2201      	movs	r2, #1
 8014e16:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d037      	beq.n	8014e8e <f_open+0x1d2>
						dw = fs->winsect;
 8014e1e:	693b      	ldr	r3, [r7, #16]
 8014e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e22:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8014e24:	f107 0314 	add.w	r3, r7, #20
 8014e28:	2200      	movs	r2, #0
 8014e2a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	f7fe fe2d 	bl	8013a8c <remove_chain>
 8014e32:	4603      	mov	r3, r0
 8014e34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8014e38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d126      	bne.n	8014e8e <f_open+0x1d2>
							res = move_window(fs, dw);
 8014e40:	693b      	ldr	r3, [r7, #16]
 8014e42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014e44:	4618      	mov	r0, r3
 8014e46:	f7fe fb7d 	bl	8013544 <move_window>
 8014e4a:	4603      	mov	r3, r0
 8014e4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014e50:	693b      	ldr	r3, [r7, #16]
 8014e52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014e54:	3a01      	subs	r2, #1
 8014e56:	611a      	str	r2, [r3, #16]
 8014e58:	e019      	b.n	8014e8e <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014e5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d115      	bne.n	8014e8e <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014e62:	7ebb      	ldrb	r3, [r7, #26]
 8014e64:	f003 0310 	and.w	r3, r3, #16
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d003      	beq.n	8014e74 <f_open+0x1b8>
					res = FR_NO_FILE;
 8014e6c:	2304      	movs	r3, #4
 8014e6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014e72:	e00c      	b.n	8014e8e <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014e74:	79fb      	ldrb	r3, [r7, #7]
 8014e76:	f003 0302 	and.w	r3, r3, #2
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d007      	beq.n	8014e8e <f_open+0x1d2>
 8014e7e:	7ebb      	ldrb	r3, [r7, #26]
 8014e80:	f003 0301 	and.w	r3, r3, #1
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d002      	beq.n	8014e8e <f_open+0x1d2>
						res = FR_DENIED;
 8014e88:	2307      	movs	r3, #7
 8014e8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8014e8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d128      	bne.n	8014ee8 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014e96:	79fb      	ldrb	r3, [r7, #7]
 8014e98:	f003 0308 	and.w	r3, r3, #8
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d003      	beq.n	8014ea8 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8014ea0:	79fb      	ldrb	r3, [r7, #7]
 8014ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ea6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014ea8:	693b      	ldr	r3, [r7, #16]
 8014eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014eb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014eb2:	68fb      	ldr	r3, [r7, #12]
 8014eb4:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014eb6:	79fb      	ldrb	r3, [r7, #7]
 8014eb8:	f023 0301 	bic.w	r3, r3, #1
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	bf14      	ite	ne
 8014ec0:	2301      	movne	r3, #1
 8014ec2:	2300      	moveq	r3, #0
 8014ec4:	b2db      	uxtb	r3, r3
 8014ec6:	461a      	mov	r2, r3
 8014ec8:	f107 0314 	add.w	r3, r7, #20
 8014ecc:	4611      	mov	r1, r2
 8014ece:	4618      	mov	r0, r3
 8014ed0:	f7fe fa06 	bl	80132e0 <inc_lock>
 8014ed4:	4602      	mov	r2, r0
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	691b      	ldr	r3, [r3, #16]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d102      	bne.n	8014ee8 <f_open+0x22c>
 8014ee2:	2302      	movs	r3, #2
 8014ee4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014ee8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	f040 80a3 	bne.w	8015038 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014ef2:	693b      	ldr	r3, [r7, #16]
 8014ef4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ef6:	4611      	mov	r1, r2
 8014ef8:	4618      	mov	r0, r3
 8014efa:	f7ff f8a2 	bl	8014042 <ld_clust>
 8014efe:	4602      	mov	r2, r0
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f06:	331c      	adds	r3, #28
 8014f08:	4618      	mov	r0, r3
 8014f0a:	f7fe f883 	bl	8013014 <ld_dword>
 8014f0e:	4602      	mov	r2, r0
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	2200      	movs	r2, #0
 8014f18:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014f1a:	693a      	ldr	r2, [r7, #16]
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014f20:	693b      	ldr	r3, [r7, #16]
 8014f22:	88da      	ldrh	r2, [r3, #6]
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	79fa      	ldrb	r2, [r7, #7]
 8014f2c:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	2200      	movs	r2, #0
 8014f32:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	2200      	movs	r2, #0
 8014f38:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	3330      	adds	r3, #48	; 0x30
 8014f44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014f48:	2100      	movs	r1, #0
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	f7fe f8ed 	bl	801312a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014f50:	79fb      	ldrb	r3, [r7, #7]
 8014f52:	f003 0320 	and.w	r3, r3, #32
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d06e      	beq.n	8015038 <f_open+0x37c>
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	68db      	ldr	r3, [r3, #12]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d06a      	beq.n	8015038 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	68da      	ldr	r2, [r3, #12]
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014f6a:	693b      	ldr	r3, [r7, #16]
 8014f6c:	895b      	ldrh	r3, [r3, #10]
 8014f6e:	461a      	mov	r2, r3
 8014f70:	693b      	ldr	r3, [r7, #16]
 8014f72:	899b      	ldrh	r3, [r3, #12]
 8014f74:	fb03 f302 	mul.w	r3, r3, r2
 8014f78:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	689b      	ldr	r3, [r3, #8]
 8014f7e:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	68db      	ldr	r3, [r3, #12]
 8014f84:	657b      	str	r3, [r7, #84]	; 0x54
 8014f86:	e016      	b.n	8014fb6 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	f7fe fb96 	bl	80136be <get_fat>
 8014f92:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8014f94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014f96:	2b01      	cmp	r3, #1
 8014f98:	d802      	bhi.n	8014fa0 <f_open+0x2e4>
 8014f9a:	2302      	movs	r3, #2
 8014f9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014fa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fa6:	d102      	bne.n	8014fae <f_open+0x2f2>
 8014fa8:	2301      	movs	r3, #1
 8014faa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014fae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014fb2:	1ad3      	subs	r3, r2, r3
 8014fb4:	657b      	str	r3, [r7, #84]	; 0x54
 8014fb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d103      	bne.n	8014fc6 <f_open+0x30a>
 8014fbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014fc2:	429a      	cmp	r2, r3
 8014fc4:	d8e0      	bhi.n	8014f88 <f_open+0x2cc>
				}
				fp->clust = clst;
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014fca:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014fcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d131      	bne.n	8015038 <f_open+0x37c>
 8014fd4:	693b      	ldr	r3, [r7, #16]
 8014fd6:	899b      	ldrh	r3, [r3, #12]
 8014fd8:	461a      	mov	r2, r3
 8014fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014fdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8014fe0:	fb02 f201 	mul.w	r2, r2, r1
 8014fe4:	1a9b      	subs	r3, r3, r2
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d026      	beq.n	8015038 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014fea:	693b      	ldr	r3, [r7, #16]
 8014fec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014fee:	4618      	mov	r0, r3
 8014ff0:	f7fe fb46 	bl	8013680 <clust2sect>
 8014ff4:	6478      	str	r0, [r7, #68]	; 0x44
 8014ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d103      	bne.n	8015004 <f_open+0x348>
						res = FR_INT_ERR;
 8014ffc:	2302      	movs	r3, #2
 8014ffe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8015002:	e019      	b.n	8015038 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8015004:	693b      	ldr	r3, [r7, #16]
 8015006:	899b      	ldrh	r3, [r3, #12]
 8015008:	461a      	mov	r2, r3
 801500a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801500c:	fbb3 f2f2 	udiv	r2, r3, r2
 8015010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015012:	441a      	add	r2, r3
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8015018:	693b      	ldr	r3, [r7, #16]
 801501a:	7858      	ldrb	r0, [r3, #1]
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	6a1a      	ldr	r2, [r3, #32]
 8015026:	2301      	movs	r3, #1
 8015028:	f7fd ff7e 	bl	8012f28 <disk_read>
 801502c:	4603      	mov	r3, r0
 801502e:	2b00      	cmp	r3, #0
 8015030:	d002      	beq.n	8015038 <f_open+0x37c>
 8015032:	2301      	movs	r3, #1
 8015034:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8015038:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801503c:	2b00      	cmp	r3, #0
 801503e:	d002      	beq.n	8015046 <f_open+0x38a>
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	2200      	movs	r2, #0
 8015044:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015046:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801504a:	4618      	mov	r0, r3
 801504c:	3760      	adds	r7, #96	; 0x60
 801504e:	46bd      	mov	sp, r7
 8015050:	bd80      	pop	{r7, pc}
 8015052:	bf00      	nop
 8015054:	274a0000 	.word	0x274a0000

08015058 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8015058:	b580      	push	{r7, lr}
 801505a:	b08e      	sub	sp, #56	; 0x38
 801505c:	af00      	add	r7, sp, #0
 801505e:	60f8      	str	r0, [r7, #12]
 8015060:	60b9      	str	r1, [r7, #8]
 8015062:	607a      	str	r2, [r7, #4]
 8015064:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8015066:	68bb      	ldr	r3, [r7, #8]
 8015068:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801506a:	683b      	ldr	r3, [r7, #0]
 801506c:	2200      	movs	r2, #0
 801506e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	f107 0214 	add.w	r2, r7, #20
 8015076:	4611      	mov	r1, r2
 8015078:	4618      	mov	r0, r3
 801507a:	f7ff fda3 	bl	8014bc4 <validate>
 801507e:	4603      	mov	r3, r0
 8015080:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8015084:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015088:	2b00      	cmp	r3, #0
 801508a:	d107      	bne.n	801509c <f_read+0x44>
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	7d5b      	ldrb	r3, [r3, #21]
 8015090:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015094:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015098:	2b00      	cmp	r3, #0
 801509a:	d002      	beq.n	80150a2 <f_read+0x4a>
 801509c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80150a0:	e135      	b.n	801530e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	7d1b      	ldrb	r3, [r3, #20]
 80150a6:	f003 0301 	and.w	r3, r3, #1
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d101      	bne.n	80150b2 <f_read+0x5a>
 80150ae:	2307      	movs	r3, #7
 80150b0:	e12d      	b.n	801530e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	68da      	ldr	r2, [r3, #12]
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	699b      	ldr	r3, [r3, #24]
 80150ba:	1ad3      	subs	r3, r2, r3
 80150bc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80150be:	687a      	ldr	r2, [r7, #4]
 80150c0:	6a3b      	ldr	r3, [r7, #32]
 80150c2:	429a      	cmp	r2, r3
 80150c4:	f240 811e 	bls.w	8015304 <f_read+0x2ac>
 80150c8:	6a3b      	ldr	r3, [r7, #32]
 80150ca:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80150cc:	e11a      	b.n	8015304 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	699b      	ldr	r3, [r3, #24]
 80150d2:	697a      	ldr	r2, [r7, #20]
 80150d4:	8992      	ldrh	r2, [r2, #12]
 80150d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80150da:	fb02 f201 	mul.w	r2, r2, r1
 80150de:	1a9b      	subs	r3, r3, r2
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	f040 80d5 	bne.w	8015290 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	699b      	ldr	r3, [r3, #24]
 80150ea:	697a      	ldr	r2, [r7, #20]
 80150ec:	8992      	ldrh	r2, [r2, #12]
 80150ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80150f2:	697a      	ldr	r2, [r7, #20]
 80150f4:	8952      	ldrh	r2, [r2, #10]
 80150f6:	3a01      	subs	r2, #1
 80150f8:	4013      	ands	r3, r2
 80150fa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80150fc:	69fb      	ldr	r3, [r7, #28]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d12f      	bne.n	8015162 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	699b      	ldr	r3, [r3, #24]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d103      	bne.n	8015112 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	689b      	ldr	r3, [r3, #8]
 801510e:	633b      	str	r3, [r7, #48]	; 0x30
 8015110:	e013      	b.n	801513a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015116:	2b00      	cmp	r3, #0
 8015118:	d007      	beq.n	801512a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	699b      	ldr	r3, [r3, #24]
 801511e:	4619      	mov	r1, r3
 8015120:	68f8      	ldr	r0, [r7, #12]
 8015122:	f7fe fdb0 	bl	8013c86 <clmt_clust>
 8015126:	6338      	str	r0, [r7, #48]	; 0x30
 8015128:	e007      	b.n	801513a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801512a:	68fa      	ldr	r2, [r7, #12]
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	69db      	ldr	r3, [r3, #28]
 8015130:	4619      	mov	r1, r3
 8015132:	4610      	mov	r0, r2
 8015134:	f7fe fac3 	bl	80136be <get_fat>
 8015138:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801513c:	2b01      	cmp	r3, #1
 801513e:	d804      	bhi.n	801514a <f_read+0xf2>
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	2202      	movs	r2, #2
 8015144:	755a      	strb	r2, [r3, #21]
 8015146:	2302      	movs	r3, #2
 8015148:	e0e1      	b.n	801530e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801514c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015150:	d104      	bne.n	801515c <f_read+0x104>
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	2201      	movs	r2, #1
 8015156:	755a      	strb	r2, [r3, #21]
 8015158:	2301      	movs	r3, #1
 801515a:	e0d8      	b.n	801530e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015160:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8015162:	697a      	ldr	r2, [r7, #20]
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	69db      	ldr	r3, [r3, #28]
 8015168:	4619      	mov	r1, r3
 801516a:	4610      	mov	r0, r2
 801516c:	f7fe fa88 	bl	8013680 <clust2sect>
 8015170:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8015172:	69bb      	ldr	r3, [r7, #24]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d104      	bne.n	8015182 <f_read+0x12a>
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	2202      	movs	r2, #2
 801517c:	755a      	strb	r2, [r3, #21]
 801517e:	2302      	movs	r3, #2
 8015180:	e0c5      	b.n	801530e <f_read+0x2b6>
			sect += csect;
 8015182:	69ba      	ldr	r2, [r7, #24]
 8015184:	69fb      	ldr	r3, [r7, #28]
 8015186:	4413      	add	r3, r2
 8015188:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801518a:	697b      	ldr	r3, [r7, #20]
 801518c:	899b      	ldrh	r3, [r3, #12]
 801518e:	461a      	mov	r2, r3
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	fbb3 f3f2 	udiv	r3, r3, r2
 8015196:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8015198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801519a:	2b00      	cmp	r3, #0
 801519c:	d041      	beq.n	8015222 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801519e:	69fa      	ldr	r2, [r7, #28]
 80151a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151a2:	4413      	add	r3, r2
 80151a4:	697a      	ldr	r2, [r7, #20]
 80151a6:	8952      	ldrh	r2, [r2, #10]
 80151a8:	4293      	cmp	r3, r2
 80151aa:	d905      	bls.n	80151b8 <f_read+0x160>
					cc = fs->csize - csect;
 80151ac:	697b      	ldr	r3, [r7, #20]
 80151ae:	895b      	ldrh	r3, [r3, #10]
 80151b0:	461a      	mov	r2, r3
 80151b2:	69fb      	ldr	r3, [r7, #28]
 80151b4:	1ad3      	subs	r3, r2, r3
 80151b6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80151b8:	697b      	ldr	r3, [r7, #20]
 80151ba:	7858      	ldrb	r0, [r3, #1]
 80151bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151be:	69ba      	ldr	r2, [r7, #24]
 80151c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80151c2:	f7fd feb1 	bl	8012f28 <disk_read>
 80151c6:	4603      	mov	r3, r0
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d004      	beq.n	80151d6 <f_read+0x17e>
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	2201      	movs	r2, #1
 80151d0:	755a      	strb	r2, [r3, #21]
 80151d2:	2301      	movs	r3, #1
 80151d4:	e09b      	b.n	801530e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	7d1b      	ldrb	r3, [r3, #20]
 80151da:	b25b      	sxtb	r3, r3
 80151dc:	2b00      	cmp	r3, #0
 80151de:	da18      	bge.n	8015212 <f_read+0x1ba>
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	6a1a      	ldr	r2, [r3, #32]
 80151e4:	69bb      	ldr	r3, [r7, #24]
 80151e6:	1ad3      	subs	r3, r2, r3
 80151e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80151ea:	429a      	cmp	r2, r3
 80151ec:	d911      	bls.n	8015212 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	6a1a      	ldr	r2, [r3, #32]
 80151f2:	69bb      	ldr	r3, [r7, #24]
 80151f4:	1ad3      	subs	r3, r2, r3
 80151f6:	697a      	ldr	r2, [r7, #20]
 80151f8:	8992      	ldrh	r2, [r2, #12]
 80151fa:	fb02 f303 	mul.w	r3, r2, r3
 80151fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015200:	18d0      	adds	r0, r2, r3
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015208:	697b      	ldr	r3, [r7, #20]
 801520a:	899b      	ldrh	r3, [r3, #12]
 801520c:	461a      	mov	r2, r3
 801520e:	f7fd ff6b 	bl	80130e8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8015212:	697b      	ldr	r3, [r7, #20]
 8015214:	899b      	ldrh	r3, [r3, #12]
 8015216:	461a      	mov	r2, r3
 8015218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801521a:	fb02 f303 	mul.w	r3, r2, r3
 801521e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8015220:	e05c      	b.n	80152dc <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	6a1b      	ldr	r3, [r3, #32]
 8015226:	69ba      	ldr	r2, [r7, #24]
 8015228:	429a      	cmp	r2, r3
 801522a:	d02e      	beq.n	801528a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	7d1b      	ldrb	r3, [r3, #20]
 8015230:	b25b      	sxtb	r3, r3
 8015232:	2b00      	cmp	r3, #0
 8015234:	da18      	bge.n	8015268 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015236:	697b      	ldr	r3, [r7, #20]
 8015238:	7858      	ldrb	r0, [r3, #1]
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	6a1a      	ldr	r2, [r3, #32]
 8015244:	2301      	movs	r3, #1
 8015246:	f7fd fe8f 	bl	8012f68 <disk_write>
 801524a:	4603      	mov	r3, r0
 801524c:	2b00      	cmp	r3, #0
 801524e:	d004      	beq.n	801525a <f_read+0x202>
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	2201      	movs	r2, #1
 8015254:	755a      	strb	r2, [r3, #21]
 8015256:	2301      	movs	r3, #1
 8015258:	e059      	b.n	801530e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	7d1b      	ldrb	r3, [r3, #20]
 801525e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015262:	b2da      	uxtb	r2, r3
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8015268:	697b      	ldr	r3, [r7, #20]
 801526a:	7858      	ldrb	r0, [r3, #1]
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015272:	2301      	movs	r3, #1
 8015274:	69ba      	ldr	r2, [r7, #24]
 8015276:	f7fd fe57 	bl	8012f28 <disk_read>
 801527a:	4603      	mov	r3, r0
 801527c:	2b00      	cmp	r3, #0
 801527e:	d004      	beq.n	801528a <f_read+0x232>
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	2201      	movs	r2, #1
 8015284:	755a      	strb	r2, [r3, #21]
 8015286:	2301      	movs	r3, #1
 8015288:	e041      	b.n	801530e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	69ba      	ldr	r2, [r7, #24]
 801528e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015290:	697b      	ldr	r3, [r7, #20]
 8015292:	899b      	ldrh	r3, [r3, #12]
 8015294:	4618      	mov	r0, r3
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	699b      	ldr	r3, [r3, #24]
 801529a:	697a      	ldr	r2, [r7, #20]
 801529c:	8992      	ldrh	r2, [r2, #12]
 801529e:	fbb3 f1f2 	udiv	r1, r3, r2
 80152a2:	fb02 f201 	mul.w	r2, r2, r1
 80152a6:	1a9b      	subs	r3, r3, r2
 80152a8:	1ac3      	subs	r3, r0, r3
 80152aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80152ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	429a      	cmp	r2, r3
 80152b2:	d901      	bls.n	80152b8 <f_read+0x260>
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	699b      	ldr	r3, [r3, #24]
 80152c2:	697a      	ldr	r2, [r7, #20]
 80152c4:	8992      	ldrh	r2, [r2, #12]
 80152c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80152ca:	fb02 f200 	mul.w	r2, r2, r0
 80152ce:	1a9b      	subs	r3, r3, r2
 80152d0:	440b      	add	r3, r1
 80152d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80152d4:	4619      	mov	r1, r3
 80152d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80152d8:	f7fd ff06 	bl	80130e8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80152dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80152de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152e0:	4413      	add	r3, r2
 80152e2:	627b      	str	r3, [r7, #36]	; 0x24
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	699a      	ldr	r2, [r3, #24]
 80152e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152ea:	441a      	add	r2, r3
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	619a      	str	r2, [r3, #24]
 80152f0:	683b      	ldr	r3, [r7, #0]
 80152f2:	681a      	ldr	r2, [r3, #0]
 80152f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152f6:	441a      	add	r2, r3
 80152f8:	683b      	ldr	r3, [r7, #0]
 80152fa:	601a      	str	r2, [r3, #0]
 80152fc:	687a      	ldr	r2, [r7, #4]
 80152fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015300:	1ad3      	subs	r3, r2, r3
 8015302:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	2b00      	cmp	r3, #0
 8015308:	f47f aee1 	bne.w	80150ce <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801530c:	2300      	movs	r3, #0
}
 801530e:	4618      	mov	r0, r3
 8015310:	3738      	adds	r7, #56	; 0x38
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}

08015316 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8015316:	b580      	push	{r7, lr}
 8015318:	b08c      	sub	sp, #48	; 0x30
 801531a:	af00      	add	r7, sp, #0
 801531c:	60f8      	str	r0, [r7, #12]
 801531e:	60b9      	str	r1, [r7, #8]
 8015320:	607a      	str	r2, [r7, #4]
 8015322:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8015324:	68bb      	ldr	r3, [r7, #8]
 8015326:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8015328:	683b      	ldr	r3, [r7, #0]
 801532a:	2200      	movs	r2, #0
 801532c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	f107 0210 	add.w	r2, r7, #16
 8015334:	4611      	mov	r1, r2
 8015336:	4618      	mov	r0, r3
 8015338:	f7ff fc44 	bl	8014bc4 <validate>
 801533c:	4603      	mov	r3, r0
 801533e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8015342:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015346:	2b00      	cmp	r3, #0
 8015348:	d107      	bne.n	801535a <f_write+0x44>
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	7d5b      	ldrb	r3, [r3, #21]
 801534e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015352:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015356:	2b00      	cmp	r3, #0
 8015358:	d002      	beq.n	8015360 <f_write+0x4a>
 801535a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801535e:	e16a      	b.n	8015636 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	7d1b      	ldrb	r3, [r3, #20]
 8015364:	f003 0302 	and.w	r3, r3, #2
 8015368:	2b00      	cmp	r3, #0
 801536a:	d101      	bne.n	8015370 <f_write+0x5a>
 801536c:	2307      	movs	r3, #7
 801536e:	e162      	b.n	8015636 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	699a      	ldr	r2, [r3, #24]
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	441a      	add	r2, r3
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	699b      	ldr	r3, [r3, #24]
 801537c:	429a      	cmp	r2, r3
 801537e:	f080 814c 	bcs.w	801561a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	699b      	ldr	r3, [r3, #24]
 8015386:	43db      	mvns	r3, r3
 8015388:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801538a:	e146      	b.n	801561a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	699b      	ldr	r3, [r3, #24]
 8015390:	693a      	ldr	r2, [r7, #16]
 8015392:	8992      	ldrh	r2, [r2, #12]
 8015394:	fbb3 f1f2 	udiv	r1, r3, r2
 8015398:	fb02 f201 	mul.w	r2, r2, r1
 801539c:	1a9b      	subs	r3, r3, r2
 801539e:	2b00      	cmp	r3, #0
 80153a0:	f040 80f1 	bne.w	8015586 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	699b      	ldr	r3, [r3, #24]
 80153a8:	693a      	ldr	r2, [r7, #16]
 80153aa:	8992      	ldrh	r2, [r2, #12]
 80153ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80153b0:	693a      	ldr	r2, [r7, #16]
 80153b2:	8952      	ldrh	r2, [r2, #10]
 80153b4:	3a01      	subs	r2, #1
 80153b6:	4013      	ands	r3, r2
 80153b8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80153ba:	69bb      	ldr	r3, [r7, #24]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d143      	bne.n	8015448 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	699b      	ldr	r3, [r3, #24]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d10c      	bne.n	80153e2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	689b      	ldr	r3, [r3, #8]
 80153cc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80153ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d11a      	bne.n	801540a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	2100      	movs	r1, #0
 80153d8:	4618      	mov	r0, r3
 80153da:	f7fe fbbc 	bl	8013b56 <create_chain>
 80153de:	62b8      	str	r0, [r7, #40]	; 0x28
 80153e0:	e013      	b.n	801540a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d007      	beq.n	80153fa <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	699b      	ldr	r3, [r3, #24]
 80153ee:	4619      	mov	r1, r3
 80153f0:	68f8      	ldr	r0, [r7, #12]
 80153f2:	f7fe fc48 	bl	8013c86 <clmt_clust>
 80153f6:	62b8      	str	r0, [r7, #40]	; 0x28
 80153f8:	e007      	b.n	801540a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80153fa:	68fa      	ldr	r2, [r7, #12]
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	69db      	ldr	r3, [r3, #28]
 8015400:	4619      	mov	r1, r3
 8015402:	4610      	mov	r0, r2
 8015404:	f7fe fba7 	bl	8013b56 <create_chain>
 8015408:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801540a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801540c:	2b00      	cmp	r3, #0
 801540e:	f000 8109 	beq.w	8015624 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015414:	2b01      	cmp	r3, #1
 8015416:	d104      	bne.n	8015422 <f_write+0x10c>
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	2202      	movs	r2, #2
 801541c:	755a      	strb	r2, [r3, #21]
 801541e:	2302      	movs	r3, #2
 8015420:	e109      	b.n	8015636 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015428:	d104      	bne.n	8015434 <f_write+0x11e>
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	2201      	movs	r2, #1
 801542e:	755a      	strb	r2, [r3, #21]
 8015430:	2301      	movs	r3, #1
 8015432:	e100      	b.n	8015636 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015438:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	689b      	ldr	r3, [r3, #8]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d102      	bne.n	8015448 <f_write+0x132>
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015446:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	7d1b      	ldrb	r3, [r3, #20]
 801544c:	b25b      	sxtb	r3, r3
 801544e:	2b00      	cmp	r3, #0
 8015450:	da18      	bge.n	8015484 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015452:	693b      	ldr	r3, [r7, #16]
 8015454:	7858      	ldrb	r0, [r3, #1]
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	6a1a      	ldr	r2, [r3, #32]
 8015460:	2301      	movs	r3, #1
 8015462:	f7fd fd81 	bl	8012f68 <disk_write>
 8015466:	4603      	mov	r3, r0
 8015468:	2b00      	cmp	r3, #0
 801546a:	d004      	beq.n	8015476 <f_write+0x160>
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	2201      	movs	r2, #1
 8015470:	755a      	strb	r2, [r3, #21]
 8015472:	2301      	movs	r3, #1
 8015474:	e0df      	b.n	8015636 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	7d1b      	ldrb	r3, [r3, #20]
 801547a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801547e:	b2da      	uxtb	r2, r3
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8015484:	693a      	ldr	r2, [r7, #16]
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	69db      	ldr	r3, [r3, #28]
 801548a:	4619      	mov	r1, r3
 801548c:	4610      	mov	r0, r2
 801548e:	f7fe f8f7 	bl	8013680 <clust2sect>
 8015492:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8015494:	697b      	ldr	r3, [r7, #20]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d104      	bne.n	80154a4 <f_write+0x18e>
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	2202      	movs	r2, #2
 801549e:	755a      	strb	r2, [r3, #21]
 80154a0:	2302      	movs	r3, #2
 80154a2:	e0c8      	b.n	8015636 <f_write+0x320>
			sect += csect;
 80154a4:	697a      	ldr	r2, [r7, #20]
 80154a6:	69bb      	ldr	r3, [r7, #24]
 80154a8:	4413      	add	r3, r2
 80154aa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80154ac:	693b      	ldr	r3, [r7, #16]
 80154ae:	899b      	ldrh	r3, [r3, #12]
 80154b0:	461a      	mov	r2, r3
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80154b8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80154ba:	6a3b      	ldr	r3, [r7, #32]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d043      	beq.n	8015548 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80154c0:	69ba      	ldr	r2, [r7, #24]
 80154c2:	6a3b      	ldr	r3, [r7, #32]
 80154c4:	4413      	add	r3, r2
 80154c6:	693a      	ldr	r2, [r7, #16]
 80154c8:	8952      	ldrh	r2, [r2, #10]
 80154ca:	4293      	cmp	r3, r2
 80154cc:	d905      	bls.n	80154da <f_write+0x1c4>
					cc = fs->csize - csect;
 80154ce:	693b      	ldr	r3, [r7, #16]
 80154d0:	895b      	ldrh	r3, [r3, #10]
 80154d2:	461a      	mov	r2, r3
 80154d4:	69bb      	ldr	r3, [r7, #24]
 80154d6:	1ad3      	subs	r3, r2, r3
 80154d8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80154da:	693b      	ldr	r3, [r7, #16]
 80154dc:	7858      	ldrb	r0, [r3, #1]
 80154de:	6a3b      	ldr	r3, [r7, #32]
 80154e0:	697a      	ldr	r2, [r7, #20]
 80154e2:	69f9      	ldr	r1, [r7, #28]
 80154e4:	f7fd fd40 	bl	8012f68 <disk_write>
 80154e8:	4603      	mov	r3, r0
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d004      	beq.n	80154f8 <f_write+0x1e2>
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	2201      	movs	r2, #1
 80154f2:	755a      	strb	r2, [r3, #21]
 80154f4:	2301      	movs	r3, #1
 80154f6:	e09e      	b.n	8015636 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	6a1a      	ldr	r2, [r3, #32]
 80154fc:	697b      	ldr	r3, [r7, #20]
 80154fe:	1ad3      	subs	r3, r2, r3
 8015500:	6a3a      	ldr	r2, [r7, #32]
 8015502:	429a      	cmp	r2, r3
 8015504:	d918      	bls.n	8015538 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	6a1a      	ldr	r2, [r3, #32]
 8015510:	697b      	ldr	r3, [r7, #20]
 8015512:	1ad3      	subs	r3, r2, r3
 8015514:	693a      	ldr	r2, [r7, #16]
 8015516:	8992      	ldrh	r2, [r2, #12]
 8015518:	fb02 f303 	mul.w	r3, r2, r3
 801551c:	69fa      	ldr	r2, [r7, #28]
 801551e:	18d1      	adds	r1, r2, r3
 8015520:	693b      	ldr	r3, [r7, #16]
 8015522:	899b      	ldrh	r3, [r3, #12]
 8015524:	461a      	mov	r2, r3
 8015526:	f7fd fddf 	bl	80130e8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	7d1b      	ldrb	r3, [r3, #20]
 801552e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015532:	b2da      	uxtb	r2, r3
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8015538:	693b      	ldr	r3, [r7, #16]
 801553a:	899b      	ldrh	r3, [r3, #12]
 801553c:	461a      	mov	r2, r3
 801553e:	6a3b      	ldr	r3, [r7, #32]
 8015540:	fb02 f303 	mul.w	r3, r2, r3
 8015544:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8015546:	e04b      	b.n	80155e0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	6a1b      	ldr	r3, [r3, #32]
 801554c:	697a      	ldr	r2, [r7, #20]
 801554e:	429a      	cmp	r2, r3
 8015550:	d016      	beq.n	8015580 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	699a      	ldr	r2, [r3, #24]
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801555a:	429a      	cmp	r2, r3
 801555c:	d210      	bcs.n	8015580 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801555e:	693b      	ldr	r3, [r7, #16]
 8015560:	7858      	ldrb	r0, [r3, #1]
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015568:	2301      	movs	r3, #1
 801556a:	697a      	ldr	r2, [r7, #20]
 801556c:	f7fd fcdc 	bl	8012f28 <disk_read>
 8015570:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8015572:	2b00      	cmp	r3, #0
 8015574:	d004      	beq.n	8015580 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	2201      	movs	r2, #1
 801557a:	755a      	strb	r2, [r3, #21]
 801557c:	2301      	movs	r3, #1
 801557e:	e05a      	b.n	8015636 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	697a      	ldr	r2, [r7, #20]
 8015584:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015586:	693b      	ldr	r3, [r7, #16]
 8015588:	899b      	ldrh	r3, [r3, #12]
 801558a:	4618      	mov	r0, r3
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	699b      	ldr	r3, [r3, #24]
 8015590:	693a      	ldr	r2, [r7, #16]
 8015592:	8992      	ldrh	r2, [r2, #12]
 8015594:	fbb3 f1f2 	udiv	r1, r3, r2
 8015598:	fb02 f201 	mul.w	r2, r2, r1
 801559c:	1a9b      	subs	r3, r3, r2
 801559e:	1ac3      	subs	r3, r0, r3
 80155a0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80155a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	429a      	cmp	r2, r3
 80155a8:	d901      	bls.n	80155ae <f_write+0x298>
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	699b      	ldr	r3, [r3, #24]
 80155b8:	693a      	ldr	r2, [r7, #16]
 80155ba:	8992      	ldrh	r2, [r2, #12]
 80155bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80155c0:	fb02 f200 	mul.w	r2, r2, r0
 80155c4:	1a9b      	subs	r3, r3, r2
 80155c6:	440b      	add	r3, r1
 80155c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80155ca:	69f9      	ldr	r1, [r7, #28]
 80155cc:	4618      	mov	r0, r3
 80155ce:	f7fd fd8b 	bl	80130e8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	7d1b      	ldrb	r3, [r3, #20]
 80155d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80155da:	b2da      	uxtb	r2, r3
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80155e0:	69fa      	ldr	r2, [r7, #28]
 80155e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155e4:	4413      	add	r3, r2
 80155e6:	61fb      	str	r3, [r7, #28]
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	699a      	ldr	r2, [r3, #24]
 80155ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155ee:	441a      	add	r2, r3
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	619a      	str	r2, [r3, #24]
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	68da      	ldr	r2, [r3, #12]
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	699b      	ldr	r3, [r3, #24]
 80155fc:	429a      	cmp	r2, r3
 80155fe:	bf38      	it	cc
 8015600:	461a      	movcc	r2, r3
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	60da      	str	r2, [r3, #12]
 8015606:	683b      	ldr	r3, [r7, #0]
 8015608:	681a      	ldr	r2, [r3, #0]
 801560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801560c:	441a      	add	r2, r3
 801560e:	683b      	ldr	r3, [r7, #0]
 8015610:	601a      	str	r2, [r3, #0]
 8015612:	687a      	ldr	r2, [r7, #4]
 8015614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015616:	1ad3      	subs	r3, r2, r3
 8015618:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	2b00      	cmp	r3, #0
 801561e:	f47f aeb5 	bne.w	801538c <f_write+0x76>
 8015622:	e000      	b.n	8015626 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015624:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	7d1b      	ldrb	r3, [r3, #20]
 801562a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801562e:	b2da      	uxtb	r2, r3
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8015634:	2300      	movs	r3, #0
}
 8015636:	4618      	mov	r0, r3
 8015638:	3730      	adds	r7, #48	; 0x30
 801563a:	46bd      	mov	sp, r7
 801563c:	bd80      	pop	{r7, pc}
	...

08015640 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8015640:	b580      	push	{r7, lr}
 8015642:	b086      	sub	sp, #24
 8015644:	af00      	add	r7, sp, #0
 8015646:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	f107 0208 	add.w	r2, r7, #8
 801564e:	4611      	mov	r1, r2
 8015650:	4618      	mov	r0, r3
 8015652:	f7ff fab7 	bl	8014bc4 <validate>
 8015656:	4603      	mov	r3, r0
 8015658:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801565a:	7dfb      	ldrb	r3, [r7, #23]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d167      	bne.n	8015730 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	7d1b      	ldrb	r3, [r3, #20]
 8015664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015668:	2b00      	cmp	r3, #0
 801566a:	d061      	beq.n	8015730 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	7d1b      	ldrb	r3, [r3, #20]
 8015670:	b25b      	sxtb	r3, r3
 8015672:	2b00      	cmp	r3, #0
 8015674:	da15      	bge.n	80156a2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015676:	68bb      	ldr	r3, [r7, #8]
 8015678:	7858      	ldrb	r0, [r3, #1]
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	6a1a      	ldr	r2, [r3, #32]
 8015684:	2301      	movs	r3, #1
 8015686:	f7fd fc6f 	bl	8012f68 <disk_write>
 801568a:	4603      	mov	r3, r0
 801568c:	2b00      	cmp	r3, #0
 801568e:	d001      	beq.n	8015694 <f_sync+0x54>
 8015690:	2301      	movs	r3, #1
 8015692:	e04e      	b.n	8015732 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	7d1b      	ldrb	r3, [r3, #20]
 8015698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801569c:	b2da      	uxtb	r2, r3
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80156a2:	4b26      	ldr	r3, [pc, #152]	; (801573c <f_sync+0xfc>)
 80156a4:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80156a6:	68ba      	ldr	r2, [r7, #8]
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156ac:	4619      	mov	r1, r3
 80156ae:	4610      	mov	r0, r2
 80156b0:	f7fd ff48 	bl	8013544 <move_window>
 80156b4:	4603      	mov	r3, r0
 80156b6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80156b8:	7dfb      	ldrb	r3, [r7, #23]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d138      	bne.n	8015730 <f_sync+0xf0>
					dir = fp->dir_ptr;
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156c2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	330b      	adds	r3, #11
 80156c8:	781a      	ldrb	r2, [r3, #0]
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	330b      	adds	r3, #11
 80156ce:	f042 0220 	orr.w	r2, r2, #32
 80156d2:	b2d2      	uxtb	r2, r2
 80156d4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	6818      	ldr	r0, [r3, #0]
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	689b      	ldr	r3, [r3, #8]
 80156de:	461a      	mov	r2, r3
 80156e0:	68f9      	ldr	r1, [r7, #12]
 80156e2:	f7fe fccd 	bl	8014080 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	f103 021c 	add.w	r2, r3, #28
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	68db      	ldr	r3, [r3, #12]
 80156f0:	4619      	mov	r1, r3
 80156f2:	4610      	mov	r0, r2
 80156f4:	f7fd fccc 	bl	8013090 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	3316      	adds	r3, #22
 80156fc:	6939      	ldr	r1, [r7, #16]
 80156fe:	4618      	mov	r0, r3
 8015700:	f7fd fcc6 	bl	8013090 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	3312      	adds	r3, #18
 8015708:	2100      	movs	r1, #0
 801570a:	4618      	mov	r0, r3
 801570c:	f7fd fca5 	bl	801305a <st_word>
					fs->wflag = 1;
 8015710:	68bb      	ldr	r3, [r7, #8]
 8015712:	2201      	movs	r2, #1
 8015714:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8015716:	68bb      	ldr	r3, [r7, #8]
 8015718:	4618      	mov	r0, r3
 801571a:	f7fd ff41 	bl	80135a0 <sync_fs>
 801571e:	4603      	mov	r3, r0
 8015720:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	7d1b      	ldrb	r3, [r3, #20]
 8015726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801572a:	b2da      	uxtb	r2, r3
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8015730:	7dfb      	ldrb	r3, [r7, #23]
}
 8015732:	4618      	mov	r0, r3
 8015734:	3718      	adds	r7, #24
 8015736:	46bd      	mov	sp, r7
 8015738:	bd80      	pop	{r7, pc}
 801573a:	bf00      	nop
 801573c:	274a0000 	.word	0x274a0000

08015740 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8015740:	b580      	push	{r7, lr}
 8015742:	b084      	sub	sp, #16
 8015744:	af00      	add	r7, sp, #0
 8015746:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015748:	6878      	ldr	r0, [r7, #4]
 801574a:	f7ff ff79 	bl	8015640 <f_sync>
 801574e:	4603      	mov	r3, r0
 8015750:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8015752:	7bfb      	ldrb	r3, [r7, #15]
 8015754:	2b00      	cmp	r3, #0
 8015756:	d118      	bne.n	801578a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	f107 0208 	add.w	r2, r7, #8
 801575e:	4611      	mov	r1, r2
 8015760:	4618      	mov	r0, r3
 8015762:	f7ff fa2f 	bl	8014bc4 <validate>
 8015766:	4603      	mov	r3, r0
 8015768:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801576a:	7bfb      	ldrb	r3, [r7, #15]
 801576c:	2b00      	cmp	r3, #0
 801576e:	d10c      	bne.n	801578a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	691b      	ldr	r3, [r3, #16]
 8015774:	4618      	mov	r0, r3
 8015776:	f7fd fe41 	bl	80133fc <dec_lock>
 801577a:	4603      	mov	r3, r0
 801577c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801577e:	7bfb      	ldrb	r3, [r7, #15]
 8015780:	2b00      	cmp	r3, #0
 8015782:	d102      	bne.n	801578a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	2200      	movs	r2, #0
 8015788:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801578a:	7bfb      	ldrb	r3, [r7, #15]
}
 801578c:	4618      	mov	r0, r3
 801578e:	3710      	adds	r7, #16
 8015790:	46bd      	mov	sp, r7
 8015792:	bd80      	pop	{r7, pc}

08015794 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8015794:	b590      	push	{r4, r7, lr}
 8015796:	b091      	sub	sp, #68	; 0x44
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801579c:	f107 0108 	add.w	r1, r7, #8
 80157a0:	1d3b      	adds	r3, r7, #4
 80157a2:	2200      	movs	r2, #0
 80157a4:	4618      	mov	r0, r3
 80157a6:	f7fe ff87 	bl	80146b8 <find_volume>
 80157aa:	4603      	mov	r3, r0
 80157ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80157b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d131      	bne.n	801581c <f_chdir+0x88>
		dj.obj.fs = fs;
 80157b8:	68bb      	ldr	r3, [r7, #8]
 80157ba:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 80157bc:	687a      	ldr	r2, [r7, #4]
 80157be:	f107 030c 	add.w	r3, r7, #12
 80157c2:	4611      	mov	r1, r2
 80157c4:	4618      	mov	r0, r3
 80157c6:	f7fe fe47 	bl	8014458 <follow_path>
 80157ca:	4603      	mov	r3, r0
 80157cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 80157d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d11a      	bne.n	801580e <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80157d8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80157dc:	b25b      	sxtb	r3, r3
 80157de:	2b00      	cmp	r3, #0
 80157e0:	da03      	bge.n	80157ea <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 80157e2:	68bb      	ldr	r3, [r7, #8]
 80157e4:	697a      	ldr	r2, [r7, #20]
 80157e6:	619a      	str	r2, [r3, #24]
 80157e8:	e011      	b.n	801580e <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80157ea:	7cbb      	ldrb	r3, [r7, #18]
 80157ec:	f003 0310 	and.w	r3, r3, #16
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d009      	beq.n	8015808 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80157f4:	68bb      	ldr	r3, [r7, #8]
 80157f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80157f8:	68bc      	ldr	r4, [r7, #8]
 80157fa:	4611      	mov	r1, r2
 80157fc:	4618      	mov	r0, r3
 80157fe:	f7fe fc20 	bl	8014042 <ld_clust>
 8015802:	4603      	mov	r3, r0
 8015804:	61a3      	str	r3, [r4, #24]
 8015806:	e002      	b.n	801580e <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8015808:	2305      	movs	r3, #5
 801580a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801580e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015812:	2b04      	cmp	r3, #4
 8015814:	d102      	bne.n	801581c <f_chdir+0x88>
 8015816:	2305      	movs	r3, #5
 8015818:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 801581c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015820:	4618      	mov	r0, r3
 8015822:	3744      	adds	r7, #68	; 0x44
 8015824:	46bd      	mov	sp, r7
 8015826:	bd90      	pop	{r4, r7, pc}

08015828 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b090      	sub	sp, #64	; 0x40
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
 8015830:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	f107 0208 	add.w	r2, r7, #8
 8015838:	4611      	mov	r1, r2
 801583a:	4618      	mov	r0, r3
 801583c:	f7ff f9c2 	bl	8014bc4 <validate>
 8015840:	4603      	mov	r3, r0
 8015842:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8015846:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801584a:	2b00      	cmp	r3, #0
 801584c:	d103      	bne.n	8015856 <f_lseek+0x2e>
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	7d5b      	ldrb	r3, [r3, #21]
 8015852:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8015856:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801585a:	2b00      	cmp	r3, #0
 801585c:	d002      	beq.n	8015864 <f_lseek+0x3c>
 801585e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015862:	e201      	b.n	8015c68 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015868:	2b00      	cmp	r3, #0
 801586a:	f000 80d9 	beq.w	8015a20 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801586e:	683b      	ldr	r3, [r7, #0]
 8015870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015874:	d15a      	bne.n	801592c <f_lseek+0x104>
			tbl = fp->cltbl;
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801587a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801587e:	1d1a      	adds	r2, r3, #4
 8015880:	627a      	str	r2, [r7, #36]	; 0x24
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	617b      	str	r3, [r7, #20]
 8015886:	2302      	movs	r3, #2
 8015888:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	689b      	ldr	r3, [r3, #8]
 801588e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8015890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015892:	2b00      	cmp	r3, #0
 8015894:	d03a      	beq.n	801590c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8015896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015898:	613b      	str	r3, [r7, #16]
 801589a:	2300      	movs	r3, #0
 801589c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801589e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158a0:	3302      	adds	r3, #2
 80158a2:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80158a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158a6:	60fb      	str	r3, [r7, #12]
 80158a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158aa:	3301      	adds	r3, #1
 80158ac:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80158b2:	4618      	mov	r0, r3
 80158b4:	f7fd ff03 	bl	80136be <get_fat>
 80158b8:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80158ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158bc:	2b01      	cmp	r3, #1
 80158be:	d804      	bhi.n	80158ca <f_lseek+0xa2>
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	2202      	movs	r2, #2
 80158c4:	755a      	strb	r2, [r3, #21]
 80158c6:	2302      	movs	r3, #2
 80158c8:	e1ce      	b.n	8015c68 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80158ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158d0:	d104      	bne.n	80158dc <f_lseek+0xb4>
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	2201      	movs	r2, #1
 80158d6:	755a      	strb	r2, [r3, #21]
 80158d8:	2301      	movs	r3, #1
 80158da:	e1c5      	b.n	8015c68 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	3301      	adds	r3, #1
 80158e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80158e2:	429a      	cmp	r2, r3
 80158e4:	d0de      	beq.n	80158a4 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80158e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80158e8:	697b      	ldr	r3, [r7, #20]
 80158ea:	429a      	cmp	r2, r3
 80158ec:	d809      	bhi.n	8015902 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80158ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158f0:	1d1a      	adds	r2, r3, #4
 80158f2:	627a      	str	r2, [r7, #36]	; 0x24
 80158f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80158f6:	601a      	str	r2, [r3, #0]
 80158f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158fa:	1d1a      	adds	r2, r3, #4
 80158fc:	627a      	str	r2, [r7, #36]	; 0x24
 80158fe:	693a      	ldr	r2, [r7, #16]
 8015900:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8015902:	68bb      	ldr	r3, [r7, #8]
 8015904:	69db      	ldr	r3, [r3, #28]
 8015906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015908:	429a      	cmp	r2, r3
 801590a:	d3c4      	bcc.n	8015896 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015912:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8015914:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015916:	697b      	ldr	r3, [r7, #20]
 8015918:	429a      	cmp	r2, r3
 801591a:	d803      	bhi.n	8015924 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801591e:	2200      	movs	r2, #0
 8015920:	601a      	str	r2, [r3, #0]
 8015922:	e19f      	b.n	8015c64 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8015924:	2311      	movs	r3, #17
 8015926:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801592a:	e19b      	b.n	8015c64 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	68db      	ldr	r3, [r3, #12]
 8015930:	683a      	ldr	r2, [r7, #0]
 8015932:	429a      	cmp	r2, r3
 8015934:	d902      	bls.n	801593c <f_lseek+0x114>
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	68db      	ldr	r3, [r3, #12]
 801593a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	683a      	ldr	r2, [r7, #0]
 8015940:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8015942:	683b      	ldr	r3, [r7, #0]
 8015944:	2b00      	cmp	r3, #0
 8015946:	f000 818d 	beq.w	8015c64 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801594a:	683b      	ldr	r3, [r7, #0]
 801594c:	3b01      	subs	r3, #1
 801594e:	4619      	mov	r1, r3
 8015950:	6878      	ldr	r0, [r7, #4]
 8015952:	f7fe f998 	bl	8013c86 <clmt_clust>
 8015956:	4602      	mov	r2, r0
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801595c:	68ba      	ldr	r2, [r7, #8]
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	69db      	ldr	r3, [r3, #28]
 8015962:	4619      	mov	r1, r3
 8015964:	4610      	mov	r0, r2
 8015966:	f7fd fe8b 	bl	8013680 <clust2sect>
 801596a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801596c:	69bb      	ldr	r3, [r7, #24]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d104      	bne.n	801597c <f_lseek+0x154>
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	2202      	movs	r2, #2
 8015976:	755a      	strb	r2, [r3, #21]
 8015978:	2302      	movs	r3, #2
 801597a:	e175      	b.n	8015c68 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801597c:	683b      	ldr	r3, [r7, #0]
 801597e:	3b01      	subs	r3, #1
 8015980:	68ba      	ldr	r2, [r7, #8]
 8015982:	8992      	ldrh	r2, [r2, #12]
 8015984:	fbb3 f3f2 	udiv	r3, r3, r2
 8015988:	68ba      	ldr	r2, [r7, #8]
 801598a:	8952      	ldrh	r2, [r2, #10]
 801598c:	3a01      	subs	r2, #1
 801598e:	4013      	ands	r3, r2
 8015990:	69ba      	ldr	r2, [r7, #24]
 8015992:	4413      	add	r3, r2
 8015994:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	699b      	ldr	r3, [r3, #24]
 801599a:	68ba      	ldr	r2, [r7, #8]
 801599c:	8992      	ldrh	r2, [r2, #12]
 801599e:	fbb3 f1f2 	udiv	r1, r3, r2
 80159a2:	fb02 f201 	mul.w	r2, r2, r1
 80159a6:	1a9b      	subs	r3, r3, r2
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	f000 815b 	beq.w	8015c64 <f_lseek+0x43c>
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	6a1b      	ldr	r3, [r3, #32]
 80159b2:	69ba      	ldr	r2, [r7, #24]
 80159b4:	429a      	cmp	r2, r3
 80159b6:	f000 8155 	beq.w	8015c64 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	7d1b      	ldrb	r3, [r3, #20]
 80159be:	b25b      	sxtb	r3, r3
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	da18      	bge.n	80159f6 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80159c4:	68bb      	ldr	r3, [r7, #8]
 80159c6:	7858      	ldrb	r0, [r3, #1]
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	6a1a      	ldr	r2, [r3, #32]
 80159d2:	2301      	movs	r3, #1
 80159d4:	f7fd fac8 	bl	8012f68 <disk_write>
 80159d8:	4603      	mov	r3, r0
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d004      	beq.n	80159e8 <f_lseek+0x1c0>
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	2201      	movs	r2, #1
 80159e2:	755a      	strb	r2, [r3, #21]
 80159e4:	2301      	movs	r3, #1
 80159e6:	e13f      	b.n	8015c68 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	7d1b      	ldrb	r3, [r3, #20]
 80159ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80159f0:	b2da      	uxtb	r2, r3
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80159f6:	68bb      	ldr	r3, [r7, #8]
 80159f8:	7858      	ldrb	r0, [r3, #1]
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015a00:	2301      	movs	r3, #1
 8015a02:	69ba      	ldr	r2, [r7, #24]
 8015a04:	f7fd fa90 	bl	8012f28 <disk_read>
 8015a08:	4603      	mov	r3, r0
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d004      	beq.n	8015a18 <f_lseek+0x1f0>
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	2201      	movs	r2, #1
 8015a12:	755a      	strb	r2, [r3, #21]
 8015a14:	2301      	movs	r3, #1
 8015a16:	e127      	b.n	8015c68 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	69ba      	ldr	r2, [r7, #24]
 8015a1c:	621a      	str	r2, [r3, #32]
 8015a1e:	e121      	b.n	8015c64 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	68db      	ldr	r3, [r3, #12]
 8015a24:	683a      	ldr	r2, [r7, #0]
 8015a26:	429a      	cmp	r2, r3
 8015a28:	d908      	bls.n	8015a3c <f_lseek+0x214>
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	7d1b      	ldrb	r3, [r3, #20]
 8015a2e:	f003 0302 	and.w	r3, r3, #2
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d102      	bne.n	8015a3c <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	68db      	ldr	r3, [r3, #12]
 8015a3a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	699b      	ldr	r3, [r3, #24]
 8015a40:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8015a42:	2300      	movs	r3, #0
 8015a44:	637b      	str	r3, [r7, #52]	; 0x34
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015a4a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8015a4c:	683b      	ldr	r3, [r7, #0]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	f000 80b5 	beq.w	8015bbe <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8015a54:	68bb      	ldr	r3, [r7, #8]
 8015a56:	895b      	ldrh	r3, [r3, #10]
 8015a58:	461a      	mov	r2, r3
 8015a5a:	68bb      	ldr	r3, [r7, #8]
 8015a5c:	899b      	ldrh	r3, [r3, #12]
 8015a5e:	fb03 f302 	mul.w	r3, r3, r2
 8015a62:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8015a64:	6a3b      	ldr	r3, [r7, #32]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d01b      	beq.n	8015aa2 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8015a6a:	683b      	ldr	r3, [r7, #0]
 8015a6c:	1e5a      	subs	r2, r3, #1
 8015a6e:	69fb      	ldr	r3, [r7, #28]
 8015a70:	fbb2 f2f3 	udiv	r2, r2, r3
 8015a74:	6a3b      	ldr	r3, [r7, #32]
 8015a76:	1e59      	subs	r1, r3, #1
 8015a78:	69fb      	ldr	r3, [r7, #28]
 8015a7a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8015a7e:	429a      	cmp	r2, r3
 8015a80:	d30f      	bcc.n	8015aa2 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8015a82:	6a3b      	ldr	r3, [r7, #32]
 8015a84:	1e5a      	subs	r2, r3, #1
 8015a86:	69fb      	ldr	r3, [r7, #28]
 8015a88:	425b      	negs	r3, r3
 8015a8a:	401a      	ands	r2, r3
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	699b      	ldr	r3, [r3, #24]
 8015a94:	683a      	ldr	r2, [r7, #0]
 8015a96:	1ad3      	subs	r3, r2, r3
 8015a98:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	69db      	ldr	r3, [r3, #28]
 8015a9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8015aa0:	e022      	b.n	8015ae8 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	689b      	ldr	r3, [r3, #8]
 8015aa6:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8015aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d119      	bne.n	8015ae2 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	2100      	movs	r1, #0
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	f7fe f84f 	bl	8013b56 <create_chain>
 8015ab8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015abc:	2b01      	cmp	r3, #1
 8015abe:	d104      	bne.n	8015aca <f_lseek+0x2a2>
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	2202      	movs	r2, #2
 8015ac4:	755a      	strb	r2, [r3, #21]
 8015ac6:	2302      	movs	r3, #2
 8015ac8:	e0ce      	b.n	8015c68 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ad0:	d104      	bne.n	8015adc <f_lseek+0x2b4>
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	2201      	movs	r2, #1
 8015ad6:	755a      	strb	r2, [r3, #21]
 8015ad8:	2301      	movs	r3, #1
 8015ada:	e0c5      	b.n	8015c68 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015ae0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015ae6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8015ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d067      	beq.n	8015bbe <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8015aee:	e03a      	b.n	8015b66 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8015af0:	683a      	ldr	r2, [r7, #0]
 8015af2:	69fb      	ldr	r3, [r7, #28]
 8015af4:	1ad3      	subs	r3, r2, r3
 8015af6:	603b      	str	r3, [r7, #0]
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	699a      	ldr	r2, [r3, #24]
 8015afc:	69fb      	ldr	r3, [r7, #28]
 8015afe:	441a      	add	r2, r3
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	7d1b      	ldrb	r3, [r3, #20]
 8015b08:	f003 0302 	and.w	r3, r3, #2
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d00b      	beq.n	8015b28 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015b14:	4618      	mov	r0, r3
 8015b16:	f7fe f81e 	bl	8013b56 <create_chain>
 8015b1a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8015b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d108      	bne.n	8015b34 <f_lseek+0x30c>
							ofs = 0; break;
 8015b22:	2300      	movs	r3, #0
 8015b24:	603b      	str	r3, [r7, #0]
 8015b26:	e022      	b.n	8015b6e <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	f7fd fdc6 	bl	80136be <get_fat>
 8015b32:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b3a:	d104      	bne.n	8015b46 <f_lseek+0x31e>
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	2201      	movs	r2, #1
 8015b40:	755a      	strb	r2, [r3, #21]
 8015b42:	2301      	movs	r3, #1
 8015b44:	e090      	b.n	8015c68 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8015b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b48:	2b01      	cmp	r3, #1
 8015b4a:	d904      	bls.n	8015b56 <f_lseek+0x32e>
 8015b4c:	68bb      	ldr	r3, [r7, #8]
 8015b4e:	69db      	ldr	r3, [r3, #28]
 8015b50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015b52:	429a      	cmp	r2, r3
 8015b54:	d304      	bcc.n	8015b60 <f_lseek+0x338>
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	2202      	movs	r2, #2
 8015b5a:	755a      	strb	r2, [r3, #21]
 8015b5c:	2302      	movs	r3, #2
 8015b5e:	e083      	b.n	8015c68 <f_lseek+0x440>
					fp->clust = clst;
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015b64:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8015b66:	683a      	ldr	r2, [r7, #0]
 8015b68:	69fb      	ldr	r3, [r7, #28]
 8015b6a:	429a      	cmp	r2, r3
 8015b6c:	d8c0      	bhi.n	8015af0 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	699a      	ldr	r2, [r3, #24]
 8015b72:	683b      	ldr	r3, [r7, #0]
 8015b74:	441a      	add	r2, r3
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8015b7a:	68bb      	ldr	r3, [r7, #8]
 8015b7c:	899b      	ldrh	r3, [r3, #12]
 8015b7e:	461a      	mov	r2, r3
 8015b80:	683b      	ldr	r3, [r7, #0]
 8015b82:	fbb3 f1f2 	udiv	r1, r3, r2
 8015b86:	fb02 f201 	mul.w	r2, r2, r1
 8015b8a:	1a9b      	subs	r3, r3, r2
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d016      	beq.n	8015bbe <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8015b90:	68bb      	ldr	r3, [r7, #8]
 8015b92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015b94:	4618      	mov	r0, r3
 8015b96:	f7fd fd73 	bl	8013680 <clust2sect>
 8015b9a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8015b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d104      	bne.n	8015bac <f_lseek+0x384>
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	2202      	movs	r2, #2
 8015ba6:	755a      	strb	r2, [r3, #21]
 8015ba8:	2302      	movs	r3, #2
 8015baa:	e05d      	b.n	8015c68 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8015bac:	68bb      	ldr	r3, [r7, #8]
 8015bae:	899b      	ldrh	r3, [r3, #12]
 8015bb0:	461a      	mov	r2, r3
 8015bb2:	683b      	ldr	r3, [r7, #0]
 8015bb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8015bb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015bba:	4413      	add	r3, r2
 8015bbc:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	699a      	ldr	r2, [r3, #24]
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	68db      	ldr	r3, [r3, #12]
 8015bc6:	429a      	cmp	r2, r3
 8015bc8:	d90a      	bls.n	8015be0 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	699a      	ldr	r2, [r3, #24]
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	7d1b      	ldrb	r3, [r3, #20]
 8015bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015bda:	b2da      	uxtb	r2, r3
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	699b      	ldr	r3, [r3, #24]
 8015be4:	68ba      	ldr	r2, [r7, #8]
 8015be6:	8992      	ldrh	r2, [r2, #12]
 8015be8:	fbb3 f1f2 	udiv	r1, r3, r2
 8015bec:	fb02 f201 	mul.w	r2, r2, r1
 8015bf0:	1a9b      	subs	r3, r3, r2
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d036      	beq.n	8015c64 <f_lseek+0x43c>
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	6a1b      	ldr	r3, [r3, #32]
 8015bfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015bfc:	429a      	cmp	r2, r3
 8015bfe:	d031      	beq.n	8015c64 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	7d1b      	ldrb	r3, [r3, #20]
 8015c04:	b25b      	sxtb	r3, r3
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	da18      	bge.n	8015c3c <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015c0a:	68bb      	ldr	r3, [r7, #8]
 8015c0c:	7858      	ldrb	r0, [r3, #1]
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	6a1a      	ldr	r2, [r3, #32]
 8015c18:	2301      	movs	r3, #1
 8015c1a:	f7fd f9a5 	bl	8012f68 <disk_write>
 8015c1e:	4603      	mov	r3, r0
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d004      	beq.n	8015c2e <f_lseek+0x406>
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	2201      	movs	r2, #1
 8015c28:	755a      	strb	r2, [r3, #21]
 8015c2a:	2301      	movs	r3, #1
 8015c2c:	e01c      	b.n	8015c68 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	7d1b      	ldrb	r3, [r3, #20]
 8015c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015c36:	b2da      	uxtb	r2, r3
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8015c3c:	68bb      	ldr	r3, [r7, #8]
 8015c3e:	7858      	ldrb	r0, [r3, #1]
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015c46:	2301      	movs	r3, #1
 8015c48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015c4a:	f7fd f96d 	bl	8012f28 <disk_read>
 8015c4e:	4603      	mov	r3, r0
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d004      	beq.n	8015c5e <f_lseek+0x436>
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	2201      	movs	r2, #1
 8015c58:	755a      	strb	r2, [r3, #21]
 8015c5a:	2301      	movs	r3, #1
 8015c5c:	e004      	b.n	8015c68 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015c62:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8015c64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015c68:	4618      	mov	r0, r3
 8015c6a:	3740      	adds	r7, #64	; 0x40
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	bd80      	pop	{r7, pc}

08015c70 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b09e      	sub	sp, #120	; 0x78
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8015c78:	2300      	movs	r3, #0
 8015c7a:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8015c7c:	f107 010c 	add.w	r1, r7, #12
 8015c80:	1d3b      	adds	r3, r7, #4
 8015c82:	2202      	movs	r2, #2
 8015c84:	4618      	mov	r0, r3
 8015c86:	f7fe fd17 	bl	80146b8 <find_volume>
 8015c8a:	4603      	mov	r3, r0
 8015c8c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8015c94:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	f040 80a4 	bne.w	8015de6 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8015c9e:	687a      	ldr	r2, [r7, #4]
 8015ca0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015ca4:	4611      	mov	r1, r2
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	f7fe fbd6 	bl	8014458 <follow_path>
 8015cac:	4603      	mov	r3, r0
 8015cae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8015cb2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d108      	bne.n	8015ccc <f_unlink+0x5c>
 8015cba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8015cbe:	f003 0320 	and.w	r3, r3, #32
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d002      	beq.n	8015ccc <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8015cc6:	2306      	movs	r3, #6
 8015cc8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8015ccc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d108      	bne.n	8015ce6 <f_unlink+0x76>
 8015cd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015cd8:	2102      	movs	r1, #2
 8015cda:	4618      	mov	r0, r3
 8015cdc:	f7fd fa82 	bl	80131e4 <chk_lock>
 8015ce0:	4603      	mov	r3, r0
 8015ce2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8015ce6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d17b      	bne.n	8015de6 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8015cee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8015cf2:	b25b      	sxtb	r3, r3
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	da03      	bge.n	8015d00 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8015cf8:	2306      	movs	r3, #6
 8015cfa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8015cfe:	e008      	b.n	8015d12 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8015d00:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015d04:	f003 0301 	and.w	r3, r3, #1
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d002      	beq.n	8015d12 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8015d0c:	2307      	movs	r3, #7
 8015d0e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8015d12:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d13d      	bne.n	8015d96 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015d1e:	4611      	mov	r1, r2
 8015d20:	4618      	mov	r0, r3
 8015d22:	f7fe f98e 	bl	8014042 <ld_clust>
 8015d26:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8015d28:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015d2c:	f003 0310 	and.w	r3, r3, #16
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d030      	beq.n	8015d96 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	699b      	ldr	r3, [r3, #24]
 8015d38:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015d3a:	429a      	cmp	r2, r3
 8015d3c:	d103      	bne.n	8015d46 <f_unlink+0xd6>
						res = FR_DENIED;
 8015d3e:	2307      	movs	r3, #7
 8015d40:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8015d44:	e027      	b.n	8015d96 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8015d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015d4c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8015d4e:	f107 0310 	add.w	r3, r7, #16
 8015d52:	2100      	movs	r1, #0
 8015d54:	4618      	mov	r0, r3
 8015d56:	f7fd ffce 	bl	8013cf6 <dir_sdi>
 8015d5a:	4603      	mov	r3, r0
 8015d5c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8015d60:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d116      	bne.n	8015d96 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8015d68:	f107 0310 	add.w	r3, r7, #16
 8015d6c:	2100      	movs	r1, #0
 8015d6e:	4618      	mov	r0, r3
 8015d70:	f7fe f9a6 	bl	80140c0 <dir_read>
 8015d74:	4603      	mov	r3, r0
 8015d76:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8015d7a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d102      	bne.n	8015d88 <f_unlink+0x118>
 8015d82:	2307      	movs	r3, #7
 8015d84:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8015d88:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015d8c:	2b04      	cmp	r3, #4
 8015d8e:	d102      	bne.n	8015d96 <f_unlink+0x126>
 8015d90:	2300      	movs	r3, #0
 8015d92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8015d96:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d123      	bne.n	8015de6 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8015d9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015da2:	4618      	mov	r0, r3
 8015da4:	f7fe fa70 	bl	8014288 <dir_remove>
 8015da8:	4603      	mov	r3, r0
 8015daa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8015dae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d10c      	bne.n	8015dd0 <f_unlink+0x160>
 8015db6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d009      	beq.n	8015dd0 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8015dbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015dc0:	2200      	movs	r2, #0
 8015dc2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	f7fd fe61 	bl	8013a8c <remove_chain>
 8015dca:	4603      	mov	r3, r0
 8015dcc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8015dd0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d106      	bne.n	8015de6 <f_unlink+0x176>
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	4618      	mov	r0, r3
 8015ddc:	f7fd fbe0 	bl	80135a0 <sync_fs>
 8015de0:	4603      	mov	r3, r0
 8015de2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8015de6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8015dea:	4618      	mov	r0, r3
 8015dec:	3778      	adds	r7, #120	; 0x78
 8015dee:	46bd      	mov	sp, r7
 8015df0:	bd80      	pop	{r7, pc}
	...

08015df4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8015df4:	b580      	push	{r7, lr}
 8015df6:	b096      	sub	sp, #88	; 0x58
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8015dfc:	f107 0108 	add.w	r1, r7, #8
 8015e00:	1d3b      	adds	r3, r7, #4
 8015e02:	2202      	movs	r2, #2
 8015e04:	4618      	mov	r0, r3
 8015e06:	f7fe fc57 	bl	80146b8 <find_volume>
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8015e10:	68bb      	ldr	r3, [r7, #8]
 8015e12:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8015e14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	f040 80fe 	bne.w	801601a <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8015e1e:	687a      	ldr	r2, [r7, #4]
 8015e20:	f107 030c 	add.w	r3, r7, #12
 8015e24:	4611      	mov	r1, r2
 8015e26:	4618      	mov	r0, r3
 8015e28:	f7fe fb16 	bl	8014458 <follow_path>
 8015e2c:	4603      	mov	r3, r0
 8015e2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8015e32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d102      	bne.n	8015e40 <f_mkdir+0x4c>
 8015e3a:	2308      	movs	r3, #8
 8015e3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8015e40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015e44:	2b04      	cmp	r3, #4
 8015e46:	d108      	bne.n	8015e5a <f_mkdir+0x66>
 8015e48:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8015e4c:	f003 0320 	and.w	r3, r3, #32
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d002      	beq.n	8015e5a <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8015e54:	2306      	movs	r3, #6
 8015e56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8015e5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015e5e:	2b04      	cmp	r3, #4
 8015e60:	f040 80db 	bne.w	801601a <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8015e64:	f107 030c 	add.w	r3, r7, #12
 8015e68:	2100      	movs	r1, #0
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	f7fd fe73 	bl	8013b56 <create_chain>
 8015e70:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8015e72:	68bb      	ldr	r3, [r7, #8]
 8015e74:	895b      	ldrh	r3, [r3, #10]
 8015e76:	461a      	mov	r2, r3
 8015e78:	68bb      	ldr	r3, [r7, #8]
 8015e7a:	899b      	ldrh	r3, [r3, #12]
 8015e7c:	fb03 f302 	mul.w	r3, r3, r2
 8015e80:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8015e82:	2300      	movs	r3, #0
 8015e84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8015e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d102      	bne.n	8015e94 <f_mkdir+0xa0>
 8015e8e:	2307      	movs	r3, #7
 8015e90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8015e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e96:	2b01      	cmp	r3, #1
 8015e98:	d102      	bne.n	8015ea0 <f_mkdir+0xac>
 8015e9a:	2302      	movs	r3, #2
 8015e9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ea6:	d102      	bne.n	8015eae <f_mkdir+0xba>
 8015ea8:	2301      	movs	r3, #1
 8015eaa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8015eae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d106      	bne.n	8015ec4 <f_mkdir+0xd0>
 8015eb6:	68bb      	ldr	r3, [r7, #8]
 8015eb8:	4618      	mov	r0, r3
 8015eba:	f7fd faff 	bl	80134bc <sync_window>
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8015ec4:	4b58      	ldr	r3, [pc, #352]	; (8016028 <f_mkdir+0x234>)
 8015ec6:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8015ec8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d16c      	bne.n	8015faa <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8015ed0:	68bb      	ldr	r3, [r7, #8]
 8015ed2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	f7fd fbd3 	bl	8013680 <clust2sect>
 8015eda:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8015edc:	68bb      	ldr	r3, [r7, #8]
 8015ede:	3338      	adds	r3, #56	; 0x38
 8015ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8015ee2:	68bb      	ldr	r3, [r7, #8]
 8015ee4:	899b      	ldrh	r3, [r3, #12]
 8015ee6:	461a      	mov	r2, r3
 8015ee8:	2100      	movs	r1, #0
 8015eea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015eec:	f7fd f91d 	bl	801312a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8015ef0:	220b      	movs	r2, #11
 8015ef2:	2120      	movs	r1, #32
 8015ef4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015ef6:	f7fd f918 	bl	801312a <mem_set>
					dir[DIR_Name] = '.';
 8015efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015efc:	222e      	movs	r2, #46	; 0x2e
 8015efe:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8015f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f02:	330b      	adds	r3, #11
 8015f04:	2210      	movs	r2, #16
 8015f06:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8015f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f0a:	3316      	adds	r3, #22
 8015f0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015f0e:	4618      	mov	r0, r3
 8015f10:	f7fd f8be 	bl	8013090 <st_dword>
					st_clust(fs, dir, dcl);
 8015f14:	68bb      	ldr	r3, [r7, #8]
 8015f16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015f18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	f7fe f8b0 	bl	8014080 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8015f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f22:	3320      	adds	r3, #32
 8015f24:	2220      	movs	r2, #32
 8015f26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015f28:	4618      	mov	r0, r3
 8015f2a:	f7fd f8dd 	bl	80130e8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8015f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f30:	3321      	adds	r3, #33	; 0x21
 8015f32:	222e      	movs	r2, #46	; 0x2e
 8015f34:	701a      	strb	r2, [r3, #0]
 8015f36:	697b      	ldr	r3, [r7, #20]
 8015f38:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8015f3a:	68bb      	ldr	r3, [r7, #8]
 8015f3c:	781b      	ldrb	r3, [r3, #0]
 8015f3e:	2b03      	cmp	r3, #3
 8015f40:	d106      	bne.n	8015f50 <f_mkdir+0x15c>
 8015f42:	68bb      	ldr	r3, [r7, #8]
 8015f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015f48:	429a      	cmp	r2, r3
 8015f4a:	d101      	bne.n	8015f50 <f_mkdir+0x15c>
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8015f50:	68b8      	ldr	r0, [r7, #8]
 8015f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f54:	3320      	adds	r3, #32
 8015f56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015f58:	4619      	mov	r1, r3
 8015f5a:	f7fe f891 	bl	8014080 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8015f5e:	68bb      	ldr	r3, [r7, #8]
 8015f60:	895b      	ldrh	r3, [r3, #10]
 8015f62:	653b      	str	r3, [r7, #80]	; 0x50
 8015f64:	e01c      	b.n	8015fa0 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8015f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015f68:	1c5a      	adds	r2, r3, #1
 8015f6a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8015f6c:	68ba      	ldr	r2, [r7, #8]
 8015f6e:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8015f70:	68bb      	ldr	r3, [r7, #8]
 8015f72:	2201      	movs	r2, #1
 8015f74:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8015f76:	68bb      	ldr	r3, [r7, #8]
 8015f78:	4618      	mov	r0, r3
 8015f7a:	f7fd fa9f 	bl	80134bc <sync_window>
 8015f7e:	4603      	mov	r3, r0
 8015f80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8015f84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d10d      	bne.n	8015fa8 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8015f8c:	68bb      	ldr	r3, [r7, #8]
 8015f8e:	899b      	ldrh	r3, [r3, #12]
 8015f90:	461a      	mov	r2, r3
 8015f92:	2100      	movs	r1, #0
 8015f94:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015f96:	f7fd f8c8 	bl	801312a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8015f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f9c:	3b01      	subs	r3, #1
 8015f9e:	653b      	str	r3, [r7, #80]	; 0x50
 8015fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d1df      	bne.n	8015f66 <f_mkdir+0x172>
 8015fa6:	e000      	b.n	8015faa <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8015fa8:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8015faa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d107      	bne.n	8015fc2 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8015fb2:	f107 030c 	add.w	r3, r7, #12
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	f7fe f934 	bl	8014224 <dir_register>
 8015fbc:	4603      	mov	r3, r0
 8015fbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8015fc2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d120      	bne.n	801600c <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8015fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8015fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015fd0:	3316      	adds	r3, #22
 8015fd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	f7fd f85b 	bl	8013090 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8015fda:	68bb      	ldr	r3, [r7, #8]
 8015fdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015fde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	f7fe f84d 	bl	8014080 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8015fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015fe8:	330b      	adds	r3, #11
 8015fea:	2210      	movs	r2, #16
 8015fec:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8015fee:	68bb      	ldr	r3, [r7, #8]
 8015ff0:	2201      	movs	r2, #1
 8015ff2:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8015ff4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d10e      	bne.n	801601a <f_mkdir+0x226>
					res = sync_fs(fs);
 8015ffc:	68bb      	ldr	r3, [r7, #8]
 8015ffe:	4618      	mov	r0, r3
 8016000:	f7fd face 	bl	80135a0 <sync_fs>
 8016004:	4603      	mov	r3, r0
 8016006:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801600a:	e006      	b.n	801601a <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 801600c:	f107 030c 	add.w	r3, r7, #12
 8016010:	2200      	movs	r2, #0
 8016012:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016014:	4618      	mov	r0, r3
 8016016:	f7fd fd39 	bl	8013a8c <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801601a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801601e:	4618      	mov	r0, r3
 8016020:	3758      	adds	r7, #88	; 0x58
 8016022:	46bd      	mov	sp, r7
 8016024:	bd80      	pop	{r7, pc}
 8016026:	bf00      	nop
 8016028:	274a0000 	.word	0x274a0000

0801602c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 801602c:	b580      	push	{r7, lr}
 801602e:	b088      	sub	sp, #32
 8016030:	af00      	add	r7, sp, #0
 8016032:	60f8      	str	r0, [r7, #12]
 8016034:	60b9      	str	r1, [r7, #8]
 8016036:	607a      	str	r2, [r7, #4]
	int n = 0;
 8016038:	2300      	movs	r3, #0
 801603a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8016040:	e017      	b.n	8016072 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8016042:	f107 0310 	add.w	r3, r7, #16
 8016046:	f107 0114 	add.w	r1, r7, #20
 801604a:	2201      	movs	r2, #1
 801604c:	6878      	ldr	r0, [r7, #4]
 801604e:	f7ff f803 	bl	8015058 <f_read>
		if (rc != 1) break;
 8016052:	693b      	ldr	r3, [r7, #16]
 8016054:	2b01      	cmp	r3, #1
 8016056:	d112      	bne.n	801607e <f_gets+0x52>
		c = s[0];
 8016058:	7d3b      	ldrb	r3, [r7, #20]
 801605a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 801605c:	69bb      	ldr	r3, [r7, #24]
 801605e:	1c5a      	adds	r2, r3, #1
 8016060:	61ba      	str	r2, [r7, #24]
 8016062:	7dfa      	ldrb	r2, [r7, #23]
 8016064:	701a      	strb	r2, [r3, #0]
		n++;
 8016066:	69fb      	ldr	r3, [r7, #28]
 8016068:	3301      	adds	r3, #1
 801606a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 801606c:	7dfb      	ldrb	r3, [r7, #23]
 801606e:	2b0a      	cmp	r3, #10
 8016070:	d007      	beq.n	8016082 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8016072:	68bb      	ldr	r3, [r7, #8]
 8016074:	3b01      	subs	r3, #1
 8016076:	69fa      	ldr	r2, [r7, #28]
 8016078:	429a      	cmp	r2, r3
 801607a:	dbe2      	blt.n	8016042 <f_gets+0x16>
 801607c:	e002      	b.n	8016084 <f_gets+0x58>
		if (rc != 1) break;
 801607e:	bf00      	nop
 8016080:	e000      	b.n	8016084 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8016082:	bf00      	nop
	}
	*p = 0;
 8016084:	69bb      	ldr	r3, [r7, #24]
 8016086:	2200      	movs	r2, #0
 8016088:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801608a:	69fb      	ldr	r3, [r7, #28]
 801608c:	2b00      	cmp	r3, #0
 801608e:	d001      	beq.n	8016094 <f_gets+0x68>
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	e000      	b.n	8016096 <f_gets+0x6a>
 8016094:	2300      	movs	r3, #0
}
 8016096:	4618      	mov	r0, r3
 8016098:	3720      	adds	r7, #32
 801609a:	46bd      	mov	sp, r7
 801609c:	bd80      	pop	{r7, pc}
	...

080160a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80160a0:	b480      	push	{r7}
 80160a2:	b087      	sub	sp, #28
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	60f8      	str	r0, [r7, #12]
 80160a8:	60b9      	str	r1, [r7, #8]
 80160aa:	4613      	mov	r3, r2
 80160ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80160ae:	2301      	movs	r3, #1
 80160b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80160b2:	2300      	movs	r3, #0
 80160b4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80160b6:	4b1f      	ldr	r3, [pc, #124]	; (8016134 <FATFS_LinkDriverEx+0x94>)
 80160b8:	7a5b      	ldrb	r3, [r3, #9]
 80160ba:	b2db      	uxtb	r3, r3
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d131      	bne.n	8016124 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80160c0:	4b1c      	ldr	r3, [pc, #112]	; (8016134 <FATFS_LinkDriverEx+0x94>)
 80160c2:	7a5b      	ldrb	r3, [r3, #9]
 80160c4:	b2db      	uxtb	r3, r3
 80160c6:	461a      	mov	r2, r3
 80160c8:	4b1a      	ldr	r3, [pc, #104]	; (8016134 <FATFS_LinkDriverEx+0x94>)
 80160ca:	2100      	movs	r1, #0
 80160cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80160ce:	4b19      	ldr	r3, [pc, #100]	; (8016134 <FATFS_LinkDriverEx+0x94>)
 80160d0:	7a5b      	ldrb	r3, [r3, #9]
 80160d2:	b2db      	uxtb	r3, r3
 80160d4:	4a17      	ldr	r2, [pc, #92]	; (8016134 <FATFS_LinkDriverEx+0x94>)
 80160d6:	009b      	lsls	r3, r3, #2
 80160d8:	4413      	add	r3, r2
 80160da:	68fa      	ldr	r2, [r7, #12]
 80160dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80160de:	4b15      	ldr	r3, [pc, #84]	; (8016134 <FATFS_LinkDriverEx+0x94>)
 80160e0:	7a5b      	ldrb	r3, [r3, #9]
 80160e2:	b2db      	uxtb	r3, r3
 80160e4:	461a      	mov	r2, r3
 80160e6:	4b13      	ldr	r3, [pc, #76]	; (8016134 <FATFS_LinkDriverEx+0x94>)
 80160e8:	4413      	add	r3, r2
 80160ea:	79fa      	ldrb	r2, [r7, #7]
 80160ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80160ee:	4b11      	ldr	r3, [pc, #68]	; (8016134 <FATFS_LinkDriverEx+0x94>)
 80160f0:	7a5b      	ldrb	r3, [r3, #9]
 80160f2:	b2db      	uxtb	r3, r3
 80160f4:	1c5a      	adds	r2, r3, #1
 80160f6:	b2d1      	uxtb	r1, r2
 80160f8:	4a0e      	ldr	r2, [pc, #56]	; (8016134 <FATFS_LinkDriverEx+0x94>)
 80160fa:	7251      	strb	r1, [r2, #9]
 80160fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80160fe:	7dbb      	ldrb	r3, [r7, #22]
 8016100:	3330      	adds	r3, #48	; 0x30
 8016102:	b2da      	uxtb	r2, r3
 8016104:	68bb      	ldr	r3, [r7, #8]
 8016106:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016108:	68bb      	ldr	r3, [r7, #8]
 801610a:	3301      	adds	r3, #1
 801610c:	223a      	movs	r2, #58	; 0x3a
 801610e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016110:	68bb      	ldr	r3, [r7, #8]
 8016112:	3302      	adds	r3, #2
 8016114:	222f      	movs	r2, #47	; 0x2f
 8016116:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016118:	68bb      	ldr	r3, [r7, #8]
 801611a:	3303      	adds	r3, #3
 801611c:	2200      	movs	r2, #0
 801611e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016120:	2300      	movs	r3, #0
 8016122:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016124:	7dfb      	ldrb	r3, [r7, #23]
}
 8016126:	4618      	mov	r0, r3
 8016128:	371c      	adds	r7, #28
 801612a:	46bd      	mov	sp, r7
 801612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016130:	4770      	bx	lr
 8016132:	bf00      	nop
 8016134:	2004766c 	.word	0x2004766c

08016138 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016138:	b580      	push	{r7, lr}
 801613a:	b082      	sub	sp, #8
 801613c:	af00      	add	r7, sp, #0
 801613e:	6078      	str	r0, [r7, #4]
 8016140:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016142:	2200      	movs	r2, #0
 8016144:	6839      	ldr	r1, [r7, #0]
 8016146:	6878      	ldr	r0, [r7, #4]
 8016148:	f7ff ffaa 	bl	80160a0 <FATFS_LinkDriverEx>
 801614c:	4603      	mov	r3, r0
}
 801614e:	4618      	mov	r0, r3
 8016150:	3708      	adds	r7, #8
 8016152:	46bd      	mov	sp, r7
 8016154:	bd80      	pop	{r7, pc}

08016156 <_Znaj>:
 8016156:	f000 b800 	b.w	801615a <_Znwj>

0801615a <_Znwj>:
 801615a:	b510      	push	{r4, lr}
 801615c:	2800      	cmp	r0, #0
 801615e:	bf14      	ite	ne
 8016160:	4604      	movne	r4, r0
 8016162:	2401      	moveq	r4, #1
 8016164:	4620      	mov	r0, r4
 8016166:	f000 f853 	bl	8016210 <malloc>
 801616a:	b930      	cbnz	r0, 801617a <_Znwj+0x20>
 801616c:	f000 f816 	bl	801619c <_ZSt15get_new_handlerv>
 8016170:	b908      	cbnz	r0, 8016176 <_Znwj+0x1c>
 8016172:	f000 f81b 	bl	80161ac <abort>
 8016176:	4780      	blx	r0
 8016178:	e7f4      	b.n	8016164 <_Znwj+0xa>
 801617a:	bd10      	pop	{r4, pc}

0801617c <__cxa_guard_acquire>:
 801617c:	6803      	ldr	r3, [r0, #0]
 801617e:	07db      	lsls	r3, r3, #31
 8016180:	d406      	bmi.n	8016190 <__cxa_guard_acquire+0x14>
 8016182:	7843      	ldrb	r3, [r0, #1]
 8016184:	b103      	cbz	r3, 8016188 <__cxa_guard_acquire+0xc>
 8016186:	deff      	udf	#255	; 0xff
 8016188:	2301      	movs	r3, #1
 801618a:	7043      	strb	r3, [r0, #1]
 801618c:	4618      	mov	r0, r3
 801618e:	4770      	bx	lr
 8016190:	2000      	movs	r0, #0
 8016192:	4770      	bx	lr

08016194 <__cxa_guard_release>:
 8016194:	2301      	movs	r3, #1
 8016196:	6003      	str	r3, [r0, #0]
 8016198:	4770      	bx	lr
	...

0801619c <_ZSt15get_new_handlerv>:
 801619c:	4b02      	ldr	r3, [pc, #8]	; (80161a8 <_ZSt15get_new_handlerv+0xc>)
 801619e:	6818      	ldr	r0, [r3, #0]
 80161a0:	f3bf 8f5b 	dmb	ish
 80161a4:	4770      	bx	lr
 80161a6:	bf00      	nop
 80161a8:	20047678 	.word	0x20047678

080161ac <abort>:
 80161ac:	b508      	push	{r3, lr}
 80161ae:	2006      	movs	r0, #6
 80161b0:	f000 ff62 	bl	8017078 <raise>
 80161b4:	2001      	movs	r0, #1
 80161b6:	f7f1 ffe9 	bl	800818c <_exit>
	...

080161bc <__errno>:
 80161bc:	4b01      	ldr	r3, [pc, #4]	; (80161c4 <__errno+0x8>)
 80161be:	6818      	ldr	r0, [r3, #0]
 80161c0:	4770      	bx	lr
 80161c2:	bf00      	nop
 80161c4:	2000000c 	.word	0x2000000c

080161c8 <__libc_init_array>:
 80161c8:	b570      	push	{r4, r5, r6, lr}
 80161ca:	4e0d      	ldr	r6, [pc, #52]	; (8016200 <__libc_init_array+0x38>)
 80161cc:	4c0d      	ldr	r4, [pc, #52]	; (8016204 <__libc_init_array+0x3c>)
 80161ce:	1ba4      	subs	r4, r4, r6
 80161d0:	10a4      	asrs	r4, r4, #2
 80161d2:	2500      	movs	r5, #0
 80161d4:	42a5      	cmp	r5, r4
 80161d6:	d109      	bne.n	80161ec <__libc_init_array+0x24>
 80161d8:	4e0b      	ldr	r6, [pc, #44]	; (8016208 <__libc_init_array+0x40>)
 80161da:	4c0c      	ldr	r4, [pc, #48]	; (801620c <__libc_init_array+0x44>)
 80161dc:	f004 fa2a 	bl	801a634 <_init>
 80161e0:	1ba4      	subs	r4, r4, r6
 80161e2:	10a4      	asrs	r4, r4, #2
 80161e4:	2500      	movs	r5, #0
 80161e6:	42a5      	cmp	r5, r4
 80161e8:	d105      	bne.n	80161f6 <__libc_init_array+0x2e>
 80161ea:	bd70      	pop	{r4, r5, r6, pc}
 80161ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80161f0:	4798      	blx	r3
 80161f2:	3501      	adds	r5, #1
 80161f4:	e7ee      	b.n	80161d4 <__libc_init_array+0xc>
 80161f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80161fa:	4798      	blx	r3
 80161fc:	3501      	adds	r5, #1
 80161fe:	e7f2      	b.n	80161e6 <__libc_init_array+0x1e>
 8016200:	0801afac 	.word	0x0801afac
 8016204:	0801afac 	.word	0x0801afac
 8016208:	0801afac 	.word	0x0801afac
 801620c:	0801afb4 	.word	0x0801afb4

08016210 <malloc>:
 8016210:	4b02      	ldr	r3, [pc, #8]	; (801621c <malloc+0xc>)
 8016212:	4601      	mov	r1, r0
 8016214:	6818      	ldr	r0, [r3, #0]
 8016216:	f000 b859 	b.w	80162cc <_malloc_r>
 801621a:	bf00      	nop
 801621c:	2000000c 	.word	0x2000000c

08016220 <memset>:
 8016220:	4402      	add	r2, r0
 8016222:	4603      	mov	r3, r0
 8016224:	4293      	cmp	r3, r2
 8016226:	d100      	bne.n	801622a <memset+0xa>
 8016228:	4770      	bx	lr
 801622a:	f803 1b01 	strb.w	r1, [r3], #1
 801622e:	e7f9      	b.n	8016224 <memset+0x4>

08016230 <_free_r>:
 8016230:	b538      	push	{r3, r4, r5, lr}
 8016232:	4605      	mov	r5, r0
 8016234:	2900      	cmp	r1, #0
 8016236:	d045      	beq.n	80162c4 <_free_r+0x94>
 8016238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801623c:	1f0c      	subs	r4, r1, #4
 801623e:	2b00      	cmp	r3, #0
 8016240:	bfb8      	it	lt
 8016242:	18e4      	addlt	r4, r4, r3
 8016244:	f003 f835 	bl	80192b2 <__malloc_lock>
 8016248:	4a1f      	ldr	r2, [pc, #124]	; (80162c8 <_free_r+0x98>)
 801624a:	6813      	ldr	r3, [r2, #0]
 801624c:	4610      	mov	r0, r2
 801624e:	b933      	cbnz	r3, 801625e <_free_r+0x2e>
 8016250:	6063      	str	r3, [r4, #4]
 8016252:	6014      	str	r4, [r2, #0]
 8016254:	4628      	mov	r0, r5
 8016256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801625a:	f003 b82b 	b.w	80192b4 <__malloc_unlock>
 801625e:	42a3      	cmp	r3, r4
 8016260:	d90c      	bls.n	801627c <_free_r+0x4c>
 8016262:	6821      	ldr	r1, [r4, #0]
 8016264:	1862      	adds	r2, r4, r1
 8016266:	4293      	cmp	r3, r2
 8016268:	bf04      	itt	eq
 801626a:	681a      	ldreq	r2, [r3, #0]
 801626c:	685b      	ldreq	r3, [r3, #4]
 801626e:	6063      	str	r3, [r4, #4]
 8016270:	bf04      	itt	eq
 8016272:	1852      	addeq	r2, r2, r1
 8016274:	6022      	streq	r2, [r4, #0]
 8016276:	6004      	str	r4, [r0, #0]
 8016278:	e7ec      	b.n	8016254 <_free_r+0x24>
 801627a:	4613      	mov	r3, r2
 801627c:	685a      	ldr	r2, [r3, #4]
 801627e:	b10a      	cbz	r2, 8016284 <_free_r+0x54>
 8016280:	42a2      	cmp	r2, r4
 8016282:	d9fa      	bls.n	801627a <_free_r+0x4a>
 8016284:	6819      	ldr	r1, [r3, #0]
 8016286:	1858      	adds	r0, r3, r1
 8016288:	42a0      	cmp	r0, r4
 801628a:	d10b      	bne.n	80162a4 <_free_r+0x74>
 801628c:	6820      	ldr	r0, [r4, #0]
 801628e:	4401      	add	r1, r0
 8016290:	1858      	adds	r0, r3, r1
 8016292:	4282      	cmp	r2, r0
 8016294:	6019      	str	r1, [r3, #0]
 8016296:	d1dd      	bne.n	8016254 <_free_r+0x24>
 8016298:	6810      	ldr	r0, [r2, #0]
 801629a:	6852      	ldr	r2, [r2, #4]
 801629c:	605a      	str	r2, [r3, #4]
 801629e:	4401      	add	r1, r0
 80162a0:	6019      	str	r1, [r3, #0]
 80162a2:	e7d7      	b.n	8016254 <_free_r+0x24>
 80162a4:	d902      	bls.n	80162ac <_free_r+0x7c>
 80162a6:	230c      	movs	r3, #12
 80162a8:	602b      	str	r3, [r5, #0]
 80162aa:	e7d3      	b.n	8016254 <_free_r+0x24>
 80162ac:	6820      	ldr	r0, [r4, #0]
 80162ae:	1821      	adds	r1, r4, r0
 80162b0:	428a      	cmp	r2, r1
 80162b2:	bf04      	itt	eq
 80162b4:	6811      	ldreq	r1, [r2, #0]
 80162b6:	6852      	ldreq	r2, [r2, #4]
 80162b8:	6062      	str	r2, [r4, #4]
 80162ba:	bf04      	itt	eq
 80162bc:	1809      	addeq	r1, r1, r0
 80162be:	6021      	streq	r1, [r4, #0]
 80162c0:	605c      	str	r4, [r3, #4]
 80162c2:	e7c7      	b.n	8016254 <_free_r+0x24>
 80162c4:	bd38      	pop	{r3, r4, r5, pc}
 80162c6:	bf00      	nop
 80162c8:	2004767c 	.word	0x2004767c

080162cc <_malloc_r>:
 80162cc:	b570      	push	{r4, r5, r6, lr}
 80162ce:	1ccd      	adds	r5, r1, #3
 80162d0:	f025 0503 	bic.w	r5, r5, #3
 80162d4:	3508      	adds	r5, #8
 80162d6:	2d0c      	cmp	r5, #12
 80162d8:	bf38      	it	cc
 80162da:	250c      	movcc	r5, #12
 80162dc:	2d00      	cmp	r5, #0
 80162de:	4606      	mov	r6, r0
 80162e0:	db01      	blt.n	80162e6 <_malloc_r+0x1a>
 80162e2:	42a9      	cmp	r1, r5
 80162e4:	d903      	bls.n	80162ee <_malloc_r+0x22>
 80162e6:	230c      	movs	r3, #12
 80162e8:	6033      	str	r3, [r6, #0]
 80162ea:	2000      	movs	r0, #0
 80162ec:	bd70      	pop	{r4, r5, r6, pc}
 80162ee:	f002 ffe0 	bl	80192b2 <__malloc_lock>
 80162f2:	4a21      	ldr	r2, [pc, #132]	; (8016378 <_malloc_r+0xac>)
 80162f4:	6814      	ldr	r4, [r2, #0]
 80162f6:	4621      	mov	r1, r4
 80162f8:	b991      	cbnz	r1, 8016320 <_malloc_r+0x54>
 80162fa:	4c20      	ldr	r4, [pc, #128]	; (801637c <_malloc_r+0xb0>)
 80162fc:	6823      	ldr	r3, [r4, #0]
 80162fe:	b91b      	cbnz	r3, 8016308 <_malloc_r+0x3c>
 8016300:	4630      	mov	r0, r6
 8016302:	f000 fe7b 	bl	8016ffc <_sbrk_r>
 8016306:	6020      	str	r0, [r4, #0]
 8016308:	4629      	mov	r1, r5
 801630a:	4630      	mov	r0, r6
 801630c:	f000 fe76 	bl	8016ffc <_sbrk_r>
 8016310:	1c43      	adds	r3, r0, #1
 8016312:	d124      	bne.n	801635e <_malloc_r+0x92>
 8016314:	230c      	movs	r3, #12
 8016316:	6033      	str	r3, [r6, #0]
 8016318:	4630      	mov	r0, r6
 801631a:	f002 ffcb 	bl	80192b4 <__malloc_unlock>
 801631e:	e7e4      	b.n	80162ea <_malloc_r+0x1e>
 8016320:	680b      	ldr	r3, [r1, #0]
 8016322:	1b5b      	subs	r3, r3, r5
 8016324:	d418      	bmi.n	8016358 <_malloc_r+0x8c>
 8016326:	2b0b      	cmp	r3, #11
 8016328:	d90f      	bls.n	801634a <_malloc_r+0x7e>
 801632a:	600b      	str	r3, [r1, #0]
 801632c:	50cd      	str	r5, [r1, r3]
 801632e:	18cc      	adds	r4, r1, r3
 8016330:	4630      	mov	r0, r6
 8016332:	f002 ffbf 	bl	80192b4 <__malloc_unlock>
 8016336:	f104 000b 	add.w	r0, r4, #11
 801633a:	1d23      	adds	r3, r4, #4
 801633c:	f020 0007 	bic.w	r0, r0, #7
 8016340:	1ac3      	subs	r3, r0, r3
 8016342:	d0d3      	beq.n	80162ec <_malloc_r+0x20>
 8016344:	425a      	negs	r2, r3
 8016346:	50e2      	str	r2, [r4, r3]
 8016348:	e7d0      	b.n	80162ec <_malloc_r+0x20>
 801634a:	428c      	cmp	r4, r1
 801634c:	684b      	ldr	r3, [r1, #4]
 801634e:	bf16      	itet	ne
 8016350:	6063      	strne	r3, [r4, #4]
 8016352:	6013      	streq	r3, [r2, #0]
 8016354:	460c      	movne	r4, r1
 8016356:	e7eb      	b.n	8016330 <_malloc_r+0x64>
 8016358:	460c      	mov	r4, r1
 801635a:	6849      	ldr	r1, [r1, #4]
 801635c:	e7cc      	b.n	80162f8 <_malloc_r+0x2c>
 801635e:	1cc4      	adds	r4, r0, #3
 8016360:	f024 0403 	bic.w	r4, r4, #3
 8016364:	42a0      	cmp	r0, r4
 8016366:	d005      	beq.n	8016374 <_malloc_r+0xa8>
 8016368:	1a21      	subs	r1, r4, r0
 801636a:	4630      	mov	r0, r6
 801636c:	f000 fe46 	bl	8016ffc <_sbrk_r>
 8016370:	3001      	adds	r0, #1
 8016372:	d0cf      	beq.n	8016314 <_malloc_r+0x48>
 8016374:	6025      	str	r5, [r4, #0]
 8016376:	e7db      	b.n	8016330 <_malloc_r+0x64>
 8016378:	2004767c 	.word	0x2004767c
 801637c:	20047680 	.word	0x20047680

08016380 <__cvt>:
 8016380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016384:	ec55 4b10 	vmov	r4, r5, d0
 8016388:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801638a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801638e:	2d00      	cmp	r5, #0
 8016390:	460e      	mov	r6, r1
 8016392:	4691      	mov	r9, r2
 8016394:	4619      	mov	r1, r3
 8016396:	bfb8      	it	lt
 8016398:	4622      	movlt	r2, r4
 801639a:	462b      	mov	r3, r5
 801639c:	f027 0720 	bic.w	r7, r7, #32
 80163a0:	bfbb      	ittet	lt
 80163a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80163a6:	461d      	movlt	r5, r3
 80163a8:	2300      	movge	r3, #0
 80163aa:	232d      	movlt	r3, #45	; 0x2d
 80163ac:	bfb8      	it	lt
 80163ae:	4614      	movlt	r4, r2
 80163b0:	2f46      	cmp	r7, #70	; 0x46
 80163b2:	700b      	strb	r3, [r1, #0]
 80163b4:	d004      	beq.n	80163c0 <__cvt+0x40>
 80163b6:	2f45      	cmp	r7, #69	; 0x45
 80163b8:	d100      	bne.n	80163bc <__cvt+0x3c>
 80163ba:	3601      	adds	r6, #1
 80163bc:	2102      	movs	r1, #2
 80163be:	e000      	b.n	80163c2 <__cvt+0x42>
 80163c0:	2103      	movs	r1, #3
 80163c2:	ab03      	add	r3, sp, #12
 80163c4:	9301      	str	r3, [sp, #4]
 80163c6:	ab02      	add	r3, sp, #8
 80163c8:	9300      	str	r3, [sp, #0]
 80163ca:	4632      	mov	r2, r6
 80163cc:	4653      	mov	r3, sl
 80163ce:	ec45 4b10 	vmov	d0, r4, r5
 80163d2:	f001 fe51 	bl	8018078 <_dtoa_r>
 80163d6:	2f47      	cmp	r7, #71	; 0x47
 80163d8:	4680      	mov	r8, r0
 80163da:	d102      	bne.n	80163e2 <__cvt+0x62>
 80163dc:	f019 0f01 	tst.w	r9, #1
 80163e0:	d026      	beq.n	8016430 <__cvt+0xb0>
 80163e2:	2f46      	cmp	r7, #70	; 0x46
 80163e4:	eb08 0906 	add.w	r9, r8, r6
 80163e8:	d111      	bne.n	801640e <__cvt+0x8e>
 80163ea:	f898 3000 	ldrb.w	r3, [r8]
 80163ee:	2b30      	cmp	r3, #48	; 0x30
 80163f0:	d10a      	bne.n	8016408 <__cvt+0x88>
 80163f2:	2200      	movs	r2, #0
 80163f4:	2300      	movs	r3, #0
 80163f6:	4620      	mov	r0, r4
 80163f8:	4629      	mov	r1, r5
 80163fa:	f7ea fb7d 	bl	8000af8 <__aeabi_dcmpeq>
 80163fe:	b918      	cbnz	r0, 8016408 <__cvt+0x88>
 8016400:	f1c6 0601 	rsb	r6, r6, #1
 8016404:	f8ca 6000 	str.w	r6, [sl]
 8016408:	f8da 3000 	ldr.w	r3, [sl]
 801640c:	4499      	add	r9, r3
 801640e:	2200      	movs	r2, #0
 8016410:	2300      	movs	r3, #0
 8016412:	4620      	mov	r0, r4
 8016414:	4629      	mov	r1, r5
 8016416:	f7ea fb6f 	bl	8000af8 <__aeabi_dcmpeq>
 801641a:	b938      	cbnz	r0, 801642c <__cvt+0xac>
 801641c:	2230      	movs	r2, #48	; 0x30
 801641e:	9b03      	ldr	r3, [sp, #12]
 8016420:	454b      	cmp	r3, r9
 8016422:	d205      	bcs.n	8016430 <__cvt+0xb0>
 8016424:	1c59      	adds	r1, r3, #1
 8016426:	9103      	str	r1, [sp, #12]
 8016428:	701a      	strb	r2, [r3, #0]
 801642a:	e7f8      	b.n	801641e <__cvt+0x9e>
 801642c:	f8cd 900c 	str.w	r9, [sp, #12]
 8016430:	9b03      	ldr	r3, [sp, #12]
 8016432:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016434:	eba3 0308 	sub.w	r3, r3, r8
 8016438:	4640      	mov	r0, r8
 801643a:	6013      	str	r3, [r2, #0]
 801643c:	b004      	add	sp, #16
 801643e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016442 <__exponent>:
 8016442:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016444:	2900      	cmp	r1, #0
 8016446:	4604      	mov	r4, r0
 8016448:	bfba      	itte	lt
 801644a:	4249      	neglt	r1, r1
 801644c:	232d      	movlt	r3, #45	; 0x2d
 801644e:	232b      	movge	r3, #43	; 0x2b
 8016450:	2909      	cmp	r1, #9
 8016452:	f804 2b02 	strb.w	r2, [r4], #2
 8016456:	7043      	strb	r3, [r0, #1]
 8016458:	dd20      	ble.n	801649c <__exponent+0x5a>
 801645a:	f10d 0307 	add.w	r3, sp, #7
 801645e:	461f      	mov	r7, r3
 8016460:	260a      	movs	r6, #10
 8016462:	fb91 f5f6 	sdiv	r5, r1, r6
 8016466:	fb06 1115 	mls	r1, r6, r5, r1
 801646a:	3130      	adds	r1, #48	; 0x30
 801646c:	2d09      	cmp	r5, #9
 801646e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8016472:	f103 32ff 	add.w	r2, r3, #4294967295
 8016476:	4629      	mov	r1, r5
 8016478:	dc09      	bgt.n	801648e <__exponent+0x4c>
 801647a:	3130      	adds	r1, #48	; 0x30
 801647c:	3b02      	subs	r3, #2
 801647e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016482:	42bb      	cmp	r3, r7
 8016484:	4622      	mov	r2, r4
 8016486:	d304      	bcc.n	8016492 <__exponent+0x50>
 8016488:	1a10      	subs	r0, r2, r0
 801648a:	b003      	add	sp, #12
 801648c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801648e:	4613      	mov	r3, r2
 8016490:	e7e7      	b.n	8016462 <__exponent+0x20>
 8016492:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016496:	f804 2b01 	strb.w	r2, [r4], #1
 801649a:	e7f2      	b.n	8016482 <__exponent+0x40>
 801649c:	2330      	movs	r3, #48	; 0x30
 801649e:	4419      	add	r1, r3
 80164a0:	7083      	strb	r3, [r0, #2]
 80164a2:	1d02      	adds	r2, r0, #4
 80164a4:	70c1      	strb	r1, [r0, #3]
 80164a6:	e7ef      	b.n	8016488 <__exponent+0x46>

080164a8 <_printf_float>:
 80164a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164ac:	b08d      	sub	sp, #52	; 0x34
 80164ae:	460c      	mov	r4, r1
 80164b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80164b4:	4616      	mov	r6, r2
 80164b6:	461f      	mov	r7, r3
 80164b8:	4605      	mov	r5, r0
 80164ba:	f002 fecf 	bl	801925c <_localeconv_r>
 80164be:	6803      	ldr	r3, [r0, #0]
 80164c0:	9304      	str	r3, [sp, #16]
 80164c2:	4618      	mov	r0, r3
 80164c4:	f7e9 fe9c 	bl	8000200 <strlen>
 80164c8:	2300      	movs	r3, #0
 80164ca:	930a      	str	r3, [sp, #40]	; 0x28
 80164cc:	f8d8 3000 	ldr.w	r3, [r8]
 80164d0:	9005      	str	r0, [sp, #20]
 80164d2:	3307      	adds	r3, #7
 80164d4:	f023 0307 	bic.w	r3, r3, #7
 80164d8:	f103 0208 	add.w	r2, r3, #8
 80164dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80164e0:	f8d4 b000 	ldr.w	fp, [r4]
 80164e4:	f8c8 2000 	str.w	r2, [r8]
 80164e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80164f0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80164f4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80164f8:	9307      	str	r3, [sp, #28]
 80164fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80164fe:	f04f 32ff 	mov.w	r2, #4294967295
 8016502:	4ba7      	ldr	r3, [pc, #668]	; (80167a0 <_printf_float+0x2f8>)
 8016504:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016508:	f7ea fb28 	bl	8000b5c <__aeabi_dcmpun>
 801650c:	bb70      	cbnz	r0, 801656c <_printf_float+0xc4>
 801650e:	f04f 32ff 	mov.w	r2, #4294967295
 8016512:	4ba3      	ldr	r3, [pc, #652]	; (80167a0 <_printf_float+0x2f8>)
 8016514:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016518:	f7ea fb02 	bl	8000b20 <__aeabi_dcmple>
 801651c:	bb30      	cbnz	r0, 801656c <_printf_float+0xc4>
 801651e:	2200      	movs	r2, #0
 8016520:	2300      	movs	r3, #0
 8016522:	4640      	mov	r0, r8
 8016524:	4649      	mov	r1, r9
 8016526:	f7ea faf1 	bl	8000b0c <__aeabi_dcmplt>
 801652a:	b110      	cbz	r0, 8016532 <_printf_float+0x8a>
 801652c:	232d      	movs	r3, #45	; 0x2d
 801652e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016532:	4a9c      	ldr	r2, [pc, #624]	; (80167a4 <_printf_float+0x2fc>)
 8016534:	4b9c      	ldr	r3, [pc, #624]	; (80167a8 <_printf_float+0x300>)
 8016536:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801653a:	bf8c      	ite	hi
 801653c:	4690      	movhi	r8, r2
 801653e:	4698      	movls	r8, r3
 8016540:	2303      	movs	r3, #3
 8016542:	f02b 0204 	bic.w	r2, fp, #4
 8016546:	6123      	str	r3, [r4, #16]
 8016548:	6022      	str	r2, [r4, #0]
 801654a:	f04f 0900 	mov.w	r9, #0
 801654e:	9700      	str	r7, [sp, #0]
 8016550:	4633      	mov	r3, r6
 8016552:	aa0b      	add	r2, sp, #44	; 0x2c
 8016554:	4621      	mov	r1, r4
 8016556:	4628      	mov	r0, r5
 8016558:	f000 f9e6 	bl	8016928 <_printf_common>
 801655c:	3001      	adds	r0, #1
 801655e:	f040 808d 	bne.w	801667c <_printf_float+0x1d4>
 8016562:	f04f 30ff 	mov.w	r0, #4294967295
 8016566:	b00d      	add	sp, #52	; 0x34
 8016568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801656c:	4642      	mov	r2, r8
 801656e:	464b      	mov	r3, r9
 8016570:	4640      	mov	r0, r8
 8016572:	4649      	mov	r1, r9
 8016574:	f7ea faf2 	bl	8000b5c <__aeabi_dcmpun>
 8016578:	b110      	cbz	r0, 8016580 <_printf_float+0xd8>
 801657a:	4a8c      	ldr	r2, [pc, #560]	; (80167ac <_printf_float+0x304>)
 801657c:	4b8c      	ldr	r3, [pc, #560]	; (80167b0 <_printf_float+0x308>)
 801657e:	e7da      	b.n	8016536 <_printf_float+0x8e>
 8016580:	6861      	ldr	r1, [r4, #4]
 8016582:	1c4b      	adds	r3, r1, #1
 8016584:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8016588:	a80a      	add	r0, sp, #40	; 0x28
 801658a:	d13e      	bne.n	801660a <_printf_float+0x162>
 801658c:	2306      	movs	r3, #6
 801658e:	6063      	str	r3, [r4, #4]
 8016590:	2300      	movs	r3, #0
 8016592:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8016596:	ab09      	add	r3, sp, #36	; 0x24
 8016598:	9300      	str	r3, [sp, #0]
 801659a:	ec49 8b10 	vmov	d0, r8, r9
 801659e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80165a2:	6022      	str	r2, [r4, #0]
 80165a4:	f8cd a004 	str.w	sl, [sp, #4]
 80165a8:	6861      	ldr	r1, [r4, #4]
 80165aa:	4628      	mov	r0, r5
 80165ac:	f7ff fee8 	bl	8016380 <__cvt>
 80165b0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80165b4:	2b47      	cmp	r3, #71	; 0x47
 80165b6:	4680      	mov	r8, r0
 80165b8:	d109      	bne.n	80165ce <_printf_float+0x126>
 80165ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165bc:	1cd8      	adds	r0, r3, #3
 80165be:	db02      	blt.n	80165c6 <_printf_float+0x11e>
 80165c0:	6862      	ldr	r2, [r4, #4]
 80165c2:	4293      	cmp	r3, r2
 80165c4:	dd47      	ble.n	8016656 <_printf_float+0x1ae>
 80165c6:	f1aa 0a02 	sub.w	sl, sl, #2
 80165ca:	fa5f fa8a 	uxtb.w	sl, sl
 80165ce:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80165d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80165d4:	d824      	bhi.n	8016620 <_printf_float+0x178>
 80165d6:	3901      	subs	r1, #1
 80165d8:	4652      	mov	r2, sl
 80165da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80165de:	9109      	str	r1, [sp, #36]	; 0x24
 80165e0:	f7ff ff2f 	bl	8016442 <__exponent>
 80165e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80165e6:	1813      	adds	r3, r2, r0
 80165e8:	2a01      	cmp	r2, #1
 80165ea:	4681      	mov	r9, r0
 80165ec:	6123      	str	r3, [r4, #16]
 80165ee:	dc02      	bgt.n	80165f6 <_printf_float+0x14e>
 80165f0:	6822      	ldr	r2, [r4, #0]
 80165f2:	07d1      	lsls	r1, r2, #31
 80165f4:	d501      	bpl.n	80165fa <_printf_float+0x152>
 80165f6:	3301      	adds	r3, #1
 80165f8:	6123      	str	r3, [r4, #16]
 80165fa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d0a5      	beq.n	801654e <_printf_float+0xa6>
 8016602:	232d      	movs	r3, #45	; 0x2d
 8016604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016608:	e7a1      	b.n	801654e <_printf_float+0xa6>
 801660a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801660e:	f000 8177 	beq.w	8016900 <_printf_float+0x458>
 8016612:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8016616:	d1bb      	bne.n	8016590 <_printf_float+0xe8>
 8016618:	2900      	cmp	r1, #0
 801661a:	d1b9      	bne.n	8016590 <_printf_float+0xe8>
 801661c:	2301      	movs	r3, #1
 801661e:	e7b6      	b.n	801658e <_printf_float+0xe6>
 8016620:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8016624:	d119      	bne.n	801665a <_printf_float+0x1b2>
 8016626:	2900      	cmp	r1, #0
 8016628:	6863      	ldr	r3, [r4, #4]
 801662a:	dd0c      	ble.n	8016646 <_printf_float+0x19e>
 801662c:	6121      	str	r1, [r4, #16]
 801662e:	b913      	cbnz	r3, 8016636 <_printf_float+0x18e>
 8016630:	6822      	ldr	r2, [r4, #0]
 8016632:	07d2      	lsls	r2, r2, #31
 8016634:	d502      	bpl.n	801663c <_printf_float+0x194>
 8016636:	3301      	adds	r3, #1
 8016638:	440b      	add	r3, r1
 801663a:	6123      	str	r3, [r4, #16]
 801663c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801663e:	65a3      	str	r3, [r4, #88]	; 0x58
 8016640:	f04f 0900 	mov.w	r9, #0
 8016644:	e7d9      	b.n	80165fa <_printf_float+0x152>
 8016646:	b913      	cbnz	r3, 801664e <_printf_float+0x1a6>
 8016648:	6822      	ldr	r2, [r4, #0]
 801664a:	07d0      	lsls	r0, r2, #31
 801664c:	d501      	bpl.n	8016652 <_printf_float+0x1aa>
 801664e:	3302      	adds	r3, #2
 8016650:	e7f3      	b.n	801663a <_printf_float+0x192>
 8016652:	2301      	movs	r3, #1
 8016654:	e7f1      	b.n	801663a <_printf_float+0x192>
 8016656:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801665a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801665e:	4293      	cmp	r3, r2
 8016660:	db05      	blt.n	801666e <_printf_float+0x1c6>
 8016662:	6822      	ldr	r2, [r4, #0]
 8016664:	6123      	str	r3, [r4, #16]
 8016666:	07d1      	lsls	r1, r2, #31
 8016668:	d5e8      	bpl.n	801663c <_printf_float+0x194>
 801666a:	3301      	adds	r3, #1
 801666c:	e7e5      	b.n	801663a <_printf_float+0x192>
 801666e:	2b00      	cmp	r3, #0
 8016670:	bfd4      	ite	le
 8016672:	f1c3 0302 	rsble	r3, r3, #2
 8016676:	2301      	movgt	r3, #1
 8016678:	4413      	add	r3, r2
 801667a:	e7de      	b.n	801663a <_printf_float+0x192>
 801667c:	6823      	ldr	r3, [r4, #0]
 801667e:	055a      	lsls	r2, r3, #21
 8016680:	d407      	bmi.n	8016692 <_printf_float+0x1ea>
 8016682:	6923      	ldr	r3, [r4, #16]
 8016684:	4642      	mov	r2, r8
 8016686:	4631      	mov	r1, r6
 8016688:	4628      	mov	r0, r5
 801668a:	47b8      	blx	r7
 801668c:	3001      	adds	r0, #1
 801668e:	d12b      	bne.n	80166e8 <_printf_float+0x240>
 8016690:	e767      	b.n	8016562 <_printf_float+0xba>
 8016692:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8016696:	f240 80dc 	bls.w	8016852 <_printf_float+0x3aa>
 801669a:	2200      	movs	r2, #0
 801669c:	2300      	movs	r3, #0
 801669e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80166a2:	f7ea fa29 	bl	8000af8 <__aeabi_dcmpeq>
 80166a6:	2800      	cmp	r0, #0
 80166a8:	d033      	beq.n	8016712 <_printf_float+0x26a>
 80166aa:	2301      	movs	r3, #1
 80166ac:	4a41      	ldr	r2, [pc, #260]	; (80167b4 <_printf_float+0x30c>)
 80166ae:	4631      	mov	r1, r6
 80166b0:	4628      	mov	r0, r5
 80166b2:	47b8      	blx	r7
 80166b4:	3001      	adds	r0, #1
 80166b6:	f43f af54 	beq.w	8016562 <_printf_float+0xba>
 80166ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80166be:	429a      	cmp	r2, r3
 80166c0:	db02      	blt.n	80166c8 <_printf_float+0x220>
 80166c2:	6823      	ldr	r3, [r4, #0]
 80166c4:	07d8      	lsls	r0, r3, #31
 80166c6:	d50f      	bpl.n	80166e8 <_printf_float+0x240>
 80166c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80166cc:	4631      	mov	r1, r6
 80166ce:	4628      	mov	r0, r5
 80166d0:	47b8      	blx	r7
 80166d2:	3001      	adds	r0, #1
 80166d4:	f43f af45 	beq.w	8016562 <_printf_float+0xba>
 80166d8:	f04f 0800 	mov.w	r8, #0
 80166dc:	f104 091a 	add.w	r9, r4, #26
 80166e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80166e2:	3b01      	subs	r3, #1
 80166e4:	4543      	cmp	r3, r8
 80166e6:	dc09      	bgt.n	80166fc <_printf_float+0x254>
 80166e8:	6823      	ldr	r3, [r4, #0]
 80166ea:	079b      	lsls	r3, r3, #30
 80166ec:	f100 8103 	bmi.w	80168f6 <_printf_float+0x44e>
 80166f0:	68e0      	ldr	r0, [r4, #12]
 80166f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80166f4:	4298      	cmp	r0, r3
 80166f6:	bfb8      	it	lt
 80166f8:	4618      	movlt	r0, r3
 80166fa:	e734      	b.n	8016566 <_printf_float+0xbe>
 80166fc:	2301      	movs	r3, #1
 80166fe:	464a      	mov	r2, r9
 8016700:	4631      	mov	r1, r6
 8016702:	4628      	mov	r0, r5
 8016704:	47b8      	blx	r7
 8016706:	3001      	adds	r0, #1
 8016708:	f43f af2b 	beq.w	8016562 <_printf_float+0xba>
 801670c:	f108 0801 	add.w	r8, r8, #1
 8016710:	e7e6      	b.n	80166e0 <_printf_float+0x238>
 8016712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016714:	2b00      	cmp	r3, #0
 8016716:	dc2b      	bgt.n	8016770 <_printf_float+0x2c8>
 8016718:	2301      	movs	r3, #1
 801671a:	4a26      	ldr	r2, [pc, #152]	; (80167b4 <_printf_float+0x30c>)
 801671c:	4631      	mov	r1, r6
 801671e:	4628      	mov	r0, r5
 8016720:	47b8      	blx	r7
 8016722:	3001      	adds	r0, #1
 8016724:	f43f af1d 	beq.w	8016562 <_printf_float+0xba>
 8016728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801672a:	b923      	cbnz	r3, 8016736 <_printf_float+0x28e>
 801672c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801672e:	b913      	cbnz	r3, 8016736 <_printf_float+0x28e>
 8016730:	6823      	ldr	r3, [r4, #0]
 8016732:	07d9      	lsls	r1, r3, #31
 8016734:	d5d8      	bpl.n	80166e8 <_printf_float+0x240>
 8016736:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801673a:	4631      	mov	r1, r6
 801673c:	4628      	mov	r0, r5
 801673e:	47b8      	blx	r7
 8016740:	3001      	adds	r0, #1
 8016742:	f43f af0e 	beq.w	8016562 <_printf_float+0xba>
 8016746:	f04f 0900 	mov.w	r9, #0
 801674a:	f104 0a1a 	add.w	sl, r4, #26
 801674e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016750:	425b      	negs	r3, r3
 8016752:	454b      	cmp	r3, r9
 8016754:	dc01      	bgt.n	801675a <_printf_float+0x2b2>
 8016756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016758:	e794      	b.n	8016684 <_printf_float+0x1dc>
 801675a:	2301      	movs	r3, #1
 801675c:	4652      	mov	r2, sl
 801675e:	4631      	mov	r1, r6
 8016760:	4628      	mov	r0, r5
 8016762:	47b8      	blx	r7
 8016764:	3001      	adds	r0, #1
 8016766:	f43f aefc 	beq.w	8016562 <_printf_float+0xba>
 801676a:	f109 0901 	add.w	r9, r9, #1
 801676e:	e7ee      	b.n	801674e <_printf_float+0x2a6>
 8016770:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016772:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016774:	429a      	cmp	r2, r3
 8016776:	bfa8      	it	ge
 8016778:	461a      	movge	r2, r3
 801677a:	2a00      	cmp	r2, #0
 801677c:	4691      	mov	r9, r2
 801677e:	dd07      	ble.n	8016790 <_printf_float+0x2e8>
 8016780:	4613      	mov	r3, r2
 8016782:	4631      	mov	r1, r6
 8016784:	4642      	mov	r2, r8
 8016786:	4628      	mov	r0, r5
 8016788:	47b8      	blx	r7
 801678a:	3001      	adds	r0, #1
 801678c:	f43f aee9 	beq.w	8016562 <_printf_float+0xba>
 8016790:	f104 031a 	add.w	r3, r4, #26
 8016794:	f04f 0b00 	mov.w	fp, #0
 8016798:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801679c:	9306      	str	r3, [sp, #24]
 801679e:	e015      	b.n	80167cc <_printf_float+0x324>
 80167a0:	7fefffff 	.word	0x7fefffff
 80167a4:	0801ac7c 	.word	0x0801ac7c
 80167a8:	0801ac78 	.word	0x0801ac78
 80167ac:	0801ac84 	.word	0x0801ac84
 80167b0:	0801ac80 	.word	0x0801ac80
 80167b4:	0801ae3b 	.word	0x0801ae3b
 80167b8:	2301      	movs	r3, #1
 80167ba:	9a06      	ldr	r2, [sp, #24]
 80167bc:	4631      	mov	r1, r6
 80167be:	4628      	mov	r0, r5
 80167c0:	47b8      	blx	r7
 80167c2:	3001      	adds	r0, #1
 80167c4:	f43f aecd 	beq.w	8016562 <_printf_float+0xba>
 80167c8:	f10b 0b01 	add.w	fp, fp, #1
 80167cc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80167d0:	ebaa 0309 	sub.w	r3, sl, r9
 80167d4:	455b      	cmp	r3, fp
 80167d6:	dcef      	bgt.n	80167b8 <_printf_float+0x310>
 80167d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80167dc:	429a      	cmp	r2, r3
 80167de:	44d0      	add	r8, sl
 80167e0:	db15      	blt.n	801680e <_printf_float+0x366>
 80167e2:	6823      	ldr	r3, [r4, #0]
 80167e4:	07da      	lsls	r2, r3, #31
 80167e6:	d412      	bmi.n	801680e <_printf_float+0x366>
 80167e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80167ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80167ec:	eba3 020a 	sub.w	r2, r3, sl
 80167f0:	eba3 0a01 	sub.w	sl, r3, r1
 80167f4:	4592      	cmp	sl, r2
 80167f6:	bfa8      	it	ge
 80167f8:	4692      	movge	sl, r2
 80167fa:	f1ba 0f00 	cmp.w	sl, #0
 80167fe:	dc0e      	bgt.n	801681e <_printf_float+0x376>
 8016800:	f04f 0800 	mov.w	r8, #0
 8016804:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016808:	f104 091a 	add.w	r9, r4, #26
 801680c:	e019      	b.n	8016842 <_printf_float+0x39a>
 801680e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016812:	4631      	mov	r1, r6
 8016814:	4628      	mov	r0, r5
 8016816:	47b8      	blx	r7
 8016818:	3001      	adds	r0, #1
 801681a:	d1e5      	bne.n	80167e8 <_printf_float+0x340>
 801681c:	e6a1      	b.n	8016562 <_printf_float+0xba>
 801681e:	4653      	mov	r3, sl
 8016820:	4642      	mov	r2, r8
 8016822:	4631      	mov	r1, r6
 8016824:	4628      	mov	r0, r5
 8016826:	47b8      	blx	r7
 8016828:	3001      	adds	r0, #1
 801682a:	d1e9      	bne.n	8016800 <_printf_float+0x358>
 801682c:	e699      	b.n	8016562 <_printf_float+0xba>
 801682e:	2301      	movs	r3, #1
 8016830:	464a      	mov	r2, r9
 8016832:	4631      	mov	r1, r6
 8016834:	4628      	mov	r0, r5
 8016836:	47b8      	blx	r7
 8016838:	3001      	adds	r0, #1
 801683a:	f43f ae92 	beq.w	8016562 <_printf_float+0xba>
 801683e:	f108 0801 	add.w	r8, r8, #1
 8016842:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016846:	1a9b      	subs	r3, r3, r2
 8016848:	eba3 030a 	sub.w	r3, r3, sl
 801684c:	4543      	cmp	r3, r8
 801684e:	dcee      	bgt.n	801682e <_printf_float+0x386>
 8016850:	e74a      	b.n	80166e8 <_printf_float+0x240>
 8016852:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016854:	2a01      	cmp	r2, #1
 8016856:	dc01      	bgt.n	801685c <_printf_float+0x3b4>
 8016858:	07db      	lsls	r3, r3, #31
 801685a:	d53a      	bpl.n	80168d2 <_printf_float+0x42a>
 801685c:	2301      	movs	r3, #1
 801685e:	4642      	mov	r2, r8
 8016860:	4631      	mov	r1, r6
 8016862:	4628      	mov	r0, r5
 8016864:	47b8      	blx	r7
 8016866:	3001      	adds	r0, #1
 8016868:	f43f ae7b 	beq.w	8016562 <_printf_float+0xba>
 801686c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016870:	4631      	mov	r1, r6
 8016872:	4628      	mov	r0, r5
 8016874:	47b8      	blx	r7
 8016876:	3001      	adds	r0, #1
 8016878:	f108 0801 	add.w	r8, r8, #1
 801687c:	f43f ae71 	beq.w	8016562 <_printf_float+0xba>
 8016880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016882:	2200      	movs	r2, #0
 8016884:	f103 3aff 	add.w	sl, r3, #4294967295
 8016888:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801688c:	2300      	movs	r3, #0
 801688e:	f7ea f933 	bl	8000af8 <__aeabi_dcmpeq>
 8016892:	b9c8      	cbnz	r0, 80168c8 <_printf_float+0x420>
 8016894:	4653      	mov	r3, sl
 8016896:	4642      	mov	r2, r8
 8016898:	4631      	mov	r1, r6
 801689a:	4628      	mov	r0, r5
 801689c:	47b8      	blx	r7
 801689e:	3001      	adds	r0, #1
 80168a0:	d10e      	bne.n	80168c0 <_printf_float+0x418>
 80168a2:	e65e      	b.n	8016562 <_printf_float+0xba>
 80168a4:	2301      	movs	r3, #1
 80168a6:	4652      	mov	r2, sl
 80168a8:	4631      	mov	r1, r6
 80168aa:	4628      	mov	r0, r5
 80168ac:	47b8      	blx	r7
 80168ae:	3001      	adds	r0, #1
 80168b0:	f43f ae57 	beq.w	8016562 <_printf_float+0xba>
 80168b4:	f108 0801 	add.w	r8, r8, #1
 80168b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80168ba:	3b01      	subs	r3, #1
 80168bc:	4543      	cmp	r3, r8
 80168be:	dcf1      	bgt.n	80168a4 <_printf_float+0x3fc>
 80168c0:	464b      	mov	r3, r9
 80168c2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80168c6:	e6de      	b.n	8016686 <_printf_float+0x1de>
 80168c8:	f04f 0800 	mov.w	r8, #0
 80168cc:	f104 0a1a 	add.w	sl, r4, #26
 80168d0:	e7f2      	b.n	80168b8 <_printf_float+0x410>
 80168d2:	2301      	movs	r3, #1
 80168d4:	e7df      	b.n	8016896 <_printf_float+0x3ee>
 80168d6:	2301      	movs	r3, #1
 80168d8:	464a      	mov	r2, r9
 80168da:	4631      	mov	r1, r6
 80168dc:	4628      	mov	r0, r5
 80168de:	47b8      	blx	r7
 80168e0:	3001      	adds	r0, #1
 80168e2:	f43f ae3e 	beq.w	8016562 <_printf_float+0xba>
 80168e6:	f108 0801 	add.w	r8, r8, #1
 80168ea:	68e3      	ldr	r3, [r4, #12]
 80168ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80168ee:	1a9b      	subs	r3, r3, r2
 80168f0:	4543      	cmp	r3, r8
 80168f2:	dcf0      	bgt.n	80168d6 <_printf_float+0x42e>
 80168f4:	e6fc      	b.n	80166f0 <_printf_float+0x248>
 80168f6:	f04f 0800 	mov.w	r8, #0
 80168fa:	f104 0919 	add.w	r9, r4, #25
 80168fe:	e7f4      	b.n	80168ea <_printf_float+0x442>
 8016900:	2900      	cmp	r1, #0
 8016902:	f43f ae8b 	beq.w	801661c <_printf_float+0x174>
 8016906:	2300      	movs	r3, #0
 8016908:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801690c:	ab09      	add	r3, sp, #36	; 0x24
 801690e:	9300      	str	r3, [sp, #0]
 8016910:	ec49 8b10 	vmov	d0, r8, r9
 8016914:	6022      	str	r2, [r4, #0]
 8016916:	f8cd a004 	str.w	sl, [sp, #4]
 801691a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801691e:	4628      	mov	r0, r5
 8016920:	f7ff fd2e 	bl	8016380 <__cvt>
 8016924:	4680      	mov	r8, r0
 8016926:	e648      	b.n	80165ba <_printf_float+0x112>

08016928 <_printf_common>:
 8016928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801692c:	4691      	mov	r9, r2
 801692e:	461f      	mov	r7, r3
 8016930:	688a      	ldr	r2, [r1, #8]
 8016932:	690b      	ldr	r3, [r1, #16]
 8016934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016938:	4293      	cmp	r3, r2
 801693a:	bfb8      	it	lt
 801693c:	4613      	movlt	r3, r2
 801693e:	f8c9 3000 	str.w	r3, [r9]
 8016942:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016946:	4606      	mov	r6, r0
 8016948:	460c      	mov	r4, r1
 801694a:	b112      	cbz	r2, 8016952 <_printf_common+0x2a>
 801694c:	3301      	adds	r3, #1
 801694e:	f8c9 3000 	str.w	r3, [r9]
 8016952:	6823      	ldr	r3, [r4, #0]
 8016954:	0699      	lsls	r1, r3, #26
 8016956:	bf42      	ittt	mi
 8016958:	f8d9 3000 	ldrmi.w	r3, [r9]
 801695c:	3302      	addmi	r3, #2
 801695e:	f8c9 3000 	strmi.w	r3, [r9]
 8016962:	6825      	ldr	r5, [r4, #0]
 8016964:	f015 0506 	ands.w	r5, r5, #6
 8016968:	d107      	bne.n	801697a <_printf_common+0x52>
 801696a:	f104 0a19 	add.w	sl, r4, #25
 801696e:	68e3      	ldr	r3, [r4, #12]
 8016970:	f8d9 2000 	ldr.w	r2, [r9]
 8016974:	1a9b      	subs	r3, r3, r2
 8016976:	42ab      	cmp	r3, r5
 8016978:	dc28      	bgt.n	80169cc <_printf_common+0xa4>
 801697a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801697e:	6822      	ldr	r2, [r4, #0]
 8016980:	3300      	adds	r3, #0
 8016982:	bf18      	it	ne
 8016984:	2301      	movne	r3, #1
 8016986:	0692      	lsls	r2, r2, #26
 8016988:	d42d      	bmi.n	80169e6 <_printf_common+0xbe>
 801698a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801698e:	4639      	mov	r1, r7
 8016990:	4630      	mov	r0, r6
 8016992:	47c0      	blx	r8
 8016994:	3001      	adds	r0, #1
 8016996:	d020      	beq.n	80169da <_printf_common+0xb2>
 8016998:	6823      	ldr	r3, [r4, #0]
 801699a:	68e5      	ldr	r5, [r4, #12]
 801699c:	f8d9 2000 	ldr.w	r2, [r9]
 80169a0:	f003 0306 	and.w	r3, r3, #6
 80169a4:	2b04      	cmp	r3, #4
 80169a6:	bf08      	it	eq
 80169a8:	1aad      	subeq	r5, r5, r2
 80169aa:	68a3      	ldr	r3, [r4, #8]
 80169ac:	6922      	ldr	r2, [r4, #16]
 80169ae:	bf0c      	ite	eq
 80169b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80169b4:	2500      	movne	r5, #0
 80169b6:	4293      	cmp	r3, r2
 80169b8:	bfc4      	itt	gt
 80169ba:	1a9b      	subgt	r3, r3, r2
 80169bc:	18ed      	addgt	r5, r5, r3
 80169be:	f04f 0900 	mov.w	r9, #0
 80169c2:	341a      	adds	r4, #26
 80169c4:	454d      	cmp	r5, r9
 80169c6:	d11a      	bne.n	80169fe <_printf_common+0xd6>
 80169c8:	2000      	movs	r0, #0
 80169ca:	e008      	b.n	80169de <_printf_common+0xb6>
 80169cc:	2301      	movs	r3, #1
 80169ce:	4652      	mov	r2, sl
 80169d0:	4639      	mov	r1, r7
 80169d2:	4630      	mov	r0, r6
 80169d4:	47c0      	blx	r8
 80169d6:	3001      	adds	r0, #1
 80169d8:	d103      	bne.n	80169e2 <_printf_common+0xba>
 80169da:	f04f 30ff 	mov.w	r0, #4294967295
 80169de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169e2:	3501      	adds	r5, #1
 80169e4:	e7c3      	b.n	801696e <_printf_common+0x46>
 80169e6:	18e1      	adds	r1, r4, r3
 80169e8:	1c5a      	adds	r2, r3, #1
 80169ea:	2030      	movs	r0, #48	; 0x30
 80169ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80169f0:	4422      	add	r2, r4
 80169f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80169f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80169fa:	3302      	adds	r3, #2
 80169fc:	e7c5      	b.n	801698a <_printf_common+0x62>
 80169fe:	2301      	movs	r3, #1
 8016a00:	4622      	mov	r2, r4
 8016a02:	4639      	mov	r1, r7
 8016a04:	4630      	mov	r0, r6
 8016a06:	47c0      	blx	r8
 8016a08:	3001      	adds	r0, #1
 8016a0a:	d0e6      	beq.n	80169da <_printf_common+0xb2>
 8016a0c:	f109 0901 	add.w	r9, r9, #1
 8016a10:	e7d8      	b.n	80169c4 <_printf_common+0x9c>
	...

08016a14 <_printf_i>:
 8016a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a18:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016a1c:	460c      	mov	r4, r1
 8016a1e:	7e09      	ldrb	r1, [r1, #24]
 8016a20:	b085      	sub	sp, #20
 8016a22:	296e      	cmp	r1, #110	; 0x6e
 8016a24:	4617      	mov	r7, r2
 8016a26:	4606      	mov	r6, r0
 8016a28:	4698      	mov	r8, r3
 8016a2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016a2c:	f000 80b3 	beq.w	8016b96 <_printf_i+0x182>
 8016a30:	d822      	bhi.n	8016a78 <_printf_i+0x64>
 8016a32:	2963      	cmp	r1, #99	; 0x63
 8016a34:	d036      	beq.n	8016aa4 <_printf_i+0x90>
 8016a36:	d80a      	bhi.n	8016a4e <_printf_i+0x3a>
 8016a38:	2900      	cmp	r1, #0
 8016a3a:	f000 80b9 	beq.w	8016bb0 <_printf_i+0x19c>
 8016a3e:	2958      	cmp	r1, #88	; 0x58
 8016a40:	f000 8083 	beq.w	8016b4a <_printf_i+0x136>
 8016a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016a48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016a4c:	e032      	b.n	8016ab4 <_printf_i+0xa0>
 8016a4e:	2964      	cmp	r1, #100	; 0x64
 8016a50:	d001      	beq.n	8016a56 <_printf_i+0x42>
 8016a52:	2969      	cmp	r1, #105	; 0x69
 8016a54:	d1f6      	bne.n	8016a44 <_printf_i+0x30>
 8016a56:	6820      	ldr	r0, [r4, #0]
 8016a58:	6813      	ldr	r3, [r2, #0]
 8016a5a:	0605      	lsls	r5, r0, #24
 8016a5c:	f103 0104 	add.w	r1, r3, #4
 8016a60:	d52a      	bpl.n	8016ab8 <_printf_i+0xa4>
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	6011      	str	r1, [r2, #0]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	da03      	bge.n	8016a72 <_printf_i+0x5e>
 8016a6a:	222d      	movs	r2, #45	; 0x2d
 8016a6c:	425b      	negs	r3, r3
 8016a6e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016a72:	486f      	ldr	r0, [pc, #444]	; (8016c30 <_printf_i+0x21c>)
 8016a74:	220a      	movs	r2, #10
 8016a76:	e039      	b.n	8016aec <_printf_i+0xd8>
 8016a78:	2973      	cmp	r1, #115	; 0x73
 8016a7a:	f000 809d 	beq.w	8016bb8 <_printf_i+0x1a4>
 8016a7e:	d808      	bhi.n	8016a92 <_printf_i+0x7e>
 8016a80:	296f      	cmp	r1, #111	; 0x6f
 8016a82:	d020      	beq.n	8016ac6 <_printf_i+0xb2>
 8016a84:	2970      	cmp	r1, #112	; 0x70
 8016a86:	d1dd      	bne.n	8016a44 <_printf_i+0x30>
 8016a88:	6823      	ldr	r3, [r4, #0]
 8016a8a:	f043 0320 	orr.w	r3, r3, #32
 8016a8e:	6023      	str	r3, [r4, #0]
 8016a90:	e003      	b.n	8016a9a <_printf_i+0x86>
 8016a92:	2975      	cmp	r1, #117	; 0x75
 8016a94:	d017      	beq.n	8016ac6 <_printf_i+0xb2>
 8016a96:	2978      	cmp	r1, #120	; 0x78
 8016a98:	d1d4      	bne.n	8016a44 <_printf_i+0x30>
 8016a9a:	2378      	movs	r3, #120	; 0x78
 8016a9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016aa0:	4864      	ldr	r0, [pc, #400]	; (8016c34 <_printf_i+0x220>)
 8016aa2:	e055      	b.n	8016b50 <_printf_i+0x13c>
 8016aa4:	6813      	ldr	r3, [r2, #0]
 8016aa6:	1d19      	adds	r1, r3, #4
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	6011      	str	r1, [r2, #0]
 8016aac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016ab0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016ab4:	2301      	movs	r3, #1
 8016ab6:	e08c      	b.n	8016bd2 <_printf_i+0x1be>
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	6011      	str	r1, [r2, #0]
 8016abc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016ac0:	bf18      	it	ne
 8016ac2:	b21b      	sxthne	r3, r3
 8016ac4:	e7cf      	b.n	8016a66 <_printf_i+0x52>
 8016ac6:	6813      	ldr	r3, [r2, #0]
 8016ac8:	6825      	ldr	r5, [r4, #0]
 8016aca:	1d18      	adds	r0, r3, #4
 8016acc:	6010      	str	r0, [r2, #0]
 8016ace:	0628      	lsls	r0, r5, #24
 8016ad0:	d501      	bpl.n	8016ad6 <_printf_i+0xc2>
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	e002      	b.n	8016adc <_printf_i+0xc8>
 8016ad6:	0668      	lsls	r0, r5, #25
 8016ad8:	d5fb      	bpl.n	8016ad2 <_printf_i+0xbe>
 8016ada:	881b      	ldrh	r3, [r3, #0]
 8016adc:	4854      	ldr	r0, [pc, #336]	; (8016c30 <_printf_i+0x21c>)
 8016ade:	296f      	cmp	r1, #111	; 0x6f
 8016ae0:	bf14      	ite	ne
 8016ae2:	220a      	movne	r2, #10
 8016ae4:	2208      	moveq	r2, #8
 8016ae6:	2100      	movs	r1, #0
 8016ae8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016aec:	6865      	ldr	r5, [r4, #4]
 8016aee:	60a5      	str	r5, [r4, #8]
 8016af0:	2d00      	cmp	r5, #0
 8016af2:	f2c0 8095 	blt.w	8016c20 <_printf_i+0x20c>
 8016af6:	6821      	ldr	r1, [r4, #0]
 8016af8:	f021 0104 	bic.w	r1, r1, #4
 8016afc:	6021      	str	r1, [r4, #0]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d13d      	bne.n	8016b7e <_printf_i+0x16a>
 8016b02:	2d00      	cmp	r5, #0
 8016b04:	f040 808e 	bne.w	8016c24 <_printf_i+0x210>
 8016b08:	4665      	mov	r5, ip
 8016b0a:	2a08      	cmp	r2, #8
 8016b0c:	d10b      	bne.n	8016b26 <_printf_i+0x112>
 8016b0e:	6823      	ldr	r3, [r4, #0]
 8016b10:	07db      	lsls	r3, r3, #31
 8016b12:	d508      	bpl.n	8016b26 <_printf_i+0x112>
 8016b14:	6923      	ldr	r3, [r4, #16]
 8016b16:	6862      	ldr	r2, [r4, #4]
 8016b18:	429a      	cmp	r2, r3
 8016b1a:	bfde      	ittt	le
 8016b1c:	2330      	movle	r3, #48	; 0x30
 8016b1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016b22:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016b26:	ebac 0305 	sub.w	r3, ip, r5
 8016b2a:	6123      	str	r3, [r4, #16]
 8016b2c:	f8cd 8000 	str.w	r8, [sp]
 8016b30:	463b      	mov	r3, r7
 8016b32:	aa03      	add	r2, sp, #12
 8016b34:	4621      	mov	r1, r4
 8016b36:	4630      	mov	r0, r6
 8016b38:	f7ff fef6 	bl	8016928 <_printf_common>
 8016b3c:	3001      	adds	r0, #1
 8016b3e:	d14d      	bne.n	8016bdc <_printf_i+0x1c8>
 8016b40:	f04f 30ff 	mov.w	r0, #4294967295
 8016b44:	b005      	add	sp, #20
 8016b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b4a:	4839      	ldr	r0, [pc, #228]	; (8016c30 <_printf_i+0x21c>)
 8016b4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016b50:	6813      	ldr	r3, [r2, #0]
 8016b52:	6821      	ldr	r1, [r4, #0]
 8016b54:	1d1d      	adds	r5, r3, #4
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	6015      	str	r5, [r2, #0]
 8016b5a:	060a      	lsls	r2, r1, #24
 8016b5c:	d50b      	bpl.n	8016b76 <_printf_i+0x162>
 8016b5e:	07ca      	lsls	r2, r1, #31
 8016b60:	bf44      	itt	mi
 8016b62:	f041 0120 	orrmi.w	r1, r1, #32
 8016b66:	6021      	strmi	r1, [r4, #0]
 8016b68:	b91b      	cbnz	r3, 8016b72 <_printf_i+0x15e>
 8016b6a:	6822      	ldr	r2, [r4, #0]
 8016b6c:	f022 0220 	bic.w	r2, r2, #32
 8016b70:	6022      	str	r2, [r4, #0]
 8016b72:	2210      	movs	r2, #16
 8016b74:	e7b7      	b.n	8016ae6 <_printf_i+0xd2>
 8016b76:	064d      	lsls	r5, r1, #25
 8016b78:	bf48      	it	mi
 8016b7a:	b29b      	uxthmi	r3, r3
 8016b7c:	e7ef      	b.n	8016b5e <_printf_i+0x14a>
 8016b7e:	4665      	mov	r5, ip
 8016b80:	fbb3 f1f2 	udiv	r1, r3, r2
 8016b84:	fb02 3311 	mls	r3, r2, r1, r3
 8016b88:	5cc3      	ldrb	r3, [r0, r3]
 8016b8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016b8e:	460b      	mov	r3, r1
 8016b90:	2900      	cmp	r1, #0
 8016b92:	d1f5      	bne.n	8016b80 <_printf_i+0x16c>
 8016b94:	e7b9      	b.n	8016b0a <_printf_i+0xf6>
 8016b96:	6813      	ldr	r3, [r2, #0]
 8016b98:	6825      	ldr	r5, [r4, #0]
 8016b9a:	6961      	ldr	r1, [r4, #20]
 8016b9c:	1d18      	adds	r0, r3, #4
 8016b9e:	6010      	str	r0, [r2, #0]
 8016ba0:	0628      	lsls	r0, r5, #24
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	d501      	bpl.n	8016baa <_printf_i+0x196>
 8016ba6:	6019      	str	r1, [r3, #0]
 8016ba8:	e002      	b.n	8016bb0 <_printf_i+0x19c>
 8016baa:	066a      	lsls	r2, r5, #25
 8016bac:	d5fb      	bpl.n	8016ba6 <_printf_i+0x192>
 8016bae:	8019      	strh	r1, [r3, #0]
 8016bb0:	2300      	movs	r3, #0
 8016bb2:	6123      	str	r3, [r4, #16]
 8016bb4:	4665      	mov	r5, ip
 8016bb6:	e7b9      	b.n	8016b2c <_printf_i+0x118>
 8016bb8:	6813      	ldr	r3, [r2, #0]
 8016bba:	1d19      	adds	r1, r3, #4
 8016bbc:	6011      	str	r1, [r2, #0]
 8016bbe:	681d      	ldr	r5, [r3, #0]
 8016bc0:	6862      	ldr	r2, [r4, #4]
 8016bc2:	2100      	movs	r1, #0
 8016bc4:	4628      	mov	r0, r5
 8016bc6:	f7e9 fb23 	bl	8000210 <memchr>
 8016bca:	b108      	cbz	r0, 8016bd0 <_printf_i+0x1bc>
 8016bcc:	1b40      	subs	r0, r0, r5
 8016bce:	6060      	str	r0, [r4, #4]
 8016bd0:	6863      	ldr	r3, [r4, #4]
 8016bd2:	6123      	str	r3, [r4, #16]
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016bda:	e7a7      	b.n	8016b2c <_printf_i+0x118>
 8016bdc:	6923      	ldr	r3, [r4, #16]
 8016bde:	462a      	mov	r2, r5
 8016be0:	4639      	mov	r1, r7
 8016be2:	4630      	mov	r0, r6
 8016be4:	47c0      	blx	r8
 8016be6:	3001      	adds	r0, #1
 8016be8:	d0aa      	beq.n	8016b40 <_printf_i+0x12c>
 8016bea:	6823      	ldr	r3, [r4, #0]
 8016bec:	079b      	lsls	r3, r3, #30
 8016bee:	d413      	bmi.n	8016c18 <_printf_i+0x204>
 8016bf0:	68e0      	ldr	r0, [r4, #12]
 8016bf2:	9b03      	ldr	r3, [sp, #12]
 8016bf4:	4298      	cmp	r0, r3
 8016bf6:	bfb8      	it	lt
 8016bf8:	4618      	movlt	r0, r3
 8016bfa:	e7a3      	b.n	8016b44 <_printf_i+0x130>
 8016bfc:	2301      	movs	r3, #1
 8016bfe:	464a      	mov	r2, r9
 8016c00:	4639      	mov	r1, r7
 8016c02:	4630      	mov	r0, r6
 8016c04:	47c0      	blx	r8
 8016c06:	3001      	adds	r0, #1
 8016c08:	d09a      	beq.n	8016b40 <_printf_i+0x12c>
 8016c0a:	3501      	adds	r5, #1
 8016c0c:	68e3      	ldr	r3, [r4, #12]
 8016c0e:	9a03      	ldr	r2, [sp, #12]
 8016c10:	1a9b      	subs	r3, r3, r2
 8016c12:	42ab      	cmp	r3, r5
 8016c14:	dcf2      	bgt.n	8016bfc <_printf_i+0x1e8>
 8016c16:	e7eb      	b.n	8016bf0 <_printf_i+0x1dc>
 8016c18:	2500      	movs	r5, #0
 8016c1a:	f104 0919 	add.w	r9, r4, #25
 8016c1e:	e7f5      	b.n	8016c0c <_printf_i+0x1f8>
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d1ac      	bne.n	8016b7e <_printf_i+0x16a>
 8016c24:	7803      	ldrb	r3, [r0, #0]
 8016c26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016c2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016c2e:	e76c      	b.n	8016b0a <_printf_i+0xf6>
 8016c30:	0801ac88 	.word	0x0801ac88
 8016c34:	0801ac99 	.word	0x0801ac99

08016c38 <_scanf_float>:
 8016c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c3c:	469a      	mov	sl, r3
 8016c3e:	688b      	ldr	r3, [r1, #8]
 8016c40:	4616      	mov	r6, r2
 8016c42:	1e5a      	subs	r2, r3, #1
 8016c44:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016c48:	b087      	sub	sp, #28
 8016c4a:	bf83      	ittte	hi
 8016c4c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8016c50:	189b      	addhi	r3, r3, r2
 8016c52:	9301      	strhi	r3, [sp, #4]
 8016c54:	2300      	movls	r3, #0
 8016c56:	bf86      	itte	hi
 8016c58:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016c5c:	608b      	strhi	r3, [r1, #8]
 8016c5e:	9301      	strls	r3, [sp, #4]
 8016c60:	680b      	ldr	r3, [r1, #0]
 8016c62:	4688      	mov	r8, r1
 8016c64:	f04f 0b00 	mov.w	fp, #0
 8016c68:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016c6c:	f848 3b1c 	str.w	r3, [r8], #28
 8016c70:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8016c74:	4607      	mov	r7, r0
 8016c76:	460c      	mov	r4, r1
 8016c78:	4645      	mov	r5, r8
 8016c7a:	465a      	mov	r2, fp
 8016c7c:	46d9      	mov	r9, fp
 8016c7e:	f8cd b008 	str.w	fp, [sp, #8]
 8016c82:	68a1      	ldr	r1, [r4, #8]
 8016c84:	b181      	cbz	r1, 8016ca8 <_scanf_float+0x70>
 8016c86:	6833      	ldr	r3, [r6, #0]
 8016c88:	781b      	ldrb	r3, [r3, #0]
 8016c8a:	2b49      	cmp	r3, #73	; 0x49
 8016c8c:	d071      	beq.n	8016d72 <_scanf_float+0x13a>
 8016c8e:	d84d      	bhi.n	8016d2c <_scanf_float+0xf4>
 8016c90:	2b39      	cmp	r3, #57	; 0x39
 8016c92:	d840      	bhi.n	8016d16 <_scanf_float+0xde>
 8016c94:	2b31      	cmp	r3, #49	; 0x31
 8016c96:	f080 8088 	bcs.w	8016daa <_scanf_float+0x172>
 8016c9a:	2b2d      	cmp	r3, #45	; 0x2d
 8016c9c:	f000 8090 	beq.w	8016dc0 <_scanf_float+0x188>
 8016ca0:	d815      	bhi.n	8016cce <_scanf_float+0x96>
 8016ca2:	2b2b      	cmp	r3, #43	; 0x2b
 8016ca4:	f000 808c 	beq.w	8016dc0 <_scanf_float+0x188>
 8016ca8:	f1b9 0f00 	cmp.w	r9, #0
 8016cac:	d003      	beq.n	8016cb6 <_scanf_float+0x7e>
 8016cae:	6823      	ldr	r3, [r4, #0]
 8016cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016cb4:	6023      	str	r3, [r4, #0]
 8016cb6:	3a01      	subs	r2, #1
 8016cb8:	2a01      	cmp	r2, #1
 8016cba:	f200 80ea 	bhi.w	8016e92 <_scanf_float+0x25a>
 8016cbe:	4545      	cmp	r5, r8
 8016cc0:	f200 80dc 	bhi.w	8016e7c <_scanf_float+0x244>
 8016cc4:	2601      	movs	r6, #1
 8016cc6:	4630      	mov	r0, r6
 8016cc8:	b007      	add	sp, #28
 8016cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cce:	2b2e      	cmp	r3, #46	; 0x2e
 8016cd0:	f000 809f 	beq.w	8016e12 <_scanf_float+0x1da>
 8016cd4:	2b30      	cmp	r3, #48	; 0x30
 8016cd6:	d1e7      	bne.n	8016ca8 <_scanf_float+0x70>
 8016cd8:	6820      	ldr	r0, [r4, #0]
 8016cda:	f410 7f80 	tst.w	r0, #256	; 0x100
 8016cde:	d064      	beq.n	8016daa <_scanf_float+0x172>
 8016ce0:	9b01      	ldr	r3, [sp, #4]
 8016ce2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8016ce6:	6020      	str	r0, [r4, #0]
 8016ce8:	f109 0901 	add.w	r9, r9, #1
 8016cec:	b11b      	cbz	r3, 8016cf6 <_scanf_float+0xbe>
 8016cee:	3b01      	subs	r3, #1
 8016cf0:	3101      	adds	r1, #1
 8016cf2:	9301      	str	r3, [sp, #4]
 8016cf4:	60a1      	str	r1, [r4, #8]
 8016cf6:	68a3      	ldr	r3, [r4, #8]
 8016cf8:	3b01      	subs	r3, #1
 8016cfa:	60a3      	str	r3, [r4, #8]
 8016cfc:	6923      	ldr	r3, [r4, #16]
 8016cfe:	3301      	adds	r3, #1
 8016d00:	6123      	str	r3, [r4, #16]
 8016d02:	6873      	ldr	r3, [r6, #4]
 8016d04:	3b01      	subs	r3, #1
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	6073      	str	r3, [r6, #4]
 8016d0a:	f340 80ac 	ble.w	8016e66 <_scanf_float+0x22e>
 8016d0e:	6833      	ldr	r3, [r6, #0]
 8016d10:	3301      	adds	r3, #1
 8016d12:	6033      	str	r3, [r6, #0]
 8016d14:	e7b5      	b.n	8016c82 <_scanf_float+0x4a>
 8016d16:	2b45      	cmp	r3, #69	; 0x45
 8016d18:	f000 8085 	beq.w	8016e26 <_scanf_float+0x1ee>
 8016d1c:	2b46      	cmp	r3, #70	; 0x46
 8016d1e:	d06a      	beq.n	8016df6 <_scanf_float+0x1be>
 8016d20:	2b41      	cmp	r3, #65	; 0x41
 8016d22:	d1c1      	bne.n	8016ca8 <_scanf_float+0x70>
 8016d24:	2a01      	cmp	r2, #1
 8016d26:	d1bf      	bne.n	8016ca8 <_scanf_float+0x70>
 8016d28:	2202      	movs	r2, #2
 8016d2a:	e046      	b.n	8016dba <_scanf_float+0x182>
 8016d2c:	2b65      	cmp	r3, #101	; 0x65
 8016d2e:	d07a      	beq.n	8016e26 <_scanf_float+0x1ee>
 8016d30:	d818      	bhi.n	8016d64 <_scanf_float+0x12c>
 8016d32:	2b54      	cmp	r3, #84	; 0x54
 8016d34:	d066      	beq.n	8016e04 <_scanf_float+0x1cc>
 8016d36:	d811      	bhi.n	8016d5c <_scanf_float+0x124>
 8016d38:	2b4e      	cmp	r3, #78	; 0x4e
 8016d3a:	d1b5      	bne.n	8016ca8 <_scanf_float+0x70>
 8016d3c:	2a00      	cmp	r2, #0
 8016d3e:	d146      	bne.n	8016dce <_scanf_float+0x196>
 8016d40:	f1b9 0f00 	cmp.w	r9, #0
 8016d44:	d145      	bne.n	8016dd2 <_scanf_float+0x19a>
 8016d46:	6821      	ldr	r1, [r4, #0]
 8016d48:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016d4c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016d50:	d13f      	bne.n	8016dd2 <_scanf_float+0x19a>
 8016d52:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016d56:	6021      	str	r1, [r4, #0]
 8016d58:	2201      	movs	r2, #1
 8016d5a:	e02e      	b.n	8016dba <_scanf_float+0x182>
 8016d5c:	2b59      	cmp	r3, #89	; 0x59
 8016d5e:	d01e      	beq.n	8016d9e <_scanf_float+0x166>
 8016d60:	2b61      	cmp	r3, #97	; 0x61
 8016d62:	e7de      	b.n	8016d22 <_scanf_float+0xea>
 8016d64:	2b6e      	cmp	r3, #110	; 0x6e
 8016d66:	d0e9      	beq.n	8016d3c <_scanf_float+0x104>
 8016d68:	d815      	bhi.n	8016d96 <_scanf_float+0x15e>
 8016d6a:	2b66      	cmp	r3, #102	; 0x66
 8016d6c:	d043      	beq.n	8016df6 <_scanf_float+0x1be>
 8016d6e:	2b69      	cmp	r3, #105	; 0x69
 8016d70:	d19a      	bne.n	8016ca8 <_scanf_float+0x70>
 8016d72:	f1bb 0f00 	cmp.w	fp, #0
 8016d76:	d138      	bne.n	8016dea <_scanf_float+0x1b2>
 8016d78:	f1b9 0f00 	cmp.w	r9, #0
 8016d7c:	d197      	bne.n	8016cae <_scanf_float+0x76>
 8016d7e:	6821      	ldr	r1, [r4, #0]
 8016d80:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016d84:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016d88:	d195      	bne.n	8016cb6 <_scanf_float+0x7e>
 8016d8a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016d8e:	6021      	str	r1, [r4, #0]
 8016d90:	f04f 0b01 	mov.w	fp, #1
 8016d94:	e011      	b.n	8016dba <_scanf_float+0x182>
 8016d96:	2b74      	cmp	r3, #116	; 0x74
 8016d98:	d034      	beq.n	8016e04 <_scanf_float+0x1cc>
 8016d9a:	2b79      	cmp	r3, #121	; 0x79
 8016d9c:	d184      	bne.n	8016ca8 <_scanf_float+0x70>
 8016d9e:	f1bb 0f07 	cmp.w	fp, #7
 8016da2:	d181      	bne.n	8016ca8 <_scanf_float+0x70>
 8016da4:	f04f 0b08 	mov.w	fp, #8
 8016da8:	e007      	b.n	8016dba <_scanf_float+0x182>
 8016daa:	eb12 0f0b 	cmn.w	r2, fp
 8016dae:	f47f af7b 	bne.w	8016ca8 <_scanf_float+0x70>
 8016db2:	6821      	ldr	r1, [r4, #0]
 8016db4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016db8:	6021      	str	r1, [r4, #0]
 8016dba:	702b      	strb	r3, [r5, #0]
 8016dbc:	3501      	adds	r5, #1
 8016dbe:	e79a      	b.n	8016cf6 <_scanf_float+0xbe>
 8016dc0:	6821      	ldr	r1, [r4, #0]
 8016dc2:	0608      	lsls	r0, r1, #24
 8016dc4:	f57f af70 	bpl.w	8016ca8 <_scanf_float+0x70>
 8016dc8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016dcc:	e7f4      	b.n	8016db8 <_scanf_float+0x180>
 8016dce:	2a02      	cmp	r2, #2
 8016dd0:	d047      	beq.n	8016e62 <_scanf_float+0x22a>
 8016dd2:	f1bb 0f01 	cmp.w	fp, #1
 8016dd6:	d003      	beq.n	8016de0 <_scanf_float+0x1a8>
 8016dd8:	f1bb 0f04 	cmp.w	fp, #4
 8016ddc:	f47f af64 	bne.w	8016ca8 <_scanf_float+0x70>
 8016de0:	f10b 0b01 	add.w	fp, fp, #1
 8016de4:	fa5f fb8b 	uxtb.w	fp, fp
 8016de8:	e7e7      	b.n	8016dba <_scanf_float+0x182>
 8016dea:	f1bb 0f03 	cmp.w	fp, #3
 8016dee:	d0f7      	beq.n	8016de0 <_scanf_float+0x1a8>
 8016df0:	f1bb 0f05 	cmp.w	fp, #5
 8016df4:	e7f2      	b.n	8016ddc <_scanf_float+0x1a4>
 8016df6:	f1bb 0f02 	cmp.w	fp, #2
 8016dfa:	f47f af55 	bne.w	8016ca8 <_scanf_float+0x70>
 8016dfe:	f04f 0b03 	mov.w	fp, #3
 8016e02:	e7da      	b.n	8016dba <_scanf_float+0x182>
 8016e04:	f1bb 0f06 	cmp.w	fp, #6
 8016e08:	f47f af4e 	bne.w	8016ca8 <_scanf_float+0x70>
 8016e0c:	f04f 0b07 	mov.w	fp, #7
 8016e10:	e7d3      	b.n	8016dba <_scanf_float+0x182>
 8016e12:	6821      	ldr	r1, [r4, #0]
 8016e14:	0588      	lsls	r0, r1, #22
 8016e16:	f57f af47 	bpl.w	8016ca8 <_scanf_float+0x70>
 8016e1a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8016e1e:	6021      	str	r1, [r4, #0]
 8016e20:	f8cd 9008 	str.w	r9, [sp, #8]
 8016e24:	e7c9      	b.n	8016dba <_scanf_float+0x182>
 8016e26:	6821      	ldr	r1, [r4, #0]
 8016e28:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8016e2c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016e30:	d006      	beq.n	8016e40 <_scanf_float+0x208>
 8016e32:	0548      	lsls	r0, r1, #21
 8016e34:	f57f af38 	bpl.w	8016ca8 <_scanf_float+0x70>
 8016e38:	f1b9 0f00 	cmp.w	r9, #0
 8016e3c:	f43f af3b 	beq.w	8016cb6 <_scanf_float+0x7e>
 8016e40:	0588      	lsls	r0, r1, #22
 8016e42:	bf58      	it	pl
 8016e44:	9802      	ldrpl	r0, [sp, #8]
 8016e46:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016e4a:	bf58      	it	pl
 8016e4c:	eba9 0000 	subpl.w	r0, r9, r0
 8016e50:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8016e54:	bf58      	it	pl
 8016e56:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8016e5a:	6021      	str	r1, [r4, #0]
 8016e5c:	f04f 0900 	mov.w	r9, #0
 8016e60:	e7ab      	b.n	8016dba <_scanf_float+0x182>
 8016e62:	2203      	movs	r2, #3
 8016e64:	e7a9      	b.n	8016dba <_scanf_float+0x182>
 8016e66:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016e6a:	9205      	str	r2, [sp, #20]
 8016e6c:	4631      	mov	r1, r6
 8016e6e:	4638      	mov	r0, r7
 8016e70:	4798      	blx	r3
 8016e72:	9a05      	ldr	r2, [sp, #20]
 8016e74:	2800      	cmp	r0, #0
 8016e76:	f43f af04 	beq.w	8016c82 <_scanf_float+0x4a>
 8016e7a:	e715      	b.n	8016ca8 <_scanf_float+0x70>
 8016e7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016e80:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016e84:	4632      	mov	r2, r6
 8016e86:	4638      	mov	r0, r7
 8016e88:	4798      	blx	r3
 8016e8a:	6923      	ldr	r3, [r4, #16]
 8016e8c:	3b01      	subs	r3, #1
 8016e8e:	6123      	str	r3, [r4, #16]
 8016e90:	e715      	b.n	8016cbe <_scanf_float+0x86>
 8016e92:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016e96:	2b06      	cmp	r3, #6
 8016e98:	d80a      	bhi.n	8016eb0 <_scanf_float+0x278>
 8016e9a:	f1bb 0f02 	cmp.w	fp, #2
 8016e9e:	d968      	bls.n	8016f72 <_scanf_float+0x33a>
 8016ea0:	f1ab 0b03 	sub.w	fp, fp, #3
 8016ea4:	fa5f fb8b 	uxtb.w	fp, fp
 8016ea8:	eba5 0b0b 	sub.w	fp, r5, fp
 8016eac:	455d      	cmp	r5, fp
 8016eae:	d14b      	bne.n	8016f48 <_scanf_float+0x310>
 8016eb0:	6823      	ldr	r3, [r4, #0]
 8016eb2:	05da      	lsls	r2, r3, #23
 8016eb4:	d51f      	bpl.n	8016ef6 <_scanf_float+0x2be>
 8016eb6:	055b      	lsls	r3, r3, #21
 8016eb8:	d468      	bmi.n	8016f8c <_scanf_float+0x354>
 8016eba:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016ebe:	6923      	ldr	r3, [r4, #16]
 8016ec0:	2965      	cmp	r1, #101	; 0x65
 8016ec2:	f103 33ff 	add.w	r3, r3, #4294967295
 8016ec6:	f105 3bff 	add.w	fp, r5, #4294967295
 8016eca:	6123      	str	r3, [r4, #16]
 8016ecc:	d00d      	beq.n	8016eea <_scanf_float+0x2b2>
 8016ece:	2945      	cmp	r1, #69	; 0x45
 8016ed0:	d00b      	beq.n	8016eea <_scanf_float+0x2b2>
 8016ed2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016ed6:	4632      	mov	r2, r6
 8016ed8:	4638      	mov	r0, r7
 8016eda:	4798      	blx	r3
 8016edc:	6923      	ldr	r3, [r4, #16]
 8016ede:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8016ee2:	3b01      	subs	r3, #1
 8016ee4:	f1a5 0b02 	sub.w	fp, r5, #2
 8016ee8:	6123      	str	r3, [r4, #16]
 8016eea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016eee:	4632      	mov	r2, r6
 8016ef0:	4638      	mov	r0, r7
 8016ef2:	4798      	blx	r3
 8016ef4:	465d      	mov	r5, fp
 8016ef6:	6826      	ldr	r6, [r4, #0]
 8016ef8:	f016 0610 	ands.w	r6, r6, #16
 8016efc:	d17a      	bne.n	8016ff4 <_scanf_float+0x3bc>
 8016efe:	702e      	strb	r6, [r5, #0]
 8016f00:	6823      	ldr	r3, [r4, #0]
 8016f02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016f0a:	d142      	bne.n	8016f92 <_scanf_float+0x35a>
 8016f0c:	9b02      	ldr	r3, [sp, #8]
 8016f0e:	eba9 0303 	sub.w	r3, r9, r3
 8016f12:	425a      	negs	r2, r3
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d149      	bne.n	8016fac <_scanf_float+0x374>
 8016f18:	2200      	movs	r2, #0
 8016f1a:	4641      	mov	r1, r8
 8016f1c:	4638      	mov	r0, r7
 8016f1e:	f000 ff5f 	bl	8017de0 <_strtod_r>
 8016f22:	6825      	ldr	r5, [r4, #0]
 8016f24:	f8da 3000 	ldr.w	r3, [sl]
 8016f28:	f015 0f02 	tst.w	r5, #2
 8016f2c:	f103 0204 	add.w	r2, r3, #4
 8016f30:	ec59 8b10 	vmov	r8, r9, d0
 8016f34:	f8ca 2000 	str.w	r2, [sl]
 8016f38:	d043      	beq.n	8016fc2 <_scanf_float+0x38a>
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	e9c3 8900 	strd	r8, r9, [r3]
 8016f40:	68e3      	ldr	r3, [r4, #12]
 8016f42:	3301      	adds	r3, #1
 8016f44:	60e3      	str	r3, [r4, #12]
 8016f46:	e6be      	b.n	8016cc6 <_scanf_float+0x8e>
 8016f48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016f4c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016f50:	4632      	mov	r2, r6
 8016f52:	4638      	mov	r0, r7
 8016f54:	4798      	blx	r3
 8016f56:	6923      	ldr	r3, [r4, #16]
 8016f58:	3b01      	subs	r3, #1
 8016f5a:	6123      	str	r3, [r4, #16]
 8016f5c:	e7a6      	b.n	8016eac <_scanf_float+0x274>
 8016f5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016f62:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016f66:	4632      	mov	r2, r6
 8016f68:	4638      	mov	r0, r7
 8016f6a:	4798      	blx	r3
 8016f6c:	6923      	ldr	r3, [r4, #16]
 8016f6e:	3b01      	subs	r3, #1
 8016f70:	6123      	str	r3, [r4, #16]
 8016f72:	4545      	cmp	r5, r8
 8016f74:	d8f3      	bhi.n	8016f5e <_scanf_float+0x326>
 8016f76:	e6a5      	b.n	8016cc4 <_scanf_float+0x8c>
 8016f78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016f7c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016f80:	4632      	mov	r2, r6
 8016f82:	4638      	mov	r0, r7
 8016f84:	4798      	blx	r3
 8016f86:	6923      	ldr	r3, [r4, #16]
 8016f88:	3b01      	subs	r3, #1
 8016f8a:	6123      	str	r3, [r4, #16]
 8016f8c:	4545      	cmp	r5, r8
 8016f8e:	d8f3      	bhi.n	8016f78 <_scanf_float+0x340>
 8016f90:	e698      	b.n	8016cc4 <_scanf_float+0x8c>
 8016f92:	9b03      	ldr	r3, [sp, #12]
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d0bf      	beq.n	8016f18 <_scanf_float+0x2e0>
 8016f98:	9904      	ldr	r1, [sp, #16]
 8016f9a:	230a      	movs	r3, #10
 8016f9c:	4632      	mov	r2, r6
 8016f9e:	3101      	adds	r1, #1
 8016fa0:	4638      	mov	r0, r7
 8016fa2:	f000 ffa9 	bl	8017ef8 <_strtol_r>
 8016fa6:	9b03      	ldr	r3, [sp, #12]
 8016fa8:	9d04      	ldr	r5, [sp, #16]
 8016faa:	1ac2      	subs	r2, r0, r3
 8016fac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016fb0:	429d      	cmp	r5, r3
 8016fb2:	bf28      	it	cs
 8016fb4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016fb8:	490f      	ldr	r1, [pc, #60]	; (8016ff8 <_scanf_float+0x3c0>)
 8016fba:	4628      	mov	r0, r5
 8016fbc:	f000 f8ac 	bl	8017118 <siprintf>
 8016fc0:	e7aa      	b.n	8016f18 <_scanf_float+0x2e0>
 8016fc2:	f015 0504 	ands.w	r5, r5, #4
 8016fc6:	d1b8      	bne.n	8016f3a <_scanf_float+0x302>
 8016fc8:	681f      	ldr	r7, [r3, #0]
 8016fca:	ee10 2a10 	vmov	r2, s0
 8016fce:	464b      	mov	r3, r9
 8016fd0:	ee10 0a10 	vmov	r0, s0
 8016fd4:	4649      	mov	r1, r9
 8016fd6:	f7e9 fdc1 	bl	8000b5c <__aeabi_dcmpun>
 8016fda:	b128      	cbz	r0, 8016fe8 <_scanf_float+0x3b0>
 8016fdc:	4628      	mov	r0, r5
 8016fde:	f000 f81d 	bl	801701c <nanf>
 8016fe2:	ed87 0a00 	vstr	s0, [r7]
 8016fe6:	e7ab      	b.n	8016f40 <_scanf_float+0x308>
 8016fe8:	4640      	mov	r0, r8
 8016fea:	4649      	mov	r1, r9
 8016fec:	f7e9 fe14 	bl	8000c18 <__aeabi_d2f>
 8016ff0:	6038      	str	r0, [r7, #0]
 8016ff2:	e7a5      	b.n	8016f40 <_scanf_float+0x308>
 8016ff4:	2600      	movs	r6, #0
 8016ff6:	e666      	b.n	8016cc6 <_scanf_float+0x8e>
 8016ff8:	0801acaa 	.word	0x0801acaa

08016ffc <_sbrk_r>:
 8016ffc:	b538      	push	{r3, r4, r5, lr}
 8016ffe:	4c06      	ldr	r4, [pc, #24]	; (8017018 <_sbrk_r+0x1c>)
 8017000:	2300      	movs	r3, #0
 8017002:	4605      	mov	r5, r0
 8017004:	4608      	mov	r0, r1
 8017006:	6023      	str	r3, [r4, #0]
 8017008:	f7f1 f8ca 	bl	80081a0 <_sbrk>
 801700c:	1c43      	adds	r3, r0, #1
 801700e:	d102      	bne.n	8017016 <_sbrk_r+0x1a>
 8017010:	6823      	ldr	r3, [r4, #0]
 8017012:	b103      	cbz	r3, 8017016 <_sbrk_r+0x1a>
 8017014:	602b      	str	r3, [r5, #0]
 8017016:	bd38      	pop	{r3, r4, r5, pc}
 8017018:	2004c01c 	.word	0x2004c01c

0801701c <nanf>:
 801701c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017024 <nanf+0x8>
 8017020:	4770      	bx	lr
 8017022:	bf00      	nop
 8017024:	7fc00000 	.word	0x7fc00000

08017028 <_raise_r>:
 8017028:	291f      	cmp	r1, #31
 801702a:	b538      	push	{r3, r4, r5, lr}
 801702c:	4604      	mov	r4, r0
 801702e:	460d      	mov	r5, r1
 8017030:	d904      	bls.n	801703c <_raise_r+0x14>
 8017032:	2316      	movs	r3, #22
 8017034:	6003      	str	r3, [r0, #0]
 8017036:	f04f 30ff 	mov.w	r0, #4294967295
 801703a:	bd38      	pop	{r3, r4, r5, pc}
 801703c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801703e:	b112      	cbz	r2, 8017046 <_raise_r+0x1e>
 8017040:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017044:	b94b      	cbnz	r3, 801705a <_raise_r+0x32>
 8017046:	4620      	mov	r0, r4
 8017048:	f000 f830 	bl	80170ac <_getpid_r>
 801704c:	462a      	mov	r2, r5
 801704e:	4601      	mov	r1, r0
 8017050:	4620      	mov	r0, r4
 8017052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017056:	f000 b817 	b.w	8017088 <_kill_r>
 801705a:	2b01      	cmp	r3, #1
 801705c:	d00a      	beq.n	8017074 <_raise_r+0x4c>
 801705e:	1c59      	adds	r1, r3, #1
 8017060:	d103      	bne.n	801706a <_raise_r+0x42>
 8017062:	2316      	movs	r3, #22
 8017064:	6003      	str	r3, [r0, #0]
 8017066:	2001      	movs	r0, #1
 8017068:	e7e7      	b.n	801703a <_raise_r+0x12>
 801706a:	2400      	movs	r4, #0
 801706c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017070:	4628      	mov	r0, r5
 8017072:	4798      	blx	r3
 8017074:	2000      	movs	r0, #0
 8017076:	e7e0      	b.n	801703a <_raise_r+0x12>

08017078 <raise>:
 8017078:	4b02      	ldr	r3, [pc, #8]	; (8017084 <raise+0xc>)
 801707a:	4601      	mov	r1, r0
 801707c:	6818      	ldr	r0, [r3, #0]
 801707e:	f7ff bfd3 	b.w	8017028 <_raise_r>
 8017082:	bf00      	nop
 8017084:	2000000c 	.word	0x2000000c

08017088 <_kill_r>:
 8017088:	b538      	push	{r3, r4, r5, lr}
 801708a:	4c07      	ldr	r4, [pc, #28]	; (80170a8 <_kill_r+0x20>)
 801708c:	2300      	movs	r3, #0
 801708e:	4605      	mov	r5, r0
 8017090:	4608      	mov	r0, r1
 8017092:	4611      	mov	r1, r2
 8017094:	6023      	str	r3, [r4, #0]
 8017096:	f7f1 f869 	bl	800816c <_kill>
 801709a:	1c43      	adds	r3, r0, #1
 801709c:	d102      	bne.n	80170a4 <_kill_r+0x1c>
 801709e:	6823      	ldr	r3, [r4, #0]
 80170a0:	b103      	cbz	r3, 80170a4 <_kill_r+0x1c>
 80170a2:	602b      	str	r3, [r5, #0]
 80170a4:	bd38      	pop	{r3, r4, r5, pc}
 80170a6:	bf00      	nop
 80170a8:	2004c01c 	.word	0x2004c01c

080170ac <_getpid_r>:
 80170ac:	f7f1 b856 	b.w	800815c <_getpid>

080170b0 <sniprintf>:
 80170b0:	b40c      	push	{r2, r3}
 80170b2:	b530      	push	{r4, r5, lr}
 80170b4:	4b17      	ldr	r3, [pc, #92]	; (8017114 <sniprintf+0x64>)
 80170b6:	1e0c      	subs	r4, r1, #0
 80170b8:	b09d      	sub	sp, #116	; 0x74
 80170ba:	681d      	ldr	r5, [r3, #0]
 80170bc:	da08      	bge.n	80170d0 <sniprintf+0x20>
 80170be:	238b      	movs	r3, #139	; 0x8b
 80170c0:	602b      	str	r3, [r5, #0]
 80170c2:	f04f 30ff 	mov.w	r0, #4294967295
 80170c6:	b01d      	add	sp, #116	; 0x74
 80170c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80170cc:	b002      	add	sp, #8
 80170ce:	4770      	bx	lr
 80170d0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80170d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80170d8:	bf14      	ite	ne
 80170da:	f104 33ff 	addne.w	r3, r4, #4294967295
 80170de:	4623      	moveq	r3, r4
 80170e0:	9304      	str	r3, [sp, #16]
 80170e2:	9307      	str	r3, [sp, #28]
 80170e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80170e8:	9002      	str	r0, [sp, #8]
 80170ea:	9006      	str	r0, [sp, #24]
 80170ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80170f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80170f2:	ab21      	add	r3, sp, #132	; 0x84
 80170f4:	a902      	add	r1, sp, #8
 80170f6:	4628      	mov	r0, r5
 80170f8:	9301      	str	r3, [sp, #4]
 80170fa:	f002 fd43 	bl	8019b84 <_svfiprintf_r>
 80170fe:	1c43      	adds	r3, r0, #1
 8017100:	bfbc      	itt	lt
 8017102:	238b      	movlt	r3, #139	; 0x8b
 8017104:	602b      	strlt	r3, [r5, #0]
 8017106:	2c00      	cmp	r4, #0
 8017108:	d0dd      	beq.n	80170c6 <sniprintf+0x16>
 801710a:	9b02      	ldr	r3, [sp, #8]
 801710c:	2200      	movs	r2, #0
 801710e:	701a      	strb	r2, [r3, #0]
 8017110:	e7d9      	b.n	80170c6 <sniprintf+0x16>
 8017112:	bf00      	nop
 8017114:	2000000c 	.word	0x2000000c

08017118 <siprintf>:
 8017118:	b40e      	push	{r1, r2, r3}
 801711a:	b500      	push	{lr}
 801711c:	b09c      	sub	sp, #112	; 0x70
 801711e:	ab1d      	add	r3, sp, #116	; 0x74
 8017120:	9002      	str	r0, [sp, #8]
 8017122:	9006      	str	r0, [sp, #24]
 8017124:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017128:	4809      	ldr	r0, [pc, #36]	; (8017150 <siprintf+0x38>)
 801712a:	9107      	str	r1, [sp, #28]
 801712c:	9104      	str	r1, [sp, #16]
 801712e:	4909      	ldr	r1, [pc, #36]	; (8017154 <siprintf+0x3c>)
 8017130:	f853 2b04 	ldr.w	r2, [r3], #4
 8017134:	9105      	str	r1, [sp, #20]
 8017136:	6800      	ldr	r0, [r0, #0]
 8017138:	9301      	str	r3, [sp, #4]
 801713a:	a902      	add	r1, sp, #8
 801713c:	f002 fd22 	bl	8019b84 <_svfiprintf_r>
 8017140:	9b02      	ldr	r3, [sp, #8]
 8017142:	2200      	movs	r2, #0
 8017144:	701a      	strb	r2, [r3, #0]
 8017146:	b01c      	add	sp, #112	; 0x70
 8017148:	f85d eb04 	ldr.w	lr, [sp], #4
 801714c:	b003      	add	sp, #12
 801714e:	4770      	bx	lr
 8017150:	2000000c 	.word	0x2000000c
 8017154:	ffff0208 	.word	0xffff0208

08017158 <siscanf>:
 8017158:	b40e      	push	{r1, r2, r3}
 801715a:	b530      	push	{r4, r5, lr}
 801715c:	b09c      	sub	sp, #112	; 0x70
 801715e:	ac1f      	add	r4, sp, #124	; 0x7c
 8017160:	f44f 7201 	mov.w	r2, #516	; 0x204
 8017164:	f854 5b04 	ldr.w	r5, [r4], #4
 8017168:	f8ad 2014 	strh.w	r2, [sp, #20]
 801716c:	9002      	str	r0, [sp, #8]
 801716e:	9006      	str	r0, [sp, #24]
 8017170:	f7e9 f846 	bl	8000200 <strlen>
 8017174:	4b0b      	ldr	r3, [pc, #44]	; (80171a4 <siscanf+0x4c>)
 8017176:	9003      	str	r0, [sp, #12]
 8017178:	9007      	str	r0, [sp, #28]
 801717a:	930b      	str	r3, [sp, #44]	; 0x2c
 801717c:	480a      	ldr	r0, [pc, #40]	; (80171a8 <siscanf+0x50>)
 801717e:	9401      	str	r4, [sp, #4]
 8017180:	2300      	movs	r3, #0
 8017182:	930f      	str	r3, [sp, #60]	; 0x3c
 8017184:	9314      	str	r3, [sp, #80]	; 0x50
 8017186:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801718a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801718e:	462a      	mov	r2, r5
 8017190:	4623      	mov	r3, r4
 8017192:	a902      	add	r1, sp, #8
 8017194:	6800      	ldr	r0, [r0, #0]
 8017196:	f002 fe47 	bl	8019e28 <__ssvfiscanf_r>
 801719a:	b01c      	add	sp, #112	; 0x70
 801719c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80171a0:	b003      	add	sp, #12
 80171a2:	4770      	bx	lr
 80171a4:	080171ad 	.word	0x080171ad
 80171a8:	2000000c 	.word	0x2000000c

080171ac <__seofread>:
 80171ac:	2000      	movs	r0, #0
 80171ae:	4770      	bx	lr

080171b0 <strcpy>:
 80171b0:	4603      	mov	r3, r0
 80171b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80171b6:	f803 2b01 	strb.w	r2, [r3], #1
 80171ba:	2a00      	cmp	r2, #0
 80171bc:	d1f9      	bne.n	80171b2 <strcpy+0x2>
 80171be:	4770      	bx	lr

080171c0 <sulp>:
 80171c0:	b570      	push	{r4, r5, r6, lr}
 80171c2:	4604      	mov	r4, r0
 80171c4:	460d      	mov	r5, r1
 80171c6:	ec45 4b10 	vmov	d0, r4, r5
 80171ca:	4616      	mov	r6, r2
 80171cc:	f002 fb3e 	bl	801984c <__ulp>
 80171d0:	ec51 0b10 	vmov	r0, r1, d0
 80171d4:	b17e      	cbz	r6, 80171f6 <sulp+0x36>
 80171d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80171da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80171de:	2b00      	cmp	r3, #0
 80171e0:	dd09      	ble.n	80171f6 <sulp+0x36>
 80171e2:	051b      	lsls	r3, r3, #20
 80171e4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80171e8:	2400      	movs	r4, #0
 80171ea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80171ee:	4622      	mov	r2, r4
 80171f0:	462b      	mov	r3, r5
 80171f2:	f7e9 fa19 	bl	8000628 <__aeabi_dmul>
 80171f6:	bd70      	pop	{r4, r5, r6, pc}

080171f8 <_strtod_l>:
 80171f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171fc:	461f      	mov	r7, r3
 80171fe:	b0a1      	sub	sp, #132	; 0x84
 8017200:	2300      	movs	r3, #0
 8017202:	4681      	mov	r9, r0
 8017204:	4638      	mov	r0, r7
 8017206:	460e      	mov	r6, r1
 8017208:	9217      	str	r2, [sp, #92]	; 0x5c
 801720a:	931c      	str	r3, [sp, #112]	; 0x70
 801720c:	f002 f824 	bl	8019258 <__localeconv_l>
 8017210:	4680      	mov	r8, r0
 8017212:	6800      	ldr	r0, [r0, #0]
 8017214:	f7e8 fff4 	bl	8000200 <strlen>
 8017218:	f04f 0a00 	mov.w	sl, #0
 801721c:	4604      	mov	r4, r0
 801721e:	f04f 0b00 	mov.w	fp, #0
 8017222:	961b      	str	r6, [sp, #108]	; 0x6c
 8017224:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017226:	781a      	ldrb	r2, [r3, #0]
 8017228:	2a0d      	cmp	r2, #13
 801722a:	d832      	bhi.n	8017292 <_strtod_l+0x9a>
 801722c:	2a09      	cmp	r2, #9
 801722e:	d236      	bcs.n	801729e <_strtod_l+0xa6>
 8017230:	2a00      	cmp	r2, #0
 8017232:	d03e      	beq.n	80172b2 <_strtod_l+0xba>
 8017234:	2300      	movs	r3, #0
 8017236:	930d      	str	r3, [sp, #52]	; 0x34
 8017238:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801723a:	782b      	ldrb	r3, [r5, #0]
 801723c:	2b30      	cmp	r3, #48	; 0x30
 801723e:	f040 80ac 	bne.w	801739a <_strtod_l+0x1a2>
 8017242:	786b      	ldrb	r3, [r5, #1]
 8017244:	2b58      	cmp	r3, #88	; 0x58
 8017246:	d001      	beq.n	801724c <_strtod_l+0x54>
 8017248:	2b78      	cmp	r3, #120	; 0x78
 801724a:	d167      	bne.n	801731c <_strtod_l+0x124>
 801724c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801724e:	9301      	str	r3, [sp, #4]
 8017250:	ab1c      	add	r3, sp, #112	; 0x70
 8017252:	9300      	str	r3, [sp, #0]
 8017254:	9702      	str	r7, [sp, #8]
 8017256:	ab1d      	add	r3, sp, #116	; 0x74
 8017258:	4a88      	ldr	r2, [pc, #544]	; (801747c <_strtod_l+0x284>)
 801725a:	a91b      	add	r1, sp, #108	; 0x6c
 801725c:	4648      	mov	r0, r9
 801725e:	f001 fd12 	bl	8018c86 <__gethex>
 8017262:	f010 0407 	ands.w	r4, r0, #7
 8017266:	4606      	mov	r6, r0
 8017268:	d005      	beq.n	8017276 <_strtod_l+0x7e>
 801726a:	2c06      	cmp	r4, #6
 801726c:	d12b      	bne.n	80172c6 <_strtod_l+0xce>
 801726e:	3501      	adds	r5, #1
 8017270:	2300      	movs	r3, #0
 8017272:	951b      	str	r5, [sp, #108]	; 0x6c
 8017274:	930d      	str	r3, [sp, #52]	; 0x34
 8017276:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017278:	2b00      	cmp	r3, #0
 801727a:	f040 859a 	bne.w	8017db2 <_strtod_l+0xbba>
 801727e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017280:	b1e3      	cbz	r3, 80172bc <_strtod_l+0xc4>
 8017282:	4652      	mov	r2, sl
 8017284:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8017288:	ec43 2b10 	vmov	d0, r2, r3
 801728c:	b021      	add	sp, #132	; 0x84
 801728e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017292:	2a2b      	cmp	r2, #43	; 0x2b
 8017294:	d015      	beq.n	80172c2 <_strtod_l+0xca>
 8017296:	2a2d      	cmp	r2, #45	; 0x2d
 8017298:	d004      	beq.n	80172a4 <_strtod_l+0xac>
 801729a:	2a20      	cmp	r2, #32
 801729c:	d1ca      	bne.n	8017234 <_strtod_l+0x3c>
 801729e:	3301      	adds	r3, #1
 80172a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80172a2:	e7bf      	b.n	8017224 <_strtod_l+0x2c>
 80172a4:	2201      	movs	r2, #1
 80172a6:	920d      	str	r2, [sp, #52]	; 0x34
 80172a8:	1c5a      	adds	r2, r3, #1
 80172aa:	921b      	str	r2, [sp, #108]	; 0x6c
 80172ac:	785b      	ldrb	r3, [r3, #1]
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d1c2      	bne.n	8017238 <_strtod_l+0x40>
 80172b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80172b4:	961b      	str	r6, [sp, #108]	; 0x6c
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	f040 8579 	bne.w	8017dae <_strtod_l+0xbb6>
 80172bc:	4652      	mov	r2, sl
 80172be:	465b      	mov	r3, fp
 80172c0:	e7e2      	b.n	8017288 <_strtod_l+0x90>
 80172c2:	2200      	movs	r2, #0
 80172c4:	e7ef      	b.n	80172a6 <_strtod_l+0xae>
 80172c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80172c8:	b13a      	cbz	r2, 80172da <_strtod_l+0xe2>
 80172ca:	2135      	movs	r1, #53	; 0x35
 80172cc:	a81e      	add	r0, sp, #120	; 0x78
 80172ce:	f002 fbb5 	bl	8019a3c <__copybits>
 80172d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80172d4:	4648      	mov	r0, r9
 80172d6:	f002 f822 	bl	801931e <_Bfree>
 80172da:	3c01      	subs	r4, #1
 80172dc:	2c04      	cmp	r4, #4
 80172de:	d806      	bhi.n	80172ee <_strtod_l+0xf6>
 80172e0:	e8df f004 	tbb	[pc, r4]
 80172e4:	1714030a 	.word	0x1714030a
 80172e8:	0a          	.byte	0x0a
 80172e9:	00          	.byte	0x00
 80172ea:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80172ee:	0730      	lsls	r0, r6, #28
 80172f0:	d5c1      	bpl.n	8017276 <_strtod_l+0x7e>
 80172f2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80172f6:	e7be      	b.n	8017276 <_strtod_l+0x7e>
 80172f8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80172fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80172fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8017302:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017306:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801730a:	e7f0      	b.n	80172ee <_strtod_l+0xf6>
 801730c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8017480 <_strtod_l+0x288>
 8017310:	e7ed      	b.n	80172ee <_strtod_l+0xf6>
 8017312:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8017316:	f04f 3aff 	mov.w	sl, #4294967295
 801731a:	e7e8      	b.n	80172ee <_strtod_l+0xf6>
 801731c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801731e:	1c5a      	adds	r2, r3, #1
 8017320:	921b      	str	r2, [sp, #108]	; 0x6c
 8017322:	785b      	ldrb	r3, [r3, #1]
 8017324:	2b30      	cmp	r3, #48	; 0x30
 8017326:	d0f9      	beq.n	801731c <_strtod_l+0x124>
 8017328:	2b00      	cmp	r3, #0
 801732a:	d0a4      	beq.n	8017276 <_strtod_l+0x7e>
 801732c:	2301      	movs	r3, #1
 801732e:	2500      	movs	r5, #0
 8017330:	9306      	str	r3, [sp, #24]
 8017332:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017334:	9308      	str	r3, [sp, #32]
 8017336:	9507      	str	r5, [sp, #28]
 8017338:	9505      	str	r5, [sp, #20]
 801733a:	220a      	movs	r2, #10
 801733c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801733e:	7807      	ldrb	r7, [r0, #0]
 8017340:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8017344:	b2d9      	uxtb	r1, r3
 8017346:	2909      	cmp	r1, #9
 8017348:	d929      	bls.n	801739e <_strtod_l+0x1a6>
 801734a:	4622      	mov	r2, r4
 801734c:	f8d8 1000 	ldr.w	r1, [r8]
 8017350:	f003 f844 	bl	801a3dc <strncmp>
 8017354:	2800      	cmp	r0, #0
 8017356:	d031      	beq.n	80173bc <_strtod_l+0x1c4>
 8017358:	2000      	movs	r0, #0
 801735a:	9c05      	ldr	r4, [sp, #20]
 801735c:	9004      	str	r0, [sp, #16]
 801735e:	463b      	mov	r3, r7
 8017360:	4602      	mov	r2, r0
 8017362:	2b65      	cmp	r3, #101	; 0x65
 8017364:	d001      	beq.n	801736a <_strtod_l+0x172>
 8017366:	2b45      	cmp	r3, #69	; 0x45
 8017368:	d114      	bne.n	8017394 <_strtod_l+0x19c>
 801736a:	b924      	cbnz	r4, 8017376 <_strtod_l+0x17e>
 801736c:	b910      	cbnz	r0, 8017374 <_strtod_l+0x17c>
 801736e:	9b06      	ldr	r3, [sp, #24]
 8017370:	2b00      	cmp	r3, #0
 8017372:	d09e      	beq.n	80172b2 <_strtod_l+0xba>
 8017374:	2400      	movs	r4, #0
 8017376:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8017378:	1c73      	adds	r3, r6, #1
 801737a:	931b      	str	r3, [sp, #108]	; 0x6c
 801737c:	7873      	ldrb	r3, [r6, #1]
 801737e:	2b2b      	cmp	r3, #43	; 0x2b
 8017380:	d078      	beq.n	8017474 <_strtod_l+0x27c>
 8017382:	2b2d      	cmp	r3, #45	; 0x2d
 8017384:	d070      	beq.n	8017468 <_strtod_l+0x270>
 8017386:	f04f 0c00 	mov.w	ip, #0
 801738a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801738e:	2f09      	cmp	r7, #9
 8017390:	d97c      	bls.n	801748c <_strtod_l+0x294>
 8017392:	961b      	str	r6, [sp, #108]	; 0x6c
 8017394:	f04f 0e00 	mov.w	lr, #0
 8017398:	e09a      	b.n	80174d0 <_strtod_l+0x2d8>
 801739a:	2300      	movs	r3, #0
 801739c:	e7c7      	b.n	801732e <_strtod_l+0x136>
 801739e:	9905      	ldr	r1, [sp, #20]
 80173a0:	2908      	cmp	r1, #8
 80173a2:	bfdd      	ittte	le
 80173a4:	9907      	ldrle	r1, [sp, #28]
 80173a6:	fb02 3301 	mlale	r3, r2, r1, r3
 80173aa:	9307      	strle	r3, [sp, #28]
 80173ac:	fb02 3505 	mlagt	r5, r2, r5, r3
 80173b0:	9b05      	ldr	r3, [sp, #20]
 80173b2:	3001      	adds	r0, #1
 80173b4:	3301      	adds	r3, #1
 80173b6:	9305      	str	r3, [sp, #20]
 80173b8:	901b      	str	r0, [sp, #108]	; 0x6c
 80173ba:	e7bf      	b.n	801733c <_strtod_l+0x144>
 80173bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80173be:	191a      	adds	r2, r3, r4
 80173c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80173c2:	9a05      	ldr	r2, [sp, #20]
 80173c4:	5d1b      	ldrb	r3, [r3, r4]
 80173c6:	2a00      	cmp	r2, #0
 80173c8:	d037      	beq.n	801743a <_strtod_l+0x242>
 80173ca:	9c05      	ldr	r4, [sp, #20]
 80173cc:	4602      	mov	r2, r0
 80173ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80173d2:	2909      	cmp	r1, #9
 80173d4:	d913      	bls.n	80173fe <_strtod_l+0x206>
 80173d6:	2101      	movs	r1, #1
 80173d8:	9104      	str	r1, [sp, #16]
 80173da:	e7c2      	b.n	8017362 <_strtod_l+0x16a>
 80173dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80173de:	1c5a      	adds	r2, r3, #1
 80173e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80173e2:	785b      	ldrb	r3, [r3, #1]
 80173e4:	3001      	adds	r0, #1
 80173e6:	2b30      	cmp	r3, #48	; 0x30
 80173e8:	d0f8      	beq.n	80173dc <_strtod_l+0x1e4>
 80173ea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80173ee:	2a08      	cmp	r2, #8
 80173f0:	f200 84e4 	bhi.w	8017dbc <_strtod_l+0xbc4>
 80173f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80173f6:	9208      	str	r2, [sp, #32]
 80173f8:	4602      	mov	r2, r0
 80173fa:	2000      	movs	r0, #0
 80173fc:	4604      	mov	r4, r0
 80173fe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8017402:	f100 0101 	add.w	r1, r0, #1
 8017406:	d012      	beq.n	801742e <_strtod_l+0x236>
 8017408:	440a      	add	r2, r1
 801740a:	eb00 0c04 	add.w	ip, r0, r4
 801740e:	4621      	mov	r1, r4
 8017410:	270a      	movs	r7, #10
 8017412:	458c      	cmp	ip, r1
 8017414:	d113      	bne.n	801743e <_strtod_l+0x246>
 8017416:	1821      	adds	r1, r4, r0
 8017418:	2908      	cmp	r1, #8
 801741a:	f104 0401 	add.w	r4, r4, #1
 801741e:	4404      	add	r4, r0
 8017420:	dc19      	bgt.n	8017456 <_strtod_l+0x25e>
 8017422:	9b07      	ldr	r3, [sp, #28]
 8017424:	210a      	movs	r1, #10
 8017426:	fb01 e303 	mla	r3, r1, r3, lr
 801742a:	9307      	str	r3, [sp, #28]
 801742c:	2100      	movs	r1, #0
 801742e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017430:	1c58      	adds	r0, r3, #1
 8017432:	901b      	str	r0, [sp, #108]	; 0x6c
 8017434:	785b      	ldrb	r3, [r3, #1]
 8017436:	4608      	mov	r0, r1
 8017438:	e7c9      	b.n	80173ce <_strtod_l+0x1d6>
 801743a:	9805      	ldr	r0, [sp, #20]
 801743c:	e7d3      	b.n	80173e6 <_strtod_l+0x1ee>
 801743e:	2908      	cmp	r1, #8
 8017440:	f101 0101 	add.w	r1, r1, #1
 8017444:	dc03      	bgt.n	801744e <_strtod_l+0x256>
 8017446:	9b07      	ldr	r3, [sp, #28]
 8017448:	437b      	muls	r3, r7
 801744a:	9307      	str	r3, [sp, #28]
 801744c:	e7e1      	b.n	8017412 <_strtod_l+0x21a>
 801744e:	2910      	cmp	r1, #16
 8017450:	bfd8      	it	le
 8017452:	437d      	mulle	r5, r7
 8017454:	e7dd      	b.n	8017412 <_strtod_l+0x21a>
 8017456:	2c10      	cmp	r4, #16
 8017458:	bfdc      	itt	le
 801745a:	210a      	movle	r1, #10
 801745c:	fb01 e505 	mlale	r5, r1, r5, lr
 8017460:	e7e4      	b.n	801742c <_strtod_l+0x234>
 8017462:	2301      	movs	r3, #1
 8017464:	9304      	str	r3, [sp, #16]
 8017466:	e781      	b.n	801736c <_strtod_l+0x174>
 8017468:	f04f 0c01 	mov.w	ip, #1
 801746c:	1cb3      	adds	r3, r6, #2
 801746e:	931b      	str	r3, [sp, #108]	; 0x6c
 8017470:	78b3      	ldrb	r3, [r6, #2]
 8017472:	e78a      	b.n	801738a <_strtod_l+0x192>
 8017474:	f04f 0c00 	mov.w	ip, #0
 8017478:	e7f8      	b.n	801746c <_strtod_l+0x274>
 801747a:	bf00      	nop
 801747c:	0801acb0 	.word	0x0801acb0
 8017480:	7ff00000 	.word	0x7ff00000
 8017484:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017486:	1c5f      	adds	r7, r3, #1
 8017488:	971b      	str	r7, [sp, #108]	; 0x6c
 801748a:	785b      	ldrb	r3, [r3, #1]
 801748c:	2b30      	cmp	r3, #48	; 0x30
 801748e:	d0f9      	beq.n	8017484 <_strtod_l+0x28c>
 8017490:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8017494:	2f08      	cmp	r7, #8
 8017496:	f63f af7d 	bhi.w	8017394 <_strtod_l+0x19c>
 801749a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801749e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80174a0:	930a      	str	r3, [sp, #40]	; 0x28
 80174a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80174a4:	1c5f      	adds	r7, r3, #1
 80174a6:	971b      	str	r7, [sp, #108]	; 0x6c
 80174a8:	785b      	ldrb	r3, [r3, #1]
 80174aa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80174ae:	f1b8 0f09 	cmp.w	r8, #9
 80174b2:	d937      	bls.n	8017524 <_strtod_l+0x32c>
 80174b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80174b6:	1a7f      	subs	r7, r7, r1
 80174b8:	2f08      	cmp	r7, #8
 80174ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80174be:	dc37      	bgt.n	8017530 <_strtod_l+0x338>
 80174c0:	45be      	cmp	lr, r7
 80174c2:	bfa8      	it	ge
 80174c4:	46be      	movge	lr, r7
 80174c6:	f1bc 0f00 	cmp.w	ip, #0
 80174ca:	d001      	beq.n	80174d0 <_strtod_l+0x2d8>
 80174cc:	f1ce 0e00 	rsb	lr, lr, #0
 80174d0:	2c00      	cmp	r4, #0
 80174d2:	d151      	bne.n	8017578 <_strtod_l+0x380>
 80174d4:	2800      	cmp	r0, #0
 80174d6:	f47f aece 	bne.w	8017276 <_strtod_l+0x7e>
 80174da:	9a06      	ldr	r2, [sp, #24]
 80174dc:	2a00      	cmp	r2, #0
 80174de:	f47f aeca 	bne.w	8017276 <_strtod_l+0x7e>
 80174e2:	9a04      	ldr	r2, [sp, #16]
 80174e4:	2a00      	cmp	r2, #0
 80174e6:	f47f aee4 	bne.w	80172b2 <_strtod_l+0xba>
 80174ea:	2b4e      	cmp	r3, #78	; 0x4e
 80174ec:	d027      	beq.n	801753e <_strtod_l+0x346>
 80174ee:	dc21      	bgt.n	8017534 <_strtod_l+0x33c>
 80174f0:	2b49      	cmp	r3, #73	; 0x49
 80174f2:	f47f aede 	bne.w	80172b2 <_strtod_l+0xba>
 80174f6:	49a0      	ldr	r1, [pc, #640]	; (8017778 <_strtod_l+0x580>)
 80174f8:	a81b      	add	r0, sp, #108	; 0x6c
 80174fa:	f001 fdf7 	bl	80190ec <__match>
 80174fe:	2800      	cmp	r0, #0
 8017500:	f43f aed7 	beq.w	80172b2 <_strtod_l+0xba>
 8017504:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017506:	499d      	ldr	r1, [pc, #628]	; (801777c <_strtod_l+0x584>)
 8017508:	3b01      	subs	r3, #1
 801750a:	a81b      	add	r0, sp, #108	; 0x6c
 801750c:	931b      	str	r3, [sp, #108]	; 0x6c
 801750e:	f001 fded 	bl	80190ec <__match>
 8017512:	b910      	cbnz	r0, 801751a <_strtod_l+0x322>
 8017514:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017516:	3301      	adds	r3, #1
 8017518:	931b      	str	r3, [sp, #108]	; 0x6c
 801751a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8017790 <_strtod_l+0x598>
 801751e:	f04f 0a00 	mov.w	sl, #0
 8017522:	e6a8      	b.n	8017276 <_strtod_l+0x7e>
 8017524:	210a      	movs	r1, #10
 8017526:	fb01 3e0e 	mla	lr, r1, lr, r3
 801752a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801752e:	e7b8      	b.n	80174a2 <_strtod_l+0x2aa>
 8017530:	46be      	mov	lr, r7
 8017532:	e7c8      	b.n	80174c6 <_strtod_l+0x2ce>
 8017534:	2b69      	cmp	r3, #105	; 0x69
 8017536:	d0de      	beq.n	80174f6 <_strtod_l+0x2fe>
 8017538:	2b6e      	cmp	r3, #110	; 0x6e
 801753a:	f47f aeba 	bne.w	80172b2 <_strtod_l+0xba>
 801753e:	4990      	ldr	r1, [pc, #576]	; (8017780 <_strtod_l+0x588>)
 8017540:	a81b      	add	r0, sp, #108	; 0x6c
 8017542:	f001 fdd3 	bl	80190ec <__match>
 8017546:	2800      	cmp	r0, #0
 8017548:	f43f aeb3 	beq.w	80172b2 <_strtod_l+0xba>
 801754c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801754e:	781b      	ldrb	r3, [r3, #0]
 8017550:	2b28      	cmp	r3, #40	; 0x28
 8017552:	d10e      	bne.n	8017572 <_strtod_l+0x37a>
 8017554:	aa1e      	add	r2, sp, #120	; 0x78
 8017556:	498b      	ldr	r1, [pc, #556]	; (8017784 <_strtod_l+0x58c>)
 8017558:	a81b      	add	r0, sp, #108	; 0x6c
 801755a:	f001 fddb 	bl	8019114 <__hexnan>
 801755e:	2805      	cmp	r0, #5
 8017560:	d107      	bne.n	8017572 <_strtod_l+0x37a>
 8017562:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017564:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8017568:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801756c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8017570:	e681      	b.n	8017276 <_strtod_l+0x7e>
 8017572:	f8df b224 	ldr.w	fp, [pc, #548]	; 8017798 <_strtod_l+0x5a0>
 8017576:	e7d2      	b.n	801751e <_strtod_l+0x326>
 8017578:	ebae 0302 	sub.w	r3, lr, r2
 801757c:	9306      	str	r3, [sp, #24]
 801757e:	9b05      	ldr	r3, [sp, #20]
 8017580:	9807      	ldr	r0, [sp, #28]
 8017582:	2b00      	cmp	r3, #0
 8017584:	bf08      	it	eq
 8017586:	4623      	moveq	r3, r4
 8017588:	2c10      	cmp	r4, #16
 801758a:	9305      	str	r3, [sp, #20]
 801758c:	46a0      	mov	r8, r4
 801758e:	bfa8      	it	ge
 8017590:	f04f 0810 	movge.w	r8, #16
 8017594:	f7e8 ffce 	bl	8000534 <__aeabi_ui2d>
 8017598:	2c09      	cmp	r4, #9
 801759a:	4682      	mov	sl, r0
 801759c:	468b      	mov	fp, r1
 801759e:	dc13      	bgt.n	80175c8 <_strtod_l+0x3d0>
 80175a0:	9b06      	ldr	r3, [sp, #24]
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	f43f ae67 	beq.w	8017276 <_strtod_l+0x7e>
 80175a8:	9b06      	ldr	r3, [sp, #24]
 80175aa:	dd7a      	ble.n	80176a2 <_strtod_l+0x4aa>
 80175ac:	2b16      	cmp	r3, #22
 80175ae:	dc61      	bgt.n	8017674 <_strtod_l+0x47c>
 80175b0:	4a75      	ldr	r2, [pc, #468]	; (8017788 <_strtod_l+0x590>)
 80175b2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80175b6:	e9de 0100 	ldrd	r0, r1, [lr]
 80175ba:	4652      	mov	r2, sl
 80175bc:	465b      	mov	r3, fp
 80175be:	f7e9 f833 	bl	8000628 <__aeabi_dmul>
 80175c2:	4682      	mov	sl, r0
 80175c4:	468b      	mov	fp, r1
 80175c6:	e656      	b.n	8017276 <_strtod_l+0x7e>
 80175c8:	4b6f      	ldr	r3, [pc, #444]	; (8017788 <_strtod_l+0x590>)
 80175ca:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80175ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80175d2:	f7e9 f829 	bl	8000628 <__aeabi_dmul>
 80175d6:	4606      	mov	r6, r0
 80175d8:	4628      	mov	r0, r5
 80175da:	460f      	mov	r7, r1
 80175dc:	f7e8 ffaa 	bl	8000534 <__aeabi_ui2d>
 80175e0:	4602      	mov	r2, r0
 80175e2:	460b      	mov	r3, r1
 80175e4:	4630      	mov	r0, r6
 80175e6:	4639      	mov	r1, r7
 80175e8:	f7e8 fe68 	bl	80002bc <__adddf3>
 80175ec:	2c0f      	cmp	r4, #15
 80175ee:	4682      	mov	sl, r0
 80175f0:	468b      	mov	fp, r1
 80175f2:	ddd5      	ble.n	80175a0 <_strtod_l+0x3a8>
 80175f4:	9b06      	ldr	r3, [sp, #24]
 80175f6:	eba4 0808 	sub.w	r8, r4, r8
 80175fa:	4498      	add	r8, r3
 80175fc:	f1b8 0f00 	cmp.w	r8, #0
 8017600:	f340 8096 	ble.w	8017730 <_strtod_l+0x538>
 8017604:	f018 030f 	ands.w	r3, r8, #15
 8017608:	d00a      	beq.n	8017620 <_strtod_l+0x428>
 801760a:	495f      	ldr	r1, [pc, #380]	; (8017788 <_strtod_l+0x590>)
 801760c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017610:	4652      	mov	r2, sl
 8017612:	465b      	mov	r3, fp
 8017614:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017618:	f7e9 f806 	bl	8000628 <__aeabi_dmul>
 801761c:	4682      	mov	sl, r0
 801761e:	468b      	mov	fp, r1
 8017620:	f038 080f 	bics.w	r8, r8, #15
 8017624:	d073      	beq.n	801770e <_strtod_l+0x516>
 8017626:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801762a:	dd47      	ble.n	80176bc <_strtod_l+0x4c4>
 801762c:	2400      	movs	r4, #0
 801762e:	46a0      	mov	r8, r4
 8017630:	9407      	str	r4, [sp, #28]
 8017632:	9405      	str	r4, [sp, #20]
 8017634:	2322      	movs	r3, #34	; 0x22
 8017636:	f8df b158 	ldr.w	fp, [pc, #344]	; 8017790 <_strtod_l+0x598>
 801763a:	f8c9 3000 	str.w	r3, [r9]
 801763e:	f04f 0a00 	mov.w	sl, #0
 8017642:	9b07      	ldr	r3, [sp, #28]
 8017644:	2b00      	cmp	r3, #0
 8017646:	f43f ae16 	beq.w	8017276 <_strtod_l+0x7e>
 801764a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801764c:	4648      	mov	r0, r9
 801764e:	f001 fe66 	bl	801931e <_Bfree>
 8017652:	9905      	ldr	r1, [sp, #20]
 8017654:	4648      	mov	r0, r9
 8017656:	f001 fe62 	bl	801931e <_Bfree>
 801765a:	4641      	mov	r1, r8
 801765c:	4648      	mov	r0, r9
 801765e:	f001 fe5e 	bl	801931e <_Bfree>
 8017662:	9907      	ldr	r1, [sp, #28]
 8017664:	4648      	mov	r0, r9
 8017666:	f001 fe5a 	bl	801931e <_Bfree>
 801766a:	4621      	mov	r1, r4
 801766c:	4648      	mov	r0, r9
 801766e:	f001 fe56 	bl	801931e <_Bfree>
 8017672:	e600      	b.n	8017276 <_strtod_l+0x7e>
 8017674:	9a06      	ldr	r2, [sp, #24]
 8017676:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801767a:	4293      	cmp	r3, r2
 801767c:	dbba      	blt.n	80175f4 <_strtod_l+0x3fc>
 801767e:	4d42      	ldr	r5, [pc, #264]	; (8017788 <_strtod_l+0x590>)
 8017680:	f1c4 040f 	rsb	r4, r4, #15
 8017684:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8017688:	4652      	mov	r2, sl
 801768a:	465b      	mov	r3, fp
 801768c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017690:	f7e8 ffca 	bl	8000628 <__aeabi_dmul>
 8017694:	9b06      	ldr	r3, [sp, #24]
 8017696:	1b1c      	subs	r4, r3, r4
 8017698:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801769c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80176a0:	e78d      	b.n	80175be <_strtod_l+0x3c6>
 80176a2:	f113 0f16 	cmn.w	r3, #22
 80176a6:	dba5      	blt.n	80175f4 <_strtod_l+0x3fc>
 80176a8:	4a37      	ldr	r2, [pc, #220]	; (8017788 <_strtod_l+0x590>)
 80176aa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80176ae:	e9d2 2300 	ldrd	r2, r3, [r2]
 80176b2:	4650      	mov	r0, sl
 80176b4:	4659      	mov	r1, fp
 80176b6:	f7e9 f8e1 	bl	800087c <__aeabi_ddiv>
 80176ba:	e782      	b.n	80175c2 <_strtod_l+0x3ca>
 80176bc:	2300      	movs	r3, #0
 80176be:	4e33      	ldr	r6, [pc, #204]	; (801778c <_strtod_l+0x594>)
 80176c0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80176c4:	4650      	mov	r0, sl
 80176c6:	4659      	mov	r1, fp
 80176c8:	461d      	mov	r5, r3
 80176ca:	f1b8 0f01 	cmp.w	r8, #1
 80176ce:	dc21      	bgt.n	8017714 <_strtod_l+0x51c>
 80176d0:	b10b      	cbz	r3, 80176d6 <_strtod_l+0x4de>
 80176d2:	4682      	mov	sl, r0
 80176d4:	468b      	mov	fp, r1
 80176d6:	4b2d      	ldr	r3, [pc, #180]	; (801778c <_strtod_l+0x594>)
 80176d8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80176dc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80176e0:	4652      	mov	r2, sl
 80176e2:	465b      	mov	r3, fp
 80176e4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80176e8:	f7e8 ff9e 	bl	8000628 <__aeabi_dmul>
 80176ec:	4b28      	ldr	r3, [pc, #160]	; (8017790 <_strtod_l+0x598>)
 80176ee:	460a      	mov	r2, r1
 80176f0:	400b      	ands	r3, r1
 80176f2:	4928      	ldr	r1, [pc, #160]	; (8017794 <_strtod_l+0x59c>)
 80176f4:	428b      	cmp	r3, r1
 80176f6:	4682      	mov	sl, r0
 80176f8:	d898      	bhi.n	801762c <_strtod_l+0x434>
 80176fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80176fe:	428b      	cmp	r3, r1
 8017700:	bf86      	itte	hi
 8017702:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801779c <_strtod_l+0x5a4>
 8017706:	f04f 3aff 	movhi.w	sl, #4294967295
 801770a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801770e:	2300      	movs	r3, #0
 8017710:	9304      	str	r3, [sp, #16]
 8017712:	e077      	b.n	8017804 <_strtod_l+0x60c>
 8017714:	f018 0f01 	tst.w	r8, #1
 8017718:	d006      	beq.n	8017728 <_strtod_l+0x530>
 801771a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801771e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017722:	f7e8 ff81 	bl	8000628 <__aeabi_dmul>
 8017726:	2301      	movs	r3, #1
 8017728:	3501      	adds	r5, #1
 801772a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801772e:	e7cc      	b.n	80176ca <_strtod_l+0x4d2>
 8017730:	d0ed      	beq.n	801770e <_strtod_l+0x516>
 8017732:	f1c8 0800 	rsb	r8, r8, #0
 8017736:	f018 020f 	ands.w	r2, r8, #15
 801773a:	d00a      	beq.n	8017752 <_strtod_l+0x55a>
 801773c:	4b12      	ldr	r3, [pc, #72]	; (8017788 <_strtod_l+0x590>)
 801773e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017742:	4650      	mov	r0, sl
 8017744:	4659      	mov	r1, fp
 8017746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801774a:	f7e9 f897 	bl	800087c <__aeabi_ddiv>
 801774e:	4682      	mov	sl, r0
 8017750:	468b      	mov	fp, r1
 8017752:	ea5f 1828 	movs.w	r8, r8, asr #4
 8017756:	d0da      	beq.n	801770e <_strtod_l+0x516>
 8017758:	f1b8 0f1f 	cmp.w	r8, #31
 801775c:	dd20      	ble.n	80177a0 <_strtod_l+0x5a8>
 801775e:	2400      	movs	r4, #0
 8017760:	46a0      	mov	r8, r4
 8017762:	9407      	str	r4, [sp, #28]
 8017764:	9405      	str	r4, [sp, #20]
 8017766:	2322      	movs	r3, #34	; 0x22
 8017768:	f04f 0a00 	mov.w	sl, #0
 801776c:	f04f 0b00 	mov.w	fp, #0
 8017770:	f8c9 3000 	str.w	r3, [r9]
 8017774:	e765      	b.n	8017642 <_strtod_l+0x44a>
 8017776:	bf00      	nop
 8017778:	0801ac7d 	.word	0x0801ac7d
 801777c:	0801ad03 	.word	0x0801ad03
 8017780:	0801ac85 	.word	0x0801ac85
 8017784:	0801acc4 	.word	0x0801acc4
 8017788:	0801ad40 	.word	0x0801ad40
 801778c:	0801ad18 	.word	0x0801ad18
 8017790:	7ff00000 	.word	0x7ff00000
 8017794:	7ca00000 	.word	0x7ca00000
 8017798:	fff80000 	.word	0xfff80000
 801779c:	7fefffff 	.word	0x7fefffff
 80177a0:	f018 0310 	ands.w	r3, r8, #16
 80177a4:	bf18      	it	ne
 80177a6:	236a      	movne	r3, #106	; 0x6a
 80177a8:	4da0      	ldr	r5, [pc, #640]	; (8017a2c <_strtod_l+0x834>)
 80177aa:	9304      	str	r3, [sp, #16]
 80177ac:	4650      	mov	r0, sl
 80177ae:	4659      	mov	r1, fp
 80177b0:	2300      	movs	r3, #0
 80177b2:	f1b8 0f00 	cmp.w	r8, #0
 80177b6:	f300 810a 	bgt.w	80179ce <_strtod_l+0x7d6>
 80177ba:	b10b      	cbz	r3, 80177c0 <_strtod_l+0x5c8>
 80177bc:	4682      	mov	sl, r0
 80177be:	468b      	mov	fp, r1
 80177c0:	9b04      	ldr	r3, [sp, #16]
 80177c2:	b1bb      	cbz	r3, 80177f4 <_strtod_l+0x5fc>
 80177c4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80177c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	4659      	mov	r1, fp
 80177d0:	dd10      	ble.n	80177f4 <_strtod_l+0x5fc>
 80177d2:	2b1f      	cmp	r3, #31
 80177d4:	f340 8107 	ble.w	80179e6 <_strtod_l+0x7ee>
 80177d8:	2b34      	cmp	r3, #52	; 0x34
 80177da:	bfde      	ittt	le
 80177dc:	3b20      	suble	r3, #32
 80177de:	f04f 32ff 	movle.w	r2, #4294967295
 80177e2:	fa02 f303 	lslle.w	r3, r2, r3
 80177e6:	f04f 0a00 	mov.w	sl, #0
 80177ea:	bfcc      	ite	gt
 80177ec:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80177f0:	ea03 0b01 	andle.w	fp, r3, r1
 80177f4:	2200      	movs	r2, #0
 80177f6:	2300      	movs	r3, #0
 80177f8:	4650      	mov	r0, sl
 80177fa:	4659      	mov	r1, fp
 80177fc:	f7e9 f97c 	bl	8000af8 <__aeabi_dcmpeq>
 8017800:	2800      	cmp	r0, #0
 8017802:	d1ac      	bne.n	801775e <_strtod_l+0x566>
 8017804:	9b07      	ldr	r3, [sp, #28]
 8017806:	9300      	str	r3, [sp, #0]
 8017808:	9a05      	ldr	r2, [sp, #20]
 801780a:	9908      	ldr	r1, [sp, #32]
 801780c:	4623      	mov	r3, r4
 801780e:	4648      	mov	r0, r9
 8017810:	f001 fdd7 	bl	80193c2 <__s2b>
 8017814:	9007      	str	r0, [sp, #28]
 8017816:	2800      	cmp	r0, #0
 8017818:	f43f af08 	beq.w	801762c <_strtod_l+0x434>
 801781c:	9a06      	ldr	r2, [sp, #24]
 801781e:	9b06      	ldr	r3, [sp, #24]
 8017820:	2a00      	cmp	r2, #0
 8017822:	f1c3 0300 	rsb	r3, r3, #0
 8017826:	bfa8      	it	ge
 8017828:	2300      	movge	r3, #0
 801782a:	930e      	str	r3, [sp, #56]	; 0x38
 801782c:	2400      	movs	r4, #0
 801782e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8017832:	9316      	str	r3, [sp, #88]	; 0x58
 8017834:	46a0      	mov	r8, r4
 8017836:	9b07      	ldr	r3, [sp, #28]
 8017838:	4648      	mov	r0, r9
 801783a:	6859      	ldr	r1, [r3, #4]
 801783c:	f001 fd3b 	bl	80192b6 <_Balloc>
 8017840:	9005      	str	r0, [sp, #20]
 8017842:	2800      	cmp	r0, #0
 8017844:	f43f aef6 	beq.w	8017634 <_strtod_l+0x43c>
 8017848:	9b07      	ldr	r3, [sp, #28]
 801784a:	691a      	ldr	r2, [r3, #16]
 801784c:	3202      	adds	r2, #2
 801784e:	f103 010c 	add.w	r1, r3, #12
 8017852:	0092      	lsls	r2, r2, #2
 8017854:	300c      	adds	r0, #12
 8017856:	f001 fd21 	bl	801929c <memcpy>
 801785a:	aa1e      	add	r2, sp, #120	; 0x78
 801785c:	a91d      	add	r1, sp, #116	; 0x74
 801785e:	ec4b ab10 	vmov	d0, sl, fp
 8017862:	4648      	mov	r0, r9
 8017864:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8017868:	f002 f866 	bl	8019938 <__d2b>
 801786c:	901c      	str	r0, [sp, #112]	; 0x70
 801786e:	2800      	cmp	r0, #0
 8017870:	f43f aee0 	beq.w	8017634 <_strtod_l+0x43c>
 8017874:	2101      	movs	r1, #1
 8017876:	4648      	mov	r0, r9
 8017878:	f001 fe2f 	bl	80194da <__i2b>
 801787c:	4680      	mov	r8, r0
 801787e:	2800      	cmp	r0, #0
 8017880:	f43f aed8 	beq.w	8017634 <_strtod_l+0x43c>
 8017884:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8017886:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017888:	2e00      	cmp	r6, #0
 801788a:	bfab      	itete	ge
 801788c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801788e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8017890:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8017892:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8017894:	bfac      	ite	ge
 8017896:	18f7      	addge	r7, r6, r3
 8017898:	1b9d      	sublt	r5, r3, r6
 801789a:	9b04      	ldr	r3, [sp, #16]
 801789c:	1af6      	subs	r6, r6, r3
 801789e:	4416      	add	r6, r2
 80178a0:	4b63      	ldr	r3, [pc, #396]	; (8017a30 <_strtod_l+0x838>)
 80178a2:	3e01      	subs	r6, #1
 80178a4:	429e      	cmp	r6, r3
 80178a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80178aa:	f280 80af 	bge.w	8017a0c <_strtod_l+0x814>
 80178ae:	1b9b      	subs	r3, r3, r6
 80178b0:	2b1f      	cmp	r3, #31
 80178b2:	eba2 0203 	sub.w	r2, r2, r3
 80178b6:	f04f 0101 	mov.w	r1, #1
 80178ba:	f300 809b 	bgt.w	80179f4 <_strtod_l+0x7fc>
 80178be:	fa01 f303 	lsl.w	r3, r1, r3
 80178c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80178c4:	2300      	movs	r3, #0
 80178c6:	930a      	str	r3, [sp, #40]	; 0x28
 80178c8:	18be      	adds	r6, r7, r2
 80178ca:	9b04      	ldr	r3, [sp, #16]
 80178cc:	42b7      	cmp	r7, r6
 80178ce:	4415      	add	r5, r2
 80178d0:	441d      	add	r5, r3
 80178d2:	463b      	mov	r3, r7
 80178d4:	bfa8      	it	ge
 80178d6:	4633      	movge	r3, r6
 80178d8:	42ab      	cmp	r3, r5
 80178da:	bfa8      	it	ge
 80178dc:	462b      	movge	r3, r5
 80178de:	2b00      	cmp	r3, #0
 80178e0:	bfc2      	ittt	gt
 80178e2:	1af6      	subgt	r6, r6, r3
 80178e4:	1aed      	subgt	r5, r5, r3
 80178e6:	1aff      	subgt	r7, r7, r3
 80178e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80178ea:	b1bb      	cbz	r3, 801791c <_strtod_l+0x724>
 80178ec:	4641      	mov	r1, r8
 80178ee:	461a      	mov	r2, r3
 80178f0:	4648      	mov	r0, r9
 80178f2:	f001 fe91 	bl	8019618 <__pow5mult>
 80178f6:	4680      	mov	r8, r0
 80178f8:	2800      	cmp	r0, #0
 80178fa:	f43f ae9b 	beq.w	8017634 <_strtod_l+0x43c>
 80178fe:	4601      	mov	r1, r0
 8017900:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017902:	4648      	mov	r0, r9
 8017904:	f001 fdf2 	bl	80194ec <__multiply>
 8017908:	900c      	str	r0, [sp, #48]	; 0x30
 801790a:	2800      	cmp	r0, #0
 801790c:	f43f ae92 	beq.w	8017634 <_strtod_l+0x43c>
 8017910:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017912:	4648      	mov	r0, r9
 8017914:	f001 fd03 	bl	801931e <_Bfree>
 8017918:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801791a:	931c      	str	r3, [sp, #112]	; 0x70
 801791c:	2e00      	cmp	r6, #0
 801791e:	dc7a      	bgt.n	8017a16 <_strtod_l+0x81e>
 8017920:	9b06      	ldr	r3, [sp, #24]
 8017922:	2b00      	cmp	r3, #0
 8017924:	dd08      	ble.n	8017938 <_strtod_l+0x740>
 8017926:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017928:	9905      	ldr	r1, [sp, #20]
 801792a:	4648      	mov	r0, r9
 801792c:	f001 fe74 	bl	8019618 <__pow5mult>
 8017930:	9005      	str	r0, [sp, #20]
 8017932:	2800      	cmp	r0, #0
 8017934:	f43f ae7e 	beq.w	8017634 <_strtod_l+0x43c>
 8017938:	2d00      	cmp	r5, #0
 801793a:	dd08      	ble.n	801794e <_strtod_l+0x756>
 801793c:	462a      	mov	r2, r5
 801793e:	9905      	ldr	r1, [sp, #20]
 8017940:	4648      	mov	r0, r9
 8017942:	f001 feb7 	bl	80196b4 <__lshift>
 8017946:	9005      	str	r0, [sp, #20]
 8017948:	2800      	cmp	r0, #0
 801794a:	f43f ae73 	beq.w	8017634 <_strtod_l+0x43c>
 801794e:	2f00      	cmp	r7, #0
 8017950:	dd08      	ble.n	8017964 <_strtod_l+0x76c>
 8017952:	4641      	mov	r1, r8
 8017954:	463a      	mov	r2, r7
 8017956:	4648      	mov	r0, r9
 8017958:	f001 feac 	bl	80196b4 <__lshift>
 801795c:	4680      	mov	r8, r0
 801795e:	2800      	cmp	r0, #0
 8017960:	f43f ae68 	beq.w	8017634 <_strtod_l+0x43c>
 8017964:	9a05      	ldr	r2, [sp, #20]
 8017966:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017968:	4648      	mov	r0, r9
 801796a:	f001 ff11 	bl	8019790 <__mdiff>
 801796e:	4604      	mov	r4, r0
 8017970:	2800      	cmp	r0, #0
 8017972:	f43f ae5f 	beq.w	8017634 <_strtod_l+0x43c>
 8017976:	68c3      	ldr	r3, [r0, #12]
 8017978:	930c      	str	r3, [sp, #48]	; 0x30
 801797a:	2300      	movs	r3, #0
 801797c:	60c3      	str	r3, [r0, #12]
 801797e:	4641      	mov	r1, r8
 8017980:	f001 feec 	bl	801975c <__mcmp>
 8017984:	2800      	cmp	r0, #0
 8017986:	da55      	bge.n	8017a34 <_strtod_l+0x83c>
 8017988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801798a:	b9e3      	cbnz	r3, 80179c6 <_strtod_l+0x7ce>
 801798c:	f1ba 0f00 	cmp.w	sl, #0
 8017990:	d119      	bne.n	80179c6 <_strtod_l+0x7ce>
 8017992:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017996:	b9b3      	cbnz	r3, 80179c6 <_strtod_l+0x7ce>
 8017998:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801799c:	0d1b      	lsrs	r3, r3, #20
 801799e:	051b      	lsls	r3, r3, #20
 80179a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80179a4:	d90f      	bls.n	80179c6 <_strtod_l+0x7ce>
 80179a6:	6963      	ldr	r3, [r4, #20]
 80179a8:	b913      	cbnz	r3, 80179b0 <_strtod_l+0x7b8>
 80179aa:	6923      	ldr	r3, [r4, #16]
 80179ac:	2b01      	cmp	r3, #1
 80179ae:	dd0a      	ble.n	80179c6 <_strtod_l+0x7ce>
 80179b0:	4621      	mov	r1, r4
 80179b2:	2201      	movs	r2, #1
 80179b4:	4648      	mov	r0, r9
 80179b6:	f001 fe7d 	bl	80196b4 <__lshift>
 80179ba:	4641      	mov	r1, r8
 80179bc:	4604      	mov	r4, r0
 80179be:	f001 fecd 	bl	801975c <__mcmp>
 80179c2:	2800      	cmp	r0, #0
 80179c4:	dc67      	bgt.n	8017a96 <_strtod_l+0x89e>
 80179c6:	9b04      	ldr	r3, [sp, #16]
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d171      	bne.n	8017ab0 <_strtod_l+0x8b8>
 80179cc:	e63d      	b.n	801764a <_strtod_l+0x452>
 80179ce:	f018 0f01 	tst.w	r8, #1
 80179d2:	d004      	beq.n	80179de <_strtod_l+0x7e6>
 80179d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80179d8:	f7e8 fe26 	bl	8000628 <__aeabi_dmul>
 80179dc:	2301      	movs	r3, #1
 80179de:	ea4f 0868 	mov.w	r8, r8, asr #1
 80179e2:	3508      	adds	r5, #8
 80179e4:	e6e5      	b.n	80177b2 <_strtod_l+0x5ba>
 80179e6:	f04f 32ff 	mov.w	r2, #4294967295
 80179ea:	fa02 f303 	lsl.w	r3, r2, r3
 80179ee:	ea03 0a0a 	and.w	sl, r3, sl
 80179f2:	e6ff      	b.n	80177f4 <_strtod_l+0x5fc>
 80179f4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80179f8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80179fc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8017a00:	36e2      	adds	r6, #226	; 0xe2
 8017a02:	fa01 f306 	lsl.w	r3, r1, r6
 8017a06:	930a      	str	r3, [sp, #40]	; 0x28
 8017a08:	910f      	str	r1, [sp, #60]	; 0x3c
 8017a0a:	e75d      	b.n	80178c8 <_strtod_l+0x6d0>
 8017a0c:	2300      	movs	r3, #0
 8017a0e:	930a      	str	r3, [sp, #40]	; 0x28
 8017a10:	2301      	movs	r3, #1
 8017a12:	930f      	str	r3, [sp, #60]	; 0x3c
 8017a14:	e758      	b.n	80178c8 <_strtod_l+0x6d0>
 8017a16:	4632      	mov	r2, r6
 8017a18:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017a1a:	4648      	mov	r0, r9
 8017a1c:	f001 fe4a 	bl	80196b4 <__lshift>
 8017a20:	901c      	str	r0, [sp, #112]	; 0x70
 8017a22:	2800      	cmp	r0, #0
 8017a24:	f47f af7c 	bne.w	8017920 <_strtod_l+0x728>
 8017a28:	e604      	b.n	8017634 <_strtod_l+0x43c>
 8017a2a:	bf00      	nop
 8017a2c:	0801acd8 	.word	0x0801acd8
 8017a30:	fffffc02 	.word	0xfffffc02
 8017a34:	465d      	mov	r5, fp
 8017a36:	f040 8086 	bne.w	8017b46 <_strtod_l+0x94e>
 8017a3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017a3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017a40:	b32a      	cbz	r2, 8017a8e <_strtod_l+0x896>
 8017a42:	4aaf      	ldr	r2, [pc, #700]	; (8017d00 <_strtod_l+0xb08>)
 8017a44:	4293      	cmp	r3, r2
 8017a46:	d153      	bne.n	8017af0 <_strtod_l+0x8f8>
 8017a48:	9b04      	ldr	r3, [sp, #16]
 8017a4a:	4650      	mov	r0, sl
 8017a4c:	b1d3      	cbz	r3, 8017a84 <_strtod_l+0x88c>
 8017a4e:	4aad      	ldr	r2, [pc, #692]	; (8017d04 <_strtod_l+0xb0c>)
 8017a50:	402a      	ands	r2, r5
 8017a52:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017a56:	f04f 31ff 	mov.w	r1, #4294967295
 8017a5a:	d816      	bhi.n	8017a8a <_strtod_l+0x892>
 8017a5c:	0d12      	lsrs	r2, r2, #20
 8017a5e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017a62:	fa01 f303 	lsl.w	r3, r1, r3
 8017a66:	4298      	cmp	r0, r3
 8017a68:	d142      	bne.n	8017af0 <_strtod_l+0x8f8>
 8017a6a:	4ba7      	ldr	r3, [pc, #668]	; (8017d08 <_strtod_l+0xb10>)
 8017a6c:	429d      	cmp	r5, r3
 8017a6e:	d102      	bne.n	8017a76 <_strtod_l+0x87e>
 8017a70:	3001      	adds	r0, #1
 8017a72:	f43f addf 	beq.w	8017634 <_strtod_l+0x43c>
 8017a76:	4ba3      	ldr	r3, [pc, #652]	; (8017d04 <_strtod_l+0xb0c>)
 8017a78:	402b      	ands	r3, r5
 8017a7a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8017a7e:	f04f 0a00 	mov.w	sl, #0
 8017a82:	e7a0      	b.n	80179c6 <_strtod_l+0x7ce>
 8017a84:	f04f 33ff 	mov.w	r3, #4294967295
 8017a88:	e7ed      	b.n	8017a66 <_strtod_l+0x86e>
 8017a8a:	460b      	mov	r3, r1
 8017a8c:	e7eb      	b.n	8017a66 <_strtod_l+0x86e>
 8017a8e:	bb7b      	cbnz	r3, 8017af0 <_strtod_l+0x8f8>
 8017a90:	f1ba 0f00 	cmp.w	sl, #0
 8017a94:	d12c      	bne.n	8017af0 <_strtod_l+0x8f8>
 8017a96:	9904      	ldr	r1, [sp, #16]
 8017a98:	4a9a      	ldr	r2, [pc, #616]	; (8017d04 <_strtod_l+0xb0c>)
 8017a9a:	465b      	mov	r3, fp
 8017a9c:	b1f1      	cbz	r1, 8017adc <_strtod_l+0x8e4>
 8017a9e:	ea02 010b 	and.w	r1, r2, fp
 8017aa2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017aa6:	dc19      	bgt.n	8017adc <_strtod_l+0x8e4>
 8017aa8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017aac:	f77f ae5b 	ble.w	8017766 <_strtod_l+0x56e>
 8017ab0:	4a96      	ldr	r2, [pc, #600]	; (8017d0c <_strtod_l+0xb14>)
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8017ab8:	4650      	mov	r0, sl
 8017aba:	4659      	mov	r1, fp
 8017abc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017ac0:	f7e8 fdb2 	bl	8000628 <__aeabi_dmul>
 8017ac4:	4682      	mov	sl, r0
 8017ac6:	468b      	mov	fp, r1
 8017ac8:	2900      	cmp	r1, #0
 8017aca:	f47f adbe 	bne.w	801764a <_strtod_l+0x452>
 8017ace:	2800      	cmp	r0, #0
 8017ad0:	f47f adbb 	bne.w	801764a <_strtod_l+0x452>
 8017ad4:	2322      	movs	r3, #34	; 0x22
 8017ad6:	f8c9 3000 	str.w	r3, [r9]
 8017ada:	e5b6      	b.n	801764a <_strtod_l+0x452>
 8017adc:	4013      	ands	r3, r2
 8017ade:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017ae2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017ae6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017aea:	f04f 3aff 	mov.w	sl, #4294967295
 8017aee:	e76a      	b.n	80179c6 <_strtod_l+0x7ce>
 8017af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017af2:	b193      	cbz	r3, 8017b1a <_strtod_l+0x922>
 8017af4:	422b      	tst	r3, r5
 8017af6:	f43f af66 	beq.w	80179c6 <_strtod_l+0x7ce>
 8017afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017afc:	9a04      	ldr	r2, [sp, #16]
 8017afe:	4650      	mov	r0, sl
 8017b00:	4659      	mov	r1, fp
 8017b02:	b173      	cbz	r3, 8017b22 <_strtod_l+0x92a>
 8017b04:	f7ff fb5c 	bl	80171c0 <sulp>
 8017b08:	4602      	mov	r2, r0
 8017b0a:	460b      	mov	r3, r1
 8017b0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017b10:	f7e8 fbd4 	bl	80002bc <__adddf3>
 8017b14:	4682      	mov	sl, r0
 8017b16:	468b      	mov	fp, r1
 8017b18:	e755      	b.n	80179c6 <_strtod_l+0x7ce>
 8017b1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017b1c:	ea13 0f0a 	tst.w	r3, sl
 8017b20:	e7e9      	b.n	8017af6 <_strtod_l+0x8fe>
 8017b22:	f7ff fb4d 	bl	80171c0 <sulp>
 8017b26:	4602      	mov	r2, r0
 8017b28:	460b      	mov	r3, r1
 8017b2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017b2e:	f7e8 fbc3 	bl	80002b8 <__aeabi_dsub>
 8017b32:	2200      	movs	r2, #0
 8017b34:	2300      	movs	r3, #0
 8017b36:	4682      	mov	sl, r0
 8017b38:	468b      	mov	fp, r1
 8017b3a:	f7e8 ffdd 	bl	8000af8 <__aeabi_dcmpeq>
 8017b3e:	2800      	cmp	r0, #0
 8017b40:	f47f ae11 	bne.w	8017766 <_strtod_l+0x56e>
 8017b44:	e73f      	b.n	80179c6 <_strtod_l+0x7ce>
 8017b46:	4641      	mov	r1, r8
 8017b48:	4620      	mov	r0, r4
 8017b4a:	f001 ff44 	bl	80199d6 <__ratio>
 8017b4e:	ec57 6b10 	vmov	r6, r7, d0
 8017b52:	2200      	movs	r2, #0
 8017b54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017b58:	ee10 0a10 	vmov	r0, s0
 8017b5c:	4639      	mov	r1, r7
 8017b5e:	f7e8 ffdf 	bl	8000b20 <__aeabi_dcmple>
 8017b62:	2800      	cmp	r0, #0
 8017b64:	d077      	beq.n	8017c56 <_strtod_l+0xa5e>
 8017b66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d04a      	beq.n	8017c02 <_strtod_l+0xa0a>
 8017b6c:	4b68      	ldr	r3, [pc, #416]	; (8017d10 <_strtod_l+0xb18>)
 8017b6e:	2200      	movs	r2, #0
 8017b70:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017b74:	4f66      	ldr	r7, [pc, #408]	; (8017d10 <_strtod_l+0xb18>)
 8017b76:	2600      	movs	r6, #0
 8017b78:	4b62      	ldr	r3, [pc, #392]	; (8017d04 <_strtod_l+0xb0c>)
 8017b7a:	402b      	ands	r3, r5
 8017b7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8017b7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017b80:	4b64      	ldr	r3, [pc, #400]	; (8017d14 <_strtod_l+0xb1c>)
 8017b82:	429a      	cmp	r2, r3
 8017b84:	f040 80ce 	bne.w	8017d24 <_strtod_l+0xb2c>
 8017b88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017b8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017b90:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8017b94:	ec4b ab10 	vmov	d0, sl, fp
 8017b98:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8017b9c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017ba0:	f001 fe54 	bl	801984c <__ulp>
 8017ba4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017ba8:	ec53 2b10 	vmov	r2, r3, d0
 8017bac:	f7e8 fd3c 	bl	8000628 <__aeabi_dmul>
 8017bb0:	4652      	mov	r2, sl
 8017bb2:	465b      	mov	r3, fp
 8017bb4:	f7e8 fb82 	bl	80002bc <__adddf3>
 8017bb8:	460b      	mov	r3, r1
 8017bba:	4952      	ldr	r1, [pc, #328]	; (8017d04 <_strtod_l+0xb0c>)
 8017bbc:	4a56      	ldr	r2, [pc, #344]	; (8017d18 <_strtod_l+0xb20>)
 8017bbe:	4019      	ands	r1, r3
 8017bc0:	4291      	cmp	r1, r2
 8017bc2:	4682      	mov	sl, r0
 8017bc4:	d95b      	bls.n	8017c7e <_strtod_l+0xa86>
 8017bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bc8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017bcc:	4293      	cmp	r3, r2
 8017bce:	d103      	bne.n	8017bd8 <_strtod_l+0x9e0>
 8017bd0:	9b08      	ldr	r3, [sp, #32]
 8017bd2:	3301      	adds	r3, #1
 8017bd4:	f43f ad2e 	beq.w	8017634 <_strtod_l+0x43c>
 8017bd8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8017d08 <_strtod_l+0xb10>
 8017bdc:	f04f 3aff 	mov.w	sl, #4294967295
 8017be0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017be2:	4648      	mov	r0, r9
 8017be4:	f001 fb9b 	bl	801931e <_Bfree>
 8017be8:	9905      	ldr	r1, [sp, #20]
 8017bea:	4648      	mov	r0, r9
 8017bec:	f001 fb97 	bl	801931e <_Bfree>
 8017bf0:	4641      	mov	r1, r8
 8017bf2:	4648      	mov	r0, r9
 8017bf4:	f001 fb93 	bl	801931e <_Bfree>
 8017bf8:	4621      	mov	r1, r4
 8017bfa:	4648      	mov	r0, r9
 8017bfc:	f001 fb8f 	bl	801931e <_Bfree>
 8017c00:	e619      	b.n	8017836 <_strtod_l+0x63e>
 8017c02:	f1ba 0f00 	cmp.w	sl, #0
 8017c06:	d11a      	bne.n	8017c3e <_strtod_l+0xa46>
 8017c08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017c0c:	b9eb      	cbnz	r3, 8017c4a <_strtod_l+0xa52>
 8017c0e:	2200      	movs	r2, #0
 8017c10:	4b3f      	ldr	r3, [pc, #252]	; (8017d10 <_strtod_l+0xb18>)
 8017c12:	4630      	mov	r0, r6
 8017c14:	4639      	mov	r1, r7
 8017c16:	f7e8 ff79 	bl	8000b0c <__aeabi_dcmplt>
 8017c1a:	b9c8      	cbnz	r0, 8017c50 <_strtod_l+0xa58>
 8017c1c:	4630      	mov	r0, r6
 8017c1e:	4639      	mov	r1, r7
 8017c20:	2200      	movs	r2, #0
 8017c22:	4b3e      	ldr	r3, [pc, #248]	; (8017d1c <_strtod_l+0xb24>)
 8017c24:	f7e8 fd00 	bl	8000628 <__aeabi_dmul>
 8017c28:	4606      	mov	r6, r0
 8017c2a:	460f      	mov	r7, r1
 8017c2c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017c30:	9618      	str	r6, [sp, #96]	; 0x60
 8017c32:	9319      	str	r3, [sp, #100]	; 0x64
 8017c34:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8017c38:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017c3c:	e79c      	b.n	8017b78 <_strtod_l+0x980>
 8017c3e:	f1ba 0f01 	cmp.w	sl, #1
 8017c42:	d102      	bne.n	8017c4a <_strtod_l+0xa52>
 8017c44:	2d00      	cmp	r5, #0
 8017c46:	f43f ad8e 	beq.w	8017766 <_strtod_l+0x56e>
 8017c4a:	2200      	movs	r2, #0
 8017c4c:	4b34      	ldr	r3, [pc, #208]	; (8017d20 <_strtod_l+0xb28>)
 8017c4e:	e78f      	b.n	8017b70 <_strtod_l+0x978>
 8017c50:	2600      	movs	r6, #0
 8017c52:	4f32      	ldr	r7, [pc, #200]	; (8017d1c <_strtod_l+0xb24>)
 8017c54:	e7ea      	b.n	8017c2c <_strtod_l+0xa34>
 8017c56:	4b31      	ldr	r3, [pc, #196]	; (8017d1c <_strtod_l+0xb24>)
 8017c58:	4630      	mov	r0, r6
 8017c5a:	4639      	mov	r1, r7
 8017c5c:	2200      	movs	r2, #0
 8017c5e:	f7e8 fce3 	bl	8000628 <__aeabi_dmul>
 8017c62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017c64:	4606      	mov	r6, r0
 8017c66:	460f      	mov	r7, r1
 8017c68:	b933      	cbnz	r3, 8017c78 <_strtod_l+0xa80>
 8017c6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017c6e:	9010      	str	r0, [sp, #64]	; 0x40
 8017c70:	9311      	str	r3, [sp, #68]	; 0x44
 8017c72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017c76:	e7df      	b.n	8017c38 <_strtod_l+0xa40>
 8017c78:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8017c7c:	e7f9      	b.n	8017c72 <_strtod_l+0xa7a>
 8017c7e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017c82:	9b04      	ldr	r3, [sp, #16]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d1ab      	bne.n	8017be0 <_strtod_l+0x9e8>
 8017c88:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017c8c:	0d1b      	lsrs	r3, r3, #20
 8017c8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017c90:	051b      	lsls	r3, r3, #20
 8017c92:	429a      	cmp	r2, r3
 8017c94:	465d      	mov	r5, fp
 8017c96:	d1a3      	bne.n	8017be0 <_strtod_l+0x9e8>
 8017c98:	4639      	mov	r1, r7
 8017c9a:	4630      	mov	r0, r6
 8017c9c:	f7e8 ff74 	bl	8000b88 <__aeabi_d2iz>
 8017ca0:	f7e8 fc58 	bl	8000554 <__aeabi_i2d>
 8017ca4:	460b      	mov	r3, r1
 8017ca6:	4602      	mov	r2, r0
 8017ca8:	4639      	mov	r1, r7
 8017caa:	4630      	mov	r0, r6
 8017cac:	f7e8 fb04 	bl	80002b8 <__aeabi_dsub>
 8017cb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017cb2:	4606      	mov	r6, r0
 8017cb4:	460f      	mov	r7, r1
 8017cb6:	b933      	cbnz	r3, 8017cc6 <_strtod_l+0xace>
 8017cb8:	f1ba 0f00 	cmp.w	sl, #0
 8017cbc:	d103      	bne.n	8017cc6 <_strtod_l+0xace>
 8017cbe:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8017cc2:	2d00      	cmp	r5, #0
 8017cc4:	d06d      	beq.n	8017da2 <_strtod_l+0xbaa>
 8017cc6:	a30a      	add	r3, pc, #40	; (adr r3, 8017cf0 <_strtod_l+0xaf8>)
 8017cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ccc:	4630      	mov	r0, r6
 8017cce:	4639      	mov	r1, r7
 8017cd0:	f7e8 ff1c 	bl	8000b0c <__aeabi_dcmplt>
 8017cd4:	2800      	cmp	r0, #0
 8017cd6:	f47f acb8 	bne.w	801764a <_strtod_l+0x452>
 8017cda:	a307      	add	r3, pc, #28	; (adr r3, 8017cf8 <_strtod_l+0xb00>)
 8017cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ce0:	4630      	mov	r0, r6
 8017ce2:	4639      	mov	r1, r7
 8017ce4:	f7e8 ff30 	bl	8000b48 <__aeabi_dcmpgt>
 8017ce8:	2800      	cmp	r0, #0
 8017cea:	f43f af79 	beq.w	8017be0 <_strtod_l+0x9e8>
 8017cee:	e4ac      	b.n	801764a <_strtod_l+0x452>
 8017cf0:	94a03595 	.word	0x94a03595
 8017cf4:	3fdfffff 	.word	0x3fdfffff
 8017cf8:	35afe535 	.word	0x35afe535
 8017cfc:	3fe00000 	.word	0x3fe00000
 8017d00:	000fffff 	.word	0x000fffff
 8017d04:	7ff00000 	.word	0x7ff00000
 8017d08:	7fefffff 	.word	0x7fefffff
 8017d0c:	39500000 	.word	0x39500000
 8017d10:	3ff00000 	.word	0x3ff00000
 8017d14:	7fe00000 	.word	0x7fe00000
 8017d18:	7c9fffff 	.word	0x7c9fffff
 8017d1c:	3fe00000 	.word	0x3fe00000
 8017d20:	bff00000 	.word	0xbff00000
 8017d24:	9b04      	ldr	r3, [sp, #16]
 8017d26:	b333      	cbz	r3, 8017d76 <_strtod_l+0xb7e>
 8017d28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017d2a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017d2e:	d822      	bhi.n	8017d76 <_strtod_l+0xb7e>
 8017d30:	a327      	add	r3, pc, #156	; (adr r3, 8017dd0 <_strtod_l+0xbd8>)
 8017d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d36:	4630      	mov	r0, r6
 8017d38:	4639      	mov	r1, r7
 8017d3a:	f7e8 fef1 	bl	8000b20 <__aeabi_dcmple>
 8017d3e:	b1a0      	cbz	r0, 8017d6a <_strtod_l+0xb72>
 8017d40:	4639      	mov	r1, r7
 8017d42:	4630      	mov	r0, r6
 8017d44:	f7e8 ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8017d48:	2800      	cmp	r0, #0
 8017d4a:	bf08      	it	eq
 8017d4c:	2001      	moveq	r0, #1
 8017d4e:	f7e8 fbf1 	bl	8000534 <__aeabi_ui2d>
 8017d52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017d54:	4606      	mov	r6, r0
 8017d56:	460f      	mov	r7, r1
 8017d58:	bb03      	cbnz	r3, 8017d9c <_strtod_l+0xba4>
 8017d5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017d5e:	9012      	str	r0, [sp, #72]	; 0x48
 8017d60:	9313      	str	r3, [sp, #76]	; 0x4c
 8017d62:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017d66:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017d6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017d6e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017d72:	1a9b      	subs	r3, r3, r2
 8017d74:	930b      	str	r3, [sp, #44]	; 0x2c
 8017d76:	ed9d 0b08 	vldr	d0, [sp, #32]
 8017d7a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8017d7e:	f001 fd65 	bl	801984c <__ulp>
 8017d82:	4650      	mov	r0, sl
 8017d84:	ec53 2b10 	vmov	r2, r3, d0
 8017d88:	4659      	mov	r1, fp
 8017d8a:	f7e8 fc4d 	bl	8000628 <__aeabi_dmul>
 8017d8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017d92:	f7e8 fa93 	bl	80002bc <__adddf3>
 8017d96:	4682      	mov	sl, r0
 8017d98:	468b      	mov	fp, r1
 8017d9a:	e772      	b.n	8017c82 <_strtod_l+0xa8a>
 8017d9c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017da0:	e7df      	b.n	8017d62 <_strtod_l+0xb6a>
 8017da2:	a30d      	add	r3, pc, #52	; (adr r3, 8017dd8 <_strtod_l+0xbe0>)
 8017da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017da8:	f7e8 feb0 	bl	8000b0c <__aeabi_dcmplt>
 8017dac:	e79c      	b.n	8017ce8 <_strtod_l+0xaf0>
 8017dae:	2300      	movs	r3, #0
 8017db0:	930d      	str	r3, [sp, #52]	; 0x34
 8017db2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017db4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017db6:	6013      	str	r3, [r2, #0]
 8017db8:	f7ff ba61 	b.w	801727e <_strtod_l+0x86>
 8017dbc:	2b65      	cmp	r3, #101	; 0x65
 8017dbe:	f04f 0200 	mov.w	r2, #0
 8017dc2:	f43f ab4e 	beq.w	8017462 <_strtod_l+0x26a>
 8017dc6:	2101      	movs	r1, #1
 8017dc8:	4614      	mov	r4, r2
 8017dca:	9104      	str	r1, [sp, #16]
 8017dcc:	f7ff bacb 	b.w	8017366 <_strtod_l+0x16e>
 8017dd0:	ffc00000 	.word	0xffc00000
 8017dd4:	41dfffff 	.word	0x41dfffff
 8017dd8:	94a03595 	.word	0x94a03595
 8017ddc:	3fcfffff 	.word	0x3fcfffff

08017de0 <_strtod_r>:
 8017de0:	4b05      	ldr	r3, [pc, #20]	; (8017df8 <_strtod_r+0x18>)
 8017de2:	681b      	ldr	r3, [r3, #0]
 8017de4:	b410      	push	{r4}
 8017de6:	6a1b      	ldr	r3, [r3, #32]
 8017de8:	4c04      	ldr	r4, [pc, #16]	; (8017dfc <_strtod_r+0x1c>)
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	bf08      	it	eq
 8017dee:	4623      	moveq	r3, r4
 8017df0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017df4:	f7ff ba00 	b.w	80171f8 <_strtod_l>
 8017df8:	2000000c 	.word	0x2000000c
 8017dfc:	20000070 	.word	0x20000070

08017e00 <_strtol_l.isra.0>:
 8017e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e04:	4680      	mov	r8, r0
 8017e06:	4689      	mov	r9, r1
 8017e08:	4692      	mov	sl, r2
 8017e0a:	461e      	mov	r6, r3
 8017e0c:	460f      	mov	r7, r1
 8017e0e:	463d      	mov	r5, r7
 8017e10:	9808      	ldr	r0, [sp, #32]
 8017e12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017e16:	f001 fa0d 	bl	8019234 <__locale_ctype_ptr_l>
 8017e1a:	4420      	add	r0, r4
 8017e1c:	7843      	ldrb	r3, [r0, #1]
 8017e1e:	f013 0308 	ands.w	r3, r3, #8
 8017e22:	d132      	bne.n	8017e8a <_strtol_l.isra.0+0x8a>
 8017e24:	2c2d      	cmp	r4, #45	; 0x2d
 8017e26:	d132      	bne.n	8017e8e <_strtol_l.isra.0+0x8e>
 8017e28:	787c      	ldrb	r4, [r7, #1]
 8017e2a:	1cbd      	adds	r5, r7, #2
 8017e2c:	2201      	movs	r2, #1
 8017e2e:	2e00      	cmp	r6, #0
 8017e30:	d05d      	beq.n	8017eee <_strtol_l.isra.0+0xee>
 8017e32:	2e10      	cmp	r6, #16
 8017e34:	d109      	bne.n	8017e4a <_strtol_l.isra.0+0x4a>
 8017e36:	2c30      	cmp	r4, #48	; 0x30
 8017e38:	d107      	bne.n	8017e4a <_strtol_l.isra.0+0x4a>
 8017e3a:	782b      	ldrb	r3, [r5, #0]
 8017e3c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017e40:	2b58      	cmp	r3, #88	; 0x58
 8017e42:	d14f      	bne.n	8017ee4 <_strtol_l.isra.0+0xe4>
 8017e44:	786c      	ldrb	r4, [r5, #1]
 8017e46:	2610      	movs	r6, #16
 8017e48:	3502      	adds	r5, #2
 8017e4a:	2a00      	cmp	r2, #0
 8017e4c:	bf14      	ite	ne
 8017e4e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8017e52:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8017e56:	2700      	movs	r7, #0
 8017e58:	fbb1 fcf6 	udiv	ip, r1, r6
 8017e5c:	4638      	mov	r0, r7
 8017e5e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8017e62:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017e66:	2b09      	cmp	r3, #9
 8017e68:	d817      	bhi.n	8017e9a <_strtol_l.isra.0+0x9a>
 8017e6a:	461c      	mov	r4, r3
 8017e6c:	42a6      	cmp	r6, r4
 8017e6e:	dd23      	ble.n	8017eb8 <_strtol_l.isra.0+0xb8>
 8017e70:	1c7b      	adds	r3, r7, #1
 8017e72:	d007      	beq.n	8017e84 <_strtol_l.isra.0+0x84>
 8017e74:	4584      	cmp	ip, r0
 8017e76:	d31c      	bcc.n	8017eb2 <_strtol_l.isra.0+0xb2>
 8017e78:	d101      	bne.n	8017e7e <_strtol_l.isra.0+0x7e>
 8017e7a:	45a6      	cmp	lr, r4
 8017e7c:	db19      	blt.n	8017eb2 <_strtol_l.isra.0+0xb2>
 8017e7e:	fb00 4006 	mla	r0, r0, r6, r4
 8017e82:	2701      	movs	r7, #1
 8017e84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017e88:	e7eb      	b.n	8017e62 <_strtol_l.isra.0+0x62>
 8017e8a:	462f      	mov	r7, r5
 8017e8c:	e7bf      	b.n	8017e0e <_strtol_l.isra.0+0xe>
 8017e8e:	2c2b      	cmp	r4, #43	; 0x2b
 8017e90:	bf04      	itt	eq
 8017e92:	1cbd      	addeq	r5, r7, #2
 8017e94:	787c      	ldrbeq	r4, [r7, #1]
 8017e96:	461a      	mov	r2, r3
 8017e98:	e7c9      	b.n	8017e2e <_strtol_l.isra.0+0x2e>
 8017e9a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8017e9e:	2b19      	cmp	r3, #25
 8017ea0:	d801      	bhi.n	8017ea6 <_strtol_l.isra.0+0xa6>
 8017ea2:	3c37      	subs	r4, #55	; 0x37
 8017ea4:	e7e2      	b.n	8017e6c <_strtol_l.isra.0+0x6c>
 8017ea6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017eaa:	2b19      	cmp	r3, #25
 8017eac:	d804      	bhi.n	8017eb8 <_strtol_l.isra.0+0xb8>
 8017eae:	3c57      	subs	r4, #87	; 0x57
 8017eb0:	e7dc      	b.n	8017e6c <_strtol_l.isra.0+0x6c>
 8017eb2:	f04f 37ff 	mov.w	r7, #4294967295
 8017eb6:	e7e5      	b.n	8017e84 <_strtol_l.isra.0+0x84>
 8017eb8:	1c7b      	adds	r3, r7, #1
 8017eba:	d108      	bne.n	8017ece <_strtol_l.isra.0+0xce>
 8017ebc:	2322      	movs	r3, #34	; 0x22
 8017ebe:	f8c8 3000 	str.w	r3, [r8]
 8017ec2:	4608      	mov	r0, r1
 8017ec4:	f1ba 0f00 	cmp.w	sl, #0
 8017ec8:	d107      	bne.n	8017eda <_strtol_l.isra.0+0xda>
 8017eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ece:	b102      	cbz	r2, 8017ed2 <_strtol_l.isra.0+0xd2>
 8017ed0:	4240      	negs	r0, r0
 8017ed2:	f1ba 0f00 	cmp.w	sl, #0
 8017ed6:	d0f8      	beq.n	8017eca <_strtol_l.isra.0+0xca>
 8017ed8:	b10f      	cbz	r7, 8017ede <_strtol_l.isra.0+0xde>
 8017eda:	f105 39ff 	add.w	r9, r5, #4294967295
 8017ede:	f8ca 9000 	str.w	r9, [sl]
 8017ee2:	e7f2      	b.n	8017eca <_strtol_l.isra.0+0xca>
 8017ee4:	2430      	movs	r4, #48	; 0x30
 8017ee6:	2e00      	cmp	r6, #0
 8017ee8:	d1af      	bne.n	8017e4a <_strtol_l.isra.0+0x4a>
 8017eea:	2608      	movs	r6, #8
 8017eec:	e7ad      	b.n	8017e4a <_strtol_l.isra.0+0x4a>
 8017eee:	2c30      	cmp	r4, #48	; 0x30
 8017ef0:	d0a3      	beq.n	8017e3a <_strtol_l.isra.0+0x3a>
 8017ef2:	260a      	movs	r6, #10
 8017ef4:	e7a9      	b.n	8017e4a <_strtol_l.isra.0+0x4a>
	...

08017ef8 <_strtol_r>:
 8017ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017efa:	4c06      	ldr	r4, [pc, #24]	; (8017f14 <_strtol_r+0x1c>)
 8017efc:	4d06      	ldr	r5, [pc, #24]	; (8017f18 <_strtol_r+0x20>)
 8017efe:	6824      	ldr	r4, [r4, #0]
 8017f00:	6a24      	ldr	r4, [r4, #32]
 8017f02:	2c00      	cmp	r4, #0
 8017f04:	bf08      	it	eq
 8017f06:	462c      	moveq	r4, r5
 8017f08:	9400      	str	r4, [sp, #0]
 8017f0a:	f7ff ff79 	bl	8017e00 <_strtol_l.isra.0>
 8017f0e:	b003      	add	sp, #12
 8017f10:	bd30      	pop	{r4, r5, pc}
 8017f12:	bf00      	nop
 8017f14:	2000000c 	.word	0x2000000c
 8017f18:	20000070 	.word	0x20000070

08017f1c <_vsiprintf_r>:
 8017f1c:	b500      	push	{lr}
 8017f1e:	b09b      	sub	sp, #108	; 0x6c
 8017f20:	9100      	str	r1, [sp, #0]
 8017f22:	9104      	str	r1, [sp, #16]
 8017f24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017f28:	9105      	str	r1, [sp, #20]
 8017f2a:	9102      	str	r1, [sp, #8]
 8017f2c:	4905      	ldr	r1, [pc, #20]	; (8017f44 <_vsiprintf_r+0x28>)
 8017f2e:	9103      	str	r1, [sp, #12]
 8017f30:	4669      	mov	r1, sp
 8017f32:	f001 fe27 	bl	8019b84 <_svfiprintf_r>
 8017f36:	9b00      	ldr	r3, [sp, #0]
 8017f38:	2200      	movs	r2, #0
 8017f3a:	701a      	strb	r2, [r3, #0]
 8017f3c:	b01b      	add	sp, #108	; 0x6c
 8017f3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8017f42:	bf00      	nop
 8017f44:	ffff0208 	.word	0xffff0208

08017f48 <vsiprintf>:
 8017f48:	4613      	mov	r3, r2
 8017f4a:	460a      	mov	r2, r1
 8017f4c:	4601      	mov	r1, r0
 8017f4e:	4802      	ldr	r0, [pc, #8]	; (8017f58 <vsiprintf+0x10>)
 8017f50:	6800      	ldr	r0, [r0, #0]
 8017f52:	f7ff bfe3 	b.w	8017f1c <_vsiprintf_r>
 8017f56:	bf00      	nop
 8017f58:	2000000c 	.word	0x2000000c

08017f5c <quorem>:
 8017f5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f60:	6903      	ldr	r3, [r0, #16]
 8017f62:	690c      	ldr	r4, [r1, #16]
 8017f64:	42a3      	cmp	r3, r4
 8017f66:	4680      	mov	r8, r0
 8017f68:	f2c0 8082 	blt.w	8018070 <quorem+0x114>
 8017f6c:	3c01      	subs	r4, #1
 8017f6e:	f101 0714 	add.w	r7, r1, #20
 8017f72:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8017f76:	f100 0614 	add.w	r6, r0, #20
 8017f7a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8017f7e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8017f82:	eb06 030c 	add.w	r3, r6, ip
 8017f86:	3501      	adds	r5, #1
 8017f88:	eb07 090c 	add.w	r9, r7, ip
 8017f8c:	9301      	str	r3, [sp, #4]
 8017f8e:	fbb0 f5f5 	udiv	r5, r0, r5
 8017f92:	b395      	cbz	r5, 8017ffa <quorem+0x9e>
 8017f94:	f04f 0a00 	mov.w	sl, #0
 8017f98:	4638      	mov	r0, r7
 8017f9a:	46b6      	mov	lr, r6
 8017f9c:	46d3      	mov	fp, sl
 8017f9e:	f850 2b04 	ldr.w	r2, [r0], #4
 8017fa2:	b293      	uxth	r3, r2
 8017fa4:	fb05 a303 	mla	r3, r5, r3, sl
 8017fa8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017fac:	b29b      	uxth	r3, r3
 8017fae:	ebab 0303 	sub.w	r3, fp, r3
 8017fb2:	0c12      	lsrs	r2, r2, #16
 8017fb4:	f8de b000 	ldr.w	fp, [lr]
 8017fb8:	fb05 a202 	mla	r2, r5, r2, sl
 8017fbc:	fa13 f38b 	uxtah	r3, r3, fp
 8017fc0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017fc4:	fa1f fb82 	uxth.w	fp, r2
 8017fc8:	f8de 2000 	ldr.w	r2, [lr]
 8017fcc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017fd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017fd4:	b29b      	uxth	r3, r3
 8017fd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017fda:	4581      	cmp	r9, r0
 8017fdc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017fe0:	f84e 3b04 	str.w	r3, [lr], #4
 8017fe4:	d2db      	bcs.n	8017f9e <quorem+0x42>
 8017fe6:	f856 300c 	ldr.w	r3, [r6, ip]
 8017fea:	b933      	cbnz	r3, 8017ffa <quorem+0x9e>
 8017fec:	9b01      	ldr	r3, [sp, #4]
 8017fee:	3b04      	subs	r3, #4
 8017ff0:	429e      	cmp	r6, r3
 8017ff2:	461a      	mov	r2, r3
 8017ff4:	d330      	bcc.n	8018058 <quorem+0xfc>
 8017ff6:	f8c8 4010 	str.w	r4, [r8, #16]
 8017ffa:	4640      	mov	r0, r8
 8017ffc:	f001 fbae 	bl	801975c <__mcmp>
 8018000:	2800      	cmp	r0, #0
 8018002:	db25      	blt.n	8018050 <quorem+0xf4>
 8018004:	3501      	adds	r5, #1
 8018006:	4630      	mov	r0, r6
 8018008:	f04f 0c00 	mov.w	ip, #0
 801800c:	f857 2b04 	ldr.w	r2, [r7], #4
 8018010:	f8d0 e000 	ldr.w	lr, [r0]
 8018014:	b293      	uxth	r3, r2
 8018016:	ebac 0303 	sub.w	r3, ip, r3
 801801a:	0c12      	lsrs	r2, r2, #16
 801801c:	fa13 f38e 	uxtah	r3, r3, lr
 8018020:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8018024:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018028:	b29b      	uxth	r3, r3
 801802a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801802e:	45b9      	cmp	r9, r7
 8018030:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018034:	f840 3b04 	str.w	r3, [r0], #4
 8018038:	d2e8      	bcs.n	801800c <quorem+0xb0>
 801803a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801803e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8018042:	b92a      	cbnz	r2, 8018050 <quorem+0xf4>
 8018044:	3b04      	subs	r3, #4
 8018046:	429e      	cmp	r6, r3
 8018048:	461a      	mov	r2, r3
 801804a:	d30b      	bcc.n	8018064 <quorem+0x108>
 801804c:	f8c8 4010 	str.w	r4, [r8, #16]
 8018050:	4628      	mov	r0, r5
 8018052:	b003      	add	sp, #12
 8018054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018058:	6812      	ldr	r2, [r2, #0]
 801805a:	3b04      	subs	r3, #4
 801805c:	2a00      	cmp	r2, #0
 801805e:	d1ca      	bne.n	8017ff6 <quorem+0x9a>
 8018060:	3c01      	subs	r4, #1
 8018062:	e7c5      	b.n	8017ff0 <quorem+0x94>
 8018064:	6812      	ldr	r2, [r2, #0]
 8018066:	3b04      	subs	r3, #4
 8018068:	2a00      	cmp	r2, #0
 801806a:	d1ef      	bne.n	801804c <quorem+0xf0>
 801806c:	3c01      	subs	r4, #1
 801806e:	e7ea      	b.n	8018046 <quorem+0xea>
 8018070:	2000      	movs	r0, #0
 8018072:	e7ee      	b.n	8018052 <quorem+0xf6>
 8018074:	0000      	movs	r0, r0
	...

08018078 <_dtoa_r>:
 8018078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801807c:	ec57 6b10 	vmov	r6, r7, d0
 8018080:	b097      	sub	sp, #92	; 0x5c
 8018082:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018084:	9106      	str	r1, [sp, #24]
 8018086:	4604      	mov	r4, r0
 8018088:	920b      	str	r2, [sp, #44]	; 0x2c
 801808a:	9312      	str	r3, [sp, #72]	; 0x48
 801808c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8018090:	e9cd 6700 	strd	r6, r7, [sp]
 8018094:	b93d      	cbnz	r5, 80180a6 <_dtoa_r+0x2e>
 8018096:	2010      	movs	r0, #16
 8018098:	f7fe f8ba 	bl	8016210 <malloc>
 801809c:	6260      	str	r0, [r4, #36]	; 0x24
 801809e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80180a2:	6005      	str	r5, [r0, #0]
 80180a4:	60c5      	str	r5, [r0, #12]
 80180a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80180a8:	6819      	ldr	r1, [r3, #0]
 80180aa:	b151      	cbz	r1, 80180c2 <_dtoa_r+0x4a>
 80180ac:	685a      	ldr	r2, [r3, #4]
 80180ae:	604a      	str	r2, [r1, #4]
 80180b0:	2301      	movs	r3, #1
 80180b2:	4093      	lsls	r3, r2
 80180b4:	608b      	str	r3, [r1, #8]
 80180b6:	4620      	mov	r0, r4
 80180b8:	f001 f931 	bl	801931e <_Bfree>
 80180bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80180be:	2200      	movs	r2, #0
 80180c0:	601a      	str	r2, [r3, #0]
 80180c2:	1e3b      	subs	r3, r7, #0
 80180c4:	bfbb      	ittet	lt
 80180c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80180ca:	9301      	strlt	r3, [sp, #4]
 80180cc:	2300      	movge	r3, #0
 80180ce:	2201      	movlt	r2, #1
 80180d0:	bfac      	ite	ge
 80180d2:	f8c8 3000 	strge.w	r3, [r8]
 80180d6:	f8c8 2000 	strlt.w	r2, [r8]
 80180da:	4baf      	ldr	r3, [pc, #700]	; (8018398 <_dtoa_r+0x320>)
 80180dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80180e0:	ea33 0308 	bics.w	r3, r3, r8
 80180e4:	d114      	bne.n	8018110 <_dtoa_r+0x98>
 80180e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80180e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80180ec:	6013      	str	r3, [r2, #0]
 80180ee:	9b00      	ldr	r3, [sp, #0]
 80180f0:	b923      	cbnz	r3, 80180fc <_dtoa_r+0x84>
 80180f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80180f6:	2800      	cmp	r0, #0
 80180f8:	f000 8542 	beq.w	8018b80 <_dtoa_r+0xb08>
 80180fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80180fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80183ac <_dtoa_r+0x334>
 8018102:	2b00      	cmp	r3, #0
 8018104:	f000 8544 	beq.w	8018b90 <_dtoa_r+0xb18>
 8018108:	f10b 0303 	add.w	r3, fp, #3
 801810c:	f000 bd3e 	b.w	8018b8c <_dtoa_r+0xb14>
 8018110:	e9dd 6700 	ldrd	r6, r7, [sp]
 8018114:	2200      	movs	r2, #0
 8018116:	2300      	movs	r3, #0
 8018118:	4630      	mov	r0, r6
 801811a:	4639      	mov	r1, r7
 801811c:	f7e8 fcec 	bl	8000af8 <__aeabi_dcmpeq>
 8018120:	4681      	mov	r9, r0
 8018122:	b168      	cbz	r0, 8018140 <_dtoa_r+0xc8>
 8018124:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018126:	2301      	movs	r3, #1
 8018128:	6013      	str	r3, [r2, #0]
 801812a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801812c:	2b00      	cmp	r3, #0
 801812e:	f000 8524 	beq.w	8018b7a <_dtoa_r+0xb02>
 8018132:	4b9a      	ldr	r3, [pc, #616]	; (801839c <_dtoa_r+0x324>)
 8018134:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018136:	f103 3bff 	add.w	fp, r3, #4294967295
 801813a:	6013      	str	r3, [r2, #0]
 801813c:	f000 bd28 	b.w	8018b90 <_dtoa_r+0xb18>
 8018140:	aa14      	add	r2, sp, #80	; 0x50
 8018142:	a915      	add	r1, sp, #84	; 0x54
 8018144:	ec47 6b10 	vmov	d0, r6, r7
 8018148:	4620      	mov	r0, r4
 801814a:	f001 fbf5 	bl	8019938 <__d2b>
 801814e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8018152:	9004      	str	r0, [sp, #16]
 8018154:	2d00      	cmp	r5, #0
 8018156:	d07c      	beq.n	8018252 <_dtoa_r+0x1da>
 8018158:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801815c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8018160:	46b2      	mov	sl, r6
 8018162:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8018166:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801816a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801816e:	2200      	movs	r2, #0
 8018170:	4b8b      	ldr	r3, [pc, #556]	; (80183a0 <_dtoa_r+0x328>)
 8018172:	4650      	mov	r0, sl
 8018174:	4659      	mov	r1, fp
 8018176:	f7e8 f89f 	bl	80002b8 <__aeabi_dsub>
 801817a:	a381      	add	r3, pc, #516	; (adr r3, 8018380 <_dtoa_r+0x308>)
 801817c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018180:	f7e8 fa52 	bl	8000628 <__aeabi_dmul>
 8018184:	a380      	add	r3, pc, #512	; (adr r3, 8018388 <_dtoa_r+0x310>)
 8018186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801818a:	f7e8 f897 	bl	80002bc <__adddf3>
 801818e:	4606      	mov	r6, r0
 8018190:	4628      	mov	r0, r5
 8018192:	460f      	mov	r7, r1
 8018194:	f7e8 f9de 	bl	8000554 <__aeabi_i2d>
 8018198:	a37d      	add	r3, pc, #500	; (adr r3, 8018390 <_dtoa_r+0x318>)
 801819a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801819e:	f7e8 fa43 	bl	8000628 <__aeabi_dmul>
 80181a2:	4602      	mov	r2, r0
 80181a4:	460b      	mov	r3, r1
 80181a6:	4630      	mov	r0, r6
 80181a8:	4639      	mov	r1, r7
 80181aa:	f7e8 f887 	bl	80002bc <__adddf3>
 80181ae:	4606      	mov	r6, r0
 80181b0:	460f      	mov	r7, r1
 80181b2:	f7e8 fce9 	bl	8000b88 <__aeabi_d2iz>
 80181b6:	2200      	movs	r2, #0
 80181b8:	4682      	mov	sl, r0
 80181ba:	2300      	movs	r3, #0
 80181bc:	4630      	mov	r0, r6
 80181be:	4639      	mov	r1, r7
 80181c0:	f7e8 fca4 	bl	8000b0c <__aeabi_dcmplt>
 80181c4:	b148      	cbz	r0, 80181da <_dtoa_r+0x162>
 80181c6:	4650      	mov	r0, sl
 80181c8:	f7e8 f9c4 	bl	8000554 <__aeabi_i2d>
 80181cc:	4632      	mov	r2, r6
 80181ce:	463b      	mov	r3, r7
 80181d0:	f7e8 fc92 	bl	8000af8 <__aeabi_dcmpeq>
 80181d4:	b908      	cbnz	r0, 80181da <_dtoa_r+0x162>
 80181d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80181da:	f1ba 0f16 	cmp.w	sl, #22
 80181de:	d859      	bhi.n	8018294 <_dtoa_r+0x21c>
 80181e0:	4970      	ldr	r1, [pc, #448]	; (80183a4 <_dtoa_r+0x32c>)
 80181e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80181e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80181ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80181ee:	f7e8 fcab 	bl	8000b48 <__aeabi_dcmpgt>
 80181f2:	2800      	cmp	r0, #0
 80181f4:	d050      	beq.n	8018298 <_dtoa_r+0x220>
 80181f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80181fa:	2300      	movs	r3, #0
 80181fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80181fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018200:	1b5d      	subs	r5, r3, r5
 8018202:	f1b5 0801 	subs.w	r8, r5, #1
 8018206:	bf49      	itett	mi
 8018208:	f1c5 0301 	rsbmi	r3, r5, #1
 801820c:	2300      	movpl	r3, #0
 801820e:	9305      	strmi	r3, [sp, #20]
 8018210:	f04f 0800 	movmi.w	r8, #0
 8018214:	bf58      	it	pl
 8018216:	9305      	strpl	r3, [sp, #20]
 8018218:	f1ba 0f00 	cmp.w	sl, #0
 801821c:	db3e      	blt.n	801829c <_dtoa_r+0x224>
 801821e:	2300      	movs	r3, #0
 8018220:	44d0      	add	r8, sl
 8018222:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8018226:	9307      	str	r3, [sp, #28]
 8018228:	9b06      	ldr	r3, [sp, #24]
 801822a:	2b09      	cmp	r3, #9
 801822c:	f200 8090 	bhi.w	8018350 <_dtoa_r+0x2d8>
 8018230:	2b05      	cmp	r3, #5
 8018232:	bfc4      	itt	gt
 8018234:	3b04      	subgt	r3, #4
 8018236:	9306      	strgt	r3, [sp, #24]
 8018238:	9b06      	ldr	r3, [sp, #24]
 801823a:	f1a3 0302 	sub.w	r3, r3, #2
 801823e:	bfcc      	ite	gt
 8018240:	2500      	movgt	r5, #0
 8018242:	2501      	movle	r5, #1
 8018244:	2b03      	cmp	r3, #3
 8018246:	f200 808f 	bhi.w	8018368 <_dtoa_r+0x2f0>
 801824a:	e8df f003 	tbb	[pc, r3]
 801824e:	7f7d      	.short	0x7f7d
 8018250:	7131      	.short	0x7131
 8018252:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8018256:	441d      	add	r5, r3
 8018258:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801825c:	2820      	cmp	r0, #32
 801825e:	dd13      	ble.n	8018288 <_dtoa_r+0x210>
 8018260:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8018264:	9b00      	ldr	r3, [sp, #0]
 8018266:	fa08 f800 	lsl.w	r8, r8, r0
 801826a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801826e:	fa23 f000 	lsr.w	r0, r3, r0
 8018272:	ea48 0000 	orr.w	r0, r8, r0
 8018276:	f7e8 f95d 	bl	8000534 <__aeabi_ui2d>
 801827a:	2301      	movs	r3, #1
 801827c:	4682      	mov	sl, r0
 801827e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8018282:	3d01      	subs	r5, #1
 8018284:	9313      	str	r3, [sp, #76]	; 0x4c
 8018286:	e772      	b.n	801816e <_dtoa_r+0xf6>
 8018288:	9b00      	ldr	r3, [sp, #0]
 801828a:	f1c0 0020 	rsb	r0, r0, #32
 801828e:	fa03 f000 	lsl.w	r0, r3, r0
 8018292:	e7f0      	b.n	8018276 <_dtoa_r+0x1fe>
 8018294:	2301      	movs	r3, #1
 8018296:	e7b1      	b.n	80181fc <_dtoa_r+0x184>
 8018298:	900f      	str	r0, [sp, #60]	; 0x3c
 801829a:	e7b0      	b.n	80181fe <_dtoa_r+0x186>
 801829c:	9b05      	ldr	r3, [sp, #20]
 801829e:	eba3 030a 	sub.w	r3, r3, sl
 80182a2:	9305      	str	r3, [sp, #20]
 80182a4:	f1ca 0300 	rsb	r3, sl, #0
 80182a8:	9307      	str	r3, [sp, #28]
 80182aa:	2300      	movs	r3, #0
 80182ac:	930e      	str	r3, [sp, #56]	; 0x38
 80182ae:	e7bb      	b.n	8018228 <_dtoa_r+0x1b0>
 80182b0:	2301      	movs	r3, #1
 80182b2:	930a      	str	r3, [sp, #40]	; 0x28
 80182b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	dd59      	ble.n	801836e <_dtoa_r+0x2f6>
 80182ba:	9302      	str	r3, [sp, #8]
 80182bc:	4699      	mov	r9, r3
 80182be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80182c0:	2200      	movs	r2, #0
 80182c2:	6072      	str	r2, [r6, #4]
 80182c4:	2204      	movs	r2, #4
 80182c6:	f102 0014 	add.w	r0, r2, #20
 80182ca:	4298      	cmp	r0, r3
 80182cc:	6871      	ldr	r1, [r6, #4]
 80182ce:	d953      	bls.n	8018378 <_dtoa_r+0x300>
 80182d0:	4620      	mov	r0, r4
 80182d2:	f000 fff0 	bl	80192b6 <_Balloc>
 80182d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80182d8:	6030      	str	r0, [r6, #0]
 80182da:	f1b9 0f0e 	cmp.w	r9, #14
 80182de:	f8d3 b000 	ldr.w	fp, [r3]
 80182e2:	f200 80e6 	bhi.w	80184b2 <_dtoa_r+0x43a>
 80182e6:	2d00      	cmp	r5, #0
 80182e8:	f000 80e3 	beq.w	80184b2 <_dtoa_r+0x43a>
 80182ec:	ed9d 7b00 	vldr	d7, [sp]
 80182f0:	f1ba 0f00 	cmp.w	sl, #0
 80182f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80182f8:	dd74      	ble.n	80183e4 <_dtoa_r+0x36c>
 80182fa:	4a2a      	ldr	r2, [pc, #168]	; (80183a4 <_dtoa_r+0x32c>)
 80182fc:	f00a 030f 	and.w	r3, sl, #15
 8018300:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018304:	ed93 7b00 	vldr	d7, [r3]
 8018308:	ea4f 162a 	mov.w	r6, sl, asr #4
 801830c:	06f0      	lsls	r0, r6, #27
 801830e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8018312:	d565      	bpl.n	80183e0 <_dtoa_r+0x368>
 8018314:	4b24      	ldr	r3, [pc, #144]	; (80183a8 <_dtoa_r+0x330>)
 8018316:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801831a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801831e:	f7e8 faad 	bl	800087c <__aeabi_ddiv>
 8018322:	e9cd 0100 	strd	r0, r1, [sp]
 8018326:	f006 060f 	and.w	r6, r6, #15
 801832a:	2503      	movs	r5, #3
 801832c:	4f1e      	ldr	r7, [pc, #120]	; (80183a8 <_dtoa_r+0x330>)
 801832e:	e04c      	b.n	80183ca <_dtoa_r+0x352>
 8018330:	2301      	movs	r3, #1
 8018332:	930a      	str	r3, [sp, #40]	; 0x28
 8018334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018336:	4453      	add	r3, sl
 8018338:	f103 0901 	add.w	r9, r3, #1
 801833c:	9302      	str	r3, [sp, #8]
 801833e:	464b      	mov	r3, r9
 8018340:	2b01      	cmp	r3, #1
 8018342:	bfb8      	it	lt
 8018344:	2301      	movlt	r3, #1
 8018346:	e7ba      	b.n	80182be <_dtoa_r+0x246>
 8018348:	2300      	movs	r3, #0
 801834a:	e7b2      	b.n	80182b2 <_dtoa_r+0x23a>
 801834c:	2300      	movs	r3, #0
 801834e:	e7f0      	b.n	8018332 <_dtoa_r+0x2ba>
 8018350:	2501      	movs	r5, #1
 8018352:	2300      	movs	r3, #0
 8018354:	9306      	str	r3, [sp, #24]
 8018356:	950a      	str	r5, [sp, #40]	; 0x28
 8018358:	f04f 33ff 	mov.w	r3, #4294967295
 801835c:	9302      	str	r3, [sp, #8]
 801835e:	4699      	mov	r9, r3
 8018360:	2200      	movs	r2, #0
 8018362:	2312      	movs	r3, #18
 8018364:	920b      	str	r2, [sp, #44]	; 0x2c
 8018366:	e7aa      	b.n	80182be <_dtoa_r+0x246>
 8018368:	2301      	movs	r3, #1
 801836a:	930a      	str	r3, [sp, #40]	; 0x28
 801836c:	e7f4      	b.n	8018358 <_dtoa_r+0x2e0>
 801836e:	2301      	movs	r3, #1
 8018370:	9302      	str	r3, [sp, #8]
 8018372:	4699      	mov	r9, r3
 8018374:	461a      	mov	r2, r3
 8018376:	e7f5      	b.n	8018364 <_dtoa_r+0x2ec>
 8018378:	3101      	adds	r1, #1
 801837a:	6071      	str	r1, [r6, #4]
 801837c:	0052      	lsls	r2, r2, #1
 801837e:	e7a2      	b.n	80182c6 <_dtoa_r+0x24e>
 8018380:	636f4361 	.word	0x636f4361
 8018384:	3fd287a7 	.word	0x3fd287a7
 8018388:	8b60c8b3 	.word	0x8b60c8b3
 801838c:	3fc68a28 	.word	0x3fc68a28
 8018390:	509f79fb 	.word	0x509f79fb
 8018394:	3fd34413 	.word	0x3fd34413
 8018398:	7ff00000 	.word	0x7ff00000
 801839c:	0801ae3c 	.word	0x0801ae3c
 80183a0:	3ff80000 	.word	0x3ff80000
 80183a4:	0801ad40 	.word	0x0801ad40
 80183a8:	0801ad18 	.word	0x0801ad18
 80183ac:	0801ad09 	.word	0x0801ad09
 80183b0:	07f1      	lsls	r1, r6, #31
 80183b2:	d508      	bpl.n	80183c6 <_dtoa_r+0x34e>
 80183b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80183b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80183bc:	f7e8 f934 	bl	8000628 <__aeabi_dmul>
 80183c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80183c4:	3501      	adds	r5, #1
 80183c6:	1076      	asrs	r6, r6, #1
 80183c8:	3708      	adds	r7, #8
 80183ca:	2e00      	cmp	r6, #0
 80183cc:	d1f0      	bne.n	80183b0 <_dtoa_r+0x338>
 80183ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80183d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80183d6:	f7e8 fa51 	bl	800087c <__aeabi_ddiv>
 80183da:	e9cd 0100 	strd	r0, r1, [sp]
 80183de:	e01a      	b.n	8018416 <_dtoa_r+0x39e>
 80183e0:	2502      	movs	r5, #2
 80183e2:	e7a3      	b.n	801832c <_dtoa_r+0x2b4>
 80183e4:	f000 80a0 	beq.w	8018528 <_dtoa_r+0x4b0>
 80183e8:	f1ca 0600 	rsb	r6, sl, #0
 80183ec:	4b9f      	ldr	r3, [pc, #636]	; (801866c <_dtoa_r+0x5f4>)
 80183ee:	4fa0      	ldr	r7, [pc, #640]	; (8018670 <_dtoa_r+0x5f8>)
 80183f0:	f006 020f 	and.w	r2, r6, #15
 80183f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80183f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018400:	f7e8 f912 	bl	8000628 <__aeabi_dmul>
 8018404:	e9cd 0100 	strd	r0, r1, [sp]
 8018408:	1136      	asrs	r6, r6, #4
 801840a:	2300      	movs	r3, #0
 801840c:	2502      	movs	r5, #2
 801840e:	2e00      	cmp	r6, #0
 8018410:	d17f      	bne.n	8018512 <_dtoa_r+0x49a>
 8018412:	2b00      	cmp	r3, #0
 8018414:	d1e1      	bne.n	80183da <_dtoa_r+0x362>
 8018416:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018418:	2b00      	cmp	r3, #0
 801841a:	f000 8087 	beq.w	801852c <_dtoa_r+0x4b4>
 801841e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8018422:	2200      	movs	r2, #0
 8018424:	4b93      	ldr	r3, [pc, #588]	; (8018674 <_dtoa_r+0x5fc>)
 8018426:	4630      	mov	r0, r6
 8018428:	4639      	mov	r1, r7
 801842a:	f7e8 fb6f 	bl	8000b0c <__aeabi_dcmplt>
 801842e:	2800      	cmp	r0, #0
 8018430:	d07c      	beq.n	801852c <_dtoa_r+0x4b4>
 8018432:	f1b9 0f00 	cmp.w	r9, #0
 8018436:	d079      	beq.n	801852c <_dtoa_r+0x4b4>
 8018438:	9b02      	ldr	r3, [sp, #8]
 801843a:	2b00      	cmp	r3, #0
 801843c:	dd35      	ble.n	80184aa <_dtoa_r+0x432>
 801843e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8018442:	9308      	str	r3, [sp, #32]
 8018444:	4639      	mov	r1, r7
 8018446:	2200      	movs	r2, #0
 8018448:	4b8b      	ldr	r3, [pc, #556]	; (8018678 <_dtoa_r+0x600>)
 801844a:	4630      	mov	r0, r6
 801844c:	f7e8 f8ec 	bl	8000628 <__aeabi_dmul>
 8018450:	e9cd 0100 	strd	r0, r1, [sp]
 8018454:	9f02      	ldr	r7, [sp, #8]
 8018456:	3501      	adds	r5, #1
 8018458:	4628      	mov	r0, r5
 801845a:	f7e8 f87b 	bl	8000554 <__aeabi_i2d>
 801845e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018462:	f7e8 f8e1 	bl	8000628 <__aeabi_dmul>
 8018466:	2200      	movs	r2, #0
 8018468:	4b84      	ldr	r3, [pc, #528]	; (801867c <_dtoa_r+0x604>)
 801846a:	f7e7 ff27 	bl	80002bc <__adddf3>
 801846e:	4605      	mov	r5, r0
 8018470:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8018474:	2f00      	cmp	r7, #0
 8018476:	d15d      	bne.n	8018534 <_dtoa_r+0x4bc>
 8018478:	2200      	movs	r2, #0
 801847a:	4b81      	ldr	r3, [pc, #516]	; (8018680 <_dtoa_r+0x608>)
 801847c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018480:	f7e7 ff1a 	bl	80002b8 <__aeabi_dsub>
 8018484:	462a      	mov	r2, r5
 8018486:	4633      	mov	r3, r6
 8018488:	e9cd 0100 	strd	r0, r1, [sp]
 801848c:	f7e8 fb5c 	bl	8000b48 <__aeabi_dcmpgt>
 8018490:	2800      	cmp	r0, #0
 8018492:	f040 8288 	bne.w	80189a6 <_dtoa_r+0x92e>
 8018496:	462a      	mov	r2, r5
 8018498:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801849c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80184a0:	f7e8 fb34 	bl	8000b0c <__aeabi_dcmplt>
 80184a4:	2800      	cmp	r0, #0
 80184a6:	f040 827c 	bne.w	80189a2 <_dtoa_r+0x92a>
 80184aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80184ae:	e9cd 2300 	strd	r2, r3, [sp]
 80184b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	f2c0 8150 	blt.w	801875a <_dtoa_r+0x6e2>
 80184ba:	f1ba 0f0e 	cmp.w	sl, #14
 80184be:	f300 814c 	bgt.w	801875a <_dtoa_r+0x6e2>
 80184c2:	4b6a      	ldr	r3, [pc, #424]	; (801866c <_dtoa_r+0x5f4>)
 80184c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80184c8:	ed93 7b00 	vldr	d7, [r3]
 80184cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80184d4:	f280 80d8 	bge.w	8018688 <_dtoa_r+0x610>
 80184d8:	f1b9 0f00 	cmp.w	r9, #0
 80184dc:	f300 80d4 	bgt.w	8018688 <_dtoa_r+0x610>
 80184e0:	f040 825e 	bne.w	80189a0 <_dtoa_r+0x928>
 80184e4:	2200      	movs	r2, #0
 80184e6:	4b66      	ldr	r3, [pc, #408]	; (8018680 <_dtoa_r+0x608>)
 80184e8:	ec51 0b17 	vmov	r0, r1, d7
 80184ec:	f7e8 f89c 	bl	8000628 <__aeabi_dmul>
 80184f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80184f4:	f7e8 fb1e 	bl	8000b34 <__aeabi_dcmpge>
 80184f8:	464f      	mov	r7, r9
 80184fa:	464e      	mov	r6, r9
 80184fc:	2800      	cmp	r0, #0
 80184fe:	f040 8234 	bne.w	801896a <_dtoa_r+0x8f2>
 8018502:	2331      	movs	r3, #49	; 0x31
 8018504:	f10b 0501 	add.w	r5, fp, #1
 8018508:	f88b 3000 	strb.w	r3, [fp]
 801850c:	f10a 0a01 	add.w	sl, sl, #1
 8018510:	e22f      	b.n	8018972 <_dtoa_r+0x8fa>
 8018512:	07f2      	lsls	r2, r6, #31
 8018514:	d505      	bpl.n	8018522 <_dtoa_r+0x4aa>
 8018516:	e9d7 2300 	ldrd	r2, r3, [r7]
 801851a:	f7e8 f885 	bl	8000628 <__aeabi_dmul>
 801851e:	3501      	adds	r5, #1
 8018520:	2301      	movs	r3, #1
 8018522:	1076      	asrs	r6, r6, #1
 8018524:	3708      	adds	r7, #8
 8018526:	e772      	b.n	801840e <_dtoa_r+0x396>
 8018528:	2502      	movs	r5, #2
 801852a:	e774      	b.n	8018416 <_dtoa_r+0x39e>
 801852c:	f8cd a020 	str.w	sl, [sp, #32]
 8018530:	464f      	mov	r7, r9
 8018532:	e791      	b.n	8018458 <_dtoa_r+0x3e0>
 8018534:	4b4d      	ldr	r3, [pc, #308]	; (801866c <_dtoa_r+0x5f4>)
 8018536:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801853a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801853e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018540:	2b00      	cmp	r3, #0
 8018542:	d047      	beq.n	80185d4 <_dtoa_r+0x55c>
 8018544:	4602      	mov	r2, r0
 8018546:	460b      	mov	r3, r1
 8018548:	2000      	movs	r0, #0
 801854a:	494e      	ldr	r1, [pc, #312]	; (8018684 <_dtoa_r+0x60c>)
 801854c:	f7e8 f996 	bl	800087c <__aeabi_ddiv>
 8018550:	462a      	mov	r2, r5
 8018552:	4633      	mov	r3, r6
 8018554:	f7e7 feb0 	bl	80002b8 <__aeabi_dsub>
 8018558:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801855c:	465d      	mov	r5, fp
 801855e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018562:	f7e8 fb11 	bl	8000b88 <__aeabi_d2iz>
 8018566:	4606      	mov	r6, r0
 8018568:	f7e7 fff4 	bl	8000554 <__aeabi_i2d>
 801856c:	4602      	mov	r2, r0
 801856e:	460b      	mov	r3, r1
 8018570:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018574:	f7e7 fea0 	bl	80002b8 <__aeabi_dsub>
 8018578:	3630      	adds	r6, #48	; 0x30
 801857a:	f805 6b01 	strb.w	r6, [r5], #1
 801857e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8018582:	e9cd 0100 	strd	r0, r1, [sp]
 8018586:	f7e8 fac1 	bl	8000b0c <__aeabi_dcmplt>
 801858a:	2800      	cmp	r0, #0
 801858c:	d163      	bne.n	8018656 <_dtoa_r+0x5de>
 801858e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018592:	2000      	movs	r0, #0
 8018594:	4937      	ldr	r1, [pc, #220]	; (8018674 <_dtoa_r+0x5fc>)
 8018596:	f7e7 fe8f 	bl	80002b8 <__aeabi_dsub>
 801859a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801859e:	f7e8 fab5 	bl	8000b0c <__aeabi_dcmplt>
 80185a2:	2800      	cmp	r0, #0
 80185a4:	f040 80b7 	bne.w	8018716 <_dtoa_r+0x69e>
 80185a8:	eba5 030b 	sub.w	r3, r5, fp
 80185ac:	429f      	cmp	r7, r3
 80185ae:	f77f af7c 	ble.w	80184aa <_dtoa_r+0x432>
 80185b2:	2200      	movs	r2, #0
 80185b4:	4b30      	ldr	r3, [pc, #192]	; (8018678 <_dtoa_r+0x600>)
 80185b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80185ba:	f7e8 f835 	bl	8000628 <__aeabi_dmul>
 80185be:	2200      	movs	r2, #0
 80185c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80185c4:	4b2c      	ldr	r3, [pc, #176]	; (8018678 <_dtoa_r+0x600>)
 80185c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80185ca:	f7e8 f82d 	bl	8000628 <__aeabi_dmul>
 80185ce:	e9cd 0100 	strd	r0, r1, [sp]
 80185d2:	e7c4      	b.n	801855e <_dtoa_r+0x4e6>
 80185d4:	462a      	mov	r2, r5
 80185d6:	4633      	mov	r3, r6
 80185d8:	f7e8 f826 	bl	8000628 <__aeabi_dmul>
 80185dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80185e0:	eb0b 0507 	add.w	r5, fp, r7
 80185e4:	465e      	mov	r6, fp
 80185e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80185ea:	f7e8 facd 	bl	8000b88 <__aeabi_d2iz>
 80185ee:	4607      	mov	r7, r0
 80185f0:	f7e7 ffb0 	bl	8000554 <__aeabi_i2d>
 80185f4:	3730      	adds	r7, #48	; 0x30
 80185f6:	4602      	mov	r2, r0
 80185f8:	460b      	mov	r3, r1
 80185fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80185fe:	f7e7 fe5b 	bl	80002b8 <__aeabi_dsub>
 8018602:	f806 7b01 	strb.w	r7, [r6], #1
 8018606:	42ae      	cmp	r6, r5
 8018608:	e9cd 0100 	strd	r0, r1, [sp]
 801860c:	f04f 0200 	mov.w	r2, #0
 8018610:	d126      	bne.n	8018660 <_dtoa_r+0x5e8>
 8018612:	4b1c      	ldr	r3, [pc, #112]	; (8018684 <_dtoa_r+0x60c>)
 8018614:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018618:	f7e7 fe50 	bl	80002bc <__adddf3>
 801861c:	4602      	mov	r2, r0
 801861e:	460b      	mov	r3, r1
 8018620:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018624:	f7e8 fa90 	bl	8000b48 <__aeabi_dcmpgt>
 8018628:	2800      	cmp	r0, #0
 801862a:	d174      	bne.n	8018716 <_dtoa_r+0x69e>
 801862c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8018630:	2000      	movs	r0, #0
 8018632:	4914      	ldr	r1, [pc, #80]	; (8018684 <_dtoa_r+0x60c>)
 8018634:	f7e7 fe40 	bl	80002b8 <__aeabi_dsub>
 8018638:	4602      	mov	r2, r0
 801863a:	460b      	mov	r3, r1
 801863c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018640:	f7e8 fa64 	bl	8000b0c <__aeabi_dcmplt>
 8018644:	2800      	cmp	r0, #0
 8018646:	f43f af30 	beq.w	80184aa <_dtoa_r+0x432>
 801864a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801864e:	2b30      	cmp	r3, #48	; 0x30
 8018650:	f105 32ff 	add.w	r2, r5, #4294967295
 8018654:	d002      	beq.n	801865c <_dtoa_r+0x5e4>
 8018656:	f8dd a020 	ldr.w	sl, [sp, #32]
 801865a:	e04a      	b.n	80186f2 <_dtoa_r+0x67a>
 801865c:	4615      	mov	r5, r2
 801865e:	e7f4      	b.n	801864a <_dtoa_r+0x5d2>
 8018660:	4b05      	ldr	r3, [pc, #20]	; (8018678 <_dtoa_r+0x600>)
 8018662:	f7e7 ffe1 	bl	8000628 <__aeabi_dmul>
 8018666:	e9cd 0100 	strd	r0, r1, [sp]
 801866a:	e7bc      	b.n	80185e6 <_dtoa_r+0x56e>
 801866c:	0801ad40 	.word	0x0801ad40
 8018670:	0801ad18 	.word	0x0801ad18
 8018674:	3ff00000 	.word	0x3ff00000
 8018678:	40240000 	.word	0x40240000
 801867c:	401c0000 	.word	0x401c0000
 8018680:	40140000 	.word	0x40140000
 8018684:	3fe00000 	.word	0x3fe00000
 8018688:	e9dd 6700 	ldrd	r6, r7, [sp]
 801868c:	465d      	mov	r5, fp
 801868e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018692:	4630      	mov	r0, r6
 8018694:	4639      	mov	r1, r7
 8018696:	f7e8 f8f1 	bl	800087c <__aeabi_ddiv>
 801869a:	f7e8 fa75 	bl	8000b88 <__aeabi_d2iz>
 801869e:	4680      	mov	r8, r0
 80186a0:	f7e7 ff58 	bl	8000554 <__aeabi_i2d>
 80186a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80186a8:	f7e7 ffbe 	bl	8000628 <__aeabi_dmul>
 80186ac:	4602      	mov	r2, r0
 80186ae:	460b      	mov	r3, r1
 80186b0:	4630      	mov	r0, r6
 80186b2:	4639      	mov	r1, r7
 80186b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80186b8:	f7e7 fdfe 	bl	80002b8 <__aeabi_dsub>
 80186bc:	f805 6b01 	strb.w	r6, [r5], #1
 80186c0:	eba5 060b 	sub.w	r6, r5, fp
 80186c4:	45b1      	cmp	r9, r6
 80186c6:	4602      	mov	r2, r0
 80186c8:	460b      	mov	r3, r1
 80186ca:	d139      	bne.n	8018740 <_dtoa_r+0x6c8>
 80186cc:	f7e7 fdf6 	bl	80002bc <__adddf3>
 80186d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80186d4:	4606      	mov	r6, r0
 80186d6:	460f      	mov	r7, r1
 80186d8:	f7e8 fa36 	bl	8000b48 <__aeabi_dcmpgt>
 80186dc:	b9c8      	cbnz	r0, 8018712 <_dtoa_r+0x69a>
 80186de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80186e2:	4630      	mov	r0, r6
 80186e4:	4639      	mov	r1, r7
 80186e6:	f7e8 fa07 	bl	8000af8 <__aeabi_dcmpeq>
 80186ea:	b110      	cbz	r0, 80186f2 <_dtoa_r+0x67a>
 80186ec:	f018 0f01 	tst.w	r8, #1
 80186f0:	d10f      	bne.n	8018712 <_dtoa_r+0x69a>
 80186f2:	9904      	ldr	r1, [sp, #16]
 80186f4:	4620      	mov	r0, r4
 80186f6:	f000 fe12 	bl	801931e <_Bfree>
 80186fa:	2300      	movs	r3, #0
 80186fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80186fe:	702b      	strb	r3, [r5, #0]
 8018700:	f10a 0301 	add.w	r3, sl, #1
 8018704:	6013      	str	r3, [r2, #0]
 8018706:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018708:	2b00      	cmp	r3, #0
 801870a:	f000 8241 	beq.w	8018b90 <_dtoa_r+0xb18>
 801870e:	601d      	str	r5, [r3, #0]
 8018710:	e23e      	b.n	8018b90 <_dtoa_r+0xb18>
 8018712:	f8cd a020 	str.w	sl, [sp, #32]
 8018716:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801871a:	2a39      	cmp	r2, #57	; 0x39
 801871c:	f105 33ff 	add.w	r3, r5, #4294967295
 8018720:	d108      	bne.n	8018734 <_dtoa_r+0x6bc>
 8018722:	459b      	cmp	fp, r3
 8018724:	d10a      	bne.n	801873c <_dtoa_r+0x6c4>
 8018726:	9b08      	ldr	r3, [sp, #32]
 8018728:	3301      	adds	r3, #1
 801872a:	9308      	str	r3, [sp, #32]
 801872c:	2330      	movs	r3, #48	; 0x30
 801872e:	f88b 3000 	strb.w	r3, [fp]
 8018732:	465b      	mov	r3, fp
 8018734:	781a      	ldrb	r2, [r3, #0]
 8018736:	3201      	adds	r2, #1
 8018738:	701a      	strb	r2, [r3, #0]
 801873a:	e78c      	b.n	8018656 <_dtoa_r+0x5de>
 801873c:	461d      	mov	r5, r3
 801873e:	e7ea      	b.n	8018716 <_dtoa_r+0x69e>
 8018740:	2200      	movs	r2, #0
 8018742:	4b9b      	ldr	r3, [pc, #620]	; (80189b0 <_dtoa_r+0x938>)
 8018744:	f7e7 ff70 	bl	8000628 <__aeabi_dmul>
 8018748:	2200      	movs	r2, #0
 801874a:	2300      	movs	r3, #0
 801874c:	4606      	mov	r6, r0
 801874e:	460f      	mov	r7, r1
 8018750:	f7e8 f9d2 	bl	8000af8 <__aeabi_dcmpeq>
 8018754:	2800      	cmp	r0, #0
 8018756:	d09a      	beq.n	801868e <_dtoa_r+0x616>
 8018758:	e7cb      	b.n	80186f2 <_dtoa_r+0x67a>
 801875a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801875c:	2a00      	cmp	r2, #0
 801875e:	f000 808b 	beq.w	8018878 <_dtoa_r+0x800>
 8018762:	9a06      	ldr	r2, [sp, #24]
 8018764:	2a01      	cmp	r2, #1
 8018766:	dc6e      	bgt.n	8018846 <_dtoa_r+0x7ce>
 8018768:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801876a:	2a00      	cmp	r2, #0
 801876c:	d067      	beq.n	801883e <_dtoa_r+0x7c6>
 801876e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018772:	9f07      	ldr	r7, [sp, #28]
 8018774:	9d05      	ldr	r5, [sp, #20]
 8018776:	9a05      	ldr	r2, [sp, #20]
 8018778:	2101      	movs	r1, #1
 801877a:	441a      	add	r2, r3
 801877c:	4620      	mov	r0, r4
 801877e:	9205      	str	r2, [sp, #20]
 8018780:	4498      	add	r8, r3
 8018782:	f000 feaa 	bl	80194da <__i2b>
 8018786:	4606      	mov	r6, r0
 8018788:	2d00      	cmp	r5, #0
 801878a:	dd0c      	ble.n	80187a6 <_dtoa_r+0x72e>
 801878c:	f1b8 0f00 	cmp.w	r8, #0
 8018790:	dd09      	ble.n	80187a6 <_dtoa_r+0x72e>
 8018792:	4545      	cmp	r5, r8
 8018794:	9a05      	ldr	r2, [sp, #20]
 8018796:	462b      	mov	r3, r5
 8018798:	bfa8      	it	ge
 801879a:	4643      	movge	r3, r8
 801879c:	1ad2      	subs	r2, r2, r3
 801879e:	9205      	str	r2, [sp, #20]
 80187a0:	1aed      	subs	r5, r5, r3
 80187a2:	eba8 0803 	sub.w	r8, r8, r3
 80187a6:	9b07      	ldr	r3, [sp, #28]
 80187a8:	b1eb      	cbz	r3, 80187e6 <_dtoa_r+0x76e>
 80187aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	d067      	beq.n	8018880 <_dtoa_r+0x808>
 80187b0:	b18f      	cbz	r7, 80187d6 <_dtoa_r+0x75e>
 80187b2:	4631      	mov	r1, r6
 80187b4:	463a      	mov	r2, r7
 80187b6:	4620      	mov	r0, r4
 80187b8:	f000 ff2e 	bl	8019618 <__pow5mult>
 80187bc:	9a04      	ldr	r2, [sp, #16]
 80187be:	4601      	mov	r1, r0
 80187c0:	4606      	mov	r6, r0
 80187c2:	4620      	mov	r0, r4
 80187c4:	f000 fe92 	bl	80194ec <__multiply>
 80187c8:	9904      	ldr	r1, [sp, #16]
 80187ca:	9008      	str	r0, [sp, #32]
 80187cc:	4620      	mov	r0, r4
 80187ce:	f000 fda6 	bl	801931e <_Bfree>
 80187d2:	9b08      	ldr	r3, [sp, #32]
 80187d4:	9304      	str	r3, [sp, #16]
 80187d6:	9b07      	ldr	r3, [sp, #28]
 80187d8:	1bda      	subs	r2, r3, r7
 80187da:	d004      	beq.n	80187e6 <_dtoa_r+0x76e>
 80187dc:	9904      	ldr	r1, [sp, #16]
 80187de:	4620      	mov	r0, r4
 80187e0:	f000 ff1a 	bl	8019618 <__pow5mult>
 80187e4:	9004      	str	r0, [sp, #16]
 80187e6:	2101      	movs	r1, #1
 80187e8:	4620      	mov	r0, r4
 80187ea:	f000 fe76 	bl	80194da <__i2b>
 80187ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80187f0:	4607      	mov	r7, r0
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	f000 81d0 	beq.w	8018b98 <_dtoa_r+0xb20>
 80187f8:	461a      	mov	r2, r3
 80187fa:	4601      	mov	r1, r0
 80187fc:	4620      	mov	r0, r4
 80187fe:	f000 ff0b 	bl	8019618 <__pow5mult>
 8018802:	9b06      	ldr	r3, [sp, #24]
 8018804:	2b01      	cmp	r3, #1
 8018806:	4607      	mov	r7, r0
 8018808:	dc40      	bgt.n	801888c <_dtoa_r+0x814>
 801880a:	9b00      	ldr	r3, [sp, #0]
 801880c:	2b00      	cmp	r3, #0
 801880e:	d139      	bne.n	8018884 <_dtoa_r+0x80c>
 8018810:	9b01      	ldr	r3, [sp, #4]
 8018812:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018816:	2b00      	cmp	r3, #0
 8018818:	d136      	bne.n	8018888 <_dtoa_r+0x810>
 801881a:	9b01      	ldr	r3, [sp, #4]
 801881c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018820:	0d1b      	lsrs	r3, r3, #20
 8018822:	051b      	lsls	r3, r3, #20
 8018824:	b12b      	cbz	r3, 8018832 <_dtoa_r+0x7ba>
 8018826:	9b05      	ldr	r3, [sp, #20]
 8018828:	3301      	adds	r3, #1
 801882a:	9305      	str	r3, [sp, #20]
 801882c:	f108 0801 	add.w	r8, r8, #1
 8018830:	2301      	movs	r3, #1
 8018832:	9307      	str	r3, [sp, #28]
 8018834:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018836:	2b00      	cmp	r3, #0
 8018838:	d12a      	bne.n	8018890 <_dtoa_r+0x818>
 801883a:	2001      	movs	r0, #1
 801883c:	e030      	b.n	80188a0 <_dtoa_r+0x828>
 801883e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018840:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018844:	e795      	b.n	8018772 <_dtoa_r+0x6fa>
 8018846:	9b07      	ldr	r3, [sp, #28]
 8018848:	f109 37ff 	add.w	r7, r9, #4294967295
 801884c:	42bb      	cmp	r3, r7
 801884e:	bfbf      	itttt	lt
 8018850:	9b07      	ldrlt	r3, [sp, #28]
 8018852:	9707      	strlt	r7, [sp, #28]
 8018854:	1afa      	sublt	r2, r7, r3
 8018856:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8018858:	bfbb      	ittet	lt
 801885a:	189b      	addlt	r3, r3, r2
 801885c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801885e:	1bdf      	subge	r7, r3, r7
 8018860:	2700      	movlt	r7, #0
 8018862:	f1b9 0f00 	cmp.w	r9, #0
 8018866:	bfb5      	itete	lt
 8018868:	9b05      	ldrlt	r3, [sp, #20]
 801886a:	9d05      	ldrge	r5, [sp, #20]
 801886c:	eba3 0509 	sublt.w	r5, r3, r9
 8018870:	464b      	movge	r3, r9
 8018872:	bfb8      	it	lt
 8018874:	2300      	movlt	r3, #0
 8018876:	e77e      	b.n	8018776 <_dtoa_r+0x6fe>
 8018878:	9f07      	ldr	r7, [sp, #28]
 801887a:	9d05      	ldr	r5, [sp, #20]
 801887c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801887e:	e783      	b.n	8018788 <_dtoa_r+0x710>
 8018880:	9a07      	ldr	r2, [sp, #28]
 8018882:	e7ab      	b.n	80187dc <_dtoa_r+0x764>
 8018884:	2300      	movs	r3, #0
 8018886:	e7d4      	b.n	8018832 <_dtoa_r+0x7ba>
 8018888:	9b00      	ldr	r3, [sp, #0]
 801888a:	e7d2      	b.n	8018832 <_dtoa_r+0x7ba>
 801888c:	2300      	movs	r3, #0
 801888e:	9307      	str	r3, [sp, #28]
 8018890:	693b      	ldr	r3, [r7, #16]
 8018892:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8018896:	6918      	ldr	r0, [r3, #16]
 8018898:	f000 fdd1 	bl	801943e <__hi0bits>
 801889c:	f1c0 0020 	rsb	r0, r0, #32
 80188a0:	4440      	add	r0, r8
 80188a2:	f010 001f 	ands.w	r0, r0, #31
 80188a6:	d047      	beq.n	8018938 <_dtoa_r+0x8c0>
 80188a8:	f1c0 0320 	rsb	r3, r0, #32
 80188ac:	2b04      	cmp	r3, #4
 80188ae:	dd3b      	ble.n	8018928 <_dtoa_r+0x8b0>
 80188b0:	9b05      	ldr	r3, [sp, #20]
 80188b2:	f1c0 001c 	rsb	r0, r0, #28
 80188b6:	4403      	add	r3, r0
 80188b8:	9305      	str	r3, [sp, #20]
 80188ba:	4405      	add	r5, r0
 80188bc:	4480      	add	r8, r0
 80188be:	9b05      	ldr	r3, [sp, #20]
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	dd05      	ble.n	80188d0 <_dtoa_r+0x858>
 80188c4:	461a      	mov	r2, r3
 80188c6:	9904      	ldr	r1, [sp, #16]
 80188c8:	4620      	mov	r0, r4
 80188ca:	f000 fef3 	bl	80196b4 <__lshift>
 80188ce:	9004      	str	r0, [sp, #16]
 80188d0:	f1b8 0f00 	cmp.w	r8, #0
 80188d4:	dd05      	ble.n	80188e2 <_dtoa_r+0x86a>
 80188d6:	4639      	mov	r1, r7
 80188d8:	4642      	mov	r2, r8
 80188da:	4620      	mov	r0, r4
 80188dc:	f000 feea 	bl	80196b4 <__lshift>
 80188e0:	4607      	mov	r7, r0
 80188e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80188e4:	b353      	cbz	r3, 801893c <_dtoa_r+0x8c4>
 80188e6:	4639      	mov	r1, r7
 80188e8:	9804      	ldr	r0, [sp, #16]
 80188ea:	f000 ff37 	bl	801975c <__mcmp>
 80188ee:	2800      	cmp	r0, #0
 80188f0:	da24      	bge.n	801893c <_dtoa_r+0x8c4>
 80188f2:	2300      	movs	r3, #0
 80188f4:	220a      	movs	r2, #10
 80188f6:	9904      	ldr	r1, [sp, #16]
 80188f8:	4620      	mov	r0, r4
 80188fa:	f000 fd27 	bl	801934c <__multadd>
 80188fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018900:	9004      	str	r0, [sp, #16]
 8018902:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018906:	2b00      	cmp	r3, #0
 8018908:	f000 814d 	beq.w	8018ba6 <_dtoa_r+0xb2e>
 801890c:	2300      	movs	r3, #0
 801890e:	4631      	mov	r1, r6
 8018910:	220a      	movs	r2, #10
 8018912:	4620      	mov	r0, r4
 8018914:	f000 fd1a 	bl	801934c <__multadd>
 8018918:	9b02      	ldr	r3, [sp, #8]
 801891a:	2b00      	cmp	r3, #0
 801891c:	4606      	mov	r6, r0
 801891e:	dc4f      	bgt.n	80189c0 <_dtoa_r+0x948>
 8018920:	9b06      	ldr	r3, [sp, #24]
 8018922:	2b02      	cmp	r3, #2
 8018924:	dd4c      	ble.n	80189c0 <_dtoa_r+0x948>
 8018926:	e011      	b.n	801894c <_dtoa_r+0x8d4>
 8018928:	d0c9      	beq.n	80188be <_dtoa_r+0x846>
 801892a:	9a05      	ldr	r2, [sp, #20]
 801892c:	331c      	adds	r3, #28
 801892e:	441a      	add	r2, r3
 8018930:	9205      	str	r2, [sp, #20]
 8018932:	441d      	add	r5, r3
 8018934:	4498      	add	r8, r3
 8018936:	e7c2      	b.n	80188be <_dtoa_r+0x846>
 8018938:	4603      	mov	r3, r0
 801893a:	e7f6      	b.n	801892a <_dtoa_r+0x8b2>
 801893c:	f1b9 0f00 	cmp.w	r9, #0
 8018940:	dc38      	bgt.n	80189b4 <_dtoa_r+0x93c>
 8018942:	9b06      	ldr	r3, [sp, #24]
 8018944:	2b02      	cmp	r3, #2
 8018946:	dd35      	ble.n	80189b4 <_dtoa_r+0x93c>
 8018948:	f8cd 9008 	str.w	r9, [sp, #8]
 801894c:	9b02      	ldr	r3, [sp, #8]
 801894e:	b963      	cbnz	r3, 801896a <_dtoa_r+0x8f2>
 8018950:	4639      	mov	r1, r7
 8018952:	2205      	movs	r2, #5
 8018954:	4620      	mov	r0, r4
 8018956:	f000 fcf9 	bl	801934c <__multadd>
 801895a:	4601      	mov	r1, r0
 801895c:	4607      	mov	r7, r0
 801895e:	9804      	ldr	r0, [sp, #16]
 8018960:	f000 fefc 	bl	801975c <__mcmp>
 8018964:	2800      	cmp	r0, #0
 8018966:	f73f adcc 	bgt.w	8018502 <_dtoa_r+0x48a>
 801896a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801896c:	465d      	mov	r5, fp
 801896e:	ea6f 0a03 	mvn.w	sl, r3
 8018972:	f04f 0900 	mov.w	r9, #0
 8018976:	4639      	mov	r1, r7
 8018978:	4620      	mov	r0, r4
 801897a:	f000 fcd0 	bl	801931e <_Bfree>
 801897e:	2e00      	cmp	r6, #0
 8018980:	f43f aeb7 	beq.w	80186f2 <_dtoa_r+0x67a>
 8018984:	f1b9 0f00 	cmp.w	r9, #0
 8018988:	d005      	beq.n	8018996 <_dtoa_r+0x91e>
 801898a:	45b1      	cmp	r9, r6
 801898c:	d003      	beq.n	8018996 <_dtoa_r+0x91e>
 801898e:	4649      	mov	r1, r9
 8018990:	4620      	mov	r0, r4
 8018992:	f000 fcc4 	bl	801931e <_Bfree>
 8018996:	4631      	mov	r1, r6
 8018998:	4620      	mov	r0, r4
 801899a:	f000 fcc0 	bl	801931e <_Bfree>
 801899e:	e6a8      	b.n	80186f2 <_dtoa_r+0x67a>
 80189a0:	2700      	movs	r7, #0
 80189a2:	463e      	mov	r6, r7
 80189a4:	e7e1      	b.n	801896a <_dtoa_r+0x8f2>
 80189a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80189aa:	463e      	mov	r6, r7
 80189ac:	e5a9      	b.n	8018502 <_dtoa_r+0x48a>
 80189ae:	bf00      	nop
 80189b0:	40240000 	.word	0x40240000
 80189b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80189b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	f000 80fa 	beq.w	8018bb4 <_dtoa_r+0xb3c>
 80189c0:	2d00      	cmp	r5, #0
 80189c2:	dd05      	ble.n	80189d0 <_dtoa_r+0x958>
 80189c4:	4631      	mov	r1, r6
 80189c6:	462a      	mov	r2, r5
 80189c8:	4620      	mov	r0, r4
 80189ca:	f000 fe73 	bl	80196b4 <__lshift>
 80189ce:	4606      	mov	r6, r0
 80189d0:	9b07      	ldr	r3, [sp, #28]
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	d04c      	beq.n	8018a70 <_dtoa_r+0x9f8>
 80189d6:	6871      	ldr	r1, [r6, #4]
 80189d8:	4620      	mov	r0, r4
 80189da:	f000 fc6c 	bl	80192b6 <_Balloc>
 80189de:	6932      	ldr	r2, [r6, #16]
 80189e0:	3202      	adds	r2, #2
 80189e2:	4605      	mov	r5, r0
 80189e4:	0092      	lsls	r2, r2, #2
 80189e6:	f106 010c 	add.w	r1, r6, #12
 80189ea:	300c      	adds	r0, #12
 80189ec:	f000 fc56 	bl	801929c <memcpy>
 80189f0:	2201      	movs	r2, #1
 80189f2:	4629      	mov	r1, r5
 80189f4:	4620      	mov	r0, r4
 80189f6:	f000 fe5d 	bl	80196b4 <__lshift>
 80189fa:	9b00      	ldr	r3, [sp, #0]
 80189fc:	f8cd b014 	str.w	fp, [sp, #20]
 8018a00:	f003 0301 	and.w	r3, r3, #1
 8018a04:	46b1      	mov	r9, r6
 8018a06:	9307      	str	r3, [sp, #28]
 8018a08:	4606      	mov	r6, r0
 8018a0a:	4639      	mov	r1, r7
 8018a0c:	9804      	ldr	r0, [sp, #16]
 8018a0e:	f7ff faa5 	bl	8017f5c <quorem>
 8018a12:	4649      	mov	r1, r9
 8018a14:	4605      	mov	r5, r0
 8018a16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018a1a:	9804      	ldr	r0, [sp, #16]
 8018a1c:	f000 fe9e 	bl	801975c <__mcmp>
 8018a20:	4632      	mov	r2, r6
 8018a22:	9000      	str	r0, [sp, #0]
 8018a24:	4639      	mov	r1, r7
 8018a26:	4620      	mov	r0, r4
 8018a28:	f000 feb2 	bl	8019790 <__mdiff>
 8018a2c:	68c3      	ldr	r3, [r0, #12]
 8018a2e:	4602      	mov	r2, r0
 8018a30:	bb03      	cbnz	r3, 8018a74 <_dtoa_r+0x9fc>
 8018a32:	4601      	mov	r1, r0
 8018a34:	9008      	str	r0, [sp, #32]
 8018a36:	9804      	ldr	r0, [sp, #16]
 8018a38:	f000 fe90 	bl	801975c <__mcmp>
 8018a3c:	9a08      	ldr	r2, [sp, #32]
 8018a3e:	4603      	mov	r3, r0
 8018a40:	4611      	mov	r1, r2
 8018a42:	4620      	mov	r0, r4
 8018a44:	9308      	str	r3, [sp, #32]
 8018a46:	f000 fc6a 	bl	801931e <_Bfree>
 8018a4a:	9b08      	ldr	r3, [sp, #32]
 8018a4c:	b9a3      	cbnz	r3, 8018a78 <_dtoa_r+0xa00>
 8018a4e:	9a06      	ldr	r2, [sp, #24]
 8018a50:	b992      	cbnz	r2, 8018a78 <_dtoa_r+0xa00>
 8018a52:	9a07      	ldr	r2, [sp, #28]
 8018a54:	b982      	cbnz	r2, 8018a78 <_dtoa_r+0xa00>
 8018a56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018a5a:	d029      	beq.n	8018ab0 <_dtoa_r+0xa38>
 8018a5c:	9b00      	ldr	r3, [sp, #0]
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	dd01      	ble.n	8018a66 <_dtoa_r+0x9ee>
 8018a62:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8018a66:	9b05      	ldr	r3, [sp, #20]
 8018a68:	1c5d      	adds	r5, r3, #1
 8018a6a:	f883 8000 	strb.w	r8, [r3]
 8018a6e:	e782      	b.n	8018976 <_dtoa_r+0x8fe>
 8018a70:	4630      	mov	r0, r6
 8018a72:	e7c2      	b.n	80189fa <_dtoa_r+0x982>
 8018a74:	2301      	movs	r3, #1
 8018a76:	e7e3      	b.n	8018a40 <_dtoa_r+0x9c8>
 8018a78:	9a00      	ldr	r2, [sp, #0]
 8018a7a:	2a00      	cmp	r2, #0
 8018a7c:	db04      	blt.n	8018a88 <_dtoa_r+0xa10>
 8018a7e:	d125      	bne.n	8018acc <_dtoa_r+0xa54>
 8018a80:	9a06      	ldr	r2, [sp, #24]
 8018a82:	bb1a      	cbnz	r2, 8018acc <_dtoa_r+0xa54>
 8018a84:	9a07      	ldr	r2, [sp, #28]
 8018a86:	bb0a      	cbnz	r2, 8018acc <_dtoa_r+0xa54>
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	ddec      	ble.n	8018a66 <_dtoa_r+0x9ee>
 8018a8c:	2201      	movs	r2, #1
 8018a8e:	9904      	ldr	r1, [sp, #16]
 8018a90:	4620      	mov	r0, r4
 8018a92:	f000 fe0f 	bl	80196b4 <__lshift>
 8018a96:	4639      	mov	r1, r7
 8018a98:	9004      	str	r0, [sp, #16]
 8018a9a:	f000 fe5f 	bl	801975c <__mcmp>
 8018a9e:	2800      	cmp	r0, #0
 8018aa0:	dc03      	bgt.n	8018aaa <_dtoa_r+0xa32>
 8018aa2:	d1e0      	bne.n	8018a66 <_dtoa_r+0x9ee>
 8018aa4:	f018 0f01 	tst.w	r8, #1
 8018aa8:	d0dd      	beq.n	8018a66 <_dtoa_r+0x9ee>
 8018aaa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018aae:	d1d8      	bne.n	8018a62 <_dtoa_r+0x9ea>
 8018ab0:	9b05      	ldr	r3, [sp, #20]
 8018ab2:	9a05      	ldr	r2, [sp, #20]
 8018ab4:	1c5d      	adds	r5, r3, #1
 8018ab6:	2339      	movs	r3, #57	; 0x39
 8018ab8:	7013      	strb	r3, [r2, #0]
 8018aba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018abe:	2b39      	cmp	r3, #57	; 0x39
 8018ac0:	f105 32ff 	add.w	r2, r5, #4294967295
 8018ac4:	d04f      	beq.n	8018b66 <_dtoa_r+0xaee>
 8018ac6:	3301      	adds	r3, #1
 8018ac8:	7013      	strb	r3, [r2, #0]
 8018aca:	e754      	b.n	8018976 <_dtoa_r+0x8fe>
 8018acc:	9a05      	ldr	r2, [sp, #20]
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	f102 0501 	add.w	r5, r2, #1
 8018ad4:	dd06      	ble.n	8018ae4 <_dtoa_r+0xa6c>
 8018ad6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018ada:	d0e9      	beq.n	8018ab0 <_dtoa_r+0xa38>
 8018adc:	f108 0801 	add.w	r8, r8, #1
 8018ae0:	9b05      	ldr	r3, [sp, #20]
 8018ae2:	e7c2      	b.n	8018a6a <_dtoa_r+0x9f2>
 8018ae4:	9a02      	ldr	r2, [sp, #8]
 8018ae6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8018aea:	eba5 030b 	sub.w	r3, r5, fp
 8018aee:	4293      	cmp	r3, r2
 8018af0:	d021      	beq.n	8018b36 <_dtoa_r+0xabe>
 8018af2:	2300      	movs	r3, #0
 8018af4:	220a      	movs	r2, #10
 8018af6:	9904      	ldr	r1, [sp, #16]
 8018af8:	4620      	mov	r0, r4
 8018afa:	f000 fc27 	bl	801934c <__multadd>
 8018afe:	45b1      	cmp	r9, r6
 8018b00:	9004      	str	r0, [sp, #16]
 8018b02:	f04f 0300 	mov.w	r3, #0
 8018b06:	f04f 020a 	mov.w	r2, #10
 8018b0a:	4649      	mov	r1, r9
 8018b0c:	4620      	mov	r0, r4
 8018b0e:	d105      	bne.n	8018b1c <_dtoa_r+0xaa4>
 8018b10:	f000 fc1c 	bl	801934c <__multadd>
 8018b14:	4681      	mov	r9, r0
 8018b16:	4606      	mov	r6, r0
 8018b18:	9505      	str	r5, [sp, #20]
 8018b1a:	e776      	b.n	8018a0a <_dtoa_r+0x992>
 8018b1c:	f000 fc16 	bl	801934c <__multadd>
 8018b20:	4631      	mov	r1, r6
 8018b22:	4681      	mov	r9, r0
 8018b24:	2300      	movs	r3, #0
 8018b26:	220a      	movs	r2, #10
 8018b28:	4620      	mov	r0, r4
 8018b2a:	f000 fc0f 	bl	801934c <__multadd>
 8018b2e:	4606      	mov	r6, r0
 8018b30:	e7f2      	b.n	8018b18 <_dtoa_r+0xaa0>
 8018b32:	f04f 0900 	mov.w	r9, #0
 8018b36:	2201      	movs	r2, #1
 8018b38:	9904      	ldr	r1, [sp, #16]
 8018b3a:	4620      	mov	r0, r4
 8018b3c:	f000 fdba 	bl	80196b4 <__lshift>
 8018b40:	4639      	mov	r1, r7
 8018b42:	9004      	str	r0, [sp, #16]
 8018b44:	f000 fe0a 	bl	801975c <__mcmp>
 8018b48:	2800      	cmp	r0, #0
 8018b4a:	dcb6      	bgt.n	8018aba <_dtoa_r+0xa42>
 8018b4c:	d102      	bne.n	8018b54 <_dtoa_r+0xadc>
 8018b4e:	f018 0f01 	tst.w	r8, #1
 8018b52:	d1b2      	bne.n	8018aba <_dtoa_r+0xa42>
 8018b54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018b58:	2b30      	cmp	r3, #48	; 0x30
 8018b5a:	f105 32ff 	add.w	r2, r5, #4294967295
 8018b5e:	f47f af0a 	bne.w	8018976 <_dtoa_r+0x8fe>
 8018b62:	4615      	mov	r5, r2
 8018b64:	e7f6      	b.n	8018b54 <_dtoa_r+0xadc>
 8018b66:	4593      	cmp	fp, r2
 8018b68:	d105      	bne.n	8018b76 <_dtoa_r+0xafe>
 8018b6a:	2331      	movs	r3, #49	; 0x31
 8018b6c:	f10a 0a01 	add.w	sl, sl, #1
 8018b70:	f88b 3000 	strb.w	r3, [fp]
 8018b74:	e6ff      	b.n	8018976 <_dtoa_r+0x8fe>
 8018b76:	4615      	mov	r5, r2
 8018b78:	e79f      	b.n	8018aba <_dtoa_r+0xa42>
 8018b7a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8018be0 <_dtoa_r+0xb68>
 8018b7e:	e007      	b.n	8018b90 <_dtoa_r+0xb18>
 8018b80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018b82:	f8df b060 	ldr.w	fp, [pc, #96]	; 8018be4 <_dtoa_r+0xb6c>
 8018b86:	b11b      	cbz	r3, 8018b90 <_dtoa_r+0xb18>
 8018b88:	f10b 0308 	add.w	r3, fp, #8
 8018b8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018b8e:	6013      	str	r3, [r2, #0]
 8018b90:	4658      	mov	r0, fp
 8018b92:	b017      	add	sp, #92	; 0x5c
 8018b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b98:	9b06      	ldr	r3, [sp, #24]
 8018b9a:	2b01      	cmp	r3, #1
 8018b9c:	f77f ae35 	ble.w	801880a <_dtoa_r+0x792>
 8018ba0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018ba2:	9307      	str	r3, [sp, #28]
 8018ba4:	e649      	b.n	801883a <_dtoa_r+0x7c2>
 8018ba6:	9b02      	ldr	r3, [sp, #8]
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	dc03      	bgt.n	8018bb4 <_dtoa_r+0xb3c>
 8018bac:	9b06      	ldr	r3, [sp, #24]
 8018bae:	2b02      	cmp	r3, #2
 8018bb0:	f73f aecc 	bgt.w	801894c <_dtoa_r+0x8d4>
 8018bb4:	465d      	mov	r5, fp
 8018bb6:	4639      	mov	r1, r7
 8018bb8:	9804      	ldr	r0, [sp, #16]
 8018bba:	f7ff f9cf 	bl	8017f5c <quorem>
 8018bbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018bc2:	f805 8b01 	strb.w	r8, [r5], #1
 8018bc6:	9a02      	ldr	r2, [sp, #8]
 8018bc8:	eba5 030b 	sub.w	r3, r5, fp
 8018bcc:	429a      	cmp	r2, r3
 8018bce:	ddb0      	ble.n	8018b32 <_dtoa_r+0xaba>
 8018bd0:	2300      	movs	r3, #0
 8018bd2:	220a      	movs	r2, #10
 8018bd4:	9904      	ldr	r1, [sp, #16]
 8018bd6:	4620      	mov	r0, r4
 8018bd8:	f000 fbb8 	bl	801934c <__multadd>
 8018bdc:	9004      	str	r0, [sp, #16]
 8018bde:	e7ea      	b.n	8018bb6 <_dtoa_r+0xb3e>
 8018be0:	0801ae3b 	.word	0x0801ae3b
 8018be4:	0801ad00 	.word	0x0801ad00

08018be8 <rshift>:
 8018be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bea:	6906      	ldr	r6, [r0, #16]
 8018bec:	114b      	asrs	r3, r1, #5
 8018bee:	429e      	cmp	r6, r3
 8018bf0:	f100 0414 	add.w	r4, r0, #20
 8018bf4:	dd30      	ble.n	8018c58 <rshift+0x70>
 8018bf6:	f011 011f 	ands.w	r1, r1, #31
 8018bfa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8018bfe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8018c02:	d108      	bne.n	8018c16 <rshift+0x2e>
 8018c04:	4621      	mov	r1, r4
 8018c06:	42b2      	cmp	r2, r6
 8018c08:	460b      	mov	r3, r1
 8018c0a:	d211      	bcs.n	8018c30 <rshift+0x48>
 8018c0c:	f852 3b04 	ldr.w	r3, [r2], #4
 8018c10:	f841 3b04 	str.w	r3, [r1], #4
 8018c14:	e7f7      	b.n	8018c06 <rshift+0x1e>
 8018c16:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8018c1a:	f1c1 0c20 	rsb	ip, r1, #32
 8018c1e:	40cd      	lsrs	r5, r1
 8018c20:	3204      	adds	r2, #4
 8018c22:	4623      	mov	r3, r4
 8018c24:	42b2      	cmp	r2, r6
 8018c26:	4617      	mov	r7, r2
 8018c28:	d30c      	bcc.n	8018c44 <rshift+0x5c>
 8018c2a:	601d      	str	r5, [r3, #0]
 8018c2c:	b105      	cbz	r5, 8018c30 <rshift+0x48>
 8018c2e:	3304      	adds	r3, #4
 8018c30:	1b1a      	subs	r2, r3, r4
 8018c32:	42a3      	cmp	r3, r4
 8018c34:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018c38:	bf08      	it	eq
 8018c3a:	2300      	moveq	r3, #0
 8018c3c:	6102      	str	r2, [r0, #16]
 8018c3e:	bf08      	it	eq
 8018c40:	6143      	streq	r3, [r0, #20]
 8018c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c44:	683f      	ldr	r7, [r7, #0]
 8018c46:	fa07 f70c 	lsl.w	r7, r7, ip
 8018c4a:	433d      	orrs	r5, r7
 8018c4c:	f843 5b04 	str.w	r5, [r3], #4
 8018c50:	f852 5b04 	ldr.w	r5, [r2], #4
 8018c54:	40cd      	lsrs	r5, r1
 8018c56:	e7e5      	b.n	8018c24 <rshift+0x3c>
 8018c58:	4623      	mov	r3, r4
 8018c5a:	e7e9      	b.n	8018c30 <rshift+0x48>

08018c5c <__hexdig_fun>:
 8018c5c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018c60:	2b09      	cmp	r3, #9
 8018c62:	d802      	bhi.n	8018c6a <__hexdig_fun+0xe>
 8018c64:	3820      	subs	r0, #32
 8018c66:	b2c0      	uxtb	r0, r0
 8018c68:	4770      	bx	lr
 8018c6a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018c6e:	2b05      	cmp	r3, #5
 8018c70:	d801      	bhi.n	8018c76 <__hexdig_fun+0x1a>
 8018c72:	3847      	subs	r0, #71	; 0x47
 8018c74:	e7f7      	b.n	8018c66 <__hexdig_fun+0xa>
 8018c76:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018c7a:	2b05      	cmp	r3, #5
 8018c7c:	d801      	bhi.n	8018c82 <__hexdig_fun+0x26>
 8018c7e:	3827      	subs	r0, #39	; 0x27
 8018c80:	e7f1      	b.n	8018c66 <__hexdig_fun+0xa>
 8018c82:	2000      	movs	r0, #0
 8018c84:	4770      	bx	lr

08018c86 <__gethex>:
 8018c86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c8a:	b08b      	sub	sp, #44	; 0x2c
 8018c8c:	468a      	mov	sl, r1
 8018c8e:	9002      	str	r0, [sp, #8]
 8018c90:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018c92:	9306      	str	r3, [sp, #24]
 8018c94:	4690      	mov	r8, r2
 8018c96:	f000 fadf 	bl	8019258 <__localeconv_l>
 8018c9a:	6803      	ldr	r3, [r0, #0]
 8018c9c:	9303      	str	r3, [sp, #12]
 8018c9e:	4618      	mov	r0, r3
 8018ca0:	f7e7 faae 	bl	8000200 <strlen>
 8018ca4:	9b03      	ldr	r3, [sp, #12]
 8018ca6:	9001      	str	r0, [sp, #4]
 8018ca8:	4403      	add	r3, r0
 8018caa:	f04f 0b00 	mov.w	fp, #0
 8018cae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018cb2:	9307      	str	r3, [sp, #28]
 8018cb4:	f8da 3000 	ldr.w	r3, [sl]
 8018cb8:	3302      	adds	r3, #2
 8018cba:	461f      	mov	r7, r3
 8018cbc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018cc0:	2830      	cmp	r0, #48	; 0x30
 8018cc2:	d06c      	beq.n	8018d9e <__gethex+0x118>
 8018cc4:	f7ff ffca 	bl	8018c5c <__hexdig_fun>
 8018cc8:	4604      	mov	r4, r0
 8018cca:	2800      	cmp	r0, #0
 8018ccc:	d16a      	bne.n	8018da4 <__gethex+0x11e>
 8018cce:	9a01      	ldr	r2, [sp, #4]
 8018cd0:	9903      	ldr	r1, [sp, #12]
 8018cd2:	4638      	mov	r0, r7
 8018cd4:	f001 fb82 	bl	801a3dc <strncmp>
 8018cd8:	2800      	cmp	r0, #0
 8018cda:	d166      	bne.n	8018daa <__gethex+0x124>
 8018cdc:	9b01      	ldr	r3, [sp, #4]
 8018cde:	5cf8      	ldrb	r0, [r7, r3]
 8018ce0:	18fe      	adds	r6, r7, r3
 8018ce2:	f7ff ffbb 	bl	8018c5c <__hexdig_fun>
 8018ce6:	2800      	cmp	r0, #0
 8018ce8:	d062      	beq.n	8018db0 <__gethex+0x12a>
 8018cea:	4633      	mov	r3, r6
 8018cec:	7818      	ldrb	r0, [r3, #0]
 8018cee:	2830      	cmp	r0, #48	; 0x30
 8018cf0:	461f      	mov	r7, r3
 8018cf2:	f103 0301 	add.w	r3, r3, #1
 8018cf6:	d0f9      	beq.n	8018cec <__gethex+0x66>
 8018cf8:	f7ff ffb0 	bl	8018c5c <__hexdig_fun>
 8018cfc:	fab0 f580 	clz	r5, r0
 8018d00:	096d      	lsrs	r5, r5, #5
 8018d02:	4634      	mov	r4, r6
 8018d04:	f04f 0b01 	mov.w	fp, #1
 8018d08:	463a      	mov	r2, r7
 8018d0a:	4616      	mov	r6, r2
 8018d0c:	3201      	adds	r2, #1
 8018d0e:	7830      	ldrb	r0, [r6, #0]
 8018d10:	f7ff ffa4 	bl	8018c5c <__hexdig_fun>
 8018d14:	2800      	cmp	r0, #0
 8018d16:	d1f8      	bne.n	8018d0a <__gethex+0x84>
 8018d18:	9a01      	ldr	r2, [sp, #4]
 8018d1a:	9903      	ldr	r1, [sp, #12]
 8018d1c:	4630      	mov	r0, r6
 8018d1e:	f001 fb5d 	bl	801a3dc <strncmp>
 8018d22:	b950      	cbnz	r0, 8018d3a <__gethex+0xb4>
 8018d24:	b954      	cbnz	r4, 8018d3c <__gethex+0xb6>
 8018d26:	9b01      	ldr	r3, [sp, #4]
 8018d28:	18f4      	adds	r4, r6, r3
 8018d2a:	4622      	mov	r2, r4
 8018d2c:	4616      	mov	r6, r2
 8018d2e:	3201      	adds	r2, #1
 8018d30:	7830      	ldrb	r0, [r6, #0]
 8018d32:	f7ff ff93 	bl	8018c5c <__hexdig_fun>
 8018d36:	2800      	cmp	r0, #0
 8018d38:	d1f8      	bne.n	8018d2c <__gethex+0xa6>
 8018d3a:	b10c      	cbz	r4, 8018d40 <__gethex+0xba>
 8018d3c:	1ba4      	subs	r4, r4, r6
 8018d3e:	00a4      	lsls	r4, r4, #2
 8018d40:	7833      	ldrb	r3, [r6, #0]
 8018d42:	2b50      	cmp	r3, #80	; 0x50
 8018d44:	d001      	beq.n	8018d4a <__gethex+0xc4>
 8018d46:	2b70      	cmp	r3, #112	; 0x70
 8018d48:	d140      	bne.n	8018dcc <__gethex+0x146>
 8018d4a:	7873      	ldrb	r3, [r6, #1]
 8018d4c:	2b2b      	cmp	r3, #43	; 0x2b
 8018d4e:	d031      	beq.n	8018db4 <__gethex+0x12e>
 8018d50:	2b2d      	cmp	r3, #45	; 0x2d
 8018d52:	d033      	beq.n	8018dbc <__gethex+0x136>
 8018d54:	1c71      	adds	r1, r6, #1
 8018d56:	f04f 0900 	mov.w	r9, #0
 8018d5a:	7808      	ldrb	r0, [r1, #0]
 8018d5c:	f7ff ff7e 	bl	8018c5c <__hexdig_fun>
 8018d60:	1e43      	subs	r3, r0, #1
 8018d62:	b2db      	uxtb	r3, r3
 8018d64:	2b18      	cmp	r3, #24
 8018d66:	d831      	bhi.n	8018dcc <__gethex+0x146>
 8018d68:	f1a0 0210 	sub.w	r2, r0, #16
 8018d6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018d70:	f7ff ff74 	bl	8018c5c <__hexdig_fun>
 8018d74:	1e43      	subs	r3, r0, #1
 8018d76:	b2db      	uxtb	r3, r3
 8018d78:	2b18      	cmp	r3, #24
 8018d7a:	d922      	bls.n	8018dc2 <__gethex+0x13c>
 8018d7c:	f1b9 0f00 	cmp.w	r9, #0
 8018d80:	d000      	beq.n	8018d84 <__gethex+0xfe>
 8018d82:	4252      	negs	r2, r2
 8018d84:	4414      	add	r4, r2
 8018d86:	f8ca 1000 	str.w	r1, [sl]
 8018d8a:	b30d      	cbz	r5, 8018dd0 <__gethex+0x14a>
 8018d8c:	f1bb 0f00 	cmp.w	fp, #0
 8018d90:	bf0c      	ite	eq
 8018d92:	2706      	moveq	r7, #6
 8018d94:	2700      	movne	r7, #0
 8018d96:	4638      	mov	r0, r7
 8018d98:	b00b      	add	sp, #44	; 0x2c
 8018d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d9e:	f10b 0b01 	add.w	fp, fp, #1
 8018da2:	e78a      	b.n	8018cba <__gethex+0x34>
 8018da4:	2500      	movs	r5, #0
 8018da6:	462c      	mov	r4, r5
 8018da8:	e7ae      	b.n	8018d08 <__gethex+0x82>
 8018daa:	463e      	mov	r6, r7
 8018dac:	2501      	movs	r5, #1
 8018dae:	e7c7      	b.n	8018d40 <__gethex+0xba>
 8018db0:	4604      	mov	r4, r0
 8018db2:	e7fb      	b.n	8018dac <__gethex+0x126>
 8018db4:	f04f 0900 	mov.w	r9, #0
 8018db8:	1cb1      	adds	r1, r6, #2
 8018dba:	e7ce      	b.n	8018d5a <__gethex+0xd4>
 8018dbc:	f04f 0901 	mov.w	r9, #1
 8018dc0:	e7fa      	b.n	8018db8 <__gethex+0x132>
 8018dc2:	230a      	movs	r3, #10
 8018dc4:	fb03 0202 	mla	r2, r3, r2, r0
 8018dc8:	3a10      	subs	r2, #16
 8018dca:	e7cf      	b.n	8018d6c <__gethex+0xe6>
 8018dcc:	4631      	mov	r1, r6
 8018dce:	e7da      	b.n	8018d86 <__gethex+0x100>
 8018dd0:	1bf3      	subs	r3, r6, r7
 8018dd2:	3b01      	subs	r3, #1
 8018dd4:	4629      	mov	r1, r5
 8018dd6:	2b07      	cmp	r3, #7
 8018dd8:	dc49      	bgt.n	8018e6e <__gethex+0x1e8>
 8018dda:	9802      	ldr	r0, [sp, #8]
 8018ddc:	f000 fa6b 	bl	80192b6 <_Balloc>
 8018de0:	9b01      	ldr	r3, [sp, #4]
 8018de2:	f100 0914 	add.w	r9, r0, #20
 8018de6:	f04f 0b00 	mov.w	fp, #0
 8018dea:	f1c3 0301 	rsb	r3, r3, #1
 8018dee:	4605      	mov	r5, r0
 8018df0:	f8cd 9010 	str.w	r9, [sp, #16]
 8018df4:	46da      	mov	sl, fp
 8018df6:	9308      	str	r3, [sp, #32]
 8018df8:	42b7      	cmp	r7, r6
 8018dfa:	d33b      	bcc.n	8018e74 <__gethex+0x1ee>
 8018dfc:	9804      	ldr	r0, [sp, #16]
 8018dfe:	f840 ab04 	str.w	sl, [r0], #4
 8018e02:	eba0 0009 	sub.w	r0, r0, r9
 8018e06:	1080      	asrs	r0, r0, #2
 8018e08:	6128      	str	r0, [r5, #16]
 8018e0a:	0147      	lsls	r7, r0, #5
 8018e0c:	4650      	mov	r0, sl
 8018e0e:	f000 fb16 	bl	801943e <__hi0bits>
 8018e12:	f8d8 6000 	ldr.w	r6, [r8]
 8018e16:	1a3f      	subs	r7, r7, r0
 8018e18:	42b7      	cmp	r7, r6
 8018e1a:	dd64      	ble.n	8018ee6 <__gethex+0x260>
 8018e1c:	1bbf      	subs	r7, r7, r6
 8018e1e:	4639      	mov	r1, r7
 8018e20:	4628      	mov	r0, r5
 8018e22:	f000 fe25 	bl	8019a70 <__any_on>
 8018e26:	4682      	mov	sl, r0
 8018e28:	b178      	cbz	r0, 8018e4a <__gethex+0x1c4>
 8018e2a:	1e7b      	subs	r3, r7, #1
 8018e2c:	1159      	asrs	r1, r3, #5
 8018e2e:	f003 021f 	and.w	r2, r3, #31
 8018e32:	f04f 0a01 	mov.w	sl, #1
 8018e36:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018e3a:	fa0a f202 	lsl.w	r2, sl, r2
 8018e3e:	420a      	tst	r2, r1
 8018e40:	d003      	beq.n	8018e4a <__gethex+0x1c4>
 8018e42:	4553      	cmp	r3, sl
 8018e44:	dc46      	bgt.n	8018ed4 <__gethex+0x24e>
 8018e46:	f04f 0a02 	mov.w	sl, #2
 8018e4a:	4639      	mov	r1, r7
 8018e4c:	4628      	mov	r0, r5
 8018e4e:	f7ff fecb 	bl	8018be8 <rshift>
 8018e52:	443c      	add	r4, r7
 8018e54:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018e58:	42a3      	cmp	r3, r4
 8018e5a:	da52      	bge.n	8018f02 <__gethex+0x27c>
 8018e5c:	4629      	mov	r1, r5
 8018e5e:	9802      	ldr	r0, [sp, #8]
 8018e60:	f000 fa5d 	bl	801931e <_Bfree>
 8018e64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018e66:	2300      	movs	r3, #0
 8018e68:	6013      	str	r3, [r2, #0]
 8018e6a:	27a3      	movs	r7, #163	; 0xa3
 8018e6c:	e793      	b.n	8018d96 <__gethex+0x110>
 8018e6e:	3101      	adds	r1, #1
 8018e70:	105b      	asrs	r3, r3, #1
 8018e72:	e7b0      	b.n	8018dd6 <__gethex+0x150>
 8018e74:	1e73      	subs	r3, r6, #1
 8018e76:	9305      	str	r3, [sp, #20]
 8018e78:	9a07      	ldr	r2, [sp, #28]
 8018e7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018e7e:	4293      	cmp	r3, r2
 8018e80:	d018      	beq.n	8018eb4 <__gethex+0x22e>
 8018e82:	f1bb 0f20 	cmp.w	fp, #32
 8018e86:	d107      	bne.n	8018e98 <__gethex+0x212>
 8018e88:	9b04      	ldr	r3, [sp, #16]
 8018e8a:	f8c3 a000 	str.w	sl, [r3]
 8018e8e:	3304      	adds	r3, #4
 8018e90:	f04f 0a00 	mov.w	sl, #0
 8018e94:	9304      	str	r3, [sp, #16]
 8018e96:	46d3      	mov	fp, sl
 8018e98:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018e9c:	f7ff fede 	bl	8018c5c <__hexdig_fun>
 8018ea0:	f000 000f 	and.w	r0, r0, #15
 8018ea4:	fa00 f00b 	lsl.w	r0, r0, fp
 8018ea8:	ea4a 0a00 	orr.w	sl, sl, r0
 8018eac:	f10b 0b04 	add.w	fp, fp, #4
 8018eb0:	9b05      	ldr	r3, [sp, #20]
 8018eb2:	e00d      	b.n	8018ed0 <__gethex+0x24a>
 8018eb4:	9b05      	ldr	r3, [sp, #20]
 8018eb6:	9a08      	ldr	r2, [sp, #32]
 8018eb8:	4413      	add	r3, r2
 8018eba:	42bb      	cmp	r3, r7
 8018ebc:	d3e1      	bcc.n	8018e82 <__gethex+0x1fc>
 8018ebe:	4618      	mov	r0, r3
 8018ec0:	9a01      	ldr	r2, [sp, #4]
 8018ec2:	9903      	ldr	r1, [sp, #12]
 8018ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8018ec6:	f001 fa89 	bl	801a3dc <strncmp>
 8018eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ecc:	2800      	cmp	r0, #0
 8018ece:	d1d8      	bne.n	8018e82 <__gethex+0x1fc>
 8018ed0:	461e      	mov	r6, r3
 8018ed2:	e791      	b.n	8018df8 <__gethex+0x172>
 8018ed4:	1eb9      	subs	r1, r7, #2
 8018ed6:	4628      	mov	r0, r5
 8018ed8:	f000 fdca 	bl	8019a70 <__any_on>
 8018edc:	2800      	cmp	r0, #0
 8018ede:	d0b2      	beq.n	8018e46 <__gethex+0x1c0>
 8018ee0:	f04f 0a03 	mov.w	sl, #3
 8018ee4:	e7b1      	b.n	8018e4a <__gethex+0x1c4>
 8018ee6:	da09      	bge.n	8018efc <__gethex+0x276>
 8018ee8:	1bf7      	subs	r7, r6, r7
 8018eea:	4629      	mov	r1, r5
 8018eec:	463a      	mov	r2, r7
 8018eee:	9802      	ldr	r0, [sp, #8]
 8018ef0:	f000 fbe0 	bl	80196b4 <__lshift>
 8018ef4:	1be4      	subs	r4, r4, r7
 8018ef6:	4605      	mov	r5, r0
 8018ef8:	f100 0914 	add.w	r9, r0, #20
 8018efc:	f04f 0a00 	mov.w	sl, #0
 8018f00:	e7a8      	b.n	8018e54 <__gethex+0x1ce>
 8018f02:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018f06:	42a0      	cmp	r0, r4
 8018f08:	dd6a      	ble.n	8018fe0 <__gethex+0x35a>
 8018f0a:	1b04      	subs	r4, r0, r4
 8018f0c:	42a6      	cmp	r6, r4
 8018f0e:	dc2e      	bgt.n	8018f6e <__gethex+0x2e8>
 8018f10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018f14:	2b02      	cmp	r3, #2
 8018f16:	d022      	beq.n	8018f5e <__gethex+0x2d8>
 8018f18:	2b03      	cmp	r3, #3
 8018f1a:	d024      	beq.n	8018f66 <__gethex+0x2e0>
 8018f1c:	2b01      	cmp	r3, #1
 8018f1e:	d115      	bne.n	8018f4c <__gethex+0x2c6>
 8018f20:	42a6      	cmp	r6, r4
 8018f22:	d113      	bne.n	8018f4c <__gethex+0x2c6>
 8018f24:	2e01      	cmp	r6, #1
 8018f26:	dc0b      	bgt.n	8018f40 <__gethex+0x2ba>
 8018f28:	9a06      	ldr	r2, [sp, #24]
 8018f2a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018f2e:	6013      	str	r3, [r2, #0]
 8018f30:	2301      	movs	r3, #1
 8018f32:	612b      	str	r3, [r5, #16]
 8018f34:	f8c9 3000 	str.w	r3, [r9]
 8018f38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018f3a:	2762      	movs	r7, #98	; 0x62
 8018f3c:	601d      	str	r5, [r3, #0]
 8018f3e:	e72a      	b.n	8018d96 <__gethex+0x110>
 8018f40:	1e71      	subs	r1, r6, #1
 8018f42:	4628      	mov	r0, r5
 8018f44:	f000 fd94 	bl	8019a70 <__any_on>
 8018f48:	2800      	cmp	r0, #0
 8018f4a:	d1ed      	bne.n	8018f28 <__gethex+0x2a2>
 8018f4c:	4629      	mov	r1, r5
 8018f4e:	9802      	ldr	r0, [sp, #8]
 8018f50:	f000 f9e5 	bl	801931e <_Bfree>
 8018f54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018f56:	2300      	movs	r3, #0
 8018f58:	6013      	str	r3, [r2, #0]
 8018f5a:	2750      	movs	r7, #80	; 0x50
 8018f5c:	e71b      	b.n	8018d96 <__gethex+0x110>
 8018f5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d0e1      	beq.n	8018f28 <__gethex+0x2a2>
 8018f64:	e7f2      	b.n	8018f4c <__gethex+0x2c6>
 8018f66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d1dd      	bne.n	8018f28 <__gethex+0x2a2>
 8018f6c:	e7ee      	b.n	8018f4c <__gethex+0x2c6>
 8018f6e:	1e67      	subs	r7, r4, #1
 8018f70:	f1ba 0f00 	cmp.w	sl, #0
 8018f74:	d131      	bne.n	8018fda <__gethex+0x354>
 8018f76:	b127      	cbz	r7, 8018f82 <__gethex+0x2fc>
 8018f78:	4639      	mov	r1, r7
 8018f7a:	4628      	mov	r0, r5
 8018f7c:	f000 fd78 	bl	8019a70 <__any_on>
 8018f80:	4682      	mov	sl, r0
 8018f82:	117a      	asrs	r2, r7, #5
 8018f84:	2301      	movs	r3, #1
 8018f86:	f007 071f 	and.w	r7, r7, #31
 8018f8a:	fa03 f707 	lsl.w	r7, r3, r7
 8018f8e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018f92:	4621      	mov	r1, r4
 8018f94:	421f      	tst	r7, r3
 8018f96:	4628      	mov	r0, r5
 8018f98:	bf18      	it	ne
 8018f9a:	f04a 0a02 	orrne.w	sl, sl, #2
 8018f9e:	1b36      	subs	r6, r6, r4
 8018fa0:	f7ff fe22 	bl	8018be8 <rshift>
 8018fa4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018fa8:	2702      	movs	r7, #2
 8018faa:	f1ba 0f00 	cmp.w	sl, #0
 8018fae:	d048      	beq.n	8019042 <__gethex+0x3bc>
 8018fb0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018fb4:	2b02      	cmp	r3, #2
 8018fb6:	d015      	beq.n	8018fe4 <__gethex+0x35e>
 8018fb8:	2b03      	cmp	r3, #3
 8018fba:	d017      	beq.n	8018fec <__gethex+0x366>
 8018fbc:	2b01      	cmp	r3, #1
 8018fbe:	d109      	bne.n	8018fd4 <__gethex+0x34e>
 8018fc0:	f01a 0f02 	tst.w	sl, #2
 8018fc4:	d006      	beq.n	8018fd4 <__gethex+0x34e>
 8018fc6:	f8d9 3000 	ldr.w	r3, [r9]
 8018fca:	ea4a 0a03 	orr.w	sl, sl, r3
 8018fce:	f01a 0f01 	tst.w	sl, #1
 8018fd2:	d10e      	bne.n	8018ff2 <__gethex+0x36c>
 8018fd4:	f047 0710 	orr.w	r7, r7, #16
 8018fd8:	e033      	b.n	8019042 <__gethex+0x3bc>
 8018fda:	f04f 0a01 	mov.w	sl, #1
 8018fde:	e7d0      	b.n	8018f82 <__gethex+0x2fc>
 8018fe0:	2701      	movs	r7, #1
 8018fe2:	e7e2      	b.n	8018faa <__gethex+0x324>
 8018fe4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018fe6:	f1c3 0301 	rsb	r3, r3, #1
 8018fea:	9315      	str	r3, [sp, #84]	; 0x54
 8018fec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018fee:	2b00      	cmp	r3, #0
 8018ff0:	d0f0      	beq.n	8018fd4 <__gethex+0x34e>
 8018ff2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8018ff6:	f105 0314 	add.w	r3, r5, #20
 8018ffa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8018ffe:	eb03 010a 	add.w	r1, r3, sl
 8019002:	f04f 0c00 	mov.w	ip, #0
 8019006:	4618      	mov	r0, r3
 8019008:	f853 2b04 	ldr.w	r2, [r3], #4
 801900c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019010:	d01c      	beq.n	801904c <__gethex+0x3c6>
 8019012:	3201      	adds	r2, #1
 8019014:	6002      	str	r2, [r0, #0]
 8019016:	2f02      	cmp	r7, #2
 8019018:	f105 0314 	add.w	r3, r5, #20
 801901c:	d138      	bne.n	8019090 <__gethex+0x40a>
 801901e:	f8d8 2000 	ldr.w	r2, [r8]
 8019022:	3a01      	subs	r2, #1
 8019024:	42b2      	cmp	r2, r6
 8019026:	d10a      	bne.n	801903e <__gethex+0x3b8>
 8019028:	1171      	asrs	r1, r6, #5
 801902a:	2201      	movs	r2, #1
 801902c:	f006 061f 	and.w	r6, r6, #31
 8019030:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019034:	fa02 f606 	lsl.w	r6, r2, r6
 8019038:	421e      	tst	r6, r3
 801903a:	bf18      	it	ne
 801903c:	4617      	movne	r7, r2
 801903e:	f047 0720 	orr.w	r7, r7, #32
 8019042:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019044:	601d      	str	r5, [r3, #0]
 8019046:	9b06      	ldr	r3, [sp, #24]
 8019048:	601c      	str	r4, [r3, #0]
 801904a:	e6a4      	b.n	8018d96 <__gethex+0x110>
 801904c:	4299      	cmp	r1, r3
 801904e:	f843 cc04 	str.w	ip, [r3, #-4]
 8019052:	d8d8      	bhi.n	8019006 <__gethex+0x380>
 8019054:	68ab      	ldr	r3, [r5, #8]
 8019056:	4599      	cmp	r9, r3
 8019058:	db12      	blt.n	8019080 <__gethex+0x3fa>
 801905a:	6869      	ldr	r1, [r5, #4]
 801905c:	9802      	ldr	r0, [sp, #8]
 801905e:	3101      	adds	r1, #1
 8019060:	f000 f929 	bl	80192b6 <_Balloc>
 8019064:	692a      	ldr	r2, [r5, #16]
 8019066:	3202      	adds	r2, #2
 8019068:	f105 010c 	add.w	r1, r5, #12
 801906c:	4683      	mov	fp, r0
 801906e:	0092      	lsls	r2, r2, #2
 8019070:	300c      	adds	r0, #12
 8019072:	f000 f913 	bl	801929c <memcpy>
 8019076:	4629      	mov	r1, r5
 8019078:	9802      	ldr	r0, [sp, #8]
 801907a:	f000 f950 	bl	801931e <_Bfree>
 801907e:	465d      	mov	r5, fp
 8019080:	692b      	ldr	r3, [r5, #16]
 8019082:	1c5a      	adds	r2, r3, #1
 8019084:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8019088:	612a      	str	r2, [r5, #16]
 801908a:	2201      	movs	r2, #1
 801908c:	615a      	str	r2, [r3, #20]
 801908e:	e7c2      	b.n	8019016 <__gethex+0x390>
 8019090:	692a      	ldr	r2, [r5, #16]
 8019092:	454a      	cmp	r2, r9
 8019094:	dd0b      	ble.n	80190ae <__gethex+0x428>
 8019096:	2101      	movs	r1, #1
 8019098:	4628      	mov	r0, r5
 801909a:	f7ff fda5 	bl	8018be8 <rshift>
 801909e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80190a2:	3401      	adds	r4, #1
 80190a4:	42a3      	cmp	r3, r4
 80190a6:	f6ff aed9 	blt.w	8018e5c <__gethex+0x1d6>
 80190aa:	2701      	movs	r7, #1
 80190ac:	e7c7      	b.n	801903e <__gethex+0x3b8>
 80190ae:	f016 061f 	ands.w	r6, r6, #31
 80190b2:	d0fa      	beq.n	80190aa <__gethex+0x424>
 80190b4:	449a      	add	sl, r3
 80190b6:	f1c6 0620 	rsb	r6, r6, #32
 80190ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80190be:	f000 f9be 	bl	801943e <__hi0bits>
 80190c2:	42b0      	cmp	r0, r6
 80190c4:	dbe7      	blt.n	8019096 <__gethex+0x410>
 80190c6:	e7f0      	b.n	80190aa <__gethex+0x424>

080190c8 <L_shift>:
 80190c8:	f1c2 0208 	rsb	r2, r2, #8
 80190cc:	0092      	lsls	r2, r2, #2
 80190ce:	b570      	push	{r4, r5, r6, lr}
 80190d0:	f1c2 0620 	rsb	r6, r2, #32
 80190d4:	6843      	ldr	r3, [r0, #4]
 80190d6:	6804      	ldr	r4, [r0, #0]
 80190d8:	fa03 f506 	lsl.w	r5, r3, r6
 80190dc:	432c      	orrs	r4, r5
 80190de:	40d3      	lsrs	r3, r2
 80190e0:	6004      	str	r4, [r0, #0]
 80190e2:	f840 3f04 	str.w	r3, [r0, #4]!
 80190e6:	4288      	cmp	r0, r1
 80190e8:	d3f4      	bcc.n	80190d4 <L_shift+0xc>
 80190ea:	bd70      	pop	{r4, r5, r6, pc}

080190ec <__match>:
 80190ec:	b530      	push	{r4, r5, lr}
 80190ee:	6803      	ldr	r3, [r0, #0]
 80190f0:	3301      	adds	r3, #1
 80190f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80190f6:	b914      	cbnz	r4, 80190fe <__match+0x12>
 80190f8:	6003      	str	r3, [r0, #0]
 80190fa:	2001      	movs	r0, #1
 80190fc:	bd30      	pop	{r4, r5, pc}
 80190fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019102:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019106:	2d19      	cmp	r5, #25
 8019108:	bf98      	it	ls
 801910a:	3220      	addls	r2, #32
 801910c:	42a2      	cmp	r2, r4
 801910e:	d0f0      	beq.n	80190f2 <__match+0x6>
 8019110:	2000      	movs	r0, #0
 8019112:	e7f3      	b.n	80190fc <__match+0x10>

08019114 <__hexnan>:
 8019114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019118:	680b      	ldr	r3, [r1, #0]
 801911a:	6801      	ldr	r1, [r0, #0]
 801911c:	115f      	asrs	r7, r3, #5
 801911e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8019122:	f013 031f 	ands.w	r3, r3, #31
 8019126:	b087      	sub	sp, #28
 8019128:	bf18      	it	ne
 801912a:	3704      	addne	r7, #4
 801912c:	2500      	movs	r5, #0
 801912e:	1f3e      	subs	r6, r7, #4
 8019130:	4682      	mov	sl, r0
 8019132:	4690      	mov	r8, r2
 8019134:	9301      	str	r3, [sp, #4]
 8019136:	f847 5c04 	str.w	r5, [r7, #-4]
 801913a:	46b1      	mov	r9, r6
 801913c:	4634      	mov	r4, r6
 801913e:	9502      	str	r5, [sp, #8]
 8019140:	46ab      	mov	fp, r5
 8019142:	784a      	ldrb	r2, [r1, #1]
 8019144:	1c4b      	adds	r3, r1, #1
 8019146:	9303      	str	r3, [sp, #12]
 8019148:	b342      	cbz	r2, 801919c <__hexnan+0x88>
 801914a:	4610      	mov	r0, r2
 801914c:	9105      	str	r1, [sp, #20]
 801914e:	9204      	str	r2, [sp, #16]
 8019150:	f7ff fd84 	bl	8018c5c <__hexdig_fun>
 8019154:	2800      	cmp	r0, #0
 8019156:	d143      	bne.n	80191e0 <__hexnan+0xcc>
 8019158:	9a04      	ldr	r2, [sp, #16]
 801915a:	9905      	ldr	r1, [sp, #20]
 801915c:	2a20      	cmp	r2, #32
 801915e:	d818      	bhi.n	8019192 <__hexnan+0x7e>
 8019160:	9b02      	ldr	r3, [sp, #8]
 8019162:	459b      	cmp	fp, r3
 8019164:	dd13      	ble.n	801918e <__hexnan+0x7a>
 8019166:	454c      	cmp	r4, r9
 8019168:	d206      	bcs.n	8019178 <__hexnan+0x64>
 801916a:	2d07      	cmp	r5, #7
 801916c:	dc04      	bgt.n	8019178 <__hexnan+0x64>
 801916e:	462a      	mov	r2, r5
 8019170:	4649      	mov	r1, r9
 8019172:	4620      	mov	r0, r4
 8019174:	f7ff ffa8 	bl	80190c8 <L_shift>
 8019178:	4544      	cmp	r4, r8
 801917a:	d944      	bls.n	8019206 <__hexnan+0xf2>
 801917c:	2300      	movs	r3, #0
 801917e:	f1a4 0904 	sub.w	r9, r4, #4
 8019182:	f844 3c04 	str.w	r3, [r4, #-4]
 8019186:	f8cd b008 	str.w	fp, [sp, #8]
 801918a:	464c      	mov	r4, r9
 801918c:	461d      	mov	r5, r3
 801918e:	9903      	ldr	r1, [sp, #12]
 8019190:	e7d7      	b.n	8019142 <__hexnan+0x2e>
 8019192:	2a29      	cmp	r2, #41	; 0x29
 8019194:	d14a      	bne.n	801922c <__hexnan+0x118>
 8019196:	3102      	adds	r1, #2
 8019198:	f8ca 1000 	str.w	r1, [sl]
 801919c:	f1bb 0f00 	cmp.w	fp, #0
 80191a0:	d044      	beq.n	801922c <__hexnan+0x118>
 80191a2:	454c      	cmp	r4, r9
 80191a4:	d206      	bcs.n	80191b4 <__hexnan+0xa0>
 80191a6:	2d07      	cmp	r5, #7
 80191a8:	dc04      	bgt.n	80191b4 <__hexnan+0xa0>
 80191aa:	462a      	mov	r2, r5
 80191ac:	4649      	mov	r1, r9
 80191ae:	4620      	mov	r0, r4
 80191b0:	f7ff ff8a 	bl	80190c8 <L_shift>
 80191b4:	4544      	cmp	r4, r8
 80191b6:	d928      	bls.n	801920a <__hexnan+0xf6>
 80191b8:	4643      	mov	r3, r8
 80191ba:	f854 2b04 	ldr.w	r2, [r4], #4
 80191be:	f843 2b04 	str.w	r2, [r3], #4
 80191c2:	42a6      	cmp	r6, r4
 80191c4:	d2f9      	bcs.n	80191ba <__hexnan+0xa6>
 80191c6:	2200      	movs	r2, #0
 80191c8:	f843 2b04 	str.w	r2, [r3], #4
 80191cc:	429e      	cmp	r6, r3
 80191ce:	d2fb      	bcs.n	80191c8 <__hexnan+0xb4>
 80191d0:	6833      	ldr	r3, [r6, #0]
 80191d2:	b91b      	cbnz	r3, 80191dc <__hexnan+0xc8>
 80191d4:	4546      	cmp	r6, r8
 80191d6:	d127      	bne.n	8019228 <__hexnan+0x114>
 80191d8:	2301      	movs	r3, #1
 80191da:	6033      	str	r3, [r6, #0]
 80191dc:	2005      	movs	r0, #5
 80191de:	e026      	b.n	801922e <__hexnan+0x11a>
 80191e0:	3501      	adds	r5, #1
 80191e2:	2d08      	cmp	r5, #8
 80191e4:	f10b 0b01 	add.w	fp, fp, #1
 80191e8:	dd06      	ble.n	80191f8 <__hexnan+0xe4>
 80191ea:	4544      	cmp	r4, r8
 80191ec:	d9cf      	bls.n	801918e <__hexnan+0x7a>
 80191ee:	2300      	movs	r3, #0
 80191f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80191f4:	2501      	movs	r5, #1
 80191f6:	3c04      	subs	r4, #4
 80191f8:	6822      	ldr	r2, [r4, #0]
 80191fa:	f000 000f 	and.w	r0, r0, #15
 80191fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8019202:	6020      	str	r0, [r4, #0]
 8019204:	e7c3      	b.n	801918e <__hexnan+0x7a>
 8019206:	2508      	movs	r5, #8
 8019208:	e7c1      	b.n	801918e <__hexnan+0x7a>
 801920a:	9b01      	ldr	r3, [sp, #4]
 801920c:	2b00      	cmp	r3, #0
 801920e:	d0df      	beq.n	80191d0 <__hexnan+0xbc>
 8019210:	f04f 32ff 	mov.w	r2, #4294967295
 8019214:	f1c3 0320 	rsb	r3, r3, #32
 8019218:	fa22 f303 	lsr.w	r3, r2, r3
 801921c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8019220:	401a      	ands	r2, r3
 8019222:	f847 2c04 	str.w	r2, [r7, #-4]
 8019226:	e7d3      	b.n	80191d0 <__hexnan+0xbc>
 8019228:	3e04      	subs	r6, #4
 801922a:	e7d1      	b.n	80191d0 <__hexnan+0xbc>
 801922c:	2004      	movs	r0, #4
 801922e:	b007      	add	sp, #28
 8019230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019234 <__locale_ctype_ptr_l>:
 8019234:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8019238:	4770      	bx	lr
	...

0801923c <__locale_ctype_ptr>:
 801923c:	4b04      	ldr	r3, [pc, #16]	; (8019250 <__locale_ctype_ptr+0x14>)
 801923e:	4a05      	ldr	r2, [pc, #20]	; (8019254 <__locale_ctype_ptr+0x18>)
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	6a1b      	ldr	r3, [r3, #32]
 8019244:	2b00      	cmp	r3, #0
 8019246:	bf08      	it	eq
 8019248:	4613      	moveq	r3, r2
 801924a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801924e:	4770      	bx	lr
 8019250:	2000000c 	.word	0x2000000c
 8019254:	20000070 	.word	0x20000070

08019258 <__localeconv_l>:
 8019258:	30f0      	adds	r0, #240	; 0xf0
 801925a:	4770      	bx	lr

0801925c <_localeconv_r>:
 801925c:	4b04      	ldr	r3, [pc, #16]	; (8019270 <_localeconv_r+0x14>)
 801925e:	681b      	ldr	r3, [r3, #0]
 8019260:	6a18      	ldr	r0, [r3, #32]
 8019262:	4b04      	ldr	r3, [pc, #16]	; (8019274 <_localeconv_r+0x18>)
 8019264:	2800      	cmp	r0, #0
 8019266:	bf08      	it	eq
 8019268:	4618      	moveq	r0, r3
 801926a:	30f0      	adds	r0, #240	; 0xf0
 801926c:	4770      	bx	lr
 801926e:	bf00      	nop
 8019270:	2000000c 	.word	0x2000000c
 8019274:	20000070 	.word	0x20000070

08019278 <__ascii_mbtowc>:
 8019278:	b082      	sub	sp, #8
 801927a:	b901      	cbnz	r1, 801927e <__ascii_mbtowc+0x6>
 801927c:	a901      	add	r1, sp, #4
 801927e:	b142      	cbz	r2, 8019292 <__ascii_mbtowc+0x1a>
 8019280:	b14b      	cbz	r3, 8019296 <__ascii_mbtowc+0x1e>
 8019282:	7813      	ldrb	r3, [r2, #0]
 8019284:	600b      	str	r3, [r1, #0]
 8019286:	7812      	ldrb	r2, [r2, #0]
 8019288:	1c10      	adds	r0, r2, #0
 801928a:	bf18      	it	ne
 801928c:	2001      	movne	r0, #1
 801928e:	b002      	add	sp, #8
 8019290:	4770      	bx	lr
 8019292:	4610      	mov	r0, r2
 8019294:	e7fb      	b.n	801928e <__ascii_mbtowc+0x16>
 8019296:	f06f 0001 	mvn.w	r0, #1
 801929a:	e7f8      	b.n	801928e <__ascii_mbtowc+0x16>

0801929c <memcpy>:
 801929c:	b510      	push	{r4, lr}
 801929e:	1e43      	subs	r3, r0, #1
 80192a0:	440a      	add	r2, r1
 80192a2:	4291      	cmp	r1, r2
 80192a4:	d100      	bne.n	80192a8 <memcpy+0xc>
 80192a6:	bd10      	pop	{r4, pc}
 80192a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80192ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80192b0:	e7f7      	b.n	80192a2 <memcpy+0x6>

080192b2 <__malloc_lock>:
 80192b2:	4770      	bx	lr

080192b4 <__malloc_unlock>:
 80192b4:	4770      	bx	lr

080192b6 <_Balloc>:
 80192b6:	b570      	push	{r4, r5, r6, lr}
 80192b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80192ba:	4604      	mov	r4, r0
 80192bc:	460e      	mov	r6, r1
 80192be:	b93d      	cbnz	r5, 80192d0 <_Balloc+0x1a>
 80192c0:	2010      	movs	r0, #16
 80192c2:	f7fc ffa5 	bl	8016210 <malloc>
 80192c6:	6260      	str	r0, [r4, #36]	; 0x24
 80192c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80192cc:	6005      	str	r5, [r0, #0]
 80192ce:	60c5      	str	r5, [r0, #12]
 80192d0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80192d2:	68eb      	ldr	r3, [r5, #12]
 80192d4:	b183      	cbz	r3, 80192f8 <_Balloc+0x42>
 80192d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80192d8:	68db      	ldr	r3, [r3, #12]
 80192da:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80192de:	b9b8      	cbnz	r0, 8019310 <_Balloc+0x5a>
 80192e0:	2101      	movs	r1, #1
 80192e2:	fa01 f506 	lsl.w	r5, r1, r6
 80192e6:	1d6a      	adds	r2, r5, #5
 80192e8:	0092      	lsls	r2, r2, #2
 80192ea:	4620      	mov	r0, r4
 80192ec:	f000 fbe1 	bl	8019ab2 <_calloc_r>
 80192f0:	b160      	cbz	r0, 801930c <_Balloc+0x56>
 80192f2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80192f6:	e00e      	b.n	8019316 <_Balloc+0x60>
 80192f8:	2221      	movs	r2, #33	; 0x21
 80192fa:	2104      	movs	r1, #4
 80192fc:	4620      	mov	r0, r4
 80192fe:	f000 fbd8 	bl	8019ab2 <_calloc_r>
 8019302:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019304:	60e8      	str	r0, [r5, #12]
 8019306:	68db      	ldr	r3, [r3, #12]
 8019308:	2b00      	cmp	r3, #0
 801930a:	d1e4      	bne.n	80192d6 <_Balloc+0x20>
 801930c:	2000      	movs	r0, #0
 801930e:	bd70      	pop	{r4, r5, r6, pc}
 8019310:	6802      	ldr	r2, [r0, #0]
 8019312:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8019316:	2300      	movs	r3, #0
 8019318:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801931c:	e7f7      	b.n	801930e <_Balloc+0x58>

0801931e <_Bfree>:
 801931e:	b570      	push	{r4, r5, r6, lr}
 8019320:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8019322:	4606      	mov	r6, r0
 8019324:	460d      	mov	r5, r1
 8019326:	b93c      	cbnz	r4, 8019338 <_Bfree+0x1a>
 8019328:	2010      	movs	r0, #16
 801932a:	f7fc ff71 	bl	8016210 <malloc>
 801932e:	6270      	str	r0, [r6, #36]	; 0x24
 8019330:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019334:	6004      	str	r4, [r0, #0]
 8019336:	60c4      	str	r4, [r0, #12]
 8019338:	b13d      	cbz	r5, 801934a <_Bfree+0x2c>
 801933a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801933c:	686a      	ldr	r2, [r5, #4]
 801933e:	68db      	ldr	r3, [r3, #12]
 8019340:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019344:	6029      	str	r1, [r5, #0]
 8019346:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801934a:	bd70      	pop	{r4, r5, r6, pc}

0801934c <__multadd>:
 801934c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019350:	690d      	ldr	r5, [r1, #16]
 8019352:	461f      	mov	r7, r3
 8019354:	4606      	mov	r6, r0
 8019356:	460c      	mov	r4, r1
 8019358:	f101 0c14 	add.w	ip, r1, #20
 801935c:	2300      	movs	r3, #0
 801935e:	f8dc 0000 	ldr.w	r0, [ip]
 8019362:	b281      	uxth	r1, r0
 8019364:	fb02 7101 	mla	r1, r2, r1, r7
 8019368:	0c0f      	lsrs	r7, r1, #16
 801936a:	0c00      	lsrs	r0, r0, #16
 801936c:	fb02 7000 	mla	r0, r2, r0, r7
 8019370:	b289      	uxth	r1, r1
 8019372:	3301      	adds	r3, #1
 8019374:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8019378:	429d      	cmp	r5, r3
 801937a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801937e:	f84c 1b04 	str.w	r1, [ip], #4
 8019382:	dcec      	bgt.n	801935e <__multadd+0x12>
 8019384:	b1d7      	cbz	r7, 80193bc <__multadd+0x70>
 8019386:	68a3      	ldr	r3, [r4, #8]
 8019388:	42ab      	cmp	r3, r5
 801938a:	dc12      	bgt.n	80193b2 <__multadd+0x66>
 801938c:	6861      	ldr	r1, [r4, #4]
 801938e:	4630      	mov	r0, r6
 8019390:	3101      	adds	r1, #1
 8019392:	f7ff ff90 	bl	80192b6 <_Balloc>
 8019396:	6922      	ldr	r2, [r4, #16]
 8019398:	3202      	adds	r2, #2
 801939a:	f104 010c 	add.w	r1, r4, #12
 801939e:	4680      	mov	r8, r0
 80193a0:	0092      	lsls	r2, r2, #2
 80193a2:	300c      	adds	r0, #12
 80193a4:	f7ff ff7a 	bl	801929c <memcpy>
 80193a8:	4621      	mov	r1, r4
 80193aa:	4630      	mov	r0, r6
 80193ac:	f7ff ffb7 	bl	801931e <_Bfree>
 80193b0:	4644      	mov	r4, r8
 80193b2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80193b6:	3501      	adds	r5, #1
 80193b8:	615f      	str	r7, [r3, #20]
 80193ba:	6125      	str	r5, [r4, #16]
 80193bc:	4620      	mov	r0, r4
 80193be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080193c2 <__s2b>:
 80193c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80193c6:	460c      	mov	r4, r1
 80193c8:	4615      	mov	r5, r2
 80193ca:	461f      	mov	r7, r3
 80193cc:	2209      	movs	r2, #9
 80193ce:	3308      	adds	r3, #8
 80193d0:	4606      	mov	r6, r0
 80193d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80193d6:	2100      	movs	r1, #0
 80193d8:	2201      	movs	r2, #1
 80193da:	429a      	cmp	r2, r3
 80193dc:	db20      	blt.n	8019420 <__s2b+0x5e>
 80193de:	4630      	mov	r0, r6
 80193e0:	f7ff ff69 	bl	80192b6 <_Balloc>
 80193e4:	9b08      	ldr	r3, [sp, #32]
 80193e6:	6143      	str	r3, [r0, #20]
 80193e8:	2d09      	cmp	r5, #9
 80193ea:	f04f 0301 	mov.w	r3, #1
 80193ee:	6103      	str	r3, [r0, #16]
 80193f0:	dd19      	ble.n	8019426 <__s2b+0x64>
 80193f2:	f104 0809 	add.w	r8, r4, #9
 80193f6:	46c1      	mov	r9, r8
 80193f8:	442c      	add	r4, r5
 80193fa:	f819 3b01 	ldrb.w	r3, [r9], #1
 80193fe:	4601      	mov	r1, r0
 8019400:	3b30      	subs	r3, #48	; 0x30
 8019402:	220a      	movs	r2, #10
 8019404:	4630      	mov	r0, r6
 8019406:	f7ff ffa1 	bl	801934c <__multadd>
 801940a:	45a1      	cmp	r9, r4
 801940c:	d1f5      	bne.n	80193fa <__s2b+0x38>
 801940e:	eb08 0405 	add.w	r4, r8, r5
 8019412:	3c08      	subs	r4, #8
 8019414:	1b2d      	subs	r5, r5, r4
 8019416:	1963      	adds	r3, r4, r5
 8019418:	42bb      	cmp	r3, r7
 801941a:	db07      	blt.n	801942c <__s2b+0x6a>
 801941c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019420:	0052      	lsls	r2, r2, #1
 8019422:	3101      	adds	r1, #1
 8019424:	e7d9      	b.n	80193da <__s2b+0x18>
 8019426:	340a      	adds	r4, #10
 8019428:	2509      	movs	r5, #9
 801942a:	e7f3      	b.n	8019414 <__s2b+0x52>
 801942c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019430:	4601      	mov	r1, r0
 8019432:	3b30      	subs	r3, #48	; 0x30
 8019434:	220a      	movs	r2, #10
 8019436:	4630      	mov	r0, r6
 8019438:	f7ff ff88 	bl	801934c <__multadd>
 801943c:	e7eb      	b.n	8019416 <__s2b+0x54>

0801943e <__hi0bits>:
 801943e:	0c02      	lsrs	r2, r0, #16
 8019440:	0412      	lsls	r2, r2, #16
 8019442:	4603      	mov	r3, r0
 8019444:	b9b2      	cbnz	r2, 8019474 <__hi0bits+0x36>
 8019446:	0403      	lsls	r3, r0, #16
 8019448:	2010      	movs	r0, #16
 801944a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801944e:	bf04      	itt	eq
 8019450:	021b      	lsleq	r3, r3, #8
 8019452:	3008      	addeq	r0, #8
 8019454:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019458:	bf04      	itt	eq
 801945a:	011b      	lsleq	r3, r3, #4
 801945c:	3004      	addeq	r0, #4
 801945e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8019462:	bf04      	itt	eq
 8019464:	009b      	lsleq	r3, r3, #2
 8019466:	3002      	addeq	r0, #2
 8019468:	2b00      	cmp	r3, #0
 801946a:	db06      	blt.n	801947a <__hi0bits+0x3c>
 801946c:	005b      	lsls	r3, r3, #1
 801946e:	d503      	bpl.n	8019478 <__hi0bits+0x3a>
 8019470:	3001      	adds	r0, #1
 8019472:	4770      	bx	lr
 8019474:	2000      	movs	r0, #0
 8019476:	e7e8      	b.n	801944a <__hi0bits+0xc>
 8019478:	2020      	movs	r0, #32
 801947a:	4770      	bx	lr

0801947c <__lo0bits>:
 801947c:	6803      	ldr	r3, [r0, #0]
 801947e:	f013 0207 	ands.w	r2, r3, #7
 8019482:	4601      	mov	r1, r0
 8019484:	d00b      	beq.n	801949e <__lo0bits+0x22>
 8019486:	07da      	lsls	r2, r3, #31
 8019488:	d423      	bmi.n	80194d2 <__lo0bits+0x56>
 801948a:	0798      	lsls	r0, r3, #30
 801948c:	bf49      	itett	mi
 801948e:	085b      	lsrmi	r3, r3, #1
 8019490:	089b      	lsrpl	r3, r3, #2
 8019492:	2001      	movmi	r0, #1
 8019494:	600b      	strmi	r3, [r1, #0]
 8019496:	bf5c      	itt	pl
 8019498:	600b      	strpl	r3, [r1, #0]
 801949a:	2002      	movpl	r0, #2
 801949c:	4770      	bx	lr
 801949e:	b298      	uxth	r0, r3
 80194a0:	b9a8      	cbnz	r0, 80194ce <__lo0bits+0x52>
 80194a2:	0c1b      	lsrs	r3, r3, #16
 80194a4:	2010      	movs	r0, #16
 80194a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80194aa:	bf04      	itt	eq
 80194ac:	0a1b      	lsreq	r3, r3, #8
 80194ae:	3008      	addeq	r0, #8
 80194b0:	071a      	lsls	r2, r3, #28
 80194b2:	bf04      	itt	eq
 80194b4:	091b      	lsreq	r3, r3, #4
 80194b6:	3004      	addeq	r0, #4
 80194b8:	079a      	lsls	r2, r3, #30
 80194ba:	bf04      	itt	eq
 80194bc:	089b      	lsreq	r3, r3, #2
 80194be:	3002      	addeq	r0, #2
 80194c0:	07da      	lsls	r2, r3, #31
 80194c2:	d402      	bmi.n	80194ca <__lo0bits+0x4e>
 80194c4:	085b      	lsrs	r3, r3, #1
 80194c6:	d006      	beq.n	80194d6 <__lo0bits+0x5a>
 80194c8:	3001      	adds	r0, #1
 80194ca:	600b      	str	r3, [r1, #0]
 80194cc:	4770      	bx	lr
 80194ce:	4610      	mov	r0, r2
 80194d0:	e7e9      	b.n	80194a6 <__lo0bits+0x2a>
 80194d2:	2000      	movs	r0, #0
 80194d4:	4770      	bx	lr
 80194d6:	2020      	movs	r0, #32
 80194d8:	4770      	bx	lr

080194da <__i2b>:
 80194da:	b510      	push	{r4, lr}
 80194dc:	460c      	mov	r4, r1
 80194de:	2101      	movs	r1, #1
 80194e0:	f7ff fee9 	bl	80192b6 <_Balloc>
 80194e4:	2201      	movs	r2, #1
 80194e6:	6144      	str	r4, [r0, #20]
 80194e8:	6102      	str	r2, [r0, #16]
 80194ea:	bd10      	pop	{r4, pc}

080194ec <__multiply>:
 80194ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194f0:	4614      	mov	r4, r2
 80194f2:	690a      	ldr	r2, [r1, #16]
 80194f4:	6923      	ldr	r3, [r4, #16]
 80194f6:	429a      	cmp	r2, r3
 80194f8:	bfb8      	it	lt
 80194fa:	460b      	movlt	r3, r1
 80194fc:	4688      	mov	r8, r1
 80194fe:	bfbc      	itt	lt
 8019500:	46a0      	movlt	r8, r4
 8019502:	461c      	movlt	r4, r3
 8019504:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019508:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801950c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019510:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019514:	eb07 0609 	add.w	r6, r7, r9
 8019518:	42b3      	cmp	r3, r6
 801951a:	bfb8      	it	lt
 801951c:	3101      	addlt	r1, #1
 801951e:	f7ff feca 	bl	80192b6 <_Balloc>
 8019522:	f100 0514 	add.w	r5, r0, #20
 8019526:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801952a:	462b      	mov	r3, r5
 801952c:	2200      	movs	r2, #0
 801952e:	4573      	cmp	r3, lr
 8019530:	d316      	bcc.n	8019560 <__multiply+0x74>
 8019532:	f104 0214 	add.w	r2, r4, #20
 8019536:	f108 0114 	add.w	r1, r8, #20
 801953a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801953e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8019542:	9300      	str	r3, [sp, #0]
 8019544:	9b00      	ldr	r3, [sp, #0]
 8019546:	9201      	str	r2, [sp, #4]
 8019548:	4293      	cmp	r3, r2
 801954a:	d80c      	bhi.n	8019566 <__multiply+0x7a>
 801954c:	2e00      	cmp	r6, #0
 801954e:	dd03      	ble.n	8019558 <__multiply+0x6c>
 8019550:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8019554:	2b00      	cmp	r3, #0
 8019556:	d05d      	beq.n	8019614 <__multiply+0x128>
 8019558:	6106      	str	r6, [r0, #16]
 801955a:	b003      	add	sp, #12
 801955c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019560:	f843 2b04 	str.w	r2, [r3], #4
 8019564:	e7e3      	b.n	801952e <__multiply+0x42>
 8019566:	f8b2 b000 	ldrh.w	fp, [r2]
 801956a:	f1bb 0f00 	cmp.w	fp, #0
 801956e:	d023      	beq.n	80195b8 <__multiply+0xcc>
 8019570:	4689      	mov	r9, r1
 8019572:	46ac      	mov	ip, r5
 8019574:	f04f 0800 	mov.w	r8, #0
 8019578:	f859 4b04 	ldr.w	r4, [r9], #4
 801957c:	f8dc a000 	ldr.w	sl, [ip]
 8019580:	b2a3      	uxth	r3, r4
 8019582:	fa1f fa8a 	uxth.w	sl, sl
 8019586:	fb0b a303 	mla	r3, fp, r3, sl
 801958a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801958e:	f8dc 4000 	ldr.w	r4, [ip]
 8019592:	4443      	add	r3, r8
 8019594:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8019598:	fb0b 840a 	mla	r4, fp, sl, r8
 801959c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80195a0:	46e2      	mov	sl, ip
 80195a2:	b29b      	uxth	r3, r3
 80195a4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80195a8:	454f      	cmp	r7, r9
 80195aa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80195ae:	f84a 3b04 	str.w	r3, [sl], #4
 80195b2:	d82b      	bhi.n	801960c <__multiply+0x120>
 80195b4:	f8cc 8004 	str.w	r8, [ip, #4]
 80195b8:	9b01      	ldr	r3, [sp, #4]
 80195ba:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80195be:	3204      	adds	r2, #4
 80195c0:	f1ba 0f00 	cmp.w	sl, #0
 80195c4:	d020      	beq.n	8019608 <__multiply+0x11c>
 80195c6:	682b      	ldr	r3, [r5, #0]
 80195c8:	4689      	mov	r9, r1
 80195ca:	46a8      	mov	r8, r5
 80195cc:	f04f 0b00 	mov.w	fp, #0
 80195d0:	f8b9 c000 	ldrh.w	ip, [r9]
 80195d4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80195d8:	fb0a 440c 	mla	r4, sl, ip, r4
 80195dc:	445c      	add	r4, fp
 80195de:	46c4      	mov	ip, r8
 80195e0:	b29b      	uxth	r3, r3
 80195e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80195e6:	f84c 3b04 	str.w	r3, [ip], #4
 80195ea:	f859 3b04 	ldr.w	r3, [r9], #4
 80195ee:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80195f2:	0c1b      	lsrs	r3, r3, #16
 80195f4:	fb0a b303 	mla	r3, sl, r3, fp
 80195f8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80195fc:	454f      	cmp	r7, r9
 80195fe:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8019602:	d805      	bhi.n	8019610 <__multiply+0x124>
 8019604:	f8c8 3004 	str.w	r3, [r8, #4]
 8019608:	3504      	adds	r5, #4
 801960a:	e79b      	b.n	8019544 <__multiply+0x58>
 801960c:	46d4      	mov	ip, sl
 801960e:	e7b3      	b.n	8019578 <__multiply+0x8c>
 8019610:	46e0      	mov	r8, ip
 8019612:	e7dd      	b.n	80195d0 <__multiply+0xe4>
 8019614:	3e01      	subs	r6, #1
 8019616:	e799      	b.n	801954c <__multiply+0x60>

08019618 <__pow5mult>:
 8019618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801961c:	4615      	mov	r5, r2
 801961e:	f012 0203 	ands.w	r2, r2, #3
 8019622:	4606      	mov	r6, r0
 8019624:	460f      	mov	r7, r1
 8019626:	d007      	beq.n	8019638 <__pow5mult+0x20>
 8019628:	3a01      	subs	r2, #1
 801962a:	4c21      	ldr	r4, [pc, #132]	; (80196b0 <__pow5mult+0x98>)
 801962c:	2300      	movs	r3, #0
 801962e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019632:	f7ff fe8b 	bl	801934c <__multadd>
 8019636:	4607      	mov	r7, r0
 8019638:	10ad      	asrs	r5, r5, #2
 801963a:	d035      	beq.n	80196a8 <__pow5mult+0x90>
 801963c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801963e:	b93c      	cbnz	r4, 8019650 <__pow5mult+0x38>
 8019640:	2010      	movs	r0, #16
 8019642:	f7fc fde5 	bl	8016210 <malloc>
 8019646:	6270      	str	r0, [r6, #36]	; 0x24
 8019648:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801964c:	6004      	str	r4, [r0, #0]
 801964e:	60c4      	str	r4, [r0, #12]
 8019650:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019654:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019658:	b94c      	cbnz	r4, 801966e <__pow5mult+0x56>
 801965a:	f240 2171 	movw	r1, #625	; 0x271
 801965e:	4630      	mov	r0, r6
 8019660:	f7ff ff3b 	bl	80194da <__i2b>
 8019664:	2300      	movs	r3, #0
 8019666:	f8c8 0008 	str.w	r0, [r8, #8]
 801966a:	4604      	mov	r4, r0
 801966c:	6003      	str	r3, [r0, #0]
 801966e:	f04f 0800 	mov.w	r8, #0
 8019672:	07eb      	lsls	r3, r5, #31
 8019674:	d50a      	bpl.n	801968c <__pow5mult+0x74>
 8019676:	4639      	mov	r1, r7
 8019678:	4622      	mov	r2, r4
 801967a:	4630      	mov	r0, r6
 801967c:	f7ff ff36 	bl	80194ec <__multiply>
 8019680:	4639      	mov	r1, r7
 8019682:	4681      	mov	r9, r0
 8019684:	4630      	mov	r0, r6
 8019686:	f7ff fe4a 	bl	801931e <_Bfree>
 801968a:	464f      	mov	r7, r9
 801968c:	106d      	asrs	r5, r5, #1
 801968e:	d00b      	beq.n	80196a8 <__pow5mult+0x90>
 8019690:	6820      	ldr	r0, [r4, #0]
 8019692:	b938      	cbnz	r0, 80196a4 <__pow5mult+0x8c>
 8019694:	4622      	mov	r2, r4
 8019696:	4621      	mov	r1, r4
 8019698:	4630      	mov	r0, r6
 801969a:	f7ff ff27 	bl	80194ec <__multiply>
 801969e:	6020      	str	r0, [r4, #0]
 80196a0:	f8c0 8000 	str.w	r8, [r0]
 80196a4:	4604      	mov	r4, r0
 80196a6:	e7e4      	b.n	8019672 <__pow5mult+0x5a>
 80196a8:	4638      	mov	r0, r7
 80196aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80196ae:	bf00      	nop
 80196b0:	0801ae08 	.word	0x0801ae08

080196b4 <__lshift>:
 80196b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80196b8:	460c      	mov	r4, r1
 80196ba:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80196be:	6923      	ldr	r3, [r4, #16]
 80196c0:	6849      	ldr	r1, [r1, #4]
 80196c2:	eb0a 0903 	add.w	r9, sl, r3
 80196c6:	68a3      	ldr	r3, [r4, #8]
 80196c8:	4607      	mov	r7, r0
 80196ca:	4616      	mov	r6, r2
 80196cc:	f109 0501 	add.w	r5, r9, #1
 80196d0:	42ab      	cmp	r3, r5
 80196d2:	db32      	blt.n	801973a <__lshift+0x86>
 80196d4:	4638      	mov	r0, r7
 80196d6:	f7ff fdee 	bl	80192b6 <_Balloc>
 80196da:	2300      	movs	r3, #0
 80196dc:	4680      	mov	r8, r0
 80196de:	f100 0114 	add.w	r1, r0, #20
 80196e2:	461a      	mov	r2, r3
 80196e4:	4553      	cmp	r3, sl
 80196e6:	db2b      	blt.n	8019740 <__lshift+0x8c>
 80196e8:	6920      	ldr	r0, [r4, #16]
 80196ea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80196ee:	f104 0314 	add.w	r3, r4, #20
 80196f2:	f016 021f 	ands.w	r2, r6, #31
 80196f6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80196fa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80196fe:	d025      	beq.n	801974c <__lshift+0x98>
 8019700:	f1c2 0e20 	rsb	lr, r2, #32
 8019704:	2000      	movs	r0, #0
 8019706:	681e      	ldr	r6, [r3, #0]
 8019708:	468a      	mov	sl, r1
 801970a:	4096      	lsls	r6, r2
 801970c:	4330      	orrs	r0, r6
 801970e:	f84a 0b04 	str.w	r0, [sl], #4
 8019712:	f853 0b04 	ldr.w	r0, [r3], #4
 8019716:	459c      	cmp	ip, r3
 8019718:	fa20 f00e 	lsr.w	r0, r0, lr
 801971c:	d814      	bhi.n	8019748 <__lshift+0x94>
 801971e:	6048      	str	r0, [r1, #4]
 8019720:	b108      	cbz	r0, 8019726 <__lshift+0x72>
 8019722:	f109 0502 	add.w	r5, r9, #2
 8019726:	3d01      	subs	r5, #1
 8019728:	4638      	mov	r0, r7
 801972a:	f8c8 5010 	str.w	r5, [r8, #16]
 801972e:	4621      	mov	r1, r4
 8019730:	f7ff fdf5 	bl	801931e <_Bfree>
 8019734:	4640      	mov	r0, r8
 8019736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801973a:	3101      	adds	r1, #1
 801973c:	005b      	lsls	r3, r3, #1
 801973e:	e7c7      	b.n	80196d0 <__lshift+0x1c>
 8019740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8019744:	3301      	adds	r3, #1
 8019746:	e7cd      	b.n	80196e4 <__lshift+0x30>
 8019748:	4651      	mov	r1, sl
 801974a:	e7dc      	b.n	8019706 <__lshift+0x52>
 801974c:	3904      	subs	r1, #4
 801974e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019752:	f841 2f04 	str.w	r2, [r1, #4]!
 8019756:	459c      	cmp	ip, r3
 8019758:	d8f9      	bhi.n	801974e <__lshift+0x9a>
 801975a:	e7e4      	b.n	8019726 <__lshift+0x72>

0801975c <__mcmp>:
 801975c:	6903      	ldr	r3, [r0, #16]
 801975e:	690a      	ldr	r2, [r1, #16]
 8019760:	1a9b      	subs	r3, r3, r2
 8019762:	b530      	push	{r4, r5, lr}
 8019764:	d10c      	bne.n	8019780 <__mcmp+0x24>
 8019766:	0092      	lsls	r2, r2, #2
 8019768:	3014      	adds	r0, #20
 801976a:	3114      	adds	r1, #20
 801976c:	1884      	adds	r4, r0, r2
 801976e:	4411      	add	r1, r2
 8019770:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8019774:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8019778:	4295      	cmp	r5, r2
 801977a:	d003      	beq.n	8019784 <__mcmp+0x28>
 801977c:	d305      	bcc.n	801978a <__mcmp+0x2e>
 801977e:	2301      	movs	r3, #1
 8019780:	4618      	mov	r0, r3
 8019782:	bd30      	pop	{r4, r5, pc}
 8019784:	42a0      	cmp	r0, r4
 8019786:	d3f3      	bcc.n	8019770 <__mcmp+0x14>
 8019788:	e7fa      	b.n	8019780 <__mcmp+0x24>
 801978a:	f04f 33ff 	mov.w	r3, #4294967295
 801978e:	e7f7      	b.n	8019780 <__mcmp+0x24>

08019790 <__mdiff>:
 8019790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019794:	460d      	mov	r5, r1
 8019796:	4607      	mov	r7, r0
 8019798:	4611      	mov	r1, r2
 801979a:	4628      	mov	r0, r5
 801979c:	4614      	mov	r4, r2
 801979e:	f7ff ffdd 	bl	801975c <__mcmp>
 80197a2:	1e06      	subs	r6, r0, #0
 80197a4:	d108      	bne.n	80197b8 <__mdiff+0x28>
 80197a6:	4631      	mov	r1, r6
 80197a8:	4638      	mov	r0, r7
 80197aa:	f7ff fd84 	bl	80192b6 <_Balloc>
 80197ae:	2301      	movs	r3, #1
 80197b0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80197b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197b8:	bfa4      	itt	ge
 80197ba:	4623      	movge	r3, r4
 80197bc:	462c      	movge	r4, r5
 80197be:	4638      	mov	r0, r7
 80197c0:	6861      	ldr	r1, [r4, #4]
 80197c2:	bfa6      	itte	ge
 80197c4:	461d      	movge	r5, r3
 80197c6:	2600      	movge	r6, #0
 80197c8:	2601      	movlt	r6, #1
 80197ca:	f7ff fd74 	bl	80192b6 <_Balloc>
 80197ce:	692b      	ldr	r3, [r5, #16]
 80197d0:	60c6      	str	r6, [r0, #12]
 80197d2:	6926      	ldr	r6, [r4, #16]
 80197d4:	f105 0914 	add.w	r9, r5, #20
 80197d8:	f104 0214 	add.w	r2, r4, #20
 80197dc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80197e0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80197e4:	f100 0514 	add.w	r5, r0, #20
 80197e8:	f04f 0e00 	mov.w	lr, #0
 80197ec:	f852 ab04 	ldr.w	sl, [r2], #4
 80197f0:	f859 4b04 	ldr.w	r4, [r9], #4
 80197f4:	fa1e f18a 	uxtah	r1, lr, sl
 80197f8:	b2a3      	uxth	r3, r4
 80197fa:	1ac9      	subs	r1, r1, r3
 80197fc:	0c23      	lsrs	r3, r4, #16
 80197fe:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8019802:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8019806:	b289      	uxth	r1, r1
 8019808:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801980c:	45c8      	cmp	r8, r9
 801980e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8019812:	4694      	mov	ip, r2
 8019814:	f845 3b04 	str.w	r3, [r5], #4
 8019818:	d8e8      	bhi.n	80197ec <__mdiff+0x5c>
 801981a:	45bc      	cmp	ip, r7
 801981c:	d304      	bcc.n	8019828 <__mdiff+0x98>
 801981e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8019822:	b183      	cbz	r3, 8019846 <__mdiff+0xb6>
 8019824:	6106      	str	r6, [r0, #16]
 8019826:	e7c5      	b.n	80197b4 <__mdiff+0x24>
 8019828:	f85c 1b04 	ldr.w	r1, [ip], #4
 801982c:	fa1e f381 	uxtah	r3, lr, r1
 8019830:	141a      	asrs	r2, r3, #16
 8019832:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019836:	b29b      	uxth	r3, r3
 8019838:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801983c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8019840:	f845 3b04 	str.w	r3, [r5], #4
 8019844:	e7e9      	b.n	801981a <__mdiff+0x8a>
 8019846:	3e01      	subs	r6, #1
 8019848:	e7e9      	b.n	801981e <__mdiff+0x8e>
	...

0801984c <__ulp>:
 801984c:	4b12      	ldr	r3, [pc, #72]	; (8019898 <__ulp+0x4c>)
 801984e:	ee10 2a90 	vmov	r2, s1
 8019852:	401a      	ands	r2, r3
 8019854:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8019858:	2b00      	cmp	r3, #0
 801985a:	dd04      	ble.n	8019866 <__ulp+0x1a>
 801985c:	2000      	movs	r0, #0
 801985e:	4619      	mov	r1, r3
 8019860:	ec41 0b10 	vmov	d0, r0, r1
 8019864:	4770      	bx	lr
 8019866:	425b      	negs	r3, r3
 8019868:	151b      	asrs	r3, r3, #20
 801986a:	2b13      	cmp	r3, #19
 801986c:	f04f 0000 	mov.w	r0, #0
 8019870:	f04f 0100 	mov.w	r1, #0
 8019874:	dc04      	bgt.n	8019880 <__ulp+0x34>
 8019876:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801987a:	fa42 f103 	asr.w	r1, r2, r3
 801987e:	e7ef      	b.n	8019860 <__ulp+0x14>
 8019880:	3b14      	subs	r3, #20
 8019882:	2b1e      	cmp	r3, #30
 8019884:	f04f 0201 	mov.w	r2, #1
 8019888:	bfda      	itte	le
 801988a:	f1c3 031f 	rsble	r3, r3, #31
 801988e:	fa02 f303 	lslle.w	r3, r2, r3
 8019892:	4613      	movgt	r3, r2
 8019894:	4618      	mov	r0, r3
 8019896:	e7e3      	b.n	8019860 <__ulp+0x14>
 8019898:	7ff00000 	.word	0x7ff00000

0801989c <__b2d>:
 801989c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801989e:	6905      	ldr	r5, [r0, #16]
 80198a0:	f100 0714 	add.w	r7, r0, #20
 80198a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80198a8:	1f2e      	subs	r6, r5, #4
 80198aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80198ae:	4620      	mov	r0, r4
 80198b0:	f7ff fdc5 	bl	801943e <__hi0bits>
 80198b4:	f1c0 0320 	rsb	r3, r0, #32
 80198b8:	280a      	cmp	r0, #10
 80198ba:	600b      	str	r3, [r1, #0]
 80198bc:	f8df c074 	ldr.w	ip, [pc, #116]	; 8019934 <__b2d+0x98>
 80198c0:	dc14      	bgt.n	80198ec <__b2d+0x50>
 80198c2:	f1c0 0e0b 	rsb	lr, r0, #11
 80198c6:	fa24 f10e 	lsr.w	r1, r4, lr
 80198ca:	42b7      	cmp	r7, r6
 80198cc:	ea41 030c 	orr.w	r3, r1, ip
 80198d0:	bf34      	ite	cc
 80198d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80198d6:	2100      	movcs	r1, #0
 80198d8:	3015      	adds	r0, #21
 80198da:	fa04 f000 	lsl.w	r0, r4, r0
 80198de:	fa21 f10e 	lsr.w	r1, r1, lr
 80198e2:	ea40 0201 	orr.w	r2, r0, r1
 80198e6:	ec43 2b10 	vmov	d0, r2, r3
 80198ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80198ec:	42b7      	cmp	r7, r6
 80198ee:	bf3a      	itte	cc
 80198f0:	f1a5 0608 	subcc.w	r6, r5, #8
 80198f4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80198f8:	2100      	movcs	r1, #0
 80198fa:	380b      	subs	r0, #11
 80198fc:	d015      	beq.n	801992a <__b2d+0x8e>
 80198fe:	4084      	lsls	r4, r0
 8019900:	f1c0 0520 	rsb	r5, r0, #32
 8019904:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8019908:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801990c:	42be      	cmp	r6, r7
 801990e:	fa21 fc05 	lsr.w	ip, r1, r5
 8019912:	ea44 030c 	orr.w	r3, r4, ip
 8019916:	bf8c      	ite	hi
 8019918:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801991c:	2400      	movls	r4, #0
 801991e:	fa01 f000 	lsl.w	r0, r1, r0
 8019922:	40ec      	lsrs	r4, r5
 8019924:	ea40 0204 	orr.w	r2, r0, r4
 8019928:	e7dd      	b.n	80198e6 <__b2d+0x4a>
 801992a:	ea44 030c 	orr.w	r3, r4, ip
 801992e:	460a      	mov	r2, r1
 8019930:	e7d9      	b.n	80198e6 <__b2d+0x4a>
 8019932:	bf00      	nop
 8019934:	3ff00000 	.word	0x3ff00000

08019938 <__d2b>:
 8019938:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801993c:	460e      	mov	r6, r1
 801993e:	2101      	movs	r1, #1
 8019940:	ec59 8b10 	vmov	r8, r9, d0
 8019944:	4615      	mov	r5, r2
 8019946:	f7ff fcb6 	bl	80192b6 <_Balloc>
 801994a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801994e:	4607      	mov	r7, r0
 8019950:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019954:	bb34      	cbnz	r4, 80199a4 <__d2b+0x6c>
 8019956:	9301      	str	r3, [sp, #4]
 8019958:	f1b8 0300 	subs.w	r3, r8, #0
 801995c:	d027      	beq.n	80199ae <__d2b+0x76>
 801995e:	a802      	add	r0, sp, #8
 8019960:	f840 3d08 	str.w	r3, [r0, #-8]!
 8019964:	f7ff fd8a 	bl	801947c <__lo0bits>
 8019968:	9900      	ldr	r1, [sp, #0]
 801996a:	b1f0      	cbz	r0, 80199aa <__d2b+0x72>
 801996c:	9a01      	ldr	r2, [sp, #4]
 801996e:	f1c0 0320 	rsb	r3, r0, #32
 8019972:	fa02 f303 	lsl.w	r3, r2, r3
 8019976:	430b      	orrs	r3, r1
 8019978:	40c2      	lsrs	r2, r0
 801997a:	617b      	str	r3, [r7, #20]
 801997c:	9201      	str	r2, [sp, #4]
 801997e:	9b01      	ldr	r3, [sp, #4]
 8019980:	61bb      	str	r3, [r7, #24]
 8019982:	2b00      	cmp	r3, #0
 8019984:	bf14      	ite	ne
 8019986:	2102      	movne	r1, #2
 8019988:	2101      	moveq	r1, #1
 801998a:	6139      	str	r1, [r7, #16]
 801998c:	b1c4      	cbz	r4, 80199c0 <__d2b+0x88>
 801998e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8019992:	4404      	add	r4, r0
 8019994:	6034      	str	r4, [r6, #0]
 8019996:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801999a:	6028      	str	r0, [r5, #0]
 801999c:	4638      	mov	r0, r7
 801999e:	b003      	add	sp, #12
 80199a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80199a8:	e7d5      	b.n	8019956 <__d2b+0x1e>
 80199aa:	6179      	str	r1, [r7, #20]
 80199ac:	e7e7      	b.n	801997e <__d2b+0x46>
 80199ae:	a801      	add	r0, sp, #4
 80199b0:	f7ff fd64 	bl	801947c <__lo0bits>
 80199b4:	9b01      	ldr	r3, [sp, #4]
 80199b6:	617b      	str	r3, [r7, #20]
 80199b8:	2101      	movs	r1, #1
 80199ba:	6139      	str	r1, [r7, #16]
 80199bc:	3020      	adds	r0, #32
 80199be:	e7e5      	b.n	801998c <__d2b+0x54>
 80199c0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80199c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80199c8:	6030      	str	r0, [r6, #0]
 80199ca:	6918      	ldr	r0, [r3, #16]
 80199cc:	f7ff fd37 	bl	801943e <__hi0bits>
 80199d0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80199d4:	e7e1      	b.n	801999a <__d2b+0x62>

080199d6 <__ratio>:
 80199d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199da:	4688      	mov	r8, r1
 80199dc:	4669      	mov	r1, sp
 80199de:	4681      	mov	r9, r0
 80199e0:	f7ff ff5c 	bl	801989c <__b2d>
 80199e4:	a901      	add	r1, sp, #4
 80199e6:	4640      	mov	r0, r8
 80199e8:	ec57 6b10 	vmov	r6, r7, d0
 80199ec:	f7ff ff56 	bl	801989c <__b2d>
 80199f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80199f4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80199f8:	eba3 0c02 	sub.w	ip, r3, r2
 80199fc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019a00:	1a9b      	subs	r3, r3, r2
 8019a02:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019a06:	ec5b ab10 	vmov	sl, fp, d0
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	bfce      	itee	gt
 8019a0e:	463a      	movgt	r2, r7
 8019a10:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019a14:	465a      	movle	r2, fp
 8019a16:	4659      	mov	r1, fp
 8019a18:	463d      	mov	r5, r7
 8019a1a:	bfd4      	ite	le
 8019a1c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8019a20:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8019a24:	4630      	mov	r0, r6
 8019a26:	ee10 2a10 	vmov	r2, s0
 8019a2a:	460b      	mov	r3, r1
 8019a2c:	4629      	mov	r1, r5
 8019a2e:	f7e6 ff25 	bl	800087c <__aeabi_ddiv>
 8019a32:	ec41 0b10 	vmov	d0, r0, r1
 8019a36:	b003      	add	sp, #12
 8019a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019a3c <__copybits>:
 8019a3c:	3901      	subs	r1, #1
 8019a3e:	b510      	push	{r4, lr}
 8019a40:	1149      	asrs	r1, r1, #5
 8019a42:	6914      	ldr	r4, [r2, #16]
 8019a44:	3101      	adds	r1, #1
 8019a46:	f102 0314 	add.w	r3, r2, #20
 8019a4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019a4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019a52:	42a3      	cmp	r3, r4
 8019a54:	4602      	mov	r2, r0
 8019a56:	d303      	bcc.n	8019a60 <__copybits+0x24>
 8019a58:	2300      	movs	r3, #0
 8019a5a:	428a      	cmp	r2, r1
 8019a5c:	d305      	bcc.n	8019a6a <__copybits+0x2e>
 8019a5e:	bd10      	pop	{r4, pc}
 8019a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a64:	f840 2b04 	str.w	r2, [r0], #4
 8019a68:	e7f3      	b.n	8019a52 <__copybits+0x16>
 8019a6a:	f842 3b04 	str.w	r3, [r2], #4
 8019a6e:	e7f4      	b.n	8019a5a <__copybits+0x1e>

08019a70 <__any_on>:
 8019a70:	f100 0214 	add.w	r2, r0, #20
 8019a74:	6900      	ldr	r0, [r0, #16]
 8019a76:	114b      	asrs	r3, r1, #5
 8019a78:	4298      	cmp	r0, r3
 8019a7a:	b510      	push	{r4, lr}
 8019a7c:	db11      	blt.n	8019aa2 <__any_on+0x32>
 8019a7e:	dd0a      	ble.n	8019a96 <__any_on+0x26>
 8019a80:	f011 011f 	ands.w	r1, r1, #31
 8019a84:	d007      	beq.n	8019a96 <__any_on+0x26>
 8019a86:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019a8a:	fa24 f001 	lsr.w	r0, r4, r1
 8019a8e:	fa00 f101 	lsl.w	r1, r0, r1
 8019a92:	428c      	cmp	r4, r1
 8019a94:	d10b      	bne.n	8019aae <__any_on+0x3e>
 8019a96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019a9a:	4293      	cmp	r3, r2
 8019a9c:	d803      	bhi.n	8019aa6 <__any_on+0x36>
 8019a9e:	2000      	movs	r0, #0
 8019aa0:	bd10      	pop	{r4, pc}
 8019aa2:	4603      	mov	r3, r0
 8019aa4:	e7f7      	b.n	8019a96 <__any_on+0x26>
 8019aa6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019aaa:	2900      	cmp	r1, #0
 8019aac:	d0f5      	beq.n	8019a9a <__any_on+0x2a>
 8019aae:	2001      	movs	r0, #1
 8019ab0:	e7f6      	b.n	8019aa0 <__any_on+0x30>

08019ab2 <_calloc_r>:
 8019ab2:	b538      	push	{r3, r4, r5, lr}
 8019ab4:	fb02 f401 	mul.w	r4, r2, r1
 8019ab8:	4621      	mov	r1, r4
 8019aba:	f7fc fc07 	bl	80162cc <_malloc_r>
 8019abe:	4605      	mov	r5, r0
 8019ac0:	b118      	cbz	r0, 8019aca <_calloc_r+0x18>
 8019ac2:	4622      	mov	r2, r4
 8019ac4:	2100      	movs	r1, #0
 8019ac6:	f7fc fbab 	bl	8016220 <memset>
 8019aca:	4628      	mov	r0, r5
 8019acc:	bd38      	pop	{r3, r4, r5, pc}

08019ace <__ssputs_r>:
 8019ace:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ad2:	688e      	ldr	r6, [r1, #8]
 8019ad4:	429e      	cmp	r6, r3
 8019ad6:	4682      	mov	sl, r0
 8019ad8:	460c      	mov	r4, r1
 8019ada:	4690      	mov	r8, r2
 8019adc:	4699      	mov	r9, r3
 8019ade:	d837      	bhi.n	8019b50 <__ssputs_r+0x82>
 8019ae0:	898a      	ldrh	r2, [r1, #12]
 8019ae2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019ae6:	d031      	beq.n	8019b4c <__ssputs_r+0x7e>
 8019ae8:	6825      	ldr	r5, [r4, #0]
 8019aea:	6909      	ldr	r1, [r1, #16]
 8019aec:	1a6f      	subs	r7, r5, r1
 8019aee:	6965      	ldr	r5, [r4, #20]
 8019af0:	2302      	movs	r3, #2
 8019af2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019af6:	fb95 f5f3 	sdiv	r5, r5, r3
 8019afa:	f109 0301 	add.w	r3, r9, #1
 8019afe:	443b      	add	r3, r7
 8019b00:	429d      	cmp	r5, r3
 8019b02:	bf38      	it	cc
 8019b04:	461d      	movcc	r5, r3
 8019b06:	0553      	lsls	r3, r2, #21
 8019b08:	d530      	bpl.n	8019b6c <__ssputs_r+0x9e>
 8019b0a:	4629      	mov	r1, r5
 8019b0c:	f7fc fbde 	bl	80162cc <_malloc_r>
 8019b10:	4606      	mov	r6, r0
 8019b12:	b950      	cbnz	r0, 8019b2a <__ssputs_r+0x5c>
 8019b14:	230c      	movs	r3, #12
 8019b16:	f8ca 3000 	str.w	r3, [sl]
 8019b1a:	89a3      	ldrh	r3, [r4, #12]
 8019b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019b20:	81a3      	strh	r3, [r4, #12]
 8019b22:	f04f 30ff 	mov.w	r0, #4294967295
 8019b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b2a:	463a      	mov	r2, r7
 8019b2c:	6921      	ldr	r1, [r4, #16]
 8019b2e:	f7ff fbb5 	bl	801929c <memcpy>
 8019b32:	89a3      	ldrh	r3, [r4, #12]
 8019b34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019b3c:	81a3      	strh	r3, [r4, #12]
 8019b3e:	6126      	str	r6, [r4, #16]
 8019b40:	6165      	str	r5, [r4, #20]
 8019b42:	443e      	add	r6, r7
 8019b44:	1bed      	subs	r5, r5, r7
 8019b46:	6026      	str	r6, [r4, #0]
 8019b48:	60a5      	str	r5, [r4, #8]
 8019b4a:	464e      	mov	r6, r9
 8019b4c:	454e      	cmp	r6, r9
 8019b4e:	d900      	bls.n	8019b52 <__ssputs_r+0x84>
 8019b50:	464e      	mov	r6, r9
 8019b52:	4632      	mov	r2, r6
 8019b54:	4641      	mov	r1, r8
 8019b56:	6820      	ldr	r0, [r4, #0]
 8019b58:	f000 fd25 	bl	801a5a6 <memmove>
 8019b5c:	68a3      	ldr	r3, [r4, #8]
 8019b5e:	1b9b      	subs	r3, r3, r6
 8019b60:	60a3      	str	r3, [r4, #8]
 8019b62:	6823      	ldr	r3, [r4, #0]
 8019b64:	441e      	add	r6, r3
 8019b66:	6026      	str	r6, [r4, #0]
 8019b68:	2000      	movs	r0, #0
 8019b6a:	e7dc      	b.n	8019b26 <__ssputs_r+0x58>
 8019b6c:	462a      	mov	r2, r5
 8019b6e:	f000 fd33 	bl	801a5d8 <_realloc_r>
 8019b72:	4606      	mov	r6, r0
 8019b74:	2800      	cmp	r0, #0
 8019b76:	d1e2      	bne.n	8019b3e <__ssputs_r+0x70>
 8019b78:	6921      	ldr	r1, [r4, #16]
 8019b7a:	4650      	mov	r0, sl
 8019b7c:	f7fc fb58 	bl	8016230 <_free_r>
 8019b80:	e7c8      	b.n	8019b14 <__ssputs_r+0x46>
	...

08019b84 <_svfiprintf_r>:
 8019b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b88:	461d      	mov	r5, r3
 8019b8a:	898b      	ldrh	r3, [r1, #12]
 8019b8c:	061f      	lsls	r7, r3, #24
 8019b8e:	b09d      	sub	sp, #116	; 0x74
 8019b90:	4680      	mov	r8, r0
 8019b92:	460c      	mov	r4, r1
 8019b94:	4616      	mov	r6, r2
 8019b96:	d50f      	bpl.n	8019bb8 <_svfiprintf_r+0x34>
 8019b98:	690b      	ldr	r3, [r1, #16]
 8019b9a:	b96b      	cbnz	r3, 8019bb8 <_svfiprintf_r+0x34>
 8019b9c:	2140      	movs	r1, #64	; 0x40
 8019b9e:	f7fc fb95 	bl	80162cc <_malloc_r>
 8019ba2:	6020      	str	r0, [r4, #0]
 8019ba4:	6120      	str	r0, [r4, #16]
 8019ba6:	b928      	cbnz	r0, 8019bb4 <_svfiprintf_r+0x30>
 8019ba8:	230c      	movs	r3, #12
 8019baa:	f8c8 3000 	str.w	r3, [r8]
 8019bae:	f04f 30ff 	mov.w	r0, #4294967295
 8019bb2:	e0c8      	b.n	8019d46 <_svfiprintf_r+0x1c2>
 8019bb4:	2340      	movs	r3, #64	; 0x40
 8019bb6:	6163      	str	r3, [r4, #20]
 8019bb8:	2300      	movs	r3, #0
 8019bba:	9309      	str	r3, [sp, #36]	; 0x24
 8019bbc:	2320      	movs	r3, #32
 8019bbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019bc2:	2330      	movs	r3, #48	; 0x30
 8019bc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019bc8:	9503      	str	r5, [sp, #12]
 8019bca:	f04f 0b01 	mov.w	fp, #1
 8019bce:	4637      	mov	r7, r6
 8019bd0:	463d      	mov	r5, r7
 8019bd2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019bd6:	b10b      	cbz	r3, 8019bdc <_svfiprintf_r+0x58>
 8019bd8:	2b25      	cmp	r3, #37	; 0x25
 8019bda:	d13e      	bne.n	8019c5a <_svfiprintf_r+0xd6>
 8019bdc:	ebb7 0a06 	subs.w	sl, r7, r6
 8019be0:	d00b      	beq.n	8019bfa <_svfiprintf_r+0x76>
 8019be2:	4653      	mov	r3, sl
 8019be4:	4632      	mov	r2, r6
 8019be6:	4621      	mov	r1, r4
 8019be8:	4640      	mov	r0, r8
 8019bea:	f7ff ff70 	bl	8019ace <__ssputs_r>
 8019bee:	3001      	adds	r0, #1
 8019bf0:	f000 80a4 	beq.w	8019d3c <_svfiprintf_r+0x1b8>
 8019bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019bf6:	4453      	add	r3, sl
 8019bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8019bfa:	783b      	ldrb	r3, [r7, #0]
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	f000 809d 	beq.w	8019d3c <_svfiprintf_r+0x1b8>
 8019c02:	2300      	movs	r3, #0
 8019c04:	f04f 32ff 	mov.w	r2, #4294967295
 8019c08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019c0c:	9304      	str	r3, [sp, #16]
 8019c0e:	9307      	str	r3, [sp, #28]
 8019c10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019c14:	931a      	str	r3, [sp, #104]	; 0x68
 8019c16:	462f      	mov	r7, r5
 8019c18:	2205      	movs	r2, #5
 8019c1a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019c1e:	4850      	ldr	r0, [pc, #320]	; (8019d60 <_svfiprintf_r+0x1dc>)
 8019c20:	f7e6 faf6 	bl	8000210 <memchr>
 8019c24:	9b04      	ldr	r3, [sp, #16]
 8019c26:	b9d0      	cbnz	r0, 8019c5e <_svfiprintf_r+0xda>
 8019c28:	06d9      	lsls	r1, r3, #27
 8019c2a:	bf44      	itt	mi
 8019c2c:	2220      	movmi	r2, #32
 8019c2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019c32:	071a      	lsls	r2, r3, #28
 8019c34:	bf44      	itt	mi
 8019c36:	222b      	movmi	r2, #43	; 0x2b
 8019c38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019c3c:	782a      	ldrb	r2, [r5, #0]
 8019c3e:	2a2a      	cmp	r2, #42	; 0x2a
 8019c40:	d015      	beq.n	8019c6e <_svfiprintf_r+0xea>
 8019c42:	9a07      	ldr	r2, [sp, #28]
 8019c44:	462f      	mov	r7, r5
 8019c46:	2000      	movs	r0, #0
 8019c48:	250a      	movs	r5, #10
 8019c4a:	4639      	mov	r1, r7
 8019c4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019c50:	3b30      	subs	r3, #48	; 0x30
 8019c52:	2b09      	cmp	r3, #9
 8019c54:	d94d      	bls.n	8019cf2 <_svfiprintf_r+0x16e>
 8019c56:	b1b8      	cbz	r0, 8019c88 <_svfiprintf_r+0x104>
 8019c58:	e00f      	b.n	8019c7a <_svfiprintf_r+0xf6>
 8019c5a:	462f      	mov	r7, r5
 8019c5c:	e7b8      	b.n	8019bd0 <_svfiprintf_r+0x4c>
 8019c5e:	4a40      	ldr	r2, [pc, #256]	; (8019d60 <_svfiprintf_r+0x1dc>)
 8019c60:	1a80      	subs	r0, r0, r2
 8019c62:	fa0b f000 	lsl.w	r0, fp, r0
 8019c66:	4318      	orrs	r0, r3
 8019c68:	9004      	str	r0, [sp, #16]
 8019c6a:	463d      	mov	r5, r7
 8019c6c:	e7d3      	b.n	8019c16 <_svfiprintf_r+0x92>
 8019c6e:	9a03      	ldr	r2, [sp, #12]
 8019c70:	1d11      	adds	r1, r2, #4
 8019c72:	6812      	ldr	r2, [r2, #0]
 8019c74:	9103      	str	r1, [sp, #12]
 8019c76:	2a00      	cmp	r2, #0
 8019c78:	db01      	blt.n	8019c7e <_svfiprintf_r+0xfa>
 8019c7a:	9207      	str	r2, [sp, #28]
 8019c7c:	e004      	b.n	8019c88 <_svfiprintf_r+0x104>
 8019c7e:	4252      	negs	r2, r2
 8019c80:	f043 0302 	orr.w	r3, r3, #2
 8019c84:	9207      	str	r2, [sp, #28]
 8019c86:	9304      	str	r3, [sp, #16]
 8019c88:	783b      	ldrb	r3, [r7, #0]
 8019c8a:	2b2e      	cmp	r3, #46	; 0x2e
 8019c8c:	d10c      	bne.n	8019ca8 <_svfiprintf_r+0x124>
 8019c8e:	787b      	ldrb	r3, [r7, #1]
 8019c90:	2b2a      	cmp	r3, #42	; 0x2a
 8019c92:	d133      	bne.n	8019cfc <_svfiprintf_r+0x178>
 8019c94:	9b03      	ldr	r3, [sp, #12]
 8019c96:	1d1a      	adds	r2, r3, #4
 8019c98:	681b      	ldr	r3, [r3, #0]
 8019c9a:	9203      	str	r2, [sp, #12]
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	bfb8      	it	lt
 8019ca0:	f04f 33ff 	movlt.w	r3, #4294967295
 8019ca4:	3702      	adds	r7, #2
 8019ca6:	9305      	str	r3, [sp, #20]
 8019ca8:	4d2e      	ldr	r5, [pc, #184]	; (8019d64 <_svfiprintf_r+0x1e0>)
 8019caa:	7839      	ldrb	r1, [r7, #0]
 8019cac:	2203      	movs	r2, #3
 8019cae:	4628      	mov	r0, r5
 8019cb0:	f7e6 faae 	bl	8000210 <memchr>
 8019cb4:	b138      	cbz	r0, 8019cc6 <_svfiprintf_r+0x142>
 8019cb6:	2340      	movs	r3, #64	; 0x40
 8019cb8:	1b40      	subs	r0, r0, r5
 8019cba:	fa03 f000 	lsl.w	r0, r3, r0
 8019cbe:	9b04      	ldr	r3, [sp, #16]
 8019cc0:	4303      	orrs	r3, r0
 8019cc2:	3701      	adds	r7, #1
 8019cc4:	9304      	str	r3, [sp, #16]
 8019cc6:	7839      	ldrb	r1, [r7, #0]
 8019cc8:	4827      	ldr	r0, [pc, #156]	; (8019d68 <_svfiprintf_r+0x1e4>)
 8019cca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019cce:	2206      	movs	r2, #6
 8019cd0:	1c7e      	adds	r6, r7, #1
 8019cd2:	f7e6 fa9d 	bl	8000210 <memchr>
 8019cd6:	2800      	cmp	r0, #0
 8019cd8:	d038      	beq.n	8019d4c <_svfiprintf_r+0x1c8>
 8019cda:	4b24      	ldr	r3, [pc, #144]	; (8019d6c <_svfiprintf_r+0x1e8>)
 8019cdc:	bb13      	cbnz	r3, 8019d24 <_svfiprintf_r+0x1a0>
 8019cde:	9b03      	ldr	r3, [sp, #12]
 8019ce0:	3307      	adds	r3, #7
 8019ce2:	f023 0307 	bic.w	r3, r3, #7
 8019ce6:	3308      	adds	r3, #8
 8019ce8:	9303      	str	r3, [sp, #12]
 8019cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cec:	444b      	add	r3, r9
 8019cee:	9309      	str	r3, [sp, #36]	; 0x24
 8019cf0:	e76d      	b.n	8019bce <_svfiprintf_r+0x4a>
 8019cf2:	fb05 3202 	mla	r2, r5, r2, r3
 8019cf6:	2001      	movs	r0, #1
 8019cf8:	460f      	mov	r7, r1
 8019cfa:	e7a6      	b.n	8019c4a <_svfiprintf_r+0xc6>
 8019cfc:	2300      	movs	r3, #0
 8019cfe:	3701      	adds	r7, #1
 8019d00:	9305      	str	r3, [sp, #20]
 8019d02:	4619      	mov	r1, r3
 8019d04:	250a      	movs	r5, #10
 8019d06:	4638      	mov	r0, r7
 8019d08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019d0c:	3a30      	subs	r2, #48	; 0x30
 8019d0e:	2a09      	cmp	r2, #9
 8019d10:	d903      	bls.n	8019d1a <_svfiprintf_r+0x196>
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d0c8      	beq.n	8019ca8 <_svfiprintf_r+0x124>
 8019d16:	9105      	str	r1, [sp, #20]
 8019d18:	e7c6      	b.n	8019ca8 <_svfiprintf_r+0x124>
 8019d1a:	fb05 2101 	mla	r1, r5, r1, r2
 8019d1e:	2301      	movs	r3, #1
 8019d20:	4607      	mov	r7, r0
 8019d22:	e7f0      	b.n	8019d06 <_svfiprintf_r+0x182>
 8019d24:	ab03      	add	r3, sp, #12
 8019d26:	9300      	str	r3, [sp, #0]
 8019d28:	4622      	mov	r2, r4
 8019d2a:	4b11      	ldr	r3, [pc, #68]	; (8019d70 <_svfiprintf_r+0x1ec>)
 8019d2c:	a904      	add	r1, sp, #16
 8019d2e:	4640      	mov	r0, r8
 8019d30:	f7fc fbba 	bl	80164a8 <_printf_float>
 8019d34:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019d38:	4681      	mov	r9, r0
 8019d3a:	d1d6      	bne.n	8019cea <_svfiprintf_r+0x166>
 8019d3c:	89a3      	ldrh	r3, [r4, #12]
 8019d3e:	065b      	lsls	r3, r3, #25
 8019d40:	f53f af35 	bmi.w	8019bae <_svfiprintf_r+0x2a>
 8019d44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019d46:	b01d      	add	sp, #116	; 0x74
 8019d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d4c:	ab03      	add	r3, sp, #12
 8019d4e:	9300      	str	r3, [sp, #0]
 8019d50:	4622      	mov	r2, r4
 8019d52:	4b07      	ldr	r3, [pc, #28]	; (8019d70 <_svfiprintf_r+0x1ec>)
 8019d54:	a904      	add	r1, sp, #16
 8019d56:	4640      	mov	r0, r8
 8019d58:	f7fc fe5c 	bl	8016a14 <_printf_i>
 8019d5c:	e7ea      	b.n	8019d34 <_svfiprintf_r+0x1b0>
 8019d5e:	bf00      	nop
 8019d60:	0801ae14 	.word	0x0801ae14
 8019d64:	0801ae1a 	.word	0x0801ae1a
 8019d68:	0801ae1e 	.word	0x0801ae1e
 8019d6c:	080164a9 	.word	0x080164a9
 8019d70:	08019acf 	.word	0x08019acf

08019d74 <_sungetc_r>:
 8019d74:	b538      	push	{r3, r4, r5, lr}
 8019d76:	1c4b      	adds	r3, r1, #1
 8019d78:	4614      	mov	r4, r2
 8019d7a:	d103      	bne.n	8019d84 <_sungetc_r+0x10>
 8019d7c:	f04f 35ff 	mov.w	r5, #4294967295
 8019d80:	4628      	mov	r0, r5
 8019d82:	bd38      	pop	{r3, r4, r5, pc}
 8019d84:	8993      	ldrh	r3, [r2, #12]
 8019d86:	f023 0320 	bic.w	r3, r3, #32
 8019d8a:	8193      	strh	r3, [r2, #12]
 8019d8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019d8e:	6852      	ldr	r2, [r2, #4]
 8019d90:	b2cd      	uxtb	r5, r1
 8019d92:	b18b      	cbz	r3, 8019db8 <_sungetc_r+0x44>
 8019d94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019d96:	4293      	cmp	r3, r2
 8019d98:	dd08      	ble.n	8019dac <_sungetc_r+0x38>
 8019d9a:	6823      	ldr	r3, [r4, #0]
 8019d9c:	1e5a      	subs	r2, r3, #1
 8019d9e:	6022      	str	r2, [r4, #0]
 8019da0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8019da4:	6863      	ldr	r3, [r4, #4]
 8019da6:	3301      	adds	r3, #1
 8019da8:	6063      	str	r3, [r4, #4]
 8019daa:	e7e9      	b.n	8019d80 <_sungetc_r+0xc>
 8019dac:	4621      	mov	r1, r4
 8019dae:	f000 fbb3 	bl	801a518 <__submore>
 8019db2:	2800      	cmp	r0, #0
 8019db4:	d0f1      	beq.n	8019d9a <_sungetc_r+0x26>
 8019db6:	e7e1      	b.n	8019d7c <_sungetc_r+0x8>
 8019db8:	6921      	ldr	r1, [r4, #16]
 8019dba:	6823      	ldr	r3, [r4, #0]
 8019dbc:	b151      	cbz	r1, 8019dd4 <_sungetc_r+0x60>
 8019dbe:	4299      	cmp	r1, r3
 8019dc0:	d208      	bcs.n	8019dd4 <_sungetc_r+0x60>
 8019dc2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8019dc6:	42a9      	cmp	r1, r5
 8019dc8:	d104      	bne.n	8019dd4 <_sungetc_r+0x60>
 8019dca:	3b01      	subs	r3, #1
 8019dcc:	3201      	adds	r2, #1
 8019dce:	6023      	str	r3, [r4, #0]
 8019dd0:	6062      	str	r2, [r4, #4]
 8019dd2:	e7d5      	b.n	8019d80 <_sungetc_r+0xc>
 8019dd4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8019dd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019ddc:	6363      	str	r3, [r4, #52]	; 0x34
 8019dde:	2303      	movs	r3, #3
 8019de0:	63a3      	str	r3, [r4, #56]	; 0x38
 8019de2:	4623      	mov	r3, r4
 8019de4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8019de8:	6023      	str	r3, [r4, #0]
 8019dea:	2301      	movs	r3, #1
 8019dec:	e7dc      	b.n	8019da8 <_sungetc_r+0x34>

08019dee <__ssrefill_r>:
 8019dee:	b510      	push	{r4, lr}
 8019df0:	460c      	mov	r4, r1
 8019df2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019df4:	b169      	cbz	r1, 8019e12 <__ssrefill_r+0x24>
 8019df6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019dfa:	4299      	cmp	r1, r3
 8019dfc:	d001      	beq.n	8019e02 <__ssrefill_r+0x14>
 8019dfe:	f7fc fa17 	bl	8016230 <_free_r>
 8019e02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019e04:	6063      	str	r3, [r4, #4]
 8019e06:	2000      	movs	r0, #0
 8019e08:	6360      	str	r0, [r4, #52]	; 0x34
 8019e0a:	b113      	cbz	r3, 8019e12 <__ssrefill_r+0x24>
 8019e0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019e0e:	6023      	str	r3, [r4, #0]
 8019e10:	bd10      	pop	{r4, pc}
 8019e12:	6923      	ldr	r3, [r4, #16]
 8019e14:	6023      	str	r3, [r4, #0]
 8019e16:	2300      	movs	r3, #0
 8019e18:	6063      	str	r3, [r4, #4]
 8019e1a:	89a3      	ldrh	r3, [r4, #12]
 8019e1c:	f043 0320 	orr.w	r3, r3, #32
 8019e20:	81a3      	strh	r3, [r4, #12]
 8019e22:	f04f 30ff 	mov.w	r0, #4294967295
 8019e26:	e7f3      	b.n	8019e10 <__ssrefill_r+0x22>

08019e28 <__ssvfiscanf_r>:
 8019e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e2c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8019e30:	460c      	mov	r4, r1
 8019e32:	2100      	movs	r1, #0
 8019e34:	9144      	str	r1, [sp, #272]	; 0x110
 8019e36:	9145      	str	r1, [sp, #276]	; 0x114
 8019e38:	499f      	ldr	r1, [pc, #636]	; (801a0b8 <__ssvfiscanf_r+0x290>)
 8019e3a:	91a0      	str	r1, [sp, #640]	; 0x280
 8019e3c:	f10d 0804 	add.w	r8, sp, #4
 8019e40:	499e      	ldr	r1, [pc, #632]	; (801a0bc <__ssvfiscanf_r+0x294>)
 8019e42:	f8df 927c 	ldr.w	r9, [pc, #636]	; 801a0c0 <__ssvfiscanf_r+0x298>
 8019e46:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019e4a:	4606      	mov	r6, r0
 8019e4c:	4692      	mov	sl, r2
 8019e4e:	91a1      	str	r1, [sp, #644]	; 0x284
 8019e50:	9300      	str	r3, [sp, #0]
 8019e52:	270a      	movs	r7, #10
 8019e54:	f89a 3000 	ldrb.w	r3, [sl]
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	f000 812a 	beq.w	801a0b2 <__ssvfiscanf_r+0x28a>
 8019e5e:	4655      	mov	r5, sl
 8019e60:	f7ff f9ec 	bl	801923c <__locale_ctype_ptr>
 8019e64:	f815 bb01 	ldrb.w	fp, [r5], #1
 8019e68:	4458      	add	r0, fp
 8019e6a:	7843      	ldrb	r3, [r0, #1]
 8019e6c:	f013 0308 	ands.w	r3, r3, #8
 8019e70:	d01c      	beq.n	8019eac <__ssvfiscanf_r+0x84>
 8019e72:	6863      	ldr	r3, [r4, #4]
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	dd12      	ble.n	8019e9e <__ssvfiscanf_r+0x76>
 8019e78:	f7ff f9e0 	bl	801923c <__locale_ctype_ptr>
 8019e7c:	6823      	ldr	r3, [r4, #0]
 8019e7e:	781a      	ldrb	r2, [r3, #0]
 8019e80:	4410      	add	r0, r2
 8019e82:	7842      	ldrb	r2, [r0, #1]
 8019e84:	0712      	lsls	r2, r2, #28
 8019e86:	d401      	bmi.n	8019e8c <__ssvfiscanf_r+0x64>
 8019e88:	46aa      	mov	sl, r5
 8019e8a:	e7e3      	b.n	8019e54 <__ssvfiscanf_r+0x2c>
 8019e8c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019e8e:	3201      	adds	r2, #1
 8019e90:	9245      	str	r2, [sp, #276]	; 0x114
 8019e92:	6862      	ldr	r2, [r4, #4]
 8019e94:	3301      	adds	r3, #1
 8019e96:	3a01      	subs	r2, #1
 8019e98:	6062      	str	r2, [r4, #4]
 8019e9a:	6023      	str	r3, [r4, #0]
 8019e9c:	e7e9      	b.n	8019e72 <__ssvfiscanf_r+0x4a>
 8019e9e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019ea0:	4621      	mov	r1, r4
 8019ea2:	4630      	mov	r0, r6
 8019ea4:	4798      	blx	r3
 8019ea6:	2800      	cmp	r0, #0
 8019ea8:	d0e6      	beq.n	8019e78 <__ssvfiscanf_r+0x50>
 8019eaa:	e7ed      	b.n	8019e88 <__ssvfiscanf_r+0x60>
 8019eac:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8019eb0:	f040 8082 	bne.w	8019fb8 <__ssvfiscanf_r+0x190>
 8019eb4:	9343      	str	r3, [sp, #268]	; 0x10c
 8019eb6:	9341      	str	r3, [sp, #260]	; 0x104
 8019eb8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8019ebc:	2b2a      	cmp	r3, #42	; 0x2a
 8019ebe:	d103      	bne.n	8019ec8 <__ssvfiscanf_r+0xa0>
 8019ec0:	2310      	movs	r3, #16
 8019ec2:	9341      	str	r3, [sp, #260]	; 0x104
 8019ec4:	f10a 0502 	add.w	r5, sl, #2
 8019ec8:	46aa      	mov	sl, r5
 8019eca:	f815 1b01 	ldrb.w	r1, [r5], #1
 8019ece:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8019ed2:	2a09      	cmp	r2, #9
 8019ed4:	d922      	bls.n	8019f1c <__ssvfiscanf_r+0xf4>
 8019ed6:	2203      	movs	r2, #3
 8019ed8:	4879      	ldr	r0, [pc, #484]	; (801a0c0 <__ssvfiscanf_r+0x298>)
 8019eda:	f7e6 f999 	bl	8000210 <memchr>
 8019ede:	b138      	cbz	r0, 8019ef0 <__ssvfiscanf_r+0xc8>
 8019ee0:	eba0 0309 	sub.w	r3, r0, r9
 8019ee4:	2001      	movs	r0, #1
 8019ee6:	4098      	lsls	r0, r3
 8019ee8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019eea:	4318      	orrs	r0, r3
 8019eec:	9041      	str	r0, [sp, #260]	; 0x104
 8019eee:	46aa      	mov	sl, r5
 8019ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8019ef4:	2b67      	cmp	r3, #103	; 0x67
 8019ef6:	f10a 0501 	add.w	r5, sl, #1
 8019efa:	d82b      	bhi.n	8019f54 <__ssvfiscanf_r+0x12c>
 8019efc:	2b65      	cmp	r3, #101	; 0x65
 8019efe:	f080 809f 	bcs.w	801a040 <__ssvfiscanf_r+0x218>
 8019f02:	2b47      	cmp	r3, #71	; 0x47
 8019f04:	d810      	bhi.n	8019f28 <__ssvfiscanf_r+0x100>
 8019f06:	2b45      	cmp	r3, #69	; 0x45
 8019f08:	f080 809a 	bcs.w	801a040 <__ssvfiscanf_r+0x218>
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d06c      	beq.n	8019fea <__ssvfiscanf_r+0x1c2>
 8019f10:	2b25      	cmp	r3, #37	; 0x25
 8019f12:	d051      	beq.n	8019fb8 <__ssvfiscanf_r+0x190>
 8019f14:	2303      	movs	r3, #3
 8019f16:	9347      	str	r3, [sp, #284]	; 0x11c
 8019f18:	9742      	str	r7, [sp, #264]	; 0x108
 8019f1a:	e027      	b.n	8019f6c <__ssvfiscanf_r+0x144>
 8019f1c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8019f1e:	fb07 1303 	mla	r3, r7, r3, r1
 8019f22:	3b30      	subs	r3, #48	; 0x30
 8019f24:	9343      	str	r3, [sp, #268]	; 0x10c
 8019f26:	e7cf      	b.n	8019ec8 <__ssvfiscanf_r+0xa0>
 8019f28:	2b5b      	cmp	r3, #91	; 0x5b
 8019f2a:	d06a      	beq.n	801a002 <__ssvfiscanf_r+0x1da>
 8019f2c:	d80c      	bhi.n	8019f48 <__ssvfiscanf_r+0x120>
 8019f2e:	2b58      	cmp	r3, #88	; 0x58
 8019f30:	d1f0      	bne.n	8019f14 <__ssvfiscanf_r+0xec>
 8019f32:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019f38:	9241      	str	r2, [sp, #260]	; 0x104
 8019f3a:	2210      	movs	r2, #16
 8019f3c:	9242      	str	r2, [sp, #264]	; 0x108
 8019f3e:	2b6e      	cmp	r3, #110	; 0x6e
 8019f40:	bf8c      	ite	hi
 8019f42:	2304      	movhi	r3, #4
 8019f44:	2303      	movls	r3, #3
 8019f46:	e010      	b.n	8019f6a <__ssvfiscanf_r+0x142>
 8019f48:	2b63      	cmp	r3, #99	; 0x63
 8019f4a:	d065      	beq.n	801a018 <__ssvfiscanf_r+0x1f0>
 8019f4c:	2b64      	cmp	r3, #100	; 0x64
 8019f4e:	d1e1      	bne.n	8019f14 <__ssvfiscanf_r+0xec>
 8019f50:	9742      	str	r7, [sp, #264]	; 0x108
 8019f52:	e7f4      	b.n	8019f3e <__ssvfiscanf_r+0x116>
 8019f54:	2b70      	cmp	r3, #112	; 0x70
 8019f56:	d04b      	beq.n	8019ff0 <__ssvfiscanf_r+0x1c8>
 8019f58:	d826      	bhi.n	8019fa8 <__ssvfiscanf_r+0x180>
 8019f5a:	2b6e      	cmp	r3, #110	; 0x6e
 8019f5c:	d062      	beq.n	801a024 <__ssvfiscanf_r+0x1fc>
 8019f5e:	d84c      	bhi.n	8019ffa <__ssvfiscanf_r+0x1d2>
 8019f60:	2b69      	cmp	r3, #105	; 0x69
 8019f62:	d1d7      	bne.n	8019f14 <__ssvfiscanf_r+0xec>
 8019f64:	2300      	movs	r3, #0
 8019f66:	9342      	str	r3, [sp, #264]	; 0x108
 8019f68:	2303      	movs	r3, #3
 8019f6a:	9347      	str	r3, [sp, #284]	; 0x11c
 8019f6c:	6863      	ldr	r3, [r4, #4]
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	dd68      	ble.n	801a044 <__ssvfiscanf_r+0x21c>
 8019f72:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019f74:	0659      	lsls	r1, r3, #25
 8019f76:	d407      	bmi.n	8019f88 <__ssvfiscanf_r+0x160>
 8019f78:	f7ff f960 	bl	801923c <__locale_ctype_ptr>
 8019f7c:	6823      	ldr	r3, [r4, #0]
 8019f7e:	781a      	ldrb	r2, [r3, #0]
 8019f80:	4410      	add	r0, r2
 8019f82:	7842      	ldrb	r2, [r0, #1]
 8019f84:	0712      	lsls	r2, r2, #28
 8019f86:	d464      	bmi.n	801a052 <__ssvfiscanf_r+0x22a>
 8019f88:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8019f8a:	2b02      	cmp	r3, #2
 8019f8c:	dc73      	bgt.n	801a076 <__ssvfiscanf_r+0x24e>
 8019f8e:	466b      	mov	r3, sp
 8019f90:	4622      	mov	r2, r4
 8019f92:	a941      	add	r1, sp, #260	; 0x104
 8019f94:	4630      	mov	r0, r6
 8019f96:	f000 f897 	bl	801a0c8 <_scanf_chars>
 8019f9a:	2801      	cmp	r0, #1
 8019f9c:	f000 8089 	beq.w	801a0b2 <__ssvfiscanf_r+0x28a>
 8019fa0:	2802      	cmp	r0, #2
 8019fa2:	f47f af71 	bne.w	8019e88 <__ssvfiscanf_r+0x60>
 8019fa6:	e01d      	b.n	8019fe4 <__ssvfiscanf_r+0x1bc>
 8019fa8:	2b75      	cmp	r3, #117	; 0x75
 8019faa:	d0d1      	beq.n	8019f50 <__ssvfiscanf_r+0x128>
 8019fac:	2b78      	cmp	r3, #120	; 0x78
 8019fae:	d0c0      	beq.n	8019f32 <__ssvfiscanf_r+0x10a>
 8019fb0:	2b73      	cmp	r3, #115	; 0x73
 8019fb2:	d1af      	bne.n	8019f14 <__ssvfiscanf_r+0xec>
 8019fb4:	2302      	movs	r3, #2
 8019fb6:	e7d8      	b.n	8019f6a <__ssvfiscanf_r+0x142>
 8019fb8:	6863      	ldr	r3, [r4, #4]
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	dd0c      	ble.n	8019fd8 <__ssvfiscanf_r+0x1b0>
 8019fbe:	6823      	ldr	r3, [r4, #0]
 8019fc0:	781a      	ldrb	r2, [r3, #0]
 8019fc2:	455a      	cmp	r2, fp
 8019fc4:	d175      	bne.n	801a0b2 <__ssvfiscanf_r+0x28a>
 8019fc6:	3301      	adds	r3, #1
 8019fc8:	6862      	ldr	r2, [r4, #4]
 8019fca:	6023      	str	r3, [r4, #0]
 8019fcc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8019fce:	3a01      	subs	r2, #1
 8019fd0:	3301      	adds	r3, #1
 8019fd2:	6062      	str	r2, [r4, #4]
 8019fd4:	9345      	str	r3, [sp, #276]	; 0x114
 8019fd6:	e757      	b.n	8019e88 <__ssvfiscanf_r+0x60>
 8019fd8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019fda:	4621      	mov	r1, r4
 8019fdc:	4630      	mov	r0, r6
 8019fde:	4798      	blx	r3
 8019fe0:	2800      	cmp	r0, #0
 8019fe2:	d0ec      	beq.n	8019fbe <__ssvfiscanf_r+0x196>
 8019fe4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019fe6:	2800      	cmp	r0, #0
 8019fe8:	d159      	bne.n	801a09e <__ssvfiscanf_r+0x276>
 8019fea:	f04f 30ff 	mov.w	r0, #4294967295
 8019fee:	e05c      	b.n	801a0aa <__ssvfiscanf_r+0x282>
 8019ff0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019ff2:	f042 0220 	orr.w	r2, r2, #32
 8019ff6:	9241      	str	r2, [sp, #260]	; 0x104
 8019ff8:	e79b      	b.n	8019f32 <__ssvfiscanf_r+0x10a>
 8019ffa:	2308      	movs	r3, #8
 8019ffc:	9342      	str	r3, [sp, #264]	; 0x108
 8019ffe:	2304      	movs	r3, #4
 801a000:	e7b3      	b.n	8019f6a <__ssvfiscanf_r+0x142>
 801a002:	4629      	mov	r1, r5
 801a004:	4640      	mov	r0, r8
 801a006:	f000 f9b7 	bl	801a378 <__sccl>
 801a00a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a00c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a010:	9341      	str	r3, [sp, #260]	; 0x104
 801a012:	4605      	mov	r5, r0
 801a014:	2301      	movs	r3, #1
 801a016:	e7a8      	b.n	8019f6a <__ssvfiscanf_r+0x142>
 801a018:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a01a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a01e:	9341      	str	r3, [sp, #260]	; 0x104
 801a020:	2300      	movs	r3, #0
 801a022:	e7a2      	b.n	8019f6a <__ssvfiscanf_r+0x142>
 801a024:	9841      	ldr	r0, [sp, #260]	; 0x104
 801a026:	06c3      	lsls	r3, r0, #27
 801a028:	f53f af2e 	bmi.w	8019e88 <__ssvfiscanf_r+0x60>
 801a02c:	9b00      	ldr	r3, [sp, #0]
 801a02e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801a030:	1d19      	adds	r1, r3, #4
 801a032:	9100      	str	r1, [sp, #0]
 801a034:	681b      	ldr	r3, [r3, #0]
 801a036:	07c0      	lsls	r0, r0, #31
 801a038:	bf4c      	ite	mi
 801a03a:	801a      	strhmi	r2, [r3, #0]
 801a03c:	601a      	strpl	r2, [r3, #0]
 801a03e:	e723      	b.n	8019e88 <__ssvfiscanf_r+0x60>
 801a040:	2305      	movs	r3, #5
 801a042:	e792      	b.n	8019f6a <__ssvfiscanf_r+0x142>
 801a044:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a046:	4621      	mov	r1, r4
 801a048:	4630      	mov	r0, r6
 801a04a:	4798      	blx	r3
 801a04c:	2800      	cmp	r0, #0
 801a04e:	d090      	beq.n	8019f72 <__ssvfiscanf_r+0x14a>
 801a050:	e7c8      	b.n	8019fe4 <__ssvfiscanf_r+0x1bc>
 801a052:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801a054:	3201      	adds	r2, #1
 801a056:	9245      	str	r2, [sp, #276]	; 0x114
 801a058:	6862      	ldr	r2, [r4, #4]
 801a05a:	3a01      	subs	r2, #1
 801a05c:	2a00      	cmp	r2, #0
 801a05e:	6062      	str	r2, [r4, #4]
 801a060:	dd02      	ble.n	801a068 <__ssvfiscanf_r+0x240>
 801a062:	3301      	adds	r3, #1
 801a064:	6023      	str	r3, [r4, #0]
 801a066:	e787      	b.n	8019f78 <__ssvfiscanf_r+0x150>
 801a068:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a06a:	4621      	mov	r1, r4
 801a06c:	4630      	mov	r0, r6
 801a06e:	4798      	blx	r3
 801a070:	2800      	cmp	r0, #0
 801a072:	d081      	beq.n	8019f78 <__ssvfiscanf_r+0x150>
 801a074:	e7b6      	b.n	8019fe4 <__ssvfiscanf_r+0x1bc>
 801a076:	2b04      	cmp	r3, #4
 801a078:	dc06      	bgt.n	801a088 <__ssvfiscanf_r+0x260>
 801a07a:	466b      	mov	r3, sp
 801a07c:	4622      	mov	r2, r4
 801a07e:	a941      	add	r1, sp, #260	; 0x104
 801a080:	4630      	mov	r0, r6
 801a082:	f000 f885 	bl	801a190 <_scanf_i>
 801a086:	e788      	b.n	8019f9a <__ssvfiscanf_r+0x172>
 801a088:	4b0e      	ldr	r3, [pc, #56]	; (801a0c4 <__ssvfiscanf_r+0x29c>)
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	f43f aefc 	beq.w	8019e88 <__ssvfiscanf_r+0x60>
 801a090:	466b      	mov	r3, sp
 801a092:	4622      	mov	r2, r4
 801a094:	a941      	add	r1, sp, #260	; 0x104
 801a096:	4630      	mov	r0, r6
 801a098:	f7fc fdce 	bl	8016c38 <_scanf_float>
 801a09c:	e77d      	b.n	8019f9a <__ssvfiscanf_r+0x172>
 801a09e:	89a3      	ldrh	r3, [r4, #12]
 801a0a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 801a0a4:	bf18      	it	ne
 801a0a6:	f04f 30ff 	movne.w	r0, #4294967295
 801a0aa:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801a0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0b2:	9844      	ldr	r0, [sp, #272]	; 0x110
 801a0b4:	e7f9      	b.n	801a0aa <__ssvfiscanf_r+0x282>
 801a0b6:	bf00      	nop
 801a0b8:	08019d75 	.word	0x08019d75
 801a0bc:	08019def 	.word	0x08019def
 801a0c0:	0801ae1a 	.word	0x0801ae1a
 801a0c4:	08016c39 	.word	0x08016c39

0801a0c8 <_scanf_chars>:
 801a0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0cc:	4615      	mov	r5, r2
 801a0ce:	688a      	ldr	r2, [r1, #8]
 801a0d0:	4680      	mov	r8, r0
 801a0d2:	460c      	mov	r4, r1
 801a0d4:	b932      	cbnz	r2, 801a0e4 <_scanf_chars+0x1c>
 801a0d6:	698a      	ldr	r2, [r1, #24]
 801a0d8:	2a00      	cmp	r2, #0
 801a0da:	bf14      	ite	ne
 801a0dc:	f04f 32ff 	movne.w	r2, #4294967295
 801a0e0:	2201      	moveq	r2, #1
 801a0e2:	608a      	str	r2, [r1, #8]
 801a0e4:	6822      	ldr	r2, [r4, #0]
 801a0e6:	06d1      	lsls	r1, r2, #27
 801a0e8:	bf5f      	itttt	pl
 801a0ea:	681a      	ldrpl	r2, [r3, #0]
 801a0ec:	1d11      	addpl	r1, r2, #4
 801a0ee:	6019      	strpl	r1, [r3, #0]
 801a0f0:	6817      	ldrpl	r7, [r2, #0]
 801a0f2:	2600      	movs	r6, #0
 801a0f4:	69a3      	ldr	r3, [r4, #24]
 801a0f6:	b1db      	cbz	r3, 801a130 <_scanf_chars+0x68>
 801a0f8:	2b01      	cmp	r3, #1
 801a0fa:	d107      	bne.n	801a10c <_scanf_chars+0x44>
 801a0fc:	682b      	ldr	r3, [r5, #0]
 801a0fe:	6962      	ldr	r2, [r4, #20]
 801a100:	781b      	ldrb	r3, [r3, #0]
 801a102:	5cd3      	ldrb	r3, [r2, r3]
 801a104:	b9a3      	cbnz	r3, 801a130 <_scanf_chars+0x68>
 801a106:	2e00      	cmp	r6, #0
 801a108:	d132      	bne.n	801a170 <_scanf_chars+0xa8>
 801a10a:	e006      	b.n	801a11a <_scanf_chars+0x52>
 801a10c:	2b02      	cmp	r3, #2
 801a10e:	d007      	beq.n	801a120 <_scanf_chars+0x58>
 801a110:	2e00      	cmp	r6, #0
 801a112:	d12d      	bne.n	801a170 <_scanf_chars+0xa8>
 801a114:	69a3      	ldr	r3, [r4, #24]
 801a116:	2b01      	cmp	r3, #1
 801a118:	d12a      	bne.n	801a170 <_scanf_chars+0xa8>
 801a11a:	2001      	movs	r0, #1
 801a11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a120:	f7ff f88c 	bl	801923c <__locale_ctype_ptr>
 801a124:	682b      	ldr	r3, [r5, #0]
 801a126:	781b      	ldrb	r3, [r3, #0]
 801a128:	4418      	add	r0, r3
 801a12a:	7843      	ldrb	r3, [r0, #1]
 801a12c:	071b      	lsls	r3, r3, #28
 801a12e:	d4ef      	bmi.n	801a110 <_scanf_chars+0x48>
 801a130:	6823      	ldr	r3, [r4, #0]
 801a132:	06da      	lsls	r2, r3, #27
 801a134:	bf5e      	ittt	pl
 801a136:	682b      	ldrpl	r3, [r5, #0]
 801a138:	781b      	ldrbpl	r3, [r3, #0]
 801a13a:	703b      	strbpl	r3, [r7, #0]
 801a13c:	682a      	ldr	r2, [r5, #0]
 801a13e:	686b      	ldr	r3, [r5, #4]
 801a140:	f102 0201 	add.w	r2, r2, #1
 801a144:	602a      	str	r2, [r5, #0]
 801a146:	68a2      	ldr	r2, [r4, #8]
 801a148:	f103 33ff 	add.w	r3, r3, #4294967295
 801a14c:	f102 32ff 	add.w	r2, r2, #4294967295
 801a150:	606b      	str	r3, [r5, #4]
 801a152:	f106 0601 	add.w	r6, r6, #1
 801a156:	bf58      	it	pl
 801a158:	3701      	addpl	r7, #1
 801a15a:	60a2      	str	r2, [r4, #8]
 801a15c:	b142      	cbz	r2, 801a170 <_scanf_chars+0xa8>
 801a15e:	2b00      	cmp	r3, #0
 801a160:	dcc8      	bgt.n	801a0f4 <_scanf_chars+0x2c>
 801a162:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a166:	4629      	mov	r1, r5
 801a168:	4640      	mov	r0, r8
 801a16a:	4798      	blx	r3
 801a16c:	2800      	cmp	r0, #0
 801a16e:	d0c1      	beq.n	801a0f4 <_scanf_chars+0x2c>
 801a170:	6823      	ldr	r3, [r4, #0]
 801a172:	f013 0310 	ands.w	r3, r3, #16
 801a176:	d105      	bne.n	801a184 <_scanf_chars+0xbc>
 801a178:	68e2      	ldr	r2, [r4, #12]
 801a17a:	3201      	adds	r2, #1
 801a17c:	60e2      	str	r2, [r4, #12]
 801a17e:	69a2      	ldr	r2, [r4, #24]
 801a180:	b102      	cbz	r2, 801a184 <_scanf_chars+0xbc>
 801a182:	703b      	strb	r3, [r7, #0]
 801a184:	6923      	ldr	r3, [r4, #16]
 801a186:	441e      	add	r6, r3
 801a188:	6126      	str	r6, [r4, #16]
 801a18a:	2000      	movs	r0, #0
 801a18c:	e7c6      	b.n	801a11c <_scanf_chars+0x54>
	...

0801a190 <_scanf_i>:
 801a190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a194:	469a      	mov	sl, r3
 801a196:	4b74      	ldr	r3, [pc, #464]	; (801a368 <_scanf_i+0x1d8>)
 801a198:	460c      	mov	r4, r1
 801a19a:	4683      	mov	fp, r0
 801a19c:	4616      	mov	r6, r2
 801a19e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a1a2:	b087      	sub	sp, #28
 801a1a4:	ab03      	add	r3, sp, #12
 801a1a6:	68a7      	ldr	r7, [r4, #8]
 801a1a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a1ac:	4b6f      	ldr	r3, [pc, #444]	; (801a36c <_scanf_i+0x1dc>)
 801a1ae:	69a1      	ldr	r1, [r4, #24]
 801a1b0:	4a6f      	ldr	r2, [pc, #444]	; (801a370 <_scanf_i+0x1e0>)
 801a1b2:	2903      	cmp	r1, #3
 801a1b4:	bf08      	it	eq
 801a1b6:	461a      	moveq	r2, r3
 801a1b8:	1e7b      	subs	r3, r7, #1
 801a1ba:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801a1be:	bf84      	itt	hi
 801a1c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a1c4:	60a3      	strhi	r3, [r4, #8]
 801a1c6:	6823      	ldr	r3, [r4, #0]
 801a1c8:	9200      	str	r2, [sp, #0]
 801a1ca:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801a1ce:	bf88      	it	hi
 801a1d0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a1d4:	f104 091c 	add.w	r9, r4, #28
 801a1d8:	6023      	str	r3, [r4, #0]
 801a1da:	bf8c      	ite	hi
 801a1dc:	197f      	addhi	r7, r7, r5
 801a1de:	2700      	movls	r7, #0
 801a1e0:	464b      	mov	r3, r9
 801a1e2:	f04f 0800 	mov.w	r8, #0
 801a1e6:	9301      	str	r3, [sp, #4]
 801a1e8:	6831      	ldr	r1, [r6, #0]
 801a1ea:	ab03      	add	r3, sp, #12
 801a1ec:	2202      	movs	r2, #2
 801a1ee:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801a1f2:	7809      	ldrb	r1, [r1, #0]
 801a1f4:	f7e6 f80c 	bl	8000210 <memchr>
 801a1f8:	9b01      	ldr	r3, [sp, #4]
 801a1fa:	b330      	cbz	r0, 801a24a <_scanf_i+0xba>
 801a1fc:	f1b8 0f01 	cmp.w	r8, #1
 801a200:	d15a      	bne.n	801a2b8 <_scanf_i+0x128>
 801a202:	6862      	ldr	r2, [r4, #4]
 801a204:	b92a      	cbnz	r2, 801a212 <_scanf_i+0x82>
 801a206:	6822      	ldr	r2, [r4, #0]
 801a208:	2108      	movs	r1, #8
 801a20a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a20e:	6061      	str	r1, [r4, #4]
 801a210:	6022      	str	r2, [r4, #0]
 801a212:	6822      	ldr	r2, [r4, #0]
 801a214:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801a218:	6022      	str	r2, [r4, #0]
 801a21a:	68a2      	ldr	r2, [r4, #8]
 801a21c:	1e51      	subs	r1, r2, #1
 801a21e:	60a1      	str	r1, [r4, #8]
 801a220:	b19a      	cbz	r2, 801a24a <_scanf_i+0xba>
 801a222:	6832      	ldr	r2, [r6, #0]
 801a224:	1c51      	adds	r1, r2, #1
 801a226:	6031      	str	r1, [r6, #0]
 801a228:	7812      	ldrb	r2, [r2, #0]
 801a22a:	701a      	strb	r2, [r3, #0]
 801a22c:	1c5d      	adds	r5, r3, #1
 801a22e:	6873      	ldr	r3, [r6, #4]
 801a230:	3b01      	subs	r3, #1
 801a232:	2b00      	cmp	r3, #0
 801a234:	6073      	str	r3, [r6, #4]
 801a236:	dc07      	bgt.n	801a248 <_scanf_i+0xb8>
 801a238:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a23c:	4631      	mov	r1, r6
 801a23e:	4658      	mov	r0, fp
 801a240:	4798      	blx	r3
 801a242:	2800      	cmp	r0, #0
 801a244:	f040 8086 	bne.w	801a354 <_scanf_i+0x1c4>
 801a248:	462b      	mov	r3, r5
 801a24a:	f108 0801 	add.w	r8, r8, #1
 801a24e:	f1b8 0f03 	cmp.w	r8, #3
 801a252:	d1c8      	bne.n	801a1e6 <_scanf_i+0x56>
 801a254:	6862      	ldr	r2, [r4, #4]
 801a256:	b90a      	cbnz	r2, 801a25c <_scanf_i+0xcc>
 801a258:	220a      	movs	r2, #10
 801a25a:	6062      	str	r2, [r4, #4]
 801a25c:	6862      	ldr	r2, [r4, #4]
 801a25e:	4945      	ldr	r1, [pc, #276]	; (801a374 <_scanf_i+0x1e4>)
 801a260:	6960      	ldr	r0, [r4, #20]
 801a262:	9301      	str	r3, [sp, #4]
 801a264:	1a89      	subs	r1, r1, r2
 801a266:	f000 f887 	bl	801a378 <__sccl>
 801a26a:	9b01      	ldr	r3, [sp, #4]
 801a26c:	f04f 0800 	mov.w	r8, #0
 801a270:	461d      	mov	r5, r3
 801a272:	68a3      	ldr	r3, [r4, #8]
 801a274:	6822      	ldr	r2, [r4, #0]
 801a276:	2b00      	cmp	r3, #0
 801a278:	d03a      	beq.n	801a2f0 <_scanf_i+0x160>
 801a27a:	6831      	ldr	r1, [r6, #0]
 801a27c:	6960      	ldr	r0, [r4, #20]
 801a27e:	f891 c000 	ldrb.w	ip, [r1]
 801a282:	f810 000c 	ldrb.w	r0, [r0, ip]
 801a286:	2800      	cmp	r0, #0
 801a288:	d032      	beq.n	801a2f0 <_scanf_i+0x160>
 801a28a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801a28e:	d121      	bne.n	801a2d4 <_scanf_i+0x144>
 801a290:	0510      	lsls	r0, r2, #20
 801a292:	d51f      	bpl.n	801a2d4 <_scanf_i+0x144>
 801a294:	f108 0801 	add.w	r8, r8, #1
 801a298:	b117      	cbz	r7, 801a2a0 <_scanf_i+0x110>
 801a29a:	3301      	adds	r3, #1
 801a29c:	3f01      	subs	r7, #1
 801a29e:	60a3      	str	r3, [r4, #8]
 801a2a0:	6873      	ldr	r3, [r6, #4]
 801a2a2:	3b01      	subs	r3, #1
 801a2a4:	2b00      	cmp	r3, #0
 801a2a6:	6073      	str	r3, [r6, #4]
 801a2a8:	dd1b      	ble.n	801a2e2 <_scanf_i+0x152>
 801a2aa:	6833      	ldr	r3, [r6, #0]
 801a2ac:	3301      	adds	r3, #1
 801a2ae:	6033      	str	r3, [r6, #0]
 801a2b0:	68a3      	ldr	r3, [r4, #8]
 801a2b2:	3b01      	subs	r3, #1
 801a2b4:	60a3      	str	r3, [r4, #8]
 801a2b6:	e7dc      	b.n	801a272 <_scanf_i+0xe2>
 801a2b8:	f1b8 0f02 	cmp.w	r8, #2
 801a2bc:	d1ad      	bne.n	801a21a <_scanf_i+0x8a>
 801a2be:	6822      	ldr	r2, [r4, #0]
 801a2c0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801a2c4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801a2c8:	d1bf      	bne.n	801a24a <_scanf_i+0xba>
 801a2ca:	2110      	movs	r1, #16
 801a2cc:	6061      	str	r1, [r4, #4]
 801a2ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a2d2:	e7a1      	b.n	801a218 <_scanf_i+0x88>
 801a2d4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801a2d8:	6022      	str	r2, [r4, #0]
 801a2da:	780b      	ldrb	r3, [r1, #0]
 801a2dc:	702b      	strb	r3, [r5, #0]
 801a2de:	3501      	adds	r5, #1
 801a2e0:	e7de      	b.n	801a2a0 <_scanf_i+0x110>
 801a2e2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a2e6:	4631      	mov	r1, r6
 801a2e8:	4658      	mov	r0, fp
 801a2ea:	4798      	blx	r3
 801a2ec:	2800      	cmp	r0, #0
 801a2ee:	d0df      	beq.n	801a2b0 <_scanf_i+0x120>
 801a2f0:	6823      	ldr	r3, [r4, #0]
 801a2f2:	05d9      	lsls	r1, r3, #23
 801a2f4:	d50c      	bpl.n	801a310 <_scanf_i+0x180>
 801a2f6:	454d      	cmp	r5, r9
 801a2f8:	d908      	bls.n	801a30c <_scanf_i+0x17c>
 801a2fa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801a2fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a302:	4632      	mov	r2, r6
 801a304:	4658      	mov	r0, fp
 801a306:	4798      	blx	r3
 801a308:	1e6f      	subs	r7, r5, #1
 801a30a:	463d      	mov	r5, r7
 801a30c:	454d      	cmp	r5, r9
 801a30e:	d029      	beq.n	801a364 <_scanf_i+0x1d4>
 801a310:	6822      	ldr	r2, [r4, #0]
 801a312:	f012 0210 	ands.w	r2, r2, #16
 801a316:	d113      	bne.n	801a340 <_scanf_i+0x1b0>
 801a318:	702a      	strb	r2, [r5, #0]
 801a31a:	6863      	ldr	r3, [r4, #4]
 801a31c:	9e00      	ldr	r6, [sp, #0]
 801a31e:	4649      	mov	r1, r9
 801a320:	4658      	mov	r0, fp
 801a322:	47b0      	blx	r6
 801a324:	f8da 3000 	ldr.w	r3, [sl]
 801a328:	6821      	ldr	r1, [r4, #0]
 801a32a:	1d1a      	adds	r2, r3, #4
 801a32c:	f8ca 2000 	str.w	r2, [sl]
 801a330:	f011 0f20 	tst.w	r1, #32
 801a334:	681b      	ldr	r3, [r3, #0]
 801a336:	d010      	beq.n	801a35a <_scanf_i+0x1ca>
 801a338:	6018      	str	r0, [r3, #0]
 801a33a:	68e3      	ldr	r3, [r4, #12]
 801a33c:	3301      	adds	r3, #1
 801a33e:	60e3      	str	r3, [r4, #12]
 801a340:	eba5 0509 	sub.w	r5, r5, r9
 801a344:	44a8      	add	r8, r5
 801a346:	6925      	ldr	r5, [r4, #16]
 801a348:	4445      	add	r5, r8
 801a34a:	6125      	str	r5, [r4, #16]
 801a34c:	2000      	movs	r0, #0
 801a34e:	b007      	add	sp, #28
 801a350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a354:	f04f 0800 	mov.w	r8, #0
 801a358:	e7ca      	b.n	801a2f0 <_scanf_i+0x160>
 801a35a:	07ca      	lsls	r2, r1, #31
 801a35c:	bf4c      	ite	mi
 801a35e:	8018      	strhmi	r0, [r3, #0]
 801a360:	6018      	strpl	r0, [r3, #0]
 801a362:	e7ea      	b.n	801a33a <_scanf_i+0x1aa>
 801a364:	2001      	movs	r0, #1
 801a366:	e7f2      	b.n	801a34e <_scanf_i+0x1be>
 801a368:	0801abb8 	.word	0x0801abb8
 801a36c:	08017ef9 	.word	0x08017ef9
 801a370:	0801a4f5 	.word	0x0801a4f5
 801a374:	0801ae35 	.word	0x0801ae35

0801a378 <__sccl>:
 801a378:	b570      	push	{r4, r5, r6, lr}
 801a37a:	780b      	ldrb	r3, [r1, #0]
 801a37c:	2b5e      	cmp	r3, #94	; 0x5e
 801a37e:	bf13      	iteet	ne
 801a380:	1c4a      	addne	r2, r1, #1
 801a382:	1c8a      	addeq	r2, r1, #2
 801a384:	784b      	ldrbeq	r3, [r1, #1]
 801a386:	2100      	movne	r1, #0
 801a388:	bf08      	it	eq
 801a38a:	2101      	moveq	r1, #1
 801a38c:	1e44      	subs	r4, r0, #1
 801a38e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801a392:	f804 1f01 	strb.w	r1, [r4, #1]!
 801a396:	42ac      	cmp	r4, r5
 801a398:	d1fb      	bne.n	801a392 <__sccl+0x1a>
 801a39a:	b913      	cbnz	r3, 801a3a2 <__sccl+0x2a>
 801a39c:	3a01      	subs	r2, #1
 801a39e:	4610      	mov	r0, r2
 801a3a0:	bd70      	pop	{r4, r5, r6, pc}
 801a3a2:	f081 0401 	eor.w	r4, r1, #1
 801a3a6:	54c4      	strb	r4, [r0, r3]
 801a3a8:	1c51      	adds	r1, r2, #1
 801a3aa:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801a3ae:	2d2d      	cmp	r5, #45	; 0x2d
 801a3b0:	f101 36ff 	add.w	r6, r1, #4294967295
 801a3b4:	460a      	mov	r2, r1
 801a3b6:	d006      	beq.n	801a3c6 <__sccl+0x4e>
 801a3b8:	2d5d      	cmp	r5, #93	; 0x5d
 801a3ba:	d0f0      	beq.n	801a39e <__sccl+0x26>
 801a3bc:	b90d      	cbnz	r5, 801a3c2 <__sccl+0x4a>
 801a3be:	4632      	mov	r2, r6
 801a3c0:	e7ed      	b.n	801a39e <__sccl+0x26>
 801a3c2:	462b      	mov	r3, r5
 801a3c4:	e7ef      	b.n	801a3a6 <__sccl+0x2e>
 801a3c6:	780e      	ldrb	r6, [r1, #0]
 801a3c8:	2e5d      	cmp	r6, #93	; 0x5d
 801a3ca:	d0fa      	beq.n	801a3c2 <__sccl+0x4a>
 801a3cc:	42b3      	cmp	r3, r6
 801a3ce:	dcf8      	bgt.n	801a3c2 <__sccl+0x4a>
 801a3d0:	3301      	adds	r3, #1
 801a3d2:	429e      	cmp	r6, r3
 801a3d4:	54c4      	strb	r4, [r0, r3]
 801a3d6:	dcfb      	bgt.n	801a3d0 <__sccl+0x58>
 801a3d8:	3102      	adds	r1, #2
 801a3da:	e7e6      	b.n	801a3aa <__sccl+0x32>

0801a3dc <strncmp>:
 801a3dc:	b510      	push	{r4, lr}
 801a3de:	b16a      	cbz	r2, 801a3fc <strncmp+0x20>
 801a3e0:	3901      	subs	r1, #1
 801a3e2:	1884      	adds	r4, r0, r2
 801a3e4:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a3e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a3ec:	4293      	cmp	r3, r2
 801a3ee:	d103      	bne.n	801a3f8 <strncmp+0x1c>
 801a3f0:	42a0      	cmp	r0, r4
 801a3f2:	d001      	beq.n	801a3f8 <strncmp+0x1c>
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	d1f5      	bne.n	801a3e4 <strncmp+0x8>
 801a3f8:	1a98      	subs	r0, r3, r2
 801a3fa:	bd10      	pop	{r4, pc}
 801a3fc:	4610      	mov	r0, r2
 801a3fe:	e7fc      	b.n	801a3fa <strncmp+0x1e>

0801a400 <_strtoul_l.isra.0>:
 801a400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a404:	4680      	mov	r8, r0
 801a406:	4689      	mov	r9, r1
 801a408:	4692      	mov	sl, r2
 801a40a:	461e      	mov	r6, r3
 801a40c:	460f      	mov	r7, r1
 801a40e:	463d      	mov	r5, r7
 801a410:	9808      	ldr	r0, [sp, #32]
 801a412:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a416:	f7fe ff0d 	bl	8019234 <__locale_ctype_ptr_l>
 801a41a:	4420      	add	r0, r4
 801a41c:	7843      	ldrb	r3, [r0, #1]
 801a41e:	f013 0308 	ands.w	r3, r3, #8
 801a422:	d130      	bne.n	801a486 <_strtoul_l.isra.0+0x86>
 801a424:	2c2d      	cmp	r4, #45	; 0x2d
 801a426:	d130      	bne.n	801a48a <_strtoul_l.isra.0+0x8a>
 801a428:	787c      	ldrb	r4, [r7, #1]
 801a42a:	1cbd      	adds	r5, r7, #2
 801a42c:	2101      	movs	r1, #1
 801a42e:	2e00      	cmp	r6, #0
 801a430:	d05c      	beq.n	801a4ec <_strtoul_l.isra.0+0xec>
 801a432:	2e10      	cmp	r6, #16
 801a434:	d109      	bne.n	801a44a <_strtoul_l.isra.0+0x4a>
 801a436:	2c30      	cmp	r4, #48	; 0x30
 801a438:	d107      	bne.n	801a44a <_strtoul_l.isra.0+0x4a>
 801a43a:	782b      	ldrb	r3, [r5, #0]
 801a43c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a440:	2b58      	cmp	r3, #88	; 0x58
 801a442:	d14e      	bne.n	801a4e2 <_strtoul_l.isra.0+0xe2>
 801a444:	786c      	ldrb	r4, [r5, #1]
 801a446:	2610      	movs	r6, #16
 801a448:	3502      	adds	r5, #2
 801a44a:	f04f 32ff 	mov.w	r2, #4294967295
 801a44e:	2300      	movs	r3, #0
 801a450:	fbb2 f2f6 	udiv	r2, r2, r6
 801a454:	fb06 fc02 	mul.w	ip, r6, r2
 801a458:	ea6f 0c0c 	mvn.w	ip, ip
 801a45c:	4618      	mov	r0, r3
 801a45e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801a462:	2f09      	cmp	r7, #9
 801a464:	d817      	bhi.n	801a496 <_strtoul_l.isra.0+0x96>
 801a466:	463c      	mov	r4, r7
 801a468:	42a6      	cmp	r6, r4
 801a46a:	dd23      	ble.n	801a4b4 <_strtoul_l.isra.0+0xb4>
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	db1e      	blt.n	801a4ae <_strtoul_l.isra.0+0xae>
 801a470:	4282      	cmp	r2, r0
 801a472:	d31c      	bcc.n	801a4ae <_strtoul_l.isra.0+0xae>
 801a474:	d101      	bne.n	801a47a <_strtoul_l.isra.0+0x7a>
 801a476:	45a4      	cmp	ip, r4
 801a478:	db19      	blt.n	801a4ae <_strtoul_l.isra.0+0xae>
 801a47a:	fb00 4006 	mla	r0, r0, r6, r4
 801a47e:	2301      	movs	r3, #1
 801a480:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a484:	e7eb      	b.n	801a45e <_strtoul_l.isra.0+0x5e>
 801a486:	462f      	mov	r7, r5
 801a488:	e7c1      	b.n	801a40e <_strtoul_l.isra.0+0xe>
 801a48a:	2c2b      	cmp	r4, #43	; 0x2b
 801a48c:	bf04      	itt	eq
 801a48e:	1cbd      	addeq	r5, r7, #2
 801a490:	787c      	ldrbeq	r4, [r7, #1]
 801a492:	4619      	mov	r1, r3
 801a494:	e7cb      	b.n	801a42e <_strtoul_l.isra.0+0x2e>
 801a496:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801a49a:	2f19      	cmp	r7, #25
 801a49c:	d801      	bhi.n	801a4a2 <_strtoul_l.isra.0+0xa2>
 801a49e:	3c37      	subs	r4, #55	; 0x37
 801a4a0:	e7e2      	b.n	801a468 <_strtoul_l.isra.0+0x68>
 801a4a2:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801a4a6:	2f19      	cmp	r7, #25
 801a4a8:	d804      	bhi.n	801a4b4 <_strtoul_l.isra.0+0xb4>
 801a4aa:	3c57      	subs	r4, #87	; 0x57
 801a4ac:	e7dc      	b.n	801a468 <_strtoul_l.isra.0+0x68>
 801a4ae:	f04f 33ff 	mov.w	r3, #4294967295
 801a4b2:	e7e5      	b.n	801a480 <_strtoul_l.isra.0+0x80>
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	da09      	bge.n	801a4cc <_strtoul_l.isra.0+0xcc>
 801a4b8:	2322      	movs	r3, #34	; 0x22
 801a4ba:	f8c8 3000 	str.w	r3, [r8]
 801a4be:	f04f 30ff 	mov.w	r0, #4294967295
 801a4c2:	f1ba 0f00 	cmp.w	sl, #0
 801a4c6:	d107      	bne.n	801a4d8 <_strtoul_l.isra.0+0xd8>
 801a4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4cc:	b101      	cbz	r1, 801a4d0 <_strtoul_l.isra.0+0xd0>
 801a4ce:	4240      	negs	r0, r0
 801a4d0:	f1ba 0f00 	cmp.w	sl, #0
 801a4d4:	d0f8      	beq.n	801a4c8 <_strtoul_l.isra.0+0xc8>
 801a4d6:	b10b      	cbz	r3, 801a4dc <_strtoul_l.isra.0+0xdc>
 801a4d8:	f105 39ff 	add.w	r9, r5, #4294967295
 801a4dc:	f8ca 9000 	str.w	r9, [sl]
 801a4e0:	e7f2      	b.n	801a4c8 <_strtoul_l.isra.0+0xc8>
 801a4e2:	2430      	movs	r4, #48	; 0x30
 801a4e4:	2e00      	cmp	r6, #0
 801a4e6:	d1b0      	bne.n	801a44a <_strtoul_l.isra.0+0x4a>
 801a4e8:	2608      	movs	r6, #8
 801a4ea:	e7ae      	b.n	801a44a <_strtoul_l.isra.0+0x4a>
 801a4ec:	2c30      	cmp	r4, #48	; 0x30
 801a4ee:	d0a4      	beq.n	801a43a <_strtoul_l.isra.0+0x3a>
 801a4f0:	260a      	movs	r6, #10
 801a4f2:	e7aa      	b.n	801a44a <_strtoul_l.isra.0+0x4a>

0801a4f4 <_strtoul_r>:
 801a4f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a4f6:	4c06      	ldr	r4, [pc, #24]	; (801a510 <_strtoul_r+0x1c>)
 801a4f8:	4d06      	ldr	r5, [pc, #24]	; (801a514 <_strtoul_r+0x20>)
 801a4fa:	6824      	ldr	r4, [r4, #0]
 801a4fc:	6a24      	ldr	r4, [r4, #32]
 801a4fe:	2c00      	cmp	r4, #0
 801a500:	bf08      	it	eq
 801a502:	462c      	moveq	r4, r5
 801a504:	9400      	str	r4, [sp, #0]
 801a506:	f7ff ff7b 	bl	801a400 <_strtoul_l.isra.0>
 801a50a:	b003      	add	sp, #12
 801a50c:	bd30      	pop	{r4, r5, pc}
 801a50e:	bf00      	nop
 801a510:	2000000c 	.word	0x2000000c
 801a514:	20000070 	.word	0x20000070

0801a518 <__submore>:
 801a518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a51c:	460c      	mov	r4, r1
 801a51e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801a520:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a524:	4299      	cmp	r1, r3
 801a526:	d11d      	bne.n	801a564 <__submore+0x4c>
 801a528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a52c:	f7fb fece 	bl	80162cc <_malloc_r>
 801a530:	b918      	cbnz	r0, 801a53a <__submore+0x22>
 801a532:	f04f 30ff 	mov.w	r0, #4294967295
 801a536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a53a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a53e:	63a3      	str	r3, [r4, #56]	; 0x38
 801a540:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801a544:	6360      	str	r0, [r4, #52]	; 0x34
 801a546:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801a54a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801a54e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801a552:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a556:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801a55a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801a55e:	6020      	str	r0, [r4, #0]
 801a560:	2000      	movs	r0, #0
 801a562:	e7e8      	b.n	801a536 <__submore+0x1e>
 801a564:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801a566:	0077      	lsls	r7, r6, #1
 801a568:	463a      	mov	r2, r7
 801a56a:	f000 f835 	bl	801a5d8 <_realloc_r>
 801a56e:	4605      	mov	r5, r0
 801a570:	2800      	cmp	r0, #0
 801a572:	d0de      	beq.n	801a532 <__submore+0x1a>
 801a574:	eb00 0806 	add.w	r8, r0, r6
 801a578:	4601      	mov	r1, r0
 801a57a:	4632      	mov	r2, r6
 801a57c:	4640      	mov	r0, r8
 801a57e:	f7fe fe8d 	bl	801929c <memcpy>
 801a582:	f8c4 8000 	str.w	r8, [r4]
 801a586:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801a58a:	e7e9      	b.n	801a560 <__submore+0x48>

0801a58c <__ascii_wctomb>:
 801a58c:	b149      	cbz	r1, 801a5a2 <__ascii_wctomb+0x16>
 801a58e:	2aff      	cmp	r2, #255	; 0xff
 801a590:	bf85      	ittet	hi
 801a592:	238a      	movhi	r3, #138	; 0x8a
 801a594:	6003      	strhi	r3, [r0, #0]
 801a596:	700a      	strbls	r2, [r1, #0]
 801a598:	f04f 30ff 	movhi.w	r0, #4294967295
 801a59c:	bf98      	it	ls
 801a59e:	2001      	movls	r0, #1
 801a5a0:	4770      	bx	lr
 801a5a2:	4608      	mov	r0, r1
 801a5a4:	4770      	bx	lr

0801a5a6 <memmove>:
 801a5a6:	4288      	cmp	r0, r1
 801a5a8:	b510      	push	{r4, lr}
 801a5aa:	eb01 0302 	add.w	r3, r1, r2
 801a5ae:	d807      	bhi.n	801a5c0 <memmove+0x1a>
 801a5b0:	1e42      	subs	r2, r0, #1
 801a5b2:	4299      	cmp	r1, r3
 801a5b4:	d00a      	beq.n	801a5cc <memmove+0x26>
 801a5b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a5ba:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a5be:	e7f8      	b.n	801a5b2 <memmove+0xc>
 801a5c0:	4283      	cmp	r3, r0
 801a5c2:	d9f5      	bls.n	801a5b0 <memmove+0xa>
 801a5c4:	1881      	adds	r1, r0, r2
 801a5c6:	1ad2      	subs	r2, r2, r3
 801a5c8:	42d3      	cmn	r3, r2
 801a5ca:	d100      	bne.n	801a5ce <memmove+0x28>
 801a5cc:	bd10      	pop	{r4, pc}
 801a5ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a5d2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a5d6:	e7f7      	b.n	801a5c8 <memmove+0x22>

0801a5d8 <_realloc_r>:
 801a5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5da:	4607      	mov	r7, r0
 801a5dc:	4614      	mov	r4, r2
 801a5de:	460e      	mov	r6, r1
 801a5e0:	b921      	cbnz	r1, 801a5ec <_realloc_r+0x14>
 801a5e2:	4611      	mov	r1, r2
 801a5e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a5e8:	f7fb be70 	b.w	80162cc <_malloc_r>
 801a5ec:	b922      	cbnz	r2, 801a5f8 <_realloc_r+0x20>
 801a5ee:	f7fb fe1f 	bl	8016230 <_free_r>
 801a5f2:	4625      	mov	r5, r4
 801a5f4:	4628      	mov	r0, r5
 801a5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5f8:	f000 f814 	bl	801a624 <_malloc_usable_size_r>
 801a5fc:	42a0      	cmp	r0, r4
 801a5fe:	d20f      	bcs.n	801a620 <_realloc_r+0x48>
 801a600:	4621      	mov	r1, r4
 801a602:	4638      	mov	r0, r7
 801a604:	f7fb fe62 	bl	80162cc <_malloc_r>
 801a608:	4605      	mov	r5, r0
 801a60a:	2800      	cmp	r0, #0
 801a60c:	d0f2      	beq.n	801a5f4 <_realloc_r+0x1c>
 801a60e:	4631      	mov	r1, r6
 801a610:	4622      	mov	r2, r4
 801a612:	f7fe fe43 	bl	801929c <memcpy>
 801a616:	4631      	mov	r1, r6
 801a618:	4638      	mov	r0, r7
 801a61a:	f7fb fe09 	bl	8016230 <_free_r>
 801a61e:	e7e9      	b.n	801a5f4 <_realloc_r+0x1c>
 801a620:	4635      	mov	r5, r6
 801a622:	e7e7      	b.n	801a5f4 <_realloc_r+0x1c>

0801a624 <_malloc_usable_size_r>:
 801a624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a628:	1f18      	subs	r0, r3, #4
 801a62a:	2b00      	cmp	r3, #0
 801a62c:	bfbc      	itt	lt
 801a62e:	580b      	ldrlt	r3, [r1, r0]
 801a630:	18c0      	addlt	r0, r0, r3
 801a632:	4770      	bx	lr

0801a634 <_init>:
 801a634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a636:	bf00      	nop
 801a638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a63a:	bc08      	pop	{r3}
 801a63c:	469e      	mov	lr, r3
 801a63e:	4770      	bx	lr

0801a640 <_fini>:
 801a640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a642:	bf00      	nop
 801a644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a646:	bc08      	pop	{r3}
 801a648:	469e      	mov	lr, r3
 801a64a:	4770      	bx	lr
