
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018570  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b4c  08018730  08018730  00028730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801927c  0801927c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801927c  0801927c  0002927c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019284  08019284  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08019284  08019284  00029284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801928c  0801928c  0002928c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08019290  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00040c70  200001e0  0801946c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20040e50  0801946c  00030e50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038d9f  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007942  00000000  00000000  00068fab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002280  00000000  00000000  000708f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fc0  00000000  00000000  00072b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036f89  00000000  00000000  00074b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025a8c  00000000  00000000  000abab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110a8f  00000000  00000000  000d1545  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e1fd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a414  00000000  00000000  001e2050  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08018718 	.word	0x08018718

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08018718 	.word	0x08018718

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f009 f840 	bl	800a05c <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2003e944 	.word	0x2003e944

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f009 f828 	bl	800a05c <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2003e944 	.word	0x2003e944

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f008 fec9 	bl	8009db8 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f007 fc30 	bl	800888c <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f007 fc2a 	bl	800888c <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f007 fc24 	bl	800888c <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f007 fc1e 	bl	800888c <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f007 fc18 	bl	800888c <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f007 fc12 	bl	800888c <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f007 fc0c 	bl	800888c <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f007 fc06 	bl	800888c <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f007 fc00 	bl	800888c <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f007 fbfa 	bl	800888c <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f007 fbee 	bl	800888c <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f007 fbe8 	bl	800888c <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f014 fec9 	bl	8015ec0 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011b4:	213c      	movs	r1, #60	; 0x3c
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <_ZN7Encoder4initEv+0x30>)
 80011b8:	f00c fde8 	bl	800dd8c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011bc:	213c      	movs	r1, #60	; 0x3c
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <_ZN7Encoder4initEv+0x34>)
 80011c0:	f00c fde4 	bl	800dd8c <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <_ZN7Encoder4initEv+0x38>)
 80011c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <_ZN7Encoder4initEv+0x3c>)
 80011ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2003eb98 	.word	0x2003eb98
 80011e0:	2003e87c 	.word	0x2003e87c
 80011e4:	40010000 	.word	0x40010000
 80011e8:	40010400 	.word	0x40010400
 80011ec:	00000000 	.word	0x00000000

080011f0 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011f8:	4b69      	ldr	r3, [pc, #420]	; (80013a0 <_ZN7Encoder6updateEv+0x1b0>)
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001204:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001214:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001218:	4b64      	ldr	r3, [pc, #400]	; (80013ac <_ZN7Encoder6updateEv+0x1bc>)
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001224:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800122c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001234:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4a5d      	ldr	r2, [pc, #372]	; (80013b0 <_ZN7Encoder6updateEv+0x1c0>)
 800123c:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f999 	bl	8000578 <__aeabi_f2d>
 8001246:	a350      	add	r3, pc, #320	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7ff f9ec 	bl	8000628 <__aeabi_dmul>
 8001250:	4603      	mov	r3, r0
 8001252:	460c      	mov	r4, r1
 8001254:	4625      	mov	r5, r4
 8001256:	461c      	mov	r4, r3
 8001258:	4b56      	ldr	r3, [pc, #344]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f98b 	bl	8000578 <__aeabi_f2d>
 8001262:	a34b      	add	r3, pc, #300	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff f9de 	bl	8000628 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4620      	mov	r0, r4
 8001272:	4629      	mov	r1, r5
 8001274:	f7ff f822 	bl	80002bc <__adddf3>
 8001278:	4603      	mov	r3, r0
 800127a:	460c      	mov	r4, r1
 800127c:	4618      	mov	r0, r3
 800127e:	4621      	mov	r1, r4
 8001280:	f7ff fcca 	bl	8000c18 <__aeabi_d2f>
 8001284:	4602      	mov	r2, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f973 	bl	8000578 <__aeabi_f2d>
 8001292:	a33d      	add	r3, pc, #244	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f9c6 	bl	8000628 <__aeabi_dmul>
 800129c:	4603      	mov	r3, r0
 800129e:	460c      	mov	r4, r1
 80012a0:	4625      	mov	r5, r4
 80012a2:	461c      	mov	r4, r3
 80012a4:	4b44      	ldr	r3, [pc, #272]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f965 	bl	8000578 <__aeabi_f2d>
 80012ae:	a338      	add	r3, pc, #224	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7ff f9b8 	bl	8000628 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4620      	mov	r0, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	f7fe fffc 	bl	80002bc <__adddf3>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	4618      	mov	r0, r3
 80012ca:	4621      	mov	r1, r4
 80012cc:	f7ff fca4 	bl	8000c18 <__aeabi_d2f>
 80012d0:	4602      	mov	r2, r0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a38      	ldr	r2, [pc, #224]	; (80013bc <_ZN7Encoder6updateEv+0x1cc>)
 80012dc:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a34      	ldr	r2, [pc, #208]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 80012e4:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	4a33      	ldr	r2, [pc, #204]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012ec:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	ed93 7a00 	vldr	s14, [r3]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fe:	ee17 0a90 	vmov	r0, s15
 8001302:	f7ff f939 	bl	8000578 <__aeabi_f2d>
 8001306:	a324      	add	r3, pc, #144	; (adr r3, 8001398 <_ZN7Encoder6updateEv+0x1a8>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f98c 	bl	8000628 <__aeabi_dmul>
 8001310:	4603      	mov	r3, r0
 8001312:	460c      	mov	r4, r1
 8001314:	4618      	mov	r0, r3
 8001316:	4621      	mov	r1, r4
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001320:	f7ff faac 	bl	800087c <__aeabi_ddiv>
 8001324:	4603      	mov	r3, r0
 8001326:	460c      	mov	r4, r1
 8001328:	4618      	mov	r0, r3
 800132a:	4621      	mov	r1, r4
 800132c:	f7ff fc74 	bl	8000c18 <__aeabi_d2f>
 8001330:	4602      	mov	r2, r0
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	ed93 7a05 	vldr	s14, [r3, #20]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edd3 7a02 	vldr	s15, [r3, #8]
 8001358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	ed93 7a07 	vldr	s14, [r3, #28]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	edd3 7a02 	vldr	s15, [r3, #8]
 800136e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <_ZN7Encoder6updateEv+0x1d0>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bdb0      	pop	{r4, r5, r7, pc}
 8001388:	9999999a 	.word	0x9999999a
 800138c:	3fa99999 	.word	0x3fa99999
 8001390:	66666666 	.word	0x66666666
 8001394:	3fee6666 	.word	0x3fee6666
 8001398:	ce73a049 	.word	0xce73a049
 800139c:	3f77a3f6 	.word	0x3f77a3f6
 80013a0:	40010000 	.word	0x40010000
 80013a4:	47000000 	.word	0x47000000
 80013a8:	3f912547 	.word	0x3f912547
 80013ac:	40010400 	.word	0x40010400
 80013b0:	20000200 	.word	0x20000200
 80013b4:	20000208 	.word	0x20000208
 80013b8:	2000020c 	.word	0x2000020c
 80013bc:	20000204 	.word	0x20000204
 80013c0:	200001fc 	.word	0x200001fc

080013c4 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_ZN7Encoder5clearEv+0x3c>)
 80013de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <_ZN7Encoder5clearEv+0x40>)
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40010000 	.word	0x40010000
 8001404:	40010400 	.word	0x40010400

08001408 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	601a      	str	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	return distance_;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	ee07 3a90 	vmov	s15, r3
}
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	ee07 3a90 	vmov	s15, r3
}
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	ee07 3a90 	vmov	s15, r3
}
 800147c:	eeb0 0a67 	vmov.f32	s0, s15
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	619a      	str	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	ee07 3a90 	vmov	s15, r3
}
 80014f0:	eeb0 0a67 	vmov.f32	s0, s15
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001528:	6839      	ldr	r1, [r7, #0]
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f978 	bl	8001820 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 8001530:	f000 f98c 	bl	800184c <fopen_folder_and_file>

	return ret;
 8001534:	7bfb      	ldrb	r3, [r7, #15]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 800154a:	4804      	ldr	r0, [pc, #16]	; (800155c <user_fclose+0x1c>)
 800154c:	f011 f978 	bl	8012840 <f_close>

	return ret;
 8001550:	79fb      	ldrb	r3, [r7, #7]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2003d788 	.word	0x2003d788

08001560 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b087      	sub	sp, #28
 8001564:	af02      	add	r7, sp, #8
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	80fb      	strh	r3, [r7, #6]
 800156c:	4613      	mov	r3, r2
 800156e:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001574:	2300      	movs	r3, #0
 8001576:	81fb      	strh	r3, [r7, #14]
 8001578:	e030      	b.n	80015dc <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800157a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	4413      	add	r3, r2
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe fff6 	bl	8000578 <__aeabi_f2d>
 800158c:	4603      	mov	r3, r0
 800158e:	460c      	mov	r4, r1
 8001590:	e9cd 3400 	strd	r3, r4, [sp]
 8001594:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <sd_write_float+0x94>)
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	4817      	ldr	r0, [pc, #92]	; (80015f8 <sd_write_float+0x98>)
 800159a:	f013 fd45 	bl	8015028 <sniprintf>

		if(state == ADD_WRITE){
 800159e:	797b      	ldrb	r3, [r7, #5]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80015a4:	4b15      	ldr	r3, [pc, #84]	; (80015fc <sd_write_float+0x9c>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4619      	mov	r1, r3
 80015aa:	4814      	ldr	r0, [pc, #80]	; (80015fc <sd_write_float+0x9c>)
 80015ac:	f011 f9bc 	bl	8012928 <f_lseek>
 80015b0:	e003      	b.n	80015ba <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 80015b2:	2100      	movs	r1, #0
 80015b4:	4811      	ldr	r0, [pc, #68]	; (80015fc <sd_write_float+0x9c>)
 80015b6:	f011 f9b7 	bl	8012928 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80015ba:	480f      	ldr	r0, [pc, #60]	; (80015f8 <sd_write_float+0x98>)
 80015bc:	f7fe fe20 	bl	8000200 <strlen>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <sd_write_float+0xa0>)
 80015c4:	490c      	ldr	r1, [pc, #48]	; (80015f8 <sd_write_float+0x98>)
 80015c6:	480d      	ldr	r0, [pc, #52]	; (80015fc <sd_write_float+0x9c>)
 80015c8:	f010 ff25 	bl	8012416 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80015cc:	f000 f958 	bl	8001880 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	3301      	adds	r3, #1
 80015d8:	b29b      	uxth	r3, r3
 80015da:	81fb      	strh	r3, [r7, #14]
 80015dc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbc8      	blt.n	800157a <sd_write_float+0x1a>
	}
	return ret;
 80015e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd90      	pop	{r4, r7, pc}
 80015f2:	bf00      	nop
 80015f4:	08018730 	.word	0x08018730
 80015f8:	2003d6f8 	.word	0x2003d6f8
 80015fc:	2003d788 	.word	0x2003d788
 8001600:	2003d778 	.word	0x2003d778

08001604 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af02      	add	r7, sp, #8
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	4613      	mov	r3, r2
 8001612:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 f900 	bl	8001820 <create_path>

	if(state == OVER_WRITE){
 8001620:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001624:	2b00      	cmp	r3, #0
 8001626:	d108      	bne.n	800163a <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001628:	4822      	ldr	r0, [pc, #136]	; (80016b4 <sd_write_array_float+0xb0>)
 800162a:	f011 f933 	bl	8012894 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800162e:	4822      	ldr	r0, [pc, #136]	; (80016b8 <sd_write_array_float+0xb4>)
 8001630:	f011 fb9e 	bl	8012d70 <f_unlink>
		f_chdir("..");
 8001634:	4821      	ldr	r0, [pc, #132]	; (80016bc <sd_write_array_float+0xb8>)
 8001636:	f011 f92d 	bl	8012894 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 800163a:	f000 f907 	bl	800184c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800163e:	2300      	movs	r3, #0
 8001640:	82fb      	strh	r3, [r7, #22]
 8001642:	e028      	b.n	8001696 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001644:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	4413      	add	r3, r2
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff91 	bl	8000578 <__aeabi_f2d>
 8001656:	4603      	mov	r3, r0
 8001658:	460c      	mov	r4, r1
 800165a:	e9cd 3400 	strd	r3, r4, [sp]
 800165e:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <sd_write_array_float+0xbc>)
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	4818      	ldr	r0, [pc, #96]	; (80016c4 <sd_write_array_float+0xc0>)
 8001664:	f013 fce0 	bl	8015028 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <sd_write_array_float+0xc4>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4619      	mov	r1, r3
 800166e:	4816      	ldr	r0, [pc, #88]	; (80016c8 <sd_write_array_float+0xc4>)
 8001670:	f011 f95a 	bl	8012928 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001674:	4813      	ldr	r0, [pc, #76]	; (80016c4 <sd_write_array_float+0xc0>)
 8001676:	f7fe fdc3 	bl	8000200 <strlen>
 800167a:	4602      	mov	r2, r0
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <sd_write_array_float+0xc8>)
 800167e:	4911      	ldr	r1, [pc, #68]	; (80016c4 <sd_write_array_float+0xc0>)
 8001680:	4811      	ldr	r0, [pc, #68]	; (80016c8 <sd_write_array_float+0xc4>)
 8001682:	f010 fec8 	bl	8012416 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001686:	f000 f8fb 	bl	8001880 <bufclear>
	for(short i = 0 ; i < size; i++){
 800168a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800168e:	b29b      	uxth	r3, r3
 8001690:	3301      	adds	r3, #1
 8001692:	b29b      	uxth	r3, r3
 8001694:	82fb      	strh	r3, [r7, #22]
 8001696:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800169a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169e:	429a      	cmp	r2, r3
 80016a0:	dbd0      	blt.n	8001644 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80016a2:	4809      	ldr	r0, [pc, #36]	; (80016c8 <sd_write_array_float+0xc4>)
 80016a4:	f011 f8cc 	bl	8012840 <f_close>

	return ret;
 80016a8:	7d7b      	ldrb	r3, [r7, #21]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	371c      	adds	r7, #28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd90      	pop	{r4, r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2003d5f8 	.word	0x2003d5f8
 80016b8:	2003c4b8 	.word	0x2003c4b8
 80016bc:	0801874c 	.word	0x0801874c
 80016c0:	08018730 	.word	0x08018730
 80016c4:	2003d6f8 	.word	0x2003d6f8
 80016c8:	2003d788 	.word	0x2003d788
 80016cc:	2003d778 	.word	0x2003d778

080016d0 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 f898 	bl	8001820 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016f0:	f000 f8ac 	bl	800184c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016f4:	e019      	b.n	800172a <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 80016f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	461a      	mov	r2, r3
 8001702:	4913      	ldr	r1, [pc, #76]	; (8001750 <sd_read_array_float+0x80>)
 8001704:	4813      	ldr	r0, [pc, #76]	; (8001754 <sd_read_array_float+0x84>)
 8001706:	f013 fce3 	bl	80150d0 <siscanf>
		i++;
 800170a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800170e:	b29b      	uxth	r3, r3
 8001710:	3301      	adds	r3, #1
 8001712:	b29b      	uxth	r3, r3
 8001714:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001716:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800171a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171e:	429a      	cmp	r2, r3
 8001720:	db03      	blt.n	800172a <sd_read_array_float+0x5a>
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	3b01      	subs	r3, #1
 8001726:	b29b      	uxth	r3, r3
 8001728:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <sd_read_array_float+0x88>)
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	4809      	ldr	r0, [pc, #36]	; (8001754 <sd_read_array_float+0x84>)
 8001730:	f011 fcfc 	bl	801312c <f_gets>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1dd      	bne.n	80016f6 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800173a:	f000 f8a1 	bl	8001880 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800173e:	4806      	ldr	r0, [pc, #24]	; (8001758 <sd_read_array_float+0x88>)
 8001740:	f011 f87e 	bl	8012840 <f_close>

	return ret;
 8001744:	7d7b      	ldrb	r3, [r7, #21]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	0801873c 	.word	0x0801873c
 8001754:	2003d6f8 	.word	0x2003d6f8
 8001758:	2003d788 	.word	0x2003d788

0800175c <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	4613      	mov	r3, r2
 800176a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 f852 	bl	8001820 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800177c:	f000 f866 	bl	800184c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001780:	e019      	b.n	80017b6 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 8001782:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	4413      	add	r3, r2
 800178c:	461a      	mov	r2, r3
 800178e:	4913      	ldr	r1, [pc, #76]	; (80017dc <sd_read_array_double+0x80>)
 8001790:	4813      	ldr	r0, [pc, #76]	; (80017e0 <sd_read_array_double+0x84>)
 8001792:	f013 fc9d 	bl	80150d0 <siscanf>
		i++;
 8001796:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800179a:	b29b      	uxth	r3, r3
 800179c:	3301      	adds	r3, #1
 800179e:	b29b      	uxth	r3, r3
 80017a0:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80017a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	db03      	blt.n	80017b6 <sd_read_array_double+0x5a>
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80017b6:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <sd_read_array_double+0x88>)
 80017b8:	2180      	movs	r1, #128	; 0x80
 80017ba:	4809      	ldr	r0, [pc, #36]	; (80017e0 <sd_read_array_double+0x84>)
 80017bc:	f011 fcb6 	bl	801312c <f_gets>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1dd      	bne.n	8001782 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80017c6:	f000 f85b 	bl	8001880 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80017ca:	4806      	ldr	r0, [pc, #24]	; (80017e4 <sd_read_array_double+0x88>)
 80017cc:	f011 f838 	bl	8012840 <f_close>

	return ret;
 80017d0:	7d7b      	ldrb	r3, [r7, #21]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	08018748 	.word	0x08018748
 80017e0:	2003d6f8 	.word	0x2003d6f8
 80017e4:	2003d788 	.word	0x2003d788

080017e8 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80017f2:	2201      	movs	r2, #1
 80017f4:	4908      	ldr	r1, [pc, #32]	; (8001818 <sd_mount+0x30>)
 80017f6:	4809      	ldr	r0, [pc, #36]	; (800181c <sd_mount+0x34>)
 80017f8:	f010 fa9a 	bl	8011d30 <f_mount>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <sd_mount+0x20>
 8001802:	2301      	movs	r3, #1
 8001804:	71fb      	strb	r3, [r7, #7]
 8001806:	e001      	b.n	800180c <sd_mount+0x24>
	else ret = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	71fb      	strb	r3, [r7, #7]

	return ret;
 800180c:	79fb      	ldrb	r3, [r7, #7]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	08018758 	.word	0x08018758
 800181c:	2003c5b8 	.word	0x2003c5b8

08001820 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <create_path+0x24>)
 800182e:	f013 fc7b 	bl	8015128 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001832:	6839      	ldr	r1, [r7, #0]
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <create_path+0x28>)
 8001836:	f013 fc77 	bl	8015128 <strcpy>

}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2003d5f8 	.word	0x2003d5f8
 8001848:	2003c4b8 	.word	0x2003c4b8

0800184c <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001850:	4807      	ldr	r0, [pc, #28]	; (8001870 <fopen_folder_and_file+0x24>)
 8001852:	f011 fb4f 	bl	8012ef4 <f_mkdir>

	f_chdir(dirpath);
 8001856:	4806      	ldr	r0, [pc, #24]	; (8001870 <fopen_folder_and_file+0x24>)
 8001858:	f011 f81c 	bl	8012894 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800185c:	2213      	movs	r2, #19
 800185e:	4905      	ldr	r1, [pc, #20]	; (8001874 <fopen_folder_and_file+0x28>)
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <fopen_folder_and_file+0x2c>)
 8001862:	f010 faab 	bl	8011dbc <f_open>

	f_chdir("..");
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <fopen_folder_and_file+0x30>)
 8001868:	f011 f814 	bl	8012894 <f_chdir>


}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	2003d5f8 	.word	0x2003d5f8
 8001874:	2003c4b8 	.word	0x2003c4b8
 8001878:	2003d788 	.word	0x2003d788
 800187c:	0801874c 	.word	0x0801874c

08001880 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	e007      	b.n	800189c <bufclear+0x1c>
		buffer[i] = '\0';
 800188c:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <bufclear+0x30>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3301      	adds	r3, #1
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b7f      	cmp	r3, #127	; 0x7f
 80018a0:	ddf4      	ble.n	800188c <bufclear+0xc>
	}
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	2003d6f8 	.word	0x2003d6f8

080018b4 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ce:	480e      	ldr	r0, [pc, #56]	; (8001908 <read_byte+0x54>)
 80018d0:	f008 fa72 	bl	8009db8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018d4:	f107 010f 	add.w	r1, r7, #15
 80018d8:	2364      	movs	r3, #100	; 0x64
 80018da:	2201      	movs	r2, #1
 80018dc:	480b      	ldr	r0, [pc, #44]	; (800190c <read_byte+0x58>)
 80018de:	f00b fc1b 	bl	800d118 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 80018e2:	f107 010e 	add.w	r1, r7, #14
 80018e6:	2364      	movs	r3, #100	; 0x64
 80018e8:	2201      	movs	r2, #1
 80018ea:	4808      	ldr	r0, [pc, #32]	; (800190c <read_byte+0x58>)
 80018ec:	f00b fd48 	bl	800d380 <HAL_SPI_Receive>
	CS_SET;
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018f6:	4804      	ldr	r0, [pc, #16]	; (8001908 <read_byte+0x54>)
 80018f8:	f008 fa5e 	bl	8009db8 <HAL_GPIO_WritePin>

	return val;
 80018fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40020400 	.word	0x40020400
 800190c:	2003e824 	.word	0x2003e824

08001910 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	460a      	mov	r2, r1
 800191a:	71fb      	strb	r3, [r7, #7]
 800191c:	4613      	mov	r3, r2
 800191e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001926:	b2db      	uxtb	r3, r3
 8001928:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <write_byte+0x54>)
 8001932:	f008 fa41 	bl	8009db8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001936:	f107 010f 	add.w	r1, r7, #15
 800193a:	2364      	movs	r3, #100	; 0x64
 800193c:	2201      	movs	r2, #1
 800193e:	480a      	ldr	r0, [pc, #40]	; (8001968 <write_byte+0x58>)
 8001940:	f00b fbea 	bl	800d118 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001944:	1db9      	adds	r1, r7, #6
 8001946:	2364      	movs	r3, #100	; 0x64
 8001948:	2201      	movs	r2, #1
 800194a:	4807      	ldr	r0, [pc, #28]	; (8001968 <write_byte+0x58>)
 800194c:	f00b fbe4 	bl	800d118 <HAL_SPI_Transmit>
	CS_SET;
 8001950:	2201      	movs	r2, #1
 8001952:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <write_byte+0x54>)
 8001958:	f008 fa2e 	bl	8009db8 <HAL_GPIO_WritePin>
}
 800195c:	bf00      	nop
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40020400 	.word	0x40020400
 8001968:	2003e824 	.word	0x2003e824

0800196c <IMU_init>:

uint16_t IMU_init() {
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff ff9c 	bl	80018b4 <read_byte>
 800197c:	4603      	mov	r3, r0
 800197e:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001980:	797b      	ldrb	r3, [r7, #5]
 8001982:	2be0      	cmp	r3, #224	; 0xe0
 8001984:	d119      	bne.n	80019ba <IMU_init+0x4e>
		ret = 1;
 8001986:	2301      	movs	r3, #1
 8001988:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800198a:	2101      	movs	r1, #1
 800198c:	2006      	movs	r0, #6
 800198e:	f7ff ffbf 	bl	8001910 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001992:	2110      	movs	r1, #16
 8001994:	2003      	movs	r0, #3
 8001996:	f7ff ffbb 	bl	8001910 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800199a:	2120      	movs	r1, #32
 800199c:	207f      	movs	r0, #127	; 0x7f
 800199e:	f7ff ffb7 	bl	8001910 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 80019a2:	2106      	movs	r1, #6
 80019a4:	2001      	movs	r0, #1
 80019a6:	f7ff ffb3 	bl	8001910 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 80019aa:	2106      	movs	r1, #6
 80019ac:	2014      	movs	r0, #20
 80019ae:	f7ff ffaf 	bl	8001910 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80019b2:	2100      	movs	r1, #0
 80019b4:	207f      	movs	r0, #127	; 0x7f
 80019b6:	f7ff ffab 	bl	8001910 <write_byte>
	}
	return ret;
 80019ba:	88fb      	ldrh	r3, [r7, #6]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <read_gyro_data>:

void read_gyro_data() {
 80019c4:	b598      	push	{r3, r4, r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80019c8:	2033      	movs	r0, #51	; 0x33
 80019ca:	f7ff ff73 	bl	80018b4 <read_byte>
 80019ce:	4603      	mov	r3, r0
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	b21c      	sxth	r4, r3
 80019d4:	2034      	movs	r0, #52	; 0x34
 80019d6:	f7ff ff6d 	bl	80018b4 <read_byte>
 80019da:	4603      	mov	r3, r0
 80019dc:	b21b      	sxth	r3, r3
 80019de:	4323      	orrs	r3, r4
 80019e0:	b21a      	sxth	r2, r3
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <read_gyro_data+0x64>)
 80019e4:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80019e6:	2035      	movs	r0, #53	; 0x35
 80019e8:	f7ff ff64 	bl	80018b4 <read_byte>
 80019ec:	4603      	mov	r3, r0
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	b21c      	sxth	r4, r3
 80019f2:	2036      	movs	r0, #54	; 0x36
 80019f4:	f7ff ff5e 	bl	80018b4 <read_byte>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	4323      	orrs	r3, r4
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <read_gyro_data+0x68>)
 8001a02:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001a04:	2037      	movs	r0, #55	; 0x37
 8001a06:	f7ff ff55 	bl	80018b4 <read_byte>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	b21c      	sxth	r4, r3
 8001a10:	2038      	movs	r0, #56	; 0x38
 8001a12:	f7ff ff4f 	bl	80018b4 <read_byte>
 8001a16:	4603      	mov	r3, r0
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	4323      	orrs	r3, r4
 8001a1c:	b21a      	sxth	r2, r3
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <read_gyro_data+0x6c>)
 8001a20:	801a      	strh	r2, [r3, #0]
}
 8001a22:	bf00      	nop
 8001a24:	bd98      	pop	{r3, r4, r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2003e7c0 	.word	0x2003e7c0
 8001a2c:	2003e7be 	.word	0x2003e7be
 8001a30:	2003e7b8 	.word	0x2003e7b8

08001a34 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	801a      	strh	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	805a      	strh	r2, [r3, #2]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	809a      	strh	r2, [r3, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	80da      	strh	r2, [r3, #6]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	811a      	strh	r2, [r3, #8]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	815a      	strh	r2, [r3, #10]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
{

}
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a80:	f7ff ff74 	bl	800196c <IMU_init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001a88:	f7ff fb0a 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7ff fb16 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001a94:	4809      	ldr	r0, [pc, #36]	; (8001abc <_ZN3IMU4initEv+0x44>)
 8001a96:	f7ff fb3d 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7ff fb0f 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001aa2:	89fb      	ldrh	r3, [r7, #14]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <_ZN3IMU4initEv+0x48>)
 8001aa8:	f7ff fb34 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001aac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ab0:	f006 feec 	bl	800888c <HAL_Delay>

}
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	0801875c 	.word	0x0801875c
 8001ac0:	08018768 	.word	0x08018768
 8001ac4:	00000000 	.word	0x00000000

08001ac8 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001ad0:	f7ff ff78 	bl	80019c4 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <_ZN3IMU12updateValuesEv+0xa0>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	b21a      	sxth	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <_ZN3IMU12updateValuesEv+0xa4>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001ae8:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <_ZN3IMU12updateValuesEv+0xa8>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	b21a      	sxth	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd2b 	bl	8000554 <__aeabi_i2d>
 8001afe:	a316      	add	r3, pc, #88	; (adr r3, 8001b58 <_ZN3IMU12updateValuesEv+0x90>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe fd90 	bl	8000628 <__aeabi_dmul>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	460c      	mov	r4, r1
 8001b0c:	4625      	mov	r5, r4
 8001b0e:	461c      	mov	r4, r3
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <_ZN3IMU12updateValuesEv+0xac>)
 8001b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fd1c 	bl	8000554 <__aeabi_i2d>
 8001b1c:	a310      	add	r3, pc, #64	; (adr r3, 8001b60 <_ZN3IMU12updateValuesEv+0x98>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe fd81 	bl	8000628 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	f7fe fbc5 	bl	80002bc <__adddf3>
 8001b32:	4603      	mov	r3, r0
 8001b34:	460c      	mov	r4, r1
 8001b36:	4618      	mov	r0, r3
 8001b38:	4621      	mov	r1, r4
 8001b3a:	f7ff f825 	bl	8000b88 <__aeabi_d2iz>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <_ZN3IMU12updateValuesEv+0xac>)
 8001b4e:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bdb0      	pop	{r4, r5, r7, pc}
 8001b58:	eb851eb8 	.word	0xeb851eb8
 8001b5c:	3f9eb851 	.word	0x3f9eb851
 8001b60:	70a3d70a 	.word	0x70a3d70a
 8001b64:	3fef0a3d 	.word	0x3fef0a3d
 8001b68:	2003e7c0 	.word	0x2003e7c0
 8001b6c:	2003e7be 	.word	0x2003e7be
 8001b70:	2003e7b8 	.word	0x2003e7b8
 8001b74:	20000210 	.word	0x20000210

08001b78 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001b78:	b5b0      	push	{r4, r5, r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b98:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f7fe fceb 	bl	8000578 <__aeabi_f2d>
 8001ba2:	a316      	add	r3, pc, #88	; (adr r3, 8001bfc <_ZN3IMU8getOmegaEv+0x84>)
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	f7fe fe68 	bl	800087c <__aeabi_ddiv>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4614      	mov	r4, r2
 8001bb2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001bb6:	a313      	add	r3, pc, #76	; (adr r3, 8001c04 <_ZN3IMU8getOmegaEv+0x8c>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	4629      	mov	r1, r5
 8001bc0:	f7fe fd32 	bl	8000628 <__aeabi_dmul>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	460c      	mov	r4, r1
 8001bc8:	4618      	mov	r0, r3
 8001bca:	4621      	mov	r1, r4
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <_ZN3IMU8getOmegaEv+0x80>)
 8001bd2:	f7fe fe53 	bl	800087c <__aeabi_ddiv>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	460c      	mov	r4, r1
 8001bda:	4618      	mov	r0, r3
 8001bdc:	4621      	mov	r1, r4
 8001bde:	f7ff f81b 	bl	8000c18 <__aeabi_d2f>
 8001be2:	4603      	mov	r3, r0
 8001be4:	ee07 3a90 	vmov	s15, r3
}
 8001be8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	40668000 	.word	0x40668000
 8001bfc:	66666666 	.word	0x66666666
 8001c00:	40306666 	.word	0x40306666
 8001c04:	54411744 	.word	0x54411744
 8001c08:	400921fb 	.word	0x400921fb

08001c0c <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0e:	b08b      	sub	sp, #44	; 0x2c
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001c14:	466b      	mov	r3, sp
 8001c16:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001c18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c1c:	f006 fe36 	bl	800888c <HAL_Delay>
	lcd_clear();
 8001c20:	f7ff fa3e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001c24:	2100      	movs	r1, #0
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7ff fa4a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001c2c:	4840      	ldr	r0, [pc, #256]	; (8001d30 <_ZN3IMU11calibrationEv+0x124>)
 8001c2e:	f7ff fa71 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001c32:	2101      	movs	r1, #1
 8001c34:	2000      	movs	r0, #0
 8001c36:	f7ff fa43 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001c3a:	483e      	ldr	r0, [pc, #248]	; (8001d34 <_ZN3IMU11calibrationEv+0x128>)
 8001c3c:	f7ff fa6a 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001c40:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c44:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001c46:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c4a:	1e5d      	subs	r5, r3, #1
 8001c4c:	61bd      	str	r5, [r7, #24]
 8001c4e:	462b      	mov	r3, r5
 8001c50:	3301      	adds	r3, #1
 8001c52:	4619      	mov	r1, r3
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	f04f 0400 	mov.w	r4, #0
 8001c60:	0154      	lsls	r4, r2, #5
 8001c62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c66:	014b      	lsls	r3, r1, #5
 8001c68:	462b      	mov	r3, r5
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	f04f 0400 	mov.w	r4, #0
 8001c7a:	0154      	lsls	r4, r2, #5
 8001c7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c80:	014b      	lsls	r3, r1, #5
 8001c82:	462b      	mov	r3, r5
 8001c84:	3301      	adds	r3, #1
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	3303      	adds	r3, #3
 8001c8a:	3307      	adds	r3, #7
 8001c8c:	08db      	lsrs	r3, r3, #3
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	ebad 0d03 	sub.w	sp, sp, r3
 8001c94:	466b      	mov	r3, sp
 8001c96:	3303      	adds	r3, #3
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	83fb      	strh	r3, [r7, #30]
 8001ca2:	8bfa      	ldrh	r2, [r7, #30]
 8001ca4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	da13      	bge.n	8001cd4 <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001cb2:	8bfb      	ldrh	r3, [r7, #30]
 8001cb4:	ee07 2a90 	vmov	s15, r2
 8001cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f006 fde0 	bl	800888c <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001ccc:	8bfb      	ldrh	r3, [r7, #30]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	83fb      	strh	r3, [r7, #30]
 8001cd2:	e7e6      	b.n	8001ca2 <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	462b      	mov	r3, r5
 8001cdc:	3301      	adds	r3, #1
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d00e      	beq.n	8001d0a <_ZN3IMU11calibrationEv+0xfe>
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfe:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	3304      	adds	r3, #4
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
 8001d08:	e7ec      	b.n	8001ce4 <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001d0a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d0e:	ee07 3a90 	vmov	s15, r3
 8001d12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d16:	edd7 6a08 	vldr	s13, [r7, #32]
 8001d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	edc3 7a03 	vstr	s15, [r3, #12]
 8001d24:	46b5      	mov	sp, r6
}
 8001d26:	bf00      	nop
 8001d28:	372c      	adds	r7, #44	; 0x2c
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	0801876c 	.word	0x0801876c
 8001d34:	08018778 	.word	0x08018778

08001d38 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	4603      	mov	r3, r0
 8001d40:	460a      	mov	r2, r1
 8001d42:	71fb      	strb	r3, [r7, #7]
 8001d44:	4613      	mov	r3, r2
 8001d46:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001d48:	79bb      	ldrb	r3, [r7, #6]
 8001d4a:	b299      	uxth	r1, r3
 8001d4c:	1dfa      	adds	r2, r7, #7
 8001d4e:	2364      	movs	r3, #100	; 0x64
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2301      	movs	r3, #1
 8001d54:	480c      	ldr	r0, [pc, #48]	; (8001d88 <INA260_read+0x50>)
 8001d56:	f008 f981 	bl	800a05c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	b299      	uxth	r1, r3
 8001d5e:	f107 020c 	add.w	r2, r7, #12
 8001d62:	2364      	movs	r3, #100	; 0x64
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2302      	movs	r3, #2
 8001d68:	4807      	ldr	r0, [pc, #28]	; (8001d88 <INA260_read+0x50>)
 8001d6a:	f008 fa75 	bl	800a258 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d6e:	7b3b      	ldrb	r3, [r7, #12]
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	b21a      	sxth	r2, r3
 8001d74:	7b7b      	ldrb	r3, [r7, #13]
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d7e:	89fb      	ldrh	r3, [r7, #14]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	2003e9d8 	.word	0x2003e9d8

08001d8c <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	4604      	mov	r4, r0
 8001d94:	4608      	mov	r0, r1
 8001d96:	4611      	mov	r1, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4623      	mov	r3, r4
 8001d9c:	71fb      	strb	r3, [r7, #7]
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71bb      	strb	r3, [r7, #6]
 8001da2:	460b      	mov	r3, r1
 8001da4:	717b      	strb	r3, [r7, #5]
 8001da6:	4613      	mov	r3, r2
 8001da8:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	733b      	strb	r3, [r7, #12]
 8001dae:	79bb      	ldrb	r3, [r7, #6]
 8001db0:	737b      	strb	r3, [r7, #13]
 8001db2:	797b      	ldrb	r3, [r7, #5]
 8001db4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001db6:	793b      	ldrb	r3, [r7, #4]
 8001db8:	b299      	uxth	r1, r3
 8001dba:	f107 020c 	add.w	r2, r7, #12
 8001dbe:	2364      	movs	r3, #100	; 0x64
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <INA260_write+0x48>)
 8001dc6:	f008 f949 	bl	800a05c <HAL_I2C_Master_Transmit>
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd90      	pop	{r4, r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2003e9d8 	.word	0x2003e9d8

08001dd8 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
 8001de2:	460b      	mov	r3, r1
 8001de4:	71bb      	strb	r3, [r7, #6]
 8001de6:	4613      	mov	r3, r2
 8001de8:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001dea:	797b      	ldrb	r3, [r7, #5]
 8001dec:	79ba      	ldrb	r2, [r7, #6]
 8001dee:	79f9      	ldrb	r1, [r7, #7]
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff ffcb 	bl	8001d8c <INA260_write>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	21df      	movs	r1, #223	; 0xdf
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f7ff ffe2 	bl	8001dd8 <setConfig>
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
{

}
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001e40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e44:	482a      	ldr	r0, [pc, #168]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e46:	f007 ff9f 	bl	8009d88 <HAL_GPIO_ReadPin>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <_ZN8JoyStick8getValueEv+0x2e>
 8001e5a:	89fb      	ldrh	r3, [r7, #14]
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001e62:	2101      	movs	r1, #1
 8001e64:	4823      	ldr	r0, [pc, #140]	; (8001ef4 <_ZN8JoyStick8getValueEv+0xc0>)
 8001e66:	f007 ff8f 	bl	8009d88 <HAL_GPIO_ReadPin>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf0c      	ite	eq
 8001e70:	2301      	moveq	r3, #1
 8001e72:	2300      	movne	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <_ZN8JoyStick8getValueEv+0x4e>
 8001e7a:	89fb      	ldrh	r3, [r7, #14]
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e86:	481a      	ldr	r0, [pc, #104]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e88:	f007 ff7e 	bl	8009d88 <HAL_GPIO_ReadPin>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf0c      	ite	eq
 8001e92:	2301      	moveq	r3, #1
 8001e94:	2300      	movne	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <_ZN8JoyStick8getValueEv+0x70>
 8001e9c:	89fb      	ldrh	r3, [r7, #14]
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001ea4:	2104      	movs	r1, #4
 8001ea6:	4814      	ldr	r0, [pc, #80]	; (8001ef8 <_ZN8JoyStick8getValueEv+0xc4>)
 8001ea8:	f007 ff6e 	bl	8009d88 <HAL_GPIO_ReadPin>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bf0c      	ite	eq
 8001eb2:	2301      	moveq	r3, #1
 8001eb4:	2300      	movne	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <_ZN8JoyStick8getValueEv+0x90>
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	f043 0308 	orr.w	r3, r3, #8
 8001ec2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	480a      	ldr	r0, [pc, #40]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001ec8:	f007 ff5e 	bl	8009d88 <HAL_GPIO_ReadPin>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	bf0c      	ite	eq
 8001ed2:	2301      	moveq	r3, #1
 8001ed4:	2300      	movne	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <_ZN8JoyStick8getValueEv+0xb0>
 8001edc:	89fb      	ldrh	r3, [r7, #14]
 8001ede:	f043 0310 	orr.w	r3, r3, #16
 8001ee2:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001ee4:	89fb      	ldrh	r3, [r7, #14]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40020c00 	.word	0x40020c00
 8001ef8:	40020400 	.word	0x40020400

08001efc <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	2b52      	cmp	r3, #82	; 0x52
 8001f0c:	d112      	bne.n	8001f34 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f14:	4856      	ldr	r0, [pc, #344]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f16:	f007 ff4f 	bl	8009db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f20:	4853      	ldr	r0, [pc, #332]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f22:	f007 ff49 	bl	8009db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f26:	2201      	movs	r2, #1
 8001f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f2c:	4850      	ldr	r0, [pc, #320]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f2e:	f007 ff43 	bl	8009db8 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001f32:	e098      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	2b47      	cmp	r3, #71	; 0x47
 8001f38:	d112      	bne.n	8001f60 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f40:	484b      	ldr	r0, [pc, #300]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f42:	f007 ff39 	bl	8009db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f4c:	4848      	ldr	r0, [pc, #288]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f4e:	f007 ff33 	bl	8009db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f52:	2201      	movs	r2, #1
 8001f54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f58:	4845      	ldr	r0, [pc, #276]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f5a:	f007 ff2d 	bl	8009db8 <HAL_GPIO_WritePin>
}
 8001f5e:	e082      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	2b42      	cmp	r3, #66	; 0x42
 8001f64:	d112      	bne.n	8001f8c <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f66:	2201      	movs	r2, #1
 8001f68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f6c:	4840      	ldr	r0, [pc, #256]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f6e:	f007 ff23 	bl	8009db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f72:	2201      	movs	r2, #1
 8001f74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f78:	483d      	ldr	r0, [pc, #244]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f7a:	f007 ff1d 	bl	8009db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f84:	483a      	ldr	r0, [pc, #232]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f86:	f007 ff17 	bl	8009db8 <HAL_GPIO_WritePin>
}
 8001f8a:	e06c      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	2b43      	cmp	r3, #67	; 0x43
 8001f90:	d112      	bne.n	8001fb8 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f92:	2201      	movs	r2, #1
 8001f94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f98:	4835      	ldr	r0, [pc, #212]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f9a:	f007 ff0d 	bl	8009db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fa4:	4832      	ldr	r0, [pc, #200]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fa6:	f007 ff07 	bl	8009db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fb0:	482f      	ldr	r0, [pc, #188]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fb2:	f007 ff01 	bl	8009db8 <HAL_GPIO_WritePin>
}
 8001fb6:	e056      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	2b4d      	cmp	r3, #77	; 0x4d
 8001fbc:	d112      	bne.n	8001fe4 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc4:	482a      	ldr	r0, [pc, #168]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fc6:	f007 fef7 	bl	8009db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fd0:	4827      	ldr	r0, [pc, #156]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fd2:	f007 fef1 	bl	8009db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fdc:	4824      	ldr	r0, [pc, #144]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fde:	f007 feeb 	bl	8009db8 <HAL_GPIO_WritePin>
}
 8001fe2:	e040      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	2b59      	cmp	r3, #89	; 0x59
 8001fe8:	d112      	bne.n	8002010 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ff0:	481f      	ldr	r0, [pc, #124]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001ff2:	f007 fee1 	bl	8009db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ffc:	481c      	ldr	r0, [pc, #112]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001ffe:	f007 fedb 	bl	8009db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002002:	2201      	movs	r2, #1
 8002004:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002008:	4819      	ldr	r0, [pc, #100]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800200a:	f007 fed5 	bl	8009db8 <HAL_GPIO_WritePin>
}
 800200e:	e02a      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	2b57      	cmp	r3, #87	; 0x57
 8002014:	d112      	bne.n	800203c <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800201c:	4814      	ldr	r0, [pc, #80]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800201e:	f007 fecb 	bl	8009db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002028:	4811      	ldr	r0, [pc, #68]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800202a:	f007 fec5 	bl	8009db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002034:	480e      	ldr	r0, [pc, #56]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002036:	f007 febf 	bl	8009db8 <HAL_GPIO_WritePin>
}
 800203a:	e014      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	2b7e      	cmp	r3, #126	; 0x7e
 8002040:	d111      	bne.n	8002066 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002042:	2201      	movs	r2, #1
 8002044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002048:	4809      	ldr	r0, [pc, #36]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800204a:	f007 feb5 	bl	8009db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800204e:	2201      	movs	r2, #1
 8002050:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002054:	4806      	ldr	r0, [pc, #24]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002056:	f007 feaf 	bl	8009db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800205a:	2201      	movs	r2, #1
 800205c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002060:	4803      	ldr	r0, [pc, #12]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002062:	f007 fea9 	bl	8009db8 <HAL_GPIO_WritePin>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40020000 	.word	0x40020000

08002074 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
 8002080:	4613      	mov	r3, r2
 8002082:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d106      	bne.n	800209a <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800208c:	2201      	movs	r2, #1
 800208e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002092:	4813      	ldr	r0, [pc, #76]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 8002094:	f007 fe90 	bl	8009db8 <HAL_GPIO_WritePin>
 8002098:	e009      	b.n	80020ae <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800209a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d105      	bne.n	80020ae <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80020a2:	2200      	movs	r2, #0
 80020a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a8:	480d      	ldr	r0, [pc, #52]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020aa:	f007 fe85 	bl	8009db8 <HAL_GPIO_WritePin>

	if(r_status == 1)
 80020ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d106      	bne.n	80020c4 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80020b6:	2201      	movs	r2, #1
 80020b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020bc:	4808      	ldr	r0, [pc, #32]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020be:	f007 fe7b 	bl	8009db8 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80020c2:	e009      	b.n	80020d8 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80020c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d105      	bne.n	80020d8 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80020cc:	2200      	movs	r2, #0
 80020ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020d2:	4803      	ldr	r0, [pc, #12]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020d4:	f007 fe70 	bl	8009db8 <HAL_GPIO_WritePin>
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40020000 	.word	0x40020000

080020e4 <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b092      	sub	sp, #72	; 0x48
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fe92 	bl	8001e1c <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
 80020fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002102:	331c      	adds	r3, #28
 8002104:	633b      	str	r3, [r7, #48]	; 0x30
 8002106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210a:	429a      	cmp	r2, r3
 800210c:	d008      	beq.n	8002120 <_ZN10LineSensorC1Ev+0x3c>
 800210e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8002112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002114:	2200      	movs	r2, #0
 8002116:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800211a:	3302      	adds	r3, #2
 800211c:	647b      	str	r3, [r7, #68]	; 0x44
 800211e:	e7f2      	b.n	8002106 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
 8002128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212a:	643b      	str	r3, [r7, #64]	; 0x40
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212e:	3338      	adds	r3, #56	; 0x38
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
 8002132:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	429a      	cmp	r2, r3
 8002138:	d009      	beq.n	800214e <_ZN10LineSensorC1Ev+0x6a>
 800213a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800213c:	623b      	str	r3, [r7, #32]
		s = 0;
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8002146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002148:	3304      	adds	r3, #4
 800214a:	643b      	str	r3, [r7, #64]	; 0x40
 800214c:	e7f1      	b.n	8002132 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3338      	adds	r3, #56	; 0x38
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	429a      	cmp	r2, r3
 8002166:	d009      	beq.n	800217c <_ZN10LineSensorC1Ev+0x98>
 8002168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800216a:	617b      	str	r3, [r7, #20]
		m = 0;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002176:	3304      	adds	r3, #4
 8002178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800217a:	e7f1      	b.n	8002160 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	63bb      	str	r3, [r7, #56]	; 0x38
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	3338      	adds	r3, #56	; 0x38
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	429a      	cmp	r2, r3
 8002194:	d009      	beq.n	80021aa <_ZN10LineSensorC1Ev+0xc6>
 8002196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002198:	60bb      	str	r3, [r7, #8]
		s = 1;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021a0:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80021a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a4:	3304      	adds	r3, #4
 80021a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80021a8:	e7f1      	b.n	800218e <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4618      	mov	r0, r3
 80021ae:	3748      	adds	r7, #72	; 0x48
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	220e      	movs	r2, #14
 80021c0:	4619      	mov	r1, r3
 80021c2:	4803      	ldr	r0, [pc, #12]	; (80021d0 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80021c4:	f006 fbc8 	bl	8008958 <HAL_ADC_Start_DMA>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	2003e8fc 	.word	0x2003e8fc

080021d4 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b0d      	cmp	r3, #13
 80021e4:	dc2f      	bgt.n	8002246 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3392      	adds	r3, #146	; 0x92
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3304      	adds	r3, #4
 80021f2:	ed93 7a00 	vldr	s14, [r3]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021fe:	ee07 3a90 	vmov	s15, r3
 8002202:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	33a0      	adds	r3, #160	; 0xa0
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	3304      	adds	r3, #4
 8002212:	edd3 7a00 	vldr	s15, [r3]
 8002216:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	4619      	mov	r1, r3
 8002220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	1a5b      	subs	r3, r3, r1
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	68f9      	ldr	r1, [r7, #12]
 8002230:	440b      	add	r3, r1
 8002232:	3306      	adds	r3, #6
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	3304      	adds	r3, #4
 800223a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	3301      	adds	r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e7cc      	b.n	80021e0 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	3301      	adds	r3, #1
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002250:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b09      	cmp	r3, #9
 8002258:	d902      	bls.n	8002260 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]


}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	2000021c 	.word	0x2000021c

08002270 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002270:	b5b0      	push	{r4, r5, r7, lr}
 8002272:	b08e      	sub	sp, #56	; 0x38
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800227e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002282:	2b0d      	cmp	r3, #13
 8002284:	f200 80b8 	bhi.w	80023f8 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002288:	2300      	movs	r3, #0
 800228a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800228e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002292:	2b09      	cmp	r3, #9
 8002294:	d81c      	bhi.n	80022d0 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002296:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800229a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800229e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4423      	add	r3, r4
 80022ae:	3306      	adds	r3, #6
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4403      	add	r3, r0
 80022b4:	3304      	adds	r3, #4
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	008b      	lsls	r3, r1, #2
 80022ba:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022be:	440b      	add	r3, r1
 80022c0:	3b30      	subs	r3, #48	; 0x30
 80022c2:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022c8:	3301      	adds	r3, #1
 80022ca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022ce:	e7de      	b.n	800228e <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80022d0:	2300      	movs	r3, #0
 80022d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022da:	2b09      	cmp	r3, #9
 80022dc:	d84d      	bhi.n	800237a <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80022de:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022e2:	3301      	adds	r3, #1
 80022e4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022ec:	2b09      	cmp	r3, #9
 80022ee:	d83e      	bhi.n	800236e <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80022f0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022fa:	4413      	add	r3, r2
 80022fc:	3b30      	subs	r3, #48	; 0x30
 80022fe:	ed93 7a00 	vldr	s14, [r3]
 8002302:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800230c:	4413      	add	r3, r2
 800230e:	3b30      	subs	r3, #48	; 0x30
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231c:	d521      	bpl.n	8002362 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 800231e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002328:	4413      	add	r3, r2
 800232a:	3b30      	subs	r3, #48	; 0x30
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002330:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002334:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002338:	0092      	lsls	r2, r2, #2
 800233a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800233e:	440a      	add	r2, r1
 8002340:	3a30      	subs	r2, #48	; 0x30
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800234a:	440b      	add	r3, r1
 800234c:	3b30      	subs	r3, #48	; 0x30
 800234e:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002350:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800235a:	4413      	add	r3, r2
 800235c:	3b30      	subs	r3, #48	; 0x30
 800235e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002360:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002362:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002366:	3301      	adds	r3, #1
 8002368:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800236c:	e7bc      	b.n	80022e8 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800236e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002372:	3301      	adds	r3, #1
 8002374:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002378:	e7ad      	b.n	80022d6 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f8fb 	bl	8000578 <__aeabi_f2d>
 8002382:	a32a      	add	r3, pc, #168	; (adr r3, 800242c <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	f7fe f94e 	bl	8000628 <__aeabi_dmul>
 800238c:	4603      	mov	r3, r0
 800238e:	460c      	mov	r4, r1
 8002390:	4625      	mov	r5, r4
 8002392:	461c      	mov	r4, r3
 8002394:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002398:	4a21      	ldr	r2, [pc, #132]	; (8002420 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe f8e9 	bl	8000578 <__aeabi_f2d>
 80023a6:	a31c      	add	r3, pc, #112	; (adr r3, 8002418 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	f7fe f93c 	bl	8000628 <__aeabi_dmul>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4620      	mov	r0, r4
 80023b6:	4629      	mov	r1, r5
 80023b8:	f7fd ff80 	bl	80002bc <__adddf3>
 80023bc:	4603      	mov	r3, r0
 80023be:	460c      	mov	r4, r1
 80023c0:	461a      	mov	r2, r3
 80023c2:	4623      	mov	r3, r4
 80023c4:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	f7fe fc24 	bl	8000c18 <__aeabi_d2f>
 80023d0:	4601      	mov	r1, r0
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 80023de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	490e      	ldr	r1, [pc, #56]	; (8002420 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80023ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023f0:	3301      	adds	r3, #1
 80023f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023f6:	e742      	b.n	800227e <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80023fe:	4a09      	ldr	r2, [pc, #36]	; (8002424 <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002400:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002408:	4a07      	ldr	r2, [pc, #28]	; (8002428 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 800240a:	6013      	str	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	3738      	adds	r7, #56	; 0x38
 8002410:	46bd      	mov	sp, r7
 8002412:	bdb0      	pop	{r4, r5, r7, pc}
 8002414:	f3af 8000 	nop.w
 8002418:	66666666 	.word	0x66666666
 800241c:	3fee6666 	.word	0x3fee6666
 8002420:	20000220 	.word	0x20000220
 8002424:	20000214 	.word	0x20000214
 8002428:	20000218 	.word	0x20000218
 800242c:	9999999a 	.word	0x9999999a
 8002430:	3fa99999 	.word	0x3fa99999

08002434 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b0a0      	sub	sp, #128	; 0x80
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 800243c:	2064      	movs	r0, #100	; 0x64
 800243e:	f006 fa25 	bl	800888c <HAL_Delay>

	lcd_clear();
 8002442:	f7fe fe2d 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8002446:	2100      	movs	r1, #0
 8002448:	2000      	movs	r0, #0
 800244a:	f7fe fe39 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 800244e:	4886      	ldr	r0, [pc, #536]	; (8002668 <_ZN10LineSensor11calibrationEv+0x234>)
 8002450:	f7fe fe60 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002454:	2101      	movs	r1, #1
 8002456:	2000      	movs	r0, #0
 8002458:	f7fe fe32 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 800245c:	4883      	ldr	r0, [pc, #524]	; (800266c <_ZN10LineSensor11calibrationEv+0x238>)
 800245e:	f7fe fe59 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002462:	2300      	movs	r3, #0
 8002464:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002468:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800246c:	2b0d      	cmp	r3, #13
 800246e:	d823      	bhi.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002470:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002474:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	32b0      	adds	r2, #176	; 0xb0
 800247c:	0092      	lsls	r2, r2, #2
 800247e:	440a      	add	r2, r1
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002488:	440b      	add	r3, r1
 800248a:	3b40      	subs	r3, #64	; 0x40
 800248c:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800248e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002492:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	32b0      	adds	r2, #176	; 0xb0
 800249a:	0092      	lsls	r2, r2, #2
 800249c:	440a      	add	r2, r1
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80024a6:	440b      	add	r3, r1
 80024a8:	3b78      	subs	r3, #120	; 0x78
 80024aa:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024ac:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80024b0:	3301      	adds	r3, #1
 80024b2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80024b6:	e7d7      	b.n	8002468 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fcb8 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	bf14      	ite	ne
 80024ca:	2301      	movne	r3, #1
 80024cc:	2300      	moveq	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d079      	beq.n	80025c8 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80024da:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024de:	2b0d      	cmp	r3, #13
 80024e0:	d850      	bhi.n	8002584 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80024e2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024ec:	4413      	add	r3, r2
 80024ee:	3b40      	subs	r3, #64	; 0x40
 80024f0:	ed93 7a00 	vldr	s14, [r3]
 80024f4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	33b0      	adds	r3, #176	; 0xb0
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	d50f      	bpl.n	800252e <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 800250e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002512:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	32b0      	adds	r2, #176	; 0xb0
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	440a      	add	r2, r1
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002526:	440b      	add	r3, r1
 8002528:	3b40      	subs	r3, #64	; 0x40
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e024      	b.n	8002578 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 800252e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002538:	4413      	add	r3, r2
 800253a:	3b78      	subs	r3, #120	; 0x78
 800253c:	ed93 7a00 	vldr	s14, [r3]
 8002540:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	33b0      	adds	r3, #176	; 0xb0
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	edd3 7a00 	vldr	s15, [r3]
 8002550:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002558:	dd0e      	ble.n	8002578 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800255a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800255e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	32b0      	adds	r2, #176	; 0xb0
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	440a      	add	r2, r1
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002572:	440b      	add	r3, r1
 8002574:	3b78      	subs	r3, #120	; 0x78
 8002576:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002578:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800257c:	3301      	adds	r3, #1
 800257e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002582:	e7aa      	b.n	80024da <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800258a:	4618      	mov	r0, r3
 800258c:	f002 fb12 	bl	8004bb4 <_ZN12RotarySwitch8getValueEv>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf0c      	ite	eq
 8002596:	2301      	moveq	r3, #1
 8002598:	2300      	movne	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025a6:	2201      	movs	r2, #1
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fd61 	bl	8002074 <_ZN3LED2LREaa>
 80025b2:	e781      	b.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025ba:	2200      	movs	r2, #0
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fd57 	bl	8002074 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80025c6:	e777      	b.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80025ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025d2:	2b0d      	cmp	r3, #13
 80025d4:	d826      	bhi.n	8002624 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80025d6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025e0:	4413      	add	r3, r2
 80025e2:	3b40      	subs	r3, #64	; 0x40
 80025e4:	ed93 7a00 	vldr	s14, [r3]
 80025e8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025f2:	4413      	add	r3, r2
 80025f4:	3b78      	subs	r3, #120	; 0x78
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025fe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002602:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002670 <_ZN10LineSensor11calibrationEv+0x23c>
 8002606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	3392      	adds	r3, #146	; 0x92
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	3304      	adds	r3, #4
 8002614:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002618:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800261c:	3301      	adds	r3, #1
 800261e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002622:	e7d4      	b.n	80025ce <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002624:	2300      	movs	r3, #0
 8002626:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800262a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800262e:	2b0d      	cmp	r3, #13
 8002630:	d815      	bhi.n	800265e <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 8002632:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8002636:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800263a:	0092      	lsls	r2, r2, #2
 800263c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002640:	440a      	add	r2, r1
 8002642:	3a78      	subs	r2, #120	; 0x78
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	33a0      	adds	r3, #160	; 0xa0
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	3304      	adds	r3, #4
 8002650:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002652:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002656:	3301      	adds	r3, #1
 8002658:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800265c:	e7e5      	b.n	800262a <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 800265e:	bf00      	nop
 8002660:	3780      	adds	r7, #128	; 0x80
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	08018784 	.word	0x08018784
 800266c:	08018790 	.word	0x08018790
 8002670:	447a0000 	.word	0x447a0000

08002674 <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3338      	adds	r3, #56	; 0x38
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	429a      	cmp	r2, r3
 8002698:	d012      	beq.n	80026c0 <_ZN10LineSensor13emergencyStopEv+0x4c>
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	60fb      	str	r3, [r7, #12]
		if(s >= 700) out_cnt++;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	edd3 7a00 	vldr	s15, [r3]
 80026a4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002714 <_ZN10LineSensor13emergencyStopEv+0xa0>
 80026a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b0:	db02      	blt.n	80026b8 <_ZN10LineSensor13emergencyStopEv+0x44>
 80026b2:	8bfb      	ldrh	r3, [r7, #30]
 80026b4:	3301      	adds	r3, #1
 80026b6:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	3304      	adds	r3, #4
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	e7e8      	b.n	8002692 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 80026c0:	8bfb      	ldrh	r3, [r7, #30]
 80026c2:	2b0d      	cmp	r3, #13
 80026c4:	d906      	bls.n	80026d4 <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 80026c6:	4b14      	ldr	r3, [pc, #80]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	3301      	adds	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026d0:	801a      	strh	r2, [r3, #0]
 80026d2:	e002      	b.n	80026da <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	2b31      	cmp	r3, #49	; 0x31
 80026e0:	d903      	bls.n	80026ea <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	e002      	b.n	80026f0 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d903      	bls.n	8002704 <_ZN10LineSensor13emergencyStopEv+0x90>
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8002702:	801a      	strh	r2, [r3, #0]

	return flag;
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 8002706:	781b      	ldrb	r3, [r3, #0]

}
 8002708:	4618      	mov	r0, r3
 800270a:	3724      	adds	r7, #36	; 0x24
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	442f0000 	.word	0x442f0000
 8002718:	20000258 	.word	0x20000258
 800271c:	2000025a 	.word	0x2000025a

08002720 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	ed87 0a01 	vstr	s0, [r7, #4]
 800272a:	edd7 7a01 	vldr	s15, [r7, #4]
 800272e:	eef0 7ae7 	vabs.f32	s15, s15
 8002732:	eeb0 0a67 	vmov.f32	s0, s15
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>:
float mon_ave_l, mon_ave_r;
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu) :
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	625a      	str	r2, [r3, #36]	; 0x24
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	629a      	str	r2, [r3, #40]	; 0x28
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	62da      	str	r2, [r3, #44]	; 0x2c
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	635a      	str	r2, [r3, #52]	; 0x34
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	639a      	str	r2, [r3, #56]	; 0x38
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	679a      	str	r2, [r3, #120]	; 0x78
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	67da      	str	r2, [r3, #124]	; 0x7c
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80027be:	3348      	adds	r3, #72	; 0x48
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027cc:	330c      	adds	r3, #12
 80027ce:	2200      	movs	r2, #0
 80027d0:	701a      	strb	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027d8:	330e      	adds	r3, #14
 80027da:	2200      	movs	r2, #0
 80027dc:	801a      	strh	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027e4:	3310      	adds	r3, #16
 80027e6:	2200      	movs	r2, #0
 80027e8:	801a      	strh	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80027f0:	3344      	adds	r3, #68	; 0x44
 80027f2:	2200      	movs	r2, #0
 80027f4:	801a      	strh	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80027fc:	3346      	adds	r3, #70	; 0x46
 80027fe:	2200      	movs	r2, #0
 8002800:	801a      	strh	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002808:	3348      	adds	r3, #72	; 0x48
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002814:	3349      	adds	r3, #73	; 0x49
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002820:	334a      	adds	r3, #74	; 0x4a
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800282c:	334c      	adds	r3, #76	; 0x4c
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800283a:	3350      	adds	r3, #80	; 0x50
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
{
	motor_ = motor;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a3a      	ldr	r2, [r7, #32]
 8002858:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800285e:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002864:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800286a:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002870:	621a      	str	r2, [r3, #32]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002872:	2300      	movs	r3, #0
 8002874:	82fb      	strh	r3, [r7, #22]
 8002876:	8afb      	ldrh	r3, [r7, #22]
 8002878:	f241 726f 	movw	r2, #5999	; 0x176f
 800287c:	4293      	cmp	r3, r2
 800287e:	d80e      	bhi.n	800289e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x15e>
		velocity_table_[i] = 0;
 8002880:	8afb      	ldrh	r3, [r7, #22]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8002888:	3312      	adds	r3, #18
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	3304      	adds	r3, #4
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002896:	8afb      	ldrh	r3, [r7, #22]
 8002898:	3301      	adds	r3, #1
 800289a:	82fb      	strh	r3, [r7, #22]
 800289c:	e7eb      	b.n	8002876 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x136>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 800289e:	2300      	movs	r3, #0
 80028a0:	82bb      	strh	r3, [r7, #20]
 80028a2:	8abb      	ldrh	r3, [r7, #20]
 80028a4:	2b63      	cmp	r3, #99	; 0x63
 80028a6:	d80e      	bhi.n	80028c6 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x186>
		crossline_distance_[i] = 0;
 80028a8:	8abb      	ldrh	r3, [r7, #20]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80028b0:	3304      	adds	r3, #4
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	3304      	adds	r3, #4
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80028be:	8abb      	ldrh	r3, [r7, #20]
 80028c0:	3301      	adds	r3, #1
 80028c2:	82bb      	strh	r3, [r7, #20]
 80028c4:	e7ed      	b.n	80028a2 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x162>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028c6:	2300      	movs	r3, #0
 80028c8:	827b      	strh	r3, [r7, #18]
 80028ca:	8a7b      	ldrh	r3, [r7, #18]
 80028cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028d0:	d20e      	bcs.n	80028f0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1b0>
		sideline_distance_[i] = 0;
 80028d2:	8a7b      	ldrh	r3, [r7, #18]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80028da:	3328      	adds	r3, #40	; 0x28
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	3304      	adds	r3, #4
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028e8:	8a7b      	ldrh	r3, [r7, #18]
 80028ea:	3301      	adds	r3, #1
 80028ec:	827b      	strh	r3, [r7, #18]
 80028ee:	e7ec      	b.n	80028ca <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x18a>
	}
}
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4618      	mov	r0, r3
 80028f4:	371c      	adds	r7, #28
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002900:	b5b0      	push	{r4, r5, r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002918:	ee37 7a27 	vadd.f32	s14, s14, s15
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002924:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002930:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800293c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002948:	ee37 7a27 	vadd.f32	s14, s14, s15
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002954:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002968:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002974:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002980:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 800298c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002998:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80029a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029a8:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80029ac:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4a1f      	ldr	r2, [pc, #124]	; (8002a30 <_ZN9LineTrace9calcErrorEv+0x130>)
 80029b4:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fddd 	bl	8000578 <__aeabi_f2d>
 80029be:	a318      	add	r3, pc, #96	; (adr r3, 8002a20 <_ZN9LineTrace9calcErrorEv+0x120>)
 80029c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c4:	f7fd fe30 	bl	8000628 <__aeabi_dmul>
 80029c8:	4603      	mov	r3, r0
 80029ca:	460c      	mov	r4, r1
 80029cc:	4625      	mov	r5, r4
 80029ce:	461c      	mov	r4, r3
 80029d0:	4b18      	ldr	r3, [pc, #96]	; (8002a34 <_ZN9LineTrace9calcErrorEv+0x134>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fd fdcf 	bl	8000578 <__aeabi_f2d>
 80029da:	a313      	add	r3, pc, #76	; (adr r3, 8002a28 <_ZN9LineTrace9calcErrorEv+0x128>)
 80029dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e0:	f7fd fe22 	bl	8000628 <__aeabi_dmul>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4620      	mov	r0, r4
 80029ea:	4629      	mov	r1, r5
 80029ec:	f7fd fc66 	bl	80002bc <__adddf3>
 80029f0:	4603      	mov	r3, r0
 80029f2:	460c      	mov	r4, r1
 80029f4:	4618      	mov	r0, r3
 80029f6:	4621      	mov	r1, r4
 80029f8:	f7fe f90e 	bl	8000c18 <__aeabi_d2f>
 80029fc:	4603      	mov	r3, r0
 80029fe:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4a0d      	ldr	r2, [pc, #52]	; (8002a38 <_ZN9LineTrace9calcErrorEv+0x138>)
 8002a04:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <_ZN9LineTrace9calcErrorEv+0x134>)
 8002a0a:	6013      	str	r3, [r2, #0]

	return diff;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	ee07 3a90 	vmov	s15, r3

}
 8002a12:	eeb0 0a67 	vmov.f32	s0, s15
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a1c:	f3af 8000 	nop.w
 8002a20:	47ae147b 	.word	0x47ae147b
 8002a24:	3fb47ae1 	.word	0x3fb47ae1
 8002a28:	d70a3d71 	.word	0xd70a3d71
 8002a2c:	3fed70a3 	.word	0x3fed70a3
 8002a30:	2000025c 	.word	0x2000025c
 8002a34:	20000280 	.word	0x20000280
 8002a38:	20000260 	.word	0x20000260
 8002a3c:	00000000 	.word	0x00000000

08002a40 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 8002a40:	b5b0      	push	{r4, r5, r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff ff59 	bl	8002900 <_ZN9LineTrace9calcErrorEv>
 8002a4e:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d007      	beq.n	8002a6c <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002a5c:	4b3c      	ldr	r3, [pc, #240]	; (8002b50 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	}

	p = kp_ * diff;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a72:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a7a:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002a84:	4b33      	ldr	r3, [pc, #204]	; (8002b54 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002a86:	edd3 7a00 	vldr	s15, [r3]
 8002a8a:	edd7 6a05 	vldr	s13, [r7, #20]
 8002a8e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a96:	ee17 0a90 	vmov	r0, s15
 8002a9a:	f7fd fd6d 	bl	8000578 <__aeabi_f2d>
 8002a9e:	a32a      	add	r3, pc, #168	; (adr r3, 8002b48 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa4:	f7fd feea 	bl	800087c <__aeabi_ddiv>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	460c      	mov	r4, r1
 8002aac:	4618      	mov	r0, r3
 8002aae:	4621      	mov	r1, r4
 8002ab0:	f7fe f8b2 	bl	8000c18 <__aeabi_d2f>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002ab8:	4b25      	ldr	r3, [pc, #148]	; (8002b50 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fd fd5b 	bl	8000578 <__aeabi_f2d>
 8002ac2:	4604      	mov	r4, r0
 8002ac4:	460d      	mov	r5, r1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002acc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad4:	ee17 0a90 	vmov	r0, s15
 8002ad8:	f7fd fd4e 	bl	8000578 <__aeabi_f2d>
 8002adc:	a31a      	add	r3, pc, #104	; (adr r3, 8002b48 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae2:	f7fd fda1 	bl	8000628 <__aeabi_dmul>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4620      	mov	r0, r4
 8002aec:	4629      	mov	r1, r5
 8002aee:	f7fd fbe5 	bl	80002bc <__adddf3>
 8002af2:	4603      	mov	r3, r0
 8002af4:	460c      	mov	r4, r1
 8002af6:	4618      	mov	r0, r3
 8002af8:	4621      	mov	r1, r4
 8002afa:	f7fe f88d 	bl	8000c18 <__aeabi_d2f>
 8002afe:	4602      	mov	r2, r0
 8002b00:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002b02:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002b04:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b08:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b10:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002b12:	edd3 7a00 	vldr	s15, [r3]
 8002b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b1a:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002b28:	edd7 0a02 	vldr	s1, [r7, #8]
 8002b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b30:	4610      	mov	r0, r2
 8002b32:	f002 fc21 	bl	8005378 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002b36:	4a07      	ldr	r2, [pc, #28]	; (8002b54 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	6013      	str	r3, [r2, #0]

}
 8002b3c:	bf00      	nop
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bdb0      	pop	{r4, r5, r7, pc}
 8002b44:	f3af 8000 	nop.w
 8002b48:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b4c:	3f50624d 	.word	0x3f50624d
 8002b50:	20000288 	.word	0x20000288
 8002b54:	20000284 	.word	0x20000284

08002b58 <_ZN9LineTrace11loggerStartEv>:
	monitor_target_omega = target_omega;
	monitor_r = r;
}

void LineTrace::loggerStart()
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fe fc9f 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f001 fee2 	bl	8004938 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f001 fc0f 	bl	800439c <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f001 fc74 	bl	8004488 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002bc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002bd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bd8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002bdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002be0:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002bf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002c00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c04:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002c08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c0c:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8002c10:	4a3d      	ldr	r2, [pc, #244]	; (8002d08 <_ZN9LineTrace11isCrossLineEv+0x158>)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8002c16:	4a3d      	ldr	r2, [pc, #244]	; (8002d0c <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8002c1c:	4b3c      	ldr	r3, [pc, #240]	; (8002d10 <_ZN9LineTrace11isCrossLineEv+0x160>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	f083 0301 	eor.w	r3, r3, #1
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d03e      	beq.n	8002ca8 <_ZN9LineTrace11isCrossLineEv+0xf8>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8002c2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c2e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002d14 <_ZN9LineTrace11isCrossLineEv+0x164>
 8002c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3a:	d50f      	bpl.n	8002c5c <_ZN9LineTrace11isCrossLineEv+0xac>
 8002c3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c40:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002d14 <_ZN9LineTrace11isCrossLineEv+0x164>
 8002c44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4c:	d506      	bpl.n	8002c5c <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 8002c4e:	4b32      	ldr	r3, [pc, #200]	; (8002d18 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	3301      	adds	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	4b30      	ldr	r3, [pc, #192]	; (8002d18 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002c58:	801a      	strh	r2, [r3, #0]
 8002c5a:	e002      	b.n	8002c62 <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8002c5c:	4b2e      	ldr	r3, [pc, #184]	; (8002d18 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8002c62:	4b2d      	ldr	r3, [pc, #180]	; (8002d18 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d947      	bls.n	8002cfa <_ZN9LineTrace11isCrossLineEv+0x14a>
			flag = true;
 8002c6a:	4b2c      	ldr	r3, [pc, #176]	; (8002d1c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8002c70:	4b27      	ldr	r3, [pc, #156]	; (8002d10 <_ZN9LineTrace11isCrossLineEv+0x160>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002c76:	4b28      	ldr	r3, [pc, #160]	; (8002d18 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002c82:	334a      	adds	r3, #74	; 0x4a
 8002c84:	2201      	movs	r2, #1
 8002c86:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002c8e:	3310      	adds	r3, #16
 8002c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d103      	bne.n	8002ca0 <_ZN9LineTrace11isCrossLineEv+0xf0>
				storeCrossLineDistance();
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f001 f861 	bl	8003d60 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8002c9e:	e02c      	b.n	8002cfa <_ZN9LineTrace11isCrossLineEv+0x14a>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f001 f8cd 	bl	8003e40 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
 8002ca6:	e028      	b.n	8002cfa <_ZN9LineTrace11isCrossLineEv+0x14a>

			//led_.LR(-1, 1);
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8002ca8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cac:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002d20 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002cb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb8:	dd0f      	ble.n	8002cda <_ZN9LineTrace11isCrossLineEv+0x12a>
 8002cba:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cbe:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002d20 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002cc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cca:	dd06      	ble.n	8002cda <_ZN9LineTrace11isCrossLineEv+0x12a>
			cnt++;
 8002ccc:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002cd6:	801a      	strh	r2, [r3, #0]
 8002cd8:	e002      	b.n	8002ce0 <_ZN9LineTrace11isCrossLineEv+0x130>
		}
		else{
			cnt = 0;
 8002cda:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8002ce0:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	2b09      	cmp	r3, #9
 8002ce6:	d908      	bls.n	8002cfa <_ZN9LineTrace11isCrossLineEv+0x14a>
			flag = false;
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8002cee:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <_ZN9LineTrace11isCrossLineEv+0x160>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	801a      	strh	r2, [r3, #0]
			//led_.LR(-1, 0);
		}

	}

	return flag;
 8002cfa:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000268 	.word	0x20000268
 8002d0c:	2000026c 	.word	0x2000026c
 8002d10:	2000028f 	.word	0x2000028f
 8002d14:	44160000 	.word	0x44160000
 8002d18:	2000028c 	.word	0x2000028c
 8002d1c:	2000028e 	.word	0x2000028e
 8002d20:	43fa0000 	.word	0x43fa0000

08002d24 <_ZN9LineTrace15radius2VelocityEf>:
	if(theta == 0) theta = 0.000001;
	return distance / theta;
}

float LineTrace::radius2Velocity(float radius)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d36:	3310      	adds	r3, #16
 8002d38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d11b      	bne.n	8002d78 <_ZN9LineTrace15radius2VelocityEf+0x54>
		if(radius < 130) velocity = 1.3;
 8002d40:	edd7 7a00 	vldr	s15, [r7]
 8002d44:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002de0 <_ZN9LineTrace15radius2VelocityEf+0xbc>
 8002d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d50:	d502      	bpl.n	8002d58 <_ZN9LineTrace15radius2VelocityEf+0x34>
 8002d52:	4b24      	ldr	r3, [pc, #144]	; (8002de4 <_ZN9LineTrace15radius2VelocityEf+0xc0>)
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	e038      	b.n	8002dca <_ZN9LineTrace15radius2VelocityEf+0xa6>
		else if(radius < 2000) velocity = 1.6;
 8002d58:	edd7 7a00 	vldr	s15, [r7]
 8002d5c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002de8 <_ZN9LineTrace15radius2VelocityEf+0xc4>
 8002d60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d68:	d502      	bpl.n	8002d70 <_ZN9LineTrace15radius2VelocityEf+0x4c>
 8002d6a:	4b20      	ldr	r3, [pc, #128]	; (8002dec <_ZN9LineTrace15radius2VelocityEf+0xc8>)
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	e02c      	b.n	8002dca <_ZN9LineTrace15radius2VelocityEf+0xa6>
		else velocity = max_velocity_;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	e028      	b.n	8002dca <_ZN9LineTrace15radius2VelocityEf+0xa6>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d7e:	3310      	adds	r3, #16
 8002d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d11e      	bne.n	8002dc6 <_ZN9LineTrace15radius2VelocityEf+0xa2>
		if(radius < 130) velocity = 1.5;
 8002d88:	edd7 7a00 	vldr	s15, [r7]
 8002d8c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002de0 <_ZN9LineTrace15radius2VelocityEf+0xbc>
 8002d90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d98:	d503      	bpl.n	8002da2 <_ZN9LineTrace15radius2VelocityEf+0x7e>
 8002d9a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	e013      	b.n	8002dca <_ZN9LineTrace15radius2VelocityEf+0xa6>
		else if(radius < 500) velocity = 1.5;
 8002da2:	edd7 7a00 	vldr	s15, [r7]
 8002da6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002df0 <_ZN9LineTrace15radius2VelocityEf+0xcc>
 8002daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db2:	d503      	bpl.n	8002dbc <_ZN9LineTrace15radius2VelocityEf+0x98>
 8002db4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	e006      	b.n	8002dca <_ZN9LineTrace15radius2VelocityEf+0xa6>
		else velocity = max_velocity2_;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	e001      	b.n	8002dca <_ZN9LineTrace15radius2VelocityEf+0xa6>
	}
	else velocity = 1.3;
 8002dc6:	4b07      	ldr	r3, [pc, #28]	; (8002de4 <_ZN9LineTrace15radius2VelocityEf+0xc0>)
 8002dc8:	60fb      	str	r3, [r7, #12]

	return velocity;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	ee07 3a90 	vmov	s15, r3
}
 8002dd0:	eeb0 0a67 	vmov.f32	s0, s15
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	43020000 	.word	0x43020000
 8002de4:	3fa66666 	.word	0x3fa66666
 8002de8:	44fa0000 	.word	0x44fa0000
 8002dec:	3fcccccd 	.word	0x3fcccccd
 8002df0:	43fa0000 	.word	0x43fa0000

08002df4 <_ZN9LineTrace20createVelocityTabeleEv>:

void LineTrace::createVelocityTabele()
{
 8002df4:	b590      	push	{r4, r7, lr}
 8002df6:	b08b      	sub	sp, #44	; 0x2c
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f001 fa26 	bl	8004252 <_ZN6Logger23getDistanceArrayPointerEv>
 8002e06:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f001 fa2c 	bl	800426a <_ZN6Logger20getThetaArrayPointerEv>
 8002e12:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002e14:	2300      	movs	r3, #0
 8002e16:	837b      	strh	r3, [r7, #26]
 8002e18:	8b7b      	ldrh	r3, [r7, #26]
 8002e1a:	f241 726f 	movw	r2, #5999	; 0x176f
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d84b      	bhi.n	8002eba <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8002e22:	8b7b      	ldrh	r3, [r7, #26]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4413      	add	r3, r2
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002e2e:	8b7b      	ldrh	r3, [r7, #26]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4413      	add	r3, r2
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002e3a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e3e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e46:	d101      	bne.n	8002e4c <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8002e48:	4b30      	ldr	r3, [pc, #192]	; (8002f0c <_ZN9LineTrace20createVelocityTabeleEv+0x118>)
 8002e4a:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002e4c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e50:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e58:	eeb0 0a66 	vmov.f32	s0, s13
 8002e5c:	f7ff fc60 	bl	8002720 <_ZSt3absf>
 8002e60:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002e64:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e68:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002f10 <_ZN9LineTrace20createVelocityTabeleEv+0x11c>
 8002e6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e74:	db01      	blt.n	8002e7a <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8002e76:	4b27      	ldr	r3, [pc, #156]	; (8002f14 <_ZN9LineTrace20createVelocityTabeleEv+0x120>)
 8002e78:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8002e7a:	8b7c      	ldrh	r4, [r7, #26]
 8002e7c:	ed97 0a05 	vldr	s0, [r7, #20]
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff ff4f 	bl	8002d24 <_ZN9LineTrace15radius2VelocityEf>
 8002e86:	eef0 7a40 	vmov.f32	s15, s0
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8002e90:	3312      	adds	r3, #18
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	3304      	adds	r3, #4
 8002e98:	edc3 7a00 	vstr	s15, [r3]
		//velocity_table_[i] = radius;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8002e9c:	8b7b      	ldrh	r3, [r7, #26]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	441a      	add	r2, r3
 8002ea4:	8b7b      	ldrh	r3, [r7, #26]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	3322      	adds	r3, #34	; 0x22
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002eb2:	8b7b      	ldrh	r3, [r7, #26]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	837b      	strh	r3, [r7, #26]
 8002eb8:	e7ae      	b.n	8002e18 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}

	// ----- Decelerate processing -----//
	decelerateProcessing(max_dec_, p_distance);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ec0:	3350      	adds	r3, #80	; 0x50
 8002ec2:	edd3 7a00 	vldr	s15, [r3]
 8002ec6:	6939      	ldr	r1, [r7, #16]
 8002ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f8df 	bl	8003090 <_ZN9LineTrace20decelerateProcessingEfPKf>
	// ----- Accelerate processing -----//
	accelerateProcessing(max_acc_, p_distance);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ed8:	334c      	adds	r3, #76	; 0x4c
 8002eda:	edd3 7a00 	vldr	s15, [r3]
 8002ede:	6939      	ldr	r1, [r7, #16]
 8002ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f97b 	bl	80031e0 <_ZN9LineTrace20accelerateProcessingEfPKf>

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002ef0:	334c      	adds	r3, #76	; 0x4c
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	9200      	str	r2, [sp, #0]
 8002ef6:	f241 7270 	movw	r2, #6000	; 0x1770
 8002efa:	4907      	ldr	r1, [pc, #28]	; (8002f18 <_ZN9LineTrace20createVelocityTabeleEv+0x124>)
 8002efc:	4807      	ldr	r0, [pc, #28]	; (8002f1c <_ZN9LineTrace20createVelocityTabeleEv+0x128>)
 8002efe:	f7fe fb81 	bl	8001604 <sd_write_array_float>

}
 8002f02:	bf00      	nop
 8002f04:	3724      	adds	r7, #36	; 0x24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd90      	pop	{r4, r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	3727c5ac 	.word	0x3727c5ac
 8002f10:	459c4000 	.word	0x459c4000
 8002f14:	459c4000 	.word	0x459c4000
 8002f18:	080187d4 	.word	0x080187d4
 8002f1c:	080187e4 	.word	0x080187e4

08002f20 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

//float mon_crossdis;
void LineTrace::createVelocityTabeleFromSD()
{
 8002f20:	b590      	push	{r4, r7, lr}
 8002f22:	b08b      	sub	sp, #44	; 0x2c
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69d8      	ldr	r0, [r3, #28]
 8002f2c:	4b4f      	ldr	r3, [pc, #316]	; (800306c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>)
 8002f2e:	4a50      	ldr	r2, [pc, #320]	; (8003070 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x150>)
 8002f30:	4950      	ldr	r1, [pc, #320]	; (8003074 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x154>)
 8002f32:	f001 fa16 	bl	8004362 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002f3c:	3314      	adds	r3, #20
 8002f3e:	2264      	movs	r2, #100	; 0x64
 8002f40:	494d      	ldr	r1, [pc, #308]	; (8003078 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x158>)
 8002f42:	484c      	ldr	r0, [pc, #304]	; (8003074 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x154>)
 8002f44:	f7fe fbc4 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8002f4e:	33a4      	adds	r3, #164	; 0xa4
 8002f50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f54:	4949      	ldr	r1, [pc, #292]	; (800307c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x15c>)
 8002f56:	4847      	ldr	r0, [pc, #284]	; (8003074 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x154>)
 8002f58:	f7fe fbba 	bl	80016d0 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f001 f976 	bl	8004252 <_ZN6Logger23getDistanceArrayPointerEv>
 8002f66:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f001 f97c 	bl	800426a <_ZN6Logger20getThetaArrayPointerEv>
 8002f72:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002f74:	2300      	movs	r3, #0
 8002f76:	837b      	strh	r3, [r7, #26]
 8002f78:	8b7b      	ldrh	r3, [r7, #26]
 8002f7a:	f241 726f 	movw	r2, #5999	; 0x176f
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d84b      	bhi.n	800301a <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>
		temp_distance = p_distance[i];
 8002f82:	8b7b      	ldrh	r3, [r7, #26]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4413      	add	r3, r2
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002f8e:	8b7b      	ldrh	r3, [r7, #26]
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4413      	add	r3, r2
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002f9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f9e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa6:	d101      	bne.n	8002fac <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8002fa8:	4b35      	ldr	r3, [pc, #212]	; (8003080 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x160>)
 8002faa:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002fac:	ed97 7a02 	vldr	s14, [r7, #8]
 8002fb0:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fb4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002fb8:	eeb0 0a66 	vmov.f32	s0, s13
 8002fbc:	f7ff fbb0 	bl	8002720 <_ZSt3absf>
 8002fc0:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002fc4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fc8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003084 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x164>
 8002fcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd4:	db01      	blt.n	8002fda <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 8002fd6:	4b2c      	ldr	r3, [pc, #176]	; (8003088 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x168>)
 8002fd8:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8002fda:	8b7c      	ldrh	r4, [r7, #26]
 8002fdc:	ed97 0a05 	vldr	s0, [r7, #20]
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff fe9f 	bl	8002d24 <_ZN9LineTrace15radius2VelocityEf>
 8002fe6:	eef0 7a40 	vmov.f32	s15, s0
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8002ff0:	3312      	adds	r3, #18
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8002ffc:	8b7b      	ldrh	r3, [r7, #26]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	441a      	add	r2, r3
 8003004:	8b7b      	ldrh	r3, [r7, #26]
 8003006:	6812      	ldr	r2, [r2, #0]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	3322      	adds	r3, #34	; 0x22
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8003012:	8b7b      	ldrh	r3, [r7, #26]
 8003014:	3301      	adds	r3, #1
 8003016:	837b      	strh	r3, [r7, #26]
 8003018:	e7ae      	b.n	8002f78 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	// ----- Decelerate processing -----//
	decelerateProcessing(max_dec_, p_distance);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003020:	3350      	adds	r3, #80	; 0x50
 8003022:	edd3 7a00 	vldr	s15, [r3]
 8003026:	6939      	ldr	r1, [r7, #16]
 8003028:	eeb0 0a67 	vmov.f32	s0, s15
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f82f 	bl	8003090 <_ZN9LineTrace20decelerateProcessingEfPKf>
	// ----- Accelerate processing -----//
	accelerateProcessing(max_acc_, p_distance);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003038:	334c      	adds	r3, #76	; 0x4c
 800303a:	edd3 7a00 	vldr	s15, [r3]
 800303e:	6939      	ldr	r1, [r7, #16]
 8003040:	eeb0 0a67 	vmov.f32	s0, s15
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f8cb 	bl	80031e0 <_ZN9LineTrace20accelerateProcessingEfPKf>

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003050:	334c      	adds	r3, #76	; 0x4c
 8003052:	2200      	movs	r2, #0
 8003054:	9200      	str	r2, [sp, #0]
 8003056:	f241 7270 	movw	r2, #6000	; 0x1770
 800305a:	490c      	ldr	r1, [pc, #48]	; (800308c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x16c>)
 800305c:	4805      	ldr	r0, [pc, #20]	; (8003074 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x154>)
 800305e:	f7fe fad1 	bl	8001604 <sd_write_array_float>

}
 8003062:	bf00      	nop
 8003064:	3724      	adds	r7, #36	; 0x24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd90      	pop	{r4, r7, pc}
 800306a:	bf00      	nop
 800306c:	080187f0 	.word	0x080187f0
 8003070:	080187fc 	.word	0x080187fc
 8003074:	080187e4 	.word	0x080187e4
 8003078:	0801880c 	.word	0x0801880c
 800307c:	0801881c 	.word	0x0801881c
 8003080:	3727c5ac 	.word	0x3727c5ac
 8003084:	459c4000 	.word	0x459c4000
 8003088:	459c4000 	.word	0x459c4000
 800308c:	080187d4 	.word	0x080187d4

08003090 <_ZN9LineTrace20decelerateProcessingEfPKf>:

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003090:	b5b0      	push	{r4, r5, r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	ed87 0a02 	vstr	s0, [r7, #8]
 800309c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800309e:	f241 736f 	movw	r3, #5999	; 0x176f
 80030a2:	83fb      	strh	r3, [r7, #30]
 80030a4:	8bfb      	ldrh	r3, [r7, #30]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 8091 	beq.w	80031ce <_ZN9LineTrace20decelerateProcessingEfPKf+0x13e>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 80030ac:	8bfb      	ldrh	r3, [r7, #30]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80030b6:	3312      	adds	r3, #18
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	3304      	adds	r3, #4
 80030be:	ed93 7a00 	vldr	s14, [r3]
 80030c2:	8bfb      	ldrh	r3, [r7, #30]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80030ca:	3312      	adds	r3, #18
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	3304      	adds	r3, #4
 80030d2:	edd3 7a00 	vldr	s15, [r3]
 80030d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030da:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80030de:	edd7 7a06 	vldr	s15, [r7, #24]
 80030e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ea:	dd6c      	ble.n	80031c6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
			float t = p_distance[i]*1e-3 / v_diff;
 80030ec:	8bfb      	ldrh	r3, [r7, #30]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	4413      	add	r3, r2
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fd fa3e 	bl	8000578 <__aeabi_f2d>
 80030fc:	a336      	add	r3, pc, #216	; (adr r3, 80031d8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x148>)
 80030fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003102:	f7fd fa91 	bl	8000628 <__aeabi_dmul>
 8003106:	4603      	mov	r3, r0
 8003108:	460c      	mov	r4, r1
 800310a:	4625      	mov	r5, r4
 800310c:	461c      	mov	r4, r3
 800310e:	69b8      	ldr	r0, [r7, #24]
 8003110:	f7fd fa32 	bl	8000578 <__aeabi_f2d>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4620      	mov	r0, r4
 800311a:	4629      	mov	r1, r5
 800311c:	f7fd fbae 	bl	800087c <__aeabi_ddiv>
 8003120:	4603      	mov	r3, r0
 8003122:	460c      	mov	r4, r1
 8003124:	4618      	mov	r0, r3
 8003126:	4621      	mov	r1, r4
 8003128:	f7fd fd76 	bl	8000c18 <__aeabi_d2f>
 800312c:	4603      	mov	r3, r0
 800312e:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003130:	edd7 6a06 	vldr	s13, [r7, #24]
 8003134:	ed97 7a05 	vldr	s14, [r7, #20]
 8003138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800313c:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003140:	ed97 7a04 	vldr	s14, [r7, #16]
 8003144:	edd7 7a02 	vldr	s15, [r7, #8]
 8003148:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800314c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003150:	dd39      	ble.n	80031c6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003152:	8bfb      	ldrh	r3, [r7, #30]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800315a:	3312      	adds	r3, #18
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	3304      	adds	r3, #4
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f7fd fa07 	bl	8000578 <__aeabi_f2d>
 800316a:	4604      	mov	r4, r0
 800316c:	460d      	mov	r5, r1
 800316e:	8bfb      	ldrh	r3, [r7, #30]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	ed93 7a00 	vldr	s14, [r3]
 800317a:	edd7 7a02 	vldr	s15, [r7, #8]
 800317e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003182:	ee17 0a90 	vmov	r0, s15
 8003186:	f7fd f9f7 	bl	8000578 <__aeabi_f2d>
 800318a:	a313      	add	r3, pc, #76	; (adr r3, 80031d8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x148>)
 800318c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003190:	f7fd fa4a 	bl	8000628 <__aeabi_dmul>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4620      	mov	r0, r4
 800319a:	4629      	mov	r1, r5
 800319c:	f7fd f88e 	bl	80002bc <__adddf3>
 80031a0:	4603      	mov	r3, r0
 80031a2:	460c      	mov	r4, r1
 80031a4:	4619      	mov	r1, r3
 80031a6:	4622      	mov	r2, r4
 80031a8:	8bfb      	ldrh	r3, [r7, #30]
 80031aa:	1e5c      	subs	r4, r3, #1
 80031ac:	4608      	mov	r0, r1
 80031ae:	4611      	mov	r1, r2
 80031b0:	f7fd fd32 	bl	8000c18 <__aeabi_d2f>
 80031b4:	4601      	mov	r1, r0
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 80031bc:	3312      	adds	r3, #18
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	3304      	adds	r3, #4
 80031c4:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80031c6:	8bfb      	ldrh	r3, [r7, #30]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	83fb      	strh	r3, [r7, #30]
 80031cc:	e76a      	b.n	80030a4 <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 80031ce:	bf00      	nop
 80031d0:	3720      	adds	r7, #32
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bdb0      	pop	{r4, r5, r7, pc}
 80031d6:	bf00      	nop
 80031d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80031dc:	3f50624d 	.word	0x3f50624d

080031e0 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 80031e0:	b5b0      	push	{r4, r5, r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80031ec:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80031ee:	2300      	movs	r3, #0
 80031f0:	83fb      	strh	r3, [r7, #30]
 80031f2:	8bfb      	ldrh	r3, [r7, #30]
 80031f4:	f241 726f 	movw	r2, #5999	; 0x176f
 80031f8:	4293      	cmp	r3, r2
 80031fa:	f200 8091 	bhi.w	8003320 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 80031fe:	8bfb      	ldrh	r3, [r7, #30]
 8003200:	3301      	adds	r3, #1
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003208:	3312      	adds	r3, #18
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	3304      	adds	r3, #4
 8003210:	ed93 7a00 	vldr	s14, [r3]
 8003214:	8bfb      	ldrh	r3, [r7, #30]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800321c:	3312      	adds	r3, #18
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	3304      	adds	r3, #4
 8003224:	edd3 7a00 	vldr	s15, [r3]
 8003228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800322c:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003230:	edd7 7a06 	vldr	s15, [r7, #24]
 8003234:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323c:	dd6c      	ble.n	8003318 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
			float t = p_distance[i]*1e-3 / v_diff;
 800323e:	8bfb      	ldrh	r3, [r7, #30]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	4413      	add	r3, r2
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd f995 	bl	8000578 <__aeabi_f2d>
 800324e:	a336      	add	r3, pc, #216	; (adr r3, 8003328 <_ZN9LineTrace20accelerateProcessingEfPKf+0x148>)
 8003250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003254:	f7fd f9e8 	bl	8000628 <__aeabi_dmul>
 8003258:	4603      	mov	r3, r0
 800325a:	460c      	mov	r4, r1
 800325c:	4625      	mov	r5, r4
 800325e:	461c      	mov	r4, r3
 8003260:	69b8      	ldr	r0, [r7, #24]
 8003262:	f7fd f989 	bl	8000578 <__aeabi_f2d>
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	4620      	mov	r0, r4
 800326c:	4629      	mov	r1, r5
 800326e:	f7fd fb05 	bl	800087c <__aeabi_ddiv>
 8003272:	4603      	mov	r3, r0
 8003274:	460c      	mov	r4, r1
 8003276:	4618      	mov	r0, r3
 8003278:	4621      	mov	r1, r4
 800327a:	f7fd fccd 	bl	8000c18 <__aeabi_d2f>
 800327e:	4603      	mov	r3, r0
 8003280:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003282:	edd7 6a06 	vldr	s13, [r7, #24]
 8003286:	ed97 7a05 	vldr	s14, [r7, #20]
 800328a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800328e:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003292:	ed97 7a04 	vldr	s14, [r7, #16]
 8003296:	edd7 7a02 	vldr	s15, [r7, #8]
 800329a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800329e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a2:	dd39      	ble.n	8003318 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80032a4:	8bfb      	ldrh	r3, [r7, #30]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80032ac:	3312      	adds	r3, #18
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	3304      	adds	r3, #4
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fd f95e 	bl	8000578 <__aeabi_f2d>
 80032bc:	4604      	mov	r4, r0
 80032be:	460d      	mov	r5, r1
 80032c0:	8bfb      	ldrh	r3, [r7, #30]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	4413      	add	r3, r2
 80032c8:	ed93 7a00 	vldr	s14, [r3]
 80032cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80032d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d4:	ee17 0a90 	vmov	r0, s15
 80032d8:	f7fd f94e 	bl	8000578 <__aeabi_f2d>
 80032dc:	a312      	add	r3, pc, #72	; (adr r3, 8003328 <_ZN9LineTrace20accelerateProcessingEfPKf+0x148>)
 80032de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e2:	f7fd f9a1 	bl	8000628 <__aeabi_dmul>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4620      	mov	r0, r4
 80032ec:	4629      	mov	r1, r5
 80032ee:	f7fc ffe5 	bl	80002bc <__adddf3>
 80032f2:	4603      	mov	r3, r0
 80032f4:	460c      	mov	r4, r1
 80032f6:	4619      	mov	r1, r3
 80032f8:	4622      	mov	r2, r4
 80032fa:	8bfb      	ldrh	r3, [r7, #30]
 80032fc:	1c5c      	adds	r4, r3, #1
 80032fe:	4608      	mov	r0, r1
 8003300:	4611      	mov	r1, r2
 8003302:	f7fd fc89 	bl	8000c18 <__aeabi_d2f>
 8003306:	4601      	mov	r1, r0
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 800330e:	3312      	adds	r3, #18
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	3304      	adds	r3, #4
 8003316:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003318:	8bfb      	ldrh	r3, [r7, #30]
 800331a:	3301      	adds	r3, #1
 800331c:	83fb      	strh	r3, [r7, #30]
 800331e:	e768      	b.n	80031f2 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003320:	bf00      	nop
 8003322:	3720      	adds	r7, #32
 8003324:	46bd      	mov	sp, r7
 8003326:	bdb0      	pop	{r4, r5, r7, pc}
 8003328:	d2f1a9fc 	.word	0xd2f1a9fc
 800332c:	3f50624d 	.word	0x3f50624d

08003330 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800333e:	330c      	adds	r3, #12
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 8087 	beq.w	8003456 <_ZN9LineTrace20updateTargetVelocityEv+0x126>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	4618      	mov	r0, r3
 800334e:	f7fe f88d 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8003352:	eeb0 7a40 	vmov.f32	s14, s0
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800335c:	3348      	adds	r3, #72	; 0x48
 800335e:	edd3 7a00 	vldr	s15, [r3]
 8003362:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336a:	bfac      	ite	ge
 800336c:	2301      	movge	r3, #1
 800336e:	2300      	movlt	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d025      	beq.n	80033c2 <_ZN9LineTrace20updateTargetVelocityEv+0x92>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800337c:	3348      	adds	r3, #72	; 0x48
 800337e:	ed93 7a00 	vldr	s14, [r3]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003388:	330e      	adds	r3, #14
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	3322      	adds	r3, #34	; 0x22
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	edd3 7a00 	vldr	s15, [r3]
 8003398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80033a2:	3348      	adds	r3, #72	; 0x48
 80033a4:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033ae:	330e      	adds	r3, #14
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	3301      	adds	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033bc:	330e      	adds	r3, #14
 80033be:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 80033c0:	e7c2      	b.n	8003348 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033c8:	330e      	adds	r3, #14
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	f241 726f 	movw	r2, #5999	; 0x176f
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d906      	bls.n	80033e2 <_ZN9LineTrace20updateTargetVelocityEv+0xb2>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033da:	330e      	adds	r3, #14
 80033dc:	f241 726f 	movw	r2, #5999	; 0x176f
 80033e0:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80033e8:	3348      	adds	r3, #72	; 0x48
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a1c      	ldr	r2, [pc, #112]	; (8003460 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 80033ee:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe f839 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 80033fa:	eef0 7a40 	vmov.f32	s15, s0
 80033fe:	4b19      	ldr	r3, [pc, #100]	; (8003464 <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 8003400:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800340a:	330e      	adds	r3, #14
 800340c:	881a      	ldrh	r2, [r3, #0]
 800340e:	4b16      	ldr	r3, [pc, #88]	; (8003468 <_ZN9LineTrace20updateTargetVelocityEv+0x138>)
 8003410:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003418:	330e      	adds	r3, #14
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003422:	3312      	adds	r3, #18
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	3304      	adds	r3, #4
 800342a:	edd3 7a00 	vldr	s15, [r3]
 800342e:	eeb0 0a67 	vmov.f32	s0, s15
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f965 	bl	8003702 <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800343e:	330e      	adds	r3, #14
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003448:	3312      	adds	r3, #18
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	3304      	adds	r3, #4
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a06      	ldr	r2, [pc, #24]	; (800346c <_ZN9LineTrace20updateTargetVelocityEv+0x13c>)
 8003454:	6013      	str	r3, [r2, #0]

	}
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000270 	.word	0x20000270
 8003464:	20000274 	.word	0x20000274
 8003468:	20000278 	.word	0x20000278
 800346c:	2000027c 	.word	0x2000027c

08003470 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003470:	b590      	push	{r4, r7, lr}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003478:	2300      	movs	r3, #0
 800347a:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	4618      	mov	r0, r3
 8003482:	f7fd ffe4 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8003486:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	4618      	mov	r0, r3
 8003490:	f001 fa41 	bl	8004916 <_ZN8Odometry8getThetaEv>
 8003494:	ec54 3b10 	vmov	r3, r4, d0
 8003498:	4618      	mov	r0, r3
 800349a:	4621      	mov	r1, r4
 800349c:	f7fd fbbc 	bl	8000c18 <__aeabi_d2f>
 80034a0:	4603      	mov	r3, r0
 80034a2:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 80034a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80034a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80034ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b0:	d101      	bne.n	80034b6 <_ZN9LineTrace8isStableEv+0x46>
 80034b2:	4b23      	ldr	r3, [pc, #140]	; (8003540 <_ZN9LineTrace8isStableEv+0xd0>)
 80034b4:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 80034b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80034ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80034be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80034c2:	eeb0 0a66 	vmov.f32	s0, s13
 80034c6:	f7ff f92b 	bl	8002720 <_ZSt3absf>
 80034ca:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 80034ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80034d2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003544 <_ZN9LineTrace8isStableEv+0xd4>
 80034d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034de:	db01      	blt.n	80034e4 <_ZN9LineTrace8isStableEv+0x74>
 80034e0:	4b19      	ldr	r3, [pc, #100]	; (8003548 <_ZN9LineTrace8isStableEv+0xd8>)
 80034e2:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80034ea:	334a      	adds	r3, #74	; 0x4a
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d008      	beq.n	8003504 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 80034f2:	4b16      	ldr	r3, [pc, #88]	; (800354c <_ZN9LineTrace8isStableEv+0xdc>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80034fe:	334a      	adds	r3, #74	; 0x4a
 8003500:	2200      	movs	r2, #0
 8003502:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){ //150
 8003504:	edd7 7a03 	vldr	s15, [r7, #12]
 8003508:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003550 <_ZN9LineTrace8isStableEv+0xe0>
 800350c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003514:	db06      	blt.n	8003524 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003516:	4b0d      	ldr	r3, [pc, #52]	; (800354c <_ZN9LineTrace8isStableEv+0xdc>)
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	3301      	adds	r3, #1
 800351c:	b29a      	uxth	r2, r3
 800351e:	4b0b      	ldr	r3, [pc, #44]	; (800354c <_ZN9LineTrace8isStableEv+0xdc>)
 8003520:	801a      	strh	r2, [r3, #0]
 8003522:	e002      	b.n	800352a <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003524:	4b09      	ldr	r3, [pc, #36]	; (800354c <_ZN9LineTrace8isStableEv+0xdc>)
 8003526:	2200      	movs	r2, #0
 8003528:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 23){ //230mm
 800352a:	4b08      	ldr	r3, [pc, #32]	; (800354c <_ZN9LineTrace8isStableEv+0xdc>)
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	2b16      	cmp	r3, #22
 8003530:	d901      	bls.n	8003536 <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 8003532:	2301      	movs	r3, #1
 8003534:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003536:	7dfb      	ldrb	r3, [r7, #23]
}
 8003538:	4618      	mov	r0, r3
 800353a:	371c      	adds	r7, #28
 800353c:	46bd      	mov	sp, r7
 800353e:	bd90      	pop	{r4, r7, pc}
 8003540:	3727c5ac 	.word	0x3727c5ac
 8003544:	459c4000 	.word	0x459c4000
 8003548:	459c4000 	.word	0x459c4000
 800354c:	20000290 	.word	0x20000290
 8003550:	44fa0000 	.word	0x44fa0000

08003554 <_ZN9LineTrace4initEv>:

// -------public---------- //
void LineTrace::init()
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08a      	sub	sp, #40	; 0x28
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 800355c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003560:	2201      	movs	r2, #1
 8003562:	4934      	ldr	r1, [pc, #208]	; (8003634 <_ZN9LineTrace4initEv+0xe0>)
 8003564:	4834      	ldr	r0, [pc, #208]	; (8003638 <_ZN9LineTrace4initEv+0xe4>)
 8003566:	f7fe f8b3 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 800356a:	f107 0320 	add.w	r3, r7, #32
 800356e:	2201      	movs	r2, #1
 8003570:	4932      	ldr	r1, [pc, #200]	; (800363c <_ZN9LineTrace4initEv+0xe8>)
 8003572:	4831      	ldr	r0, [pc, #196]	; (8003638 <_ZN9LineTrace4initEv+0xe4>)
 8003574:	f7fe f8ac 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003578:	f107 031c 	add.w	r3, r7, #28
 800357c:	2201      	movs	r2, #1
 800357e:	4930      	ldr	r1, [pc, #192]	; (8003640 <_ZN9LineTrace4initEv+0xec>)
 8003580:	482d      	ldr	r0, [pc, #180]	; (8003638 <_ZN9LineTrace4initEv+0xe4>)
 8003582:	f7fe f8a5 	bl	80016d0 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003586:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800358a:	ed97 7a08 	vldr	s14, [r7, #32]
 800358e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003592:	eeb0 1a66 	vmov.f32	s2, s13
 8003596:	eef0 0a47 	vmov.f32	s1, s14
 800359a:	eeb0 0a67 	vmov.f32	s0, s15
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f85a 	bl	8003658 <_ZN9LineTrace7setGainEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 80035a4:	f107 0318 	add.w	r3, r7, #24
 80035a8:	2201      	movs	r2, #1
 80035aa:	4926      	ldr	r1, [pc, #152]	; (8003644 <_ZN9LineTrace4initEv+0xf0>)
 80035ac:	4822      	ldr	r0, [pc, #136]	; (8003638 <_ZN9LineTrace4initEv+0xe4>)
 80035ae:	f7fe f88f 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 80035b2:	f107 0314 	add.w	r3, r7, #20
 80035b6:	2201      	movs	r2, #1
 80035b8:	4923      	ldr	r1, [pc, #140]	; (8003648 <_ZN9LineTrace4initEv+0xf4>)
 80035ba:	481f      	ldr	r0, [pc, #124]	; (8003638 <_ZN9LineTrace4initEv+0xe4>)
 80035bc:	f7fe f888 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 80035c0:	f107 0310 	add.w	r3, r7, #16
 80035c4:	2201      	movs	r2, #1
 80035c6:	4921      	ldr	r1, [pc, #132]	; (800364c <_ZN9LineTrace4initEv+0xf8>)
 80035c8:	481b      	ldr	r0, [pc, #108]	; (8003638 <_ZN9LineTrace4initEv+0xe4>)
 80035ca:	f7fe f881 	bl	80016d0 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 80035ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80035d2:	eeb0 0a67 	vmov.f32	s0, s15
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f893 	bl	8003702 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 80035dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80035e0:	eeb0 0a67 	vmov.f32	s0, s15
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f89b 	bl	8003720 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 80035ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80035ee:	eeb0 0a67 	vmov.f32	s0, s15
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f8a3 	bl	800373e <_ZN9LineTrace15setMaxVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 80035f8:	f107 030c 	add.w	r3, r7, #12
 80035fc:	2201      	movs	r2, #1
 80035fe:	4914      	ldr	r1, [pc, #80]	; (8003650 <_ZN9LineTrace4initEv+0xfc>)
 8003600:	480d      	ldr	r0, [pc, #52]	; (8003638 <_ZN9LineTrace4initEv+0xe4>)
 8003602:	f7fe f865 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003606:	f107 0308 	add.w	r3, r7, #8
 800360a:	2201      	movs	r2, #1
 800360c:	4911      	ldr	r1, [pc, #68]	; (8003654 <_ZN9LineTrace4initEv+0x100>)
 800360e:	480a      	ldr	r0, [pc, #40]	; (8003638 <_ZN9LineTrace4initEv+0xe4>)
 8003610:	f7fe f85e 	bl	80016d0 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003614:	edd7 7a03 	vldr	s15, [r7, #12]
 8003618:	ed97 7a02 	vldr	s14, [r7, #8]
 800361c:	eef0 0a47 	vmov.f32	s1, s14
 8003620:	eeb0 0a67 	vmov.f32	s0, s15
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f8c8 	bl	80037ba <_ZN9LineTrace12setMaxAccDecEff>
}
 800362a:	bf00      	nop
 800362c:	3728      	adds	r7, #40	; 0x28
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	08018828 	.word	0x08018828
 8003638:	08018830 	.word	0x08018830
 800363c:	08018838 	.word	0x08018838
 8003640:	08018840 	.word	0x08018840
 8003644:	08018848 	.word	0x08018848
 8003648:	08018854 	.word	0x08018854
 800364c:	08018860 	.word	0x08018860
 8003650:	0801886c 	.word	0x0801886c
 8003654:	08018874 	.word	0x08018874

08003658 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	ed87 0a02 	vstr	s0, [r7, #8]
 8003664:	edc7 0a01 	vstr	s1, [r7, #4]
 8003668:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	625a      	str	r2, [r3, #36]	; 0x24
	ki_ = ki;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	62da      	str	r2, [r3, #44]	; 0x2c
	kd_ = kd;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800367e:	bf00      	nop
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
	return kp_;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	ee07 3a90 	vmov	s15, r3
}
 800369a:	eeb0 0a67 	vmov.f32	s0, s15
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	return ki_;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	ee07 3a90 	vmov	s15, r3
}
 80036b8:	eeb0 0a67 	vmov.f32	s0, s15
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
	return kd_;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d2:	ee07 3a90 	vmov	s15, r3
}
 80036d6:	eeb0 0a67 	vmov.f32	s0, s15
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <_ZN9LineTrace14setNormalRatioEf>:
{
	return kd_velo_;
}

void LineTrace::setNormalRatio(float ratio)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800376a:	ee07 3a90 	vmov	s15, r3
}
 800376e:	eeb0 0a67 	vmov.f32	s0, s15
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003788:	ee07 3a90 	vmov	s15, r3
}
 800378c:	eeb0 0a67 	vmov.f32	s0, s15
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037a8:	ee07 3a90 	vmov	s15, r3
}
 80037ac:	eeb0 0a67 	vmov.f32	s0, s15
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <_ZN9LineTrace12setMaxAccDecEff>:

void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b085      	sub	sp, #20
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	ed87 0a02 	vstr	s0, [r7, #8]
 80037c6:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80037d0:	334c      	adds	r3, #76	; 0x4c
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80037dc:	3350      	adds	r3, #80	; 0x50
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	601a      	str	r2, [r3, #0]
}
 80037e2:	bf00      	nop
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
	return max_acc_;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80037fc:	334c      	adds	r3, #76	; 0x4c
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	ee07 3a90 	vmov	s15, r3
}
 8003804:	eeb0 0a67 	vmov.f32	s0, s15
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
	return max_dec_;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003820:	3350      	adds	r3, #80	; 0x50
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	ee07 3a90 	vmov	s15, r3
}
 8003828:	eeb0 0a67 	vmov.f32	s0, s15
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
	...

08003838 <_ZN9LineTrace4flipEv>:
void LineTrace::flip()
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 80c1 	beq.w	80039ce <_ZN9LineTrace4flipEv+0x196>
		// ---- line following processing -----//
		pidTrace();
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7ff f8f7 	bl	8002a40 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();


		if(isTargetDistance(10) == true){
 8003852:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fa60 	bl	8003d1c <_ZN9LineTrace16isTargetDistanceEf>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d028      	beq.n	80038b4 <_ZN9LineTrace4flipEv+0x7c>
			// ---- Store Logs ------//
			storeLogs();
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f9be 	bl	8003be4 <_ZN9LineTrace9storeLogsEv>

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){ // Stabilizing and side sensor is black
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff fe01 	bl	8003470 <_ZN9LineTrace8isStableEv>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00c      	beq.n	800388e <_ZN9LineTrace4flipEv+0x56>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	4618      	mov	r0, r3
 800387a:	f001 faeb 	bl	8004e54 <_ZN10SideSensor9getStatusEv>
 800387e:	4603      	mov	r3, r0
 8003880:	43db      	mvns	r3, r3
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b02      	cmp	r3, #2
 8003888:	d101      	bne.n	800388e <_ZN9LineTrace4flipEv+0x56>
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <_ZN9LineTrace4flipEv+0x58>
 800388e:	2300      	movs	r3, #0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <_ZN9LineTrace4flipEv+0x68>
				stable_flag_ = true;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800389a:	3349      	adds	r3, #73	; 0x49
 800389c:	2201      	movs	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fd fdff 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f001 f842 	bl	8004938 <_ZN8Odometry13clearPotitionEv>
		}

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff fd3b 	bl	8003330 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff f978 	bl	8002bb0 <_ZN9LineTrace11isCrossLineEv>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d009      	beq.n	80038da <_ZN9LineTrace4flipEv+0xa2>
			side_sensor_->enableIgnore();
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f001 faea 	bl	8004ea4 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fd fe12 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	4618      	mov	r0, r3
 80038e0:	f001 fafa 	bl	8004ed8 <_ZN10SideSensor13getIgnoreFlagEv>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00f      	beq.n	800390a <_ZN9LineTrace4flipEv+0xd2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fd fdf6 	bl	80014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 80038f4:	eeb0 7a40 	vmov.f32	s14, s0
 80038f8:	eddf 7a37 	vldr	s15, [pc, #220]	; 80039d8 <_ZN9LineTrace4flipEv+0x1a0>
 80038fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003904:	db01      	blt.n	800390a <_ZN9LineTrace4flipEv+0xd2>
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <_ZN9LineTrace4flipEv+0xd4>
 800390a:	2300      	movs	r3, #0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d004      	beq.n	800391a <_ZN9LineTrace4flipEv+0xe2>
			side_sensor_->disableIgnore();
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	4618      	mov	r0, r3
 8003916:	f001 fad2 	bl	8004ebe <_ZN10SideSensor13disableIgnoreEv>

		}

		// ------- Store side line distance ------//
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x02) == 0x02){ //stabilizing and side sensor is white
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003920:	3349      	adds	r3, #73	; 0x49
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00b      	beq.n	8003940 <_ZN9LineTrace4flipEv+0x108>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	4618      	mov	r0, r3
 800392e:	f001 fa91 	bl	8004e54 <_ZN10SideSensor9getStatusEv>
 8003932:	4603      	mov	r3, r0
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b02      	cmp	r3, #2
 800393a:	d101      	bne.n	8003940 <_ZN9LineTrace4flipEv+0x108>
 800393c:	2301      	movs	r3, #1
 800393e:	e000      	b.n	8003942 <_ZN9LineTrace4flipEv+0x10a>
 8003940:	2300      	movs	r3, #0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d01a      	beq.n	800397c <_ZN9LineTrace4flipEv+0x144>
			//storeSideLineDistance();
			if(mode_selector_ == FIRST_RUNNING){
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800394c:	3310      	adds	r3, #16
 800394e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d103      	bne.n	800395e <_ZN9LineTrace4flipEv+0x126>
				storeSideLineDistance();
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fa39 	bl	8003dce <_ZN9LineTrace21storeSideLineDistanceEv>
 800395c:	e002      	b.n	8003964 <_ZN9LineTrace4flipEv+0x12c>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 faa4 	bl	8003eac <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
			}

			stable_flag_ = false;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800396a:	3349      	adds	r3, #73	; 0x49
 800396c:	2200      	movs	r2, #0
 800396e:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003976:	334a      	adds	r3, #74	; 0x4a
 8003978:	2201      	movs	r2, #1
 800397a:	701a      	strb	r2, [r3, #0]
		}

		if(stable_flag_ == true) led_.LR(-1, 1);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003982:	3349      	adds	r3, #73	; 0x49
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <_ZN9LineTrace4flipEv+0x164>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	330c      	adds	r3, #12
 800398e:	2201      	movs	r2, #1
 8003990:	f04f 31ff 	mov.w	r1, #4294967295
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe fb6d 	bl	8002074 <_ZN3LED2LREaa>
 800399a:	e007      	b.n	80039ac <_ZN9LineTrace4flipEv+0x174>
		else led_.LR(-1, 0);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	330c      	adds	r3, #12
 80039a0:	2200      	movs	r2, #0
 80039a2:	f04f 31ff 	mov.w	r1, #4294967295
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fe fb64 	bl	8002074 <_ZN3LED2LREaa>

		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe fe5f 	bl	8002674 <_ZN10LineSensor13emergencyStopEv>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <_ZN9LineTrace4flipEv+0x196>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	eddf 0a06 	vldr	s1, [pc, #24]	; 80039dc <_ZN9LineTrace4flipEv+0x1a4>
 80039c4:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80039dc <_ZN9LineTrace4flipEv+0x1a4>
 80039c8:	4618      	mov	r0, r3
 80039ca:	f001 fcd5 	bl	8005378 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}
	}
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	43480000 	.word	0x43480000
 80039dc:	00000000 	.word	0x00000000

080039e0 <_ZN9LineTrace5startEv>:
		odometry_->clearPotition();
	}
}

void LineTrace::start()
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	i_reset_flag_ = true;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	velocity_ctrl_->start();
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f001 fd14 	bl	800542a <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f001 fa3c 	bl	8004e84 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a12:	3344      	adds	r3, #68	; 0x44
 8003a14:	2200      	movs	r2, #0
 8003a16:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a1e:	3346      	adds	r3, #70	; 0x46
 8003a20:	2200      	movs	r2, #0
 8003a22:	801a      	strh	r2, [r3, #0]
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	velocity_ctrl_->stop();
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f001 fd05 	bl	8005450 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	330c      	adds	r3, #12
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fe fb0f 	bl	8002074 <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003a5c:	3310      	adds	r3, #16
 8003a5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d107      	bne.n	8003a76 <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69d8      	ldr	r0, [r3, #28]
 8003a6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ae0 <_ZN9LineTrace4stopEv+0xb4>)
 8003a6c:	4a1d      	ldr	r2, [pc, #116]	; (8003ae4 <_ZN9LineTrace4stopEv+0xb8>)
 8003a6e:	491e      	ldr	r1, [pc, #120]	; (8003ae8 <_ZN9LineTrace4stopEv+0xbc>)
 8003a70:	f000 fc30 	bl	80042d4 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 8003a74:	e006      	b.n	8003a84 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69d8      	ldr	r0, [r3, #28]
 8003a7a:	4b1c      	ldr	r3, [pc, #112]	; (8003aec <_ZN9LineTrace4stopEv+0xc0>)
 8003a7c:	4a1c      	ldr	r2, [pc, #112]	; (8003af0 <_ZN9LineTrace4stopEv+0xc4>)
 8003a7e:	491a      	ldr	r1, [pc, #104]	; (8003ae8 <_ZN9LineTrace4stopEv+0xbc>)
 8003a80:	f000 fc4b 	bl	800431a <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003a8a:	3314      	adds	r3, #20
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	9200      	str	r2, [sp, #0]
 8003a90:	2264      	movs	r2, #100	; 0x64
 8003a92:	4918      	ldr	r1, [pc, #96]	; (8003af4 <_ZN9LineTrace4stopEv+0xc8>)
 8003a94:	4814      	ldr	r0, [pc, #80]	; (8003ae8 <_ZN9LineTrace4stopEv+0xbc>)
 8003a96:	f7fd fdb5 	bl	8001604 <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8003aa0:	33a4      	adds	r3, #164	; 0xa4
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	9200      	str	r2, [sp, #0]
 8003aa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003aaa:	4913      	ldr	r1, [pc, #76]	; (8003af8 <_ZN9LineTrace4stopEv+0xcc>)
 8003aac:	480e      	ldr	r0, [pc, #56]	; (8003ae8 <_ZN9LineTrace4stopEv+0xbc>)
 8003aae:	f7fd fda9 	bl	8001604 <sd_write_array_float>

	led_.LR(-1, 0);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	330c      	adds	r3, #12
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fe fad9 	bl	8002074 <_ZN3LED2LREaa>

	logger_->resetIdx();
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fcb5 	bl	8004436 <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 fc63 	bl	800439c <_ZN6Logger10resetLogs2Ev>
}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	080187f0 	.word	0x080187f0
 8003ae4:	080187fc 	.word	0x080187fc
 8003ae8:	080187e4 	.word	0x080187e4
 8003aec:	0801887c 	.word	0x0801887c
 8003af0:	08018888 	.word	0x08018888
 8003af4:	0801880c 	.word	0x0801880c
 8003af8:	0801881c 	.word	0x0801881c

08003afc <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	737b      	strb	r3, [r7, #13]
	start();
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7ff ff67 	bl	80039e0 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 8003b12:	7b7b      	ldrb	r3, [r7, #13]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d15b      	bne.n	8003bd0 <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 8003b18:	89fb      	ldrh	r3, [r7, #14]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <_ZN9LineTrace7runningEv+0x28>
 8003b1e:	2b0a      	cmp	r3, #10
 8003b20:	d030      	beq.n	8003b84 <_ZN9LineTrace7runningEv+0x88>
 8003b22:	e054      	b.n	8003bce <_ZN9LineTrace7runningEv+0xd2>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f001 f99f 	bl	8004e6c <_ZN10SideSensor16getWhiteLineCntREv>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	bf0c      	ite	eq
 8003b34:	2301      	moveq	r3, #1
 8003b36:	2300      	movne	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d044      	beq.n	8003bc8 <_ZN9LineTrace7runningEv+0xcc>
				}
				else{ // Other than first running
					startVelocityPlay();
				}
				*/
				loggerStart();
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff f80a 	bl	8002b58 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003b4a:	3310      	adds	r3, #16
 8003b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f89f 	bl	8003c98 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fd fccd 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fd fcab 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	330c      	adds	r3, #12
 8003b72:	f04f 32ff 	mov.w	r2, #4294967295
 8003b76:	2100      	movs	r1, #0
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fe fa7b 	bl	8002074 <_ZN3LED2LREaa>
				stage = 10;
 8003b7e:	230a      	movs	r3, #10
 8003b80:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8003b82:	e021      	b.n	8003bc8 <_ZN9LineTrace7runningEv+0xcc>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f001 f96f 	bl	8004e6c <_ZN10SideSensor16getWhiteLineCntREv>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	bf0c      	ite	eq
 8003b94:	2301      	moveq	r3, #1
 8003b96:	2300      	movne	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d016      	beq.n	8003bcc <_ZN9LineTrace7runningEv+0xd0>
				loggerStop();
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7fe fff5 	bl	8002b8e <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f88a 	bl	8003cbe <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8003baa:	2064      	movs	r0, #100	; 0x64
 8003bac:	f004 fe6e 	bl	800888c <HAL_Delay>

				setTargetVelocity(0);
 8003bb0:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003be0 <_ZN9LineTrace7runningEv+0xe4>
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7ff fda4 	bl	8003702 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8003bba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003bbe:	f004 fe65 	bl	800888c <HAL_Delay>

				goal_flag = true;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	737b      	strb	r3, [r7, #13]

			}

			break;
 8003bc6:	e001      	b.n	8003bcc <_ZN9LineTrace7runningEv+0xd0>
			break;
 8003bc8:	bf00      	nop
 8003bca:	e7a2      	b.n	8003b12 <_ZN9LineTrace7runningEv+0x16>
			break;
 8003bcc:	bf00      	nop
	while(goal_flag == false){
 8003bce:	e7a0      	b.n	8003b12 <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff ff2b 	bl	8003a2c <_ZN9LineTrace4stopEv>
}
 8003bd6:	bf00      	nop
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	00000000 	.word	0x00000000

08003be4 <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 8003be4:	b590      	push	{r4, r7, lr}
 8003be6:	ed2d 8b02 	vpush	{d8}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d046      	beq.n	8003c88 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003c00:	3310      	adds	r3, #16
 8003c02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d11c      	bne.n	8003c44 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69dc      	ldr	r4, [r3, #28]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fd fc1b 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8003c18:	eeb0 8a40 	vmov.f32	s16, s0
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 fe78 	bl	8004916 <_ZN8Odometry8getThetaEv>
 8003c26:	ec53 2b10 	vmov	r2, r3, d0
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	f7fc fff3 	bl	8000c18 <__aeabi_d2f>
 8003c32:	4603      	mov	r3, r0
 8003c34:	ee00 3a90 	vmov	s1, r3
 8003c38:	eeb0 0a48 	vmov.f32	s0, s16
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f000 fa78 	bl	8004132 <_ZN6Logger21storeDistanceAndThetaEff>
 8003c42:	e01b      	b.n	8003c7c <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(velocity_ctrl_->getCurrentVelocity(), odometry_->getTheta());
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69dc      	ldr	r4, [r3, #28]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f001 fc1b 	bl	8005488 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8003c52:	eeb0 8a40 	vmov.f32	s16, s0
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fe5b 	bl	8004916 <_ZN8Odometry8getThetaEv>
 8003c60:	ec53 2b10 	vmov	r2, r3, d0
 8003c64:	4610      	mov	r0, r2
 8003c66:	4619      	mov	r1, r3
 8003c68:	f7fc ffd6 	bl	8000c18 <__aeabi_d2f>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	ee00 3a90 	vmov	s1, r3
 8003c72:	eeb0 0a48 	vmov.f32	s0, s16
 8003c76:	4620      	mov	r0, r4
 8003c78:	f000 faa2 	bl	80041c0 <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 8003c7c:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	3301      	adds	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	4b03      	ldr	r3, [pc, #12]	; (8003c94 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003c86:	801a      	strh	r2, [r3, #0]
	}
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	ecbd 8b02 	vpop	{d8}
 8003c92:	bd90      	pop	{r4, r7, pc}
 8003c94:	20000264 	.word	0x20000264

08003c98 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fd fc0d 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003cb0:	330c      	adds	r3, #12
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	701a      	strb	r2, [r3, #0]
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003ccc:	330c      	adds	r3, #12
 8003cce:	2200      	movs	r2, #0
 8003cd0:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003cd8:	330e      	adds	r3, #14
 8003cda:	2200      	movs	r2, #0
 8003cdc:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003ce4:	3348      	adds	r3, #72	; 0x48
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <_ZN9LineTrace7setModeEs>:

void LineTrace::setMode(int16_t mode)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003d0a:	3310      	adds	r3, #16
 8003d0c:	887a      	ldrh	r2, [r7, #2]
 8003d0e:	801a      	strh	r2, [r3, #0]
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fd fb8c 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8003d36:	eeb0 7a40 	vmov.f32	s14, s0
 8003d3a:	edd7 7a00 	vldr	s15, [r7]
 8003d3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d46:	bf94      	ite	ls
 8003d48:	2301      	movls	r3, #1
 8003d4a:	2300      	movhi	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 8003d52:	2301      	movs	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8003d60:	b590      	push	{r4, r7, lr}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	695a      	ldr	r2, [r3, #20]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003d72:	3344      	adds	r3, #68	; 0x44
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	461c      	mov	r4, r3
 8003d78:	4610      	mov	r0, r2
 8003d7a:	f7fd fb77 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8003d7e:	eef0 7a40 	vmov.f32	s15, s0
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8003d88:	3304      	adds	r3, #4
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	3304      	adds	r3, #4
 8003d90:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003d9a:	3344      	adds	r3, #68	; 0x44
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003da8:	3344      	adds	r3, #68	; 0x44
 8003daa:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003db2:	3344      	adds	r3, #68	; 0x44
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	2b63      	cmp	r3, #99	; 0x63
 8003db8:	d905      	bls.n	8003dc6 <_ZN9LineTrace22storeCrossLineDistanceEv+0x66>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003dc0:	3344      	adds	r3, #68	; 0x44
 8003dc2:	2263      	movs	r2, #99	; 0x63
 8003dc4:	801a      	strh	r2, [r3, #0]
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd90      	pop	{r4, r7, pc}

08003dce <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8003dce:	b590      	push	{r4, r7, lr}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695a      	ldr	r2, [r3, #20]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003de0:	3346      	adds	r3, #70	; 0x46
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	461c      	mov	r4, r3
 8003de6:	4610      	mov	r0, r2
 8003de8:	f7fd fb40 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8003dec:	eef0 7a40 	vmov.f32	s15, s0
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8003df6:	3328      	adds	r3, #40	; 0x28
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e08:	3346      	adds	r3, #70	; 0x46
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e16:	3346      	adds	r3, #70	; 0x46
 8003e18:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e20:	3346      	adds	r3, #70	; 0x46
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e28:	d306      	bcc.n	8003e38 <_ZN9LineTrace21storeSideLineDistanceEv+0x6a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e30:	3346      	adds	r3, #70	; 0x46
 8003e32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e36:	801a      	strh	r2, [r3, #0]
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd90      	pop	{r4, r7, pc}

08003e40 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6959      	ldr	r1, [r3, #20]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e52:	3344      	adds	r3, #68	; 0x44
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	3304      	adds	r3, #4
 8003e64:	edd3 7a00 	vldr	s15, [r3]
 8003e68:	eeb0 0a67 	vmov.f32	s0, s15
 8003e6c:	4608      	mov	r0, r1
 8003e6e:	f7fd fb0c 	bl	800148a <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e78:	3344      	adds	r3, #68	; 0x44
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e86:	3344      	adds	r3, #68	; 0x44
 8003e88:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e90:	3344      	adds	r3, #68	; 0x44
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	2b63      	cmp	r3, #99	; 0x63
 8003e96:	d905      	bls.n	8003ea4 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x64>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e9e:	3344      	adds	r3, #68	; 0x44
 8003ea0:	2263      	movs	r2, #99	; 0x63
 8003ea2:	801a      	strh	r2, [r3, #0]

}
 8003ea4:	bf00      	nop
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	82fb      	strh	r3, [r7, #22]
 8003eb8:	8afb      	ldrh	r3, [r7, #22]
 8003eba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ebe:	d239      	bcs.n	8003f34 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
		float temp_sideline_distance = sideline_distance_[i];
 8003ec0:	8afb      	ldrh	r3, [r7, #22]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8003ec8:	3328      	adds	r3, #40	; 0x28
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	3304      	adds	r3, #4
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - encoder_->getTotalDistance());
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7fd fac7 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8003ede:	eeb0 7a40 	vmov.f32	s14, s0
 8003ee2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ee6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003eea:	eeb0 0a67 	vmov.f32	s0, s15
 8003eee:	f7fe fc17 	bl	8002720 <_ZSt3absf>
 8003ef2:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 80){
 8003ef6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003efa:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003f5c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb0>
 8003efe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f06:	d811      	bhi.n	8003f2c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x80>
			encoder_->setTotalDistance(sideline_distance_[i]);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6959      	ldr	r1, [r3, #20]
 8003f0c:	8afb      	ldrh	r3, [r7, #22]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8003f14:	3328      	adds	r3, #40	; 0x28
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	edd3 7a00 	vldr	s15, [r3]
 8003f20:	eeb0 0a67 	vmov.f32	s0, s15
 8003f24:	4608      	mov	r0, r1
 8003f26:	f7fd fab0 	bl	800148a <_ZN7Encoder16setTotalDistanceEf>
			break;
 8003f2a:	e003      	b.n	8003f34 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003f2c:	8afb      	ldrh	r3, [r7, #22]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	82fb      	strh	r3, [r7, #22]
 8003f32:	e7c1      	b.n	8003eb8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
	}

		//sideline_idx_++;

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f3a:	3346      	adds	r3, #70	; 0x46
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f42:	d306      	bcc.n	8003f52 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xa6>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f4a:	3346      	adds	r3, #70	; 0x46
 8003f4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f50:	801a      	strh	r2, [r3, #0]

}
 8003f52:	bf00      	nop
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	42a00000 	.word	0x42a00000

08003f60 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003f6e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003f72:	2200      	movs	r2, #0
 8003f74:	701a      	strb	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003f7c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003f80:	2200      	movs	r2, #0
 8003f82:	801a      	strh	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003f8a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003f8e:	2200      	movs	r2, #0
 8003f90:	801a      	strh	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003f98:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	801a      	strh	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
	...

08003fb0 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8003fbc:	f7fd fc14 	bl	80017e8 <sd_mount>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	bf0c      	ite	eq
 8003fc6:	2301      	moveq	r3, #1
 8003fc8:	2300      	movne	r3, #0
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d016      	beq.n	8003ffe <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8003fd0:	f7fd f866 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	f7fd f872 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8003fdc:	4815      	ldr	r0, [pc, #84]	; (8004034 <_ZN6Logger10sdCardInitEv+0x84>)
 8003fde:	f7fd f899 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	f7fd f86b 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8003fea:	4813      	ldr	r0, [pc, #76]	; (8004038 <_ZN6Logger10sdCardInitEv+0x88>)
 8003fec:	f7fd f892 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8003ff0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ff4:	f004 fc4a 	bl	800888c <HAL_Delay>

	  ret = true;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	73fb      	strb	r3, [r7, #15]
 8003ffc:	e015      	b.n	800402a <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 8003ffe:	f7fd f84f 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004002:	2100      	movs	r1, #0
 8004004:	2000      	movs	r0, #0
 8004006:	f7fd f85b 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 800400a:	480a      	ldr	r0, [pc, #40]	; (8004034 <_ZN6Logger10sdCardInitEv+0x84>)
 800400c:	f7fd f882 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004010:	2101      	movs	r1, #1
 8004012:	2000      	movs	r0, #0
 8004014:	f7fd f854 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8004018:	4808      	ldr	r0, [pc, #32]	; (800403c <_ZN6Logger10sdCardInitEv+0x8c>)
 800401a:	f7fd f87b 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 800401e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004022:	f004 fc33 	bl	800888c <HAL_Delay>

	  ret = false;
 8004026:	2300      	movs	r3, #0
 8004028:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 800402a:	7bfb      	ldrb	r3, [r7, #15]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	08018898 	.word	0x08018898
 8004038:	080188a4 	.word	0x080188a4
 800403c:	080188ac 	.word	0x080188ac

08004040 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004052:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d027      	beq.n	80040ac <_ZN6Logger8storeLogEf+0x6c>
		store_data_float_[log_index_tim_] = data;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004062:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004078:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	3301      	adds	r3, #1
 8004080:	b29a      	uxth	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004088:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800408c:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004094:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d006      	beq.n	80040ac <_ZN6Logger8storeLogEf+0x6c>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80040a4:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80040a8:	2200      	movs	r2, #0
 80040aa:	801a      	strh	r2, [r3, #0]
	}
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80040ca:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d028      	beq.n	8004126 <_ZN6Logger9storeLog2Ef+0x6e>
		store_data_float2_[log_index_tim2_] = data;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80040da:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	3304      	adds	r3, #4
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80040f2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	3301      	adds	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004102:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004106:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800410e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d006      	beq.n	8004126 <_ZN6Logger9storeLog2Ef+0x6e>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800411e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004122:	2200      	movs	r2, #0
 8004124:	801a      	strh	r2, [r3, #0]
	}
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004132:	b480      	push	{r7}
 8004134:	b085      	sub	sp, #20
 8004136:	af00      	add	r7, sp, #0
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	ed87 0a02 	vstr	s0, [r7, #8]
 800413e:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004148:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	3302      	adds	r3, #2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004160:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800416c:	3312      	adds	r3, #18
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800417c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	3301      	adds	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800418c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004190:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004198:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	f241 726f 	movw	r2, #5999	; 0x176f
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d906      	bls.n	80041b4 <_ZN6Logger21storeDistanceAndThetaEff+0x82>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80041ac:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80041b0:	2200      	movs	r2, #0
 80041b2:	801a      	strh	r2, [r3, #0]
	//}
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80041cc:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80041d6:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80041e2:	3322      	adds	r3, #34	; 0x22
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80041f2:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 80041fe:	3352      	adds	r3, #82	; 0x52
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800420e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	3301      	adds	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800421e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004222:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800422a:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	f241 726f 	movw	r2, #5999	; 0x176f
 8004234:	4293      	cmp	r3, r2
 8004236:	d906      	bls.n	8004246 <_ZN6Logger22storeDistanceAndTheta2Eff+0x86>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800423e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004242:	2200      	movs	r2, #0
 8004244:	801a      	strh	r2, [r3, #0]
	//}
}
 8004246:	bf00      	nop
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
	return store_distance_;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3308      	adds	r3, #8
}
 800425e:	4618      	mov	r0, r3
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004278:	3348      	adds	r3, #72	; 0x48
}
 800427a:	4618      	mov	r0, r3
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b086      	sub	sp, #24
 800428a:	af02      	add	r7, sp, #8
 800428c:	60f8      	str	r0, [r7, #12]
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	2300      	movs	r3, #0
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	4613      	mov	r3, r2
 800429a:	2201      	movs	r2, #1
 800429c:	6879      	ldr	r1, [r7, #4]
 800429e:	68b8      	ldr	r0, [r7, #8]
 80042a0:	f7fd f9b0 	bl	8001604 <sd_write_array_float>
}
 80042a4:	bf00      	nop
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	1d1a      	adds	r2, r3, #4
 80042bc:	2300      	movs	r3, #0
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	4613      	mov	r3, r2
 80042c2:	2201      	movs	r2, #1
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	68b8      	ldr	r0, [r7, #8]
 80042c8:	f7fd f99c 	bl	8001604 <sd_write_array_float>
}
 80042cc:	bf00      	nop
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f103 0208 	add.w	r2, r3, #8
 80042e8:	2300      	movs	r3, #0
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	4613      	mov	r3, r2
 80042ee:	f241 7270 	movw	r2, #6000	; 0x1770
 80042f2:	6879      	ldr	r1, [r7, #4]
 80042f4:	68b8      	ldr	r0, [r7, #8]
 80042f6:	f7fd f985 	bl	8001604 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004300:	3348      	adds	r3, #72	; 0x48
 8004302:	2200      	movs	r2, #0
 8004304:	9200      	str	r2, [sp, #0]
 8004306:	f241 7270 	movw	r2, #6000	; 0x1770
 800430a:	6839      	ldr	r1, [r7, #0]
 800430c:	68b8      	ldr	r0, [r7, #8]
 800430e:	f7fd f979 	bl	8001604 <sd_write_array_float>
}
 8004312:	bf00      	nop
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b086      	sub	sp, #24
 800431e:	af02      	add	r7, sp, #8
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	607a      	str	r2, [r7, #4]
 8004326:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 800432e:	3388      	adds	r3, #136	; 0x88
 8004330:	2200      	movs	r2, #0
 8004332:	9200      	str	r2, [sp, #0]
 8004334:	f241 7270 	movw	r2, #6000	; 0x1770
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	68b8      	ldr	r0, [r7, #8]
 800433c:	f7fd f962 	bl	8001604 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004346:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800434a:	2200      	movs	r2, #0
 800434c:	9200      	str	r2, [sp, #0]
 800434e:	f241 7270 	movw	r2, #6000	; 0x1770
 8004352:	6839      	ldr	r1, [r7, #0]
 8004354:	68b8      	ldr	r0, [r7, #8]
 8004356:	f7fd f955 	bl	8001604 <sd_write_array_float>
}
 800435a:	bf00      	nop
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b084      	sub	sp, #16
 8004366:	af00      	add	r7, sp, #0
 8004368:	60f8      	str	r0, [r7, #12]
 800436a:	60b9      	str	r1, [r7, #8]
 800436c:	607a      	str	r2, [r7, #4]
 800436e:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3308      	adds	r3, #8
 8004374:	f241 7270 	movw	r2, #6000	; 0x1770
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	68b8      	ldr	r0, [r7, #8]
 800437c:	f7fd f9a8 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004386:	3348      	adds	r3, #72	; 0x48
 8004388:	f241 7270 	movw	r2, #6000	; 0x1770
 800438c:	6839      	ldr	r1, [r7, #0]
 800438e:	68b8      	ldr	r0, [r7, #8]
 8004390:	f7fd f99e 	bl	80016d0 <sd_read_array_float>
}
 8004394:	bf00      	nop
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 800439c:	b480      	push	{r7}
 800439e:	b08b      	sub	sp, #44	; 0x2c
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 80043aa:	3388      	adds	r3, #136	; 0x88
 80043ac:	61fb      	str	r3, [r7, #28]
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80043b8:	3340      	adds	r3, #64	; 0x40
 80043ba:	61bb      	str	r3, [r7, #24]
 80043bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d009      	beq.n	80043d8 <_ZN6Logger10resetLogs2Ev+0x3c>
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	617b      	str	r3, [r7, #20]
		log = 0;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	3304      	adds	r3, #4
 80043d4:	627b      	str	r3, [r7, #36]	; 0x24
 80043d6:	e7f1      	b.n	80043bc <_ZN6Logger10resetLogs2Ev+0x20>
	}
	for(auto &log : store_theta2_){
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80043de:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80043e2:	613b      	str	r3, [r7, #16]
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	623b      	str	r3, [r7, #32]
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80043ee:	3340      	adds	r3, #64	; 0x40
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	6a3a      	ldr	r2, [r7, #32]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d009      	beq.n	800440e <_ZN6Logger10resetLogs2Ev+0x72>
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	60bb      	str	r3, [r7, #8]
		log = 0;
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	3304      	adds	r3, #4
 800440a:	623b      	str	r3, [r7, #32]
 800440c:	e7f1      	b.n	80043f2 <_ZN6Logger10resetLogs2Ev+0x56>
	}

	log_index_tim_ = 0;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004414:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004418:	2200      	movs	r2, #0
 800441a:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004422:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004426:	2200      	movs	r2, #0
 8004428:	801a      	strh	r2, [r3, #0]
}
 800442a:	bf00      	nop
 800442c:	372c      	adds	r7, #44	; 0x2c
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004444:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004448:	2200      	movs	r2, #0
 800444a:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004452:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004456:	2200      	movs	r2, #0
 8004458:	801a      	strh	r2, [r3, #0]
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004474:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004478:	2201      	movs	r2, #1
 800447a:	701a      	strb	r2, [r3, #0]
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004496:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800449a:	2200      	movs	r2, #0
 800449c:	701a      	strb	r2, [r3, #0]
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	801a      	strh	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	805a      	strh	r2, [r3, #2]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4618      	mov	r0, r3
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <_ZN5Motor4initEv>:

void Motor::init()
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80044d4:	2108      	movs	r1, #8
 80044d6:	4805      	ldr	r0, [pc, #20]	; (80044ec <_ZN5Motor4initEv+0x20>)
 80044d8:	f009 fb88 	bl	800dbec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80044dc:	210c      	movs	r1, #12
 80044de:	4803      	ldr	r0, [pc, #12]	; (80044ec <_ZN5Motor4initEv+0x20>)
 80044e0:	f009 fb84 	bl	800dbec <HAL_TIM_PWM_Start>

}
 80044e4:	bf00      	nop
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	2003e8bc 	.word	0x2003e8bc

080044f0 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	da0d      	bge.n	800451e <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004502:	2200      	movs	r2, #0
 8004504:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004508:	481f      	ldr	r0, [pc, #124]	; (8004588 <_ZN5Motor9motorCtrlEv+0x98>)
 800450a:	f005 fc55 	bl	8009db8 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004514:	b29b      	uxth	r3, r3
 8004516:	425b      	negs	r3, r3
 8004518:	b29b      	uxth	r3, r3
 800451a:	81fb      	strh	r3, [r7, #14]
 800451c:	e00a      	b.n	8004534 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 800451e:	2201      	movs	r2, #1
 8004520:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004524:	4818      	ldr	r0, [pc, #96]	; (8004588 <_ZN5Motor9motorCtrlEv+0x98>)
 8004526:	f005 fc47 	bl	8009db8 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004530:	b29b      	uxth	r3, r3
 8004532:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800453a:	2b00      	cmp	r3, #0
 800453c:	da0d      	bge.n	800455a <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 800453e:	2201      	movs	r2, #1
 8004540:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004544:	4810      	ldr	r0, [pc, #64]	; (8004588 <_ZN5Motor9motorCtrlEv+0x98>)
 8004546:	f005 fc37 	bl	8009db8 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004550:	b29b      	uxth	r3, r3
 8004552:	425b      	negs	r3, r3
 8004554:	b29b      	uxth	r3, r3
 8004556:	81bb      	strh	r3, [r7, #12]
 8004558:	e00a      	b.n	8004570 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 800455a:	2200      	movs	r2, #0
 800455c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004560:	4809      	ldr	r0, [pc, #36]	; (8004588 <_ZN5Motor9motorCtrlEv+0x98>)
 8004562:	f005 fc29 	bl	8009db8 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800456c:	b29b      	uxth	r3, r3
 800456e:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004570:	89fa      	ldrh	r2, [r7, #14]
 8004572:	4b06      	ldr	r3, [pc, #24]	; (800458c <_ZN5Motor9motorCtrlEv+0x9c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004578:	89ba      	ldrh	r2, [r7, #12]
 800457a:	4b04      	ldr	r3, [pc, #16]	; (800458c <_ZN5Motor9motorCtrlEv+0x9c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004580:	bf00      	nop
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40020c00 	.word	0x40020c00
 800458c:	2003e8bc 	.word	0x2003e8bc

08004590 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004590:	b590      	push	{r4, r7, lr}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	6178      	str	r0, [r7, #20]
 8004598:	ed87 0b02 	vstr	d0, [r7, #8]
 800459c:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	4b30      	ldr	r3, [pc, #192]	; (8004668 <_ZN5Motor8setRatioEdd+0xd8>)
 80045a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045aa:	f7fc facd 	bl	8000b48 <__aeabi_dcmpgt>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <_ZN5Motor8setRatioEdd+0x30>
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	4c2b      	ldr	r4, [pc, #172]	; (8004668 <_ZN5Motor8setRatioEdd+0xd8>)
 80045ba:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80045be:	e00e      	b.n	80045de <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	4b29      	ldr	r3, [pc, #164]	; (800466c <_ZN5Motor8setRatioEdd+0xdc>)
 80045c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045ca:	f7fc fa9f 	bl	8000b0c <__aeabi_dcmplt>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d004      	beq.n	80045de <_ZN5Motor8setRatioEdd+0x4e>
 80045d4:	f04f 0300 	mov.w	r3, #0
 80045d8:	4c24      	ldr	r4, [pc, #144]	; (800466c <_ZN5Motor8setRatioEdd+0xdc>)
 80045da:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	4b21      	ldr	r3, [pc, #132]	; (8004668 <_ZN5Motor8setRatioEdd+0xd8>)
 80045e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045e8:	f7fc faae 	bl	8000b48 <__aeabi_dcmpgt>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d005      	beq.n	80045fe <_ZN5Motor8setRatioEdd+0x6e>
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	4c1c      	ldr	r4, [pc, #112]	; (8004668 <_ZN5Motor8setRatioEdd+0xd8>)
 80045f8:	e9c7 3400 	strd	r3, r4, [r7]
 80045fc:	e00e      	b.n	800461c <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	4b1a      	ldr	r3, [pc, #104]	; (800466c <_ZN5Motor8setRatioEdd+0xdc>)
 8004604:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004608:	f7fc fa80 	bl	8000b0c <__aeabi_dcmplt>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d004      	beq.n	800461c <_ZN5Motor8setRatioEdd+0x8c>
 8004612:	f04f 0300 	mov.w	r3, #0
 8004616:	4c15      	ldr	r4, [pc, #84]	; (800466c <_ZN5Motor8setRatioEdd+0xdc>)
 8004618:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	4b13      	ldr	r3, [pc, #76]	; (8004670 <_ZN5Motor8setRatioEdd+0xe0>)
 8004622:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004626:	f7fb ffff 	bl	8000628 <__aeabi_dmul>
 800462a:	4603      	mov	r3, r0
 800462c:	460c      	mov	r4, r1
 800462e:	4618      	mov	r0, r3
 8004630:	4621      	mov	r1, r4
 8004632:	f7fc faa9 	bl	8000b88 <__aeabi_d2iz>
 8004636:	4603      	mov	r3, r0
 8004638:	b21a      	sxth	r2, r3
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <_ZN5Motor8setRatioEdd+0xe0>)
 8004644:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004648:	f7fb ffee 	bl	8000628 <__aeabi_dmul>
 800464c:	4603      	mov	r3, r0
 800464e:	460c      	mov	r4, r1
 8004650:	4618      	mov	r0, r3
 8004652:	4621      	mov	r1, r4
 8004654:	f7fc fa98 	bl	8000b88 <__aeabi_d2iz>
 8004658:	4603      	mov	r3, r0
 800465a:	b21a      	sxth	r2, r3
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	805a      	strh	r2, [r3, #2]

}
 8004660:	bf00      	nop
 8004662:	371c      	adds	r7, #28
 8004664:	46bd      	mov	sp, r7
 8004666:	bd90      	pop	{r4, r7, pc}
 8004668:	3ff00000 	.word	0x3ff00000
 800466c:	bff00000 	.word	0xbff00000
 8004670:	409c2000 	.word	0x409c2000

08004674 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004674:	b490      	push	{r4, r7}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	603b      	str	r3, [r7, #0]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	f04f 0300 	mov.w	r3, #0
 8004688:	f04f 0400 	mov.w	r4, #0
 800468c:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	f04f 0300 	mov.w	r3, #0
 8004696:	f04f 0400 	mov.w	r4, #0
 800469a:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	f04f 0400 	mov.w	r4, #0
 80046a8:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	f04f 0300 	mov.w	r3, #0
 80046b2:	f04f 0400 	mov.w	r4, #0
 80046b6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	f04f 0400 	mov.w	r4, #0
 80046c4:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	609a      	str	r2, [r3, #8]
}
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc90      	pop	{r4, r7}
 80046e4:	4770      	bx	lr
	...

080046e8 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 80046e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046ec:	b086      	sub	sp, #24
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fd fa3e 	bl	8001b78 <_ZN3IMU8getOmegaEv>
 80046fc:	ee10 3a10 	vmov	r3, s0
 8004700:	4618      	mov	r0, r3
 8004702:	f7fb ff39 	bl	8000578 <__aeabi_f2d>
 8004706:	4603      	mov	r3, r0
 8004708:	460c      	mov	r4, r1
 800470a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f7fc fe8c 	bl	8001430 <_ZN7Encoder11getDistanceEv>
 8004718:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 800471c:	a376      	add	r3, pc, #472	; (adr r3, 80048f8 <_ZN8Odometry12calcPotitionEv+0x210>)
 800471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004722:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004726:	f7fb ff7f 	bl	8000628 <__aeabi_dmul>
 800472a:	4603      	mov	r3, r0
 800472c:	460c      	mov	r4, r1
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f7fb ff1c 	bl	8000578 <__aeabi_f2d>
 8004740:	4682      	mov	sl, r0
 8004742:	468b      	mov	fp, r1
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004758:	f7fc f890 	bl	800087c <__aeabi_ddiv>
 800475c:	4602      	mov	r2, r0
 800475e:	460b      	mov	r3, r1
 8004760:	4640      	mov	r0, r8
 8004762:	4649      	mov	r1, r9
 8004764:	f7fb fdaa 	bl	80002bc <__adddf3>
 8004768:	4602      	mov	r2, r0
 800476a:	460b      	mov	r3, r1
 800476c:	ec43 2b17 	vmov	d7, r2, r3
 8004770:	eeb0 0a47 	vmov.f32	s0, s14
 8004774:	eef0 0a67 	vmov.f32	s1, s15
 8004778:	f00e fd7e 	bl	8013278 <cos>
 800477c:	ec53 2b10 	vmov	r2, r3, d0
 8004780:	4650      	mov	r0, sl
 8004782:	4659      	mov	r1, fp
 8004784:	f7fb ff50 	bl	8000628 <__aeabi_dmul>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4620      	mov	r0, r4
 800478e:	4629      	mov	r1, r5
 8004790:	f7fb fd94 	bl	80002bc <__adddf3>
 8004794:	4603      	mov	r3, r0
 8004796:	460c      	mov	r4, r1
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f7fb fee7 	bl	8000578 <__aeabi_f2d>
 80047aa:	4682      	mov	sl, r0
 80047ac:	468b      	mov	fp, r1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80047ba:	f04f 0200 	mov.w	r2, #0
 80047be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047c2:	f7fc f85b 	bl	800087c <__aeabi_ddiv>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4640      	mov	r0, r8
 80047cc:	4649      	mov	r1, r9
 80047ce:	f7fb fd75 	bl	80002bc <__adddf3>
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	ec43 2b17 	vmov	d7, r2, r3
 80047da:	eeb0 0a47 	vmov.f32	s0, s14
 80047de:	eef0 0a67 	vmov.f32	s1, s15
 80047e2:	f00e fd8d 	bl	8013300 <sin>
 80047e6:	ec53 2b10 	vmov	r2, r3, d0
 80047ea:	4650      	mov	r0, sl
 80047ec:	4659      	mov	r1, fp
 80047ee:	f7fb ff1b 	bl	8000628 <__aeabi_dmul>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4620      	mov	r0, r4
 80047f8:	4629      	mov	r1, r5
 80047fa:	f7fb fd5f 	bl	80002bc <__adddf3>
 80047fe:	4603      	mov	r3, r0
 8004800:	460c      	mov	r4, r1
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8004814:	461a      	mov	r2, r3
 8004816:	4623      	mov	r3, r4
 8004818:	f7fb fd50 	bl	80002bc <__adddf3>
 800481c:	4603      	mov	r3, r0
 800481e:	460c      	mov	r4, r1
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	ed93 7b08 	vldr	d7, [r3, #32]
 8004832:	eeb0 0a47 	vmov.f32	s0, s14
 8004836:	eef0 0a67 	vmov.f32	s1, s15
 800483a:	f00e fd1d 	bl	8013278 <cos>
 800483e:	ec51 0b10 	vmov	r0, r1, d0
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	4b28      	ldr	r3, [pc, #160]	; (80048e8 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004848:	f7fb feee 	bl	8000628 <__aeabi_dmul>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4620      	mov	r0, r4
 8004852:	4629      	mov	r1, r5
 8004854:	f7fb fd32 	bl	80002bc <__adddf3>
 8004858:	4603      	mov	r3, r0
 800485a:	460c      	mov	r4, r1
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	ed93 7b08 	vldr	d7, [r3, #32]
 800486e:	eeb0 0a47 	vmov.f32	s0, s14
 8004872:	eef0 0a67 	vmov.f32	s1, s15
 8004876:	f00e fd43 	bl	8013300 <sin>
 800487a:	ec51 0b10 	vmov	r0, r1, d0
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	4b19      	ldr	r3, [pc, #100]	; (80048e8 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004884:	f7fb fed0 	bl	8000628 <__aeabi_dmul>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4620      	mov	r0, r4
 800488e:	4629      	mov	r1, r5
 8004890:	f7fb fd14 	bl	80002bc <__adddf3>
 8004894:	4603      	mov	r3, r0
 8004896:	460c      	mov	r4, r1
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80048a4:	4618      	mov	r0, r3
 80048a6:	4621      	mov	r1, r4
 80048a8:	f7fc f9b6 	bl	8000c18 <__aeabi_d2f>
 80048ac:	4602      	mov	r2, r0
 80048ae:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <_ZN8Odometry12calcPotitionEv+0x204>)
 80048b0:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80048b8:	4618      	mov	r0, r3
 80048ba:	4621      	mov	r1, r4
 80048bc:	f7fc f9ac 	bl	8000c18 <__aeabi_d2f>
 80048c0:	4602      	mov	r2, r0
 80048c2:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <_ZN8Odometry12calcPotitionEv+0x208>)
 80048c4:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80048cc:	4618      	mov	r0, r3
 80048ce:	4621      	mov	r1, r4
 80048d0:	f7fc f9a2 	bl	8000c18 <__aeabi_d2f>
 80048d4:	4602      	mov	r2, r0
 80048d6:	4b07      	ldr	r3, [pc, #28]	; (80048f4 <_ZN8Odometry12calcPotitionEv+0x20c>)
 80048d8:	601a      	str	r2, [r3, #0]
}
 80048da:	bf00      	nop
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048e4:	f3af 8000 	nop.w
 80048e8:	405b8000 	.word	0x405b8000
 80048ec:	20000294 	.word	0x20000294
 80048f0:	20000298 	.word	0x20000298
 80048f4:	2000029c 	.word	0x2000029c
 80048f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80048fc:	3f50624d 	.word	0x3f50624d

08004900 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
	calcPotition();
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7ff feed 	bl	80046e8 <_ZN8Odometry12calcPotitionEv>
}
 800490e:	bf00      	nop
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8004916:	b490      	push	{r4, r7}
 8004918:	b082      	sub	sp, #8
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
	return theta_;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004924:	ec44 3b17 	vmov	d7, r3, r4
}
 8004928:	eeb0 0a47 	vmov.f32	s0, s14
 800492c:	eef0 0a67 	vmov.f32	s1, s15
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bc90      	pop	{r4, r7}
 8004936:	4770      	bx	lr

08004938 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8004938:	b490      	push	{r4, r7}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	f04f 0400 	mov.w	r4, #0
 800494a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	f04f 0400 	mov.w	r4, #0
 8004958:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	f04f 0300 	mov.w	r3, #0
 8004962:	f04f 0400 	mov.w	r4, #0
 8004966:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 800496a:	bf00      	nop
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bc90      	pop	{r4, r7}
 8004972:	4770      	bx	lr

08004974 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8004974:	b490      	push	{r4, r7}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	f04f 0400 	mov.w	r4, #0
 800498c:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	f04f 0300 	mov.w	r3, #0
 8004996:	f04f 0400 	mov.w	r4, #0
 800499a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	f04f 0400 	mov.w	r4, #0
 80049a8:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80049b2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80049b6:	2200      	movs	r2, #0
 80049b8:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 80049ba:	4a29      	ldr	r2, [pc, #164]	; (8004a60 <_ZN13PathFollowingC1Ev+0xec>)
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	f04f 0400 	mov.w	r4, #0
 80049c4:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 80049c8:	4a25      	ldr	r2, [pc, #148]	; (8004a60 <_ZN13PathFollowingC1Ev+0xec>)
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	f04f 0400 	mov.w	r4, #0
 80049d2:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 80049d6:	4a22      	ldr	r2, [pc, #136]	; (8004a60 <_ZN13PathFollowingC1Ev+0xec>)
 80049d8:	f04f 0300 	mov.w	r3, #0
 80049dc:	f04f 0400 	mov.w	r4, #0
 80049e0:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 80049e4:	4a1f      	ldr	r2, [pc, #124]	; (8004a64 <_ZN13PathFollowingC1Ev+0xf0>)
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	f04f 0400 	mov.w	r4, #0
 80049ee:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 80049f2:	4a1c      	ldr	r2, [pc, #112]	; (8004a64 <_ZN13PathFollowingC1Ev+0xf0>)
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	f04f 0400 	mov.w	r4, #0
 80049fc:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8004a00:	4a18      	ldr	r2, [pc, #96]	; (8004a64 <_ZN13PathFollowingC1Ev+0xf0>)
 8004a02:	f04f 0300 	mov.w	r3, #0
 8004a06:	f04f 0400 	mov.w	r4, #0
 8004a0a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8004a0e:	4a15      	ldr	r2, [pc, #84]	; (8004a64 <_ZN13PathFollowingC1Ev+0xf0>)
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	f04f 0400 	mov.w	r4, #0
 8004a18:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8004a1c:	4a11      	ldr	r2, [pc, #68]	; (8004a64 <_ZN13PathFollowingC1Ev+0xf0>)
 8004a1e:	f04f 0300 	mov.w	r3, #0
 8004a22:	f04f 0400 	mov.w	r4, #0
 8004a26:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8004a2a:	4a0e      	ldr	r2, [pc, #56]	; (8004a64 <_ZN13PathFollowingC1Ev+0xf0>)
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	f04f 0400 	mov.w	r4, #0
 8004a34:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8004a38:	4a0b      	ldr	r2, [pc, #44]	; (8004a68 <_ZN13PathFollowingC1Ev+0xf4>)
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	f04f 0400 	mov.w	r4, #0
 8004a42:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8004a46:	4a08      	ldr	r2, [pc, #32]	; (8004a68 <_ZN13PathFollowingC1Ev+0xf4>)
 8004a48:	f04f 0300 	mov.w	r3, #0
 8004a4c:	f04f 0400 	mov.w	r4, #0
 8004a50:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4618      	mov	r0, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc90      	pop	{r4, r7}
 8004a5e:	4770      	bx	lr
 8004a60:	2003edc0 	.word	0x2003edc0
 8004a64:	2003ed50 	.word	0x2003ed50
 8004a68:	2003edb0 	.word	0x2003edb0

08004a6c <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8004a74:	f001 fc92 	bl	800639c <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8004a78:	f107 0318 	add.w	r3, r7, #24
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	4915      	ldr	r1, [pc, #84]	; (8004ad4 <_ZN13PathFollowing4initEv+0x68>)
 8004a80:	4815      	ldr	r0, [pc, #84]	; (8004ad8 <_ZN13PathFollowing4initEv+0x6c>)
 8004a82:	f7fc fe6b 	bl	800175c <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8004a86:	f107 0310 	add.w	r3, r7, #16
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	4913      	ldr	r1, [pc, #76]	; (8004adc <_ZN13PathFollowing4initEv+0x70>)
 8004a8e:	4812      	ldr	r0, [pc, #72]	; (8004ad8 <_ZN13PathFollowing4initEv+0x6c>)
 8004a90:	f7fc fe64 	bl	800175c <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8004a94:	f107 0308 	add.w	r3, r7, #8
 8004a98:	2201      	movs	r2, #1
 8004a9a:	4911      	ldr	r1, [pc, #68]	; (8004ae0 <_ZN13PathFollowing4initEv+0x74>)
 8004a9c:	480e      	ldr	r0, [pc, #56]	; (8004ad8 <_ZN13PathFollowing4initEv+0x6c>)
 8004a9e:	f7fc fe5d 	bl	800175c <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8004aa2:	ed97 7b06 	vldr	d7, [r7, #24]
 8004aa6:	ed97 6b04 	vldr	d6, [r7, #16]
 8004aaa:	ed97 5b02 	vldr	d5, [r7, #8]
 8004aae:	eeb0 2a45 	vmov.f32	s4, s10
 8004ab2:	eef0 2a65 	vmov.f32	s5, s11
 8004ab6:	eeb0 1a46 	vmov.f32	s2, s12
 8004aba:	eef0 1a66 	vmov.f32	s3, s13
 8004abe:	eeb0 0a47 	vmov.f32	s0, s14
 8004ac2:	eef0 0a67 	vmov.f32	s1, s15
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f80c 	bl	8004ae4 <_ZN13PathFollowing7setGainEddd>
}
 8004acc:	bf00      	nop
 8004ace:	3720      	adds	r7, #32
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	080188b4 	.word	0x080188b4
 8004ad8:	080188bc 	.word	0x080188bc
 8004adc:	080188c4 	.word	0x080188c4
 8004ae0:	080188cc 	.word	0x080188cc

08004ae4 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8004ae4:	b490      	push	{r4, r7}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	61f8      	str	r0, [r7, #28]
 8004aec:	ed87 0b04 	vstr	d0, [r7, #16]
 8004af0:	ed87 1b02 	vstr	d1, [r7, #8]
 8004af4:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8004af8:	4a09      	ldr	r2, [pc, #36]	; (8004b20 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004afa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004afe:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8004b02:	4a07      	ldr	r2, [pc, #28]	; (8004b20 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004b04:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004b08:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8004b0c:	4a04      	ldr	r2, [pc, #16]	; (8004b20 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004b0e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004b12:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8004b16:	bf00      	nop
 8004b18:	3720      	adds	r7, #32
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bc90      	pop	{r4, r7}
 8004b1e:	4770      	bx	lr
 8004b20:	2003edc0 	.word	0x2003edc0

08004b24 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8004b2c:	2088      	movs	r0, #136	; 0x88
 8004b2e:	f7fd f966 	bl	8001dfe <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8004b32:	2080      	movs	r0, #128	; 0x80
 8004b34:	f7fd f963 	bl	8001dfe <INA260_init>
}
 8004b38:	bf00      	nop
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8004b40:	b590      	push	{r4, r7, lr}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8004b48:	2188      	movs	r1, #136	; 0x88
 8004b4a:	2002      	movs	r0, #2
 8004b4c:	f7fd f8f4 	bl	8001d38 <INA260_read>
 8004b50:	4603      	mov	r3, r0
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fb fcfe 	bl	8000554 <__aeabi_i2d>
 8004b58:	a30c      	add	r3, pc, #48	; (adr r3, 8004b8c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8004b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5e:	f7fb fd63 	bl	8000628 <__aeabi_dmul>
 8004b62:	4603      	mov	r3, r0
 8004b64:	460c      	mov	r4, r1
 8004b66:	4618      	mov	r0, r3
 8004b68:	4621      	mov	r1, r4
 8004b6a:	f7fc f855 	bl	8000c18 <__aeabi_d2f>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	4a03      	ldr	r2, [pc, #12]	; (8004b88 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8004b7a:	6013      	str	r3, [r2, #0]
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd90      	pop	{r4, r7, pc}
 8004b84:	f3af 8000 	nop.w
 8004b88:	200002a0 	.word	0x200002a0
 8004b8c:	47ae147b 	.word	0x47ae147b
 8004b90:	3f547ae1 	.word	0x3f547ae1

08004b94 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	ee07 3a90 	vmov	s15, r3

}
 8004ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
	...

08004bb4 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8004bc0:	2102      	movs	r1, #2
 8004bc2:	4822      	ldr	r0, [pc, #136]	; (8004c4c <_ZN12RotarySwitch8getValueEv+0x98>)
 8004bc4:	f005 f8e0 	bl	8009d88 <HAL_GPIO_ReadPin>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	bf0c      	ite	eq
 8004bce:	2301      	moveq	r3, #1
 8004bd0:	2300      	movne	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <_ZN12RotarySwitch8getValueEv+0x2c>
 8004bd8:	89fb      	ldrh	r3, [r7, #14]
 8004bda:	f043 0301 	orr.w	r3, r3, #1
 8004bde:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8004be0:	2108      	movs	r1, #8
 8004be2:	481a      	ldr	r0, [pc, #104]	; (8004c4c <_ZN12RotarySwitch8getValueEv+0x98>)
 8004be4:	f005 f8d0 	bl	8009d88 <HAL_GPIO_ReadPin>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	bf0c      	ite	eq
 8004bee:	2301      	moveq	r3, #1
 8004bf0:	2300      	movne	r3, #0
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <_ZN12RotarySwitch8getValueEv+0x4c>
 8004bf8:	89fb      	ldrh	r3, [r7, #14]
 8004bfa:	f043 0302 	orr.w	r3, r3, #2
 8004bfe:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8004c00:	2110      	movs	r1, #16
 8004c02:	4812      	ldr	r0, [pc, #72]	; (8004c4c <_ZN12RotarySwitch8getValueEv+0x98>)
 8004c04:	f005 f8c0 	bl	8009d88 <HAL_GPIO_ReadPin>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	bf0c      	ite	eq
 8004c0e:	2301      	moveq	r3, #1
 8004c10:	2300      	movne	r3, #0
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <_ZN12RotarySwitch8getValueEv+0x6c>
 8004c18:	89fb      	ldrh	r3, [r7, #14]
 8004c1a:	f043 0304 	orr.w	r3, r3, #4
 8004c1e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8004c20:	2180      	movs	r1, #128	; 0x80
 8004c22:	480a      	ldr	r0, [pc, #40]	; (8004c4c <_ZN12RotarySwitch8getValueEv+0x98>)
 8004c24:	f005 f8b0 	bl	8009d88 <HAL_GPIO_ReadPin>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	bf0c      	ite	eq
 8004c2e:	2301      	moveq	r3, #1
 8004c30:	2300      	movne	r3, #0
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <_ZN12RotarySwitch8getValueEv+0x8c>
 8004c38:	89fb      	ldrh	r3, [r7, #14]
 8004c3a:	f043 0308 	orr.w	r3, r3, #8
 8004c3e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8004c40:	89fb      	ldrh	r3, [r7, #14]

}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40020c00 	.word	0x40020c00

08004c50 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	801a      	strh	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	805a      	strh	r2, [r3, #2]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	809a      	strh	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	719a      	strb	r2, [r3, #6]
{

}
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4618      	mov	r0, r3
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
	...

08004c80 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	799b      	ldrb	r3, [r3, #6]
 8004c8c:	f083 0301 	eor.w	r3, r3, #1
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 80c7 	beq.w	8004e26 <_ZN10SideSensor12updateStatusEv+0x1a6>

		if(white_flag1 == false){
 8004c98:	4b65      	ldr	r3, [pc, #404]	; (8004e30 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	f083 0301 	eor.w	r3, r3, #1
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d027      	beq.n	8004cf6 <_ZN10SideSensor12updateStatusEv+0x76>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8004ca6:	2104      	movs	r1, #4
 8004ca8:	4862      	ldr	r0, [pc, #392]	; (8004e34 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8004caa:	f005 f86d 	bl	8009d88 <HAL_GPIO_ReadPin>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	bf0c      	ite	eq
 8004cb4:	2301      	moveq	r3, #1
 8004cb6:	2300      	movne	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d006      	beq.n	8004ccc <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 8004cbe:	4b5e      	ldr	r3, [pc, #376]	; (8004e38 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	4b5c      	ldr	r3, [pc, #368]	; (8004e38 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004cc8:	801a      	strh	r2, [r3, #0]
 8004cca:	e002      	b.n	8004cd2 <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 8004ccc:	4b5a      	ldr	r3, [pc, #360]	; (8004e38 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004cd2:	4b59      	ldr	r3, [pc, #356]	; (8004e38 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d93f      	bls.n	8004d5a <_ZN10SideSensor12updateStatusEv+0xda>
				status_ |= 0x01;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	f043 0301 	orr.w	r3, r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 8004ce8:	4b51      	ldr	r3, [pc, #324]	; (8004e30 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004cea:	2201      	movs	r2, #1
 8004cec:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8004cee:	4b52      	ldr	r3, [pc, #328]	; (8004e38 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	801a      	strh	r2, [r3, #0]
 8004cf4:	e031      	b.n	8004d5a <_ZN10SideSensor12updateStatusEv+0xda>
			}

		}
		else if(white_flag1 == true){
 8004cf6:	4b4e      	ldr	r3, [pc, #312]	; (8004e30 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d02d      	beq.n	8004d5a <_ZN10SideSensor12updateStatusEv+0xda>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8004cfe:	2104      	movs	r1, #4
 8004d00:	484c      	ldr	r0, [pc, #304]	; (8004e34 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8004d02:	f005 f841 	bl	8009d88 <HAL_GPIO_ReadPin>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	bf14      	ite	ne
 8004d0c:	2301      	movne	r3, #1
 8004d0e:	2300      	moveq	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d006      	beq.n	8004d24 <_ZN10SideSensor12updateStatusEv+0xa4>
				cnt_r++;
 8004d16:	4b48      	ldr	r3, [pc, #288]	; (8004e38 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	4b46      	ldr	r3, [pc, #280]	; (8004e38 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004d20:	801a      	strh	r2, [r3, #0]
 8004d22:	e002      	b.n	8004d2a <_ZN10SideSensor12updateStatusEv+0xaa>
			}
			else{
				cnt_r = 0;
 8004d24:	4b44      	ldr	r3, [pc, #272]	; (8004e38 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004d2a:	4b43      	ldr	r3, [pc, #268]	; (8004e38 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d913      	bls.n	8004d5a <_ZN10SideSensor12updateStatusEv+0xda>
				status_ ^= 0x01;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	f083 0301 	eor.w	r3, r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 8004d40:	4b3b      	ldr	r3, [pc, #236]	; (8004e30 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	889b      	ldrh	r3, [r3, #4]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	889a      	ldrh	r2, [r3, #4]
 8004d56:	4b39      	ldr	r3, [pc, #228]	; (8004e3c <_ZN10SideSensor12updateStatusEv+0x1bc>)
 8004d58:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 8004d5a:	4b39      	ldr	r3, [pc, #228]	; (8004e40 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	f083 0301 	eor.w	r3, r3, #1
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d027      	beq.n	8004db8 <_ZN10SideSensor12updateStatusEv+0x138>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8004d68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d6c:	4835      	ldr	r0, [pc, #212]	; (8004e44 <_ZN10SideSensor12updateStatusEv+0x1c4>)
 8004d6e:	f005 f80b 	bl	8009d88 <HAL_GPIO_ReadPin>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	bf0c      	ite	eq
 8004d78:	2301      	moveq	r3, #1
 8004d7a:	2300      	movne	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d006      	beq.n	8004d90 <_ZN10SideSensor12updateStatusEv+0x110>
				cnt_l++;
 8004d82:	4b31      	ldr	r3, [pc, #196]	; (8004e48 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	3301      	adds	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	4b2f      	ldr	r3, [pc, #188]	; (8004e48 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004d8c:	801a      	strh	r2, [r3, #0]
 8004d8e:	e002      	b.n	8004d96 <_ZN10SideSensor12updateStatusEv+0x116>
			}
			else{
				cnt_l = 0;
 8004d90:	4b2d      	ldr	r3, [pc, #180]	; (8004e48 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8004d96:	4b2c      	ldr	r3, [pc, #176]	; (8004e48 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d90c      	bls.n	8004db8 <_ZN10SideSensor12updateStatusEv+0x138>
				status_ |= 0x02;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	f043 0302 	orr.w	r3, r3, #2
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 8004dac:	4b24      	ldr	r3, [pc, #144]	; (8004e40 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004dae:	2201      	movs	r2, #1
 8004db0:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 8004db2:	4b25      	ldr	r3, [pc, #148]	; (8004e48 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8004db8:	4b21      	ldr	r3, [pc, #132]	; (8004e40 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d02e      	beq.n	8004e1e <_ZN10SideSensor12updateStatusEv+0x19e>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8004dc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004dc4:	481f      	ldr	r0, [pc, #124]	; (8004e44 <_ZN10SideSensor12updateStatusEv+0x1c4>)
 8004dc6:	f004 ffdf 	bl	8009d88 <HAL_GPIO_ReadPin>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	bf14      	ite	ne
 8004dd0:	2301      	movne	r3, #1
 8004dd2:	2300      	moveq	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d006      	beq.n	8004de8 <_ZN10SideSensor12updateStatusEv+0x168>
				cnt_l++;
 8004dda:	4b1b      	ldr	r3, [pc, #108]	; (8004e48 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	3301      	adds	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	4b19      	ldr	r3, [pc, #100]	; (8004e48 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004de4:	801a      	strh	r2, [r3, #0]
 8004de6:	e002      	b.n	8004dee <_ZN10SideSensor12updateStatusEv+0x16e>
			}
			else{
				cnt_l = 0;
 8004de8:	4b17      	ldr	r3, [pc, #92]	; (8004e48 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8004dee:	4b16      	ldr	r3, [pc, #88]	; (8004e48 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	d913      	bls.n	8004e1e <_ZN10SideSensor12updateStatusEv+0x19e>
				status_ ^= 0x02;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	f083 0302 	eor.w	r3, r3, #2
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 8004e04:	4b0e      	ldr	r3, [pc, #56]	; (8004e40 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	885b      	ldrh	r3, [r3, #2]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	885a      	ldrh	r2, [r3, #2]
 8004e1a:	4b0c      	ldr	r3, [pc, #48]	; (8004e4c <_ZN10SideSensor12updateStatusEv+0x1cc>)
 8004e1c:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	881a      	ldrh	r2, [r3, #0]
 8004e22:	4b0b      	ldr	r3, [pc, #44]	; (8004e50 <_ZN10SideSensor12updateStatusEv+0x1d0>)
 8004e24:	801a      	strh	r2, [r3, #0]
	}

}
 8004e26:	bf00      	nop
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	200002aa 	.word	0x200002aa
 8004e34:	40021000 	.word	0x40021000
 8004e38:	200002ae 	.word	0x200002ae
 8004e3c:	200002a8 	.word	0x200002a8
 8004e40:	200002ab 	.word	0x200002ab
 8004e44:	40020c00 	.word	0x40020c00
 8004e48:	200002ac 	.word	0x200002ac
 8004e4c:	200002a6 	.word	0x200002a6
 8004e50:	200002a4 	.word	0x200002a4

08004e54 <_ZN10SideSensor9getStatusEv>:
uint16_t SideSensor::getStatus()
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
	return status_;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	881b      	ldrh	r3, [r3, #0]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	889b      	ldrh	r3, [r3, #4]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	809a      	strh	r2, [r3, #4]
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	719a      	strb	r2, [r3, #6]
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	719a      	strb	r2, [r3, #6]
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	799b      	ldrb	r3, [r3, #6]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4a10      	ldr	r2, [pc, #64]	; (8004f40 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 8004f00:	3308      	adds	r3, #8
 8004f02:	4611      	mov	r1, r2
 8004f04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f00f fa35 	bl	8014378 <memcpy>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	080188f0 	.word	0x080188f0

08004f44 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d010      	beq.n	8004f7c <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	ed97 0a00 	vldr	s0, [r7]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff f86c 	bl	8004040 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8004f72:	eeb0 0a67 	vmov.f32	s0, s15
 8004f76:	4610      	mov	r0, r2
 8004f78:	f7ff f89e 	bl	80040b8 <_ZN6Logger9storeLog2Ef>
	}

}
 8004f7c:	bf00      	nop
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a07      	ldr	r2, [pc, #28]	; (8004fb0 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 8004f92:	4908      	ldr	r1, [pc, #32]	; (8004fb4 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff f976 	bl	8004286 <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a06      	ldr	r2, [pc, #24]	; (8004fb8 <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 8004fa0:	4904      	ldr	r1, [pc, #16]	; (8004fb4 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7ff f982 	bl	80042ac <_ZN6Logger9saveLogs2EPKcS1_>
}
 8004fa8:	bf00      	nop
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	08018ae4 	.word	0x08018ae4
 8004fb4:	08018af0 	.word	0x08018af0
 8004fb8:	08018afc 	.word	0x08018afc

08004fbc <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 8004fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d046      	beq.n	800505c <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8004fda:	461a      	mov	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3204      	adds	r2, #4
 8004fe0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004fe4:	ee07 3a90 	vmov	s15, r3
 8004fe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800500c:	4a15      	ldr	r2, [pc, #84]	; (8005064 <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 800500e:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005016:	2bf9      	cmp	r3, #249	; 0xf9
 8005018:	d903      	bls.n	8005022 <_ZN20SystemIdentification10updateMsigEv+0x66>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	22fa      	movs	r2, #250	; 0xfa
 800501e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685c      	ldr	r4, [r3, #4]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800502c:	4618      	mov	r0, r3
 800502e:	f7fb faa3 	bl	8000578 <__aeabi_f2d>
 8005032:	4605      	mov	r5, r0
 8005034:	460e      	mov	r6, r1
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 800503c:	eef1 7a67 	vneg.f32	s15, s15
 8005040:	ee17 3a90 	vmov	r3, s15
 8005044:	4618      	mov	r0, r3
 8005046:	f7fb fa97 	bl	8000578 <__aeabi_f2d>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	ec43 2b11 	vmov	d1, r2, r3
 8005052:	ec46 5b10 	vmov	d0, r5, r6
 8005056:	4620      	mov	r0, r4
 8005058:	f7ff fa9a 	bl	8004590 <_ZN5Motor8setRatioEdd>

	}

}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005064:	200002b0 	.word	0x200002b0

08005068 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4618      	mov	r0, r3
 8005096:	f7ff f9e6 	bl	8004466 <_ZN6Logger5startEv>
	processing_flag_ = true;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 80050a2:	bf00      	nop
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	0000      	movs	r0, r0
 80050ac:	0000      	movs	r0, r0
	...

080050b0 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
	logger_->stop();
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff f9e3 	bl	8004488 <_ZN6Logger4stopEv>
	processing_flag_ = false;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80050f0 <_ZN20SystemIdentification4stopEv+0x40>
 80050da:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80050f0 <_ZN20SystemIdentification4stopEv+0x40>
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff fa56 	bl	8004590 <_ZN5Motor8setRatioEdd>
}
 80050e4:	bf00      	nop
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	f3af 8000 	nop.w
	...

080050f8 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	605a      	str	r2, [r3, #4]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f04f 0200 	mov.w	r2, #0
 800511c:	609a      	str	r2, [r3, #8]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	60da      	str	r2, [r3, #12]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f04f 0200 	mov.w	r2, #0
 800512c:	611a      	str	r2, [r3, #16]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	615a      	str	r2, [r3, #20]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	619a      	str	r2, [r3, #24]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f04f 0200 	mov.w	r2, #0
 8005144:	61da      	str	r2, [r3, #28]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f04f 0200 	mov.w	r2, #0
 800514c:	621a      	str	r2, [r3, #32]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f04f 0200 	mov.w	r2, #0
 8005154:	625a      	str	r2, [r3, #36]	; 0x24
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
	...

08005190 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005190:	b590      	push	{r4, r7, lr}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519c:	f107 020c 	add.w	r2, r7, #12
 80051a0:	f107 0110 	add.w	r1, r7, #16
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fc f92f 	bl	8001408 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 80051aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80051ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80051b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80051b6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80051ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051be:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 80051c2:	6978      	ldr	r0, [r7, #20]
 80051c4:	f7fb f9d8 	bl	8000578 <__aeabi_f2d>
 80051c8:	a30b      	add	r3, pc, #44	; (adr r3, 80051f8 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 80051ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ce:	f7fb fa2b 	bl	8000628 <__aeabi_dmul>
 80051d2:	4603      	mov	r3, r0
 80051d4:	460c      	mov	r4, r1
 80051d6:	4618      	mov	r0, r3
 80051d8:	4621      	mov	r1, r4
 80051da:	f7fb fd1d 	bl	8000c18 <__aeabi_d2f>
 80051de:	4602      	mov	r2, r0
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	ee07 3a90 	vmov	s15, r3
}
 80051ec:	eeb0 0a67 	vmov.f32	s0, s15
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd90      	pop	{r4, r7, pc}
 80051f6:	bf00      	nop
 80051f8:	1ab1d998 	.word	0x1ab1d998
 80051fc:	3f7830b5 	.word	0x3f7830b5

08005200 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	ed93 7a00 	vldr	s14, [r3]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	edd3 7a02 	vldr	s15, [r3, #8]
 8005214:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005218:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005222:	2b00      	cmp	r3, #0
 8005224:	d007      	beq.n	8005236 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005226:	4b48      	ldr	r3, [pc, #288]	; (8005348 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	edd3 7a04 	vldr	s15, [r3, #16]
 800523c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005244:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005248:	4b3f      	ldr	r3, [pc, #252]	; (8005348 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4618      	mov	r0, r3
 800524e:	f7fb f993 	bl	8000578 <__aeabi_f2d>
 8005252:	4604      	mov	r4, r0
 8005254:	460d      	mov	r5, r1
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	ed93 7a06 	vldr	s14, [r3, #24]
 800525c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005264:	ee17 0a90 	vmov	r0, s15
 8005268:	f7fb f986 	bl	8000578 <__aeabi_f2d>
 800526c:	a334      	add	r3, pc, #208	; (adr r3, 8005340 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 800526e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005272:	f7fb f9d9 	bl	8000628 <__aeabi_dmul>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	4620      	mov	r0, r4
 800527c:	4629      	mov	r1, r5
 800527e:	f7fb f81d 	bl	80002bc <__adddf3>
 8005282:	4603      	mov	r3, r0
 8005284:	460c      	mov	r4, r1
 8005286:	4618      	mov	r0, r3
 8005288:	4621      	mov	r1, r4
 800528a:	f7fb fcc5 	bl	8000c18 <__aeabi_d2f>
 800528e:	4602      	mov	r2, r0
 8005290:	4b2d      	ldr	r3, [pc, #180]	; (8005348 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005292:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	ed93 7a05 	vldr	s14, [r3, #20]
 800529a:	4b2c      	ldr	r3, [pc, #176]	; (800534c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 800529c:	edd3 7a00 	vldr	s15, [r3]
 80052a0:	edd7 6a05 	vldr	s13, [r7, #20]
 80052a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80052a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ac:	ee17 0a90 	vmov	r0, s15
 80052b0:	f7fb f962 	bl	8000578 <__aeabi_f2d>
 80052b4:	a322      	add	r3, pc, #136	; (adr r3, 8005340 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 80052b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ba:	f7fb fadf 	bl	800087c <__aeabi_ddiv>
 80052be:	4603      	mov	r3, r0
 80052c0:	460c      	mov	r4, r1
 80052c2:	4618      	mov	r0, r3
 80052c4:	4621      	mov	r1, r4
 80052c6:	f7fb fca7 	bl	8000c18 <__aeabi_d2f>
 80052ca:	4603      	mov	r3, r0
 80052cc:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 80052ce:	ed97 7a04 	vldr	s14, [r7, #16]
 80052d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80052d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052da:	4b1b      	ldr	r3, [pc, #108]	; (8005348 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80052dc:	edd3 7a00 	vldr	s15, [r3]
 80052e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052e4:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80052f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80052f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052fa:	ee17 0a90 	vmov	r0, s15
 80052fe:	f7fb f93b 	bl	8000578 <__aeabi_f2d>
 8005302:	4605      	mov	r5, r0
 8005304:	460e      	mov	r6, r1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800530c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005310:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005314:	ee17 0a90 	vmov	r0, s15
 8005318:	f7fb f92e 	bl	8000578 <__aeabi_f2d>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	ec43 2b11 	vmov	d1, r2, r3
 8005324:	ec46 5b10 	vmov	d0, r5, r6
 8005328:	4620      	mov	r0, r4
 800532a:	f7ff f931 	bl	8004590 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 800532e:	4a07      	ldr	r2, [pc, #28]	; (800534c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	6013      	str	r3, [r2, #0]
}
 8005334:	bf00      	nop
 8005336:	371c      	adds	r7, #28
 8005338:	46bd      	mov	sp, r7
 800533a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800533c:	f3af 8000 	nop.w
 8005340:	d2f1a9fc 	.word	0xd2f1a9fc
 8005344:	3f50624d 	.word	0x3f50624d
 8005348:	200002b8 	.word	0x200002b8
 800534c:	200002b4 	.word	0x200002b4

08005350 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	ed87 0a02 	vstr	s0, [r7, #8]
 800535c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	605a      	str	r2, [r3, #4]
}
 800536c:	bf00      	nop
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	ed87 0a02 	vstr	s0, [r7, #8]
 8005384:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005394:	bf00      	nop
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80053ac:	edc7 0a01 	vstr	s1, [r7, #4]
 80053b0:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	615a      	str	r2, [r3, #20]
}
 80053c6:	bf00      	nop
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b085      	sub	sp, #20
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	ed87 0a02 	vstr	s0, [r7, #8]
 80053de:	edc7 0a01 	vstr	s1, [r7, #4]
 80053e2:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	621a      	str	r2, [r3, #32]
}
 80053f8:	bf00      	nop
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
    calcVelocity();
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff febf 	bl	8005190 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7ff feef 	bl	8005200 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005422:	bf00      	nop
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
	...

08005450 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005464:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005480 <_ZN12VelocityCtrl4stopEv+0x30>
 8005468:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005480 <_ZN12VelocityCtrl4stopEv+0x30>
 800546c:	4618      	mov	r0, r3
 800546e:	f7ff f88f 	bl	8004590 <_ZN5Motor8setRatioEdd>

}
 8005472:	bf00      	nop
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	f3af 8000 	nop.w
	...

08005488 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	ee07 3a90 	vmov	s15, r3
}
 8005498:	eeb0 0a67 	vmov.f32	s0, s15
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
	...

080054a8 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a1e      	ldr	r2, [pc, #120]	; (8005530 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d10e      	bne.n	80054d8 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 80054ba:	f001 fe27 	bl	800710c <cppFlip100ns>

		tim7_timer++;
 80054be:	4b1d      	ldr	r3, [pc, #116]	; (8005534 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3301      	adds	r3, #1
 80054c4:	4a1b      	ldr	r2, [pc, #108]	; (8005534 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80054c6:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 80054c8:	4b1a      	ldr	r3, [pc, #104]	; (8005534 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a1a      	ldr	r2, [pc, #104]	; (8005538 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d902      	bls.n	80054d8 <HAL_TIM_PeriodElapsedCallback+0x30>
 80054d2:	4b18      	ldr	r3, [pc, #96]	; (8005534 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a17      	ldr	r2, [pc, #92]	; (800553c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d10e      	bne.n	8005500 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 80054e2:	f001 fdc9 	bl	8007078 <cppFlip1ms>

		tim6_timer++;
 80054e6:	4b16      	ldr	r3, [pc, #88]	; (8005540 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3301      	adds	r3, #1
 80054ec:	4a14      	ldr	r2, [pc, #80]	; (8005540 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80054ee:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 80054f0:	4b13      	ldr	r3, [pc, #76]	; (8005540 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a10      	ldr	r2, [pc, #64]	; (8005538 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d902      	bls.n	8005500 <HAL_TIM_PeriodElapsedCallback+0x58>
 80054fa:	4b11      	ldr	r3, [pc, #68]	; (8005540 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a0f      	ldr	r2, [pc, #60]	; (8005544 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d10e      	bne.n	8005528 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 800550a:	f001 fe09 	bl	8007120 <cppFlip10ms>

		tim13_timer++;
 800550e:	4b0e      	ldr	r3, [pc, #56]	; (8005548 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3301      	adds	r3, #1
 8005514:	4a0c      	ldr	r2, [pc, #48]	; (8005548 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005516:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005518:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a06      	ldr	r2, [pc, #24]	; (8005538 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d902      	bls.n	8005528 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005522:	4b09      	ldr	r3, [pc, #36]	; (8005548 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]
	}

}
 8005528:	bf00      	nop
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	40001400 	.word	0x40001400
 8005534:	2003ea70 	.word	0x2003ea70
 8005538:	0001869f 	.word	0x0001869f
 800553c:	40001000 	.word	0x40001000
 8005540:	2003ea2c 	.word	0x2003ea2c
 8005544:	40001c00 	.word	0x40001c00
 8005548:	2003ea74 	.word	0x2003ea74

0800554c <init>:

void init()
{
 800554c:	b580      	push	{r7, lr}
 800554e:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005550:	2201      	movs	r2, #1
 8005552:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005556:	4808      	ldr	r0, [pc, #32]	; (8005578 <init+0x2c>)
 8005558:	f004 fc2e 	bl	8009db8 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 800555c:	4807      	ldr	r0, [pc, #28]	; (800557c <init+0x30>)
 800555e:	f008 faf6 	bl	800db4e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005562:	4807      	ldr	r0, [pc, #28]	; (8005580 <init+0x34>)
 8005564:	f008 faf3 	bl	800db4e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005568:	4806      	ldr	r0, [pc, #24]	; (8005584 <init+0x38>)
 800556a:	f008 faf0 	bl	800db4e <HAL_TIM_Base_Start_IT>

	cppInit();
 800556e:	f001 fce3 	bl	8006f38 <cppInit>

	//path_following_initialize();

}
 8005572:	bf00      	nop
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40021000 	.word	0x40021000
 800557c:	2003eb58 	.word	0x2003eb58
 8005580:	2003ecfc 	.word	0x2003ecfc
 8005584:	2003ea78 	.word	0x2003ea78

08005588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800558c:	f003 f90c 	bl	80087a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005590:	f000 f82a 	bl	80055e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005594:	f000 fdbc 	bl	8006110 <MX_GPIO_Init>
  MX_DMA_Init();
 8005598:	f000 fd8a 	bl	80060b0 <MX_DMA_Init>
  MX_I2C2_Init();
 800559c:	f000 f9e8 	bl	8005970 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 80055a0:	f000 fa14 	bl	80059cc <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 80055a4:	f000 fa32 	bl	8005a0c <MX_SPI2_Init>
  MX_TIM1_Init();
 80055a8:	f000 fa66 	bl	8005a78 <MX_TIM1_Init>
  MX_TIM4_Init();
 80055ac:	f000 fb70 	bl	8005c90 <MX_TIM4_Init>
  MX_TIM8_Init();
 80055b0:	f000 fc3c 	bl	8005e2c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80055b4:	f000 fd52 	bl	800605c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80055b8:	f00a fa9c 	bl	800faf4 <MX_FATFS_Init>
  MX_TIM6_Init();
 80055bc:	f000 fbcc 	bl	8005d58 <MX_TIM6_Init>
  MX_I2C1_Init();
 80055c0:	f000 f9a8 	bl	8005914 <MX_I2C1_Init>
  MX_TIM3_Init();
 80055c4:	f000 fb00 	bl	8005bc8 <MX_TIM3_Init>
  MX_TIM10_Init();
 80055c8:	f000 fc88 	bl	8005edc <MX_TIM10_Init>
  MX_TIM11_Init();
 80055cc:	f000 fcd4 	bl	8005f78 <MX_TIM11_Init>
  MX_ADC2_Init();
 80055d0:	f000 f898 	bl	8005704 <MX_ADC2_Init>
  MX_TIM7_Init();
 80055d4:	f000 fbf6 	bl	8005dc4 <MX_TIM7_Init>
  MX_TIM13_Init();
 80055d8:	f000 fd1c 	bl	8006014 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 80055dc:	f7ff ffb6 	bl	800554c <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 80055e0:	f001 fdb6 	bl	8007150 <cppLoop>
 80055e4:	e7fc      	b.n	80055e0 <main+0x58>
	...

080055e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b0a4      	sub	sp, #144	; 0x90
 80055ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80055ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80055f2:	2234      	movs	r2, #52	; 0x34
 80055f4:	2100      	movs	r1, #0
 80055f6:	4618      	mov	r0, r3
 80055f8:	f00e fec9 	bl	801438e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80055fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	605a      	str	r2, [r3, #4]
 8005606:	609a      	str	r2, [r3, #8]
 8005608:	60da      	str	r2, [r3, #12]
 800560a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800560c:	f107 030c 	add.w	r3, r7, #12
 8005610:	223c      	movs	r2, #60	; 0x3c
 8005612:	2100      	movs	r1, #0
 8005614:	4618      	mov	r0, r3
 8005616:	f00e feba 	bl	801438e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800561a:	2300      	movs	r3, #0
 800561c:	60bb      	str	r3, [r7, #8]
 800561e:	4b37      	ldr	r3, [pc, #220]	; (80056fc <SystemClock_Config+0x114>)
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	4a36      	ldr	r2, [pc, #216]	; (80056fc <SystemClock_Config+0x114>)
 8005624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005628:	6413      	str	r3, [r2, #64]	; 0x40
 800562a:	4b34      	ldr	r3, [pc, #208]	; (80056fc <SystemClock_Config+0x114>)
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005632:	60bb      	str	r3, [r7, #8]
 8005634:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005636:	2300      	movs	r3, #0
 8005638:	607b      	str	r3, [r7, #4]
 800563a:	4b31      	ldr	r3, [pc, #196]	; (8005700 <SystemClock_Config+0x118>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a30      	ldr	r2, [pc, #192]	; (8005700 <SystemClock_Config+0x118>)
 8005640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	4b2e      	ldr	r3, [pc, #184]	; (8005700 <SystemClock_Config+0x118>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800564e:	607b      	str	r3, [r7, #4]
 8005650:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005652:	2301      	movs	r3, #1
 8005654:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800565a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800565c:	2302      	movs	r3, #2
 800565e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005660:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005664:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005666:	2308      	movs	r3, #8
 8005668:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800566a:	23b4      	movs	r3, #180	; 0xb4
 800566c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005670:	2302      	movs	r3, #2
 8005672:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005676:	2308      	movs	r3, #8
 8005678:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 800567c:	2302      	movs	r3, #2
 800567e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005682:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005686:	4618      	mov	r0, r3
 8005688:	f005 ffb8 	bl	800b5fc <HAL_RCC_OscConfig>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005692:	f000 fe7f 	bl	8006394 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005696:	f005 fb33 	bl	800ad00 <HAL_PWREx_EnableOverDrive>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80056a0:	f000 fe78 	bl	8006394 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80056a4:	230f      	movs	r3, #15
 80056a6:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80056a8:	2302      	movs	r3, #2
 80056aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80056ac:	2300      	movs	r3, #0
 80056ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80056b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80056b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80056b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056ba:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80056bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80056c0:	2105      	movs	r1, #5
 80056c2:	4618      	mov	r0, r3
 80056c4:	f005 fb6c 	bl	800ada0 <HAL_RCC_ClockConfig>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80056ce:	f000 fe61 	bl	8006394 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80056d2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80056d6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80056d8:	2300      	movs	r3, #0
 80056da:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80056dc:	2300      	movs	r3, #0
 80056de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80056e0:	f107 030c 	add.w	r3, r7, #12
 80056e4:	4618      	mov	r0, r3
 80056e6:	f005 fd4b 	bl	800b180 <HAL_RCCEx_PeriphCLKConfig>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80056f0:	f000 fe50 	bl	8006394 <Error_Handler>
  }
}
 80056f4:	bf00      	nop
 80056f6:	3790      	adds	r7, #144	; 0x90
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	40023800 	.word	0x40023800
 8005700:	40007000 	.word	0x40007000

08005704 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800570a:	463b      	mov	r3, r7
 800570c:	2200      	movs	r2, #0
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	605a      	str	r2, [r3, #4]
 8005712:	609a      	str	r2, [r3, #8]
 8005714:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005716:	4b7c      	ldr	r3, [pc, #496]	; (8005908 <MX_ADC2_Init+0x204>)
 8005718:	4a7c      	ldr	r2, [pc, #496]	; (800590c <MX_ADC2_Init+0x208>)
 800571a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800571c:	4b7a      	ldr	r3, [pc, #488]	; (8005908 <MX_ADC2_Init+0x204>)
 800571e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005722:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005724:	4b78      	ldr	r3, [pc, #480]	; (8005908 <MX_ADC2_Init+0x204>)
 8005726:	2200      	movs	r2, #0
 8005728:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800572a:	4b77      	ldr	r3, [pc, #476]	; (8005908 <MX_ADC2_Init+0x204>)
 800572c:	2201      	movs	r2, #1
 800572e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005730:	4b75      	ldr	r3, [pc, #468]	; (8005908 <MX_ADC2_Init+0x204>)
 8005732:	2201      	movs	r2, #1
 8005734:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005736:	4b74      	ldr	r3, [pc, #464]	; (8005908 <MX_ADC2_Init+0x204>)
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800573e:	4b72      	ldr	r3, [pc, #456]	; (8005908 <MX_ADC2_Init+0x204>)
 8005740:	2200      	movs	r2, #0
 8005742:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005744:	4b70      	ldr	r3, [pc, #448]	; (8005908 <MX_ADC2_Init+0x204>)
 8005746:	4a72      	ldr	r2, [pc, #456]	; (8005910 <MX_ADC2_Init+0x20c>)
 8005748:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800574a:	4b6f      	ldr	r3, [pc, #444]	; (8005908 <MX_ADC2_Init+0x204>)
 800574c:	2200      	movs	r2, #0
 800574e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8005750:	4b6d      	ldr	r3, [pc, #436]	; (8005908 <MX_ADC2_Init+0x204>)
 8005752:	220e      	movs	r2, #14
 8005754:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005756:	4b6c      	ldr	r3, [pc, #432]	; (8005908 <MX_ADC2_Init+0x204>)
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800575e:	4b6a      	ldr	r3, [pc, #424]	; (8005908 <MX_ADC2_Init+0x204>)
 8005760:	2201      	movs	r2, #1
 8005762:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005764:	4868      	ldr	r0, [pc, #416]	; (8005908 <MX_ADC2_Init+0x204>)
 8005766:	f003 f8b3 	bl	80088d0 <HAL_ADC_Init>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005770:	f000 fe10 	bl	8006394 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005774:	230a      	movs	r3, #10
 8005776:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005778:	2301      	movs	r3, #1
 800577a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800577c:	2306      	movs	r3, #6
 800577e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005780:	463b      	mov	r3, r7
 8005782:	4619      	mov	r1, r3
 8005784:	4860      	ldr	r0, [pc, #384]	; (8005908 <MX_ADC2_Init+0x204>)
 8005786:	f003 f9f7 	bl	8008b78 <HAL_ADC_ConfigChannel>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005790:	f000 fe00 	bl	8006394 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005794:	230b      	movs	r3, #11
 8005796:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005798:	2302      	movs	r3, #2
 800579a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800579c:	463b      	mov	r3, r7
 800579e:	4619      	mov	r1, r3
 80057a0:	4859      	ldr	r0, [pc, #356]	; (8005908 <MX_ADC2_Init+0x204>)
 80057a2:	f003 f9e9 	bl	8008b78 <HAL_ADC_ConfigChannel>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80057ac:	f000 fdf2 	bl	8006394 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80057b0:	230c      	movs	r3, #12
 80057b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80057b4:	2303      	movs	r3, #3
 80057b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80057b8:	463b      	mov	r3, r7
 80057ba:	4619      	mov	r1, r3
 80057bc:	4852      	ldr	r0, [pc, #328]	; (8005908 <MX_ADC2_Init+0x204>)
 80057be:	f003 f9db 	bl	8008b78 <HAL_ADC_ConfigChannel>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80057c8:	f000 fde4 	bl	8006394 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80057cc:	230d      	movs	r3, #13
 80057ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80057d0:	2304      	movs	r3, #4
 80057d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80057d4:	463b      	mov	r3, r7
 80057d6:	4619      	mov	r1, r3
 80057d8:	484b      	ldr	r0, [pc, #300]	; (8005908 <MX_ADC2_Init+0x204>)
 80057da:	f003 f9cd 	bl	8008b78 <HAL_ADC_ConfigChannel>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80057e4:	f000 fdd6 	bl	8006394 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80057e8:	2300      	movs	r3, #0
 80057ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80057ec:	2305      	movs	r3, #5
 80057ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80057f0:	463b      	mov	r3, r7
 80057f2:	4619      	mov	r1, r3
 80057f4:	4844      	ldr	r0, [pc, #272]	; (8005908 <MX_ADC2_Init+0x204>)
 80057f6:	f003 f9bf 	bl	8008b78 <HAL_ADC_ConfigChannel>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005800:	f000 fdc8 	bl	8006394 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005804:	2301      	movs	r3, #1
 8005806:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005808:	2306      	movs	r3, #6
 800580a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800580c:	463b      	mov	r3, r7
 800580e:	4619      	mov	r1, r3
 8005810:	483d      	ldr	r0, [pc, #244]	; (8005908 <MX_ADC2_Init+0x204>)
 8005812:	f003 f9b1 	bl	8008b78 <HAL_ADC_ConfigChannel>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d001      	beq.n	8005820 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 800581c:	f000 fdba 	bl	8006394 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005820:	2302      	movs	r3, #2
 8005822:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005824:	2307      	movs	r3, #7
 8005826:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005828:	463b      	mov	r3, r7
 800582a:	4619      	mov	r1, r3
 800582c:	4836      	ldr	r0, [pc, #216]	; (8005908 <MX_ADC2_Init+0x204>)
 800582e:	f003 f9a3 	bl	8008b78 <HAL_ADC_ConfigChannel>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8005838:	f000 fdac 	bl	8006394 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800583c:	2303      	movs	r3, #3
 800583e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005840:	2308      	movs	r3, #8
 8005842:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005844:	463b      	mov	r3, r7
 8005846:	4619      	mov	r1, r3
 8005848:	482f      	ldr	r0, [pc, #188]	; (8005908 <MX_ADC2_Init+0x204>)
 800584a:	f003 f995 	bl	8008b78 <HAL_ADC_ConfigChannel>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8005854:	f000 fd9e 	bl	8006394 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005858:	2304      	movs	r3, #4
 800585a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800585c:	2309      	movs	r3, #9
 800585e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005860:	463b      	mov	r3, r7
 8005862:	4619      	mov	r1, r3
 8005864:	4828      	ldr	r0, [pc, #160]	; (8005908 <MX_ADC2_Init+0x204>)
 8005866:	f003 f987 	bl	8008b78 <HAL_ADC_ConfigChannel>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8005870:	f000 fd90 	bl	8006394 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005874:	2305      	movs	r3, #5
 8005876:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8005878:	230a      	movs	r3, #10
 800587a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800587c:	463b      	mov	r3, r7
 800587e:	4619      	mov	r1, r3
 8005880:	4821      	ldr	r0, [pc, #132]	; (8005908 <MX_ADC2_Init+0x204>)
 8005882:	f003 f979 	bl	8008b78 <HAL_ADC_ConfigChannel>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 800588c:	f000 fd82 	bl	8006394 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005890:	2306      	movs	r3, #6
 8005892:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8005894:	230b      	movs	r3, #11
 8005896:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005898:	463b      	mov	r3, r7
 800589a:	4619      	mov	r1, r3
 800589c:	481a      	ldr	r0, [pc, #104]	; (8005908 <MX_ADC2_Init+0x204>)
 800589e:	f003 f96b 	bl	8008b78 <HAL_ADC_ConfigChannel>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80058a8:	f000 fd74 	bl	8006394 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80058ac:	2307      	movs	r3, #7
 80058ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80058b0:	230c      	movs	r3, #12
 80058b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80058b4:	463b      	mov	r3, r7
 80058b6:	4619      	mov	r1, r3
 80058b8:	4813      	ldr	r0, [pc, #76]	; (8005908 <MX_ADC2_Init+0x204>)
 80058ba:	f003 f95d 	bl	8008b78 <HAL_ADC_ConfigChannel>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80058c4:	f000 fd66 	bl	8006394 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80058c8:	2308      	movs	r3, #8
 80058ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80058cc:	230d      	movs	r3, #13
 80058ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80058d0:	463b      	mov	r3, r7
 80058d2:	4619      	mov	r1, r3
 80058d4:	480c      	ldr	r0, [pc, #48]	; (8005908 <MX_ADC2_Init+0x204>)
 80058d6:	f003 f94f 	bl	8008b78 <HAL_ADC_ConfigChannel>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80058e0:	f000 fd58 	bl	8006394 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80058e4:	2309      	movs	r3, #9
 80058e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80058e8:	230e      	movs	r3, #14
 80058ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80058ec:	463b      	mov	r3, r7
 80058ee:	4619      	mov	r1, r3
 80058f0:	4805      	ldr	r0, [pc, #20]	; (8005908 <MX_ADC2_Init+0x204>)
 80058f2:	f003 f941 	bl	8008b78 <HAL_ADC_ConfigChannel>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 80058fc:	f000 fd4a 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005900:	bf00      	nop
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	2003e8fc 	.word	0x2003e8fc
 800590c:	40012100 	.word	0x40012100
 8005910:	0f000001 	.word	0x0f000001

08005914 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005918:	4b12      	ldr	r3, [pc, #72]	; (8005964 <MX_I2C1_Init+0x50>)
 800591a:	4a13      	ldr	r2, [pc, #76]	; (8005968 <MX_I2C1_Init+0x54>)
 800591c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800591e:	4b11      	ldr	r3, [pc, #68]	; (8005964 <MX_I2C1_Init+0x50>)
 8005920:	4a12      	ldr	r2, [pc, #72]	; (800596c <MX_I2C1_Init+0x58>)
 8005922:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005924:	4b0f      	ldr	r3, [pc, #60]	; (8005964 <MX_I2C1_Init+0x50>)
 8005926:	2200      	movs	r2, #0
 8005928:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800592a:	4b0e      	ldr	r3, [pc, #56]	; (8005964 <MX_I2C1_Init+0x50>)
 800592c:	2200      	movs	r2, #0
 800592e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005930:	4b0c      	ldr	r3, [pc, #48]	; (8005964 <MX_I2C1_Init+0x50>)
 8005932:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005936:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005938:	4b0a      	ldr	r3, [pc, #40]	; (8005964 <MX_I2C1_Init+0x50>)
 800593a:	2200      	movs	r2, #0
 800593c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800593e:	4b09      	ldr	r3, [pc, #36]	; (8005964 <MX_I2C1_Init+0x50>)
 8005940:	2200      	movs	r2, #0
 8005942:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005944:	4b07      	ldr	r3, [pc, #28]	; (8005964 <MX_I2C1_Init+0x50>)
 8005946:	2200      	movs	r2, #0
 8005948:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800594a:	4b06      	ldr	r3, [pc, #24]	; (8005964 <MX_I2C1_Init+0x50>)
 800594c:	2280      	movs	r2, #128	; 0x80
 800594e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005950:	4804      	ldr	r0, [pc, #16]	; (8005964 <MX_I2C1_Init+0x50>)
 8005952:	f004 fa4b 	bl	8009dec <HAL_I2C_Init>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800595c:	f000 fd1a 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005960:	bf00      	nop
 8005962:	bd80      	pop	{r7, pc}
 8005964:	2003e944 	.word	0x2003e944
 8005968:	40005400 	.word	0x40005400
 800596c:	000186a0 	.word	0x000186a0

08005970 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005974:	4b12      	ldr	r3, [pc, #72]	; (80059c0 <MX_I2C2_Init+0x50>)
 8005976:	4a13      	ldr	r2, [pc, #76]	; (80059c4 <MX_I2C2_Init+0x54>)
 8005978:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800597a:	4b11      	ldr	r3, [pc, #68]	; (80059c0 <MX_I2C2_Init+0x50>)
 800597c:	4a12      	ldr	r2, [pc, #72]	; (80059c8 <MX_I2C2_Init+0x58>)
 800597e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005980:	4b0f      	ldr	r3, [pc, #60]	; (80059c0 <MX_I2C2_Init+0x50>)
 8005982:	2200      	movs	r2, #0
 8005984:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005986:	4b0e      	ldr	r3, [pc, #56]	; (80059c0 <MX_I2C2_Init+0x50>)
 8005988:	2200      	movs	r2, #0
 800598a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800598c:	4b0c      	ldr	r3, [pc, #48]	; (80059c0 <MX_I2C2_Init+0x50>)
 800598e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005992:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005994:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <MX_I2C2_Init+0x50>)
 8005996:	2200      	movs	r2, #0
 8005998:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800599a:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <MX_I2C2_Init+0x50>)
 800599c:	2200      	movs	r2, #0
 800599e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80059a0:	4b07      	ldr	r3, [pc, #28]	; (80059c0 <MX_I2C2_Init+0x50>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80059a6:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <MX_I2C2_Init+0x50>)
 80059a8:	2280      	movs	r2, #128	; 0x80
 80059aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80059ac:	4804      	ldr	r0, [pc, #16]	; (80059c0 <MX_I2C2_Init+0x50>)
 80059ae:	f004 fa1d 	bl	8009dec <HAL_I2C_Init>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80059b8:	f000 fcec 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80059bc:	bf00      	nop
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	2003e9d8 	.word	0x2003e9d8
 80059c4:	40005800 	.word	0x40005800
 80059c8:	000186a0 	.word	0x000186a0

080059cc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80059d0:	4b0c      	ldr	r3, [pc, #48]	; (8005a04 <MX_SDIO_SD_Init+0x38>)
 80059d2:	4a0d      	ldr	r2, [pc, #52]	; (8005a08 <MX_SDIO_SD_Init+0x3c>)
 80059d4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80059d6:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <MX_SDIO_SD_Init+0x38>)
 80059d8:	2200      	movs	r2, #0
 80059da:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80059dc:	4b09      	ldr	r3, [pc, #36]	; (8005a04 <MX_SDIO_SD_Init+0x38>)
 80059de:	2200      	movs	r2, #0
 80059e0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80059e2:	4b08      	ldr	r3, [pc, #32]	; (8005a04 <MX_SDIO_SD_Init+0x38>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80059e8:	4b06      	ldr	r3, [pc, #24]	; (8005a04 <MX_SDIO_SD_Init+0x38>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80059ee:	4b05      	ldr	r3, [pc, #20]	; (8005a04 <MX_SDIO_SD_Init+0x38>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80059f4:	4b03      	ldr	r3, [pc, #12]	; (8005a04 <MX_SDIO_SD_Init+0x38>)
 80059f6:	2202      	movs	r2, #2
 80059f8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80059fa:	bf00      	nop
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	2003ebd8 	.word	0x2003ebd8
 8005a08:	40012c00 	.word	0x40012c00

08005a0c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005a10:	4b17      	ldr	r3, [pc, #92]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a12:	4a18      	ldr	r2, [pc, #96]	; (8005a74 <MX_SPI2_Init+0x68>)
 8005a14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005a16:	4b16      	ldr	r3, [pc, #88]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005a1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005a1e:	4b14      	ldr	r3, [pc, #80]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005a24:	4b12      	ldr	r3, [pc, #72]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005a2a:	4b11      	ldr	r3, [pc, #68]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005a30:	4b0f      	ldr	r3, [pc, #60]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a32:	2201      	movs	r2, #1
 8005a34:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005a36:	4b0e      	ldr	r3, [pc, #56]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a3c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005a3e:	4b0c      	ldr	r3, [pc, #48]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a40:	2228      	movs	r2, #40	; 0x28
 8005a42:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005a44:	4b0a      	ldr	r3, [pc, #40]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005a4a:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a50:	4b07      	ldr	r3, [pc, #28]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005a56:	4b06      	ldr	r3, [pc, #24]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a58:	220a      	movs	r2, #10
 8005a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005a5c:	4804      	ldr	r0, [pc, #16]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a5e:	f007 faf7 	bl	800d050 <HAL_SPI_Init>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005a68:	f000 fc94 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005a6c:	bf00      	nop
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	2003e824 	.word	0x2003e824
 8005a74:	40003800 	.word	0x40003800

08005a78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b09a      	sub	sp, #104	; 0x68
 8005a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005a7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005a82:	2224      	movs	r2, #36	; 0x24
 8005a84:	2100      	movs	r1, #0
 8005a86:	4618      	mov	r0, r3
 8005a88:	f00e fc81 	bl	801438e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a96:	f107 0320 	add.w	r3, r7, #32
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	605a      	str	r2, [r3, #4]
 8005aa0:	609a      	str	r2, [r3, #8]
 8005aa2:	60da      	str	r2, [r3, #12]
 8005aa4:	611a      	str	r2, [r3, #16]
 8005aa6:	615a      	str	r2, [r3, #20]
 8005aa8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005aaa:	463b      	mov	r3, r7
 8005aac:	2220      	movs	r2, #32
 8005aae:	2100      	movs	r1, #0
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f00e fc6c 	bl	801438e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005ab6:	4b42      	ldr	r3, [pc, #264]	; (8005bc0 <MX_TIM1_Init+0x148>)
 8005ab8:	4a42      	ldr	r2, [pc, #264]	; (8005bc4 <MX_TIM1_Init+0x14c>)
 8005aba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005abc:	4b40      	ldr	r3, [pc, #256]	; (8005bc0 <MX_TIM1_Init+0x148>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ac2:	4b3f      	ldr	r3, [pc, #252]	; (8005bc0 <MX_TIM1_Init+0x148>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005ac8:	4b3d      	ldr	r3, [pc, #244]	; (8005bc0 <MX_TIM1_Init+0x148>)
 8005aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ace:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ad0:	4b3b      	ldr	r3, [pc, #236]	; (8005bc0 <MX_TIM1_Init+0x148>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005ad6:	4b3a      	ldr	r3, [pc, #232]	; (8005bc0 <MX_TIM1_Init+0x148>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005adc:	4b38      	ldr	r3, [pc, #224]	; (8005bc0 <MX_TIM1_Init+0x148>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005ae2:	4837      	ldr	r0, [pc, #220]	; (8005bc0 <MX_TIM1_Init+0x148>)
 8005ae4:	f008 f857 	bl	800db96 <HAL_TIM_PWM_Init>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8005aee:	f000 fc51 	bl	8006394 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005af2:	2303      	movs	r3, #3
 8005af4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005af6:	2300      	movs	r3, #0
 8005af8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005afa:	2301      	movs	r3, #1
 8005afc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005afe:	2300      	movs	r3, #0
 8005b00:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005b06:	2300      	movs	r3, #0
 8005b08:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8005b12:	2300      	movs	r3, #0
 8005b14:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005b16:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	4828      	ldr	r0, [pc, #160]	; (8005bc0 <MX_TIM1_Init+0x148>)
 8005b1e:	f008 f8a3 	bl	800dc68 <HAL_TIM_Encoder_Init>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8005b28:	f000 fc34 	bl	8006394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b30:	2300      	movs	r3, #0
 8005b32:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005b34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005b38:	4619      	mov	r1, r3
 8005b3a:	4821      	ldr	r0, [pc, #132]	; (8005bc0 <MX_TIM1_Init+0x148>)
 8005b3c:	f008 fdca 	bl	800e6d4 <HAL_TIMEx_MasterConfigSynchronization>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8005b46:	f000 fc25 	bl	8006394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b4a:	2360      	movs	r3, #96	; 0x60
 8005b4c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b52:	2300      	movs	r3, #0
 8005b54:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005b56:	2300      	movs	r3, #0
 8005b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005b62:	2300      	movs	r3, #0
 8005b64:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005b66:	f107 0320 	add.w	r3, r7, #32
 8005b6a:	2208      	movs	r2, #8
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4814      	ldr	r0, [pc, #80]	; (8005bc0 <MX_TIM1_Init+0x148>)
 8005b70:	f008 fa4c 	bl	800e00c <HAL_TIM_PWM_ConfigChannel>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8005b7a:	f000 fc0b 	bl	8006394 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005b82:	2300      	movs	r3, #0
 8005b84:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005b92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005b9c:	463b      	mov	r3, r7
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	4807      	ldr	r0, [pc, #28]	; (8005bc0 <MX_TIM1_Init+0x148>)
 8005ba2:	f008 fe13 	bl	800e7cc <HAL_TIMEx_ConfigBreakDeadTime>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8005bac:	f000 fbf2 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005bb0:	4803      	ldr	r0, [pc, #12]	; (8005bc0 <MX_TIM1_Init+0x148>)
 8005bb2:	f000 ffdf 	bl	8006b74 <HAL_TIM_MspPostInit>

}
 8005bb6:	bf00      	nop
 8005bb8:	3768      	adds	r7, #104	; 0x68
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	2003eb98 	.word	0x2003eb98
 8005bc4:	40010000 	.word	0x40010000

08005bc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b08a      	sub	sp, #40	; 0x28
 8005bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bce:	f107 0320 	add.w	r3, r7, #32
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005bd8:	1d3b      	adds	r3, r7, #4
 8005bda:	2200      	movs	r2, #0
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	605a      	str	r2, [r3, #4]
 8005be0:	609a      	str	r2, [r3, #8]
 8005be2:	60da      	str	r2, [r3, #12]
 8005be4:	611a      	str	r2, [r3, #16]
 8005be6:	615a      	str	r2, [r3, #20]
 8005be8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005bea:	4b27      	ldr	r3, [pc, #156]	; (8005c88 <MX_TIM3_Init+0xc0>)
 8005bec:	4a27      	ldr	r2, [pc, #156]	; (8005c8c <MX_TIM3_Init+0xc4>)
 8005bee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005bf0:	4b25      	ldr	r3, [pc, #148]	; (8005c88 <MX_TIM3_Init+0xc0>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bf6:	4b24      	ldr	r3, [pc, #144]	; (8005c88 <MX_TIM3_Init+0xc0>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005bfc:	4b22      	ldr	r3, [pc, #136]	; (8005c88 <MX_TIM3_Init+0xc0>)
 8005bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c04:	4b20      	ldr	r3, [pc, #128]	; (8005c88 <MX_TIM3_Init+0xc0>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c0a:	4b1f      	ldr	r3, [pc, #124]	; (8005c88 <MX_TIM3_Init+0xc0>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005c10:	481d      	ldr	r0, [pc, #116]	; (8005c88 <MX_TIM3_Init+0xc0>)
 8005c12:	f007 ffc0 	bl	800db96 <HAL_TIM_PWM_Init>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005c1c:	f000 fbba 	bl	8006394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c20:	2300      	movs	r3, #0
 8005c22:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c24:	2300      	movs	r3, #0
 8005c26:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005c28:	f107 0320 	add.w	r3, r7, #32
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4816      	ldr	r0, [pc, #88]	; (8005c88 <MX_TIM3_Init+0xc0>)
 8005c30:	f008 fd50 	bl	800e6d4 <HAL_TIMEx_MasterConfigSynchronization>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8005c3a:	f000 fbab 	bl	8006394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005c3e:	2360      	movs	r3, #96	; 0x60
 8005c40:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005c42:	2300      	movs	r3, #0
 8005c44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005c4e:	1d3b      	adds	r3, r7, #4
 8005c50:	2200      	movs	r2, #0
 8005c52:	4619      	mov	r1, r3
 8005c54:	480c      	ldr	r0, [pc, #48]	; (8005c88 <MX_TIM3_Init+0xc0>)
 8005c56:	f008 f9d9 	bl	800e00c <HAL_TIM_PWM_ConfigChannel>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8005c60:	f000 fb98 	bl	8006394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005c64:	1d3b      	adds	r3, r7, #4
 8005c66:	2204      	movs	r2, #4
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4807      	ldr	r0, [pc, #28]	; (8005c88 <MX_TIM3_Init+0xc0>)
 8005c6c:	f008 f9ce 	bl	800e00c <HAL_TIM_PWM_ConfigChannel>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005c76:	f000 fb8d 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005c7a:	4803      	ldr	r0, [pc, #12]	; (8005c88 <MX_TIM3_Init+0xc0>)
 8005c7c:	f000 ff7a 	bl	8006b74 <HAL_TIM_MspPostInit>

}
 8005c80:	bf00      	nop
 8005c82:	3728      	adds	r7, #40	; 0x28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	2003ea30 	.word	0x2003ea30
 8005c8c:	40000400 	.word	0x40000400

08005c90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08a      	sub	sp, #40	; 0x28
 8005c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c96:	f107 0320 	add.w	r3, r7, #32
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005ca0:	1d3b      	adds	r3, r7, #4
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	605a      	str	r2, [r3, #4]
 8005ca8:	609a      	str	r2, [r3, #8]
 8005caa:	60da      	str	r2, [r3, #12]
 8005cac:	611a      	str	r2, [r3, #16]
 8005cae:	615a      	str	r2, [r3, #20]
 8005cb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005cb2:	4b27      	ldr	r3, [pc, #156]	; (8005d50 <MX_TIM4_Init+0xc0>)
 8005cb4:	4a27      	ldr	r2, [pc, #156]	; (8005d54 <MX_TIM4_Init+0xc4>)
 8005cb6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005cb8:	4b25      	ldr	r3, [pc, #148]	; (8005d50 <MX_TIM4_Init+0xc0>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cbe:	4b24      	ldr	r3, [pc, #144]	; (8005d50 <MX_TIM4_Init+0xc0>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8005cc4:	4b22      	ldr	r3, [pc, #136]	; (8005d50 <MX_TIM4_Init+0xc0>)
 8005cc6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8005cca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ccc:	4b20      	ldr	r3, [pc, #128]	; (8005d50 <MX_TIM4_Init+0xc0>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005cd2:	4b1f      	ldr	r3, [pc, #124]	; (8005d50 <MX_TIM4_Init+0xc0>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005cd8:	481d      	ldr	r0, [pc, #116]	; (8005d50 <MX_TIM4_Init+0xc0>)
 8005cda:	f007 ff5c 	bl	800db96 <HAL_TIM_PWM_Init>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8005ce4:	f000 fb56 	bl	8006394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cec:	2300      	movs	r3, #0
 8005cee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005cf0:	f107 0320 	add.w	r3, r7, #32
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4816      	ldr	r0, [pc, #88]	; (8005d50 <MX_TIM4_Init+0xc0>)
 8005cf8:	f008 fcec 	bl	800e6d4 <HAL_TIMEx_MasterConfigSynchronization>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8005d02:	f000 fb47 	bl	8006394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005d06:	2360      	movs	r3, #96	; 0x60
 8005d08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d12:	2300      	movs	r3, #0
 8005d14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005d16:	1d3b      	adds	r3, r7, #4
 8005d18:	2208      	movs	r2, #8
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	480c      	ldr	r0, [pc, #48]	; (8005d50 <MX_TIM4_Init+0xc0>)
 8005d1e:	f008 f975 	bl	800e00c <HAL_TIM_PWM_ConfigChannel>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8005d28:	f000 fb34 	bl	8006394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005d2c:	1d3b      	adds	r3, r7, #4
 8005d2e:	220c      	movs	r2, #12
 8005d30:	4619      	mov	r1, r3
 8005d32:	4807      	ldr	r0, [pc, #28]	; (8005d50 <MX_TIM4_Init+0xc0>)
 8005d34:	f008 f96a 	bl	800e00c <HAL_TIM_PWM_ConfigChannel>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005d3e:	f000 fb29 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005d42:	4803      	ldr	r0, [pc, #12]	; (8005d50 <MX_TIM4_Init+0xc0>)
 8005d44:	f000 ff16 	bl	8006b74 <HAL_TIM_MspPostInit>

}
 8005d48:	bf00      	nop
 8005d4a:	3728      	adds	r7, #40	; 0x28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	2003e8bc 	.word	0x2003e8bc
 8005d54:	40000800 	.word	0x40000800

08005d58 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d5e:	463b      	mov	r3, r7
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005d66:	4b15      	ldr	r3, [pc, #84]	; (8005dbc <MX_TIM6_Init+0x64>)
 8005d68:	4a15      	ldr	r2, [pc, #84]	; (8005dc0 <MX_TIM6_Init+0x68>)
 8005d6a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8005d6c:	4b13      	ldr	r3, [pc, #76]	; (8005dbc <MX_TIM6_Init+0x64>)
 8005d6e:	2259      	movs	r2, #89	; 0x59
 8005d70:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d72:	4b12      	ldr	r3, [pc, #72]	; (8005dbc <MX_TIM6_Init+0x64>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8005d78:	4b10      	ldr	r3, [pc, #64]	; (8005dbc <MX_TIM6_Init+0x64>)
 8005d7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005d7e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005d80:	4b0e      	ldr	r3, [pc, #56]	; (8005dbc <MX_TIM6_Init+0x64>)
 8005d82:	2280      	movs	r2, #128	; 0x80
 8005d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005d86:	480d      	ldr	r0, [pc, #52]	; (8005dbc <MX_TIM6_Init+0x64>)
 8005d88:	f007 feb6 	bl	800daf8 <HAL_TIM_Base_Init>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005d92:	f000 faff 	bl	8006394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d96:	2300      	movs	r3, #0
 8005d98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005d9e:	463b      	mov	r3, r7
 8005da0:	4619      	mov	r1, r3
 8005da2:	4806      	ldr	r0, [pc, #24]	; (8005dbc <MX_TIM6_Init+0x64>)
 8005da4:	f008 fc96 	bl	800e6d4 <HAL_TIMEx_MasterConfigSynchronization>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8005dae:	f000 faf1 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005db2:	bf00      	nop
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	2003eb58 	.word	0x2003eb58
 8005dc0:	40001000 	.word	0x40001000

08005dc4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005dca:	463b      	mov	r3, r7
 8005dcc:	2200      	movs	r2, #0
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005dd2:	4b14      	ldr	r3, [pc, #80]	; (8005e24 <MX_TIM7_Init+0x60>)
 8005dd4:	4a14      	ldr	r2, [pc, #80]	; (8005e28 <MX_TIM7_Init+0x64>)
 8005dd6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8005dd8:	4b12      	ldr	r3, [pc, #72]	; (8005e24 <MX_TIM7_Init+0x60>)
 8005dda:	22b3      	movs	r2, #179	; 0xb3
 8005ddc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dde:	4b11      	ldr	r3, [pc, #68]	; (8005e24 <MX_TIM7_Init+0x60>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8005de4:	4b0f      	ldr	r3, [pc, #60]	; (8005e24 <MX_TIM7_Init+0x60>)
 8005de6:	2231      	movs	r2, #49	; 0x31
 8005de8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005dea:	4b0e      	ldr	r3, [pc, #56]	; (8005e24 <MX_TIM7_Init+0x60>)
 8005dec:	2280      	movs	r2, #128	; 0x80
 8005dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005df0:	480c      	ldr	r0, [pc, #48]	; (8005e24 <MX_TIM7_Init+0x60>)
 8005df2:	f007 fe81 	bl	800daf8 <HAL_TIM_Base_Init>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8005dfc:	f000 faca 	bl	8006394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e00:	2300      	movs	r3, #0
 8005e02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e04:	2300      	movs	r3, #0
 8005e06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005e08:	463b      	mov	r3, r7
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4805      	ldr	r0, [pc, #20]	; (8005e24 <MX_TIM7_Init+0x60>)
 8005e0e:	f008 fc61 	bl	800e6d4 <HAL_TIMEx_MasterConfigSynchronization>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8005e18:	f000 fabc 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005e1c:	bf00      	nop
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	2003ecfc 	.word	0x2003ecfc
 8005e28:	40001400 	.word	0x40001400

08005e2c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b08c      	sub	sp, #48	; 0x30
 8005e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005e32:	f107 030c 	add.w	r3, r7, #12
 8005e36:	2224      	movs	r2, #36	; 0x24
 8005e38:	2100      	movs	r1, #0
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f00e faa7 	bl	801438e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e40:	1d3b      	adds	r3, r7, #4
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005e48:	4b22      	ldr	r3, [pc, #136]	; (8005ed4 <MX_TIM8_Init+0xa8>)
 8005e4a:	4a23      	ldr	r2, [pc, #140]	; (8005ed8 <MX_TIM8_Init+0xac>)
 8005e4c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005e4e:	4b21      	ldr	r3, [pc, #132]	; (8005ed4 <MX_TIM8_Init+0xa8>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8005e54:	4b1f      	ldr	r3, [pc, #124]	; (8005ed4 <MX_TIM8_Init+0xa8>)
 8005e56:	2210      	movs	r2, #16
 8005e58:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8005e5a:	4b1e      	ldr	r3, [pc, #120]	; (8005ed4 <MX_TIM8_Init+0xa8>)
 8005e5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e60:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e62:	4b1c      	ldr	r3, [pc, #112]	; (8005ed4 <MX_TIM8_Init+0xa8>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005e68:	4b1a      	ldr	r3, [pc, #104]	; (8005ed4 <MX_TIM8_Init+0xa8>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e6e:	4b19      	ldr	r3, [pc, #100]	; (8005ed4 <MX_TIM8_Init+0xa8>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005e74:	2303      	movs	r3, #3
 8005e76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005e80:	2300      	movs	r3, #0
 8005e82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005e84:	2300      	movs	r3, #0
 8005e86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005e90:	2300      	movs	r3, #0
 8005e92:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005e94:	2300      	movs	r3, #0
 8005e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8005e98:	f107 030c 	add.w	r3, r7, #12
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	480d      	ldr	r0, [pc, #52]	; (8005ed4 <MX_TIM8_Init+0xa8>)
 8005ea0:	f007 fee2 	bl	800dc68 <HAL_TIM_Encoder_Init>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8005eaa:	f000 fa73 	bl	8006394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005eb6:	1d3b      	adds	r3, r7, #4
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4806      	ldr	r0, [pc, #24]	; (8005ed4 <MX_TIM8_Init+0xa8>)
 8005ebc:	f008 fc0a 	bl	800e6d4 <HAL_TIMEx_MasterConfigSynchronization>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8005ec6:	f000 fa65 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005eca:	bf00      	nop
 8005ecc:	3730      	adds	r7, #48	; 0x30
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	2003e87c 	.word	0x2003e87c
 8005ed8:	40010400 	.word	0x40010400

08005edc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005ee2:	1d3b      	adds	r3, r7, #4
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	605a      	str	r2, [r3, #4]
 8005eea:	609a      	str	r2, [r3, #8]
 8005eec:	60da      	str	r2, [r3, #12]
 8005eee:	611a      	str	r2, [r3, #16]
 8005ef0:	615a      	str	r2, [r3, #20]
 8005ef2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005ef4:	4b1e      	ldr	r3, [pc, #120]	; (8005f70 <MX_TIM10_Init+0x94>)
 8005ef6:	4a1f      	ldr	r2, [pc, #124]	; (8005f74 <MX_TIM10_Init+0x98>)
 8005ef8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8005efa:	4b1d      	ldr	r3, [pc, #116]	; (8005f70 <MX_TIM10_Init+0x94>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f00:	4b1b      	ldr	r3, [pc, #108]	; (8005f70 <MX_TIM10_Init+0x94>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8005f06:	4b1a      	ldr	r3, [pc, #104]	; (8005f70 <MX_TIM10_Init+0x94>)
 8005f08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f0c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f0e:	4b18      	ldr	r3, [pc, #96]	; (8005f70 <MX_TIM10_Init+0x94>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f14:	4b16      	ldr	r3, [pc, #88]	; (8005f70 <MX_TIM10_Init+0x94>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005f1a:	4815      	ldr	r0, [pc, #84]	; (8005f70 <MX_TIM10_Init+0x94>)
 8005f1c:	f007 fdec 	bl	800daf8 <HAL_TIM_Base_Init>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8005f26:	f000 fa35 	bl	8006394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8005f2a:	4811      	ldr	r0, [pc, #68]	; (8005f70 <MX_TIM10_Init+0x94>)
 8005f2c:	f007 fe33 	bl	800db96 <HAL_TIM_PWM_Init>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8005f36:	f000 fa2d 	bl	8006394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005f3a:	2360      	movs	r3, #96	; 0x60
 8005f3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005f46:	2300      	movs	r3, #0
 8005f48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005f4a:	1d3b      	adds	r3, r7, #4
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4807      	ldr	r0, [pc, #28]	; (8005f70 <MX_TIM10_Init+0x94>)
 8005f52:	f008 f85b 	bl	800e00c <HAL_TIM_PWM_ConfigChannel>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8005f5c:	f000 fa1a 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8005f60:	4803      	ldr	r0, [pc, #12]	; (8005f70 <MX_TIM10_Init+0x94>)
 8005f62:	f000 fe07 	bl	8006b74 <HAL_TIM_MspPostInit>

}
 8005f66:	bf00      	nop
 8005f68:	3720      	adds	r7, #32
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	2003e998 	.word	0x2003e998
 8005f74:	40014400 	.word	0x40014400

08005f78 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b088      	sub	sp, #32
 8005f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f7e:	1d3b      	adds	r3, r7, #4
 8005f80:	2200      	movs	r2, #0
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	605a      	str	r2, [r3, #4]
 8005f86:	609a      	str	r2, [r3, #8]
 8005f88:	60da      	str	r2, [r3, #12]
 8005f8a:	611a      	str	r2, [r3, #16]
 8005f8c:	615a      	str	r2, [r3, #20]
 8005f8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8005f90:	4b1e      	ldr	r3, [pc, #120]	; (800600c <MX_TIM11_Init+0x94>)
 8005f92:	4a1f      	ldr	r2, [pc, #124]	; (8006010 <MX_TIM11_Init+0x98>)
 8005f94:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8005f96:	4b1d      	ldr	r3, [pc, #116]	; (800600c <MX_TIM11_Init+0x94>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f9c:	4b1b      	ldr	r3, [pc, #108]	; (800600c <MX_TIM11_Init+0x94>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8005fa2:	4b1a      	ldr	r3, [pc, #104]	; (800600c <MX_TIM11_Init+0x94>)
 8005fa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fa8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005faa:	4b18      	ldr	r3, [pc, #96]	; (800600c <MX_TIM11_Init+0x94>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005fb0:	4b16      	ldr	r3, [pc, #88]	; (800600c <MX_TIM11_Init+0x94>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8005fb6:	4815      	ldr	r0, [pc, #84]	; (800600c <MX_TIM11_Init+0x94>)
 8005fb8:	f007 fd9e 	bl	800daf8 <HAL_TIM_Base_Init>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8005fc2:	f000 f9e7 	bl	8006394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8005fc6:	4811      	ldr	r0, [pc, #68]	; (800600c <MX_TIM11_Init+0x94>)
 8005fc8:	f007 fde5 	bl	800db96 <HAL_TIM_PWM_Init>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8005fd2:	f000 f9df 	bl	8006394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005fd6:	2360      	movs	r3, #96	; 0x60
 8005fd8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005fe6:	1d3b      	adds	r3, r7, #4
 8005fe8:	2200      	movs	r2, #0
 8005fea:	4619      	mov	r1, r3
 8005fec:	4807      	ldr	r0, [pc, #28]	; (800600c <MX_TIM11_Init+0x94>)
 8005fee:	f008 f80d 	bl	800e00c <HAL_TIM_PWM_ConfigChannel>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8005ff8:	f000 f9cc 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8005ffc:	4803      	ldr	r0, [pc, #12]	; (800600c <MX_TIM11_Init+0x94>)
 8005ffe:	f000 fdb9 	bl	8006b74 <HAL_TIM_MspPostInit>

}
 8006002:	bf00      	nop
 8006004:	3720      	adds	r7, #32
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	2003eab8 	.word	0x2003eab8
 8006010:	40014800 	.word	0x40014800

08006014 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006018:	4b0e      	ldr	r3, [pc, #56]	; (8006054 <MX_TIM13_Init+0x40>)
 800601a:	4a0f      	ldr	r2, [pc, #60]	; (8006058 <MX_TIM13_Init+0x44>)
 800601c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 800601e:	4b0d      	ldr	r3, [pc, #52]	; (8006054 <MX_TIM13_Init+0x40>)
 8006020:	2259      	movs	r2, #89	; 0x59
 8006022:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006024:	4b0b      	ldr	r3, [pc, #44]	; (8006054 <MX_TIM13_Init+0x40>)
 8006026:	2200      	movs	r2, #0
 8006028:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 800602a:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <MX_TIM13_Init+0x40>)
 800602c:	f242 720f 	movw	r2, #9999	; 0x270f
 8006030:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006032:	4b08      	ldr	r3, [pc, #32]	; (8006054 <MX_TIM13_Init+0x40>)
 8006034:	2200      	movs	r2, #0
 8006036:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006038:	4b06      	ldr	r3, [pc, #24]	; (8006054 <MX_TIM13_Init+0x40>)
 800603a:	2280      	movs	r2, #128	; 0x80
 800603c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800603e:	4805      	ldr	r0, [pc, #20]	; (8006054 <MX_TIM13_Init+0x40>)
 8006040:	f007 fd5a 	bl	800daf8 <HAL_TIM_Base_Init>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800604a:	f000 f9a3 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800604e:	bf00      	nop
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	2003ea78 	.word	0x2003ea78
 8006058:	40001c00 	.word	0x40001c00

0800605c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006060:	4b11      	ldr	r3, [pc, #68]	; (80060a8 <MX_USART2_UART_Init+0x4c>)
 8006062:	4a12      	ldr	r2, [pc, #72]	; (80060ac <MX_USART2_UART_Init+0x50>)
 8006064:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006066:	4b10      	ldr	r3, [pc, #64]	; (80060a8 <MX_USART2_UART_Init+0x4c>)
 8006068:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800606c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800606e:	4b0e      	ldr	r3, [pc, #56]	; (80060a8 <MX_USART2_UART_Init+0x4c>)
 8006070:	2200      	movs	r2, #0
 8006072:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006074:	4b0c      	ldr	r3, [pc, #48]	; (80060a8 <MX_USART2_UART_Init+0x4c>)
 8006076:	2200      	movs	r2, #0
 8006078:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800607a:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <MX_USART2_UART_Init+0x4c>)
 800607c:	2200      	movs	r2, #0
 800607e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006080:	4b09      	ldr	r3, [pc, #36]	; (80060a8 <MX_USART2_UART_Init+0x4c>)
 8006082:	220c      	movs	r2, #12
 8006084:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006086:	4b08      	ldr	r3, [pc, #32]	; (80060a8 <MX_USART2_UART_Init+0x4c>)
 8006088:	2200      	movs	r2, #0
 800608a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800608c:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <MX_USART2_UART_Init+0x4c>)
 800608e:	2200      	movs	r2, #0
 8006090:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006092:	4805      	ldr	r0, [pc, #20]	; (80060a8 <MX_USART2_UART_Init+0x4c>)
 8006094:	f008 fc00 	bl	800e898 <HAL_UART_Init>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800609e:	f000 f979 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80060a2:	bf00      	nop
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	2003ec5c 	.word	0x2003ec5c
 80060ac:	40004400 	.word	0x40004400

080060b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80060b6:	2300      	movs	r3, #0
 80060b8:	607b      	str	r3, [r7, #4]
 80060ba:	4b14      	ldr	r3, [pc, #80]	; (800610c <MX_DMA_Init+0x5c>)
 80060bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060be:	4a13      	ldr	r2, [pc, #76]	; (800610c <MX_DMA_Init+0x5c>)
 80060c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80060c4:	6313      	str	r3, [r2, #48]	; 0x30
 80060c6:	4b11      	ldr	r3, [pc, #68]	; (800610c <MX_DMA_Init+0x5c>)
 80060c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ce:	607b      	str	r3, [r7, #4]
 80060d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80060d2:	2200      	movs	r2, #0
 80060d4:	2100      	movs	r1, #0
 80060d6:	203a      	movs	r0, #58	; 0x3a
 80060d8:	f003 f8d9 	bl	800928e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80060dc:	203a      	movs	r0, #58	; 0x3a
 80060de:	f003 f8f2 	bl	80092c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80060e2:	2200      	movs	r2, #0
 80060e4:	2100      	movs	r1, #0
 80060e6:	203b      	movs	r0, #59	; 0x3b
 80060e8:	f003 f8d1 	bl	800928e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80060ec:	203b      	movs	r0, #59	; 0x3b
 80060ee:	f003 f8ea 	bl	80092c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80060f2:	2200      	movs	r2, #0
 80060f4:	2100      	movs	r1, #0
 80060f6:	2045      	movs	r0, #69	; 0x45
 80060f8:	f003 f8c9 	bl	800928e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80060fc:	2045      	movs	r0, #69	; 0x45
 80060fe:	f003 f8e2 	bl	80092c6 <HAL_NVIC_EnableIRQ>

}
 8006102:	bf00      	nop
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	40023800 	.word	0x40023800

08006110 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b08c      	sub	sp, #48	; 0x30
 8006114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006116:	f107 031c 	add.w	r3, r7, #28
 800611a:	2200      	movs	r2, #0
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	605a      	str	r2, [r3, #4]
 8006120:	609a      	str	r2, [r3, #8]
 8006122:	60da      	str	r2, [r3, #12]
 8006124:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006126:	2300      	movs	r3, #0
 8006128:	61bb      	str	r3, [r7, #24]
 800612a:	4b94      	ldr	r3, [pc, #592]	; (800637c <MX_GPIO_Init+0x26c>)
 800612c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612e:	4a93      	ldr	r2, [pc, #588]	; (800637c <MX_GPIO_Init+0x26c>)
 8006130:	f043 0310 	orr.w	r3, r3, #16
 8006134:	6313      	str	r3, [r2, #48]	; 0x30
 8006136:	4b91      	ldr	r3, [pc, #580]	; (800637c <MX_GPIO_Init+0x26c>)
 8006138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613a:	f003 0310 	and.w	r3, r3, #16
 800613e:	61bb      	str	r3, [r7, #24]
 8006140:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006142:	2300      	movs	r3, #0
 8006144:	617b      	str	r3, [r7, #20]
 8006146:	4b8d      	ldr	r3, [pc, #564]	; (800637c <MX_GPIO_Init+0x26c>)
 8006148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614a:	4a8c      	ldr	r2, [pc, #560]	; (800637c <MX_GPIO_Init+0x26c>)
 800614c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006150:	6313      	str	r3, [r2, #48]	; 0x30
 8006152:	4b8a      	ldr	r3, [pc, #552]	; (800637c <MX_GPIO_Init+0x26c>)
 8006154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800615e:	2300      	movs	r3, #0
 8006160:	613b      	str	r3, [r7, #16]
 8006162:	4b86      	ldr	r3, [pc, #536]	; (800637c <MX_GPIO_Init+0x26c>)
 8006164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006166:	4a85      	ldr	r2, [pc, #532]	; (800637c <MX_GPIO_Init+0x26c>)
 8006168:	f043 0304 	orr.w	r3, r3, #4
 800616c:	6313      	str	r3, [r2, #48]	; 0x30
 800616e:	4b83      	ldr	r3, [pc, #524]	; (800637c <MX_GPIO_Init+0x26c>)
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006172:	f003 0304 	and.w	r3, r3, #4
 8006176:	613b      	str	r3, [r7, #16]
 8006178:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800617a:	2300      	movs	r3, #0
 800617c:	60fb      	str	r3, [r7, #12]
 800617e:	4b7f      	ldr	r3, [pc, #508]	; (800637c <MX_GPIO_Init+0x26c>)
 8006180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006182:	4a7e      	ldr	r2, [pc, #504]	; (800637c <MX_GPIO_Init+0x26c>)
 8006184:	f043 0301 	orr.w	r3, r3, #1
 8006188:	6313      	str	r3, [r2, #48]	; 0x30
 800618a:	4b7c      	ldr	r3, [pc, #496]	; (800637c <MX_GPIO_Init+0x26c>)
 800618c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006196:	2300      	movs	r3, #0
 8006198:	60bb      	str	r3, [r7, #8]
 800619a:	4b78      	ldr	r3, [pc, #480]	; (800637c <MX_GPIO_Init+0x26c>)
 800619c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619e:	4a77      	ldr	r2, [pc, #476]	; (800637c <MX_GPIO_Init+0x26c>)
 80061a0:	f043 0302 	orr.w	r3, r3, #2
 80061a4:	6313      	str	r3, [r2, #48]	; 0x30
 80061a6:	4b75      	ldr	r3, [pc, #468]	; (800637c <MX_GPIO_Init+0x26c>)
 80061a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	60bb      	str	r3, [r7, #8]
 80061b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80061b2:	2300      	movs	r3, #0
 80061b4:	607b      	str	r3, [r7, #4]
 80061b6:	4b71      	ldr	r3, [pc, #452]	; (800637c <MX_GPIO_Init+0x26c>)
 80061b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ba:	4a70      	ldr	r2, [pc, #448]	; (800637c <MX_GPIO_Init+0x26c>)
 80061bc:	f043 0308 	orr.w	r3, r3, #8
 80061c0:	6313      	str	r3, [r2, #48]	; 0x30
 80061c2:	4b6e      	ldr	r3, [pc, #440]	; (800637c <MX_GPIO_Init+0x26c>)
 80061c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c6:	f003 0308 	and.w	r3, r3, #8
 80061ca:	607b      	str	r3, [r7, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80061ce:	2200      	movs	r2, #0
 80061d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80061d4:	486a      	ldr	r0, [pc, #424]	; (8006380 <MX_GPIO_Init+0x270>)
 80061d6:	f003 fdef 	bl	8009db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80061da:	2200      	movs	r2, #0
 80061dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80061e0:	4868      	ldr	r0, [pc, #416]	; (8006384 <MX_GPIO_Init+0x274>)
 80061e2:	f003 fde9 	bl	8009db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80061e6:	2200      	movs	r2, #0
 80061e8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80061ec:	4866      	ldr	r0, [pc, #408]	; (8006388 <MX_GPIO_Init+0x278>)
 80061ee:	f003 fde3 	bl	8009db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80061f2:	2200      	movs	r2, #0
 80061f4:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80061f8:	4864      	ldr	r0, [pc, #400]	; (800638c <MX_GPIO_Init+0x27c>)
 80061fa:	f003 fddd 	bl	8009db8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80061fe:	2304      	movs	r3, #4
 8006200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006202:	2300      	movs	r3, #0
 8006204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006206:	2300      	movs	r3, #0
 8006208:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800620a:	f107 031c 	add.w	r3, r7, #28
 800620e:	4619      	mov	r1, r3
 8006210:	485b      	ldr	r0, [pc, #364]	; (8006380 <MX_GPIO_Init+0x270>)
 8006212:	f003 fc0f 	bl	8009a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006216:	230f      	movs	r3, #15
 8006218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800621a:	2303      	movs	r3, #3
 800621c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800621e:	2300      	movs	r3, #0
 8006220:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006222:	f107 031c 	add.w	r3, r7, #28
 8006226:	4619      	mov	r1, r3
 8006228:	4859      	ldr	r0, [pc, #356]	; (8006390 <MX_GPIO_Init+0x280>)
 800622a:	f003 fc03 	bl	8009a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800622e:	23e1      	movs	r3, #225	; 0xe1
 8006230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006232:	2303      	movs	r3, #3
 8006234:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006236:	2300      	movs	r3, #0
 8006238:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800623a:	f107 031c 	add.w	r3, r7, #28
 800623e:	4619      	mov	r1, r3
 8006240:	4852      	ldr	r0, [pc, #328]	; (800638c <MX_GPIO_Init+0x27c>)
 8006242:	f003 fbf7 	bl	8009a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006246:	2303      	movs	r3, #3
 8006248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800624a:	2303      	movs	r3, #3
 800624c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800624e:	2300      	movs	r3, #0
 8006250:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006252:	f107 031c 	add.w	r3, r7, #28
 8006256:	4619      	mov	r1, r3
 8006258:	484a      	ldr	r0, [pc, #296]	; (8006384 <MX_GPIO_Init+0x274>)
 800625a:	f003 fbeb 	bl	8009a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800625e:	2304      	movs	r3, #4
 8006260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006262:	2300      	movs	r3, #0
 8006264:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006266:	2301      	movs	r3, #1
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800626a:	f107 031c 	add.w	r3, r7, #28
 800626e:	4619      	mov	r1, r3
 8006270:	4844      	ldr	r0, [pc, #272]	; (8006384 <MX_GPIO_Init+0x274>)
 8006272:	f003 fbdf 	bl	8009a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006276:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 800627a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800627c:	2300      	movs	r3, #0
 800627e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006280:	2301      	movs	r3, #1
 8006282:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006284:	f107 031c 	add.w	r3, r7, #28
 8006288:	4619      	mov	r1, r3
 800628a:	483d      	ldr	r0, [pc, #244]	; (8006380 <MX_GPIO_Init+0x270>)
 800628c:	f003 fbd2 	bl	8009a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006290:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006296:	2301      	movs	r3, #1
 8006298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800629a:	2300      	movs	r3, #0
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800629e:	2300      	movs	r3, #0
 80062a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80062a2:	f107 031c 	add.w	r3, r7, #28
 80062a6:	4619      	mov	r1, r3
 80062a8:	4835      	ldr	r0, [pc, #212]	; (8006380 <MX_GPIO_Init+0x270>)
 80062aa:	f003 fbc3 	bl	8009a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80062ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062b4:	2301      	movs	r3, #1
 80062b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062b8:	2300      	movs	r3, #0
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062bc:	2300      	movs	r3, #0
 80062be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062c0:	f107 031c 	add.w	r3, r7, #28
 80062c4:	4619      	mov	r1, r3
 80062c6:	482f      	ldr	r0, [pc, #188]	; (8006384 <MX_GPIO_Init+0x274>)
 80062c8:	f003 fbb4 	bl	8009a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80062cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80062d2:	2300      	movs	r3, #0
 80062d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062d6:	2300      	movs	r3, #0
 80062d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80062da:	f107 031c 	add.w	r3, r7, #28
 80062de:	4619      	mov	r1, r3
 80062e0:	4829      	ldr	r0, [pc, #164]	; (8006388 <MX_GPIO_Init+0x278>)
 80062e2:	f003 fba7 	bl	8009a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80062e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062ec:	2301      	movs	r3, #1
 80062ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062f0:	2300      	movs	r3, #0
 80062f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062f4:	2300      	movs	r3, #0
 80062f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80062f8:	f107 031c 	add.w	r3, r7, #28
 80062fc:	4619      	mov	r1, r3
 80062fe:	4822      	ldr	r0, [pc, #136]	; (8006388 <MX_GPIO_Init+0x278>)
 8006300:	f003 fb98 	bl	8009a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800630a:	2301      	movs	r3, #1
 800630c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800630e:	2301      	movs	r3, #1
 8006310:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006312:	2300      	movs	r3, #0
 8006314:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006316:	f107 031c 	add.w	r3, r7, #28
 800631a:	4619      	mov	r1, r3
 800631c:	481a      	ldr	r0, [pc, #104]	; (8006388 <MX_GPIO_Init+0x278>)
 800631e:	f003 fb89 	bl	8009a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006322:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006326:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006328:	2301      	movs	r3, #1
 800632a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800632c:	2300      	movs	r3, #0
 800632e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006330:	2300      	movs	r3, #0
 8006332:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006334:	f107 031c 	add.w	r3, r7, #28
 8006338:	4619      	mov	r1, r3
 800633a:	4814      	ldr	r0, [pc, #80]	; (800638c <MX_GPIO_Init+0x27c>)
 800633c:	f003 fb7a 	bl	8009a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006340:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006346:	2300      	movs	r3, #0
 8006348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800634a:	2300      	movs	r3, #0
 800634c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800634e:	f107 031c 	add.w	r3, r7, #28
 8006352:	4619      	mov	r1, r3
 8006354:	480d      	ldr	r0, [pc, #52]	; (800638c <MX_GPIO_Init+0x27c>)
 8006356:	f003 fb6d 	bl	8009a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 800635a:	239b      	movs	r3, #155	; 0x9b
 800635c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800635e:	2300      	movs	r3, #0
 8006360:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006362:	2301      	movs	r3, #1
 8006364:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006366:	f107 031c 	add.w	r3, r7, #28
 800636a:	4619      	mov	r1, r3
 800636c:	4806      	ldr	r0, [pc, #24]	; (8006388 <MX_GPIO_Init+0x278>)
 800636e:	f003 fb61 	bl	8009a34 <HAL_GPIO_Init>

}
 8006372:	bf00      	nop
 8006374:	3730      	adds	r7, #48	; 0x30
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	40023800 	.word	0x40023800
 8006380:	40021000 	.word	0x40021000
 8006384:	40020400 	.word	0x40020400
 8006388:	40020c00 	.word	0x40020c00
 800638c:	40020000 	.word	0x40020000
 8006390:	40020800 	.word	0x40020800

08006394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006398:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800639a:	e7fe      	b.n	800639a <Error_Handler+0x6>

0800639c <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 800639c:	b480      	push	{r7}
 800639e:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 80063a0:	bf00      	nop
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
	...

080063ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063b2:	2300      	movs	r3, #0
 80063b4:	607b      	str	r3, [r7, #4]
 80063b6:	4b10      	ldr	r3, [pc, #64]	; (80063f8 <HAL_MspInit+0x4c>)
 80063b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ba:	4a0f      	ldr	r2, [pc, #60]	; (80063f8 <HAL_MspInit+0x4c>)
 80063bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063c0:	6453      	str	r3, [r2, #68]	; 0x44
 80063c2:	4b0d      	ldr	r3, [pc, #52]	; (80063f8 <HAL_MspInit+0x4c>)
 80063c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063ca:	607b      	str	r3, [r7, #4]
 80063cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80063ce:	2300      	movs	r3, #0
 80063d0:	603b      	str	r3, [r7, #0]
 80063d2:	4b09      	ldr	r3, [pc, #36]	; (80063f8 <HAL_MspInit+0x4c>)
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	4a08      	ldr	r2, [pc, #32]	; (80063f8 <HAL_MspInit+0x4c>)
 80063d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063dc:	6413      	str	r3, [r2, #64]	; 0x40
 80063de:	4b06      	ldr	r3, [pc, #24]	; (80063f8 <HAL_MspInit+0x4c>)
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063e6:	603b      	str	r3, [r7, #0]
 80063e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	40023800 	.word	0x40023800

080063fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b08c      	sub	sp, #48	; 0x30
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006404:	f107 031c 	add.w	r3, r7, #28
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	605a      	str	r2, [r3, #4]
 800640e:	609a      	str	r2, [r3, #8]
 8006410:	60da      	str	r2, [r3, #12]
 8006412:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a4a      	ldr	r2, [pc, #296]	; (8006544 <HAL_ADC_MspInit+0x148>)
 800641a:	4293      	cmp	r3, r2
 800641c:	f040 808e 	bne.w	800653c <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006420:	2300      	movs	r3, #0
 8006422:	61bb      	str	r3, [r7, #24]
 8006424:	4b48      	ldr	r3, [pc, #288]	; (8006548 <HAL_ADC_MspInit+0x14c>)
 8006426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006428:	4a47      	ldr	r2, [pc, #284]	; (8006548 <HAL_ADC_MspInit+0x14c>)
 800642a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800642e:	6453      	str	r3, [r2, #68]	; 0x44
 8006430:	4b45      	ldr	r3, [pc, #276]	; (8006548 <HAL_ADC_MspInit+0x14c>)
 8006432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006438:	61bb      	str	r3, [r7, #24]
 800643a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800643c:	2300      	movs	r3, #0
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	4b41      	ldr	r3, [pc, #260]	; (8006548 <HAL_ADC_MspInit+0x14c>)
 8006442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006444:	4a40      	ldr	r2, [pc, #256]	; (8006548 <HAL_ADC_MspInit+0x14c>)
 8006446:	f043 0304 	orr.w	r3, r3, #4
 800644a:	6313      	str	r3, [r2, #48]	; 0x30
 800644c:	4b3e      	ldr	r3, [pc, #248]	; (8006548 <HAL_ADC_MspInit+0x14c>)
 800644e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	617b      	str	r3, [r7, #20]
 8006456:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006458:	2300      	movs	r3, #0
 800645a:	613b      	str	r3, [r7, #16]
 800645c:	4b3a      	ldr	r3, [pc, #232]	; (8006548 <HAL_ADC_MspInit+0x14c>)
 800645e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006460:	4a39      	ldr	r2, [pc, #228]	; (8006548 <HAL_ADC_MspInit+0x14c>)
 8006462:	f043 0301 	orr.w	r3, r3, #1
 8006466:	6313      	str	r3, [r2, #48]	; 0x30
 8006468:	4b37      	ldr	r3, [pc, #220]	; (8006548 <HAL_ADC_MspInit+0x14c>)
 800646a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	613b      	str	r3, [r7, #16]
 8006472:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006474:	2300      	movs	r3, #0
 8006476:	60fb      	str	r3, [r7, #12]
 8006478:	4b33      	ldr	r3, [pc, #204]	; (8006548 <HAL_ADC_MspInit+0x14c>)
 800647a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647c:	4a32      	ldr	r2, [pc, #200]	; (8006548 <HAL_ADC_MspInit+0x14c>)
 800647e:	f043 0302 	orr.w	r3, r3, #2
 8006482:	6313      	str	r3, [r2, #48]	; 0x30
 8006484:	4b30      	ldr	r3, [pc, #192]	; (8006548 <HAL_ADC_MspInit+0x14c>)
 8006486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006490:	230f      	movs	r3, #15
 8006492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006494:	2303      	movs	r3, #3
 8006496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006498:	2300      	movs	r3, #0
 800649a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800649c:	f107 031c 	add.w	r3, r7, #28
 80064a0:	4619      	mov	r1, r3
 80064a2:	482a      	ldr	r0, [pc, #168]	; (800654c <HAL_ADC_MspInit+0x150>)
 80064a4:	f003 fac6 	bl	8009a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80064a8:	23ff      	movs	r3, #255	; 0xff
 80064aa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064ac:	2303      	movs	r3, #3
 80064ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b0:	2300      	movs	r3, #0
 80064b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064b4:	f107 031c 	add.w	r3, r7, #28
 80064b8:	4619      	mov	r1, r3
 80064ba:	4825      	ldr	r0, [pc, #148]	; (8006550 <HAL_ADC_MspInit+0x154>)
 80064bc:	f003 faba 	bl	8009a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80064c0:	2303      	movs	r3, #3
 80064c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064c4:	2303      	movs	r3, #3
 80064c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064c8:	2300      	movs	r3, #0
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064cc:	f107 031c 	add.w	r3, r7, #28
 80064d0:	4619      	mov	r1, r3
 80064d2:	4820      	ldr	r0, [pc, #128]	; (8006554 <HAL_ADC_MspInit+0x158>)
 80064d4:	f003 faae 	bl	8009a34 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80064d8:	4b1f      	ldr	r3, [pc, #124]	; (8006558 <HAL_ADC_MspInit+0x15c>)
 80064da:	4a20      	ldr	r2, [pc, #128]	; (800655c <HAL_ADC_MspInit+0x160>)
 80064dc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80064de:	4b1e      	ldr	r3, [pc, #120]	; (8006558 <HAL_ADC_MspInit+0x15c>)
 80064e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80064e4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064e6:	4b1c      	ldr	r3, [pc, #112]	; (8006558 <HAL_ADC_MspInit+0x15c>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80064ec:	4b1a      	ldr	r3, [pc, #104]	; (8006558 <HAL_ADC_MspInit+0x15c>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80064f2:	4b19      	ldr	r3, [pc, #100]	; (8006558 <HAL_ADC_MspInit+0x15c>)
 80064f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064f8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80064fa:	4b17      	ldr	r3, [pc, #92]	; (8006558 <HAL_ADC_MspInit+0x15c>)
 80064fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006500:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006502:	4b15      	ldr	r3, [pc, #84]	; (8006558 <HAL_ADC_MspInit+0x15c>)
 8006504:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006508:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800650a:	4b13      	ldr	r3, [pc, #76]	; (8006558 <HAL_ADC_MspInit+0x15c>)
 800650c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006510:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006512:	4b11      	ldr	r3, [pc, #68]	; (8006558 <HAL_ADC_MspInit+0x15c>)
 8006514:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006518:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800651a:	4b0f      	ldr	r3, [pc, #60]	; (8006558 <HAL_ADC_MspInit+0x15c>)
 800651c:	2200      	movs	r2, #0
 800651e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006520:	480d      	ldr	r0, [pc, #52]	; (8006558 <HAL_ADC_MspInit+0x15c>)
 8006522:	f002 feeb 	bl	80092fc <HAL_DMA_Init>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 800652c:	f7ff ff32 	bl	8006394 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a09      	ldr	r2, [pc, #36]	; (8006558 <HAL_ADC_MspInit+0x15c>)
 8006534:	639a      	str	r2, [r3, #56]	; 0x38
 8006536:	4a08      	ldr	r2, [pc, #32]	; (8006558 <HAL_ADC_MspInit+0x15c>)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800653c:	bf00      	nop
 800653e:	3730      	adds	r7, #48	; 0x30
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	40012100 	.word	0x40012100
 8006548:	40023800 	.word	0x40023800
 800654c:	40020800 	.word	0x40020800
 8006550:	40020000 	.word	0x40020000
 8006554:	40020400 	.word	0x40020400
 8006558:	2003ec9c 	.word	0x2003ec9c
 800655c:	40026440 	.word	0x40026440

08006560 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08c      	sub	sp, #48	; 0x30
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006568:	f107 031c 	add.w	r3, r7, #28
 800656c:	2200      	movs	r2, #0
 800656e:	601a      	str	r2, [r3, #0]
 8006570:	605a      	str	r2, [r3, #4]
 8006572:	609a      	str	r2, [r3, #8]
 8006574:	60da      	str	r2, [r3, #12]
 8006576:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a32      	ldr	r2, [pc, #200]	; (8006648 <HAL_I2C_MspInit+0xe8>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d12c      	bne.n	80065dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006582:	2300      	movs	r3, #0
 8006584:	61bb      	str	r3, [r7, #24]
 8006586:	4b31      	ldr	r3, [pc, #196]	; (800664c <HAL_I2C_MspInit+0xec>)
 8006588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658a:	4a30      	ldr	r2, [pc, #192]	; (800664c <HAL_I2C_MspInit+0xec>)
 800658c:	f043 0302 	orr.w	r3, r3, #2
 8006590:	6313      	str	r3, [r2, #48]	; 0x30
 8006592:	4b2e      	ldr	r3, [pc, #184]	; (800664c <HAL_I2C_MspInit+0xec>)
 8006594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	61bb      	str	r3, [r7, #24]
 800659c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800659e:	23c0      	movs	r3, #192	; 0xc0
 80065a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80065a2:	2312      	movs	r3, #18
 80065a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80065a6:	2301      	movs	r3, #1
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065aa:	2303      	movs	r3, #3
 80065ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80065ae:	2304      	movs	r3, #4
 80065b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065b2:	f107 031c 	add.w	r3, r7, #28
 80065b6:	4619      	mov	r1, r3
 80065b8:	4825      	ldr	r0, [pc, #148]	; (8006650 <HAL_I2C_MspInit+0xf0>)
 80065ba:	f003 fa3b 	bl	8009a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80065be:	2300      	movs	r3, #0
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	4b22      	ldr	r3, [pc, #136]	; (800664c <HAL_I2C_MspInit+0xec>)
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	4a21      	ldr	r2, [pc, #132]	; (800664c <HAL_I2C_MspInit+0xec>)
 80065c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065cc:	6413      	str	r3, [r2, #64]	; 0x40
 80065ce:	4b1f      	ldr	r3, [pc, #124]	; (800664c <HAL_I2C_MspInit+0xec>)
 80065d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80065da:	e031      	b.n	8006640 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a1c      	ldr	r2, [pc, #112]	; (8006654 <HAL_I2C_MspInit+0xf4>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d12c      	bne.n	8006640 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065e6:	2300      	movs	r3, #0
 80065e8:	613b      	str	r3, [r7, #16]
 80065ea:	4b18      	ldr	r3, [pc, #96]	; (800664c <HAL_I2C_MspInit+0xec>)
 80065ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ee:	4a17      	ldr	r2, [pc, #92]	; (800664c <HAL_I2C_MspInit+0xec>)
 80065f0:	f043 0302 	orr.w	r3, r3, #2
 80065f4:	6313      	str	r3, [r2, #48]	; 0x30
 80065f6:	4b15      	ldr	r3, [pc, #84]	; (800664c <HAL_I2C_MspInit+0xec>)
 80065f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	613b      	str	r3, [r7, #16]
 8006600:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006602:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006608:	2312      	movs	r3, #18
 800660a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800660c:	2301      	movs	r3, #1
 800660e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006610:	2303      	movs	r3, #3
 8006612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006614:	2304      	movs	r3, #4
 8006616:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006618:	f107 031c 	add.w	r3, r7, #28
 800661c:	4619      	mov	r1, r3
 800661e:	480c      	ldr	r0, [pc, #48]	; (8006650 <HAL_I2C_MspInit+0xf0>)
 8006620:	f003 fa08 	bl	8009a34 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006624:	2300      	movs	r3, #0
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	4b08      	ldr	r3, [pc, #32]	; (800664c <HAL_I2C_MspInit+0xec>)
 800662a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662c:	4a07      	ldr	r2, [pc, #28]	; (800664c <HAL_I2C_MspInit+0xec>)
 800662e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006632:	6413      	str	r3, [r2, #64]	; 0x40
 8006634:	4b05      	ldr	r3, [pc, #20]	; (800664c <HAL_I2C_MspInit+0xec>)
 8006636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006638:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800663c:	60fb      	str	r3, [r7, #12]
 800663e:	68fb      	ldr	r3, [r7, #12]
}
 8006640:	bf00      	nop
 8006642:	3730      	adds	r7, #48	; 0x30
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	40005400 	.word	0x40005400
 800664c:	40023800 	.word	0x40023800
 8006650:	40020400 	.word	0x40020400
 8006654:	40005800 	.word	0x40005800

08006658 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08a      	sub	sp, #40	; 0x28
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006660:	f107 0314 	add.w	r3, r7, #20
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	605a      	str	r2, [r3, #4]
 800666a:	609a      	str	r2, [r3, #8]
 800666c:	60da      	str	r2, [r3, #12]
 800666e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a69      	ldr	r2, [pc, #420]	; (800681c <HAL_SD_MspInit+0x1c4>)
 8006676:	4293      	cmp	r3, r2
 8006678:	f040 80cb 	bne.w	8006812 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800667c:	2300      	movs	r3, #0
 800667e:	613b      	str	r3, [r7, #16]
 8006680:	4b67      	ldr	r3, [pc, #412]	; (8006820 <HAL_SD_MspInit+0x1c8>)
 8006682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006684:	4a66      	ldr	r2, [pc, #408]	; (8006820 <HAL_SD_MspInit+0x1c8>)
 8006686:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800668a:	6453      	str	r3, [r2, #68]	; 0x44
 800668c:	4b64      	ldr	r3, [pc, #400]	; (8006820 <HAL_SD_MspInit+0x1c8>)
 800668e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006694:	613b      	str	r3, [r7, #16]
 8006696:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006698:	2300      	movs	r3, #0
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	4b60      	ldr	r3, [pc, #384]	; (8006820 <HAL_SD_MspInit+0x1c8>)
 800669e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a0:	4a5f      	ldr	r2, [pc, #380]	; (8006820 <HAL_SD_MspInit+0x1c8>)
 80066a2:	f043 0304 	orr.w	r3, r3, #4
 80066a6:	6313      	str	r3, [r2, #48]	; 0x30
 80066a8:	4b5d      	ldr	r3, [pc, #372]	; (8006820 <HAL_SD_MspInit+0x1c8>)
 80066aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ac:	f003 0304 	and.w	r3, r3, #4
 80066b0:	60fb      	str	r3, [r7, #12]
 80066b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80066b4:	2300      	movs	r3, #0
 80066b6:	60bb      	str	r3, [r7, #8]
 80066b8:	4b59      	ldr	r3, [pc, #356]	; (8006820 <HAL_SD_MspInit+0x1c8>)
 80066ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066bc:	4a58      	ldr	r2, [pc, #352]	; (8006820 <HAL_SD_MspInit+0x1c8>)
 80066be:	f043 0308 	orr.w	r3, r3, #8
 80066c2:	6313      	str	r3, [r2, #48]	; 0x30
 80066c4:	4b56      	ldr	r3, [pc, #344]	; (8006820 <HAL_SD_MspInit+0x1c8>)
 80066c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c8:	f003 0308 	and.w	r3, r3, #8
 80066cc:	60bb      	str	r3, [r7, #8]
 80066ce:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80066d0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80066d4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066d6:	2302      	movs	r3, #2
 80066d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066da:	2300      	movs	r3, #0
 80066dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066de:	2303      	movs	r3, #3
 80066e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80066e2:	230c      	movs	r3, #12
 80066e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066e6:	f107 0314 	add.w	r3, r7, #20
 80066ea:	4619      	mov	r1, r3
 80066ec:	484d      	ldr	r0, [pc, #308]	; (8006824 <HAL_SD_MspInit+0x1cc>)
 80066ee:	f003 f9a1 	bl	8009a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80066f2:	2304      	movs	r3, #4
 80066f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066f6:	2302      	movs	r3, #2
 80066f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066fa:	2300      	movs	r3, #0
 80066fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066fe:	2303      	movs	r3, #3
 8006700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006702:	230c      	movs	r3, #12
 8006704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006706:	f107 0314 	add.w	r3, r7, #20
 800670a:	4619      	mov	r1, r3
 800670c:	4846      	ldr	r0, [pc, #280]	; (8006828 <HAL_SD_MspInit+0x1d0>)
 800670e:	f003 f991 	bl	8009a34 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006712:	4b46      	ldr	r3, [pc, #280]	; (800682c <HAL_SD_MspInit+0x1d4>)
 8006714:	4a46      	ldr	r2, [pc, #280]	; (8006830 <HAL_SD_MspInit+0x1d8>)
 8006716:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006718:	4b44      	ldr	r3, [pc, #272]	; (800682c <HAL_SD_MspInit+0x1d4>)
 800671a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800671e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006720:	4b42      	ldr	r3, [pc, #264]	; (800682c <HAL_SD_MspInit+0x1d4>)
 8006722:	2200      	movs	r2, #0
 8006724:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006726:	4b41      	ldr	r3, [pc, #260]	; (800682c <HAL_SD_MspInit+0x1d4>)
 8006728:	2200      	movs	r2, #0
 800672a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800672c:	4b3f      	ldr	r3, [pc, #252]	; (800682c <HAL_SD_MspInit+0x1d4>)
 800672e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006732:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006734:	4b3d      	ldr	r3, [pc, #244]	; (800682c <HAL_SD_MspInit+0x1d4>)
 8006736:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800673a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800673c:	4b3b      	ldr	r3, [pc, #236]	; (800682c <HAL_SD_MspInit+0x1d4>)
 800673e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006742:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006744:	4b39      	ldr	r3, [pc, #228]	; (800682c <HAL_SD_MspInit+0x1d4>)
 8006746:	2220      	movs	r2, #32
 8006748:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800674a:	4b38      	ldr	r3, [pc, #224]	; (800682c <HAL_SD_MspInit+0x1d4>)
 800674c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006750:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006752:	4b36      	ldr	r3, [pc, #216]	; (800682c <HAL_SD_MspInit+0x1d4>)
 8006754:	2204      	movs	r2, #4
 8006756:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006758:	4b34      	ldr	r3, [pc, #208]	; (800682c <HAL_SD_MspInit+0x1d4>)
 800675a:	2203      	movs	r2, #3
 800675c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800675e:	4b33      	ldr	r3, [pc, #204]	; (800682c <HAL_SD_MspInit+0x1d4>)
 8006760:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006764:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006766:	4b31      	ldr	r3, [pc, #196]	; (800682c <HAL_SD_MspInit+0x1d4>)
 8006768:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800676c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800676e:	482f      	ldr	r0, [pc, #188]	; (800682c <HAL_SD_MspInit+0x1d4>)
 8006770:	f002 fdc4 	bl	80092fc <HAL_DMA_Init>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 800677a:	f7ff fe0b 	bl	8006394 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a2a      	ldr	r2, [pc, #168]	; (800682c <HAL_SD_MspInit+0x1d4>)
 8006782:	641a      	str	r2, [r3, #64]	; 0x40
 8006784:	4a29      	ldr	r2, [pc, #164]	; (800682c <HAL_SD_MspInit+0x1d4>)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800678a:	4b2a      	ldr	r3, [pc, #168]	; (8006834 <HAL_SD_MspInit+0x1dc>)
 800678c:	4a2a      	ldr	r2, [pc, #168]	; (8006838 <HAL_SD_MspInit+0x1e0>)
 800678e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006790:	4b28      	ldr	r3, [pc, #160]	; (8006834 <HAL_SD_MspInit+0x1dc>)
 8006792:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006796:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006798:	4b26      	ldr	r3, [pc, #152]	; (8006834 <HAL_SD_MspInit+0x1dc>)
 800679a:	2240      	movs	r2, #64	; 0x40
 800679c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800679e:	4b25      	ldr	r3, [pc, #148]	; (8006834 <HAL_SD_MspInit+0x1dc>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80067a4:	4b23      	ldr	r3, [pc, #140]	; (8006834 <HAL_SD_MspInit+0x1dc>)
 80067a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067aa:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80067ac:	4b21      	ldr	r3, [pc, #132]	; (8006834 <HAL_SD_MspInit+0x1dc>)
 80067ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80067b2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80067b4:	4b1f      	ldr	r3, [pc, #124]	; (8006834 <HAL_SD_MspInit+0x1dc>)
 80067b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80067ba:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80067bc:	4b1d      	ldr	r3, [pc, #116]	; (8006834 <HAL_SD_MspInit+0x1dc>)
 80067be:	2220      	movs	r2, #32
 80067c0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80067c2:	4b1c      	ldr	r3, [pc, #112]	; (8006834 <HAL_SD_MspInit+0x1dc>)
 80067c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80067c8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80067ca:	4b1a      	ldr	r3, [pc, #104]	; (8006834 <HAL_SD_MspInit+0x1dc>)
 80067cc:	2204      	movs	r2, #4
 80067ce:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80067d0:	4b18      	ldr	r3, [pc, #96]	; (8006834 <HAL_SD_MspInit+0x1dc>)
 80067d2:	2203      	movs	r2, #3
 80067d4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80067d6:	4b17      	ldr	r3, [pc, #92]	; (8006834 <HAL_SD_MspInit+0x1dc>)
 80067d8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80067dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80067de:	4b15      	ldr	r3, [pc, #84]	; (8006834 <HAL_SD_MspInit+0x1dc>)
 80067e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80067e4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80067e6:	4813      	ldr	r0, [pc, #76]	; (8006834 <HAL_SD_MspInit+0x1dc>)
 80067e8:	f002 fd88 	bl	80092fc <HAL_DMA_Init>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80067f2:	f7ff fdcf 	bl	8006394 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a0e      	ldr	r2, [pc, #56]	; (8006834 <HAL_SD_MspInit+0x1dc>)
 80067fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80067fc:	4a0d      	ldr	r2, [pc, #52]	; (8006834 <HAL_SD_MspInit+0x1dc>)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006802:	2200      	movs	r2, #0
 8006804:	2100      	movs	r1, #0
 8006806:	2031      	movs	r0, #49	; 0x31
 8006808:	f002 fd41 	bl	800928e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800680c:	2031      	movs	r0, #49	; 0x31
 800680e:	f002 fd5a 	bl	80092c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006812:	bf00      	nop
 8006814:	3728      	adds	r7, #40	; 0x28
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	40012c00 	.word	0x40012c00
 8006820:	40023800 	.word	0x40023800
 8006824:	40020800 	.word	0x40020800
 8006828:	40020c00 	.word	0x40020c00
 800682c:	2003e7c4 	.word	0x2003e7c4
 8006830:	40026458 	.word	0x40026458
 8006834:	2003eaf8 	.word	0x2003eaf8
 8006838:	400264a0 	.word	0x400264a0

0800683c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b08a      	sub	sp, #40	; 0x28
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006844:	f107 0314 	add.w	r3, r7, #20
 8006848:	2200      	movs	r2, #0
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	605a      	str	r2, [r3, #4]
 800684e:	609a      	str	r2, [r3, #8]
 8006850:	60da      	str	r2, [r3, #12]
 8006852:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a19      	ldr	r2, [pc, #100]	; (80068c0 <HAL_SPI_MspInit+0x84>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d12c      	bne.n	80068b8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800685e:	2300      	movs	r3, #0
 8006860:	613b      	str	r3, [r7, #16]
 8006862:	4b18      	ldr	r3, [pc, #96]	; (80068c4 <HAL_SPI_MspInit+0x88>)
 8006864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006866:	4a17      	ldr	r2, [pc, #92]	; (80068c4 <HAL_SPI_MspInit+0x88>)
 8006868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800686c:	6413      	str	r3, [r2, #64]	; 0x40
 800686e:	4b15      	ldr	r3, [pc, #84]	; (80068c4 <HAL_SPI_MspInit+0x88>)
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006876:	613b      	str	r3, [r7, #16]
 8006878:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]
 800687e:	4b11      	ldr	r3, [pc, #68]	; (80068c4 <HAL_SPI_MspInit+0x88>)
 8006880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006882:	4a10      	ldr	r2, [pc, #64]	; (80068c4 <HAL_SPI_MspInit+0x88>)
 8006884:	f043 0302 	orr.w	r3, r3, #2
 8006888:	6313      	str	r3, [r2, #48]	; 0x30
 800688a:	4b0e      	ldr	r3, [pc, #56]	; (80068c4 <HAL_SPI_MspInit+0x88>)
 800688c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006896:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800689a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800689c:	2302      	movs	r3, #2
 800689e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068a0:	2300      	movs	r3, #0
 80068a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068a4:	2303      	movs	r3, #3
 80068a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80068a8:	2305      	movs	r3, #5
 80068aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068ac:	f107 0314 	add.w	r3, r7, #20
 80068b0:	4619      	mov	r1, r3
 80068b2:	4805      	ldr	r0, [pc, #20]	; (80068c8 <HAL_SPI_MspInit+0x8c>)
 80068b4:	f003 f8be 	bl	8009a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80068b8:	bf00      	nop
 80068ba:	3728      	adds	r7, #40	; 0x28
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	40003800 	.word	0x40003800
 80068c4:	40023800 	.word	0x40023800
 80068c8:	40020400 	.word	0x40020400

080068cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b08c      	sub	sp, #48	; 0x30
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068d4:	f107 031c 	add.w	r3, r7, #28
 80068d8:	2200      	movs	r2, #0
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	605a      	str	r2, [r3, #4]
 80068de:	609a      	str	r2, [r3, #8]
 80068e0:	60da      	str	r2, [r3, #12]
 80068e2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a2d      	ldr	r2, [pc, #180]	; (80069a0 <HAL_TIM_PWM_MspInit+0xd4>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d12d      	bne.n	800694a <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80068ee:	2300      	movs	r3, #0
 80068f0:	61bb      	str	r3, [r7, #24]
 80068f2:	4b2c      	ldr	r3, [pc, #176]	; (80069a4 <HAL_TIM_PWM_MspInit+0xd8>)
 80068f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f6:	4a2b      	ldr	r2, [pc, #172]	; (80069a4 <HAL_TIM_PWM_MspInit+0xd8>)
 80068f8:	f043 0301 	orr.w	r3, r3, #1
 80068fc:	6453      	str	r3, [r2, #68]	; 0x44
 80068fe:	4b29      	ldr	r3, [pc, #164]	; (80069a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8006900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	61bb      	str	r3, [r7, #24]
 8006908:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800690a:	2300      	movs	r3, #0
 800690c:	617b      	str	r3, [r7, #20]
 800690e:	4b25      	ldr	r3, [pc, #148]	; (80069a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8006910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006912:	4a24      	ldr	r2, [pc, #144]	; (80069a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8006914:	f043 0310 	orr.w	r3, r3, #16
 8006918:	6313      	str	r3, [r2, #48]	; 0x30
 800691a:	4b22      	ldr	r3, [pc, #136]	; (80069a4 <HAL_TIM_PWM_MspInit+0xd8>)
 800691c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691e:	f003 0310 	and.w	r3, r3, #16
 8006922:	617b      	str	r3, [r7, #20]
 8006924:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006926:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800692a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800692c:	2302      	movs	r3, #2
 800692e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006930:	2300      	movs	r3, #0
 8006932:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006934:	2300      	movs	r3, #0
 8006936:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006938:	2301      	movs	r3, #1
 800693a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800693c:	f107 031c 	add.w	r3, r7, #28
 8006940:	4619      	mov	r1, r3
 8006942:	4819      	ldr	r0, [pc, #100]	; (80069a8 <HAL_TIM_PWM_MspInit+0xdc>)
 8006944:	f003 f876 	bl	8009a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006948:	e026      	b.n	8006998 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a17      	ldr	r2, [pc, #92]	; (80069ac <HAL_TIM_PWM_MspInit+0xe0>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d10e      	bne.n	8006972 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006954:	2300      	movs	r3, #0
 8006956:	613b      	str	r3, [r7, #16]
 8006958:	4b12      	ldr	r3, [pc, #72]	; (80069a4 <HAL_TIM_PWM_MspInit+0xd8>)
 800695a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695c:	4a11      	ldr	r2, [pc, #68]	; (80069a4 <HAL_TIM_PWM_MspInit+0xd8>)
 800695e:	f043 0302 	orr.w	r3, r3, #2
 8006962:	6413      	str	r3, [r2, #64]	; 0x40
 8006964:	4b0f      	ldr	r3, [pc, #60]	; (80069a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8006966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	613b      	str	r3, [r7, #16]
 800696e:	693b      	ldr	r3, [r7, #16]
}
 8006970:	e012      	b.n	8006998 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a0e      	ldr	r2, [pc, #56]	; (80069b0 <HAL_TIM_PWM_MspInit+0xe4>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d10d      	bne.n	8006998 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800697c:	2300      	movs	r3, #0
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	4b08      	ldr	r3, [pc, #32]	; (80069a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8006982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006984:	4a07      	ldr	r2, [pc, #28]	; (80069a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8006986:	f043 0304 	orr.w	r3, r3, #4
 800698a:	6413      	str	r3, [r2, #64]	; 0x40
 800698c:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <HAL_TIM_PWM_MspInit+0xd8>)
 800698e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	60fb      	str	r3, [r7, #12]
 8006996:	68fb      	ldr	r3, [r7, #12]
}
 8006998:	bf00      	nop
 800699a:	3730      	adds	r7, #48	; 0x30
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	40010000 	.word	0x40010000
 80069a4:	40023800 	.word	0x40023800
 80069a8:	40021000 	.word	0x40021000
 80069ac:	40000400 	.word	0x40000400
 80069b0:	40000800 	.word	0x40000800

080069b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b088      	sub	sp, #32
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a3e      	ldr	r2, [pc, #248]	; (8006abc <HAL_TIM_Base_MspInit+0x108>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d116      	bne.n	80069f4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80069c6:	2300      	movs	r3, #0
 80069c8:	61fb      	str	r3, [r7, #28]
 80069ca:	4b3d      	ldr	r3, [pc, #244]	; (8006ac0 <HAL_TIM_Base_MspInit+0x10c>)
 80069cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ce:	4a3c      	ldr	r2, [pc, #240]	; (8006ac0 <HAL_TIM_Base_MspInit+0x10c>)
 80069d0:	f043 0310 	orr.w	r3, r3, #16
 80069d4:	6413      	str	r3, [r2, #64]	; 0x40
 80069d6:	4b3a      	ldr	r3, [pc, #232]	; (8006ac0 <HAL_TIM_Base_MspInit+0x10c>)
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	f003 0310 	and.w	r3, r3, #16
 80069de:	61fb      	str	r3, [r7, #28]
 80069e0:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80069e2:	2200      	movs	r2, #0
 80069e4:	2101      	movs	r1, #1
 80069e6:	2036      	movs	r0, #54	; 0x36
 80069e8:	f002 fc51 	bl	800928e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80069ec:	2036      	movs	r0, #54	; 0x36
 80069ee:	f002 fc6a 	bl	80092c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80069f2:	e05e      	b.n	8006ab2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a32      	ldr	r2, [pc, #200]	; (8006ac4 <HAL_TIM_Base_MspInit+0x110>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d116      	bne.n	8006a2c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80069fe:	2300      	movs	r3, #0
 8006a00:	61bb      	str	r3, [r7, #24]
 8006a02:	4b2f      	ldr	r3, [pc, #188]	; (8006ac0 <HAL_TIM_Base_MspInit+0x10c>)
 8006a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a06:	4a2e      	ldr	r2, [pc, #184]	; (8006ac0 <HAL_TIM_Base_MspInit+0x10c>)
 8006a08:	f043 0320 	orr.w	r3, r3, #32
 8006a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8006a0e:	4b2c      	ldr	r3, [pc, #176]	; (8006ac0 <HAL_TIM_Base_MspInit+0x10c>)
 8006a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	61bb      	str	r3, [r7, #24]
 8006a18:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	2037      	movs	r0, #55	; 0x37
 8006a20:	f002 fc35 	bl	800928e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006a24:	2037      	movs	r0, #55	; 0x37
 8006a26:	f002 fc4e 	bl	80092c6 <HAL_NVIC_EnableIRQ>
}
 8006a2a:	e042      	b.n	8006ab2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a25      	ldr	r2, [pc, #148]	; (8006ac8 <HAL_TIM_Base_MspInit+0x114>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d10e      	bne.n	8006a54 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006a36:	2300      	movs	r3, #0
 8006a38:	617b      	str	r3, [r7, #20]
 8006a3a:	4b21      	ldr	r3, [pc, #132]	; (8006ac0 <HAL_TIM_Base_MspInit+0x10c>)
 8006a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a3e:	4a20      	ldr	r2, [pc, #128]	; (8006ac0 <HAL_TIM_Base_MspInit+0x10c>)
 8006a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a44:	6453      	str	r3, [r2, #68]	; 0x44
 8006a46:	4b1e      	ldr	r3, [pc, #120]	; (8006ac0 <HAL_TIM_Base_MspInit+0x10c>)
 8006a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4e:	617b      	str	r3, [r7, #20]
 8006a50:	697b      	ldr	r3, [r7, #20]
}
 8006a52:	e02e      	b.n	8006ab2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a1c      	ldr	r2, [pc, #112]	; (8006acc <HAL_TIM_Base_MspInit+0x118>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d10e      	bne.n	8006a7c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006a5e:	2300      	movs	r3, #0
 8006a60:	613b      	str	r3, [r7, #16]
 8006a62:	4b17      	ldr	r3, [pc, #92]	; (8006ac0 <HAL_TIM_Base_MspInit+0x10c>)
 8006a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a66:	4a16      	ldr	r2, [pc, #88]	; (8006ac0 <HAL_TIM_Base_MspInit+0x10c>)
 8006a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8006a6e:	4b14      	ldr	r3, [pc, #80]	; (8006ac0 <HAL_TIM_Base_MspInit+0x10c>)
 8006a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a76:	613b      	str	r3, [r7, #16]
 8006a78:	693b      	ldr	r3, [r7, #16]
}
 8006a7a:	e01a      	b.n	8006ab2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a13      	ldr	r2, [pc, #76]	; (8006ad0 <HAL_TIM_Base_MspInit+0x11c>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d115      	bne.n	8006ab2 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006a86:	2300      	movs	r3, #0
 8006a88:	60fb      	str	r3, [r7, #12]
 8006a8a:	4b0d      	ldr	r3, [pc, #52]	; (8006ac0 <HAL_TIM_Base_MspInit+0x10c>)
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8e:	4a0c      	ldr	r2, [pc, #48]	; (8006ac0 <HAL_TIM_Base_MspInit+0x10c>)
 8006a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a94:	6413      	str	r3, [r2, #64]	; 0x40
 8006a96:	4b0a      	ldr	r3, [pc, #40]	; (8006ac0 <HAL_TIM_Base_MspInit+0x10c>)
 8006a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	202c      	movs	r0, #44	; 0x2c
 8006aa8:	f002 fbf1 	bl	800928e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006aac:	202c      	movs	r0, #44	; 0x2c
 8006aae:	f002 fc0a 	bl	80092c6 <HAL_NVIC_EnableIRQ>
}
 8006ab2:	bf00      	nop
 8006ab4:	3720      	adds	r7, #32
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	40001000 	.word	0x40001000
 8006ac0:	40023800 	.word	0x40023800
 8006ac4:	40001400 	.word	0x40001400
 8006ac8:	40014400 	.word	0x40014400
 8006acc:	40014800 	.word	0x40014800
 8006ad0:	40001c00 	.word	0x40001c00

08006ad4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b08a      	sub	sp, #40	; 0x28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006adc:	f107 0314 	add.w	r3, r7, #20
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	605a      	str	r2, [r3, #4]
 8006ae6:	609a      	str	r2, [r3, #8]
 8006ae8:	60da      	str	r2, [r3, #12]
 8006aea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a1d      	ldr	r2, [pc, #116]	; (8006b68 <HAL_TIM_Encoder_MspInit+0x94>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d133      	bne.n	8006b5e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006af6:	2300      	movs	r3, #0
 8006af8:	613b      	str	r3, [r7, #16]
 8006afa:	4b1c      	ldr	r3, [pc, #112]	; (8006b6c <HAL_TIM_Encoder_MspInit+0x98>)
 8006afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afe:	4a1b      	ldr	r2, [pc, #108]	; (8006b6c <HAL_TIM_Encoder_MspInit+0x98>)
 8006b00:	f043 0302 	orr.w	r3, r3, #2
 8006b04:	6453      	str	r3, [r2, #68]	; 0x44
 8006b06:	4b19      	ldr	r3, [pc, #100]	; (8006b6c <HAL_TIM_Encoder_MspInit+0x98>)
 8006b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	613b      	str	r3, [r7, #16]
 8006b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b12:	2300      	movs	r3, #0
 8006b14:	60fb      	str	r3, [r7, #12]
 8006b16:	4b15      	ldr	r3, [pc, #84]	; (8006b6c <HAL_TIM_Encoder_MspInit+0x98>)
 8006b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1a:	4a14      	ldr	r2, [pc, #80]	; (8006b6c <HAL_TIM_Encoder_MspInit+0x98>)
 8006b1c:	f043 0304 	orr.w	r3, r3, #4
 8006b20:	6313      	str	r3, [r2, #48]	; 0x30
 8006b22:	4b12      	ldr	r3, [pc, #72]	; (8006b6c <HAL_TIM_Encoder_MspInit+0x98>)
 8006b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b26:	f003 0304 	and.w	r3, r3, #4
 8006b2a:	60fb      	str	r3, [r7, #12]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006b2e:	23c0      	movs	r3, #192	; 0xc0
 8006b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b32:	2302      	movs	r3, #2
 8006b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b36:	2300      	movs	r3, #0
 8006b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b42:	f107 0314 	add.w	r3, r7, #20
 8006b46:	4619      	mov	r1, r3
 8006b48:	4809      	ldr	r0, [pc, #36]	; (8006b70 <HAL_TIM_Encoder_MspInit+0x9c>)
 8006b4a:	f002 ff73 	bl	8009a34 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006b4e:	2200      	movs	r2, #0
 8006b50:	2100      	movs	r1, #0
 8006b52:	202c      	movs	r0, #44	; 0x2c
 8006b54:	f002 fb9b 	bl	800928e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006b58:	202c      	movs	r0, #44	; 0x2c
 8006b5a:	f002 fbb4 	bl	80092c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006b5e:	bf00      	nop
 8006b60:	3728      	adds	r7, #40	; 0x28
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	40010400 	.word	0x40010400
 8006b6c:	40023800 	.word	0x40023800
 8006b70:	40020800 	.word	0x40020800

08006b74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b08c      	sub	sp, #48	; 0x30
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b7c:	f107 031c 	add.w	r3, r7, #28
 8006b80:	2200      	movs	r2, #0
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	605a      	str	r2, [r3, #4]
 8006b86:	609a      	str	r2, [r3, #8]
 8006b88:	60da      	str	r2, [r3, #12]
 8006b8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a5c      	ldr	r2, [pc, #368]	; (8006d04 <HAL_TIM_MspPostInit+0x190>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d11f      	bne.n	8006bd6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b96:	2300      	movs	r3, #0
 8006b98:	61bb      	str	r3, [r7, #24]
 8006b9a:	4b5b      	ldr	r3, [pc, #364]	; (8006d08 <HAL_TIM_MspPostInit+0x194>)
 8006b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9e:	4a5a      	ldr	r2, [pc, #360]	; (8006d08 <HAL_TIM_MspPostInit+0x194>)
 8006ba0:	f043 0310 	orr.w	r3, r3, #16
 8006ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ba6:	4b58      	ldr	r3, [pc, #352]	; (8006d08 <HAL_TIM_MspPostInit+0x194>)
 8006ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006baa:	f003 0310 	and.w	r3, r3, #16
 8006bae:	61bb      	str	r3, [r7, #24]
 8006bb0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006bb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bb8:	2302      	movs	r3, #2
 8006bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006bc8:	f107 031c 	add.w	r3, r7, #28
 8006bcc:	4619      	mov	r1, r3
 8006bce:	484f      	ldr	r0, [pc, #316]	; (8006d0c <HAL_TIM_MspPostInit+0x198>)
 8006bd0:	f002 ff30 	bl	8009a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8006bd4:	e091      	b.n	8006cfa <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a4d      	ldr	r2, [pc, #308]	; (8006d10 <HAL_TIM_MspPostInit+0x19c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d11e      	bne.n	8006c1e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006be0:	2300      	movs	r3, #0
 8006be2:	617b      	str	r3, [r7, #20]
 8006be4:	4b48      	ldr	r3, [pc, #288]	; (8006d08 <HAL_TIM_MspPostInit+0x194>)
 8006be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be8:	4a47      	ldr	r2, [pc, #284]	; (8006d08 <HAL_TIM_MspPostInit+0x194>)
 8006bea:	f043 0302 	orr.w	r3, r3, #2
 8006bee:	6313      	str	r3, [r2, #48]	; 0x30
 8006bf0:	4b45      	ldr	r3, [pc, #276]	; (8006d08 <HAL_TIM_MspPostInit+0x194>)
 8006bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	617b      	str	r3, [r7, #20]
 8006bfa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006bfc:	2330      	movs	r3, #48	; 0x30
 8006bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c00:	2302      	movs	r3, #2
 8006c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c04:	2300      	movs	r3, #0
 8006c06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c10:	f107 031c 	add.w	r3, r7, #28
 8006c14:	4619      	mov	r1, r3
 8006c16:	483f      	ldr	r0, [pc, #252]	; (8006d14 <HAL_TIM_MspPostInit+0x1a0>)
 8006c18:	f002 ff0c 	bl	8009a34 <HAL_GPIO_Init>
}
 8006c1c:	e06d      	b.n	8006cfa <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a3d      	ldr	r2, [pc, #244]	; (8006d18 <HAL_TIM_MspPostInit+0x1a4>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d11f      	bne.n	8006c68 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c28:	2300      	movs	r3, #0
 8006c2a:	613b      	str	r3, [r7, #16]
 8006c2c:	4b36      	ldr	r3, [pc, #216]	; (8006d08 <HAL_TIM_MspPostInit+0x194>)
 8006c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c30:	4a35      	ldr	r2, [pc, #212]	; (8006d08 <HAL_TIM_MspPostInit+0x194>)
 8006c32:	f043 0308 	orr.w	r3, r3, #8
 8006c36:	6313      	str	r3, [r2, #48]	; 0x30
 8006c38:	4b33      	ldr	r3, [pc, #204]	; (8006d08 <HAL_TIM_MspPostInit+0x194>)
 8006c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3c:	f003 0308 	and.w	r3, r3, #8
 8006c40:	613b      	str	r3, [r7, #16]
 8006c42:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8006c44:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c52:	2300      	movs	r3, #0
 8006c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006c56:	2302      	movs	r3, #2
 8006c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c5a:	f107 031c 	add.w	r3, r7, #28
 8006c5e:	4619      	mov	r1, r3
 8006c60:	482e      	ldr	r0, [pc, #184]	; (8006d1c <HAL_TIM_MspPostInit+0x1a8>)
 8006c62:	f002 fee7 	bl	8009a34 <HAL_GPIO_Init>
}
 8006c66:	e048      	b.n	8006cfa <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a2c      	ldr	r2, [pc, #176]	; (8006d20 <HAL_TIM_MspPostInit+0x1ac>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d11f      	bne.n	8006cb2 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c72:	2300      	movs	r3, #0
 8006c74:	60fb      	str	r3, [r7, #12]
 8006c76:	4b24      	ldr	r3, [pc, #144]	; (8006d08 <HAL_TIM_MspPostInit+0x194>)
 8006c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7a:	4a23      	ldr	r2, [pc, #140]	; (8006d08 <HAL_TIM_MspPostInit+0x194>)
 8006c7c:	f043 0302 	orr.w	r3, r3, #2
 8006c80:	6313      	str	r3, [r2, #48]	; 0x30
 8006c82:	4b21      	ldr	r3, [pc, #132]	; (8006d08 <HAL_TIM_MspPostInit+0x194>)
 8006c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	60fb      	str	r3, [r7, #12]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c94:	2302      	movs	r3, #2
 8006c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ca4:	f107 031c 	add.w	r3, r7, #28
 8006ca8:	4619      	mov	r1, r3
 8006caa:	481a      	ldr	r0, [pc, #104]	; (8006d14 <HAL_TIM_MspPostInit+0x1a0>)
 8006cac:	f002 fec2 	bl	8009a34 <HAL_GPIO_Init>
}
 8006cb0:	e023      	b.n	8006cfa <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a1b      	ldr	r2, [pc, #108]	; (8006d24 <HAL_TIM_MspPostInit+0x1b0>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d11e      	bne.n	8006cfa <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	60bb      	str	r3, [r7, #8]
 8006cc0:	4b11      	ldr	r3, [pc, #68]	; (8006d08 <HAL_TIM_MspPostInit+0x194>)
 8006cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc4:	4a10      	ldr	r2, [pc, #64]	; (8006d08 <HAL_TIM_MspPostInit+0x194>)
 8006cc6:	f043 0302 	orr.w	r3, r3, #2
 8006cca:	6313      	str	r3, [r2, #48]	; 0x30
 8006ccc:	4b0e      	ldr	r3, [pc, #56]	; (8006d08 <HAL_TIM_MspPostInit+0x194>)
 8006cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	60bb      	str	r3, [r7, #8]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006cd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cde:	2302      	movs	r3, #2
 8006ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8006cea:	2303      	movs	r3, #3
 8006cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cee:	f107 031c 	add.w	r3, r7, #28
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	4807      	ldr	r0, [pc, #28]	; (8006d14 <HAL_TIM_MspPostInit+0x1a0>)
 8006cf6:	f002 fe9d 	bl	8009a34 <HAL_GPIO_Init>
}
 8006cfa:	bf00      	nop
 8006cfc:	3730      	adds	r7, #48	; 0x30
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	40010000 	.word	0x40010000
 8006d08:	40023800 	.word	0x40023800
 8006d0c:	40021000 	.word	0x40021000
 8006d10:	40000400 	.word	0x40000400
 8006d14:	40020400 	.word	0x40020400
 8006d18:	40000800 	.word	0x40000800
 8006d1c:	40020c00 	.word	0x40020c00
 8006d20:	40014400 	.word	0x40014400
 8006d24:	40014800 	.word	0x40014800

08006d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08a      	sub	sp, #40	; 0x28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d30:	f107 0314 	add.w	r3, r7, #20
 8006d34:	2200      	movs	r2, #0
 8006d36:	601a      	str	r2, [r3, #0]
 8006d38:	605a      	str	r2, [r3, #4]
 8006d3a:	609a      	str	r2, [r3, #8]
 8006d3c:	60da      	str	r2, [r3, #12]
 8006d3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a19      	ldr	r2, [pc, #100]	; (8006dac <HAL_UART_MspInit+0x84>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d12b      	bne.n	8006da2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	613b      	str	r3, [r7, #16]
 8006d4e:	4b18      	ldr	r3, [pc, #96]	; (8006db0 <HAL_UART_MspInit+0x88>)
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	4a17      	ldr	r2, [pc, #92]	; (8006db0 <HAL_UART_MspInit+0x88>)
 8006d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d58:	6413      	str	r3, [r2, #64]	; 0x40
 8006d5a:	4b15      	ldr	r3, [pc, #84]	; (8006db0 <HAL_UART_MspInit+0x88>)
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d62:	613b      	str	r3, [r7, #16]
 8006d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d66:	2300      	movs	r3, #0
 8006d68:	60fb      	str	r3, [r7, #12]
 8006d6a:	4b11      	ldr	r3, [pc, #68]	; (8006db0 <HAL_UART_MspInit+0x88>)
 8006d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6e:	4a10      	ldr	r2, [pc, #64]	; (8006db0 <HAL_UART_MspInit+0x88>)
 8006d70:	f043 0308 	orr.w	r3, r3, #8
 8006d74:	6313      	str	r3, [r2, #48]	; 0x30
 8006d76:	4b0e      	ldr	r3, [pc, #56]	; (8006db0 <HAL_UART_MspInit+0x88>)
 8006d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7a:	f003 0308 	and.w	r3, r3, #8
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006d82:	2360      	movs	r3, #96	; 0x60
 8006d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d86:	2302      	movs	r3, #2
 8006d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006d92:	2307      	movs	r3, #7
 8006d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d96:	f107 0314 	add.w	r3, r7, #20
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	4805      	ldr	r0, [pc, #20]	; (8006db4 <HAL_UART_MspInit+0x8c>)
 8006d9e:	f002 fe49 	bl	8009a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006da2:	bf00      	nop
 8006da4:	3728      	adds	r7, #40	; 0x28
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	40004400 	.word	0x40004400
 8006db0:	40023800 	.word	0x40023800
 8006db4:	40020c00 	.word	0x40020c00

08006db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006db8:	b480      	push	{r7}
 8006dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006dbc:	e7fe      	b.n	8006dbc <NMI_Handler+0x4>

08006dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006dc2:	e7fe      	b.n	8006dc2 <HardFault_Handler+0x4>

08006dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006dc8:	e7fe      	b.n	8006dc8 <MemManage_Handler+0x4>

08006dca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006dce:	e7fe      	b.n	8006dce <BusFault_Handler+0x4>

08006dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006dd4:	e7fe      	b.n	8006dd4 <UsageFault_Handler+0x4>

08006dd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006dda:	bf00      	nop
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006de4:	b480      	push	{r7}
 8006de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006de8:	bf00      	nop
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006df2:	b480      	push	{r7}
 8006df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006df6:	bf00      	nop
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006e04:	f001 fd22 	bl	800884c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006e08:	bf00      	nop
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006e10:	4803      	ldr	r0, [pc, #12]	; (8006e20 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8006e12:	f006 fff2 	bl	800ddfa <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8006e16:	4803      	ldr	r0, [pc, #12]	; (8006e24 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8006e18:	f006 ffef 	bl	800ddfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8006e1c:	bf00      	nop
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	2003e87c 	.word	0x2003e87c
 8006e24:	2003ea78 	.word	0x2003ea78

08006e28 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8006e2c:	4802      	ldr	r0, [pc, #8]	; (8006e38 <SDIO_IRQHandler+0x10>)
 8006e2e:	f005 f88b 	bl	800bf48 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8006e32:	bf00      	nop
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	2003ebd8 	.word	0x2003ebd8

08006e3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006e40:	4802      	ldr	r0, [pc, #8]	; (8006e4c <TIM6_DAC_IRQHandler+0x10>)
 8006e42:	f006 ffda 	bl	800ddfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006e46:	bf00      	nop
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	2003eb58 	.word	0x2003eb58

08006e50 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006e54:	4802      	ldr	r0, [pc, #8]	; (8006e60 <TIM7_IRQHandler+0x10>)
 8006e56:	f006 ffd0 	bl	800ddfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006e5a:	bf00      	nop
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	2003ecfc 	.word	0x2003ecfc

08006e64 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006e68:	4802      	ldr	r0, [pc, #8]	; (8006e74 <DMA2_Stream2_IRQHandler+0x10>)
 8006e6a:	f002 fb6f 	bl	800954c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006e6e:	bf00      	nop
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	2003ec9c 	.word	0x2003ec9c

08006e78 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8006e7c:	4802      	ldr	r0, [pc, #8]	; (8006e88 <DMA2_Stream3_IRQHandler+0x10>)
 8006e7e:	f002 fb65 	bl	800954c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8006e82:	bf00      	nop
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	2003e7c4 	.word	0x2003e7c4

08006e8c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8006e90:	4802      	ldr	r0, [pc, #8]	; (8006e9c <DMA2_Stream6_IRQHandler+0x10>)
 8006e92:	f002 fb5b 	bl	800954c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8006e96:	bf00      	nop
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	2003eaf8 	.word	0x2003eaf8

08006ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006ea8:	4a14      	ldr	r2, [pc, #80]	; (8006efc <_sbrk+0x5c>)
 8006eaa:	4b15      	ldr	r3, [pc, #84]	; (8006f00 <_sbrk+0x60>)
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006eb4:	4b13      	ldr	r3, [pc, #76]	; (8006f04 <_sbrk+0x64>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d102      	bne.n	8006ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006ebc:	4b11      	ldr	r3, [pc, #68]	; (8006f04 <_sbrk+0x64>)
 8006ebe:	4a12      	ldr	r2, [pc, #72]	; (8006f08 <_sbrk+0x68>)
 8006ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006ec2:	4b10      	ldr	r3, [pc, #64]	; (8006f04 <_sbrk+0x64>)
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4413      	add	r3, r2
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d207      	bcs.n	8006ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006ed0:	f00d fa28 	bl	8014324 <__errno>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	230c      	movs	r3, #12
 8006ed8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8006eda:	f04f 33ff 	mov.w	r3, #4294967295
 8006ede:	e009      	b.n	8006ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006ee0:	4b08      	ldr	r3, [pc, #32]	; (8006f04 <_sbrk+0x64>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006ee6:	4b07      	ldr	r3, [pc, #28]	; (8006f04 <_sbrk+0x64>)
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4413      	add	r3, r2
 8006eee:	4a05      	ldr	r2, [pc, #20]	; (8006f04 <_sbrk+0x64>)
 8006ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	20050000 	.word	0x20050000
 8006f00:	00000800 	.word	0x00000800
 8006f04:	200002bc 	.word	0x200002bc
 8006f08:	20040e50 	.word	0x20040e50

08006f0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006f10:	4b08      	ldr	r3, [pc, #32]	; (8006f34 <SystemInit+0x28>)
 8006f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f16:	4a07      	ldr	r2, [pc, #28]	; (8006f34 <SystemInit+0x28>)
 8006f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006f20:	4b04      	ldr	r3, [pc, #16]	; (8006f34 <SystemInit+0x28>)
 8006f22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006f26:	609a      	str	r2, [r3, #8]
#endif
}
 8006f28:	bf00      	nop
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	e000ed00 	.word	0xe000ed00

08006f38 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8006f38:	b598      	push	{r3, r4, r7, lr}
 8006f3a:	af00      	add	r7, sp, #0
	lcd_init();
 8006f3c:	f7fa f86c 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8006f40:	483a      	ldr	r0, [pc, #232]	; (800702c <cppInit+0xf4>)
 8006f42:	f7fd fdef 	bl	8004b24 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8006f46:	2064      	movs	r0, #100	; 0x64
 8006f48:	f001 fca0 	bl	800888c <HAL_Delay>
	power_sensor.updateValues();
 8006f4c:	4837      	ldr	r0, [pc, #220]	; (800702c <cppInit+0xf4>)
 8006f4e:	f7fd fdf7 	bl	8004b40 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8006f52:	f7fa f8a5 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8006f56:	2100      	movs	r1, #0
 8006f58:	2000      	movs	r0, #0
 8006f5a:	f7fa f8b1 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8006f5e:	4834      	ldr	r0, [pc, #208]	; (8007030 <cppInit+0xf8>)
 8006f60:	f7fa f8d8 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8006f64:	2101      	movs	r1, #1
 8006f66:	2000      	movs	r0, #0
 8006f68:	f7fa f8aa 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8006f6c:	482f      	ldr	r0, [pc, #188]	; (800702c <cppInit+0xf4>)
 8006f6e:	f7fd fe11 	bl	8004b94 <_ZN11PowerSensor17getButteryVoltageEv>
 8006f72:	ee10 3a10 	vmov	r3, s0
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7f9 fafe 	bl	8000578 <__aeabi_f2d>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	460c      	mov	r4, r1
 8006f80:	461a      	mov	r2, r3
 8006f82:	4623      	mov	r3, r4
 8006f84:	482b      	ldr	r0, [pc, #172]	; (8007034 <cppInit+0xfc>)
 8006f86:	f7fa f8c5 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8006f8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006f8e:	f001 fc7d 	bl	800888c <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8006f92:	4829      	ldr	r0, [pc, #164]	; (8007038 <cppInit+0x100>)
 8006f94:	f7fd f80c 	bl	8003fb0 <_ZN6Logger10sdCardInitEv>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d007      	beq.n	8006fae <cppInit+0x76>
		led.fullColor('G');
 8006f9e:	2147      	movs	r1, #71	; 0x47
 8006fa0:	4826      	ldr	r0, [pc, #152]	; (800703c <cppInit+0x104>)
 8006fa2:	f7fa ffab 	bl	8001efc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8006fa6:	2064      	movs	r0, #100	; 0x64
 8006fa8:	f001 fc70 	bl	800888c <HAL_Delay>
 8006fac:	e006      	b.n	8006fbc <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8006fae:	2152      	movs	r1, #82	; 0x52
 8006fb0:	4822      	ldr	r0, [pc, #136]	; (800703c <cppInit+0x104>)
 8006fb2:	f7fa ffa3 	bl	8001efc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8006fb6:	2064      	movs	r0, #100	; 0x64
 8006fb8:	f001 fc68 	bl	800888c <HAL_Delay>
	}

	line_sensor.ADCStart();
 8006fbc:	4820      	ldr	r0, [pc, #128]	; (8007040 <cppInit+0x108>)
 8006fbe:	f7fb f8f9 	bl	80021b4 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8006fc2:	4820      	ldr	r0, [pc, #128]	; (8007044 <cppInit+0x10c>)
 8006fc4:	f7fd fa82 	bl	80044cc <_ZN5Motor4initEv>
	encoder.init();
 8006fc8:	481f      	ldr	r0, [pc, #124]	; (8007048 <cppInit+0x110>)
 8006fca:	f7fa f8ef 	bl	80011ac <_ZN7Encoder4initEv>
	imu.init();
 8006fce:	481f      	ldr	r0, [pc, #124]	; (800704c <cppInit+0x114>)
 8006fd0:	f7fa fd52 	bl	8001a78 <_ZN3IMU4initEv>
	line_trace.init();
 8006fd4:	481e      	ldr	r0, [pc, #120]	; (8007050 <cppInit+0x118>)
 8006fd6:	f7fc fabd 	bl	8003554 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8006fda:	4819      	ldr	r0, [pc, #100]	; (8007040 <cppInit+0x108>)
 8006fdc:	f7fb fa2a 	bl	8002434 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8006fe0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006fe4:	f001 fc52 	bl	800888c <HAL_Delay>

	led.fullColor('M');
 8006fe8:	214d      	movs	r1, #77	; 0x4d
 8006fea:	4814      	ldr	r0, [pc, #80]	; (800703c <cppInit+0x104>)
 8006fec:	f7fa ff86 	bl	8001efc <_ZN3LED9fullColorEc>
	imu.calibration();
 8006ff0:	4816      	ldr	r0, [pc, #88]	; (800704c <cppInit+0x114>)
 8006ff2:	f7fa fe0b 	bl	8001c0c <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 8006ff6:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8007054 <cppInit+0x11c>
 8006ffa:	eddf 0a17 	vldr	s1, [pc, #92]	; 8007058 <cppInit+0x120>
 8006ffe:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800705c <cppInit+0x124>
 8007002:	4817      	ldr	r0, [pc, #92]	; (8007060 <cppInit+0x128>)
 8007004:	f7fe f9cc 	bl	80053a0 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 8007008:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8007064 <cppInit+0x12c>
 800700c:	eddf 0a16 	vldr	s1, [pc, #88]	; 8007068 <cppInit+0x130>
 8007010:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800706c <cppInit+0x134>
 8007014:	4812      	ldr	r0, [pc, #72]	; (8007060 <cppInit+0x128>)
 8007016:	f7fe f9dc 	bl	80053d2 <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	//encoder.clearDistance();
	odometry.clearPotition();
 800701a:	4815      	ldr	r0, [pc, #84]	; (8007070 <cppInit+0x138>)
 800701c:	f7fd fc8c 	bl	8004938 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007020:	4814      	ldr	r0, [pc, #80]	; (8007074 <cppInit+0x13c>)
 8007022:	f7fd fd23 	bl	8004a6c <_ZN13PathFollowing4initEv>

}
 8007026:	bf00      	nop
 8007028:	bd98      	pop	{r3, r4, r7, pc}
 800702a:	bf00      	nop
 800702c:	200005d0 	.word	0x200005d0
 8007030:	08018b14 	.word	0x08018b14
 8007034:	08018b1c 	.word	0x08018b1c
 8007038:	200005f0 	.word	0x200005f0
 800703c:	200005cc 	.word	0x200005cc
 8007040:	200002c0 	.word	0x200002c0
 8007044:	200005c8 	.word	0x200005c8
 8007048:	20017d00 	.word	0x20017d00
 800704c:	200005dc 	.word	0x200005dc
 8007050:	20017da0 	.word	0x20017da0
 8007054:	3cceca68 	.word	0x3cceca68
 8007058:	4180f06f 	.word	0x4180f06f
 800705c:	3fea2d0e 	.word	0x3fea2d0e
 8007060:	20017d20 	.word	0x20017d20
 8007064:	3ab7dacd 	.word	0x3ab7dacd
 8007068:	3f5e3fbc 	.word	0x3f5e3fbc
 800706c:	3d8eefa2 	.word	0x3d8eefa2
 8007070:	20017d60 	.word	0x20017d60
 8007074:	20024d00 	.word	0x20024d00

08007078 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 800707c:	4819      	ldr	r0, [pc, #100]	; (80070e4 <cppFlip1ms+0x6c>)
 800707e:	f7fb f8f7 	bl	8002270 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8007082:	4819      	ldr	r0, [pc, #100]	; (80070e8 <cppFlip1ms+0x70>)
 8007084:	f7fa fd20 	bl	8001ac8 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007088:	4818      	ldr	r0, [pc, #96]	; (80070ec <cppFlip1ms+0x74>)
 800708a:	f7fa f8b1 	bl	80011f0 <_ZN7Encoder6updateEv>
	line_trace.flip();
 800708e:	4818      	ldr	r0, [pc, #96]	; (80070f0 <cppFlip1ms+0x78>)
 8007090:	f7fc fbd2 	bl	8003838 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007094:	4817      	ldr	r0, [pc, #92]	; (80070f4 <cppFlip1ms+0x7c>)
 8007096:	f7fe f9b5 	bl	8005404 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 800709a:	4817      	ldr	r0, [pc, #92]	; (80070f8 <cppFlip1ms+0x80>)
 800709c:	f7fd fc30 	bl	8004900 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 80070a0:	4816      	ldr	r0, [pc, #88]	; (80070fc <cppFlip1ms+0x84>)
 80070a2:	f7fd fded 	bl	8004c80 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 80070a6:	4816      	ldr	r0, [pc, #88]	; (8007100 <cppFlip1ms+0x88>)
 80070a8:	f7fd fa22 	bl	80044f0 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 80070ac:	4b15      	ldr	r3, [pc, #84]	; (8007104 <cppFlip1ms+0x8c>)
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	3301      	adds	r3, #1
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	4b13      	ldr	r3, [pc, #76]	; (8007104 <cppFlip1ms+0x8c>)
 80070b6:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 80070b8:	4b12      	ldr	r3, [pc, #72]	; (8007104 <cppFlip1ms+0x8c>)
 80070ba:	881b      	ldrh	r3, [r3, #0]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d90c      	bls.n	80070da <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 80070c0:	4809      	ldr	r0, [pc, #36]	; (80070e8 <cppFlip1ms+0x70>)
 80070c2:	f7fa fd59 	bl	8001b78 <_ZN3IMU8getOmegaEv>
 80070c6:	eef0 7a40 	vmov.f32	s15, s0
 80070ca:	eeb0 0a67 	vmov.f32	s0, s15
 80070ce:	480e      	ldr	r0, [pc, #56]	; (8007108 <cppFlip1ms+0x90>)
 80070d0:	f7fd ff38 	bl	8004f44 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 80070d4:	4b0b      	ldr	r3, [pc, #44]	; (8007104 <cppFlip1ms+0x8c>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 80070da:	4804      	ldr	r0, [pc, #16]	; (80070ec <cppFlip1ms+0x74>)
 80070dc:	f7fa f972 	bl	80013c4 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 80070e0:	bf00      	nop
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	200002c0 	.word	0x200002c0
 80070e8:	200005dc 	.word	0x200005dc
 80070ec:	20017d00 	.word	0x20017d00
 80070f0:	20017da0 	.word	0x20017da0
 80070f4:	20017d20 	.word	0x20017d20
 80070f8:	20017d60 	.word	0x20017d60
 80070fc:	200005b8 	.word	0x200005b8
 8007100:	200005c8 	.word	0x200005c8
 8007104:	2003c428 	.word	0x2003c428
 8007108:	20024af4 	.word	0x20024af4

0800710c <cppFlip100ns>:

void cppFlip100ns(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007110:	4802      	ldr	r0, [pc, #8]	; (800711c <cppFlip100ns+0x10>)
 8007112:	f7fb f85f 	bl	80021d4 <_ZN10LineSensor17storeSensorValuesEv>
	//line_trace.flip100ns();
}
 8007116:	bf00      	nop
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	200002c0 	.word	0x200002c0

08007120 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8007124:	4b08      	ldr	r3, [pc, #32]	; (8007148 <cppFlip10ms+0x28>)
 8007126:	881b      	ldrh	r3, [r3, #0]
 8007128:	3301      	adds	r3, #1
 800712a:	b29a      	uxth	r2, r3
 800712c:	4b06      	ldr	r3, [pc, #24]	; (8007148 <cppFlip10ms+0x28>)
 800712e:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 8007130:	4b05      	ldr	r3, [pc, #20]	; (8007148 <cppFlip10ms+0x28>)
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	2b06      	cmp	r3, #6
 8007136:	d905      	bls.n	8007144 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8007138:	4804      	ldr	r0, [pc, #16]	; (800714c <cppFlip10ms+0x2c>)
 800713a:	f7fd ff3f 	bl	8004fbc <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 800713e:	4b02      	ldr	r3, [pc, #8]	; (8007148 <cppFlip10ms+0x28>)
 8007140:	2200      	movs	r2, #0
 8007142:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007144:	bf00      	nop
 8007146:	bd80      	pop	{r7, pc}
 8007148:	2003c42a 	.word	0x2003c42a
 800714c:	20024af4 	.word	0x20024af4

08007150 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007152:	b087      	sub	sp, #28
 8007154:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc;

	static float adj_kp = line_trace.getKp();
 8007156:	4ba5      	ldr	r3, [pc, #660]	; (80073ec <cppLoop+0x29c>)
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	f3bf 8f5b 	dmb	ish
 800715e:	b2db      	uxtb	r3, r3
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	2b00      	cmp	r3, #0
 8007166:	bf0c      	ite	eq
 8007168:	2301      	moveq	r3, #1
 800716a:	2300      	movne	r3, #0
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d015      	beq.n	800719e <cppLoop+0x4e>
 8007172:	489e      	ldr	r0, [pc, #632]	; (80073ec <cppLoop+0x29c>)
 8007174:	f00c f86f 	bl	8013256 <__cxa_guard_acquire>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	bf14      	ite	ne
 800717e:	2301      	movne	r3, #1
 8007180:	2300      	moveq	r3, #0
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00a      	beq.n	800719e <cppLoop+0x4e>
 8007188:	4899      	ldr	r0, [pc, #612]	; (80073f0 <cppLoop+0x2a0>)
 800718a:	f7fc fa7e 	bl	800368a <_ZN9LineTrace5getKpEv>
 800718e:	eef0 7a40 	vmov.f32	s15, s0
 8007192:	4b98      	ldr	r3, [pc, #608]	; (80073f4 <cppLoop+0x2a4>)
 8007194:	edc3 7a00 	vstr	s15, [r3]
 8007198:	4894      	ldr	r0, [pc, #592]	; (80073ec <cppLoop+0x29c>)
 800719a:	f00c f868 	bl	801326e <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 800719e:	4b96      	ldr	r3, [pc, #600]	; (80073f8 <cppLoop+0x2a8>)
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	f3bf 8f5b 	dmb	ish
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bf0c      	ite	eq
 80071b0:	2301      	moveq	r3, #1
 80071b2:	2300      	movne	r3, #0
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d015      	beq.n	80071e6 <cppLoop+0x96>
 80071ba:	488f      	ldr	r0, [pc, #572]	; (80073f8 <cppLoop+0x2a8>)
 80071bc:	f00c f84b 	bl	8013256 <__cxa_guard_acquire>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	bf14      	ite	ne
 80071c6:	2301      	movne	r3, #1
 80071c8:	2300      	moveq	r3, #0
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00a      	beq.n	80071e6 <cppLoop+0x96>
 80071d0:	4887      	ldr	r0, [pc, #540]	; (80073f0 <cppLoop+0x2a0>)
 80071d2:	f7fc fa69 	bl	80036a8 <_ZN9LineTrace5getKiEv>
 80071d6:	eef0 7a40 	vmov.f32	s15, s0
 80071da:	4b88      	ldr	r3, [pc, #544]	; (80073fc <cppLoop+0x2ac>)
 80071dc:	edc3 7a00 	vstr	s15, [r3]
 80071e0:	4885      	ldr	r0, [pc, #532]	; (80073f8 <cppLoop+0x2a8>)
 80071e2:	f00c f844 	bl	801326e <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 80071e6:	4b86      	ldr	r3, [pc, #536]	; (8007400 <cppLoop+0x2b0>)
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	f3bf 8f5b 	dmb	ish
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	bf0c      	ite	eq
 80071f8:	2301      	moveq	r3, #1
 80071fa:	2300      	movne	r3, #0
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d015      	beq.n	800722e <cppLoop+0xde>
 8007202:	487f      	ldr	r0, [pc, #508]	; (8007400 <cppLoop+0x2b0>)
 8007204:	f00c f827 	bl	8013256 <__cxa_guard_acquire>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	bf14      	ite	ne
 800720e:	2301      	movne	r3, #1
 8007210:	2300      	moveq	r3, #0
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00a      	beq.n	800722e <cppLoop+0xde>
 8007218:	4875      	ldr	r0, [pc, #468]	; (80073f0 <cppLoop+0x2a0>)
 800721a:	f7fc fa54 	bl	80036c6 <_ZN9LineTrace5getKdEv>
 800721e:	eef0 7a40 	vmov.f32	s15, s0
 8007222:	4b78      	ldr	r3, [pc, #480]	; (8007404 <cppLoop+0x2b4>)
 8007224:	edc3 7a00 	vstr	s15, [r3]
 8007228:	4875      	ldr	r0, [pc, #468]	; (8007400 <cppLoop+0x2b0>)
 800722a:	f00c f820 	bl	801326e <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 800722e:	4b76      	ldr	r3, [pc, #472]	; (8007408 <cppLoop+0x2b8>)
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	f3bf 8f5b 	dmb	ish
 8007236:	b2db      	uxtb	r3, r3
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	2b00      	cmp	r3, #0
 800723e:	bf0c      	ite	eq
 8007240:	2301      	moveq	r3, #1
 8007242:	2300      	movne	r3, #0
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	d015      	beq.n	8007276 <cppLoop+0x126>
 800724a:	486f      	ldr	r0, [pc, #444]	; (8007408 <cppLoop+0x2b8>)
 800724c:	f00c f803 	bl	8013256 <__cxa_guard_acquire>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	bf14      	ite	ne
 8007256:	2301      	movne	r3, #1
 8007258:	2300      	moveq	r3, #0
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00a      	beq.n	8007276 <cppLoop+0x126>
 8007260:	4863      	ldr	r0, [pc, #396]	; (80073f0 <cppLoop+0x2a0>)
 8007262:	f7fc fa7c 	bl	800375e <_ZN9LineTrace17getTargetVelocityEv>
 8007266:	eef0 7a40 	vmov.f32	s15, s0
 800726a:	4b68      	ldr	r3, [pc, #416]	; (800740c <cppLoop+0x2bc>)
 800726c:	edc3 7a00 	vstr	s15, [r3]
 8007270:	4865      	ldr	r0, [pc, #404]	; (8007408 <cppLoop+0x2b8>)
 8007272:	f00b fffc 	bl	801326e <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007276:	4b66      	ldr	r3, [pc, #408]	; (8007410 <cppLoop+0x2c0>)
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	f3bf 8f5b 	dmb	ish
 800727e:	b2db      	uxtb	r3, r3
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	2b00      	cmp	r3, #0
 8007286:	bf0c      	ite	eq
 8007288:	2301      	moveq	r3, #1
 800728a:	2300      	movne	r3, #0
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d015      	beq.n	80072be <cppLoop+0x16e>
 8007292:	485f      	ldr	r0, [pc, #380]	; (8007410 <cppLoop+0x2c0>)
 8007294:	f00b ffdf 	bl	8013256 <__cxa_guard_acquire>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	bf14      	ite	ne
 800729e:	2301      	movne	r3, #1
 80072a0:	2300      	moveq	r3, #0
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00a      	beq.n	80072be <cppLoop+0x16e>
 80072a8:	4851      	ldr	r0, [pc, #324]	; (80073f0 <cppLoop+0x2a0>)
 80072aa:	f7fc fa67 	bl	800377c <_ZN9LineTrace14getMaxVelocityEv>
 80072ae:	eef0 7a40 	vmov.f32	s15, s0
 80072b2:	4b58      	ldr	r3, [pc, #352]	; (8007414 <cppLoop+0x2c4>)
 80072b4:	edc3 7a00 	vstr	s15, [r3]
 80072b8:	4855      	ldr	r0, [pc, #340]	; (8007410 <cppLoop+0x2c0>)
 80072ba:	f00b ffd8 	bl	801326e <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 80072be:	4b56      	ldr	r3, [pc, #344]	; (8007418 <cppLoop+0x2c8>)
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	f3bf 8f5b 	dmb	ish
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	bf0c      	ite	eq
 80072d0:	2301      	moveq	r3, #1
 80072d2:	2300      	movne	r3, #0
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d015      	beq.n	8007306 <cppLoop+0x1b6>
 80072da:	484f      	ldr	r0, [pc, #316]	; (8007418 <cppLoop+0x2c8>)
 80072dc:	f00b ffbb 	bl	8013256 <__cxa_guard_acquire>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	bf14      	ite	ne
 80072e6:	2301      	movne	r3, #1
 80072e8:	2300      	moveq	r3, #0
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00a      	beq.n	8007306 <cppLoop+0x1b6>
 80072f0:	483f      	ldr	r0, [pc, #252]	; (80073f0 <cppLoop+0x2a0>)
 80072f2:	f7fc fa52 	bl	800379a <_ZN9LineTrace15getMaxVelocity2Ev>
 80072f6:	eef0 7a40 	vmov.f32	s15, s0
 80072fa:	4b48      	ldr	r3, [pc, #288]	; (800741c <cppLoop+0x2cc>)
 80072fc:	edc3 7a00 	vstr	s15, [r3]
 8007300:	4845      	ldr	r0, [pc, #276]	; (8007418 <cppLoop+0x2c8>)
 8007302:	f00b ffb4 	bl	801326e <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007306:	4b46      	ldr	r3, [pc, #280]	; (8007420 <cppLoop+0x2d0>)
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	f3bf 8f5b 	dmb	ish
 800730e:	b2db      	uxtb	r3, r3
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b00      	cmp	r3, #0
 8007316:	bf0c      	ite	eq
 8007318:	2301      	moveq	r3, #1
 800731a:	2300      	movne	r3, #0
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d015      	beq.n	800734e <cppLoop+0x1fe>
 8007322:	483f      	ldr	r0, [pc, #252]	; (8007420 <cppLoop+0x2d0>)
 8007324:	f00b ff97 	bl	8013256 <__cxa_guard_acquire>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	bf14      	ite	ne
 800732e:	2301      	movne	r3, #1
 8007330:	2300      	moveq	r3, #0
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00a      	beq.n	800734e <cppLoop+0x1fe>
 8007338:	482d      	ldr	r0, [pc, #180]	; (80073f0 <cppLoop+0x2a0>)
 800733a:	f7fc fa58 	bl	80037ee <_ZN9LineTrace9getMaxAccEv>
 800733e:	eef0 7a40 	vmov.f32	s15, s0
 8007342:	4b38      	ldr	r3, [pc, #224]	; (8007424 <cppLoop+0x2d4>)
 8007344:	edc3 7a00 	vstr	s15, [r3]
 8007348:	4835      	ldr	r0, [pc, #212]	; (8007420 <cppLoop+0x2d0>)
 800734a:	f00b ff90 	bl	801326e <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 800734e:	4b36      	ldr	r3, [pc, #216]	; (8007428 <cppLoop+0x2d8>)
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	f3bf 8f5b 	dmb	ish
 8007356:	b2db      	uxtb	r3, r3
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b00      	cmp	r3, #0
 800735e:	bf0c      	ite	eq
 8007360:	2301      	moveq	r3, #1
 8007362:	2300      	movne	r3, #0
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d015      	beq.n	8007396 <cppLoop+0x246>
 800736a:	482f      	ldr	r0, [pc, #188]	; (8007428 <cppLoop+0x2d8>)
 800736c:	f00b ff73 	bl	8013256 <__cxa_guard_acquire>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	bf14      	ite	ne
 8007376:	2301      	movne	r3, #1
 8007378:	2300      	moveq	r3, #0
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00a      	beq.n	8007396 <cppLoop+0x246>
 8007380:	481b      	ldr	r0, [pc, #108]	; (80073f0 <cppLoop+0x2a0>)
 8007382:	f7fc fa46 	bl	8003812 <_ZN9LineTrace9getMaxDecEv>
 8007386:	eef0 7a40 	vmov.f32	s15, s0
 800738a:	4b28      	ldr	r3, [pc, #160]	; (800742c <cppLoop+0x2dc>)
 800738c:	edc3 7a00 	vstr	s15, [r3]
 8007390:	4825      	ldr	r0, [pc, #148]	; (8007428 <cppLoop+0x2d8>)
 8007392:	f00b ff6c 	bl	801326e <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007396:	4826      	ldr	r0, [pc, #152]	; (8007430 <cppLoop+0x2e0>)
 8007398:	f7fd fc0c 	bl	8004bb4 <_ZN12RotarySwitch8getValueEv>
 800739c:	4603      	mov	r3, r0
 800739e:	2b0f      	cmp	r3, #15
 80073a0:	f201 8121 	bhi.w	80085e6 <cppLoop+0x1496>
 80073a4:	a201      	add	r2, pc, #4	; (adr r2, 80073ac <cppLoop+0x25c>)
 80073a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073aa:	bf00      	nop
 80073ac:	08007435 	.word	0x08007435
 80073b0:	08007823 	.word	0x08007823
 80073b4:	080078b7 	.word	0x080078b7
 80073b8:	08007a4d 	.word	0x08007a4d
 80073bc:	08007af7 	.word	0x08007af7
 80073c0:	08007c4f 	.word	0x08007c4f
 80073c4:	08007d2d 	.word	0x08007d2d
 80073c8:	08007e81 	.word	0x08007e81
 80073cc:	08008105 	.word	0x08008105
 80073d0:	0800812f 	.word	0x0800812f
 80073d4:	080081eb 	.word	0x080081eb
 80073d8:	0800825b 	.word	0x0800825b
 80073dc:	08008379 	.word	0x08008379
 80073e0:	08008413 	.word	0x08008413
 80073e4:	08008499 	.word	0x08008499
 80073e8:	08008541 	.word	0x08008541
 80073ec:	2003c434 	.word	0x2003c434
 80073f0:	20017da0 	.word	0x20017da0
 80073f4:	2003c430 	.word	0x2003c430
 80073f8:	2003c43c 	.word	0x2003c43c
 80073fc:	2003c438 	.word	0x2003c438
 8007400:	2003c444 	.word	0x2003c444
 8007404:	2003c440 	.word	0x2003c440
 8007408:	2003c44c 	.word	0x2003c44c
 800740c:	2003c448 	.word	0x2003c448
 8007410:	2003c454 	.word	0x2003c454
 8007414:	2003c450 	.word	0x2003c450
 8007418:	2003c45c 	.word	0x2003c45c
 800741c:	2003c458 	.word	0x2003c458
 8007420:	2003c464 	.word	0x2003c464
 8007424:	2003c460 	.word	0x2003c460
 8007428:	2003c46c 	.word	0x2003c46c
 800742c:	2003c468 	.word	0x2003c468
 8007430:	200005c4 	.word	0x200005c4
	case 0:
		led.fullColor('W');
 8007434:	2157      	movs	r1, #87	; 0x57
 8007436:	48a6      	ldr	r0, [pc, #664]	; (80076d0 <cppLoop+0x580>)
 8007438:	f7fa fd60 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800743c:	f7f9 fe30 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007440:	2100      	movs	r1, #0
 8007442:	2000      	movs	r0, #0
 8007444:	f7f9 fe3c 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8007448:	48a2      	ldr	r0, [pc, #648]	; (80076d4 <cppLoop+0x584>)
 800744a:	f7fc f91e 	bl	800368a <_ZN9LineTrace5getKpEv>
 800744e:	eeb0 7a40 	vmov.f32	s14, s0
 8007452:	eddf 7aa1 	vldr	s15, [pc, #644]	; 80076d8 <cppLoop+0x588>
 8007456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800745a:	ee17 0a90 	vmov	r0, s15
 800745e:	f7f9 f88b 	bl	8000578 <__aeabi_f2d>
 8007462:	4603      	mov	r3, r0
 8007464:	460c      	mov	r4, r1
 8007466:	461a      	mov	r2, r3
 8007468:	4623      	mov	r3, r4
 800746a:	489c      	ldr	r0, [pc, #624]	; (80076dc <cppLoop+0x58c>)
 800746c:	f7f9 fe52 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007470:	2101      	movs	r1, #1
 8007472:	2000      	movs	r0, #0
 8007474:	f7f9 fe24 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8007478:	4896      	ldr	r0, [pc, #600]	; (80076d4 <cppLoop+0x584>)
 800747a:	f7fc f915 	bl	80036a8 <_ZN9LineTrace5getKiEv>
 800747e:	eeb0 7a40 	vmov.f32	s14, s0
 8007482:	eddf 7a97 	vldr	s15, [pc, #604]	; 80076e0 <cppLoop+0x590>
 8007486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800748a:	ee17 0a90 	vmov	r0, s15
 800748e:	f7f9 f873 	bl	8000578 <__aeabi_f2d>
 8007492:	4605      	mov	r5, r0
 8007494:	460e      	mov	r6, r1
 8007496:	488f      	ldr	r0, [pc, #572]	; (80076d4 <cppLoop+0x584>)
 8007498:	f7fc f915 	bl	80036c6 <_ZN9LineTrace5getKdEv>
 800749c:	eeb0 7a40 	vmov.f32	s14, s0
 80074a0:	eddf 7a90 	vldr	s15, [pc, #576]	; 80076e4 <cppLoop+0x594>
 80074a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074a8:	ee17 0a90 	vmov	r0, s15
 80074ac:	f7f9 f864 	bl	8000578 <__aeabi_f2d>
 80074b0:	4603      	mov	r3, r0
 80074b2:	460c      	mov	r4, r1
 80074b4:	e9cd 3400 	strd	r3, r4, [sp]
 80074b8:	462a      	mov	r2, r5
 80074ba:	4633      	mov	r3, r6
 80074bc:	488a      	ldr	r0, [pc, #552]	; (80076e8 <cppLoop+0x598>)
 80074be:	f7f9 fe29 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80074c2:	488a      	ldr	r0, [pc, #552]	; (80076ec <cppLoop+0x59c>)
 80074c4:	f7fa fcb6 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b08      	cmp	r3, #8
 80074cc:	bf0c      	ite	eq
 80074ce:	2301      	moveq	r3, #1
 80074d0:	2300      	movne	r3, #0
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d022      	beq.n	800751e <cppLoop+0x3ce>
			led.LR(-1, 1);
 80074d8:	2201      	movs	r2, #1
 80074da:	f04f 31ff 	mov.w	r1, #4294967295
 80074de:	487c      	ldr	r0, [pc, #496]	; (80076d0 <cppLoop+0x580>)
 80074e0:	f7fa fdc8 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80074e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80074e8:	f001 f9d0 	bl	800888c <HAL_Delay>

			selector++;
 80074ec:	4b80      	ldr	r3, [pc, #512]	; (80076f0 <cppLoop+0x5a0>)
 80074ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	3301      	adds	r3, #1
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	b21a      	sxth	r2, r3
 80074fa:	4b7d      	ldr	r3, [pc, #500]	; (80076f0 <cppLoop+0x5a0>)
 80074fc:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80074fe:	4b7c      	ldr	r3, [pc, #496]	; (80076f0 <cppLoop+0x5a0>)
 8007500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007504:	2b02      	cmp	r3, #2
 8007506:	dd02      	ble.n	800750e <cppLoop+0x3be>
 8007508:	4b79      	ldr	r3, [pc, #484]	; (80076f0 <cppLoop+0x5a0>)
 800750a:	2200      	movs	r2, #0
 800750c:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800750e:	2200      	movs	r2, #0
 8007510:	f04f 31ff 	mov.w	r1, #4294967295
 8007514:	486e      	ldr	r0, [pc, #440]	; (80076d0 <cppLoop+0x580>)
 8007516:	f7fa fdad 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 800751a:	f001 b866 	b.w	80085ea <cppLoop+0x149a>
		else if(joy_stick.getValue() == JOY_R){
 800751e:	4873      	ldr	r0, [pc, #460]	; (80076ec <cppLoop+0x59c>)
 8007520:	f7fa fc88 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007524:	4603      	mov	r3, r0
 8007526:	2b10      	cmp	r3, #16
 8007528:	bf0c      	ite	eq
 800752a:	2301      	moveq	r3, #1
 800752c:	2300      	movne	r3, #0
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b00      	cmp	r3, #0
 8007532:	d059      	beq.n	80075e8 <cppLoop+0x498>
			led.LR(-1, 1);
 8007534:	2201      	movs	r2, #1
 8007536:	f04f 31ff 	mov.w	r1, #4294967295
 800753a:	4865      	ldr	r0, [pc, #404]	; (80076d0 <cppLoop+0x580>)
 800753c:	f7fa fd9a 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007540:	2064      	movs	r0, #100	; 0x64
 8007542:	f001 f9a3 	bl	800888c <HAL_Delay>
			if(selector == 0){
 8007546:	4b6a      	ldr	r3, [pc, #424]	; (80076f0 <cppLoop+0x5a0>)
 8007548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d113      	bne.n	8007578 <cppLoop+0x428>
				adj_kp = adj_kp + 0.00001;
 8007550:	4b68      	ldr	r3, [pc, #416]	; (80076f4 <cppLoop+0x5a4>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4618      	mov	r0, r3
 8007556:	f7f9 f80f 	bl	8000578 <__aeabi_f2d>
 800755a:	a357      	add	r3, pc, #348	; (adr r3, 80076b8 <cppLoop+0x568>)
 800755c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007560:	f7f8 feac 	bl	80002bc <__adddf3>
 8007564:	4603      	mov	r3, r0
 8007566:	460c      	mov	r4, r1
 8007568:	4618      	mov	r0, r3
 800756a:	4621      	mov	r1, r4
 800756c:	f7f9 fb54 	bl	8000c18 <__aeabi_d2f>
 8007570:	4602      	mov	r2, r0
 8007572:	4b60      	ldr	r3, [pc, #384]	; (80076f4 <cppLoop+0x5a4>)
 8007574:	601a      	str	r2, [r3, #0]
 8007576:	e02b      	b.n	80075d0 <cppLoop+0x480>
			else if(selector == 1){
 8007578:	4b5d      	ldr	r3, [pc, #372]	; (80076f0 <cppLoop+0x5a0>)
 800757a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d113      	bne.n	80075aa <cppLoop+0x45a>
				adj_ki = adj_ki + 0.0001;
 8007582:	4b5d      	ldr	r3, [pc, #372]	; (80076f8 <cppLoop+0x5a8>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4618      	mov	r0, r3
 8007588:	f7f8 fff6 	bl	8000578 <__aeabi_f2d>
 800758c:	a34c      	add	r3, pc, #304	; (adr r3, 80076c0 <cppLoop+0x570>)
 800758e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007592:	f7f8 fe93 	bl	80002bc <__adddf3>
 8007596:	4603      	mov	r3, r0
 8007598:	460c      	mov	r4, r1
 800759a:	4618      	mov	r0, r3
 800759c:	4621      	mov	r1, r4
 800759e:	f7f9 fb3b 	bl	8000c18 <__aeabi_d2f>
 80075a2:	4602      	mov	r2, r0
 80075a4:	4b54      	ldr	r3, [pc, #336]	; (80076f8 <cppLoop+0x5a8>)
 80075a6:	601a      	str	r2, [r3, #0]
 80075a8:	e012      	b.n	80075d0 <cppLoop+0x480>
				adj_kd = adj_kd + 0.000001;
 80075aa:	4b54      	ldr	r3, [pc, #336]	; (80076fc <cppLoop+0x5ac>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7f8 ffe2 	bl	8000578 <__aeabi_f2d>
 80075b4:	a344      	add	r3, pc, #272	; (adr r3, 80076c8 <cppLoop+0x578>)
 80075b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ba:	f7f8 fe7f 	bl	80002bc <__adddf3>
 80075be:	4603      	mov	r3, r0
 80075c0:	460c      	mov	r4, r1
 80075c2:	4618      	mov	r0, r3
 80075c4:	4621      	mov	r1, r4
 80075c6:	f7f9 fb27 	bl	8000c18 <__aeabi_d2f>
 80075ca:	4602      	mov	r2, r0
 80075cc:	4b4b      	ldr	r3, [pc, #300]	; (80076fc <cppLoop+0x5ac>)
 80075ce:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80075d0:	2152      	movs	r1, #82	; 0x52
 80075d2:	483f      	ldr	r0, [pc, #252]	; (80076d0 <cppLoop+0x580>)
 80075d4:	f7fa fc92 	bl	8001efc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80075d8:	2200      	movs	r2, #0
 80075da:	f04f 31ff 	mov.w	r1, #4294967295
 80075de:	483c      	ldr	r0, [pc, #240]	; (80076d0 <cppLoop+0x580>)
 80075e0:	f7fa fd48 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80075e4:	f001 b801 	b.w	80085ea <cppLoop+0x149a>
		else if(joy_stick.getValue() == JOY_L){
 80075e8:	4840      	ldr	r0, [pc, #256]	; (80076ec <cppLoop+0x59c>)
 80075ea:	f7fa fc23 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	bf0c      	ite	eq
 80075f4:	2301      	moveq	r3, #1
 80075f6:	2300      	movne	r3, #0
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f000 8080 	beq.w	8007700 <cppLoop+0x5b0>
			led.LR(-1, 1);
 8007600:	2201      	movs	r2, #1
 8007602:	f04f 31ff 	mov.w	r1, #4294967295
 8007606:	4832      	ldr	r0, [pc, #200]	; (80076d0 <cppLoop+0x580>)
 8007608:	f7fa fd34 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800760c:	2064      	movs	r0, #100	; 0x64
 800760e:	f001 f93d 	bl	800888c <HAL_Delay>
			if(selector == 0){
 8007612:	4b37      	ldr	r3, [pc, #220]	; (80076f0 <cppLoop+0x5a0>)
 8007614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d113      	bne.n	8007644 <cppLoop+0x4f4>
				adj_kp = adj_kp - 0.00001;
 800761c:	4b35      	ldr	r3, [pc, #212]	; (80076f4 <cppLoop+0x5a4>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4618      	mov	r0, r3
 8007622:	f7f8 ffa9 	bl	8000578 <__aeabi_f2d>
 8007626:	a324      	add	r3, pc, #144	; (adr r3, 80076b8 <cppLoop+0x568>)
 8007628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762c:	f7f8 fe44 	bl	80002b8 <__aeabi_dsub>
 8007630:	4603      	mov	r3, r0
 8007632:	460c      	mov	r4, r1
 8007634:	4618      	mov	r0, r3
 8007636:	4621      	mov	r1, r4
 8007638:	f7f9 faee 	bl	8000c18 <__aeabi_d2f>
 800763c:	4602      	mov	r2, r0
 800763e:	4b2d      	ldr	r3, [pc, #180]	; (80076f4 <cppLoop+0x5a4>)
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	e02b      	b.n	800769c <cppLoop+0x54c>
			else if(selector == 1){
 8007644:	4b2a      	ldr	r3, [pc, #168]	; (80076f0 <cppLoop+0x5a0>)
 8007646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800764a:	2b01      	cmp	r3, #1
 800764c:	d113      	bne.n	8007676 <cppLoop+0x526>
				adj_ki = adj_ki - 0.0001;
 800764e:	4b2a      	ldr	r3, [pc, #168]	; (80076f8 <cppLoop+0x5a8>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4618      	mov	r0, r3
 8007654:	f7f8 ff90 	bl	8000578 <__aeabi_f2d>
 8007658:	a319      	add	r3, pc, #100	; (adr r3, 80076c0 <cppLoop+0x570>)
 800765a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765e:	f7f8 fe2b 	bl	80002b8 <__aeabi_dsub>
 8007662:	4603      	mov	r3, r0
 8007664:	460c      	mov	r4, r1
 8007666:	4618      	mov	r0, r3
 8007668:	4621      	mov	r1, r4
 800766a:	f7f9 fad5 	bl	8000c18 <__aeabi_d2f>
 800766e:	4602      	mov	r2, r0
 8007670:	4b21      	ldr	r3, [pc, #132]	; (80076f8 <cppLoop+0x5a8>)
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	e012      	b.n	800769c <cppLoop+0x54c>
				adj_kd = adj_kd - 0.000001;
 8007676:	4b21      	ldr	r3, [pc, #132]	; (80076fc <cppLoop+0x5ac>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4618      	mov	r0, r3
 800767c:	f7f8 ff7c 	bl	8000578 <__aeabi_f2d>
 8007680:	a311      	add	r3, pc, #68	; (adr r3, 80076c8 <cppLoop+0x578>)
 8007682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007686:	f7f8 fe17 	bl	80002b8 <__aeabi_dsub>
 800768a:	4603      	mov	r3, r0
 800768c:	460c      	mov	r4, r1
 800768e:	4618      	mov	r0, r3
 8007690:	4621      	mov	r1, r4
 8007692:	f7f9 fac1 	bl	8000c18 <__aeabi_d2f>
 8007696:	4602      	mov	r2, r0
 8007698:	4b18      	ldr	r3, [pc, #96]	; (80076fc <cppLoop+0x5ac>)
 800769a:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800769c:	2152      	movs	r1, #82	; 0x52
 800769e:	480c      	ldr	r0, [pc, #48]	; (80076d0 <cppLoop+0x580>)
 80076a0:	f7fa fc2c 	bl	8001efc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80076a4:	2200      	movs	r2, #0
 80076a6:	f04f 31ff 	mov.w	r1, #4294967295
 80076aa:	4809      	ldr	r0, [pc, #36]	; (80076d0 <cppLoop+0x580>)
 80076ac:	f7fa fce2 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80076b0:	f000 bf9b 	b.w	80085ea <cppLoop+0x149a>
 80076b4:	f3af 8000 	nop.w
 80076b8:	88e368f1 	.word	0x88e368f1
 80076bc:	3ee4f8b5 	.word	0x3ee4f8b5
 80076c0:	eb1c432d 	.word	0xeb1c432d
 80076c4:	3f1a36e2 	.word	0x3f1a36e2
 80076c8:	a0b5ed8d 	.word	0xa0b5ed8d
 80076cc:	3eb0c6f7 	.word	0x3eb0c6f7
 80076d0:	200005cc 	.word	0x200005cc
 80076d4:	20017da0 	.word	0x20017da0
 80076d8:	447a0000 	.word	0x447a0000
 80076dc:	08018b20 	.word	0x08018b20
 80076e0:	42c80000 	.word	0x42c80000
 80076e4:	461c4000 	.word	0x461c4000
 80076e8:	08018b2c 	.word	0x08018b2c
 80076ec:	200005c0 	.word	0x200005c0
 80076f0:	2003c42c 	.word	0x2003c42c
 80076f4:	2003c430 	.word	0x2003c430
 80076f8:	2003c438 	.word	0x2003c438
 80076fc:	2003c440 	.word	0x2003c440
		else if(joy_stick.getValue() == JOY_D){
 8007700:	48c3      	ldr	r0, [pc, #780]	; (8007a10 <cppLoop+0x8c0>)
 8007702:	f7fa fb97 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007706:	4603      	mov	r3, r0
 8007708:	2b04      	cmp	r3, #4
 800770a:	bf0c      	ite	eq
 800770c:	2301      	moveq	r3, #1
 800770e:	2300      	movne	r3, #0
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d03d      	beq.n	8007792 <cppLoop+0x642>
			led.LR(-1, 1);
 8007716:	2201      	movs	r2, #1
 8007718:	f04f 31ff 	mov.w	r1, #4294967295
 800771c:	48bd      	ldr	r0, [pc, #756]	; (8007a14 <cppLoop+0x8c4>)
 800771e:	f7fa fca9 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007722:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007726:	f001 f8b1 	bl	800888c <HAL_Delay>
			sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 800772a:	f107 030c 	add.w	r3, r7, #12
 800772e:	2201      	movs	r2, #1
 8007730:	49b9      	ldr	r1, [pc, #740]	; (8007a18 <cppLoop+0x8c8>)
 8007732:	48ba      	ldr	r0, [pc, #744]	; (8007a1c <cppLoop+0x8cc>)
 8007734:	f7f9 ffcc 	bl	80016d0 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8007738:	f107 0308 	add.w	r3, r7, #8
 800773c:	2201      	movs	r2, #1
 800773e:	49b8      	ldr	r1, [pc, #736]	; (8007a20 <cppLoop+0x8d0>)
 8007740:	48b6      	ldr	r0, [pc, #728]	; (8007a1c <cppLoop+0x8cc>)
 8007742:	f7f9 ffc5 	bl	80016d0 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8007746:	1d3b      	adds	r3, r7, #4
 8007748:	2201      	movs	r2, #1
 800774a:	49b6      	ldr	r1, [pc, #728]	; (8007a24 <cppLoop+0x8d4>)
 800774c:	48b3      	ldr	r0, [pc, #716]	; (8007a1c <cppLoop+0x8cc>)
 800774e:	f7f9 ffbf 	bl	80016d0 <sd_read_array_float>
			line_trace.setGain(temp_kp, temp_ki, temp_kd);
 8007752:	edd7 7a03 	vldr	s15, [r7, #12]
 8007756:	ed97 7a02 	vldr	s14, [r7, #8]
 800775a:	edd7 6a01 	vldr	s13, [r7, #4]
 800775e:	eeb0 1a66 	vmov.f32	s2, s13
 8007762:	eef0 0a47 	vmov.f32	s1, s14
 8007766:	eeb0 0a67 	vmov.f32	s0, s15
 800776a:	48af      	ldr	r0, [pc, #700]	; (8007a28 <cppLoop+0x8d8>)
 800776c:	f7fb ff74 	bl	8003658 <_ZN9LineTrace7setGainEfff>
			adj_kp = temp_kp;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4aae      	ldr	r2, [pc, #696]	; (8007a2c <cppLoop+0x8dc>)
 8007774:	6013      	str	r3, [r2, #0]
			adj_ki = temp_kp;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	4aad      	ldr	r2, [pc, #692]	; (8007a30 <cppLoop+0x8e0>)
 800777a:	6013      	str	r3, [r2, #0]
			adj_kd = temp_kp;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	4aad      	ldr	r2, [pc, #692]	; (8007a34 <cppLoop+0x8e4>)
 8007780:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8007782:	2200      	movs	r2, #0
 8007784:	f04f 31ff 	mov.w	r1, #4294967295
 8007788:	48a2      	ldr	r0, [pc, #648]	; (8007a14 <cppLoop+0x8c4>)
 800778a:	f7fa fc73 	bl	8002074 <_ZN3LED2LREaa>
		break;
 800778e:	f000 bf2c 	b.w	80085ea <cppLoop+0x149a>
		else if(joy_stick.getValue() == JOY_C){
 8007792:	489f      	ldr	r0, [pc, #636]	; (8007a10 <cppLoop+0x8c0>)
 8007794:	f7fa fb4e 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007798:	4603      	mov	r3, r0
 800779a:	2b02      	cmp	r3, #2
 800779c:	bf0c      	ite	eq
 800779e:	2301      	moveq	r3, #1
 80077a0:	2300      	movne	r3, #0
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 8720 	beq.w	80085ea <cppLoop+0x149a>
			led.LR(-1, 1);
 80077aa:	2201      	movs	r2, #1
 80077ac:	f04f 31ff 	mov.w	r1, #4294967295
 80077b0:	4898      	ldr	r0, [pc, #608]	; (8007a14 <cppLoop+0x8c4>)
 80077b2:	f7fa fc5f 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80077b6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80077ba:	f001 f867 	bl	800888c <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 80077be:	2300      	movs	r3, #0
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	4b9a      	ldr	r3, [pc, #616]	; (8007a2c <cppLoop+0x8dc>)
 80077c4:	2201      	movs	r2, #1
 80077c6:	4994      	ldr	r1, [pc, #592]	; (8007a18 <cppLoop+0x8c8>)
 80077c8:	4894      	ldr	r0, [pc, #592]	; (8007a1c <cppLoop+0x8cc>)
 80077ca:	f7f9 ff1b 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 80077ce:	2300      	movs	r3, #0
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	4b97      	ldr	r3, [pc, #604]	; (8007a30 <cppLoop+0x8e0>)
 80077d4:	2201      	movs	r2, #1
 80077d6:	4992      	ldr	r1, [pc, #584]	; (8007a20 <cppLoop+0x8d0>)
 80077d8:	4890      	ldr	r0, [pc, #576]	; (8007a1c <cppLoop+0x8cc>)
 80077da:	f7f9 ff13 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 80077de:	2300      	movs	r3, #0
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	4b94      	ldr	r3, [pc, #592]	; (8007a34 <cppLoop+0x8e4>)
 80077e4:	2201      	movs	r2, #1
 80077e6:	498f      	ldr	r1, [pc, #572]	; (8007a24 <cppLoop+0x8d4>)
 80077e8:	488c      	ldr	r0, [pc, #560]	; (8007a1c <cppLoop+0x8cc>)
 80077ea:	f7f9 ff0b 	bl	8001604 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 80077ee:	4b8f      	ldr	r3, [pc, #572]	; (8007a2c <cppLoop+0x8dc>)
 80077f0:	edd3 7a00 	vldr	s15, [r3]
 80077f4:	4b8e      	ldr	r3, [pc, #568]	; (8007a30 <cppLoop+0x8e0>)
 80077f6:	ed93 7a00 	vldr	s14, [r3]
 80077fa:	4b8e      	ldr	r3, [pc, #568]	; (8007a34 <cppLoop+0x8e4>)
 80077fc:	edd3 6a00 	vldr	s13, [r3]
 8007800:	eeb0 1a66 	vmov.f32	s2, s13
 8007804:	eef0 0a47 	vmov.f32	s1, s14
 8007808:	eeb0 0a67 	vmov.f32	s0, s15
 800780c:	4886      	ldr	r0, [pc, #536]	; (8007a28 <cppLoop+0x8d8>)
 800780e:	f7fb ff23 	bl	8003658 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8007812:	2200      	movs	r2, #0
 8007814:	f04f 31ff 	mov.w	r1, #4294967295
 8007818:	487e      	ldr	r0, [pc, #504]	; (8007a14 <cppLoop+0x8c4>)
 800781a:	f7fa fc2b 	bl	8002074 <_ZN3LED2LREaa>
		break;
 800781e:	f000 bee4 	b.w	80085ea <cppLoop+0x149a>

	case 1:
		led.fullColor('C');
 8007822:	2143      	movs	r1, #67	; 0x43
 8007824:	487b      	ldr	r0, [pc, #492]	; (8007a14 <cppLoop+0x8c4>)
 8007826:	f7fa fb69 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800782a:	f7f9 fc39 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800782e:	2100      	movs	r1, #0
 8007830:	2000      	movs	r0, #0
 8007832:	f7f9 fc45 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007836:	4880      	ldr	r0, [pc, #512]	; (8007a38 <cppLoop+0x8e8>)
 8007838:	f7f9 fc6c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800783c:	2101      	movs	r1, #1
 800783e:	2000      	movs	r0, #0
 8007840:	f7f9 fc3e 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 8007844:	4b7d      	ldr	r3, [pc, #500]	; (8007a3c <cppLoop+0x8ec>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4618      	mov	r0, r3
 800784a:	f7f8 fe95 	bl	8000578 <__aeabi_f2d>
 800784e:	4603      	mov	r3, r0
 8007850:	460c      	mov	r4, r1
 8007852:	461a      	mov	r2, r3
 8007854:	4623      	mov	r3, r4
 8007856:	487a      	ldr	r0, [pc, #488]	; (8007a40 <cppLoop+0x8f0>)
 8007858:	f7f9 fc5c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800785c:	486c      	ldr	r0, [pc, #432]	; (8007a10 <cppLoop+0x8c0>)
 800785e:	f7fa fae9 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007862:	4603      	mov	r3, r0
 8007864:	2b02      	cmp	r3, #2
 8007866:	bf0c      	ite	eq
 8007868:	2301      	moveq	r3, #1
 800786a:	2300      	movne	r3, #0
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b00      	cmp	r3, #0
 8007870:	f000 86bd 	beq.w	80085ee <cppLoop+0x149e>
			HAL_Delay(500);
 8007874:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007878:	f001 f808 	bl	800888c <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 800787c:	4b6f      	ldr	r3, [pc, #444]	; (8007a3c <cppLoop+0x8ec>)
 800787e:	edd3 7a00 	vldr	s15, [r3]
 8007882:	eeb0 0a67 	vmov.f32	s0, s15
 8007886:	4868      	ldr	r0, [pc, #416]	; (8007a28 <cppLoop+0x8d8>)
 8007888:	f7fb ff3b 	bl	8003702 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 800788c:	f04f 32ff 	mov.w	r2, #4294967295
 8007890:	2101      	movs	r1, #1
 8007892:	4860      	ldr	r0, [pc, #384]	; (8007a14 <cppLoop+0x8c4>)
 8007894:	f7fa fbee 	bl	8002074 <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 8007898:	2100      	movs	r1, #0
 800789a:	4863      	ldr	r0, [pc, #396]	; (8007a28 <cppLoop+0x8d8>)
 800789c:	f7fc fa2c 	bl	8003cf8 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 80078a0:	4861      	ldr	r0, [pc, #388]	; (8007a28 <cppLoop+0x8d8>)
 80078a2:	f7fc f92b 	bl	8003afc <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80078a6:	f04f 32ff 	mov.w	r2, #4294967295
 80078aa:	2100      	movs	r1, #0
 80078ac:	4859      	ldr	r0, [pc, #356]	; (8007a14 <cppLoop+0x8c4>)
 80078ae:	f7fa fbe1 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 80078b2:	f000 be9c 	b.w	80085ee <cppLoop+0x149e>

	case 2:
		led.fullColor('B');
 80078b6:	2142      	movs	r1, #66	; 0x42
 80078b8:	4856      	ldr	r0, [pc, #344]	; (8007a14 <cppLoop+0x8c4>)
 80078ba:	f7fa fb1f 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80078be:	f7f9 fbef 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80078c2:	2100      	movs	r1, #0
 80078c4:	2000      	movs	r0, #0
 80078c6:	f7f9 fbfb 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80078ca:	485b      	ldr	r0, [pc, #364]	; (8007a38 <cppLoop+0x8e8>)
 80078cc:	f7f9 fc22 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80078d0:	2101      	movs	r1, #1
 80078d2:	2000      	movs	r0, #0
 80078d4:	f7f9 fbf4 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 80078d8:	4b58      	ldr	r3, [pc, #352]	; (8007a3c <cppLoop+0x8ec>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4618      	mov	r0, r3
 80078de:	f7f8 fe4b 	bl	8000578 <__aeabi_f2d>
 80078e2:	4603      	mov	r3, r0
 80078e4:	460c      	mov	r4, r1
 80078e6:	461a      	mov	r2, r3
 80078e8:	4623      	mov	r3, r4
 80078ea:	4856      	ldr	r0, [pc, #344]	; (8007a44 <cppLoop+0x8f4>)
 80078ec:	f7f9 fc12 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 80078f0:	4847      	ldr	r0, [pc, #284]	; (8007a10 <cppLoop+0x8c0>)
 80078f2:	f7fa fa9f 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b10      	cmp	r3, #16
 80078fa:	bf0c      	ite	eq
 80078fc:	2301      	moveq	r3, #1
 80078fe:	2300      	movne	r3, #0
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d023      	beq.n	800794e <cppLoop+0x7fe>
			led.LR(-1, 1);
 8007906:	2201      	movs	r2, #1
 8007908:	f04f 31ff 	mov.w	r1, #4294967295
 800790c:	4841      	ldr	r0, [pc, #260]	; (8007a14 <cppLoop+0x8c4>)
 800790e:	f7fa fbb1 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007912:	2064      	movs	r0, #100	; 0x64
 8007914:	f000 ffba 	bl	800888c <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 8007918:	4b48      	ldr	r3, [pc, #288]	; (8007a3c <cppLoop+0x8ec>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4618      	mov	r0, r3
 800791e:	f7f8 fe2b 	bl	8000578 <__aeabi_f2d>
 8007922:	a339      	add	r3, pc, #228	; (adr r3, 8007a08 <cppLoop+0x8b8>)
 8007924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007928:	f7f8 fcc8 	bl	80002bc <__adddf3>
 800792c:	4603      	mov	r3, r0
 800792e:	460c      	mov	r4, r1
 8007930:	4618      	mov	r0, r3
 8007932:	4621      	mov	r1, r4
 8007934:	f7f9 f970 	bl	8000c18 <__aeabi_d2f>
 8007938:	4602      	mov	r2, r0
 800793a:	4b40      	ldr	r3, [pc, #256]	; (8007a3c <cppLoop+0x8ec>)
 800793c:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 800793e:	2200      	movs	r2, #0
 8007940:	f04f 31ff 	mov.w	r1, #4294967295
 8007944:	4833      	ldr	r0, [pc, #204]	; (8007a14 <cppLoop+0x8c4>)
 8007946:	f7fa fb95 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 800794a:	f000 be52 	b.w	80085f2 <cppLoop+0x14a2>
		else if(joy_stick.getValue() == JOY_L){
 800794e:	4830      	ldr	r0, [pc, #192]	; (8007a10 <cppLoop+0x8c0>)
 8007950:	f7fa fa70 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007954:	4603      	mov	r3, r0
 8007956:	2b01      	cmp	r3, #1
 8007958:	bf0c      	ite	eq
 800795a:	2301      	moveq	r3, #1
 800795c:	2300      	movne	r3, #0
 800795e:	b2db      	uxtb	r3, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	d023      	beq.n	80079ac <cppLoop+0x85c>
			led.LR(-1, 1);
 8007964:	2201      	movs	r2, #1
 8007966:	f04f 31ff 	mov.w	r1, #4294967295
 800796a:	482a      	ldr	r0, [pc, #168]	; (8007a14 <cppLoop+0x8c4>)
 800796c:	f7fa fb82 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007970:	2064      	movs	r0, #100	; 0x64
 8007972:	f000 ff8b 	bl	800888c <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8007976:	4b31      	ldr	r3, [pc, #196]	; (8007a3c <cppLoop+0x8ec>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4618      	mov	r0, r3
 800797c:	f7f8 fdfc 	bl	8000578 <__aeabi_f2d>
 8007980:	a321      	add	r3, pc, #132	; (adr r3, 8007a08 <cppLoop+0x8b8>)
 8007982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007986:	f7f8 fc97 	bl	80002b8 <__aeabi_dsub>
 800798a:	4603      	mov	r3, r0
 800798c:	460c      	mov	r4, r1
 800798e:	4618      	mov	r0, r3
 8007990:	4621      	mov	r1, r4
 8007992:	f7f9 f941 	bl	8000c18 <__aeabi_d2f>
 8007996:	4602      	mov	r2, r0
 8007998:	4b28      	ldr	r3, [pc, #160]	; (8007a3c <cppLoop+0x8ec>)
 800799a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800799c:	2200      	movs	r2, #0
 800799e:	f04f 31ff 	mov.w	r1, #4294967295
 80079a2:	481c      	ldr	r0, [pc, #112]	; (8007a14 <cppLoop+0x8c4>)
 80079a4:	f7fa fb66 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80079a8:	f000 be23 	b.w	80085f2 <cppLoop+0x14a2>
		else if(joy_stick.getValue() == JOY_C){
 80079ac:	4818      	ldr	r0, [pc, #96]	; (8007a10 <cppLoop+0x8c0>)
 80079ae:	f7fa fa41 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	bf0c      	ite	eq
 80079b8:	2301      	moveq	r3, #1
 80079ba:	2300      	movne	r3, #0
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f000 8617 	beq.w	80085f2 <cppLoop+0x14a2>
			led.LR(-1, 1);
 80079c4:	2201      	movs	r2, #1
 80079c6:	f04f 31ff 	mov.w	r1, #4294967295
 80079ca:	4812      	ldr	r0, [pc, #72]	; (8007a14 <cppLoop+0x8c4>)
 80079cc:	f7fa fb52 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80079d0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80079d4:	f000 ff5a 	bl	800888c <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 80079d8:	2300      	movs	r3, #0
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	4b17      	ldr	r3, [pc, #92]	; (8007a3c <cppLoop+0x8ec>)
 80079de:	2201      	movs	r2, #1
 80079e0:	4919      	ldr	r1, [pc, #100]	; (8007a48 <cppLoop+0x8f8>)
 80079e2:	480e      	ldr	r0, [pc, #56]	; (8007a1c <cppLoop+0x8cc>)
 80079e4:	f7f9 fe0e 	bl	8001604 <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 80079e8:	4b14      	ldr	r3, [pc, #80]	; (8007a3c <cppLoop+0x8ec>)
 80079ea:	edd3 7a00 	vldr	s15, [r3]
 80079ee:	eeb0 0a67 	vmov.f32	s0, s15
 80079f2:	480d      	ldr	r0, [pc, #52]	; (8007a28 <cppLoop+0x8d8>)
 80079f4:	f7fb fe85 	bl	8003702 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 80079f8:	2200      	movs	r2, #0
 80079fa:	f04f 31ff 	mov.w	r1, #4294967295
 80079fe:	4805      	ldr	r0, [pc, #20]	; (8007a14 <cppLoop+0x8c4>)
 8007a00:	f7fa fb38 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007a04:	f000 bdf5 	b.w	80085f2 <cppLoop+0x14a2>
 8007a08:	9999999a 	.word	0x9999999a
 8007a0c:	3fb99999 	.word	0x3fb99999
 8007a10:	200005c0 	.word	0x200005c0
 8007a14:	200005cc 	.word	0x200005cc
 8007a18:	08018b3c 	.word	0x08018b3c
 8007a1c:	08018b44 	.word	0x08018b44
 8007a20:	08018b4c 	.word	0x08018b4c
 8007a24:	08018b54 	.word	0x08018b54
 8007a28:	20017da0 	.word	0x20017da0
 8007a2c:	2003c430 	.word	0x2003c430
 8007a30:	2003c438 	.word	0x2003c438
 8007a34:	2003c440 	.word	0x2003c440
 8007a38:	08018b5c 	.word	0x08018b5c
 8007a3c:	2003c448 	.word	0x2003c448
 8007a40:	08018b68 	.word	0x08018b68
 8007a44:	08018b74 	.word	0x08018b74
 8007a48:	08018b80 	.word	0x08018b80

	case 3:
		led.fullColor('Y');
 8007a4c:	2159      	movs	r1, #89	; 0x59
 8007a4e:	48ac      	ldr	r0, [pc, #688]	; (8007d00 <cppLoop+0xbb0>)
 8007a50:	f7fa fa54 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007a54:	f7f9 fb24 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007a58:	2100      	movs	r1, #0
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	f7f9 fb30 	bl	80010c0 <lcd_locate>
		lcd_printf("SeconRun");
 8007a60:	48a8      	ldr	r0, [pc, #672]	; (8007d04 <cppLoop+0xbb4>)
 8007a62:	f7f9 fb57 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007a66:	2101      	movs	r1, #1
 8007a68:	2000      	movs	r0, #0
 8007a6a:	f7f9 fb29 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 8007a6e:	4ba6      	ldr	r3, [pc, #664]	; (8007d08 <cppLoop+0xbb8>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7f8 fd80 	bl	8000578 <__aeabi_f2d>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	460c      	mov	r4, r1
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	4623      	mov	r3, r4
 8007a80:	48a2      	ldr	r0, [pc, #648]	; (8007d0c <cppLoop+0xbbc>)
 8007a82:	f7f9 fb47 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007a86:	48a2      	ldr	r0, [pc, #648]	; (8007d10 <cppLoop+0xbc0>)
 8007a88:	f7fa f9d4 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	bf0c      	ite	eq
 8007a92:	2301      	moveq	r3, #1
 8007a94:	2300      	movne	r3, #0
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 85ac 	beq.w	80085f6 <cppLoop+0x14a6>
			HAL_Delay(500);
 8007a9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007aa2:	f000 fef3 	bl	800888c <HAL_Delay>

			led.LR(1, -1);
 8007aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aaa:	2101      	movs	r1, #1
 8007aac:	4894      	ldr	r0, [pc, #592]	; (8007d00 <cppLoop+0xbb0>)
 8007aae:	f7fa fae1 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8007ab2:	2101      	movs	r1, #1
 8007ab4:	4897      	ldr	r0, [pc, #604]	; (8007d14 <cppLoop+0xbc4>)
 8007ab6:	f7fc f91f 	bl	8003cf8 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity);
 8007aba:	4b93      	ldr	r3, [pc, #588]	; (8007d08 <cppLoop+0xbb8>)
 8007abc:	edd3 7a00 	vldr	s15, [r3]
 8007ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8007ac4:	4893      	ldr	r0, [pc, #588]	; (8007d14 <cppLoop+0xbc4>)
 8007ac6:	f7fb fe1c 	bl	8003702 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8007aca:	4b8f      	ldr	r3, [pc, #572]	; (8007d08 <cppLoop+0xbb8>)
 8007acc:	edd3 7a00 	vldr	s15, [r3]
 8007ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8007ad4:	488f      	ldr	r0, [pc, #572]	; (8007d14 <cppLoop+0xbc4>)
 8007ad6:	f7fb fe23 	bl	8003720 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabele();
 8007ada:	488e      	ldr	r0, [pc, #568]	; (8007d14 <cppLoop+0xbc4>)
 8007adc:	f7fb f98a 	bl	8002df4 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8007ae0:	488c      	ldr	r0, [pc, #560]	; (8007d14 <cppLoop+0xbc4>)
 8007ae2:	f7fc f80b 	bl	8003afc <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aea:	2100      	movs	r1, #0
 8007aec:	4884      	ldr	r0, [pc, #528]	; (8007d00 <cppLoop+0xbb0>)
 8007aee:	f7fa fac1 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8007af2:	f000 bd80 	b.w	80085f6 <cppLoop+0x14a6>

	case 4:
		led.fullColor('G');
 8007af6:	2147      	movs	r1, #71	; 0x47
 8007af8:	4881      	ldr	r0, [pc, #516]	; (8007d00 <cppLoop+0xbb0>)
 8007afa:	f7fa f9ff 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007afe:	f7f9 facf 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007b02:	2100      	movs	r1, #0
 8007b04:	2000      	movs	r0, #0
 8007b06:	f7f9 fadb 	bl	80010c0 <lcd_locate>
		lcd_printf("SeconRun");
 8007b0a:	487e      	ldr	r0, [pc, #504]	; (8007d04 <cppLoop+0xbb4>)
 8007b0c:	f7f9 fb02 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007b10:	2101      	movs	r1, #1
 8007b12:	2000      	movs	r0, #0
 8007b14:	f7f9 fad4 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMaxVelocity());
 8007b18:	487e      	ldr	r0, [pc, #504]	; (8007d14 <cppLoop+0xbc4>)
 8007b1a:	f7fb fe2f 	bl	800377c <_ZN9LineTrace14getMaxVelocityEv>
 8007b1e:	ee10 3a10 	vmov	r3, s0
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7f8 fd28 	bl	8000578 <__aeabi_f2d>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	4623      	mov	r3, r4
 8007b30:	4879      	ldr	r0, [pc, #484]	; (8007d18 <cppLoop+0xbc8>)
 8007b32:	f7f9 faef 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_R){
 8007b36:	4876      	ldr	r0, [pc, #472]	; (8007d10 <cppLoop+0xbc0>)
 8007b38:	f7fa f97c 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b10      	cmp	r3, #16
 8007b40:	bf0c      	ite	eq
 8007b42:	2301      	moveq	r3, #1
 8007b44:	2300      	movne	r3, #0
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d023      	beq.n	8007b94 <cppLoop+0xa44>
			led.LR(-1, 1);
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f04f 31ff 	mov.w	r1, #4294967295
 8007b52:	486b      	ldr	r0, [pc, #428]	; (8007d00 <cppLoop+0xbb0>)
 8007b54:	f7fa fa8e 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007b58:	2064      	movs	r0, #100	; 0x64
 8007b5a:	f000 fe97 	bl	800888c <HAL_Delay>

			adj_max_velocity = adj_max_velocity + 0.1;
 8007b5e:	4b6a      	ldr	r3, [pc, #424]	; (8007d08 <cppLoop+0xbb8>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7f8 fd08 	bl	8000578 <__aeabi_f2d>
 8007b68:	a363      	add	r3, pc, #396	; (adr r3, 8007cf8 <cppLoop+0xba8>)
 8007b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6e:	f7f8 fba5 	bl	80002bc <__adddf3>
 8007b72:	4603      	mov	r3, r0
 8007b74:	460c      	mov	r4, r1
 8007b76:	4618      	mov	r0, r3
 8007b78:	4621      	mov	r1, r4
 8007b7a:	f7f9 f84d 	bl	8000c18 <__aeabi_d2f>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	4b61      	ldr	r3, [pc, #388]	; (8007d08 <cppLoop+0xbb8>)
 8007b82:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8007b84:	2200      	movs	r2, #0
 8007b86:	f04f 31ff 	mov.w	r1, #4294967295
 8007b8a:	485d      	ldr	r0, [pc, #372]	; (8007d00 <cppLoop+0xbb0>)
 8007b8c:	f7fa fa72 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
			line_trace.setMaxVelocity(adj_max_velocity);

			led.LR(-1, 0);
		}
		break;
 8007b90:	f000 bd33 	b.w	80085fa <cppLoop+0x14aa>
		else if(joy_stick.getValue() == JOY_L){
 8007b94:	485e      	ldr	r0, [pc, #376]	; (8007d10 <cppLoop+0xbc0>)
 8007b96:	f7fa f94d 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	bf0c      	ite	eq
 8007ba0:	2301      	moveq	r3, #1
 8007ba2:	2300      	movne	r3, #0
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d023      	beq.n	8007bf2 <cppLoop+0xaa2>
			led.LR(-1, 1);
 8007baa:	2201      	movs	r2, #1
 8007bac:	f04f 31ff 	mov.w	r1, #4294967295
 8007bb0:	4853      	ldr	r0, [pc, #332]	; (8007d00 <cppLoop+0xbb0>)
 8007bb2:	f7fa fa5f 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007bb6:	2064      	movs	r0, #100	; 0x64
 8007bb8:	f000 fe68 	bl	800888c <HAL_Delay>
			adj_max_velocity = adj_max_velocity - 0.1;
 8007bbc:	4b52      	ldr	r3, [pc, #328]	; (8007d08 <cppLoop+0xbb8>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7f8 fcd9 	bl	8000578 <__aeabi_f2d>
 8007bc6:	a34c      	add	r3, pc, #304	; (adr r3, 8007cf8 <cppLoop+0xba8>)
 8007bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bcc:	f7f8 fb74 	bl	80002b8 <__aeabi_dsub>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	460c      	mov	r4, r1
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	f7f9 f81e 	bl	8000c18 <__aeabi_d2f>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	4b4a      	ldr	r3, [pc, #296]	; (8007d08 <cppLoop+0xbb8>)
 8007be0:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007be2:	2200      	movs	r2, #0
 8007be4:	f04f 31ff 	mov.w	r1, #4294967295
 8007be8:	4845      	ldr	r0, [pc, #276]	; (8007d00 <cppLoop+0xbb0>)
 8007bea:	f7fa fa43 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007bee:	f000 bd04 	b.w	80085fa <cppLoop+0x14aa>
		else if(joy_stick.getValue() == JOY_C){
 8007bf2:	4847      	ldr	r0, [pc, #284]	; (8007d10 <cppLoop+0xbc0>)
 8007bf4:	f7fa f91e 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	bf0c      	ite	eq
 8007bfe:	2301      	moveq	r3, #1
 8007c00:	2300      	movne	r3, #0
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 84f8 	beq.w	80085fa <cppLoop+0x14aa>
			led.LR(-1, 1);
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8007c10:	483b      	ldr	r0, [pc, #236]	; (8007d00 <cppLoop+0xbb0>)
 8007c12:	f7fa fa2f 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007c16:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007c1a:	f000 fe37 	bl	800888c <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8007c1e:	2300      	movs	r3, #0
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	4b39      	ldr	r3, [pc, #228]	; (8007d08 <cppLoop+0xbb8>)
 8007c24:	2201      	movs	r2, #1
 8007c26:	493d      	ldr	r1, [pc, #244]	; (8007d1c <cppLoop+0xbcc>)
 8007c28:	483d      	ldr	r0, [pc, #244]	; (8007d20 <cppLoop+0xbd0>)
 8007c2a:	f7f9 fceb 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8007c2e:	4b36      	ldr	r3, [pc, #216]	; (8007d08 <cppLoop+0xbb8>)
 8007c30:	edd3 7a00 	vldr	s15, [r3]
 8007c34:	eeb0 0a67 	vmov.f32	s0, s15
 8007c38:	4836      	ldr	r0, [pc, #216]	; (8007d14 <cppLoop+0xbc4>)
 8007c3a:	f7fb fd71 	bl	8003720 <_ZN9LineTrace14setMaxVelocityEf>
			led.LR(-1, 0);
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f04f 31ff 	mov.w	r1, #4294967295
 8007c44:	482e      	ldr	r0, [pc, #184]	; (8007d00 <cppLoop+0xbb0>)
 8007c46:	f7fa fa15 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007c4a:	f000 bcd6 	b.w	80085fa <cppLoop+0x14aa>

	case 5:
		led.fullColor('M');
 8007c4e:	214d      	movs	r1, #77	; 0x4d
 8007c50:	482b      	ldr	r0, [pc, #172]	; (8007d00 <cppLoop+0xbb0>)
 8007c52:	f7fa f953 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007c56:	f7f9 fa23 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	2000      	movs	r0, #0
 8007c5e:	f7f9 fa2f 	bl	80010c0 <lcd_locate>
		lcd_printf("ThirdRun");
 8007c62:	4830      	ldr	r0, [pc, #192]	; (8007d24 <cppLoop+0xbd4>)
 8007c64:	f7f9 fa56 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007c68:	2101      	movs	r1, #1
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	f7f9 fa28 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8007c70:	4b2d      	ldr	r3, [pc, #180]	; (8007d28 <cppLoop+0xbd8>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7f8 fc7f 	bl	8000578 <__aeabi_f2d>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	460c      	mov	r4, r1
 8007c7e:	461a      	mov	r2, r3
 8007c80:	4623      	mov	r3, r4
 8007c82:	4822      	ldr	r0, [pc, #136]	; (8007d0c <cppLoop+0xbbc>)
 8007c84:	f7f9 fa46 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007c88:	4821      	ldr	r0, [pc, #132]	; (8007d10 <cppLoop+0xbc0>)
 8007c8a:	f7fa f8d3 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	bf0c      	ite	eq
 8007c94:	2301      	moveq	r3, #1
 8007c96:	2300      	movne	r3, #0
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f000 84af 	beq.w	80085fe <cppLoop+0x14ae>
			HAL_Delay(500);
 8007ca0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007ca4:	f000 fdf2 	bl	800888c <HAL_Delay>

			led.LR(1, -1);
 8007ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cac:	2101      	movs	r1, #1
 8007cae:	4814      	ldr	r0, [pc, #80]	; (8007d00 <cppLoop+0xbb0>)
 8007cb0:	f7fa f9e0 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8007cb4:	2102      	movs	r1, #2
 8007cb6:	4817      	ldr	r0, [pc, #92]	; (8007d14 <cppLoop+0xbc4>)
 8007cb8:	f7fc f81e 	bl	8003cf8 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8007cbc:	4b1a      	ldr	r3, [pc, #104]	; (8007d28 <cppLoop+0xbd8>)
 8007cbe:	edd3 7a00 	vldr	s15, [r3]
 8007cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8007cc6:	4813      	ldr	r0, [pc, #76]	; (8007d14 <cppLoop+0xbc4>)
 8007cc8:	f7fb fd1b 	bl	8003702 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8007ccc:	4b16      	ldr	r3, [pc, #88]	; (8007d28 <cppLoop+0xbd8>)
 8007cce:	edd3 7a00 	vldr	s15, [r3]
 8007cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8007cd6:	480f      	ldr	r0, [pc, #60]	; (8007d14 <cppLoop+0xbc4>)
 8007cd8:	f7fb fd31 	bl	800373e <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.createVelocityTabele();
 8007cdc:	480d      	ldr	r0, [pc, #52]	; (8007d14 <cppLoop+0xbc4>)
 8007cde:	f7fb f889 	bl	8002df4 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8007ce2:	480c      	ldr	r0, [pc, #48]	; (8007d14 <cppLoop+0xbc4>)
 8007ce4:	f7fb ff0a 	bl	8003afc <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cec:	2100      	movs	r1, #0
 8007cee:	4804      	ldr	r0, [pc, #16]	; (8007d00 <cppLoop+0xbb0>)
 8007cf0:	f7fa f9c0 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8007cf4:	f000 bc83 	b.w	80085fe <cppLoop+0x14ae>
 8007cf8:	9999999a 	.word	0x9999999a
 8007cfc:	3fb99999 	.word	0x3fb99999
 8007d00:	200005cc 	.word	0x200005cc
 8007d04:	08018b8c 	.word	0x08018b8c
 8007d08:	2003c450 	.word	0x2003c450
 8007d0c:	08018b68 	.word	0x08018b68
 8007d10:	200005c0 	.word	0x200005c0
 8007d14:	20017da0 	.word	0x20017da0
 8007d18:	08018b74 	.word	0x08018b74
 8007d1c:	08018b98 	.word	0x08018b98
 8007d20:	08018b44 	.word	0x08018b44
 8007d24:	08018ba4 	.word	0x08018ba4
 8007d28:	2003c458 	.word	0x2003c458

	case 6:
		led.fullColor('R');
 8007d2c:	2152      	movs	r1, #82	; 0x52
 8007d2e:	48be      	ldr	r0, [pc, #760]	; (8008028 <cppLoop+0xed8>)
 8007d30:	f7fa f8e4 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007d34:	f7f9 f9b4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007d38:	2100      	movs	r1, #0
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	f7f9 f9c0 	bl	80010c0 <lcd_locate>
		lcd_printf("ThirdRun");
 8007d40:	48ba      	ldr	r0, [pc, #744]	; (800802c <cppLoop+0xedc>)
 8007d42:	f7f9 f9e7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007d46:	2101      	movs	r1, #1
 8007d48:	2000      	movs	r0, #0
 8007d4a:	f7f9 f9b9 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMaxVelocity2());
 8007d4e:	48b8      	ldr	r0, [pc, #736]	; (8008030 <cppLoop+0xee0>)
 8007d50:	f7fb fd23 	bl	800379a <_ZN9LineTrace15getMaxVelocity2Ev>
 8007d54:	ee10 3a10 	vmov	r3, s0
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7f8 fc0d 	bl	8000578 <__aeabi_f2d>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	460c      	mov	r4, r1
 8007d62:	461a      	mov	r2, r3
 8007d64:	4623      	mov	r3, r4
 8007d66:	48b3      	ldr	r0, [pc, #716]	; (8008034 <cppLoop+0xee4>)
 8007d68:	f7f9 f9d4 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_R){
 8007d6c:	48b2      	ldr	r0, [pc, #712]	; (8008038 <cppLoop+0xee8>)
 8007d6e:	f7fa f861 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b10      	cmp	r3, #16
 8007d76:	bf0c      	ite	eq
 8007d78:	2301      	moveq	r3, #1
 8007d7a:	2300      	movne	r3, #0
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d023      	beq.n	8007dca <cppLoop+0xc7a>
			led.LR(-1, 1);
 8007d82:	2201      	movs	r2, #1
 8007d84:	f04f 31ff 	mov.w	r1, #4294967295
 8007d88:	48a7      	ldr	r0, [pc, #668]	; (8008028 <cppLoop+0xed8>)
 8007d8a:	f7fa f973 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007d8e:	2064      	movs	r0, #100	; 0x64
 8007d90:	f000 fd7c 	bl	800888c <HAL_Delay>

			adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8007d94:	4ba9      	ldr	r3, [pc, #676]	; (800803c <cppLoop+0xeec>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7f8 fbed 	bl	8000578 <__aeabi_f2d>
 8007d9e:	a3a0      	add	r3, pc, #640	; (adr r3, 8008020 <cppLoop+0xed0>)
 8007da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da4:	f7f8 fa8a 	bl	80002bc <__adddf3>
 8007da8:	4603      	mov	r3, r0
 8007daa:	460c      	mov	r4, r1
 8007dac:	4618      	mov	r0, r3
 8007dae:	4621      	mov	r1, r4
 8007db0:	f7f8 ff32 	bl	8000c18 <__aeabi_d2f>
 8007db4:	4602      	mov	r2, r0
 8007db6:	4ba1      	ldr	r3, [pc, #644]	; (800803c <cppLoop+0xeec>)
 8007db8:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8007dc0:	4899      	ldr	r0, [pc, #612]	; (8008028 <cppLoop+0xed8>)
 8007dc2:	f7fa f957 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMaxVelocity2(adj_max_velocity2);

			led.LR(-1, 0);
		}

		break;
 8007dc6:	f000 bc1c 	b.w	8008602 <cppLoop+0x14b2>
		else if(joy_stick.getValue() == JOY_L){
 8007dca:	489b      	ldr	r0, [pc, #620]	; (8008038 <cppLoop+0xee8>)
 8007dcc:	f7fa f832 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	bf0c      	ite	eq
 8007dd6:	2301      	moveq	r3, #1
 8007dd8:	2300      	movne	r3, #0
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d022      	beq.n	8007e26 <cppLoop+0xcd6>
			led.LR(-1, 1);
 8007de0:	2201      	movs	r2, #1
 8007de2:	f04f 31ff 	mov.w	r1, #4294967295
 8007de6:	4890      	ldr	r0, [pc, #576]	; (8008028 <cppLoop+0xed8>)
 8007de8:	f7fa f944 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007dec:	2064      	movs	r0, #100	; 0x64
 8007dee:	f000 fd4d 	bl	800888c <HAL_Delay>
			adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8007df2:	4b92      	ldr	r3, [pc, #584]	; (800803c <cppLoop+0xeec>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7f8 fbbe 	bl	8000578 <__aeabi_f2d>
 8007dfc:	a388      	add	r3, pc, #544	; (adr r3, 8008020 <cppLoop+0xed0>)
 8007dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e02:	f7f8 fa59 	bl	80002b8 <__aeabi_dsub>
 8007e06:	4603      	mov	r3, r0
 8007e08:	460c      	mov	r4, r1
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	f7f8 ff03 	bl	8000c18 <__aeabi_d2f>
 8007e12:	4602      	mov	r2, r0
 8007e14:	4b89      	ldr	r3, [pc, #548]	; (800803c <cppLoop+0xeec>)
 8007e16:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f04f 31ff 	mov.w	r1, #4294967295
 8007e1e:	4882      	ldr	r0, [pc, #520]	; (8008028 <cppLoop+0xed8>)
 8007e20:	f7fa f928 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007e24:	e3ed      	b.n	8008602 <cppLoop+0x14b2>
		else if(joy_stick.getValue() == JOY_C){
 8007e26:	4884      	ldr	r0, [pc, #528]	; (8008038 <cppLoop+0xee8>)
 8007e28:	f7fa f804 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	bf0c      	ite	eq
 8007e32:	2301      	moveq	r3, #1
 8007e34:	2300      	movne	r3, #0
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 83e2 	beq.w	8008602 <cppLoop+0x14b2>
			led.LR(-1, 1);
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f04f 31ff 	mov.w	r1, #4294967295
 8007e44:	4878      	ldr	r0, [pc, #480]	; (8008028 <cppLoop+0xed8>)
 8007e46:	f7fa f915 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007e4a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e4e:	f000 fd1d 	bl	800888c <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8007e52:	2300      	movs	r3, #0
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	4b79      	ldr	r3, [pc, #484]	; (800803c <cppLoop+0xeec>)
 8007e58:	2201      	movs	r2, #1
 8007e5a:	4979      	ldr	r1, [pc, #484]	; (8008040 <cppLoop+0xef0>)
 8007e5c:	4879      	ldr	r0, [pc, #484]	; (8008044 <cppLoop+0xef4>)
 8007e5e:	f7f9 fbd1 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8007e62:	4b76      	ldr	r3, [pc, #472]	; (800803c <cppLoop+0xeec>)
 8007e64:	edd3 7a00 	vldr	s15, [r3]
 8007e68:	eeb0 0a67 	vmov.f32	s0, s15
 8007e6c:	4870      	ldr	r0, [pc, #448]	; (8008030 <cppLoop+0xee0>)
 8007e6e:	f7fb fc66 	bl	800373e <_ZN9LineTrace15setMaxVelocity2Ef>
			led.LR(-1, 0);
 8007e72:	2200      	movs	r2, #0
 8007e74:	f04f 31ff 	mov.w	r1, #4294967295
 8007e78:	486b      	ldr	r0, [pc, #428]	; (8008028 <cppLoop+0xed8>)
 8007e7a:	f7fa f8fb 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007e7e:	e3c0      	b.n	8008602 <cppLoop+0x14b2>

	case 7:
		led.fullColor('W');
 8007e80:	2157      	movs	r1, #87	; 0x57
 8007e82:	4869      	ldr	r0, [pc, #420]	; (8008028 <cppLoop+0xed8>)
 8007e84:	f7fa f83a 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007e88:	f7f9 f90a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	2000      	movs	r0, #0
 8007e90:	f7f9 f916 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8007e94:	4866      	ldr	r0, [pc, #408]	; (8008030 <cppLoop+0xee0>)
 8007e96:	f7fb fcaa 	bl	80037ee <_ZN9LineTrace9getMaxAccEv>
 8007e9a:	ee10 3a10 	vmov	r3, s0
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7f8 fb6a 	bl	8000578 <__aeabi_f2d>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	4623      	mov	r3, r4
 8007eac:	4866      	ldr	r0, [pc, #408]	; (8008048 <cppLoop+0xef8>)
 8007eae:	f7f9 f931 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007eb2:	2101      	movs	r1, #1
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	f7f9 f903 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8007eba:	485d      	ldr	r0, [pc, #372]	; (8008030 <cppLoop+0xee0>)
 8007ebc:	f7fb fca9 	bl	8003812 <_ZN9LineTrace9getMaxDecEv>
 8007ec0:	ee10 3a10 	vmov	r3, s0
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7f8 fb57 	bl	8000578 <__aeabi_f2d>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	460c      	mov	r4, r1
 8007ece:	461a      	mov	r2, r3
 8007ed0:	4623      	mov	r3, r4
 8007ed2:	485e      	ldr	r0, [pc, #376]	; (800804c <cppLoop+0xefc>)
 8007ed4:	f7f9 f91e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007ed8:	4857      	ldr	r0, [pc, #348]	; (8008038 <cppLoop+0xee8>)
 8007eda:	f7f9 ffab 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b08      	cmp	r3, #8
 8007ee2:	bf0c      	ite	eq
 8007ee4:	2301      	moveq	r3, #1
 8007ee6:	2300      	movne	r3, #0
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d021      	beq.n	8007f32 <cppLoop+0xde2>
			led.LR(-1, 1);
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8007ef4:	484c      	ldr	r0, [pc, #304]	; (8008028 <cppLoop+0xed8>)
 8007ef6:	f7fa f8bd 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007efa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007efe:	f000 fcc5 	bl	800888c <HAL_Delay>

			selector_acc++;
 8007f02:	4b53      	ldr	r3, [pc, #332]	; (8008050 <cppLoop+0xf00>)
 8007f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	b21a      	sxth	r2, r3
 8007f10:	4b4f      	ldr	r3, [pc, #316]	; (8008050 <cppLoop+0xf00>)
 8007f12:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8007f14:	4b4e      	ldr	r3, [pc, #312]	; (8008050 <cppLoop+0xf00>)
 8007f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	dd02      	ble.n	8007f24 <cppLoop+0xdd4>
 8007f1e:	4b4c      	ldr	r3, [pc, #304]	; (8008050 <cppLoop+0xf00>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007f24:	2200      	movs	r2, #0
 8007f26:	f04f 31ff 	mov.w	r1, #4294967295
 8007f2a:	483f      	ldr	r0, [pc, #252]	; (8008028 <cppLoop+0xed8>)
 8007f2c:	f7fa f8a2 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8007f30:	e369      	b.n	8008606 <cppLoop+0x14b6>
		else if(joy_stick.getValue() == JOY_R){
 8007f32:	4841      	ldr	r0, [pc, #260]	; (8008038 <cppLoop+0xee8>)
 8007f34:	f7f9 ff7e 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b10      	cmp	r3, #16
 8007f3c:	bf0c      	ite	eq
 8007f3e:	2301      	moveq	r3, #1
 8007f40:	2300      	movne	r3, #0
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d03b      	beq.n	8007fc0 <cppLoop+0xe70>
			led.LR(-1, 1);
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f04f 31ff 	mov.w	r1, #4294967295
 8007f4e:	4836      	ldr	r0, [pc, #216]	; (8008028 <cppLoop+0xed8>)
 8007f50:	f7fa f890 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007f54:	2064      	movs	r0, #100	; 0x64
 8007f56:	f000 fc99 	bl	800888c <HAL_Delay>
			if(selector_acc == 0){
 8007f5a:	4b3d      	ldr	r3, [pc, #244]	; (8008050 <cppLoop+0xf00>)
 8007f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d113      	bne.n	8007f8c <cppLoop+0xe3c>
				adj_acc = adj_acc + 0.1;
 8007f64:	4b3b      	ldr	r3, [pc, #236]	; (8008054 <cppLoop+0xf04>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7f8 fb05 	bl	8000578 <__aeabi_f2d>
 8007f6e:	a32c      	add	r3, pc, #176	; (adr r3, 8008020 <cppLoop+0xed0>)
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	f7f8 f9a2 	bl	80002bc <__adddf3>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	4621      	mov	r1, r4
 8007f80:	f7f8 fe4a 	bl	8000c18 <__aeabi_d2f>
 8007f84:	4602      	mov	r2, r0
 8007f86:	4b33      	ldr	r3, [pc, #204]	; (8008054 <cppLoop+0xf04>)
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	e012      	b.n	8007fb2 <cppLoop+0xe62>
				adj_dec = adj_dec + 0.1;
 8007f8c:	4b32      	ldr	r3, [pc, #200]	; (8008058 <cppLoop+0xf08>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7f8 faf1 	bl	8000578 <__aeabi_f2d>
 8007f96:	a322      	add	r3, pc, #136	; (adr r3, 8008020 <cppLoop+0xed0>)
 8007f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9c:	f7f8 f98e 	bl	80002bc <__adddf3>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	4621      	mov	r1, r4
 8007fa8:	f7f8 fe36 	bl	8000c18 <__aeabi_d2f>
 8007fac:	4602      	mov	r2, r0
 8007fae:	4b2a      	ldr	r3, [pc, #168]	; (8008058 <cppLoop+0xf08>)
 8007fb0:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8007fb8:	481b      	ldr	r0, [pc, #108]	; (8008028 <cppLoop+0xed8>)
 8007fba:	f7fa f85b 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007fbe:	e322      	b.n	8008606 <cppLoop+0x14b6>
		else if(joy_stick.getValue() == JOY_L){
 8007fc0:	481d      	ldr	r0, [pc, #116]	; (8008038 <cppLoop+0xee8>)
 8007fc2:	f7f9 ff37 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	bf0c      	ite	eq
 8007fcc:	2301      	moveq	r3, #1
 8007fce:	2300      	movne	r3, #0
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d05c      	beq.n	8008090 <cppLoop+0xf40>
			led.LR(-1, 1);
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8007fdc:	4812      	ldr	r0, [pc, #72]	; (8008028 <cppLoop+0xed8>)
 8007fde:	f7fa f849 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007fe2:	2064      	movs	r0, #100	; 0x64
 8007fe4:	f000 fc52 	bl	800888c <HAL_Delay>
			if(selector_acc == 0){
 8007fe8:	4b19      	ldr	r3, [pc, #100]	; (8008050 <cppLoop+0xf00>)
 8007fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d134      	bne.n	800805c <cppLoop+0xf0c>
				adj_acc = adj_acc - 0.1;
 8007ff2:	4b18      	ldr	r3, [pc, #96]	; (8008054 <cppLoop+0xf04>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7f8 fabe 	bl	8000578 <__aeabi_f2d>
 8007ffc:	a308      	add	r3, pc, #32	; (adr r3, 8008020 <cppLoop+0xed0>)
 8007ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008002:	f7f8 f959 	bl	80002b8 <__aeabi_dsub>
 8008006:	4603      	mov	r3, r0
 8008008:	460c      	mov	r4, r1
 800800a:	4618      	mov	r0, r3
 800800c:	4621      	mov	r1, r4
 800800e:	f7f8 fe03 	bl	8000c18 <__aeabi_d2f>
 8008012:	4602      	mov	r2, r0
 8008014:	4b0f      	ldr	r3, [pc, #60]	; (8008054 <cppLoop+0xf04>)
 8008016:	601a      	str	r2, [r3, #0]
 8008018:	e033      	b.n	8008082 <cppLoop+0xf32>
 800801a:	bf00      	nop
 800801c:	f3af 8000 	nop.w
 8008020:	9999999a 	.word	0x9999999a
 8008024:	3fb99999 	.word	0x3fb99999
 8008028:	200005cc 	.word	0x200005cc
 800802c:	08018ba4 	.word	0x08018ba4
 8008030:	20017da0 	.word	0x20017da0
 8008034:	08018b74 	.word	0x08018b74
 8008038:	200005c0 	.word	0x200005c0
 800803c:	2003c458 	.word	0x2003c458
 8008040:	08018bb0 	.word	0x08018bb0
 8008044:	08018b44 	.word	0x08018b44
 8008048:	08018bbc 	.word	0x08018bbc
 800804c:	08018bc8 	.word	0x08018bc8
 8008050:	2003c42e 	.word	0x2003c42e
 8008054:	2003c460 	.word	0x2003c460
 8008058:	2003c468 	.word	0x2003c468
				adj_dec = adj_dec - 0.1;
 800805c:	4bae      	ldr	r3, [pc, #696]	; (8008318 <cppLoop+0x11c8>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4618      	mov	r0, r3
 8008062:	f7f8 fa89 	bl	8000578 <__aeabi_f2d>
 8008066:	a3a4      	add	r3, pc, #656	; (adr r3, 80082f8 <cppLoop+0x11a8>)
 8008068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806c:	f7f8 f924 	bl	80002b8 <__aeabi_dsub>
 8008070:	4603      	mov	r3, r0
 8008072:	460c      	mov	r4, r1
 8008074:	4618      	mov	r0, r3
 8008076:	4621      	mov	r1, r4
 8008078:	f7f8 fdce 	bl	8000c18 <__aeabi_d2f>
 800807c:	4602      	mov	r2, r0
 800807e:	4ba6      	ldr	r3, [pc, #664]	; (8008318 <cppLoop+0x11c8>)
 8008080:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008082:	2200      	movs	r2, #0
 8008084:	f04f 31ff 	mov.w	r1, #4294967295
 8008088:	48a4      	ldr	r0, [pc, #656]	; (800831c <cppLoop+0x11cc>)
 800808a:	f7f9 fff3 	bl	8002074 <_ZN3LED2LREaa>
		break;
 800808e:	e2ba      	b.n	8008606 <cppLoop+0x14b6>
		else if(joy_stick.getValue() == JOY_C){
 8008090:	48a3      	ldr	r0, [pc, #652]	; (8008320 <cppLoop+0x11d0>)
 8008092:	f7f9 fecf 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008096:	4603      	mov	r3, r0
 8008098:	2b02      	cmp	r3, #2
 800809a:	bf0c      	ite	eq
 800809c:	2301      	moveq	r3, #1
 800809e:	2300      	movne	r3, #0
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f000 82af 	beq.w	8008606 <cppLoop+0x14b6>
			led.LR(-1, 1);
 80080a8:	2201      	movs	r2, #1
 80080aa:	f04f 31ff 	mov.w	r1, #4294967295
 80080ae:	489b      	ldr	r0, [pc, #620]	; (800831c <cppLoop+0x11cc>)
 80080b0:	f7f9 ffe0 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80080b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80080b8:	f000 fbe8 	bl	800888c <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 80080bc:	2300      	movs	r3, #0
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	4b98      	ldr	r3, [pc, #608]	; (8008324 <cppLoop+0x11d4>)
 80080c2:	2201      	movs	r2, #1
 80080c4:	4998      	ldr	r1, [pc, #608]	; (8008328 <cppLoop+0x11d8>)
 80080c6:	4899      	ldr	r0, [pc, #612]	; (800832c <cppLoop+0x11dc>)
 80080c8:	f7f9 fa9c 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 80080cc:	2300      	movs	r3, #0
 80080ce:	9300      	str	r3, [sp, #0]
 80080d0:	4b91      	ldr	r3, [pc, #580]	; (8008318 <cppLoop+0x11c8>)
 80080d2:	2201      	movs	r2, #1
 80080d4:	4996      	ldr	r1, [pc, #600]	; (8008330 <cppLoop+0x11e0>)
 80080d6:	4895      	ldr	r0, [pc, #596]	; (800832c <cppLoop+0x11dc>)
 80080d8:	f7f9 fa94 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 80080dc:	4b91      	ldr	r3, [pc, #580]	; (8008324 <cppLoop+0x11d4>)
 80080de:	edd3 7a00 	vldr	s15, [r3]
 80080e2:	4b8d      	ldr	r3, [pc, #564]	; (8008318 <cppLoop+0x11c8>)
 80080e4:	ed93 7a00 	vldr	s14, [r3]
 80080e8:	eef0 0a47 	vmov.f32	s1, s14
 80080ec:	eeb0 0a67 	vmov.f32	s0, s15
 80080f0:	4890      	ldr	r0, [pc, #576]	; (8008334 <cppLoop+0x11e4>)
 80080f2:	f7fb fb62 	bl	80037ba <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 80080f6:	2200      	movs	r2, #0
 80080f8:	f04f 31ff 	mov.w	r1, #4294967295
 80080fc:	4887      	ldr	r0, [pc, #540]	; (800831c <cppLoop+0x11cc>)
 80080fe:	f7f9 ffb9 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8008102:	e280      	b.n	8008606 <cppLoop+0x14b6>

	case 8:
		led.fullColor('~');
 8008104:	217e      	movs	r1, #126	; 0x7e
 8008106:	4885      	ldr	r0, [pc, #532]	; (800831c <cppLoop+0x11cc>)
 8008108:	f7f9 fef8 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800810c:	f7f8 ffc8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008110:	2100      	movs	r1, #0
 8008112:	2000      	movs	r0, #0
 8008114:	f7f8 ffd4 	bl	80010c0 <lcd_locate>
		lcd_printf("08      ");
 8008118:	4887      	ldr	r0, [pc, #540]	; (8008338 <cppLoop+0x11e8>)
 800811a:	f7f8 fffb 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800811e:	2101      	movs	r1, #1
 8008120:	2000      	movs	r0, #0
 8008122:	f7f8 ffcd 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8008126:	4885      	ldr	r0, [pc, #532]	; (800833c <cppLoop+0x11ec>)
 8008128:	f7f8 fff4 	bl	8001114 <lcd_printf>

		break;
 800812c:	e27a      	b.n	8008624 <cppLoop+0x14d4>

	case 9:
		led.fullColor('~');
 800812e:	217e      	movs	r1, #126	; 0x7e
 8008130:	487a      	ldr	r0, [pc, #488]	; (800831c <cppLoop+0x11cc>)
 8008132:	f7f9 fee3 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008136:	f7f8 ffb3 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800813a:	2100      	movs	r1, #0
 800813c:	2000      	movs	r0, #0
 800813e:	f7f8 ffbf 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8008142:	487f      	ldr	r0, [pc, #508]	; (8008340 <cppLoop+0x11f0>)
 8008144:	f7f8 ffe6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008148:	2101      	movs	r1, #1
 800814a:	2000      	movs	r0, #0
 800814c:	f7f8 ffb8 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8008150:	487c      	ldr	r0, [pc, #496]	; (8008344 <cppLoop+0x11f4>)
 8008152:	f7f8 ffdf 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008156:	4872      	ldr	r0, [pc, #456]	; (8008320 <cppLoop+0x11d0>)
 8008158:	f7f9 fe6c 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800815c:	4603      	mov	r3, r0
 800815e:	2b02      	cmp	r3, #2
 8008160:	bf0c      	ite	eq
 8008162:	2301      	moveq	r3, #1
 8008164:	2300      	movne	r3, #0
 8008166:	b2db      	uxtb	r3, r3
 8008168:	2b00      	cmp	r3, #0
 800816a:	f000 824e 	beq.w	800860a <cppLoop+0x14ba>
			led.LR(-1, 1);
 800816e:	2201      	movs	r2, #1
 8008170:	f04f 31ff 	mov.w	r1, #4294967295
 8008174:	4869      	ldr	r0, [pc, #420]	; (800831c <cppLoop+0x11cc>)
 8008176:	f7f9 ff7d 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(500);
 800817a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800817e:	f000 fb85 	bl	800888c <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8008182:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8008348 <cppLoop+0x11f8>
 8008186:	486b      	ldr	r0, [pc, #428]	; (8008334 <cppLoop+0x11e4>)
 8008188:	f7fb faac 	bl	80036e4 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 800818c:	4869      	ldr	r0, [pc, #420]	; (8008334 <cppLoop+0x11e4>)
 800818e:	f7fb fc27 	bl	80039e0 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8008192:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008196:	f000 fb79 	bl	800888c <HAL_Delay>

			led.fullColor('R');
 800819a:	2152      	movs	r1, #82	; 0x52
 800819c:	485f      	ldr	r0, [pc, #380]	; (800831c <cppLoop+0x11cc>)
 800819e:	f7f9 fead 	bl	8001efc <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 80081a2:	486a      	ldr	r0, [pc, #424]	; (800834c <cppLoop+0x11fc>)
 80081a4:	f7f9 f980 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 80081a8:	f242 7010 	movw	r0, #10000	; 0x2710
 80081ac:	f000 fb6e 	bl	800888c <HAL_Delay>

			line_trace.stop();
 80081b0:	4860      	ldr	r0, [pc, #384]	; (8008334 <cppLoop+0x11e4>)
 80081b2:	f7fb fc3b 	bl	8003a2c <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 80081b6:	4966      	ldr	r1, [pc, #408]	; (8008350 <cppLoop+0x1200>)
 80081b8:	4866      	ldr	r0, [pc, #408]	; (8008354 <cppLoop+0x1204>)
 80081ba:	f7f9 f9ae 	bl	800151a <user_fopen>
			float d = encoder.getDistance();
 80081be:	4863      	ldr	r0, [pc, #396]	; (800834c <cppLoop+0x11fc>)
 80081c0:	f7f9 f936 	bl	8001430 <_ZN7Encoder11getDistanceEv>
 80081c4:	eef0 7a40 	vmov.f32	s15, s0
 80081c8:	edc7 7a00 	vstr	s15, [r7]
			sd_write_float(1, &d, ADD_WRITE);
 80081cc:	463b      	mov	r3, r7
 80081ce:	2201      	movs	r2, #1
 80081d0:	4619      	mov	r1, r3
 80081d2:	2001      	movs	r0, #1
 80081d4:	f7f9 f9c4 	bl	8001560 <sd_write_float>
			user_fclose();
 80081d8:	f7f9 f9b2 	bl	8001540 <user_fclose>

			led.LR(-1, 0);
 80081dc:	2200      	movs	r2, #0
 80081de:	f04f 31ff 	mov.w	r1, #4294967295
 80081e2:	484e      	ldr	r0, [pc, #312]	; (800831c <cppLoop+0x11cc>)
 80081e4:	f7f9 ff46 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 80081e8:	e20f      	b.n	800860a <cppLoop+0x14ba>

	case 10:
		led.fullColor('~');
 80081ea:	217e      	movs	r1, #126	; 0x7e
 80081ec:	484b      	ldr	r0, [pc, #300]	; (800831c <cppLoop+0x11cc>)
 80081ee:	f7f9 fe85 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80081f2:	f7f8 ff55 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80081f6:	2100      	movs	r1, #0
 80081f8:	2000      	movs	r0, #0
 80081fa:	f7f8 ff61 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 80081fe:	4856      	ldr	r0, [pc, #344]	; (8008358 <cppLoop+0x1208>)
 8008200:	f7f8 ff88 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008204:	2101      	movs	r1, #1
 8008206:	2000      	movs	r0, #0
 8008208:	f7f8 ff5a 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 800820c:	4853      	ldr	r0, [pc, #332]	; (800835c <cppLoop+0x120c>)
 800820e:	f7f8 ff81 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 8008212:	4843      	ldr	r0, [pc, #268]	; (8008320 <cppLoop+0x11d0>)
 8008214:	f7f9 fe0e 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008218:	4603      	mov	r3, r0
 800821a:	2b02      	cmp	r3, #2
 800821c:	bf0c      	ite	eq
 800821e:	2301      	moveq	r3, #1
 8008220:	2300      	movne	r3, #0
 8008222:	b2db      	uxtb	r3, r3
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 81f2 	beq.w	800860e <cppLoop+0x14be>
			HAL_Delay(500);
 800822a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800822e:	f000 fb2d 	bl	800888c <HAL_Delay>
			led.LR(-1, 1);
 8008232:	2201      	movs	r2, #1
 8008234:	f04f 31ff 	mov.w	r1, #4294967295
 8008238:	4838      	ldr	r0, [pc, #224]	; (800831c <cppLoop+0x11cc>)
 800823a:	f7f9 ff1b 	bl	8002074 <_ZN3LED2LREaa>

			line_trace.setMode(SECOND_RUNNING);
 800823e:	2101      	movs	r1, #1
 8008240:	483c      	ldr	r0, [pc, #240]	; (8008334 <cppLoop+0x11e4>)
 8008242:	f7fb fd59 	bl	8003cf8 <_ZN9LineTrace7setModeEs>
			line_trace.createVelocityTabeleFromSD();
 8008246:	483b      	ldr	r0, [pc, #236]	; (8008334 <cppLoop+0x11e4>)
 8008248:	f7fa fe6a 	bl	8002f20 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 800824c:	2200      	movs	r2, #0
 800824e:	f04f 31ff 	mov.w	r1, #4294967295
 8008252:	4832      	ldr	r0, [pc, #200]	; (800831c <cppLoop+0x11cc>)
 8008254:	f7f9 ff0e 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8008258:	e1d9      	b.n	800860e <cppLoop+0x14be>

	case 11:
		led.fullColor('~');
 800825a:	217e      	movs	r1, #126	; 0x7e
 800825c:	482f      	ldr	r0, [pc, #188]	; (800831c <cppLoop+0x11cc>)
 800825e:	f7f9 fe4d 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008262:	f7f8 ff1d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008266:	2100      	movs	r1, #0
 8008268:	2000      	movs	r0, #0
 800826a:	f7f8 ff29 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 800826e:	483c      	ldr	r0, [pc, #240]	; (8008360 <cppLoop+0x1210>)
 8008270:	f7f8 ff50 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008274:	2101      	movs	r1, #1
 8008276:	2000      	movs	r0, #0
 8008278:	f7f8 ff22 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 800827c:	4839      	ldr	r0, [pc, #228]	; (8008364 <cppLoop+0x1214>)
 800827e:	f7f8 ff49 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008282:	4827      	ldr	r0, [pc, #156]	; (8008320 <cppLoop+0x11d0>)
 8008284:	f7f9 fdd6 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008288:	4603      	mov	r3, r0
 800828a:	2b02      	cmp	r3, #2
 800828c:	bf0c      	ite	eq
 800828e:	2301      	moveq	r3, #1
 8008290:	2300      	movne	r3, #0
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 81bc 	beq.w	8008612 <cppLoop+0x14c2>
			HAL_Delay(1500);
 800829a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800829e:	f000 faf5 	bl	800888c <HAL_Delay>
			led.LR(-1, 1);
 80082a2:	2201      	movs	r2, #1
 80082a4:	f04f 31ff 	mov.w	r1, #4294967295
 80082a8:	481c      	ldr	r0, [pc, #112]	; (800831c <cppLoop+0x11cc>)
 80082aa:	f7f9 fee3 	bl	8002074 <_ZN3LED2LREaa>

			logger.start();
 80082ae:	482e      	ldr	r0, [pc, #184]	; (8008368 <cppLoop+0x1218>)
 80082b0:	f7fc f8d9 	bl	8004466 <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 80082b4:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8008300 <cppLoop+0x11b0>
 80082b8:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8008308 <cppLoop+0x11b8>
 80082bc:	482b      	ldr	r0, [pc, #172]	; (800836c <cppLoop+0x121c>)
 80082be:	f7fc f967 	bl	8004590 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 80082c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80082c6:	f000 fae1 	bl	800888c <HAL_Delay>

			logger.stop();
 80082ca:	4827      	ldr	r0, [pc, #156]	; (8008368 <cppLoop+0x1218>)
 80082cc:	f7fc f8dc 	bl	8004488 <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 80082d0:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8008310 <cppLoop+0x11c0>
 80082d4:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008310 <cppLoop+0x11c0>
 80082d8:	4824      	ldr	r0, [pc, #144]	; (800836c <cppLoop+0x121c>)
 80082da:	f7fc f959 	bl	8004590 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 80082de:	4a24      	ldr	r2, [pc, #144]	; (8008370 <cppLoop+0x1220>)
 80082e0:	4924      	ldr	r1, [pc, #144]	; (8008374 <cppLoop+0x1224>)
 80082e2:	4821      	ldr	r0, [pc, #132]	; (8008368 <cppLoop+0x1218>)
 80082e4:	f7fb ffcf 	bl	8004286 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80082e8:	2200      	movs	r2, #0
 80082ea:	f04f 31ff 	mov.w	r1, #4294967295
 80082ee:	480b      	ldr	r0, [pc, #44]	; (800831c <cppLoop+0x11cc>)
 80082f0:	f7f9 fec0 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 80082f4:	e18d      	b.n	8008612 <cppLoop+0x14c2>
 80082f6:	bf00      	nop
 80082f8:	9999999a 	.word	0x9999999a
 80082fc:	3fb99999 	.word	0x3fb99999
 8008300:	33333333 	.word	0x33333333
 8008304:	bfd33333 	.word	0xbfd33333
 8008308:	33333333 	.word	0x33333333
 800830c:	3fd33333 	.word	0x3fd33333
	...
 8008318:	2003c468 	.word	0x2003c468
 800831c:	200005cc 	.word	0x200005cc
 8008320:	200005c0 	.word	0x200005c0
 8008324:	2003c460 	.word	0x2003c460
 8008328:	08018bd4 	.word	0x08018bd4
 800832c:	08018b44 	.word	0x08018b44
 8008330:	08018bdc 	.word	0x08018bdc
 8008334:	20017da0 	.word	0x20017da0
 8008338:	08018be4 	.word	0x08018be4
 800833c:	08018bf0 	.word	0x08018bf0
 8008340:	08018bfc 	.word	0x08018bfc
 8008344:	08018c04 	.word	0x08018c04
 8008348:	00000000 	.word	0x00000000
 800834c:	20017d00 	.word	0x20017d00
 8008350:	08018c10 	.word	0x08018c10
 8008354:	08018c18 	.word	0x08018c18
 8008358:	08018c24 	.word	0x08018c24
 800835c:	08018c30 	.word	0x08018c30
 8008360:	08018c3c 	.word	0x08018c3c
 8008364:	08018c44 	.word	0x08018c44
 8008368:	200005f0 	.word	0x200005f0
 800836c:	200005c8 	.word	0x200005c8
 8008370:	08018c4c 	.word	0x08018c4c
 8008374:	08018c58 	.word	0x08018c58

	case 12:
		led.fullColor('~');
 8008378:	217e      	movs	r1, #126	; 0x7e
 800837a:	48ae      	ldr	r0, [pc, #696]	; (8008634 <cppLoop+0x14e4>)
 800837c:	f7f9 fdbe 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008380:	f7f8 fe8e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008384:	2100      	movs	r1, #0
 8008386:	2000      	movs	r0, #0
 8008388:	f7f8 fe9a 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 800838c:	48aa      	ldr	r0, [pc, #680]	; (8008638 <cppLoop+0x14e8>)
 800838e:	f7f8 fec1 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008392:	2101      	movs	r1, #1
 8008394:	2000      	movs	r0, #0
 8008396:	f7f8 fe93 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 800839a:	48a8      	ldr	r0, [pc, #672]	; (800863c <cppLoop+0x14ec>)
 800839c:	f7f8 feba 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80083a0:	48a7      	ldr	r0, [pc, #668]	; (8008640 <cppLoop+0x14f0>)
 80083a2:	f7f9 fd47 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	bf0c      	ite	eq
 80083ac:	2301      	moveq	r3, #1
 80083ae:	2300      	movne	r3, #0
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 812f 	beq.w	8008616 <cppLoop+0x14c6>
			HAL_Delay(1500);
 80083b8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80083bc:	f000 fa66 	bl	800888c <HAL_Delay>
			led.LR(-1, 1);
 80083c0:	2201      	movs	r2, #1
 80083c2:	f04f 31ff 	mov.w	r1, #4294967295
 80083c6:	489b      	ldr	r0, [pc, #620]	; (8008634 <cppLoop+0x14e4>)
 80083c8:	f7f9 fe54 	bl	8002074 <_ZN3LED2LREaa>

			logger.start();
 80083cc:	489d      	ldr	r0, [pc, #628]	; (8008644 <cppLoop+0x14f4>)
 80083ce:	f7fc f84a 	bl	8004466 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 80083d2:	489d      	ldr	r0, [pc, #628]	; (8008648 <cppLoop+0x14f8>)
 80083d4:	f7fd f829 	bl	800542a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 80083d8:	eddf 0a9c 	vldr	s1, [pc, #624]	; 800864c <cppLoop+0x14fc>
 80083dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80083e0:	4899      	ldr	r0, [pc, #612]	; (8008648 <cppLoop+0x14f8>)
 80083e2:	f7fc ffb5 	bl	8005350 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 80083e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80083ea:	f000 fa4f 	bl	800888c <HAL_Delay>

			logger.stop();
 80083ee:	4895      	ldr	r0, [pc, #596]	; (8008644 <cppLoop+0x14f4>)
 80083f0:	f7fc f84a 	bl	8004488 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 80083f4:	4894      	ldr	r0, [pc, #592]	; (8008648 <cppLoop+0x14f8>)
 80083f6:	f7fd f82b 	bl	8005450 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 80083fa:	4a95      	ldr	r2, [pc, #596]	; (8008650 <cppLoop+0x1500>)
 80083fc:	4995      	ldr	r1, [pc, #596]	; (8008654 <cppLoop+0x1504>)
 80083fe:	4891      	ldr	r0, [pc, #580]	; (8008644 <cppLoop+0x14f4>)
 8008400:	f7fb ff41 	bl	8004286 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8008404:	2200      	movs	r2, #0
 8008406:	f04f 31ff 	mov.w	r1, #4294967295
 800840a:	488a      	ldr	r0, [pc, #552]	; (8008634 <cppLoop+0x14e4>)
 800840c:	f7f9 fe32 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8008410:	e101      	b.n	8008616 <cppLoop+0x14c6>

	case 13:
		led.fullColor('~');
 8008412:	217e      	movs	r1, #126	; 0x7e
 8008414:	4887      	ldr	r0, [pc, #540]	; (8008634 <cppLoop+0x14e4>)
 8008416:	f7f9 fd71 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800841a:	f7f8 fe41 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800841e:	2100      	movs	r1, #0
 8008420:	2000      	movs	r0, #0
 8008422:	f7f8 fe4d 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 8008426:	488c      	ldr	r0, [pc, #560]	; (8008658 <cppLoop+0x1508>)
 8008428:	f7f8 fe74 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800842c:	2101      	movs	r1, #1
 800842e:	2000      	movs	r0, #0
 8008430:	f7f8 fe46 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8008434:	4889      	ldr	r0, [pc, #548]	; (800865c <cppLoop+0x150c>)
 8008436:	f7f8 fe6d 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800843a:	4881      	ldr	r0, [pc, #516]	; (8008640 <cppLoop+0x14f0>)
 800843c:	f7f9 fcfa 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008440:	4603      	mov	r3, r0
 8008442:	2b02      	cmp	r3, #2
 8008444:	bf0c      	ite	eq
 8008446:	2301      	moveq	r3, #1
 8008448:	2300      	movne	r3, #0
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 80e4 	beq.w	800861a <cppLoop+0x14ca>
			led.LR(-1, 1);
 8008452:	2201      	movs	r2, #1
 8008454:	f04f 31ff 	mov.w	r1, #4294967295
 8008458:	4876      	ldr	r0, [pc, #472]	; (8008634 <cppLoop+0x14e4>)
 800845a:	f7f9 fe0b 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(1500);
 800845e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8008462:	f000 fa13 	bl	800888c <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 8008466:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8008660 <cppLoop+0x1510>
 800846a:	487e      	ldr	r0, [pc, #504]	; (8008664 <cppLoop+0x1514>)
 800846c:	f7fc fdfc 	bl	8005068 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 8008470:	487c      	ldr	r0, [pc, #496]	; (8008664 <cppLoop+0x1514>)
 8008472:	f7fc fe09 	bl	8005088 <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 8008476:	f244 405c 	movw	r0, #17500	; 0x445c
 800847a:	f000 fa07 	bl	800888c <HAL_Delay>
			sys_ident.stop();
 800847e:	4879      	ldr	r0, [pc, #484]	; (8008664 <cppLoop+0x1514>)
 8008480:	f7fc fe16 	bl	80050b0 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 8008484:	4877      	ldr	r0, [pc, #476]	; (8008664 <cppLoop+0x1514>)
 8008486:	f7fc fd7d 	bl	8004f84 <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 800848a:	2200      	movs	r2, #0
 800848c:	f04f 31ff 	mov.w	r1, #4294967295
 8008490:	4868      	ldr	r0, [pc, #416]	; (8008634 <cppLoop+0x14e4>)
 8008492:	f7f9 fdef 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8008496:	e0c0      	b.n	800861a <cppLoop+0x14ca>

	case 14:
		led.fullColor('W');
 8008498:	2157      	movs	r1, #87	; 0x57
 800849a:	4866      	ldr	r0, [pc, #408]	; (8008634 <cppLoop+0x14e4>)
 800849c:	f7f9 fd2e 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80084a0:	f7f8 fdfe 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80084a4:	2100      	movs	r1, #0
 80084a6:	2000      	movs	r0, #0
 80084a8:	f7f8 fe0a 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 80084ac:	486e      	ldr	r0, [pc, #440]	; (8008668 <cppLoop+0x1518>)
 80084ae:	f7f8 fe31 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80084b2:	2101      	movs	r1, #1
 80084b4:	2000      	movs	r0, #0
 80084b6:	f7f8 fe03 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 80084ba:	4b6c      	ldr	r3, [pc, #432]	; (800866c <cppLoop+0x151c>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4618      	mov	r0, r3
 80084c0:	f7f8 f85a 	bl	8000578 <__aeabi_f2d>
 80084c4:	4603      	mov	r3, r0
 80084c6:	460c      	mov	r4, r1
 80084c8:	461a      	mov	r2, r3
 80084ca:	4623      	mov	r3, r4
 80084cc:	4868      	ldr	r0, [pc, #416]	; (8008670 <cppLoop+0x1520>)
 80084ce:	f7f8 fe21 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80084d2:	485b      	ldr	r0, [pc, #364]	; (8008640 <cppLoop+0x14f0>)
 80084d4:	f7f9 fcae 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b02      	cmp	r3, #2
 80084dc:	bf0c      	ite	eq
 80084de:	2301      	moveq	r3, #1
 80084e0:	2300      	movne	r3, #0
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f000 809a 	beq.w	800861e <cppLoop+0x14ce>
			HAL_Delay(500);
 80084ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80084ee:	f000 f9cd 	bl	800888c <HAL_Delay>

			led.LR(1, -1);
 80084f2:	f04f 32ff 	mov.w	r2, #4294967295
 80084f6:	2101      	movs	r1, #1
 80084f8:	484e      	ldr	r0, [pc, #312]	; (8008634 <cppLoop+0x14e4>)
 80084fa:	f7f9 fdbb 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 80084fe:	2102      	movs	r1, #2
 8008500:	485c      	ldr	r0, [pc, #368]	; (8008674 <cppLoop+0x1524>)
 8008502:	f7fb fbf9 	bl	8003cf8 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8008506:	4b59      	ldr	r3, [pc, #356]	; (800866c <cppLoop+0x151c>)
 8008508:	edd3 7a00 	vldr	s15, [r3]
 800850c:	eeb0 0a67 	vmov.f32	s0, s15
 8008510:	4858      	ldr	r0, [pc, #352]	; (8008674 <cppLoop+0x1524>)
 8008512:	f7fb f8f6 	bl	8003702 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8008516:	4b55      	ldr	r3, [pc, #340]	; (800866c <cppLoop+0x151c>)
 8008518:	edd3 7a00 	vldr	s15, [r3]
 800851c:	eeb0 0a67 	vmov.f32	s0, s15
 8008520:	4854      	ldr	r0, [pc, #336]	; (8008674 <cppLoop+0x1524>)
 8008522:	f7fb f8fd 	bl	8003720 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8008526:	4853      	ldr	r0, [pc, #332]	; (8008674 <cppLoop+0x1524>)
 8008528:	f7fa fcfa 	bl	8002f20 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 800852c:	4851      	ldr	r0, [pc, #324]	; (8008674 <cppLoop+0x1524>)
 800852e:	f7fb fae5 	bl	8003afc <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008532:	f04f 32ff 	mov.w	r2, #4294967295
 8008536:	2100      	movs	r1, #0
 8008538:	483e      	ldr	r0, [pc, #248]	; (8008634 <cppLoop+0x14e4>)
 800853a:	f7f9 fd9b 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 800853e:	e06e      	b.n	800861e <cppLoop+0x14ce>

	case 15:
		led.fullColor('W');
 8008540:	2157      	movs	r1, #87	; 0x57
 8008542:	483c      	ldr	r0, [pc, #240]	; (8008634 <cppLoop+0x14e4>)
 8008544:	f7f9 fcda 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008548:	f7f8 fdaa 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800854c:	2100      	movs	r1, #0
 800854e:	2000      	movs	r0, #0
 8008550:	f7f8 fdb6 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 8008554:	4848      	ldr	r0, [pc, #288]	; (8008678 <cppLoop+0x1528>)
 8008556:	f7f8 fddd 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800855a:	2101      	movs	r1, #1
 800855c:	2000      	movs	r0, #0
 800855e:	f7f8 fdaf 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 8008562:	4b46      	ldr	r3, [pc, #280]	; (800867c <cppLoop+0x152c>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4618      	mov	r0, r3
 8008568:	f7f8 f806 	bl	8000578 <__aeabi_f2d>
 800856c:	4603      	mov	r3, r0
 800856e:	460c      	mov	r4, r1
 8008570:	461a      	mov	r2, r3
 8008572:	4623      	mov	r3, r4
 8008574:	483e      	ldr	r0, [pc, #248]	; (8008670 <cppLoop+0x1520>)
 8008576:	f7f8 fdcd 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800857a:	4831      	ldr	r0, [pc, #196]	; (8008640 <cppLoop+0x14f0>)
 800857c:	f7f9 fc5a 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008580:	4603      	mov	r3, r0
 8008582:	2b02      	cmp	r3, #2
 8008584:	bf0c      	ite	eq
 8008586:	2301      	moveq	r3, #1
 8008588:	2300      	movne	r3, #0
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b00      	cmp	r3, #0
 800858e:	d048      	beq.n	8008622 <cppLoop+0x14d2>
			HAL_Delay(500);
 8008590:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008594:	f000 f97a 	bl	800888c <HAL_Delay>

			led.LR(1, -1);
 8008598:	f04f 32ff 	mov.w	r2, #4294967295
 800859c:	2101      	movs	r1, #1
 800859e:	4825      	ldr	r0, [pc, #148]	; (8008634 <cppLoop+0x14e4>)
 80085a0:	f7f9 fd68 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 80085a4:	2101      	movs	r1, #1
 80085a6:	4833      	ldr	r0, [pc, #204]	; (8008674 <cppLoop+0x1524>)
 80085a8:	f7fb fba6 	bl	8003cf8 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity);
 80085ac:	4b33      	ldr	r3, [pc, #204]	; (800867c <cppLoop+0x152c>)
 80085ae:	edd3 7a00 	vldr	s15, [r3]
 80085b2:	eeb0 0a67 	vmov.f32	s0, s15
 80085b6:	482f      	ldr	r0, [pc, #188]	; (8008674 <cppLoop+0x1524>)
 80085b8:	f7fb f8a3 	bl	8003702 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 80085bc:	4b2f      	ldr	r3, [pc, #188]	; (800867c <cppLoop+0x152c>)
 80085be:	edd3 7a00 	vldr	s15, [r3]
 80085c2:	eeb0 0a67 	vmov.f32	s0, s15
 80085c6:	482b      	ldr	r0, [pc, #172]	; (8008674 <cppLoop+0x1524>)
 80085c8:	f7fb f8aa 	bl	8003720 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80085cc:	4829      	ldr	r0, [pc, #164]	; (8008674 <cppLoop+0x1524>)
 80085ce:	f7fa fca7 	bl	8002f20 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 80085d2:	4828      	ldr	r0, [pc, #160]	; (8008674 <cppLoop+0x1524>)
 80085d4:	f7fb fa92 	bl	8003afc <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80085d8:	f04f 32ff 	mov.w	r2, #4294967295
 80085dc:	2100      	movs	r1, #0
 80085de:	4815      	ldr	r0, [pc, #84]	; (8008634 <cppLoop+0x14e4>)
 80085e0:	f7f9 fd48 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 80085e4:	e01d      	b.n	8008622 <cppLoop+0x14d2>

	default:
		break;
 80085e6:	bf00      	nop
 80085e8:	e01c      	b.n	8008624 <cppLoop+0x14d4>
		break;
 80085ea:	bf00      	nop
 80085ec:	e01a      	b.n	8008624 <cppLoop+0x14d4>
		break;
 80085ee:	bf00      	nop
 80085f0:	e018      	b.n	8008624 <cppLoop+0x14d4>
		break;
 80085f2:	bf00      	nop
 80085f4:	e016      	b.n	8008624 <cppLoop+0x14d4>
		break;
 80085f6:	bf00      	nop
 80085f8:	e014      	b.n	8008624 <cppLoop+0x14d4>
		break;
 80085fa:	bf00      	nop
 80085fc:	e012      	b.n	8008624 <cppLoop+0x14d4>
		break;
 80085fe:	bf00      	nop
 8008600:	e010      	b.n	8008624 <cppLoop+0x14d4>
		break;
 8008602:	bf00      	nop
 8008604:	e00e      	b.n	8008624 <cppLoop+0x14d4>
		break;
 8008606:	bf00      	nop
 8008608:	e00c      	b.n	8008624 <cppLoop+0x14d4>
		break;
 800860a:	bf00      	nop
 800860c:	e00a      	b.n	8008624 <cppLoop+0x14d4>
		break;
 800860e:	bf00      	nop
 8008610:	e008      	b.n	8008624 <cppLoop+0x14d4>
		break;
 8008612:	bf00      	nop
 8008614:	e006      	b.n	8008624 <cppLoop+0x14d4>
		break;
 8008616:	bf00      	nop
 8008618:	e004      	b.n	8008624 <cppLoop+0x14d4>
		break;
 800861a:	bf00      	nop
 800861c:	e002      	b.n	8008624 <cppLoop+0x14d4>
		break;
 800861e:	bf00      	nop
 8008620:	e000      	b.n	8008624 <cppLoop+0x14d4>
		break;
 8008622:	bf00      	nop

	}

	HAL_Delay(30);
 8008624:	201e      	movs	r0, #30
 8008626:	f000 f931 	bl	800888c <HAL_Delay>

}
 800862a:	bf00      	nop
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008632:	bf00      	nop
 8008634:	200005cc 	.word	0x200005cc
 8008638:	08018c64 	.word	0x08018c64
 800863c:	08018c68 	.word	0x08018c68
 8008640:	200005c0 	.word	0x200005c0
 8008644:	200005f0 	.word	0x200005f0
 8008648:	20017d20 	.word	0x20017d20
 800864c:	00000000 	.word	0x00000000
 8008650:	08018c74 	.word	0x08018c74
 8008654:	08018c58 	.word	0x08018c58
 8008658:	08018c80 	.word	0x08018c80
 800865c:	08018c44 	.word	0x08018c44
 8008660:	3e99999a 	.word	0x3e99999a
 8008664:	20024af4 	.word	0x20024af4
 8008668:	08018c88 	.word	0x08018c88
 800866c:	2003c458 	.word	0x2003c458
 8008670:	08018b68 	.word	0x08018b68
 8008674:	20017da0 	.word	0x20017da0
 8008678:	08018c94 	.word	0x08018c94
 800867c:	2003c450 	.word	0x2003c450

08008680 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8008680:	b580      	push	{r7, lr}
 8008682:	b088      	sub	sp, #32
 8008684:	af06      	add	r7, sp, #24
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b01      	cmp	r3, #1
 800868e:	d13d      	bne.n	800870c <_Z41__static_initialization_and_destruction_0ii+0x8c>
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008696:	4293      	cmp	r3, r2
 8008698:	d138      	bne.n	800870c <_Z41__static_initialization_and_destruction_0ii+0x8c>
LineSensor line_sensor;
 800869a:	481e      	ldr	r0, [pc, #120]	; (8008714 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800869c:	f7f9 fd22 	bl	80020e4 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 80086a0:	481d      	ldr	r0, [pc, #116]	; (8008718 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80086a2:	f7fc fad5 	bl	8004c50 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 80086a6:	481d      	ldr	r0, [pc, #116]	; (800871c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80086a8:	f7f9 fbb8 	bl	8001e1c <_ZN8JoyStickC1Ev>
Motor motor;
 80086ac:	481c      	ldr	r0, [pc, #112]	; (8008720 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80086ae:	f7fb fefc 	bl	80044aa <_ZN5MotorC1Ev>
IMU imu;
 80086b2:	481c      	ldr	r0, [pc, #112]	; (8008724 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80086b4:	f7f9 f9be 	bl	8001a34 <_ZN3IMUC1Ev>
Logger logger;
 80086b8:	481b      	ldr	r0, [pc, #108]	; (8008728 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80086ba:	f7fb fc51 	bl	8003f60 <_ZN6LoggerC1Ev>
Encoder encoder;
 80086be:	481b      	ldr	r0, [pc, #108]	; (800872c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80086c0:	f7f8 fd48 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 80086c4:	4b17      	ldr	r3, [pc, #92]	; (8008724 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80086c6:	4a19      	ldr	r2, [pc, #100]	; (800872c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80086c8:	4915      	ldr	r1, [pc, #84]	; (8008720 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80086ca:	4819      	ldr	r0, [pc, #100]	; (8008730 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80086cc:	f7fc fd14 	bl	80050f8 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 80086d0:	4b17      	ldr	r3, [pc, #92]	; (8008730 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80086d2:	4a14      	ldr	r2, [pc, #80]	; (8008724 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80086d4:	4915      	ldr	r1, [pc, #84]	; (800872c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80086d6:	4817      	ldr	r0, [pc, #92]	; (8008734 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80086d8:	f7fb ffcc 	bl	8004674 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu);
 80086dc:	4b11      	ldr	r3, [pc, #68]	; (8008724 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80086de:	9304      	str	r3, [sp, #16]
 80086e0:	4b11      	ldr	r3, [pc, #68]	; (8008728 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80086e2:	9303      	str	r3, [sp, #12]
 80086e4:	4b13      	ldr	r3, [pc, #76]	; (8008734 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80086e6:	9302      	str	r3, [sp, #8]
 80086e8:	4b10      	ldr	r3, [pc, #64]	; (800872c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80086ea:	9301      	str	r3, [sp, #4]
 80086ec:	4b0a      	ldr	r3, [pc, #40]	; (8008718 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	4b0f      	ldr	r3, [pc, #60]	; (8008730 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80086f2:	4a08      	ldr	r2, [pc, #32]	; (8008714 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80086f4:	490a      	ldr	r1, [pc, #40]	; (8008720 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80086f6:	4810      	ldr	r0, [pc, #64]	; (8008738 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80086f8:	f7fa f822 	bl	8002740 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>
SystemIdentification sys_ident(&logger, &motor);
 80086fc:	4a08      	ldr	r2, [pc, #32]	; (8008720 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80086fe:	490a      	ldr	r1, [pc, #40]	; (8008728 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8008700:	480e      	ldr	r0, [pc, #56]	; (800873c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8008702:	f7fc fbf5 	bl	8004ef0 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8008706:	480e      	ldr	r0, [pc, #56]	; (8008740 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8008708:	f7fc f934 	bl	8004974 <_ZN13PathFollowingC1Ev>
}
 800870c:	bf00      	nop
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	200002c0 	.word	0x200002c0
 8008718:	200005b8 	.word	0x200005b8
 800871c:	200005c0 	.word	0x200005c0
 8008720:	200005c8 	.word	0x200005c8
 8008724:	200005dc 	.word	0x200005dc
 8008728:	200005f0 	.word	0x200005f0
 800872c:	20017d00 	.word	0x20017d00
 8008730:	20017d20 	.word	0x20017d20
 8008734:	20017d60 	.word	0x20017d60
 8008738:	20017da0 	.word	0x20017da0
 800873c:	20024af4 	.word	0x20024af4
 8008740:	20024d00 	.word	0x20024d00

08008744 <_GLOBAL__sub_I_line_sensor>:
 8008744:	b580      	push	{r7, lr}
 8008746:	af00      	add	r7, sp, #0
 8008748:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800874c:	2001      	movs	r0, #1
 800874e:	f7ff ff97 	bl	8008680 <_Z41__static_initialization_and_destruction_0ii>
 8008752:	bd80      	pop	{r7, pc}

08008754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800878c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008758:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800875a:	e003      	b.n	8008764 <LoopCopyDataInit>

0800875c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800875c:	4b0c      	ldr	r3, [pc, #48]	; (8008790 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800875e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008760:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008762:	3104      	adds	r1, #4

08008764 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008764:	480b      	ldr	r0, [pc, #44]	; (8008794 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008766:	4b0c      	ldr	r3, [pc, #48]	; (8008798 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008768:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800876a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800876c:	d3f6      	bcc.n	800875c <CopyDataInit>
  ldr  r2, =_sbss
 800876e:	4a0b      	ldr	r2, [pc, #44]	; (800879c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008770:	e002      	b.n	8008778 <LoopFillZerobss>

08008772 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008772:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008774:	f842 3b04 	str.w	r3, [r2], #4

08008778 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008778:	4b09      	ldr	r3, [pc, #36]	; (80087a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800877a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800877c:	d3f9      	bcc.n	8008772 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800877e:	f7fe fbc5 	bl	8006f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008782:	f00b fdd5 	bl	8014330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008786:	f7fc feff 	bl	8005588 <main>
  bx  lr    
 800878a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800878c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8008790:	08019290 	.word	0x08019290
  ldr  r0, =_sdata
 8008794:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008798:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800879c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80087a0:	20040e50 	.word	0x20040e50

080087a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80087a4:	e7fe      	b.n	80087a4 <ADC_IRQHandler>
	...

080087a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80087ac:	4b0e      	ldr	r3, [pc, #56]	; (80087e8 <HAL_Init+0x40>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a0d      	ldr	r2, [pc, #52]	; (80087e8 <HAL_Init+0x40>)
 80087b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80087b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80087b8:	4b0b      	ldr	r3, [pc, #44]	; (80087e8 <HAL_Init+0x40>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a0a      	ldr	r2, [pc, #40]	; (80087e8 <HAL_Init+0x40>)
 80087be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80087c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80087c4:	4b08      	ldr	r3, [pc, #32]	; (80087e8 <HAL_Init+0x40>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a07      	ldr	r2, [pc, #28]	; (80087e8 <HAL_Init+0x40>)
 80087ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80087d0:	2003      	movs	r0, #3
 80087d2:	f000 fd51 	bl	8009278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80087d6:	2000      	movs	r0, #0
 80087d8:	f000 f808 	bl	80087ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80087dc:	f7fd fde6 	bl	80063ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	40023c00 	.word	0x40023c00

080087ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80087f4:	4b12      	ldr	r3, [pc, #72]	; (8008840 <HAL_InitTick+0x54>)
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	4b12      	ldr	r3, [pc, #72]	; (8008844 <HAL_InitTick+0x58>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	4619      	mov	r1, r3
 80087fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008802:	fbb3 f3f1 	udiv	r3, r3, r1
 8008806:	fbb2 f3f3 	udiv	r3, r2, r3
 800880a:	4618      	mov	r0, r3
 800880c:	f000 fd69 	bl	80092e2 <HAL_SYSTICK_Config>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e00e      	b.n	8008838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b0f      	cmp	r3, #15
 800881e:	d80a      	bhi.n	8008836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008820:	2200      	movs	r2, #0
 8008822:	6879      	ldr	r1, [r7, #4]
 8008824:	f04f 30ff 	mov.w	r0, #4294967295
 8008828:	f000 fd31 	bl	800928e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800882c:	4a06      	ldr	r2, [pc, #24]	; (8008848 <HAL_InitTick+0x5c>)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	e000      	b.n	8008838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
}
 8008838:	4618      	mov	r0, r3
 800883a:	3708      	adds	r7, #8
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	20000000 	.word	0x20000000
 8008844:	20000008 	.word	0x20000008
 8008848:	20000004 	.word	0x20000004

0800884c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800884c:	b480      	push	{r7}
 800884e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008850:	4b06      	ldr	r3, [pc, #24]	; (800886c <HAL_IncTick+0x20>)
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	461a      	mov	r2, r3
 8008856:	4b06      	ldr	r3, [pc, #24]	; (8008870 <HAL_IncTick+0x24>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4413      	add	r3, r2
 800885c:	4a04      	ldr	r2, [pc, #16]	; (8008870 <HAL_IncTick+0x24>)
 800885e:	6013      	str	r3, [r2, #0]
}
 8008860:	bf00      	nop
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	20000008 	.word	0x20000008
 8008870:	2003edd8 	.word	0x2003edd8

08008874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008874:	b480      	push	{r7}
 8008876:	af00      	add	r7, sp, #0
  return uwTick;
 8008878:	4b03      	ldr	r3, [pc, #12]	; (8008888 <HAL_GetTick+0x14>)
 800887a:	681b      	ldr	r3, [r3, #0]
}
 800887c:	4618      	mov	r0, r3
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	2003edd8 	.word	0x2003edd8

0800888c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008894:	f7ff ffee 	bl	8008874 <HAL_GetTick>
 8008898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a4:	d005      	beq.n	80088b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80088a6:	4b09      	ldr	r3, [pc, #36]	; (80088cc <HAL_Delay+0x40>)
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	461a      	mov	r2, r3
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	4413      	add	r3, r2
 80088b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80088b2:	bf00      	nop
 80088b4:	f7ff ffde 	bl	8008874 <HAL_GetTick>
 80088b8:	4602      	mov	r2, r0
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d8f7      	bhi.n	80088b4 <HAL_Delay+0x28>
  {
  }
}
 80088c4:	bf00      	nop
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	20000008 	.word	0x20000008

080088d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d101      	bne.n	80088e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e033      	b.n	800894e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d109      	bne.n	8008902 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7fd fd84 	bl	80063fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008906:	f003 0310 	and.w	r3, r3, #16
 800890a:	2b00      	cmp	r3, #0
 800890c:	d118      	bne.n	8008940 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008912:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008916:	f023 0302 	bic.w	r3, r3, #2
 800891a:	f043 0202 	orr.w	r2, r3, #2
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fa5a 	bl	8008ddc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008932:	f023 0303 	bic.w	r3, r3, #3
 8008936:	f043 0201 	orr.w	r2, r3, #1
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	641a      	str	r2, [r3, #64]	; 0x40
 800893e:	e001      	b.n	8008944 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800894c:	7bfb      	ldrb	r3, [r7, #15]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
	...

08008958 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008964:	2300      	movs	r3, #0
 8008966:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800896e:	2b01      	cmp	r3, #1
 8008970:	d101      	bne.n	8008976 <HAL_ADC_Start_DMA+0x1e>
 8008972:	2302      	movs	r3, #2
 8008974:	e0cc      	b.n	8008b10 <HAL_ADC_Start_DMA+0x1b8>
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2201      	movs	r2, #1
 800897a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	f003 0301 	and.w	r3, r3, #1
 8008988:	2b01      	cmp	r3, #1
 800898a:	d018      	beq.n	80089be <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	689a      	ldr	r2, [r3, #8]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f042 0201 	orr.w	r2, r2, #1
 800899a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800899c:	4b5e      	ldr	r3, [pc, #376]	; (8008b18 <HAL_ADC_Start_DMA+0x1c0>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a5e      	ldr	r2, [pc, #376]	; (8008b1c <HAL_ADC_Start_DMA+0x1c4>)
 80089a2:	fba2 2303 	umull	r2, r3, r2, r3
 80089a6:	0c9a      	lsrs	r2, r3, #18
 80089a8:	4613      	mov	r3, r2
 80089aa:	005b      	lsls	r3, r3, #1
 80089ac:	4413      	add	r3, r2
 80089ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80089b0:	e002      	b.n	80089b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	3b01      	subs	r3, #1
 80089b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1f9      	bne.n	80089b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	f040 80a0 	bne.w	8008b0e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80089d6:	f023 0301 	bic.w	r3, r3, #1
 80089da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d007      	beq.n	8008a00 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80089f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a0c:	d106      	bne.n	8008a1c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a12:	f023 0206 	bic.w	r2, r3, #6
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	645a      	str	r2, [r3, #68]	; 0x44
 8008a1a:	e002      	b.n	8008a22 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008a2a:	4b3d      	ldr	r3, [pc, #244]	; (8008b20 <HAL_ADC_Start_DMA+0x1c8>)
 8008a2c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a32:	4a3c      	ldr	r2, [pc, #240]	; (8008b24 <HAL_ADC_Start_DMA+0x1cc>)
 8008a34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3a:	4a3b      	ldr	r2, [pc, #236]	; (8008b28 <HAL_ADC_Start_DMA+0x1d0>)
 8008a3c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a42:	4a3a      	ldr	r2, [pc, #232]	; (8008b2c <HAL_ADC_Start_DMA+0x1d4>)
 8008a44:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008a4e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008a5e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	689a      	ldr	r2, [r3, #8]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a6e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	334c      	adds	r3, #76	; 0x4c
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f000 fcea 	bl	8009458 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	f003 031f 	and.w	r3, r3, #31
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d12a      	bne.n	8008ae6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a26      	ldr	r2, [pc, #152]	; (8008b30 <HAL_ADC_Start_DMA+0x1d8>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d015      	beq.n	8008ac6 <HAL_ADC_Start_DMA+0x16e>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a25      	ldr	r2, [pc, #148]	; (8008b34 <HAL_ADC_Start_DMA+0x1dc>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d105      	bne.n	8008ab0 <HAL_ADC_Start_DMA+0x158>
 8008aa4:	4b1e      	ldr	r3, [pc, #120]	; (8008b20 <HAL_ADC_Start_DMA+0x1c8>)
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	f003 031f 	and.w	r3, r3, #31
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00a      	beq.n	8008ac6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a20      	ldr	r2, [pc, #128]	; (8008b38 <HAL_ADC_Start_DMA+0x1e0>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d129      	bne.n	8008b0e <HAL_ADC_Start_DMA+0x1b6>
 8008aba:	4b19      	ldr	r3, [pc, #100]	; (8008b20 <HAL_ADC_Start_DMA+0x1c8>)
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	f003 031f 	and.w	r3, r3, #31
 8008ac2:	2b0f      	cmp	r3, #15
 8008ac4:	d823      	bhi.n	8008b0e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d11c      	bne.n	8008b0e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	689a      	ldr	r2, [r3, #8]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008ae2:	609a      	str	r2, [r3, #8]
 8008ae4:	e013      	b.n	8008b0e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a11      	ldr	r2, [pc, #68]	; (8008b30 <HAL_ADC_Start_DMA+0x1d8>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d10e      	bne.n	8008b0e <HAL_ADC_Start_DMA+0x1b6>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d107      	bne.n	8008b0e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	689a      	ldr	r2, [r3, #8]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008b0c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3718      	adds	r7, #24
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	20000000 	.word	0x20000000
 8008b1c:	431bde83 	.word	0x431bde83
 8008b20:	40012300 	.word	0x40012300
 8008b24:	08008fd5 	.word	0x08008fd5
 8008b28:	0800908f 	.word	0x0800908f
 8008b2c:	080090ab 	.word	0x080090ab
 8008b30:	40012000 	.word	0x40012000
 8008b34:	40012100 	.word	0x40012100
 8008b38:	40012200 	.word	0x40012200

08008b3c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8008b58:	bf00      	nop
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008b82:	2300      	movs	r3, #0
 8008b84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d101      	bne.n	8008b94 <HAL_ADC_ConfigChannel+0x1c>
 8008b90:	2302      	movs	r3, #2
 8008b92:	e113      	b.n	8008dbc <HAL_ADC_ConfigChannel+0x244>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2b09      	cmp	r3, #9
 8008ba2:	d925      	bls.n	8008bf0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68d9      	ldr	r1, [r3, #12]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	4413      	add	r3, r2
 8008bb8:	3b1e      	subs	r3, #30
 8008bba:	2207      	movs	r2, #7
 8008bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc0:	43da      	mvns	r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	400a      	ands	r2, r1
 8008bc8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68d9      	ldr	r1, [r3, #12]
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	689a      	ldr	r2, [r3, #8]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	4618      	mov	r0, r3
 8008bdc:	4603      	mov	r3, r0
 8008bde:	005b      	lsls	r3, r3, #1
 8008be0:	4403      	add	r3, r0
 8008be2:	3b1e      	subs	r3, #30
 8008be4:	409a      	lsls	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	430a      	orrs	r2, r1
 8008bec:	60da      	str	r2, [r3, #12]
 8008bee:	e022      	b.n	8008c36 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	6919      	ldr	r1, [r3, #16]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	4613      	mov	r3, r2
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	4413      	add	r3, r2
 8008c04:	2207      	movs	r2, #7
 8008c06:	fa02 f303 	lsl.w	r3, r2, r3
 8008c0a:	43da      	mvns	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	400a      	ands	r2, r1
 8008c12:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6919      	ldr	r1, [r3, #16]
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	689a      	ldr	r2, [r3, #8]
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	4618      	mov	r0, r3
 8008c26:	4603      	mov	r3, r0
 8008c28:	005b      	lsls	r3, r3, #1
 8008c2a:	4403      	add	r3, r0
 8008c2c:	409a      	lsls	r2, r3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	430a      	orrs	r2, r1
 8008c34:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	2b06      	cmp	r3, #6
 8008c3c:	d824      	bhi.n	8008c88 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	4613      	mov	r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4413      	add	r3, r2
 8008c4e:	3b05      	subs	r3, #5
 8008c50:	221f      	movs	r2, #31
 8008c52:	fa02 f303 	lsl.w	r3, r2, r3
 8008c56:	43da      	mvns	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	400a      	ands	r2, r1
 8008c5e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	4613      	mov	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	4413      	add	r3, r2
 8008c78:	3b05      	subs	r3, #5
 8008c7a:	fa00 f203 	lsl.w	r2, r0, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	430a      	orrs	r2, r1
 8008c84:	635a      	str	r2, [r3, #52]	; 0x34
 8008c86:	e04c      	b.n	8008d22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	2b0c      	cmp	r3, #12
 8008c8e:	d824      	bhi.n	8008cda <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	685a      	ldr	r2, [r3, #4]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	3b23      	subs	r3, #35	; 0x23
 8008ca2:	221f      	movs	r2, #31
 8008ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca8:	43da      	mvns	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	400a      	ands	r2, r1
 8008cb0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	685a      	ldr	r2, [r3, #4]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	3b23      	subs	r3, #35	; 0x23
 8008ccc:	fa00 f203 	lsl.w	r2, r0, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	631a      	str	r2, [r3, #48]	; 0x30
 8008cd8:	e023      	b.n	8008d22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	685a      	ldr	r2, [r3, #4]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	4413      	add	r3, r2
 8008cea:	3b41      	subs	r3, #65	; 0x41
 8008cec:	221f      	movs	r2, #31
 8008cee:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf2:	43da      	mvns	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	400a      	ands	r2, r1
 8008cfa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	4618      	mov	r0, r3
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	685a      	ldr	r2, [r3, #4]
 8008d0e:	4613      	mov	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	3b41      	subs	r3, #65	; 0x41
 8008d16:	fa00 f203 	lsl.w	r2, r0, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008d22:	4b29      	ldr	r3, [pc, #164]	; (8008dc8 <HAL_ADC_ConfigChannel+0x250>)
 8008d24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a28      	ldr	r2, [pc, #160]	; (8008dcc <HAL_ADC_ConfigChannel+0x254>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d10f      	bne.n	8008d50 <HAL_ADC_ConfigChannel+0x1d8>
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b12      	cmp	r3, #18
 8008d36:	d10b      	bne.n	8008d50 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a1d      	ldr	r2, [pc, #116]	; (8008dcc <HAL_ADC_ConfigChannel+0x254>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d12b      	bne.n	8008db2 <HAL_ADC_ConfigChannel+0x23a>
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a1c      	ldr	r2, [pc, #112]	; (8008dd0 <HAL_ADC_ConfigChannel+0x258>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d003      	beq.n	8008d6c <HAL_ADC_ConfigChannel+0x1f4>
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2b11      	cmp	r3, #17
 8008d6a:	d122      	bne.n	8008db2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a11      	ldr	r2, [pc, #68]	; (8008dd0 <HAL_ADC_ConfigChannel+0x258>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d111      	bne.n	8008db2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008d8e:	4b11      	ldr	r3, [pc, #68]	; (8008dd4 <HAL_ADC_ConfigChannel+0x25c>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a11      	ldr	r2, [pc, #68]	; (8008dd8 <HAL_ADC_ConfigChannel+0x260>)
 8008d94:	fba2 2303 	umull	r2, r3, r2, r3
 8008d98:	0c9a      	lsrs	r2, r3, #18
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4413      	add	r3, r2
 8008da0:	005b      	lsls	r3, r3, #1
 8008da2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008da4:	e002      	b.n	8008dac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	3b01      	subs	r3, #1
 8008daa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1f9      	bne.n	8008da6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3714      	adds	r7, #20
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr
 8008dc8:	40012300 	.word	0x40012300
 8008dcc:	40012000 	.word	0x40012000
 8008dd0:	10000012 	.word	0x10000012
 8008dd4:	20000000 	.word	0x20000000
 8008dd8:	431bde83 	.word	0x431bde83

08008ddc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008de4:	4b79      	ldr	r3, [pc, #484]	; (8008fcc <ADC_Init+0x1f0>)
 8008de6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	685a      	ldr	r2, [r3, #4]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	431a      	orrs	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	685a      	ldr	r2, [r3, #4]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	6859      	ldr	r1, [r3, #4]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	021a      	lsls	r2, r3, #8
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	430a      	orrs	r2, r1
 8008e24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008e34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	6859      	ldr	r1, [r3, #4]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	689a      	ldr	r2, [r3, #8]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	430a      	orrs	r2, r1
 8008e46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	689a      	ldr	r2, [r3, #8]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6899      	ldr	r1, [r3, #8]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68da      	ldr	r2, [r3, #12]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	430a      	orrs	r2, r1
 8008e68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6e:	4a58      	ldr	r2, [pc, #352]	; (8008fd0 <ADC_Init+0x1f4>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d022      	beq.n	8008eba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	689a      	ldr	r2, [r3, #8]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008e82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	6899      	ldr	r1, [r3, #8]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	430a      	orrs	r2, r1
 8008e94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	689a      	ldr	r2, [r3, #8]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008ea4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	6899      	ldr	r1, [r3, #8]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	430a      	orrs	r2, r1
 8008eb6:	609a      	str	r2, [r3, #8]
 8008eb8:	e00f      	b.n	8008eda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	689a      	ldr	r2, [r3, #8]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008ec8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	689a      	ldr	r2, [r3, #8]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008ed8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	689a      	ldr	r2, [r3, #8]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f022 0202 	bic.w	r2, r2, #2
 8008ee8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	6899      	ldr	r1, [r3, #8]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	7e1b      	ldrb	r3, [r3, #24]
 8008ef4:	005a      	lsls	r2, r3, #1
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	430a      	orrs	r2, r1
 8008efc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d01b      	beq.n	8008f40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	685a      	ldr	r2, [r3, #4]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	685a      	ldr	r2, [r3, #4]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008f26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	6859      	ldr	r1, [r3, #4]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f32:	3b01      	subs	r3, #1
 8008f34:	035a      	lsls	r2, r3, #13
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	430a      	orrs	r2, r1
 8008f3c:	605a      	str	r2, [r3, #4]
 8008f3e:	e007      	b.n	8008f50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	685a      	ldr	r2, [r3, #4]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	69db      	ldr	r3, [r3, #28]
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	051a      	lsls	r2, r3, #20
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	430a      	orrs	r2, r1
 8008f74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	689a      	ldr	r2, [r3, #8]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008f84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	6899      	ldr	r1, [r3, #8]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f92:	025a      	lsls	r2, r3, #9
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	430a      	orrs	r2, r1
 8008f9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	689a      	ldr	r2, [r3, #8]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008faa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6899      	ldr	r1, [r3, #8]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	029a      	lsls	r2, r3, #10
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	430a      	orrs	r2, r1
 8008fbe:	609a      	str	r2, [r3, #8]
}
 8008fc0:	bf00      	nop
 8008fc2:	3714      	adds	r7, #20
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr
 8008fcc:	40012300 	.word	0x40012300
 8008fd0:	0f000001 	.word	0x0f000001

08008fd4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d13c      	bne.n	8009068 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009004:	2b00      	cmp	r3, #0
 8009006:	d12b      	bne.n	8009060 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800900c:	2b00      	cmp	r3, #0
 800900e:	d127      	bne.n	8009060 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009016:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800901a:	2b00      	cmp	r3, #0
 800901c:	d006      	beq.n	800902c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009028:	2b00      	cmp	r3, #0
 800902a:	d119      	bne.n	8009060 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	685a      	ldr	r2, [r3, #4]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f022 0220 	bic.w	r2, r2, #32
 800903a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009040:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d105      	bne.n	8009060 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009058:	f043 0201 	orr.w	r2, r3, #1
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f7ff fd6b 	bl	8008b3c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009066:	e00e      	b.n	8009086 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906c:	f003 0310 	and.w	r3, r3, #16
 8009070:	2b00      	cmp	r3, #0
 8009072:	d003      	beq.n	800907c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f7ff fd75 	bl	8008b64 <HAL_ADC_ErrorCallback>
}
 800907a:	e004      	b.n	8009086 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	4798      	blx	r3
}
 8009086:	bf00      	nop
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b084      	sub	sp, #16
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f7ff fd57 	bl	8008b50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80090a2:	bf00      	nop
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b084      	sub	sp, #16
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2240      	movs	r2, #64	; 0x40
 80090bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090c2:	f043 0204 	orr.w	r2, r3, #4
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	f7ff fd4a 	bl	8008b64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80090d0:	bf00      	nop
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f003 0307 	and.w	r3, r3, #7
 80090e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80090e8:	4b0c      	ldr	r3, [pc, #48]	; (800911c <__NVIC_SetPriorityGrouping+0x44>)
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80090f4:	4013      	ands	r3, r2
 80090f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800910a:	4a04      	ldr	r2, [pc, #16]	; (800911c <__NVIC_SetPriorityGrouping+0x44>)
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	60d3      	str	r3, [r2, #12]
}
 8009110:	bf00      	nop
 8009112:	3714      	adds	r7, #20
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	e000ed00 	.word	0xe000ed00

08009120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009120:	b480      	push	{r7}
 8009122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009124:	4b04      	ldr	r3, [pc, #16]	; (8009138 <__NVIC_GetPriorityGrouping+0x18>)
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	0a1b      	lsrs	r3, r3, #8
 800912a:	f003 0307 	and.w	r3, r3, #7
}
 800912e:	4618      	mov	r0, r3
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr
 8009138:	e000ed00 	.word	0xe000ed00

0800913c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	4603      	mov	r3, r0
 8009144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800914a:	2b00      	cmp	r3, #0
 800914c:	db0b      	blt.n	8009166 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800914e:	79fb      	ldrb	r3, [r7, #7]
 8009150:	f003 021f 	and.w	r2, r3, #31
 8009154:	4907      	ldr	r1, [pc, #28]	; (8009174 <__NVIC_EnableIRQ+0x38>)
 8009156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800915a:	095b      	lsrs	r3, r3, #5
 800915c:	2001      	movs	r0, #1
 800915e:	fa00 f202 	lsl.w	r2, r0, r2
 8009162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009166:	bf00      	nop
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	e000e100 	.word	0xe000e100

08009178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	4603      	mov	r3, r0
 8009180:	6039      	str	r1, [r7, #0]
 8009182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009188:	2b00      	cmp	r3, #0
 800918a:	db0a      	blt.n	80091a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	b2da      	uxtb	r2, r3
 8009190:	490c      	ldr	r1, [pc, #48]	; (80091c4 <__NVIC_SetPriority+0x4c>)
 8009192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009196:	0112      	lsls	r2, r2, #4
 8009198:	b2d2      	uxtb	r2, r2
 800919a:	440b      	add	r3, r1
 800919c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80091a0:	e00a      	b.n	80091b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	b2da      	uxtb	r2, r3
 80091a6:	4908      	ldr	r1, [pc, #32]	; (80091c8 <__NVIC_SetPriority+0x50>)
 80091a8:	79fb      	ldrb	r3, [r7, #7]
 80091aa:	f003 030f 	and.w	r3, r3, #15
 80091ae:	3b04      	subs	r3, #4
 80091b0:	0112      	lsls	r2, r2, #4
 80091b2:	b2d2      	uxtb	r2, r2
 80091b4:	440b      	add	r3, r1
 80091b6:	761a      	strb	r2, [r3, #24]
}
 80091b8:	bf00      	nop
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr
 80091c4:	e000e100 	.word	0xe000e100
 80091c8:	e000ed00 	.word	0xe000ed00

080091cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b089      	sub	sp, #36	; 0x24
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f003 0307 	and.w	r3, r3, #7
 80091de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	f1c3 0307 	rsb	r3, r3, #7
 80091e6:	2b04      	cmp	r3, #4
 80091e8:	bf28      	it	cs
 80091ea:	2304      	movcs	r3, #4
 80091ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	3304      	adds	r3, #4
 80091f2:	2b06      	cmp	r3, #6
 80091f4:	d902      	bls.n	80091fc <NVIC_EncodePriority+0x30>
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	3b03      	subs	r3, #3
 80091fa:	e000      	b.n	80091fe <NVIC_EncodePriority+0x32>
 80091fc:	2300      	movs	r3, #0
 80091fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009200:	f04f 32ff 	mov.w	r2, #4294967295
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	fa02 f303 	lsl.w	r3, r2, r3
 800920a:	43da      	mvns	r2, r3
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	401a      	ands	r2, r3
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009214:	f04f 31ff 	mov.w	r1, #4294967295
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	fa01 f303 	lsl.w	r3, r1, r3
 800921e:	43d9      	mvns	r1, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009224:	4313      	orrs	r3, r2
         );
}
 8009226:	4618      	mov	r0, r3
 8009228:	3724      	adds	r7, #36	; 0x24
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
	...

08009234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	3b01      	subs	r3, #1
 8009240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009244:	d301      	bcc.n	800924a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009246:	2301      	movs	r3, #1
 8009248:	e00f      	b.n	800926a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800924a:	4a0a      	ldr	r2, [pc, #40]	; (8009274 <SysTick_Config+0x40>)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	3b01      	subs	r3, #1
 8009250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009252:	210f      	movs	r1, #15
 8009254:	f04f 30ff 	mov.w	r0, #4294967295
 8009258:	f7ff ff8e 	bl	8009178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800925c:	4b05      	ldr	r3, [pc, #20]	; (8009274 <SysTick_Config+0x40>)
 800925e:	2200      	movs	r2, #0
 8009260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009262:	4b04      	ldr	r3, [pc, #16]	; (8009274 <SysTick_Config+0x40>)
 8009264:	2207      	movs	r2, #7
 8009266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3708      	adds	r7, #8
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	e000e010 	.word	0xe000e010

08009278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f7ff ff29 	bl	80090d8 <__NVIC_SetPriorityGrouping>
}
 8009286:	bf00      	nop
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800928e:	b580      	push	{r7, lr}
 8009290:	b086      	sub	sp, #24
 8009292:	af00      	add	r7, sp, #0
 8009294:	4603      	mov	r3, r0
 8009296:	60b9      	str	r1, [r7, #8]
 8009298:	607a      	str	r2, [r7, #4]
 800929a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800929c:	2300      	movs	r3, #0
 800929e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80092a0:	f7ff ff3e 	bl	8009120 <__NVIC_GetPriorityGrouping>
 80092a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	68b9      	ldr	r1, [r7, #8]
 80092aa:	6978      	ldr	r0, [r7, #20]
 80092ac:	f7ff ff8e 	bl	80091cc <NVIC_EncodePriority>
 80092b0:	4602      	mov	r2, r0
 80092b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092b6:	4611      	mov	r1, r2
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7ff ff5d 	bl	8009178 <__NVIC_SetPriority>
}
 80092be:	bf00      	nop
 80092c0:	3718      	adds	r7, #24
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b082      	sub	sp, #8
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	4603      	mov	r3, r0
 80092ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80092d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7ff ff31 	bl	800913c <__NVIC_EnableIRQ>
}
 80092da:	bf00      	nop
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b082      	sub	sp, #8
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f7ff ffa2 	bl	8009234 <SysTick_Config>
 80092f0:	4603      	mov	r3, r0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
	...

080092fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b086      	sub	sp, #24
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009304:	2300      	movs	r3, #0
 8009306:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009308:	f7ff fab4 	bl	8008874 <HAL_GetTick>
 800930c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d101      	bne.n	8009318 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e099      	b.n	800944c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2202      	movs	r2, #2
 8009324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f022 0201 	bic.w	r2, r2, #1
 8009336:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009338:	e00f      	b.n	800935a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800933a:	f7ff fa9b 	bl	8008874 <HAL_GetTick>
 800933e:	4602      	mov	r2, r0
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	1ad3      	subs	r3, r2, r3
 8009344:	2b05      	cmp	r3, #5
 8009346:	d908      	bls.n	800935a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2220      	movs	r2, #32
 800934c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2203      	movs	r2, #3
 8009352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009356:	2303      	movs	r3, #3
 8009358:	e078      	b.n	800944c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f003 0301 	and.w	r3, r3, #1
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1e8      	bne.n	800933a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009370:	697a      	ldr	r2, [r7, #20]
 8009372:	4b38      	ldr	r3, [pc, #224]	; (8009454 <HAL_DMA_Init+0x158>)
 8009374:	4013      	ands	r3, r2
 8009376:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009386:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009392:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800939e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6a1b      	ldr	r3, [r3, #32]
 80093a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b0:	2b04      	cmp	r3, #4
 80093b2:	d107      	bne.n	80093c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093bc:	4313      	orrs	r3, r2
 80093be:	697a      	ldr	r2, [r7, #20]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	697a      	ldr	r2, [r7, #20]
 80093ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	f023 0307 	bic.w	r3, r3, #7
 80093da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e0:	697a      	ldr	r2, [r7, #20]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ea:	2b04      	cmp	r3, #4
 80093ec:	d117      	bne.n	800941e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00e      	beq.n	800941e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fa9d 	bl	8009940 <DMA_CheckFifoParam>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d008      	beq.n	800941e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2240      	movs	r2, #64	; 0x40
 8009410:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2201      	movs	r2, #1
 8009416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800941a:	2301      	movs	r3, #1
 800941c:	e016      	b.n	800944c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	697a      	ldr	r2, [r7, #20]
 8009424:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fa54 	bl	80098d4 <DMA_CalcBaseAndBitshift>
 800942c:	4603      	mov	r3, r0
 800942e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009434:	223f      	movs	r2, #63	; 0x3f
 8009436:	409a      	lsls	r2, r3
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2201      	movs	r2, #1
 8009446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3718      	adds	r7, #24
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	f010803f 	.word	0xf010803f

08009458 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b086      	sub	sp, #24
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
 8009464:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800946e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009476:	2b01      	cmp	r3, #1
 8009478:	d101      	bne.n	800947e <HAL_DMA_Start_IT+0x26>
 800947a:	2302      	movs	r3, #2
 800947c:	e040      	b.n	8009500 <HAL_DMA_Start_IT+0xa8>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2201      	movs	r2, #1
 8009482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800948c:	b2db      	uxtb	r3, r3
 800948e:	2b01      	cmp	r3, #1
 8009490:	d12f      	bne.n	80094f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2202      	movs	r2, #2
 8009496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2200      	movs	r2, #0
 800949e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	68b9      	ldr	r1, [r7, #8]
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f000 f9e6 	bl	8009878 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094b0:	223f      	movs	r2, #63	; 0x3f
 80094b2:	409a      	lsls	r2, r3
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f042 0216 	orr.w	r2, r2, #22
 80094c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d007      	beq.n	80094e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f042 0208 	orr.w	r2, r2, #8
 80094de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f042 0201 	orr.w	r2, r2, #1
 80094ee:	601a      	str	r2, [r3, #0]
 80094f0:	e005      	b.n	80094fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80094fa:	2302      	movs	r3, #2
 80094fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80094fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3718      	adds	r7, #24
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009516:	b2db      	uxtb	r3, r3
 8009518:	2b02      	cmp	r3, #2
 800951a:	d004      	beq.n	8009526 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2280      	movs	r2, #128	; 0x80
 8009520:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e00c      	b.n	8009540 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2205      	movs	r2, #5
 800952a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f022 0201 	bic.w	r2, r2, #1
 800953c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b086      	sub	sp, #24
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009554:	2300      	movs	r3, #0
 8009556:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009558:	4b92      	ldr	r3, [pc, #584]	; (80097a4 <HAL_DMA_IRQHandler+0x258>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a92      	ldr	r2, [pc, #584]	; (80097a8 <HAL_DMA_IRQHandler+0x25c>)
 800955e:	fba2 2303 	umull	r2, r3, r2, r3
 8009562:	0a9b      	lsrs	r3, r3, #10
 8009564:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800956a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009576:	2208      	movs	r2, #8
 8009578:	409a      	lsls	r2, r3
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	4013      	ands	r3, r2
 800957e:	2b00      	cmp	r3, #0
 8009580:	d01a      	beq.n	80095b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f003 0304 	and.w	r3, r3, #4
 800958c:	2b00      	cmp	r3, #0
 800958e:	d013      	beq.n	80095b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f022 0204 	bic.w	r2, r2, #4
 800959e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095a4:	2208      	movs	r2, #8
 80095a6:	409a      	lsls	r2, r3
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095b0:	f043 0201 	orr.w	r2, r3, #1
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095bc:	2201      	movs	r2, #1
 80095be:	409a      	lsls	r2, r3
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	4013      	ands	r3, r2
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d012      	beq.n	80095ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	695b      	ldr	r3, [r3, #20]
 80095ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00b      	beq.n	80095ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095da:	2201      	movs	r2, #1
 80095dc:	409a      	lsls	r2, r3
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095e6:	f043 0202 	orr.w	r2, r3, #2
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095f2:	2204      	movs	r2, #4
 80095f4:	409a      	lsls	r2, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	4013      	ands	r3, r2
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d012      	beq.n	8009624 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 0302 	and.w	r3, r3, #2
 8009608:	2b00      	cmp	r3, #0
 800960a:	d00b      	beq.n	8009624 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009610:	2204      	movs	r2, #4
 8009612:	409a      	lsls	r2, r3
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800961c:	f043 0204 	orr.w	r2, r3, #4
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009628:	2210      	movs	r2, #16
 800962a:	409a      	lsls	r2, r3
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	4013      	ands	r3, r2
 8009630:	2b00      	cmp	r3, #0
 8009632:	d043      	beq.n	80096bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 0308 	and.w	r3, r3, #8
 800963e:	2b00      	cmp	r3, #0
 8009640:	d03c      	beq.n	80096bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009646:	2210      	movs	r2, #16
 8009648:	409a      	lsls	r2, r3
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009658:	2b00      	cmp	r3, #0
 800965a:	d018      	beq.n	800968e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d108      	bne.n	800967c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966e:	2b00      	cmp	r3, #0
 8009670:	d024      	beq.n	80096bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	4798      	blx	r3
 800967a:	e01f      	b.n	80096bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009680:	2b00      	cmp	r3, #0
 8009682:	d01b      	beq.n	80096bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	4798      	blx	r3
 800968c:	e016      	b.n	80096bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009698:	2b00      	cmp	r3, #0
 800969a:	d107      	bne.n	80096ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f022 0208 	bic.w	r2, r2, #8
 80096aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d003      	beq.n	80096bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096c0:	2220      	movs	r2, #32
 80096c2:	409a      	lsls	r2, r3
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	4013      	ands	r3, r2
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	f000 808e 	beq.w	80097ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f003 0310 	and.w	r3, r3, #16
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f000 8086 	beq.w	80097ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096e2:	2220      	movs	r2, #32
 80096e4:	409a      	lsls	r2, r3
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	2b05      	cmp	r3, #5
 80096f4:	d136      	bne.n	8009764 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f022 0216 	bic.w	r2, r2, #22
 8009704:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	695a      	ldr	r2, [r3, #20]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009714:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971a:	2b00      	cmp	r3, #0
 800971c:	d103      	bne.n	8009726 <HAL_DMA_IRQHandler+0x1da>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009722:	2b00      	cmp	r3, #0
 8009724:	d007      	beq.n	8009736 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f022 0208 	bic.w	r2, r2, #8
 8009734:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800973a:	223f      	movs	r2, #63	; 0x3f
 800973c:	409a      	lsls	r2, r3
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009756:	2b00      	cmp	r3, #0
 8009758:	d07d      	beq.n	8009856 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	4798      	blx	r3
        }
        return;
 8009762:	e078      	b.n	8009856 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800976e:	2b00      	cmp	r3, #0
 8009770:	d01c      	beq.n	80097ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800977c:	2b00      	cmp	r3, #0
 800977e:	d108      	bne.n	8009792 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009784:	2b00      	cmp	r3, #0
 8009786:	d030      	beq.n	80097ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	4798      	blx	r3
 8009790:	e02b      	b.n	80097ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009796:	2b00      	cmp	r3, #0
 8009798:	d027      	beq.n	80097ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	4798      	blx	r3
 80097a2:	e022      	b.n	80097ea <HAL_DMA_IRQHandler+0x29e>
 80097a4:	20000000 	.word	0x20000000
 80097a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10f      	bne.n	80097da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f022 0210 	bic.w	r2, r2, #16
 80097c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2201      	movs	r2, #1
 80097d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d003      	beq.n	80097ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d032      	beq.n	8009858 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097f6:	f003 0301 	and.w	r3, r3, #1
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d022      	beq.n	8009844 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2205      	movs	r2, #5
 8009802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f022 0201 	bic.w	r2, r2, #1
 8009814:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	3301      	adds	r3, #1
 800981a:	60bb      	str	r3, [r7, #8]
 800981c:	697a      	ldr	r2, [r7, #20]
 800981e:	429a      	cmp	r2, r3
 8009820:	d307      	bcc.n	8009832 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 0301 	and.w	r3, r3, #1
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1f2      	bne.n	8009816 <HAL_DMA_IRQHandler+0x2ca>
 8009830:	e000      	b.n	8009834 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009832:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009848:	2b00      	cmp	r3, #0
 800984a:	d005      	beq.n	8009858 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	4798      	blx	r3
 8009854:	e000      	b.n	8009858 <HAL_DMA_IRQHandler+0x30c>
        return;
 8009856:	bf00      	nop
    }
  }
}
 8009858:	3718      	adds	r7, #24
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop

08009860 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800986c:	4618      	mov	r0, r3
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009878:	b480      	push	{r7}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	607a      	str	r2, [r7, #4]
 8009884:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009894:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	683a      	ldr	r2, [r7, #0]
 800989c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	2b40      	cmp	r3, #64	; 0x40
 80098a4:	d108      	bne.n	80098b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68ba      	ldr	r2, [r7, #8]
 80098b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80098b6:	e007      	b.n	80098c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	68ba      	ldr	r2, [r7, #8]
 80098be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	60da      	str	r2, [r3, #12]
}
 80098c8:	bf00      	nop
 80098ca:	3714      	adds	r7, #20
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	3b10      	subs	r3, #16
 80098e4:	4a14      	ldr	r2, [pc, #80]	; (8009938 <DMA_CalcBaseAndBitshift+0x64>)
 80098e6:	fba2 2303 	umull	r2, r3, r2, r3
 80098ea:	091b      	lsrs	r3, r3, #4
 80098ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80098ee:	4a13      	ldr	r2, [pc, #76]	; (800993c <DMA_CalcBaseAndBitshift+0x68>)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	4413      	add	r3, r2
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	461a      	mov	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2b03      	cmp	r3, #3
 8009900:	d909      	bls.n	8009916 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800990a:	f023 0303 	bic.w	r3, r3, #3
 800990e:	1d1a      	adds	r2, r3, #4
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	659a      	str	r2, [r3, #88]	; 0x58
 8009914:	e007      	b.n	8009926 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800991e:	f023 0303 	bic.w	r3, r3, #3
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800992a:	4618      	mov	r0, r3
 800992c:	3714      	adds	r7, #20
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	aaaaaaab 	.word	0xaaaaaaab
 800993c:	08018cd4 	.word	0x08018cd4

08009940 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009940:	b480      	push	{r7}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009948:	2300      	movs	r3, #0
 800994a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009950:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	699b      	ldr	r3, [r3, #24]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d11f      	bne.n	800999a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	2b03      	cmp	r3, #3
 800995e:	d855      	bhi.n	8009a0c <DMA_CheckFifoParam+0xcc>
 8009960:	a201      	add	r2, pc, #4	; (adr r2, 8009968 <DMA_CheckFifoParam+0x28>)
 8009962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009966:	bf00      	nop
 8009968:	08009979 	.word	0x08009979
 800996c:	0800998b 	.word	0x0800998b
 8009970:	08009979 	.word	0x08009979
 8009974:	08009a0d 	.word	0x08009a0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009980:	2b00      	cmp	r3, #0
 8009982:	d045      	beq.n	8009a10 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009988:	e042      	b.n	8009a10 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800998e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009992:	d13f      	bne.n	8009a14 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009998:	e03c      	b.n	8009a14 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099a2:	d121      	bne.n	80099e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	2b03      	cmp	r3, #3
 80099a8:	d836      	bhi.n	8009a18 <DMA_CheckFifoParam+0xd8>
 80099aa:	a201      	add	r2, pc, #4	; (adr r2, 80099b0 <DMA_CheckFifoParam+0x70>)
 80099ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b0:	080099c1 	.word	0x080099c1
 80099b4:	080099c7 	.word	0x080099c7
 80099b8:	080099c1 	.word	0x080099c1
 80099bc:	080099d9 	.word	0x080099d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	73fb      	strb	r3, [r7, #15]
      break;
 80099c4:	e02f      	b.n	8009a26 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d024      	beq.n	8009a1c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80099d6:	e021      	b.n	8009a1c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80099e0:	d11e      	bne.n	8009a20 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80099e6:	e01b      	b.n	8009a20 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	d902      	bls.n	80099f4 <DMA_CheckFifoParam+0xb4>
 80099ee:	2b03      	cmp	r3, #3
 80099f0:	d003      	beq.n	80099fa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80099f2:	e018      	b.n	8009a26 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	73fb      	strb	r3, [r7, #15]
      break;
 80099f8:	e015      	b.n	8009a26 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00e      	beq.n	8009a24 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	73fb      	strb	r3, [r7, #15]
      break;
 8009a0a:	e00b      	b.n	8009a24 <DMA_CheckFifoParam+0xe4>
      break;
 8009a0c:	bf00      	nop
 8009a0e:	e00a      	b.n	8009a26 <DMA_CheckFifoParam+0xe6>
      break;
 8009a10:	bf00      	nop
 8009a12:	e008      	b.n	8009a26 <DMA_CheckFifoParam+0xe6>
      break;
 8009a14:	bf00      	nop
 8009a16:	e006      	b.n	8009a26 <DMA_CheckFifoParam+0xe6>
      break;
 8009a18:	bf00      	nop
 8009a1a:	e004      	b.n	8009a26 <DMA_CheckFifoParam+0xe6>
      break;
 8009a1c:	bf00      	nop
 8009a1e:	e002      	b.n	8009a26 <DMA_CheckFifoParam+0xe6>
      break;   
 8009a20:	bf00      	nop
 8009a22:	e000      	b.n	8009a26 <DMA_CheckFifoParam+0xe6>
      break;
 8009a24:	bf00      	nop
    }
  } 
  
  return status; 
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b089      	sub	sp, #36	; 0x24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009a42:	2300      	movs	r3, #0
 8009a44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009a46:	2300      	movs	r3, #0
 8009a48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	61fb      	str	r3, [r7, #28]
 8009a4e:	e177      	b.n	8009d40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009a50:	2201      	movs	r2, #1
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	fa02 f303 	lsl.w	r3, r2, r3
 8009a58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	697a      	ldr	r2, [r7, #20]
 8009a60:	4013      	ands	r3, r2
 8009a62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009a64:	693a      	ldr	r2, [r7, #16]
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	f040 8166 	bne.w	8009d3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d00b      	beq.n	8009a8e <HAL_GPIO_Init+0x5a>
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	2b02      	cmp	r3, #2
 8009a7c:	d007      	beq.n	8009a8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009a82:	2b11      	cmp	r3, #17
 8009a84:	d003      	beq.n	8009a8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	2b12      	cmp	r3, #18
 8009a8c:	d130      	bne.n	8009af0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	005b      	lsls	r3, r3, #1
 8009a98:	2203      	movs	r2, #3
 8009a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a9e:	43db      	mvns	r3, r3
 8009aa0:	69ba      	ldr	r2, [r7, #24]
 8009aa2:	4013      	ands	r3, r2
 8009aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	68da      	ldr	r2, [r3, #12]
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	005b      	lsls	r3, r3, #1
 8009aae:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab2:	69ba      	ldr	r2, [r7, #24]
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	69ba      	ldr	r2, [r7, #24]
 8009abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8009acc:	43db      	mvns	r3, r3
 8009ace:	69ba      	ldr	r2, [r7, #24]
 8009ad0:	4013      	ands	r3, r2
 8009ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	091b      	lsrs	r3, r3, #4
 8009ada:	f003 0201 	and.w	r2, r3, #1
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ae4:	69ba      	ldr	r2, [r7, #24]
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	69ba      	ldr	r2, [r7, #24]
 8009aee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	005b      	lsls	r3, r3, #1
 8009afa:	2203      	movs	r2, #3
 8009afc:	fa02 f303 	lsl.w	r3, r2, r3
 8009b00:	43db      	mvns	r3, r3
 8009b02:	69ba      	ldr	r2, [r7, #24]
 8009b04:	4013      	ands	r3, r2
 8009b06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	689a      	ldr	r2, [r3, #8]
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	005b      	lsls	r3, r3, #1
 8009b10:	fa02 f303 	lsl.w	r3, r2, r3
 8009b14:	69ba      	ldr	r2, [r7, #24]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	69ba      	ldr	r2, [r7, #24]
 8009b1e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	d003      	beq.n	8009b30 <HAL_GPIO_Init+0xfc>
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	2b12      	cmp	r3, #18
 8009b2e:	d123      	bne.n	8009b78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	08da      	lsrs	r2, r3, #3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	3208      	adds	r2, #8
 8009b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	f003 0307 	and.w	r3, r3, #7
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	220f      	movs	r2, #15
 8009b48:	fa02 f303 	lsl.w	r3, r2, r3
 8009b4c:	43db      	mvns	r3, r3
 8009b4e:	69ba      	ldr	r2, [r7, #24]
 8009b50:	4013      	ands	r3, r2
 8009b52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	691a      	ldr	r2, [r3, #16]
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	f003 0307 	and.w	r3, r3, #7
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	fa02 f303 	lsl.w	r3, r2, r3
 8009b64:	69ba      	ldr	r2, [r7, #24]
 8009b66:	4313      	orrs	r3, r2
 8009b68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	08da      	lsrs	r2, r3, #3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	3208      	adds	r2, #8
 8009b72:	69b9      	ldr	r1, [r7, #24]
 8009b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009b7e:	69fb      	ldr	r3, [r7, #28]
 8009b80:	005b      	lsls	r3, r3, #1
 8009b82:	2203      	movs	r2, #3
 8009b84:	fa02 f303 	lsl.w	r3, r2, r3
 8009b88:	43db      	mvns	r3, r3
 8009b8a:	69ba      	ldr	r2, [r7, #24]
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	f003 0203 	and.w	r2, r3, #3
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	005b      	lsls	r3, r3, #1
 8009b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8009ba0:	69ba      	ldr	r2, [r7, #24]
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	69ba      	ldr	r2, [r7, #24]
 8009baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	f000 80c0 	beq.w	8009d3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009bba:	2300      	movs	r3, #0
 8009bbc:	60fb      	str	r3, [r7, #12]
 8009bbe:	4b65      	ldr	r3, [pc, #404]	; (8009d54 <HAL_GPIO_Init+0x320>)
 8009bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bc2:	4a64      	ldr	r2, [pc, #400]	; (8009d54 <HAL_GPIO_Init+0x320>)
 8009bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8009bca:	4b62      	ldr	r3, [pc, #392]	; (8009d54 <HAL_GPIO_Init+0x320>)
 8009bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bd2:	60fb      	str	r3, [r7, #12]
 8009bd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009bd6:	4a60      	ldr	r2, [pc, #384]	; (8009d58 <HAL_GPIO_Init+0x324>)
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	089b      	lsrs	r3, r3, #2
 8009bdc:	3302      	adds	r3, #2
 8009bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	f003 0303 	and.w	r3, r3, #3
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	220f      	movs	r2, #15
 8009bee:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf2:	43db      	mvns	r3, r3
 8009bf4:	69ba      	ldr	r2, [r7, #24]
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4a57      	ldr	r2, [pc, #348]	; (8009d5c <HAL_GPIO_Init+0x328>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d037      	beq.n	8009c72 <HAL_GPIO_Init+0x23e>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4a56      	ldr	r2, [pc, #344]	; (8009d60 <HAL_GPIO_Init+0x32c>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d031      	beq.n	8009c6e <HAL_GPIO_Init+0x23a>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4a55      	ldr	r2, [pc, #340]	; (8009d64 <HAL_GPIO_Init+0x330>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d02b      	beq.n	8009c6a <HAL_GPIO_Init+0x236>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4a54      	ldr	r2, [pc, #336]	; (8009d68 <HAL_GPIO_Init+0x334>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d025      	beq.n	8009c66 <HAL_GPIO_Init+0x232>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4a53      	ldr	r2, [pc, #332]	; (8009d6c <HAL_GPIO_Init+0x338>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d01f      	beq.n	8009c62 <HAL_GPIO_Init+0x22e>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4a52      	ldr	r2, [pc, #328]	; (8009d70 <HAL_GPIO_Init+0x33c>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d019      	beq.n	8009c5e <HAL_GPIO_Init+0x22a>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4a51      	ldr	r2, [pc, #324]	; (8009d74 <HAL_GPIO_Init+0x340>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d013      	beq.n	8009c5a <HAL_GPIO_Init+0x226>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4a50      	ldr	r2, [pc, #320]	; (8009d78 <HAL_GPIO_Init+0x344>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d00d      	beq.n	8009c56 <HAL_GPIO_Init+0x222>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4a4f      	ldr	r2, [pc, #316]	; (8009d7c <HAL_GPIO_Init+0x348>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d007      	beq.n	8009c52 <HAL_GPIO_Init+0x21e>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4a4e      	ldr	r2, [pc, #312]	; (8009d80 <HAL_GPIO_Init+0x34c>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d101      	bne.n	8009c4e <HAL_GPIO_Init+0x21a>
 8009c4a:	2309      	movs	r3, #9
 8009c4c:	e012      	b.n	8009c74 <HAL_GPIO_Init+0x240>
 8009c4e:	230a      	movs	r3, #10
 8009c50:	e010      	b.n	8009c74 <HAL_GPIO_Init+0x240>
 8009c52:	2308      	movs	r3, #8
 8009c54:	e00e      	b.n	8009c74 <HAL_GPIO_Init+0x240>
 8009c56:	2307      	movs	r3, #7
 8009c58:	e00c      	b.n	8009c74 <HAL_GPIO_Init+0x240>
 8009c5a:	2306      	movs	r3, #6
 8009c5c:	e00a      	b.n	8009c74 <HAL_GPIO_Init+0x240>
 8009c5e:	2305      	movs	r3, #5
 8009c60:	e008      	b.n	8009c74 <HAL_GPIO_Init+0x240>
 8009c62:	2304      	movs	r3, #4
 8009c64:	e006      	b.n	8009c74 <HAL_GPIO_Init+0x240>
 8009c66:	2303      	movs	r3, #3
 8009c68:	e004      	b.n	8009c74 <HAL_GPIO_Init+0x240>
 8009c6a:	2302      	movs	r3, #2
 8009c6c:	e002      	b.n	8009c74 <HAL_GPIO_Init+0x240>
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e000      	b.n	8009c74 <HAL_GPIO_Init+0x240>
 8009c72:	2300      	movs	r3, #0
 8009c74:	69fa      	ldr	r2, [r7, #28]
 8009c76:	f002 0203 	and.w	r2, r2, #3
 8009c7a:	0092      	lsls	r2, r2, #2
 8009c7c:	4093      	lsls	r3, r2
 8009c7e:	69ba      	ldr	r2, [r7, #24]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009c84:	4934      	ldr	r1, [pc, #208]	; (8009d58 <HAL_GPIO_Init+0x324>)
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	089b      	lsrs	r3, r3, #2
 8009c8a:	3302      	adds	r3, #2
 8009c8c:	69ba      	ldr	r2, [r7, #24]
 8009c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009c92:	4b3c      	ldr	r3, [pc, #240]	; (8009d84 <HAL_GPIO_Init+0x350>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	43db      	mvns	r3, r3
 8009c9c:	69ba      	ldr	r2, [r7, #24]
 8009c9e:	4013      	ands	r3, r2
 8009ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d003      	beq.n	8009cb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009cae:	69ba      	ldr	r2, [r7, #24]
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009cb6:	4a33      	ldr	r2, [pc, #204]	; (8009d84 <HAL_GPIO_Init+0x350>)
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009cbc:	4b31      	ldr	r3, [pc, #196]	; (8009d84 <HAL_GPIO_Init+0x350>)
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	43db      	mvns	r3, r3
 8009cc6:	69ba      	ldr	r2, [r7, #24]
 8009cc8:	4013      	ands	r3, r2
 8009cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d003      	beq.n	8009ce0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009cd8:	69ba      	ldr	r2, [r7, #24]
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009ce0:	4a28      	ldr	r2, [pc, #160]	; (8009d84 <HAL_GPIO_Init+0x350>)
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009ce6:	4b27      	ldr	r3, [pc, #156]	; (8009d84 <HAL_GPIO_Init+0x350>)
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	43db      	mvns	r3, r3
 8009cf0:	69ba      	ldr	r2, [r7, #24]
 8009cf2:	4013      	ands	r3, r2
 8009cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d003      	beq.n	8009d0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009d02:	69ba      	ldr	r2, [r7, #24]
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009d0a:	4a1e      	ldr	r2, [pc, #120]	; (8009d84 <HAL_GPIO_Init+0x350>)
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009d10:	4b1c      	ldr	r3, [pc, #112]	; (8009d84 <HAL_GPIO_Init+0x350>)
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	43db      	mvns	r3, r3
 8009d1a:	69ba      	ldr	r2, [r7, #24]
 8009d1c:	4013      	ands	r3, r2
 8009d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d003      	beq.n	8009d34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009d2c:	69ba      	ldr	r2, [r7, #24]
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	4313      	orrs	r3, r2
 8009d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009d34:	4a13      	ldr	r2, [pc, #76]	; (8009d84 <HAL_GPIO_Init+0x350>)
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	61fb      	str	r3, [r7, #28]
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	2b0f      	cmp	r3, #15
 8009d44:	f67f ae84 	bls.w	8009a50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009d48:	bf00      	nop
 8009d4a:	3724      	adds	r7, #36	; 0x24
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr
 8009d54:	40023800 	.word	0x40023800
 8009d58:	40013800 	.word	0x40013800
 8009d5c:	40020000 	.word	0x40020000
 8009d60:	40020400 	.word	0x40020400
 8009d64:	40020800 	.word	0x40020800
 8009d68:	40020c00 	.word	0x40020c00
 8009d6c:	40021000 	.word	0x40021000
 8009d70:	40021400 	.word	0x40021400
 8009d74:	40021800 	.word	0x40021800
 8009d78:	40021c00 	.word	0x40021c00
 8009d7c:	40022000 	.word	0x40022000
 8009d80:	40022400 	.word	0x40022400
 8009d84:	40013c00 	.word	0x40013c00

08009d88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	460b      	mov	r3, r1
 8009d92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	691a      	ldr	r2, [r3, #16]
 8009d98:	887b      	ldrh	r3, [r7, #2]
 8009d9a:	4013      	ands	r3, r2
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d002      	beq.n	8009da6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009da0:	2301      	movs	r3, #1
 8009da2:	73fb      	strb	r3, [r7, #15]
 8009da4:	e001      	b.n	8009daa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009da6:	2300      	movs	r3, #0
 8009da8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3714      	adds	r7, #20
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	807b      	strh	r3, [r7, #2]
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009dc8:	787b      	ldrb	r3, [r7, #1]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d003      	beq.n	8009dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009dce:	887a      	ldrh	r2, [r7, #2]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009dd4:	e003      	b.n	8009dde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009dd6:	887b      	ldrh	r3, [r7, #2]
 8009dd8:	041a      	lsls	r2, r3, #16
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	619a      	str	r2, [r3, #24]
}
 8009dde:	bf00      	nop
 8009de0:	370c      	adds	r7, #12
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
	...

08009dec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d101      	bne.n	8009dfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e11f      	b.n	800a03e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d106      	bne.n	8009e18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f7fc fba4 	bl	8006560 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2224      	movs	r2, #36	; 0x24
 8009e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f022 0201 	bic.w	r2, r2, #1
 8009e2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009e4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009e50:	f001 f96e 	bl	800b130 <HAL_RCC_GetPCLK1Freq>
 8009e54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	4a7b      	ldr	r2, [pc, #492]	; (800a048 <HAL_I2C_Init+0x25c>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d807      	bhi.n	8009e70 <HAL_I2C_Init+0x84>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	4a7a      	ldr	r2, [pc, #488]	; (800a04c <HAL_I2C_Init+0x260>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	bf94      	ite	ls
 8009e68:	2301      	movls	r3, #1
 8009e6a:	2300      	movhi	r3, #0
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	e006      	b.n	8009e7e <HAL_I2C_Init+0x92>
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	4a77      	ldr	r2, [pc, #476]	; (800a050 <HAL_I2C_Init+0x264>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	bf94      	ite	ls
 8009e78:	2301      	movls	r3, #1
 8009e7a:	2300      	movhi	r3, #0
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d001      	beq.n	8009e86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	e0db      	b.n	800a03e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	4a72      	ldr	r2, [pc, #456]	; (800a054 <HAL_I2C_Init+0x268>)
 8009e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e8e:	0c9b      	lsrs	r3, r3, #18
 8009e90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68ba      	ldr	r2, [r7, #8]
 8009ea2:	430a      	orrs	r2, r1
 8009ea4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	6a1b      	ldr	r3, [r3, #32]
 8009eac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	4a64      	ldr	r2, [pc, #400]	; (800a048 <HAL_I2C_Init+0x25c>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d802      	bhi.n	8009ec0 <HAL_I2C_Init+0xd4>
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	e009      	b.n	8009ed4 <HAL_I2C_Init+0xe8>
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009ec6:	fb02 f303 	mul.w	r3, r2, r3
 8009eca:	4a63      	ldr	r2, [pc, #396]	; (800a058 <HAL_I2C_Init+0x26c>)
 8009ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ed0:	099b      	lsrs	r3, r3, #6
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	6812      	ldr	r2, [r2, #0]
 8009ed8:	430b      	orrs	r3, r1
 8009eda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	69db      	ldr	r3, [r3, #28]
 8009ee2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009ee6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	4956      	ldr	r1, [pc, #344]	; (800a048 <HAL_I2C_Init+0x25c>)
 8009ef0:	428b      	cmp	r3, r1
 8009ef2:	d80d      	bhi.n	8009f10 <HAL_I2C_Init+0x124>
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	1e59      	subs	r1, r3, #1
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	005b      	lsls	r3, r3, #1
 8009efe:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f02:	3301      	adds	r3, #1
 8009f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f08:	2b04      	cmp	r3, #4
 8009f0a:	bf38      	it	cc
 8009f0c:	2304      	movcc	r3, #4
 8009f0e:	e04f      	b.n	8009fb0 <HAL_I2C_Init+0x1c4>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d111      	bne.n	8009f3c <HAL_I2C_Init+0x150>
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	1e58      	subs	r0, r3, #1
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6859      	ldr	r1, [r3, #4]
 8009f20:	460b      	mov	r3, r1
 8009f22:	005b      	lsls	r3, r3, #1
 8009f24:	440b      	add	r3, r1
 8009f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	bf0c      	ite	eq
 8009f34:	2301      	moveq	r3, #1
 8009f36:	2300      	movne	r3, #0
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	e012      	b.n	8009f62 <HAL_I2C_Init+0x176>
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	1e58      	subs	r0, r3, #1
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6859      	ldr	r1, [r3, #4]
 8009f44:	460b      	mov	r3, r1
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	440b      	add	r3, r1
 8009f4a:	0099      	lsls	r1, r3, #2
 8009f4c:	440b      	add	r3, r1
 8009f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f52:	3301      	adds	r3, #1
 8009f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	bf0c      	ite	eq
 8009f5c:	2301      	moveq	r3, #1
 8009f5e:	2300      	movne	r3, #0
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d001      	beq.n	8009f6a <HAL_I2C_Init+0x17e>
 8009f66:	2301      	movs	r3, #1
 8009f68:	e022      	b.n	8009fb0 <HAL_I2C_Init+0x1c4>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10e      	bne.n	8009f90 <HAL_I2C_Init+0x1a4>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	1e58      	subs	r0, r3, #1
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6859      	ldr	r1, [r3, #4]
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	005b      	lsls	r3, r3, #1
 8009f7e:	440b      	add	r3, r1
 8009f80:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f84:	3301      	adds	r3, #1
 8009f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f8e:	e00f      	b.n	8009fb0 <HAL_I2C_Init+0x1c4>
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	1e58      	subs	r0, r3, #1
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6859      	ldr	r1, [r3, #4]
 8009f98:	460b      	mov	r3, r1
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	440b      	add	r3, r1
 8009f9e:	0099      	lsls	r1, r3, #2
 8009fa0:	440b      	add	r3, r1
 8009fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009fb0:	6879      	ldr	r1, [r7, #4]
 8009fb2:	6809      	ldr	r1, [r1, #0]
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	69da      	ldr	r2, [r3, #28]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a1b      	ldr	r3, [r3, #32]
 8009fca:	431a      	orrs	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	430a      	orrs	r2, r1
 8009fd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009fde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	6911      	ldr	r1, [r2, #16]
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	68d2      	ldr	r2, [r2, #12]
 8009fea:	4311      	orrs	r1, r2
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	6812      	ldr	r2, [r2, #0]
 8009ff0:	430b      	orrs	r3, r1
 8009ff2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	695a      	ldr	r2, [r3, #20]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	699b      	ldr	r3, [r3, #24]
 800a006:	431a      	orrs	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	430a      	orrs	r2, r1
 800a00e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f042 0201 	orr.w	r2, r2, #1
 800a01e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2220      	movs	r2, #32
 800a02a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	000186a0 	.word	0x000186a0
 800a04c:	001e847f 	.word	0x001e847f
 800a050:	003d08ff 	.word	0x003d08ff
 800a054:	431bde83 	.word	0x431bde83
 800a058:	10624dd3 	.word	0x10624dd3

0800a05c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b088      	sub	sp, #32
 800a060:	af02      	add	r7, sp, #8
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	607a      	str	r2, [r7, #4]
 800a066:	461a      	mov	r2, r3
 800a068:	460b      	mov	r3, r1
 800a06a:	817b      	strh	r3, [r7, #10]
 800a06c:	4613      	mov	r3, r2
 800a06e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a070:	f7fe fc00 	bl	8008874 <HAL_GetTick>
 800a074:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	2b20      	cmp	r3, #32
 800a080:	f040 80e0 	bne.w	800a244 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	9300      	str	r3, [sp, #0]
 800a088:	2319      	movs	r3, #25
 800a08a:	2201      	movs	r2, #1
 800a08c:	4970      	ldr	r1, [pc, #448]	; (800a250 <HAL_I2C_Master_Transmit+0x1f4>)
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f000 fc58 	bl	800a944 <I2C_WaitOnFlagUntilTimeout>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d001      	beq.n	800a09e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a09a:	2302      	movs	r3, #2
 800a09c:	e0d3      	b.n	800a246 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d101      	bne.n	800a0ac <HAL_I2C_Master_Transmit+0x50>
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	e0cc      	b.n	800a246 <HAL_I2C_Master_Transmit+0x1ea>
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f003 0301 	and.w	r3, r3, #1
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d007      	beq.n	800a0d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f042 0201 	orr.w	r2, r2, #1
 800a0d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a0e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2221      	movs	r2, #33	; 0x21
 800a0e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2210      	movs	r2, #16
 800a0ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	893a      	ldrh	r2, [r7, #8]
 800a102:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a108:	b29a      	uxth	r2, r3
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	4a50      	ldr	r2, [pc, #320]	; (800a254 <HAL_I2C_Master_Transmit+0x1f8>)
 800a112:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a114:	8979      	ldrh	r1, [r7, #10]
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	6a3a      	ldr	r2, [r7, #32]
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	f000 fac2 	bl	800a6a4 <I2C_MasterRequestWrite>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d001      	beq.n	800a12a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	e08d      	b.n	800a246 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a12a:	2300      	movs	r3, #0
 800a12c:	613b      	str	r3, [r7, #16]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	695b      	ldr	r3, [r3, #20]
 800a134:	613b      	str	r3, [r7, #16]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	699b      	ldr	r3, [r3, #24]
 800a13c:	613b      	str	r3, [r7, #16]
 800a13e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a140:	e066      	b.n	800a210 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a142:	697a      	ldr	r2, [r7, #20]
 800a144:	6a39      	ldr	r1, [r7, #32]
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	f000 fcd2 	bl	800aaf0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00d      	beq.n	800a16e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a156:	2b04      	cmp	r3, #4
 800a158:	d107      	bne.n	800a16a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a168:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	e06b      	b.n	800a246 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a172:	781a      	ldrb	r2, [r3, #0]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17e:	1c5a      	adds	r2, r3, #1
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a188:	b29b      	uxth	r3, r3
 800a18a:	3b01      	subs	r3, #1
 800a18c:	b29a      	uxth	r2, r3
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a196:	3b01      	subs	r3, #1
 800a198:	b29a      	uxth	r2, r3
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	695b      	ldr	r3, [r3, #20]
 800a1a4:	f003 0304 	and.w	r3, r3, #4
 800a1a8:	2b04      	cmp	r3, #4
 800a1aa:	d11b      	bne.n	800a1e4 <HAL_I2C_Master_Transmit+0x188>
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d017      	beq.n	800a1e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b8:	781a      	ldrb	r2, [r3, #0]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c4:	1c5a      	adds	r2, r3, #1
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	b29a      	uxth	r2, r3
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	b29a      	uxth	r2, r3
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a1e4:	697a      	ldr	r2, [r7, #20]
 800a1e6:	6a39      	ldr	r1, [r7, #32]
 800a1e8:	68f8      	ldr	r0, [r7, #12]
 800a1ea:	f000 fcc2 	bl	800ab72 <I2C_WaitOnBTFFlagUntilTimeout>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d00d      	beq.n	800a210 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f8:	2b04      	cmp	r3, #4
 800a1fa:	d107      	bne.n	800a20c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a20a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e01a      	b.n	800a246 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a214:	2b00      	cmp	r3, #0
 800a216:	d194      	bne.n	800a142 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a226:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2220      	movs	r2, #32
 800a22c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a240:	2300      	movs	r3, #0
 800a242:	e000      	b.n	800a246 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a244:	2302      	movs	r3, #2
  }
}
 800a246:	4618      	mov	r0, r3
 800a248:	3718      	adds	r7, #24
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	00100002 	.word	0x00100002
 800a254:	ffff0000 	.word	0xffff0000

0800a258 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b08c      	sub	sp, #48	; 0x30
 800a25c:	af02      	add	r7, sp, #8
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	607a      	str	r2, [r7, #4]
 800a262:	461a      	mov	r2, r3
 800a264:	460b      	mov	r3, r1
 800a266:	817b      	strh	r3, [r7, #10]
 800a268:	4613      	mov	r3, r2
 800a26a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a26c:	f7fe fb02 	bl	8008874 <HAL_GetTick>
 800a270:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b20      	cmp	r3, #32
 800a27c:	f040 820b 	bne.w	800a696 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	2319      	movs	r3, #25
 800a286:	2201      	movs	r2, #1
 800a288:	497c      	ldr	r1, [pc, #496]	; (800a47c <HAL_I2C_Master_Receive+0x224>)
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f000 fb5a 	bl	800a944 <I2C_WaitOnFlagUntilTimeout>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d001      	beq.n	800a29a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800a296:	2302      	movs	r3, #2
 800a298:	e1fe      	b.n	800a698 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d101      	bne.n	800a2a8 <HAL_I2C_Master_Receive+0x50>
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	e1f7      	b.n	800a698 <HAL_I2C_Master_Receive+0x440>
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f003 0301 	and.w	r3, r3, #1
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d007      	beq.n	800a2ce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f042 0201 	orr.w	r2, r2, #1
 800a2cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a2dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2222      	movs	r2, #34	; 0x22
 800a2e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2210      	movs	r2, #16
 800a2ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	893a      	ldrh	r2, [r7, #8]
 800a2fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a304:	b29a      	uxth	r2, r3
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	4a5c      	ldr	r2, [pc, #368]	; (800a480 <HAL_I2C_Master_Receive+0x228>)
 800a30e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a310:	8979      	ldrh	r1, [r7, #10]
 800a312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	f000 fa46 	bl	800a7a8 <I2C_MasterRequestRead>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d001      	beq.n	800a326 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800a322:	2301      	movs	r3, #1
 800a324:	e1b8      	b.n	800a698 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d113      	bne.n	800a356 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a32e:	2300      	movs	r3, #0
 800a330:	623b      	str	r3, [r7, #32]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	695b      	ldr	r3, [r3, #20]
 800a338:	623b      	str	r3, [r7, #32]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	699b      	ldr	r3, [r3, #24]
 800a340:	623b      	str	r3, [r7, #32]
 800a342:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a352:	601a      	str	r2, [r3, #0]
 800a354:	e18c      	b.n	800a670 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d11b      	bne.n	800a396 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a36c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a36e:	2300      	movs	r3, #0
 800a370:	61fb      	str	r3, [r7, #28]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	695b      	ldr	r3, [r3, #20]
 800a378:	61fb      	str	r3, [r7, #28]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	699b      	ldr	r3, [r3, #24]
 800a380:	61fb      	str	r3, [r7, #28]
 800a382:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a392:	601a      	str	r2, [r3, #0]
 800a394:	e16c      	b.n	800a670 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a39a:	2b02      	cmp	r3, #2
 800a39c:	d11b      	bne.n	800a3d6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3be:	2300      	movs	r3, #0
 800a3c0:	61bb      	str	r3, [r7, #24]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	695b      	ldr	r3, [r3, #20]
 800a3c8:	61bb      	str	r3, [r7, #24]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	699b      	ldr	r3, [r3, #24]
 800a3d0:	61bb      	str	r3, [r7, #24]
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	e14c      	b.n	800a670 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a3e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	617b      	str	r3, [r7, #20]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	695b      	ldr	r3, [r3, #20]
 800a3f0:	617b      	str	r3, [r7, #20]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	699b      	ldr	r3, [r3, #24]
 800a3f8:	617b      	str	r3, [r7, #20]
 800a3fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a3fc:	e138      	b.n	800a670 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a402:	2b03      	cmp	r3, #3
 800a404:	f200 80f1 	bhi.w	800a5ea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d123      	bne.n	800a458 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a412:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f000 fbed 	bl	800abf4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d001      	beq.n	800a424 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	e139      	b.n	800a698 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	691a      	ldr	r2, [r3, #16]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42e:	b2d2      	uxtb	r2, r2
 800a430:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a436:	1c5a      	adds	r2, r3, #1
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a440:	3b01      	subs	r3, #1
 800a442:	b29a      	uxth	r2, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	3b01      	subs	r3, #1
 800a450:	b29a      	uxth	r2, r3
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a456:	e10b      	b.n	800a670 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d14e      	bne.n	800a4fe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a462:	9300      	str	r3, [sp, #0]
 800a464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a466:	2200      	movs	r2, #0
 800a468:	4906      	ldr	r1, [pc, #24]	; (800a484 <HAL_I2C_Master_Receive+0x22c>)
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f000 fa6a 	bl	800a944 <I2C_WaitOnFlagUntilTimeout>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d008      	beq.n	800a488 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800a476:	2301      	movs	r3, #1
 800a478:	e10e      	b.n	800a698 <HAL_I2C_Master_Receive+0x440>
 800a47a:	bf00      	nop
 800a47c:	00100002 	.word	0x00100002
 800a480:	ffff0000 	.word	0xffff0000
 800a484:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a496:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	691a      	ldr	r2, [r3, #16]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a2:	b2d2      	uxtb	r2, r2
 800a4a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4aa:	1c5a      	adds	r2, r3, #1
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	3b01      	subs	r3, #1
 800a4c4:	b29a      	uxth	r2, r3
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	691a      	ldr	r2, [r3, #16]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d4:	b2d2      	uxtb	r2, r2
 800a4d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4dc:	1c5a      	adds	r2, r3, #1
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	b29a      	uxth	r2, r3
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	3b01      	subs	r3, #1
 800a4f6:	b29a      	uxth	r2, r3
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a4fc:	e0b8      	b.n	800a670 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a500:	9300      	str	r3, [sp, #0]
 800a502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a504:	2200      	movs	r2, #0
 800a506:	4966      	ldr	r1, [pc, #408]	; (800a6a0 <HAL_I2C_Master_Receive+0x448>)
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f000 fa1b 	bl	800a944 <I2C_WaitOnFlagUntilTimeout>
 800a50e:	4603      	mov	r3, r0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d001      	beq.n	800a518 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	e0bf      	b.n	800a698 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a526:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	691a      	ldr	r2, [r3, #16]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a532:	b2d2      	uxtb	r2, r2
 800a534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53a:	1c5a      	adds	r2, r3, #1
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a544:	3b01      	subs	r3, #1
 800a546:	b29a      	uxth	r2, r3
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a550:	b29b      	uxth	r3, r3
 800a552:	3b01      	subs	r3, #1
 800a554:	b29a      	uxth	r2, r3
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a560:	2200      	movs	r2, #0
 800a562:	494f      	ldr	r1, [pc, #316]	; (800a6a0 <HAL_I2C_Master_Receive+0x448>)
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f000 f9ed 	bl	800a944 <I2C_WaitOnFlagUntilTimeout>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d001      	beq.n	800a574 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	e091      	b.n	800a698 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a582:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	691a      	ldr	r2, [r3, #16]
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58e:	b2d2      	uxtb	r2, r2
 800a590:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a596:	1c5a      	adds	r2, r3, #1
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5a0:	3b01      	subs	r3, #1
 800a5a2:	b29a      	uxth	r2, r3
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	3b01      	subs	r3, #1
 800a5b0:	b29a      	uxth	r2, r3
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	691a      	ldr	r2, [r3, #16]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c0:	b2d2      	uxtb	r2, r2
 800a5c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c8:	1c5a      	adds	r2, r3, #1
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	3b01      	subs	r3, #1
 800a5e2:	b29a      	uxth	r2, r3
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a5e8:	e042      	b.n	800a670 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a5ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a5ee:	68f8      	ldr	r0, [r7, #12]
 800a5f0:	f000 fb00 	bl	800abf4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d001      	beq.n	800a5fe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e04c      	b.n	800a698 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	691a      	ldr	r2, [r3, #16]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a608:	b2d2      	uxtb	r2, r2
 800a60a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a610:	1c5a      	adds	r2, r3, #1
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a61a:	3b01      	subs	r3, #1
 800a61c:	b29a      	uxth	r2, r3
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a626:	b29b      	uxth	r3, r3
 800a628:	3b01      	subs	r3, #1
 800a62a:	b29a      	uxth	r2, r3
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	695b      	ldr	r3, [r3, #20]
 800a636:	f003 0304 	and.w	r3, r3, #4
 800a63a:	2b04      	cmp	r3, #4
 800a63c:	d118      	bne.n	800a670 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	691a      	ldr	r2, [r3, #16]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a648:	b2d2      	uxtb	r2, r2
 800a64a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a650:	1c5a      	adds	r2, r3, #1
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a65a:	3b01      	subs	r3, #1
 800a65c:	b29a      	uxth	r2, r3
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a666:	b29b      	uxth	r3, r3
 800a668:	3b01      	subs	r3, #1
 800a66a:	b29a      	uxth	r2, r3
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a674:	2b00      	cmp	r3, #0
 800a676:	f47f aec2 	bne.w	800a3fe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2220      	movs	r2, #32
 800a67e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2200      	movs	r2, #0
 800a686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a692:	2300      	movs	r3, #0
 800a694:	e000      	b.n	800a698 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a696:	2302      	movs	r3, #2
  }
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3728      	adds	r7, #40	; 0x28
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	00010004 	.word	0x00010004

0800a6a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b088      	sub	sp, #32
 800a6a8:	af02      	add	r7, sp, #8
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	607a      	str	r2, [r7, #4]
 800a6ae:	603b      	str	r3, [r7, #0]
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	2b08      	cmp	r3, #8
 800a6be:	d006      	beq.n	800a6ce <I2C_MasterRequestWrite+0x2a>
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d003      	beq.n	800a6ce <I2C_MasterRequestWrite+0x2a>
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a6cc:	d108      	bne.n	800a6e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a6dc:	601a      	str	r2, [r3, #0]
 800a6de:	e00b      	b.n	800a6f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e4:	2b12      	cmp	r3, #18
 800a6e6:	d107      	bne.n	800a6f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a6f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	9300      	str	r3, [sp, #0]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f000 f91d 	bl	800a944 <I2C_WaitOnFlagUntilTimeout>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00d      	beq.n	800a72c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a71a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a71e:	d103      	bne.n	800a728 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a726:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a728:	2303      	movs	r3, #3
 800a72a:	e035      	b.n	800a798 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	691b      	ldr	r3, [r3, #16]
 800a730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a734:	d108      	bne.n	800a748 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a736:	897b      	ldrh	r3, [r7, #10]
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	461a      	mov	r2, r3
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a744:	611a      	str	r2, [r3, #16]
 800a746:	e01b      	b.n	800a780 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a748:	897b      	ldrh	r3, [r7, #10]
 800a74a:	11db      	asrs	r3, r3, #7
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	f003 0306 	and.w	r3, r3, #6
 800a752:	b2db      	uxtb	r3, r3
 800a754:	f063 030f 	orn	r3, r3, #15
 800a758:	b2da      	uxtb	r2, r3
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	490e      	ldr	r1, [pc, #56]	; (800a7a0 <I2C_MasterRequestWrite+0xfc>)
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	f000 f943 	bl	800a9f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d001      	beq.n	800a776 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a772:	2301      	movs	r3, #1
 800a774:	e010      	b.n	800a798 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a776:	897b      	ldrh	r3, [r7, #10]
 800a778:	b2da      	uxtb	r2, r3
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	4907      	ldr	r1, [pc, #28]	; (800a7a4 <I2C_MasterRequestWrite+0x100>)
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f000 f933 	bl	800a9f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d001      	beq.n	800a796 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a792:	2301      	movs	r3, #1
 800a794:	e000      	b.n	800a798 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3718      	adds	r7, #24
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	00010008 	.word	0x00010008
 800a7a4:	00010002 	.word	0x00010002

0800a7a8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b088      	sub	sp, #32
 800a7ac:	af02      	add	r7, sp, #8
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	607a      	str	r2, [r7, #4]
 800a7b2:	603b      	str	r3, [r7, #0]
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7bc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a7cc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	2b08      	cmp	r3, #8
 800a7d2:	d006      	beq.n	800a7e2 <I2C_MasterRequestRead+0x3a>
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d003      	beq.n	800a7e2 <I2C_MasterRequestRead+0x3a>
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a7e0:	d108      	bne.n	800a7f4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7f0:	601a      	str	r2, [r3, #0]
 800a7f2:	e00b      	b.n	800a80c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f8:	2b11      	cmp	r3, #17
 800a7fa:	d107      	bne.n	800a80c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a80a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	9300      	str	r3, [sp, #0]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a818:	68f8      	ldr	r0, [r7, #12]
 800a81a:	f000 f893 	bl	800a944 <I2C_WaitOnFlagUntilTimeout>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00d      	beq.n	800a840 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a82e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a832:	d103      	bne.n	800a83c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a83a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a83c:	2303      	movs	r3, #3
 800a83e:	e079      	b.n	800a934 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a848:	d108      	bne.n	800a85c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a84a:	897b      	ldrh	r3, [r7, #10]
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	f043 0301 	orr.w	r3, r3, #1
 800a852:	b2da      	uxtb	r2, r3
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	611a      	str	r2, [r3, #16]
 800a85a:	e05f      	b.n	800a91c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a85c:	897b      	ldrh	r3, [r7, #10]
 800a85e:	11db      	asrs	r3, r3, #7
 800a860:	b2db      	uxtb	r3, r3
 800a862:	f003 0306 	and.w	r3, r3, #6
 800a866:	b2db      	uxtb	r3, r3
 800a868:	f063 030f 	orn	r3, r3, #15
 800a86c:	b2da      	uxtb	r2, r3
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	4930      	ldr	r1, [pc, #192]	; (800a93c <I2C_MasterRequestRead+0x194>)
 800a87a:	68f8      	ldr	r0, [r7, #12]
 800a87c:	f000 f8b9 	bl	800a9f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d001      	beq.n	800a88a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a886:	2301      	movs	r3, #1
 800a888:	e054      	b.n	800a934 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a88a:	897b      	ldrh	r3, [r7, #10]
 800a88c:	b2da      	uxtb	r2, r3
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	4929      	ldr	r1, [pc, #164]	; (800a940 <I2C_MasterRequestRead+0x198>)
 800a89a:	68f8      	ldr	r0, [r7, #12]
 800a89c:	f000 f8a9 	bl	800a9f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d001      	beq.n	800a8aa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e044      	b.n	800a934 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	613b      	str	r3, [r7, #16]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	695b      	ldr	r3, [r3, #20]
 800a8b4:	613b      	str	r3, [r7, #16]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	699b      	ldr	r3, [r3, #24]
 800a8bc:	613b      	str	r3, [r7, #16]
 800a8be:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8ce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f000 f831 	bl	800a944 <I2C_WaitOnFlagUntilTimeout>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d00d      	beq.n	800a904 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8f6:	d103      	bne.n	800a900 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8fe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800a900:	2303      	movs	r3, #3
 800a902:	e017      	b.n	800a934 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a904:	897b      	ldrh	r3, [r7, #10]
 800a906:	11db      	asrs	r3, r3, #7
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	f003 0306 	and.w	r3, r3, #6
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	f063 030e 	orn	r3, r3, #14
 800a914:	b2da      	uxtb	r2, r3
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	4907      	ldr	r1, [pc, #28]	; (800a940 <I2C_MasterRequestRead+0x198>)
 800a922:	68f8      	ldr	r0, [r7, #12]
 800a924:	f000 f865 	bl	800a9f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d001      	beq.n	800a932 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800a92e:	2301      	movs	r3, #1
 800a930:	e000      	b.n	800a934 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3718      	adds	r7, #24
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	00010008 	.word	0x00010008
 800a940:	00010002 	.word	0x00010002

0800a944 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	603b      	str	r3, [r7, #0]
 800a950:	4613      	mov	r3, r2
 800a952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a954:	e025      	b.n	800a9a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a95c:	d021      	beq.n	800a9a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a95e:	f7fd ff89 	bl	8008874 <HAL_GetTick>
 800a962:	4602      	mov	r2, r0
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	683a      	ldr	r2, [r7, #0]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d302      	bcc.n	800a974 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d116      	bne.n	800a9a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2200      	movs	r2, #0
 800a978:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2220      	movs	r2, #32
 800a97e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2200      	movs	r2, #0
 800a986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98e:	f043 0220 	orr.w	r2, r3, #32
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2200      	movs	r2, #0
 800a99a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e023      	b.n	800a9ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	0c1b      	lsrs	r3, r3, #16
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d10d      	bne.n	800a9c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	695b      	ldr	r3, [r3, #20]
 800a9b2:	43da      	mvns	r2, r3
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	4013      	ands	r3, r2
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	bf0c      	ite	eq
 800a9be:	2301      	moveq	r3, #1
 800a9c0:	2300      	movne	r3, #0
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	e00c      	b.n	800a9e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	699b      	ldr	r3, [r3, #24]
 800a9ce:	43da      	mvns	r2, r3
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	4013      	ands	r3, r2
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	bf0c      	ite	eq
 800a9da:	2301      	moveq	r3, #1
 800a9dc:	2300      	movne	r3, #0
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	79fb      	ldrb	r3, [r7, #7]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d0b6      	beq.n	800a956 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3710      	adds	r7, #16
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b084      	sub	sp, #16
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	60f8      	str	r0, [r7, #12]
 800a9fa:	60b9      	str	r1, [r7, #8]
 800a9fc:	607a      	str	r2, [r7, #4]
 800a9fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aa00:	e051      	b.n	800aaa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	695b      	ldr	r3, [r3, #20]
 800aa08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa10:	d123      	bne.n	800aa5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa20:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800aa2a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2220      	movs	r2, #32
 800aa36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa46:	f043 0204 	orr.w	r2, r3, #4
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	e046      	b.n	800aae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa60:	d021      	beq.n	800aaa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa62:	f7fd ff07 	bl	8008874 <HAL_GetTick>
 800aa66:	4602      	mov	r2, r0
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	1ad3      	subs	r3, r2, r3
 800aa6c:	687a      	ldr	r2, [r7, #4]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d302      	bcc.n	800aa78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d116      	bne.n	800aaa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2220      	movs	r2, #32
 800aa82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa92:	f043 0220 	orr.w	r2, r3, #32
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e020      	b.n	800aae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	0c1b      	lsrs	r3, r3, #16
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d10c      	bne.n	800aaca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	695b      	ldr	r3, [r3, #20]
 800aab6:	43da      	mvns	r2, r3
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	4013      	ands	r3, r2
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	bf14      	ite	ne
 800aac2:	2301      	movne	r3, #1
 800aac4:	2300      	moveq	r3, #0
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	e00b      	b.n	800aae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	699b      	ldr	r3, [r3, #24]
 800aad0:	43da      	mvns	r2, r3
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	4013      	ands	r3, r2
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	2b00      	cmp	r3, #0
 800aada:	bf14      	ite	ne
 800aadc:	2301      	movne	r3, #1
 800aade:	2300      	moveq	r3, #0
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d18d      	bne.n	800aa02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800aae6:	2300      	movs	r3, #0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3710      	adds	r7, #16
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aafc:	e02d      	b.n	800ab5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800aafe:	68f8      	ldr	r0, [r7, #12]
 800ab00:	f000 f8ce 	bl	800aca0 <I2C_IsAcknowledgeFailed>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d001      	beq.n	800ab0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e02d      	b.n	800ab6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab14:	d021      	beq.n	800ab5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab16:	f7fd fead 	bl	8008874 <HAL_GetTick>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	1ad3      	subs	r3, r2, r3
 800ab20:	68ba      	ldr	r2, [r7, #8]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d302      	bcc.n	800ab2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d116      	bne.n	800ab5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2220      	movs	r2, #32
 800ab36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab46:	f043 0220 	orr.w	r2, r3, #32
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
 800ab58:	e007      	b.n	800ab6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	695b      	ldr	r3, [r3, #20]
 800ab60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab64:	2b80      	cmp	r3, #128	; 0x80
 800ab66:	d1ca      	bne.n	800aafe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b084      	sub	sp, #16
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	60f8      	str	r0, [r7, #12]
 800ab7a:	60b9      	str	r1, [r7, #8]
 800ab7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ab7e:	e02d      	b.n	800abdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f000 f88d 	bl	800aca0 <I2C_IsAcknowledgeFailed>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d001      	beq.n	800ab90 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e02d      	b.n	800abec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab96:	d021      	beq.n	800abdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab98:	f7fd fe6c 	bl	8008874 <HAL_GetTick>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	1ad3      	subs	r3, r2, r3
 800aba2:	68ba      	ldr	r2, [r7, #8]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d302      	bcc.n	800abae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d116      	bne.n	800abdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2200      	movs	r2, #0
 800abb2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2220      	movs	r2, #32
 800abb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc8:	f043 0220 	orr.w	r2, r3, #32
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2200      	movs	r2, #0
 800abd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	e007      	b.n	800abec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	695b      	ldr	r3, [r3, #20]
 800abe2:	f003 0304 	and.w	r3, r3, #4
 800abe6:	2b04      	cmp	r3, #4
 800abe8:	d1ca      	bne.n	800ab80 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800abea:	2300      	movs	r3, #0
}
 800abec:	4618      	mov	r0, r3
 800abee:	3710      	adds	r7, #16
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	60b9      	str	r1, [r7, #8]
 800abfe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ac00:	e042      	b.n	800ac88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	695b      	ldr	r3, [r3, #20]
 800ac08:	f003 0310 	and.w	r3, r3, #16
 800ac0c:	2b10      	cmp	r3, #16
 800ac0e:	d119      	bne.n	800ac44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f06f 0210 	mvn.w	r2, #16
 800ac18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2220      	movs	r2, #32
 800ac24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ac40:	2301      	movs	r3, #1
 800ac42:	e029      	b.n	800ac98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac44:	f7fd fe16 	bl	8008874 <HAL_GetTick>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	68ba      	ldr	r2, [r7, #8]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d302      	bcc.n	800ac5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d116      	bne.n	800ac88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2220      	movs	r2, #32
 800ac64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac74:	f043 0220 	orr.w	r2, r3, #32
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ac84:	2301      	movs	r3, #1
 800ac86:	e007      	b.n	800ac98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	695b      	ldr	r3, [r3, #20]
 800ac8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac92:	2b40      	cmp	r3, #64	; 0x40
 800ac94:	d1b5      	bne.n	800ac02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ac96:	2300      	movs	r3, #0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3710      	adds	r7, #16
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	695b      	ldr	r3, [r3, #20]
 800acae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acb6:	d11b      	bne.n	800acf0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800acc0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2220      	movs	r2, #32
 800accc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acdc:	f043 0204 	orr.w	r2, r3, #4
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2200      	movs	r2, #0
 800ace8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800acec:	2301      	movs	r3, #1
 800acee:	e000      	b.n	800acf2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800acf0:	2300      	movs	r3, #0
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	370c      	adds	r7, #12
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
	...

0800ad00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800ad06:	2300      	movs	r3, #0
 800ad08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	603b      	str	r3, [r7, #0]
 800ad0e:	4b20      	ldr	r3, [pc, #128]	; (800ad90 <HAL_PWREx_EnableOverDrive+0x90>)
 800ad10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad12:	4a1f      	ldr	r2, [pc, #124]	; (800ad90 <HAL_PWREx_EnableOverDrive+0x90>)
 800ad14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad18:	6413      	str	r3, [r2, #64]	; 0x40
 800ad1a:	4b1d      	ldr	r3, [pc, #116]	; (800ad90 <HAL_PWREx_EnableOverDrive+0x90>)
 800ad1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad22:	603b      	str	r3, [r7, #0]
 800ad24:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800ad26:	4b1b      	ldr	r3, [pc, #108]	; (800ad94 <HAL_PWREx_EnableOverDrive+0x94>)
 800ad28:	2201      	movs	r2, #1
 800ad2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ad2c:	f7fd fda2 	bl	8008874 <HAL_GetTick>
 800ad30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ad32:	e009      	b.n	800ad48 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ad34:	f7fd fd9e 	bl	8008874 <HAL_GetTick>
 800ad38:	4602      	mov	r2, r0
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	1ad3      	subs	r3, r2, r3
 800ad3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad42:	d901      	bls.n	800ad48 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800ad44:	2303      	movs	r3, #3
 800ad46:	e01f      	b.n	800ad88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ad48:	4b13      	ldr	r3, [pc, #76]	; (800ad98 <HAL_PWREx_EnableOverDrive+0x98>)
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad54:	d1ee      	bne.n	800ad34 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ad56:	4b11      	ldr	r3, [pc, #68]	; (800ad9c <HAL_PWREx_EnableOverDrive+0x9c>)
 800ad58:	2201      	movs	r2, #1
 800ad5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ad5c:	f7fd fd8a 	bl	8008874 <HAL_GetTick>
 800ad60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ad62:	e009      	b.n	800ad78 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ad64:	f7fd fd86 	bl	8008874 <HAL_GetTick>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	1ad3      	subs	r3, r2, r3
 800ad6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad72:	d901      	bls.n	800ad78 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800ad74:	2303      	movs	r3, #3
 800ad76:	e007      	b.n	800ad88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ad78:	4b07      	ldr	r3, [pc, #28]	; (800ad98 <HAL_PWREx_EnableOverDrive+0x98>)
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad84:	d1ee      	bne.n	800ad64 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800ad86:	2300      	movs	r3, #0
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	40023800 	.word	0x40023800
 800ad94:	420e0040 	.word	0x420e0040
 800ad98:	40007000 	.word	0x40007000
 800ad9c:	420e0044 	.word	0x420e0044

0800ada0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d101      	bne.n	800adb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800adb0:	2301      	movs	r3, #1
 800adb2:	e0cc      	b.n	800af4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800adb4:	4b68      	ldr	r3, [pc, #416]	; (800af58 <HAL_RCC_ClockConfig+0x1b8>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f003 030f 	and.w	r3, r3, #15
 800adbc:	683a      	ldr	r2, [r7, #0]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d90c      	bls.n	800addc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adc2:	4b65      	ldr	r3, [pc, #404]	; (800af58 <HAL_RCC_ClockConfig+0x1b8>)
 800adc4:	683a      	ldr	r2, [r7, #0]
 800adc6:	b2d2      	uxtb	r2, r2
 800adc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800adca:	4b63      	ldr	r3, [pc, #396]	; (800af58 <HAL_RCC_ClockConfig+0x1b8>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f003 030f 	and.w	r3, r3, #15
 800add2:	683a      	ldr	r2, [r7, #0]
 800add4:	429a      	cmp	r2, r3
 800add6:	d001      	beq.n	800addc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	e0b8      	b.n	800af4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f003 0302 	and.w	r3, r3, #2
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d020      	beq.n	800ae2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f003 0304 	and.w	r3, r3, #4
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d005      	beq.n	800ae00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800adf4:	4b59      	ldr	r3, [pc, #356]	; (800af5c <HAL_RCC_ClockConfig+0x1bc>)
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	4a58      	ldr	r2, [pc, #352]	; (800af5c <HAL_RCC_ClockConfig+0x1bc>)
 800adfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800adfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f003 0308 	and.w	r3, r3, #8
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d005      	beq.n	800ae18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ae0c:	4b53      	ldr	r3, [pc, #332]	; (800af5c <HAL_RCC_ClockConfig+0x1bc>)
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	4a52      	ldr	r2, [pc, #328]	; (800af5c <HAL_RCC_ClockConfig+0x1bc>)
 800ae12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ae16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae18:	4b50      	ldr	r3, [pc, #320]	; (800af5c <HAL_RCC_ClockConfig+0x1bc>)
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	494d      	ldr	r1, [pc, #308]	; (800af5c <HAL_RCC_ClockConfig+0x1bc>)
 800ae26:	4313      	orrs	r3, r2
 800ae28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f003 0301 	and.w	r3, r3, #1
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d044      	beq.n	800aec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d107      	bne.n	800ae4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae3e:	4b47      	ldr	r3, [pc, #284]	; (800af5c <HAL_RCC_ClockConfig+0x1bc>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d119      	bne.n	800ae7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e07f      	b.n	800af4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	2b02      	cmp	r3, #2
 800ae54:	d003      	beq.n	800ae5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ae5a:	2b03      	cmp	r3, #3
 800ae5c:	d107      	bne.n	800ae6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae5e:	4b3f      	ldr	r3, [pc, #252]	; (800af5c <HAL_RCC_ClockConfig+0x1bc>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d109      	bne.n	800ae7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e06f      	b.n	800af4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae6e:	4b3b      	ldr	r3, [pc, #236]	; (800af5c <HAL_RCC_ClockConfig+0x1bc>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f003 0302 	and.w	r3, r3, #2
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d101      	bne.n	800ae7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e067      	b.n	800af4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ae7e:	4b37      	ldr	r3, [pc, #220]	; (800af5c <HAL_RCC_ClockConfig+0x1bc>)
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	f023 0203 	bic.w	r2, r3, #3
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	4934      	ldr	r1, [pc, #208]	; (800af5c <HAL_RCC_ClockConfig+0x1bc>)
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ae90:	f7fd fcf0 	bl	8008874 <HAL_GetTick>
 800ae94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae96:	e00a      	b.n	800aeae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae98:	f7fd fcec 	bl	8008874 <HAL_GetTick>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	1ad3      	subs	r3, r2, r3
 800aea2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d901      	bls.n	800aeae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800aeaa:	2303      	movs	r3, #3
 800aeac:	e04f      	b.n	800af4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aeae:	4b2b      	ldr	r3, [pc, #172]	; (800af5c <HAL_RCC_ClockConfig+0x1bc>)
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	f003 020c 	and.w	r2, r3, #12
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d1eb      	bne.n	800ae98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aec0:	4b25      	ldr	r3, [pc, #148]	; (800af58 <HAL_RCC_ClockConfig+0x1b8>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f003 030f 	and.w	r3, r3, #15
 800aec8:	683a      	ldr	r2, [r7, #0]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d20c      	bcs.n	800aee8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aece:	4b22      	ldr	r3, [pc, #136]	; (800af58 <HAL_RCC_ClockConfig+0x1b8>)
 800aed0:	683a      	ldr	r2, [r7, #0]
 800aed2:	b2d2      	uxtb	r2, r2
 800aed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aed6:	4b20      	ldr	r3, [pc, #128]	; (800af58 <HAL_RCC_ClockConfig+0x1b8>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f003 030f 	and.w	r3, r3, #15
 800aede:	683a      	ldr	r2, [r7, #0]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d001      	beq.n	800aee8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800aee4:	2301      	movs	r3, #1
 800aee6:	e032      	b.n	800af4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f003 0304 	and.w	r3, r3, #4
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d008      	beq.n	800af06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aef4:	4b19      	ldr	r3, [pc, #100]	; (800af5c <HAL_RCC_ClockConfig+0x1bc>)
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	4916      	ldr	r1, [pc, #88]	; (800af5c <HAL_RCC_ClockConfig+0x1bc>)
 800af02:	4313      	orrs	r3, r2
 800af04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f003 0308 	and.w	r3, r3, #8
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d009      	beq.n	800af26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800af12:	4b12      	ldr	r3, [pc, #72]	; (800af5c <HAL_RCC_ClockConfig+0x1bc>)
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	691b      	ldr	r3, [r3, #16]
 800af1e:	00db      	lsls	r3, r3, #3
 800af20:	490e      	ldr	r1, [pc, #56]	; (800af5c <HAL_RCC_ClockConfig+0x1bc>)
 800af22:	4313      	orrs	r3, r2
 800af24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800af26:	f000 f821 	bl	800af6c <HAL_RCC_GetSysClockFreq>
 800af2a:	4601      	mov	r1, r0
 800af2c:	4b0b      	ldr	r3, [pc, #44]	; (800af5c <HAL_RCC_ClockConfig+0x1bc>)
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	091b      	lsrs	r3, r3, #4
 800af32:	f003 030f 	and.w	r3, r3, #15
 800af36:	4a0a      	ldr	r2, [pc, #40]	; (800af60 <HAL_RCC_ClockConfig+0x1c0>)
 800af38:	5cd3      	ldrb	r3, [r2, r3]
 800af3a:	fa21 f303 	lsr.w	r3, r1, r3
 800af3e:	4a09      	ldr	r2, [pc, #36]	; (800af64 <HAL_RCC_ClockConfig+0x1c4>)
 800af40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800af42:	4b09      	ldr	r3, [pc, #36]	; (800af68 <HAL_RCC_ClockConfig+0x1c8>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4618      	mov	r0, r3
 800af48:	f7fd fc50 	bl	80087ec <HAL_InitTick>

  return HAL_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	40023c00 	.word	0x40023c00
 800af5c:	40023800 	.word	0x40023800
 800af60:	08018cbc 	.word	0x08018cbc
 800af64:	20000000 	.word	0x20000000
 800af68:	20000004 	.word	0x20000004

0800af6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af6e:	b085      	sub	sp, #20
 800af70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800af72:	2300      	movs	r3, #0
 800af74:	607b      	str	r3, [r7, #4]
 800af76:	2300      	movs	r3, #0
 800af78:	60fb      	str	r3, [r7, #12]
 800af7a:	2300      	movs	r3, #0
 800af7c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800af7e:	2300      	movs	r3, #0
 800af80:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800af82:	4b63      	ldr	r3, [pc, #396]	; (800b110 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800af84:	689b      	ldr	r3, [r3, #8]
 800af86:	f003 030c 	and.w	r3, r3, #12
 800af8a:	2b04      	cmp	r3, #4
 800af8c:	d007      	beq.n	800af9e <HAL_RCC_GetSysClockFreq+0x32>
 800af8e:	2b08      	cmp	r3, #8
 800af90:	d008      	beq.n	800afa4 <HAL_RCC_GetSysClockFreq+0x38>
 800af92:	2b00      	cmp	r3, #0
 800af94:	f040 80b4 	bne.w	800b100 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800af98:	4b5e      	ldr	r3, [pc, #376]	; (800b114 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800af9a:	60bb      	str	r3, [r7, #8]
       break;
 800af9c:	e0b3      	b.n	800b106 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800af9e:	4b5d      	ldr	r3, [pc, #372]	; (800b114 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800afa0:	60bb      	str	r3, [r7, #8]
      break;
 800afa2:	e0b0      	b.n	800b106 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800afa4:	4b5a      	ldr	r3, [pc, #360]	; (800b110 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800afae:	4b58      	ldr	r3, [pc, #352]	; (800b110 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d04a      	beq.n	800b050 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800afba:	4b55      	ldr	r3, [pc, #340]	; (800b110 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	099b      	lsrs	r3, r3, #6
 800afc0:	f04f 0400 	mov.w	r4, #0
 800afc4:	f240 11ff 	movw	r1, #511	; 0x1ff
 800afc8:	f04f 0200 	mov.w	r2, #0
 800afcc:	ea03 0501 	and.w	r5, r3, r1
 800afd0:	ea04 0602 	and.w	r6, r4, r2
 800afd4:	4629      	mov	r1, r5
 800afd6:	4632      	mov	r2, r6
 800afd8:	f04f 0300 	mov.w	r3, #0
 800afdc:	f04f 0400 	mov.w	r4, #0
 800afe0:	0154      	lsls	r4, r2, #5
 800afe2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800afe6:	014b      	lsls	r3, r1, #5
 800afe8:	4619      	mov	r1, r3
 800afea:	4622      	mov	r2, r4
 800afec:	1b49      	subs	r1, r1, r5
 800afee:	eb62 0206 	sbc.w	r2, r2, r6
 800aff2:	f04f 0300 	mov.w	r3, #0
 800aff6:	f04f 0400 	mov.w	r4, #0
 800affa:	0194      	lsls	r4, r2, #6
 800affc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b000:	018b      	lsls	r3, r1, #6
 800b002:	1a5b      	subs	r3, r3, r1
 800b004:	eb64 0402 	sbc.w	r4, r4, r2
 800b008:	f04f 0100 	mov.w	r1, #0
 800b00c:	f04f 0200 	mov.w	r2, #0
 800b010:	00e2      	lsls	r2, r4, #3
 800b012:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b016:	00d9      	lsls	r1, r3, #3
 800b018:	460b      	mov	r3, r1
 800b01a:	4614      	mov	r4, r2
 800b01c:	195b      	adds	r3, r3, r5
 800b01e:	eb44 0406 	adc.w	r4, r4, r6
 800b022:	f04f 0100 	mov.w	r1, #0
 800b026:	f04f 0200 	mov.w	r2, #0
 800b02a:	02a2      	lsls	r2, r4, #10
 800b02c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b030:	0299      	lsls	r1, r3, #10
 800b032:	460b      	mov	r3, r1
 800b034:	4614      	mov	r4, r2
 800b036:	4618      	mov	r0, r3
 800b038:	4621      	mov	r1, r4
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f04f 0400 	mov.w	r4, #0
 800b040:	461a      	mov	r2, r3
 800b042:	4623      	mov	r3, r4
 800b044:	f7f5 fe38 	bl	8000cb8 <__aeabi_uldivmod>
 800b048:	4603      	mov	r3, r0
 800b04a:	460c      	mov	r4, r1
 800b04c:	60fb      	str	r3, [r7, #12]
 800b04e:	e049      	b.n	800b0e4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b050:	4b2f      	ldr	r3, [pc, #188]	; (800b110 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	099b      	lsrs	r3, r3, #6
 800b056:	f04f 0400 	mov.w	r4, #0
 800b05a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b05e:	f04f 0200 	mov.w	r2, #0
 800b062:	ea03 0501 	and.w	r5, r3, r1
 800b066:	ea04 0602 	and.w	r6, r4, r2
 800b06a:	4629      	mov	r1, r5
 800b06c:	4632      	mov	r2, r6
 800b06e:	f04f 0300 	mov.w	r3, #0
 800b072:	f04f 0400 	mov.w	r4, #0
 800b076:	0154      	lsls	r4, r2, #5
 800b078:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b07c:	014b      	lsls	r3, r1, #5
 800b07e:	4619      	mov	r1, r3
 800b080:	4622      	mov	r2, r4
 800b082:	1b49      	subs	r1, r1, r5
 800b084:	eb62 0206 	sbc.w	r2, r2, r6
 800b088:	f04f 0300 	mov.w	r3, #0
 800b08c:	f04f 0400 	mov.w	r4, #0
 800b090:	0194      	lsls	r4, r2, #6
 800b092:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b096:	018b      	lsls	r3, r1, #6
 800b098:	1a5b      	subs	r3, r3, r1
 800b09a:	eb64 0402 	sbc.w	r4, r4, r2
 800b09e:	f04f 0100 	mov.w	r1, #0
 800b0a2:	f04f 0200 	mov.w	r2, #0
 800b0a6:	00e2      	lsls	r2, r4, #3
 800b0a8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b0ac:	00d9      	lsls	r1, r3, #3
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	4614      	mov	r4, r2
 800b0b2:	195b      	adds	r3, r3, r5
 800b0b4:	eb44 0406 	adc.w	r4, r4, r6
 800b0b8:	f04f 0100 	mov.w	r1, #0
 800b0bc:	f04f 0200 	mov.w	r2, #0
 800b0c0:	02a2      	lsls	r2, r4, #10
 800b0c2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b0c6:	0299      	lsls	r1, r3, #10
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	4614      	mov	r4, r2
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	4621      	mov	r1, r4
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f04f 0400 	mov.w	r4, #0
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	4623      	mov	r3, r4
 800b0da:	f7f5 fded 	bl	8000cb8 <__aeabi_uldivmod>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	460c      	mov	r4, r1
 800b0e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b0e4:	4b0a      	ldr	r3, [pc, #40]	; (800b110 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	0c1b      	lsrs	r3, r3, #16
 800b0ea:	f003 0303 	and.w	r3, r3, #3
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	005b      	lsls	r3, r3, #1
 800b0f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b0f4:	68fa      	ldr	r2, [r7, #12]
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0fc:	60bb      	str	r3, [r7, #8]
      break;
 800b0fe:	e002      	b.n	800b106 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b100:	4b04      	ldr	r3, [pc, #16]	; (800b114 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b102:	60bb      	str	r3, [r7, #8]
      break;
 800b104:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b106:	68bb      	ldr	r3, [r7, #8]
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3714      	adds	r7, #20
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b110:	40023800 	.word	0x40023800
 800b114:	00f42400 	.word	0x00f42400

0800b118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b118:	b480      	push	{r7}
 800b11a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b11c:	4b03      	ldr	r3, [pc, #12]	; (800b12c <HAL_RCC_GetHCLKFreq+0x14>)
 800b11e:	681b      	ldr	r3, [r3, #0]
}
 800b120:	4618      	mov	r0, r3
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr
 800b12a:	bf00      	nop
 800b12c:	20000000 	.word	0x20000000

0800b130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b134:	f7ff fff0 	bl	800b118 <HAL_RCC_GetHCLKFreq>
 800b138:	4601      	mov	r1, r0
 800b13a:	4b05      	ldr	r3, [pc, #20]	; (800b150 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	0a9b      	lsrs	r3, r3, #10
 800b140:	f003 0307 	and.w	r3, r3, #7
 800b144:	4a03      	ldr	r2, [pc, #12]	; (800b154 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b146:	5cd3      	ldrb	r3, [r2, r3]
 800b148:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	40023800 	.word	0x40023800
 800b154:	08018ccc 	.word	0x08018ccc

0800b158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b15c:	f7ff ffdc 	bl	800b118 <HAL_RCC_GetHCLKFreq>
 800b160:	4601      	mov	r1, r0
 800b162:	4b05      	ldr	r3, [pc, #20]	; (800b178 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	0b5b      	lsrs	r3, r3, #13
 800b168:	f003 0307 	and.w	r3, r3, #7
 800b16c:	4a03      	ldr	r2, [pc, #12]	; (800b17c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b16e:	5cd3      	ldrb	r3, [r2, r3]
 800b170:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b174:	4618      	mov	r0, r3
 800b176:	bd80      	pop	{r7, pc}
 800b178:	40023800 	.word	0x40023800
 800b17c:	08018ccc 	.word	0x08018ccc

0800b180 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b088      	sub	sp, #32
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b188:	2300      	movs	r3, #0
 800b18a:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800b18c:	2300      	movs	r3, #0
 800b18e:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800b190:	2300      	movs	r3, #0
 800b192:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800b194:	2300      	movs	r3, #0
 800b196:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800b198:	2300      	movs	r3, #0
 800b19a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d00a      	beq.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b1a8:	4b66      	ldr	r3, [pc, #408]	; (800b344 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b1aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1ae:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1b6:	4963      	ldr	r1, [pc, #396]	; (800b344 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00a      	beq.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800b1ca:	4b5e      	ldr	r3, [pc, #376]	; (800b344 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b1cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1d0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d8:	495a      	ldr	r1, [pc, #360]	; (800b344 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f003 0301 	and.w	r3, r3, #1
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d10b      	bne.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d105      	bne.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b200:	2b00      	cmp	r3, #0
 800b202:	d075      	beq.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b204:	4b50      	ldr	r3, [pc, #320]	; (800b348 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800b206:	2200      	movs	r2, #0
 800b208:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b20a:	f7fd fb33 	bl	8008874 <HAL_GetTick>
 800b20e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b210:	e008      	b.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b212:	f7fd fb2f 	bl	8008874 <HAL_GetTick>
 800b216:	4602      	mov	r2, r0
 800b218:	69fb      	ldr	r3, [r7, #28]
 800b21a:	1ad3      	subs	r3, r2, r3
 800b21c:	2b02      	cmp	r3, #2
 800b21e:	d901      	bls.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b220:	2303      	movs	r3, #3
 800b222:	e1dc      	b.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b224:	4b47      	ldr	r3, [pc, #284]	; (800b344 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d1f0      	bne.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f003 0301 	and.w	r3, r3, #1
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d009      	beq.n	800b250 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	019a      	lsls	r2, r3, #6
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	071b      	lsls	r3, r3, #28
 800b248:	493e      	ldr	r1, [pc, #248]	; (800b344 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b24a:	4313      	orrs	r3, r2
 800b24c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f003 0302 	and.w	r3, r3, #2
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d01f      	beq.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b25c:	4b39      	ldr	r3, [pc, #228]	; (800b344 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b25e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b262:	0f1b      	lsrs	r3, r3, #28
 800b264:	f003 0307 	and.w	r3, r3, #7
 800b268:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	019a      	lsls	r2, r3, #6
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	68db      	ldr	r3, [r3, #12]
 800b274:	061b      	lsls	r3, r3, #24
 800b276:	431a      	orrs	r2, r3
 800b278:	69bb      	ldr	r3, [r7, #24]
 800b27a:	071b      	lsls	r3, r3, #28
 800b27c:	4931      	ldr	r1, [pc, #196]	; (800b344 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b27e:	4313      	orrs	r3, r2
 800b280:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b284:	4b2f      	ldr	r3, [pc, #188]	; (800b344 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b286:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b28a:	f023 021f 	bic.w	r2, r3, #31
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6a1b      	ldr	r3, [r3, #32]
 800b292:	3b01      	subs	r3, #1
 800b294:	492b      	ldr	r1, [pc, #172]	; (800b344 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b296:	4313      	orrs	r3, r2
 800b298:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00d      	beq.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	019a      	lsls	r2, r3, #6
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	061b      	lsls	r3, r3, #24
 800b2b4:	431a      	orrs	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	071b      	lsls	r3, r3, #28
 800b2bc:	4921      	ldr	r1, [pc, #132]	; (800b344 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b2c4:	4b20      	ldr	r3, [pc, #128]	; (800b348 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b2ca:	f7fd fad3 	bl	8008874 <HAL_GetTick>
 800b2ce:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b2d0:	e008      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b2d2:	f7fd facf 	bl	8008874 <HAL_GetTick>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	69fb      	ldr	r3, [r7, #28]
 800b2da:	1ad3      	subs	r3, r2, r3
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	d901      	bls.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b2e0:	2303      	movs	r3, #3
 800b2e2:	e17c      	b.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b2e4:	4b17      	ldr	r3, [pc, #92]	; (800b344 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d0f0      	beq.n	800b2d2 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f003 0304 	and.w	r3, r3, #4
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d112      	bne.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b304:	2b00      	cmp	r3, #0
 800b306:	d10c      	bne.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800b310:	2b00      	cmp	r3, #0
 800b312:	f000 80ce 	beq.w	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800b31a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b31e:	f040 80c8 	bne.w	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b322:	4b0a      	ldr	r3, [pc, #40]	; (800b34c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b324:	2200      	movs	r2, #0
 800b326:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b328:	f7fd faa4 	bl	8008874 <HAL_GetTick>
 800b32c:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b32e:	e00f      	b.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b330:	f7fd faa0 	bl	8008874 <HAL_GetTick>
 800b334:	4602      	mov	r2, r0
 800b336:	69fb      	ldr	r3, [r7, #28]
 800b338:	1ad3      	subs	r3, r2, r3
 800b33a:	2b02      	cmp	r3, #2
 800b33c:	d908      	bls.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b33e:	2303      	movs	r3, #3
 800b340:	e14d      	b.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800b342:	bf00      	nop
 800b344:	40023800 	.word	0x40023800
 800b348:	42470068 	.word	0x42470068
 800b34c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b350:	4ba5      	ldr	r3, [pc, #660]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b35c:	d0e8      	beq.n	800b330 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f003 0304 	and.w	r3, r3, #4
 800b366:	2b00      	cmp	r3, #0
 800b368:	d02e      	beq.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800b36a:	4b9f      	ldr	r3, [pc, #636]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b36c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b370:	0c1b      	lsrs	r3, r3, #16
 800b372:	f003 0303 	and.w	r3, r3, #3
 800b376:	3301      	adds	r3, #1
 800b378:	005b      	lsls	r3, r3, #1
 800b37a:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b37c:	4b9a      	ldr	r3, [pc, #616]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b37e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b382:	0f1b      	lsrs	r3, r3, #28
 800b384:	f003 0307 	and.w	r3, r3, #7
 800b388:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	691b      	ldr	r3, [r3, #16]
 800b38e:	019a      	lsls	r2, r3, #6
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	085b      	lsrs	r3, r3, #1
 800b394:	3b01      	subs	r3, #1
 800b396:	041b      	lsls	r3, r3, #16
 800b398:	431a      	orrs	r2, r3
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	699b      	ldr	r3, [r3, #24]
 800b39e:	061b      	lsls	r3, r3, #24
 800b3a0:	431a      	orrs	r2, r3
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	071b      	lsls	r3, r3, #28
 800b3a6:	4990      	ldr	r1, [pc, #576]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b3ae:	4b8e      	ldr	r3, [pc, #568]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b3b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3bc:	3b01      	subs	r3, #1
 800b3be:	021b      	lsls	r3, r3, #8
 800b3c0:	4989      	ldr	r1, [pc, #548]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f003 0308 	and.w	r3, r3, #8
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d02c      	beq.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800b3d4:	4b84      	ldr	r3, [pc, #528]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b3d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3da:	0c1b      	lsrs	r3, r3, #16
 800b3dc:	f003 0303 	and.w	r3, r3, #3
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	005b      	lsls	r3, r3, #1
 800b3e4:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b3e6:	4b80      	ldr	r3, [pc, #512]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b3e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3ec:	0e1b      	lsrs	r3, r3, #24
 800b3ee:	f003 030f 	and.w	r3, r3, #15
 800b3f2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	691b      	ldr	r3, [r3, #16]
 800b3f8:	019a      	lsls	r2, r3, #6
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	085b      	lsrs	r3, r3, #1
 800b3fe:	3b01      	subs	r3, #1
 800b400:	041b      	lsls	r3, r3, #16
 800b402:	431a      	orrs	r2, r3
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	061b      	lsls	r3, r3, #24
 800b408:	431a      	orrs	r2, r3
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	69db      	ldr	r3, [r3, #28]
 800b40e:	071b      	lsls	r3, r3, #28
 800b410:	4975      	ldr	r1, [pc, #468]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b412:	4313      	orrs	r3, r2
 800b414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b418:	4b73      	ldr	r3, [pc, #460]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b41a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b41e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b426:	4970      	ldr	r1, [pc, #448]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b428:	4313      	orrs	r3, r2
 800b42a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b436:	2b00      	cmp	r3, #0
 800b438:	d024      	beq.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800b43e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b442:	d11f      	bne.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b444:	4b68      	ldr	r3, [pc, #416]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b44a:	0e1b      	lsrs	r3, r3, #24
 800b44c:	f003 030f 	and.w	r3, r3, #15
 800b450:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b452:	4b65      	ldr	r3, [pc, #404]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b458:	0f1b      	lsrs	r3, r3, #28
 800b45a:	f003 0307 	and.w	r3, r3, #7
 800b45e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	691b      	ldr	r3, [r3, #16]
 800b464:	019a      	lsls	r2, r3, #6
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	695b      	ldr	r3, [r3, #20]
 800b46a:	085b      	lsrs	r3, r3, #1
 800b46c:	3b01      	subs	r3, #1
 800b46e:	041b      	lsls	r3, r3, #16
 800b470:	431a      	orrs	r2, r3
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	061b      	lsls	r3, r3, #24
 800b476:	431a      	orrs	r2, r3
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	071b      	lsls	r3, r3, #28
 800b47c:	495a      	ldr	r1, [pc, #360]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b47e:	4313      	orrs	r3, r2
 800b480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b484:	4b59      	ldr	r3, [pc, #356]	; (800b5ec <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800b486:	2201      	movs	r2, #1
 800b488:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b48a:	f7fd f9f3 	bl	8008874 <HAL_GetTick>
 800b48e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b490:	e008      	b.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b492:	f7fd f9ef 	bl	8008874 <HAL_GetTick>
 800b496:	4602      	mov	r2, r0
 800b498:	69fb      	ldr	r3, [r7, #28]
 800b49a:	1ad3      	subs	r3, r2, r3
 800b49c:	2b02      	cmp	r3, #2
 800b49e:	d901      	bls.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b4a0:	2303      	movs	r3, #3
 800b4a2:	e09c      	b.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b4a4:	4b50      	ldr	r3, [pc, #320]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4b0:	d1ef      	bne.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f003 0320 	and.w	r3, r3, #32
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	f000 8083 	beq.w	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	60bb      	str	r3, [r7, #8]
 800b4c4:	4b48      	ldr	r3, [pc, #288]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b4c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4c8:	4a47      	ldr	r2, [pc, #284]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b4ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4ce:	6413      	str	r3, [r2, #64]	; 0x40
 800b4d0:	4b45      	ldr	r3, [pc, #276]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b4d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b4d8:	60bb      	str	r3, [r7, #8]
 800b4da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b4dc:	4b44      	ldr	r3, [pc, #272]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a43      	ldr	r2, [pc, #268]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800b4e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4e6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b4e8:	f7fd f9c4 	bl	8008874 <HAL_GetTick>
 800b4ec:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b4ee:	e008      	b.n	800b502 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b4f0:	f7fd f9c0 	bl	8008874 <HAL_GetTick>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	69fb      	ldr	r3, [r7, #28]
 800b4f8:	1ad3      	subs	r3, r2, r3
 800b4fa:	2b02      	cmp	r3, #2
 800b4fc:	d901      	bls.n	800b502 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800b4fe:	2303      	movs	r3, #3
 800b500:	e06d      	b.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b502:	4b3b      	ldr	r3, [pc, #236]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d0f0      	beq.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b50e:	4b36      	ldr	r3, [pc, #216]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b516:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b518:	69bb      	ldr	r3, [r7, #24]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d02f      	beq.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b526:	69ba      	ldr	r2, [r7, #24]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d028      	beq.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b52c:	4b2e      	ldr	r3, [pc, #184]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b52e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b534:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b536:	4b2f      	ldr	r3, [pc, #188]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b538:	2201      	movs	r2, #1
 800b53a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b53c:	4b2d      	ldr	r3, [pc, #180]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b53e:	2200      	movs	r2, #0
 800b540:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b542:	4a29      	ldr	r2, [pc, #164]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b544:	69bb      	ldr	r3, [r7, #24]
 800b546:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b548:	4b27      	ldr	r3, [pc, #156]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b54a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b54c:	f003 0301 	and.w	r3, r3, #1
 800b550:	2b01      	cmp	r3, #1
 800b552:	d114      	bne.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b554:	f7fd f98e 	bl	8008874 <HAL_GetTick>
 800b558:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b55a:	e00a      	b.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b55c:	f7fd f98a 	bl	8008874 <HAL_GetTick>
 800b560:	4602      	mov	r2, r0
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	1ad3      	subs	r3, r2, r3
 800b566:	f241 3288 	movw	r2, #5000	; 0x1388
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d901      	bls.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800b56e:	2303      	movs	r3, #3
 800b570:	e035      	b.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b572:	4b1d      	ldr	r3, [pc, #116]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b576:	f003 0302 	and.w	r3, r3, #2
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d0ee      	beq.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b586:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b58a:	d10d      	bne.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800b58c:	4b16      	ldr	r3, [pc, #88]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b598:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b59c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5a0:	4911      	ldr	r1, [pc, #68]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	608b      	str	r3, [r1, #8]
 800b5a6:	e005      	b.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800b5a8:	4b0f      	ldr	r3, [pc, #60]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	4a0e      	ldr	r2, [pc, #56]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b5ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b5b2:	6093      	str	r3, [r2, #8]
 800b5b4:	4b0c      	ldr	r3, [pc, #48]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b5b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5c0:	4909      	ldr	r1, [pc, #36]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f003 0310 	and.w	r3, r3, #16
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d004      	beq.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b5d8:	4b07      	ldr	r3, [pc, #28]	; (800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800b5da:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800b5dc:	2300      	movs	r3, #0
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3720      	adds	r7, #32
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	40023800 	.word	0x40023800
 800b5ec:	42470070 	.word	0x42470070
 800b5f0:	40007000 	.word	0x40007000
 800b5f4:	42470e40 	.word	0x42470e40
 800b5f8:	424711e0 	.word	0x424711e0

0800b5fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b086      	sub	sp, #24
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b604:	2300      	movs	r3, #0
 800b606:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f003 0301 	and.w	r3, r3, #1
 800b610:	2b00      	cmp	r3, #0
 800b612:	d075      	beq.n	800b700 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b614:	4ba2      	ldr	r3, [pc, #648]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b616:	689b      	ldr	r3, [r3, #8]
 800b618:	f003 030c 	and.w	r3, r3, #12
 800b61c:	2b04      	cmp	r3, #4
 800b61e:	d00c      	beq.n	800b63a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b620:	4b9f      	ldr	r3, [pc, #636]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b622:	689b      	ldr	r3, [r3, #8]
 800b624:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b628:	2b08      	cmp	r3, #8
 800b62a:	d112      	bne.n	800b652 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b62c:	4b9c      	ldr	r3, [pc, #624]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b634:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b638:	d10b      	bne.n	800b652 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b63a:	4b99      	ldr	r3, [pc, #612]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b642:	2b00      	cmp	r3, #0
 800b644:	d05b      	beq.n	800b6fe <HAL_RCC_OscConfig+0x102>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d157      	bne.n	800b6fe <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800b64e:	2301      	movs	r3, #1
 800b650:	e20b      	b.n	800ba6a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b65a:	d106      	bne.n	800b66a <HAL_RCC_OscConfig+0x6e>
 800b65c:	4b90      	ldr	r3, [pc, #576]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a8f      	ldr	r2, [pc, #572]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b666:	6013      	str	r3, [r2, #0]
 800b668:	e01d      	b.n	800b6a6 <HAL_RCC_OscConfig+0xaa>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b672:	d10c      	bne.n	800b68e <HAL_RCC_OscConfig+0x92>
 800b674:	4b8a      	ldr	r3, [pc, #552]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a89      	ldr	r2, [pc, #548]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b67a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b67e:	6013      	str	r3, [r2, #0]
 800b680:	4b87      	ldr	r3, [pc, #540]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a86      	ldr	r2, [pc, #536]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b68a:	6013      	str	r3, [r2, #0]
 800b68c:	e00b      	b.n	800b6a6 <HAL_RCC_OscConfig+0xaa>
 800b68e:	4b84      	ldr	r3, [pc, #528]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	4a83      	ldr	r2, [pc, #524]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b698:	6013      	str	r3, [r2, #0]
 800b69a:	4b81      	ldr	r3, [pc, #516]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a80      	ldr	r2, [pc, #512]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b6a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b6a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d013      	beq.n	800b6d6 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6ae:	f7fd f8e1 	bl	8008874 <HAL_GetTick>
 800b6b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b6b4:	e008      	b.n	800b6c8 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b6b6:	f7fd f8dd 	bl	8008874 <HAL_GetTick>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	1ad3      	subs	r3, r2, r3
 800b6c0:	2b64      	cmp	r3, #100	; 0x64
 800b6c2:	d901      	bls.n	800b6c8 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800b6c4:	2303      	movs	r3, #3
 800b6c6:	e1d0      	b.n	800ba6a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b6c8:	4b75      	ldr	r3, [pc, #468]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d0f0      	beq.n	800b6b6 <HAL_RCC_OscConfig+0xba>
 800b6d4:	e014      	b.n	800b700 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6d6:	f7fd f8cd 	bl	8008874 <HAL_GetTick>
 800b6da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b6dc:	e008      	b.n	800b6f0 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b6de:	f7fd f8c9 	bl	8008874 <HAL_GetTick>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	1ad3      	subs	r3, r2, r3
 800b6e8:	2b64      	cmp	r3, #100	; 0x64
 800b6ea:	d901      	bls.n	800b6f0 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800b6ec:	2303      	movs	r3, #3
 800b6ee:	e1bc      	b.n	800ba6a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b6f0:	4b6b      	ldr	r3, [pc, #428]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d1f0      	bne.n	800b6de <HAL_RCC_OscConfig+0xe2>
 800b6fc:	e000      	b.n	800b700 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b6fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f003 0302 	and.w	r3, r3, #2
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d063      	beq.n	800b7d4 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b70c:	4b64      	ldr	r3, [pc, #400]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	f003 030c 	and.w	r3, r3, #12
 800b714:	2b00      	cmp	r3, #0
 800b716:	d00b      	beq.n	800b730 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b718:	4b61      	ldr	r3, [pc, #388]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b720:	2b08      	cmp	r3, #8
 800b722:	d11c      	bne.n	800b75e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b724:	4b5e      	ldr	r3, [pc, #376]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d116      	bne.n	800b75e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b730:	4b5b      	ldr	r3, [pc, #364]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f003 0302 	and.w	r3, r3, #2
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d005      	beq.n	800b748 <HAL_RCC_OscConfig+0x14c>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	2b01      	cmp	r3, #1
 800b742:	d001      	beq.n	800b748 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800b744:	2301      	movs	r3, #1
 800b746:	e190      	b.n	800ba6a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b748:	4b55      	ldr	r3, [pc, #340]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	691b      	ldr	r3, [r3, #16]
 800b754:	00db      	lsls	r3, r3, #3
 800b756:	4952      	ldr	r1, [pc, #328]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b758:	4313      	orrs	r3, r2
 800b75a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b75c:	e03a      	b.n	800b7d4 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	68db      	ldr	r3, [r3, #12]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d020      	beq.n	800b7a8 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b766:	4b4f      	ldr	r3, [pc, #316]	; (800b8a4 <HAL_RCC_OscConfig+0x2a8>)
 800b768:	2201      	movs	r2, #1
 800b76a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b76c:	f7fd f882 	bl	8008874 <HAL_GetTick>
 800b770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b772:	e008      	b.n	800b786 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b774:	f7fd f87e 	bl	8008874 <HAL_GetTick>
 800b778:	4602      	mov	r2, r0
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	1ad3      	subs	r3, r2, r3
 800b77e:	2b02      	cmp	r3, #2
 800b780:	d901      	bls.n	800b786 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800b782:	2303      	movs	r3, #3
 800b784:	e171      	b.n	800ba6a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b786:	4b46      	ldr	r3, [pc, #280]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f003 0302 	and.w	r3, r3, #2
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d0f0      	beq.n	800b774 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b792:	4b43      	ldr	r3, [pc, #268]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	00db      	lsls	r3, r3, #3
 800b7a0:	493f      	ldr	r1, [pc, #252]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	600b      	str	r3, [r1, #0]
 800b7a6:	e015      	b.n	800b7d4 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b7a8:	4b3e      	ldr	r3, [pc, #248]	; (800b8a4 <HAL_RCC_OscConfig+0x2a8>)
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7ae:	f7fd f861 	bl	8008874 <HAL_GetTick>
 800b7b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b7b4:	e008      	b.n	800b7c8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b7b6:	f7fd f85d 	bl	8008874 <HAL_GetTick>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	1ad3      	subs	r3, r2, r3
 800b7c0:	2b02      	cmp	r3, #2
 800b7c2:	d901      	bls.n	800b7c8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800b7c4:	2303      	movs	r3, #3
 800b7c6:	e150      	b.n	800ba6a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b7c8:	4b35      	ldr	r3, [pc, #212]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f003 0302 	and.w	r3, r3, #2
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d1f0      	bne.n	800b7b6 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f003 0308 	and.w	r3, r3, #8
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d030      	beq.n	800b842 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	695b      	ldr	r3, [r3, #20]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d016      	beq.n	800b816 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b7e8:	4b2f      	ldr	r3, [pc, #188]	; (800b8a8 <HAL_RCC_OscConfig+0x2ac>)
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7ee:	f7fd f841 	bl	8008874 <HAL_GetTick>
 800b7f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b7f4:	e008      	b.n	800b808 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b7f6:	f7fd f83d 	bl	8008874 <HAL_GetTick>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	1ad3      	subs	r3, r2, r3
 800b800:	2b02      	cmp	r3, #2
 800b802:	d901      	bls.n	800b808 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800b804:	2303      	movs	r3, #3
 800b806:	e130      	b.n	800ba6a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b808:	4b25      	ldr	r3, [pc, #148]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b80a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b80c:	f003 0302 	and.w	r3, r3, #2
 800b810:	2b00      	cmp	r3, #0
 800b812:	d0f0      	beq.n	800b7f6 <HAL_RCC_OscConfig+0x1fa>
 800b814:	e015      	b.n	800b842 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b816:	4b24      	ldr	r3, [pc, #144]	; (800b8a8 <HAL_RCC_OscConfig+0x2ac>)
 800b818:	2200      	movs	r2, #0
 800b81a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b81c:	f7fd f82a 	bl	8008874 <HAL_GetTick>
 800b820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b822:	e008      	b.n	800b836 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b824:	f7fd f826 	bl	8008874 <HAL_GetTick>
 800b828:	4602      	mov	r2, r0
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	1ad3      	subs	r3, r2, r3
 800b82e:	2b02      	cmp	r3, #2
 800b830:	d901      	bls.n	800b836 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800b832:	2303      	movs	r3, #3
 800b834:	e119      	b.n	800ba6a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b836:	4b1a      	ldr	r3, [pc, #104]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b83a:	f003 0302 	and.w	r3, r3, #2
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d1f0      	bne.n	800b824 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f003 0304 	and.w	r3, r3, #4
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	f000 809f 	beq.w	800b98e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b850:	2300      	movs	r3, #0
 800b852:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b854:	4b12      	ldr	r3, [pc, #72]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d10f      	bne.n	800b880 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b860:	2300      	movs	r3, #0
 800b862:	60fb      	str	r3, [r7, #12]
 800b864:	4b0e      	ldr	r3, [pc, #56]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b868:	4a0d      	ldr	r2, [pc, #52]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b86a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b86e:	6413      	str	r3, [r2, #64]	; 0x40
 800b870:	4b0b      	ldr	r3, [pc, #44]	; (800b8a0 <HAL_RCC_OscConfig+0x2a4>)
 800b872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b878:	60fb      	str	r3, [r7, #12]
 800b87a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b87c:	2301      	movs	r3, #1
 800b87e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b880:	4b0a      	ldr	r3, [pc, #40]	; (800b8ac <HAL_RCC_OscConfig+0x2b0>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d120      	bne.n	800b8ce <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b88c:	4b07      	ldr	r3, [pc, #28]	; (800b8ac <HAL_RCC_OscConfig+0x2b0>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a06      	ldr	r2, [pc, #24]	; (800b8ac <HAL_RCC_OscConfig+0x2b0>)
 800b892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b896:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b898:	f7fc ffec 	bl	8008874 <HAL_GetTick>
 800b89c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b89e:	e010      	b.n	800b8c2 <HAL_RCC_OscConfig+0x2c6>
 800b8a0:	40023800 	.word	0x40023800
 800b8a4:	42470000 	.word	0x42470000
 800b8a8:	42470e80 	.word	0x42470e80
 800b8ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b8b0:	f7fc ffe0 	bl	8008874 <HAL_GetTick>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	1ad3      	subs	r3, r2, r3
 800b8ba:	2b02      	cmp	r3, #2
 800b8bc:	d901      	bls.n	800b8c2 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800b8be:	2303      	movs	r3, #3
 800b8c0:	e0d3      	b.n	800ba6a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b8c2:	4b6c      	ldr	r3, [pc, #432]	; (800ba74 <HAL_RCC_OscConfig+0x478>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d0f0      	beq.n	800b8b0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	689b      	ldr	r3, [r3, #8]
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d106      	bne.n	800b8e4 <HAL_RCC_OscConfig+0x2e8>
 800b8d6:	4b68      	ldr	r3, [pc, #416]	; (800ba78 <HAL_RCC_OscConfig+0x47c>)
 800b8d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8da:	4a67      	ldr	r2, [pc, #412]	; (800ba78 <HAL_RCC_OscConfig+0x47c>)
 800b8dc:	f043 0301 	orr.w	r3, r3, #1
 800b8e0:	6713      	str	r3, [r2, #112]	; 0x70
 800b8e2:	e01c      	b.n	800b91e <HAL_RCC_OscConfig+0x322>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	2b05      	cmp	r3, #5
 800b8ea:	d10c      	bne.n	800b906 <HAL_RCC_OscConfig+0x30a>
 800b8ec:	4b62      	ldr	r3, [pc, #392]	; (800ba78 <HAL_RCC_OscConfig+0x47c>)
 800b8ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8f0:	4a61      	ldr	r2, [pc, #388]	; (800ba78 <HAL_RCC_OscConfig+0x47c>)
 800b8f2:	f043 0304 	orr.w	r3, r3, #4
 800b8f6:	6713      	str	r3, [r2, #112]	; 0x70
 800b8f8:	4b5f      	ldr	r3, [pc, #380]	; (800ba78 <HAL_RCC_OscConfig+0x47c>)
 800b8fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8fc:	4a5e      	ldr	r2, [pc, #376]	; (800ba78 <HAL_RCC_OscConfig+0x47c>)
 800b8fe:	f043 0301 	orr.w	r3, r3, #1
 800b902:	6713      	str	r3, [r2, #112]	; 0x70
 800b904:	e00b      	b.n	800b91e <HAL_RCC_OscConfig+0x322>
 800b906:	4b5c      	ldr	r3, [pc, #368]	; (800ba78 <HAL_RCC_OscConfig+0x47c>)
 800b908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b90a:	4a5b      	ldr	r2, [pc, #364]	; (800ba78 <HAL_RCC_OscConfig+0x47c>)
 800b90c:	f023 0301 	bic.w	r3, r3, #1
 800b910:	6713      	str	r3, [r2, #112]	; 0x70
 800b912:	4b59      	ldr	r3, [pc, #356]	; (800ba78 <HAL_RCC_OscConfig+0x47c>)
 800b914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b916:	4a58      	ldr	r2, [pc, #352]	; (800ba78 <HAL_RCC_OscConfig+0x47c>)
 800b918:	f023 0304 	bic.w	r3, r3, #4
 800b91c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d015      	beq.n	800b952 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b926:	f7fc ffa5 	bl	8008874 <HAL_GetTick>
 800b92a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b92c:	e00a      	b.n	800b944 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b92e:	f7fc ffa1 	bl	8008874 <HAL_GetTick>
 800b932:	4602      	mov	r2, r0
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	1ad3      	subs	r3, r2, r3
 800b938:	f241 3288 	movw	r2, #5000	; 0x1388
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d901      	bls.n	800b944 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800b940:	2303      	movs	r3, #3
 800b942:	e092      	b.n	800ba6a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b944:	4b4c      	ldr	r3, [pc, #304]	; (800ba78 <HAL_RCC_OscConfig+0x47c>)
 800b946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b948:	f003 0302 	and.w	r3, r3, #2
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d0ee      	beq.n	800b92e <HAL_RCC_OscConfig+0x332>
 800b950:	e014      	b.n	800b97c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b952:	f7fc ff8f 	bl	8008874 <HAL_GetTick>
 800b956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b958:	e00a      	b.n	800b970 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b95a:	f7fc ff8b 	bl	8008874 <HAL_GetTick>
 800b95e:	4602      	mov	r2, r0
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	1ad3      	subs	r3, r2, r3
 800b964:	f241 3288 	movw	r2, #5000	; 0x1388
 800b968:	4293      	cmp	r3, r2
 800b96a:	d901      	bls.n	800b970 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800b96c:	2303      	movs	r3, #3
 800b96e:	e07c      	b.n	800ba6a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b970:	4b41      	ldr	r3, [pc, #260]	; (800ba78 <HAL_RCC_OscConfig+0x47c>)
 800b972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b974:	f003 0302 	and.w	r3, r3, #2
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d1ee      	bne.n	800b95a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b97c:	7dfb      	ldrb	r3, [r7, #23]
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d105      	bne.n	800b98e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b982:	4b3d      	ldr	r3, [pc, #244]	; (800ba78 <HAL_RCC_OscConfig+0x47c>)
 800b984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b986:	4a3c      	ldr	r2, [pc, #240]	; (800ba78 <HAL_RCC_OscConfig+0x47c>)
 800b988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b98c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	699b      	ldr	r3, [r3, #24]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d068      	beq.n	800ba68 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b996:	4b38      	ldr	r3, [pc, #224]	; (800ba78 <HAL_RCC_OscConfig+0x47c>)
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	f003 030c 	and.w	r3, r3, #12
 800b99e:	2b08      	cmp	r3, #8
 800b9a0:	d060      	beq.n	800ba64 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	699b      	ldr	r3, [r3, #24]
 800b9a6:	2b02      	cmp	r3, #2
 800b9a8:	d145      	bne.n	800ba36 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b9aa:	4b34      	ldr	r3, [pc, #208]	; (800ba7c <HAL_RCC_OscConfig+0x480>)
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9b0:	f7fc ff60 	bl	8008874 <HAL_GetTick>
 800b9b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b9b6:	e008      	b.n	800b9ca <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b9b8:	f7fc ff5c 	bl	8008874 <HAL_GetTick>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	1ad3      	subs	r3, r2, r3
 800b9c2:	2b02      	cmp	r3, #2
 800b9c4:	d901      	bls.n	800b9ca <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800b9c6:	2303      	movs	r3, #3
 800b9c8:	e04f      	b.n	800ba6a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b9ca:	4b2b      	ldr	r3, [pc, #172]	; (800ba78 <HAL_RCC_OscConfig+0x47c>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d1f0      	bne.n	800b9b8 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	69da      	ldr	r2, [r3, #28]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6a1b      	ldr	r3, [r3, #32]
 800b9de:	431a      	orrs	r2, r3
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e4:	019b      	lsls	r3, r3, #6
 800b9e6:	431a      	orrs	r2, r3
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ec:	085b      	lsrs	r3, r3, #1
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	041b      	lsls	r3, r3, #16
 800b9f2:	431a      	orrs	r2, r3
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f8:	061b      	lsls	r3, r3, #24
 800b9fa:	431a      	orrs	r2, r3
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba00:	071b      	lsls	r3, r3, #28
 800ba02:	491d      	ldr	r1, [pc, #116]	; (800ba78 <HAL_RCC_OscConfig+0x47c>)
 800ba04:	4313      	orrs	r3, r2
 800ba06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ba08:	4b1c      	ldr	r3, [pc, #112]	; (800ba7c <HAL_RCC_OscConfig+0x480>)
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba0e:	f7fc ff31 	bl	8008874 <HAL_GetTick>
 800ba12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ba14:	e008      	b.n	800ba28 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ba16:	f7fc ff2d 	bl	8008874 <HAL_GetTick>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	1ad3      	subs	r3, r2, r3
 800ba20:	2b02      	cmp	r3, #2
 800ba22:	d901      	bls.n	800ba28 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800ba24:	2303      	movs	r3, #3
 800ba26:	e020      	b.n	800ba6a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ba28:	4b13      	ldr	r3, [pc, #76]	; (800ba78 <HAL_RCC_OscConfig+0x47c>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d0f0      	beq.n	800ba16 <HAL_RCC_OscConfig+0x41a>
 800ba34:	e018      	b.n	800ba68 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ba36:	4b11      	ldr	r3, [pc, #68]	; (800ba7c <HAL_RCC_OscConfig+0x480>)
 800ba38:	2200      	movs	r2, #0
 800ba3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba3c:	f7fc ff1a 	bl	8008874 <HAL_GetTick>
 800ba40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ba42:	e008      	b.n	800ba56 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ba44:	f7fc ff16 	bl	8008874 <HAL_GetTick>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	1ad3      	subs	r3, r2, r3
 800ba4e:	2b02      	cmp	r3, #2
 800ba50:	d901      	bls.n	800ba56 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800ba52:	2303      	movs	r3, #3
 800ba54:	e009      	b.n	800ba6a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ba56:	4b08      	ldr	r3, [pc, #32]	; (800ba78 <HAL_RCC_OscConfig+0x47c>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d1f0      	bne.n	800ba44 <HAL_RCC_OscConfig+0x448>
 800ba62:	e001      	b.n	800ba68 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800ba64:	2301      	movs	r3, #1
 800ba66:	e000      	b.n	800ba6a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3718      	adds	r7, #24
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	40007000 	.word	0x40007000
 800ba78:	40023800 	.word	0x40023800
 800ba7c:	42470060 	.word	0x42470060

0800ba80 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d101      	bne.n	800ba92 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e022      	b.n	800bad8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ba98:	b2db      	uxtb	r3, r3
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d105      	bne.n	800baaa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2200      	movs	r2, #0
 800baa2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f7fa fdd7 	bl	8006658 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2203      	movs	r2, #3
 800baae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 f814 	bl	800bae0 <HAL_SD_InitCard>
 800bab8:	4603      	mov	r3, r0
 800baba:	2b00      	cmp	r3, #0
 800babc:	d001      	beq.n	800bac2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800babe:	2301      	movs	r3, #1
 800bac0:	e00a      	b.n	800bad8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2201      	movs	r2, #1
 800bad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bad6:	2300      	movs	r3, #0
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3708      	adds	r7, #8
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bae0:	b5b0      	push	{r4, r5, r7, lr}
 800bae2:	b08e      	sub	sp, #56	; 0x38
 800bae4:	af04      	add	r7, sp, #16
 800bae6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800bae8:	2300      	movs	r3, #0
 800baea:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800baec:	2300      	movs	r3, #0
 800baee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800baf0:	2300      	movs	r3, #0
 800baf2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800baf4:	2300      	movs	r3, #0
 800baf6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800baf8:	2300      	movs	r3, #0
 800bafa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800bafc:	2376      	movs	r3, #118	; 0x76
 800bafe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681d      	ldr	r5, [r3, #0]
 800bb04:	466c      	mov	r4, sp
 800bb06:	f107 0314 	add.w	r3, r7, #20
 800bb0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bb0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bb12:	f107 0308 	add.w	r3, r7, #8
 800bb16:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bb18:	4628      	mov	r0, r5
 800bb1a:	f003 fa87 	bl	800f02c <SDIO_Init>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800bb24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d001      	beq.n	800bb30 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	e031      	b.n	800bb94 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800bb30:	4b1a      	ldr	r3, [pc, #104]	; (800bb9c <HAL_SD_InitCard+0xbc>)
 800bb32:	2200      	movs	r2, #0
 800bb34:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f003 fabf 	bl	800f0be <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800bb40:	4b16      	ldr	r3, [pc, #88]	; (800bb9c <HAL_SD_InitCard+0xbc>)
 800bb42:	2201      	movs	r2, #1
 800bb44:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f000 ffc6 	bl	800cad8 <SD_PowerON>
 800bb4c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb4e:	6a3b      	ldr	r3, [r7, #32]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d00b      	beq.n	800bb6c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2201      	movs	r2, #1
 800bb58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb60:	6a3b      	ldr	r3, [r7, #32]
 800bb62:	431a      	orrs	r2, r3
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e013      	b.n	800bb94 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 fee5 	bl	800c93c <SD_InitCard>
 800bb72:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb74:	6a3b      	ldr	r3, [r7, #32]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d00b      	beq.n	800bb92 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb86:	6a3b      	ldr	r3, [r7, #32]
 800bb88:	431a      	orrs	r2, r3
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	e000      	b.n	800bb94 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800bb92:	2300      	movs	r3, #0
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3728      	adds	r7, #40	; 0x28
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bdb0      	pop	{r4, r5, r7, pc}
 800bb9c:	422580a0 	.word	0x422580a0

0800bba0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b08c      	sub	sp, #48	; 0x30
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	60b9      	str	r1, [r7, #8]
 800bbaa:	607a      	str	r2, [r7, #4]
 800bbac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d107      	bne.n	800bbc8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbbc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	e0c7      	b.n	800bd58 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	f040 80c0 	bne.w	800bd56 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bbdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	441a      	add	r2, r3
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d907      	bls.n	800bbfa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e0ae      	b.n	800bd58 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2203      	movs	r2, #3
 800bbfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2200      	movs	r2, #0
 800bc08:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800bc18:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc1e:	4a50      	ldr	r2, [pc, #320]	; (800bd60 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800bc20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc26:	4a4f      	ldr	r2, [pc, #316]	; (800bd64 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800bc28:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc2e:	2200      	movs	r2, #0
 800bc30:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	3380      	adds	r3, #128	; 0x80
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	025b      	lsls	r3, r3, #9
 800bc44:	089b      	lsrs	r3, r3, #2
 800bc46:	f7fd fc07 	bl	8009458 <HAL_DMA_Start_IT>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d017      	beq.n	800bc80 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800bc5e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4a40      	ldr	r2, [pc, #256]	; (800bd68 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800bc66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2201      	movs	r2, #1
 800bc78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	e06b      	b.n	800bd58 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800bc80:	4b3a      	ldr	r3, [pc, #232]	; (800bd6c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800bc82:	2201      	movs	r2, #1
 800bc84:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	d002      	beq.n	800bc94 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800bc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc90:	025b      	lsls	r3, r3, #9
 800bc92:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f003 faa1 	bl	800f1e4 <SDMMC_CmdBlockLength>
 800bca2:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800bca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00f      	beq.n	800bcca <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4a2e      	ldr	r2, [pc, #184]	; (800bd68 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800bcb0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb8:	431a      	orrs	r2, r3
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e046      	b.n	800bd58 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bcca:	f04f 33ff 	mov.w	r3, #4294967295
 800bcce:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	025b      	lsls	r3, r3, #9
 800bcd4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800bcd6:	2390      	movs	r3, #144	; 0x90
 800bcd8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800bcda:	2302      	movs	r3, #2
 800bcdc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800bcde:	2300      	movs	r3, #0
 800bce0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800bce2:	2301      	movs	r3, #1
 800bce4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f107 0210 	add.w	r2, r7, #16
 800bcee:	4611      	mov	r1, r2
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f003 fa4b 	bl	800f18c <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d90a      	bls.n	800bd12 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2282      	movs	r2, #130	; 0x82
 800bd00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f003 faaf 	bl	800f26c <SDMMC_CmdReadMultiBlock>
 800bd0e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800bd10:	e009      	b.n	800bd26 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2281      	movs	r2, #129	; 0x81
 800bd16:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f003 fa82 	bl	800f228 <SDMMC_CmdReadSingleBlock>
 800bd24:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800bd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d012      	beq.n	800bd52 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4a0d      	ldr	r2, [pc, #52]	; (800bd68 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800bd32:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd3a:	431a      	orrs	r2, r3
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2201      	movs	r2, #1
 800bd44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	e002      	b.n	800bd58 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800bd52:	2300      	movs	r3, #0
 800bd54:	e000      	b.n	800bd58 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800bd56:	2302      	movs	r3, #2
  }
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3730      	adds	r7, #48	; 0x30
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	0800c74b 	.word	0x0800c74b
 800bd64:	0800c7bd 	.word	0x0800c7bd
 800bd68:	004005ff 	.word	0x004005ff
 800bd6c:	4225858c 	.word	0x4225858c

0800bd70 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b08c      	sub	sp, #48	; 0x30
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	60b9      	str	r1, [r7, #8]
 800bd7a:	607a      	str	r2, [r7, #4]
 800bd7c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d107      	bne.n	800bd98 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd8c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bd94:	2301      	movs	r3, #1
 800bd96:	e0ca      	b.n	800bf2e <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	f040 80c3 	bne.w	800bf2c <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bdac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	441a      	add	r2, r3
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d907      	bls.n	800bdca <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdbe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e0b1      	b.n	800bf2e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2203      	movs	r2, #3
 800bdce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f042 021a 	orr.w	r2, r2, #26
 800bde8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdee:	4a52      	ldr	r2, [pc, #328]	; (800bf38 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800bdf0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdf6:	4a51      	ldr	r2, [pc, #324]	; (800bf3c <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800bdf8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdfe:	2200      	movs	r2, #0
 800be00:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be06:	2b01      	cmp	r3, #1
 800be08:	d002      	beq.n	800be10 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800be0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0c:	025b      	lsls	r3, r3, #9
 800be0e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f44f 7100 	mov.w	r1, #512	; 0x200
 800be18:	4618      	mov	r0, r3
 800be1a:	f003 f9e3 	bl	800f1e4 <SDMMC_CmdBlockLength>
 800be1e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800be20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be22:	2b00      	cmp	r3, #0
 800be24:	d00f      	beq.n	800be46 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4a45      	ldr	r2, [pc, #276]	; (800bf40 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800be2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be34:	431a      	orrs	r2, r3
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2201      	movs	r2, #1
 800be3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800be42:	2301      	movs	r3, #1
 800be44:	e073      	b.n	800bf2e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d90a      	bls.n	800be62 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	22a0      	movs	r2, #160	; 0xa0
 800be50:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be58:	4618      	mov	r0, r3
 800be5a:	f003 fa4b 	bl	800f2f4 <SDMMC_CmdWriteMultiBlock>
 800be5e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800be60:	e009      	b.n	800be76 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2290      	movs	r2, #144	; 0x90
 800be66:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be6e:	4618      	mov	r0, r3
 800be70:	f003 fa1e 	bl	800f2b0 <SDMMC_CmdWriteSingleBlock>
 800be74:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800be76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d012      	beq.n	800bea2 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a2f      	ldr	r2, [pc, #188]	; (800bf40 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800be82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be8a:	431a      	orrs	r2, r3
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2201      	movs	r2, #1
 800be94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2200      	movs	r2, #0
 800be9c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800be9e:	2301      	movs	r3, #1
 800bea0:	e045      	b.n	800bf2e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800bea2:	4b28      	ldr	r3, [pc, #160]	; (800bf44 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800bea4:	2201      	movs	r2, #1
 800bea6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800beac:	68b9      	ldr	r1, [r7, #8]
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	3380      	adds	r3, #128	; 0x80
 800beb4:	461a      	mov	r2, r3
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	025b      	lsls	r3, r3, #9
 800beba:	089b      	lsrs	r3, r3, #2
 800bebc:	f7fd facc 	bl	8009458 <HAL_DMA_Start_IT>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d01a      	beq.n	800befc <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f022 021a 	bic.w	r2, r2, #26
 800bed4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	4a19      	ldr	r2, [pc, #100]	; (800bf40 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800bedc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bee2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2201      	movs	r2, #1
 800beee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2200      	movs	r2, #0
 800bef6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bef8:	2301      	movs	r3, #1
 800befa:	e018      	b.n	800bf2e <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800befc:	f04f 33ff 	mov.w	r3, #4294967295
 800bf00:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	025b      	lsls	r3, r3, #9
 800bf06:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800bf08:	2390      	movs	r3, #144	; 0x90
 800bf0a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800bf10:	2300      	movs	r3, #0
 800bf12:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800bf14:	2301      	movs	r3, #1
 800bf16:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f107 0210 	add.w	r2, r7, #16
 800bf20:	4611      	mov	r1, r2
 800bf22:	4618      	mov	r0, r3
 800bf24:	f003 f932 	bl	800f18c <SDIO_ConfigData>

      return HAL_OK;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	e000      	b.n	800bf2e <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800bf2c:	2302      	movs	r3, #2
  }
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3730      	adds	r7, #48	; 0x30
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	0800c721 	.word	0x0800c721
 800bf3c:	0800c7bd 	.word	0x0800c7bd
 800bf40:	004005ff 	.word	0x004005ff
 800bf44:	4225858c 	.word	0x4225858c

0800bf48 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf54:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d008      	beq.n	800bf76 <HAL_SD_IRQHandler+0x2e>
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f003 0308 	and.w	r3, r3, #8
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d003      	beq.n	800bf76 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 ffc8 	bl	800cf04 <SD_Read_IT>
 800bf74:	e155      	b.n	800c222 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f000 808f 	beq.w	800c0a4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bf8e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	6812      	ldr	r2, [r2, #0]
 800bf9a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800bf9e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800bfa2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f022 0201 	bic.w	r2, r2, #1
 800bfb2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f003 0308 	and.w	r3, r3, #8
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d039      	beq.n	800c032 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f003 0302 	and.w	r3, r3, #2
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d104      	bne.n	800bfd2 <HAL_SD_IRQHandler+0x8a>
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f003 0320 	and.w	r3, r3, #32
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d011      	beq.n	800bff6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f003 f9ae 	bl	800f338 <SDMMC_CmdStopTransfer>
 800bfdc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d008      	beq.n	800bff6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	431a      	orrs	r2, r3
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f000 f91f 	bl	800c234 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f240 523a 	movw	r2, #1338	; 0x53a
 800bffe:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2201      	movs	r2, #1
 800c004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f003 0301 	and.w	r3, r3, #1
 800c014:	2b00      	cmp	r3, #0
 800c016:	d104      	bne.n	800c022 <HAL_SD_IRQHandler+0xda>
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f003 0302 	and.w	r3, r3, #2
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d003      	beq.n	800c02a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f003 fe04 	bl	800fc30 <HAL_SD_RxCpltCallback>
 800c028:	e0fb      	b.n	800c222 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f003 fdf6 	bl	800fc1c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c030:	e0f7      	b.n	800c222 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c038:	2b00      	cmp	r3, #0
 800c03a:	f000 80f2 	beq.w	800c222 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f003 0320 	and.w	r3, r3, #32
 800c044:	2b00      	cmp	r3, #0
 800c046:	d011      	beq.n	800c06c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4618      	mov	r0, r3
 800c04e:	f003 f973 	bl	800f338 <SDMMC_CmdStopTransfer>
 800c052:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d008      	beq.n	800c06c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	431a      	orrs	r2, r3
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 f8e4 	bl	800c234 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f003 0301 	and.w	r3, r3, #1
 800c072:	2b00      	cmp	r3, #0
 800c074:	f040 80d5 	bne.w	800c222 <HAL_SD_IRQHandler+0x2da>
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f003 0302 	and.w	r3, r3, #2
 800c07e:	2b00      	cmp	r3, #0
 800c080:	f040 80cf 	bne.w	800c222 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f022 0208 	bic.w	r2, r2, #8
 800c092:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2201      	movs	r2, #1
 800c098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f003 fdbd 	bl	800fc1c <HAL_SD_TxCpltCallback>
}
 800c0a2:	e0be      	b.n	800c222 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d008      	beq.n	800c0c4 <HAL_SD_IRQHandler+0x17c>
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	f003 0308 	and.w	r3, r3, #8
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d003      	beq.n	800c0c4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 ff72 	bl	800cfa6 <SD_Write_IT>
 800c0c2:	e0ae      	b.n	800c222 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0ca:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	f000 80a7 	beq.w	800c222 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0da:	f003 0302 	and.w	r3, r3, #2
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d005      	beq.n	800c0ee <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0e6:	f043 0202 	orr.w	r2, r3, #2
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0f4:	f003 0308 	and.w	r3, r3, #8
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d005      	beq.n	800c108 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c100:	f043 0208 	orr.w	r2, r3, #8
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c10e:	f003 0320 	and.w	r3, r3, #32
 800c112:	2b00      	cmp	r3, #0
 800c114:	d005      	beq.n	800c122 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c11a:	f043 0220 	orr.w	r2, r3, #32
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c128:	f003 0310 	and.w	r3, r3, #16
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d005      	beq.n	800c13c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c134:	f043 0210 	orr.w	r2, r3, #16
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f240 523a 	movw	r2, #1338	; 0x53a
 800c144:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c154:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	4618      	mov	r0, r3
 800c15c:	f003 f8ec 	bl	800f338 <SDMMC_CmdStopTransfer>
 800c160:	4602      	mov	r2, r0
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c166:	431a      	orrs	r2, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f003 0308 	and.w	r3, r3, #8
 800c172:	2b00      	cmp	r3, #0
 800c174:	d00a      	beq.n	800c18c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2201      	movs	r2, #1
 800c17a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2200      	movs	r2, #0
 800c182:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f000 f855 	bl	800c234 <HAL_SD_ErrorCallback>
}
 800c18a:	e04a      	b.n	800c222 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c192:	2b00      	cmp	r3, #0
 800c194:	d045      	beq.n	800c222 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f003 0310 	and.w	r3, r3, #16
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d104      	bne.n	800c1aa <HAL_SD_IRQHandler+0x262>
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f003 0320 	and.w	r3, r3, #32
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d011      	beq.n	800c1ce <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1ae:	4a1f      	ldr	r2, [pc, #124]	; (800c22c <HAL_SD_IRQHandler+0x2e4>)
 800c1b0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7fd f9a6 	bl	8009508 <HAL_DMA_Abort_IT>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d02f      	beq.n	800c222 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f000 fb4a 	bl	800c860 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c1cc:	e029      	b.n	800c222 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f003 0301 	and.w	r3, r3, #1
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d104      	bne.n	800c1e2 <HAL_SD_IRQHandler+0x29a>
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f003 0302 	and.w	r3, r3, #2
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d011      	beq.n	800c206 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1e6:	4a12      	ldr	r2, [pc, #72]	; (800c230 <HAL_SD_IRQHandler+0x2e8>)
 800c1e8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7fd f98a 	bl	8009508 <HAL_DMA_Abort_IT>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d013      	beq.n	800c222 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1fe:	4618      	mov	r0, r3
 800c200:	f000 fb65 	bl	800c8ce <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c204:	e00d      	b.n	800c222 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2201      	movs	r2, #1
 800c210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2200      	movs	r2, #0
 800c218:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f003 fcf4 	bl	800fc08 <HAL_SD_AbortCallback>
}
 800c220:	e7ff      	b.n	800c222 <HAL_SD_IRQHandler+0x2da>
 800c222:	bf00      	nop
 800c224:	3710      	adds	r7, #16
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	0800c861 	.word	0x0800c861
 800c230:	0800c8cf 	.word	0x0800c8cf

0800c234 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c23c:	bf00      	nop
 800c23e:	370c      	adds	r7, #12
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr

0800c248 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c256:	0f9b      	lsrs	r3, r3, #30
 800c258:	b2da      	uxtb	r2, r3
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c262:	0e9b      	lsrs	r3, r3, #26
 800c264:	b2db      	uxtb	r3, r3
 800c266:	f003 030f 	and.w	r3, r3, #15
 800c26a:	b2da      	uxtb	r2, r3
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c274:	0e1b      	lsrs	r3, r3, #24
 800c276:	b2db      	uxtb	r3, r3
 800c278:	f003 0303 	and.w	r3, r3, #3
 800c27c:	b2da      	uxtb	r2, r3
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c286:	0c1b      	lsrs	r3, r3, #16
 800c288:	b2da      	uxtb	r2, r3
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c292:	0a1b      	lsrs	r3, r3, #8
 800c294:	b2da      	uxtb	r2, r3
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c29e:	b2da      	uxtb	r2, r3
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2a8:	0d1b      	lsrs	r3, r3, #20
 800c2aa:	b29a      	uxth	r2, r3
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2b4:	0c1b      	lsrs	r3, r3, #16
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	f003 030f 	and.w	r3, r3, #15
 800c2bc:	b2da      	uxtb	r2, r3
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2c6:	0bdb      	lsrs	r3, r3, #15
 800c2c8:	b2db      	uxtb	r3, r3
 800c2ca:	f003 0301 	and.w	r3, r3, #1
 800c2ce:	b2da      	uxtb	r2, r3
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2d8:	0b9b      	lsrs	r3, r3, #14
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	f003 0301 	and.w	r3, r3, #1
 800c2e0:	b2da      	uxtb	r2, r3
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2ea:	0b5b      	lsrs	r3, r3, #13
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	f003 0301 	and.w	r3, r3, #1
 800c2f2:	b2da      	uxtb	r2, r3
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2fc:	0b1b      	lsrs	r3, r3, #12
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	f003 0301 	and.w	r3, r3, #1
 800c304:	b2da      	uxtb	r2, r3
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	2200      	movs	r2, #0
 800c30e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c314:	2b00      	cmp	r3, #0
 800c316:	d163      	bne.n	800c3e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c31c:	009a      	lsls	r2, r3, #2
 800c31e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c322:	4013      	ands	r3, r2
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800c328:	0f92      	lsrs	r2, r2, #30
 800c32a:	431a      	orrs	r2, r3
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c334:	0edb      	lsrs	r3, r3, #27
 800c336:	b2db      	uxtb	r3, r3
 800c338:	f003 0307 	and.w	r3, r3, #7
 800c33c:	b2da      	uxtb	r2, r3
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c346:	0e1b      	lsrs	r3, r3, #24
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	f003 0307 	and.w	r3, r3, #7
 800c34e:	b2da      	uxtb	r2, r3
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c358:	0d5b      	lsrs	r3, r3, #21
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	f003 0307 	and.w	r3, r3, #7
 800c360:	b2da      	uxtb	r2, r3
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c36a:	0c9b      	lsrs	r3, r3, #18
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	f003 0307 	and.w	r3, r3, #7
 800c372:	b2da      	uxtb	r2, r3
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c37c:	0bdb      	lsrs	r3, r3, #15
 800c37e:	b2db      	uxtb	r3, r3
 800c380:	f003 0307 	and.w	r3, r3, #7
 800c384:	b2da      	uxtb	r2, r3
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	691b      	ldr	r3, [r3, #16]
 800c38e:	1c5a      	adds	r2, r3, #1
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	7e1b      	ldrb	r3, [r3, #24]
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	f003 0307 	and.w	r3, r3, #7
 800c39e:	3302      	adds	r3, #2
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	fa02 f303 	lsl.w	r3, r2, r3
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800c3aa:	fb02 f203 	mul.w	r2, r2, r3
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	7a1b      	ldrb	r3, [r3, #8]
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	f003 030f 	and.w	r3, r3, #15
 800c3bc:	2201      	movs	r2, #1
 800c3be:	409a      	lsls	r2, r3
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800c3cc:	0a52      	lsrs	r2, r2, #9
 800c3ce:	fb02 f203 	mul.w	r2, r2, r3
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c3dc:	661a      	str	r2, [r3, #96]	; 0x60
 800c3de:	e031      	b.n	800c444 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d11d      	bne.n	800c424 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3ec:	041b      	lsls	r3, r3, #16
 800c3ee:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3f6:	0c1b      	lsrs	r3, r3, #16
 800c3f8:	431a      	orrs	r2, r3
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	691b      	ldr	r3, [r3, #16]
 800c402:	3301      	adds	r3, #1
 800c404:	029a      	lsls	r2, r3, #10
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c418:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	661a      	str	r2, [r3, #96]	; 0x60
 800c422:	e00f      	b.n	800c444 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4a58      	ldr	r2, [pc, #352]	; (800c58c <HAL_SD_GetCardCSD+0x344>)
 800c42a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c430:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2201      	movs	r2, #1
 800c43c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c440:	2301      	movs	r3, #1
 800c442:	e09d      	b.n	800c580 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c448:	0b9b      	lsrs	r3, r3, #14
 800c44a:	b2db      	uxtb	r3, r3
 800c44c:	f003 0301 	and.w	r3, r3, #1
 800c450:	b2da      	uxtb	r2, r3
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c45a:	09db      	lsrs	r3, r3, #7
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c462:	b2da      	uxtb	r2, r3
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c472:	b2da      	uxtb	r2, r3
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c47c:	0fdb      	lsrs	r3, r3, #31
 800c47e:	b2da      	uxtb	r2, r3
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c488:	0f5b      	lsrs	r3, r3, #29
 800c48a:	b2db      	uxtb	r3, r3
 800c48c:	f003 0303 	and.w	r3, r3, #3
 800c490:	b2da      	uxtb	r2, r3
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c49a:	0e9b      	lsrs	r3, r3, #26
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	f003 0307 	and.w	r3, r3, #7
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4ac:	0d9b      	lsrs	r3, r3, #22
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	f003 030f 	and.w	r3, r3, #15
 800c4b4:	b2da      	uxtb	r2, r3
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4be:	0d5b      	lsrs	r3, r3, #21
 800c4c0:	b2db      	uxtb	r3, r3
 800c4c2:	f003 0301 	and.w	r3, r3, #1
 800c4c6:	b2da      	uxtb	r2, r3
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4da:	0c1b      	lsrs	r3, r3, #16
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	f003 0301 	and.w	r3, r3, #1
 800c4e2:	b2da      	uxtb	r2, r3
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4ee:	0bdb      	lsrs	r3, r3, #15
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	f003 0301 	and.w	r3, r3, #1
 800c4f6:	b2da      	uxtb	r2, r3
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c502:	0b9b      	lsrs	r3, r3, #14
 800c504:	b2db      	uxtb	r3, r3
 800c506:	f003 0301 	and.w	r3, r3, #1
 800c50a:	b2da      	uxtb	r2, r3
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c516:	0b5b      	lsrs	r3, r3, #13
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	f003 0301 	and.w	r3, r3, #1
 800c51e:	b2da      	uxtb	r2, r3
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c52a:	0b1b      	lsrs	r3, r3, #12
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	f003 0301 	and.w	r3, r3, #1
 800c532:	b2da      	uxtb	r2, r3
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c53e:	0a9b      	lsrs	r3, r3, #10
 800c540:	b2db      	uxtb	r3, r3
 800c542:	f003 0303 	and.w	r3, r3, #3
 800c546:	b2da      	uxtb	r2, r3
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c552:	0a1b      	lsrs	r3, r3, #8
 800c554:	b2db      	uxtb	r3, r3
 800c556:	f003 0303 	and.w	r3, r3, #3
 800c55a:	b2da      	uxtb	r2, r3
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c566:	085b      	lsrs	r3, r3, #1
 800c568:	b2db      	uxtb	r3, r3
 800c56a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c56e:	b2da      	uxtb	r2, r3
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	2201      	movs	r2, #1
 800c57a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c57e:	2300      	movs	r3, #0
}
 800c580:	4618      	mov	r0, r3
 800c582:	370c      	adds	r7, #12
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr
 800c58c:	004005ff 	.word	0x004005ff

0800c590 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c590:	b480      	push	{r7}
 800c592:	b083      	sub	sp, #12
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c5da:	2300      	movs	r3, #0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	370c      	adds	r7, #12
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr

0800c5e8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c5e8:	b5b0      	push	{r4, r5, r7, lr}
 800c5ea:	b08e      	sub	sp, #56	; 0x38
 800c5ec:	af04      	add	r7, sp, #16
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2203      	movs	r2, #3
 800c5f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5fe:	2b03      	cmp	r3, #3
 800c600:	d02e      	beq.n	800c660 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c608:	d106      	bne.n	800c618 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c60e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	639a      	str	r2, [r3, #56]	; 0x38
 800c616:	e029      	b.n	800c66c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c61e:	d10a      	bne.n	800c636 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 fb0f 	bl	800cc44 <SD_WideBus_Enable>
 800c626:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62e:	431a      	orrs	r2, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	639a      	str	r2, [r3, #56]	; 0x38
 800c634:	e01a      	b.n	800c66c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d10a      	bne.n	800c652 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f000 fb4c 	bl	800ccda <SD_WideBus_Disable>
 800c642:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64a:	431a      	orrs	r2, r3
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	639a      	str	r2, [r3, #56]	; 0x38
 800c650:	e00c      	b.n	800c66c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c656:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	639a      	str	r2, [r3, #56]	; 0x38
 800c65e:	e005      	b.n	800c66c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c664:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c670:	2b00      	cmp	r3, #0
 800c672:	d009      	beq.n	800c688 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a18      	ldr	r2, [pc, #96]	; (800c6dc <HAL_SD_ConfigWideBusOperation+0xf4>)
 800c67a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2201      	movs	r2, #1
 800c680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c684:	2301      	movs	r3, #1
 800c686:	e024      	b.n	800c6d2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	689b      	ldr	r3, [r3, #8]
 800c692:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	68db      	ldr	r3, [r3, #12]
 800c698:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	695b      	ldr	r3, [r3, #20]
 800c6a2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	699b      	ldr	r3, [r3, #24]
 800c6a8:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681d      	ldr	r5, [r3, #0]
 800c6ae:	466c      	mov	r4, sp
 800c6b0:	f107 0318 	add.w	r3, r7, #24
 800c6b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c6b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c6bc:	f107 030c 	add.w	r3, r7, #12
 800c6c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c6c2:	4628      	mov	r0, r5
 800c6c4:	f002 fcb2 	bl	800f02c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c6d0:	2300      	movs	r3, #0
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3728      	adds	r7, #40	; 0x28
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bdb0      	pop	{r4, r5, r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	004005ff 	.word	0x004005ff

0800c6e0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b086      	sub	sp, #24
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c6ec:	f107 030c 	add.w	r3, r7, #12
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 fa7e 	bl	800cbf4 <SD_SendStatus>
 800c6f8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d005      	beq.n	800c70c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	431a      	orrs	r2, r3
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	0a5b      	lsrs	r3, r3, #9
 800c710:	f003 030f 	and.w	r3, r3, #15
 800c714:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c716:	693b      	ldr	r3, [r7, #16]
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3718      	adds	r7, #24
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c720:	b480      	push	{r7}
 800c722:	b085      	sub	sp, #20
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c72c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c73c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800c73e:	bf00      	nop
 800c740:	3714      	adds	r7, #20
 800c742:	46bd      	mov	sp, r7
 800c744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c748:	4770      	bx	lr

0800c74a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c74a:	b580      	push	{r7, lr}
 800c74c:	b084      	sub	sp, #16
 800c74e:	af00      	add	r7, sp, #0
 800c750:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c756:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c75c:	2b82      	cmp	r3, #130	; 0x82
 800c75e:	d111      	bne.n	800c784 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4618      	mov	r0, r3
 800c766:	f002 fde7 	bl	800f338 <SDMMC_CmdStopTransfer>
 800c76a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d008      	beq.n	800c784 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	431a      	orrs	r2, r3
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800c77e:	68f8      	ldr	r0, [r7, #12]
 800c780:	f7ff fd58 	bl	800c234 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f022 0208 	bic.w	r2, r2, #8
 800c792:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f240 523a 	movw	r2, #1338	; 0x53a
 800c79c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800c7ac:	68f8      	ldr	r0, [r7, #12]
 800c7ae:	f003 fa3f 	bl	800fc30 <HAL_SD_RxCpltCallback>
#endif
}
 800c7b2:	bf00      	nop
 800c7b4:	3710      	adds	r7, #16
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
	...

0800c7bc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b086      	sub	sp, #24
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7c8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f7fd f848 	bl	8009860 <HAL_DMA_GetError>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b02      	cmp	r3, #2
 800c7d4:	d03e      	beq.n	800c854 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7dc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7e4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	2b01      	cmp	r3, #1
 800c7ea:	d002      	beq.n	800c7f2 <SD_DMAError+0x36>
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	d12d      	bne.n	800c84e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4a19      	ldr	r2, [pc, #100]	; (800c85c <SD_DMAError+0xa0>)
 800c7f8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c808:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c80e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800c816:	6978      	ldr	r0, [r7, #20]
 800c818:	f7ff ff62 	bl	800c6e0 <HAL_SD_GetCardState>
 800c81c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	2b06      	cmp	r3, #6
 800c822:	d002      	beq.n	800c82a <SD_DMAError+0x6e>
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	2b05      	cmp	r3, #5
 800c828:	d10a      	bne.n	800c840 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4618      	mov	r0, r3
 800c830:	f002 fd82 	bl	800f338 <SDMMC_CmdStopTransfer>
 800c834:	4602      	mov	r2, r0
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c83a:	431a      	orrs	r2, r3
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	2201      	movs	r2, #1
 800c844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	2200      	movs	r2, #0
 800c84c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800c84e:	6978      	ldr	r0, [r7, #20]
 800c850:	f7ff fcf0 	bl	800c234 <HAL_SD_ErrorCallback>
#endif
  }
}
 800c854:	bf00      	nop
 800c856:	3718      	adds	r7, #24
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}
 800c85c:	004005ff 	.word	0x004005ff

0800c860 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b084      	sub	sp, #16
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c86c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f240 523a 	movw	r2, #1338	; 0x53a
 800c876:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800c878:	68f8      	ldr	r0, [r7, #12]
 800c87a:	f7ff ff31 	bl	800c6e0 <HAL_SD_GetCardState>
 800c87e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2201      	movs	r2, #1
 800c884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	2200      	movs	r2, #0
 800c88c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	2b06      	cmp	r3, #6
 800c892:	d002      	beq.n	800c89a <SD_DMATxAbort+0x3a>
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	2b05      	cmp	r3, #5
 800c898:	d10a      	bne.n	800c8b0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f002 fd4a 	bl	800f338 <SDMMC_CmdStopTransfer>
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8aa:	431a      	orrs	r2, r3
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d103      	bne.n	800c8c0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800c8b8:	68f8      	ldr	r0, [r7, #12]
 800c8ba:	f003 f9a5 	bl	800fc08 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800c8be:	e002      	b.n	800c8c6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800c8c0:	68f8      	ldr	r0, [r7, #12]
 800c8c2:	f7ff fcb7 	bl	800c234 <HAL_SD_ErrorCallback>
}
 800c8c6:	bf00      	nop
 800c8c8:	3710      	adds	r7, #16
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}

0800c8ce <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800c8ce:	b580      	push	{r7, lr}
 800c8d0:	b084      	sub	sp, #16
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8da:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f240 523a 	movw	r2, #1338	; 0x53a
 800c8e4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800c8e6:	68f8      	ldr	r0, [r7, #12]
 800c8e8:	f7ff fefa 	bl	800c6e0 <HAL_SD_GetCardState>
 800c8ec:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	2b06      	cmp	r3, #6
 800c900:	d002      	beq.n	800c908 <SD_DMARxAbort+0x3a>
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	2b05      	cmp	r3, #5
 800c906:	d10a      	bne.n	800c91e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4618      	mov	r0, r3
 800c90e:	f002 fd13 	bl	800f338 <SDMMC_CmdStopTransfer>
 800c912:	4602      	mov	r2, r0
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c918:	431a      	orrs	r2, r3
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c922:	2b00      	cmp	r3, #0
 800c924:	d103      	bne.n	800c92e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800c926:	68f8      	ldr	r0, [r7, #12]
 800c928:	f003 f96e 	bl	800fc08 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800c92c:	e002      	b.n	800c934 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800c92e:	68f8      	ldr	r0, [r7, #12]
 800c930:	f7ff fc80 	bl	800c234 <HAL_SD_ErrorCallback>
}
 800c934:	bf00      	nop
 800c936:	3710      	adds	r7, #16
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c93c:	b5b0      	push	{r4, r5, r7, lr}
 800c93e:	b094      	sub	sp, #80	; 0x50
 800c940:	af04      	add	r7, sp, #16
 800c942:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c944:	2301      	movs	r3, #1
 800c946:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4618      	mov	r0, r3
 800c94e:	f002 fbc5 	bl	800f0dc <SDIO_GetPowerState>
 800c952:	4603      	mov	r3, r0
 800c954:	2b00      	cmp	r3, #0
 800c956:	d102      	bne.n	800c95e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c958:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c95c:	e0b7      	b.n	800cace <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c962:	2b03      	cmp	r3, #3
 800c964:	d02f      	beq.n	800c9c6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4618      	mov	r0, r3
 800c96c:	f002 fdee 	bl	800f54c <SDMMC_CmdSendCID>
 800c970:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c974:	2b00      	cmp	r3, #0
 800c976:	d001      	beq.n	800c97c <SD_InitCard+0x40>
    {
      return errorstate;
 800c978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c97a:	e0a8      	b.n	800cace <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	2100      	movs	r1, #0
 800c982:	4618      	mov	r0, r3
 800c984:	f002 fbef 	bl	800f166 <SDIO_GetResponse>
 800c988:	4602      	mov	r2, r0
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	2104      	movs	r1, #4
 800c994:	4618      	mov	r0, r3
 800c996:	f002 fbe6 	bl	800f166 <SDIO_GetResponse>
 800c99a:	4602      	mov	r2, r0
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	2108      	movs	r1, #8
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f002 fbdd 	bl	800f166 <SDIO_GetResponse>
 800c9ac:	4602      	mov	r2, r0
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	210c      	movs	r1, #12
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f002 fbd4 	bl	800f166 <SDIO_GetResponse>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9ca:	2b03      	cmp	r3, #3
 800c9cc:	d00d      	beq.n	800c9ea <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f107 020e 	add.w	r2, r7, #14
 800c9d6:	4611      	mov	r1, r2
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f002 fdf4 	bl	800f5c6 <SDMMC_CmdSetRelAdd>
 800c9de:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c9e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d001      	beq.n	800c9ea <SD_InitCard+0xae>
    {
      return errorstate;
 800c9e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9e8:	e071      	b.n	800cace <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9ee:	2b03      	cmp	r3, #3
 800c9f0:	d036      	beq.n	800ca60 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c9f2:	89fb      	ldrh	r3, [r7, #14]
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681a      	ldr	r2, [r3, #0]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca02:	041b      	lsls	r3, r3, #16
 800ca04:	4619      	mov	r1, r3
 800ca06:	4610      	mov	r0, r2
 800ca08:	f002 fdbe 	bl	800f588 <SDMMC_CmdSendCSD>
 800ca0c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ca0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d001      	beq.n	800ca18 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ca14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca16:	e05a      	b.n	800cace <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	2100      	movs	r1, #0
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f002 fba1 	bl	800f166 <SDIO_GetResponse>
 800ca24:	4602      	mov	r2, r0
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	2104      	movs	r1, #4
 800ca30:	4618      	mov	r0, r3
 800ca32:	f002 fb98 	bl	800f166 <SDIO_GetResponse>
 800ca36:	4602      	mov	r2, r0
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	2108      	movs	r1, #8
 800ca42:	4618      	mov	r0, r3
 800ca44:	f002 fb8f 	bl	800f166 <SDIO_GetResponse>
 800ca48:	4602      	mov	r2, r0
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	210c      	movs	r1, #12
 800ca54:	4618      	mov	r0, r3
 800ca56:	f002 fb86 	bl	800f166 <SDIO_GetResponse>
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2104      	movs	r1, #4
 800ca66:	4618      	mov	r0, r3
 800ca68:	f002 fb7d 	bl	800f166 <SDIO_GetResponse>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	0d1a      	lsrs	r2, r3, #20
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ca74:	f107 0310 	add.w	r3, r7, #16
 800ca78:	4619      	mov	r1, r3
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f7ff fbe4 	bl	800c248 <HAL_SD_GetCardCSD>
 800ca80:	4603      	mov	r3, r0
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d002      	beq.n	800ca8c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ca86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ca8a:	e020      	b.n	800cace <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6819      	ldr	r1, [r3, #0]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca94:	041b      	lsls	r3, r3, #16
 800ca96:	f04f 0400 	mov.w	r4, #0
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	4623      	mov	r3, r4
 800ca9e:	4608      	mov	r0, r1
 800caa0:	f002 fc6c 	bl	800f37c <SDMMC_CmdSelDesel>
 800caa4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800caa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d001      	beq.n	800cab0 <SD_InitCard+0x174>
  {
    return errorstate;
 800caac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caae:	e00e      	b.n	800cace <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681d      	ldr	r5, [r3, #0]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	466c      	mov	r4, sp
 800cab8:	f103 0210 	add.w	r2, r3, #16
 800cabc:	ca07      	ldmia	r2, {r0, r1, r2}
 800cabe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cac2:	3304      	adds	r3, #4
 800cac4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cac6:	4628      	mov	r0, r5
 800cac8:	f002 fab0 	bl	800f02c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800cacc:	2300      	movs	r3, #0
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3740      	adds	r7, #64	; 0x40
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800cad8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b086      	sub	sp, #24
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cae0:	2300      	movs	r3, #0
 800cae2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800cae4:	2300      	movs	r3, #0
 800cae6:	617b      	str	r3, [r7, #20]
 800cae8:	2300      	movs	r3, #0
 800caea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4618      	mov	r0, r3
 800caf2:	f002 fc66 	bl	800f3c2 <SDMMC_CmdGoIdleState>
 800caf6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d001      	beq.n	800cb02 <SD_PowerON+0x2a>
  {
    return errorstate;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	e072      	b.n	800cbe8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	4618      	mov	r0, r3
 800cb08:	f002 fc79 	bl	800f3fe <SDMMC_CmdOperCond>
 800cb0c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d00d      	beq.n	800cb30 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2200      	movs	r2, #0
 800cb18:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f002 fc4f 	bl	800f3c2 <SDMMC_CmdGoIdleState>
 800cb24:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d004      	beq.n	800cb36 <SD_PowerON+0x5e>
    {
      return errorstate;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	e05b      	b.n	800cbe8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2201      	movs	r2, #1
 800cb34:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb3a:	2b01      	cmp	r3, #1
 800cb3c:	d137      	bne.n	800cbae <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	2100      	movs	r1, #0
 800cb44:	4618      	mov	r0, r3
 800cb46:	f002 fc79 	bl	800f43c <SDMMC_CmdAppCommand>
 800cb4a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d02d      	beq.n	800cbae <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cb52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cb56:	e047      	b.n	800cbe8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	2100      	movs	r1, #0
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f002 fc6c 	bl	800f43c <SDMMC_CmdAppCommand>
 800cb64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d001      	beq.n	800cb70 <SD_PowerON+0x98>
    {
      return errorstate;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	e03b      	b.n	800cbe8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	491e      	ldr	r1, [pc, #120]	; (800cbf0 <SD_PowerON+0x118>)
 800cb76:	4618      	mov	r0, r3
 800cb78:	f002 fc82 	bl	800f480 <SDMMC_CmdAppOperCommand>
 800cb7c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d002      	beq.n	800cb8a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cb84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cb88:	e02e      	b.n	800cbe8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2100      	movs	r1, #0
 800cb90:	4618      	mov	r0, r3
 800cb92:	f002 fae8 	bl	800f166 <SDIO_GetResponse>
 800cb96:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	0fdb      	lsrs	r3, r3, #31
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	d101      	bne.n	800cba4 <SD_PowerON+0xcc>
 800cba0:	2301      	movs	r3, #1
 800cba2:	e000      	b.n	800cba6 <SD_PowerON+0xce>
 800cba4:	2300      	movs	r3, #0
 800cba6:	613b      	str	r3, [r7, #16]

    count++;
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	3301      	adds	r3, #1
 800cbac:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d802      	bhi.n	800cbbe <SD_PowerON+0xe6>
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d0cc      	beq.n	800cb58 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d902      	bls.n	800cbce <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800cbc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cbcc:	e00c      	b.n	800cbe8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d003      	beq.n	800cbe0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2201      	movs	r2, #1
 800cbdc:	645a      	str	r2, [r3, #68]	; 0x44
 800cbde:	e002      	b.n	800cbe6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800cbe6:	2300      	movs	r3, #0
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3718      	adds	r7, #24
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}
 800cbf0:	c1100000 	.word	0xc1100000

0800cbf4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d102      	bne.n	800cc0a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800cc04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cc08:	e018      	b.n	800cc3c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc12:	041b      	lsls	r3, r3, #16
 800cc14:	4619      	mov	r1, r3
 800cc16:	4610      	mov	r0, r2
 800cc18:	f002 fcf6 	bl	800f608 <SDMMC_CmdSendStatus>
 800cc1c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d001      	beq.n	800cc28 <SD_SendStatus+0x34>
  {
    return errorstate;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	e009      	b.n	800cc3c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	2100      	movs	r1, #0
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f002 fa99 	bl	800f166 <SDIO_GetResponse>
 800cc34:	4602      	mov	r2, r0
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800cc3a:	2300      	movs	r3, #0
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3710      	adds	r7, #16
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b086      	sub	sp, #24
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	60fb      	str	r3, [r7, #12]
 800cc50:	2300      	movs	r3, #0
 800cc52:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	2100      	movs	r1, #0
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f002 fa83 	bl	800f166 <SDIO_GetResponse>
 800cc60:	4603      	mov	r3, r0
 800cc62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc6a:	d102      	bne.n	800cc72 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cc6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cc70:	e02f      	b.n	800ccd2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800cc72:	f107 030c 	add.w	r3, r7, #12
 800cc76:	4619      	mov	r1, r3
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 f879 	bl	800cd70 <SD_FindSCR>
 800cc7e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d001      	beq.n	800cc8a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	e023      	b.n	800ccd2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d01c      	beq.n	800ccce <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681a      	ldr	r2, [r3, #0]
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc9c:	041b      	lsls	r3, r3, #16
 800cc9e:	4619      	mov	r1, r3
 800cca0:	4610      	mov	r0, r2
 800cca2:	f002 fbcb 	bl	800f43c <SDMMC_CmdAppCommand>
 800cca6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d001      	beq.n	800ccb2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	e00f      	b.n	800ccd2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	2102      	movs	r1, #2
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f002 fc04 	bl	800f4c6 <SDMMC_CmdBusWidth>
 800ccbe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d001      	beq.n	800ccca <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	e003      	b.n	800ccd2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ccca:	2300      	movs	r3, #0
 800cccc:	e001      	b.n	800ccd2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ccce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3718      	adds	r7, #24
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}

0800ccda <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ccda:	b580      	push	{r7, lr}
 800ccdc:	b086      	sub	sp, #24
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800cce2:	2300      	movs	r3, #0
 800cce4:	60fb      	str	r3, [r7, #12]
 800cce6:	2300      	movs	r3, #0
 800cce8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2100      	movs	r1, #0
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f002 fa38 	bl	800f166 <SDIO_GetResponse>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd00:	d102      	bne.n	800cd08 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cd02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cd06:	e02f      	b.n	800cd68 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800cd08:	f107 030c 	add.w	r3, r7, #12
 800cd0c:	4619      	mov	r1, r3
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 f82e 	bl	800cd70 <SD_FindSCR>
 800cd14:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d001      	beq.n	800cd20 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	e023      	b.n	800cd68 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d01c      	beq.n	800cd64 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681a      	ldr	r2, [r3, #0]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd32:	041b      	lsls	r3, r3, #16
 800cd34:	4619      	mov	r1, r3
 800cd36:	4610      	mov	r0, r2
 800cd38:	f002 fb80 	bl	800f43c <SDMMC_CmdAppCommand>
 800cd3c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d001      	beq.n	800cd48 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	e00f      	b.n	800cd68 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	2100      	movs	r1, #0
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f002 fbb9 	bl	800f4c6 <SDMMC_CmdBusWidth>
 800cd54:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d001      	beq.n	800cd60 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	e003      	b.n	800cd68 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cd60:	2300      	movs	r3, #0
 800cd62:	e001      	b.n	800cd68 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cd64:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3718      	adds	r7, #24
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800cd70:	b590      	push	{r4, r7, lr}
 800cd72:	b08f      	sub	sp, #60	; 0x3c
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cd7a:	f7fb fd7b 	bl	8008874 <HAL_GetTick>
 800cd7e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800cd80:	2300      	movs	r3, #0
 800cd82:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800cd84:	2300      	movs	r3, #0
 800cd86:	60bb      	str	r3, [r7, #8]
 800cd88:	2300      	movs	r3, #0
 800cd8a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	2108      	movs	r1, #8
 800cd96:	4618      	mov	r0, r3
 800cd98:	f002 fa24 	bl	800f1e4 <SDMMC_CmdBlockLength>
 800cd9c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d001      	beq.n	800cda8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800cda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda6:	e0a9      	b.n	800cefc <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681a      	ldr	r2, [r3, #0]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdb0:	041b      	lsls	r3, r3, #16
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	4610      	mov	r0, r2
 800cdb6:	f002 fb41 	bl	800f43c <SDMMC_CmdAppCommand>
 800cdba:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800cdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d001      	beq.n	800cdc6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800cdc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc4:	e09a      	b.n	800cefc <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cdc6:	f04f 33ff 	mov.w	r3, #4294967295
 800cdca:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800cdcc:	2308      	movs	r3, #8
 800cdce:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800cdd0:	2330      	movs	r3, #48	; 0x30
 800cdd2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800cdd4:	2302      	movs	r3, #2
 800cdd6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800cddc:	2301      	movs	r3, #1
 800cdde:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f107 0210 	add.w	r2, r7, #16
 800cde8:	4611      	mov	r1, r2
 800cdea:	4618      	mov	r0, r3
 800cdec:	f002 f9ce 	bl	800f18c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f002 fb88 	bl	800f50a <SDMMC_CmdSendSCR>
 800cdfa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800cdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d022      	beq.n	800ce48 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800ce02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce04:	e07a      	b.n	800cefc <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d00e      	beq.n	800ce32 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6819      	ldr	r1, [r3, #0]
 800ce18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce1a:	009b      	lsls	r3, r3, #2
 800ce1c:	f107 0208 	add.w	r2, r7, #8
 800ce20:	18d4      	adds	r4, r2, r3
 800ce22:	4608      	mov	r0, r1
 800ce24:	f002 f92d 	bl	800f082 <SDIO_ReadFIFO>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	6023      	str	r3, [r4, #0]
      index++;
 800ce2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce2e:	3301      	adds	r3, #1
 800ce30:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ce32:	f7fb fd1f 	bl	8008874 <HAL_GetTick>
 800ce36:	4602      	mov	r2, r0
 800ce38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3a:	1ad3      	subs	r3, r2, r3
 800ce3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce40:	d102      	bne.n	800ce48 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ce42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce46:	e059      	b.n	800cefc <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce4e:	f240 432a 	movw	r3, #1066	; 0x42a
 800ce52:	4013      	ands	r3, r2
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d0d6      	beq.n	800ce06 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce5e:	f003 0308 	and.w	r3, r3, #8
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d005      	beq.n	800ce72 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	2208      	movs	r2, #8
 800ce6c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ce6e:	2308      	movs	r3, #8
 800ce70:	e044      	b.n	800cefc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce78:	f003 0302 	and.w	r3, r3, #2
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d005      	beq.n	800ce8c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	2202      	movs	r2, #2
 800ce86:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ce88:	2302      	movs	r3, #2
 800ce8a:	e037      	b.n	800cefc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce92:	f003 0320 	and.w	r3, r3, #32
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d005      	beq.n	800cea6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	2220      	movs	r2, #32
 800cea0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800cea2:	2320      	movs	r3, #32
 800cea4:	e02a      	b.n	800cefc <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f240 523a 	movw	r2, #1338	; 0x53a
 800ceae:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	061a      	lsls	r2, r3, #24
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	021b      	lsls	r3, r3, #8
 800ceb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cebc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	0a1b      	lsrs	r3, r3, #8
 800cec2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800cec6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	0e1b      	lsrs	r3, r3, #24
 800cecc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800cece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced0:	601a      	str	r2, [r3, #0]
    scr++;
 800ced2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced4:	3304      	adds	r3, #4
 800ced6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	061a      	lsls	r2, r3, #24
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	021b      	lsls	r3, r3, #8
 800cee0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cee4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	0a1b      	lsrs	r3, r3, #8
 800ceea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ceee:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	0e1b      	lsrs	r3, r3, #24
 800cef4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800cef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800cefa:	2300      	movs	r3, #0
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	373c      	adds	r7, #60	; 0x3c
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd90      	pop	{r4, r7, pc}

0800cf04 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b086      	sub	sp, #24
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf10:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf16:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d03f      	beq.n	800cf9e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800cf1e:	2300      	movs	r3, #0
 800cf20:	617b      	str	r3, [r7, #20]
 800cf22:	e033      	b.n	800cf8c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f002 f8aa 	bl	800f082 <SDIO_ReadFIFO>
 800cf2e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	b2da      	uxtb	r2, r3
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	701a      	strb	r2, [r3, #0]
      tmp++;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	3b01      	subs	r3, #1
 800cf42:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	0a1b      	lsrs	r3, r3, #8
 800cf48:	b2da      	uxtb	r2, r3
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	3301      	adds	r3, #1
 800cf52:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	3b01      	subs	r3, #1
 800cf58:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	0c1b      	lsrs	r3, r3, #16
 800cf5e:	b2da      	uxtb	r2, r3
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	701a      	strb	r2, [r3, #0]
      tmp++;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	3301      	adds	r3, #1
 800cf68:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	3b01      	subs	r3, #1
 800cf6e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	0e1b      	lsrs	r3, r3, #24
 800cf74:	b2da      	uxtb	r2, r3
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	701a      	strb	r2, [r3, #0]
      tmp++;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	3301      	adds	r3, #1
 800cf7e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	3b01      	subs	r3, #1
 800cf84:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	3301      	adds	r3, #1
 800cf8a:	617b      	str	r3, [r7, #20]
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	2b07      	cmp	r3, #7
 800cf90:	d9c8      	bls.n	800cf24 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	68fa      	ldr	r2, [r7, #12]
 800cf96:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	693a      	ldr	r2, [r7, #16]
 800cf9c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800cf9e:	bf00      	nop
 800cfa0:	3718      	adds	r7, #24
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}

0800cfa6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b086      	sub	sp, #24
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6a1b      	ldr	r3, [r3, #32]
 800cfb2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfb8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800cfba:	693b      	ldr	r3, [r7, #16]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d043      	beq.n	800d048 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	617b      	str	r3, [r7, #20]
 800cfc4:	e037      	b.n	800d036 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	781b      	ldrb	r3, [r3, #0]
 800cfca:	60bb      	str	r3, [r7, #8]
      tmp++;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	3301      	adds	r3, #1
 800cfd0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	3b01      	subs	r3, #1
 800cfd6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	021a      	lsls	r2, r3, #8
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	3b01      	subs	r3, #1
 800cfee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	041a      	lsls	r2, r3, #16
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	4313      	orrs	r3, r2
 800cffa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	3301      	adds	r3, #1
 800d000:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d002:	693b      	ldr	r3, [r7, #16]
 800d004:	3b01      	subs	r3, #1
 800d006:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	061a      	lsls	r2, r3, #24
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	4313      	orrs	r3, r2
 800d012:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	3301      	adds	r3, #1
 800d018:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d01a:	693b      	ldr	r3, [r7, #16]
 800d01c:	3b01      	subs	r3, #1
 800d01e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f107 0208 	add.w	r2, r7, #8
 800d028:	4611      	mov	r1, r2
 800d02a:	4618      	mov	r0, r3
 800d02c:	f002 f836 	bl	800f09c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800d030:	697b      	ldr	r3, [r7, #20]
 800d032:	3301      	adds	r3, #1
 800d034:	617b      	str	r3, [r7, #20]
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	2b07      	cmp	r3, #7
 800d03a:	d9c4      	bls.n	800cfc6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	68fa      	ldr	r2, [r7, #12]
 800d040:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	693a      	ldr	r2, [r7, #16]
 800d046:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800d048:	bf00      	nop
 800d04a:	3718      	adds	r7, #24
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}

0800d050 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d101      	bne.n	800d062 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d05e:	2301      	movs	r3, #1
 800d060:	e056      	b.n	800d110 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2200      	movs	r2, #0
 800d066:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d06e:	b2db      	uxtb	r3, r3
 800d070:	2b00      	cmp	r3, #0
 800d072:	d106      	bne.n	800d082 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2200      	movs	r2, #0
 800d078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f7f9 fbdd 	bl	800683c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2202      	movs	r2, #2
 800d086:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	681a      	ldr	r2, [r3, #0]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d098:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	685a      	ldr	r2, [r3, #4]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	689b      	ldr	r3, [r3, #8]
 800d0a2:	431a      	orrs	r2, r3
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	68db      	ldr	r3, [r3, #12]
 800d0a8:	431a      	orrs	r2, r3
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	691b      	ldr	r3, [r3, #16]
 800d0ae:	431a      	orrs	r2, r3
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	695b      	ldr	r3, [r3, #20]
 800d0b4:	431a      	orrs	r2, r3
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	699b      	ldr	r3, [r3, #24]
 800d0ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d0be:	431a      	orrs	r2, r3
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	69db      	ldr	r3, [r3, #28]
 800d0c4:	431a      	orrs	r2, r3
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6a1b      	ldr	r3, [r3, #32]
 800d0ca:	ea42 0103 	orr.w	r1, r2, r3
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	430a      	orrs	r2, r1
 800d0d8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	699b      	ldr	r3, [r3, #24]
 800d0de:	0c1b      	lsrs	r3, r3, #16
 800d0e0:	f003 0104 	and.w	r1, r3, #4
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	430a      	orrs	r2, r1
 800d0ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	69da      	ldr	r2, [r3, #28]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d0fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2200      	movs	r2, #0
 800d104:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2201      	movs	r2, #1
 800d10a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d10e:	2300      	movs	r3, #0
}
 800d110:	4618      	mov	r0, r3
 800d112:	3708      	adds	r7, #8
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}

0800d118 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b088      	sub	sp, #32
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	60b9      	str	r1, [r7, #8]
 800d122:	603b      	str	r3, [r7, #0]
 800d124:	4613      	mov	r3, r2
 800d126:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d128:	2300      	movs	r3, #0
 800d12a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d132:	2b01      	cmp	r3, #1
 800d134:	d101      	bne.n	800d13a <HAL_SPI_Transmit+0x22>
 800d136:	2302      	movs	r3, #2
 800d138:	e11e      	b.n	800d378 <HAL_SPI_Transmit+0x260>
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2201      	movs	r2, #1
 800d13e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d142:	f7fb fb97 	bl	8008874 <HAL_GetTick>
 800d146:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d148:	88fb      	ldrh	r3, [r7, #6]
 800d14a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d152:	b2db      	uxtb	r3, r3
 800d154:	2b01      	cmp	r3, #1
 800d156:	d002      	beq.n	800d15e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d158:	2302      	movs	r3, #2
 800d15a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d15c:	e103      	b.n	800d366 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d002      	beq.n	800d16a <HAL_SPI_Transmit+0x52>
 800d164:	88fb      	ldrh	r3, [r7, #6]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d102      	bne.n	800d170 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d16a:	2301      	movs	r3, #1
 800d16c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d16e:	e0fa      	b.n	800d366 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2203      	movs	r2, #3
 800d174:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2200      	movs	r2, #0
 800d17c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	68ba      	ldr	r2, [r7, #8]
 800d182:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	88fa      	ldrh	r2, [r7, #6]
 800d188:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	88fa      	ldrh	r2, [r7, #6]
 800d18e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2200      	movs	r2, #0
 800d194:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2200      	movs	r2, #0
 800d19a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	689b      	ldr	r3, [r3, #8]
 800d1b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d1b6:	d107      	bne.n	800d1c8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	681a      	ldr	r2, [r3, #0]
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d1c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1d2:	2b40      	cmp	r3, #64	; 0x40
 800d1d4:	d007      	beq.n	800d1e6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	681a      	ldr	r2, [r3, #0]
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d1e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	68db      	ldr	r3, [r3, #12]
 800d1ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d1ee:	d14b      	bne.n	800d288 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d002      	beq.n	800d1fe <HAL_SPI_Transmit+0xe6>
 800d1f8:	8afb      	ldrh	r3, [r7, #22]
 800d1fa:	2b01      	cmp	r3, #1
 800d1fc:	d13e      	bne.n	800d27c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d202:	881a      	ldrh	r2, [r3, #0]
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d20e:	1c9a      	adds	r2, r3, #2
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d218:	b29b      	uxth	r3, r3
 800d21a:	3b01      	subs	r3, #1
 800d21c:	b29a      	uxth	r2, r3
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d222:	e02b      	b.n	800d27c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	689b      	ldr	r3, [r3, #8]
 800d22a:	f003 0302 	and.w	r3, r3, #2
 800d22e:	2b02      	cmp	r3, #2
 800d230:	d112      	bne.n	800d258 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d236:	881a      	ldrh	r2, [r3, #0]
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d242:	1c9a      	adds	r2, r3, #2
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	3b01      	subs	r3, #1
 800d250:	b29a      	uxth	r2, r3
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	86da      	strh	r2, [r3, #54]	; 0x36
 800d256:	e011      	b.n	800d27c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d258:	f7fb fb0c 	bl	8008874 <HAL_GetTick>
 800d25c:	4602      	mov	r2, r0
 800d25e:	69bb      	ldr	r3, [r7, #24]
 800d260:	1ad3      	subs	r3, r2, r3
 800d262:	683a      	ldr	r2, [r7, #0]
 800d264:	429a      	cmp	r2, r3
 800d266:	d803      	bhi.n	800d270 <HAL_SPI_Transmit+0x158>
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d26e:	d102      	bne.n	800d276 <HAL_SPI_Transmit+0x15e>
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d102      	bne.n	800d27c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800d276:	2303      	movs	r3, #3
 800d278:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d27a:	e074      	b.n	800d366 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d280:	b29b      	uxth	r3, r3
 800d282:	2b00      	cmp	r3, #0
 800d284:	d1ce      	bne.n	800d224 <HAL_SPI_Transmit+0x10c>
 800d286:	e04c      	b.n	800d322 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	685b      	ldr	r3, [r3, #4]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d002      	beq.n	800d296 <HAL_SPI_Transmit+0x17e>
 800d290:	8afb      	ldrh	r3, [r7, #22]
 800d292:	2b01      	cmp	r3, #1
 800d294:	d140      	bne.n	800d318 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	330c      	adds	r3, #12
 800d2a0:	7812      	ldrb	r2, [r2, #0]
 800d2a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2a8:	1c5a      	adds	r2, r3, #1
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	3b01      	subs	r3, #1
 800d2b6:	b29a      	uxth	r2, r3
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d2bc:	e02c      	b.n	800d318 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	689b      	ldr	r3, [r3, #8]
 800d2c4:	f003 0302 	and.w	r3, r3, #2
 800d2c8:	2b02      	cmp	r3, #2
 800d2ca:	d113      	bne.n	800d2f4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	330c      	adds	r3, #12
 800d2d6:	7812      	ldrb	r2, [r2, #0]
 800d2d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2de:	1c5a      	adds	r2, r3, #1
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d2e8:	b29b      	uxth	r3, r3
 800d2ea:	3b01      	subs	r3, #1
 800d2ec:	b29a      	uxth	r2, r3
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	86da      	strh	r2, [r3, #54]	; 0x36
 800d2f2:	e011      	b.n	800d318 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d2f4:	f7fb fabe 	bl	8008874 <HAL_GetTick>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	69bb      	ldr	r3, [r7, #24]
 800d2fc:	1ad3      	subs	r3, r2, r3
 800d2fe:	683a      	ldr	r2, [r7, #0]
 800d300:	429a      	cmp	r2, r3
 800d302:	d803      	bhi.n	800d30c <HAL_SPI_Transmit+0x1f4>
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d30a:	d102      	bne.n	800d312 <HAL_SPI_Transmit+0x1fa>
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d102      	bne.n	800d318 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800d312:	2303      	movs	r3, #3
 800d314:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d316:	e026      	b.n	800d366 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d31c:	b29b      	uxth	r3, r3
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d1cd      	bne.n	800d2be <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d322:	69ba      	ldr	r2, [r7, #24]
 800d324:	6839      	ldr	r1, [r7, #0]
 800d326:	68f8      	ldr	r0, [r7, #12]
 800d328:	f000 fba4 	bl	800da74 <SPI_EndRxTxTransaction>
 800d32c:	4603      	mov	r3, r0
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d002      	beq.n	800d338 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2220      	movs	r2, #32
 800d336:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	689b      	ldr	r3, [r3, #8]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d10a      	bne.n	800d356 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d340:	2300      	movs	r3, #0
 800d342:	613b      	str	r3, [r7, #16]
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	613b      	str	r3, [r7, #16]
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	689b      	ldr	r3, [r3, #8]
 800d352:	613b      	str	r3, [r7, #16]
 800d354:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d002      	beq.n	800d364 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800d35e:	2301      	movs	r3, #1
 800d360:	77fb      	strb	r3, [r7, #31]
 800d362:	e000      	b.n	800d366 <HAL_SPI_Transmit+0x24e>
  }

error:
 800d364:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	2201      	movs	r2, #1
 800d36a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	2200      	movs	r2, #0
 800d372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d376:	7ffb      	ldrb	r3, [r7, #31]
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3720      	adds	r7, #32
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b088      	sub	sp, #32
 800d384:	af02      	add	r7, sp, #8
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	60b9      	str	r1, [r7, #8]
 800d38a:	603b      	str	r3, [r7, #0]
 800d38c:	4613      	mov	r3, r2
 800d38e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d390:	2300      	movs	r3, #0
 800d392:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	685b      	ldr	r3, [r3, #4]
 800d398:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d39c:	d112      	bne.n	800d3c4 <HAL_SPI_Receive+0x44>
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	689b      	ldr	r3, [r3, #8]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d10e      	bne.n	800d3c4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2204      	movs	r2, #4
 800d3aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d3ae:	88fa      	ldrh	r2, [r7, #6]
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	9300      	str	r3, [sp, #0]
 800d3b4:	4613      	mov	r3, r2
 800d3b6:	68ba      	ldr	r2, [r7, #8]
 800d3b8:	68b9      	ldr	r1, [r7, #8]
 800d3ba:	68f8      	ldr	r0, [r7, #12]
 800d3bc:	f000 f8e9 	bl	800d592 <HAL_SPI_TransmitReceive>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	e0e2      	b.n	800d58a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d3ca:	2b01      	cmp	r3, #1
 800d3cc:	d101      	bne.n	800d3d2 <HAL_SPI_Receive+0x52>
 800d3ce:	2302      	movs	r3, #2
 800d3d0:	e0db      	b.n	800d58a <HAL_SPI_Receive+0x20a>
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d3da:	f7fb fa4b 	bl	8008874 <HAL_GetTick>
 800d3de:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	2b01      	cmp	r3, #1
 800d3ea:	d002      	beq.n	800d3f2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800d3ec:	2302      	movs	r3, #2
 800d3ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d3f0:	e0c2      	b.n	800d578 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d002      	beq.n	800d3fe <HAL_SPI_Receive+0x7e>
 800d3f8:	88fb      	ldrh	r3, [r7, #6]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d102      	bne.n	800d404 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800d3fe:	2301      	movs	r3, #1
 800d400:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d402:	e0b9      	b.n	800d578 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2204      	movs	r2, #4
 800d408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	2200      	movs	r2, #0
 800d410:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	68ba      	ldr	r2, [r7, #8]
 800d416:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	88fa      	ldrh	r2, [r7, #6]
 800d41c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	88fa      	ldrh	r2, [r7, #6]
 800d422:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2200      	movs	r2, #0
 800d428:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2200      	movs	r2, #0
 800d42e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2200      	movs	r2, #0
 800d434:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	2200      	movs	r2, #0
 800d43a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2200      	movs	r2, #0
 800d440:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	689b      	ldr	r3, [r3, #8]
 800d446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d44a:	d107      	bne.n	800d45c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d45a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d466:	2b40      	cmp	r3, #64	; 0x40
 800d468:	d007      	beq.n	800d47a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	681a      	ldr	r2, [r3, #0]
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d478:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	68db      	ldr	r3, [r3, #12]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d162      	bne.n	800d548 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d482:	e02e      	b.n	800d4e2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	689b      	ldr	r3, [r3, #8]
 800d48a:	f003 0301 	and.w	r3, r3, #1
 800d48e:	2b01      	cmp	r3, #1
 800d490:	d115      	bne.n	800d4be <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f103 020c 	add.w	r2, r3, #12
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d49e:	7812      	ldrb	r2, [r2, #0]
 800d4a0:	b2d2      	uxtb	r2, r2
 800d4a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4a8:	1c5a      	adds	r2, r3, #1
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	3b01      	subs	r3, #1
 800d4b6:	b29a      	uxth	r2, r3
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d4bc:	e011      	b.n	800d4e2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d4be:	f7fb f9d9 	bl	8008874 <HAL_GetTick>
 800d4c2:	4602      	mov	r2, r0
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	1ad3      	subs	r3, r2, r3
 800d4c8:	683a      	ldr	r2, [r7, #0]
 800d4ca:	429a      	cmp	r2, r3
 800d4cc:	d803      	bhi.n	800d4d6 <HAL_SPI_Receive+0x156>
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4d4:	d102      	bne.n	800d4dc <HAL_SPI_Receive+0x15c>
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d102      	bne.n	800d4e2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800d4dc:	2303      	movs	r3, #3
 800d4de:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d4e0:	e04a      	b.n	800d578 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d1cb      	bne.n	800d484 <HAL_SPI_Receive+0x104>
 800d4ec:	e031      	b.n	800d552 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	689b      	ldr	r3, [r3, #8]
 800d4f4:	f003 0301 	and.w	r3, r3, #1
 800d4f8:	2b01      	cmp	r3, #1
 800d4fa:	d113      	bne.n	800d524 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	68da      	ldr	r2, [r3, #12]
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d506:	b292      	uxth	r2, r2
 800d508:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d50e:	1c9a      	adds	r2, r3, #2
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d518:	b29b      	uxth	r3, r3
 800d51a:	3b01      	subs	r3, #1
 800d51c:	b29a      	uxth	r2, r3
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d522:	e011      	b.n	800d548 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d524:	f7fb f9a6 	bl	8008874 <HAL_GetTick>
 800d528:	4602      	mov	r2, r0
 800d52a:	693b      	ldr	r3, [r7, #16]
 800d52c:	1ad3      	subs	r3, r2, r3
 800d52e:	683a      	ldr	r2, [r7, #0]
 800d530:	429a      	cmp	r2, r3
 800d532:	d803      	bhi.n	800d53c <HAL_SPI_Receive+0x1bc>
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d53a:	d102      	bne.n	800d542 <HAL_SPI_Receive+0x1c2>
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d102      	bne.n	800d548 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800d542:	2303      	movs	r3, #3
 800d544:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d546:	e017      	b.n	800d578 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d1cd      	bne.n	800d4ee <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d552:	693a      	ldr	r2, [r7, #16]
 800d554:	6839      	ldr	r1, [r7, #0]
 800d556:	68f8      	ldr	r0, [r7, #12]
 800d558:	f000 fa27 	bl	800d9aa <SPI_EndRxTransaction>
 800d55c:	4603      	mov	r3, r0
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d002      	beq.n	800d568 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2220      	movs	r2, #32
 800d566:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d002      	beq.n	800d576 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800d570:	2301      	movs	r3, #1
 800d572:	75fb      	strb	r3, [r7, #23]
 800d574:	e000      	b.n	800d578 <HAL_SPI_Receive+0x1f8>
  }

error :
 800d576:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2201      	movs	r2, #1
 800d57c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	2200      	movs	r2, #0
 800d584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d588:	7dfb      	ldrb	r3, [r7, #23]
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3718      	adds	r7, #24
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}

0800d592 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d592:	b580      	push	{r7, lr}
 800d594:	b08c      	sub	sp, #48	; 0x30
 800d596:	af00      	add	r7, sp, #0
 800d598:	60f8      	str	r0, [r7, #12]
 800d59a:	60b9      	str	r1, [r7, #8]
 800d59c:	607a      	str	r2, [r7, #4]
 800d59e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d101      	bne.n	800d5b8 <HAL_SPI_TransmitReceive+0x26>
 800d5b4:	2302      	movs	r3, #2
 800d5b6:	e18a      	b.n	800d8ce <HAL_SPI_TransmitReceive+0x33c>
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d5c0:	f7fb f958 	bl	8008874 <HAL_GetTick>
 800d5c4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d5cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800d5d6:	887b      	ldrh	r3, [r7, #2]
 800d5d8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d5da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	d00f      	beq.n	800d602 <HAL_SPI_TransmitReceive+0x70>
 800d5e2:	69fb      	ldr	r3, [r7, #28]
 800d5e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d5e8:	d107      	bne.n	800d5fa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	689b      	ldr	r3, [r3, #8]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d103      	bne.n	800d5fa <HAL_SPI_TransmitReceive+0x68>
 800d5f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d5f6:	2b04      	cmp	r3, #4
 800d5f8:	d003      	beq.n	800d602 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800d5fa:	2302      	movs	r3, #2
 800d5fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d600:	e15b      	b.n	800d8ba <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d005      	beq.n	800d614 <HAL_SPI_TransmitReceive+0x82>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d002      	beq.n	800d614 <HAL_SPI_TransmitReceive+0x82>
 800d60e:	887b      	ldrh	r3, [r7, #2]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d103      	bne.n	800d61c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800d614:	2301      	movs	r3, #1
 800d616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d61a:	e14e      	b.n	800d8ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d622:	b2db      	uxtb	r3, r3
 800d624:	2b04      	cmp	r3, #4
 800d626:	d003      	beq.n	800d630 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	2205      	movs	r2, #5
 800d62c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2200      	movs	r2, #0
 800d634:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	687a      	ldr	r2, [r7, #4]
 800d63a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	887a      	ldrh	r2, [r7, #2]
 800d640:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	887a      	ldrh	r2, [r7, #2]
 800d646:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	68ba      	ldr	r2, [r7, #8]
 800d64c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	887a      	ldrh	r2, [r7, #2]
 800d652:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	887a      	ldrh	r2, [r7, #2]
 800d658:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	2200      	movs	r2, #0
 800d65e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2200      	movs	r2, #0
 800d664:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d670:	2b40      	cmp	r3, #64	; 0x40
 800d672:	d007      	beq.n	800d684 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d682:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	68db      	ldr	r3, [r3, #12]
 800d688:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d68c:	d178      	bne.n	800d780 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d002      	beq.n	800d69c <HAL_SPI_TransmitReceive+0x10a>
 800d696:	8b7b      	ldrh	r3, [r7, #26]
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d166      	bne.n	800d76a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6a0:	881a      	ldrh	r2, [r3, #0]
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6ac:	1c9a      	adds	r2, r3, #2
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	3b01      	subs	r3, #1
 800d6ba:	b29a      	uxth	r2, r3
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d6c0:	e053      	b.n	800d76a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	689b      	ldr	r3, [r3, #8]
 800d6c8:	f003 0302 	and.w	r3, r3, #2
 800d6cc:	2b02      	cmp	r3, #2
 800d6ce:	d11b      	bne.n	800d708 <HAL_SPI_TransmitReceive+0x176>
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d6d4:	b29b      	uxth	r3, r3
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d016      	beq.n	800d708 <HAL_SPI_TransmitReceive+0x176>
 800d6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6dc:	2b01      	cmp	r3, #1
 800d6de:	d113      	bne.n	800d708 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6e4:	881a      	ldrh	r2, [r3, #0]
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6f0:	1c9a      	adds	r2, r3, #2
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	3b01      	subs	r3, #1
 800d6fe:	b29a      	uxth	r2, r3
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d704:	2300      	movs	r3, #0
 800d706:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	689b      	ldr	r3, [r3, #8]
 800d70e:	f003 0301 	and.w	r3, r3, #1
 800d712:	2b01      	cmp	r3, #1
 800d714:	d119      	bne.n	800d74a <HAL_SPI_TransmitReceive+0x1b8>
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d014      	beq.n	800d74a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	68da      	ldr	r2, [r3, #12]
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d72a:	b292      	uxth	r2, r2
 800d72c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d732:	1c9a      	adds	r2, r3, #2
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d73c:	b29b      	uxth	r3, r3
 800d73e:	3b01      	subs	r3, #1
 800d740:	b29a      	uxth	r2, r3
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d746:	2301      	movs	r3, #1
 800d748:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d74a:	f7fb f893 	bl	8008874 <HAL_GetTick>
 800d74e:	4602      	mov	r2, r0
 800d750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d752:	1ad3      	subs	r3, r2, r3
 800d754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d756:	429a      	cmp	r2, r3
 800d758:	d807      	bhi.n	800d76a <HAL_SPI_TransmitReceive+0x1d8>
 800d75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d75c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d760:	d003      	beq.n	800d76a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800d762:	2303      	movs	r3, #3
 800d764:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d768:	e0a7      	b.n	800d8ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d76e:	b29b      	uxth	r3, r3
 800d770:	2b00      	cmp	r3, #0
 800d772:	d1a6      	bne.n	800d6c2 <HAL_SPI_TransmitReceive+0x130>
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d778:	b29b      	uxth	r3, r3
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d1a1      	bne.n	800d6c2 <HAL_SPI_TransmitReceive+0x130>
 800d77e:	e07c      	b.n	800d87a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	685b      	ldr	r3, [r3, #4]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d002      	beq.n	800d78e <HAL_SPI_TransmitReceive+0x1fc>
 800d788:	8b7b      	ldrh	r3, [r7, #26]
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d16b      	bne.n	800d866 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	330c      	adds	r3, #12
 800d798:	7812      	ldrb	r2, [r2, #0]
 800d79a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7a0:	1c5a      	adds	r2, r3, #1
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d7aa:	b29b      	uxth	r3, r3
 800d7ac:	3b01      	subs	r3, #1
 800d7ae:	b29a      	uxth	r2, r3
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d7b4:	e057      	b.n	800d866 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	689b      	ldr	r3, [r3, #8]
 800d7bc:	f003 0302 	and.w	r3, r3, #2
 800d7c0:	2b02      	cmp	r3, #2
 800d7c2:	d11c      	bne.n	800d7fe <HAL_SPI_TransmitReceive+0x26c>
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d7c8:	b29b      	uxth	r3, r3
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d017      	beq.n	800d7fe <HAL_SPI_TransmitReceive+0x26c>
 800d7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d114      	bne.n	800d7fe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	330c      	adds	r3, #12
 800d7de:	7812      	ldrb	r2, [r2, #0]
 800d7e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7e6:	1c5a      	adds	r2, r3, #1
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d7f0:	b29b      	uxth	r3, r3
 800d7f2:	3b01      	subs	r3, #1
 800d7f4:	b29a      	uxth	r2, r3
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	689b      	ldr	r3, [r3, #8]
 800d804:	f003 0301 	and.w	r3, r3, #1
 800d808:	2b01      	cmp	r3, #1
 800d80a:	d119      	bne.n	800d840 <HAL_SPI_TransmitReceive+0x2ae>
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d810:	b29b      	uxth	r3, r3
 800d812:	2b00      	cmp	r3, #0
 800d814:	d014      	beq.n	800d840 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	68da      	ldr	r2, [r3, #12]
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d820:	b2d2      	uxtb	r2, r2
 800d822:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d828:	1c5a      	adds	r2, r3, #1
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d832:	b29b      	uxth	r3, r3
 800d834:	3b01      	subs	r3, #1
 800d836:	b29a      	uxth	r2, r3
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d83c:	2301      	movs	r3, #1
 800d83e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d840:	f7fb f818 	bl	8008874 <HAL_GetTick>
 800d844:	4602      	mov	r2, r0
 800d846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d848:	1ad3      	subs	r3, r2, r3
 800d84a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d803      	bhi.n	800d858 <HAL_SPI_TransmitReceive+0x2c6>
 800d850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d856:	d102      	bne.n	800d85e <HAL_SPI_TransmitReceive+0x2cc>
 800d858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d103      	bne.n	800d866 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800d85e:	2303      	movs	r3, #3
 800d860:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d864:	e029      	b.n	800d8ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d1a2      	bne.n	800d7b6 <HAL_SPI_TransmitReceive+0x224>
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d874:	b29b      	uxth	r3, r3
 800d876:	2b00      	cmp	r3, #0
 800d878:	d19d      	bne.n	800d7b6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d87a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d87c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d87e:	68f8      	ldr	r0, [r7, #12]
 800d880:	f000 f8f8 	bl	800da74 <SPI_EndRxTxTransaction>
 800d884:	4603      	mov	r3, r0
 800d886:	2b00      	cmp	r3, #0
 800d888:	d006      	beq.n	800d898 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800d88a:	2301      	movs	r3, #1
 800d88c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2220      	movs	r2, #32
 800d894:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800d896:	e010      	b.n	800d8ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	689b      	ldr	r3, [r3, #8]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d10b      	bne.n	800d8b8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	617b      	str	r3, [r7, #20]
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	68db      	ldr	r3, [r3, #12]
 800d8aa:	617b      	str	r3, [r7, #20]
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	689b      	ldr	r3, [r3, #8]
 800d8b2:	617b      	str	r3, [r7, #20]
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	e000      	b.n	800d8ba <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800d8b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	2201      	movs	r2, #1
 800d8be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d8ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3730      	adds	r7, #48	; 0x30
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}

0800d8d6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d8d6:	b580      	push	{r7, lr}
 800d8d8:	b084      	sub	sp, #16
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	60f8      	str	r0, [r7, #12]
 800d8de:	60b9      	str	r1, [r7, #8]
 800d8e0:	603b      	str	r3, [r7, #0]
 800d8e2:	4613      	mov	r3, r2
 800d8e4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d8e6:	e04c      	b.n	800d982 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ee:	d048      	beq.n	800d982 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800d8f0:	f7fa ffc0 	bl	8008874 <HAL_GetTick>
 800d8f4:	4602      	mov	r2, r0
 800d8f6:	69bb      	ldr	r3, [r7, #24]
 800d8f8:	1ad3      	subs	r3, r2, r3
 800d8fa:	683a      	ldr	r2, [r7, #0]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d902      	bls.n	800d906 <SPI_WaitFlagStateUntilTimeout+0x30>
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d13d      	bne.n	800d982 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	685a      	ldr	r2, [r3, #4]
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d914:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d91e:	d111      	bne.n	800d944 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	689b      	ldr	r3, [r3, #8]
 800d924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d928:	d004      	beq.n	800d934 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	689b      	ldr	r3, [r3, #8]
 800d92e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d932:	d107      	bne.n	800d944 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	681a      	ldr	r2, [r3, #0]
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d942:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d94c:	d10f      	bne.n	800d96e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d95c:	601a      	str	r2, [r3, #0]
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	681a      	ldr	r2, [r3, #0]
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d96c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	2201      	movs	r2, #1
 800d972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2200      	movs	r2, #0
 800d97a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800d97e:	2303      	movs	r3, #3
 800d980:	e00f      	b.n	800d9a2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	689a      	ldr	r2, [r3, #8]
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	4013      	ands	r3, r2
 800d98c:	68ba      	ldr	r2, [r7, #8]
 800d98e:	429a      	cmp	r2, r3
 800d990:	bf0c      	ite	eq
 800d992:	2301      	moveq	r3, #1
 800d994:	2300      	movne	r3, #0
 800d996:	b2db      	uxtb	r3, r3
 800d998:	461a      	mov	r2, r3
 800d99a:	79fb      	ldrb	r3, [r7, #7]
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d1a3      	bne.n	800d8e8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800d9a0:	2300      	movs	r3, #0
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3710      	adds	r7, #16
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}

0800d9aa <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d9aa:	b580      	push	{r7, lr}
 800d9ac:	b086      	sub	sp, #24
 800d9ae:	af02      	add	r7, sp, #8
 800d9b0:	60f8      	str	r0, [r7, #12]
 800d9b2:	60b9      	str	r1, [r7, #8]
 800d9b4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d9be:	d111      	bne.n	800d9e4 <SPI_EndRxTransaction+0x3a>
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	689b      	ldr	r3, [r3, #8]
 800d9c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9c8:	d004      	beq.n	800d9d4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	689b      	ldr	r3, [r3, #8]
 800d9ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d9d2:	d107      	bne.n	800d9e4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	681a      	ldr	r2, [r3, #0]
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d9e2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d9ec:	d12a      	bne.n	800da44 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	689b      	ldr	r3, [r3, #8]
 800d9f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d9f6:	d012      	beq.n	800da1e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	9300      	str	r3, [sp, #0]
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	2200      	movs	r2, #0
 800da00:	2180      	movs	r1, #128	; 0x80
 800da02:	68f8      	ldr	r0, [r7, #12]
 800da04:	f7ff ff67 	bl	800d8d6 <SPI_WaitFlagStateUntilTimeout>
 800da08:	4603      	mov	r3, r0
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d02d      	beq.n	800da6a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da12:	f043 0220 	orr.w	r2, r3, #32
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800da1a:	2303      	movs	r3, #3
 800da1c:	e026      	b.n	800da6c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	9300      	str	r3, [sp, #0]
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	2200      	movs	r2, #0
 800da26:	2101      	movs	r1, #1
 800da28:	68f8      	ldr	r0, [r7, #12]
 800da2a:	f7ff ff54 	bl	800d8d6 <SPI_WaitFlagStateUntilTimeout>
 800da2e:	4603      	mov	r3, r0
 800da30:	2b00      	cmp	r3, #0
 800da32:	d01a      	beq.n	800da6a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da38:	f043 0220 	orr.w	r2, r3, #32
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800da40:	2303      	movs	r3, #3
 800da42:	e013      	b.n	800da6c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	9300      	str	r3, [sp, #0]
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	2200      	movs	r2, #0
 800da4c:	2101      	movs	r1, #1
 800da4e:	68f8      	ldr	r0, [r7, #12]
 800da50:	f7ff ff41 	bl	800d8d6 <SPI_WaitFlagStateUntilTimeout>
 800da54:	4603      	mov	r3, r0
 800da56:	2b00      	cmp	r3, #0
 800da58:	d007      	beq.n	800da6a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da5e:	f043 0220 	orr.w	r2, r3, #32
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800da66:	2303      	movs	r3, #3
 800da68:	e000      	b.n	800da6c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800da6a:	2300      	movs	r3, #0
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3710      	adds	r7, #16
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b088      	sub	sp, #32
 800da78:	af02      	add	r7, sp, #8
 800da7a:	60f8      	str	r0, [r7, #12]
 800da7c:	60b9      	str	r1, [r7, #8]
 800da7e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800da80:	4b1b      	ldr	r3, [pc, #108]	; (800daf0 <SPI_EndRxTxTransaction+0x7c>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4a1b      	ldr	r2, [pc, #108]	; (800daf4 <SPI_EndRxTxTransaction+0x80>)
 800da86:	fba2 2303 	umull	r2, r3, r2, r3
 800da8a:	0d5b      	lsrs	r3, r3, #21
 800da8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800da90:	fb02 f303 	mul.w	r3, r2, r3
 800da94:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800da9e:	d112      	bne.n	800dac6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	9300      	str	r3, [sp, #0]
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	2200      	movs	r2, #0
 800daa8:	2180      	movs	r1, #128	; 0x80
 800daaa:	68f8      	ldr	r0, [r7, #12]
 800daac:	f7ff ff13 	bl	800d8d6 <SPI_WaitFlagStateUntilTimeout>
 800dab0:	4603      	mov	r3, r0
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d016      	beq.n	800dae4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daba:	f043 0220 	orr.w	r2, r3, #32
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800dac2:	2303      	movs	r3, #3
 800dac4:	e00f      	b.n	800dae6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d00a      	beq.n	800dae2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	3b01      	subs	r3, #1
 800dad0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	689b      	ldr	r3, [r3, #8]
 800dad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dadc:	2b80      	cmp	r3, #128	; 0x80
 800dade:	d0f2      	beq.n	800dac6 <SPI_EndRxTxTransaction+0x52>
 800dae0:	e000      	b.n	800dae4 <SPI_EndRxTxTransaction+0x70>
        break;
 800dae2:	bf00      	nop
  }

  return HAL_OK;
 800dae4:	2300      	movs	r3, #0
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	3718      	adds	r7, #24
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}
 800daee:	bf00      	nop
 800daf0:	20000000 	.word	0x20000000
 800daf4:	165e9f81 	.word	0x165e9f81

0800daf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d101      	bne.n	800db0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800db06:	2301      	movs	r3, #1
 800db08:	e01d      	b.n	800db46 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db10:	b2db      	uxtb	r3, r3
 800db12:	2b00      	cmp	r3, #0
 800db14:	d106      	bne.n	800db24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2200      	movs	r2, #0
 800db1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f7f8 ff48 	bl	80069b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2202      	movs	r2, #2
 800db28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681a      	ldr	r2, [r3, #0]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	3304      	adds	r3, #4
 800db34:	4619      	mov	r1, r3
 800db36:	4610      	mov	r0, r2
 800db38:	f000 fb56 	bl	800e1e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2201      	movs	r2, #1
 800db40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800db44:	2300      	movs	r3, #0
}
 800db46:	4618      	mov	r0, r3
 800db48:	3708      	adds	r7, #8
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}

0800db4e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800db4e:	b480      	push	{r7}
 800db50:	b085      	sub	sp, #20
 800db52:	af00      	add	r7, sp, #0
 800db54:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	68da      	ldr	r2, [r3, #12]
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f042 0201 	orr.w	r2, r2, #1
 800db64:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	689b      	ldr	r3, [r3, #8]
 800db6c:	f003 0307 	and.w	r3, r3, #7
 800db70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2b06      	cmp	r3, #6
 800db76:	d007      	beq.n	800db88 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f042 0201 	orr.w	r2, r2, #1
 800db86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800db88:	2300      	movs	r3, #0
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3714      	adds	r7, #20
 800db8e:	46bd      	mov	sp, r7
 800db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db94:	4770      	bx	lr

0800db96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800db96:	b580      	push	{r7, lr}
 800db98:	b082      	sub	sp, #8
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d101      	bne.n	800dba8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dba4:	2301      	movs	r3, #1
 800dba6:	e01d      	b.n	800dbe4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dbae:	b2db      	uxtb	r3, r3
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d106      	bne.n	800dbc2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f7f8 fe85 	bl	80068cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2202      	movs	r2, #2
 800dbc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681a      	ldr	r2, [r3, #0]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	3304      	adds	r3, #4
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	4610      	mov	r0, r2
 800dbd6:	f000 fb07 	bl	800e1e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2201      	movs	r2, #1
 800dbde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dbe2:	2300      	movs	r3, #0
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3708      	adds	r7, #8
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}

0800dbec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b084      	sub	sp, #16
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	6839      	ldr	r1, [r7, #0]
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f000 fd42 	bl	800e688 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	4a15      	ldr	r2, [pc, #84]	; (800dc60 <HAL_TIM_PWM_Start+0x74>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d004      	beq.n	800dc18 <HAL_TIM_PWM_Start+0x2c>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	4a14      	ldr	r2, [pc, #80]	; (800dc64 <HAL_TIM_PWM_Start+0x78>)
 800dc14:	4293      	cmp	r3, r2
 800dc16:	d101      	bne.n	800dc1c <HAL_TIM_PWM_Start+0x30>
 800dc18:	2301      	movs	r3, #1
 800dc1a:	e000      	b.n	800dc1e <HAL_TIM_PWM_Start+0x32>
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d007      	beq.n	800dc32 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dc30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	689b      	ldr	r3, [r3, #8]
 800dc38:	f003 0307 	and.w	r3, r3, #7
 800dc3c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	2b06      	cmp	r3, #6
 800dc42:	d007      	beq.n	800dc54 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	681a      	ldr	r2, [r3, #0]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f042 0201 	orr.w	r2, r2, #1
 800dc52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dc54:	2300      	movs	r3, #0
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3710      	adds	r7, #16
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
 800dc5e:	bf00      	nop
 800dc60:	40010000 	.word	0x40010000
 800dc64:	40010400 	.word	0x40010400

0800dc68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b086      	sub	sp, #24
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d101      	bne.n	800dc7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800dc78:	2301      	movs	r3, #1
 800dc7a:	e083      	b.n	800dd84 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc82:	b2db      	uxtb	r3, r3
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d106      	bne.n	800dc96 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f7f8 ff1f 	bl	8006ad4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2202      	movs	r2, #2
 800dc9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	689b      	ldr	r3, [r3, #8]
 800dca4:	687a      	ldr	r2, [r7, #4]
 800dca6:	6812      	ldr	r2, [r2, #0]
 800dca8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dcac:	f023 0307 	bic.w	r3, r3, #7
 800dcb0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681a      	ldr	r2, [r3, #0]
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	3304      	adds	r3, #4
 800dcba:	4619      	mov	r1, r3
 800dcbc:	4610      	mov	r0, r2
 800dcbe:	f000 fa93 	bl	800e1e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	689b      	ldr	r3, [r3, #8]
 800dcc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	699b      	ldr	r3, [r3, #24]
 800dcd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	6a1b      	ldr	r3, [r3, #32]
 800dcd8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	697a      	ldr	r2, [r7, #20]
 800dce0:	4313      	orrs	r3, r2
 800dce2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dcea:	f023 0303 	bic.w	r3, r3, #3
 800dcee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	689a      	ldr	r2, [r3, #8]
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	699b      	ldr	r3, [r3, #24]
 800dcf8:	021b      	lsls	r3, r3, #8
 800dcfa:	4313      	orrs	r3, r2
 800dcfc:	693a      	ldr	r2, [r7, #16]
 800dcfe:	4313      	orrs	r3, r2
 800dd00:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800dd08:	f023 030c 	bic.w	r3, r3, #12
 800dd0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dd14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dd18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	68da      	ldr	r2, [r3, #12]
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	69db      	ldr	r3, [r3, #28]
 800dd22:	021b      	lsls	r3, r3, #8
 800dd24:	4313      	orrs	r3, r2
 800dd26:	693a      	ldr	r2, [r7, #16]
 800dd28:	4313      	orrs	r3, r2
 800dd2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	691b      	ldr	r3, [r3, #16]
 800dd30:	011a      	lsls	r2, r3, #4
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	6a1b      	ldr	r3, [r3, #32]
 800dd36:	031b      	lsls	r3, r3, #12
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	693a      	ldr	r2, [r7, #16]
 800dd3c:	4313      	orrs	r3, r2
 800dd3e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800dd46:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800dd4e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	685a      	ldr	r2, [r3, #4]
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	695b      	ldr	r3, [r3, #20]
 800dd58:	011b      	lsls	r3, r3, #4
 800dd5a:	4313      	orrs	r3, r2
 800dd5c:	68fa      	ldr	r2, [r7, #12]
 800dd5e:	4313      	orrs	r3, r2
 800dd60:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	697a      	ldr	r2, [r7, #20]
 800dd68:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	693a      	ldr	r2, [r7, #16]
 800dd70:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	68fa      	ldr	r2, [r7, #12]
 800dd78:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dd82:	2300      	movs	r3, #0
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3718      	adds	r7, #24
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}

0800dd8c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b082      	sub	sp, #8
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d002      	beq.n	800dda2 <HAL_TIM_Encoder_Start+0x16>
 800dd9c:	2b04      	cmp	r3, #4
 800dd9e:	d008      	beq.n	800ddb2 <HAL_TIM_Encoder_Start+0x26>
 800dda0:	e00f      	b.n	800ddc2 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	2201      	movs	r2, #1
 800dda8:	2100      	movs	r1, #0
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f000 fc6c 	bl	800e688 <TIM_CCxChannelCmd>
      break;
 800ddb0:	e016      	b.n	800dde0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	2104      	movs	r1, #4
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f000 fc64 	bl	800e688 <TIM_CCxChannelCmd>
      break;
 800ddc0:	e00e      	b.n	800dde0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	2100      	movs	r1, #0
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f000 fc5c 	bl	800e688 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	2201      	movs	r2, #1
 800ddd6:	2104      	movs	r1, #4
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f000 fc55 	bl	800e688 <TIM_CCxChannelCmd>
      break;
 800ddde:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	681a      	ldr	r2, [r3, #0]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	f042 0201 	orr.w	r2, r2, #1
 800ddee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ddf0:	2300      	movs	r3, #0
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3708      	adds	r7, #8
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}

0800ddfa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ddfa:	b580      	push	{r7, lr}
 800ddfc:	b082      	sub	sp, #8
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	691b      	ldr	r3, [r3, #16]
 800de08:	f003 0302 	and.w	r3, r3, #2
 800de0c:	2b02      	cmp	r3, #2
 800de0e:	d122      	bne.n	800de56 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	68db      	ldr	r3, [r3, #12]
 800de16:	f003 0302 	and.w	r3, r3, #2
 800de1a:	2b02      	cmp	r3, #2
 800de1c:	d11b      	bne.n	800de56 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	f06f 0202 	mvn.w	r2, #2
 800de26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2201      	movs	r2, #1
 800de2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	699b      	ldr	r3, [r3, #24]
 800de34:	f003 0303 	and.w	r3, r3, #3
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d003      	beq.n	800de44 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f000 f9b5 	bl	800e1ac <HAL_TIM_IC_CaptureCallback>
 800de42:	e005      	b.n	800de50 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f000 f9a7 	bl	800e198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f000 f9b8 	bl	800e1c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2200      	movs	r2, #0
 800de54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	691b      	ldr	r3, [r3, #16]
 800de5c:	f003 0304 	and.w	r3, r3, #4
 800de60:	2b04      	cmp	r3, #4
 800de62:	d122      	bne.n	800deaa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	68db      	ldr	r3, [r3, #12]
 800de6a:	f003 0304 	and.w	r3, r3, #4
 800de6e:	2b04      	cmp	r3, #4
 800de70:	d11b      	bne.n	800deaa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f06f 0204 	mvn.w	r2, #4
 800de7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2202      	movs	r2, #2
 800de80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	699b      	ldr	r3, [r3, #24]
 800de88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d003      	beq.n	800de98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f000 f98b 	bl	800e1ac <HAL_TIM_IC_CaptureCallback>
 800de96:	e005      	b.n	800dea4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f000 f97d 	bl	800e198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f000 f98e 	bl	800e1c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2200      	movs	r2, #0
 800dea8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	691b      	ldr	r3, [r3, #16]
 800deb0:	f003 0308 	and.w	r3, r3, #8
 800deb4:	2b08      	cmp	r3, #8
 800deb6:	d122      	bne.n	800defe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	68db      	ldr	r3, [r3, #12]
 800debe:	f003 0308 	and.w	r3, r3, #8
 800dec2:	2b08      	cmp	r3, #8
 800dec4:	d11b      	bne.n	800defe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	f06f 0208 	mvn.w	r2, #8
 800dece:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2204      	movs	r2, #4
 800ded4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	69db      	ldr	r3, [r3, #28]
 800dedc:	f003 0303 	and.w	r3, r3, #3
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d003      	beq.n	800deec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f000 f961 	bl	800e1ac <HAL_TIM_IC_CaptureCallback>
 800deea:	e005      	b.n	800def8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f000 f953 	bl	800e198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f000 f964 	bl	800e1c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2200      	movs	r2, #0
 800defc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	691b      	ldr	r3, [r3, #16]
 800df04:	f003 0310 	and.w	r3, r3, #16
 800df08:	2b10      	cmp	r3, #16
 800df0a:	d122      	bne.n	800df52 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	68db      	ldr	r3, [r3, #12]
 800df12:	f003 0310 	and.w	r3, r3, #16
 800df16:	2b10      	cmp	r3, #16
 800df18:	d11b      	bne.n	800df52 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f06f 0210 	mvn.w	r2, #16
 800df22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2208      	movs	r2, #8
 800df28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	69db      	ldr	r3, [r3, #28]
 800df30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800df34:	2b00      	cmp	r3, #0
 800df36:	d003      	beq.n	800df40 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f000 f937 	bl	800e1ac <HAL_TIM_IC_CaptureCallback>
 800df3e:	e005      	b.n	800df4c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f000 f929 	bl	800e198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f000 f93a 	bl	800e1c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2200      	movs	r2, #0
 800df50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	691b      	ldr	r3, [r3, #16]
 800df58:	f003 0301 	and.w	r3, r3, #1
 800df5c:	2b01      	cmp	r3, #1
 800df5e:	d10e      	bne.n	800df7e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	68db      	ldr	r3, [r3, #12]
 800df66:	f003 0301 	and.w	r3, r3, #1
 800df6a:	2b01      	cmp	r3, #1
 800df6c:	d107      	bne.n	800df7e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	f06f 0201 	mvn.w	r2, #1
 800df76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f7f7 fa95 	bl	80054a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	691b      	ldr	r3, [r3, #16]
 800df84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df88:	2b80      	cmp	r3, #128	; 0x80
 800df8a:	d10e      	bne.n	800dfaa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	68db      	ldr	r3, [r3, #12]
 800df92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df96:	2b80      	cmp	r3, #128	; 0x80
 800df98:	d107      	bne.n	800dfaa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dfa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f000 fc6d 	bl	800e884 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	691b      	ldr	r3, [r3, #16]
 800dfb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfb4:	2b40      	cmp	r3, #64	; 0x40
 800dfb6:	d10e      	bne.n	800dfd6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	68db      	ldr	r3, [r3, #12]
 800dfbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfc2:	2b40      	cmp	r3, #64	; 0x40
 800dfc4:	d107      	bne.n	800dfd6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dfce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f000 f8ff 	bl	800e1d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	691b      	ldr	r3, [r3, #16]
 800dfdc:	f003 0320 	and.w	r3, r3, #32
 800dfe0:	2b20      	cmp	r3, #32
 800dfe2:	d10e      	bne.n	800e002 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	68db      	ldr	r3, [r3, #12]
 800dfea:	f003 0320 	and.w	r3, r3, #32
 800dfee:	2b20      	cmp	r3, #32
 800dff0:	d107      	bne.n	800e002 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f06f 0220 	mvn.w	r2, #32
 800dffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f000 fc37 	bl	800e870 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e002:	bf00      	nop
 800e004:	3708      	adds	r7, #8
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}
	...

0800e00c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b084      	sub	sp, #16
 800e010:	af00      	add	r7, sp, #0
 800e012:	60f8      	str	r0, [r7, #12]
 800e014:	60b9      	str	r1, [r7, #8]
 800e016:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e01e:	2b01      	cmp	r3, #1
 800e020:	d101      	bne.n	800e026 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e022:	2302      	movs	r3, #2
 800e024:	e0b4      	b.n	800e190 <HAL_TIM_PWM_ConfigChannel+0x184>
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	2201      	movs	r2, #1
 800e02a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	2202      	movs	r2, #2
 800e032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2b0c      	cmp	r3, #12
 800e03a:	f200 809f 	bhi.w	800e17c <HAL_TIM_PWM_ConfigChannel+0x170>
 800e03e:	a201      	add	r2, pc, #4	; (adr r2, 800e044 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800e040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e044:	0800e079 	.word	0x0800e079
 800e048:	0800e17d 	.word	0x0800e17d
 800e04c:	0800e17d 	.word	0x0800e17d
 800e050:	0800e17d 	.word	0x0800e17d
 800e054:	0800e0b9 	.word	0x0800e0b9
 800e058:	0800e17d 	.word	0x0800e17d
 800e05c:	0800e17d 	.word	0x0800e17d
 800e060:	0800e17d 	.word	0x0800e17d
 800e064:	0800e0fb 	.word	0x0800e0fb
 800e068:	0800e17d 	.word	0x0800e17d
 800e06c:	0800e17d 	.word	0x0800e17d
 800e070:	0800e17d 	.word	0x0800e17d
 800e074:	0800e13b 	.word	0x0800e13b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	68b9      	ldr	r1, [r7, #8]
 800e07e:	4618      	mov	r0, r3
 800e080:	f000 f952 	bl	800e328 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	699a      	ldr	r2, [r3, #24]
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	f042 0208 	orr.w	r2, r2, #8
 800e092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	699a      	ldr	r2, [r3, #24]
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	f022 0204 	bic.w	r2, r2, #4
 800e0a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	6999      	ldr	r1, [r3, #24]
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	691a      	ldr	r2, [r3, #16]
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	430a      	orrs	r2, r1
 800e0b4:	619a      	str	r2, [r3, #24]
      break;
 800e0b6:	e062      	b.n	800e17e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	68b9      	ldr	r1, [r7, #8]
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f000 f9a2 	bl	800e408 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	699a      	ldr	r2, [r3, #24]
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e0d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	699a      	ldr	r2, [r3, #24]
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e0e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	6999      	ldr	r1, [r3, #24]
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	691b      	ldr	r3, [r3, #16]
 800e0ee:	021a      	lsls	r2, r3, #8
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	430a      	orrs	r2, r1
 800e0f6:	619a      	str	r2, [r3, #24]
      break;
 800e0f8:	e041      	b.n	800e17e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	68b9      	ldr	r1, [r7, #8]
 800e100:	4618      	mov	r0, r3
 800e102:	f000 f9f7 	bl	800e4f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	69da      	ldr	r2, [r3, #28]
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	f042 0208 	orr.w	r2, r2, #8
 800e114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	69da      	ldr	r2, [r3, #28]
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f022 0204 	bic.w	r2, r2, #4
 800e124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	69d9      	ldr	r1, [r3, #28]
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	691a      	ldr	r2, [r3, #16]
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	430a      	orrs	r2, r1
 800e136:	61da      	str	r2, [r3, #28]
      break;
 800e138:	e021      	b.n	800e17e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	68b9      	ldr	r1, [r7, #8]
 800e140:	4618      	mov	r0, r3
 800e142:	f000 fa4b 	bl	800e5dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	69da      	ldr	r2, [r3, #28]
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	69da      	ldr	r2, [r3, #28]
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	69d9      	ldr	r1, [r3, #28]
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	691b      	ldr	r3, [r3, #16]
 800e170:	021a      	lsls	r2, r3, #8
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	430a      	orrs	r2, r1
 800e178:	61da      	str	r2, [r3, #28]
      break;
 800e17a:	e000      	b.n	800e17e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800e17c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	2201      	movs	r2, #1
 800e182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	2200      	movs	r2, #0
 800e18a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e18e:	2300      	movs	r3, #0
}
 800e190:	4618      	mov	r0, r3
 800e192:	3710      	adds	r7, #16
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}

0800e198 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e198:	b480      	push	{r7}
 800e19a:	b083      	sub	sp, #12
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e1a0:	bf00      	nop
 800e1a2:	370c      	adds	r7, #12
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr

0800e1ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b083      	sub	sp, #12
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e1b4:	bf00      	nop
 800e1b6:	370c      	adds	r7, #12
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr

0800e1c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b083      	sub	sp, #12
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e1c8:	bf00      	nop
 800e1ca:	370c      	adds	r7, #12
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b083      	sub	sp, #12
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e1dc:	bf00      	nop
 800e1de:	370c      	adds	r7, #12
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e6:	4770      	bx	lr

0800e1e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b085      	sub	sp, #20
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	4a40      	ldr	r2, [pc, #256]	; (800e2fc <TIM_Base_SetConfig+0x114>)
 800e1fc:	4293      	cmp	r3, r2
 800e1fe:	d013      	beq.n	800e228 <TIM_Base_SetConfig+0x40>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e206:	d00f      	beq.n	800e228 <TIM_Base_SetConfig+0x40>
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	4a3d      	ldr	r2, [pc, #244]	; (800e300 <TIM_Base_SetConfig+0x118>)
 800e20c:	4293      	cmp	r3, r2
 800e20e:	d00b      	beq.n	800e228 <TIM_Base_SetConfig+0x40>
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	4a3c      	ldr	r2, [pc, #240]	; (800e304 <TIM_Base_SetConfig+0x11c>)
 800e214:	4293      	cmp	r3, r2
 800e216:	d007      	beq.n	800e228 <TIM_Base_SetConfig+0x40>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	4a3b      	ldr	r2, [pc, #236]	; (800e308 <TIM_Base_SetConfig+0x120>)
 800e21c:	4293      	cmp	r3, r2
 800e21e:	d003      	beq.n	800e228 <TIM_Base_SetConfig+0x40>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	4a3a      	ldr	r2, [pc, #232]	; (800e30c <TIM_Base_SetConfig+0x124>)
 800e224:	4293      	cmp	r3, r2
 800e226:	d108      	bne.n	800e23a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e22e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	68fa      	ldr	r2, [r7, #12]
 800e236:	4313      	orrs	r3, r2
 800e238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	4a2f      	ldr	r2, [pc, #188]	; (800e2fc <TIM_Base_SetConfig+0x114>)
 800e23e:	4293      	cmp	r3, r2
 800e240:	d02b      	beq.n	800e29a <TIM_Base_SetConfig+0xb2>
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e248:	d027      	beq.n	800e29a <TIM_Base_SetConfig+0xb2>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	4a2c      	ldr	r2, [pc, #176]	; (800e300 <TIM_Base_SetConfig+0x118>)
 800e24e:	4293      	cmp	r3, r2
 800e250:	d023      	beq.n	800e29a <TIM_Base_SetConfig+0xb2>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	4a2b      	ldr	r2, [pc, #172]	; (800e304 <TIM_Base_SetConfig+0x11c>)
 800e256:	4293      	cmp	r3, r2
 800e258:	d01f      	beq.n	800e29a <TIM_Base_SetConfig+0xb2>
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	4a2a      	ldr	r2, [pc, #168]	; (800e308 <TIM_Base_SetConfig+0x120>)
 800e25e:	4293      	cmp	r3, r2
 800e260:	d01b      	beq.n	800e29a <TIM_Base_SetConfig+0xb2>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	4a29      	ldr	r2, [pc, #164]	; (800e30c <TIM_Base_SetConfig+0x124>)
 800e266:	4293      	cmp	r3, r2
 800e268:	d017      	beq.n	800e29a <TIM_Base_SetConfig+0xb2>
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	4a28      	ldr	r2, [pc, #160]	; (800e310 <TIM_Base_SetConfig+0x128>)
 800e26e:	4293      	cmp	r3, r2
 800e270:	d013      	beq.n	800e29a <TIM_Base_SetConfig+0xb2>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	4a27      	ldr	r2, [pc, #156]	; (800e314 <TIM_Base_SetConfig+0x12c>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d00f      	beq.n	800e29a <TIM_Base_SetConfig+0xb2>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	4a26      	ldr	r2, [pc, #152]	; (800e318 <TIM_Base_SetConfig+0x130>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d00b      	beq.n	800e29a <TIM_Base_SetConfig+0xb2>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	4a25      	ldr	r2, [pc, #148]	; (800e31c <TIM_Base_SetConfig+0x134>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d007      	beq.n	800e29a <TIM_Base_SetConfig+0xb2>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	4a24      	ldr	r2, [pc, #144]	; (800e320 <TIM_Base_SetConfig+0x138>)
 800e28e:	4293      	cmp	r3, r2
 800e290:	d003      	beq.n	800e29a <TIM_Base_SetConfig+0xb2>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	4a23      	ldr	r2, [pc, #140]	; (800e324 <TIM_Base_SetConfig+0x13c>)
 800e296:	4293      	cmp	r3, r2
 800e298:	d108      	bne.n	800e2ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e2a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	68db      	ldr	r3, [r3, #12]
 800e2a6:	68fa      	ldr	r2, [r7, #12]
 800e2a8:	4313      	orrs	r3, r2
 800e2aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	695b      	ldr	r3, [r3, #20]
 800e2b6:	4313      	orrs	r3, r2
 800e2b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	68fa      	ldr	r2, [r7, #12]
 800e2be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	689a      	ldr	r2, [r3, #8]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	681a      	ldr	r2, [r3, #0]
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	4a0a      	ldr	r2, [pc, #40]	; (800e2fc <TIM_Base_SetConfig+0x114>)
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	d003      	beq.n	800e2e0 <TIM_Base_SetConfig+0xf8>
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	4a0c      	ldr	r2, [pc, #48]	; (800e30c <TIM_Base_SetConfig+0x124>)
 800e2dc:	4293      	cmp	r3, r2
 800e2de:	d103      	bne.n	800e2e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	691a      	ldr	r2, [r3, #16]
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	615a      	str	r2, [r3, #20]
}
 800e2ee:	bf00      	nop
 800e2f0:	3714      	adds	r7, #20
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f8:	4770      	bx	lr
 800e2fa:	bf00      	nop
 800e2fc:	40010000 	.word	0x40010000
 800e300:	40000400 	.word	0x40000400
 800e304:	40000800 	.word	0x40000800
 800e308:	40000c00 	.word	0x40000c00
 800e30c:	40010400 	.word	0x40010400
 800e310:	40014000 	.word	0x40014000
 800e314:	40014400 	.word	0x40014400
 800e318:	40014800 	.word	0x40014800
 800e31c:	40001800 	.word	0x40001800
 800e320:	40001c00 	.word	0x40001c00
 800e324:	40002000 	.word	0x40002000

0800e328 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e328:	b480      	push	{r7}
 800e32a:	b087      	sub	sp, #28
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6a1b      	ldr	r3, [r3, #32]
 800e336:	f023 0201 	bic.w	r2, r3, #1
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6a1b      	ldr	r3, [r3, #32]
 800e342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	699b      	ldr	r3, [r3, #24]
 800e34e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f023 0303 	bic.w	r3, r3, #3
 800e35e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	68fa      	ldr	r2, [r7, #12]
 800e366:	4313      	orrs	r3, r2
 800e368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	f023 0302 	bic.w	r3, r3, #2
 800e370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	689b      	ldr	r3, [r3, #8]
 800e376:	697a      	ldr	r2, [r7, #20]
 800e378:	4313      	orrs	r3, r2
 800e37a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	4a20      	ldr	r2, [pc, #128]	; (800e400 <TIM_OC1_SetConfig+0xd8>)
 800e380:	4293      	cmp	r3, r2
 800e382:	d003      	beq.n	800e38c <TIM_OC1_SetConfig+0x64>
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	4a1f      	ldr	r2, [pc, #124]	; (800e404 <TIM_OC1_SetConfig+0xdc>)
 800e388:	4293      	cmp	r3, r2
 800e38a:	d10c      	bne.n	800e3a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	f023 0308 	bic.w	r3, r3, #8
 800e392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	68db      	ldr	r3, [r3, #12]
 800e398:	697a      	ldr	r2, [r7, #20]
 800e39a:	4313      	orrs	r3, r2
 800e39c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	f023 0304 	bic.w	r3, r3, #4
 800e3a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	4a15      	ldr	r2, [pc, #84]	; (800e400 <TIM_OC1_SetConfig+0xd8>)
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d003      	beq.n	800e3b6 <TIM_OC1_SetConfig+0x8e>
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	4a14      	ldr	r2, [pc, #80]	; (800e404 <TIM_OC1_SetConfig+0xdc>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d111      	bne.n	800e3da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e3b6:	693b      	ldr	r3, [r7, #16]
 800e3b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e3bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e3c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	695b      	ldr	r3, [r3, #20]
 800e3ca:	693a      	ldr	r2, [r7, #16]
 800e3cc:	4313      	orrs	r3, r2
 800e3ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	699b      	ldr	r3, [r3, #24]
 800e3d4:	693a      	ldr	r2, [r7, #16]
 800e3d6:	4313      	orrs	r3, r2
 800e3d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	693a      	ldr	r2, [r7, #16]
 800e3de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	68fa      	ldr	r2, [r7, #12]
 800e3e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	685a      	ldr	r2, [r3, #4]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	697a      	ldr	r2, [r7, #20]
 800e3f2:	621a      	str	r2, [r3, #32]
}
 800e3f4:	bf00      	nop
 800e3f6:	371c      	adds	r7, #28
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fe:	4770      	bx	lr
 800e400:	40010000 	.word	0x40010000
 800e404:	40010400 	.word	0x40010400

0800e408 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e408:	b480      	push	{r7}
 800e40a:	b087      	sub	sp, #28
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6a1b      	ldr	r3, [r3, #32]
 800e416:	f023 0210 	bic.w	r2, r3, #16
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6a1b      	ldr	r3, [r3, #32]
 800e422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	685b      	ldr	r3, [r3, #4]
 800e428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	699b      	ldr	r3, [r3, #24]
 800e42e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e43e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	021b      	lsls	r3, r3, #8
 800e446:	68fa      	ldr	r2, [r7, #12]
 800e448:	4313      	orrs	r3, r2
 800e44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	f023 0320 	bic.w	r3, r3, #32
 800e452:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	689b      	ldr	r3, [r3, #8]
 800e458:	011b      	lsls	r3, r3, #4
 800e45a:	697a      	ldr	r2, [r7, #20]
 800e45c:	4313      	orrs	r3, r2
 800e45e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	4a22      	ldr	r2, [pc, #136]	; (800e4ec <TIM_OC2_SetConfig+0xe4>)
 800e464:	4293      	cmp	r3, r2
 800e466:	d003      	beq.n	800e470 <TIM_OC2_SetConfig+0x68>
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	4a21      	ldr	r2, [pc, #132]	; (800e4f0 <TIM_OC2_SetConfig+0xe8>)
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d10d      	bne.n	800e48c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	68db      	ldr	r3, [r3, #12]
 800e47c:	011b      	lsls	r3, r3, #4
 800e47e:	697a      	ldr	r2, [r7, #20]
 800e480:	4313      	orrs	r3, r2
 800e482:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e48a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	4a17      	ldr	r2, [pc, #92]	; (800e4ec <TIM_OC2_SetConfig+0xe4>)
 800e490:	4293      	cmp	r3, r2
 800e492:	d003      	beq.n	800e49c <TIM_OC2_SetConfig+0x94>
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	4a16      	ldr	r2, [pc, #88]	; (800e4f0 <TIM_OC2_SetConfig+0xe8>)
 800e498:	4293      	cmp	r3, r2
 800e49a:	d113      	bne.n	800e4c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e49c:	693b      	ldr	r3, [r7, #16]
 800e49e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e4a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e4aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	695b      	ldr	r3, [r3, #20]
 800e4b0:	009b      	lsls	r3, r3, #2
 800e4b2:	693a      	ldr	r2, [r7, #16]
 800e4b4:	4313      	orrs	r3, r2
 800e4b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	699b      	ldr	r3, [r3, #24]
 800e4bc:	009b      	lsls	r3, r3, #2
 800e4be:	693a      	ldr	r2, [r7, #16]
 800e4c0:	4313      	orrs	r3, r2
 800e4c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	693a      	ldr	r2, [r7, #16]
 800e4c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	68fa      	ldr	r2, [r7, #12]
 800e4ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	685a      	ldr	r2, [r3, #4]
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	697a      	ldr	r2, [r7, #20]
 800e4dc:	621a      	str	r2, [r3, #32]
}
 800e4de:	bf00      	nop
 800e4e0:	371c      	adds	r7, #28
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e8:	4770      	bx	lr
 800e4ea:	bf00      	nop
 800e4ec:	40010000 	.word	0x40010000
 800e4f0:	40010400 	.word	0x40010400

0800e4f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e4f4:	b480      	push	{r7}
 800e4f6:	b087      	sub	sp, #28
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
 800e4fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6a1b      	ldr	r3, [r3, #32]
 800e502:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	6a1b      	ldr	r3, [r3, #32]
 800e50e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	685b      	ldr	r3, [r3, #4]
 800e514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	69db      	ldr	r3, [r3, #28]
 800e51a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	f023 0303 	bic.w	r3, r3, #3
 800e52a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	68fa      	ldr	r2, [r7, #12]
 800e532:	4313      	orrs	r3, r2
 800e534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e53c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	689b      	ldr	r3, [r3, #8]
 800e542:	021b      	lsls	r3, r3, #8
 800e544:	697a      	ldr	r2, [r7, #20]
 800e546:	4313      	orrs	r3, r2
 800e548:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	4a21      	ldr	r2, [pc, #132]	; (800e5d4 <TIM_OC3_SetConfig+0xe0>)
 800e54e:	4293      	cmp	r3, r2
 800e550:	d003      	beq.n	800e55a <TIM_OC3_SetConfig+0x66>
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	4a20      	ldr	r2, [pc, #128]	; (800e5d8 <TIM_OC3_SetConfig+0xe4>)
 800e556:	4293      	cmp	r3, r2
 800e558:	d10d      	bne.n	800e576 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	68db      	ldr	r3, [r3, #12]
 800e566:	021b      	lsls	r3, r3, #8
 800e568:	697a      	ldr	r2, [r7, #20]
 800e56a:	4313      	orrs	r3, r2
 800e56c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e56e:	697b      	ldr	r3, [r7, #20]
 800e570:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	4a16      	ldr	r2, [pc, #88]	; (800e5d4 <TIM_OC3_SetConfig+0xe0>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d003      	beq.n	800e586 <TIM_OC3_SetConfig+0x92>
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	4a15      	ldr	r2, [pc, #84]	; (800e5d8 <TIM_OC3_SetConfig+0xe4>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d113      	bne.n	800e5ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e58c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	695b      	ldr	r3, [r3, #20]
 800e59a:	011b      	lsls	r3, r3, #4
 800e59c:	693a      	ldr	r2, [r7, #16]
 800e59e:	4313      	orrs	r3, r2
 800e5a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	699b      	ldr	r3, [r3, #24]
 800e5a6:	011b      	lsls	r3, r3, #4
 800e5a8:	693a      	ldr	r2, [r7, #16]
 800e5aa:	4313      	orrs	r3, r2
 800e5ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	693a      	ldr	r2, [r7, #16]
 800e5b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	68fa      	ldr	r2, [r7, #12]
 800e5b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	685a      	ldr	r2, [r3, #4]
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	697a      	ldr	r2, [r7, #20]
 800e5c6:	621a      	str	r2, [r3, #32]
}
 800e5c8:	bf00      	nop
 800e5ca:	371c      	adds	r7, #28
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d2:	4770      	bx	lr
 800e5d4:	40010000 	.word	0x40010000
 800e5d8:	40010400 	.word	0x40010400

0800e5dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e5dc:	b480      	push	{r7}
 800e5de:	b087      	sub	sp, #28
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6a1b      	ldr	r3, [r3, #32]
 800e5ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6a1b      	ldr	r3, [r3, #32]
 800e5f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	685b      	ldr	r3, [r3, #4]
 800e5fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	69db      	ldr	r3, [r3, #28]
 800e602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e60a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	021b      	lsls	r3, r3, #8
 800e61a:	68fa      	ldr	r2, [r7, #12]
 800e61c:	4313      	orrs	r3, r2
 800e61e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e620:	693b      	ldr	r3, [r7, #16]
 800e622:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e626:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	689b      	ldr	r3, [r3, #8]
 800e62c:	031b      	lsls	r3, r3, #12
 800e62e:	693a      	ldr	r2, [r7, #16]
 800e630:	4313      	orrs	r3, r2
 800e632:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	4a12      	ldr	r2, [pc, #72]	; (800e680 <TIM_OC4_SetConfig+0xa4>)
 800e638:	4293      	cmp	r3, r2
 800e63a:	d003      	beq.n	800e644 <TIM_OC4_SetConfig+0x68>
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	4a11      	ldr	r2, [pc, #68]	; (800e684 <TIM_OC4_SetConfig+0xa8>)
 800e640:	4293      	cmp	r3, r2
 800e642:	d109      	bne.n	800e658 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e64a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	695b      	ldr	r3, [r3, #20]
 800e650:	019b      	lsls	r3, r3, #6
 800e652:	697a      	ldr	r2, [r7, #20]
 800e654:	4313      	orrs	r3, r2
 800e656:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	697a      	ldr	r2, [r7, #20]
 800e65c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	68fa      	ldr	r2, [r7, #12]
 800e662:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	685a      	ldr	r2, [r3, #4]
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	693a      	ldr	r2, [r7, #16]
 800e670:	621a      	str	r2, [r3, #32]
}
 800e672:	bf00      	nop
 800e674:	371c      	adds	r7, #28
 800e676:	46bd      	mov	sp, r7
 800e678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67c:	4770      	bx	lr
 800e67e:	bf00      	nop
 800e680:	40010000 	.word	0x40010000
 800e684:	40010400 	.word	0x40010400

0800e688 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e688:	b480      	push	{r7}
 800e68a:	b087      	sub	sp, #28
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	60f8      	str	r0, [r7, #12]
 800e690:	60b9      	str	r1, [r7, #8]
 800e692:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	f003 031f 	and.w	r3, r3, #31
 800e69a:	2201      	movs	r2, #1
 800e69c:	fa02 f303 	lsl.w	r3, r2, r3
 800e6a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	6a1a      	ldr	r2, [r3, #32]
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	43db      	mvns	r3, r3
 800e6aa:	401a      	ands	r2, r3
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	6a1a      	ldr	r2, [r3, #32]
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	f003 031f 	and.w	r3, r3, #31
 800e6ba:	6879      	ldr	r1, [r7, #4]
 800e6bc:	fa01 f303 	lsl.w	r3, r1, r3
 800e6c0:	431a      	orrs	r2, r3
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	621a      	str	r2, [r3, #32]
}
 800e6c6:	bf00      	nop
 800e6c8:	371c      	adds	r7, #28
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d0:	4770      	bx	lr
	...

0800e6d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b085      	sub	sp, #20
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e6e4:	2b01      	cmp	r3, #1
 800e6e6:	d101      	bne.n	800e6ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e6e8:	2302      	movs	r3, #2
 800e6ea:	e05a      	b.n	800e7a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2201      	movs	r2, #1
 800e6f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2202      	movs	r2, #2
 800e6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	685b      	ldr	r3, [r3, #4]
 800e702:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	689b      	ldr	r3, [r3, #8]
 800e70a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e712:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	68fa      	ldr	r2, [r7, #12]
 800e71a:	4313      	orrs	r3, r2
 800e71c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	68fa      	ldr	r2, [r7, #12]
 800e724:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	4a21      	ldr	r2, [pc, #132]	; (800e7b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e72c:	4293      	cmp	r3, r2
 800e72e:	d022      	beq.n	800e776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e738:	d01d      	beq.n	800e776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	4a1d      	ldr	r2, [pc, #116]	; (800e7b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e740:	4293      	cmp	r3, r2
 800e742:	d018      	beq.n	800e776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	4a1b      	ldr	r2, [pc, #108]	; (800e7b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d013      	beq.n	800e776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	4a1a      	ldr	r2, [pc, #104]	; (800e7bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e754:	4293      	cmp	r3, r2
 800e756:	d00e      	beq.n	800e776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	4a18      	ldr	r2, [pc, #96]	; (800e7c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e75e:	4293      	cmp	r3, r2
 800e760:	d009      	beq.n	800e776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	4a17      	ldr	r2, [pc, #92]	; (800e7c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e768:	4293      	cmp	r3, r2
 800e76a:	d004      	beq.n	800e776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4a15      	ldr	r2, [pc, #84]	; (800e7c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d10c      	bne.n	800e790 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e77c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	68ba      	ldr	r2, [r7, #8]
 800e784:	4313      	orrs	r3, r2
 800e786:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	68ba      	ldr	r2, [r7, #8]
 800e78e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2201      	movs	r2, #1
 800e794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2200      	movs	r2, #0
 800e79c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e7a0:	2300      	movs	r3, #0
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3714      	adds	r7, #20
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ac:	4770      	bx	lr
 800e7ae:	bf00      	nop
 800e7b0:	40010000 	.word	0x40010000
 800e7b4:	40000400 	.word	0x40000400
 800e7b8:	40000800 	.word	0x40000800
 800e7bc:	40000c00 	.word	0x40000c00
 800e7c0:	40010400 	.word	0x40010400
 800e7c4:	40014000 	.word	0x40014000
 800e7c8:	40001800 	.word	0x40001800

0800e7cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b085      	sub	sp, #20
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
 800e7d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	d101      	bne.n	800e7e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e7e4:	2302      	movs	r3, #2
 800e7e6:	e03d      	b.n	800e864 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	68db      	ldr	r3, [r3, #12]
 800e7fa:	4313      	orrs	r3, r2
 800e7fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	689b      	ldr	r3, [r3, #8]
 800e808:	4313      	orrs	r3, r2
 800e80a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	685b      	ldr	r3, [r3, #4]
 800e816:	4313      	orrs	r3, r2
 800e818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	4313      	orrs	r3, r2
 800e826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	691b      	ldr	r3, [r3, #16]
 800e832:	4313      	orrs	r3, r2
 800e834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	695b      	ldr	r3, [r3, #20]
 800e840:	4313      	orrs	r3, r2
 800e842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	69db      	ldr	r3, [r3, #28]
 800e84e:	4313      	orrs	r3, r2
 800e850:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	68fa      	ldr	r2, [r7, #12]
 800e858:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2200      	movs	r2, #0
 800e85e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e862:	2300      	movs	r3, #0
}
 800e864:	4618      	mov	r0, r3
 800e866:	3714      	adds	r7, #20
 800e868:	46bd      	mov	sp, r7
 800e86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86e:	4770      	bx	lr

0800e870 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e870:	b480      	push	{r7}
 800e872:	b083      	sub	sp, #12
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e878:	bf00      	nop
 800e87a:	370c      	adds	r7, #12
 800e87c:	46bd      	mov	sp, r7
 800e87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e882:	4770      	bx	lr

0800e884 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e884:	b480      	push	{r7}
 800e886:	b083      	sub	sp, #12
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e88c:	bf00      	nop
 800e88e:	370c      	adds	r7, #12
 800e890:	46bd      	mov	sp, r7
 800e892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e896:	4770      	bx	lr

0800e898 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d101      	bne.n	800e8aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	e03f      	b.n	800e92a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e8b0:	b2db      	uxtb	r3, r3
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d106      	bne.n	800e8c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f7f8 fa32 	bl	8006d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2224      	movs	r2, #36	; 0x24
 800e8c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	68da      	ldr	r2, [r3, #12]
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e8da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f000 f829 	bl	800e934 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	691a      	ldr	r2, [r3, #16]
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e8f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	695a      	ldr	r2, [r3, #20]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e900:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	68da      	ldr	r2, [r3, #12]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e910:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2200      	movs	r2, #0
 800e916:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2220      	movs	r2, #32
 800e91c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2220      	movs	r2, #32
 800e924:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800e928:	2300      	movs	r3, #0
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3708      	adds	r7, #8
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
	...

0800e934 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e938:	b085      	sub	sp, #20
 800e93a:	af00      	add	r7, sp, #0
 800e93c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	691b      	ldr	r3, [r3, #16]
 800e944:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	68da      	ldr	r2, [r3, #12]
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	430a      	orrs	r2, r1
 800e952:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	689a      	ldr	r2, [r3, #8]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	691b      	ldr	r3, [r3, #16]
 800e95c:	431a      	orrs	r2, r3
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	695b      	ldr	r3, [r3, #20]
 800e962:	431a      	orrs	r2, r3
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	69db      	ldr	r3, [r3, #28]
 800e968:	4313      	orrs	r3, r2
 800e96a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	68db      	ldr	r3, [r3, #12]
 800e972:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800e976:	f023 030c 	bic.w	r3, r3, #12
 800e97a:	687a      	ldr	r2, [r7, #4]
 800e97c:	6812      	ldr	r2, [r2, #0]
 800e97e:	68f9      	ldr	r1, [r7, #12]
 800e980:	430b      	orrs	r3, r1
 800e982:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	695b      	ldr	r3, [r3, #20]
 800e98a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	699a      	ldr	r2, [r3, #24]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	430a      	orrs	r2, r1
 800e998:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	69db      	ldr	r3, [r3, #28]
 800e99e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9a2:	f040 818b 	bne.w	800ecbc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	4ac1      	ldr	r2, [pc, #772]	; (800ecb0 <UART_SetConfig+0x37c>)
 800e9ac:	4293      	cmp	r3, r2
 800e9ae:	d005      	beq.n	800e9bc <UART_SetConfig+0x88>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	4abf      	ldr	r2, [pc, #764]	; (800ecb4 <UART_SetConfig+0x380>)
 800e9b6:	4293      	cmp	r3, r2
 800e9b8:	f040 80bd 	bne.w	800eb36 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e9bc:	f7fc fbcc 	bl	800b158 <HAL_RCC_GetPCLK2Freq>
 800e9c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e9c2:	68bb      	ldr	r3, [r7, #8]
 800e9c4:	461d      	mov	r5, r3
 800e9c6:	f04f 0600 	mov.w	r6, #0
 800e9ca:	46a8      	mov	r8, r5
 800e9cc:	46b1      	mov	r9, r6
 800e9ce:	eb18 0308 	adds.w	r3, r8, r8
 800e9d2:	eb49 0409 	adc.w	r4, r9, r9
 800e9d6:	4698      	mov	r8, r3
 800e9d8:	46a1      	mov	r9, r4
 800e9da:	eb18 0805 	adds.w	r8, r8, r5
 800e9de:	eb49 0906 	adc.w	r9, r9, r6
 800e9e2:	f04f 0100 	mov.w	r1, #0
 800e9e6:	f04f 0200 	mov.w	r2, #0
 800e9ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e9ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e9f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e9f6:	4688      	mov	r8, r1
 800e9f8:	4691      	mov	r9, r2
 800e9fa:	eb18 0005 	adds.w	r0, r8, r5
 800e9fe:	eb49 0106 	adc.w	r1, r9, r6
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	461d      	mov	r5, r3
 800ea08:	f04f 0600 	mov.w	r6, #0
 800ea0c:	196b      	adds	r3, r5, r5
 800ea0e:	eb46 0406 	adc.w	r4, r6, r6
 800ea12:	461a      	mov	r2, r3
 800ea14:	4623      	mov	r3, r4
 800ea16:	f7f2 f94f 	bl	8000cb8 <__aeabi_uldivmod>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	460c      	mov	r4, r1
 800ea1e:	461a      	mov	r2, r3
 800ea20:	4ba5      	ldr	r3, [pc, #660]	; (800ecb8 <UART_SetConfig+0x384>)
 800ea22:	fba3 2302 	umull	r2, r3, r3, r2
 800ea26:	095b      	lsrs	r3, r3, #5
 800ea28:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	461d      	mov	r5, r3
 800ea30:	f04f 0600 	mov.w	r6, #0
 800ea34:	46a9      	mov	r9, r5
 800ea36:	46b2      	mov	sl, r6
 800ea38:	eb19 0309 	adds.w	r3, r9, r9
 800ea3c:	eb4a 040a 	adc.w	r4, sl, sl
 800ea40:	4699      	mov	r9, r3
 800ea42:	46a2      	mov	sl, r4
 800ea44:	eb19 0905 	adds.w	r9, r9, r5
 800ea48:	eb4a 0a06 	adc.w	sl, sl, r6
 800ea4c:	f04f 0100 	mov.w	r1, #0
 800ea50:	f04f 0200 	mov.w	r2, #0
 800ea54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ea58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ea5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ea60:	4689      	mov	r9, r1
 800ea62:	4692      	mov	sl, r2
 800ea64:	eb19 0005 	adds.w	r0, r9, r5
 800ea68:	eb4a 0106 	adc.w	r1, sl, r6
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	685b      	ldr	r3, [r3, #4]
 800ea70:	461d      	mov	r5, r3
 800ea72:	f04f 0600 	mov.w	r6, #0
 800ea76:	196b      	adds	r3, r5, r5
 800ea78:	eb46 0406 	adc.w	r4, r6, r6
 800ea7c:	461a      	mov	r2, r3
 800ea7e:	4623      	mov	r3, r4
 800ea80:	f7f2 f91a 	bl	8000cb8 <__aeabi_uldivmod>
 800ea84:	4603      	mov	r3, r0
 800ea86:	460c      	mov	r4, r1
 800ea88:	461a      	mov	r2, r3
 800ea8a:	4b8b      	ldr	r3, [pc, #556]	; (800ecb8 <UART_SetConfig+0x384>)
 800ea8c:	fba3 1302 	umull	r1, r3, r3, r2
 800ea90:	095b      	lsrs	r3, r3, #5
 800ea92:	2164      	movs	r1, #100	; 0x64
 800ea94:	fb01 f303 	mul.w	r3, r1, r3
 800ea98:	1ad3      	subs	r3, r2, r3
 800ea9a:	00db      	lsls	r3, r3, #3
 800ea9c:	3332      	adds	r3, #50	; 0x32
 800ea9e:	4a86      	ldr	r2, [pc, #536]	; (800ecb8 <UART_SetConfig+0x384>)
 800eaa0:	fba2 2303 	umull	r2, r3, r2, r3
 800eaa4:	095b      	lsrs	r3, r3, #5
 800eaa6:	005b      	lsls	r3, r3, #1
 800eaa8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800eaac:	4498      	add	r8, r3
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	461d      	mov	r5, r3
 800eab2:	f04f 0600 	mov.w	r6, #0
 800eab6:	46a9      	mov	r9, r5
 800eab8:	46b2      	mov	sl, r6
 800eaba:	eb19 0309 	adds.w	r3, r9, r9
 800eabe:	eb4a 040a 	adc.w	r4, sl, sl
 800eac2:	4699      	mov	r9, r3
 800eac4:	46a2      	mov	sl, r4
 800eac6:	eb19 0905 	adds.w	r9, r9, r5
 800eaca:	eb4a 0a06 	adc.w	sl, sl, r6
 800eace:	f04f 0100 	mov.w	r1, #0
 800ead2:	f04f 0200 	mov.w	r2, #0
 800ead6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eada:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800eade:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800eae2:	4689      	mov	r9, r1
 800eae4:	4692      	mov	sl, r2
 800eae6:	eb19 0005 	adds.w	r0, r9, r5
 800eaea:	eb4a 0106 	adc.w	r1, sl, r6
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	685b      	ldr	r3, [r3, #4]
 800eaf2:	461d      	mov	r5, r3
 800eaf4:	f04f 0600 	mov.w	r6, #0
 800eaf8:	196b      	adds	r3, r5, r5
 800eafa:	eb46 0406 	adc.w	r4, r6, r6
 800eafe:	461a      	mov	r2, r3
 800eb00:	4623      	mov	r3, r4
 800eb02:	f7f2 f8d9 	bl	8000cb8 <__aeabi_uldivmod>
 800eb06:	4603      	mov	r3, r0
 800eb08:	460c      	mov	r4, r1
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	4b6a      	ldr	r3, [pc, #424]	; (800ecb8 <UART_SetConfig+0x384>)
 800eb0e:	fba3 1302 	umull	r1, r3, r3, r2
 800eb12:	095b      	lsrs	r3, r3, #5
 800eb14:	2164      	movs	r1, #100	; 0x64
 800eb16:	fb01 f303 	mul.w	r3, r1, r3
 800eb1a:	1ad3      	subs	r3, r2, r3
 800eb1c:	00db      	lsls	r3, r3, #3
 800eb1e:	3332      	adds	r3, #50	; 0x32
 800eb20:	4a65      	ldr	r2, [pc, #404]	; (800ecb8 <UART_SetConfig+0x384>)
 800eb22:	fba2 2303 	umull	r2, r3, r2, r3
 800eb26:	095b      	lsrs	r3, r3, #5
 800eb28:	f003 0207 	and.w	r2, r3, #7
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	4442      	add	r2, r8
 800eb32:	609a      	str	r2, [r3, #8]
 800eb34:	e26f      	b.n	800f016 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800eb36:	f7fc fafb 	bl	800b130 <HAL_RCC_GetPCLK1Freq>
 800eb3a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	461d      	mov	r5, r3
 800eb40:	f04f 0600 	mov.w	r6, #0
 800eb44:	46a8      	mov	r8, r5
 800eb46:	46b1      	mov	r9, r6
 800eb48:	eb18 0308 	adds.w	r3, r8, r8
 800eb4c:	eb49 0409 	adc.w	r4, r9, r9
 800eb50:	4698      	mov	r8, r3
 800eb52:	46a1      	mov	r9, r4
 800eb54:	eb18 0805 	adds.w	r8, r8, r5
 800eb58:	eb49 0906 	adc.w	r9, r9, r6
 800eb5c:	f04f 0100 	mov.w	r1, #0
 800eb60:	f04f 0200 	mov.w	r2, #0
 800eb64:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800eb68:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800eb6c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800eb70:	4688      	mov	r8, r1
 800eb72:	4691      	mov	r9, r2
 800eb74:	eb18 0005 	adds.w	r0, r8, r5
 800eb78:	eb49 0106 	adc.w	r1, r9, r6
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	685b      	ldr	r3, [r3, #4]
 800eb80:	461d      	mov	r5, r3
 800eb82:	f04f 0600 	mov.w	r6, #0
 800eb86:	196b      	adds	r3, r5, r5
 800eb88:	eb46 0406 	adc.w	r4, r6, r6
 800eb8c:	461a      	mov	r2, r3
 800eb8e:	4623      	mov	r3, r4
 800eb90:	f7f2 f892 	bl	8000cb8 <__aeabi_uldivmod>
 800eb94:	4603      	mov	r3, r0
 800eb96:	460c      	mov	r4, r1
 800eb98:	461a      	mov	r2, r3
 800eb9a:	4b47      	ldr	r3, [pc, #284]	; (800ecb8 <UART_SetConfig+0x384>)
 800eb9c:	fba3 2302 	umull	r2, r3, r3, r2
 800eba0:	095b      	lsrs	r3, r3, #5
 800eba2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	461d      	mov	r5, r3
 800ebaa:	f04f 0600 	mov.w	r6, #0
 800ebae:	46a9      	mov	r9, r5
 800ebb0:	46b2      	mov	sl, r6
 800ebb2:	eb19 0309 	adds.w	r3, r9, r9
 800ebb6:	eb4a 040a 	adc.w	r4, sl, sl
 800ebba:	4699      	mov	r9, r3
 800ebbc:	46a2      	mov	sl, r4
 800ebbe:	eb19 0905 	adds.w	r9, r9, r5
 800ebc2:	eb4a 0a06 	adc.w	sl, sl, r6
 800ebc6:	f04f 0100 	mov.w	r1, #0
 800ebca:	f04f 0200 	mov.w	r2, #0
 800ebce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ebd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ebd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ebda:	4689      	mov	r9, r1
 800ebdc:	4692      	mov	sl, r2
 800ebde:	eb19 0005 	adds.w	r0, r9, r5
 800ebe2:	eb4a 0106 	adc.w	r1, sl, r6
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	461d      	mov	r5, r3
 800ebec:	f04f 0600 	mov.w	r6, #0
 800ebf0:	196b      	adds	r3, r5, r5
 800ebf2:	eb46 0406 	adc.w	r4, r6, r6
 800ebf6:	461a      	mov	r2, r3
 800ebf8:	4623      	mov	r3, r4
 800ebfa:	f7f2 f85d 	bl	8000cb8 <__aeabi_uldivmod>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	460c      	mov	r4, r1
 800ec02:	461a      	mov	r2, r3
 800ec04:	4b2c      	ldr	r3, [pc, #176]	; (800ecb8 <UART_SetConfig+0x384>)
 800ec06:	fba3 1302 	umull	r1, r3, r3, r2
 800ec0a:	095b      	lsrs	r3, r3, #5
 800ec0c:	2164      	movs	r1, #100	; 0x64
 800ec0e:	fb01 f303 	mul.w	r3, r1, r3
 800ec12:	1ad3      	subs	r3, r2, r3
 800ec14:	00db      	lsls	r3, r3, #3
 800ec16:	3332      	adds	r3, #50	; 0x32
 800ec18:	4a27      	ldr	r2, [pc, #156]	; (800ecb8 <UART_SetConfig+0x384>)
 800ec1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ec1e:	095b      	lsrs	r3, r3, #5
 800ec20:	005b      	lsls	r3, r3, #1
 800ec22:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ec26:	4498      	add	r8, r3
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	461d      	mov	r5, r3
 800ec2c:	f04f 0600 	mov.w	r6, #0
 800ec30:	46a9      	mov	r9, r5
 800ec32:	46b2      	mov	sl, r6
 800ec34:	eb19 0309 	adds.w	r3, r9, r9
 800ec38:	eb4a 040a 	adc.w	r4, sl, sl
 800ec3c:	4699      	mov	r9, r3
 800ec3e:	46a2      	mov	sl, r4
 800ec40:	eb19 0905 	adds.w	r9, r9, r5
 800ec44:	eb4a 0a06 	adc.w	sl, sl, r6
 800ec48:	f04f 0100 	mov.w	r1, #0
 800ec4c:	f04f 0200 	mov.w	r2, #0
 800ec50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ec54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ec58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ec5c:	4689      	mov	r9, r1
 800ec5e:	4692      	mov	sl, r2
 800ec60:	eb19 0005 	adds.w	r0, r9, r5
 800ec64:	eb4a 0106 	adc.w	r1, sl, r6
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	685b      	ldr	r3, [r3, #4]
 800ec6c:	461d      	mov	r5, r3
 800ec6e:	f04f 0600 	mov.w	r6, #0
 800ec72:	196b      	adds	r3, r5, r5
 800ec74:	eb46 0406 	adc.w	r4, r6, r6
 800ec78:	461a      	mov	r2, r3
 800ec7a:	4623      	mov	r3, r4
 800ec7c:	f7f2 f81c 	bl	8000cb8 <__aeabi_uldivmod>
 800ec80:	4603      	mov	r3, r0
 800ec82:	460c      	mov	r4, r1
 800ec84:	461a      	mov	r2, r3
 800ec86:	4b0c      	ldr	r3, [pc, #48]	; (800ecb8 <UART_SetConfig+0x384>)
 800ec88:	fba3 1302 	umull	r1, r3, r3, r2
 800ec8c:	095b      	lsrs	r3, r3, #5
 800ec8e:	2164      	movs	r1, #100	; 0x64
 800ec90:	fb01 f303 	mul.w	r3, r1, r3
 800ec94:	1ad3      	subs	r3, r2, r3
 800ec96:	00db      	lsls	r3, r3, #3
 800ec98:	3332      	adds	r3, #50	; 0x32
 800ec9a:	4a07      	ldr	r2, [pc, #28]	; (800ecb8 <UART_SetConfig+0x384>)
 800ec9c:	fba2 2303 	umull	r2, r3, r2, r3
 800eca0:	095b      	lsrs	r3, r3, #5
 800eca2:	f003 0207 	and.w	r2, r3, #7
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	4442      	add	r2, r8
 800ecac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800ecae:	e1b2      	b.n	800f016 <UART_SetConfig+0x6e2>
 800ecb0:	40011000 	.word	0x40011000
 800ecb4:	40011400 	.word	0x40011400
 800ecb8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4ad7      	ldr	r2, [pc, #860]	; (800f020 <UART_SetConfig+0x6ec>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d005      	beq.n	800ecd2 <UART_SetConfig+0x39e>
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	4ad6      	ldr	r2, [pc, #856]	; (800f024 <UART_SetConfig+0x6f0>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	f040 80d1 	bne.w	800ee74 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800ecd2:	f7fc fa41 	bl	800b158 <HAL_RCC_GetPCLK2Freq>
 800ecd6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	469a      	mov	sl, r3
 800ecdc:	f04f 0b00 	mov.w	fp, #0
 800ece0:	46d0      	mov	r8, sl
 800ece2:	46d9      	mov	r9, fp
 800ece4:	eb18 0308 	adds.w	r3, r8, r8
 800ece8:	eb49 0409 	adc.w	r4, r9, r9
 800ecec:	4698      	mov	r8, r3
 800ecee:	46a1      	mov	r9, r4
 800ecf0:	eb18 080a 	adds.w	r8, r8, sl
 800ecf4:	eb49 090b 	adc.w	r9, r9, fp
 800ecf8:	f04f 0100 	mov.w	r1, #0
 800ecfc:	f04f 0200 	mov.w	r2, #0
 800ed00:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ed04:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ed08:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ed0c:	4688      	mov	r8, r1
 800ed0e:	4691      	mov	r9, r2
 800ed10:	eb1a 0508 	adds.w	r5, sl, r8
 800ed14:	eb4b 0609 	adc.w	r6, fp, r9
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	f04f 0200 	mov.w	r2, #0
 800ed22:	f04f 0300 	mov.w	r3, #0
 800ed26:	f04f 0400 	mov.w	r4, #0
 800ed2a:	0094      	lsls	r4, r2, #2
 800ed2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ed30:	008b      	lsls	r3, r1, #2
 800ed32:	461a      	mov	r2, r3
 800ed34:	4623      	mov	r3, r4
 800ed36:	4628      	mov	r0, r5
 800ed38:	4631      	mov	r1, r6
 800ed3a:	f7f1 ffbd 	bl	8000cb8 <__aeabi_uldivmod>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	460c      	mov	r4, r1
 800ed42:	461a      	mov	r2, r3
 800ed44:	4bb8      	ldr	r3, [pc, #736]	; (800f028 <UART_SetConfig+0x6f4>)
 800ed46:	fba3 2302 	umull	r2, r3, r3, r2
 800ed4a:	095b      	lsrs	r3, r3, #5
 800ed4c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	469b      	mov	fp, r3
 800ed54:	f04f 0c00 	mov.w	ip, #0
 800ed58:	46d9      	mov	r9, fp
 800ed5a:	46e2      	mov	sl, ip
 800ed5c:	eb19 0309 	adds.w	r3, r9, r9
 800ed60:	eb4a 040a 	adc.w	r4, sl, sl
 800ed64:	4699      	mov	r9, r3
 800ed66:	46a2      	mov	sl, r4
 800ed68:	eb19 090b 	adds.w	r9, r9, fp
 800ed6c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ed70:	f04f 0100 	mov.w	r1, #0
 800ed74:	f04f 0200 	mov.w	r2, #0
 800ed78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ed7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ed80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ed84:	4689      	mov	r9, r1
 800ed86:	4692      	mov	sl, r2
 800ed88:	eb1b 0509 	adds.w	r5, fp, r9
 800ed8c:	eb4c 060a 	adc.w	r6, ip, sl
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	685b      	ldr	r3, [r3, #4]
 800ed94:	4619      	mov	r1, r3
 800ed96:	f04f 0200 	mov.w	r2, #0
 800ed9a:	f04f 0300 	mov.w	r3, #0
 800ed9e:	f04f 0400 	mov.w	r4, #0
 800eda2:	0094      	lsls	r4, r2, #2
 800eda4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800eda8:	008b      	lsls	r3, r1, #2
 800edaa:	461a      	mov	r2, r3
 800edac:	4623      	mov	r3, r4
 800edae:	4628      	mov	r0, r5
 800edb0:	4631      	mov	r1, r6
 800edb2:	f7f1 ff81 	bl	8000cb8 <__aeabi_uldivmod>
 800edb6:	4603      	mov	r3, r0
 800edb8:	460c      	mov	r4, r1
 800edba:	461a      	mov	r2, r3
 800edbc:	4b9a      	ldr	r3, [pc, #616]	; (800f028 <UART_SetConfig+0x6f4>)
 800edbe:	fba3 1302 	umull	r1, r3, r3, r2
 800edc2:	095b      	lsrs	r3, r3, #5
 800edc4:	2164      	movs	r1, #100	; 0x64
 800edc6:	fb01 f303 	mul.w	r3, r1, r3
 800edca:	1ad3      	subs	r3, r2, r3
 800edcc:	011b      	lsls	r3, r3, #4
 800edce:	3332      	adds	r3, #50	; 0x32
 800edd0:	4a95      	ldr	r2, [pc, #596]	; (800f028 <UART_SetConfig+0x6f4>)
 800edd2:	fba2 2303 	umull	r2, r3, r2, r3
 800edd6:	095b      	lsrs	r3, r3, #5
 800edd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eddc:	4498      	add	r8, r3
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	469b      	mov	fp, r3
 800ede2:	f04f 0c00 	mov.w	ip, #0
 800ede6:	46d9      	mov	r9, fp
 800ede8:	46e2      	mov	sl, ip
 800edea:	eb19 0309 	adds.w	r3, r9, r9
 800edee:	eb4a 040a 	adc.w	r4, sl, sl
 800edf2:	4699      	mov	r9, r3
 800edf4:	46a2      	mov	sl, r4
 800edf6:	eb19 090b 	adds.w	r9, r9, fp
 800edfa:	eb4a 0a0c 	adc.w	sl, sl, ip
 800edfe:	f04f 0100 	mov.w	r1, #0
 800ee02:	f04f 0200 	mov.w	r2, #0
 800ee06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ee0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ee0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ee12:	4689      	mov	r9, r1
 800ee14:	4692      	mov	sl, r2
 800ee16:	eb1b 0509 	adds.w	r5, fp, r9
 800ee1a:	eb4c 060a 	adc.w	r6, ip, sl
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	685b      	ldr	r3, [r3, #4]
 800ee22:	4619      	mov	r1, r3
 800ee24:	f04f 0200 	mov.w	r2, #0
 800ee28:	f04f 0300 	mov.w	r3, #0
 800ee2c:	f04f 0400 	mov.w	r4, #0
 800ee30:	0094      	lsls	r4, r2, #2
 800ee32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ee36:	008b      	lsls	r3, r1, #2
 800ee38:	461a      	mov	r2, r3
 800ee3a:	4623      	mov	r3, r4
 800ee3c:	4628      	mov	r0, r5
 800ee3e:	4631      	mov	r1, r6
 800ee40:	f7f1 ff3a 	bl	8000cb8 <__aeabi_uldivmod>
 800ee44:	4603      	mov	r3, r0
 800ee46:	460c      	mov	r4, r1
 800ee48:	461a      	mov	r2, r3
 800ee4a:	4b77      	ldr	r3, [pc, #476]	; (800f028 <UART_SetConfig+0x6f4>)
 800ee4c:	fba3 1302 	umull	r1, r3, r3, r2
 800ee50:	095b      	lsrs	r3, r3, #5
 800ee52:	2164      	movs	r1, #100	; 0x64
 800ee54:	fb01 f303 	mul.w	r3, r1, r3
 800ee58:	1ad3      	subs	r3, r2, r3
 800ee5a:	011b      	lsls	r3, r3, #4
 800ee5c:	3332      	adds	r3, #50	; 0x32
 800ee5e:	4a72      	ldr	r2, [pc, #456]	; (800f028 <UART_SetConfig+0x6f4>)
 800ee60:	fba2 2303 	umull	r2, r3, r2, r3
 800ee64:	095b      	lsrs	r3, r3, #5
 800ee66:	f003 020f 	and.w	r2, r3, #15
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	4442      	add	r2, r8
 800ee70:	609a      	str	r2, [r3, #8]
 800ee72:	e0d0      	b.n	800f016 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ee74:	f7fc f95c 	bl	800b130 <HAL_RCC_GetPCLK1Freq>
 800ee78:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	469a      	mov	sl, r3
 800ee7e:	f04f 0b00 	mov.w	fp, #0
 800ee82:	46d0      	mov	r8, sl
 800ee84:	46d9      	mov	r9, fp
 800ee86:	eb18 0308 	adds.w	r3, r8, r8
 800ee8a:	eb49 0409 	adc.w	r4, r9, r9
 800ee8e:	4698      	mov	r8, r3
 800ee90:	46a1      	mov	r9, r4
 800ee92:	eb18 080a 	adds.w	r8, r8, sl
 800ee96:	eb49 090b 	adc.w	r9, r9, fp
 800ee9a:	f04f 0100 	mov.w	r1, #0
 800ee9e:	f04f 0200 	mov.w	r2, #0
 800eea2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800eea6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800eeaa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800eeae:	4688      	mov	r8, r1
 800eeb0:	4691      	mov	r9, r2
 800eeb2:	eb1a 0508 	adds.w	r5, sl, r8
 800eeb6:	eb4b 0609 	adc.w	r6, fp, r9
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	4619      	mov	r1, r3
 800eec0:	f04f 0200 	mov.w	r2, #0
 800eec4:	f04f 0300 	mov.w	r3, #0
 800eec8:	f04f 0400 	mov.w	r4, #0
 800eecc:	0094      	lsls	r4, r2, #2
 800eece:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800eed2:	008b      	lsls	r3, r1, #2
 800eed4:	461a      	mov	r2, r3
 800eed6:	4623      	mov	r3, r4
 800eed8:	4628      	mov	r0, r5
 800eeda:	4631      	mov	r1, r6
 800eedc:	f7f1 feec 	bl	8000cb8 <__aeabi_uldivmod>
 800eee0:	4603      	mov	r3, r0
 800eee2:	460c      	mov	r4, r1
 800eee4:	461a      	mov	r2, r3
 800eee6:	4b50      	ldr	r3, [pc, #320]	; (800f028 <UART_SetConfig+0x6f4>)
 800eee8:	fba3 2302 	umull	r2, r3, r3, r2
 800eeec:	095b      	lsrs	r3, r3, #5
 800eeee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	469b      	mov	fp, r3
 800eef6:	f04f 0c00 	mov.w	ip, #0
 800eefa:	46d9      	mov	r9, fp
 800eefc:	46e2      	mov	sl, ip
 800eefe:	eb19 0309 	adds.w	r3, r9, r9
 800ef02:	eb4a 040a 	adc.w	r4, sl, sl
 800ef06:	4699      	mov	r9, r3
 800ef08:	46a2      	mov	sl, r4
 800ef0a:	eb19 090b 	adds.w	r9, r9, fp
 800ef0e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ef12:	f04f 0100 	mov.w	r1, #0
 800ef16:	f04f 0200 	mov.w	r2, #0
 800ef1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ef1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ef22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ef26:	4689      	mov	r9, r1
 800ef28:	4692      	mov	sl, r2
 800ef2a:	eb1b 0509 	adds.w	r5, fp, r9
 800ef2e:	eb4c 060a 	adc.w	r6, ip, sl
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	685b      	ldr	r3, [r3, #4]
 800ef36:	4619      	mov	r1, r3
 800ef38:	f04f 0200 	mov.w	r2, #0
 800ef3c:	f04f 0300 	mov.w	r3, #0
 800ef40:	f04f 0400 	mov.w	r4, #0
 800ef44:	0094      	lsls	r4, r2, #2
 800ef46:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ef4a:	008b      	lsls	r3, r1, #2
 800ef4c:	461a      	mov	r2, r3
 800ef4e:	4623      	mov	r3, r4
 800ef50:	4628      	mov	r0, r5
 800ef52:	4631      	mov	r1, r6
 800ef54:	f7f1 feb0 	bl	8000cb8 <__aeabi_uldivmod>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	460c      	mov	r4, r1
 800ef5c:	461a      	mov	r2, r3
 800ef5e:	4b32      	ldr	r3, [pc, #200]	; (800f028 <UART_SetConfig+0x6f4>)
 800ef60:	fba3 1302 	umull	r1, r3, r3, r2
 800ef64:	095b      	lsrs	r3, r3, #5
 800ef66:	2164      	movs	r1, #100	; 0x64
 800ef68:	fb01 f303 	mul.w	r3, r1, r3
 800ef6c:	1ad3      	subs	r3, r2, r3
 800ef6e:	011b      	lsls	r3, r3, #4
 800ef70:	3332      	adds	r3, #50	; 0x32
 800ef72:	4a2d      	ldr	r2, [pc, #180]	; (800f028 <UART_SetConfig+0x6f4>)
 800ef74:	fba2 2303 	umull	r2, r3, r2, r3
 800ef78:	095b      	lsrs	r3, r3, #5
 800ef7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ef7e:	4498      	add	r8, r3
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	469b      	mov	fp, r3
 800ef84:	f04f 0c00 	mov.w	ip, #0
 800ef88:	46d9      	mov	r9, fp
 800ef8a:	46e2      	mov	sl, ip
 800ef8c:	eb19 0309 	adds.w	r3, r9, r9
 800ef90:	eb4a 040a 	adc.w	r4, sl, sl
 800ef94:	4699      	mov	r9, r3
 800ef96:	46a2      	mov	sl, r4
 800ef98:	eb19 090b 	adds.w	r9, r9, fp
 800ef9c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800efa0:	f04f 0100 	mov.w	r1, #0
 800efa4:	f04f 0200 	mov.w	r2, #0
 800efa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800efac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800efb0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800efb4:	4689      	mov	r9, r1
 800efb6:	4692      	mov	sl, r2
 800efb8:	eb1b 0509 	adds.w	r5, fp, r9
 800efbc:	eb4c 060a 	adc.w	r6, ip, sl
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	685b      	ldr	r3, [r3, #4]
 800efc4:	4619      	mov	r1, r3
 800efc6:	f04f 0200 	mov.w	r2, #0
 800efca:	f04f 0300 	mov.w	r3, #0
 800efce:	f04f 0400 	mov.w	r4, #0
 800efd2:	0094      	lsls	r4, r2, #2
 800efd4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800efd8:	008b      	lsls	r3, r1, #2
 800efda:	461a      	mov	r2, r3
 800efdc:	4623      	mov	r3, r4
 800efde:	4628      	mov	r0, r5
 800efe0:	4631      	mov	r1, r6
 800efe2:	f7f1 fe69 	bl	8000cb8 <__aeabi_uldivmod>
 800efe6:	4603      	mov	r3, r0
 800efe8:	460c      	mov	r4, r1
 800efea:	461a      	mov	r2, r3
 800efec:	4b0e      	ldr	r3, [pc, #56]	; (800f028 <UART_SetConfig+0x6f4>)
 800efee:	fba3 1302 	umull	r1, r3, r3, r2
 800eff2:	095b      	lsrs	r3, r3, #5
 800eff4:	2164      	movs	r1, #100	; 0x64
 800eff6:	fb01 f303 	mul.w	r3, r1, r3
 800effa:	1ad3      	subs	r3, r2, r3
 800effc:	011b      	lsls	r3, r3, #4
 800effe:	3332      	adds	r3, #50	; 0x32
 800f000:	4a09      	ldr	r2, [pc, #36]	; (800f028 <UART_SetConfig+0x6f4>)
 800f002:	fba2 2303 	umull	r2, r3, r2, r3
 800f006:	095b      	lsrs	r3, r3, #5
 800f008:	f003 020f 	and.w	r2, r3, #15
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	4442      	add	r2, r8
 800f012:	609a      	str	r2, [r3, #8]
}
 800f014:	e7ff      	b.n	800f016 <UART_SetConfig+0x6e2>
 800f016:	bf00      	nop
 800f018:	3714      	adds	r7, #20
 800f01a:	46bd      	mov	sp, r7
 800f01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f020:	40011000 	.word	0x40011000
 800f024:	40011400 	.word	0x40011400
 800f028:	51eb851f 	.word	0x51eb851f

0800f02c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800f02c:	b084      	sub	sp, #16
 800f02e:	b480      	push	{r7}
 800f030:	b085      	sub	sp, #20
 800f032:	af00      	add	r7, sp, #0
 800f034:	6078      	str	r0, [r7, #4]
 800f036:	f107 001c 	add.w	r0, r7, #28
 800f03a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f03e:	2300      	movs	r3, #0
 800f040:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800f042:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800f044:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f046:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800f048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800f04a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800f04e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800f052:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800f056:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f058:	68fa      	ldr	r2, [r7, #12]
 800f05a:	4313      	orrs	r3, r2
 800f05c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	685b      	ldr	r3, [r3, #4]
 800f062:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800f066:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f06a:	68fa      	ldr	r2, [r7, #12]
 800f06c:	431a      	orrs	r2, r3
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f072:	2300      	movs	r3, #0
}
 800f074:	4618      	mov	r0, r3
 800f076:	3714      	adds	r7, #20
 800f078:	46bd      	mov	sp, r7
 800f07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07e:	b004      	add	sp, #16
 800f080:	4770      	bx	lr

0800f082 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800f082:	b480      	push	{r7}
 800f084:	b083      	sub	sp, #12
 800f086:	af00      	add	r7, sp, #0
 800f088:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f090:	4618      	mov	r0, r3
 800f092:	370c      	adds	r7, #12
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr

0800f09c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800f09c:	b480      	push	{r7}
 800f09e:	b083      	sub	sp, #12
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	681a      	ldr	r2, [r3, #0]
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f0b0:	2300      	movs	r3, #0
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	370c      	adds	r7, #12
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0bc:	4770      	bx	lr

0800f0be <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800f0be:	b580      	push	{r7, lr}
 800f0c0:	b082      	sub	sp, #8
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2203      	movs	r2, #3
 800f0ca:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800f0cc:	2002      	movs	r0, #2
 800f0ce:	f7f9 fbdd 	bl	800888c <HAL_Delay>
  
  return HAL_OK;
 800f0d2:	2300      	movs	r3, #0
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3708      	adds	r7, #8
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}

0800f0dc <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b083      	sub	sp, #12
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	f003 0303 	and.w	r3, r3, #3
}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	370c      	adds	r7, #12
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f6:	4770      	bx	lr

0800f0f8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800f0f8:	b480      	push	{r7}
 800f0fa:	b085      	sub	sp, #20
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
 800f100:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f102:	2300      	movs	r3, #0
 800f104:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	681a      	ldr	r2, [r3, #0]
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f116:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f11c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f122:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f124:	68fa      	ldr	r2, [r7, #12]
 800f126:	4313      	orrs	r3, r2
 800f128:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	68db      	ldr	r3, [r3, #12]
 800f12e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f132:	f023 030f 	bic.w	r3, r3, #15
 800f136:	68fa      	ldr	r2, [r7, #12]
 800f138:	431a      	orrs	r2, r3
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800f13e:	2300      	movs	r3, #0
}
 800f140:	4618      	mov	r0, r3
 800f142:	3714      	adds	r7, #20
 800f144:	46bd      	mov	sp, r7
 800f146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14a:	4770      	bx	lr

0800f14c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800f14c:	b480      	push	{r7}
 800f14e:	b083      	sub	sp, #12
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	691b      	ldr	r3, [r3, #16]
 800f158:	b2db      	uxtb	r3, r3
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	370c      	adds	r7, #12
 800f15e:	46bd      	mov	sp, r7
 800f160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f164:	4770      	bx	lr

0800f166 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800f166:	b480      	push	{r7}
 800f168:	b085      	sub	sp, #20
 800f16a:	af00      	add	r7, sp, #0
 800f16c:	6078      	str	r0, [r7, #4]
 800f16e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	3314      	adds	r3, #20
 800f174:	461a      	mov	r2, r3
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	4413      	add	r3, r2
 800f17a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	681b      	ldr	r3, [r3, #0]
}  
 800f180:	4618      	mov	r0, r3
 800f182:	3714      	adds	r7, #20
 800f184:	46bd      	mov	sp, r7
 800f186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18a:	4770      	bx	lr

0800f18c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800f18c:	b480      	push	{r7}
 800f18e:	b085      	sub	sp, #20
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
 800f194:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f196:	2300      	movs	r3, #0
 800f198:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	681a      	ldr	r2, [r3, #0]
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	685a      	ldr	r2, [r3, #4]
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f1b2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f1b8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f1be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f1c0:	68fa      	ldr	r2, [r7, #12]
 800f1c2:	4313      	orrs	r3, r2
 800f1c4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ca:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	431a      	orrs	r2, r3
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f1d6:	2300      	movs	r3, #0

}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	3714      	adds	r7, #20
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e2:	4770      	bx	lr

0800f1e4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b088      	sub	sp, #32
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f1f2:	2310      	movs	r3, #16
 800f1f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f1f6:	2340      	movs	r3, #64	; 0x40
 800f1f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f1fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f202:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f204:	f107 0308 	add.w	r3, r7, #8
 800f208:	4619      	mov	r1, r3
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f7ff ff74 	bl	800f0f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800f210:	f241 3288 	movw	r2, #5000	; 0x1388
 800f214:	2110      	movs	r1, #16
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	f000 fa40 	bl	800f69c <SDMMC_GetCmdResp1>
 800f21c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f21e:	69fb      	ldr	r3, [r7, #28]
}
 800f220:	4618      	mov	r0, r3
 800f222:	3720      	adds	r7, #32
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}

0800f228 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b088      	sub	sp, #32
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
 800f230:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f236:	2311      	movs	r3, #17
 800f238:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f23a:	2340      	movs	r3, #64	; 0x40
 800f23c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f23e:	2300      	movs	r3, #0
 800f240:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f246:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f248:	f107 0308 	add.w	r3, r7, #8
 800f24c:	4619      	mov	r1, r3
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f7ff ff52 	bl	800f0f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f254:	f241 3288 	movw	r2, #5000	; 0x1388
 800f258:	2111      	movs	r1, #17
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	f000 fa1e 	bl	800f69c <SDMMC_GetCmdResp1>
 800f260:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f262:	69fb      	ldr	r3, [r7, #28]
}
 800f264:	4618      	mov	r0, r3
 800f266:	3720      	adds	r7, #32
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}

0800f26c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b088      	sub	sp, #32
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f27a:	2312      	movs	r3, #18
 800f27c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f27e:	2340      	movs	r3, #64	; 0x40
 800f280:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f282:	2300      	movs	r3, #0
 800f284:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f28a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f28c:	f107 0308 	add.w	r3, r7, #8
 800f290:	4619      	mov	r1, r3
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f7ff ff30 	bl	800f0f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f298:	f241 3288 	movw	r2, #5000	; 0x1388
 800f29c:	2112      	movs	r1, #18
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f000 f9fc 	bl	800f69c <SDMMC_GetCmdResp1>
 800f2a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f2a6:	69fb      	ldr	r3, [r7, #28]
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	3720      	adds	r7, #32
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}

0800f2b0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b088      	sub	sp, #32
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f2be:	2318      	movs	r3, #24
 800f2c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f2c2:	2340      	movs	r3, #64	; 0x40
 800f2c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f2ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f2d0:	f107 0308 	add.w	r3, r7, #8
 800f2d4:	4619      	mov	r1, r3
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f7ff ff0e 	bl	800f0f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f2dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800f2e0:	2118      	movs	r1, #24
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f000 f9da 	bl	800f69c <SDMMC_GetCmdResp1>
 800f2e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f2ea:	69fb      	ldr	r3, [r7, #28]
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3720      	adds	r7, #32
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}

0800f2f4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b088      	sub	sp, #32
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
 800f2fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f302:	2319      	movs	r3, #25
 800f304:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f306:	2340      	movs	r3, #64	; 0x40
 800f308:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f30a:	2300      	movs	r3, #0
 800f30c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f30e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f312:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f314:	f107 0308 	add.w	r3, r7, #8
 800f318:	4619      	mov	r1, r3
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f7ff feec 	bl	800f0f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f320:	f241 3288 	movw	r2, #5000	; 0x1388
 800f324:	2119      	movs	r1, #25
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f000 f9b8 	bl	800f69c <SDMMC_GetCmdResp1>
 800f32c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f32e:	69fb      	ldr	r3, [r7, #28]
}
 800f330:	4618      	mov	r0, r3
 800f332:	3720      	adds	r7, #32
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}

0800f338 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b088      	sub	sp, #32
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f340:	2300      	movs	r3, #0
 800f342:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f344:	230c      	movs	r3, #12
 800f346:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f348:	2340      	movs	r3, #64	; 0x40
 800f34a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f34c:	2300      	movs	r3, #0
 800f34e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f354:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f356:	f107 0308 	add.w	r3, r7, #8
 800f35a:	4619      	mov	r1, r3
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f7ff fecb 	bl	800f0f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800f362:	4a05      	ldr	r2, [pc, #20]	; (800f378 <SDMMC_CmdStopTransfer+0x40>)
 800f364:	210c      	movs	r1, #12
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f000 f998 	bl	800f69c <SDMMC_GetCmdResp1>
 800f36c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f36e:	69fb      	ldr	r3, [r7, #28]
}
 800f370:	4618      	mov	r0, r3
 800f372:	3720      	adds	r7, #32
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}
 800f378:	05f5e100 	.word	0x05f5e100

0800f37c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b08a      	sub	sp, #40	; 0x28
 800f380:	af00      	add	r7, sp, #0
 800f382:	60f8      	str	r0, [r7, #12]
 800f384:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f38c:	2307      	movs	r3, #7
 800f38e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f390:	2340      	movs	r3, #64	; 0x40
 800f392:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f394:	2300      	movs	r3, #0
 800f396:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f39c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f39e:	f107 0310 	add.w	r3, r7, #16
 800f3a2:	4619      	mov	r1, r3
 800f3a4:	68f8      	ldr	r0, [r7, #12]
 800f3a6:	f7ff fea7 	bl	800f0f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800f3aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800f3ae:	2107      	movs	r1, #7
 800f3b0:	68f8      	ldr	r0, [r7, #12]
 800f3b2:	f000 f973 	bl	800f69c <SDMMC_GetCmdResp1>
 800f3b6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800f3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3728      	adds	r7, #40	; 0x28
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}

0800f3c2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800f3c2:	b580      	push	{r7, lr}
 800f3c4:	b088      	sub	sp, #32
 800f3c6:	af00      	add	r7, sp, #0
 800f3c8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f3da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f3de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f3e0:	f107 0308 	add.w	r3, r7, #8
 800f3e4:	4619      	mov	r1, r3
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f7ff fe86 	bl	800f0f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	f000 f92d 	bl	800f64c <SDMMC_GetCmdError>
 800f3f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f3f4:	69fb      	ldr	r3, [r7, #28]
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3720      	adds	r7, #32
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}

0800f3fe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800f3fe:	b580      	push	{r7, lr}
 800f400:	b088      	sub	sp, #32
 800f402:	af00      	add	r7, sp, #0
 800f404:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f406:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f40a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f40c:	2308      	movs	r3, #8
 800f40e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f410:	2340      	movs	r3, #64	; 0x40
 800f412:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f414:	2300      	movs	r3, #0
 800f416:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f41c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f41e:	f107 0308 	add.w	r3, r7, #8
 800f422:	4619      	mov	r1, r3
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f7ff fe67 	bl	800f0f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f000 fb16 	bl	800fa5c <SDMMC_GetCmdResp7>
 800f430:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f432:	69fb      	ldr	r3, [r7, #28]
}
 800f434:	4618      	mov	r0, r3
 800f436:	3720      	adds	r7, #32
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}

0800f43c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b088      	sub	sp, #32
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
 800f444:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f44a:	2337      	movs	r3, #55	; 0x37
 800f44c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f44e:	2340      	movs	r3, #64	; 0x40
 800f450:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f452:	2300      	movs	r3, #0
 800f454:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f45a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f45c:	f107 0308 	add.w	r3, r7, #8
 800f460:	4619      	mov	r1, r3
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f7ff fe48 	bl	800f0f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800f468:	f241 3288 	movw	r2, #5000	; 0x1388
 800f46c:	2137      	movs	r1, #55	; 0x37
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f000 f914 	bl	800f69c <SDMMC_GetCmdResp1>
 800f474:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f476:	69fb      	ldr	r3, [r7, #28]
}
 800f478:	4618      	mov	r0, r3
 800f47a:	3720      	adds	r7, #32
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b088      	sub	sp, #32
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f496:	2329      	movs	r3, #41	; 0x29
 800f498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f49a:	2340      	movs	r3, #64	; 0x40
 800f49c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f4a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f4a8:	f107 0308 	add.w	r3, r7, #8
 800f4ac:	4619      	mov	r1, r3
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f7ff fe22 	bl	800f0f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f000 fa23 	bl	800f900 <SDMMC_GetCmdResp3>
 800f4ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f4bc:	69fb      	ldr	r3, [r7, #28]
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3720      	adds	r7, #32
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}

0800f4c6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800f4c6:	b580      	push	{r7, lr}
 800f4c8:	b088      	sub	sp, #32
 800f4ca:	af00      	add	r7, sp, #0
 800f4cc:	6078      	str	r0, [r7, #4]
 800f4ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f4d4:	2306      	movs	r3, #6
 800f4d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f4d8:	2340      	movs	r3, #64	; 0x40
 800f4da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f4dc:	2300      	movs	r3, #0
 800f4de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f4e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f4e6:	f107 0308 	add.w	r3, r7, #8
 800f4ea:	4619      	mov	r1, r3
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f7ff fe03 	bl	800f0f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800f4f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800f4f6:	2106      	movs	r1, #6
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f000 f8cf 	bl	800f69c <SDMMC_GetCmdResp1>
 800f4fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f500:	69fb      	ldr	r3, [r7, #28]
}
 800f502:	4618      	mov	r0, r3
 800f504:	3720      	adds	r7, #32
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}

0800f50a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800f50a:	b580      	push	{r7, lr}
 800f50c:	b088      	sub	sp, #32
 800f50e:	af00      	add	r7, sp, #0
 800f510:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f512:	2300      	movs	r3, #0
 800f514:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f516:	2333      	movs	r3, #51	; 0x33
 800f518:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f51a:	2340      	movs	r3, #64	; 0x40
 800f51c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f51e:	2300      	movs	r3, #0
 800f520:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f526:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f528:	f107 0308 	add.w	r3, r7, #8
 800f52c:	4619      	mov	r1, r3
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f7ff fde2 	bl	800f0f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800f534:	f241 3288 	movw	r2, #5000	; 0x1388
 800f538:	2133      	movs	r1, #51	; 0x33
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	f000 f8ae 	bl	800f69c <SDMMC_GetCmdResp1>
 800f540:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f542:	69fb      	ldr	r3, [r7, #28]
}
 800f544:	4618      	mov	r0, r3
 800f546:	3720      	adds	r7, #32
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}

0800f54c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b088      	sub	sp, #32
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f554:	2300      	movs	r3, #0
 800f556:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f558:	2302      	movs	r3, #2
 800f55a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800f55c:	23c0      	movs	r3, #192	; 0xc0
 800f55e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f560:	2300      	movs	r3, #0
 800f562:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f568:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f56a:	f107 0308 	add.w	r3, r7, #8
 800f56e:	4619      	mov	r1, r3
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f7ff fdc1 	bl	800f0f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f000 f97c 	bl	800f874 <SDMMC_GetCmdResp2>
 800f57c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f57e:	69fb      	ldr	r3, [r7, #28]
}
 800f580:	4618      	mov	r0, r3
 800f582:	3720      	adds	r7, #32
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}

0800f588 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b088      	sub	sp, #32
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f596:	2309      	movs	r3, #9
 800f598:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800f59a:	23c0      	movs	r3, #192	; 0xc0
 800f59c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f5a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f5a8:	f107 0308 	add.w	r3, r7, #8
 800f5ac:	4619      	mov	r1, r3
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f7ff fda2 	bl	800f0f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f000 f95d 	bl	800f874 <SDMMC_GetCmdResp2>
 800f5ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f5bc:	69fb      	ldr	r3, [r7, #28]
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3720      	adds	r7, #32
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}

0800f5c6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800f5c6:	b580      	push	{r7, lr}
 800f5c8:	b088      	sub	sp, #32
 800f5ca:	af00      	add	r7, sp, #0
 800f5cc:	6078      	str	r0, [r7, #4]
 800f5ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f5d4:	2303      	movs	r3, #3
 800f5d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f5d8:	2340      	movs	r3, #64	; 0x40
 800f5da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f5e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f5e6:	f107 0308 	add.w	r3, r7, #8
 800f5ea:	4619      	mov	r1, r3
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f7ff fd83 	bl	800f0f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f5f2:	683a      	ldr	r2, [r7, #0]
 800f5f4:	2103      	movs	r1, #3
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f000 f9bc 	bl	800f974 <SDMMC_GetCmdResp6>
 800f5fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f5fe:	69fb      	ldr	r3, [r7, #28]
}
 800f600:	4618      	mov	r0, r3
 800f602:	3720      	adds	r7, #32
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}

0800f608 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b088      	sub	sp, #32
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
 800f610:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f616:	230d      	movs	r3, #13
 800f618:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f61a:	2340      	movs	r3, #64	; 0x40
 800f61c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f61e:	2300      	movs	r3, #0
 800f620:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f626:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f628:	f107 0308 	add.w	r3, r7, #8
 800f62c:	4619      	mov	r1, r3
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f7ff fd62 	bl	800f0f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800f634:	f241 3288 	movw	r2, #5000	; 0x1388
 800f638:	210d      	movs	r1, #13
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	f000 f82e 	bl	800f69c <SDMMC_GetCmdResp1>
 800f640:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f642:	69fb      	ldr	r3, [r7, #28]
}
 800f644:	4618      	mov	r0, r3
 800f646:	3720      	adds	r7, #32
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}

0800f64c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800f64c:	b490      	push	{r4, r7}
 800f64e:	b082      	sub	sp, #8
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f654:	4b0f      	ldr	r3, [pc, #60]	; (800f694 <SDMMC_GetCmdError+0x48>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	4a0f      	ldr	r2, [pc, #60]	; (800f698 <SDMMC_GetCmdError+0x4c>)
 800f65a:	fba2 2303 	umull	r2, r3, r2, r3
 800f65e:	0a5b      	lsrs	r3, r3, #9
 800f660:	f241 3288 	movw	r2, #5000	; 0x1388
 800f664:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f668:	4623      	mov	r3, r4
 800f66a:	1e5c      	subs	r4, r3, #1
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d102      	bne.n	800f676 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f670:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f674:	e009      	b.n	800f68a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f67a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d0f2      	beq.n	800f668 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	22c5      	movs	r2, #197	; 0xc5
 800f686:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800f688:	2300      	movs	r3, #0
}
 800f68a:	4618      	mov	r0, r3
 800f68c:	3708      	adds	r7, #8
 800f68e:	46bd      	mov	sp, r7
 800f690:	bc90      	pop	{r4, r7}
 800f692:	4770      	bx	lr
 800f694:	20000000 	.word	0x20000000
 800f698:	10624dd3 	.word	0x10624dd3

0800f69c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f69c:	b590      	push	{r4, r7, lr}
 800f69e:	b087      	sub	sp, #28
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	60f8      	str	r0, [r7, #12]
 800f6a4:	460b      	mov	r3, r1
 800f6a6:	607a      	str	r2, [r7, #4]
 800f6a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800f6aa:	4b6f      	ldr	r3, [pc, #444]	; (800f868 <SDMMC_GetCmdResp1+0x1cc>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	4a6f      	ldr	r2, [pc, #444]	; (800f86c <SDMMC_GetCmdResp1+0x1d0>)
 800f6b0:	fba2 2303 	umull	r2, r3, r2, r3
 800f6b4:	0a5b      	lsrs	r3, r3, #9
 800f6b6:	687a      	ldr	r2, [r7, #4]
 800f6b8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f6bc:	4623      	mov	r3, r4
 800f6be:	1e5c      	subs	r4, r3, #1
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d102      	bne.n	800f6ca <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f6c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f6c8:	e0c9      	b.n	800f85e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6ce:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f6d0:	697b      	ldr	r3, [r7, #20]
 800f6d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d0f0      	beq.n	800f6bc <SDMMC_GetCmdResp1+0x20>
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d1eb      	bne.n	800f6bc <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6e8:	f003 0304 	and.w	r3, r3, #4
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d004      	beq.n	800f6fa <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	2204      	movs	r2, #4
 800f6f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f6f6:	2304      	movs	r3, #4
 800f6f8:	e0b1      	b.n	800f85e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6fe:	f003 0301 	and.w	r3, r3, #1
 800f702:	2b00      	cmp	r3, #0
 800f704:	d004      	beq.n	800f710 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	2201      	movs	r2, #1
 800f70a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f70c:	2301      	movs	r3, #1
 800f70e:	e0a6      	b.n	800f85e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	22c5      	movs	r2, #197	; 0xc5
 800f714:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800f716:	68f8      	ldr	r0, [r7, #12]
 800f718:	f7ff fd18 	bl	800f14c <SDIO_GetCommandResponse>
 800f71c:	4603      	mov	r3, r0
 800f71e:	461a      	mov	r2, r3
 800f720:	7afb      	ldrb	r3, [r7, #11]
 800f722:	4293      	cmp	r3, r2
 800f724:	d001      	beq.n	800f72a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f726:	2301      	movs	r3, #1
 800f728:	e099      	b.n	800f85e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800f72a:	2100      	movs	r1, #0
 800f72c:	68f8      	ldr	r0, [r7, #12]
 800f72e:	f7ff fd1a 	bl	800f166 <SDIO_GetResponse>
 800f732:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f734:	693a      	ldr	r2, [r7, #16]
 800f736:	4b4e      	ldr	r3, [pc, #312]	; (800f870 <SDMMC_GetCmdResp1+0x1d4>)
 800f738:	4013      	ands	r3, r2
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d101      	bne.n	800f742 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800f73e:	2300      	movs	r3, #0
 800f740:	e08d      	b.n	800f85e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f742:	693b      	ldr	r3, [r7, #16]
 800f744:	2b00      	cmp	r3, #0
 800f746:	da02      	bge.n	800f74e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f748:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f74c:	e087      	b.n	800f85e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f74e:	693b      	ldr	r3, [r7, #16]
 800f750:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f754:	2b00      	cmp	r3, #0
 800f756:	d001      	beq.n	800f75c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f758:	2340      	movs	r3, #64	; 0x40
 800f75a:	e080      	b.n	800f85e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f75c:	693b      	ldr	r3, [r7, #16]
 800f75e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f762:	2b00      	cmp	r3, #0
 800f764:	d001      	beq.n	800f76a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f766:	2380      	movs	r3, #128	; 0x80
 800f768:	e079      	b.n	800f85e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f770:	2b00      	cmp	r3, #0
 800f772:	d002      	beq.n	800f77a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f774:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f778:	e071      	b.n	800f85e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f77a:	693b      	ldr	r3, [r7, #16]
 800f77c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f780:	2b00      	cmp	r3, #0
 800f782:	d002      	beq.n	800f78a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f784:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f788:	e069      	b.n	800f85e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f78a:	693b      	ldr	r3, [r7, #16]
 800f78c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f790:	2b00      	cmp	r3, #0
 800f792:	d002      	beq.n	800f79a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f798:	e061      	b.n	800f85e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f79a:	693b      	ldr	r3, [r7, #16]
 800f79c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d002      	beq.n	800f7aa <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f7a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f7a8:	e059      	b.n	800f85e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f7aa:	693b      	ldr	r3, [r7, #16]
 800f7ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d002      	beq.n	800f7ba <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f7b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f7b8:	e051      	b.n	800f85e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f7ba:	693b      	ldr	r3, [r7, #16]
 800f7bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d002      	beq.n	800f7ca <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f7c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f7c8:	e049      	b.n	800f85e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f7ca:	693b      	ldr	r3, [r7, #16]
 800f7cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d002      	beq.n	800f7da <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f7d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f7d8:	e041      	b.n	800f85e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f7da:	693b      	ldr	r3, [r7, #16]
 800f7dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d002      	beq.n	800f7ea <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800f7e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f7e8:	e039      	b.n	800f85e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f7ea:	693b      	ldr	r3, [r7, #16]
 800f7ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d002      	beq.n	800f7fa <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f7f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f7f8:	e031      	b.n	800f85e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f800:	2b00      	cmp	r3, #0
 800f802:	d002      	beq.n	800f80a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f804:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f808:	e029      	b.n	800f85e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f810:	2b00      	cmp	r3, #0
 800f812:	d002      	beq.n	800f81a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f814:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f818:	e021      	b.n	800f85e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f81a:	693b      	ldr	r3, [r7, #16]
 800f81c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f820:	2b00      	cmp	r3, #0
 800f822:	d002      	beq.n	800f82a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f824:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f828:	e019      	b.n	800f85e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f830:	2b00      	cmp	r3, #0
 800f832:	d002      	beq.n	800f83a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f834:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f838:	e011      	b.n	800f85e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f840:	2b00      	cmp	r3, #0
 800f842:	d002      	beq.n	800f84a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f844:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f848:	e009      	b.n	800f85e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f84a:	693b      	ldr	r3, [r7, #16]
 800f84c:	f003 0308 	and.w	r3, r3, #8
 800f850:	2b00      	cmp	r3, #0
 800f852:	d002      	beq.n	800f85a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f854:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f858:	e001      	b.n	800f85e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f85a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f85e:	4618      	mov	r0, r3
 800f860:	371c      	adds	r7, #28
 800f862:	46bd      	mov	sp, r7
 800f864:	bd90      	pop	{r4, r7, pc}
 800f866:	bf00      	nop
 800f868:	20000000 	.word	0x20000000
 800f86c:	10624dd3 	.word	0x10624dd3
 800f870:	fdffe008 	.word	0xfdffe008

0800f874 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800f874:	b490      	push	{r4, r7}
 800f876:	b084      	sub	sp, #16
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f87c:	4b1e      	ldr	r3, [pc, #120]	; (800f8f8 <SDMMC_GetCmdResp2+0x84>)
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	4a1e      	ldr	r2, [pc, #120]	; (800f8fc <SDMMC_GetCmdResp2+0x88>)
 800f882:	fba2 2303 	umull	r2, r3, r2, r3
 800f886:	0a5b      	lsrs	r3, r3, #9
 800f888:	f241 3288 	movw	r2, #5000	; 0x1388
 800f88c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f890:	4623      	mov	r3, r4
 800f892:	1e5c      	subs	r4, r3, #1
 800f894:	2b00      	cmp	r3, #0
 800f896:	d102      	bne.n	800f89e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f898:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f89c:	e026      	b.n	800f8ec <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8a2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d0f0      	beq.n	800f890 <SDMMC_GetCmdResp2+0x1c>
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d1eb      	bne.n	800f890 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8bc:	f003 0304 	and.w	r3, r3, #4
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d004      	beq.n	800f8ce <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2204      	movs	r2, #4
 800f8c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f8ca:	2304      	movs	r3, #4
 800f8cc:	e00e      	b.n	800f8ec <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8d2:	f003 0301 	and.w	r3, r3, #1
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d004      	beq.n	800f8e4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2201      	movs	r2, #1
 800f8de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f8e0:	2301      	movs	r3, #1
 800f8e2:	e003      	b.n	800f8ec <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	22c5      	movs	r2, #197	; 0xc5
 800f8e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f8ea:	2300      	movs	r3, #0
}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3710      	adds	r7, #16
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bc90      	pop	{r4, r7}
 800f8f4:	4770      	bx	lr
 800f8f6:	bf00      	nop
 800f8f8:	20000000 	.word	0x20000000
 800f8fc:	10624dd3 	.word	0x10624dd3

0800f900 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800f900:	b490      	push	{r4, r7}
 800f902:	b084      	sub	sp, #16
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f908:	4b18      	ldr	r3, [pc, #96]	; (800f96c <SDMMC_GetCmdResp3+0x6c>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	4a18      	ldr	r2, [pc, #96]	; (800f970 <SDMMC_GetCmdResp3+0x70>)
 800f90e:	fba2 2303 	umull	r2, r3, r2, r3
 800f912:	0a5b      	lsrs	r3, r3, #9
 800f914:	f241 3288 	movw	r2, #5000	; 0x1388
 800f918:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f91c:	4623      	mov	r3, r4
 800f91e:	1e5c      	subs	r4, r3, #1
 800f920:	2b00      	cmp	r3, #0
 800f922:	d102      	bne.n	800f92a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f924:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f928:	e01b      	b.n	800f962 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f92e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f936:	2b00      	cmp	r3, #0
 800f938:	d0f0      	beq.n	800f91c <SDMMC_GetCmdResp3+0x1c>
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f940:	2b00      	cmp	r3, #0
 800f942:	d1eb      	bne.n	800f91c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f948:	f003 0304 	and.w	r3, r3, #4
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d004      	beq.n	800f95a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2204      	movs	r2, #4
 800f954:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f956:	2304      	movs	r3, #4
 800f958:	e003      	b.n	800f962 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	22c5      	movs	r2, #197	; 0xc5
 800f95e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f960:	2300      	movs	r3, #0
}
 800f962:	4618      	mov	r0, r3
 800f964:	3710      	adds	r7, #16
 800f966:	46bd      	mov	sp, r7
 800f968:	bc90      	pop	{r4, r7}
 800f96a:	4770      	bx	lr
 800f96c:	20000000 	.word	0x20000000
 800f970:	10624dd3 	.word	0x10624dd3

0800f974 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f974:	b590      	push	{r4, r7, lr}
 800f976:	b087      	sub	sp, #28
 800f978:	af00      	add	r7, sp, #0
 800f97a:	60f8      	str	r0, [r7, #12]
 800f97c:	460b      	mov	r3, r1
 800f97e:	607a      	str	r2, [r7, #4]
 800f980:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f982:	4b34      	ldr	r3, [pc, #208]	; (800fa54 <SDMMC_GetCmdResp6+0xe0>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	4a34      	ldr	r2, [pc, #208]	; (800fa58 <SDMMC_GetCmdResp6+0xe4>)
 800f988:	fba2 2303 	umull	r2, r3, r2, r3
 800f98c:	0a5b      	lsrs	r3, r3, #9
 800f98e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f992:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f996:	4623      	mov	r3, r4
 800f998:	1e5c      	subs	r4, r3, #1
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d102      	bne.n	800f9a4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f99e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f9a2:	e052      	b.n	800fa4a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9a8:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f9aa:	697b      	ldr	r3, [r7, #20]
 800f9ac:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d0f0      	beq.n	800f996 <SDMMC_GetCmdResp6+0x22>
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d1eb      	bne.n	800f996 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9c2:	f003 0304 	and.w	r3, r3, #4
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d004      	beq.n	800f9d4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	2204      	movs	r2, #4
 800f9ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f9d0:	2304      	movs	r3, #4
 800f9d2:	e03a      	b.n	800fa4a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9d8:	f003 0301 	and.w	r3, r3, #1
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d004      	beq.n	800f9ea <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	e02f      	b.n	800fa4a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800f9ea:	68f8      	ldr	r0, [r7, #12]
 800f9ec:	f7ff fbae 	bl	800f14c <SDIO_GetCommandResponse>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	7afb      	ldrb	r3, [r7, #11]
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d001      	beq.n	800f9fe <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f9fa:	2301      	movs	r3, #1
 800f9fc:	e025      	b.n	800fa4a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	22c5      	movs	r2, #197	; 0xc5
 800fa02:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800fa04:	2100      	movs	r1, #0
 800fa06:	68f8      	ldr	r0, [r7, #12]
 800fa08:	f7ff fbad 	bl	800f166 <SDIO_GetResponse>
 800fa0c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d106      	bne.n	800fa26 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800fa18:	693b      	ldr	r3, [r7, #16]
 800fa1a:	0c1b      	lsrs	r3, r3, #16
 800fa1c:	b29a      	uxth	r2, r3
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800fa22:	2300      	movs	r3, #0
 800fa24:	e011      	b.n	800fa4a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800fa26:	693b      	ldr	r3, [r7, #16]
 800fa28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d002      	beq.n	800fa36 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fa30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fa34:	e009      	b.n	800fa4a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d002      	beq.n	800fa46 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fa40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fa44:	e001      	b.n	800fa4a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fa46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	371c      	adds	r7, #28
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd90      	pop	{r4, r7, pc}
 800fa52:	bf00      	nop
 800fa54:	20000000 	.word	0x20000000
 800fa58:	10624dd3 	.word	0x10624dd3

0800fa5c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800fa5c:	b490      	push	{r4, r7}
 800fa5e:	b084      	sub	sp, #16
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fa64:	4b21      	ldr	r3, [pc, #132]	; (800faec <SDMMC_GetCmdResp7+0x90>)
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	4a21      	ldr	r2, [pc, #132]	; (800faf0 <SDMMC_GetCmdResp7+0x94>)
 800fa6a:	fba2 2303 	umull	r2, r3, r2, r3
 800fa6e:	0a5b      	lsrs	r3, r3, #9
 800fa70:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa74:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fa78:	4623      	mov	r3, r4
 800fa7a:	1e5c      	subs	r4, r3, #1
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d102      	bne.n	800fa86 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fa80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fa84:	e02c      	b.n	800fae0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa8a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d0f0      	beq.n	800fa78 <SDMMC_GetCmdResp7+0x1c>
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d1eb      	bne.n	800fa78 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800faa4:	f003 0304 	and.w	r3, r3, #4
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d004      	beq.n	800fab6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2204      	movs	r2, #4
 800fab0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fab2:	2304      	movs	r3, #4
 800fab4:	e014      	b.n	800fae0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800faba:	f003 0301 	and.w	r3, r3, #1
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d004      	beq.n	800facc <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	2201      	movs	r2, #1
 800fac6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fac8:	2301      	movs	r3, #1
 800faca:	e009      	b.n	800fae0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d002      	beq.n	800fade <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2240      	movs	r2, #64	; 0x40
 800fadc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fade:	2300      	movs	r3, #0
  
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3710      	adds	r7, #16
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bc90      	pop	{r4, r7}
 800fae8:	4770      	bx	lr
 800faea:	bf00      	nop
 800faec:	20000000 	.word	0x20000000
 800faf0:	10624dd3 	.word	0x10624dd3

0800faf4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800faf8:	4904      	ldr	r1, [pc, #16]	; (800fb0c <MX_FATFS_Init+0x18>)
 800fafa:	4805      	ldr	r0, [pc, #20]	; (800fb10 <MX_FATFS_Init+0x1c>)
 800fafc:	f003 fb9c 	bl	8013238 <FATFS_LinkDriver>
 800fb00:	4603      	mov	r3, r0
 800fb02:	461a      	mov	r2, r3
 800fb04:	4b03      	ldr	r3, [pc, #12]	; (800fb14 <MX_FATFS_Init+0x20>)
 800fb06:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fb08:	bf00      	nop
 800fb0a:	bd80      	pop	{r7, pc}
 800fb0c:	2003ede0 	.word	0x2003ede0
 800fb10:	08018cdc 	.word	0x08018cdc
 800fb14:	2003eddc 	.word	0x2003eddc

0800fb18 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b082      	sub	sp, #8
 800fb1c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800fb1e:	2300      	movs	r3, #0
 800fb20:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800fb22:	f000 f896 	bl	800fc52 <BSP_SD_IsDetected>
 800fb26:	4603      	mov	r3, r0
 800fb28:	2b01      	cmp	r3, #1
 800fb2a:	d001      	beq.n	800fb30 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	e012      	b.n	800fb56 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800fb30:	480b      	ldr	r0, [pc, #44]	; (800fb60 <BSP_SD_Init+0x48>)
 800fb32:	f7fb ffa5 	bl	800ba80 <HAL_SD_Init>
 800fb36:	4603      	mov	r3, r0
 800fb38:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800fb3a:	79fb      	ldrb	r3, [r7, #7]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d109      	bne.n	800fb54 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800fb40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800fb44:	4806      	ldr	r0, [pc, #24]	; (800fb60 <BSP_SD_Init+0x48>)
 800fb46:	f7fc fd4f 	bl	800c5e8 <HAL_SD_ConfigWideBusOperation>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d001      	beq.n	800fb54 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800fb50:	2301      	movs	r3, #1
 800fb52:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800fb54:	79fb      	ldrb	r3, [r7, #7]
}
 800fb56:	4618      	mov	r0, r3
 800fb58:	3708      	adds	r7, #8
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd80      	pop	{r7, pc}
 800fb5e:	bf00      	nop
 800fb60:	2003ebd8 	.word	0x2003ebd8

0800fb64 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b086      	sub	sp, #24
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	60f8      	str	r0, [r7, #12]
 800fb6c:	60b9      	str	r1, [r7, #8]
 800fb6e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fb70:	2300      	movs	r3, #0
 800fb72:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	68ba      	ldr	r2, [r7, #8]
 800fb78:	68f9      	ldr	r1, [r7, #12]
 800fb7a:	4806      	ldr	r0, [pc, #24]	; (800fb94 <BSP_SD_ReadBlocks_DMA+0x30>)
 800fb7c:	f7fc f810 	bl	800bba0 <HAL_SD_ReadBlocks_DMA>
 800fb80:	4603      	mov	r3, r0
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d001      	beq.n	800fb8a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fb86:	2301      	movs	r3, #1
 800fb88:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fb8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3718      	adds	r7, #24
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	2003ebd8 	.word	0x2003ebd8

0800fb98 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b086      	sub	sp, #24
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	60f8      	str	r0, [r7, #12]
 800fba0:	60b9      	str	r1, [r7, #8]
 800fba2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fba4:	2300      	movs	r3, #0
 800fba6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	68ba      	ldr	r2, [r7, #8]
 800fbac:	68f9      	ldr	r1, [r7, #12]
 800fbae:	4806      	ldr	r0, [pc, #24]	; (800fbc8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800fbb0:	f7fc f8de 	bl	800bd70 <HAL_SD_WriteBlocks_DMA>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d001      	beq.n	800fbbe <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fbba:	2301      	movs	r3, #1
 800fbbc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fbbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	3718      	adds	r7, #24
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}
 800fbc8:	2003ebd8 	.word	0x2003ebd8

0800fbcc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fbd0:	4805      	ldr	r0, [pc, #20]	; (800fbe8 <BSP_SD_GetCardState+0x1c>)
 800fbd2:	f7fc fd85 	bl	800c6e0 <HAL_SD_GetCardState>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	2b04      	cmp	r3, #4
 800fbda:	bf14      	ite	ne
 800fbdc:	2301      	movne	r3, #1
 800fbde:	2300      	moveq	r3, #0
 800fbe0:	b2db      	uxtb	r3, r3
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	bd80      	pop	{r7, pc}
 800fbe6:	bf00      	nop
 800fbe8:	2003ebd8 	.word	0x2003ebd8

0800fbec <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b082      	sub	sp, #8
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800fbf4:	6879      	ldr	r1, [r7, #4]
 800fbf6:	4803      	ldr	r0, [pc, #12]	; (800fc04 <BSP_SD_GetCardInfo+0x18>)
 800fbf8:	f7fc fcca 	bl	800c590 <HAL_SD_GetCardInfo>
}
 800fbfc:	bf00      	nop
 800fbfe:	3708      	adds	r7, #8
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}
 800fc04:	2003ebd8 	.word	0x2003ebd8

0800fc08 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b082      	sub	sp, #8
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800fc10:	f000 f818 	bl	800fc44 <BSP_SD_AbortCallback>
}
 800fc14:	bf00      	nop
 800fc16:	3708      	adds	r7, #8
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}

0800fc1c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b082      	sub	sp, #8
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800fc24:	f000 f9a8 	bl	800ff78 <BSP_SD_WriteCpltCallback>
}
 800fc28:	bf00      	nop
 800fc2a:	3708      	adds	r7, #8
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}

0800fc30 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b082      	sub	sp, #8
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800fc38:	f000 f9aa 	bl	800ff90 <BSP_SD_ReadCpltCallback>
}
 800fc3c:	bf00      	nop
 800fc3e:	3708      	adds	r7, #8
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}

0800fc44 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800fc44:	b480      	push	{r7}
 800fc46:	af00      	add	r7, sp, #0

}
 800fc48:	bf00      	nop
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc50:	4770      	bx	lr

0800fc52 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800fc52:	b580      	push	{r7, lr}
 800fc54:	b082      	sub	sp, #8
 800fc56:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800fc58:	2301      	movs	r3, #1
 800fc5a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800fc5c:	f000 f80c 	bl	800fc78 <BSP_PlatformIsDetected>
 800fc60:	4603      	mov	r3, r0
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d101      	bne.n	800fc6a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800fc66:	2300      	movs	r3, #0
 800fc68:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800fc6a:	79fb      	ldrb	r3, [r7, #7]
 800fc6c:	b2db      	uxtb	r3, r3
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3708      	adds	r7, #8
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}
	...

0800fc78 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800fc7e:	2301      	movs	r3, #1
 800fc80:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800fc82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fc86:	4806      	ldr	r0, [pc, #24]	; (800fca0 <BSP_PlatformIsDetected+0x28>)
 800fc88:	f7fa f87e 	bl	8009d88 <HAL_GPIO_ReadPin>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d001      	beq.n	800fc96 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800fc92:	2300      	movs	r3, #0
 800fc94:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800fc96:	79fb      	ldrb	r3, [r7, #7]
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3708      	adds	r7, #8
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}
 800fca0:	40020000 	.word	0x40020000

0800fca4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b084      	sub	sp, #16
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800fcac:	f7f8 fde2 	bl	8008874 <HAL_GetTick>
 800fcb0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800fcb2:	e006      	b.n	800fcc2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fcb4:	f7ff ff8a 	bl	800fbcc <BSP_SD_GetCardState>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d101      	bne.n	800fcc2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	e009      	b.n	800fcd6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800fcc2:	f7f8 fdd7 	bl	8008874 <HAL_GetTick>
 800fcc6:	4602      	mov	r2, r0
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	1ad3      	subs	r3, r2, r3
 800fccc:	687a      	ldr	r2, [r7, #4]
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d8f0      	bhi.n	800fcb4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800fcd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	3710      	adds	r7, #16
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	bd80      	pop	{r7, pc}
	...

0800fce0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b082      	sub	sp, #8
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	4603      	mov	r3, r0
 800fce8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fcea:	4b0b      	ldr	r3, [pc, #44]	; (800fd18 <SD_CheckStatus+0x38>)
 800fcec:	2201      	movs	r2, #1
 800fcee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800fcf0:	f7ff ff6c 	bl	800fbcc <BSP_SD_GetCardState>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d107      	bne.n	800fd0a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800fcfa:	4b07      	ldr	r3, [pc, #28]	; (800fd18 <SD_CheckStatus+0x38>)
 800fcfc:	781b      	ldrb	r3, [r3, #0]
 800fcfe:	b2db      	uxtb	r3, r3
 800fd00:	f023 0301 	bic.w	r3, r3, #1
 800fd04:	b2da      	uxtb	r2, r3
 800fd06:	4b04      	ldr	r3, [pc, #16]	; (800fd18 <SD_CheckStatus+0x38>)
 800fd08:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800fd0a:	4b03      	ldr	r3, [pc, #12]	; (800fd18 <SD_CheckStatus+0x38>)
 800fd0c:	781b      	ldrb	r3, [r3, #0]
 800fd0e:	b2db      	uxtb	r3, r3
}
 800fd10:	4618      	mov	r0, r3
 800fd12:	3708      	adds	r7, #8
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}
 800fd18:	20000009 	.word	0x20000009

0800fd1c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b082      	sub	sp, #8
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	4603      	mov	r3, r0
 800fd24:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800fd26:	f7ff fef7 	bl	800fb18 <BSP_SD_Init>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d107      	bne.n	800fd40 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800fd30:	79fb      	ldrb	r3, [r7, #7]
 800fd32:	4618      	mov	r0, r3
 800fd34:	f7ff ffd4 	bl	800fce0 <SD_CheckStatus>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	461a      	mov	r2, r3
 800fd3c:	4b04      	ldr	r3, [pc, #16]	; (800fd50 <SD_initialize+0x34>)
 800fd3e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800fd40:	4b03      	ldr	r3, [pc, #12]	; (800fd50 <SD_initialize+0x34>)
 800fd42:	781b      	ldrb	r3, [r3, #0]
 800fd44:	b2db      	uxtb	r3, r3
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3708      	adds	r7, #8
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}
 800fd4e:	bf00      	nop
 800fd50:	20000009 	.word	0x20000009

0800fd54 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b082      	sub	sp, #8
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800fd5e:	79fb      	ldrb	r3, [r7, #7]
 800fd60:	4618      	mov	r0, r3
 800fd62:	f7ff ffbd 	bl	800fce0 <SD_CheckStatus>
 800fd66:	4603      	mov	r3, r0
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3708      	adds	r7, #8
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}

0800fd70 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b086      	sub	sp, #24
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	60b9      	str	r1, [r7, #8]
 800fd78:	607a      	str	r2, [r7, #4]
 800fd7a:	603b      	str	r3, [r7, #0]
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fd80:	2301      	movs	r3, #1
 800fd82:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fd84:	f247 5030 	movw	r0, #30000	; 0x7530
 800fd88:	f7ff ff8c 	bl	800fca4 <SD_CheckStatusWithTimeout>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	da01      	bge.n	800fd96 <SD_read+0x26>
  {
    return res;
 800fd92:	7dfb      	ldrb	r3, [r7, #23]
 800fd94:	e03b      	b.n	800fe0e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800fd96:	683a      	ldr	r2, [r7, #0]
 800fd98:	6879      	ldr	r1, [r7, #4]
 800fd9a:	68b8      	ldr	r0, [r7, #8]
 800fd9c:	f7ff fee2 	bl	800fb64 <BSP_SD_ReadBlocks_DMA>
 800fda0:	4603      	mov	r3, r0
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d132      	bne.n	800fe0c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800fda6:	4b1c      	ldr	r3, [pc, #112]	; (800fe18 <SD_read+0xa8>)
 800fda8:	2200      	movs	r2, #0
 800fdaa:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800fdac:	f7f8 fd62 	bl	8008874 <HAL_GetTick>
 800fdb0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800fdb2:	bf00      	nop
 800fdb4:	4b18      	ldr	r3, [pc, #96]	; (800fe18 <SD_read+0xa8>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d108      	bne.n	800fdce <SD_read+0x5e>
 800fdbc:	f7f8 fd5a 	bl	8008874 <HAL_GetTick>
 800fdc0:	4602      	mov	r2, r0
 800fdc2:	693b      	ldr	r3, [r7, #16]
 800fdc4:	1ad3      	subs	r3, r2, r3
 800fdc6:	f247 522f 	movw	r2, #29999	; 0x752f
 800fdca:	4293      	cmp	r3, r2
 800fdcc:	d9f2      	bls.n	800fdb4 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800fdce:	4b12      	ldr	r3, [pc, #72]	; (800fe18 <SD_read+0xa8>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d102      	bne.n	800fddc <SD_read+0x6c>
      {
        res = RES_ERROR;
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	75fb      	strb	r3, [r7, #23]
 800fdda:	e017      	b.n	800fe0c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800fddc:	4b0e      	ldr	r3, [pc, #56]	; (800fe18 <SD_read+0xa8>)
 800fdde:	2200      	movs	r2, #0
 800fde0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800fde2:	f7f8 fd47 	bl	8008874 <HAL_GetTick>
 800fde6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fde8:	e007      	b.n	800fdfa <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fdea:	f7ff feef 	bl	800fbcc <BSP_SD_GetCardState>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d102      	bne.n	800fdfa <SD_read+0x8a>
          {
            res = RES_OK;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800fdf8:	e008      	b.n	800fe0c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fdfa:	f7f8 fd3b 	bl	8008874 <HAL_GetTick>
 800fdfe:	4602      	mov	r2, r0
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	1ad3      	subs	r3, r2, r3
 800fe04:	f247 522f 	movw	r2, #29999	; 0x752f
 800fe08:	4293      	cmp	r3, r2
 800fe0a:	d9ee      	bls.n	800fdea <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800fe0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	3718      	adds	r7, #24
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bd80      	pop	{r7, pc}
 800fe16:	bf00      	nop
 800fe18:	2003c474 	.word	0x2003c474

0800fe1c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b086      	sub	sp, #24
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	60b9      	str	r1, [r7, #8]
 800fe24:	607a      	str	r2, [r7, #4]
 800fe26:	603b      	str	r3, [r7, #0]
 800fe28:	4603      	mov	r3, r0
 800fe2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800fe30:	4b24      	ldr	r3, [pc, #144]	; (800fec4 <SD_write+0xa8>)
 800fe32:	2200      	movs	r2, #0
 800fe34:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fe36:	f247 5030 	movw	r0, #30000	; 0x7530
 800fe3a:	f7ff ff33 	bl	800fca4 <SD_CheckStatusWithTimeout>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	da01      	bge.n	800fe48 <SD_write+0x2c>
  {
    return res;
 800fe44:	7dfb      	ldrb	r3, [r7, #23]
 800fe46:	e038      	b.n	800feba <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800fe48:	683a      	ldr	r2, [r7, #0]
 800fe4a:	6879      	ldr	r1, [r7, #4]
 800fe4c:	68b8      	ldr	r0, [r7, #8]
 800fe4e:	f7ff fea3 	bl	800fb98 <BSP_SD_WriteBlocks_DMA>
 800fe52:	4603      	mov	r3, r0
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d12f      	bne.n	800feb8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800fe58:	f7f8 fd0c 	bl	8008874 <HAL_GetTick>
 800fe5c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800fe5e:	bf00      	nop
 800fe60:	4b18      	ldr	r3, [pc, #96]	; (800fec4 <SD_write+0xa8>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d108      	bne.n	800fe7a <SD_write+0x5e>
 800fe68:	f7f8 fd04 	bl	8008874 <HAL_GetTick>
 800fe6c:	4602      	mov	r2, r0
 800fe6e:	693b      	ldr	r3, [r7, #16]
 800fe70:	1ad3      	subs	r3, r2, r3
 800fe72:	f247 522f 	movw	r2, #29999	; 0x752f
 800fe76:	4293      	cmp	r3, r2
 800fe78:	d9f2      	bls.n	800fe60 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800fe7a:	4b12      	ldr	r3, [pc, #72]	; (800fec4 <SD_write+0xa8>)
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d102      	bne.n	800fe88 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800fe82:	2301      	movs	r3, #1
 800fe84:	75fb      	strb	r3, [r7, #23]
 800fe86:	e017      	b.n	800feb8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800fe88:	4b0e      	ldr	r3, [pc, #56]	; (800fec4 <SD_write+0xa8>)
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800fe8e:	f7f8 fcf1 	bl	8008874 <HAL_GetTick>
 800fe92:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fe94:	e007      	b.n	800fea6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fe96:	f7ff fe99 	bl	800fbcc <BSP_SD_GetCardState>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d102      	bne.n	800fea6 <SD_write+0x8a>
          {
            res = RES_OK;
 800fea0:	2300      	movs	r3, #0
 800fea2:	75fb      	strb	r3, [r7, #23]
            break;
 800fea4:	e008      	b.n	800feb8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fea6:	f7f8 fce5 	bl	8008874 <HAL_GetTick>
 800feaa:	4602      	mov	r2, r0
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	1ad3      	subs	r3, r2, r3
 800feb0:	f247 522f 	movw	r2, #29999	; 0x752f
 800feb4:	4293      	cmp	r3, r2
 800feb6:	d9ee      	bls.n	800fe96 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800feb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800feba:	4618      	mov	r0, r3
 800febc:	3718      	adds	r7, #24
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}
 800fec2:	bf00      	nop
 800fec4:	2003c470 	.word	0x2003c470

0800fec8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b08c      	sub	sp, #48	; 0x30
 800fecc:	af00      	add	r7, sp, #0
 800fece:	4603      	mov	r3, r0
 800fed0:	603a      	str	r2, [r7, #0]
 800fed2:	71fb      	strb	r3, [r7, #7]
 800fed4:	460b      	mov	r3, r1
 800fed6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800fed8:	2301      	movs	r3, #1
 800feda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800fede:	4b25      	ldr	r3, [pc, #148]	; (800ff74 <SD_ioctl+0xac>)
 800fee0:	781b      	ldrb	r3, [r3, #0]
 800fee2:	b2db      	uxtb	r3, r3
 800fee4:	f003 0301 	and.w	r3, r3, #1
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d001      	beq.n	800fef0 <SD_ioctl+0x28>
 800feec:	2303      	movs	r3, #3
 800feee:	e03c      	b.n	800ff6a <SD_ioctl+0xa2>

  switch (cmd)
 800fef0:	79bb      	ldrb	r3, [r7, #6]
 800fef2:	2b03      	cmp	r3, #3
 800fef4:	d834      	bhi.n	800ff60 <SD_ioctl+0x98>
 800fef6:	a201      	add	r2, pc, #4	; (adr r2, 800fefc <SD_ioctl+0x34>)
 800fef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fefc:	0800ff0d 	.word	0x0800ff0d
 800ff00:	0800ff15 	.word	0x0800ff15
 800ff04:	0800ff2d 	.word	0x0800ff2d
 800ff08:	0800ff47 	.word	0x0800ff47
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ff12:	e028      	b.n	800ff66 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ff14:	f107 030c 	add.w	r3, r7, #12
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f7ff fe67 	bl	800fbec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ff1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ff24:	2300      	movs	r3, #0
 800ff26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ff2a:	e01c      	b.n	800ff66 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ff2c:	f107 030c 	add.w	r3, r7, #12
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7ff fe5b 	bl	800fbec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ff36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff38:	b29a      	uxth	r2, r3
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ff44:	e00f      	b.n	800ff66 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ff46:	f107 030c 	add.w	r3, r7, #12
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f7ff fe4e 	bl	800fbec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ff50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff52:	0a5a      	lsrs	r2, r3, #9
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ff5e:	e002      	b.n	800ff66 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ff60:	2304      	movs	r3, #4
 800ff62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ff66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	3730      	adds	r7, #48	; 0x30
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}
 800ff72:	bf00      	nop
 800ff74:	20000009 	.word	0x20000009

0800ff78 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ff78:	b480      	push	{r7}
 800ff7a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800ff7c:	4b03      	ldr	r3, [pc, #12]	; (800ff8c <BSP_SD_WriteCpltCallback+0x14>)
 800ff7e:	2201      	movs	r2, #1
 800ff80:	601a      	str	r2, [r3, #0]
}
 800ff82:	bf00      	nop
 800ff84:	46bd      	mov	sp, r7
 800ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8a:	4770      	bx	lr
 800ff8c:	2003c470 	.word	0x2003c470

0800ff90 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ff90:	b480      	push	{r7}
 800ff92:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800ff94:	4b03      	ldr	r3, [pc, #12]	; (800ffa4 <BSP_SD_ReadCpltCallback+0x14>)
 800ff96:	2201      	movs	r2, #1
 800ff98:	601a      	str	r2, [r3, #0]
}
 800ff9a:	bf00      	nop
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa2:	4770      	bx	lr
 800ffa4:	2003c474 	.word	0x2003c474

0800ffa8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b084      	sub	sp, #16
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	4603      	mov	r3, r0
 800ffb0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ffb2:	79fb      	ldrb	r3, [r7, #7]
 800ffb4:	4a08      	ldr	r2, [pc, #32]	; (800ffd8 <disk_status+0x30>)
 800ffb6:	009b      	lsls	r3, r3, #2
 800ffb8:	4413      	add	r3, r2
 800ffba:	685b      	ldr	r3, [r3, #4]
 800ffbc:	685b      	ldr	r3, [r3, #4]
 800ffbe:	79fa      	ldrb	r2, [r7, #7]
 800ffc0:	4905      	ldr	r1, [pc, #20]	; (800ffd8 <disk_status+0x30>)
 800ffc2:	440a      	add	r2, r1
 800ffc4:	7a12      	ldrb	r2, [r2, #8]
 800ffc6:	4610      	mov	r0, r2
 800ffc8:	4798      	blx	r3
 800ffca:	4603      	mov	r3, r0
 800ffcc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ffce:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	3710      	adds	r7, #16
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}
 800ffd8:	2003c4a0 	.word	0x2003c4a0

0800ffdc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b084      	sub	sp, #16
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ffea:	79fb      	ldrb	r3, [r7, #7]
 800ffec:	4a0d      	ldr	r2, [pc, #52]	; (8010024 <disk_initialize+0x48>)
 800ffee:	5cd3      	ldrb	r3, [r2, r3]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d111      	bne.n	8010018 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800fff4:	79fb      	ldrb	r3, [r7, #7]
 800fff6:	4a0b      	ldr	r2, [pc, #44]	; (8010024 <disk_initialize+0x48>)
 800fff8:	2101      	movs	r1, #1
 800fffa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800fffc:	79fb      	ldrb	r3, [r7, #7]
 800fffe:	4a09      	ldr	r2, [pc, #36]	; (8010024 <disk_initialize+0x48>)
 8010000:	009b      	lsls	r3, r3, #2
 8010002:	4413      	add	r3, r2
 8010004:	685b      	ldr	r3, [r3, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	79fa      	ldrb	r2, [r7, #7]
 801000a:	4906      	ldr	r1, [pc, #24]	; (8010024 <disk_initialize+0x48>)
 801000c:	440a      	add	r2, r1
 801000e:	7a12      	ldrb	r2, [r2, #8]
 8010010:	4610      	mov	r0, r2
 8010012:	4798      	blx	r3
 8010014:	4603      	mov	r3, r0
 8010016:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010018:	7bfb      	ldrb	r3, [r7, #15]
}
 801001a:	4618      	mov	r0, r3
 801001c:	3710      	adds	r7, #16
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}
 8010022:	bf00      	nop
 8010024:	2003c4a0 	.word	0x2003c4a0

08010028 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010028:	b590      	push	{r4, r7, lr}
 801002a:	b087      	sub	sp, #28
 801002c:	af00      	add	r7, sp, #0
 801002e:	60b9      	str	r1, [r7, #8]
 8010030:	607a      	str	r2, [r7, #4]
 8010032:	603b      	str	r3, [r7, #0]
 8010034:	4603      	mov	r3, r0
 8010036:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010038:	7bfb      	ldrb	r3, [r7, #15]
 801003a:	4a0a      	ldr	r2, [pc, #40]	; (8010064 <disk_read+0x3c>)
 801003c:	009b      	lsls	r3, r3, #2
 801003e:	4413      	add	r3, r2
 8010040:	685b      	ldr	r3, [r3, #4]
 8010042:	689c      	ldr	r4, [r3, #8]
 8010044:	7bfb      	ldrb	r3, [r7, #15]
 8010046:	4a07      	ldr	r2, [pc, #28]	; (8010064 <disk_read+0x3c>)
 8010048:	4413      	add	r3, r2
 801004a:	7a18      	ldrb	r0, [r3, #8]
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	687a      	ldr	r2, [r7, #4]
 8010050:	68b9      	ldr	r1, [r7, #8]
 8010052:	47a0      	blx	r4
 8010054:	4603      	mov	r3, r0
 8010056:	75fb      	strb	r3, [r7, #23]
  return res;
 8010058:	7dfb      	ldrb	r3, [r7, #23]
}
 801005a:	4618      	mov	r0, r3
 801005c:	371c      	adds	r7, #28
 801005e:	46bd      	mov	sp, r7
 8010060:	bd90      	pop	{r4, r7, pc}
 8010062:	bf00      	nop
 8010064:	2003c4a0 	.word	0x2003c4a0

08010068 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010068:	b590      	push	{r4, r7, lr}
 801006a:	b087      	sub	sp, #28
 801006c:	af00      	add	r7, sp, #0
 801006e:	60b9      	str	r1, [r7, #8]
 8010070:	607a      	str	r2, [r7, #4]
 8010072:	603b      	str	r3, [r7, #0]
 8010074:	4603      	mov	r3, r0
 8010076:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010078:	7bfb      	ldrb	r3, [r7, #15]
 801007a:	4a0a      	ldr	r2, [pc, #40]	; (80100a4 <disk_write+0x3c>)
 801007c:	009b      	lsls	r3, r3, #2
 801007e:	4413      	add	r3, r2
 8010080:	685b      	ldr	r3, [r3, #4]
 8010082:	68dc      	ldr	r4, [r3, #12]
 8010084:	7bfb      	ldrb	r3, [r7, #15]
 8010086:	4a07      	ldr	r2, [pc, #28]	; (80100a4 <disk_write+0x3c>)
 8010088:	4413      	add	r3, r2
 801008a:	7a18      	ldrb	r0, [r3, #8]
 801008c:	683b      	ldr	r3, [r7, #0]
 801008e:	687a      	ldr	r2, [r7, #4]
 8010090:	68b9      	ldr	r1, [r7, #8]
 8010092:	47a0      	blx	r4
 8010094:	4603      	mov	r3, r0
 8010096:	75fb      	strb	r3, [r7, #23]
  return res;
 8010098:	7dfb      	ldrb	r3, [r7, #23]
}
 801009a:	4618      	mov	r0, r3
 801009c:	371c      	adds	r7, #28
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd90      	pop	{r4, r7, pc}
 80100a2:	bf00      	nop
 80100a4:	2003c4a0 	.word	0x2003c4a0

080100a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b084      	sub	sp, #16
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	4603      	mov	r3, r0
 80100b0:	603a      	str	r2, [r7, #0]
 80100b2:	71fb      	strb	r3, [r7, #7]
 80100b4:	460b      	mov	r3, r1
 80100b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80100b8:	79fb      	ldrb	r3, [r7, #7]
 80100ba:	4a09      	ldr	r2, [pc, #36]	; (80100e0 <disk_ioctl+0x38>)
 80100bc:	009b      	lsls	r3, r3, #2
 80100be:	4413      	add	r3, r2
 80100c0:	685b      	ldr	r3, [r3, #4]
 80100c2:	691b      	ldr	r3, [r3, #16]
 80100c4:	79fa      	ldrb	r2, [r7, #7]
 80100c6:	4906      	ldr	r1, [pc, #24]	; (80100e0 <disk_ioctl+0x38>)
 80100c8:	440a      	add	r2, r1
 80100ca:	7a10      	ldrb	r0, [r2, #8]
 80100cc:	79b9      	ldrb	r1, [r7, #6]
 80100ce:	683a      	ldr	r2, [r7, #0]
 80100d0:	4798      	blx	r3
 80100d2:	4603      	mov	r3, r0
 80100d4:	73fb      	strb	r3, [r7, #15]
  return res;
 80100d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3710      	adds	r7, #16
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}
 80100e0:	2003c4a0 	.word	0x2003c4a0

080100e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80100e4:	b480      	push	{r7}
 80100e6:	b085      	sub	sp, #20
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	3301      	adds	r3, #1
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80100f4:	89fb      	ldrh	r3, [r7, #14]
 80100f6:	021b      	lsls	r3, r3, #8
 80100f8:	b21a      	sxth	r2, r3
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	781b      	ldrb	r3, [r3, #0]
 80100fe:	b21b      	sxth	r3, r3
 8010100:	4313      	orrs	r3, r2
 8010102:	b21b      	sxth	r3, r3
 8010104:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010106:	89fb      	ldrh	r3, [r7, #14]
}
 8010108:	4618      	mov	r0, r3
 801010a:	3714      	adds	r7, #20
 801010c:	46bd      	mov	sp, r7
 801010e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010112:	4770      	bx	lr

08010114 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010114:	b480      	push	{r7}
 8010116:	b085      	sub	sp, #20
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	3303      	adds	r3, #3
 8010120:	781b      	ldrb	r3, [r3, #0]
 8010122:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	021b      	lsls	r3, r3, #8
 8010128:	687a      	ldr	r2, [r7, #4]
 801012a:	3202      	adds	r2, #2
 801012c:	7812      	ldrb	r2, [r2, #0]
 801012e:	4313      	orrs	r3, r2
 8010130:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	021b      	lsls	r3, r3, #8
 8010136:	687a      	ldr	r2, [r7, #4]
 8010138:	3201      	adds	r2, #1
 801013a:	7812      	ldrb	r2, [r2, #0]
 801013c:	4313      	orrs	r3, r2
 801013e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	021b      	lsls	r3, r3, #8
 8010144:	687a      	ldr	r2, [r7, #4]
 8010146:	7812      	ldrb	r2, [r2, #0]
 8010148:	4313      	orrs	r3, r2
 801014a:	60fb      	str	r3, [r7, #12]
	return rv;
 801014c:	68fb      	ldr	r3, [r7, #12]
}
 801014e:	4618      	mov	r0, r3
 8010150:	3714      	adds	r7, #20
 8010152:	46bd      	mov	sp, r7
 8010154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010158:	4770      	bx	lr

0801015a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801015a:	b480      	push	{r7}
 801015c:	b083      	sub	sp, #12
 801015e:	af00      	add	r7, sp, #0
 8010160:	6078      	str	r0, [r7, #4]
 8010162:	460b      	mov	r3, r1
 8010164:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	1c5a      	adds	r2, r3, #1
 801016a:	607a      	str	r2, [r7, #4]
 801016c:	887a      	ldrh	r2, [r7, #2]
 801016e:	b2d2      	uxtb	r2, r2
 8010170:	701a      	strb	r2, [r3, #0]
 8010172:	887b      	ldrh	r3, [r7, #2]
 8010174:	0a1b      	lsrs	r3, r3, #8
 8010176:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	1c5a      	adds	r2, r3, #1
 801017c:	607a      	str	r2, [r7, #4]
 801017e:	887a      	ldrh	r2, [r7, #2]
 8010180:	b2d2      	uxtb	r2, r2
 8010182:	701a      	strb	r2, [r3, #0]
}
 8010184:	bf00      	nop
 8010186:	370c      	adds	r7, #12
 8010188:	46bd      	mov	sp, r7
 801018a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018e:	4770      	bx	lr

08010190 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010190:	b480      	push	{r7}
 8010192:	b083      	sub	sp, #12
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
 8010198:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	1c5a      	adds	r2, r3, #1
 801019e:	607a      	str	r2, [r7, #4]
 80101a0:	683a      	ldr	r2, [r7, #0]
 80101a2:	b2d2      	uxtb	r2, r2
 80101a4:	701a      	strb	r2, [r3, #0]
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	0a1b      	lsrs	r3, r3, #8
 80101aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	1c5a      	adds	r2, r3, #1
 80101b0:	607a      	str	r2, [r7, #4]
 80101b2:	683a      	ldr	r2, [r7, #0]
 80101b4:	b2d2      	uxtb	r2, r2
 80101b6:	701a      	strb	r2, [r3, #0]
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	0a1b      	lsrs	r3, r3, #8
 80101bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	1c5a      	adds	r2, r3, #1
 80101c2:	607a      	str	r2, [r7, #4]
 80101c4:	683a      	ldr	r2, [r7, #0]
 80101c6:	b2d2      	uxtb	r2, r2
 80101c8:	701a      	strb	r2, [r3, #0]
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	0a1b      	lsrs	r3, r3, #8
 80101ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	1c5a      	adds	r2, r3, #1
 80101d4:	607a      	str	r2, [r7, #4]
 80101d6:	683a      	ldr	r2, [r7, #0]
 80101d8:	b2d2      	uxtb	r2, r2
 80101da:	701a      	strb	r2, [r3, #0]
}
 80101dc:	bf00      	nop
 80101de:	370c      	adds	r7, #12
 80101e0:	46bd      	mov	sp, r7
 80101e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e6:	4770      	bx	lr

080101e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80101e8:	b480      	push	{r7}
 80101ea:	b087      	sub	sp, #28
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	60f8      	str	r0, [r7, #12]
 80101f0:	60b9      	str	r1, [r7, #8]
 80101f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d00d      	beq.n	801021e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010202:	693a      	ldr	r2, [r7, #16]
 8010204:	1c53      	adds	r3, r2, #1
 8010206:	613b      	str	r3, [r7, #16]
 8010208:	697b      	ldr	r3, [r7, #20]
 801020a:	1c59      	adds	r1, r3, #1
 801020c:	6179      	str	r1, [r7, #20]
 801020e:	7812      	ldrb	r2, [r2, #0]
 8010210:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	3b01      	subs	r3, #1
 8010216:	607b      	str	r3, [r7, #4]
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d1f1      	bne.n	8010202 <mem_cpy+0x1a>
	}
}
 801021e:	bf00      	nop
 8010220:	371c      	adds	r7, #28
 8010222:	46bd      	mov	sp, r7
 8010224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010228:	4770      	bx	lr

0801022a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801022a:	b480      	push	{r7}
 801022c:	b087      	sub	sp, #28
 801022e:	af00      	add	r7, sp, #0
 8010230:	60f8      	str	r0, [r7, #12]
 8010232:	60b9      	str	r1, [r7, #8]
 8010234:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801023a:	697b      	ldr	r3, [r7, #20]
 801023c:	1c5a      	adds	r2, r3, #1
 801023e:	617a      	str	r2, [r7, #20]
 8010240:	68ba      	ldr	r2, [r7, #8]
 8010242:	b2d2      	uxtb	r2, r2
 8010244:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	3b01      	subs	r3, #1
 801024a:	607b      	str	r3, [r7, #4]
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d1f3      	bne.n	801023a <mem_set+0x10>
}
 8010252:	bf00      	nop
 8010254:	371c      	adds	r7, #28
 8010256:	46bd      	mov	sp, r7
 8010258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025c:	4770      	bx	lr

0801025e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801025e:	b480      	push	{r7}
 8010260:	b089      	sub	sp, #36	; 0x24
 8010262:	af00      	add	r7, sp, #0
 8010264:	60f8      	str	r0, [r7, #12]
 8010266:	60b9      	str	r1, [r7, #8]
 8010268:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	61fb      	str	r3, [r7, #28]
 801026e:	68bb      	ldr	r3, [r7, #8]
 8010270:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010272:	2300      	movs	r3, #0
 8010274:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010276:	69fb      	ldr	r3, [r7, #28]
 8010278:	1c5a      	adds	r2, r3, #1
 801027a:	61fa      	str	r2, [r7, #28]
 801027c:	781b      	ldrb	r3, [r3, #0]
 801027e:	4619      	mov	r1, r3
 8010280:	69bb      	ldr	r3, [r7, #24]
 8010282:	1c5a      	adds	r2, r3, #1
 8010284:	61ba      	str	r2, [r7, #24]
 8010286:	781b      	ldrb	r3, [r3, #0]
 8010288:	1acb      	subs	r3, r1, r3
 801028a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	3b01      	subs	r3, #1
 8010290:	607b      	str	r3, [r7, #4]
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d002      	beq.n	801029e <mem_cmp+0x40>
 8010298:	697b      	ldr	r3, [r7, #20]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d0eb      	beq.n	8010276 <mem_cmp+0x18>

	return r;
 801029e:	697b      	ldr	r3, [r7, #20]
}
 80102a0:	4618      	mov	r0, r3
 80102a2:	3724      	adds	r7, #36	; 0x24
 80102a4:	46bd      	mov	sp, r7
 80102a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102aa:	4770      	bx	lr

080102ac <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80102ac:	b480      	push	{r7}
 80102ae:	b083      	sub	sp, #12
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
 80102b4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80102b6:	e002      	b.n	80102be <chk_chr+0x12>
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	3301      	adds	r3, #1
 80102bc:	607b      	str	r3, [r7, #4]
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	781b      	ldrb	r3, [r3, #0]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d005      	beq.n	80102d2 <chk_chr+0x26>
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	781b      	ldrb	r3, [r3, #0]
 80102ca:	461a      	mov	r2, r3
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	4293      	cmp	r3, r2
 80102d0:	d1f2      	bne.n	80102b8 <chk_chr+0xc>
	return *str;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	781b      	ldrb	r3, [r3, #0]
}
 80102d6:	4618      	mov	r0, r3
 80102d8:	370c      	adds	r7, #12
 80102da:	46bd      	mov	sp, r7
 80102dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e0:	4770      	bx	lr
	...

080102e4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80102e4:	b480      	push	{r7}
 80102e6:	b085      	sub	sp, #20
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
 80102ec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80102ee:	2300      	movs	r3, #0
 80102f0:	60bb      	str	r3, [r7, #8]
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	60fb      	str	r3, [r7, #12]
 80102f6:	e029      	b.n	801034c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80102f8:	4a27      	ldr	r2, [pc, #156]	; (8010398 <chk_lock+0xb4>)
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	011b      	lsls	r3, r3, #4
 80102fe:	4413      	add	r3, r2
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d01d      	beq.n	8010342 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010306:	4a24      	ldr	r2, [pc, #144]	; (8010398 <chk_lock+0xb4>)
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	011b      	lsls	r3, r3, #4
 801030c:	4413      	add	r3, r2
 801030e:	681a      	ldr	r2, [r3, #0]
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	429a      	cmp	r2, r3
 8010316:	d116      	bne.n	8010346 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010318:	4a1f      	ldr	r2, [pc, #124]	; (8010398 <chk_lock+0xb4>)
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	011b      	lsls	r3, r3, #4
 801031e:	4413      	add	r3, r2
 8010320:	3304      	adds	r3, #4
 8010322:	681a      	ldr	r2, [r3, #0]
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010328:	429a      	cmp	r2, r3
 801032a:	d10c      	bne.n	8010346 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801032c:	4a1a      	ldr	r2, [pc, #104]	; (8010398 <chk_lock+0xb4>)
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	011b      	lsls	r3, r3, #4
 8010332:	4413      	add	r3, r2
 8010334:	3308      	adds	r3, #8
 8010336:	681a      	ldr	r2, [r3, #0]
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801033c:	429a      	cmp	r2, r3
 801033e:	d102      	bne.n	8010346 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010340:	e007      	b.n	8010352 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010342:	2301      	movs	r3, #1
 8010344:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	3301      	adds	r3, #1
 801034a:	60fb      	str	r3, [r7, #12]
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	2b01      	cmp	r3, #1
 8010350:	d9d2      	bls.n	80102f8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	2b02      	cmp	r3, #2
 8010356:	d109      	bne.n	801036c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d102      	bne.n	8010364 <chk_lock+0x80>
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	2b02      	cmp	r3, #2
 8010362:	d101      	bne.n	8010368 <chk_lock+0x84>
 8010364:	2300      	movs	r3, #0
 8010366:	e010      	b.n	801038a <chk_lock+0xa6>
 8010368:	2312      	movs	r3, #18
 801036a:	e00e      	b.n	801038a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d108      	bne.n	8010384 <chk_lock+0xa0>
 8010372:	4a09      	ldr	r2, [pc, #36]	; (8010398 <chk_lock+0xb4>)
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	011b      	lsls	r3, r3, #4
 8010378:	4413      	add	r3, r2
 801037a:	330c      	adds	r3, #12
 801037c:	881b      	ldrh	r3, [r3, #0]
 801037e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010382:	d101      	bne.n	8010388 <chk_lock+0xa4>
 8010384:	2310      	movs	r3, #16
 8010386:	e000      	b.n	801038a <chk_lock+0xa6>
 8010388:	2300      	movs	r3, #0
}
 801038a:	4618      	mov	r0, r3
 801038c:	3714      	adds	r7, #20
 801038e:	46bd      	mov	sp, r7
 8010390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010394:	4770      	bx	lr
 8010396:	bf00      	nop
 8010398:	2003c480 	.word	0x2003c480

0801039c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801039c:	b480      	push	{r7}
 801039e:	b083      	sub	sp, #12
 80103a0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80103a2:	2300      	movs	r3, #0
 80103a4:	607b      	str	r3, [r7, #4]
 80103a6:	e002      	b.n	80103ae <enq_lock+0x12>
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	3301      	adds	r3, #1
 80103ac:	607b      	str	r3, [r7, #4]
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	2b01      	cmp	r3, #1
 80103b2:	d806      	bhi.n	80103c2 <enq_lock+0x26>
 80103b4:	4a09      	ldr	r2, [pc, #36]	; (80103dc <enq_lock+0x40>)
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	011b      	lsls	r3, r3, #4
 80103ba:	4413      	add	r3, r2
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d1f2      	bne.n	80103a8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	2b02      	cmp	r3, #2
 80103c6:	bf14      	ite	ne
 80103c8:	2301      	movne	r3, #1
 80103ca:	2300      	moveq	r3, #0
 80103cc:	b2db      	uxtb	r3, r3
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	370c      	adds	r7, #12
 80103d2:	46bd      	mov	sp, r7
 80103d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d8:	4770      	bx	lr
 80103da:	bf00      	nop
 80103dc:	2003c480 	.word	0x2003c480

080103e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80103e0:	b480      	push	{r7}
 80103e2:	b085      	sub	sp, #20
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
 80103e8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80103ea:	2300      	movs	r3, #0
 80103ec:	60fb      	str	r3, [r7, #12]
 80103ee:	e01f      	b.n	8010430 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80103f0:	4a41      	ldr	r2, [pc, #260]	; (80104f8 <inc_lock+0x118>)
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	011b      	lsls	r3, r3, #4
 80103f6:	4413      	add	r3, r2
 80103f8:	681a      	ldr	r2, [r3, #0]
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	429a      	cmp	r2, r3
 8010400:	d113      	bne.n	801042a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010402:	4a3d      	ldr	r2, [pc, #244]	; (80104f8 <inc_lock+0x118>)
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	011b      	lsls	r3, r3, #4
 8010408:	4413      	add	r3, r2
 801040a:	3304      	adds	r3, #4
 801040c:	681a      	ldr	r2, [r3, #0]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010412:	429a      	cmp	r2, r3
 8010414:	d109      	bne.n	801042a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010416:	4a38      	ldr	r2, [pc, #224]	; (80104f8 <inc_lock+0x118>)
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	011b      	lsls	r3, r3, #4
 801041c:	4413      	add	r3, r2
 801041e:	3308      	adds	r3, #8
 8010420:	681a      	ldr	r2, [r3, #0]
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010426:	429a      	cmp	r2, r3
 8010428:	d006      	beq.n	8010438 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	3301      	adds	r3, #1
 801042e:	60fb      	str	r3, [r7, #12]
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	2b01      	cmp	r3, #1
 8010434:	d9dc      	bls.n	80103f0 <inc_lock+0x10>
 8010436:	e000      	b.n	801043a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010438:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	2b02      	cmp	r3, #2
 801043e:	d132      	bne.n	80104a6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010440:	2300      	movs	r3, #0
 8010442:	60fb      	str	r3, [r7, #12]
 8010444:	e002      	b.n	801044c <inc_lock+0x6c>
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	3301      	adds	r3, #1
 801044a:	60fb      	str	r3, [r7, #12]
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	2b01      	cmp	r3, #1
 8010450:	d806      	bhi.n	8010460 <inc_lock+0x80>
 8010452:	4a29      	ldr	r2, [pc, #164]	; (80104f8 <inc_lock+0x118>)
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	011b      	lsls	r3, r3, #4
 8010458:	4413      	add	r3, r2
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d1f2      	bne.n	8010446 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	2b02      	cmp	r3, #2
 8010464:	d101      	bne.n	801046a <inc_lock+0x8a>
 8010466:	2300      	movs	r3, #0
 8010468:	e040      	b.n	80104ec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681a      	ldr	r2, [r3, #0]
 801046e:	4922      	ldr	r1, [pc, #136]	; (80104f8 <inc_lock+0x118>)
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	011b      	lsls	r3, r3, #4
 8010474:	440b      	add	r3, r1
 8010476:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	689a      	ldr	r2, [r3, #8]
 801047c:	491e      	ldr	r1, [pc, #120]	; (80104f8 <inc_lock+0x118>)
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	011b      	lsls	r3, r3, #4
 8010482:	440b      	add	r3, r1
 8010484:	3304      	adds	r3, #4
 8010486:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	695a      	ldr	r2, [r3, #20]
 801048c:	491a      	ldr	r1, [pc, #104]	; (80104f8 <inc_lock+0x118>)
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	011b      	lsls	r3, r3, #4
 8010492:	440b      	add	r3, r1
 8010494:	3308      	adds	r3, #8
 8010496:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010498:	4a17      	ldr	r2, [pc, #92]	; (80104f8 <inc_lock+0x118>)
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	011b      	lsls	r3, r3, #4
 801049e:	4413      	add	r3, r2
 80104a0:	330c      	adds	r3, #12
 80104a2:	2200      	movs	r2, #0
 80104a4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80104a6:	683b      	ldr	r3, [r7, #0]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d009      	beq.n	80104c0 <inc_lock+0xe0>
 80104ac:	4a12      	ldr	r2, [pc, #72]	; (80104f8 <inc_lock+0x118>)
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	011b      	lsls	r3, r3, #4
 80104b2:	4413      	add	r3, r2
 80104b4:	330c      	adds	r3, #12
 80104b6:	881b      	ldrh	r3, [r3, #0]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d001      	beq.n	80104c0 <inc_lock+0xe0>
 80104bc:	2300      	movs	r3, #0
 80104be:	e015      	b.n	80104ec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d108      	bne.n	80104d8 <inc_lock+0xf8>
 80104c6:	4a0c      	ldr	r2, [pc, #48]	; (80104f8 <inc_lock+0x118>)
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	011b      	lsls	r3, r3, #4
 80104cc:	4413      	add	r3, r2
 80104ce:	330c      	adds	r3, #12
 80104d0:	881b      	ldrh	r3, [r3, #0]
 80104d2:	3301      	adds	r3, #1
 80104d4:	b29a      	uxth	r2, r3
 80104d6:	e001      	b.n	80104dc <inc_lock+0xfc>
 80104d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80104dc:	4906      	ldr	r1, [pc, #24]	; (80104f8 <inc_lock+0x118>)
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	011b      	lsls	r3, r3, #4
 80104e2:	440b      	add	r3, r1
 80104e4:	330c      	adds	r3, #12
 80104e6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	3301      	adds	r3, #1
}
 80104ec:	4618      	mov	r0, r3
 80104ee:	3714      	adds	r7, #20
 80104f0:	46bd      	mov	sp, r7
 80104f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f6:	4770      	bx	lr
 80104f8:	2003c480 	.word	0x2003c480

080104fc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80104fc:	b480      	push	{r7}
 80104fe:	b085      	sub	sp, #20
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	3b01      	subs	r3, #1
 8010508:	607b      	str	r3, [r7, #4]
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2b01      	cmp	r3, #1
 801050e:	d825      	bhi.n	801055c <dec_lock+0x60>
		n = Files[i].ctr;
 8010510:	4a17      	ldr	r2, [pc, #92]	; (8010570 <dec_lock+0x74>)
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	011b      	lsls	r3, r3, #4
 8010516:	4413      	add	r3, r2
 8010518:	330c      	adds	r3, #12
 801051a:	881b      	ldrh	r3, [r3, #0]
 801051c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801051e:	89fb      	ldrh	r3, [r7, #14]
 8010520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010524:	d101      	bne.n	801052a <dec_lock+0x2e>
 8010526:	2300      	movs	r3, #0
 8010528:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801052a:	89fb      	ldrh	r3, [r7, #14]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d002      	beq.n	8010536 <dec_lock+0x3a>
 8010530:	89fb      	ldrh	r3, [r7, #14]
 8010532:	3b01      	subs	r3, #1
 8010534:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010536:	4a0e      	ldr	r2, [pc, #56]	; (8010570 <dec_lock+0x74>)
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	011b      	lsls	r3, r3, #4
 801053c:	4413      	add	r3, r2
 801053e:	330c      	adds	r3, #12
 8010540:	89fa      	ldrh	r2, [r7, #14]
 8010542:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010544:	89fb      	ldrh	r3, [r7, #14]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d105      	bne.n	8010556 <dec_lock+0x5a>
 801054a:	4a09      	ldr	r2, [pc, #36]	; (8010570 <dec_lock+0x74>)
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	011b      	lsls	r3, r3, #4
 8010550:	4413      	add	r3, r2
 8010552:	2200      	movs	r2, #0
 8010554:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010556:	2300      	movs	r3, #0
 8010558:	737b      	strb	r3, [r7, #13]
 801055a:	e001      	b.n	8010560 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801055c:	2302      	movs	r3, #2
 801055e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010560:	7b7b      	ldrb	r3, [r7, #13]
}
 8010562:	4618      	mov	r0, r3
 8010564:	3714      	adds	r7, #20
 8010566:	46bd      	mov	sp, r7
 8010568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056c:	4770      	bx	lr
 801056e:	bf00      	nop
 8010570:	2003c480 	.word	0x2003c480

08010574 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010574:	b480      	push	{r7}
 8010576:	b085      	sub	sp, #20
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801057c:	2300      	movs	r3, #0
 801057e:	60fb      	str	r3, [r7, #12]
 8010580:	e010      	b.n	80105a4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010582:	4a0d      	ldr	r2, [pc, #52]	; (80105b8 <clear_lock+0x44>)
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	011b      	lsls	r3, r3, #4
 8010588:	4413      	add	r3, r2
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	687a      	ldr	r2, [r7, #4]
 801058e:	429a      	cmp	r2, r3
 8010590:	d105      	bne.n	801059e <clear_lock+0x2a>
 8010592:	4a09      	ldr	r2, [pc, #36]	; (80105b8 <clear_lock+0x44>)
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	011b      	lsls	r3, r3, #4
 8010598:	4413      	add	r3, r2
 801059a:	2200      	movs	r2, #0
 801059c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	3301      	adds	r3, #1
 80105a2:	60fb      	str	r3, [r7, #12]
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	2b01      	cmp	r3, #1
 80105a8:	d9eb      	bls.n	8010582 <clear_lock+0xe>
	}
}
 80105aa:	bf00      	nop
 80105ac:	3714      	adds	r7, #20
 80105ae:	46bd      	mov	sp, r7
 80105b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b4:	4770      	bx	lr
 80105b6:	bf00      	nop
 80105b8:	2003c480 	.word	0x2003c480

080105bc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b086      	sub	sp, #24
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80105c4:	2300      	movs	r3, #0
 80105c6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	78db      	ldrb	r3, [r3, #3]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d034      	beq.n	801063a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105d4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	7858      	ldrb	r0, [r3, #1]
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80105e0:	2301      	movs	r3, #1
 80105e2:	697a      	ldr	r2, [r7, #20]
 80105e4:	f7ff fd40 	bl	8010068 <disk_write>
 80105e8:	4603      	mov	r3, r0
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d002      	beq.n	80105f4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80105ee:	2301      	movs	r3, #1
 80105f0:	73fb      	strb	r3, [r7, #15]
 80105f2:	e022      	b.n	801063a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2200      	movs	r2, #0
 80105f8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105fe:	697a      	ldr	r2, [r7, #20]
 8010600:	1ad2      	subs	r2, r2, r3
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6a1b      	ldr	r3, [r3, #32]
 8010606:	429a      	cmp	r2, r3
 8010608:	d217      	bcs.n	801063a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	789b      	ldrb	r3, [r3, #2]
 801060e:	613b      	str	r3, [r7, #16]
 8010610:	e010      	b.n	8010634 <sync_window+0x78>
					wsect += fs->fsize;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	6a1b      	ldr	r3, [r3, #32]
 8010616:	697a      	ldr	r2, [r7, #20]
 8010618:	4413      	add	r3, r2
 801061a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	7858      	ldrb	r0, [r3, #1]
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010626:	2301      	movs	r3, #1
 8010628:	697a      	ldr	r2, [r7, #20]
 801062a:	f7ff fd1d 	bl	8010068 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801062e:	693b      	ldr	r3, [r7, #16]
 8010630:	3b01      	subs	r3, #1
 8010632:	613b      	str	r3, [r7, #16]
 8010634:	693b      	ldr	r3, [r7, #16]
 8010636:	2b01      	cmp	r3, #1
 8010638:	d8eb      	bhi.n	8010612 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801063a:	7bfb      	ldrb	r3, [r7, #15]
}
 801063c:	4618      	mov	r0, r3
 801063e:	3718      	adds	r7, #24
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}

08010644 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b084      	sub	sp, #16
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
 801064c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801064e:	2300      	movs	r3, #0
 8010650:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010656:	683a      	ldr	r2, [r7, #0]
 8010658:	429a      	cmp	r2, r3
 801065a:	d01b      	beq.n	8010694 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f7ff ffad 	bl	80105bc <sync_window>
 8010662:	4603      	mov	r3, r0
 8010664:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010666:	7bfb      	ldrb	r3, [r7, #15]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d113      	bne.n	8010694 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	7858      	ldrb	r0, [r3, #1]
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010676:	2301      	movs	r3, #1
 8010678:	683a      	ldr	r2, [r7, #0]
 801067a:	f7ff fcd5 	bl	8010028 <disk_read>
 801067e:	4603      	mov	r3, r0
 8010680:	2b00      	cmp	r3, #0
 8010682:	d004      	beq.n	801068e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010684:	f04f 33ff 	mov.w	r3, #4294967295
 8010688:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801068a:	2301      	movs	r3, #1
 801068c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	683a      	ldr	r2, [r7, #0]
 8010692:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8010694:	7bfb      	ldrb	r3, [r7, #15]
}
 8010696:	4618      	mov	r0, r3
 8010698:	3710      	adds	r7, #16
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}
	...

080106a0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b084      	sub	sp, #16
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	f7ff ff87 	bl	80105bc <sync_window>
 80106ae:	4603      	mov	r3, r0
 80106b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80106b2:	7bfb      	ldrb	r3, [r7, #15]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d159      	bne.n	801076c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	781b      	ldrb	r3, [r3, #0]
 80106bc:	2b03      	cmp	r3, #3
 80106be:	d149      	bne.n	8010754 <sync_fs+0xb4>
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	791b      	ldrb	r3, [r3, #4]
 80106c4:	2b01      	cmp	r3, #1
 80106c6:	d145      	bne.n	8010754 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	899b      	ldrh	r3, [r3, #12]
 80106d2:	461a      	mov	r2, r3
 80106d4:	2100      	movs	r1, #0
 80106d6:	f7ff fda8 	bl	801022a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	3338      	adds	r3, #56	; 0x38
 80106de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80106e2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80106e6:	4618      	mov	r0, r3
 80106e8:	f7ff fd37 	bl	801015a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	3338      	adds	r3, #56	; 0x38
 80106f0:	4921      	ldr	r1, [pc, #132]	; (8010778 <sync_fs+0xd8>)
 80106f2:	4618      	mov	r0, r3
 80106f4:	f7ff fd4c 	bl	8010190 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	3338      	adds	r3, #56	; 0x38
 80106fc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010700:	491e      	ldr	r1, [pc, #120]	; (801077c <sync_fs+0xdc>)
 8010702:	4618      	mov	r0, r3
 8010704:	f7ff fd44 	bl	8010190 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	3338      	adds	r3, #56	; 0x38
 801070c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	695b      	ldr	r3, [r3, #20]
 8010714:	4619      	mov	r1, r3
 8010716:	4610      	mov	r0, r2
 8010718:	f7ff fd3a 	bl	8010190 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	3338      	adds	r3, #56	; 0x38
 8010720:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	691b      	ldr	r3, [r3, #16]
 8010728:	4619      	mov	r1, r3
 801072a:	4610      	mov	r0, r2
 801072c:	f7ff fd30 	bl	8010190 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010734:	1c5a      	adds	r2, r3, #1
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	7858      	ldrb	r0, [r3, #1]
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010748:	2301      	movs	r3, #1
 801074a:	f7ff fc8d 	bl	8010068 <disk_write>
			fs->fsi_flag = 0;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	2200      	movs	r2, #0
 8010752:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	785b      	ldrb	r3, [r3, #1]
 8010758:	2200      	movs	r2, #0
 801075a:	2100      	movs	r1, #0
 801075c:	4618      	mov	r0, r3
 801075e:	f7ff fca3 	bl	80100a8 <disk_ioctl>
 8010762:	4603      	mov	r3, r0
 8010764:	2b00      	cmp	r3, #0
 8010766:	d001      	beq.n	801076c <sync_fs+0xcc>
 8010768:	2301      	movs	r3, #1
 801076a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801076c:	7bfb      	ldrb	r3, [r7, #15]
}
 801076e:	4618      	mov	r0, r3
 8010770:	3710      	adds	r7, #16
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}
 8010776:	bf00      	nop
 8010778:	41615252 	.word	0x41615252
 801077c:	61417272 	.word	0x61417272

08010780 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010780:	b480      	push	{r7}
 8010782:	b083      	sub	sp, #12
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
 8010788:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	3b02      	subs	r3, #2
 801078e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	69db      	ldr	r3, [r3, #28]
 8010794:	3b02      	subs	r3, #2
 8010796:	683a      	ldr	r2, [r7, #0]
 8010798:	429a      	cmp	r2, r3
 801079a:	d301      	bcc.n	80107a0 <clust2sect+0x20>
 801079c:	2300      	movs	r3, #0
 801079e:	e008      	b.n	80107b2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	895b      	ldrh	r3, [r3, #10]
 80107a4:	461a      	mov	r2, r3
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	fb03 f202 	mul.w	r2, r3, r2
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107b0:	4413      	add	r3, r2
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	370c      	adds	r7, #12
 80107b6:	46bd      	mov	sp, r7
 80107b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107bc:	4770      	bx	lr

080107be <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80107be:	b580      	push	{r7, lr}
 80107c0:	b086      	sub	sp, #24
 80107c2:	af00      	add	r7, sp, #0
 80107c4:	6078      	str	r0, [r7, #4]
 80107c6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80107ce:	683b      	ldr	r3, [r7, #0]
 80107d0:	2b01      	cmp	r3, #1
 80107d2:	d904      	bls.n	80107de <get_fat+0x20>
 80107d4:	693b      	ldr	r3, [r7, #16]
 80107d6:	69db      	ldr	r3, [r3, #28]
 80107d8:	683a      	ldr	r2, [r7, #0]
 80107da:	429a      	cmp	r2, r3
 80107dc:	d302      	bcc.n	80107e4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80107de:	2301      	movs	r3, #1
 80107e0:	617b      	str	r3, [r7, #20]
 80107e2:	e0b7      	b.n	8010954 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80107e4:	f04f 33ff 	mov.w	r3, #4294967295
 80107e8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80107ea:	693b      	ldr	r3, [r7, #16]
 80107ec:	781b      	ldrb	r3, [r3, #0]
 80107ee:	2b02      	cmp	r3, #2
 80107f0:	d05a      	beq.n	80108a8 <get_fat+0xea>
 80107f2:	2b03      	cmp	r3, #3
 80107f4:	d07d      	beq.n	80108f2 <get_fat+0x134>
 80107f6:	2b01      	cmp	r3, #1
 80107f8:	f040 80a2 	bne.w	8010940 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	60fb      	str	r3, [r7, #12]
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	085b      	lsrs	r3, r3, #1
 8010804:	68fa      	ldr	r2, [r7, #12]
 8010806:	4413      	add	r3, r2
 8010808:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801080a:	693b      	ldr	r3, [r7, #16]
 801080c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801080e:	693b      	ldr	r3, [r7, #16]
 8010810:	899b      	ldrh	r3, [r3, #12]
 8010812:	4619      	mov	r1, r3
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	fbb3 f3f1 	udiv	r3, r3, r1
 801081a:	4413      	add	r3, r2
 801081c:	4619      	mov	r1, r3
 801081e:	6938      	ldr	r0, [r7, #16]
 8010820:	f7ff ff10 	bl	8010644 <move_window>
 8010824:	4603      	mov	r3, r0
 8010826:	2b00      	cmp	r3, #0
 8010828:	f040 808d 	bne.w	8010946 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	1c5a      	adds	r2, r3, #1
 8010830:	60fa      	str	r2, [r7, #12]
 8010832:	693a      	ldr	r2, [r7, #16]
 8010834:	8992      	ldrh	r2, [r2, #12]
 8010836:	fbb3 f1f2 	udiv	r1, r3, r2
 801083a:	fb02 f201 	mul.w	r2, r2, r1
 801083e:	1a9b      	subs	r3, r3, r2
 8010840:	693a      	ldr	r2, [r7, #16]
 8010842:	4413      	add	r3, r2
 8010844:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010848:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801084a:	693b      	ldr	r3, [r7, #16]
 801084c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801084e:	693b      	ldr	r3, [r7, #16]
 8010850:	899b      	ldrh	r3, [r3, #12]
 8010852:	4619      	mov	r1, r3
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	fbb3 f3f1 	udiv	r3, r3, r1
 801085a:	4413      	add	r3, r2
 801085c:	4619      	mov	r1, r3
 801085e:	6938      	ldr	r0, [r7, #16]
 8010860:	f7ff fef0 	bl	8010644 <move_window>
 8010864:	4603      	mov	r3, r0
 8010866:	2b00      	cmp	r3, #0
 8010868:	d16f      	bne.n	801094a <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 801086a:	693b      	ldr	r3, [r7, #16]
 801086c:	899b      	ldrh	r3, [r3, #12]
 801086e:	461a      	mov	r2, r3
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	fbb3 f1f2 	udiv	r1, r3, r2
 8010876:	fb02 f201 	mul.w	r2, r2, r1
 801087a:	1a9b      	subs	r3, r3, r2
 801087c:	693a      	ldr	r2, [r7, #16]
 801087e:	4413      	add	r3, r2
 8010880:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010884:	021b      	lsls	r3, r3, #8
 8010886:	461a      	mov	r2, r3
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	4313      	orrs	r3, r2
 801088c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	f003 0301 	and.w	r3, r3, #1
 8010894:	2b00      	cmp	r3, #0
 8010896:	d002      	beq.n	801089e <get_fat+0xe0>
 8010898:	68bb      	ldr	r3, [r7, #8]
 801089a:	091b      	lsrs	r3, r3, #4
 801089c:	e002      	b.n	80108a4 <get_fat+0xe6>
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80108a4:	617b      	str	r3, [r7, #20]
			break;
 80108a6:	e055      	b.n	8010954 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80108a8:	693b      	ldr	r3, [r7, #16]
 80108aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80108ac:	693b      	ldr	r3, [r7, #16]
 80108ae:	899b      	ldrh	r3, [r3, #12]
 80108b0:	085b      	lsrs	r3, r3, #1
 80108b2:	b29b      	uxth	r3, r3
 80108b4:	4619      	mov	r1, r3
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80108bc:	4413      	add	r3, r2
 80108be:	4619      	mov	r1, r3
 80108c0:	6938      	ldr	r0, [r7, #16]
 80108c2:	f7ff febf 	bl	8010644 <move_window>
 80108c6:	4603      	mov	r3, r0
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d140      	bne.n	801094e <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80108cc:	693b      	ldr	r3, [r7, #16]
 80108ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	005b      	lsls	r3, r3, #1
 80108d6:	693a      	ldr	r2, [r7, #16]
 80108d8:	8992      	ldrh	r2, [r2, #12]
 80108da:	fbb3 f0f2 	udiv	r0, r3, r2
 80108de:	fb02 f200 	mul.w	r2, r2, r0
 80108e2:	1a9b      	subs	r3, r3, r2
 80108e4:	440b      	add	r3, r1
 80108e6:	4618      	mov	r0, r3
 80108e8:	f7ff fbfc 	bl	80100e4 <ld_word>
 80108ec:	4603      	mov	r3, r0
 80108ee:	617b      	str	r3, [r7, #20]
			break;
 80108f0:	e030      	b.n	8010954 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80108f6:	693b      	ldr	r3, [r7, #16]
 80108f8:	899b      	ldrh	r3, [r3, #12]
 80108fa:	089b      	lsrs	r3, r3, #2
 80108fc:	b29b      	uxth	r3, r3
 80108fe:	4619      	mov	r1, r3
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	fbb3 f3f1 	udiv	r3, r3, r1
 8010906:	4413      	add	r3, r2
 8010908:	4619      	mov	r1, r3
 801090a:	6938      	ldr	r0, [r7, #16]
 801090c:	f7ff fe9a 	bl	8010644 <move_window>
 8010910:	4603      	mov	r3, r0
 8010912:	2b00      	cmp	r3, #0
 8010914:	d11d      	bne.n	8010952 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010916:	693b      	ldr	r3, [r7, #16]
 8010918:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	009b      	lsls	r3, r3, #2
 8010920:	693a      	ldr	r2, [r7, #16]
 8010922:	8992      	ldrh	r2, [r2, #12]
 8010924:	fbb3 f0f2 	udiv	r0, r3, r2
 8010928:	fb02 f200 	mul.w	r2, r2, r0
 801092c:	1a9b      	subs	r3, r3, r2
 801092e:	440b      	add	r3, r1
 8010930:	4618      	mov	r0, r3
 8010932:	f7ff fbef 	bl	8010114 <ld_dword>
 8010936:	4603      	mov	r3, r0
 8010938:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801093c:	617b      	str	r3, [r7, #20]
			break;
 801093e:	e009      	b.n	8010954 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010940:	2301      	movs	r3, #1
 8010942:	617b      	str	r3, [r7, #20]
 8010944:	e006      	b.n	8010954 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010946:	bf00      	nop
 8010948:	e004      	b.n	8010954 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801094a:	bf00      	nop
 801094c:	e002      	b.n	8010954 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801094e:	bf00      	nop
 8010950:	e000      	b.n	8010954 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010952:	bf00      	nop
		}
	}

	return val;
 8010954:	697b      	ldr	r3, [r7, #20]
}
 8010956:	4618      	mov	r0, r3
 8010958:	3718      	adds	r7, #24
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}

0801095e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801095e:	b590      	push	{r4, r7, lr}
 8010960:	b089      	sub	sp, #36	; 0x24
 8010962:	af00      	add	r7, sp, #0
 8010964:	60f8      	str	r0, [r7, #12]
 8010966:	60b9      	str	r1, [r7, #8]
 8010968:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801096a:	2302      	movs	r3, #2
 801096c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	2b01      	cmp	r3, #1
 8010972:	f240 8106 	bls.w	8010b82 <put_fat+0x224>
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	69db      	ldr	r3, [r3, #28]
 801097a:	68ba      	ldr	r2, [r7, #8]
 801097c:	429a      	cmp	r2, r3
 801097e:	f080 8100 	bcs.w	8010b82 <put_fat+0x224>
		switch (fs->fs_type) {
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	781b      	ldrb	r3, [r3, #0]
 8010986:	2b02      	cmp	r3, #2
 8010988:	f000 8088 	beq.w	8010a9c <put_fat+0x13e>
 801098c:	2b03      	cmp	r3, #3
 801098e:	f000 80b0 	beq.w	8010af2 <put_fat+0x194>
 8010992:	2b01      	cmp	r3, #1
 8010994:	f040 80f5 	bne.w	8010b82 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	61bb      	str	r3, [r7, #24]
 801099c:	69bb      	ldr	r3, [r7, #24]
 801099e:	085b      	lsrs	r3, r3, #1
 80109a0:	69ba      	ldr	r2, [r7, #24]
 80109a2:	4413      	add	r3, r2
 80109a4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	899b      	ldrh	r3, [r3, #12]
 80109ae:	4619      	mov	r1, r3
 80109b0:	69bb      	ldr	r3, [r7, #24]
 80109b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80109b6:	4413      	add	r3, r2
 80109b8:	4619      	mov	r1, r3
 80109ba:	68f8      	ldr	r0, [r7, #12]
 80109bc:	f7ff fe42 	bl	8010644 <move_window>
 80109c0:	4603      	mov	r3, r0
 80109c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80109c4:	7ffb      	ldrb	r3, [r7, #31]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	f040 80d4 	bne.w	8010b74 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80109d2:	69bb      	ldr	r3, [r7, #24]
 80109d4:	1c5a      	adds	r2, r3, #1
 80109d6:	61ba      	str	r2, [r7, #24]
 80109d8:	68fa      	ldr	r2, [r7, #12]
 80109da:	8992      	ldrh	r2, [r2, #12]
 80109dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80109e0:	fb02 f200 	mul.w	r2, r2, r0
 80109e4:	1a9b      	subs	r3, r3, r2
 80109e6:	440b      	add	r3, r1
 80109e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	f003 0301 	and.w	r3, r3, #1
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d00d      	beq.n	8010a10 <put_fat+0xb2>
 80109f4:	697b      	ldr	r3, [r7, #20]
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	b25b      	sxtb	r3, r3
 80109fa:	f003 030f 	and.w	r3, r3, #15
 80109fe:	b25a      	sxtb	r2, r3
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	b2db      	uxtb	r3, r3
 8010a04:	011b      	lsls	r3, r3, #4
 8010a06:	b25b      	sxtb	r3, r3
 8010a08:	4313      	orrs	r3, r2
 8010a0a:	b25b      	sxtb	r3, r3
 8010a0c:	b2db      	uxtb	r3, r3
 8010a0e:	e001      	b.n	8010a14 <put_fat+0xb6>
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	b2db      	uxtb	r3, r3
 8010a14:	697a      	ldr	r2, [r7, #20]
 8010a16:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	2201      	movs	r2, #1
 8010a1c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	899b      	ldrh	r3, [r3, #12]
 8010a26:	4619      	mov	r1, r3
 8010a28:	69bb      	ldr	r3, [r7, #24]
 8010a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8010a2e:	4413      	add	r3, r2
 8010a30:	4619      	mov	r1, r3
 8010a32:	68f8      	ldr	r0, [r7, #12]
 8010a34:	f7ff fe06 	bl	8010644 <move_window>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010a3c:	7ffb      	ldrb	r3, [r7, #31]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	f040 809a 	bne.w	8010b78 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	899b      	ldrh	r3, [r3, #12]
 8010a4e:	461a      	mov	r2, r3
 8010a50:	69bb      	ldr	r3, [r7, #24]
 8010a52:	fbb3 f0f2 	udiv	r0, r3, r2
 8010a56:	fb02 f200 	mul.w	r2, r2, r0
 8010a5a:	1a9b      	subs	r3, r3, r2
 8010a5c:	440b      	add	r3, r1
 8010a5e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010a60:	68bb      	ldr	r3, [r7, #8]
 8010a62:	f003 0301 	and.w	r3, r3, #1
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d003      	beq.n	8010a72 <put_fat+0x114>
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	091b      	lsrs	r3, r3, #4
 8010a6e:	b2db      	uxtb	r3, r3
 8010a70:	e00e      	b.n	8010a90 <put_fat+0x132>
 8010a72:	697b      	ldr	r3, [r7, #20]
 8010a74:	781b      	ldrb	r3, [r3, #0]
 8010a76:	b25b      	sxtb	r3, r3
 8010a78:	f023 030f 	bic.w	r3, r3, #15
 8010a7c:	b25a      	sxtb	r2, r3
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	0a1b      	lsrs	r3, r3, #8
 8010a82:	b25b      	sxtb	r3, r3
 8010a84:	f003 030f 	and.w	r3, r3, #15
 8010a88:	b25b      	sxtb	r3, r3
 8010a8a:	4313      	orrs	r3, r2
 8010a8c:	b25b      	sxtb	r3, r3
 8010a8e:	b2db      	uxtb	r3, r3
 8010a90:	697a      	ldr	r2, [r7, #20]
 8010a92:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	2201      	movs	r2, #1
 8010a98:	70da      	strb	r2, [r3, #3]
			break;
 8010a9a:	e072      	b.n	8010b82 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	899b      	ldrh	r3, [r3, #12]
 8010aa4:	085b      	lsrs	r3, r3, #1
 8010aa6:	b29b      	uxth	r3, r3
 8010aa8:	4619      	mov	r1, r3
 8010aaa:	68bb      	ldr	r3, [r7, #8]
 8010aac:	fbb3 f3f1 	udiv	r3, r3, r1
 8010ab0:	4413      	add	r3, r2
 8010ab2:	4619      	mov	r1, r3
 8010ab4:	68f8      	ldr	r0, [r7, #12]
 8010ab6:	f7ff fdc5 	bl	8010644 <move_window>
 8010aba:	4603      	mov	r3, r0
 8010abc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010abe:	7ffb      	ldrb	r3, [r7, #31]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d15b      	bne.n	8010b7c <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010aca:	68bb      	ldr	r3, [r7, #8]
 8010acc:	005b      	lsls	r3, r3, #1
 8010ace:	68fa      	ldr	r2, [r7, #12]
 8010ad0:	8992      	ldrh	r2, [r2, #12]
 8010ad2:	fbb3 f0f2 	udiv	r0, r3, r2
 8010ad6:	fb02 f200 	mul.w	r2, r2, r0
 8010ada:	1a9b      	subs	r3, r3, r2
 8010adc:	440b      	add	r3, r1
 8010ade:	687a      	ldr	r2, [r7, #4]
 8010ae0:	b292      	uxth	r2, r2
 8010ae2:	4611      	mov	r1, r2
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7ff fb38 	bl	801015a <st_word>
			fs->wflag = 1;
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	2201      	movs	r2, #1
 8010aee:	70da      	strb	r2, [r3, #3]
			break;
 8010af0:	e047      	b.n	8010b82 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	899b      	ldrh	r3, [r3, #12]
 8010afa:	089b      	lsrs	r3, r3, #2
 8010afc:	b29b      	uxth	r3, r3
 8010afe:	4619      	mov	r1, r3
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8010b06:	4413      	add	r3, r2
 8010b08:	4619      	mov	r1, r3
 8010b0a:	68f8      	ldr	r0, [r7, #12]
 8010b0c:	f7ff fd9a 	bl	8010644 <move_window>
 8010b10:	4603      	mov	r3, r0
 8010b12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010b14:	7ffb      	ldrb	r3, [r7, #31]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d132      	bne.n	8010b80 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	009b      	lsls	r3, r3, #2
 8010b2a:	68fa      	ldr	r2, [r7, #12]
 8010b2c:	8992      	ldrh	r2, [r2, #12]
 8010b2e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010b32:	fb02 f200 	mul.w	r2, r2, r0
 8010b36:	1a9b      	subs	r3, r3, r2
 8010b38:	440b      	add	r3, r1
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7ff faea 	bl	8010114 <ld_dword>
 8010b40:	4603      	mov	r3, r0
 8010b42:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010b46:	4323      	orrs	r3, r4
 8010b48:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010b50:	68bb      	ldr	r3, [r7, #8]
 8010b52:	009b      	lsls	r3, r3, #2
 8010b54:	68fa      	ldr	r2, [r7, #12]
 8010b56:	8992      	ldrh	r2, [r2, #12]
 8010b58:	fbb3 f0f2 	udiv	r0, r3, r2
 8010b5c:	fb02 f200 	mul.w	r2, r2, r0
 8010b60:	1a9b      	subs	r3, r3, r2
 8010b62:	440b      	add	r3, r1
 8010b64:	6879      	ldr	r1, [r7, #4]
 8010b66:	4618      	mov	r0, r3
 8010b68:	f7ff fb12 	bl	8010190 <st_dword>
			fs->wflag = 1;
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	2201      	movs	r2, #1
 8010b70:	70da      	strb	r2, [r3, #3]
			break;
 8010b72:	e006      	b.n	8010b82 <put_fat+0x224>
			if (res != FR_OK) break;
 8010b74:	bf00      	nop
 8010b76:	e004      	b.n	8010b82 <put_fat+0x224>
			if (res != FR_OK) break;
 8010b78:	bf00      	nop
 8010b7a:	e002      	b.n	8010b82 <put_fat+0x224>
			if (res != FR_OK) break;
 8010b7c:	bf00      	nop
 8010b7e:	e000      	b.n	8010b82 <put_fat+0x224>
			if (res != FR_OK) break;
 8010b80:	bf00      	nop
		}
	}
	return res;
 8010b82:	7ffb      	ldrb	r3, [r7, #31]
}
 8010b84:	4618      	mov	r0, r3
 8010b86:	3724      	adds	r7, #36	; 0x24
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd90      	pop	{r4, r7, pc}

08010b8c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b088      	sub	sp, #32
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	60f8      	str	r0, [r7, #12]
 8010b94:	60b9      	str	r1, [r7, #8]
 8010b96:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010b98:	2300      	movs	r3, #0
 8010b9a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010ba2:	68bb      	ldr	r3, [r7, #8]
 8010ba4:	2b01      	cmp	r3, #1
 8010ba6:	d904      	bls.n	8010bb2 <remove_chain+0x26>
 8010ba8:	69bb      	ldr	r3, [r7, #24]
 8010baa:	69db      	ldr	r3, [r3, #28]
 8010bac:	68ba      	ldr	r2, [r7, #8]
 8010bae:	429a      	cmp	r2, r3
 8010bb0:	d301      	bcc.n	8010bb6 <remove_chain+0x2a>
 8010bb2:	2302      	movs	r3, #2
 8010bb4:	e04b      	b.n	8010c4e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d00c      	beq.n	8010bd6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8010bc0:	6879      	ldr	r1, [r7, #4]
 8010bc2:	69b8      	ldr	r0, [r7, #24]
 8010bc4:	f7ff fecb 	bl	801095e <put_fat>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010bcc:	7ffb      	ldrb	r3, [r7, #31]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d001      	beq.n	8010bd6 <remove_chain+0x4a>
 8010bd2:	7ffb      	ldrb	r3, [r7, #31]
 8010bd4:	e03b      	b.n	8010c4e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010bd6:	68b9      	ldr	r1, [r7, #8]
 8010bd8:	68f8      	ldr	r0, [r7, #12]
 8010bda:	f7ff fdf0 	bl	80107be <get_fat>
 8010bde:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010be0:	697b      	ldr	r3, [r7, #20]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d031      	beq.n	8010c4a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	2b01      	cmp	r3, #1
 8010bea:	d101      	bne.n	8010bf0 <remove_chain+0x64>
 8010bec:	2302      	movs	r3, #2
 8010bee:	e02e      	b.n	8010c4e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bf6:	d101      	bne.n	8010bfc <remove_chain+0x70>
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	e028      	b.n	8010c4e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	68b9      	ldr	r1, [r7, #8]
 8010c00:	69b8      	ldr	r0, [r7, #24]
 8010c02:	f7ff feac 	bl	801095e <put_fat>
 8010c06:	4603      	mov	r3, r0
 8010c08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010c0a:	7ffb      	ldrb	r3, [r7, #31]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d001      	beq.n	8010c14 <remove_chain+0x88>
 8010c10:	7ffb      	ldrb	r3, [r7, #31]
 8010c12:	e01c      	b.n	8010c4e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010c14:	69bb      	ldr	r3, [r7, #24]
 8010c16:	695a      	ldr	r2, [r3, #20]
 8010c18:	69bb      	ldr	r3, [r7, #24]
 8010c1a:	69db      	ldr	r3, [r3, #28]
 8010c1c:	3b02      	subs	r3, #2
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	d20b      	bcs.n	8010c3a <remove_chain+0xae>
			fs->free_clst++;
 8010c22:	69bb      	ldr	r3, [r7, #24]
 8010c24:	695b      	ldr	r3, [r3, #20]
 8010c26:	1c5a      	adds	r2, r3, #1
 8010c28:	69bb      	ldr	r3, [r7, #24]
 8010c2a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8010c2c:	69bb      	ldr	r3, [r7, #24]
 8010c2e:	791b      	ldrb	r3, [r3, #4]
 8010c30:	f043 0301 	orr.w	r3, r3, #1
 8010c34:	b2da      	uxtb	r2, r3
 8010c36:	69bb      	ldr	r3, [r7, #24]
 8010c38:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010c3e:	69bb      	ldr	r3, [r7, #24]
 8010c40:	69db      	ldr	r3, [r3, #28]
 8010c42:	68ba      	ldr	r2, [r7, #8]
 8010c44:	429a      	cmp	r2, r3
 8010c46:	d3c6      	bcc.n	8010bd6 <remove_chain+0x4a>
 8010c48:	e000      	b.n	8010c4c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010c4a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010c4c:	2300      	movs	r3, #0
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3720      	adds	r7, #32
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}

08010c56 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010c56:	b580      	push	{r7, lr}
 8010c58:	b088      	sub	sp, #32
 8010c5a:	af00      	add	r7, sp, #0
 8010c5c:	6078      	str	r0, [r7, #4]
 8010c5e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d10d      	bne.n	8010c88 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010c6c:	693b      	ldr	r3, [r7, #16]
 8010c6e:	691b      	ldr	r3, [r3, #16]
 8010c70:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010c72:	69bb      	ldr	r3, [r7, #24]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d004      	beq.n	8010c82 <create_chain+0x2c>
 8010c78:	693b      	ldr	r3, [r7, #16]
 8010c7a:	69db      	ldr	r3, [r3, #28]
 8010c7c:	69ba      	ldr	r2, [r7, #24]
 8010c7e:	429a      	cmp	r2, r3
 8010c80:	d31b      	bcc.n	8010cba <create_chain+0x64>
 8010c82:	2301      	movs	r3, #1
 8010c84:	61bb      	str	r3, [r7, #24]
 8010c86:	e018      	b.n	8010cba <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010c88:	6839      	ldr	r1, [r7, #0]
 8010c8a:	6878      	ldr	r0, [r7, #4]
 8010c8c:	f7ff fd97 	bl	80107be <get_fat>
 8010c90:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	2b01      	cmp	r3, #1
 8010c96:	d801      	bhi.n	8010c9c <create_chain+0x46>
 8010c98:	2301      	movs	r3, #1
 8010c9a:	e070      	b.n	8010d7e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ca2:	d101      	bne.n	8010ca8 <create_chain+0x52>
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	e06a      	b.n	8010d7e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010ca8:	693b      	ldr	r3, [r7, #16]
 8010caa:	69db      	ldr	r3, [r3, #28]
 8010cac:	68fa      	ldr	r2, [r7, #12]
 8010cae:	429a      	cmp	r2, r3
 8010cb0:	d201      	bcs.n	8010cb6 <create_chain+0x60>
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	e063      	b.n	8010d7e <create_chain+0x128>
		scl = clst;
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010cba:	69bb      	ldr	r3, [r7, #24]
 8010cbc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010cbe:	69fb      	ldr	r3, [r7, #28]
 8010cc0:	3301      	adds	r3, #1
 8010cc2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010cc4:	693b      	ldr	r3, [r7, #16]
 8010cc6:	69db      	ldr	r3, [r3, #28]
 8010cc8:	69fa      	ldr	r2, [r7, #28]
 8010cca:	429a      	cmp	r2, r3
 8010ccc:	d307      	bcc.n	8010cde <create_chain+0x88>
				ncl = 2;
 8010cce:	2302      	movs	r3, #2
 8010cd0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010cd2:	69fa      	ldr	r2, [r7, #28]
 8010cd4:	69bb      	ldr	r3, [r7, #24]
 8010cd6:	429a      	cmp	r2, r3
 8010cd8:	d901      	bls.n	8010cde <create_chain+0x88>
 8010cda:	2300      	movs	r3, #0
 8010cdc:	e04f      	b.n	8010d7e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010cde:	69f9      	ldr	r1, [r7, #28]
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f7ff fd6c 	bl	80107be <get_fat>
 8010ce6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d00e      	beq.n	8010d0c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	2b01      	cmp	r3, #1
 8010cf2:	d003      	beq.n	8010cfc <create_chain+0xa6>
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cfa:	d101      	bne.n	8010d00 <create_chain+0xaa>
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	e03e      	b.n	8010d7e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010d00:	69fa      	ldr	r2, [r7, #28]
 8010d02:	69bb      	ldr	r3, [r7, #24]
 8010d04:	429a      	cmp	r2, r3
 8010d06:	d1da      	bne.n	8010cbe <create_chain+0x68>
 8010d08:	2300      	movs	r3, #0
 8010d0a:	e038      	b.n	8010d7e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010d0c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8010d12:	69f9      	ldr	r1, [r7, #28]
 8010d14:	6938      	ldr	r0, [r7, #16]
 8010d16:	f7ff fe22 	bl	801095e <put_fat>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010d1e:	7dfb      	ldrb	r3, [r7, #23]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d109      	bne.n	8010d38 <create_chain+0xe2>
 8010d24:	683b      	ldr	r3, [r7, #0]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d006      	beq.n	8010d38 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010d2a:	69fa      	ldr	r2, [r7, #28]
 8010d2c:	6839      	ldr	r1, [r7, #0]
 8010d2e:	6938      	ldr	r0, [r7, #16]
 8010d30:	f7ff fe15 	bl	801095e <put_fat>
 8010d34:	4603      	mov	r3, r0
 8010d36:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010d38:	7dfb      	ldrb	r3, [r7, #23]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d116      	bne.n	8010d6c <create_chain+0x116>
		fs->last_clst = ncl;
 8010d3e:	693b      	ldr	r3, [r7, #16]
 8010d40:	69fa      	ldr	r2, [r7, #28]
 8010d42:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010d44:	693b      	ldr	r3, [r7, #16]
 8010d46:	695a      	ldr	r2, [r3, #20]
 8010d48:	693b      	ldr	r3, [r7, #16]
 8010d4a:	69db      	ldr	r3, [r3, #28]
 8010d4c:	3b02      	subs	r3, #2
 8010d4e:	429a      	cmp	r2, r3
 8010d50:	d804      	bhi.n	8010d5c <create_chain+0x106>
 8010d52:	693b      	ldr	r3, [r7, #16]
 8010d54:	695b      	ldr	r3, [r3, #20]
 8010d56:	1e5a      	subs	r2, r3, #1
 8010d58:	693b      	ldr	r3, [r7, #16]
 8010d5a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8010d5c:	693b      	ldr	r3, [r7, #16]
 8010d5e:	791b      	ldrb	r3, [r3, #4]
 8010d60:	f043 0301 	orr.w	r3, r3, #1
 8010d64:	b2da      	uxtb	r2, r3
 8010d66:	693b      	ldr	r3, [r7, #16]
 8010d68:	711a      	strb	r2, [r3, #4]
 8010d6a:	e007      	b.n	8010d7c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010d6c:	7dfb      	ldrb	r3, [r7, #23]
 8010d6e:	2b01      	cmp	r3, #1
 8010d70:	d102      	bne.n	8010d78 <create_chain+0x122>
 8010d72:	f04f 33ff 	mov.w	r3, #4294967295
 8010d76:	e000      	b.n	8010d7a <create_chain+0x124>
 8010d78:	2301      	movs	r3, #1
 8010d7a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010d7c:	69fb      	ldr	r3, [r7, #28]
}
 8010d7e:	4618      	mov	r0, r3
 8010d80:	3720      	adds	r7, #32
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd80      	pop	{r7, pc}

08010d86 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010d86:	b480      	push	{r7}
 8010d88:	b087      	sub	sp, #28
 8010d8a:	af00      	add	r7, sp, #0
 8010d8c:	6078      	str	r0, [r7, #4]
 8010d8e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d9a:	3304      	adds	r3, #4
 8010d9c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	899b      	ldrh	r3, [r3, #12]
 8010da2:	461a      	mov	r2, r3
 8010da4:	683b      	ldr	r3, [r7, #0]
 8010da6:	fbb3 f3f2 	udiv	r3, r3, r2
 8010daa:	68fa      	ldr	r2, [r7, #12]
 8010dac:	8952      	ldrh	r2, [r2, #10]
 8010dae:	fbb3 f3f2 	udiv	r3, r3, r2
 8010db2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010db4:	693b      	ldr	r3, [r7, #16]
 8010db6:	1d1a      	adds	r2, r3, #4
 8010db8:	613a      	str	r2, [r7, #16]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010dbe:	68bb      	ldr	r3, [r7, #8]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d101      	bne.n	8010dc8 <clmt_clust+0x42>
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	e010      	b.n	8010dea <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8010dc8:	697a      	ldr	r2, [r7, #20]
 8010dca:	68bb      	ldr	r3, [r7, #8]
 8010dcc:	429a      	cmp	r2, r3
 8010dce:	d307      	bcc.n	8010de0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8010dd0:	697a      	ldr	r2, [r7, #20]
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	1ad3      	subs	r3, r2, r3
 8010dd6:	617b      	str	r3, [r7, #20]
 8010dd8:	693b      	ldr	r3, [r7, #16]
 8010dda:	3304      	adds	r3, #4
 8010ddc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010dde:	e7e9      	b.n	8010db4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8010de0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010de2:	693b      	ldr	r3, [r7, #16]
 8010de4:	681a      	ldr	r2, [r3, #0]
 8010de6:	697b      	ldr	r3, [r7, #20]
 8010de8:	4413      	add	r3, r2
}
 8010dea:	4618      	mov	r0, r3
 8010dec:	371c      	adds	r7, #28
 8010dee:	46bd      	mov	sp, r7
 8010df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df4:	4770      	bx	lr

08010df6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010df6:	b580      	push	{r7, lr}
 8010df8:	b086      	sub	sp, #24
 8010dfa:	af00      	add	r7, sp, #0
 8010dfc:	6078      	str	r0, [r7, #4]
 8010dfe:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010e06:	683b      	ldr	r3, [r7, #0]
 8010e08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010e0c:	d204      	bcs.n	8010e18 <dir_sdi+0x22>
 8010e0e:	683b      	ldr	r3, [r7, #0]
 8010e10:	f003 031f 	and.w	r3, r3, #31
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d001      	beq.n	8010e1c <dir_sdi+0x26>
		return FR_INT_ERR;
 8010e18:	2302      	movs	r3, #2
 8010e1a:	e071      	b.n	8010f00 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	683a      	ldr	r2, [r7, #0]
 8010e20:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	689b      	ldr	r3, [r3, #8]
 8010e26:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010e28:	697b      	ldr	r3, [r7, #20]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d106      	bne.n	8010e3c <dir_sdi+0x46>
 8010e2e:	693b      	ldr	r3, [r7, #16]
 8010e30:	781b      	ldrb	r3, [r3, #0]
 8010e32:	2b02      	cmp	r3, #2
 8010e34:	d902      	bls.n	8010e3c <dir_sdi+0x46>
		clst = fs->dirbase;
 8010e36:	693b      	ldr	r3, [r7, #16]
 8010e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e3a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010e3c:	697b      	ldr	r3, [r7, #20]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d10c      	bne.n	8010e5c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	095b      	lsrs	r3, r3, #5
 8010e46:	693a      	ldr	r2, [r7, #16]
 8010e48:	8912      	ldrh	r2, [r2, #8]
 8010e4a:	4293      	cmp	r3, r2
 8010e4c:	d301      	bcc.n	8010e52 <dir_sdi+0x5c>
 8010e4e:	2302      	movs	r3, #2
 8010e50:	e056      	b.n	8010f00 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8010e52:	693b      	ldr	r3, [r7, #16]
 8010e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	61da      	str	r2, [r3, #28]
 8010e5a:	e02d      	b.n	8010eb8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010e5c:	693b      	ldr	r3, [r7, #16]
 8010e5e:	895b      	ldrh	r3, [r3, #10]
 8010e60:	461a      	mov	r2, r3
 8010e62:	693b      	ldr	r3, [r7, #16]
 8010e64:	899b      	ldrh	r3, [r3, #12]
 8010e66:	fb03 f302 	mul.w	r3, r3, r2
 8010e6a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010e6c:	e019      	b.n	8010ea2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	6979      	ldr	r1, [r7, #20]
 8010e72:	4618      	mov	r0, r3
 8010e74:	f7ff fca3 	bl	80107be <get_fat>
 8010e78:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010e7a:	697b      	ldr	r3, [r7, #20]
 8010e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e80:	d101      	bne.n	8010e86 <dir_sdi+0x90>
 8010e82:	2301      	movs	r3, #1
 8010e84:	e03c      	b.n	8010f00 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010e86:	697b      	ldr	r3, [r7, #20]
 8010e88:	2b01      	cmp	r3, #1
 8010e8a:	d904      	bls.n	8010e96 <dir_sdi+0xa0>
 8010e8c:	693b      	ldr	r3, [r7, #16]
 8010e8e:	69db      	ldr	r3, [r3, #28]
 8010e90:	697a      	ldr	r2, [r7, #20]
 8010e92:	429a      	cmp	r2, r3
 8010e94:	d301      	bcc.n	8010e9a <dir_sdi+0xa4>
 8010e96:	2302      	movs	r3, #2
 8010e98:	e032      	b.n	8010f00 <dir_sdi+0x10a>
			ofs -= csz;
 8010e9a:	683a      	ldr	r2, [r7, #0]
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	1ad3      	subs	r3, r2, r3
 8010ea0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010ea2:	683a      	ldr	r2, [r7, #0]
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	429a      	cmp	r2, r3
 8010ea8:	d2e1      	bcs.n	8010e6e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8010eaa:	6979      	ldr	r1, [r7, #20]
 8010eac:	6938      	ldr	r0, [r7, #16]
 8010eae:	f7ff fc67 	bl	8010780 <clust2sect>
 8010eb2:	4602      	mov	r2, r0
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	697a      	ldr	r2, [r7, #20]
 8010ebc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	69db      	ldr	r3, [r3, #28]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d101      	bne.n	8010eca <dir_sdi+0xd4>
 8010ec6:	2302      	movs	r3, #2
 8010ec8:	e01a      	b.n	8010f00 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	69da      	ldr	r2, [r3, #28]
 8010ece:	693b      	ldr	r3, [r7, #16]
 8010ed0:	899b      	ldrh	r3, [r3, #12]
 8010ed2:	4619      	mov	r1, r3
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8010eda:	441a      	add	r2, r3
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010ee0:	693b      	ldr	r3, [r7, #16]
 8010ee2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010ee6:	693b      	ldr	r3, [r7, #16]
 8010ee8:	899b      	ldrh	r3, [r3, #12]
 8010eea:	461a      	mov	r2, r3
 8010eec:	683b      	ldr	r3, [r7, #0]
 8010eee:	fbb3 f0f2 	udiv	r0, r3, r2
 8010ef2:	fb02 f200 	mul.w	r2, r2, r0
 8010ef6:	1a9b      	subs	r3, r3, r2
 8010ef8:	18ca      	adds	r2, r1, r3
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010efe:	2300      	movs	r3, #0
}
 8010f00:	4618      	mov	r0, r3
 8010f02:	3718      	adds	r7, #24
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}

08010f08 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b086      	sub	sp, #24
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	695b      	ldr	r3, [r3, #20]
 8010f1c:	3320      	adds	r3, #32
 8010f1e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	69db      	ldr	r3, [r3, #28]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d003      	beq.n	8010f30 <dir_next+0x28>
 8010f28:	68bb      	ldr	r3, [r7, #8]
 8010f2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010f2e:	d301      	bcc.n	8010f34 <dir_next+0x2c>
 8010f30:	2304      	movs	r3, #4
 8010f32:	e0bb      	b.n	80110ac <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	899b      	ldrh	r3, [r3, #12]
 8010f38:	461a      	mov	r2, r3
 8010f3a:	68bb      	ldr	r3, [r7, #8]
 8010f3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010f40:	fb02 f201 	mul.w	r2, r2, r1
 8010f44:	1a9b      	subs	r3, r3, r2
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	f040 809d 	bne.w	8011086 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	69db      	ldr	r3, [r3, #28]
 8010f50:	1c5a      	adds	r2, r3, #1
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	699b      	ldr	r3, [r3, #24]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d10b      	bne.n	8010f76 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010f5e:	68bb      	ldr	r3, [r7, #8]
 8010f60:	095b      	lsrs	r3, r3, #5
 8010f62:	68fa      	ldr	r2, [r7, #12]
 8010f64:	8912      	ldrh	r2, [r2, #8]
 8010f66:	4293      	cmp	r3, r2
 8010f68:	f0c0 808d 	bcc.w	8011086 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2200      	movs	r2, #0
 8010f70:	61da      	str	r2, [r3, #28]
 8010f72:	2304      	movs	r3, #4
 8010f74:	e09a      	b.n	80110ac <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	899b      	ldrh	r3, [r3, #12]
 8010f7a:	461a      	mov	r2, r3
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f82:	68fa      	ldr	r2, [r7, #12]
 8010f84:	8952      	ldrh	r2, [r2, #10]
 8010f86:	3a01      	subs	r2, #1
 8010f88:	4013      	ands	r3, r2
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d17b      	bne.n	8011086 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010f8e:	687a      	ldr	r2, [r7, #4]
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	699b      	ldr	r3, [r3, #24]
 8010f94:	4619      	mov	r1, r3
 8010f96:	4610      	mov	r0, r2
 8010f98:	f7ff fc11 	bl	80107be <get_fat>
 8010f9c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010f9e:	697b      	ldr	r3, [r7, #20]
 8010fa0:	2b01      	cmp	r3, #1
 8010fa2:	d801      	bhi.n	8010fa8 <dir_next+0xa0>
 8010fa4:	2302      	movs	r3, #2
 8010fa6:	e081      	b.n	80110ac <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010fa8:	697b      	ldr	r3, [r7, #20]
 8010faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fae:	d101      	bne.n	8010fb4 <dir_next+0xac>
 8010fb0:	2301      	movs	r3, #1
 8010fb2:	e07b      	b.n	80110ac <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	69db      	ldr	r3, [r3, #28]
 8010fb8:	697a      	ldr	r2, [r7, #20]
 8010fba:	429a      	cmp	r2, r3
 8010fbc:	d359      	bcc.n	8011072 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d104      	bne.n	8010fce <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	61da      	str	r2, [r3, #28]
 8010fca:	2304      	movs	r3, #4
 8010fcc:	e06e      	b.n	80110ac <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010fce:	687a      	ldr	r2, [r7, #4]
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	699b      	ldr	r3, [r3, #24]
 8010fd4:	4619      	mov	r1, r3
 8010fd6:	4610      	mov	r0, r2
 8010fd8:	f7ff fe3d 	bl	8010c56 <create_chain>
 8010fdc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010fde:	697b      	ldr	r3, [r7, #20]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d101      	bne.n	8010fe8 <dir_next+0xe0>
 8010fe4:	2307      	movs	r3, #7
 8010fe6:	e061      	b.n	80110ac <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010fe8:	697b      	ldr	r3, [r7, #20]
 8010fea:	2b01      	cmp	r3, #1
 8010fec:	d101      	bne.n	8010ff2 <dir_next+0xea>
 8010fee:	2302      	movs	r3, #2
 8010ff0:	e05c      	b.n	80110ac <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010ff2:	697b      	ldr	r3, [r7, #20]
 8010ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ff8:	d101      	bne.n	8010ffe <dir_next+0xf6>
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	e056      	b.n	80110ac <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010ffe:	68f8      	ldr	r0, [r7, #12]
 8011000:	f7ff fadc 	bl	80105bc <sync_window>
 8011004:	4603      	mov	r3, r0
 8011006:	2b00      	cmp	r3, #0
 8011008:	d001      	beq.n	801100e <dir_next+0x106>
 801100a:	2301      	movs	r3, #1
 801100c:	e04e      	b.n	80110ac <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	899b      	ldrh	r3, [r3, #12]
 8011018:	461a      	mov	r2, r3
 801101a:	2100      	movs	r1, #0
 801101c:	f7ff f905 	bl	801022a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011020:	2300      	movs	r3, #0
 8011022:	613b      	str	r3, [r7, #16]
 8011024:	6979      	ldr	r1, [r7, #20]
 8011026:	68f8      	ldr	r0, [r7, #12]
 8011028:	f7ff fbaa 	bl	8010780 <clust2sect>
 801102c:	4602      	mov	r2, r0
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	635a      	str	r2, [r3, #52]	; 0x34
 8011032:	e012      	b.n	801105a <dir_next+0x152>
						fs->wflag = 1;
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	2201      	movs	r2, #1
 8011038:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801103a:	68f8      	ldr	r0, [r7, #12]
 801103c:	f7ff fabe 	bl	80105bc <sync_window>
 8011040:	4603      	mov	r3, r0
 8011042:	2b00      	cmp	r3, #0
 8011044:	d001      	beq.n	801104a <dir_next+0x142>
 8011046:	2301      	movs	r3, #1
 8011048:	e030      	b.n	80110ac <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801104a:	693b      	ldr	r3, [r7, #16]
 801104c:	3301      	adds	r3, #1
 801104e:	613b      	str	r3, [r7, #16]
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011054:	1c5a      	adds	r2, r3, #1
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	635a      	str	r2, [r3, #52]	; 0x34
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	895b      	ldrh	r3, [r3, #10]
 801105e:	461a      	mov	r2, r3
 8011060:	693b      	ldr	r3, [r7, #16]
 8011062:	4293      	cmp	r3, r2
 8011064:	d3e6      	bcc.n	8011034 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801106a:	693b      	ldr	r3, [r7, #16]
 801106c:	1ad2      	subs	r2, r2, r3
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	697a      	ldr	r2, [r7, #20]
 8011076:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011078:	6979      	ldr	r1, [r7, #20]
 801107a:	68f8      	ldr	r0, [r7, #12]
 801107c:	f7ff fb80 	bl	8010780 <clust2sect>
 8011080:	4602      	mov	r2, r0
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	68ba      	ldr	r2, [r7, #8]
 801108a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	899b      	ldrh	r3, [r3, #12]
 8011096:	461a      	mov	r2, r3
 8011098:	68bb      	ldr	r3, [r7, #8]
 801109a:	fbb3 f0f2 	udiv	r0, r3, r2
 801109e:	fb02 f200 	mul.w	r2, r2, r0
 80110a2:	1a9b      	subs	r3, r3, r2
 80110a4:	18ca      	adds	r2, r1, r3
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80110aa:	2300      	movs	r3, #0
}
 80110ac:	4618      	mov	r0, r3
 80110ae:	3718      	adds	r7, #24
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}

080110b4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b086      	sub	sp, #24
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
 80110bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80110c4:	2100      	movs	r1, #0
 80110c6:	6878      	ldr	r0, [r7, #4]
 80110c8:	f7ff fe95 	bl	8010df6 <dir_sdi>
 80110cc:	4603      	mov	r3, r0
 80110ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80110d0:	7dfb      	ldrb	r3, [r7, #23]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d12b      	bne.n	801112e <dir_alloc+0x7a>
		n = 0;
 80110d6:	2300      	movs	r3, #0
 80110d8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	69db      	ldr	r3, [r3, #28]
 80110de:	4619      	mov	r1, r3
 80110e0:	68f8      	ldr	r0, [r7, #12]
 80110e2:	f7ff faaf 	bl	8010644 <move_window>
 80110e6:	4603      	mov	r3, r0
 80110e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80110ea:	7dfb      	ldrb	r3, [r7, #23]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d11d      	bne.n	801112c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	6a1b      	ldr	r3, [r3, #32]
 80110f4:	781b      	ldrb	r3, [r3, #0]
 80110f6:	2be5      	cmp	r3, #229	; 0xe5
 80110f8:	d004      	beq.n	8011104 <dir_alloc+0x50>
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	6a1b      	ldr	r3, [r3, #32]
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d107      	bne.n	8011114 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011104:	693b      	ldr	r3, [r7, #16]
 8011106:	3301      	adds	r3, #1
 8011108:	613b      	str	r3, [r7, #16]
 801110a:	693a      	ldr	r2, [r7, #16]
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	429a      	cmp	r2, r3
 8011110:	d102      	bne.n	8011118 <dir_alloc+0x64>
 8011112:	e00c      	b.n	801112e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011114:	2300      	movs	r3, #0
 8011116:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011118:	2101      	movs	r1, #1
 801111a:	6878      	ldr	r0, [r7, #4]
 801111c:	f7ff fef4 	bl	8010f08 <dir_next>
 8011120:	4603      	mov	r3, r0
 8011122:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011124:	7dfb      	ldrb	r3, [r7, #23]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d0d7      	beq.n	80110da <dir_alloc+0x26>
 801112a:	e000      	b.n	801112e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801112c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801112e:	7dfb      	ldrb	r3, [r7, #23]
 8011130:	2b04      	cmp	r3, #4
 8011132:	d101      	bne.n	8011138 <dir_alloc+0x84>
 8011134:	2307      	movs	r3, #7
 8011136:	75fb      	strb	r3, [r7, #23]
	return res;
 8011138:	7dfb      	ldrb	r3, [r7, #23]
}
 801113a:	4618      	mov	r0, r3
 801113c:	3718      	adds	r7, #24
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}

08011142 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011142:	b580      	push	{r7, lr}
 8011144:	b084      	sub	sp, #16
 8011146:	af00      	add	r7, sp, #0
 8011148:	6078      	str	r0, [r7, #4]
 801114a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	331a      	adds	r3, #26
 8011150:	4618      	mov	r0, r3
 8011152:	f7fe ffc7 	bl	80100e4 <ld_word>
 8011156:	4603      	mov	r3, r0
 8011158:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	781b      	ldrb	r3, [r3, #0]
 801115e:	2b03      	cmp	r3, #3
 8011160:	d109      	bne.n	8011176 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	3314      	adds	r3, #20
 8011166:	4618      	mov	r0, r3
 8011168:	f7fe ffbc 	bl	80100e4 <ld_word>
 801116c:	4603      	mov	r3, r0
 801116e:	041b      	lsls	r3, r3, #16
 8011170:	68fa      	ldr	r2, [r7, #12]
 8011172:	4313      	orrs	r3, r2
 8011174:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011176:	68fb      	ldr	r3, [r7, #12]
}
 8011178:	4618      	mov	r0, r3
 801117a:	3710      	adds	r7, #16
 801117c:	46bd      	mov	sp, r7
 801117e:	bd80      	pop	{r7, pc}

08011180 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b084      	sub	sp, #16
 8011184:	af00      	add	r7, sp, #0
 8011186:	60f8      	str	r0, [r7, #12]
 8011188:	60b9      	str	r1, [r7, #8]
 801118a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	331a      	adds	r3, #26
 8011190:	687a      	ldr	r2, [r7, #4]
 8011192:	b292      	uxth	r2, r2
 8011194:	4611      	mov	r1, r2
 8011196:	4618      	mov	r0, r3
 8011198:	f7fe ffdf 	bl	801015a <st_word>
	if (fs->fs_type == FS_FAT32) {
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	781b      	ldrb	r3, [r3, #0]
 80111a0:	2b03      	cmp	r3, #3
 80111a2:	d109      	bne.n	80111b8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80111a4:	68bb      	ldr	r3, [r7, #8]
 80111a6:	f103 0214 	add.w	r2, r3, #20
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	0c1b      	lsrs	r3, r3, #16
 80111ae:	b29b      	uxth	r3, r3
 80111b0:	4619      	mov	r1, r3
 80111b2:	4610      	mov	r0, r2
 80111b4:	f7fe ffd1 	bl	801015a <st_word>
	}
}
 80111b8:	bf00      	nop
 80111ba:	3710      	adds	r7, #16
 80111bc:	46bd      	mov	sp, r7
 80111be:	bd80      	pop	{r7, pc}

080111c0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b086      	sub	sp, #24
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
 80111c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80111ca:	2304      	movs	r3, #4
 80111cc:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80111d4:	e03c      	b.n	8011250 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	69db      	ldr	r3, [r3, #28]
 80111da:	4619      	mov	r1, r3
 80111dc:	6938      	ldr	r0, [r7, #16]
 80111de:	f7ff fa31 	bl	8010644 <move_window>
 80111e2:	4603      	mov	r3, r0
 80111e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80111e6:	7dfb      	ldrb	r3, [r7, #23]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d136      	bne.n	801125a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	6a1b      	ldr	r3, [r3, #32]
 80111f0:	781b      	ldrb	r3, [r3, #0]
 80111f2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80111f4:	7bfb      	ldrb	r3, [r7, #15]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d102      	bne.n	8011200 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80111fa:	2304      	movs	r3, #4
 80111fc:	75fb      	strb	r3, [r7, #23]
 80111fe:	e031      	b.n	8011264 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	6a1b      	ldr	r3, [r3, #32]
 8011204:	330b      	adds	r3, #11
 8011206:	781b      	ldrb	r3, [r3, #0]
 8011208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801120c:	73bb      	strb	r3, [r7, #14]
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	7bba      	ldrb	r2, [r7, #14]
 8011212:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8011214:	7bfb      	ldrb	r3, [r7, #15]
 8011216:	2be5      	cmp	r3, #229	; 0xe5
 8011218:	d011      	beq.n	801123e <dir_read+0x7e>
 801121a:	7bfb      	ldrb	r3, [r7, #15]
 801121c:	2b2e      	cmp	r3, #46	; 0x2e
 801121e:	d00e      	beq.n	801123e <dir_read+0x7e>
 8011220:	7bbb      	ldrb	r3, [r7, #14]
 8011222:	2b0f      	cmp	r3, #15
 8011224:	d00b      	beq.n	801123e <dir_read+0x7e>
 8011226:	7bbb      	ldrb	r3, [r7, #14]
 8011228:	f023 0320 	bic.w	r3, r3, #32
 801122c:	2b08      	cmp	r3, #8
 801122e:	bf0c      	ite	eq
 8011230:	2301      	moveq	r3, #1
 8011232:	2300      	movne	r3, #0
 8011234:	b2db      	uxtb	r3, r3
 8011236:	461a      	mov	r2, r3
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	4293      	cmp	r3, r2
 801123c:	d00f      	beq.n	801125e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801123e:	2100      	movs	r1, #0
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	f7ff fe61 	bl	8010f08 <dir_next>
 8011246:	4603      	mov	r3, r0
 8011248:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801124a:	7dfb      	ldrb	r3, [r7, #23]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d108      	bne.n	8011262 <dir_read+0xa2>
	while (dp->sect) {
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	69db      	ldr	r3, [r3, #28]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d1be      	bne.n	80111d6 <dir_read+0x16>
 8011258:	e004      	b.n	8011264 <dir_read+0xa4>
		if (res != FR_OK) break;
 801125a:	bf00      	nop
 801125c:	e002      	b.n	8011264 <dir_read+0xa4>
				break;
 801125e:	bf00      	nop
 8011260:	e000      	b.n	8011264 <dir_read+0xa4>
		if (res != FR_OK) break;
 8011262:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011264:	7dfb      	ldrb	r3, [r7, #23]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d002      	beq.n	8011270 <dir_read+0xb0>
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	2200      	movs	r2, #0
 801126e:	61da      	str	r2, [r3, #28]
	return res;
 8011270:	7dfb      	ldrb	r3, [r7, #23]
}
 8011272:	4618      	mov	r0, r3
 8011274:	3718      	adds	r7, #24
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}

0801127a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801127a:	b580      	push	{r7, lr}
 801127c:	b086      	sub	sp, #24
 801127e:	af00      	add	r7, sp, #0
 8011280:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011288:	2100      	movs	r1, #0
 801128a:	6878      	ldr	r0, [r7, #4]
 801128c:	f7ff fdb3 	bl	8010df6 <dir_sdi>
 8011290:	4603      	mov	r3, r0
 8011292:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011294:	7dfb      	ldrb	r3, [r7, #23]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d001      	beq.n	801129e <dir_find+0x24>
 801129a:	7dfb      	ldrb	r3, [r7, #23]
 801129c:	e03e      	b.n	801131c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	69db      	ldr	r3, [r3, #28]
 80112a2:	4619      	mov	r1, r3
 80112a4:	6938      	ldr	r0, [r7, #16]
 80112a6:	f7ff f9cd 	bl	8010644 <move_window>
 80112aa:	4603      	mov	r3, r0
 80112ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80112ae:	7dfb      	ldrb	r3, [r7, #23]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d12f      	bne.n	8011314 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	6a1b      	ldr	r3, [r3, #32]
 80112b8:	781b      	ldrb	r3, [r3, #0]
 80112ba:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80112bc:	7bfb      	ldrb	r3, [r7, #15]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d102      	bne.n	80112c8 <dir_find+0x4e>
 80112c2:	2304      	movs	r3, #4
 80112c4:	75fb      	strb	r3, [r7, #23]
 80112c6:	e028      	b.n	801131a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	6a1b      	ldr	r3, [r3, #32]
 80112cc:	330b      	adds	r3, #11
 80112ce:	781b      	ldrb	r3, [r3, #0]
 80112d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80112d4:	b2da      	uxtb	r2, r3
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	6a1b      	ldr	r3, [r3, #32]
 80112de:	330b      	adds	r3, #11
 80112e0:	781b      	ldrb	r3, [r3, #0]
 80112e2:	f003 0308 	and.w	r3, r3, #8
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d10a      	bne.n	8011300 <dir_find+0x86>
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	6a18      	ldr	r0, [r3, #32]
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	3324      	adds	r3, #36	; 0x24
 80112f2:	220b      	movs	r2, #11
 80112f4:	4619      	mov	r1, r3
 80112f6:	f7fe ffb2 	bl	801025e <mem_cmp>
 80112fa:	4603      	mov	r3, r0
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d00b      	beq.n	8011318 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011300:	2100      	movs	r1, #0
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f7ff fe00 	bl	8010f08 <dir_next>
 8011308:	4603      	mov	r3, r0
 801130a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801130c:	7dfb      	ldrb	r3, [r7, #23]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d0c5      	beq.n	801129e <dir_find+0x24>
 8011312:	e002      	b.n	801131a <dir_find+0xa0>
		if (res != FR_OK) break;
 8011314:	bf00      	nop
 8011316:	e000      	b.n	801131a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011318:	bf00      	nop

	return res;
 801131a:	7dfb      	ldrb	r3, [r7, #23]
}
 801131c:	4618      	mov	r0, r3
 801131e:	3718      	adds	r7, #24
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}

08011324 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b084      	sub	sp, #16
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8011332:	2101      	movs	r1, #1
 8011334:	6878      	ldr	r0, [r7, #4]
 8011336:	f7ff febd 	bl	80110b4 <dir_alloc>
 801133a:	4603      	mov	r3, r0
 801133c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801133e:	7bfb      	ldrb	r3, [r7, #15]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d11c      	bne.n	801137e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	69db      	ldr	r3, [r3, #28]
 8011348:	4619      	mov	r1, r3
 801134a:	68b8      	ldr	r0, [r7, #8]
 801134c:	f7ff f97a 	bl	8010644 <move_window>
 8011350:	4603      	mov	r3, r0
 8011352:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011354:	7bfb      	ldrb	r3, [r7, #15]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d111      	bne.n	801137e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	6a1b      	ldr	r3, [r3, #32]
 801135e:	2220      	movs	r2, #32
 8011360:	2100      	movs	r1, #0
 8011362:	4618      	mov	r0, r3
 8011364:	f7fe ff61 	bl	801022a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	6a18      	ldr	r0, [r3, #32]
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	3324      	adds	r3, #36	; 0x24
 8011370:	220b      	movs	r2, #11
 8011372:	4619      	mov	r1, r3
 8011374:	f7fe ff38 	bl	80101e8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8011378:	68bb      	ldr	r3, [r7, #8]
 801137a:	2201      	movs	r2, #1
 801137c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801137e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011380:	4618      	mov	r0, r3
 8011382:	3710      	adds	r7, #16
 8011384:	46bd      	mov	sp, r7
 8011386:	bd80      	pop	{r7, pc}

08011388 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b084      	sub	sp, #16
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	69db      	ldr	r3, [r3, #28]
 801139a:	4619      	mov	r1, r3
 801139c:	68f8      	ldr	r0, [r7, #12]
 801139e:	f7ff f951 	bl	8010644 <move_window>
 80113a2:	4603      	mov	r3, r0
 80113a4:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80113a6:	7afb      	ldrb	r3, [r7, #11]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d106      	bne.n	80113ba <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	6a1b      	ldr	r3, [r3, #32]
 80113b0:	22e5      	movs	r2, #229	; 0xe5
 80113b2:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	2201      	movs	r2, #1
 80113b8:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80113ba:	7afb      	ldrb	r3, [r7, #11]
}
 80113bc:	4618      	mov	r0, r3
 80113be:	3710      	adds	r7, #16
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}

080113c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b088      	sub	sp, #32
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
 80113cc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80113ce:	683b      	ldr	r3, [r7, #0]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	60fb      	str	r3, [r7, #12]
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	3324      	adds	r3, #36	; 0x24
 80113d8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80113da:	220b      	movs	r2, #11
 80113dc:	2120      	movs	r1, #32
 80113de:	68b8      	ldr	r0, [r7, #8]
 80113e0:	f7fe ff23 	bl	801022a <mem_set>
	si = i = 0; ni = 8;
 80113e4:	2300      	movs	r3, #0
 80113e6:	613b      	str	r3, [r7, #16]
 80113e8:	693b      	ldr	r3, [r7, #16]
 80113ea:	617b      	str	r3, [r7, #20]
 80113ec:	2308      	movs	r3, #8
 80113ee:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 80113f0:	68fa      	ldr	r2, [r7, #12]
 80113f2:	697b      	ldr	r3, [r7, #20]
 80113f4:	4413      	add	r3, r2
 80113f6:	781b      	ldrb	r3, [r3, #0]
 80113f8:	2b2e      	cmp	r3, #46	; 0x2e
 80113fa:	d12f      	bne.n	801145c <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 80113fc:	697b      	ldr	r3, [r7, #20]
 80113fe:	1c5a      	adds	r2, r3, #1
 8011400:	617a      	str	r2, [r7, #20]
 8011402:	68fa      	ldr	r2, [r7, #12]
 8011404:	4413      	add	r3, r2
 8011406:	781b      	ldrb	r3, [r3, #0]
 8011408:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 801140a:	7ffb      	ldrb	r3, [r7, #31]
 801140c:	2b2e      	cmp	r3, #46	; 0x2e
 801140e:	d10a      	bne.n	8011426 <create_name+0x62>
 8011410:	697b      	ldr	r3, [r7, #20]
 8011412:	2b02      	cmp	r3, #2
 8011414:	d807      	bhi.n	8011426 <create_name+0x62>
			sfn[i++] = c;
 8011416:	693b      	ldr	r3, [r7, #16]
 8011418:	1c5a      	adds	r2, r3, #1
 801141a:	613a      	str	r2, [r7, #16]
 801141c:	68ba      	ldr	r2, [r7, #8]
 801141e:	4413      	add	r3, r2
 8011420:	7ffa      	ldrb	r2, [r7, #31]
 8011422:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8011424:	e7ea      	b.n	80113fc <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8011426:	7ffb      	ldrb	r3, [r7, #31]
 8011428:	2b2f      	cmp	r3, #47	; 0x2f
 801142a:	d007      	beq.n	801143c <create_name+0x78>
 801142c:	7ffb      	ldrb	r3, [r7, #31]
 801142e:	2b5c      	cmp	r3, #92	; 0x5c
 8011430:	d004      	beq.n	801143c <create_name+0x78>
 8011432:	7ffb      	ldrb	r3, [r7, #31]
 8011434:	2b20      	cmp	r3, #32
 8011436:	d901      	bls.n	801143c <create_name+0x78>
 8011438:	2306      	movs	r3, #6
 801143a:	e084      	b.n	8011546 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 801143c:	68fa      	ldr	r2, [r7, #12]
 801143e:	697b      	ldr	r3, [r7, #20]
 8011440:	441a      	add	r2, r3
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8011446:	7ffb      	ldrb	r3, [r7, #31]
 8011448:	2b20      	cmp	r3, #32
 801144a:	d801      	bhi.n	8011450 <create_name+0x8c>
 801144c:	2224      	movs	r2, #36	; 0x24
 801144e:	e000      	b.n	8011452 <create_name+0x8e>
 8011450:	2220      	movs	r2, #32
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	330b      	adds	r3, #11
 8011456:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8011458:	2300      	movs	r3, #0
 801145a:	e074      	b.n	8011546 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	1c5a      	adds	r2, r3, #1
 8011460:	617a      	str	r2, [r7, #20]
 8011462:	68fa      	ldr	r2, [r7, #12]
 8011464:	4413      	add	r3, r2
 8011466:	781b      	ldrb	r3, [r3, #0]
 8011468:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801146a:	7ffb      	ldrb	r3, [r7, #31]
 801146c:	2b20      	cmp	r3, #32
 801146e:	d94e      	bls.n	801150e <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8011470:	7ffb      	ldrb	r3, [r7, #31]
 8011472:	2b2f      	cmp	r3, #47	; 0x2f
 8011474:	d006      	beq.n	8011484 <create_name+0xc0>
 8011476:	7ffb      	ldrb	r3, [r7, #31]
 8011478:	2b5c      	cmp	r3, #92	; 0x5c
 801147a:	d110      	bne.n	801149e <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801147c:	e002      	b.n	8011484 <create_name+0xc0>
 801147e:	697b      	ldr	r3, [r7, #20]
 8011480:	3301      	adds	r3, #1
 8011482:	617b      	str	r3, [r7, #20]
 8011484:	68fa      	ldr	r2, [r7, #12]
 8011486:	697b      	ldr	r3, [r7, #20]
 8011488:	4413      	add	r3, r2
 801148a:	781b      	ldrb	r3, [r3, #0]
 801148c:	2b2f      	cmp	r3, #47	; 0x2f
 801148e:	d0f6      	beq.n	801147e <create_name+0xba>
 8011490:	68fa      	ldr	r2, [r7, #12]
 8011492:	697b      	ldr	r3, [r7, #20]
 8011494:	4413      	add	r3, r2
 8011496:	781b      	ldrb	r3, [r3, #0]
 8011498:	2b5c      	cmp	r3, #92	; 0x5c
 801149a:	d0f0      	beq.n	801147e <create_name+0xba>
			break;
 801149c:	e038      	b.n	8011510 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801149e:	7ffb      	ldrb	r3, [r7, #31]
 80114a0:	2b2e      	cmp	r3, #46	; 0x2e
 80114a2:	d003      	beq.n	80114ac <create_name+0xe8>
 80114a4:	693a      	ldr	r2, [r7, #16]
 80114a6:	69bb      	ldr	r3, [r7, #24]
 80114a8:	429a      	cmp	r2, r3
 80114aa:	d30c      	bcc.n	80114c6 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80114ac:	69bb      	ldr	r3, [r7, #24]
 80114ae:	2b0b      	cmp	r3, #11
 80114b0:	d002      	beq.n	80114b8 <create_name+0xf4>
 80114b2:	7ffb      	ldrb	r3, [r7, #31]
 80114b4:	2b2e      	cmp	r3, #46	; 0x2e
 80114b6:	d001      	beq.n	80114bc <create_name+0xf8>
 80114b8:	2306      	movs	r3, #6
 80114ba:	e044      	b.n	8011546 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 80114bc:	2308      	movs	r3, #8
 80114be:	613b      	str	r3, [r7, #16]
 80114c0:	230b      	movs	r3, #11
 80114c2:	61bb      	str	r3, [r7, #24]
			continue;
 80114c4:	e022      	b.n	801150c <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 80114c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	da04      	bge.n	80114d8 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80114ce:	7ffb      	ldrb	r3, [r7, #31]
 80114d0:	3b80      	subs	r3, #128	; 0x80
 80114d2:	4a1f      	ldr	r2, [pc, #124]	; (8011550 <create_name+0x18c>)
 80114d4:	5cd3      	ldrb	r3, [r2, r3]
 80114d6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80114d8:	7ffb      	ldrb	r3, [r7, #31]
 80114da:	4619      	mov	r1, r3
 80114dc:	481d      	ldr	r0, [pc, #116]	; (8011554 <create_name+0x190>)
 80114de:	f7fe fee5 	bl	80102ac <chk_chr>
 80114e2:	4603      	mov	r3, r0
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d001      	beq.n	80114ec <create_name+0x128>
 80114e8:	2306      	movs	r3, #6
 80114ea:	e02c      	b.n	8011546 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80114ec:	7ffb      	ldrb	r3, [r7, #31]
 80114ee:	2b60      	cmp	r3, #96	; 0x60
 80114f0:	d905      	bls.n	80114fe <create_name+0x13a>
 80114f2:	7ffb      	ldrb	r3, [r7, #31]
 80114f4:	2b7a      	cmp	r3, #122	; 0x7a
 80114f6:	d802      	bhi.n	80114fe <create_name+0x13a>
 80114f8:	7ffb      	ldrb	r3, [r7, #31]
 80114fa:	3b20      	subs	r3, #32
 80114fc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80114fe:	693b      	ldr	r3, [r7, #16]
 8011500:	1c5a      	adds	r2, r3, #1
 8011502:	613a      	str	r2, [r7, #16]
 8011504:	68ba      	ldr	r2, [r7, #8]
 8011506:	4413      	add	r3, r2
 8011508:	7ffa      	ldrb	r2, [r7, #31]
 801150a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801150c:	e7a6      	b.n	801145c <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801150e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011510:	68fa      	ldr	r2, [r7, #12]
 8011512:	697b      	ldr	r3, [r7, #20]
 8011514:	441a      	add	r2, r3
 8011516:	683b      	ldr	r3, [r7, #0]
 8011518:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801151a:	693b      	ldr	r3, [r7, #16]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d101      	bne.n	8011524 <create_name+0x160>
 8011520:	2306      	movs	r3, #6
 8011522:	e010      	b.n	8011546 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	781b      	ldrb	r3, [r3, #0]
 8011528:	2be5      	cmp	r3, #229	; 0xe5
 801152a:	d102      	bne.n	8011532 <create_name+0x16e>
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	2205      	movs	r2, #5
 8011530:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011532:	7ffb      	ldrb	r3, [r7, #31]
 8011534:	2b20      	cmp	r3, #32
 8011536:	d801      	bhi.n	801153c <create_name+0x178>
 8011538:	2204      	movs	r2, #4
 801153a:	e000      	b.n	801153e <create_name+0x17a>
 801153c:	2200      	movs	r2, #0
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	330b      	adds	r3, #11
 8011542:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011544:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011546:	4618      	mov	r0, r3
 8011548:	3720      	adds	r7, #32
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}
 801154e:	bf00      	nop
 8011550:	08018cf0 	.word	0x08018cf0
 8011554:	08018ca0 	.word	0x08018ca0

08011558 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b086      	sub	sp, #24
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
 8011560:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011566:	693b      	ldr	r3, [r7, #16]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 801156c:	683b      	ldr	r3, [r7, #0]
 801156e:	781b      	ldrb	r3, [r3, #0]
 8011570:	2b2f      	cmp	r3, #47	; 0x2f
 8011572:	d00b      	beq.n	801158c <follow_path+0x34>
 8011574:	683b      	ldr	r3, [r7, #0]
 8011576:	781b      	ldrb	r3, [r3, #0]
 8011578:	2b5c      	cmp	r3, #92	; 0x5c
 801157a:	d007      	beq.n	801158c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	699a      	ldr	r2, [r3, #24]
 8011580:	693b      	ldr	r3, [r7, #16]
 8011582:	609a      	str	r2, [r3, #8]
 8011584:	e00d      	b.n	80115a2 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	3301      	adds	r3, #1
 801158a:	603b      	str	r3, [r7, #0]
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	781b      	ldrb	r3, [r3, #0]
 8011590:	2b2f      	cmp	r3, #47	; 0x2f
 8011592:	d0f8      	beq.n	8011586 <follow_path+0x2e>
 8011594:	683b      	ldr	r3, [r7, #0]
 8011596:	781b      	ldrb	r3, [r3, #0]
 8011598:	2b5c      	cmp	r3, #92	; 0x5c
 801159a:	d0f4      	beq.n	8011586 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 801159c:	693b      	ldr	r3, [r7, #16]
 801159e:	2200      	movs	r2, #0
 80115a0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	781b      	ldrb	r3, [r3, #0]
 80115a6:	2b1f      	cmp	r3, #31
 80115a8:	d80a      	bhi.n	80115c0 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	2280      	movs	r2, #128	; 0x80
 80115ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80115b2:	2100      	movs	r1, #0
 80115b4:	6878      	ldr	r0, [r7, #4]
 80115b6:	f7ff fc1e 	bl	8010df6 <dir_sdi>
 80115ba:	4603      	mov	r3, r0
 80115bc:	75fb      	strb	r3, [r7, #23]
 80115be:	e05b      	b.n	8011678 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80115c0:	463b      	mov	r3, r7
 80115c2:	4619      	mov	r1, r3
 80115c4:	6878      	ldr	r0, [r7, #4]
 80115c6:	f7ff fefd 	bl	80113c4 <create_name>
 80115ca:	4603      	mov	r3, r0
 80115cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80115ce:	7dfb      	ldrb	r3, [r7, #23]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d14c      	bne.n	801166e <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 80115d4:	6878      	ldr	r0, [r7, #4]
 80115d6:	f7ff fe50 	bl	801127a <dir_find>
 80115da:	4603      	mov	r3, r0
 80115dc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80115e4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80115e6:	7dfb      	ldrb	r3, [r7, #23]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d01b      	beq.n	8011624 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80115ec:	7dfb      	ldrb	r3, [r7, #23]
 80115ee:	2b04      	cmp	r3, #4
 80115f0:	d13f      	bne.n	8011672 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80115f2:	7afb      	ldrb	r3, [r7, #11]
 80115f4:	f003 0320 	and.w	r3, r3, #32
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d00b      	beq.n	8011614 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80115fc:	7afb      	ldrb	r3, [r7, #11]
 80115fe:	f003 0304 	and.w	r3, r3, #4
 8011602:	2b00      	cmp	r3, #0
 8011604:	d031      	beq.n	801166a <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2280      	movs	r2, #128	; 0x80
 801160a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 801160e:	2300      	movs	r3, #0
 8011610:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8011612:	e02e      	b.n	8011672 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011614:	7afb      	ldrb	r3, [r7, #11]
 8011616:	f003 0304 	and.w	r3, r3, #4
 801161a:	2b00      	cmp	r3, #0
 801161c:	d129      	bne.n	8011672 <follow_path+0x11a>
 801161e:	2305      	movs	r3, #5
 8011620:	75fb      	strb	r3, [r7, #23]
				break;
 8011622:	e026      	b.n	8011672 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011624:	7afb      	ldrb	r3, [r7, #11]
 8011626:	f003 0304 	and.w	r3, r3, #4
 801162a:	2b00      	cmp	r3, #0
 801162c:	d123      	bne.n	8011676 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801162e:	693b      	ldr	r3, [r7, #16]
 8011630:	799b      	ldrb	r3, [r3, #6]
 8011632:	f003 0310 	and.w	r3, r3, #16
 8011636:	2b00      	cmp	r3, #0
 8011638:	d102      	bne.n	8011640 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 801163a:	2305      	movs	r3, #5
 801163c:	75fb      	strb	r3, [r7, #23]
 801163e:	e01b      	b.n	8011678 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	695b      	ldr	r3, [r3, #20]
 801164a:	68fa      	ldr	r2, [r7, #12]
 801164c:	8992      	ldrh	r2, [r2, #12]
 801164e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011652:	fb02 f200 	mul.w	r2, r2, r0
 8011656:	1a9b      	subs	r3, r3, r2
 8011658:	440b      	add	r3, r1
 801165a:	4619      	mov	r1, r3
 801165c:	68f8      	ldr	r0, [r7, #12]
 801165e:	f7ff fd70 	bl	8011142 <ld_clust>
 8011662:	4602      	mov	r2, r0
 8011664:	693b      	ldr	r3, [r7, #16]
 8011666:	609a      	str	r2, [r3, #8]
 8011668:	e7aa      	b.n	80115c0 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801166a:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801166c:	e7a8      	b.n	80115c0 <follow_path+0x68>
			if (res != FR_OK) break;
 801166e:	bf00      	nop
 8011670:	e002      	b.n	8011678 <follow_path+0x120>
				break;
 8011672:	bf00      	nop
 8011674:	e000      	b.n	8011678 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011676:	bf00      	nop
			}
		}
	}

	return res;
 8011678:	7dfb      	ldrb	r3, [r7, #23]
}
 801167a:	4618      	mov	r0, r3
 801167c:	3718      	adds	r7, #24
 801167e:	46bd      	mov	sp, r7
 8011680:	bd80      	pop	{r7, pc}

08011682 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011682:	b480      	push	{r7}
 8011684:	b087      	sub	sp, #28
 8011686:	af00      	add	r7, sp, #0
 8011688:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801168a:	f04f 33ff 	mov.w	r3, #4294967295
 801168e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d031      	beq.n	80116fc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	617b      	str	r3, [r7, #20]
 801169e:	e002      	b.n	80116a6 <get_ldnumber+0x24>
 80116a0:	697b      	ldr	r3, [r7, #20]
 80116a2:	3301      	adds	r3, #1
 80116a4:	617b      	str	r3, [r7, #20]
 80116a6:	697b      	ldr	r3, [r7, #20]
 80116a8:	781b      	ldrb	r3, [r3, #0]
 80116aa:	2b20      	cmp	r3, #32
 80116ac:	d903      	bls.n	80116b6 <get_ldnumber+0x34>
 80116ae:	697b      	ldr	r3, [r7, #20]
 80116b0:	781b      	ldrb	r3, [r3, #0]
 80116b2:	2b3a      	cmp	r3, #58	; 0x3a
 80116b4:	d1f4      	bne.n	80116a0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	781b      	ldrb	r3, [r3, #0]
 80116ba:	2b3a      	cmp	r3, #58	; 0x3a
 80116bc:	d11c      	bne.n	80116f8 <get_ldnumber+0x76>
			tp = *path;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	1c5a      	adds	r2, r3, #1
 80116c8:	60fa      	str	r2, [r7, #12]
 80116ca:	781b      	ldrb	r3, [r3, #0]
 80116cc:	3b30      	subs	r3, #48	; 0x30
 80116ce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80116d0:	68bb      	ldr	r3, [r7, #8]
 80116d2:	2b09      	cmp	r3, #9
 80116d4:	d80e      	bhi.n	80116f4 <get_ldnumber+0x72>
 80116d6:	68fa      	ldr	r2, [r7, #12]
 80116d8:	697b      	ldr	r3, [r7, #20]
 80116da:	429a      	cmp	r2, r3
 80116dc:	d10a      	bne.n	80116f4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80116de:	68bb      	ldr	r3, [r7, #8]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d107      	bne.n	80116f4 <get_ldnumber+0x72>
					vol = (int)i;
 80116e4:	68bb      	ldr	r3, [r7, #8]
 80116e6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80116e8:	697b      	ldr	r3, [r7, #20]
 80116ea:	3301      	adds	r3, #1
 80116ec:	617b      	str	r3, [r7, #20]
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	697a      	ldr	r2, [r7, #20]
 80116f2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80116f4:	693b      	ldr	r3, [r7, #16]
 80116f6:	e002      	b.n	80116fe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80116f8:	2300      	movs	r3, #0
 80116fa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80116fc:	693b      	ldr	r3, [r7, #16]
}
 80116fe:	4618      	mov	r0, r3
 8011700:	371c      	adds	r7, #28
 8011702:	46bd      	mov	sp, r7
 8011704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011708:	4770      	bx	lr
	...

0801170c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b082      	sub	sp, #8
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
 8011714:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	2200      	movs	r2, #0
 801171a:	70da      	strb	r2, [r3, #3]
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	f04f 32ff 	mov.w	r2, #4294967295
 8011722:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011724:	6839      	ldr	r1, [r7, #0]
 8011726:	6878      	ldr	r0, [r7, #4]
 8011728:	f7fe ff8c 	bl	8010644 <move_window>
 801172c:	4603      	mov	r3, r0
 801172e:	2b00      	cmp	r3, #0
 8011730:	d001      	beq.n	8011736 <check_fs+0x2a>
 8011732:	2304      	movs	r3, #4
 8011734:	e038      	b.n	80117a8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	3338      	adds	r3, #56	; 0x38
 801173a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801173e:	4618      	mov	r0, r3
 8011740:	f7fe fcd0 	bl	80100e4 <ld_word>
 8011744:	4603      	mov	r3, r0
 8011746:	461a      	mov	r2, r3
 8011748:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801174c:	429a      	cmp	r2, r3
 801174e:	d001      	beq.n	8011754 <check_fs+0x48>
 8011750:	2303      	movs	r3, #3
 8011752:	e029      	b.n	80117a8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801175a:	2be9      	cmp	r3, #233	; 0xe9
 801175c:	d009      	beq.n	8011772 <check_fs+0x66>
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011764:	2beb      	cmp	r3, #235	; 0xeb
 8011766:	d11e      	bne.n	80117a6 <check_fs+0x9a>
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801176e:	2b90      	cmp	r3, #144	; 0x90
 8011770:	d119      	bne.n	80117a6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	3338      	adds	r3, #56	; 0x38
 8011776:	3336      	adds	r3, #54	; 0x36
 8011778:	4618      	mov	r0, r3
 801177a:	f7fe fccb 	bl	8010114 <ld_dword>
 801177e:	4603      	mov	r3, r0
 8011780:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011784:	4a0a      	ldr	r2, [pc, #40]	; (80117b0 <check_fs+0xa4>)
 8011786:	4293      	cmp	r3, r2
 8011788:	d101      	bne.n	801178e <check_fs+0x82>
 801178a:	2300      	movs	r3, #0
 801178c:	e00c      	b.n	80117a8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	3338      	adds	r3, #56	; 0x38
 8011792:	3352      	adds	r3, #82	; 0x52
 8011794:	4618      	mov	r0, r3
 8011796:	f7fe fcbd 	bl	8010114 <ld_dword>
 801179a:	4602      	mov	r2, r0
 801179c:	4b05      	ldr	r3, [pc, #20]	; (80117b4 <check_fs+0xa8>)
 801179e:	429a      	cmp	r2, r3
 80117a0:	d101      	bne.n	80117a6 <check_fs+0x9a>
 80117a2:	2300      	movs	r3, #0
 80117a4:	e000      	b.n	80117a8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80117a6:	2302      	movs	r3, #2
}
 80117a8:	4618      	mov	r0, r3
 80117aa:	3708      	adds	r7, #8
 80117ac:	46bd      	mov	sp, r7
 80117ae:	bd80      	pop	{r7, pc}
 80117b0:	00544146 	.word	0x00544146
 80117b4:	33544146 	.word	0x33544146

080117b8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b096      	sub	sp, #88	; 0x58
 80117bc:	af00      	add	r7, sp, #0
 80117be:	60f8      	str	r0, [r7, #12]
 80117c0:	60b9      	str	r1, [r7, #8]
 80117c2:	4613      	mov	r3, r2
 80117c4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80117c6:	68bb      	ldr	r3, [r7, #8]
 80117c8:	2200      	movs	r2, #0
 80117ca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80117cc:	68f8      	ldr	r0, [r7, #12]
 80117ce:	f7ff ff58 	bl	8011682 <get_ldnumber>
 80117d2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80117d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	da01      	bge.n	80117de <find_volume+0x26>
 80117da:	230b      	movs	r3, #11
 80117dc:	e268      	b.n	8011cb0 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80117de:	4ab0      	ldr	r2, [pc, #704]	; (8011aa0 <find_volume+0x2e8>)
 80117e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80117e6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80117e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d101      	bne.n	80117f2 <find_volume+0x3a>
 80117ee:	230c      	movs	r3, #12
 80117f0:	e25e      	b.n	8011cb0 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80117f2:	68bb      	ldr	r3, [r7, #8]
 80117f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80117f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80117f8:	79fb      	ldrb	r3, [r7, #7]
 80117fa:	f023 0301 	bic.w	r3, r3, #1
 80117fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011802:	781b      	ldrb	r3, [r3, #0]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d01a      	beq.n	801183e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801180a:	785b      	ldrb	r3, [r3, #1]
 801180c:	4618      	mov	r0, r3
 801180e:	f7fe fbcb 	bl	800ffa8 <disk_status>
 8011812:	4603      	mov	r3, r0
 8011814:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011818:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801181c:	f003 0301 	and.w	r3, r3, #1
 8011820:	2b00      	cmp	r3, #0
 8011822:	d10c      	bne.n	801183e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011824:	79fb      	ldrb	r3, [r7, #7]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d007      	beq.n	801183a <find_volume+0x82>
 801182a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801182e:	f003 0304 	and.w	r3, r3, #4
 8011832:	2b00      	cmp	r3, #0
 8011834:	d001      	beq.n	801183a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011836:	230a      	movs	r3, #10
 8011838:	e23a      	b.n	8011cb0 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 801183a:	2300      	movs	r3, #0
 801183c:	e238      	b.n	8011cb0 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801183e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011840:	2200      	movs	r2, #0
 8011842:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011846:	b2da      	uxtb	r2, r3
 8011848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801184a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801184c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801184e:	785b      	ldrb	r3, [r3, #1]
 8011850:	4618      	mov	r0, r3
 8011852:	f7fe fbc3 	bl	800ffdc <disk_initialize>
 8011856:	4603      	mov	r3, r0
 8011858:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801185c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011860:	f003 0301 	and.w	r3, r3, #1
 8011864:	2b00      	cmp	r3, #0
 8011866:	d001      	beq.n	801186c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011868:	2303      	movs	r3, #3
 801186a:	e221      	b.n	8011cb0 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801186c:	79fb      	ldrb	r3, [r7, #7]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d007      	beq.n	8011882 <find_volume+0xca>
 8011872:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011876:	f003 0304 	and.w	r3, r3, #4
 801187a:	2b00      	cmp	r3, #0
 801187c:	d001      	beq.n	8011882 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801187e:	230a      	movs	r3, #10
 8011880:	e216      	b.n	8011cb0 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8011882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011884:	7858      	ldrb	r0, [r3, #1]
 8011886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011888:	330c      	adds	r3, #12
 801188a:	461a      	mov	r2, r3
 801188c:	2102      	movs	r1, #2
 801188e:	f7fe fc0b 	bl	80100a8 <disk_ioctl>
 8011892:	4603      	mov	r3, r0
 8011894:	2b00      	cmp	r3, #0
 8011896:	d001      	beq.n	801189c <find_volume+0xe4>
 8011898:	2301      	movs	r3, #1
 801189a:	e209      	b.n	8011cb0 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801189c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801189e:	899b      	ldrh	r3, [r3, #12]
 80118a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80118a4:	d80d      	bhi.n	80118c2 <find_volume+0x10a>
 80118a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118a8:	899b      	ldrh	r3, [r3, #12]
 80118aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80118ae:	d308      	bcc.n	80118c2 <find_volume+0x10a>
 80118b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118b2:	899b      	ldrh	r3, [r3, #12]
 80118b4:	461a      	mov	r2, r3
 80118b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118b8:	899b      	ldrh	r3, [r3, #12]
 80118ba:	3b01      	subs	r3, #1
 80118bc:	4013      	ands	r3, r2
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d001      	beq.n	80118c6 <find_volume+0x10e>
 80118c2:	2301      	movs	r3, #1
 80118c4:	e1f4      	b.n	8011cb0 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80118c6:	2300      	movs	r3, #0
 80118c8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80118ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80118cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80118ce:	f7ff ff1d 	bl	801170c <check_fs>
 80118d2:	4603      	mov	r3, r0
 80118d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80118d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80118dc:	2b02      	cmp	r3, #2
 80118de:	d14b      	bne.n	8011978 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80118e0:	2300      	movs	r3, #0
 80118e2:	643b      	str	r3, [r7, #64]	; 0x40
 80118e4:	e01f      	b.n	8011926 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80118e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118e8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80118ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118ee:	011b      	lsls	r3, r3, #4
 80118f0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80118f4:	4413      	add	r3, r2
 80118f6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80118f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118fa:	3304      	adds	r3, #4
 80118fc:	781b      	ldrb	r3, [r3, #0]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d006      	beq.n	8011910 <find_volume+0x158>
 8011902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011904:	3308      	adds	r3, #8
 8011906:	4618      	mov	r0, r3
 8011908:	f7fe fc04 	bl	8010114 <ld_dword>
 801190c:	4602      	mov	r2, r0
 801190e:	e000      	b.n	8011912 <find_volume+0x15a>
 8011910:	2200      	movs	r2, #0
 8011912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011914:	009b      	lsls	r3, r3, #2
 8011916:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801191a:	440b      	add	r3, r1
 801191c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011922:	3301      	adds	r3, #1
 8011924:	643b      	str	r3, [r7, #64]	; 0x40
 8011926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011928:	2b03      	cmp	r3, #3
 801192a:	d9dc      	bls.n	80118e6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801192c:	2300      	movs	r3, #0
 801192e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011932:	2b00      	cmp	r3, #0
 8011934:	d002      	beq.n	801193c <find_volume+0x184>
 8011936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011938:	3b01      	subs	r3, #1
 801193a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801193c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801193e:	009b      	lsls	r3, r3, #2
 8011940:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011944:	4413      	add	r3, r2
 8011946:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801194a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801194c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801194e:	2b00      	cmp	r3, #0
 8011950:	d005      	beq.n	801195e <find_volume+0x1a6>
 8011952:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011954:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011956:	f7ff fed9 	bl	801170c <check_fs>
 801195a:	4603      	mov	r3, r0
 801195c:	e000      	b.n	8011960 <find_volume+0x1a8>
 801195e:	2303      	movs	r3, #3
 8011960:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011964:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011968:	2b01      	cmp	r3, #1
 801196a:	d905      	bls.n	8011978 <find_volume+0x1c0>
 801196c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801196e:	3301      	adds	r3, #1
 8011970:	643b      	str	r3, [r7, #64]	; 0x40
 8011972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011974:	2b03      	cmp	r3, #3
 8011976:	d9e1      	bls.n	801193c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011978:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801197c:	2b04      	cmp	r3, #4
 801197e:	d101      	bne.n	8011984 <find_volume+0x1cc>
 8011980:	2301      	movs	r3, #1
 8011982:	e195      	b.n	8011cb0 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011984:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011988:	2b01      	cmp	r3, #1
 801198a:	d901      	bls.n	8011990 <find_volume+0x1d8>
 801198c:	230d      	movs	r3, #13
 801198e:	e18f      	b.n	8011cb0 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011992:	3338      	adds	r3, #56	; 0x38
 8011994:	330b      	adds	r3, #11
 8011996:	4618      	mov	r0, r3
 8011998:	f7fe fba4 	bl	80100e4 <ld_word>
 801199c:	4603      	mov	r3, r0
 801199e:	461a      	mov	r2, r3
 80119a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119a2:	899b      	ldrh	r3, [r3, #12]
 80119a4:	429a      	cmp	r2, r3
 80119a6:	d001      	beq.n	80119ac <find_volume+0x1f4>
 80119a8:	230d      	movs	r3, #13
 80119aa:	e181      	b.n	8011cb0 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80119ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ae:	3338      	adds	r3, #56	; 0x38
 80119b0:	3316      	adds	r3, #22
 80119b2:	4618      	mov	r0, r3
 80119b4:	f7fe fb96 	bl	80100e4 <ld_word>
 80119b8:	4603      	mov	r3, r0
 80119ba:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80119bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d106      	bne.n	80119d0 <find_volume+0x218>
 80119c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119c4:	3338      	adds	r3, #56	; 0x38
 80119c6:	3324      	adds	r3, #36	; 0x24
 80119c8:	4618      	mov	r0, r3
 80119ca:	f7fe fba3 	bl	8010114 <ld_dword>
 80119ce:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80119d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80119d4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80119d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119d8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80119dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119de:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80119e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119e2:	789b      	ldrb	r3, [r3, #2]
 80119e4:	2b01      	cmp	r3, #1
 80119e6:	d005      	beq.n	80119f4 <find_volume+0x23c>
 80119e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ea:	789b      	ldrb	r3, [r3, #2]
 80119ec:	2b02      	cmp	r3, #2
 80119ee:	d001      	beq.n	80119f4 <find_volume+0x23c>
 80119f0:	230d      	movs	r3, #13
 80119f2:	e15d      	b.n	8011cb0 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80119f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119f6:	789b      	ldrb	r3, [r3, #2]
 80119f8:	461a      	mov	r2, r3
 80119fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119fc:	fb02 f303 	mul.w	r3, r2, r3
 8011a00:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011a08:	b29a      	uxth	r2, r3
 8011a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a0c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a10:	895b      	ldrh	r3, [r3, #10]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d008      	beq.n	8011a28 <find_volume+0x270>
 8011a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a18:	895b      	ldrh	r3, [r3, #10]
 8011a1a:	461a      	mov	r2, r3
 8011a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a1e:	895b      	ldrh	r3, [r3, #10]
 8011a20:	3b01      	subs	r3, #1
 8011a22:	4013      	ands	r3, r2
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d001      	beq.n	8011a2c <find_volume+0x274>
 8011a28:	230d      	movs	r3, #13
 8011a2a:	e141      	b.n	8011cb0 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a2e:	3338      	adds	r3, #56	; 0x38
 8011a30:	3311      	adds	r3, #17
 8011a32:	4618      	mov	r0, r3
 8011a34:	f7fe fb56 	bl	80100e4 <ld_word>
 8011a38:	4603      	mov	r3, r0
 8011a3a:	461a      	mov	r2, r3
 8011a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a3e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a42:	891b      	ldrh	r3, [r3, #8]
 8011a44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a46:	8992      	ldrh	r2, [r2, #12]
 8011a48:	0952      	lsrs	r2, r2, #5
 8011a4a:	b292      	uxth	r2, r2
 8011a4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011a50:	fb02 f201 	mul.w	r2, r2, r1
 8011a54:	1a9b      	subs	r3, r3, r2
 8011a56:	b29b      	uxth	r3, r3
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d001      	beq.n	8011a60 <find_volume+0x2a8>
 8011a5c:	230d      	movs	r3, #13
 8011a5e:	e127      	b.n	8011cb0 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a62:	3338      	adds	r3, #56	; 0x38
 8011a64:	3313      	adds	r3, #19
 8011a66:	4618      	mov	r0, r3
 8011a68:	f7fe fb3c 	bl	80100e4 <ld_word>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d106      	bne.n	8011a84 <find_volume+0x2cc>
 8011a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a78:	3338      	adds	r3, #56	; 0x38
 8011a7a:	3320      	adds	r3, #32
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f7fe fb49 	bl	8010114 <ld_dword>
 8011a82:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a86:	3338      	adds	r3, #56	; 0x38
 8011a88:	330e      	adds	r3, #14
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f7fe fb2a 	bl	80100e4 <ld_word>
 8011a90:	4603      	mov	r3, r0
 8011a92:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011a94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d104      	bne.n	8011aa4 <find_volume+0x2ec>
 8011a9a:	230d      	movs	r3, #13
 8011a9c:	e108      	b.n	8011cb0 <find_volume+0x4f8>
 8011a9e:	bf00      	nop
 8011aa0:	2003c478 	.word	0x2003c478

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011aa4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011aa8:	4413      	add	r3, r2
 8011aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011aac:	8911      	ldrh	r1, [r2, #8]
 8011aae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ab0:	8992      	ldrh	r2, [r2, #12]
 8011ab2:	0952      	lsrs	r2, r2, #5
 8011ab4:	b292      	uxth	r2, r2
 8011ab6:	fbb1 f2f2 	udiv	r2, r1, r2
 8011aba:	b292      	uxth	r2, r2
 8011abc:	4413      	add	r3, r2
 8011abe:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011ac0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ac4:	429a      	cmp	r2, r3
 8011ac6:	d201      	bcs.n	8011acc <find_volume+0x314>
 8011ac8:	230d      	movs	r3, #13
 8011aca:	e0f1      	b.n	8011cb0 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011acc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ad0:	1ad3      	subs	r3, r2, r3
 8011ad2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ad4:	8952      	ldrh	r2, [r2, #10]
 8011ad6:	fbb3 f3f2 	udiv	r3, r3, r2
 8011ada:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d101      	bne.n	8011ae6 <find_volume+0x32e>
 8011ae2:	230d      	movs	r3, #13
 8011ae4:	e0e4      	b.n	8011cb0 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8011ae6:	2303      	movs	r3, #3
 8011ae8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aee:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011af2:	4293      	cmp	r3, r2
 8011af4:	d802      	bhi.n	8011afc <find_volume+0x344>
 8011af6:	2302      	movs	r3, #2
 8011af8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011afe:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011b02:	4293      	cmp	r3, r2
 8011b04:	d802      	bhi.n	8011b0c <find_volume+0x354>
 8011b06:	2301      	movs	r3, #1
 8011b08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b0e:	1c9a      	adds	r2, r3, #2
 8011b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b12:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8011b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011b18:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011b1a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b1e:	441a      	add	r2, r3
 8011b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b22:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8011b24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b28:	441a      	add	r2, r3
 8011b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b2c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8011b2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011b32:	2b03      	cmp	r3, #3
 8011b34:	d11e      	bne.n	8011b74 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b38:	3338      	adds	r3, #56	; 0x38
 8011b3a:	332a      	adds	r3, #42	; 0x2a
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f7fe fad1 	bl	80100e4 <ld_word>
 8011b42:	4603      	mov	r3, r0
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d001      	beq.n	8011b4c <find_volume+0x394>
 8011b48:	230d      	movs	r3, #13
 8011b4a:	e0b1      	b.n	8011cb0 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b4e:	891b      	ldrh	r3, [r3, #8]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d001      	beq.n	8011b58 <find_volume+0x3a0>
 8011b54:	230d      	movs	r3, #13
 8011b56:	e0ab      	b.n	8011cb0 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b5a:	3338      	adds	r3, #56	; 0x38
 8011b5c:	332c      	adds	r3, #44	; 0x2c
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f7fe fad8 	bl	8010114 <ld_dword>
 8011b64:	4602      	mov	r2, r0
 8011b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b68:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b6c:	69db      	ldr	r3, [r3, #28]
 8011b6e:	009b      	lsls	r3, r3, #2
 8011b70:	647b      	str	r3, [r7, #68]	; 0x44
 8011b72:	e01f      	b.n	8011bb4 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b76:	891b      	ldrh	r3, [r3, #8]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d101      	bne.n	8011b80 <find_volume+0x3c8>
 8011b7c:	230d      	movs	r3, #13
 8011b7e:	e097      	b.n	8011cb0 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b86:	441a      	add	r2, r3
 8011b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b8a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011b8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011b90:	2b02      	cmp	r3, #2
 8011b92:	d103      	bne.n	8011b9c <find_volume+0x3e4>
 8011b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b96:	69db      	ldr	r3, [r3, #28]
 8011b98:	005b      	lsls	r3, r3, #1
 8011b9a:	e00a      	b.n	8011bb2 <find_volume+0x3fa>
 8011b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b9e:	69da      	ldr	r2, [r3, #28]
 8011ba0:	4613      	mov	r3, r2
 8011ba2:	005b      	lsls	r3, r3, #1
 8011ba4:	4413      	add	r3, r2
 8011ba6:	085a      	lsrs	r2, r3, #1
 8011ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011baa:	69db      	ldr	r3, [r3, #28]
 8011bac:	f003 0301 	and.w	r3, r3, #1
 8011bb0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011bb2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bb6:	6a1a      	ldr	r2, [r3, #32]
 8011bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bba:	899b      	ldrh	r3, [r3, #12]
 8011bbc:	4619      	mov	r1, r3
 8011bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bc0:	440b      	add	r3, r1
 8011bc2:	3b01      	subs	r3, #1
 8011bc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011bc6:	8989      	ldrh	r1, [r1, #12]
 8011bc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d201      	bcs.n	8011bd4 <find_volume+0x41c>
 8011bd0:	230d      	movs	r3, #13
 8011bd2:	e06d      	b.n	8011cb0 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8011bda:	615a      	str	r2, [r3, #20]
 8011bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bde:	695a      	ldr	r2, [r3, #20]
 8011be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011be2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8011be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011be6:	2280      	movs	r2, #128	; 0x80
 8011be8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011bea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011bee:	2b03      	cmp	r3, #3
 8011bf0:	d149      	bne.n	8011c86 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bf4:	3338      	adds	r3, #56	; 0x38
 8011bf6:	3330      	adds	r3, #48	; 0x30
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	f7fe fa73 	bl	80100e4 <ld_word>
 8011bfe:	4603      	mov	r3, r0
 8011c00:	2b01      	cmp	r3, #1
 8011c02:	d140      	bne.n	8011c86 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c06:	3301      	adds	r3, #1
 8011c08:	4619      	mov	r1, r3
 8011c0a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011c0c:	f7fe fd1a 	bl	8010644 <move_window>
 8011c10:	4603      	mov	r3, r0
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d137      	bne.n	8011c86 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8011c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c18:	2200      	movs	r2, #0
 8011c1a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c1e:	3338      	adds	r3, #56	; 0x38
 8011c20:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7fe fa5d 	bl	80100e4 <ld_word>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	461a      	mov	r2, r3
 8011c2e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011c32:	429a      	cmp	r2, r3
 8011c34:	d127      	bne.n	8011c86 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c38:	3338      	adds	r3, #56	; 0x38
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	f7fe fa6a 	bl	8010114 <ld_dword>
 8011c40:	4602      	mov	r2, r0
 8011c42:	4b1d      	ldr	r3, [pc, #116]	; (8011cb8 <find_volume+0x500>)
 8011c44:	429a      	cmp	r2, r3
 8011c46:	d11e      	bne.n	8011c86 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c4a:	3338      	adds	r3, #56	; 0x38
 8011c4c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011c50:	4618      	mov	r0, r3
 8011c52:	f7fe fa5f 	bl	8010114 <ld_dword>
 8011c56:	4602      	mov	r2, r0
 8011c58:	4b18      	ldr	r3, [pc, #96]	; (8011cbc <find_volume+0x504>)
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d113      	bne.n	8011c86 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c60:	3338      	adds	r3, #56	; 0x38
 8011c62:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011c66:	4618      	mov	r0, r3
 8011c68:	f7fe fa54 	bl	8010114 <ld_dword>
 8011c6c:	4602      	mov	r2, r0
 8011c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c70:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c74:	3338      	adds	r3, #56	; 0x38
 8011c76:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	f7fe fa4a 	bl	8010114 <ld_dword>
 8011c80:	4602      	mov	r2, r0
 8011c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c84:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c88:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011c8c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011c8e:	4b0c      	ldr	r3, [pc, #48]	; (8011cc0 <find_volume+0x508>)
 8011c90:	881b      	ldrh	r3, [r3, #0]
 8011c92:	3301      	adds	r3, #1
 8011c94:	b29a      	uxth	r2, r3
 8011c96:	4b0a      	ldr	r3, [pc, #40]	; (8011cc0 <find_volume+0x508>)
 8011c98:	801a      	strh	r2, [r3, #0]
 8011c9a:	4b09      	ldr	r3, [pc, #36]	; (8011cc0 <find_volume+0x508>)
 8011c9c:	881a      	ldrh	r2, [r3, #0]
 8011c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ca0:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8011ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011ca8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011caa:	f7fe fc63 	bl	8010574 <clear_lock>
#endif
	return FR_OK;
 8011cae:	2300      	movs	r3, #0
}
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	3758      	adds	r7, #88	; 0x58
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	bd80      	pop	{r7, pc}
 8011cb8:	41615252 	.word	0x41615252
 8011cbc:	61417272 	.word	0x61417272
 8011cc0:	2003c47c 	.word	0x2003c47c

08011cc4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b084      	sub	sp, #16
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
 8011ccc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011cce:	2309      	movs	r3, #9
 8011cd0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d01c      	beq.n	8011d12 <validate+0x4e>
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d018      	beq.n	8011d12 <validate+0x4e>
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	781b      	ldrb	r3, [r3, #0]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d013      	beq.n	8011d12 <validate+0x4e>
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	889a      	ldrh	r2, [r3, #4]
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	88db      	ldrh	r3, [r3, #6]
 8011cf4:	429a      	cmp	r2, r3
 8011cf6:	d10c      	bne.n	8011d12 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	785b      	ldrb	r3, [r3, #1]
 8011cfe:	4618      	mov	r0, r3
 8011d00:	f7fe f952 	bl	800ffa8 <disk_status>
 8011d04:	4603      	mov	r3, r0
 8011d06:	f003 0301 	and.w	r3, r3, #1
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d101      	bne.n	8011d12 <validate+0x4e>
			res = FR_OK;
 8011d0e:	2300      	movs	r3, #0
 8011d10:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011d12:	7bfb      	ldrb	r3, [r7, #15]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d102      	bne.n	8011d1e <validate+0x5a>
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	e000      	b.n	8011d20 <validate+0x5c>
 8011d1e:	2300      	movs	r3, #0
 8011d20:	683a      	ldr	r2, [r7, #0]
 8011d22:	6013      	str	r3, [r2, #0]
	return res;
 8011d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d26:	4618      	mov	r0, r3
 8011d28:	3710      	adds	r7, #16
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	bd80      	pop	{r7, pc}
	...

08011d30 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b088      	sub	sp, #32
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	60f8      	str	r0, [r7, #12]
 8011d38:	60b9      	str	r1, [r7, #8]
 8011d3a:	4613      	mov	r3, r2
 8011d3c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011d3e:	68bb      	ldr	r3, [r7, #8]
 8011d40:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011d42:	f107 0310 	add.w	r3, r7, #16
 8011d46:	4618      	mov	r0, r3
 8011d48:	f7ff fc9b 	bl	8011682 <get_ldnumber>
 8011d4c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011d4e:	69fb      	ldr	r3, [r7, #28]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	da01      	bge.n	8011d58 <f_mount+0x28>
 8011d54:	230b      	movs	r3, #11
 8011d56:	e02b      	b.n	8011db0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011d58:	4a17      	ldr	r2, [pc, #92]	; (8011db8 <f_mount+0x88>)
 8011d5a:	69fb      	ldr	r3, [r7, #28]
 8011d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d60:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011d62:	69bb      	ldr	r3, [r7, #24]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d005      	beq.n	8011d74 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011d68:	69b8      	ldr	r0, [r7, #24]
 8011d6a:	f7fe fc03 	bl	8010574 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011d6e:	69bb      	ldr	r3, [r7, #24]
 8011d70:	2200      	movs	r2, #0
 8011d72:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d002      	beq.n	8011d80 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011d80:	68fa      	ldr	r2, [r7, #12]
 8011d82:	490d      	ldr	r1, [pc, #52]	; (8011db8 <f_mount+0x88>)
 8011d84:	69fb      	ldr	r3, [r7, #28]
 8011d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d002      	beq.n	8011d96 <f_mount+0x66>
 8011d90:	79fb      	ldrb	r3, [r7, #7]
 8011d92:	2b01      	cmp	r3, #1
 8011d94:	d001      	beq.n	8011d9a <f_mount+0x6a>
 8011d96:	2300      	movs	r3, #0
 8011d98:	e00a      	b.n	8011db0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011d9a:	f107 010c 	add.w	r1, r7, #12
 8011d9e:	f107 0308 	add.w	r3, r7, #8
 8011da2:	2200      	movs	r2, #0
 8011da4:	4618      	mov	r0, r3
 8011da6:	f7ff fd07 	bl	80117b8 <find_volume>
 8011daa:	4603      	mov	r3, r0
 8011dac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8011db0:	4618      	mov	r0, r3
 8011db2:	3720      	adds	r7, #32
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}
 8011db8:	2003c478 	.word	0x2003c478

08011dbc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b098      	sub	sp, #96	; 0x60
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	60f8      	str	r0, [r7, #12]
 8011dc4:	60b9      	str	r1, [r7, #8]
 8011dc6:	4613      	mov	r3, r2
 8011dc8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d101      	bne.n	8011dd4 <f_open+0x18>
 8011dd0:	2309      	movs	r3, #9
 8011dd2:	e1ba      	b.n	801214a <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011dd4:	79fb      	ldrb	r3, [r7, #7]
 8011dd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011dda:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011ddc:	79fa      	ldrb	r2, [r7, #7]
 8011dde:	f107 0110 	add.w	r1, r7, #16
 8011de2:	f107 0308 	add.w	r3, r7, #8
 8011de6:	4618      	mov	r0, r3
 8011de8:	f7ff fce6 	bl	80117b8 <find_volume>
 8011dec:	4603      	mov	r3, r0
 8011dee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8011df2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	f040 819e 	bne.w	8012138 <f_open+0x37c>
		dj.obj.fs = fs;
 8011dfc:	693b      	ldr	r3, [r7, #16]
 8011dfe:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011e00:	68ba      	ldr	r2, [r7, #8]
 8011e02:	f107 0314 	add.w	r3, r7, #20
 8011e06:	4611      	mov	r1, r2
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f7ff fba5 	bl	8011558 <follow_path>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011e14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d11a      	bne.n	8011e52 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011e1c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011e20:	b25b      	sxtb	r3, r3
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	da03      	bge.n	8011e2e <f_open+0x72>
				res = FR_INVALID_NAME;
 8011e26:	2306      	movs	r3, #6
 8011e28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011e2c:	e011      	b.n	8011e52 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011e2e:	79fb      	ldrb	r3, [r7, #7]
 8011e30:	f023 0301 	bic.w	r3, r3, #1
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	bf14      	ite	ne
 8011e38:	2301      	movne	r3, #1
 8011e3a:	2300      	moveq	r3, #0
 8011e3c:	b2db      	uxtb	r3, r3
 8011e3e:	461a      	mov	r2, r3
 8011e40:	f107 0314 	add.w	r3, r7, #20
 8011e44:	4611      	mov	r1, r2
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7fe fa4c 	bl	80102e4 <chk_lock>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011e52:	79fb      	ldrb	r3, [r7, #7]
 8011e54:	f003 031c 	and.w	r3, r3, #28
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d07e      	beq.n	8011f5a <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8011e5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d017      	beq.n	8011e94 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011e64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011e68:	2b04      	cmp	r3, #4
 8011e6a:	d10e      	bne.n	8011e8a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011e6c:	f7fe fa96 	bl	801039c <enq_lock>
 8011e70:	4603      	mov	r3, r0
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d006      	beq.n	8011e84 <f_open+0xc8>
 8011e76:	f107 0314 	add.w	r3, r7, #20
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f7ff fa52 	bl	8011324 <dir_register>
 8011e80:	4603      	mov	r3, r0
 8011e82:	e000      	b.n	8011e86 <f_open+0xca>
 8011e84:	2312      	movs	r3, #18
 8011e86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011e8a:	79fb      	ldrb	r3, [r7, #7]
 8011e8c:	f043 0308 	orr.w	r3, r3, #8
 8011e90:	71fb      	strb	r3, [r7, #7]
 8011e92:	e010      	b.n	8011eb6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011e94:	7ebb      	ldrb	r3, [r7, #26]
 8011e96:	f003 0311 	and.w	r3, r3, #17
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d003      	beq.n	8011ea6 <f_open+0xea>
					res = FR_DENIED;
 8011e9e:	2307      	movs	r3, #7
 8011ea0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011ea4:	e007      	b.n	8011eb6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011ea6:	79fb      	ldrb	r3, [r7, #7]
 8011ea8:	f003 0304 	and.w	r3, r3, #4
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d002      	beq.n	8011eb6 <f_open+0xfa>
 8011eb0:	2308      	movs	r3, #8
 8011eb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011eb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d167      	bne.n	8011f8e <f_open+0x1d2>
 8011ebe:	79fb      	ldrb	r3, [r7, #7]
 8011ec0:	f003 0308 	and.w	r3, r3, #8
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d062      	beq.n	8011f8e <f_open+0x1d2>
				dw = GET_FATTIME();
 8011ec8:	4ba2      	ldr	r3, [pc, #648]	; (8012154 <f_open+0x398>)
 8011eca:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ece:	330e      	adds	r3, #14
 8011ed0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f7fe f95c 	bl	8010190 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011eda:	3316      	adds	r3, #22
 8011edc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f7fe f956 	bl	8010190 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ee6:	330b      	adds	r3, #11
 8011ee8:	2220      	movs	r2, #32
 8011eea:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011eec:	693b      	ldr	r3, [r7, #16]
 8011eee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ef0:	4611      	mov	r1, r2
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f7ff f925 	bl	8011142 <ld_clust>
 8011ef8:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011efa:	693b      	ldr	r3, [r7, #16]
 8011efc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011efe:	2200      	movs	r2, #0
 8011f00:	4618      	mov	r0, r3
 8011f02:	f7ff f93d 	bl	8011180 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f08:	331c      	adds	r3, #28
 8011f0a:	2100      	movs	r1, #0
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	f7fe f93f 	bl	8010190 <st_dword>
					fs->wflag = 1;
 8011f12:	693b      	ldr	r3, [r7, #16]
 8011f14:	2201      	movs	r2, #1
 8011f16:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d037      	beq.n	8011f8e <f_open+0x1d2>
						dw = fs->winsect;
 8011f1e:	693b      	ldr	r3, [r7, #16]
 8011f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f22:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8011f24:	f107 0314 	add.w	r3, r7, #20
 8011f28:	2200      	movs	r2, #0
 8011f2a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	f7fe fe2d 	bl	8010b8c <remove_chain>
 8011f32:	4603      	mov	r3, r0
 8011f34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8011f38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d126      	bne.n	8011f8e <f_open+0x1d2>
							res = move_window(fs, dw);
 8011f40:	693b      	ldr	r3, [r7, #16]
 8011f42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011f44:	4618      	mov	r0, r3
 8011f46:	f7fe fb7d 	bl	8010644 <move_window>
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011f50:	693b      	ldr	r3, [r7, #16]
 8011f52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011f54:	3a01      	subs	r2, #1
 8011f56:	611a      	str	r2, [r3, #16]
 8011f58:	e019      	b.n	8011f8e <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011f5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d115      	bne.n	8011f8e <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011f62:	7ebb      	ldrb	r3, [r7, #26]
 8011f64:	f003 0310 	and.w	r3, r3, #16
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d003      	beq.n	8011f74 <f_open+0x1b8>
					res = FR_NO_FILE;
 8011f6c:	2304      	movs	r3, #4
 8011f6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011f72:	e00c      	b.n	8011f8e <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011f74:	79fb      	ldrb	r3, [r7, #7]
 8011f76:	f003 0302 	and.w	r3, r3, #2
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d007      	beq.n	8011f8e <f_open+0x1d2>
 8011f7e:	7ebb      	ldrb	r3, [r7, #26]
 8011f80:	f003 0301 	and.w	r3, r3, #1
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d002      	beq.n	8011f8e <f_open+0x1d2>
						res = FR_DENIED;
 8011f88:	2307      	movs	r3, #7
 8011f8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011f8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d128      	bne.n	8011fe8 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011f96:	79fb      	ldrb	r3, [r7, #7]
 8011f98:	f003 0308 	and.w	r3, r3, #8
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d003      	beq.n	8011fa8 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8011fa0:	79fb      	ldrb	r3, [r7, #7]
 8011fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011fa6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011fa8:	693b      	ldr	r3, [r7, #16]
 8011faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8011fb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011fb6:	79fb      	ldrb	r3, [r7, #7]
 8011fb8:	f023 0301 	bic.w	r3, r3, #1
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	bf14      	ite	ne
 8011fc0:	2301      	movne	r3, #1
 8011fc2:	2300      	moveq	r3, #0
 8011fc4:	b2db      	uxtb	r3, r3
 8011fc6:	461a      	mov	r2, r3
 8011fc8:	f107 0314 	add.w	r3, r7, #20
 8011fcc:	4611      	mov	r1, r2
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f7fe fa06 	bl	80103e0 <inc_lock>
 8011fd4:	4602      	mov	r2, r0
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	691b      	ldr	r3, [r3, #16]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d102      	bne.n	8011fe8 <f_open+0x22c>
 8011fe2:	2302      	movs	r3, #2
 8011fe4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011fe8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	f040 80a3 	bne.w	8012138 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011ff2:	693b      	ldr	r3, [r7, #16]
 8011ff4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ff6:	4611      	mov	r1, r2
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	f7ff f8a2 	bl	8011142 <ld_clust>
 8011ffe:	4602      	mov	r2, r0
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012006:	331c      	adds	r3, #28
 8012008:	4618      	mov	r0, r3
 801200a:	f7fe f883 	bl	8010114 <ld_dword>
 801200e:	4602      	mov	r2, r0
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	2200      	movs	r2, #0
 8012018:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801201a:	693a      	ldr	r2, [r7, #16]
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012020:	693b      	ldr	r3, [r7, #16]
 8012022:	88da      	ldrh	r2, [r3, #6]
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	79fa      	ldrb	r2, [r7, #7]
 801202c:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	2200      	movs	r2, #0
 8012032:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	2200      	movs	r2, #0
 8012038:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	2200      	movs	r2, #0
 801203e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	3330      	adds	r3, #48	; 0x30
 8012044:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012048:	2100      	movs	r1, #0
 801204a:	4618      	mov	r0, r3
 801204c:	f7fe f8ed 	bl	801022a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012050:	79fb      	ldrb	r3, [r7, #7]
 8012052:	f003 0320 	and.w	r3, r3, #32
 8012056:	2b00      	cmp	r3, #0
 8012058:	d06e      	beq.n	8012138 <f_open+0x37c>
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	68db      	ldr	r3, [r3, #12]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d06a      	beq.n	8012138 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	68da      	ldr	r2, [r3, #12]
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801206a:	693b      	ldr	r3, [r7, #16]
 801206c:	895b      	ldrh	r3, [r3, #10]
 801206e:	461a      	mov	r2, r3
 8012070:	693b      	ldr	r3, [r7, #16]
 8012072:	899b      	ldrh	r3, [r3, #12]
 8012074:	fb03 f302 	mul.w	r3, r3, r2
 8012078:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	689b      	ldr	r3, [r3, #8]
 801207e:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	68db      	ldr	r3, [r3, #12]
 8012084:	657b      	str	r3, [r7, #84]	; 0x54
 8012086:	e016      	b.n	80120b6 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801208c:	4618      	mov	r0, r3
 801208e:	f7fe fb96 	bl	80107be <get_fat>
 8012092:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012094:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012096:	2b01      	cmp	r3, #1
 8012098:	d802      	bhi.n	80120a0 <f_open+0x2e4>
 801209a:	2302      	movs	r3, #2
 801209c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80120a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80120a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120a6:	d102      	bne.n	80120ae <f_open+0x2f2>
 80120a8:	2301      	movs	r3, #1
 80120aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80120ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80120b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120b2:	1ad3      	subs	r3, r2, r3
 80120b4:	657b      	str	r3, [r7, #84]	; 0x54
 80120b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d103      	bne.n	80120c6 <f_open+0x30a>
 80120be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80120c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120c2:	429a      	cmp	r2, r3
 80120c4:	d8e0      	bhi.n	8012088 <f_open+0x2cc>
				}
				fp->clust = clst;
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80120ca:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80120cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d131      	bne.n	8012138 <f_open+0x37c>
 80120d4:	693b      	ldr	r3, [r7, #16]
 80120d6:	899b      	ldrh	r3, [r3, #12]
 80120d8:	461a      	mov	r2, r3
 80120da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80120e0:	fb02 f201 	mul.w	r2, r2, r1
 80120e4:	1a9b      	subs	r3, r3, r2
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d026      	beq.n	8012138 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80120ea:	693b      	ldr	r3, [r7, #16]
 80120ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80120ee:	4618      	mov	r0, r3
 80120f0:	f7fe fb46 	bl	8010780 <clust2sect>
 80120f4:	6478      	str	r0, [r7, #68]	; 0x44
 80120f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d103      	bne.n	8012104 <f_open+0x348>
						res = FR_INT_ERR;
 80120fc:	2302      	movs	r3, #2
 80120fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012102:	e019      	b.n	8012138 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012104:	693b      	ldr	r3, [r7, #16]
 8012106:	899b      	ldrh	r3, [r3, #12]
 8012108:	461a      	mov	r2, r3
 801210a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801210c:	fbb3 f2f2 	udiv	r2, r3, r2
 8012110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012112:	441a      	add	r2, r3
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012118:	693b      	ldr	r3, [r7, #16]
 801211a:	7858      	ldrb	r0, [r3, #1]
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	6a1a      	ldr	r2, [r3, #32]
 8012126:	2301      	movs	r3, #1
 8012128:	f7fd ff7e 	bl	8010028 <disk_read>
 801212c:	4603      	mov	r3, r0
 801212e:	2b00      	cmp	r3, #0
 8012130:	d002      	beq.n	8012138 <f_open+0x37c>
 8012132:	2301      	movs	r3, #1
 8012134:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012138:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801213c:	2b00      	cmp	r3, #0
 801213e:	d002      	beq.n	8012146 <f_open+0x38a>
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	2200      	movs	r2, #0
 8012144:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012146:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801214a:	4618      	mov	r0, r3
 801214c:	3760      	adds	r7, #96	; 0x60
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}
 8012152:	bf00      	nop
 8012154:	274a0000 	.word	0x274a0000

08012158 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b08e      	sub	sp, #56	; 0x38
 801215c:	af00      	add	r7, sp, #0
 801215e:	60f8      	str	r0, [r7, #12]
 8012160:	60b9      	str	r1, [r7, #8]
 8012162:	607a      	str	r2, [r7, #4]
 8012164:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801216a:	683b      	ldr	r3, [r7, #0]
 801216c:	2200      	movs	r2, #0
 801216e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	f107 0214 	add.w	r2, r7, #20
 8012176:	4611      	mov	r1, r2
 8012178:	4618      	mov	r0, r3
 801217a:	f7ff fda3 	bl	8011cc4 <validate>
 801217e:	4603      	mov	r3, r0
 8012180:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012184:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012188:	2b00      	cmp	r3, #0
 801218a:	d107      	bne.n	801219c <f_read+0x44>
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	7d5b      	ldrb	r3, [r3, #21]
 8012190:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012194:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012198:	2b00      	cmp	r3, #0
 801219a:	d002      	beq.n	80121a2 <f_read+0x4a>
 801219c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80121a0:	e135      	b.n	801240e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	7d1b      	ldrb	r3, [r3, #20]
 80121a6:	f003 0301 	and.w	r3, r3, #1
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d101      	bne.n	80121b2 <f_read+0x5a>
 80121ae:	2307      	movs	r3, #7
 80121b0:	e12d      	b.n	801240e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	68da      	ldr	r2, [r3, #12]
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	699b      	ldr	r3, [r3, #24]
 80121ba:	1ad3      	subs	r3, r2, r3
 80121bc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80121be:	687a      	ldr	r2, [r7, #4]
 80121c0:	6a3b      	ldr	r3, [r7, #32]
 80121c2:	429a      	cmp	r2, r3
 80121c4:	f240 811e 	bls.w	8012404 <f_read+0x2ac>
 80121c8:	6a3b      	ldr	r3, [r7, #32]
 80121ca:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80121cc:	e11a      	b.n	8012404 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	699b      	ldr	r3, [r3, #24]
 80121d2:	697a      	ldr	r2, [r7, #20]
 80121d4:	8992      	ldrh	r2, [r2, #12]
 80121d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80121da:	fb02 f201 	mul.w	r2, r2, r1
 80121de:	1a9b      	subs	r3, r3, r2
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	f040 80d5 	bne.w	8012390 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	699b      	ldr	r3, [r3, #24]
 80121ea:	697a      	ldr	r2, [r7, #20]
 80121ec:	8992      	ldrh	r2, [r2, #12]
 80121ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80121f2:	697a      	ldr	r2, [r7, #20]
 80121f4:	8952      	ldrh	r2, [r2, #10]
 80121f6:	3a01      	subs	r2, #1
 80121f8:	4013      	ands	r3, r2
 80121fa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80121fc:	69fb      	ldr	r3, [r7, #28]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d12f      	bne.n	8012262 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	699b      	ldr	r3, [r3, #24]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d103      	bne.n	8012212 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	689b      	ldr	r3, [r3, #8]
 801220e:	633b      	str	r3, [r7, #48]	; 0x30
 8012210:	e013      	b.n	801223a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012216:	2b00      	cmp	r3, #0
 8012218:	d007      	beq.n	801222a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	699b      	ldr	r3, [r3, #24]
 801221e:	4619      	mov	r1, r3
 8012220:	68f8      	ldr	r0, [r7, #12]
 8012222:	f7fe fdb0 	bl	8010d86 <clmt_clust>
 8012226:	6338      	str	r0, [r7, #48]	; 0x30
 8012228:	e007      	b.n	801223a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801222a:	68fa      	ldr	r2, [r7, #12]
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	69db      	ldr	r3, [r3, #28]
 8012230:	4619      	mov	r1, r3
 8012232:	4610      	mov	r0, r2
 8012234:	f7fe fac3 	bl	80107be <get_fat>
 8012238:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801223a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801223c:	2b01      	cmp	r3, #1
 801223e:	d804      	bhi.n	801224a <f_read+0xf2>
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	2202      	movs	r2, #2
 8012244:	755a      	strb	r2, [r3, #21]
 8012246:	2302      	movs	r3, #2
 8012248:	e0e1      	b.n	801240e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801224c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012250:	d104      	bne.n	801225c <f_read+0x104>
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	2201      	movs	r2, #1
 8012256:	755a      	strb	r2, [r3, #21]
 8012258:	2301      	movs	r3, #1
 801225a:	e0d8      	b.n	801240e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012260:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012262:	697a      	ldr	r2, [r7, #20]
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	69db      	ldr	r3, [r3, #28]
 8012268:	4619      	mov	r1, r3
 801226a:	4610      	mov	r0, r2
 801226c:	f7fe fa88 	bl	8010780 <clust2sect>
 8012270:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012272:	69bb      	ldr	r3, [r7, #24]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d104      	bne.n	8012282 <f_read+0x12a>
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	2202      	movs	r2, #2
 801227c:	755a      	strb	r2, [r3, #21]
 801227e:	2302      	movs	r3, #2
 8012280:	e0c5      	b.n	801240e <f_read+0x2b6>
			sect += csect;
 8012282:	69ba      	ldr	r2, [r7, #24]
 8012284:	69fb      	ldr	r3, [r7, #28]
 8012286:	4413      	add	r3, r2
 8012288:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801228a:	697b      	ldr	r3, [r7, #20]
 801228c:	899b      	ldrh	r3, [r3, #12]
 801228e:	461a      	mov	r2, r3
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	fbb3 f3f2 	udiv	r3, r3, r2
 8012296:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801229a:	2b00      	cmp	r3, #0
 801229c:	d041      	beq.n	8012322 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801229e:	69fa      	ldr	r2, [r7, #28]
 80122a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122a2:	4413      	add	r3, r2
 80122a4:	697a      	ldr	r2, [r7, #20]
 80122a6:	8952      	ldrh	r2, [r2, #10]
 80122a8:	4293      	cmp	r3, r2
 80122aa:	d905      	bls.n	80122b8 <f_read+0x160>
					cc = fs->csize - csect;
 80122ac:	697b      	ldr	r3, [r7, #20]
 80122ae:	895b      	ldrh	r3, [r3, #10]
 80122b0:	461a      	mov	r2, r3
 80122b2:	69fb      	ldr	r3, [r7, #28]
 80122b4:	1ad3      	subs	r3, r2, r3
 80122b6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80122b8:	697b      	ldr	r3, [r7, #20]
 80122ba:	7858      	ldrb	r0, [r3, #1]
 80122bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122be:	69ba      	ldr	r2, [r7, #24]
 80122c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80122c2:	f7fd feb1 	bl	8010028 <disk_read>
 80122c6:	4603      	mov	r3, r0
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d004      	beq.n	80122d6 <f_read+0x17e>
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	2201      	movs	r2, #1
 80122d0:	755a      	strb	r2, [r3, #21]
 80122d2:	2301      	movs	r3, #1
 80122d4:	e09b      	b.n	801240e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	7d1b      	ldrb	r3, [r3, #20]
 80122da:	b25b      	sxtb	r3, r3
 80122dc:	2b00      	cmp	r3, #0
 80122de:	da18      	bge.n	8012312 <f_read+0x1ba>
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	6a1a      	ldr	r2, [r3, #32]
 80122e4:	69bb      	ldr	r3, [r7, #24]
 80122e6:	1ad3      	subs	r3, r2, r3
 80122e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80122ea:	429a      	cmp	r2, r3
 80122ec:	d911      	bls.n	8012312 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	6a1a      	ldr	r2, [r3, #32]
 80122f2:	69bb      	ldr	r3, [r7, #24]
 80122f4:	1ad3      	subs	r3, r2, r3
 80122f6:	697a      	ldr	r2, [r7, #20]
 80122f8:	8992      	ldrh	r2, [r2, #12]
 80122fa:	fb02 f303 	mul.w	r3, r2, r3
 80122fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012300:	18d0      	adds	r0, r2, r3
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012308:	697b      	ldr	r3, [r7, #20]
 801230a:	899b      	ldrh	r3, [r3, #12]
 801230c:	461a      	mov	r2, r3
 801230e:	f7fd ff6b 	bl	80101e8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8012312:	697b      	ldr	r3, [r7, #20]
 8012314:	899b      	ldrh	r3, [r3, #12]
 8012316:	461a      	mov	r2, r3
 8012318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801231a:	fb02 f303 	mul.w	r3, r2, r3
 801231e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8012320:	e05c      	b.n	80123dc <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	6a1b      	ldr	r3, [r3, #32]
 8012326:	69ba      	ldr	r2, [r7, #24]
 8012328:	429a      	cmp	r2, r3
 801232a:	d02e      	beq.n	801238a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	7d1b      	ldrb	r3, [r3, #20]
 8012330:	b25b      	sxtb	r3, r3
 8012332:	2b00      	cmp	r3, #0
 8012334:	da18      	bge.n	8012368 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012336:	697b      	ldr	r3, [r7, #20]
 8012338:	7858      	ldrb	r0, [r3, #1]
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	6a1a      	ldr	r2, [r3, #32]
 8012344:	2301      	movs	r3, #1
 8012346:	f7fd fe8f 	bl	8010068 <disk_write>
 801234a:	4603      	mov	r3, r0
 801234c:	2b00      	cmp	r3, #0
 801234e:	d004      	beq.n	801235a <f_read+0x202>
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	2201      	movs	r2, #1
 8012354:	755a      	strb	r2, [r3, #21]
 8012356:	2301      	movs	r3, #1
 8012358:	e059      	b.n	801240e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	7d1b      	ldrb	r3, [r3, #20]
 801235e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012362:	b2da      	uxtb	r2, r3
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012368:	697b      	ldr	r3, [r7, #20]
 801236a:	7858      	ldrb	r0, [r3, #1]
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012372:	2301      	movs	r3, #1
 8012374:	69ba      	ldr	r2, [r7, #24]
 8012376:	f7fd fe57 	bl	8010028 <disk_read>
 801237a:	4603      	mov	r3, r0
 801237c:	2b00      	cmp	r3, #0
 801237e:	d004      	beq.n	801238a <f_read+0x232>
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	2201      	movs	r2, #1
 8012384:	755a      	strb	r2, [r3, #21]
 8012386:	2301      	movs	r3, #1
 8012388:	e041      	b.n	801240e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	69ba      	ldr	r2, [r7, #24]
 801238e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012390:	697b      	ldr	r3, [r7, #20]
 8012392:	899b      	ldrh	r3, [r3, #12]
 8012394:	4618      	mov	r0, r3
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	699b      	ldr	r3, [r3, #24]
 801239a:	697a      	ldr	r2, [r7, #20]
 801239c:	8992      	ldrh	r2, [r2, #12]
 801239e:	fbb3 f1f2 	udiv	r1, r3, r2
 80123a2:	fb02 f201 	mul.w	r2, r2, r1
 80123a6:	1a9b      	subs	r3, r3, r2
 80123a8:	1ac3      	subs	r3, r0, r3
 80123aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80123ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	429a      	cmp	r2, r3
 80123b2:	d901      	bls.n	80123b8 <f_read+0x260>
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	699b      	ldr	r3, [r3, #24]
 80123c2:	697a      	ldr	r2, [r7, #20]
 80123c4:	8992      	ldrh	r2, [r2, #12]
 80123c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80123ca:	fb02 f200 	mul.w	r2, r2, r0
 80123ce:	1a9b      	subs	r3, r3, r2
 80123d0:	440b      	add	r3, r1
 80123d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123d4:	4619      	mov	r1, r3
 80123d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80123d8:	f7fd ff06 	bl	80101e8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80123dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123e0:	4413      	add	r3, r2
 80123e2:	627b      	str	r3, [r7, #36]	; 0x24
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	699a      	ldr	r2, [r3, #24]
 80123e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123ea:	441a      	add	r2, r3
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	619a      	str	r2, [r3, #24]
 80123f0:	683b      	ldr	r3, [r7, #0]
 80123f2:	681a      	ldr	r2, [r3, #0]
 80123f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123f6:	441a      	add	r2, r3
 80123f8:	683b      	ldr	r3, [r7, #0]
 80123fa:	601a      	str	r2, [r3, #0]
 80123fc:	687a      	ldr	r2, [r7, #4]
 80123fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012400:	1ad3      	subs	r3, r2, r3
 8012402:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2b00      	cmp	r3, #0
 8012408:	f47f aee1 	bne.w	80121ce <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801240c:	2300      	movs	r3, #0
}
 801240e:	4618      	mov	r0, r3
 8012410:	3738      	adds	r7, #56	; 0x38
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}

08012416 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012416:	b580      	push	{r7, lr}
 8012418:	b08c      	sub	sp, #48	; 0x30
 801241a:	af00      	add	r7, sp, #0
 801241c:	60f8      	str	r0, [r7, #12]
 801241e:	60b9      	str	r1, [r7, #8]
 8012420:	607a      	str	r2, [r7, #4]
 8012422:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012424:	68bb      	ldr	r3, [r7, #8]
 8012426:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012428:	683b      	ldr	r3, [r7, #0]
 801242a:	2200      	movs	r2, #0
 801242c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	f107 0210 	add.w	r2, r7, #16
 8012434:	4611      	mov	r1, r2
 8012436:	4618      	mov	r0, r3
 8012438:	f7ff fc44 	bl	8011cc4 <validate>
 801243c:	4603      	mov	r3, r0
 801243e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012442:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012446:	2b00      	cmp	r3, #0
 8012448:	d107      	bne.n	801245a <f_write+0x44>
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	7d5b      	ldrb	r3, [r3, #21]
 801244e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012452:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012456:	2b00      	cmp	r3, #0
 8012458:	d002      	beq.n	8012460 <f_write+0x4a>
 801245a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801245e:	e16a      	b.n	8012736 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	7d1b      	ldrb	r3, [r3, #20]
 8012464:	f003 0302 	and.w	r3, r3, #2
 8012468:	2b00      	cmp	r3, #0
 801246a:	d101      	bne.n	8012470 <f_write+0x5a>
 801246c:	2307      	movs	r3, #7
 801246e:	e162      	b.n	8012736 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	699a      	ldr	r2, [r3, #24]
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	441a      	add	r2, r3
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	699b      	ldr	r3, [r3, #24]
 801247c:	429a      	cmp	r2, r3
 801247e:	f080 814c 	bcs.w	801271a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	699b      	ldr	r3, [r3, #24]
 8012486:	43db      	mvns	r3, r3
 8012488:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801248a:	e146      	b.n	801271a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	699b      	ldr	r3, [r3, #24]
 8012490:	693a      	ldr	r2, [r7, #16]
 8012492:	8992      	ldrh	r2, [r2, #12]
 8012494:	fbb3 f1f2 	udiv	r1, r3, r2
 8012498:	fb02 f201 	mul.w	r2, r2, r1
 801249c:	1a9b      	subs	r3, r3, r2
 801249e:	2b00      	cmp	r3, #0
 80124a0:	f040 80f1 	bne.w	8012686 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	699b      	ldr	r3, [r3, #24]
 80124a8:	693a      	ldr	r2, [r7, #16]
 80124aa:	8992      	ldrh	r2, [r2, #12]
 80124ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80124b0:	693a      	ldr	r2, [r7, #16]
 80124b2:	8952      	ldrh	r2, [r2, #10]
 80124b4:	3a01      	subs	r2, #1
 80124b6:	4013      	ands	r3, r2
 80124b8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80124ba:	69bb      	ldr	r3, [r7, #24]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d143      	bne.n	8012548 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	699b      	ldr	r3, [r3, #24]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d10c      	bne.n	80124e2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	689b      	ldr	r3, [r3, #8]
 80124cc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80124ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d11a      	bne.n	801250a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	2100      	movs	r1, #0
 80124d8:	4618      	mov	r0, r3
 80124da:	f7fe fbbc 	bl	8010c56 <create_chain>
 80124de:	62b8      	str	r0, [r7, #40]	; 0x28
 80124e0:	e013      	b.n	801250a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d007      	beq.n	80124fa <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	699b      	ldr	r3, [r3, #24]
 80124ee:	4619      	mov	r1, r3
 80124f0:	68f8      	ldr	r0, [r7, #12]
 80124f2:	f7fe fc48 	bl	8010d86 <clmt_clust>
 80124f6:	62b8      	str	r0, [r7, #40]	; 0x28
 80124f8:	e007      	b.n	801250a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80124fa:	68fa      	ldr	r2, [r7, #12]
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	69db      	ldr	r3, [r3, #28]
 8012500:	4619      	mov	r1, r3
 8012502:	4610      	mov	r0, r2
 8012504:	f7fe fba7 	bl	8010c56 <create_chain>
 8012508:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801250a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801250c:	2b00      	cmp	r3, #0
 801250e:	f000 8109 	beq.w	8012724 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012514:	2b01      	cmp	r3, #1
 8012516:	d104      	bne.n	8012522 <f_write+0x10c>
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	2202      	movs	r2, #2
 801251c:	755a      	strb	r2, [r3, #21]
 801251e:	2302      	movs	r3, #2
 8012520:	e109      	b.n	8012736 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012528:	d104      	bne.n	8012534 <f_write+0x11e>
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	2201      	movs	r2, #1
 801252e:	755a      	strb	r2, [r3, #21]
 8012530:	2301      	movs	r3, #1
 8012532:	e100      	b.n	8012736 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012538:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	689b      	ldr	r3, [r3, #8]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d102      	bne.n	8012548 <f_write+0x132>
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012546:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	7d1b      	ldrb	r3, [r3, #20]
 801254c:	b25b      	sxtb	r3, r3
 801254e:	2b00      	cmp	r3, #0
 8012550:	da18      	bge.n	8012584 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012552:	693b      	ldr	r3, [r7, #16]
 8012554:	7858      	ldrb	r0, [r3, #1]
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	6a1a      	ldr	r2, [r3, #32]
 8012560:	2301      	movs	r3, #1
 8012562:	f7fd fd81 	bl	8010068 <disk_write>
 8012566:	4603      	mov	r3, r0
 8012568:	2b00      	cmp	r3, #0
 801256a:	d004      	beq.n	8012576 <f_write+0x160>
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	2201      	movs	r2, #1
 8012570:	755a      	strb	r2, [r3, #21]
 8012572:	2301      	movs	r3, #1
 8012574:	e0df      	b.n	8012736 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	7d1b      	ldrb	r3, [r3, #20]
 801257a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801257e:	b2da      	uxtb	r2, r3
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012584:	693a      	ldr	r2, [r7, #16]
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	69db      	ldr	r3, [r3, #28]
 801258a:	4619      	mov	r1, r3
 801258c:	4610      	mov	r0, r2
 801258e:	f7fe f8f7 	bl	8010780 <clust2sect>
 8012592:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012594:	697b      	ldr	r3, [r7, #20]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d104      	bne.n	80125a4 <f_write+0x18e>
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	2202      	movs	r2, #2
 801259e:	755a      	strb	r2, [r3, #21]
 80125a0:	2302      	movs	r3, #2
 80125a2:	e0c8      	b.n	8012736 <f_write+0x320>
			sect += csect;
 80125a4:	697a      	ldr	r2, [r7, #20]
 80125a6:	69bb      	ldr	r3, [r7, #24]
 80125a8:	4413      	add	r3, r2
 80125aa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80125ac:	693b      	ldr	r3, [r7, #16]
 80125ae:	899b      	ldrh	r3, [r3, #12]
 80125b0:	461a      	mov	r2, r3
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80125b8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80125ba:	6a3b      	ldr	r3, [r7, #32]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d043      	beq.n	8012648 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80125c0:	69ba      	ldr	r2, [r7, #24]
 80125c2:	6a3b      	ldr	r3, [r7, #32]
 80125c4:	4413      	add	r3, r2
 80125c6:	693a      	ldr	r2, [r7, #16]
 80125c8:	8952      	ldrh	r2, [r2, #10]
 80125ca:	4293      	cmp	r3, r2
 80125cc:	d905      	bls.n	80125da <f_write+0x1c4>
					cc = fs->csize - csect;
 80125ce:	693b      	ldr	r3, [r7, #16]
 80125d0:	895b      	ldrh	r3, [r3, #10]
 80125d2:	461a      	mov	r2, r3
 80125d4:	69bb      	ldr	r3, [r7, #24]
 80125d6:	1ad3      	subs	r3, r2, r3
 80125d8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80125da:	693b      	ldr	r3, [r7, #16]
 80125dc:	7858      	ldrb	r0, [r3, #1]
 80125de:	6a3b      	ldr	r3, [r7, #32]
 80125e0:	697a      	ldr	r2, [r7, #20]
 80125e2:	69f9      	ldr	r1, [r7, #28]
 80125e4:	f7fd fd40 	bl	8010068 <disk_write>
 80125e8:	4603      	mov	r3, r0
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d004      	beq.n	80125f8 <f_write+0x1e2>
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	2201      	movs	r2, #1
 80125f2:	755a      	strb	r2, [r3, #21]
 80125f4:	2301      	movs	r3, #1
 80125f6:	e09e      	b.n	8012736 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	6a1a      	ldr	r2, [r3, #32]
 80125fc:	697b      	ldr	r3, [r7, #20]
 80125fe:	1ad3      	subs	r3, r2, r3
 8012600:	6a3a      	ldr	r2, [r7, #32]
 8012602:	429a      	cmp	r2, r3
 8012604:	d918      	bls.n	8012638 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	6a1a      	ldr	r2, [r3, #32]
 8012610:	697b      	ldr	r3, [r7, #20]
 8012612:	1ad3      	subs	r3, r2, r3
 8012614:	693a      	ldr	r2, [r7, #16]
 8012616:	8992      	ldrh	r2, [r2, #12]
 8012618:	fb02 f303 	mul.w	r3, r2, r3
 801261c:	69fa      	ldr	r2, [r7, #28]
 801261e:	18d1      	adds	r1, r2, r3
 8012620:	693b      	ldr	r3, [r7, #16]
 8012622:	899b      	ldrh	r3, [r3, #12]
 8012624:	461a      	mov	r2, r3
 8012626:	f7fd fddf 	bl	80101e8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	7d1b      	ldrb	r3, [r3, #20]
 801262e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012632:	b2da      	uxtb	r2, r3
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012638:	693b      	ldr	r3, [r7, #16]
 801263a:	899b      	ldrh	r3, [r3, #12]
 801263c:	461a      	mov	r2, r3
 801263e:	6a3b      	ldr	r3, [r7, #32]
 8012640:	fb02 f303 	mul.w	r3, r2, r3
 8012644:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8012646:	e04b      	b.n	80126e0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	6a1b      	ldr	r3, [r3, #32]
 801264c:	697a      	ldr	r2, [r7, #20]
 801264e:	429a      	cmp	r2, r3
 8012650:	d016      	beq.n	8012680 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	699a      	ldr	r2, [r3, #24]
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801265a:	429a      	cmp	r2, r3
 801265c:	d210      	bcs.n	8012680 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801265e:	693b      	ldr	r3, [r7, #16]
 8012660:	7858      	ldrb	r0, [r3, #1]
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012668:	2301      	movs	r3, #1
 801266a:	697a      	ldr	r2, [r7, #20]
 801266c:	f7fd fcdc 	bl	8010028 <disk_read>
 8012670:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8012672:	2b00      	cmp	r3, #0
 8012674:	d004      	beq.n	8012680 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	2201      	movs	r2, #1
 801267a:	755a      	strb	r2, [r3, #21]
 801267c:	2301      	movs	r3, #1
 801267e:	e05a      	b.n	8012736 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	697a      	ldr	r2, [r7, #20]
 8012684:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012686:	693b      	ldr	r3, [r7, #16]
 8012688:	899b      	ldrh	r3, [r3, #12]
 801268a:	4618      	mov	r0, r3
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	699b      	ldr	r3, [r3, #24]
 8012690:	693a      	ldr	r2, [r7, #16]
 8012692:	8992      	ldrh	r2, [r2, #12]
 8012694:	fbb3 f1f2 	udiv	r1, r3, r2
 8012698:	fb02 f201 	mul.w	r2, r2, r1
 801269c:	1a9b      	subs	r3, r3, r2
 801269e:	1ac3      	subs	r3, r0, r3
 80126a0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80126a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	429a      	cmp	r2, r3
 80126a8:	d901      	bls.n	80126ae <f_write+0x298>
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	699b      	ldr	r3, [r3, #24]
 80126b8:	693a      	ldr	r2, [r7, #16]
 80126ba:	8992      	ldrh	r2, [r2, #12]
 80126bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80126c0:	fb02 f200 	mul.w	r2, r2, r0
 80126c4:	1a9b      	subs	r3, r3, r2
 80126c6:	440b      	add	r3, r1
 80126c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126ca:	69f9      	ldr	r1, [r7, #28]
 80126cc:	4618      	mov	r0, r3
 80126ce:	f7fd fd8b 	bl	80101e8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	7d1b      	ldrb	r3, [r3, #20]
 80126d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80126da:	b2da      	uxtb	r2, r3
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80126e0:	69fa      	ldr	r2, [r7, #28]
 80126e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e4:	4413      	add	r3, r2
 80126e6:	61fb      	str	r3, [r7, #28]
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	699a      	ldr	r2, [r3, #24]
 80126ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ee:	441a      	add	r2, r3
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	619a      	str	r2, [r3, #24]
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	68da      	ldr	r2, [r3, #12]
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	699b      	ldr	r3, [r3, #24]
 80126fc:	429a      	cmp	r2, r3
 80126fe:	bf38      	it	cc
 8012700:	461a      	movcc	r2, r3
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	60da      	str	r2, [r3, #12]
 8012706:	683b      	ldr	r3, [r7, #0]
 8012708:	681a      	ldr	r2, [r3, #0]
 801270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801270c:	441a      	add	r2, r3
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	601a      	str	r2, [r3, #0]
 8012712:	687a      	ldr	r2, [r7, #4]
 8012714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012716:	1ad3      	subs	r3, r2, r3
 8012718:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2b00      	cmp	r3, #0
 801271e:	f47f aeb5 	bne.w	801248c <f_write+0x76>
 8012722:	e000      	b.n	8012726 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012724:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	7d1b      	ldrb	r3, [r3, #20]
 801272a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801272e:	b2da      	uxtb	r2, r3
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8012734:	2300      	movs	r3, #0
}
 8012736:	4618      	mov	r0, r3
 8012738:	3730      	adds	r7, #48	; 0x30
 801273a:	46bd      	mov	sp, r7
 801273c:	bd80      	pop	{r7, pc}
	...

08012740 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012740:	b580      	push	{r7, lr}
 8012742:	b086      	sub	sp, #24
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	f107 0208 	add.w	r2, r7, #8
 801274e:	4611      	mov	r1, r2
 8012750:	4618      	mov	r0, r3
 8012752:	f7ff fab7 	bl	8011cc4 <validate>
 8012756:	4603      	mov	r3, r0
 8012758:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801275a:	7dfb      	ldrb	r3, [r7, #23]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d167      	bne.n	8012830 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	7d1b      	ldrb	r3, [r3, #20]
 8012764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012768:	2b00      	cmp	r3, #0
 801276a:	d061      	beq.n	8012830 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	7d1b      	ldrb	r3, [r3, #20]
 8012770:	b25b      	sxtb	r3, r3
 8012772:	2b00      	cmp	r3, #0
 8012774:	da15      	bge.n	80127a2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012776:	68bb      	ldr	r3, [r7, #8]
 8012778:	7858      	ldrb	r0, [r3, #1]
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	6a1a      	ldr	r2, [r3, #32]
 8012784:	2301      	movs	r3, #1
 8012786:	f7fd fc6f 	bl	8010068 <disk_write>
 801278a:	4603      	mov	r3, r0
 801278c:	2b00      	cmp	r3, #0
 801278e:	d001      	beq.n	8012794 <f_sync+0x54>
 8012790:	2301      	movs	r3, #1
 8012792:	e04e      	b.n	8012832 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	7d1b      	ldrb	r3, [r3, #20]
 8012798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801279c:	b2da      	uxtb	r2, r3
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80127a2:	4b26      	ldr	r3, [pc, #152]	; (801283c <f_sync+0xfc>)
 80127a4:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80127a6:	68ba      	ldr	r2, [r7, #8]
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127ac:	4619      	mov	r1, r3
 80127ae:	4610      	mov	r0, r2
 80127b0:	f7fd ff48 	bl	8010644 <move_window>
 80127b4:	4603      	mov	r3, r0
 80127b6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80127b8:	7dfb      	ldrb	r3, [r7, #23]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d138      	bne.n	8012830 <f_sync+0xf0>
					dir = fp->dir_ptr;
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127c2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	330b      	adds	r3, #11
 80127c8:	781a      	ldrb	r2, [r3, #0]
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	330b      	adds	r3, #11
 80127ce:	f042 0220 	orr.w	r2, r2, #32
 80127d2:	b2d2      	uxtb	r2, r2
 80127d4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	6818      	ldr	r0, [r3, #0]
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	689b      	ldr	r3, [r3, #8]
 80127de:	461a      	mov	r2, r3
 80127e0:	68f9      	ldr	r1, [r7, #12]
 80127e2:	f7fe fccd 	bl	8011180 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	f103 021c 	add.w	r2, r3, #28
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	68db      	ldr	r3, [r3, #12]
 80127f0:	4619      	mov	r1, r3
 80127f2:	4610      	mov	r0, r2
 80127f4:	f7fd fccc 	bl	8010190 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	3316      	adds	r3, #22
 80127fc:	6939      	ldr	r1, [r7, #16]
 80127fe:	4618      	mov	r0, r3
 8012800:	f7fd fcc6 	bl	8010190 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	3312      	adds	r3, #18
 8012808:	2100      	movs	r1, #0
 801280a:	4618      	mov	r0, r3
 801280c:	f7fd fca5 	bl	801015a <st_word>
					fs->wflag = 1;
 8012810:	68bb      	ldr	r3, [r7, #8]
 8012812:	2201      	movs	r2, #1
 8012814:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012816:	68bb      	ldr	r3, [r7, #8]
 8012818:	4618      	mov	r0, r3
 801281a:	f7fd ff41 	bl	80106a0 <sync_fs>
 801281e:	4603      	mov	r3, r0
 8012820:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	7d1b      	ldrb	r3, [r3, #20]
 8012826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801282a:	b2da      	uxtb	r2, r3
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012830:	7dfb      	ldrb	r3, [r7, #23]
}
 8012832:	4618      	mov	r0, r3
 8012834:	3718      	adds	r7, #24
 8012836:	46bd      	mov	sp, r7
 8012838:	bd80      	pop	{r7, pc}
 801283a:	bf00      	nop
 801283c:	274a0000 	.word	0x274a0000

08012840 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b084      	sub	sp, #16
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012848:	6878      	ldr	r0, [r7, #4]
 801284a:	f7ff ff79 	bl	8012740 <f_sync>
 801284e:	4603      	mov	r3, r0
 8012850:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012852:	7bfb      	ldrb	r3, [r7, #15]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d118      	bne.n	801288a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	f107 0208 	add.w	r2, r7, #8
 801285e:	4611      	mov	r1, r2
 8012860:	4618      	mov	r0, r3
 8012862:	f7ff fa2f 	bl	8011cc4 <validate>
 8012866:	4603      	mov	r3, r0
 8012868:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801286a:	7bfb      	ldrb	r3, [r7, #15]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d10c      	bne.n	801288a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	691b      	ldr	r3, [r3, #16]
 8012874:	4618      	mov	r0, r3
 8012876:	f7fd fe41 	bl	80104fc <dec_lock>
 801287a:	4603      	mov	r3, r0
 801287c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801287e:	7bfb      	ldrb	r3, [r7, #15]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d102      	bne.n	801288a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2200      	movs	r2, #0
 8012888:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801288a:	7bfb      	ldrb	r3, [r7, #15]
}
 801288c:	4618      	mov	r0, r3
 801288e:	3710      	adds	r7, #16
 8012890:	46bd      	mov	sp, r7
 8012892:	bd80      	pop	{r7, pc}

08012894 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8012894:	b590      	push	{r4, r7, lr}
 8012896:	b091      	sub	sp, #68	; 0x44
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801289c:	f107 0108 	add.w	r1, r7, #8
 80128a0:	1d3b      	adds	r3, r7, #4
 80128a2:	2200      	movs	r2, #0
 80128a4:	4618      	mov	r0, r3
 80128a6:	f7fe ff87 	bl	80117b8 <find_volume>
 80128aa:	4603      	mov	r3, r0
 80128ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80128b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d131      	bne.n	801291c <f_chdir+0x88>
		dj.obj.fs = fs;
 80128b8:	68bb      	ldr	r3, [r7, #8]
 80128ba:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 80128bc:	687a      	ldr	r2, [r7, #4]
 80128be:	f107 030c 	add.w	r3, r7, #12
 80128c2:	4611      	mov	r1, r2
 80128c4:	4618      	mov	r0, r3
 80128c6:	f7fe fe47 	bl	8011558 <follow_path>
 80128ca:	4603      	mov	r3, r0
 80128cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 80128d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d11a      	bne.n	801290e <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80128d8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80128dc:	b25b      	sxtb	r3, r3
 80128de:	2b00      	cmp	r3, #0
 80128e0:	da03      	bge.n	80128ea <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 80128e2:	68bb      	ldr	r3, [r7, #8]
 80128e4:	697a      	ldr	r2, [r7, #20]
 80128e6:	619a      	str	r2, [r3, #24]
 80128e8:	e011      	b.n	801290e <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80128ea:	7cbb      	ldrb	r3, [r7, #18]
 80128ec:	f003 0310 	and.w	r3, r3, #16
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d009      	beq.n	8012908 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80128f4:	68bb      	ldr	r3, [r7, #8]
 80128f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80128f8:	68bc      	ldr	r4, [r7, #8]
 80128fa:	4611      	mov	r1, r2
 80128fc:	4618      	mov	r0, r3
 80128fe:	f7fe fc20 	bl	8011142 <ld_clust>
 8012902:	4603      	mov	r3, r0
 8012904:	61a3      	str	r3, [r4, #24]
 8012906:	e002      	b.n	801290e <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8012908:	2305      	movs	r3, #5
 801290a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801290e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012912:	2b04      	cmp	r3, #4
 8012914:	d102      	bne.n	801291c <f_chdir+0x88>
 8012916:	2305      	movs	r3, #5
 8012918:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 801291c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012920:	4618      	mov	r0, r3
 8012922:	3744      	adds	r7, #68	; 0x44
 8012924:	46bd      	mov	sp, r7
 8012926:	bd90      	pop	{r4, r7, pc}

08012928 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b090      	sub	sp, #64	; 0x40
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
 8012930:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	f107 0208 	add.w	r2, r7, #8
 8012938:	4611      	mov	r1, r2
 801293a:	4618      	mov	r0, r3
 801293c:	f7ff f9c2 	bl	8011cc4 <validate>
 8012940:	4603      	mov	r3, r0
 8012942:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8012946:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801294a:	2b00      	cmp	r3, #0
 801294c:	d103      	bne.n	8012956 <f_lseek+0x2e>
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	7d5b      	ldrb	r3, [r3, #21]
 8012952:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8012956:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801295a:	2b00      	cmp	r3, #0
 801295c:	d002      	beq.n	8012964 <f_lseek+0x3c>
 801295e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012962:	e201      	b.n	8012d68 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012968:	2b00      	cmp	r3, #0
 801296a:	f000 80d9 	beq.w	8012b20 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801296e:	683b      	ldr	r3, [r7, #0]
 8012970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012974:	d15a      	bne.n	8012a2c <f_lseek+0x104>
			tbl = fp->cltbl;
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801297a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801297e:	1d1a      	adds	r2, r3, #4
 8012980:	627a      	str	r2, [r7, #36]	; 0x24
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	617b      	str	r3, [r7, #20]
 8012986:	2302      	movs	r3, #2
 8012988:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	689b      	ldr	r3, [r3, #8]
 801298e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8012990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012992:	2b00      	cmp	r3, #0
 8012994:	d03a      	beq.n	8012a0c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8012996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012998:	613b      	str	r3, [r7, #16]
 801299a:	2300      	movs	r3, #0
 801299c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801299e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129a0:	3302      	adds	r3, #2
 80129a2:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80129a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129a6:	60fb      	str	r3, [r7, #12]
 80129a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129aa:	3301      	adds	r3, #1
 80129ac:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80129b2:	4618      	mov	r0, r3
 80129b4:	f7fd ff03 	bl	80107be <get_fat>
 80129b8:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80129ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129bc:	2b01      	cmp	r3, #1
 80129be:	d804      	bhi.n	80129ca <f_lseek+0xa2>
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	2202      	movs	r2, #2
 80129c4:	755a      	strb	r2, [r3, #21]
 80129c6:	2302      	movs	r3, #2
 80129c8:	e1ce      	b.n	8012d68 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80129ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129d0:	d104      	bne.n	80129dc <f_lseek+0xb4>
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	2201      	movs	r2, #1
 80129d6:	755a      	strb	r2, [r3, #21]
 80129d8:	2301      	movs	r3, #1
 80129da:	e1c5      	b.n	8012d68 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	3301      	adds	r3, #1
 80129e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129e2:	429a      	cmp	r2, r3
 80129e4:	d0de      	beq.n	80129a4 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80129e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80129e8:	697b      	ldr	r3, [r7, #20]
 80129ea:	429a      	cmp	r2, r3
 80129ec:	d809      	bhi.n	8012a02 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80129ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f0:	1d1a      	adds	r2, r3, #4
 80129f2:	627a      	str	r2, [r7, #36]	; 0x24
 80129f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129f6:	601a      	str	r2, [r3, #0]
 80129f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129fa:	1d1a      	adds	r2, r3, #4
 80129fc:	627a      	str	r2, [r7, #36]	; 0x24
 80129fe:	693a      	ldr	r2, [r7, #16]
 8012a00:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8012a02:	68bb      	ldr	r3, [r7, #8]
 8012a04:	69db      	ldr	r3, [r3, #28]
 8012a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a08:	429a      	cmp	r2, r3
 8012a0a:	d3c4      	bcc.n	8012996 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a12:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8012a14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a16:	697b      	ldr	r3, [r7, #20]
 8012a18:	429a      	cmp	r2, r3
 8012a1a:	d803      	bhi.n	8012a24 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8012a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a1e:	2200      	movs	r2, #0
 8012a20:	601a      	str	r2, [r3, #0]
 8012a22:	e19f      	b.n	8012d64 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8012a24:	2311      	movs	r3, #17
 8012a26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012a2a:	e19b      	b.n	8012d64 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	68db      	ldr	r3, [r3, #12]
 8012a30:	683a      	ldr	r2, [r7, #0]
 8012a32:	429a      	cmp	r2, r3
 8012a34:	d902      	bls.n	8012a3c <f_lseek+0x114>
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	68db      	ldr	r3, [r3, #12]
 8012a3a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	683a      	ldr	r2, [r7, #0]
 8012a40:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8012a42:	683b      	ldr	r3, [r7, #0]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	f000 818d 	beq.w	8012d64 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8012a4a:	683b      	ldr	r3, [r7, #0]
 8012a4c:	3b01      	subs	r3, #1
 8012a4e:	4619      	mov	r1, r3
 8012a50:	6878      	ldr	r0, [r7, #4]
 8012a52:	f7fe f998 	bl	8010d86 <clmt_clust>
 8012a56:	4602      	mov	r2, r0
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8012a5c:	68ba      	ldr	r2, [r7, #8]
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	69db      	ldr	r3, [r3, #28]
 8012a62:	4619      	mov	r1, r3
 8012a64:	4610      	mov	r0, r2
 8012a66:	f7fd fe8b 	bl	8010780 <clust2sect>
 8012a6a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8012a6c:	69bb      	ldr	r3, [r7, #24]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d104      	bne.n	8012a7c <f_lseek+0x154>
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	2202      	movs	r2, #2
 8012a76:	755a      	strb	r2, [r3, #21]
 8012a78:	2302      	movs	r3, #2
 8012a7a:	e175      	b.n	8012d68 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8012a7c:	683b      	ldr	r3, [r7, #0]
 8012a7e:	3b01      	subs	r3, #1
 8012a80:	68ba      	ldr	r2, [r7, #8]
 8012a82:	8992      	ldrh	r2, [r2, #12]
 8012a84:	fbb3 f3f2 	udiv	r3, r3, r2
 8012a88:	68ba      	ldr	r2, [r7, #8]
 8012a8a:	8952      	ldrh	r2, [r2, #10]
 8012a8c:	3a01      	subs	r2, #1
 8012a8e:	4013      	ands	r3, r2
 8012a90:	69ba      	ldr	r2, [r7, #24]
 8012a92:	4413      	add	r3, r2
 8012a94:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	699b      	ldr	r3, [r3, #24]
 8012a9a:	68ba      	ldr	r2, [r7, #8]
 8012a9c:	8992      	ldrh	r2, [r2, #12]
 8012a9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012aa2:	fb02 f201 	mul.w	r2, r2, r1
 8012aa6:	1a9b      	subs	r3, r3, r2
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	f000 815b 	beq.w	8012d64 <f_lseek+0x43c>
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	6a1b      	ldr	r3, [r3, #32]
 8012ab2:	69ba      	ldr	r2, [r7, #24]
 8012ab4:	429a      	cmp	r2, r3
 8012ab6:	f000 8155 	beq.w	8012d64 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	7d1b      	ldrb	r3, [r3, #20]
 8012abe:	b25b      	sxtb	r3, r3
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	da18      	bge.n	8012af6 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012ac4:	68bb      	ldr	r3, [r7, #8]
 8012ac6:	7858      	ldrb	r0, [r3, #1]
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	6a1a      	ldr	r2, [r3, #32]
 8012ad2:	2301      	movs	r3, #1
 8012ad4:	f7fd fac8 	bl	8010068 <disk_write>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d004      	beq.n	8012ae8 <f_lseek+0x1c0>
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	2201      	movs	r2, #1
 8012ae2:	755a      	strb	r2, [r3, #21]
 8012ae4:	2301      	movs	r3, #1
 8012ae6:	e13f      	b.n	8012d68 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	7d1b      	ldrb	r3, [r3, #20]
 8012aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012af0:	b2da      	uxtb	r2, r3
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8012af6:	68bb      	ldr	r3, [r7, #8]
 8012af8:	7858      	ldrb	r0, [r3, #1]
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012b00:	2301      	movs	r3, #1
 8012b02:	69ba      	ldr	r2, [r7, #24]
 8012b04:	f7fd fa90 	bl	8010028 <disk_read>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d004      	beq.n	8012b18 <f_lseek+0x1f0>
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	2201      	movs	r2, #1
 8012b12:	755a      	strb	r2, [r3, #21]
 8012b14:	2301      	movs	r3, #1
 8012b16:	e127      	b.n	8012d68 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	69ba      	ldr	r2, [r7, #24]
 8012b1c:	621a      	str	r2, [r3, #32]
 8012b1e:	e121      	b.n	8012d64 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	68db      	ldr	r3, [r3, #12]
 8012b24:	683a      	ldr	r2, [r7, #0]
 8012b26:	429a      	cmp	r2, r3
 8012b28:	d908      	bls.n	8012b3c <f_lseek+0x214>
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	7d1b      	ldrb	r3, [r3, #20]
 8012b2e:	f003 0302 	and.w	r3, r3, #2
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d102      	bne.n	8012b3c <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	68db      	ldr	r3, [r3, #12]
 8012b3a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	699b      	ldr	r3, [r3, #24]
 8012b40:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8012b42:	2300      	movs	r3, #0
 8012b44:	637b      	str	r3, [r7, #52]	; 0x34
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b4a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8012b4c:	683b      	ldr	r3, [r7, #0]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	f000 80b5 	beq.w	8012cbe <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8012b54:	68bb      	ldr	r3, [r7, #8]
 8012b56:	895b      	ldrh	r3, [r3, #10]
 8012b58:	461a      	mov	r2, r3
 8012b5a:	68bb      	ldr	r3, [r7, #8]
 8012b5c:	899b      	ldrh	r3, [r3, #12]
 8012b5e:	fb03 f302 	mul.w	r3, r3, r2
 8012b62:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8012b64:	6a3b      	ldr	r3, [r7, #32]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d01b      	beq.n	8012ba2 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8012b6a:	683b      	ldr	r3, [r7, #0]
 8012b6c:	1e5a      	subs	r2, r3, #1
 8012b6e:	69fb      	ldr	r3, [r7, #28]
 8012b70:	fbb2 f2f3 	udiv	r2, r2, r3
 8012b74:	6a3b      	ldr	r3, [r7, #32]
 8012b76:	1e59      	subs	r1, r3, #1
 8012b78:	69fb      	ldr	r3, [r7, #28]
 8012b7a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8012b7e:	429a      	cmp	r2, r3
 8012b80:	d30f      	bcc.n	8012ba2 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8012b82:	6a3b      	ldr	r3, [r7, #32]
 8012b84:	1e5a      	subs	r2, r3, #1
 8012b86:	69fb      	ldr	r3, [r7, #28]
 8012b88:	425b      	negs	r3, r3
 8012b8a:	401a      	ands	r2, r3
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	699b      	ldr	r3, [r3, #24]
 8012b94:	683a      	ldr	r2, [r7, #0]
 8012b96:	1ad3      	subs	r3, r2, r3
 8012b98:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	69db      	ldr	r3, [r3, #28]
 8012b9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012ba0:	e022      	b.n	8012be8 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	689b      	ldr	r3, [r3, #8]
 8012ba6:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8012ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d119      	bne.n	8012be2 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	2100      	movs	r1, #0
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	f7fe f84f 	bl	8010c56 <create_chain>
 8012bb8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bbc:	2b01      	cmp	r3, #1
 8012bbe:	d104      	bne.n	8012bca <f_lseek+0x2a2>
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	2202      	movs	r2, #2
 8012bc4:	755a      	strb	r2, [r3, #21]
 8012bc6:	2302      	movs	r3, #2
 8012bc8:	e0ce      	b.n	8012d68 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bd0:	d104      	bne.n	8012bdc <f_lseek+0x2b4>
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2201      	movs	r2, #1
 8012bd6:	755a      	strb	r2, [r3, #21]
 8012bd8:	2301      	movs	r3, #1
 8012bda:	e0c5      	b.n	8012d68 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012be0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012be6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8012be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d067      	beq.n	8012cbe <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8012bee:	e03a      	b.n	8012c66 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8012bf0:	683a      	ldr	r2, [r7, #0]
 8012bf2:	69fb      	ldr	r3, [r7, #28]
 8012bf4:	1ad3      	subs	r3, r2, r3
 8012bf6:	603b      	str	r3, [r7, #0]
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	699a      	ldr	r2, [r3, #24]
 8012bfc:	69fb      	ldr	r3, [r7, #28]
 8012bfe:	441a      	add	r2, r3
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	7d1b      	ldrb	r3, [r3, #20]
 8012c08:	f003 0302 	and.w	r3, r3, #2
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d00b      	beq.n	8012c28 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012c14:	4618      	mov	r0, r3
 8012c16:	f7fe f81e 	bl	8010c56 <create_chain>
 8012c1a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8012c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d108      	bne.n	8012c34 <f_lseek+0x30c>
							ofs = 0; break;
 8012c22:	2300      	movs	r3, #0
 8012c24:	603b      	str	r3, [r7, #0]
 8012c26:	e022      	b.n	8012c6e <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f7fd fdc6 	bl	80107be <get_fat>
 8012c32:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c3a:	d104      	bne.n	8012c46 <f_lseek+0x31e>
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	2201      	movs	r2, #1
 8012c40:	755a      	strb	r2, [r3, #21]
 8012c42:	2301      	movs	r3, #1
 8012c44:	e090      	b.n	8012d68 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8012c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c48:	2b01      	cmp	r3, #1
 8012c4a:	d904      	bls.n	8012c56 <f_lseek+0x32e>
 8012c4c:	68bb      	ldr	r3, [r7, #8]
 8012c4e:	69db      	ldr	r3, [r3, #28]
 8012c50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c52:	429a      	cmp	r2, r3
 8012c54:	d304      	bcc.n	8012c60 <f_lseek+0x338>
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	2202      	movs	r2, #2
 8012c5a:	755a      	strb	r2, [r3, #21]
 8012c5c:	2302      	movs	r3, #2
 8012c5e:	e083      	b.n	8012d68 <f_lseek+0x440>
					fp->clust = clst;
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c64:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8012c66:	683a      	ldr	r2, [r7, #0]
 8012c68:	69fb      	ldr	r3, [r7, #28]
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	d8c0      	bhi.n	8012bf0 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	699a      	ldr	r2, [r3, #24]
 8012c72:	683b      	ldr	r3, [r7, #0]
 8012c74:	441a      	add	r2, r3
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8012c7a:	68bb      	ldr	r3, [r7, #8]
 8012c7c:	899b      	ldrh	r3, [r3, #12]
 8012c7e:	461a      	mov	r2, r3
 8012c80:	683b      	ldr	r3, [r7, #0]
 8012c82:	fbb3 f1f2 	udiv	r1, r3, r2
 8012c86:	fb02 f201 	mul.w	r2, r2, r1
 8012c8a:	1a9b      	subs	r3, r3, r2
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d016      	beq.n	8012cbe <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8012c90:	68bb      	ldr	r3, [r7, #8]
 8012c92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012c94:	4618      	mov	r0, r3
 8012c96:	f7fd fd73 	bl	8010780 <clust2sect>
 8012c9a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8012c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d104      	bne.n	8012cac <f_lseek+0x384>
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	2202      	movs	r2, #2
 8012ca6:	755a      	strb	r2, [r3, #21]
 8012ca8:	2302      	movs	r3, #2
 8012caa:	e05d      	b.n	8012d68 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8012cac:	68bb      	ldr	r3, [r7, #8]
 8012cae:	899b      	ldrh	r3, [r3, #12]
 8012cb0:	461a      	mov	r2, r3
 8012cb2:	683b      	ldr	r3, [r7, #0]
 8012cb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8012cb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012cba:	4413      	add	r3, r2
 8012cbc:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	699a      	ldr	r2, [r3, #24]
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	68db      	ldr	r3, [r3, #12]
 8012cc6:	429a      	cmp	r2, r3
 8012cc8:	d90a      	bls.n	8012ce0 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	699a      	ldr	r2, [r3, #24]
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	7d1b      	ldrb	r3, [r3, #20]
 8012cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cda:	b2da      	uxtb	r2, r3
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	699b      	ldr	r3, [r3, #24]
 8012ce4:	68ba      	ldr	r2, [r7, #8]
 8012ce6:	8992      	ldrh	r2, [r2, #12]
 8012ce8:	fbb3 f1f2 	udiv	r1, r3, r2
 8012cec:	fb02 f201 	mul.w	r2, r2, r1
 8012cf0:	1a9b      	subs	r3, r3, r2
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d036      	beq.n	8012d64 <f_lseek+0x43c>
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	6a1b      	ldr	r3, [r3, #32]
 8012cfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012cfc:	429a      	cmp	r2, r3
 8012cfe:	d031      	beq.n	8012d64 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	7d1b      	ldrb	r3, [r3, #20]
 8012d04:	b25b      	sxtb	r3, r3
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	da18      	bge.n	8012d3c <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012d0a:	68bb      	ldr	r3, [r7, #8]
 8012d0c:	7858      	ldrb	r0, [r3, #1]
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	6a1a      	ldr	r2, [r3, #32]
 8012d18:	2301      	movs	r3, #1
 8012d1a:	f7fd f9a5 	bl	8010068 <disk_write>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d004      	beq.n	8012d2e <f_lseek+0x406>
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	2201      	movs	r2, #1
 8012d28:	755a      	strb	r2, [r3, #21]
 8012d2a:	2301      	movs	r3, #1
 8012d2c:	e01c      	b.n	8012d68 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	7d1b      	ldrb	r3, [r3, #20]
 8012d32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012d36:	b2da      	uxtb	r2, r3
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012d3c:	68bb      	ldr	r3, [r7, #8]
 8012d3e:	7858      	ldrb	r0, [r3, #1]
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012d46:	2301      	movs	r3, #1
 8012d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d4a:	f7fd f96d 	bl	8010028 <disk_read>
 8012d4e:	4603      	mov	r3, r0
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d004      	beq.n	8012d5e <f_lseek+0x436>
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	2201      	movs	r2, #1
 8012d58:	755a      	strb	r2, [r3, #21]
 8012d5a:	2301      	movs	r3, #1
 8012d5c:	e004      	b.n	8012d68 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d62:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8012d64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012d68:	4618      	mov	r0, r3
 8012d6a:	3740      	adds	r7, #64	; 0x40
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	bd80      	pop	{r7, pc}

08012d70 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b09e      	sub	sp, #120	; 0x78
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8012d78:	2300      	movs	r3, #0
 8012d7a:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8012d7c:	f107 010c 	add.w	r1, r7, #12
 8012d80:	1d3b      	adds	r3, r7, #4
 8012d82:	2202      	movs	r2, #2
 8012d84:	4618      	mov	r0, r3
 8012d86:	f7fe fd17 	bl	80117b8 <find_volume>
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8012d94:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	f040 80a4 	bne.w	8012ee6 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8012d9e:	687a      	ldr	r2, [r7, #4]
 8012da0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012da4:	4611      	mov	r1, r2
 8012da6:	4618      	mov	r0, r3
 8012da8:	f7fe fbd6 	bl	8011558 <follow_path>
 8012dac:	4603      	mov	r3, r0
 8012dae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8012db2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d108      	bne.n	8012dcc <f_unlink+0x5c>
 8012dba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8012dbe:	f003 0320 	and.w	r3, r3, #32
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d002      	beq.n	8012dcc <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8012dc6:	2306      	movs	r3, #6
 8012dc8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8012dcc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d108      	bne.n	8012de6 <f_unlink+0x76>
 8012dd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012dd8:	2102      	movs	r1, #2
 8012dda:	4618      	mov	r0, r3
 8012ddc:	f7fd fa82 	bl	80102e4 <chk_lock>
 8012de0:	4603      	mov	r3, r0
 8012de2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8012de6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d17b      	bne.n	8012ee6 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8012dee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8012df2:	b25b      	sxtb	r3, r3
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	da03      	bge.n	8012e00 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8012df8:	2306      	movs	r3, #6
 8012dfa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8012dfe:	e008      	b.n	8012e12 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8012e00:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8012e04:	f003 0301 	and.w	r3, r3, #1
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d002      	beq.n	8012e12 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8012e0c:	2307      	movs	r3, #7
 8012e0e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8012e12:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d13d      	bne.n	8012e96 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012e1e:	4611      	mov	r1, r2
 8012e20:	4618      	mov	r0, r3
 8012e22:	f7fe f98e 	bl	8011142 <ld_clust>
 8012e26:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8012e28:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8012e2c:	f003 0310 	and.w	r3, r3, #16
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d030      	beq.n	8012e96 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	699b      	ldr	r3, [r3, #24]
 8012e38:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	d103      	bne.n	8012e46 <f_unlink+0xd6>
						res = FR_DENIED;
 8012e3e:	2307      	movs	r3, #7
 8012e40:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8012e44:	e027      	b.n	8012e96 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8012e4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012e4c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8012e4e:	f107 0310 	add.w	r3, r7, #16
 8012e52:	2100      	movs	r1, #0
 8012e54:	4618      	mov	r0, r3
 8012e56:	f7fd ffce 	bl	8010df6 <dir_sdi>
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8012e60:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d116      	bne.n	8012e96 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8012e68:	f107 0310 	add.w	r3, r7, #16
 8012e6c:	2100      	movs	r1, #0
 8012e6e:	4618      	mov	r0, r3
 8012e70:	f7fe f9a6 	bl	80111c0 <dir_read>
 8012e74:	4603      	mov	r3, r0
 8012e76:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8012e7a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d102      	bne.n	8012e88 <f_unlink+0x118>
 8012e82:	2307      	movs	r3, #7
 8012e84:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8012e88:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012e8c:	2b04      	cmp	r3, #4
 8012e8e:	d102      	bne.n	8012e96 <f_unlink+0x126>
 8012e90:	2300      	movs	r3, #0
 8012e92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8012e96:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d123      	bne.n	8012ee6 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8012e9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	f7fe fa70 	bl	8011388 <dir_remove>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8012eae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d10c      	bne.n	8012ed0 <f_unlink+0x160>
 8012eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d009      	beq.n	8012ed0 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8012ebc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f7fd fe61 	bl	8010b8c <remove_chain>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8012ed0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d106      	bne.n	8012ee6 <f_unlink+0x176>
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	4618      	mov	r0, r3
 8012edc:	f7fd fbe0 	bl	80106a0 <sync_fs>
 8012ee0:	4603      	mov	r3, r0
 8012ee2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8012ee6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8012eea:	4618      	mov	r0, r3
 8012eec:	3778      	adds	r7, #120	; 0x78
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	bd80      	pop	{r7, pc}
	...

08012ef4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b096      	sub	sp, #88	; 0x58
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8012efc:	f107 0108 	add.w	r1, r7, #8
 8012f00:	1d3b      	adds	r3, r7, #4
 8012f02:	2202      	movs	r2, #2
 8012f04:	4618      	mov	r0, r3
 8012f06:	f7fe fc57 	bl	80117b8 <find_volume>
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8012f14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	f040 80fe 	bne.w	801311a <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8012f1e:	687a      	ldr	r2, [r7, #4]
 8012f20:	f107 030c 	add.w	r3, r7, #12
 8012f24:	4611      	mov	r1, r2
 8012f26:	4618      	mov	r0, r3
 8012f28:	f7fe fb16 	bl	8011558 <follow_path>
 8012f2c:	4603      	mov	r3, r0
 8012f2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8012f32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d102      	bne.n	8012f40 <f_mkdir+0x4c>
 8012f3a:	2308      	movs	r3, #8
 8012f3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8012f40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f44:	2b04      	cmp	r3, #4
 8012f46:	d108      	bne.n	8012f5a <f_mkdir+0x66>
 8012f48:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012f4c:	f003 0320 	and.w	r3, r3, #32
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d002      	beq.n	8012f5a <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8012f54:	2306      	movs	r3, #6
 8012f56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8012f5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f5e:	2b04      	cmp	r3, #4
 8012f60:	f040 80db 	bne.w	801311a <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8012f64:	f107 030c 	add.w	r3, r7, #12
 8012f68:	2100      	movs	r1, #0
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f7fd fe73 	bl	8010c56 <create_chain>
 8012f70:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8012f72:	68bb      	ldr	r3, [r7, #8]
 8012f74:	895b      	ldrh	r3, [r3, #10]
 8012f76:	461a      	mov	r2, r3
 8012f78:	68bb      	ldr	r3, [r7, #8]
 8012f7a:	899b      	ldrh	r3, [r3, #12]
 8012f7c:	fb03 f302 	mul.w	r3, r3, r2
 8012f80:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8012f82:	2300      	movs	r3, #0
 8012f84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8012f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d102      	bne.n	8012f94 <f_mkdir+0xa0>
 8012f8e:	2307      	movs	r3, #7
 8012f90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8012f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f96:	2b01      	cmp	r3, #1
 8012f98:	d102      	bne.n	8012fa0 <f_mkdir+0xac>
 8012f9a:	2302      	movs	r3, #2
 8012f9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fa6:	d102      	bne.n	8012fae <f_mkdir+0xba>
 8012fa8:	2301      	movs	r3, #1
 8012faa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8012fae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d106      	bne.n	8012fc4 <f_mkdir+0xd0>
 8012fb6:	68bb      	ldr	r3, [r7, #8]
 8012fb8:	4618      	mov	r0, r3
 8012fba:	f7fd faff 	bl	80105bc <sync_window>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8012fc4:	4b58      	ldr	r3, [pc, #352]	; (8013128 <f_mkdir+0x234>)
 8012fc6:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8012fc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d16c      	bne.n	80130aa <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	f7fd fbd3 	bl	8010780 <clust2sect>
 8012fda:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8012fdc:	68bb      	ldr	r3, [r7, #8]
 8012fde:	3338      	adds	r3, #56	; 0x38
 8012fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8012fe2:	68bb      	ldr	r3, [r7, #8]
 8012fe4:	899b      	ldrh	r3, [r3, #12]
 8012fe6:	461a      	mov	r2, r3
 8012fe8:	2100      	movs	r1, #0
 8012fea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012fec:	f7fd f91d 	bl	801022a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8012ff0:	220b      	movs	r2, #11
 8012ff2:	2120      	movs	r1, #32
 8012ff4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012ff6:	f7fd f918 	bl	801022a <mem_set>
					dir[DIR_Name] = '.';
 8012ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ffc:	222e      	movs	r2, #46	; 0x2e
 8012ffe:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013002:	330b      	adds	r3, #11
 8013004:	2210      	movs	r2, #16
 8013006:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801300a:	3316      	adds	r3, #22
 801300c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801300e:	4618      	mov	r0, r3
 8013010:	f7fd f8be 	bl	8010190 <st_dword>
					st_clust(fs, dir, dcl);
 8013014:	68bb      	ldr	r3, [r7, #8]
 8013016:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013018:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801301a:	4618      	mov	r0, r3
 801301c:	f7fe f8b0 	bl	8011180 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013022:	3320      	adds	r3, #32
 8013024:	2220      	movs	r2, #32
 8013026:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013028:	4618      	mov	r0, r3
 801302a:	f7fd f8dd 	bl	80101e8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801302e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013030:	3321      	adds	r3, #33	; 0x21
 8013032:	222e      	movs	r2, #46	; 0x2e
 8013034:	701a      	strb	r2, [r3, #0]
 8013036:	697b      	ldr	r3, [r7, #20]
 8013038:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801303a:	68bb      	ldr	r3, [r7, #8]
 801303c:	781b      	ldrb	r3, [r3, #0]
 801303e:	2b03      	cmp	r3, #3
 8013040:	d106      	bne.n	8013050 <f_mkdir+0x15c>
 8013042:	68bb      	ldr	r3, [r7, #8]
 8013044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013046:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013048:	429a      	cmp	r2, r3
 801304a:	d101      	bne.n	8013050 <f_mkdir+0x15c>
 801304c:	2300      	movs	r3, #0
 801304e:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8013050:	68b8      	ldr	r0, [r7, #8]
 8013052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013054:	3320      	adds	r3, #32
 8013056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013058:	4619      	mov	r1, r3
 801305a:	f7fe f891 	bl	8011180 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801305e:	68bb      	ldr	r3, [r7, #8]
 8013060:	895b      	ldrh	r3, [r3, #10]
 8013062:	653b      	str	r3, [r7, #80]	; 0x50
 8013064:	e01c      	b.n	80130a0 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8013066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013068:	1c5a      	adds	r2, r3, #1
 801306a:	64fa      	str	r2, [r7, #76]	; 0x4c
 801306c:	68ba      	ldr	r2, [r7, #8]
 801306e:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8013070:	68bb      	ldr	r3, [r7, #8]
 8013072:	2201      	movs	r2, #1
 8013074:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8013076:	68bb      	ldr	r3, [r7, #8]
 8013078:	4618      	mov	r0, r3
 801307a:	f7fd fa9f 	bl	80105bc <sync_window>
 801307e:	4603      	mov	r3, r0
 8013080:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8013084:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013088:	2b00      	cmp	r3, #0
 801308a:	d10d      	bne.n	80130a8 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 801308c:	68bb      	ldr	r3, [r7, #8]
 801308e:	899b      	ldrh	r3, [r3, #12]
 8013090:	461a      	mov	r2, r3
 8013092:	2100      	movs	r1, #0
 8013094:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013096:	f7fd f8c8 	bl	801022a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801309a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801309c:	3b01      	subs	r3, #1
 801309e:	653b      	str	r3, [r7, #80]	; 0x50
 80130a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d1df      	bne.n	8013066 <f_mkdir+0x172>
 80130a6:	e000      	b.n	80130aa <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 80130a8:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80130aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d107      	bne.n	80130c2 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80130b2:	f107 030c 	add.w	r3, r7, #12
 80130b6:	4618      	mov	r0, r3
 80130b8:	f7fe f934 	bl	8011324 <dir_register>
 80130bc:	4603      	mov	r3, r0
 80130be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80130c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d120      	bne.n	801310c <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80130ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130cc:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80130ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130d0:	3316      	adds	r3, #22
 80130d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80130d4:	4618      	mov	r0, r3
 80130d6:	f7fd f85b 	bl	8010190 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80130da:	68bb      	ldr	r3, [r7, #8]
 80130dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80130de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80130e0:	4618      	mov	r0, r3
 80130e2:	f7fe f84d 	bl	8011180 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80130e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130e8:	330b      	adds	r3, #11
 80130ea:	2210      	movs	r2, #16
 80130ec:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80130ee:	68bb      	ldr	r3, [r7, #8]
 80130f0:	2201      	movs	r2, #1
 80130f2:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80130f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d10e      	bne.n	801311a <f_mkdir+0x226>
					res = sync_fs(fs);
 80130fc:	68bb      	ldr	r3, [r7, #8]
 80130fe:	4618      	mov	r0, r3
 8013100:	f7fd face 	bl	80106a0 <sync_fs>
 8013104:	4603      	mov	r3, r0
 8013106:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801310a:	e006      	b.n	801311a <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 801310c:	f107 030c 	add.w	r3, r7, #12
 8013110:	2200      	movs	r2, #0
 8013112:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013114:	4618      	mov	r0, r3
 8013116:	f7fd fd39 	bl	8010b8c <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801311a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801311e:	4618      	mov	r0, r3
 8013120:	3758      	adds	r7, #88	; 0x58
 8013122:	46bd      	mov	sp, r7
 8013124:	bd80      	pop	{r7, pc}
 8013126:	bf00      	nop
 8013128:	274a0000 	.word	0x274a0000

0801312c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 801312c:	b580      	push	{r7, lr}
 801312e:	b088      	sub	sp, #32
 8013130:	af00      	add	r7, sp, #0
 8013132:	60f8      	str	r0, [r7, #12]
 8013134:	60b9      	str	r1, [r7, #8]
 8013136:	607a      	str	r2, [r7, #4]
	int n = 0;
 8013138:	2300      	movs	r3, #0
 801313a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8013140:	e017      	b.n	8013172 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8013142:	f107 0310 	add.w	r3, r7, #16
 8013146:	f107 0114 	add.w	r1, r7, #20
 801314a:	2201      	movs	r2, #1
 801314c:	6878      	ldr	r0, [r7, #4]
 801314e:	f7ff f803 	bl	8012158 <f_read>
		if (rc != 1) break;
 8013152:	693b      	ldr	r3, [r7, #16]
 8013154:	2b01      	cmp	r3, #1
 8013156:	d112      	bne.n	801317e <f_gets+0x52>
		c = s[0];
 8013158:	7d3b      	ldrb	r3, [r7, #20]
 801315a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 801315c:	69bb      	ldr	r3, [r7, #24]
 801315e:	1c5a      	adds	r2, r3, #1
 8013160:	61ba      	str	r2, [r7, #24]
 8013162:	7dfa      	ldrb	r2, [r7, #23]
 8013164:	701a      	strb	r2, [r3, #0]
		n++;
 8013166:	69fb      	ldr	r3, [r7, #28]
 8013168:	3301      	adds	r3, #1
 801316a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 801316c:	7dfb      	ldrb	r3, [r7, #23]
 801316e:	2b0a      	cmp	r3, #10
 8013170:	d007      	beq.n	8013182 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8013172:	68bb      	ldr	r3, [r7, #8]
 8013174:	3b01      	subs	r3, #1
 8013176:	69fa      	ldr	r2, [r7, #28]
 8013178:	429a      	cmp	r2, r3
 801317a:	dbe2      	blt.n	8013142 <f_gets+0x16>
 801317c:	e002      	b.n	8013184 <f_gets+0x58>
		if (rc != 1) break;
 801317e:	bf00      	nop
 8013180:	e000      	b.n	8013184 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8013182:	bf00      	nop
	}
	*p = 0;
 8013184:	69bb      	ldr	r3, [r7, #24]
 8013186:	2200      	movs	r2, #0
 8013188:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801318a:	69fb      	ldr	r3, [r7, #28]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d001      	beq.n	8013194 <f_gets+0x68>
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	e000      	b.n	8013196 <f_gets+0x6a>
 8013194:	2300      	movs	r3, #0
}
 8013196:	4618      	mov	r0, r3
 8013198:	3720      	adds	r7, #32
 801319a:	46bd      	mov	sp, r7
 801319c:	bd80      	pop	{r7, pc}
	...

080131a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80131a0:	b480      	push	{r7}
 80131a2:	b087      	sub	sp, #28
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	60f8      	str	r0, [r7, #12]
 80131a8:	60b9      	str	r1, [r7, #8]
 80131aa:	4613      	mov	r3, r2
 80131ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80131ae:	2301      	movs	r3, #1
 80131b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80131b2:	2300      	movs	r3, #0
 80131b4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80131b6:	4b1f      	ldr	r3, [pc, #124]	; (8013234 <FATFS_LinkDriverEx+0x94>)
 80131b8:	7a5b      	ldrb	r3, [r3, #9]
 80131ba:	b2db      	uxtb	r3, r3
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d131      	bne.n	8013224 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80131c0:	4b1c      	ldr	r3, [pc, #112]	; (8013234 <FATFS_LinkDriverEx+0x94>)
 80131c2:	7a5b      	ldrb	r3, [r3, #9]
 80131c4:	b2db      	uxtb	r3, r3
 80131c6:	461a      	mov	r2, r3
 80131c8:	4b1a      	ldr	r3, [pc, #104]	; (8013234 <FATFS_LinkDriverEx+0x94>)
 80131ca:	2100      	movs	r1, #0
 80131cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80131ce:	4b19      	ldr	r3, [pc, #100]	; (8013234 <FATFS_LinkDriverEx+0x94>)
 80131d0:	7a5b      	ldrb	r3, [r3, #9]
 80131d2:	b2db      	uxtb	r3, r3
 80131d4:	4a17      	ldr	r2, [pc, #92]	; (8013234 <FATFS_LinkDriverEx+0x94>)
 80131d6:	009b      	lsls	r3, r3, #2
 80131d8:	4413      	add	r3, r2
 80131da:	68fa      	ldr	r2, [r7, #12]
 80131dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80131de:	4b15      	ldr	r3, [pc, #84]	; (8013234 <FATFS_LinkDriverEx+0x94>)
 80131e0:	7a5b      	ldrb	r3, [r3, #9]
 80131e2:	b2db      	uxtb	r3, r3
 80131e4:	461a      	mov	r2, r3
 80131e6:	4b13      	ldr	r3, [pc, #76]	; (8013234 <FATFS_LinkDriverEx+0x94>)
 80131e8:	4413      	add	r3, r2
 80131ea:	79fa      	ldrb	r2, [r7, #7]
 80131ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80131ee:	4b11      	ldr	r3, [pc, #68]	; (8013234 <FATFS_LinkDriverEx+0x94>)
 80131f0:	7a5b      	ldrb	r3, [r3, #9]
 80131f2:	b2db      	uxtb	r3, r3
 80131f4:	1c5a      	adds	r2, r3, #1
 80131f6:	b2d1      	uxtb	r1, r2
 80131f8:	4a0e      	ldr	r2, [pc, #56]	; (8013234 <FATFS_LinkDriverEx+0x94>)
 80131fa:	7251      	strb	r1, [r2, #9]
 80131fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80131fe:	7dbb      	ldrb	r3, [r7, #22]
 8013200:	3330      	adds	r3, #48	; 0x30
 8013202:	b2da      	uxtb	r2, r3
 8013204:	68bb      	ldr	r3, [r7, #8]
 8013206:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	3301      	adds	r3, #1
 801320c:	223a      	movs	r2, #58	; 0x3a
 801320e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013210:	68bb      	ldr	r3, [r7, #8]
 8013212:	3302      	adds	r3, #2
 8013214:	222f      	movs	r2, #47	; 0x2f
 8013216:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013218:	68bb      	ldr	r3, [r7, #8]
 801321a:	3303      	adds	r3, #3
 801321c:	2200      	movs	r2, #0
 801321e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013220:	2300      	movs	r3, #0
 8013222:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013224:	7dfb      	ldrb	r3, [r7, #23]
}
 8013226:	4618      	mov	r0, r3
 8013228:	371c      	adds	r7, #28
 801322a:	46bd      	mov	sp, r7
 801322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013230:	4770      	bx	lr
 8013232:	bf00      	nop
 8013234:	2003c4a0 	.word	0x2003c4a0

08013238 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013238:	b580      	push	{r7, lr}
 801323a:	b082      	sub	sp, #8
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
 8013240:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013242:	2200      	movs	r2, #0
 8013244:	6839      	ldr	r1, [r7, #0]
 8013246:	6878      	ldr	r0, [r7, #4]
 8013248:	f7ff ffaa 	bl	80131a0 <FATFS_LinkDriverEx>
 801324c:	4603      	mov	r3, r0
}
 801324e:	4618      	mov	r0, r3
 8013250:	3708      	adds	r7, #8
 8013252:	46bd      	mov	sp, r7
 8013254:	bd80      	pop	{r7, pc}

08013256 <__cxa_guard_acquire>:
 8013256:	6803      	ldr	r3, [r0, #0]
 8013258:	07db      	lsls	r3, r3, #31
 801325a:	d406      	bmi.n	801326a <__cxa_guard_acquire+0x14>
 801325c:	7843      	ldrb	r3, [r0, #1]
 801325e:	b103      	cbz	r3, 8013262 <__cxa_guard_acquire+0xc>
 8013260:	deff      	udf	#255	; 0xff
 8013262:	2301      	movs	r3, #1
 8013264:	7043      	strb	r3, [r0, #1]
 8013266:	4618      	mov	r0, r3
 8013268:	4770      	bx	lr
 801326a:	2000      	movs	r0, #0
 801326c:	4770      	bx	lr

0801326e <__cxa_guard_release>:
 801326e:	2301      	movs	r3, #1
 8013270:	6003      	str	r3, [r0, #0]
 8013272:	4770      	bx	lr
 8013274:	0000      	movs	r0, r0
	...

08013278 <cos>:
 8013278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801327a:	ec51 0b10 	vmov	r0, r1, d0
 801327e:	4a1e      	ldr	r2, [pc, #120]	; (80132f8 <cos+0x80>)
 8013280:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013284:	4293      	cmp	r3, r2
 8013286:	dc06      	bgt.n	8013296 <cos+0x1e>
 8013288:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80132f0 <cos+0x78>
 801328c:	f000 fa74 	bl	8013778 <__kernel_cos>
 8013290:	ec51 0b10 	vmov	r0, r1, d0
 8013294:	e007      	b.n	80132a6 <cos+0x2e>
 8013296:	4a19      	ldr	r2, [pc, #100]	; (80132fc <cos+0x84>)
 8013298:	4293      	cmp	r3, r2
 801329a:	dd09      	ble.n	80132b0 <cos+0x38>
 801329c:	ee10 2a10 	vmov	r2, s0
 80132a0:	460b      	mov	r3, r1
 80132a2:	f7ed f809 	bl	80002b8 <__aeabi_dsub>
 80132a6:	ec41 0b10 	vmov	d0, r0, r1
 80132aa:	b005      	add	sp, #20
 80132ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80132b0:	4668      	mov	r0, sp
 80132b2:	f000 f86d 	bl	8013390 <__ieee754_rem_pio2>
 80132b6:	f000 0003 	and.w	r0, r0, #3
 80132ba:	2801      	cmp	r0, #1
 80132bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80132c0:	ed9d 0b00 	vldr	d0, [sp]
 80132c4:	d007      	beq.n	80132d6 <cos+0x5e>
 80132c6:	2802      	cmp	r0, #2
 80132c8:	d00e      	beq.n	80132e8 <cos+0x70>
 80132ca:	2800      	cmp	r0, #0
 80132cc:	d0de      	beq.n	801328c <cos+0x14>
 80132ce:	2001      	movs	r0, #1
 80132d0:	f000 fe5a 	bl	8013f88 <__kernel_sin>
 80132d4:	e7dc      	b.n	8013290 <cos+0x18>
 80132d6:	f000 fe57 	bl	8013f88 <__kernel_sin>
 80132da:	ec53 2b10 	vmov	r2, r3, d0
 80132de:	ee10 0a10 	vmov	r0, s0
 80132e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80132e6:	e7de      	b.n	80132a6 <cos+0x2e>
 80132e8:	f000 fa46 	bl	8013778 <__kernel_cos>
 80132ec:	e7f5      	b.n	80132da <cos+0x62>
 80132ee:	bf00      	nop
	...
 80132f8:	3fe921fb 	.word	0x3fe921fb
 80132fc:	7fefffff 	.word	0x7fefffff

08013300 <sin>:
 8013300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013302:	ec51 0b10 	vmov	r0, r1, d0
 8013306:	4a20      	ldr	r2, [pc, #128]	; (8013388 <sin+0x88>)
 8013308:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801330c:	4293      	cmp	r3, r2
 801330e:	dc07      	bgt.n	8013320 <sin+0x20>
 8013310:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8013380 <sin+0x80>
 8013314:	2000      	movs	r0, #0
 8013316:	f000 fe37 	bl	8013f88 <__kernel_sin>
 801331a:	ec51 0b10 	vmov	r0, r1, d0
 801331e:	e007      	b.n	8013330 <sin+0x30>
 8013320:	4a1a      	ldr	r2, [pc, #104]	; (801338c <sin+0x8c>)
 8013322:	4293      	cmp	r3, r2
 8013324:	dd09      	ble.n	801333a <sin+0x3a>
 8013326:	ee10 2a10 	vmov	r2, s0
 801332a:	460b      	mov	r3, r1
 801332c:	f7ec ffc4 	bl	80002b8 <__aeabi_dsub>
 8013330:	ec41 0b10 	vmov	d0, r0, r1
 8013334:	b005      	add	sp, #20
 8013336:	f85d fb04 	ldr.w	pc, [sp], #4
 801333a:	4668      	mov	r0, sp
 801333c:	f000 f828 	bl	8013390 <__ieee754_rem_pio2>
 8013340:	f000 0003 	and.w	r0, r0, #3
 8013344:	2801      	cmp	r0, #1
 8013346:	ed9d 1b02 	vldr	d1, [sp, #8]
 801334a:	ed9d 0b00 	vldr	d0, [sp]
 801334e:	d004      	beq.n	801335a <sin+0x5a>
 8013350:	2802      	cmp	r0, #2
 8013352:	d005      	beq.n	8013360 <sin+0x60>
 8013354:	b970      	cbnz	r0, 8013374 <sin+0x74>
 8013356:	2001      	movs	r0, #1
 8013358:	e7dd      	b.n	8013316 <sin+0x16>
 801335a:	f000 fa0d 	bl	8013778 <__kernel_cos>
 801335e:	e7dc      	b.n	801331a <sin+0x1a>
 8013360:	2001      	movs	r0, #1
 8013362:	f000 fe11 	bl	8013f88 <__kernel_sin>
 8013366:	ec53 2b10 	vmov	r2, r3, d0
 801336a:	ee10 0a10 	vmov	r0, s0
 801336e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013372:	e7dd      	b.n	8013330 <sin+0x30>
 8013374:	f000 fa00 	bl	8013778 <__kernel_cos>
 8013378:	e7f5      	b.n	8013366 <sin+0x66>
 801337a:	bf00      	nop
 801337c:	f3af 8000 	nop.w
	...
 8013388:	3fe921fb 	.word	0x3fe921fb
 801338c:	7fefffff 	.word	0x7fefffff

08013390 <__ieee754_rem_pio2>:
 8013390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013394:	ec57 6b10 	vmov	r6, r7, d0
 8013398:	4bc3      	ldr	r3, [pc, #780]	; (80136a8 <__ieee754_rem_pio2+0x318>)
 801339a:	b08d      	sub	sp, #52	; 0x34
 801339c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80133a0:	4598      	cmp	r8, r3
 80133a2:	4604      	mov	r4, r0
 80133a4:	9704      	str	r7, [sp, #16]
 80133a6:	dc07      	bgt.n	80133b8 <__ieee754_rem_pio2+0x28>
 80133a8:	2200      	movs	r2, #0
 80133aa:	2300      	movs	r3, #0
 80133ac:	ed84 0b00 	vstr	d0, [r4]
 80133b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80133b4:	2500      	movs	r5, #0
 80133b6:	e027      	b.n	8013408 <__ieee754_rem_pio2+0x78>
 80133b8:	4bbc      	ldr	r3, [pc, #752]	; (80136ac <__ieee754_rem_pio2+0x31c>)
 80133ba:	4598      	cmp	r8, r3
 80133bc:	dc75      	bgt.n	80134aa <__ieee754_rem_pio2+0x11a>
 80133be:	9b04      	ldr	r3, [sp, #16]
 80133c0:	4dbb      	ldr	r5, [pc, #748]	; (80136b0 <__ieee754_rem_pio2+0x320>)
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	ee10 0a10 	vmov	r0, s0
 80133c8:	a3a9      	add	r3, pc, #676	; (adr r3, 8013670 <__ieee754_rem_pio2+0x2e0>)
 80133ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ce:	4639      	mov	r1, r7
 80133d0:	dd36      	ble.n	8013440 <__ieee754_rem_pio2+0xb0>
 80133d2:	f7ec ff71 	bl	80002b8 <__aeabi_dsub>
 80133d6:	45a8      	cmp	r8, r5
 80133d8:	4606      	mov	r6, r0
 80133da:	460f      	mov	r7, r1
 80133dc:	d018      	beq.n	8013410 <__ieee754_rem_pio2+0x80>
 80133de:	a3a6      	add	r3, pc, #664	; (adr r3, 8013678 <__ieee754_rem_pio2+0x2e8>)
 80133e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133e4:	f7ec ff68 	bl	80002b8 <__aeabi_dsub>
 80133e8:	4602      	mov	r2, r0
 80133ea:	460b      	mov	r3, r1
 80133ec:	e9c4 2300 	strd	r2, r3, [r4]
 80133f0:	4630      	mov	r0, r6
 80133f2:	4639      	mov	r1, r7
 80133f4:	f7ec ff60 	bl	80002b8 <__aeabi_dsub>
 80133f8:	a39f      	add	r3, pc, #636	; (adr r3, 8013678 <__ieee754_rem_pio2+0x2e8>)
 80133fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133fe:	f7ec ff5b 	bl	80002b8 <__aeabi_dsub>
 8013402:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013406:	2501      	movs	r5, #1
 8013408:	4628      	mov	r0, r5
 801340a:	b00d      	add	sp, #52	; 0x34
 801340c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013410:	a39b      	add	r3, pc, #620	; (adr r3, 8013680 <__ieee754_rem_pio2+0x2f0>)
 8013412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013416:	f7ec ff4f 	bl	80002b8 <__aeabi_dsub>
 801341a:	a39b      	add	r3, pc, #620	; (adr r3, 8013688 <__ieee754_rem_pio2+0x2f8>)
 801341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013420:	4606      	mov	r6, r0
 8013422:	460f      	mov	r7, r1
 8013424:	f7ec ff48 	bl	80002b8 <__aeabi_dsub>
 8013428:	4602      	mov	r2, r0
 801342a:	460b      	mov	r3, r1
 801342c:	e9c4 2300 	strd	r2, r3, [r4]
 8013430:	4630      	mov	r0, r6
 8013432:	4639      	mov	r1, r7
 8013434:	f7ec ff40 	bl	80002b8 <__aeabi_dsub>
 8013438:	a393      	add	r3, pc, #588	; (adr r3, 8013688 <__ieee754_rem_pio2+0x2f8>)
 801343a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801343e:	e7de      	b.n	80133fe <__ieee754_rem_pio2+0x6e>
 8013440:	f7ec ff3c 	bl	80002bc <__adddf3>
 8013444:	45a8      	cmp	r8, r5
 8013446:	4606      	mov	r6, r0
 8013448:	460f      	mov	r7, r1
 801344a:	d016      	beq.n	801347a <__ieee754_rem_pio2+0xea>
 801344c:	a38a      	add	r3, pc, #552	; (adr r3, 8013678 <__ieee754_rem_pio2+0x2e8>)
 801344e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013452:	f7ec ff33 	bl	80002bc <__adddf3>
 8013456:	4602      	mov	r2, r0
 8013458:	460b      	mov	r3, r1
 801345a:	e9c4 2300 	strd	r2, r3, [r4]
 801345e:	4630      	mov	r0, r6
 8013460:	4639      	mov	r1, r7
 8013462:	f7ec ff29 	bl	80002b8 <__aeabi_dsub>
 8013466:	a384      	add	r3, pc, #528	; (adr r3, 8013678 <__ieee754_rem_pio2+0x2e8>)
 8013468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801346c:	f7ec ff26 	bl	80002bc <__adddf3>
 8013470:	f04f 35ff 	mov.w	r5, #4294967295
 8013474:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013478:	e7c6      	b.n	8013408 <__ieee754_rem_pio2+0x78>
 801347a:	a381      	add	r3, pc, #516	; (adr r3, 8013680 <__ieee754_rem_pio2+0x2f0>)
 801347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013480:	f7ec ff1c 	bl	80002bc <__adddf3>
 8013484:	a380      	add	r3, pc, #512	; (adr r3, 8013688 <__ieee754_rem_pio2+0x2f8>)
 8013486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801348a:	4606      	mov	r6, r0
 801348c:	460f      	mov	r7, r1
 801348e:	f7ec ff15 	bl	80002bc <__adddf3>
 8013492:	4602      	mov	r2, r0
 8013494:	460b      	mov	r3, r1
 8013496:	e9c4 2300 	strd	r2, r3, [r4]
 801349a:	4630      	mov	r0, r6
 801349c:	4639      	mov	r1, r7
 801349e:	f7ec ff0b 	bl	80002b8 <__aeabi_dsub>
 80134a2:	a379      	add	r3, pc, #484	; (adr r3, 8013688 <__ieee754_rem_pio2+0x2f8>)
 80134a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134a8:	e7e0      	b.n	801346c <__ieee754_rem_pio2+0xdc>
 80134aa:	4b82      	ldr	r3, [pc, #520]	; (80136b4 <__ieee754_rem_pio2+0x324>)
 80134ac:	4598      	cmp	r8, r3
 80134ae:	f300 80d0 	bgt.w	8013652 <__ieee754_rem_pio2+0x2c2>
 80134b2:	f000 fe23 	bl	80140fc <fabs>
 80134b6:	ec57 6b10 	vmov	r6, r7, d0
 80134ba:	ee10 0a10 	vmov	r0, s0
 80134be:	a374      	add	r3, pc, #464	; (adr r3, 8013690 <__ieee754_rem_pio2+0x300>)
 80134c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134c4:	4639      	mov	r1, r7
 80134c6:	f7ed f8af 	bl	8000628 <__aeabi_dmul>
 80134ca:	2200      	movs	r2, #0
 80134cc:	4b7a      	ldr	r3, [pc, #488]	; (80136b8 <__ieee754_rem_pio2+0x328>)
 80134ce:	f7ec fef5 	bl	80002bc <__adddf3>
 80134d2:	f7ed fb59 	bl	8000b88 <__aeabi_d2iz>
 80134d6:	4605      	mov	r5, r0
 80134d8:	f7ed f83c 	bl	8000554 <__aeabi_i2d>
 80134dc:	a364      	add	r3, pc, #400	; (adr r3, 8013670 <__ieee754_rem_pio2+0x2e0>)
 80134de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80134e6:	f7ed f89f 	bl	8000628 <__aeabi_dmul>
 80134ea:	4602      	mov	r2, r0
 80134ec:	460b      	mov	r3, r1
 80134ee:	4630      	mov	r0, r6
 80134f0:	4639      	mov	r1, r7
 80134f2:	f7ec fee1 	bl	80002b8 <__aeabi_dsub>
 80134f6:	a360      	add	r3, pc, #384	; (adr r3, 8013678 <__ieee754_rem_pio2+0x2e8>)
 80134f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134fc:	4682      	mov	sl, r0
 80134fe:	468b      	mov	fp, r1
 8013500:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013504:	f7ed f890 	bl	8000628 <__aeabi_dmul>
 8013508:	2d1f      	cmp	r5, #31
 801350a:	4606      	mov	r6, r0
 801350c:	460f      	mov	r7, r1
 801350e:	dc0c      	bgt.n	801352a <__ieee754_rem_pio2+0x19a>
 8013510:	1e6a      	subs	r2, r5, #1
 8013512:	4b6a      	ldr	r3, [pc, #424]	; (80136bc <__ieee754_rem_pio2+0x32c>)
 8013514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013518:	4543      	cmp	r3, r8
 801351a:	d006      	beq.n	801352a <__ieee754_rem_pio2+0x19a>
 801351c:	4632      	mov	r2, r6
 801351e:	463b      	mov	r3, r7
 8013520:	4650      	mov	r0, sl
 8013522:	4659      	mov	r1, fp
 8013524:	f7ec fec8 	bl	80002b8 <__aeabi_dsub>
 8013528:	e00e      	b.n	8013548 <__ieee754_rem_pio2+0x1b8>
 801352a:	4632      	mov	r2, r6
 801352c:	463b      	mov	r3, r7
 801352e:	4650      	mov	r0, sl
 8013530:	4659      	mov	r1, fp
 8013532:	f7ec fec1 	bl	80002b8 <__aeabi_dsub>
 8013536:	ea4f 5328 	mov.w	r3, r8, asr #20
 801353a:	9305      	str	r3, [sp, #20]
 801353c:	9a05      	ldr	r2, [sp, #20]
 801353e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013542:	1ad3      	subs	r3, r2, r3
 8013544:	2b10      	cmp	r3, #16
 8013546:	dc02      	bgt.n	801354e <__ieee754_rem_pio2+0x1be>
 8013548:	e9c4 0100 	strd	r0, r1, [r4]
 801354c:	e039      	b.n	80135c2 <__ieee754_rem_pio2+0x232>
 801354e:	a34c      	add	r3, pc, #304	; (adr r3, 8013680 <__ieee754_rem_pio2+0x2f0>)
 8013550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013554:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013558:	f7ed f866 	bl	8000628 <__aeabi_dmul>
 801355c:	4606      	mov	r6, r0
 801355e:	460f      	mov	r7, r1
 8013560:	4602      	mov	r2, r0
 8013562:	460b      	mov	r3, r1
 8013564:	4650      	mov	r0, sl
 8013566:	4659      	mov	r1, fp
 8013568:	f7ec fea6 	bl	80002b8 <__aeabi_dsub>
 801356c:	4602      	mov	r2, r0
 801356e:	460b      	mov	r3, r1
 8013570:	4680      	mov	r8, r0
 8013572:	4689      	mov	r9, r1
 8013574:	4650      	mov	r0, sl
 8013576:	4659      	mov	r1, fp
 8013578:	f7ec fe9e 	bl	80002b8 <__aeabi_dsub>
 801357c:	4632      	mov	r2, r6
 801357e:	463b      	mov	r3, r7
 8013580:	f7ec fe9a 	bl	80002b8 <__aeabi_dsub>
 8013584:	a340      	add	r3, pc, #256	; (adr r3, 8013688 <__ieee754_rem_pio2+0x2f8>)
 8013586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801358a:	4606      	mov	r6, r0
 801358c:	460f      	mov	r7, r1
 801358e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013592:	f7ed f849 	bl	8000628 <__aeabi_dmul>
 8013596:	4632      	mov	r2, r6
 8013598:	463b      	mov	r3, r7
 801359a:	f7ec fe8d 	bl	80002b8 <__aeabi_dsub>
 801359e:	4602      	mov	r2, r0
 80135a0:	460b      	mov	r3, r1
 80135a2:	4606      	mov	r6, r0
 80135a4:	460f      	mov	r7, r1
 80135a6:	4640      	mov	r0, r8
 80135a8:	4649      	mov	r1, r9
 80135aa:	f7ec fe85 	bl	80002b8 <__aeabi_dsub>
 80135ae:	9a05      	ldr	r2, [sp, #20]
 80135b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80135b4:	1ad3      	subs	r3, r2, r3
 80135b6:	2b31      	cmp	r3, #49	; 0x31
 80135b8:	dc20      	bgt.n	80135fc <__ieee754_rem_pio2+0x26c>
 80135ba:	e9c4 0100 	strd	r0, r1, [r4]
 80135be:	46c2      	mov	sl, r8
 80135c0:	46cb      	mov	fp, r9
 80135c2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80135c6:	4650      	mov	r0, sl
 80135c8:	4642      	mov	r2, r8
 80135ca:	464b      	mov	r3, r9
 80135cc:	4659      	mov	r1, fp
 80135ce:	f7ec fe73 	bl	80002b8 <__aeabi_dsub>
 80135d2:	463b      	mov	r3, r7
 80135d4:	4632      	mov	r2, r6
 80135d6:	f7ec fe6f 	bl	80002b8 <__aeabi_dsub>
 80135da:	9b04      	ldr	r3, [sp, #16]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80135e2:	f6bf af11 	bge.w	8013408 <__ieee754_rem_pio2+0x78>
 80135e6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80135ea:	6063      	str	r3, [r4, #4]
 80135ec:	f8c4 8000 	str.w	r8, [r4]
 80135f0:	60a0      	str	r0, [r4, #8]
 80135f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80135f6:	60e3      	str	r3, [r4, #12]
 80135f8:	426d      	negs	r5, r5
 80135fa:	e705      	b.n	8013408 <__ieee754_rem_pio2+0x78>
 80135fc:	a326      	add	r3, pc, #152	; (adr r3, 8013698 <__ieee754_rem_pio2+0x308>)
 80135fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013602:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013606:	f7ed f80f 	bl	8000628 <__aeabi_dmul>
 801360a:	4606      	mov	r6, r0
 801360c:	460f      	mov	r7, r1
 801360e:	4602      	mov	r2, r0
 8013610:	460b      	mov	r3, r1
 8013612:	4640      	mov	r0, r8
 8013614:	4649      	mov	r1, r9
 8013616:	f7ec fe4f 	bl	80002b8 <__aeabi_dsub>
 801361a:	4602      	mov	r2, r0
 801361c:	460b      	mov	r3, r1
 801361e:	4682      	mov	sl, r0
 8013620:	468b      	mov	fp, r1
 8013622:	4640      	mov	r0, r8
 8013624:	4649      	mov	r1, r9
 8013626:	f7ec fe47 	bl	80002b8 <__aeabi_dsub>
 801362a:	4632      	mov	r2, r6
 801362c:	463b      	mov	r3, r7
 801362e:	f7ec fe43 	bl	80002b8 <__aeabi_dsub>
 8013632:	a31b      	add	r3, pc, #108	; (adr r3, 80136a0 <__ieee754_rem_pio2+0x310>)
 8013634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013638:	4606      	mov	r6, r0
 801363a:	460f      	mov	r7, r1
 801363c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013640:	f7ec fff2 	bl	8000628 <__aeabi_dmul>
 8013644:	4632      	mov	r2, r6
 8013646:	463b      	mov	r3, r7
 8013648:	f7ec fe36 	bl	80002b8 <__aeabi_dsub>
 801364c:	4606      	mov	r6, r0
 801364e:	460f      	mov	r7, r1
 8013650:	e764      	b.n	801351c <__ieee754_rem_pio2+0x18c>
 8013652:	4b1b      	ldr	r3, [pc, #108]	; (80136c0 <__ieee754_rem_pio2+0x330>)
 8013654:	4598      	cmp	r8, r3
 8013656:	dd35      	ble.n	80136c4 <__ieee754_rem_pio2+0x334>
 8013658:	ee10 2a10 	vmov	r2, s0
 801365c:	463b      	mov	r3, r7
 801365e:	4630      	mov	r0, r6
 8013660:	4639      	mov	r1, r7
 8013662:	f7ec fe29 	bl	80002b8 <__aeabi_dsub>
 8013666:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801366a:	e9c4 0100 	strd	r0, r1, [r4]
 801366e:	e6a1      	b.n	80133b4 <__ieee754_rem_pio2+0x24>
 8013670:	54400000 	.word	0x54400000
 8013674:	3ff921fb 	.word	0x3ff921fb
 8013678:	1a626331 	.word	0x1a626331
 801367c:	3dd0b461 	.word	0x3dd0b461
 8013680:	1a600000 	.word	0x1a600000
 8013684:	3dd0b461 	.word	0x3dd0b461
 8013688:	2e037073 	.word	0x2e037073
 801368c:	3ba3198a 	.word	0x3ba3198a
 8013690:	6dc9c883 	.word	0x6dc9c883
 8013694:	3fe45f30 	.word	0x3fe45f30
 8013698:	2e000000 	.word	0x2e000000
 801369c:	3ba3198a 	.word	0x3ba3198a
 80136a0:	252049c1 	.word	0x252049c1
 80136a4:	397b839a 	.word	0x397b839a
 80136a8:	3fe921fb 	.word	0x3fe921fb
 80136ac:	4002d97b 	.word	0x4002d97b
 80136b0:	3ff921fb 	.word	0x3ff921fb
 80136b4:	413921fb 	.word	0x413921fb
 80136b8:	3fe00000 	.word	0x3fe00000
 80136bc:	08018d70 	.word	0x08018d70
 80136c0:	7fefffff 	.word	0x7fefffff
 80136c4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80136c8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80136cc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80136d0:	4630      	mov	r0, r6
 80136d2:	460f      	mov	r7, r1
 80136d4:	f7ed fa58 	bl	8000b88 <__aeabi_d2iz>
 80136d8:	f7ec ff3c 	bl	8000554 <__aeabi_i2d>
 80136dc:	4602      	mov	r2, r0
 80136de:	460b      	mov	r3, r1
 80136e0:	4630      	mov	r0, r6
 80136e2:	4639      	mov	r1, r7
 80136e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80136e8:	f7ec fde6 	bl	80002b8 <__aeabi_dsub>
 80136ec:	2200      	movs	r2, #0
 80136ee:	4b1f      	ldr	r3, [pc, #124]	; (801376c <__ieee754_rem_pio2+0x3dc>)
 80136f0:	f7ec ff9a 	bl	8000628 <__aeabi_dmul>
 80136f4:	460f      	mov	r7, r1
 80136f6:	4606      	mov	r6, r0
 80136f8:	f7ed fa46 	bl	8000b88 <__aeabi_d2iz>
 80136fc:	f7ec ff2a 	bl	8000554 <__aeabi_i2d>
 8013700:	4602      	mov	r2, r0
 8013702:	460b      	mov	r3, r1
 8013704:	4630      	mov	r0, r6
 8013706:	4639      	mov	r1, r7
 8013708:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801370c:	f7ec fdd4 	bl	80002b8 <__aeabi_dsub>
 8013710:	2200      	movs	r2, #0
 8013712:	4b16      	ldr	r3, [pc, #88]	; (801376c <__ieee754_rem_pio2+0x3dc>)
 8013714:	f7ec ff88 	bl	8000628 <__aeabi_dmul>
 8013718:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801371c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8013720:	f04f 0803 	mov.w	r8, #3
 8013724:	2600      	movs	r6, #0
 8013726:	2700      	movs	r7, #0
 8013728:	4632      	mov	r2, r6
 801372a:	463b      	mov	r3, r7
 801372c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8013730:	f108 3aff 	add.w	sl, r8, #4294967295
 8013734:	f7ed f9e0 	bl	8000af8 <__aeabi_dcmpeq>
 8013738:	b9b0      	cbnz	r0, 8013768 <__ieee754_rem_pio2+0x3d8>
 801373a:	4b0d      	ldr	r3, [pc, #52]	; (8013770 <__ieee754_rem_pio2+0x3e0>)
 801373c:	9301      	str	r3, [sp, #4]
 801373e:	2302      	movs	r3, #2
 8013740:	9300      	str	r3, [sp, #0]
 8013742:	462a      	mov	r2, r5
 8013744:	4643      	mov	r3, r8
 8013746:	4621      	mov	r1, r4
 8013748:	a806      	add	r0, sp, #24
 801374a:	f000 f8dd 	bl	8013908 <__kernel_rem_pio2>
 801374e:	9b04      	ldr	r3, [sp, #16]
 8013750:	2b00      	cmp	r3, #0
 8013752:	4605      	mov	r5, r0
 8013754:	f6bf ae58 	bge.w	8013408 <__ieee754_rem_pio2+0x78>
 8013758:	6863      	ldr	r3, [r4, #4]
 801375a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801375e:	6063      	str	r3, [r4, #4]
 8013760:	68e3      	ldr	r3, [r4, #12]
 8013762:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013766:	e746      	b.n	80135f6 <__ieee754_rem_pio2+0x266>
 8013768:	46d0      	mov	r8, sl
 801376a:	e7dd      	b.n	8013728 <__ieee754_rem_pio2+0x398>
 801376c:	41700000 	.word	0x41700000
 8013770:	08018df0 	.word	0x08018df0
 8013774:	00000000 	.word	0x00000000

08013778 <__kernel_cos>:
 8013778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801377c:	ec59 8b10 	vmov	r8, r9, d0
 8013780:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8013784:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8013788:	ed2d 8b02 	vpush	{d8}
 801378c:	eeb0 8a41 	vmov.f32	s16, s2
 8013790:	eef0 8a61 	vmov.f32	s17, s3
 8013794:	da07      	bge.n	80137a6 <__kernel_cos+0x2e>
 8013796:	ee10 0a10 	vmov	r0, s0
 801379a:	4649      	mov	r1, r9
 801379c:	f7ed f9f4 	bl	8000b88 <__aeabi_d2iz>
 80137a0:	2800      	cmp	r0, #0
 80137a2:	f000 8089 	beq.w	80138b8 <__kernel_cos+0x140>
 80137a6:	4642      	mov	r2, r8
 80137a8:	464b      	mov	r3, r9
 80137aa:	4640      	mov	r0, r8
 80137ac:	4649      	mov	r1, r9
 80137ae:	f7ec ff3b 	bl	8000628 <__aeabi_dmul>
 80137b2:	2200      	movs	r2, #0
 80137b4:	4b4e      	ldr	r3, [pc, #312]	; (80138f0 <__kernel_cos+0x178>)
 80137b6:	4604      	mov	r4, r0
 80137b8:	460d      	mov	r5, r1
 80137ba:	f7ec ff35 	bl	8000628 <__aeabi_dmul>
 80137be:	a340      	add	r3, pc, #256	; (adr r3, 80138c0 <__kernel_cos+0x148>)
 80137c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137c4:	4682      	mov	sl, r0
 80137c6:	468b      	mov	fp, r1
 80137c8:	4620      	mov	r0, r4
 80137ca:	4629      	mov	r1, r5
 80137cc:	f7ec ff2c 	bl	8000628 <__aeabi_dmul>
 80137d0:	a33d      	add	r3, pc, #244	; (adr r3, 80138c8 <__kernel_cos+0x150>)
 80137d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137d6:	f7ec fd71 	bl	80002bc <__adddf3>
 80137da:	4622      	mov	r2, r4
 80137dc:	462b      	mov	r3, r5
 80137de:	f7ec ff23 	bl	8000628 <__aeabi_dmul>
 80137e2:	a33b      	add	r3, pc, #236	; (adr r3, 80138d0 <__kernel_cos+0x158>)
 80137e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137e8:	f7ec fd66 	bl	80002b8 <__aeabi_dsub>
 80137ec:	4622      	mov	r2, r4
 80137ee:	462b      	mov	r3, r5
 80137f0:	f7ec ff1a 	bl	8000628 <__aeabi_dmul>
 80137f4:	a338      	add	r3, pc, #224	; (adr r3, 80138d8 <__kernel_cos+0x160>)
 80137f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137fa:	f7ec fd5f 	bl	80002bc <__adddf3>
 80137fe:	4622      	mov	r2, r4
 8013800:	462b      	mov	r3, r5
 8013802:	f7ec ff11 	bl	8000628 <__aeabi_dmul>
 8013806:	a336      	add	r3, pc, #216	; (adr r3, 80138e0 <__kernel_cos+0x168>)
 8013808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801380c:	f7ec fd54 	bl	80002b8 <__aeabi_dsub>
 8013810:	4622      	mov	r2, r4
 8013812:	462b      	mov	r3, r5
 8013814:	f7ec ff08 	bl	8000628 <__aeabi_dmul>
 8013818:	a333      	add	r3, pc, #204	; (adr r3, 80138e8 <__kernel_cos+0x170>)
 801381a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801381e:	f7ec fd4d 	bl	80002bc <__adddf3>
 8013822:	4622      	mov	r2, r4
 8013824:	462b      	mov	r3, r5
 8013826:	f7ec feff 	bl	8000628 <__aeabi_dmul>
 801382a:	4622      	mov	r2, r4
 801382c:	462b      	mov	r3, r5
 801382e:	f7ec fefb 	bl	8000628 <__aeabi_dmul>
 8013832:	ec53 2b18 	vmov	r2, r3, d8
 8013836:	4604      	mov	r4, r0
 8013838:	460d      	mov	r5, r1
 801383a:	4640      	mov	r0, r8
 801383c:	4649      	mov	r1, r9
 801383e:	f7ec fef3 	bl	8000628 <__aeabi_dmul>
 8013842:	460b      	mov	r3, r1
 8013844:	4602      	mov	r2, r0
 8013846:	4629      	mov	r1, r5
 8013848:	4620      	mov	r0, r4
 801384a:	f7ec fd35 	bl	80002b8 <__aeabi_dsub>
 801384e:	4b29      	ldr	r3, [pc, #164]	; (80138f4 <__kernel_cos+0x17c>)
 8013850:	429e      	cmp	r6, r3
 8013852:	4680      	mov	r8, r0
 8013854:	4689      	mov	r9, r1
 8013856:	dc11      	bgt.n	801387c <__kernel_cos+0x104>
 8013858:	4602      	mov	r2, r0
 801385a:	460b      	mov	r3, r1
 801385c:	4650      	mov	r0, sl
 801385e:	4659      	mov	r1, fp
 8013860:	f7ec fd2a 	bl	80002b8 <__aeabi_dsub>
 8013864:	460b      	mov	r3, r1
 8013866:	4924      	ldr	r1, [pc, #144]	; (80138f8 <__kernel_cos+0x180>)
 8013868:	4602      	mov	r2, r0
 801386a:	2000      	movs	r0, #0
 801386c:	f7ec fd24 	bl	80002b8 <__aeabi_dsub>
 8013870:	ecbd 8b02 	vpop	{d8}
 8013874:	ec41 0b10 	vmov	d0, r0, r1
 8013878:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801387c:	4b1f      	ldr	r3, [pc, #124]	; (80138fc <__kernel_cos+0x184>)
 801387e:	491e      	ldr	r1, [pc, #120]	; (80138f8 <__kernel_cos+0x180>)
 8013880:	429e      	cmp	r6, r3
 8013882:	bfcc      	ite	gt
 8013884:	4d1e      	ldrgt	r5, [pc, #120]	; (8013900 <__kernel_cos+0x188>)
 8013886:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801388a:	2400      	movs	r4, #0
 801388c:	4622      	mov	r2, r4
 801388e:	462b      	mov	r3, r5
 8013890:	2000      	movs	r0, #0
 8013892:	f7ec fd11 	bl	80002b8 <__aeabi_dsub>
 8013896:	4622      	mov	r2, r4
 8013898:	4606      	mov	r6, r0
 801389a:	460f      	mov	r7, r1
 801389c:	462b      	mov	r3, r5
 801389e:	4650      	mov	r0, sl
 80138a0:	4659      	mov	r1, fp
 80138a2:	f7ec fd09 	bl	80002b8 <__aeabi_dsub>
 80138a6:	4642      	mov	r2, r8
 80138a8:	464b      	mov	r3, r9
 80138aa:	f7ec fd05 	bl	80002b8 <__aeabi_dsub>
 80138ae:	4602      	mov	r2, r0
 80138b0:	460b      	mov	r3, r1
 80138b2:	4630      	mov	r0, r6
 80138b4:	4639      	mov	r1, r7
 80138b6:	e7d9      	b.n	801386c <__kernel_cos+0xf4>
 80138b8:	2000      	movs	r0, #0
 80138ba:	490f      	ldr	r1, [pc, #60]	; (80138f8 <__kernel_cos+0x180>)
 80138bc:	e7d8      	b.n	8013870 <__kernel_cos+0xf8>
 80138be:	bf00      	nop
 80138c0:	be8838d4 	.word	0xbe8838d4
 80138c4:	bda8fae9 	.word	0xbda8fae9
 80138c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80138cc:	3e21ee9e 	.word	0x3e21ee9e
 80138d0:	809c52ad 	.word	0x809c52ad
 80138d4:	3e927e4f 	.word	0x3e927e4f
 80138d8:	19cb1590 	.word	0x19cb1590
 80138dc:	3efa01a0 	.word	0x3efa01a0
 80138e0:	16c15177 	.word	0x16c15177
 80138e4:	3f56c16c 	.word	0x3f56c16c
 80138e8:	5555554c 	.word	0x5555554c
 80138ec:	3fa55555 	.word	0x3fa55555
 80138f0:	3fe00000 	.word	0x3fe00000
 80138f4:	3fd33332 	.word	0x3fd33332
 80138f8:	3ff00000 	.word	0x3ff00000
 80138fc:	3fe90000 	.word	0x3fe90000
 8013900:	3fd20000 	.word	0x3fd20000
 8013904:	00000000 	.word	0x00000000

08013908 <__kernel_rem_pio2>:
 8013908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801390c:	ed2d 8b02 	vpush	{d8}
 8013910:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8013914:	1ed4      	subs	r4, r2, #3
 8013916:	9308      	str	r3, [sp, #32]
 8013918:	9101      	str	r1, [sp, #4]
 801391a:	4bc5      	ldr	r3, [pc, #788]	; (8013c30 <__kernel_rem_pio2+0x328>)
 801391c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801391e:	9009      	str	r0, [sp, #36]	; 0x24
 8013920:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013924:	9304      	str	r3, [sp, #16]
 8013926:	9b08      	ldr	r3, [sp, #32]
 8013928:	3b01      	subs	r3, #1
 801392a:	9307      	str	r3, [sp, #28]
 801392c:	2318      	movs	r3, #24
 801392e:	fb94 f4f3 	sdiv	r4, r4, r3
 8013932:	f06f 0317 	mvn.w	r3, #23
 8013936:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801393a:	fb04 3303 	mla	r3, r4, r3, r3
 801393e:	eb03 0a02 	add.w	sl, r3, r2
 8013942:	9b04      	ldr	r3, [sp, #16]
 8013944:	9a07      	ldr	r2, [sp, #28]
 8013946:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8013c20 <__kernel_rem_pio2+0x318>
 801394a:	eb03 0802 	add.w	r8, r3, r2
 801394e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013950:	1aa7      	subs	r7, r4, r2
 8013952:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013956:	ae22      	add	r6, sp, #136	; 0x88
 8013958:	2500      	movs	r5, #0
 801395a:	4545      	cmp	r5, r8
 801395c:	dd13      	ble.n	8013986 <__kernel_rem_pio2+0x7e>
 801395e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8013c20 <__kernel_rem_pio2+0x318>
 8013962:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8013966:	2600      	movs	r6, #0
 8013968:	9b04      	ldr	r3, [sp, #16]
 801396a:	429e      	cmp	r6, r3
 801396c:	dc32      	bgt.n	80139d4 <__kernel_rem_pio2+0xcc>
 801396e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013970:	9302      	str	r3, [sp, #8]
 8013972:	9b08      	ldr	r3, [sp, #32]
 8013974:	199d      	adds	r5, r3, r6
 8013976:	ab22      	add	r3, sp, #136	; 0x88
 8013978:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801397c:	9306      	str	r3, [sp, #24]
 801397e:	ec59 8b18 	vmov	r8, r9, d8
 8013982:	2700      	movs	r7, #0
 8013984:	e01f      	b.n	80139c6 <__kernel_rem_pio2+0xbe>
 8013986:	42ef      	cmn	r7, r5
 8013988:	d407      	bmi.n	801399a <__kernel_rem_pio2+0x92>
 801398a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801398e:	f7ec fde1 	bl	8000554 <__aeabi_i2d>
 8013992:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013996:	3501      	adds	r5, #1
 8013998:	e7df      	b.n	801395a <__kernel_rem_pio2+0x52>
 801399a:	ec51 0b18 	vmov	r0, r1, d8
 801399e:	e7f8      	b.n	8013992 <__kernel_rem_pio2+0x8a>
 80139a0:	9906      	ldr	r1, [sp, #24]
 80139a2:	9d02      	ldr	r5, [sp, #8]
 80139a4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80139a8:	9106      	str	r1, [sp, #24]
 80139aa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80139ae:	9502      	str	r5, [sp, #8]
 80139b0:	f7ec fe3a 	bl	8000628 <__aeabi_dmul>
 80139b4:	4602      	mov	r2, r0
 80139b6:	460b      	mov	r3, r1
 80139b8:	4640      	mov	r0, r8
 80139ba:	4649      	mov	r1, r9
 80139bc:	f7ec fc7e 	bl	80002bc <__adddf3>
 80139c0:	3701      	adds	r7, #1
 80139c2:	4680      	mov	r8, r0
 80139c4:	4689      	mov	r9, r1
 80139c6:	9b07      	ldr	r3, [sp, #28]
 80139c8:	429f      	cmp	r7, r3
 80139ca:	dde9      	ble.n	80139a0 <__kernel_rem_pio2+0x98>
 80139cc:	e8eb 8902 	strd	r8, r9, [fp], #8
 80139d0:	3601      	adds	r6, #1
 80139d2:	e7c9      	b.n	8013968 <__kernel_rem_pio2+0x60>
 80139d4:	9b04      	ldr	r3, [sp, #16]
 80139d6:	aa0e      	add	r2, sp, #56	; 0x38
 80139d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80139dc:	930c      	str	r3, [sp, #48]	; 0x30
 80139de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80139e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80139e4:	9c04      	ldr	r4, [sp, #16]
 80139e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80139e8:	ab9a      	add	r3, sp, #616	; 0x268
 80139ea:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80139ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80139f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80139f6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80139fa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80139fe:	ab9a      	add	r3, sp, #616	; 0x268
 8013a00:	445b      	add	r3, fp
 8013a02:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8013a06:	2500      	movs	r5, #0
 8013a08:	1b63      	subs	r3, r4, r5
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	dc78      	bgt.n	8013b00 <__kernel_rem_pio2+0x1f8>
 8013a0e:	4650      	mov	r0, sl
 8013a10:	ec49 8b10 	vmov	d0, r8, r9
 8013a14:	f000 fc00 	bl	8014218 <scalbn>
 8013a18:	ec57 6b10 	vmov	r6, r7, d0
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8013a22:	ee10 0a10 	vmov	r0, s0
 8013a26:	4639      	mov	r1, r7
 8013a28:	f7ec fdfe 	bl	8000628 <__aeabi_dmul>
 8013a2c:	ec41 0b10 	vmov	d0, r0, r1
 8013a30:	f000 fb6e 	bl	8014110 <floor>
 8013a34:	2200      	movs	r2, #0
 8013a36:	ec51 0b10 	vmov	r0, r1, d0
 8013a3a:	4b7e      	ldr	r3, [pc, #504]	; (8013c34 <__kernel_rem_pio2+0x32c>)
 8013a3c:	f7ec fdf4 	bl	8000628 <__aeabi_dmul>
 8013a40:	4602      	mov	r2, r0
 8013a42:	460b      	mov	r3, r1
 8013a44:	4630      	mov	r0, r6
 8013a46:	4639      	mov	r1, r7
 8013a48:	f7ec fc36 	bl	80002b8 <__aeabi_dsub>
 8013a4c:	460f      	mov	r7, r1
 8013a4e:	4606      	mov	r6, r0
 8013a50:	f7ed f89a 	bl	8000b88 <__aeabi_d2iz>
 8013a54:	9006      	str	r0, [sp, #24]
 8013a56:	f7ec fd7d 	bl	8000554 <__aeabi_i2d>
 8013a5a:	4602      	mov	r2, r0
 8013a5c:	460b      	mov	r3, r1
 8013a5e:	4630      	mov	r0, r6
 8013a60:	4639      	mov	r1, r7
 8013a62:	f7ec fc29 	bl	80002b8 <__aeabi_dsub>
 8013a66:	f1ba 0f00 	cmp.w	sl, #0
 8013a6a:	4606      	mov	r6, r0
 8013a6c:	460f      	mov	r7, r1
 8013a6e:	dd6c      	ble.n	8013b4a <__kernel_rem_pio2+0x242>
 8013a70:	1e62      	subs	r2, r4, #1
 8013a72:	ab0e      	add	r3, sp, #56	; 0x38
 8013a74:	f1ca 0118 	rsb	r1, sl, #24
 8013a78:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013a7c:	9d06      	ldr	r5, [sp, #24]
 8013a7e:	fa40 f301 	asr.w	r3, r0, r1
 8013a82:	441d      	add	r5, r3
 8013a84:	408b      	lsls	r3, r1
 8013a86:	1ac0      	subs	r0, r0, r3
 8013a88:	ab0e      	add	r3, sp, #56	; 0x38
 8013a8a:	9506      	str	r5, [sp, #24]
 8013a8c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8013a90:	f1ca 0317 	rsb	r3, sl, #23
 8013a94:	fa40 f303 	asr.w	r3, r0, r3
 8013a98:	9302      	str	r3, [sp, #8]
 8013a9a:	9b02      	ldr	r3, [sp, #8]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	dd62      	ble.n	8013b66 <__kernel_rem_pio2+0x25e>
 8013aa0:	9b06      	ldr	r3, [sp, #24]
 8013aa2:	2200      	movs	r2, #0
 8013aa4:	3301      	adds	r3, #1
 8013aa6:	9306      	str	r3, [sp, #24]
 8013aa8:	4615      	mov	r5, r2
 8013aaa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013aae:	4294      	cmp	r4, r2
 8013ab0:	f300 8095 	bgt.w	8013bde <__kernel_rem_pio2+0x2d6>
 8013ab4:	f1ba 0f00 	cmp.w	sl, #0
 8013ab8:	dd07      	ble.n	8013aca <__kernel_rem_pio2+0x1c2>
 8013aba:	f1ba 0f01 	cmp.w	sl, #1
 8013abe:	f000 80a2 	beq.w	8013c06 <__kernel_rem_pio2+0x2fe>
 8013ac2:	f1ba 0f02 	cmp.w	sl, #2
 8013ac6:	f000 80c1 	beq.w	8013c4c <__kernel_rem_pio2+0x344>
 8013aca:	9b02      	ldr	r3, [sp, #8]
 8013acc:	2b02      	cmp	r3, #2
 8013ace:	d14a      	bne.n	8013b66 <__kernel_rem_pio2+0x25e>
 8013ad0:	4632      	mov	r2, r6
 8013ad2:	463b      	mov	r3, r7
 8013ad4:	2000      	movs	r0, #0
 8013ad6:	4958      	ldr	r1, [pc, #352]	; (8013c38 <__kernel_rem_pio2+0x330>)
 8013ad8:	f7ec fbee 	bl	80002b8 <__aeabi_dsub>
 8013adc:	4606      	mov	r6, r0
 8013ade:	460f      	mov	r7, r1
 8013ae0:	2d00      	cmp	r5, #0
 8013ae2:	d040      	beq.n	8013b66 <__kernel_rem_pio2+0x25e>
 8013ae4:	4650      	mov	r0, sl
 8013ae6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8013c28 <__kernel_rem_pio2+0x320>
 8013aea:	f000 fb95 	bl	8014218 <scalbn>
 8013aee:	4630      	mov	r0, r6
 8013af0:	4639      	mov	r1, r7
 8013af2:	ec53 2b10 	vmov	r2, r3, d0
 8013af6:	f7ec fbdf 	bl	80002b8 <__aeabi_dsub>
 8013afa:	4606      	mov	r6, r0
 8013afc:	460f      	mov	r7, r1
 8013afe:	e032      	b.n	8013b66 <__kernel_rem_pio2+0x25e>
 8013b00:	2200      	movs	r2, #0
 8013b02:	4b4e      	ldr	r3, [pc, #312]	; (8013c3c <__kernel_rem_pio2+0x334>)
 8013b04:	4640      	mov	r0, r8
 8013b06:	4649      	mov	r1, r9
 8013b08:	f7ec fd8e 	bl	8000628 <__aeabi_dmul>
 8013b0c:	f7ed f83c 	bl	8000b88 <__aeabi_d2iz>
 8013b10:	f7ec fd20 	bl	8000554 <__aeabi_i2d>
 8013b14:	2200      	movs	r2, #0
 8013b16:	4b4a      	ldr	r3, [pc, #296]	; (8013c40 <__kernel_rem_pio2+0x338>)
 8013b18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b1c:	f7ec fd84 	bl	8000628 <__aeabi_dmul>
 8013b20:	4602      	mov	r2, r0
 8013b22:	460b      	mov	r3, r1
 8013b24:	4640      	mov	r0, r8
 8013b26:	4649      	mov	r1, r9
 8013b28:	f7ec fbc6 	bl	80002b8 <__aeabi_dsub>
 8013b2c:	f7ed f82c 	bl	8000b88 <__aeabi_d2iz>
 8013b30:	ab0e      	add	r3, sp, #56	; 0x38
 8013b32:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8013b36:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8013b3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b3e:	f7ec fbbd 	bl	80002bc <__adddf3>
 8013b42:	3501      	adds	r5, #1
 8013b44:	4680      	mov	r8, r0
 8013b46:	4689      	mov	r9, r1
 8013b48:	e75e      	b.n	8013a08 <__kernel_rem_pio2+0x100>
 8013b4a:	d105      	bne.n	8013b58 <__kernel_rem_pio2+0x250>
 8013b4c:	1e63      	subs	r3, r4, #1
 8013b4e:	aa0e      	add	r2, sp, #56	; 0x38
 8013b50:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013b54:	15c3      	asrs	r3, r0, #23
 8013b56:	e79f      	b.n	8013a98 <__kernel_rem_pio2+0x190>
 8013b58:	2200      	movs	r2, #0
 8013b5a:	4b3a      	ldr	r3, [pc, #232]	; (8013c44 <__kernel_rem_pio2+0x33c>)
 8013b5c:	f7ec ffea 	bl	8000b34 <__aeabi_dcmpge>
 8013b60:	2800      	cmp	r0, #0
 8013b62:	d139      	bne.n	8013bd8 <__kernel_rem_pio2+0x2d0>
 8013b64:	9002      	str	r0, [sp, #8]
 8013b66:	2200      	movs	r2, #0
 8013b68:	2300      	movs	r3, #0
 8013b6a:	4630      	mov	r0, r6
 8013b6c:	4639      	mov	r1, r7
 8013b6e:	f7ec ffc3 	bl	8000af8 <__aeabi_dcmpeq>
 8013b72:	2800      	cmp	r0, #0
 8013b74:	f000 80c7 	beq.w	8013d06 <__kernel_rem_pio2+0x3fe>
 8013b78:	1e65      	subs	r5, r4, #1
 8013b7a:	462b      	mov	r3, r5
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	9904      	ldr	r1, [sp, #16]
 8013b80:	428b      	cmp	r3, r1
 8013b82:	da6a      	bge.n	8013c5a <__kernel_rem_pio2+0x352>
 8013b84:	2a00      	cmp	r2, #0
 8013b86:	f000 8088 	beq.w	8013c9a <__kernel_rem_pio2+0x392>
 8013b8a:	ab0e      	add	r3, sp, #56	; 0x38
 8013b8c:	f1aa 0a18 	sub.w	sl, sl, #24
 8013b90:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	f000 80b4 	beq.w	8013d02 <__kernel_rem_pio2+0x3fa>
 8013b9a:	4650      	mov	r0, sl
 8013b9c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8013c28 <__kernel_rem_pio2+0x320>
 8013ba0:	f000 fb3a 	bl	8014218 <scalbn>
 8013ba4:	00ec      	lsls	r4, r5, #3
 8013ba6:	ab72      	add	r3, sp, #456	; 0x1c8
 8013ba8:	191e      	adds	r6, r3, r4
 8013baa:	ec59 8b10 	vmov	r8, r9, d0
 8013bae:	f106 0a08 	add.w	sl, r6, #8
 8013bb2:	462f      	mov	r7, r5
 8013bb4:	2f00      	cmp	r7, #0
 8013bb6:	f280 80df 	bge.w	8013d78 <__kernel_rem_pio2+0x470>
 8013bba:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8013c20 <__kernel_rem_pio2+0x318>
 8013bbe:	f04f 0a00 	mov.w	sl, #0
 8013bc2:	eba5 030a 	sub.w	r3, r5, sl
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	f2c0 810a 	blt.w	8013de0 <__kernel_rem_pio2+0x4d8>
 8013bcc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8013c48 <__kernel_rem_pio2+0x340>
 8013bd0:	ec59 8b18 	vmov	r8, r9, d8
 8013bd4:	2700      	movs	r7, #0
 8013bd6:	e0f5      	b.n	8013dc4 <__kernel_rem_pio2+0x4bc>
 8013bd8:	2302      	movs	r3, #2
 8013bda:	9302      	str	r3, [sp, #8]
 8013bdc:	e760      	b.n	8013aa0 <__kernel_rem_pio2+0x198>
 8013bde:	ab0e      	add	r3, sp, #56	; 0x38
 8013be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013be4:	b94d      	cbnz	r5, 8013bfa <__kernel_rem_pio2+0x2f2>
 8013be6:	b12b      	cbz	r3, 8013bf4 <__kernel_rem_pio2+0x2ec>
 8013be8:	a80e      	add	r0, sp, #56	; 0x38
 8013bea:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8013bee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8013bf2:	2301      	movs	r3, #1
 8013bf4:	3201      	adds	r2, #1
 8013bf6:	461d      	mov	r5, r3
 8013bf8:	e759      	b.n	8013aae <__kernel_rem_pio2+0x1a6>
 8013bfa:	a80e      	add	r0, sp, #56	; 0x38
 8013bfc:	1acb      	subs	r3, r1, r3
 8013bfe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8013c02:	462b      	mov	r3, r5
 8013c04:	e7f6      	b.n	8013bf4 <__kernel_rem_pio2+0x2ec>
 8013c06:	1e62      	subs	r2, r4, #1
 8013c08:	ab0e      	add	r3, sp, #56	; 0x38
 8013c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c0e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013c12:	a90e      	add	r1, sp, #56	; 0x38
 8013c14:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013c18:	e757      	b.n	8013aca <__kernel_rem_pio2+0x1c2>
 8013c1a:	bf00      	nop
 8013c1c:	f3af 8000 	nop.w
	...
 8013c2c:	3ff00000 	.word	0x3ff00000
 8013c30:	08018f38 	.word	0x08018f38
 8013c34:	40200000 	.word	0x40200000
 8013c38:	3ff00000 	.word	0x3ff00000
 8013c3c:	3e700000 	.word	0x3e700000
 8013c40:	41700000 	.word	0x41700000
 8013c44:	3fe00000 	.word	0x3fe00000
 8013c48:	08018ef8 	.word	0x08018ef8
 8013c4c:	1e62      	subs	r2, r4, #1
 8013c4e:	ab0e      	add	r3, sp, #56	; 0x38
 8013c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c54:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013c58:	e7db      	b.n	8013c12 <__kernel_rem_pio2+0x30a>
 8013c5a:	a90e      	add	r1, sp, #56	; 0x38
 8013c5c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013c60:	3b01      	subs	r3, #1
 8013c62:	430a      	orrs	r2, r1
 8013c64:	e78b      	b.n	8013b7e <__kernel_rem_pio2+0x276>
 8013c66:	3301      	adds	r3, #1
 8013c68:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8013c6c:	2900      	cmp	r1, #0
 8013c6e:	d0fa      	beq.n	8013c66 <__kernel_rem_pio2+0x35e>
 8013c70:	9a08      	ldr	r2, [sp, #32]
 8013c72:	4422      	add	r2, r4
 8013c74:	00d2      	lsls	r2, r2, #3
 8013c76:	a922      	add	r1, sp, #136	; 0x88
 8013c78:	18e3      	adds	r3, r4, r3
 8013c7a:	9206      	str	r2, [sp, #24]
 8013c7c:	440a      	add	r2, r1
 8013c7e:	9302      	str	r3, [sp, #8]
 8013c80:	f10b 0108 	add.w	r1, fp, #8
 8013c84:	f102 0308 	add.w	r3, r2, #8
 8013c88:	1c66      	adds	r6, r4, #1
 8013c8a:	910a      	str	r1, [sp, #40]	; 0x28
 8013c8c:	2500      	movs	r5, #0
 8013c8e:	930d      	str	r3, [sp, #52]	; 0x34
 8013c90:	9b02      	ldr	r3, [sp, #8]
 8013c92:	42b3      	cmp	r3, r6
 8013c94:	da04      	bge.n	8013ca0 <__kernel_rem_pio2+0x398>
 8013c96:	461c      	mov	r4, r3
 8013c98:	e6a6      	b.n	80139e8 <__kernel_rem_pio2+0xe0>
 8013c9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013c9c:	2301      	movs	r3, #1
 8013c9e:	e7e3      	b.n	8013c68 <__kernel_rem_pio2+0x360>
 8013ca0:	9b06      	ldr	r3, [sp, #24]
 8013ca2:	18ef      	adds	r7, r5, r3
 8013ca4:	ab22      	add	r3, sp, #136	; 0x88
 8013ca6:	441f      	add	r7, r3
 8013ca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013caa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013cae:	f7ec fc51 	bl	8000554 <__aeabi_i2d>
 8013cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013cb4:	461c      	mov	r4, r3
 8013cb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013cb8:	e9c7 0100 	strd	r0, r1, [r7]
 8013cbc:	eb03 0b05 	add.w	fp, r3, r5
 8013cc0:	2700      	movs	r7, #0
 8013cc2:	f04f 0800 	mov.w	r8, #0
 8013cc6:	f04f 0900 	mov.w	r9, #0
 8013cca:	9b07      	ldr	r3, [sp, #28]
 8013ccc:	429f      	cmp	r7, r3
 8013cce:	dd08      	ble.n	8013ce2 <__kernel_rem_pio2+0x3da>
 8013cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013cd2:	aa72      	add	r2, sp, #456	; 0x1c8
 8013cd4:	18eb      	adds	r3, r5, r3
 8013cd6:	4413      	add	r3, r2
 8013cd8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8013cdc:	3601      	adds	r6, #1
 8013cde:	3508      	adds	r5, #8
 8013ce0:	e7d6      	b.n	8013c90 <__kernel_rem_pio2+0x388>
 8013ce2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8013ce6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8013cea:	f7ec fc9d 	bl	8000628 <__aeabi_dmul>
 8013cee:	4602      	mov	r2, r0
 8013cf0:	460b      	mov	r3, r1
 8013cf2:	4640      	mov	r0, r8
 8013cf4:	4649      	mov	r1, r9
 8013cf6:	f7ec fae1 	bl	80002bc <__adddf3>
 8013cfa:	3701      	adds	r7, #1
 8013cfc:	4680      	mov	r8, r0
 8013cfe:	4689      	mov	r9, r1
 8013d00:	e7e3      	b.n	8013cca <__kernel_rem_pio2+0x3c2>
 8013d02:	3d01      	subs	r5, #1
 8013d04:	e741      	b.n	8013b8a <__kernel_rem_pio2+0x282>
 8013d06:	f1ca 0000 	rsb	r0, sl, #0
 8013d0a:	ec47 6b10 	vmov	d0, r6, r7
 8013d0e:	f000 fa83 	bl	8014218 <scalbn>
 8013d12:	ec57 6b10 	vmov	r6, r7, d0
 8013d16:	2200      	movs	r2, #0
 8013d18:	4b99      	ldr	r3, [pc, #612]	; (8013f80 <__kernel_rem_pio2+0x678>)
 8013d1a:	ee10 0a10 	vmov	r0, s0
 8013d1e:	4639      	mov	r1, r7
 8013d20:	f7ec ff08 	bl	8000b34 <__aeabi_dcmpge>
 8013d24:	b1f8      	cbz	r0, 8013d66 <__kernel_rem_pio2+0x45e>
 8013d26:	2200      	movs	r2, #0
 8013d28:	4b96      	ldr	r3, [pc, #600]	; (8013f84 <__kernel_rem_pio2+0x67c>)
 8013d2a:	4630      	mov	r0, r6
 8013d2c:	4639      	mov	r1, r7
 8013d2e:	f7ec fc7b 	bl	8000628 <__aeabi_dmul>
 8013d32:	f7ec ff29 	bl	8000b88 <__aeabi_d2iz>
 8013d36:	4680      	mov	r8, r0
 8013d38:	f7ec fc0c 	bl	8000554 <__aeabi_i2d>
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	4b90      	ldr	r3, [pc, #576]	; (8013f80 <__kernel_rem_pio2+0x678>)
 8013d40:	f7ec fc72 	bl	8000628 <__aeabi_dmul>
 8013d44:	460b      	mov	r3, r1
 8013d46:	4602      	mov	r2, r0
 8013d48:	4639      	mov	r1, r7
 8013d4a:	4630      	mov	r0, r6
 8013d4c:	f7ec fab4 	bl	80002b8 <__aeabi_dsub>
 8013d50:	f7ec ff1a 	bl	8000b88 <__aeabi_d2iz>
 8013d54:	1c65      	adds	r5, r4, #1
 8013d56:	ab0e      	add	r3, sp, #56	; 0x38
 8013d58:	f10a 0a18 	add.w	sl, sl, #24
 8013d5c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013d60:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8013d64:	e719      	b.n	8013b9a <__kernel_rem_pio2+0x292>
 8013d66:	4630      	mov	r0, r6
 8013d68:	4639      	mov	r1, r7
 8013d6a:	f7ec ff0d 	bl	8000b88 <__aeabi_d2iz>
 8013d6e:	ab0e      	add	r3, sp, #56	; 0x38
 8013d70:	4625      	mov	r5, r4
 8013d72:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013d76:	e710      	b.n	8013b9a <__kernel_rem_pio2+0x292>
 8013d78:	ab0e      	add	r3, sp, #56	; 0x38
 8013d7a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8013d7e:	f7ec fbe9 	bl	8000554 <__aeabi_i2d>
 8013d82:	4642      	mov	r2, r8
 8013d84:	464b      	mov	r3, r9
 8013d86:	f7ec fc4f 	bl	8000628 <__aeabi_dmul>
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8013d90:	4b7c      	ldr	r3, [pc, #496]	; (8013f84 <__kernel_rem_pio2+0x67c>)
 8013d92:	4640      	mov	r0, r8
 8013d94:	4649      	mov	r1, r9
 8013d96:	f7ec fc47 	bl	8000628 <__aeabi_dmul>
 8013d9a:	3f01      	subs	r7, #1
 8013d9c:	4680      	mov	r8, r0
 8013d9e:	4689      	mov	r9, r1
 8013da0:	e708      	b.n	8013bb4 <__kernel_rem_pio2+0x2ac>
 8013da2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8013da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013daa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8013dae:	f7ec fc3b 	bl	8000628 <__aeabi_dmul>
 8013db2:	4602      	mov	r2, r0
 8013db4:	460b      	mov	r3, r1
 8013db6:	4640      	mov	r0, r8
 8013db8:	4649      	mov	r1, r9
 8013dba:	f7ec fa7f 	bl	80002bc <__adddf3>
 8013dbe:	3701      	adds	r7, #1
 8013dc0:	4680      	mov	r8, r0
 8013dc2:	4689      	mov	r9, r1
 8013dc4:	9b04      	ldr	r3, [sp, #16]
 8013dc6:	429f      	cmp	r7, r3
 8013dc8:	dc01      	bgt.n	8013dce <__kernel_rem_pio2+0x4c6>
 8013dca:	45ba      	cmp	sl, r7
 8013dcc:	dae9      	bge.n	8013da2 <__kernel_rem_pio2+0x49a>
 8013dce:	ab4a      	add	r3, sp, #296	; 0x128
 8013dd0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013dd4:	e9c3 8900 	strd	r8, r9, [r3]
 8013dd8:	f10a 0a01 	add.w	sl, sl, #1
 8013ddc:	3e08      	subs	r6, #8
 8013dde:	e6f0      	b.n	8013bc2 <__kernel_rem_pio2+0x2ba>
 8013de0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8013de2:	2b03      	cmp	r3, #3
 8013de4:	d85b      	bhi.n	8013e9e <__kernel_rem_pio2+0x596>
 8013de6:	e8df f003 	tbb	[pc, r3]
 8013dea:	264a      	.short	0x264a
 8013dec:	0226      	.short	0x0226
 8013dee:	ab9a      	add	r3, sp, #616	; 0x268
 8013df0:	441c      	add	r4, r3
 8013df2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8013df6:	46a2      	mov	sl, r4
 8013df8:	46ab      	mov	fp, r5
 8013dfa:	f1bb 0f00 	cmp.w	fp, #0
 8013dfe:	dc6c      	bgt.n	8013eda <__kernel_rem_pio2+0x5d2>
 8013e00:	46a2      	mov	sl, r4
 8013e02:	46ab      	mov	fp, r5
 8013e04:	f1bb 0f01 	cmp.w	fp, #1
 8013e08:	f300 8086 	bgt.w	8013f18 <__kernel_rem_pio2+0x610>
 8013e0c:	2000      	movs	r0, #0
 8013e0e:	2100      	movs	r1, #0
 8013e10:	2d01      	cmp	r5, #1
 8013e12:	f300 80a0 	bgt.w	8013f56 <__kernel_rem_pio2+0x64e>
 8013e16:	9b02      	ldr	r3, [sp, #8]
 8013e18:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8013e1c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	f040 809e 	bne.w	8013f62 <__kernel_rem_pio2+0x65a>
 8013e26:	9b01      	ldr	r3, [sp, #4]
 8013e28:	e9c3 7800 	strd	r7, r8, [r3]
 8013e2c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8013e30:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013e34:	e033      	b.n	8013e9e <__kernel_rem_pio2+0x596>
 8013e36:	3408      	adds	r4, #8
 8013e38:	ab4a      	add	r3, sp, #296	; 0x128
 8013e3a:	441c      	add	r4, r3
 8013e3c:	462e      	mov	r6, r5
 8013e3e:	2000      	movs	r0, #0
 8013e40:	2100      	movs	r1, #0
 8013e42:	2e00      	cmp	r6, #0
 8013e44:	da3a      	bge.n	8013ebc <__kernel_rem_pio2+0x5b4>
 8013e46:	9b02      	ldr	r3, [sp, #8]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d03d      	beq.n	8013ec8 <__kernel_rem_pio2+0x5c0>
 8013e4c:	4602      	mov	r2, r0
 8013e4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013e52:	9c01      	ldr	r4, [sp, #4]
 8013e54:	e9c4 2300 	strd	r2, r3, [r4]
 8013e58:	4602      	mov	r2, r0
 8013e5a:	460b      	mov	r3, r1
 8013e5c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8013e60:	f7ec fa2a 	bl	80002b8 <__aeabi_dsub>
 8013e64:	ae4c      	add	r6, sp, #304	; 0x130
 8013e66:	2401      	movs	r4, #1
 8013e68:	42a5      	cmp	r5, r4
 8013e6a:	da30      	bge.n	8013ece <__kernel_rem_pio2+0x5c6>
 8013e6c:	9b02      	ldr	r3, [sp, #8]
 8013e6e:	b113      	cbz	r3, 8013e76 <__kernel_rem_pio2+0x56e>
 8013e70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013e74:	4619      	mov	r1, r3
 8013e76:	9b01      	ldr	r3, [sp, #4]
 8013e78:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013e7c:	e00f      	b.n	8013e9e <__kernel_rem_pio2+0x596>
 8013e7e:	ab9a      	add	r3, sp, #616	; 0x268
 8013e80:	441c      	add	r4, r3
 8013e82:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8013e86:	2000      	movs	r0, #0
 8013e88:	2100      	movs	r1, #0
 8013e8a:	2d00      	cmp	r5, #0
 8013e8c:	da10      	bge.n	8013eb0 <__kernel_rem_pio2+0x5a8>
 8013e8e:	9b02      	ldr	r3, [sp, #8]
 8013e90:	b113      	cbz	r3, 8013e98 <__kernel_rem_pio2+0x590>
 8013e92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013e96:	4619      	mov	r1, r3
 8013e98:	9b01      	ldr	r3, [sp, #4]
 8013e9a:	e9c3 0100 	strd	r0, r1, [r3]
 8013e9e:	9b06      	ldr	r3, [sp, #24]
 8013ea0:	f003 0007 	and.w	r0, r3, #7
 8013ea4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8013ea8:	ecbd 8b02 	vpop	{d8}
 8013eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013eb0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013eb4:	f7ec fa02 	bl	80002bc <__adddf3>
 8013eb8:	3d01      	subs	r5, #1
 8013eba:	e7e6      	b.n	8013e8a <__kernel_rem_pio2+0x582>
 8013ebc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013ec0:	f7ec f9fc 	bl	80002bc <__adddf3>
 8013ec4:	3e01      	subs	r6, #1
 8013ec6:	e7bc      	b.n	8013e42 <__kernel_rem_pio2+0x53a>
 8013ec8:	4602      	mov	r2, r0
 8013eca:	460b      	mov	r3, r1
 8013ecc:	e7c1      	b.n	8013e52 <__kernel_rem_pio2+0x54a>
 8013ece:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8013ed2:	f7ec f9f3 	bl	80002bc <__adddf3>
 8013ed6:	3401      	adds	r4, #1
 8013ed8:	e7c6      	b.n	8013e68 <__kernel_rem_pio2+0x560>
 8013eda:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8013ede:	ed3a 7b02 	vldmdb	sl!, {d7}
 8013ee2:	4640      	mov	r0, r8
 8013ee4:	ec53 2b17 	vmov	r2, r3, d7
 8013ee8:	4649      	mov	r1, r9
 8013eea:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013eee:	f7ec f9e5 	bl	80002bc <__adddf3>
 8013ef2:	4602      	mov	r2, r0
 8013ef4:	460b      	mov	r3, r1
 8013ef6:	4606      	mov	r6, r0
 8013ef8:	460f      	mov	r7, r1
 8013efa:	4640      	mov	r0, r8
 8013efc:	4649      	mov	r1, r9
 8013efe:	f7ec f9db 	bl	80002b8 <__aeabi_dsub>
 8013f02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013f06:	f7ec f9d9 	bl	80002bc <__adddf3>
 8013f0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013f0e:	e9ca 0100 	strd	r0, r1, [sl]
 8013f12:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8013f16:	e770      	b.n	8013dfa <__kernel_rem_pio2+0x4f2>
 8013f18:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8013f1c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8013f20:	4630      	mov	r0, r6
 8013f22:	ec53 2b17 	vmov	r2, r3, d7
 8013f26:	4639      	mov	r1, r7
 8013f28:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013f2c:	f7ec f9c6 	bl	80002bc <__adddf3>
 8013f30:	4602      	mov	r2, r0
 8013f32:	460b      	mov	r3, r1
 8013f34:	4680      	mov	r8, r0
 8013f36:	4689      	mov	r9, r1
 8013f38:	4630      	mov	r0, r6
 8013f3a:	4639      	mov	r1, r7
 8013f3c:	f7ec f9bc 	bl	80002b8 <__aeabi_dsub>
 8013f40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013f44:	f7ec f9ba 	bl	80002bc <__adddf3>
 8013f48:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013f4c:	e9ca 0100 	strd	r0, r1, [sl]
 8013f50:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8013f54:	e756      	b.n	8013e04 <__kernel_rem_pio2+0x4fc>
 8013f56:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013f5a:	f7ec f9af 	bl	80002bc <__adddf3>
 8013f5e:	3d01      	subs	r5, #1
 8013f60:	e756      	b.n	8013e10 <__kernel_rem_pio2+0x508>
 8013f62:	9b01      	ldr	r3, [sp, #4]
 8013f64:	9a01      	ldr	r2, [sp, #4]
 8013f66:	601f      	str	r7, [r3, #0]
 8013f68:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8013f6c:	605c      	str	r4, [r3, #4]
 8013f6e:	609d      	str	r5, [r3, #8]
 8013f70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013f74:	60d3      	str	r3, [r2, #12]
 8013f76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013f7a:	6110      	str	r0, [r2, #16]
 8013f7c:	6153      	str	r3, [r2, #20]
 8013f7e:	e78e      	b.n	8013e9e <__kernel_rem_pio2+0x596>
 8013f80:	41700000 	.word	0x41700000
 8013f84:	3e700000 	.word	0x3e700000

08013f88 <__kernel_sin>:
 8013f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f8c:	ec55 4b10 	vmov	r4, r5, d0
 8013f90:	b085      	sub	sp, #20
 8013f92:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013f96:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013f9a:	ed8d 1b00 	vstr	d1, [sp]
 8013f9e:	9002      	str	r0, [sp, #8]
 8013fa0:	da06      	bge.n	8013fb0 <__kernel_sin+0x28>
 8013fa2:	ee10 0a10 	vmov	r0, s0
 8013fa6:	4629      	mov	r1, r5
 8013fa8:	f7ec fdee 	bl	8000b88 <__aeabi_d2iz>
 8013fac:	2800      	cmp	r0, #0
 8013fae:	d051      	beq.n	8014054 <__kernel_sin+0xcc>
 8013fb0:	4622      	mov	r2, r4
 8013fb2:	462b      	mov	r3, r5
 8013fb4:	4620      	mov	r0, r4
 8013fb6:	4629      	mov	r1, r5
 8013fb8:	f7ec fb36 	bl	8000628 <__aeabi_dmul>
 8013fbc:	4682      	mov	sl, r0
 8013fbe:	468b      	mov	fp, r1
 8013fc0:	4602      	mov	r2, r0
 8013fc2:	460b      	mov	r3, r1
 8013fc4:	4620      	mov	r0, r4
 8013fc6:	4629      	mov	r1, r5
 8013fc8:	f7ec fb2e 	bl	8000628 <__aeabi_dmul>
 8013fcc:	a341      	add	r3, pc, #260	; (adr r3, 80140d4 <__kernel_sin+0x14c>)
 8013fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fd2:	4680      	mov	r8, r0
 8013fd4:	4689      	mov	r9, r1
 8013fd6:	4650      	mov	r0, sl
 8013fd8:	4659      	mov	r1, fp
 8013fda:	f7ec fb25 	bl	8000628 <__aeabi_dmul>
 8013fde:	a33f      	add	r3, pc, #252	; (adr r3, 80140dc <__kernel_sin+0x154>)
 8013fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fe4:	f7ec f968 	bl	80002b8 <__aeabi_dsub>
 8013fe8:	4652      	mov	r2, sl
 8013fea:	465b      	mov	r3, fp
 8013fec:	f7ec fb1c 	bl	8000628 <__aeabi_dmul>
 8013ff0:	a33c      	add	r3, pc, #240	; (adr r3, 80140e4 <__kernel_sin+0x15c>)
 8013ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ff6:	f7ec f961 	bl	80002bc <__adddf3>
 8013ffa:	4652      	mov	r2, sl
 8013ffc:	465b      	mov	r3, fp
 8013ffe:	f7ec fb13 	bl	8000628 <__aeabi_dmul>
 8014002:	a33a      	add	r3, pc, #232	; (adr r3, 80140ec <__kernel_sin+0x164>)
 8014004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014008:	f7ec f956 	bl	80002b8 <__aeabi_dsub>
 801400c:	4652      	mov	r2, sl
 801400e:	465b      	mov	r3, fp
 8014010:	f7ec fb0a 	bl	8000628 <__aeabi_dmul>
 8014014:	a337      	add	r3, pc, #220	; (adr r3, 80140f4 <__kernel_sin+0x16c>)
 8014016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801401a:	f7ec f94f 	bl	80002bc <__adddf3>
 801401e:	9b02      	ldr	r3, [sp, #8]
 8014020:	4606      	mov	r6, r0
 8014022:	460f      	mov	r7, r1
 8014024:	b9db      	cbnz	r3, 801405e <__kernel_sin+0xd6>
 8014026:	4602      	mov	r2, r0
 8014028:	460b      	mov	r3, r1
 801402a:	4650      	mov	r0, sl
 801402c:	4659      	mov	r1, fp
 801402e:	f7ec fafb 	bl	8000628 <__aeabi_dmul>
 8014032:	a325      	add	r3, pc, #148	; (adr r3, 80140c8 <__kernel_sin+0x140>)
 8014034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014038:	f7ec f93e 	bl	80002b8 <__aeabi_dsub>
 801403c:	4642      	mov	r2, r8
 801403e:	464b      	mov	r3, r9
 8014040:	f7ec faf2 	bl	8000628 <__aeabi_dmul>
 8014044:	4602      	mov	r2, r0
 8014046:	460b      	mov	r3, r1
 8014048:	4620      	mov	r0, r4
 801404a:	4629      	mov	r1, r5
 801404c:	f7ec f936 	bl	80002bc <__adddf3>
 8014050:	4604      	mov	r4, r0
 8014052:	460d      	mov	r5, r1
 8014054:	ec45 4b10 	vmov	d0, r4, r5
 8014058:	b005      	add	sp, #20
 801405a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801405e:	2200      	movs	r2, #0
 8014060:	4b1b      	ldr	r3, [pc, #108]	; (80140d0 <__kernel_sin+0x148>)
 8014062:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014066:	f7ec fadf 	bl	8000628 <__aeabi_dmul>
 801406a:	4632      	mov	r2, r6
 801406c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014070:	463b      	mov	r3, r7
 8014072:	4640      	mov	r0, r8
 8014074:	4649      	mov	r1, r9
 8014076:	f7ec fad7 	bl	8000628 <__aeabi_dmul>
 801407a:	4602      	mov	r2, r0
 801407c:	460b      	mov	r3, r1
 801407e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014082:	f7ec f919 	bl	80002b8 <__aeabi_dsub>
 8014086:	4652      	mov	r2, sl
 8014088:	465b      	mov	r3, fp
 801408a:	f7ec facd 	bl	8000628 <__aeabi_dmul>
 801408e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014092:	f7ec f911 	bl	80002b8 <__aeabi_dsub>
 8014096:	a30c      	add	r3, pc, #48	; (adr r3, 80140c8 <__kernel_sin+0x140>)
 8014098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801409c:	4606      	mov	r6, r0
 801409e:	460f      	mov	r7, r1
 80140a0:	4640      	mov	r0, r8
 80140a2:	4649      	mov	r1, r9
 80140a4:	f7ec fac0 	bl	8000628 <__aeabi_dmul>
 80140a8:	4602      	mov	r2, r0
 80140aa:	460b      	mov	r3, r1
 80140ac:	4630      	mov	r0, r6
 80140ae:	4639      	mov	r1, r7
 80140b0:	f7ec f904 	bl	80002bc <__adddf3>
 80140b4:	4602      	mov	r2, r0
 80140b6:	460b      	mov	r3, r1
 80140b8:	4620      	mov	r0, r4
 80140ba:	4629      	mov	r1, r5
 80140bc:	f7ec f8fc 	bl	80002b8 <__aeabi_dsub>
 80140c0:	e7c6      	b.n	8014050 <__kernel_sin+0xc8>
 80140c2:	bf00      	nop
 80140c4:	f3af 8000 	nop.w
 80140c8:	55555549 	.word	0x55555549
 80140cc:	3fc55555 	.word	0x3fc55555
 80140d0:	3fe00000 	.word	0x3fe00000
 80140d4:	5acfd57c 	.word	0x5acfd57c
 80140d8:	3de5d93a 	.word	0x3de5d93a
 80140dc:	8a2b9ceb 	.word	0x8a2b9ceb
 80140e0:	3e5ae5e6 	.word	0x3e5ae5e6
 80140e4:	57b1fe7d 	.word	0x57b1fe7d
 80140e8:	3ec71de3 	.word	0x3ec71de3
 80140ec:	19c161d5 	.word	0x19c161d5
 80140f0:	3f2a01a0 	.word	0x3f2a01a0
 80140f4:	1110f8a6 	.word	0x1110f8a6
 80140f8:	3f811111 	.word	0x3f811111

080140fc <fabs>:
 80140fc:	ec51 0b10 	vmov	r0, r1, d0
 8014100:	ee10 2a10 	vmov	r2, s0
 8014104:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014108:	ec43 2b10 	vmov	d0, r2, r3
 801410c:	4770      	bx	lr
	...

08014110 <floor>:
 8014110:	ec51 0b10 	vmov	r0, r1, d0
 8014114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014118:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801411c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8014120:	2e13      	cmp	r6, #19
 8014122:	460c      	mov	r4, r1
 8014124:	ee10 5a10 	vmov	r5, s0
 8014128:	4680      	mov	r8, r0
 801412a:	dc34      	bgt.n	8014196 <floor+0x86>
 801412c:	2e00      	cmp	r6, #0
 801412e:	da16      	bge.n	801415e <floor+0x4e>
 8014130:	a335      	add	r3, pc, #212	; (adr r3, 8014208 <floor+0xf8>)
 8014132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014136:	f7ec f8c1 	bl	80002bc <__adddf3>
 801413a:	2200      	movs	r2, #0
 801413c:	2300      	movs	r3, #0
 801413e:	f7ec fd03 	bl	8000b48 <__aeabi_dcmpgt>
 8014142:	b148      	cbz	r0, 8014158 <floor+0x48>
 8014144:	2c00      	cmp	r4, #0
 8014146:	da59      	bge.n	80141fc <floor+0xec>
 8014148:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801414c:	4a30      	ldr	r2, [pc, #192]	; (8014210 <floor+0x100>)
 801414e:	432b      	orrs	r3, r5
 8014150:	2500      	movs	r5, #0
 8014152:	42ab      	cmp	r3, r5
 8014154:	bf18      	it	ne
 8014156:	4614      	movne	r4, r2
 8014158:	4621      	mov	r1, r4
 801415a:	4628      	mov	r0, r5
 801415c:	e025      	b.n	80141aa <floor+0x9a>
 801415e:	4f2d      	ldr	r7, [pc, #180]	; (8014214 <floor+0x104>)
 8014160:	4137      	asrs	r7, r6
 8014162:	ea01 0307 	and.w	r3, r1, r7
 8014166:	4303      	orrs	r3, r0
 8014168:	d01f      	beq.n	80141aa <floor+0x9a>
 801416a:	a327      	add	r3, pc, #156	; (adr r3, 8014208 <floor+0xf8>)
 801416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014170:	f7ec f8a4 	bl	80002bc <__adddf3>
 8014174:	2200      	movs	r2, #0
 8014176:	2300      	movs	r3, #0
 8014178:	f7ec fce6 	bl	8000b48 <__aeabi_dcmpgt>
 801417c:	2800      	cmp	r0, #0
 801417e:	d0eb      	beq.n	8014158 <floor+0x48>
 8014180:	2c00      	cmp	r4, #0
 8014182:	bfbe      	ittt	lt
 8014184:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8014188:	fa43 f606 	asrlt.w	r6, r3, r6
 801418c:	19a4      	addlt	r4, r4, r6
 801418e:	ea24 0407 	bic.w	r4, r4, r7
 8014192:	2500      	movs	r5, #0
 8014194:	e7e0      	b.n	8014158 <floor+0x48>
 8014196:	2e33      	cmp	r6, #51	; 0x33
 8014198:	dd0b      	ble.n	80141b2 <floor+0xa2>
 801419a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801419e:	d104      	bne.n	80141aa <floor+0x9a>
 80141a0:	ee10 2a10 	vmov	r2, s0
 80141a4:	460b      	mov	r3, r1
 80141a6:	f7ec f889 	bl	80002bc <__adddf3>
 80141aa:	ec41 0b10 	vmov	d0, r0, r1
 80141ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141b2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80141b6:	f04f 33ff 	mov.w	r3, #4294967295
 80141ba:	fa23 f707 	lsr.w	r7, r3, r7
 80141be:	4207      	tst	r7, r0
 80141c0:	d0f3      	beq.n	80141aa <floor+0x9a>
 80141c2:	a311      	add	r3, pc, #68	; (adr r3, 8014208 <floor+0xf8>)
 80141c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c8:	f7ec f878 	bl	80002bc <__adddf3>
 80141cc:	2200      	movs	r2, #0
 80141ce:	2300      	movs	r3, #0
 80141d0:	f7ec fcba 	bl	8000b48 <__aeabi_dcmpgt>
 80141d4:	2800      	cmp	r0, #0
 80141d6:	d0bf      	beq.n	8014158 <floor+0x48>
 80141d8:	2c00      	cmp	r4, #0
 80141da:	da02      	bge.n	80141e2 <floor+0xd2>
 80141dc:	2e14      	cmp	r6, #20
 80141de:	d103      	bne.n	80141e8 <floor+0xd8>
 80141e0:	3401      	adds	r4, #1
 80141e2:	ea25 0507 	bic.w	r5, r5, r7
 80141e6:	e7b7      	b.n	8014158 <floor+0x48>
 80141e8:	2301      	movs	r3, #1
 80141ea:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80141ee:	fa03 f606 	lsl.w	r6, r3, r6
 80141f2:	4435      	add	r5, r6
 80141f4:	4545      	cmp	r5, r8
 80141f6:	bf38      	it	cc
 80141f8:	18e4      	addcc	r4, r4, r3
 80141fa:	e7f2      	b.n	80141e2 <floor+0xd2>
 80141fc:	2500      	movs	r5, #0
 80141fe:	462c      	mov	r4, r5
 8014200:	e7aa      	b.n	8014158 <floor+0x48>
 8014202:	bf00      	nop
 8014204:	f3af 8000 	nop.w
 8014208:	8800759c 	.word	0x8800759c
 801420c:	7e37e43c 	.word	0x7e37e43c
 8014210:	bff00000 	.word	0xbff00000
 8014214:	000fffff 	.word	0x000fffff

08014218 <scalbn>:
 8014218:	b570      	push	{r4, r5, r6, lr}
 801421a:	ec55 4b10 	vmov	r4, r5, d0
 801421e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014222:	4606      	mov	r6, r0
 8014224:	462b      	mov	r3, r5
 8014226:	b9aa      	cbnz	r2, 8014254 <scalbn+0x3c>
 8014228:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801422c:	4323      	orrs	r3, r4
 801422e:	d03b      	beq.n	80142a8 <scalbn+0x90>
 8014230:	4b31      	ldr	r3, [pc, #196]	; (80142f8 <scalbn+0xe0>)
 8014232:	4629      	mov	r1, r5
 8014234:	2200      	movs	r2, #0
 8014236:	ee10 0a10 	vmov	r0, s0
 801423a:	f7ec f9f5 	bl	8000628 <__aeabi_dmul>
 801423e:	4b2f      	ldr	r3, [pc, #188]	; (80142fc <scalbn+0xe4>)
 8014240:	429e      	cmp	r6, r3
 8014242:	4604      	mov	r4, r0
 8014244:	460d      	mov	r5, r1
 8014246:	da12      	bge.n	801426e <scalbn+0x56>
 8014248:	a327      	add	r3, pc, #156	; (adr r3, 80142e8 <scalbn+0xd0>)
 801424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801424e:	f7ec f9eb 	bl	8000628 <__aeabi_dmul>
 8014252:	e009      	b.n	8014268 <scalbn+0x50>
 8014254:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014258:	428a      	cmp	r2, r1
 801425a:	d10c      	bne.n	8014276 <scalbn+0x5e>
 801425c:	ee10 2a10 	vmov	r2, s0
 8014260:	4620      	mov	r0, r4
 8014262:	4629      	mov	r1, r5
 8014264:	f7ec f82a 	bl	80002bc <__adddf3>
 8014268:	4604      	mov	r4, r0
 801426a:	460d      	mov	r5, r1
 801426c:	e01c      	b.n	80142a8 <scalbn+0x90>
 801426e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014272:	460b      	mov	r3, r1
 8014274:	3a36      	subs	r2, #54	; 0x36
 8014276:	4432      	add	r2, r6
 8014278:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801427c:	428a      	cmp	r2, r1
 801427e:	dd0b      	ble.n	8014298 <scalbn+0x80>
 8014280:	ec45 4b11 	vmov	d1, r4, r5
 8014284:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80142f0 <scalbn+0xd8>
 8014288:	f000 f83c 	bl	8014304 <copysign>
 801428c:	a318      	add	r3, pc, #96	; (adr r3, 80142f0 <scalbn+0xd8>)
 801428e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014292:	ec51 0b10 	vmov	r0, r1, d0
 8014296:	e7da      	b.n	801424e <scalbn+0x36>
 8014298:	2a00      	cmp	r2, #0
 801429a:	dd08      	ble.n	80142ae <scalbn+0x96>
 801429c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80142a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80142a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80142a8:	ec45 4b10 	vmov	d0, r4, r5
 80142ac:	bd70      	pop	{r4, r5, r6, pc}
 80142ae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80142b2:	da0d      	bge.n	80142d0 <scalbn+0xb8>
 80142b4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80142b8:	429e      	cmp	r6, r3
 80142ba:	ec45 4b11 	vmov	d1, r4, r5
 80142be:	dce1      	bgt.n	8014284 <scalbn+0x6c>
 80142c0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80142e8 <scalbn+0xd0>
 80142c4:	f000 f81e 	bl	8014304 <copysign>
 80142c8:	a307      	add	r3, pc, #28	; (adr r3, 80142e8 <scalbn+0xd0>)
 80142ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ce:	e7e0      	b.n	8014292 <scalbn+0x7a>
 80142d0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80142d4:	3236      	adds	r2, #54	; 0x36
 80142d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80142da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80142de:	4620      	mov	r0, r4
 80142e0:	4629      	mov	r1, r5
 80142e2:	2200      	movs	r2, #0
 80142e4:	4b06      	ldr	r3, [pc, #24]	; (8014300 <scalbn+0xe8>)
 80142e6:	e7b2      	b.n	801424e <scalbn+0x36>
 80142e8:	c2f8f359 	.word	0xc2f8f359
 80142ec:	01a56e1f 	.word	0x01a56e1f
 80142f0:	8800759c 	.word	0x8800759c
 80142f4:	7e37e43c 	.word	0x7e37e43c
 80142f8:	43500000 	.word	0x43500000
 80142fc:	ffff3cb0 	.word	0xffff3cb0
 8014300:	3c900000 	.word	0x3c900000

08014304 <copysign>:
 8014304:	ec51 0b10 	vmov	r0, r1, d0
 8014308:	ee11 0a90 	vmov	r0, s3
 801430c:	ee10 2a10 	vmov	r2, s0
 8014310:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014314:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8014318:	ea41 0300 	orr.w	r3, r1, r0
 801431c:	ec43 2b10 	vmov	d0, r2, r3
 8014320:	4770      	bx	lr
	...

08014324 <__errno>:
 8014324:	4b01      	ldr	r3, [pc, #4]	; (801432c <__errno+0x8>)
 8014326:	6818      	ldr	r0, [r3, #0]
 8014328:	4770      	bx	lr
 801432a:	bf00      	nop
 801432c:	2000000c 	.word	0x2000000c

08014330 <__libc_init_array>:
 8014330:	b570      	push	{r4, r5, r6, lr}
 8014332:	4e0d      	ldr	r6, [pc, #52]	; (8014368 <__libc_init_array+0x38>)
 8014334:	4c0d      	ldr	r4, [pc, #52]	; (801436c <__libc_init_array+0x3c>)
 8014336:	1ba4      	subs	r4, r4, r6
 8014338:	10a4      	asrs	r4, r4, #2
 801433a:	2500      	movs	r5, #0
 801433c:	42a5      	cmp	r5, r4
 801433e:	d109      	bne.n	8014354 <__libc_init_array+0x24>
 8014340:	4e0b      	ldr	r6, [pc, #44]	; (8014370 <__libc_init_array+0x40>)
 8014342:	4c0c      	ldr	r4, [pc, #48]	; (8014374 <__libc_init_array+0x44>)
 8014344:	f004 f9e8 	bl	8018718 <_init>
 8014348:	1ba4      	subs	r4, r4, r6
 801434a:	10a4      	asrs	r4, r4, #2
 801434c:	2500      	movs	r5, #0
 801434e:	42a5      	cmp	r5, r4
 8014350:	d105      	bne.n	801435e <__libc_init_array+0x2e>
 8014352:	bd70      	pop	{r4, r5, r6, pc}
 8014354:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014358:	4798      	blx	r3
 801435a:	3501      	adds	r5, #1
 801435c:	e7ee      	b.n	801433c <__libc_init_array+0xc>
 801435e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014362:	4798      	blx	r3
 8014364:	3501      	adds	r5, #1
 8014366:	e7f2      	b.n	801434e <__libc_init_array+0x1e>
 8014368:	08019284 	.word	0x08019284
 801436c:	08019284 	.word	0x08019284
 8014370:	08019284 	.word	0x08019284
 8014374:	0801928c 	.word	0x0801928c

08014378 <memcpy>:
 8014378:	b510      	push	{r4, lr}
 801437a:	1e43      	subs	r3, r0, #1
 801437c:	440a      	add	r2, r1
 801437e:	4291      	cmp	r1, r2
 8014380:	d100      	bne.n	8014384 <memcpy+0xc>
 8014382:	bd10      	pop	{r4, pc}
 8014384:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014388:	f803 4f01 	strb.w	r4, [r3, #1]!
 801438c:	e7f7      	b.n	801437e <memcpy+0x6>

0801438e <memset>:
 801438e:	4402      	add	r2, r0
 8014390:	4603      	mov	r3, r0
 8014392:	4293      	cmp	r3, r2
 8014394:	d100      	bne.n	8014398 <memset+0xa>
 8014396:	4770      	bx	lr
 8014398:	f803 1b01 	strb.w	r1, [r3], #1
 801439c:	e7f9      	b.n	8014392 <memset+0x4>

0801439e <__cvt>:
 801439e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80143a2:	ec55 4b10 	vmov	r4, r5, d0
 80143a6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80143a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80143ac:	2d00      	cmp	r5, #0
 80143ae:	460e      	mov	r6, r1
 80143b0:	4691      	mov	r9, r2
 80143b2:	4619      	mov	r1, r3
 80143b4:	bfb8      	it	lt
 80143b6:	4622      	movlt	r2, r4
 80143b8:	462b      	mov	r3, r5
 80143ba:	f027 0720 	bic.w	r7, r7, #32
 80143be:	bfbb      	ittet	lt
 80143c0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80143c4:	461d      	movlt	r5, r3
 80143c6:	2300      	movge	r3, #0
 80143c8:	232d      	movlt	r3, #45	; 0x2d
 80143ca:	bfb8      	it	lt
 80143cc:	4614      	movlt	r4, r2
 80143ce:	2f46      	cmp	r7, #70	; 0x46
 80143d0:	700b      	strb	r3, [r1, #0]
 80143d2:	d004      	beq.n	80143de <__cvt+0x40>
 80143d4:	2f45      	cmp	r7, #69	; 0x45
 80143d6:	d100      	bne.n	80143da <__cvt+0x3c>
 80143d8:	3601      	adds	r6, #1
 80143da:	2102      	movs	r1, #2
 80143dc:	e000      	b.n	80143e0 <__cvt+0x42>
 80143de:	2103      	movs	r1, #3
 80143e0:	ab03      	add	r3, sp, #12
 80143e2:	9301      	str	r3, [sp, #4]
 80143e4:	ab02      	add	r3, sp, #8
 80143e6:	9300      	str	r3, [sp, #0]
 80143e8:	4632      	mov	r2, r6
 80143ea:	4653      	mov	r3, sl
 80143ec:	ec45 4b10 	vmov	d0, r4, r5
 80143f0:	f001 fdfe 	bl	8015ff0 <_dtoa_r>
 80143f4:	2f47      	cmp	r7, #71	; 0x47
 80143f6:	4680      	mov	r8, r0
 80143f8:	d102      	bne.n	8014400 <__cvt+0x62>
 80143fa:	f019 0f01 	tst.w	r9, #1
 80143fe:	d026      	beq.n	801444e <__cvt+0xb0>
 8014400:	2f46      	cmp	r7, #70	; 0x46
 8014402:	eb08 0906 	add.w	r9, r8, r6
 8014406:	d111      	bne.n	801442c <__cvt+0x8e>
 8014408:	f898 3000 	ldrb.w	r3, [r8]
 801440c:	2b30      	cmp	r3, #48	; 0x30
 801440e:	d10a      	bne.n	8014426 <__cvt+0x88>
 8014410:	2200      	movs	r2, #0
 8014412:	2300      	movs	r3, #0
 8014414:	4620      	mov	r0, r4
 8014416:	4629      	mov	r1, r5
 8014418:	f7ec fb6e 	bl	8000af8 <__aeabi_dcmpeq>
 801441c:	b918      	cbnz	r0, 8014426 <__cvt+0x88>
 801441e:	f1c6 0601 	rsb	r6, r6, #1
 8014422:	f8ca 6000 	str.w	r6, [sl]
 8014426:	f8da 3000 	ldr.w	r3, [sl]
 801442a:	4499      	add	r9, r3
 801442c:	2200      	movs	r2, #0
 801442e:	2300      	movs	r3, #0
 8014430:	4620      	mov	r0, r4
 8014432:	4629      	mov	r1, r5
 8014434:	f7ec fb60 	bl	8000af8 <__aeabi_dcmpeq>
 8014438:	b938      	cbnz	r0, 801444a <__cvt+0xac>
 801443a:	2230      	movs	r2, #48	; 0x30
 801443c:	9b03      	ldr	r3, [sp, #12]
 801443e:	454b      	cmp	r3, r9
 8014440:	d205      	bcs.n	801444e <__cvt+0xb0>
 8014442:	1c59      	adds	r1, r3, #1
 8014444:	9103      	str	r1, [sp, #12]
 8014446:	701a      	strb	r2, [r3, #0]
 8014448:	e7f8      	b.n	801443c <__cvt+0x9e>
 801444a:	f8cd 900c 	str.w	r9, [sp, #12]
 801444e:	9b03      	ldr	r3, [sp, #12]
 8014450:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014452:	eba3 0308 	sub.w	r3, r3, r8
 8014456:	4640      	mov	r0, r8
 8014458:	6013      	str	r3, [r2, #0]
 801445a:	b004      	add	sp, #16
 801445c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014460 <__exponent>:
 8014460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014462:	2900      	cmp	r1, #0
 8014464:	4604      	mov	r4, r0
 8014466:	bfba      	itte	lt
 8014468:	4249      	neglt	r1, r1
 801446a:	232d      	movlt	r3, #45	; 0x2d
 801446c:	232b      	movge	r3, #43	; 0x2b
 801446e:	2909      	cmp	r1, #9
 8014470:	f804 2b02 	strb.w	r2, [r4], #2
 8014474:	7043      	strb	r3, [r0, #1]
 8014476:	dd20      	ble.n	80144ba <__exponent+0x5a>
 8014478:	f10d 0307 	add.w	r3, sp, #7
 801447c:	461f      	mov	r7, r3
 801447e:	260a      	movs	r6, #10
 8014480:	fb91 f5f6 	sdiv	r5, r1, r6
 8014484:	fb06 1115 	mls	r1, r6, r5, r1
 8014488:	3130      	adds	r1, #48	; 0x30
 801448a:	2d09      	cmp	r5, #9
 801448c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014490:	f103 32ff 	add.w	r2, r3, #4294967295
 8014494:	4629      	mov	r1, r5
 8014496:	dc09      	bgt.n	80144ac <__exponent+0x4c>
 8014498:	3130      	adds	r1, #48	; 0x30
 801449a:	3b02      	subs	r3, #2
 801449c:	f802 1c01 	strb.w	r1, [r2, #-1]
 80144a0:	42bb      	cmp	r3, r7
 80144a2:	4622      	mov	r2, r4
 80144a4:	d304      	bcc.n	80144b0 <__exponent+0x50>
 80144a6:	1a10      	subs	r0, r2, r0
 80144a8:	b003      	add	sp, #12
 80144aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144ac:	4613      	mov	r3, r2
 80144ae:	e7e7      	b.n	8014480 <__exponent+0x20>
 80144b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80144b4:	f804 2b01 	strb.w	r2, [r4], #1
 80144b8:	e7f2      	b.n	80144a0 <__exponent+0x40>
 80144ba:	2330      	movs	r3, #48	; 0x30
 80144bc:	4419      	add	r1, r3
 80144be:	7083      	strb	r3, [r0, #2]
 80144c0:	1d02      	adds	r2, r0, #4
 80144c2:	70c1      	strb	r1, [r0, #3]
 80144c4:	e7ef      	b.n	80144a6 <__exponent+0x46>
	...

080144c8 <_printf_float>:
 80144c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144cc:	b08d      	sub	sp, #52	; 0x34
 80144ce:	460c      	mov	r4, r1
 80144d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80144d4:	4616      	mov	r6, r2
 80144d6:	461f      	mov	r7, r3
 80144d8:	4605      	mov	r5, r0
 80144da:	f002 fe7b 	bl	80171d4 <_localeconv_r>
 80144de:	6803      	ldr	r3, [r0, #0]
 80144e0:	9304      	str	r3, [sp, #16]
 80144e2:	4618      	mov	r0, r3
 80144e4:	f7eb fe8c 	bl	8000200 <strlen>
 80144e8:	2300      	movs	r3, #0
 80144ea:	930a      	str	r3, [sp, #40]	; 0x28
 80144ec:	f8d8 3000 	ldr.w	r3, [r8]
 80144f0:	9005      	str	r0, [sp, #20]
 80144f2:	3307      	adds	r3, #7
 80144f4:	f023 0307 	bic.w	r3, r3, #7
 80144f8:	f103 0208 	add.w	r2, r3, #8
 80144fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014500:	f8d4 b000 	ldr.w	fp, [r4]
 8014504:	f8c8 2000 	str.w	r2, [r8]
 8014508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801450c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014510:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014514:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014518:	9307      	str	r3, [sp, #28]
 801451a:	f8cd 8018 	str.w	r8, [sp, #24]
 801451e:	f04f 32ff 	mov.w	r2, #4294967295
 8014522:	4ba7      	ldr	r3, [pc, #668]	; (80147c0 <_printf_float+0x2f8>)
 8014524:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014528:	f7ec fb18 	bl	8000b5c <__aeabi_dcmpun>
 801452c:	bb70      	cbnz	r0, 801458c <_printf_float+0xc4>
 801452e:	f04f 32ff 	mov.w	r2, #4294967295
 8014532:	4ba3      	ldr	r3, [pc, #652]	; (80147c0 <_printf_float+0x2f8>)
 8014534:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014538:	f7ec faf2 	bl	8000b20 <__aeabi_dcmple>
 801453c:	bb30      	cbnz	r0, 801458c <_printf_float+0xc4>
 801453e:	2200      	movs	r2, #0
 8014540:	2300      	movs	r3, #0
 8014542:	4640      	mov	r0, r8
 8014544:	4649      	mov	r1, r9
 8014546:	f7ec fae1 	bl	8000b0c <__aeabi_dcmplt>
 801454a:	b110      	cbz	r0, 8014552 <_printf_float+0x8a>
 801454c:	232d      	movs	r3, #45	; 0x2d
 801454e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014552:	4a9c      	ldr	r2, [pc, #624]	; (80147c4 <_printf_float+0x2fc>)
 8014554:	4b9c      	ldr	r3, [pc, #624]	; (80147c8 <_printf_float+0x300>)
 8014556:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801455a:	bf8c      	ite	hi
 801455c:	4690      	movhi	r8, r2
 801455e:	4698      	movls	r8, r3
 8014560:	2303      	movs	r3, #3
 8014562:	f02b 0204 	bic.w	r2, fp, #4
 8014566:	6123      	str	r3, [r4, #16]
 8014568:	6022      	str	r2, [r4, #0]
 801456a:	f04f 0900 	mov.w	r9, #0
 801456e:	9700      	str	r7, [sp, #0]
 8014570:	4633      	mov	r3, r6
 8014572:	aa0b      	add	r2, sp, #44	; 0x2c
 8014574:	4621      	mov	r1, r4
 8014576:	4628      	mov	r0, r5
 8014578:	f000 f9e6 	bl	8014948 <_printf_common>
 801457c:	3001      	adds	r0, #1
 801457e:	f040 808d 	bne.w	801469c <_printf_float+0x1d4>
 8014582:	f04f 30ff 	mov.w	r0, #4294967295
 8014586:	b00d      	add	sp, #52	; 0x34
 8014588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801458c:	4642      	mov	r2, r8
 801458e:	464b      	mov	r3, r9
 8014590:	4640      	mov	r0, r8
 8014592:	4649      	mov	r1, r9
 8014594:	f7ec fae2 	bl	8000b5c <__aeabi_dcmpun>
 8014598:	b110      	cbz	r0, 80145a0 <_printf_float+0xd8>
 801459a:	4a8c      	ldr	r2, [pc, #560]	; (80147cc <_printf_float+0x304>)
 801459c:	4b8c      	ldr	r3, [pc, #560]	; (80147d0 <_printf_float+0x308>)
 801459e:	e7da      	b.n	8014556 <_printf_float+0x8e>
 80145a0:	6861      	ldr	r1, [r4, #4]
 80145a2:	1c4b      	adds	r3, r1, #1
 80145a4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80145a8:	a80a      	add	r0, sp, #40	; 0x28
 80145aa:	d13e      	bne.n	801462a <_printf_float+0x162>
 80145ac:	2306      	movs	r3, #6
 80145ae:	6063      	str	r3, [r4, #4]
 80145b0:	2300      	movs	r3, #0
 80145b2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80145b6:	ab09      	add	r3, sp, #36	; 0x24
 80145b8:	9300      	str	r3, [sp, #0]
 80145ba:	ec49 8b10 	vmov	d0, r8, r9
 80145be:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80145c2:	6022      	str	r2, [r4, #0]
 80145c4:	f8cd a004 	str.w	sl, [sp, #4]
 80145c8:	6861      	ldr	r1, [r4, #4]
 80145ca:	4628      	mov	r0, r5
 80145cc:	f7ff fee7 	bl	801439e <__cvt>
 80145d0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80145d4:	2b47      	cmp	r3, #71	; 0x47
 80145d6:	4680      	mov	r8, r0
 80145d8:	d109      	bne.n	80145ee <_printf_float+0x126>
 80145da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145dc:	1cd8      	adds	r0, r3, #3
 80145de:	db02      	blt.n	80145e6 <_printf_float+0x11e>
 80145e0:	6862      	ldr	r2, [r4, #4]
 80145e2:	4293      	cmp	r3, r2
 80145e4:	dd47      	ble.n	8014676 <_printf_float+0x1ae>
 80145e6:	f1aa 0a02 	sub.w	sl, sl, #2
 80145ea:	fa5f fa8a 	uxtb.w	sl, sl
 80145ee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80145f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80145f4:	d824      	bhi.n	8014640 <_printf_float+0x178>
 80145f6:	3901      	subs	r1, #1
 80145f8:	4652      	mov	r2, sl
 80145fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80145fe:	9109      	str	r1, [sp, #36]	; 0x24
 8014600:	f7ff ff2e 	bl	8014460 <__exponent>
 8014604:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014606:	1813      	adds	r3, r2, r0
 8014608:	2a01      	cmp	r2, #1
 801460a:	4681      	mov	r9, r0
 801460c:	6123      	str	r3, [r4, #16]
 801460e:	dc02      	bgt.n	8014616 <_printf_float+0x14e>
 8014610:	6822      	ldr	r2, [r4, #0]
 8014612:	07d1      	lsls	r1, r2, #31
 8014614:	d501      	bpl.n	801461a <_printf_float+0x152>
 8014616:	3301      	adds	r3, #1
 8014618:	6123      	str	r3, [r4, #16]
 801461a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801461e:	2b00      	cmp	r3, #0
 8014620:	d0a5      	beq.n	801456e <_printf_float+0xa6>
 8014622:	232d      	movs	r3, #45	; 0x2d
 8014624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014628:	e7a1      	b.n	801456e <_printf_float+0xa6>
 801462a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801462e:	f000 8177 	beq.w	8014920 <_printf_float+0x458>
 8014632:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014636:	d1bb      	bne.n	80145b0 <_printf_float+0xe8>
 8014638:	2900      	cmp	r1, #0
 801463a:	d1b9      	bne.n	80145b0 <_printf_float+0xe8>
 801463c:	2301      	movs	r3, #1
 801463e:	e7b6      	b.n	80145ae <_printf_float+0xe6>
 8014640:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8014644:	d119      	bne.n	801467a <_printf_float+0x1b2>
 8014646:	2900      	cmp	r1, #0
 8014648:	6863      	ldr	r3, [r4, #4]
 801464a:	dd0c      	ble.n	8014666 <_printf_float+0x19e>
 801464c:	6121      	str	r1, [r4, #16]
 801464e:	b913      	cbnz	r3, 8014656 <_printf_float+0x18e>
 8014650:	6822      	ldr	r2, [r4, #0]
 8014652:	07d2      	lsls	r2, r2, #31
 8014654:	d502      	bpl.n	801465c <_printf_float+0x194>
 8014656:	3301      	adds	r3, #1
 8014658:	440b      	add	r3, r1
 801465a:	6123      	str	r3, [r4, #16]
 801465c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801465e:	65a3      	str	r3, [r4, #88]	; 0x58
 8014660:	f04f 0900 	mov.w	r9, #0
 8014664:	e7d9      	b.n	801461a <_printf_float+0x152>
 8014666:	b913      	cbnz	r3, 801466e <_printf_float+0x1a6>
 8014668:	6822      	ldr	r2, [r4, #0]
 801466a:	07d0      	lsls	r0, r2, #31
 801466c:	d501      	bpl.n	8014672 <_printf_float+0x1aa>
 801466e:	3302      	adds	r3, #2
 8014670:	e7f3      	b.n	801465a <_printf_float+0x192>
 8014672:	2301      	movs	r3, #1
 8014674:	e7f1      	b.n	801465a <_printf_float+0x192>
 8014676:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801467a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801467e:	4293      	cmp	r3, r2
 8014680:	db05      	blt.n	801468e <_printf_float+0x1c6>
 8014682:	6822      	ldr	r2, [r4, #0]
 8014684:	6123      	str	r3, [r4, #16]
 8014686:	07d1      	lsls	r1, r2, #31
 8014688:	d5e8      	bpl.n	801465c <_printf_float+0x194>
 801468a:	3301      	adds	r3, #1
 801468c:	e7e5      	b.n	801465a <_printf_float+0x192>
 801468e:	2b00      	cmp	r3, #0
 8014690:	bfd4      	ite	le
 8014692:	f1c3 0302 	rsble	r3, r3, #2
 8014696:	2301      	movgt	r3, #1
 8014698:	4413      	add	r3, r2
 801469a:	e7de      	b.n	801465a <_printf_float+0x192>
 801469c:	6823      	ldr	r3, [r4, #0]
 801469e:	055a      	lsls	r2, r3, #21
 80146a0:	d407      	bmi.n	80146b2 <_printf_float+0x1ea>
 80146a2:	6923      	ldr	r3, [r4, #16]
 80146a4:	4642      	mov	r2, r8
 80146a6:	4631      	mov	r1, r6
 80146a8:	4628      	mov	r0, r5
 80146aa:	47b8      	blx	r7
 80146ac:	3001      	adds	r0, #1
 80146ae:	d12b      	bne.n	8014708 <_printf_float+0x240>
 80146b0:	e767      	b.n	8014582 <_printf_float+0xba>
 80146b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80146b6:	f240 80dc 	bls.w	8014872 <_printf_float+0x3aa>
 80146ba:	2200      	movs	r2, #0
 80146bc:	2300      	movs	r3, #0
 80146be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80146c2:	f7ec fa19 	bl	8000af8 <__aeabi_dcmpeq>
 80146c6:	2800      	cmp	r0, #0
 80146c8:	d033      	beq.n	8014732 <_printf_float+0x26a>
 80146ca:	2301      	movs	r3, #1
 80146cc:	4a41      	ldr	r2, [pc, #260]	; (80147d4 <_printf_float+0x30c>)
 80146ce:	4631      	mov	r1, r6
 80146d0:	4628      	mov	r0, r5
 80146d2:	47b8      	blx	r7
 80146d4:	3001      	adds	r0, #1
 80146d6:	f43f af54 	beq.w	8014582 <_printf_float+0xba>
 80146da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80146de:	429a      	cmp	r2, r3
 80146e0:	db02      	blt.n	80146e8 <_printf_float+0x220>
 80146e2:	6823      	ldr	r3, [r4, #0]
 80146e4:	07d8      	lsls	r0, r3, #31
 80146e6:	d50f      	bpl.n	8014708 <_printf_float+0x240>
 80146e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80146ec:	4631      	mov	r1, r6
 80146ee:	4628      	mov	r0, r5
 80146f0:	47b8      	blx	r7
 80146f2:	3001      	adds	r0, #1
 80146f4:	f43f af45 	beq.w	8014582 <_printf_float+0xba>
 80146f8:	f04f 0800 	mov.w	r8, #0
 80146fc:	f104 091a 	add.w	r9, r4, #26
 8014700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014702:	3b01      	subs	r3, #1
 8014704:	4543      	cmp	r3, r8
 8014706:	dc09      	bgt.n	801471c <_printf_float+0x254>
 8014708:	6823      	ldr	r3, [r4, #0]
 801470a:	079b      	lsls	r3, r3, #30
 801470c:	f100 8103 	bmi.w	8014916 <_printf_float+0x44e>
 8014710:	68e0      	ldr	r0, [r4, #12]
 8014712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014714:	4298      	cmp	r0, r3
 8014716:	bfb8      	it	lt
 8014718:	4618      	movlt	r0, r3
 801471a:	e734      	b.n	8014586 <_printf_float+0xbe>
 801471c:	2301      	movs	r3, #1
 801471e:	464a      	mov	r2, r9
 8014720:	4631      	mov	r1, r6
 8014722:	4628      	mov	r0, r5
 8014724:	47b8      	blx	r7
 8014726:	3001      	adds	r0, #1
 8014728:	f43f af2b 	beq.w	8014582 <_printf_float+0xba>
 801472c:	f108 0801 	add.w	r8, r8, #1
 8014730:	e7e6      	b.n	8014700 <_printf_float+0x238>
 8014732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014734:	2b00      	cmp	r3, #0
 8014736:	dc2b      	bgt.n	8014790 <_printf_float+0x2c8>
 8014738:	2301      	movs	r3, #1
 801473a:	4a26      	ldr	r2, [pc, #152]	; (80147d4 <_printf_float+0x30c>)
 801473c:	4631      	mov	r1, r6
 801473e:	4628      	mov	r0, r5
 8014740:	47b8      	blx	r7
 8014742:	3001      	adds	r0, #1
 8014744:	f43f af1d 	beq.w	8014582 <_printf_float+0xba>
 8014748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801474a:	b923      	cbnz	r3, 8014756 <_printf_float+0x28e>
 801474c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801474e:	b913      	cbnz	r3, 8014756 <_printf_float+0x28e>
 8014750:	6823      	ldr	r3, [r4, #0]
 8014752:	07d9      	lsls	r1, r3, #31
 8014754:	d5d8      	bpl.n	8014708 <_printf_float+0x240>
 8014756:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801475a:	4631      	mov	r1, r6
 801475c:	4628      	mov	r0, r5
 801475e:	47b8      	blx	r7
 8014760:	3001      	adds	r0, #1
 8014762:	f43f af0e 	beq.w	8014582 <_printf_float+0xba>
 8014766:	f04f 0900 	mov.w	r9, #0
 801476a:	f104 0a1a 	add.w	sl, r4, #26
 801476e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014770:	425b      	negs	r3, r3
 8014772:	454b      	cmp	r3, r9
 8014774:	dc01      	bgt.n	801477a <_printf_float+0x2b2>
 8014776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014778:	e794      	b.n	80146a4 <_printf_float+0x1dc>
 801477a:	2301      	movs	r3, #1
 801477c:	4652      	mov	r2, sl
 801477e:	4631      	mov	r1, r6
 8014780:	4628      	mov	r0, r5
 8014782:	47b8      	blx	r7
 8014784:	3001      	adds	r0, #1
 8014786:	f43f aefc 	beq.w	8014582 <_printf_float+0xba>
 801478a:	f109 0901 	add.w	r9, r9, #1
 801478e:	e7ee      	b.n	801476e <_printf_float+0x2a6>
 8014790:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014792:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014794:	429a      	cmp	r2, r3
 8014796:	bfa8      	it	ge
 8014798:	461a      	movge	r2, r3
 801479a:	2a00      	cmp	r2, #0
 801479c:	4691      	mov	r9, r2
 801479e:	dd07      	ble.n	80147b0 <_printf_float+0x2e8>
 80147a0:	4613      	mov	r3, r2
 80147a2:	4631      	mov	r1, r6
 80147a4:	4642      	mov	r2, r8
 80147a6:	4628      	mov	r0, r5
 80147a8:	47b8      	blx	r7
 80147aa:	3001      	adds	r0, #1
 80147ac:	f43f aee9 	beq.w	8014582 <_printf_float+0xba>
 80147b0:	f104 031a 	add.w	r3, r4, #26
 80147b4:	f04f 0b00 	mov.w	fp, #0
 80147b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80147bc:	9306      	str	r3, [sp, #24]
 80147be:	e015      	b.n	80147ec <_printf_float+0x324>
 80147c0:	7fefffff 	.word	0x7fefffff
 80147c4:	08018f4c 	.word	0x08018f4c
 80147c8:	08018f48 	.word	0x08018f48
 80147cc:	08018f54 	.word	0x08018f54
 80147d0:	08018f50 	.word	0x08018f50
 80147d4:	08019173 	.word	0x08019173
 80147d8:	2301      	movs	r3, #1
 80147da:	9a06      	ldr	r2, [sp, #24]
 80147dc:	4631      	mov	r1, r6
 80147de:	4628      	mov	r0, r5
 80147e0:	47b8      	blx	r7
 80147e2:	3001      	adds	r0, #1
 80147e4:	f43f aecd 	beq.w	8014582 <_printf_float+0xba>
 80147e8:	f10b 0b01 	add.w	fp, fp, #1
 80147ec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80147f0:	ebaa 0309 	sub.w	r3, sl, r9
 80147f4:	455b      	cmp	r3, fp
 80147f6:	dcef      	bgt.n	80147d8 <_printf_float+0x310>
 80147f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80147fc:	429a      	cmp	r2, r3
 80147fe:	44d0      	add	r8, sl
 8014800:	db15      	blt.n	801482e <_printf_float+0x366>
 8014802:	6823      	ldr	r3, [r4, #0]
 8014804:	07da      	lsls	r2, r3, #31
 8014806:	d412      	bmi.n	801482e <_printf_float+0x366>
 8014808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801480a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801480c:	eba3 020a 	sub.w	r2, r3, sl
 8014810:	eba3 0a01 	sub.w	sl, r3, r1
 8014814:	4592      	cmp	sl, r2
 8014816:	bfa8      	it	ge
 8014818:	4692      	movge	sl, r2
 801481a:	f1ba 0f00 	cmp.w	sl, #0
 801481e:	dc0e      	bgt.n	801483e <_printf_float+0x376>
 8014820:	f04f 0800 	mov.w	r8, #0
 8014824:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014828:	f104 091a 	add.w	r9, r4, #26
 801482c:	e019      	b.n	8014862 <_printf_float+0x39a>
 801482e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014832:	4631      	mov	r1, r6
 8014834:	4628      	mov	r0, r5
 8014836:	47b8      	blx	r7
 8014838:	3001      	adds	r0, #1
 801483a:	d1e5      	bne.n	8014808 <_printf_float+0x340>
 801483c:	e6a1      	b.n	8014582 <_printf_float+0xba>
 801483e:	4653      	mov	r3, sl
 8014840:	4642      	mov	r2, r8
 8014842:	4631      	mov	r1, r6
 8014844:	4628      	mov	r0, r5
 8014846:	47b8      	blx	r7
 8014848:	3001      	adds	r0, #1
 801484a:	d1e9      	bne.n	8014820 <_printf_float+0x358>
 801484c:	e699      	b.n	8014582 <_printf_float+0xba>
 801484e:	2301      	movs	r3, #1
 8014850:	464a      	mov	r2, r9
 8014852:	4631      	mov	r1, r6
 8014854:	4628      	mov	r0, r5
 8014856:	47b8      	blx	r7
 8014858:	3001      	adds	r0, #1
 801485a:	f43f ae92 	beq.w	8014582 <_printf_float+0xba>
 801485e:	f108 0801 	add.w	r8, r8, #1
 8014862:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014866:	1a9b      	subs	r3, r3, r2
 8014868:	eba3 030a 	sub.w	r3, r3, sl
 801486c:	4543      	cmp	r3, r8
 801486e:	dcee      	bgt.n	801484e <_printf_float+0x386>
 8014870:	e74a      	b.n	8014708 <_printf_float+0x240>
 8014872:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014874:	2a01      	cmp	r2, #1
 8014876:	dc01      	bgt.n	801487c <_printf_float+0x3b4>
 8014878:	07db      	lsls	r3, r3, #31
 801487a:	d53a      	bpl.n	80148f2 <_printf_float+0x42a>
 801487c:	2301      	movs	r3, #1
 801487e:	4642      	mov	r2, r8
 8014880:	4631      	mov	r1, r6
 8014882:	4628      	mov	r0, r5
 8014884:	47b8      	blx	r7
 8014886:	3001      	adds	r0, #1
 8014888:	f43f ae7b 	beq.w	8014582 <_printf_float+0xba>
 801488c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014890:	4631      	mov	r1, r6
 8014892:	4628      	mov	r0, r5
 8014894:	47b8      	blx	r7
 8014896:	3001      	adds	r0, #1
 8014898:	f108 0801 	add.w	r8, r8, #1
 801489c:	f43f ae71 	beq.w	8014582 <_printf_float+0xba>
 80148a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80148a2:	2200      	movs	r2, #0
 80148a4:	f103 3aff 	add.w	sl, r3, #4294967295
 80148a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80148ac:	2300      	movs	r3, #0
 80148ae:	f7ec f923 	bl	8000af8 <__aeabi_dcmpeq>
 80148b2:	b9c8      	cbnz	r0, 80148e8 <_printf_float+0x420>
 80148b4:	4653      	mov	r3, sl
 80148b6:	4642      	mov	r2, r8
 80148b8:	4631      	mov	r1, r6
 80148ba:	4628      	mov	r0, r5
 80148bc:	47b8      	blx	r7
 80148be:	3001      	adds	r0, #1
 80148c0:	d10e      	bne.n	80148e0 <_printf_float+0x418>
 80148c2:	e65e      	b.n	8014582 <_printf_float+0xba>
 80148c4:	2301      	movs	r3, #1
 80148c6:	4652      	mov	r2, sl
 80148c8:	4631      	mov	r1, r6
 80148ca:	4628      	mov	r0, r5
 80148cc:	47b8      	blx	r7
 80148ce:	3001      	adds	r0, #1
 80148d0:	f43f ae57 	beq.w	8014582 <_printf_float+0xba>
 80148d4:	f108 0801 	add.w	r8, r8, #1
 80148d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80148da:	3b01      	subs	r3, #1
 80148dc:	4543      	cmp	r3, r8
 80148de:	dcf1      	bgt.n	80148c4 <_printf_float+0x3fc>
 80148e0:	464b      	mov	r3, r9
 80148e2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80148e6:	e6de      	b.n	80146a6 <_printf_float+0x1de>
 80148e8:	f04f 0800 	mov.w	r8, #0
 80148ec:	f104 0a1a 	add.w	sl, r4, #26
 80148f0:	e7f2      	b.n	80148d8 <_printf_float+0x410>
 80148f2:	2301      	movs	r3, #1
 80148f4:	e7df      	b.n	80148b6 <_printf_float+0x3ee>
 80148f6:	2301      	movs	r3, #1
 80148f8:	464a      	mov	r2, r9
 80148fa:	4631      	mov	r1, r6
 80148fc:	4628      	mov	r0, r5
 80148fe:	47b8      	blx	r7
 8014900:	3001      	adds	r0, #1
 8014902:	f43f ae3e 	beq.w	8014582 <_printf_float+0xba>
 8014906:	f108 0801 	add.w	r8, r8, #1
 801490a:	68e3      	ldr	r3, [r4, #12]
 801490c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801490e:	1a9b      	subs	r3, r3, r2
 8014910:	4543      	cmp	r3, r8
 8014912:	dcf0      	bgt.n	80148f6 <_printf_float+0x42e>
 8014914:	e6fc      	b.n	8014710 <_printf_float+0x248>
 8014916:	f04f 0800 	mov.w	r8, #0
 801491a:	f104 0919 	add.w	r9, r4, #25
 801491e:	e7f4      	b.n	801490a <_printf_float+0x442>
 8014920:	2900      	cmp	r1, #0
 8014922:	f43f ae8b 	beq.w	801463c <_printf_float+0x174>
 8014926:	2300      	movs	r3, #0
 8014928:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801492c:	ab09      	add	r3, sp, #36	; 0x24
 801492e:	9300      	str	r3, [sp, #0]
 8014930:	ec49 8b10 	vmov	d0, r8, r9
 8014934:	6022      	str	r2, [r4, #0]
 8014936:	f8cd a004 	str.w	sl, [sp, #4]
 801493a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801493e:	4628      	mov	r0, r5
 8014940:	f7ff fd2d 	bl	801439e <__cvt>
 8014944:	4680      	mov	r8, r0
 8014946:	e648      	b.n	80145da <_printf_float+0x112>

08014948 <_printf_common>:
 8014948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801494c:	4691      	mov	r9, r2
 801494e:	461f      	mov	r7, r3
 8014950:	688a      	ldr	r2, [r1, #8]
 8014952:	690b      	ldr	r3, [r1, #16]
 8014954:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014958:	4293      	cmp	r3, r2
 801495a:	bfb8      	it	lt
 801495c:	4613      	movlt	r3, r2
 801495e:	f8c9 3000 	str.w	r3, [r9]
 8014962:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014966:	4606      	mov	r6, r0
 8014968:	460c      	mov	r4, r1
 801496a:	b112      	cbz	r2, 8014972 <_printf_common+0x2a>
 801496c:	3301      	adds	r3, #1
 801496e:	f8c9 3000 	str.w	r3, [r9]
 8014972:	6823      	ldr	r3, [r4, #0]
 8014974:	0699      	lsls	r1, r3, #26
 8014976:	bf42      	ittt	mi
 8014978:	f8d9 3000 	ldrmi.w	r3, [r9]
 801497c:	3302      	addmi	r3, #2
 801497e:	f8c9 3000 	strmi.w	r3, [r9]
 8014982:	6825      	ldr	r5, [r4, #0]
 8014984:	f015 0506 	ands.w	r5, r5, #6
 8014988:	d107      	bne.n	801499a <_printf_common+0x52>
 801498a:	f104 0a19 	add.w	sl, r4, #25
 801498e:	68e3      	ldr	r3, [r4, #12]
 8014990:	f8d9 2000 	ldr.w	r2, [r9]
 8014994:	1a9b      	subs	r3, r3, r2
 8014996:	42ab      	cmp	r3, r5
 8014998:	dc28      	bgt.n	80149ec <_printf_common+0xa4>
 801499a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801499e:	6822      	ldr	r2, [r4, #0]
 80149a0:	3300      	adds	r3, #0
 80149a2:	bf18      	it	ne
 80149a4:	2301      	movne	r3, #1
 80149a6:	0692      	lsls	r2, r2, #26
 80149a8:	d42d      	bmi.n	8014a06 <_printf_common+0xbe>
 80149aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80149ae:	4639      	mov	r1, r7
 80149b0:	4630      	mov	r0, r6
 80149b2:	47c0      	blx	r8
 80149b4:	3001      	adds	r0, #1
 80149b6:	d020      	beq.n	80149fa <_printf_common+0xb2>
 80149b8:	6823      	ldr	r3, [r4, #0]
 80149ba:	68e5      	ldr	r5, [r4, #12]
 80149bc:	f8d9 2000 	ldr.w	r2, [r9]
 80149c0:	f003 0306 	and.w	r3, r3, #6
 80149c4:	2b04      	cmp	r3, #4
 80149c6:	bf08      	it	eq
 80149c8:	1aad      	subeq	r5, r5, r2
 80149ca:	68a3      	ldr	r3, [r4, #8]
 80149cc:	6922      	ldr	r2, [r4, #16]
 80149ce:	bf0c      	ite	eq
 80149d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80149d4:	2500      	movne	r5, #0
 80149d6:	4293      	cmp	r3, r2
 80149d8:	bfc4      	itt	gt
 80149da:	1a9b      	subgt	r3, r3, r2
 80149dc:	18ed      	addgt	r5, r5, r3
 80149de:	f04f 0900 	mov.w	r9, #0
 80149e2:	341a      	adds	r4, #26
 80149e4:	454d      	cmp	r5, r9
 80149e6:	d11a      	bne.n	8014a1e <_printf_common+0xd6>
 80149e8:	2000      	movs	r0, #0
 80149ea:	e008      	b.n	80149fe <_printf_common+0xb6>
 80149ec:	2301      	movs	r3, #1
 80149ee:	4652      	mov	r2, sl
 80149f0:	4639      	mov	r1, r7
 80149f2:	4630      	mov	r0, r6
 80149f4:	47c0      	blx	r8
 80149f6:	3001      	adds	r0, #1
 80149f8:	d103      	bne.n	8014a02 <_printf_common+0xba>
 80149fa:	f04f 30ff 	mov.w	r0, #4294967295
 80149fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a02:	3501      	adds	r5, #1
 8014a04:	e7c3      	b.n	801498e <_printf_common+0x46>
 8014a06:	18e1      	adds	r1, r4, r3
 8014a08:	1c5a      	adds	r2, r3, #1
 8014a0a:	2030      	movs	r0, #48	; 0x30
 8014a0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014a10:	4422      	add	r2, r4
 8014a12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014a16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014a1a:	3302      	adds	r3, #2
 8014a1c:	e7c5      	b.n	80149aa <_printf_common+0x62>
 8014a1e:	2301      	movs	r3, #1
 8014a20:	4622      	mov	r2, r4
 8014a22:	4639      	mov	r1, r7
 8014a24:	4630      	mov	r0, r6
 8014a26:	47c0      	blx	r8
 8014a28:	3001      	adds	r0, #1
 8014a2a:	d0e6      	beq.n	80149fa <_printf_common+0xb2>
 8014a2c:	f109 0901 	add.w	r9, r9, #1
 8014a30:	e7d8      	b.n	80149e4 <_printf_common+0x9c>
	...

08014a34 <_printf_i>:
 8014a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014a38:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014a3c:	460c      	mov	r4, r1
 8014a3e:	7e09      	ldrb	r1, [r1, #24]
 8014a40:	b085      	sub	sp, #20
 8014a42:	296e      	cmp	r1, #110	; 0x6e
 8014a44:	4617      	mov	r7, r2
 8014a46:	4606      	mov	r6, r0
 8014a48:	4698      	mov	r8, r3
 8014a4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014a4c:	f000 80b3 	beq.w	8014bb6 <_printf_i+0x182>
 8014a50:	d822      	bhi.n	8014a98 <_printf_i+0x64>
 8014a52:	2963      	cmp	r1, #99	; 0x63
 8014a54:	d036      	beq.n	8014ac4 <_printf_i+0x90>
 8014a56:	d80a      	bhi.n	8014a6e <_printf_i+0x3a>
 8014a58:	2900      	cmp	r1, #0
 8014a5a:	f000 80b9 	beq.w	8014bd0 <_printf_i+0x19c>
 8014a5e:	2958      	cmp	r1, #88	; 0x58
 8014a60:	f000 8083 	beq.w	8014b6a <_printf_i+0x136>
 8014a64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014a68:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014a6c:	e032      	b.n	8014ad4 <_printf_i+0xa0>
 8014a6e:	2964      	cmp	r1, #100	; 0x64
 8014a70:	d001      	beq.n	8014a76 <_printf_i+0x42>
 8014a72:	2969      	cmp	r1, #105	; 0x69
 8014a74:	d1f6      	bne.n	8014a64 <_printf_i+0x30>
 8014a76:	6820      	ldr	r0, [r4, #0]
 8014a78:	6813      	ldr	r3, [r2, #0]
 8014a7a:	0605      	lsls	r5, r0, #24
 8014a7c:	f103 0104 	add.w	r1, r3, #4
 8014a80:	d52a      	bpl.n	8014ad8 <_printf_i+0xa4>
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	6011      	str	r1, [r2, #0]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	da03      	bge.n	8014a92 <_printf_i+0x5e>
 8014a8a:	222d      	movs	r2, #45	; 0x2d
 8014a8c:	425b      	negs	r3, r3
 8014a8e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014a92:	486f      	ldr	r0, [pc, #444]	; (8014c50 <_printf_i+0x21c>)
 8014a94:	220a      	movs	r2, #10
 8014a96:	e039      	b.n	8014b0c <_printf_i+0xd8>
 8014a98:	2973      	cmp	r1, #115	; 0x73
 8014a9a:	f000 809d 	beq.w	8014bd8 <_printf_i+0x1a4>
 8014a9e:	d808      	bhi.n	8014ab2 <_printf_i+0x7e>
 8014aa0:	296f      	cmp	r1, #111	; 0x6f
 8014aa2:	d020      	beq.n	8014ae6 <_printf_i+0xb2>
 8014aa4:	2970      	cmp	r1, #112	; 0x70
 8014aa6:	d1dd      	bne.n	8014a64 <_printf_i+0x30>
 8014aa8:	6823      	ldr	r3, [r4, #0]
 8014aaa:	f043 0320 	orr.w	r3, r3, #32
 8014aae:	6023      	str	r3, [r4, #0]
 8014ab0:	e003      	b.n	8014aba <_printf_i+0x86>
 8014ab2:	2975      	cmp	r1, #117	; 0x75
 8014ab4:	d017      	beq.n	8014ae6 <_printf_i+0xb2>
 8014ab6:	2978      	cmp	r1, #120	; 0x78
 8014ab8:	d1d4      	bne.n	8014a64 <_printf_i+0x30>
 8014aba:	2378      	movs	r3, #120	; 0x78
 8014abc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014ac0:	4864      	ldr	r0, [pc, #400]	; (8014c54 <_printf_i+0x220>)
 8014ac2:	e055      	b.n	8014b70 <_printf_i+0x13c>
 8014ac4:	6813      	ldr	r3, [r2, #0]
 8014ac6:	1d19      	adds	r1, r3, #4
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	6011      	str	r1, [r2, #0]
 8014acc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014ad0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014ad4:	2301      	movs	r3, #1
 8014ad6:	e08c      	b.n	8014bf2 <_printf_i+0x1be>
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	6011      	str	r1, [r2, #0]
 8014adc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014ae0:	bf18      	it	ne
 8014ae2:	b21b      	sxthne	r3, r3
 8014ae4:	e7cf      	b.n	8014a86 <_printf_i+0x52>
 8014ae6:	6813      	ldr	r3, [r2, #0]
 8014ae8:	6825      	ldr	r5, [r4, #0]
 8014aea:	1d18      	adds	r0, r3, #4
 8014aec:	6010      	str	r0, [r2, #0]
 8014aee:	0628      	lsls	r0, r5, #24
 8014af0:	d501      	bpl.n	8014af6 <_printf_i+0xc2>
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	e002      	b.n	8014afc <_printf_i+0xc8>
 8014af6:	0668      	lsls	r0, r5, #25
 8014af8:	d5fb      	bpl.n	8014af2 <_printf_i+0xbe>
 8014afa:	881b      	ldrh	r3, [r3, #0]
 8014afc:	4854      	ldr	r0, [pc, #336]	; (8014c50 <_printf_i+0x21c>)
 8014afe:	296f      	cmp	r1, #111	; 0x6f
 8014b00:	bf14      	ite	ne
 8014b02:	220a      	movne	r2, #10
 8014b04:	2208      	moveq	r2, #8
 8014b06:	2100      	movs	r1, #0
 8014b08:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014b0c:	6865      	ldr	r5, [r4, #4]
 8014b0e:	60a5      	str	r5, [r4, #8]
 8014b10:	2d00      	cmp	r5, #0
 8014b12:	f2c0 8095 	blt.w	8014c40 <_printf_i+0x20c>
 8014b16:	6821      	ldr	r1, [r4, #0]
 8014b18:	f021 0104 	bic.w	r1, r1, #4
 8014b1c:	6021      	str	r1, [r4, #0]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d13d      	bne.n	8014b9e <_printf_i+0x16a>
 8014b22:	2d00      	cmp	r5, #0
 8014b24:	f040 808e 	bne.w	8014c44 <_printf_i+0x210>
 8014b28:	4665      	mov	r5, ip
 8014b2a:	2a08      	cmp	r2, #8
 8014b2c:	d10b      	bne.n	8014b46 <_printf_i+0x112>
 8014b2e:	6823      	ldr	r3, [r4, #0]
 8014b30:	07db      	lsls	r3, r3, #31
 8014b32:	d508      	bpl.n	8014b46 <_printf_i+0x112>
 8014b34:	6923      	ldr	r3, [r4, #16]
 8014b36:	6862      	ldr	r2, [r4, #4]
 8014b38:	429a      	cmp	r2, r3
 8014b3a:	bfde      	ittt	le
 8014b3c:	2330      	movle	r3, #48	; 0x30
 8014b3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014b42:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014b46:	ebac 0305 	sub.w	r3, ip, r5
 8014b4a:	6123      	str	r3, [r4, #16]
 8014b4c:	f8cd 8000 	str.w	r8, [sp]
 8014b50:	463b      	mov	r3, r7
 8014b52:	aa03      	add	r2, sp, #12
 8014b54:	4621      	mov	r1, r4
 8014b56:	4630      	mov	r0, r6
 8014b58:	f7ff fef6 	bl	8014948 <_printf_common>
 8014b5c:	3001      	adds	r0, #1
 8014b5e:	d14d      	bne.n	8014bfc <_printf_i+0x1c8>
 8014b60:	f04f 30ff 	mov.w	r0, #4294967295
 8014b64:	b005      	add	sp, #20
 8014b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b6a:	4839      	ldr	r0, [pc, #228]	; (8014c50 <_printf_i+0x21c>)
 8014b6c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014b70:	6813      	ldr	r3, [r2, #0]
 8014b72:	6821      	ldr	r1, [r4, #0]
 8014b74:	1d1d      	adds	r5, r3, #4
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	6015      	str	r5, [r2, #0]
 8014b7a:	060a      	lsls	r2, r1, #24
 8014b7c:	d50b      	bpl.n	8014b96 <_printf_i+0x162>
 8014b7e:	07ca      	lsls	r2, r1, #31
 8014b80:	bf44      	itt	mi
 8014b82:	f041 0120 	orrmi.w	r1, r1, #32
 8014b86:	6021      	strmi	r1, [r4, #0]
 8014b88:	b91b      	cbnz	r3, 8014b92 <_printf_i+0x15e>
 8014b8a:	6822      	ldr	r2, [r4, #0]
 8014b8c:	f022 0220 	bic.w	r2, r2, #32
 8014b90:	6022      	str	r2, [r4, #0]
 8014b92:	2210      	movs	r2, #16
 8014b94:	e7b7      	b.n	8014b06 <_printf_i+0xd2>
 8014b96:	064d      	lsls	r5, r1, #25
 8014b98:	bf48      	it	mi
 8014b9a:	b29b      	uxthmi	r3, r3
 8014b9c:	e7ef      	b.n	8014b7e <_printf_i+0x14a>
 8014b9e:	4665      	mov	r5, ip
 8014ba0:	fbb3 f1f2 	udiv	r1, r3, r2
 8014ba4:	fb02 3311 	mls	r3, r2, r1, r3
 8014ba8:	5cc3      	ldrb	r3, [r0, r3]
 8014baa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014bae:	460b      	mov	r3, r1
 8014bb0:	2900      	cmp	r1, #0
 8014bb2:	d1f5      	bne.n	8014ba0 <_printf_i+0x16c>
 8014bb4:	e7b9      	b.n	8014b2a <_printf_i+0xf6>
 8014bb6:	6813      	ldr	r3, [r2, #0]
 8014bb8:	6825      	ldr	r5, [r4, #0]
 8014bba:	6961      	ldr	r1, [r4, #20]
 8014bbc:	1d18      	adds	r0, r3, #4
 8014bbe:	6010      	str	r0, [r2, #0]
 8014bc0:	0628      	lsls	r0, r5, #24
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	d501      	bpl.n	8014bca <_printf_i+0x196>
 8014bc6:	6019      	str	r1, [r3, #0]
 8014bc8:	e002      	b.n	8014bd0 <_printf_i+0x19c>
 8014bca:	066a      	lsls	r2, r5, #25
 8014bcc:	d5fb      	bpl.n	8014bc6 <_printf_i+0x192>
 8014bce:	8019      	strh	r1, [r3, #0]
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	6123      	str	r3, [r4, #16]
 8014bd4:	4665      	mov	r5, ip
 8014bd6:	e7b9      	b.n	8014b4c <_printf_i+0x118>
 8014bd8:	6813      	ldr	r3, [r2, #0]
 8014bda:	1d19      	adds	r1, r3, #4
 8014bdc:	6011      	str	r1, [r2, #0]
 8014bde:	681d      	ldr	r5, [r3, #0]
 8014be0:	6862      	ldr	r2, [r4, #4]
 8014be2:	2100      	movs	r1, #0
 8014be4:	4628      	mov	r0, r5
 8014be6:	f7eb fb13 	bl	8000210 <memchr>
 8014bea:	b108      	cbz	r0, 8014bf0 <_printf_i+0x1bc>
 8014bec:	1b40      	subs	r0, r0, r5
 8014bee:	6060      	str	r0, [r4, #4]
 8014bf0:	6863      	ldr	r3, [r4, #4]
 8014bf2:	6123      	str	r3, [r4, #16]
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014bfa:	e7a7      	b.n	8014b4c <_printf_i+0x118>
 8014bfc:	6923      	ldr	r3, [r4, #16]
 8014bfe:	462a      	mov	r2, r5
 8014c00:	4639      	mov	r1, r7
 8014c02:	4630      	mov	r0, r6
 8014c04:	47c0      	blx	r8
 8014c06:	3001      	adds	r0, #1
 8014c08:	d0aa      	beq.n	8014b60 <_printf_i+0x12c>
 8014c0a:	6823      	ldr	r3, [r4, #0]
 8014c0c:	079b      	lsls	r3, r3, #30
 8014c0e:	d413      	bmi.n	8014c38 <_printf_i+0x204>
 8014c10:	68e0      	ldr	r0, [r4, #12]
 8014c12:	9b03      	ldr	r3, [sp, #12]
 8014c14:	4298      	cmp	r0, r3
 8014c16:	bfb8      	it	lt
 8014c18:	4618      	movlt	r0, r3
 8014c1a:	e7a3      	b.n	8014b64 <_printf_i+0x130>
 8014c1c:	2301      	movs	r3, #1
 8014c1e:	464a      	mov	r2, r9
 8014c20:	4639      	mov	r1, r7
 8014c22:	4630      	mov	r0, r6
 8014c24:	47c0      	blx	r8
 8014c26:	3001      	adds	r0, #1
 8014c28:	d09a      	beq.n	8014b60 <_printf_i+0x12c>
 8014c2a:	3501      	adds	r5, #1
 8014c2c:	68e3      	ldr	r3, [r4, #12]
 8014c2e:	9a03      	ldr	r2, [sp, #12]
 8014c30:	1a9b      	subs	r3, r3, r2
 8014c32:	42ab      	cmp	r3, r5
 8014c34:	dcf2      	bgt.n	8014c1c <_printf_i+0x1e8>
 8014c36:	e7eb      	b.n	8014c10 <_printf_i+0x1dc>
 8014c38:	2500      	movs	r5, #0
 8014c3a:	f104 0919 	add.w	r9, r4, #25
 8014c3e:	e7f5      	b.n	8014c2c <_printf_i+0x1f8>
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d1ac      	bne.n	8014b9e <_printf_i+0x16a>
 8014c44:	7803      	ldrb	r3, [r0, #0]
 8014c46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014c4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014c4e:	e76c      	b.n	8014b2a <_printf_i+0xf6>
 8014c50:	08018f58 	.word	0x08018f58
 8014c54:	08018f69 	.word	0x08018f69

08014c58 <_scanf_float>:
 8014c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c5c:	469a      	mov	sl, r3
 8014c5e:	688b      	ldr	r3, [r1, #8]
 8014c60:	4616      	mov	r6, r2
 8014c62:	1e5a      	subs	r2, r3, #1
 8014c64:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014c68:	b087      	sub	sp, #28
 8014c6a:	bf83      	ittte	hi
 8014c6c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8014c70:	189b      	addhi	r3, r3, r2
 8014c72:	9301      	strhi	r3, [sp, #4]
 8014c74:	2300      	movls	r3, #0
 8014c76:	bf86      	itte	hi
 8014c78:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014c7c:	608b      	strhi	r3, [r1, #8]
 8014c7e:	9301      	strls	r3, [sp, #4]
 8014c80:	680b      	ldr	r3, [r1, #0]
 8014c82:	4688      	mov	r8, r1
 8014c84:	f04f 0b00 	mov.w	fp, #0
 8014c88:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8014c8c:	f848 3b1c 	str.w	r3, [r8], #28
 8014c90:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8014c94:	4607      	mov	r7, r0
 8014c96:	460c      	mov	r4, r1
 8014c98:	4645      	mov	r5, r8
 8014c9a:	465a      	mov	r2, fp
 8014c9c:	46d9      	mov	r9, fp
 8014c9e:	f8cd b008 	str.w	fp, [sp, #8]
 8014ca2:	68a1      	ldr	r1, [r4, #8]
 8014ca4:	b181      	cbz	r1, 8014cc8 <_scanf_float+0x70>
 8014ca6:	6833      	ldr	r3, [r6, #0]
 8014ca8:	781b      	ldrb	r3, [r3, #0]
 8014caa:	2b49      	cmp	r3, #73	; 0x49
 8014cac:	d071      	beq.n	8014d92 <_scanf_float+0x13a>
 8014cae:	d84d      	bhi.n	8014d4c <_scanf_float+0xf4>
 8014cb0:	2b39      	cmp	r3, #57	; 0x39
 8014cb2:	d840      	bhi.n	8014d36 <_scanf_float+0xde>
 8014cb4:	2b31      	cmp	r3, #49	; 0x31
 8014cb6:	f080 8088 	bcs.w	8014dca <_scanf_float+0x172>
 8014cba:	2b2d      	cmp	r3, #45	; 0x2d
 8014cbc:	f000 8090 	beq.w	8014de0 <_scanf_float+0x188>
 8014cc0:	d815      	bhi.n	8014cee <_scanf_float+0x96>
 8014cc2:	2b2b      	cmp	r3, #43	; 0x2b
 8014cc4:	f000 808c 	beq.w	8014de0 <_scanf_float+0x188>
 8014cc8:	f1b9 0f00 	cmp.w	r9, #0
 8014ccc:	d003      	beq.n	8014cd6 <_scanf_float+0x7e>
 8014cce:	6823      	ldr	r3, [r4, #0]
 8014cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014cd4:	6023      	str	r3, [r4, #0]
 8014cd6:	3a01      	subs	r2, #1
 8014cd8:	2a01      	cmp	r2, #1
 8014cda:	f200 80ea 	bhi.w	8014eb2 <_scanf_float+0x25a>
 8014cde:	4545      	cmp	r5, r8
 8014ce0:	f200 80dc 	bhi.w	8014e9c <_scanf_float+0x244>
 8014ce4:	2601      	movs	r6, #1
 8014ce6:	4630      	mov	r0, r6
 8014ce8:	b007      	add	sp, #28
 8014cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cee:	2b2e      	cmp	r3, #46	; 0x2e
 8014cf0:	f000 809f 	beq.w	8014e32 <_scanf_float+0x1da>
 8014cf4:	2b30      	cmp	r3, #48	; 0x30
 8014cf6:	d1e7      	bne.n	8014cc8 <_scanf_float+0x70>
 8014cf8:	6820      	ldr	r0, [r4, #0]
 8014cfa:	f410 7f80 	tst.w	r0, #256	; 0x100
 8014cfe:	d064      	beq.n	8014dca <_scanf_float+0x172>
 8014d00:	9b01      	ldr	r3, [sp, #4]
 8014d02:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8014d06:	6020      	str	r0, [r4, #0]
 8014d08:	f109 0901 	add.w	r9, r9, #1
 8014d0c:	b11b      	cbz	r3, 8014d16 <_scanf_float+0xbe>
 8014d0e:	3b01      	subs	r3, #1
 8014d10:	3101      	adds	r1, #1
 8014d12:	9301      	str	r3, [sp, #4]
 8014d14:	60a1      	str	r1, [r4, #8]
 8014d16:	68a3      	ldr	r3, [r4, #8]
 8014d18:	3b01      	subs	r3, #1
 8014d1a:	60a3      	str	r3, [r4, #8]
 8014d1c:	6923      	ldr	r3, [r4, #16]
 8014d1e:	3301      	adds	r3, #1
 8014d20:	6123      	str	r3, [r4, #16]
 8014d22:	6873      	ldr	r3, [r6, #4]
 8014d24:	3b01      	subs	r3, #1
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	6073      	str	r3, [r6, #4]
 8014d2a:	f340 80ac 	ble.w	8014e86 <_scanf_float+0x22e>
 8014d2e:	6833      	ldr	r3, [r6, #0]
 8014d30:	3301      	adds	r3, #1
 8014d32:	6033      	str	r3, [r6, #0]
 8014d34:	e7b5      	b.n	8014ca2 <_scanf_float+0x4a>
 8014d36:	2b45      	cmp	r3, #69	; 0x45
 8014d38:	f000 8085 	beq.w	8014e46 <_scanf_float+0x1ee>
 8014d3c:	2b46      	cmp	r3, #70	; 0x46
 8014d3e:	d06a      	beq.n	8014e16 <_scanf_float+0x1be>
 8014d40:	2b41      	cmp	r3, #65	; 0x41
 8014d42:	d1c1      	bne.n	8014cc8 <_scanf_float+0x70>
 8014d44:	2a01      	cmp	r2, #1
 8014d46:	d1bf      	bne.n	8014cc8 <_scanf_float+0x70>
 8014d48:	2202      	movs	r2, #2
 8014d4a:	e046      	b.n	8014dda <_scanf_float+0x182>
 8014d4c:	2b65      	cmp	r3, #101	; 0x65
 8014d4e:	d07a      	beq.n	8014e46 <_scanf_float+0x1ee>
 8014d50:	d818      	bhi.n	8014d84 <_scanf_float+0x12c>
 8014d52:	2b54      	cmp	r3, #84	; 0x54
 8014d54:	d066      	beq.n	8014e24 <_scanf_float+0x1cc>
 8014d56:	d811      	bhi.n	8014d7c <_scanf_float+0x124>
 8014d58:	2b4e      	cmp	r3, #78	; 0x4e
 8014d5a:	d1b5      	bne.n	8014cc8 <_scanf_float+0x70>
 8014d5c:	2a00      	cmp	r2, #0
 8014d5e:	d146      	bne.n	8014dee <_scanf_float+0x196>
 8014d60:	f1b9 0f00 	cmp.w	r9, #0
 8014d64:	d145      	bne.n	8014df2 <_scanf_float+0x19a>
 8014d66:	6821      	ldr	r1, [r4, #0]
 8014d68:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8014d6c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8014d70:	d13f      	bne.n	8014df2 <_scanf_float+0x19a>
 8014d72:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014d76:	6021      	str	r1, [r4, #0]
 8014d78:	2201      	movs	r2, #1
 8014d7a:	e02e      	b.n	8014dda <_scanf_float+0x182>
 8014d7c:	2b59      	cmp	r3, #89	; 0x59
 8014d7e:	d01e      	beq.n	8014dbe <_scanf_float+0x166>
 8014d80:	2b61      	cmp	r3, #97	; 0x61
 8014d82:	e7de      	b.n	8014d42 <_scanf_float+0xea>
 8014d84:	2b6e      	cmp	r3, #110	; 0x6e
 8014d86:	d0e9      	beq.n	8014d5c <_scanf_float+0x104>
 8014d88:	d815      	bhi.n	8014db6 <_scanf_float+0x15e>
 8014d8a:	2b66      	cmp	r3, #102	; 0x66
 8014d8c:	d043      	beq.n	8014e16 <_scanf_float+0x1be>
 8014d8e:	2b69      	cmp	r3, #105	; 0x69
 8014d90:	d19a      	bne.n	8014cc8 <_scanf_float+0x70>
 8014d92:	f1bb 0f00 	cmp.w	fp, #0
 8014d96:	d138      	bne.n	8014e0a <_scanf_float+0x1b2>
 8014d98:	f1b9 0f00 	cmp.w	r9, #0
 8014d9c:	d197      	bne.n	8014cce <_scanf_float+0x76>
 8014d9e:	6821      	ldr	r1, [r4, #0]
 8014da0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8014da4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8014da8:	d195      	bne.n	8014cd6 <_scanf_float+0x7e>
 8014daa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014dae:	6021      	str	r1, [r4, #0]
 8014db0:	f04f 0b01 	mov.w	fp, #1
 8014db4:	e011      	b.n	8014dda <_scanf_float+0x182>
 8014db6:	2b74      	cmp	r3, #116	; 0x74
 8014db8:	d034      	beq.n	8014e24 <_scanf_float+0x1cc>
 8014dba:	2b79      	cmp	r3, #121	; 0x79
 8014dbc:	d184      	bne.n	8014cc8 <_scanf_float+0x70>
 8014dbe:	f1bb 0f07 	cmp.w	fp, #7
 8014dc2:	d181      	bne.n	8014cc8 <_scanf_float+0x70>
 8014dc4:	f04f 0b08 	mov.w	fp, #8
 8014dc8:	e007      	b.n	8014dda <_scanf_float+0x182>
 8014dca:	eb12 0f0b 	cmn.w	r2, fp
 8014dce:	f47f af7b 	bne.w	8014cc8 <_scanf_float+0x70>
 8014dd2:	6821      	ldr	r1, [r4, #0]
 8014dd4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8014dd8:	6021      	str	r1, [r4, #0]
 8014dda:	702b      	strb	r3, [r5, #0]
 8014ddc:	3501      	adds	r5, #1
 8014dde:	e79a      	b.n	8014d16 <_scanf_float+0xbe>
 8014de0:	6821      	ldr	r1, [r4, #0]
 8014de2:	0608      	lsls	r0, r1, #24
 8014de4:	f57f af70 	bpl.w	8014cc8 <_scanf_float+0x70>
 8014de8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8014dec:	e7f4      	b.n	8014dd8 <_scanf_float+0x180>
 8014dee:	2a02      	cmp	r2, #2
 8014df0:	d047      	beq.n	8014e82 <_scanf_float+0x22a>
 8014df2:	f1bb 0f01 	cmp.w	fp, #1
 8014df6:	d003      	beq.n	8014e00 <_scanf_float+0x1a8>
 8014df8:	f1bb 0f04 	cmp.w	fp, #4
 8014dfc:	f47f af64 	bne.w	8014cc8 <_scanf_float+0x70>
 8014e00:	f10b 0b01 	add.w	fp, fp, #1
 8014e04:	fa5f fb8b 	uxtb.w	fp, fp
 8014e08:	e7e7      	b.n	8014dda <_scanf_float+0x182>
 8014e0a:	f1bb 0f03 	cmp.w	fp, #3
 8014e0e:	d0f7      	beq.n	8014e00 <_scanf_float+0x1a8>
 8014e10:	f1bb 0f05 	cmp.w	fp, #5
 8014e14:	e7f2      	b.n	8014dfc <_scanf_float+0x1a4>
 8014e16:	f1bb 0f02 	cmp.w	fp, #2
 8014e1a:	f47f af55 	bne.w	8014cc8 <_scanf_float+0x70>
 8014e1e:	f04f 0b03 	mov.w	fp, #3
 8014e22:	e7da      	b.n	8014dda <_scanf_float+0x182>
 8014e24:	f1bb 0f06 	cmp.w	fp, #6
 8014e28:	f47f af4e 	bne.w	8014cc8 <_scanf_float+0x70>
 8014e2c:	f04f 0b07 	mov.w	fp, #7
 8014e30:	e7d3      	b.n	8014dda <_scanf_float+0x182>
 8014e32:	6821      	ldr	r1, [r4, #0]
 8014e34:	0588      	lsls	r0, r1, #22
 8014e36:	f57f af47 	bpl.w	8014cc8 <_scanf_float+0x70>
 8014e3a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8014e3e:	6021      	str	r1, [r4, #0]
 8014e40:	f8cd 9008 	str.w	r9, [sp, #8]
 8014e44:	e7c9      	b.n	8014dda <_scanf_float+0x182>
 8014e46:	6821      	ldr	r1, [r4, #0]
 8014e48:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8014e4c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8014e50:	d006      	beq.n	8014e60 <_scanf_float+0x208>
 8014e52:	0548      	lsls	r0, r1, #21
 8014e54:	f57f af38 	bpl.w	8014cc8 <_scanf_float+0x70>
 8014e58:	f1b9 0f00 	cmp.w	r9, #0
 8014e5c:	f43f af3b 	beq.w	8014cd6 <_scanf_float+0x7e>
 8014e60:	0588      	lsls	r0, r1, #22
 8014e62:	bf58      	it	pl
 8014e64:	9802      	ldrpl	r0, [sp, #8]
 8014e66:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014e6a:	bf58      	it	pl
 8014e6c:	eba9 0000 	subpl.w	r0, r9, r0
 8014e70:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8014e74:	bf58      	it	pl
 8014e76:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8014e7a:	6021      	str	r1, [r4, #0]
 8014e7c:	f04f 0900 	mov.w	r9, #0
 8014e80:	e7ab      	b.n	8014dda <_scanf_float+0x182>
 8014e82:	2203      	movs	r2, #3
 8014e84:	e7a9      	b.n	8014dda <_scanf_float+0x182>
 8014e86:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014e8a:	9205      	str	r2, [sp, #20]
 8014e8c:	4631      	mov	r1, r6
 8014e8e:	4638      	mov	r0, r7
 8014e90:	4798      	blx	r3
 8014e92:	9a05      	ldr	r2, [sp, #20]
 8014e94:	2800      	cmp	r0, #0
 8014e96:	f43f af04 	beq.w	8014ca2 <_scanf_float+0x4a>
 8014e9a:	e715      	b.n	8014cc8 <_scanf_float+0x70>
 8014e9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014ea0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014ea4:	4632      	mov	r2, r6
 8014ea6:	4638      	mov	r0, r7
 8014ea8:	4798      	blx	r3
 8014eaa:	6923      	ldr	r3, [r4, #16]
 8014eac:	3b01      	subs	r3, #1
 8014eae:	6123      	str	r3, [r4, #16]
 8014eb0:	e715      	b.n	8014cde <_scanf_float+0x86>
 8014eb2:	f10b 33ff 	add.w	r3, fp, #4294967295
 8014eb6:	2b06      	cmp	r3, #6
 8014eb8:	d80a      	bhi.n	8014ed0 <_scanf_float+0x278>
 8014eba:	f1bb 0f02 	cmp.w	fp, #2
 8014ebe:	d968      	bls.n	8014f92 <_scanf_float+0x33a>
 8014ec0:	f1ab 0b03 	sub.w	fp, fp, #3
 8014ec4:	fa5f fb8b 	uxtb.w	fp, fp
 8014ec8:	eba5 0b0b 	sub.w	fp, r5, fp
 8014ecc:	455d      	cmp	r5, fp
 8014ece:	d14b      	bne.n	8014f68 <_scanf_float+0x310>
 8014ed0:	6823      	ldr	r3, [r4, #0]
 8014ed2:	05da      	lsls	r2, r3, #23
 8014ed4:	d51f      	bpl.n	8014f16 <_scanf_float+0x2be>
 8014ed6:	055b      	lsls	r3, r3, #21
 8014ed8:	d468      	bmi.n	8014fac <_scanf_float+0x354>
 8014eda:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014ede:	6923      	ldr	r3, [r4, #16]
 8014ee0:	2965      	cmp	r1, #101	; 0x65
 8014ee2:	f103 33ff 	add.w	r3, r3, #4294967295
 8014ee6:	f105 3bff 	add.w	fp, r5, #4294967295
 8014eea:	6123      	str	r3, [r4, #16]
 8014eec:	d00d      	beq.n	8014f0a <_scanf_float+0x2b2>
 8014eee:	2945      	cmp	r1, #69	; 0x45
 8014ef0:	d00b      	beq.n	8014f0a <_scanf_float+0x2b2>
 8014ef2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014ef6:	4632      	mov	r2, r6
 8014ef8:	4638      	mov	r0, r7
 8014efa:	4798      	blx	r3
 8014efc:	6923      	ldr	r3, [r4, #16]
 8014efe:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8014f02:	3b01      	subs	r3, #1
 8014f04:	f1a5 0b02 	sub.w	fp, r5, #2
 8014f08:	6123      	str	r3, [r4, #16]
 8014f0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014f0e:	4632      	mov	r2, r6
 8014f10:	4638      	mov	r0, r7
 8014f12:	4798      	blx	r3
 8014f14:	465d      	mov	r5, fp
 8014f16:	6826      	ldr	r6, [r4, #0]
 8014f18:	f016 0610 	ands.w	r6, r6, #16
 8014f1c:	d17a      	bne.n	8015014 <_scanf_float+0x3bc>
 8014f1e:	702e      	strb	r6, [r5, #0]
 8014f20:	6823      	ldr	r3, [r4, #0]
 8014f22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8014f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014f2a:	d142      	bne.n	8014fb2 <_scanf_float+0x35a>
 8014f2c:	9b02      	ldr	r3, [sp, #8]
 8014f2e:	eba9 0303 	sub.w	r3, r9, r3
 8014f32:	425a      	negs	r2, r3
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d149      	bne.n	8014fcc <_scanf_float+0x374>
 8014f38:	2200      	movs	r2, #0
 8014f3a:	4641      	mov	r1, r8
 8014f3c:	4638      	mov	r0, r7
 8014f3e:	f000 ff0b 	bl	8015d58 <_strtod_r>
 8014f42:	6825      	ldr	r5, [r4, #0]
 8014f44:	f8da 3000 	ldr.w	r3, [sl]
 8014f48:	f015 0f02 	tst.w	r5, #2
 8014f4c:	f103 0204 	add.w	r2, r3, #4
 8014f50:	ec59 8b10 	vmov	r8, r9, d0
 8014f54:	f8ca 2000 	str.w	r2, [sl]
 8014f58:	d043      	beq.n	8014fe2 <_scanf_float+0x38a>
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	e9c3 8900 	strd	r8, r9, [r3]
 8014f60:	68e3      	ldr	r3, [r4, #12]
 8014f62:	3301      	adds	r3, #1
 8014f64:	60e3      	str	r3, [r4, #12]
 8014f66:	e6be      	b.n	8014ce6 <_scanf_float+0x8e>
 8014f68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014f6c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014f70:	4632      	mov	r2, r6
 8014f72:	4638      	mov	r0, r7
 8014f74:	4798      	blx	r3
 8014f76:	6923      	ldr	r3, [r4, #16]
 8014f78:	3b01      	subs	r3, #1
 8014f7a:	6123      	str	r3, [r4, #16]
 8014f7c:	e7a6      	b.n	8014ecc <_scanf_float+0x274>
 8014f7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014f82:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014f86:	4632      	mov	r2, r6
 8014f88:	4638      	mov	r0, r7
 8014f8a:	4798      	blx	r3
 8014f8c:	6923      	ldr	r3, [r4, #16]
 8014f8e:	3b01      	subs	r3, #1
 8014f90:	6123      	str	r3, [r4, #16]
 8014f92:	4545      	cmp	r5, r8
 8014f94:	d8f3      	bhi.n	8014f7e <_scanf_float+0x326>
 8014f96:	e6a5      	b.n	8014ce4 <_scanf_float+0x8c>
 8014f98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014f9c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014fa0:	4632      	mov	r2, r6
 8014fa2:	4638      	mov	r0, r7
 8014fa4:	4798      	blx	r3
 8014fa6:	6923      	ldr	r3, [r4, #16]
 8014fa8:	3b01      	subs	r3, #1
 8014faa:	6123      	str	r3, [r4, #16]
 8014fac:	4545      	cmp	r5, r8
 8014fae:	d8f3      	bhi.n	8014f98 <_scanf_float+0x340>
 8014fb0:	e698      	b.n	8014ce4 <_scanf_float+0x8c>
 8014fb2:	9b03      	ldr	r3, [sp, #12]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d0bf      	beq.n	8014f38 <_scanf_float+0x2e0>
 8014fb8:	9904      	ldr	r1, [sp, #16]
 8014fba:	230a      	movs	r3, #10
 8014fbc:	4632      	mov	r2, r6
 8014fbe:	3101      	adds	r1, #1
 8014fc0:	4638      	mov	r0, r7
 8014fc2:	f000 ff55 	bl	8015e70 <_strtol_r>
 8014fc6:	9b03      	ldr	r3, [sp, #12]
 8014fc8:	9d04      	ldr	r5, [sp, #16]
 8014fca:	1ac2      	subs	r2, r0, r3
 8014fcc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8014fd0:	429d      	cmp	r5, r3
 8014fd2:	bf28      	it	cs
 8014fd4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8014fd8:	490f      	ldr	r1, [pc, #60]	; (8015018 <_scanf_float+0x3c0>)
 8014fda:	4628      	mov	r0, r5
 8014fdc:	f000 f858 	bl	8015090 <siprintf>
 8014fe0:	e7aa      	b.n	8014f38 <_scanf_float+0x2e0>
 8014fe2:	f015 0504 	ands.w	r5, r5, #4
 8014fe6:	d1b8      	bne.n	8014f5a <_scanf_float+0x302>
 8014fe8:	681f      	ldr	r7, [r3, #0]
 8014fea:	ee10 2a10 	vmov	r2, s0
 8014fee:	464b      	mov	r3, r9
 8014ff0:	ee10 0a10 	vmov	r0, s0
 8014ff4:	4649      	mov	r1, r9
 8014ff6:	f7eb fdb1 	bl	8000b5c <__aeabi_dcmpun>
 8014ffa:	b128      	cbz	r0, 8015008 <_scanf_float+0x3b0>
 8014ffc:	4628      	mov	r0, r5
 8014ffe:	f000 f80d 	bl	801501c <nanf>
 8015002:	ed87 0a00 	vstr	s0, [r7]
 8015006:	e7ab      	b.n	8014f60 <_scanf_float+0x308>
 8015008:	4640      	mov	r0, r8
 801500a:	4649      	mov	r1, r9
 801500c:	f7eb fe04 	bl	8000c18 <__aeabi_d2f>
 8015010:	6038      	str	r0, [r7, #0]
 8015012:	e7a5      	b.n	8014f60 <_scanf_float+0x308>
 8015014:	2600      	movs	r6, #0
 8015016:	e666      	b.n	8014ce6 <_scanf_float+0x8e>
 8015018:	08018f7a 	.word	0x08018f7a

0801501c <nanf>:
 801501c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015024 <nanf+0x8>
 8015020:	4770      	bx	lr
 8015022:	bf00      	nop
 8015024:	7fc00000 	.word	0x7fc00000

08015028 <sniprintf>:
 8015028:	b40c      	push	{r2, r3}
 801502a:	b530      	push	{r4, r5, lr}
 801502c:	4b17      	ldr	r3, [pc, #92]	; (801508c <sniprintf+0x64>)
 801502e:	1e0c      	subs	r4, r1, #0
 8015030:	b09d      	sub	sp, #116	; 0x74
 8015032:	681d      	ldr	r5, [r3, #0]
 8015034:	da08      	bge.n	8015048 <sniprintf+0x20>
 8015036:	238b      	movs	r3, #139	; 0x8b
 8015038:	602b      	str	r3, [r5, #0]
 801503a:	f04f 30ff 	mov.w	r0, #4294967295
 801503e:	b01d      	add	sp, #116	; 0x74
 8015040:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015044:	b002      	add	sp, #8
 8015046:	4770      	bx	lr
 8015048:	f44f 7302 	mov.w	r3, #520	; 0x208
 801504c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015050:	bf14      	ite	ne
 8015052:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015056:	4623      	moveq	r3, r4
 8015058:	9304      	str	r3, [sp, #16]
 801505a:	9307      	str	r3, [sp, #28]
 801505c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015060:	9002      	str	r0, [sp, #8]
 8015062:	9006      	str	r0, [sp, #24]
 8015064:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015068:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801506a:	ab21      	add	r3, sp, #132	; 0x84
 801506c:	a902      	add	r1, sp, #8
 801506e:	4628      	mov	r0, r5
 8015070:	9301      	str	r3, [sp, #4]
 8015072:	f002 fde7 	bl	8017c44 <_svfiprintf_r>
 8015076:	1c43      	adds	r3, r0, #1
 8015078:	bfbc      	itt	lt
 801507a:	238b      	movlt	r3, #139	; 0x8b
 801507c:	602b      	strlt	r3, [r5, #0]
 801507e:	2c00      	cmp	r4, #0
 8015080:	d0dd      	beq.n	801503e <sniprintf+0x16>
 8015082:	9b02      	ldr	r3, [sp, #8]
 8015084:	2200      	movs	r2, #0
 8015086:	701a      	strb	r2, [r3, #0]
 8015088:	e7d9      	b.n	801503e <sniprintf+0x16>
 801508a:	bf00      	nop
 801508c:	2000000c 	.word	0x2000000c

08015090 <siprintf>:
 8015090:	b40e      	push	{r1, r2, r3}
 8015092:	b500      	push	{lr}
 8015094:	b09c      	sub	sp, #112	; 0x70
 8015096:	ab1d      	add	r3, sp, #116	; 0x74
 8015098:	9002      	str	r0, [sp, #8]
 801509a:	9006      	str	r0, [sp, #24]
 801509c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80150a0:	4809      	ldr	r0, [pc, #36]	; (80150c8 <siprintf+0x38>)
 80150a2:	9107      	str	r1, [sp, #28]
 80150a4:	9104      	str	r1, [sp, #16]
 80150a6:	4909      	ldr	r1, [pc, #36]	; (80150cc <siprintf+0x3c>)
 80150a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80150ac:	9105      	str	r1, [sp, #20]
 80150ae:	6800      	ldr	r0, [r0, #0]
 80150b0:	9301      	str	r3, [sp, #4]
 80150b2:	a902      	add	r1, sp, #8
 80150b4:	f002 fdc6 	bl	8017c44 <_svfiprintf_r>
 80150b8:	9b02      	ldr	r3, [sp, #8]
 80150ba:	2200      	movs	r2, #0
 80150bc:	701a      	strb	r2, [r3, #0]
 80150be:	b01c      	add	sp, #112	; 0x70
 80150c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80150c4:	b003      	add	sp, #12
 80150c6:	4770      	bx	lr
 80150c8:	2000000c 	.word	0x2000000c
 80150cc:	ffff0208 	.word	0xffff0208

080150d0 <siscanf>:
 80150d0:	b40e      	push	{r1, r2, r3}
 80150d2:	b530      	push	{r4, r5, lr}
 80150d4:	b09c      	sub	sp, #112	; 0x70
 80150d6:	ac1f      	add	r4, sp, #124	; 0x7c
 80150d8:	f44f 7201 	mov.w	r2, #516	; 0x204
 80150dc:	f854 5b04 	ldr.w	r5, [r4], #4
 80150e0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80150e4:	9002      	str	r0, [sp, #8]
 80150e6:	9006      	str	r0, [sp, #24]
 80150e8:	f7eb f88a 	bl	8000200 <strlen>
 80150ec:	4b0b      	ldr	r3, [pc, #44]	; (801511c <siscanf+0x4c>)
 80150ee:	9003      	str	r0, [sp, #12]
 80150f0:	9007      	str	r0, [sp, #28]
 80150f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80150f4:	480a      	ldr	r0, [pc, #40]	; (8015120 <siscanf+0x50>)
 80150f6:	9401      	str	r4, [sp, #4]
 80150f8:	2300      	movs	r3, #0
 80150fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80150fc:	9314      	str	r3, [sp, #80]	; 0x50
 80150fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015102:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015106:	462a      	mov	r2, r5
 8015108:	4623      	mov	r3, r4
 801510a:	a902      	add	r1, sp, #8
 801510c:	6800      	ldr	r0, [r0, #0]
 801510e:	f002 feeb 	bl	8017ee8 <__ssvfiscanf_r>
 8015112:	b01c      	add	sp, #112	; 0x70
 8015114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015118:	b003      	add	sp, #12
 801511a:	4770      	bx	lr
 801511c:	08015125 	.word	0x08015125
 8015120:	2000000c 	.word	0x2000000c

08015124 <__seofread>:
 8015124:	2000      	movs	r0, #0
 8015126:	4770      	bx	lr

08015128 <strcpy>:
 8015128:	4603      	mov	r3, r0
 801512a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801512e:	f803 2b01 	strb.w	r2, [r3], #1
 8015132:	2a00      	cmp	r2, #0
 8015134:	d1f9      	bne.n	801512a <strcpy+0x2>
 8015136:	4770      	bx	lr

08015138 <sulp>:
 8015138:	b570      	push	{r4, r5, r6, lr}
 801513a:	4604      	mov	r4, r0
 801513c:	460d      	mov	r5, r1
 801513e:	ec45 4b10 	vmov	d0, r4, r5
 8015142:	4616      	mov	r6, r2
 8015144:	f002 fb3a 	bl	80177bc <__ulp>
 8015148:	ec51 0b10 	vmov	r0, r1, d0
 801514c:	b17e      	cbz	r6, 801516e <sulp+0x36>
 801514e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015152:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015156:	2b00      	cmp	r3, #0
 8015158:	dd09      	ble.n	801516e <sulp+0x36>
 801515a:	051b      	lsls	r3, r3, #20
 801515c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015160:	2400      	movs	r4, #0
 8015162:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015166:	4622      	mov	r2, r4
 8015168:	462b      	mov	r3, r5
 801516a:	f7eb fa5d 	bl	8000628 <__aeabi_dmul>
 801516e:	bd70      	pop	{r4, r5, r6, pc}

08015170 <_strtod_l>:
 8015170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015174:	461f      	mov	r7, r3
 8015176:	b0a1      	sub	sp, #132	; 0x84
 8015178:	2300      	movs	r3, #0
 801517a:	4681      	mov	r9, r0
 801517c:	4638      	mov	r0, r7
 801517e:	460e      	mov	r6, r1
 8015180:	9217      	str	r2, [sp, #92]	; 0x5c
 8015182:	931c      	str	r3, [sp, #112]	; 0x70
 8015184:	f002 f824 	bl	80171d0 <__localeconv_l>
 8015188:	4680      	mov	r8, r0
 801518a:	6800      	ldr	r0, [r0, #0]
 801518c:	f7eb f838 	bl	8000200 <strlen>
 8015190:	f04f 0a00 	mov.w	sl, #0
 8015194:	4604      	mov	r4, r0
 8015196:	f04f 0b00 	mov.w	fp, #0
 801519a:	961b      	str	r6, [sp, #108]	; 0x6c
 801519c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801519e:	781a      	ldrb	r2, [r3, #0]
 80151a0:	2a0d      	cmp	r2, #13
 80151a2:	d832      	bhi.n	801520a <_strtod_l+0x9a>
 80151a4:	2a09      	cmp	r2, #9
 80151a6:	d236      	bcs.n	8015216 <_strtod_l+0xa6>
 80151a8:	2a00      	cmp	r2, #0
 80151aa:	d03e      	beq.n	801522a <_strtod_l+0xba>
 80151ac:	2300      	movs	r3, #0
 80151ae:	930d      	str	r3, [sp, #52]	; 0x34
 80151b0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80151b2:	782b      	ldrb	r3, [r5, #0]
 80151b4:	2b30      	cmp	r3, #48	; 0x30
 80151b6:	f040 80ac 	bne.w	8015312 <_strtod_l+0x1a2>
 80151ba:	786b      	ldrb	r3, [r5, #1]
 80151bc:	2b58      	cmp	r3, #88	; 0x58
 80151be:	d001      	beq.n	80151c4 <_strtod_l+0x54>
 80151c0:	2b78      	cmp	r3, #120	; 0x78
 80151c2:	d167      	bne.n	8015294 <_strtod_l+0x124>
 80151c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80151c6:	9301      	str	r3, [sp, #4]
 80151c8:	ab1c      	add	r3, sp, #112	; 0x70
 80151ca:	9300      	str	r3, [sp, #0]
 80151cc:	9702      	str	r7, [sp, #8]
 80151ce:	ab1d      	add	r3, sp, #116	; 0x74
 80151d0:	4a88      	ldr	r2, [pc, #544]	; (80153f4 <_strtod_l+0x284>)
 80151d2:	a91b      	add	r1, sp, #108	; 0x6c
 80151d4:	4648      	mov	r0, r9
 80151d6:	f001 fd12 	bl	8016bfe <__gethex>
 80151da:	f010 0407 	ands.w	r4, r0, #7
 80151de:	4606      	mov	r6, r0
 80151e0:	d005      	beq.n	80151ee <_strtod_l+0x7e>
 80151e2:	2c06      	cmp	r4, #6
 80151e4:	d12b      	bne.n	801523e <_strtod_l+0xce>
 80151e6:	3501      	adds	r5, #1
 80151e8:	2300      	movs	r3, #0
 80151ea:	951b      	str	r5, [sp, #108]	; 0x6c
 80151ec:	930d      	str	r3, [sp, #52]	; 0x34
 80151ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	f040 859a 	bne.w	8015d2a <_strtod_l+0xbba>
 80151f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80151f8:	b1e3      	cbz	r3, 8015234 <_strtod_l+0xc4>
 80151fa:	4652      	mov	r2, sl
 80151fc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015200:	ec43 2b10 	vmov	d0, r2, r3
 8015204:	b021      	add	sp, #132	; 0x84
 8015206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801520a:	2a2b      	cmp	r2, #43	; 0x2b
 801520c:	d015      	beq.n	801523a <_strtod_l+0xca>
 801520e:	2a2d      	cmp	r2, #45	; 0x2d
 8015210:	d004      	beq.n	801521c <_strtod_l+0xac>
 8015212:	2a20      	cmp	r2, #32
 8015214:	d1ca      	bne.n	80151ac <_strtod_l+0x3c>
 8015216:	3301      	adds	r3, #1
 8015218:	931b      	str	r3, [sp, #108]	; 0x6c
 801521a:	e7bf      	b.n	801519c <_strtod_l+0x2c>
 801521c:	2201      	movs	r2, #1
 801521e:	920d      	str	r2, [sp, #52]	; 0x34
 8015220:	1c5a      	adds	r2, r3, #1
 8015222:	921b      	str	r2, [sp, #108]	; 0x6c
 8015224:	785b      	ldrb	r3, [r3, #1]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d1c2      	bne.n	80151b0 <_strtod_l+0x40>
 801522a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801522c:	961b      	str	r6, [sp, #108]	; 0x6c
 801522e:	2b00      	cmp	r3, #0
 8015230:	f040 8579 	bne.w	8015d26 <_strtod_l+0xbb6>
 8015234:	4652      	mov	r2, sl
 8015236:	465b      	mov	r3, fp
 8015238:	e7e2      	b.n	8015200 <_strtod_l+0x90>
 801523a:	2200      	movs	r2, #0
 801523c:	e7ef      	b.n	801521e <_strtod_l+0xae>
 801523e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015240:	b13a      	cbz	r2, 8015252 <_strtod_l+0xe2>
 8015242:	2135      	movs	r1, #53	; 0x35
 8015244:	a81e      	add	r0, sp, #120	; 0x78
 8015246:	f002 fbb1 	bl	80179ac <__copybits>
 801524a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801524c:	4648      	mov	r0, r9
 801524e:	f002 f81d 	bl	801728c <_Bfree>
 8015252:	3c01      	subs	r4, #1
 8015254:	2c04      	cmp	r4, #4
 8015256:	d806      	bhi.n	8015266 <_strtod_l+0xf6>
 8015258:	e8df f004 	tbb	[pc, r4]
 801525c:	1714030a 	.word	0x1714030a
 8015260:	0a          	.byte	0x0a
 8015261:	00          	.byte	0x00
 8015262:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8015266:	0730      	lsls	r0, r6, #28
 8015268:	d5c1      	bpl.n	80151ee <_strtod_l+0x7e>
 801526a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801526e:	e7be      	b.n	80151ee <_strtod_l+0x7e>
 8015270:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8015274:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015276:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801527a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801527e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015282:	e7f0      	b.n	8015266 <_strtod_l+0xf6>
 8015284:	f8df b170 	ldr.w	fp, [pc, #368]	; 80153f8 <_strtod_l+0x288>
 8015288:	e7ed      	b.n	8015266 <_strtod_l+0xf6>
 801528a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801528e:	f04f 3aff 	mov.w	sl, #4294967295
 8015292:	e7e8      	b.n	8015266 <_strtod_l+0xf6>
 8015294:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015296:	1c5a      	adds	r2, r3, #1
 8015298:	921b      	str	r2, [sp, #108]	; 0x6c
 801529a:	785b      	ldrb	r3, [r3, #1]
 801529c:	2b30      	cmp	r3, #48	; 0x30
 801529e:	d0f9      	beq.n	8015294 <_strtod_l+0x124>
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d0a4      	beq.n	80151ee <_strtod_l+0x7e>
 80152a4:	2301      	movs	r3, #1
 80152a6:	2500      	movs	r5, #0
 80152a8:	9306      	str	r3, [sp, #24]
 80152aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80152ac:	9308      	str	r3, [sp, #32]
 80152ae:	9507      	str	r5, [sp, #28]
 80152b0:	9505      	str	r5, [sp, #20]
 80152b2:	220a      	movs	r2, #10
 80152b4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80152b6:	7807      	ldrb	r7, [r0, #0]
 80152b8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80152bc:	b2d9      	uxtb	r1, r3
 80152be:	2909      	cmp	r1, #9
 80152c0:	d929      	bls.n	8015316 <_strtod_l+0x1a6>
 80152c2:	4622      	mov	r2, r4
 80152c4:	f8d8 1000 	ldr.w	r1, [r8]
 80152c8:	f003 f8f8 	bl	80184bc <strncmp>
 80152cc:	2800      	cmp	r0, #0
 80152ce:	d031      	beq.n	8015334 <_strtod_l+0x1c4>
 80152d0:	2000      	movs	r0, #0
 80152d2:	9c05      	ldr	r4, [sp, #20]
 80152d4:	9004      	str	r0, [sp, #16]
 80152d6:	463b      	mov	r3, r7
 80152d8:	4602      	mov	r2, r0
 80152da:	2b65      	cmp	r3, #101	; 0x65
 80152dc:	d001      	beq.n	80152e2 <_strtod_l+0x172>
 80152de:	2b45      	cmp	r3, #69	; 0x45
 80152e0:	d114      	bne.n	801530c <_strtod_l+0x19c>
 80152e2:	b924      	cbnz	r4, 80152ee <_strtod_l+0x17e>
 80152e4:	b910      	cbnz	r0, 80152ec <_strtod_l+0x17c>
 80152e6:	9b06      	ldr	r3, [sp, #24]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d09e      	beq.n	801522a <_strtod_l+0xba>
 80152ec:	2400      	movs	r4, #0
 80152ee:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80152f0:	1c73      	adds	r3, r6, #1
 80152f2:	931b      	str	r3, [sp, #108]	; 0x6c
 80152f4:	7873      	ldrb	r3, [r6, #1]
 80152f6:	2b2b      	cmp	r3, #43	; 0x2b
 80152f8:	d078      	beq.n	80153ec <_strtod_l+0x27c>
 80152fa:	2b2d      	cmp	r3, #45	; 0x2d
 80152fc:	d070      	beq.n	80153e0 <_strtod_l+0x270>
 80152fe:	f04f 0c00 	mov.w	ip, #0
 8015302:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8015306:	2f09      	cmp	r7, #9
 8015308:	d97c      	bls.n	8015404 <_strtod_l+0x294>
 801530a:	961b      	str	r6, [sp, #108]	; 0x6c
 801530c:	f04f 0e00 	mov.w	lr, #0
 8015310:	e09a      	b.n	8015448 <_strtod_l+0x2d8>
 8015312:	2300      	movs	r3, #0
 8015314:	e7c7      	b.n	80152a6 <_strtod_l+0x136>
 8015316:	9905      	ldr	r1, [sp, #20]
 8015318:	2908      	cmp	r1, #8
 801531a:	bfdd      	ittte	le
 801531c:	9907      	ldrle	r1, [sp, #28]
 801531e:	fb02 3301 	mlale	r3, r2, r1, r3
 8015322:	9307      	strle	r3, [sp, #28]
 8015324:	fb02 3505 	mlagt	r5, r2, r5, r3
 8015328:	9b05      	ldr	r3, [sp, #20]
 801532a:	3001      	adds	r0, #1
 801532c:	3301      	adds	r3, #1
 801532e:	9305      	str	r3, [sp, #20]
 8015330:	901b      	str	r0, [sp, #108]	; 0x6c
 8015332:	e7bf      	b.n	80152b4 <_strtod_l+0x144>
 8015334:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015336:	191a      	adds	r2, r3, r4
 8015338:	921b      	str	r2, [sp, #108]	; 0x6c
 801533a:	9a05      	ldr	r2, [sp, #20]
 801533c:	5d1b      	ldrb	r3, [r3, r4]
 801533e:	2a00      	cmp	r2, #0
 8015340:	d037      	beq.n	80153b2 <_strtod_l+0x242>
 8015342:	9c05      	ldr	r4, [sp, #20]
 8015344:	4602      	mov	r2, r0
 8015346:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801534a:	2909      	cmp	r1, #9
 801534c:	d913      	bls.n	8015376 <_strtod_l+0x206>
 801534e:	2101      	movs	r1, #1
 8015350:	9104      	str	r1, [sp, #16]
 8015352:	e7c2      	b.n	80152da <_strtod_l+0x16a>
 8015354:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015356:	1c5a      	adds	r2, r3, #1
 8015358:	921b      	str	r2, [sp, #108]	; 0x6c
 801535a:	785b      	ldrb	r3, [r3, #1]
 801535c:	3001      	adds	r0, #1
 801535e:	2b30      	cmp	r3, #48	; 0x30
 8015360:	d0f8      	beq.n	8015354 <_strtod_l+0x1e4>
 8015362:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8015366:	2a08      	cmp	r2, #8
 8015368:	f200 84e4 	bhi.w	8015d34 <_strtod_l+0xbc4>
 801536c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801536e:	9208      	str	r2, [sp, #32]
 8015370:	4602      	mov	r2, r0
 8015372:	2000      	movs	r0, #0
 8015374:	4604      	mov	r4, r0
 8015376:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801537a:	f100 0101 	add.w	r1, r0, #1
 801537e:	d012      	beq.n	80153a6 <_strtod_l+0x236>
 8015380:	440a      	add	r2, r1
 8015382:	eb00 0c04 	add.w	ip, r0, r4
 8015386:	4621      	mov	r1, r4
 8015388:	270a      	movs	r7, #10
 801538a:	458c      	cmp	ip, r1
 801538c:	d113      	bne.n	80153b6 <_strtod_l+0x246>
 801538e:	1821      	adds	r1, r4, r0
 8015390:	2908      	cmp	r1, #8
 8015392:	f104 0401 	add.w	r4, r4, #1
 8015396:	4404      	add	r4, r0
 8015398:	dc19      	bgt.n	80153ce <_strtod_l+0x25e>
 801539a:	9b07      	ldr	r3, [sp, #28]
 801539c:	210a      	movs	r1, #10
 801539e:	fb01 e303 	mla	r3, r1, r3, lr
 80153a2:	9307      	str	r3, [sp, #28]
 80153a4:	2100      	movs	r1, #0
 80153a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80153a8:	1c58      	adds	r0, r3, #1
 80153aa:	901b      	str	r0, [sp, #108]	; 0x6c
 80153ac:	785b      	ldrb	r3, [r3, #1]
 80153ae:	4608      	mov	r0, r1
 80153b0:	e7c9      	b.n	8015346 <_strtod_l+0x1d6>
 80153b2:	9805      	ldr	r0, [sp, #20]
 80153b4:	e7d3      	b.n	801535e <_strtod_l+0x1ee>
 80153b6:	2908      	cmp	r1, #8
 80153b8:	f101 0101 	add.w	r1, r1, #1
 80153bc:	dc03      	bgt.n	80153c6 <_strtod_l+0x256>
 80153be:	9b07      	ldr	r3, [sp, #28]
 80153c0:	437b      	muls	r3, r7
 80153c2:	9307      	str	r3, [sp, #28]
 80153c4:	e7e1      	b.n	801538a <_strtod_l+0x21a>
 80153c6:	2910      	cmp	r1, #16
 80153c8:	bfd8      	it	le
 80153ca:	437d      	mulle	r5, r7
 80153cc:	e7dd      	b.n	801538a <_strtod_l+0x21a>
 80153ce:	2c10      	cmp	r4, #16
 80153d0:	bfdc      	itt	le
 80153d2:	210a      	movle	r1, #10
 80153d4:	fb01 e505 	mlale	r5, r1, r5, lr
 80153d8:	e7e4      	b.n	80153a4 <_strtod_l+0x234>
 80153da:	2301      	movs	r3, #1
 80153dc:	9304      	str	r3, [sp, #16]
 80153de:	e781      	b.n	80152e4 <_strtod_l+0x174>
 80153e0:	f04f 0c01 	mov.w	ip, #1
 80153e4:	1cb3      	adds	r3, r6, #2
 80153e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80153e8:	78b3      	ldrb	r3, [r6, #2]
 80153ea:	e78a      	b.n	8015302 <_strtod_l+0x192>
 80153ec:	f04f 0c00 	mov.w	ip, #0
 80153f0:	e7f8      	b.n	80153e4 <_strtod_l+0x274>
 80153f2:	bf00      	nop
 80153f4:	08018f80 	.word	0x08018f80
 80153f8:	7ff00000 	.word	0x7ff00000
 80153fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80153fe:	1c5f      	adds	r7, r3, #1
 8015400:	971b      	str	r7, [sp, #108]	; 0x6c
 8015402:	785b      	ldrb	r3, [r3, #1]
 8015404:	2b30      	cmp	r3, #48	; 0x30
 8015406:	d0f9      	beq.n	80153fc <_strtod_l+0x28c>
 8015408:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801540c:	2f08      	cmp	r7, #8
 801540e:	f63f af7d 	bhi.w	801530c <_strtod_l+0x19c>
 8015412:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8015416:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015418:	930a      	str	r3, [sp, #40]	; 0x28
 801541a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801541c:	1c5f      	adds	r7, r3, #1
 801541e:	971b      	str	r7, [sp, #108]	; 0x6c
 8015420:	785b      	ldrb	r3, [r3, #1]
 8015422:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8015426:	f1b8 0f09 	cmp.w	r8, #9
 801542a:	d937      	bls.n	801549c <_strtod_l+0x32c>
 801542c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801542e:	1a7f      	subs	r7, r7, r1
 8015430:	2f08      	cmp	r7, #8
 8015432:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8015436:	dc37      	bgt.n	80154a8 <_strtod_l+0x338>
 8015438:	45be      	cmp	lr, r7
 801543a:	bfa8      	it	ge
 801543c:	46be      	movge	lr, r7
 801543e:	f1bc 0f00 	cmp.w	ip, #0
 8015442:	d001      	beq.n	8015448 <_strtod_l+0x2d8>
 8015444:	f1ce 0e00 	rsb	lr, lr, #0
 8015448:	2c00      	cmp	r4, #0
 801544a:	d151      	bne.n	80154f0 <_strtod_l+0x380>
 801544c:	2800      	cmp	r0, #0
 801544e:	f47f aece 	bne.w	80151ee <_strtod_l+0x7e>
 8015452:	9a06      	ldr	r2, [sp, #24]
 8015454:	2a00      	cmp	r2, #0
 8015456:	f47f aeca 	bne.w	80151ee <_strtod_l+0x7e>
 801545a:	9a04      	ldr	r2, [sp, #16]
 801545c:	2a00      	cmp	r2, #0
 801545e:	f47f aee4 	bne.w	801522a <_strtod_l+0xba>
 8015462:	2b4e      	cmp	r3, #78	; 0x4e
 8015464:	d027      	beq.n	80154b6 <_strtod_l+0x346>
 8015466:	dc21      	bgt.n	80154ac <_strtod_l+0x33c>
 8015468:	2b49      	cmp	r3, #73	; 0x49
 801546a:	f47f aede 	bne.w	801522a <_strtod_l+0xba>
 801546e:	49a0      	ldr	r1, [pc, #640]	; (80156f0 <_strtod_l+0x580>)
 8015470:	a81b      	add	r0, sp, #108	; 0x6c
 8015472:	f001 fdf7 	bl	8017064 <__match>
 8015476:	2800      	cmp	r0, #0
 8015478:	f43f aed7 	beq.w	801522a <_strtod_l+0xba>
 801547c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801547e:	499d      	ldr	r1, [pc, #628]	; (80156f4 <_strtod_l+0x584>)
 8015480:	3b01      	subs	r3, #1
 8015482:	a81b      	add	r0, sp, #108	; 0x6c
 8015484:	931b      	str	r3, [sp, #108]	; 0x6c
 8015486:	f001 fded 	bl	8017064 <__match>
 801548a:	b910      	cbnz	r0, 8015492 <_strtod_l+0x322>
 801548c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801548e:	3301      	adds	r3, #1
 8015490:	931b      	str	r3, [sp, #108]	; 0x6c
 8015492:	f8df b274 	ldr.w	fp, [pc, #628]	; 8015708 <_strtod_l+0x598>
 8015496:	f04f 0a00 	mov.w	sl, #0
 801549a:	e6a8      	b.n	80151ee <_strtod_l+0x7e>
 801549c:	210a      	movs	r1, #10
 801549e:	fb01 3e0e 	mla	lr, r1, lr, r3
 80154a2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80154a6:	e7b8      	b.n	801541a <_strtod_l+0x2aa>
 80154a8:	46be      	mov	lr, r7
 80154aa:	e7c8      	b.n	801543e <_strtod_l+0x2ce>
 80154ac:	2b69      	cmp	r3, #105	; 0x69
 80154ae:	d0de      	beq.n	801546e <_strtod_l+0x2fe>
 80154b0:	2b6e      	cmp	r3, #110	; 0x6e
 80154b2:	f47f aeba 	bne.w	801522a <_strtod_l+0xba>
 80154b6:	4990      	ldr	r1, [pc, #576]	; (80156f8 <_strtod_l+0x588>)
 80154b8:	a81b      	add	r0, sp, #108	; 0x6c
 80154ba:	f001 fdd3 	bl	8017064 <__match>
 80154be:	2800      	cmp	r0, #0
 80154c0:	f43f aeb3 	beq.w	801522a <_strtod_l+0xba>
 80154c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80154c6:	781b      	ldrb	r3, [r3, #0]
 80154c8:	2b28      	cmp	r3, #40	; 0x28
 80154ca:	d10e      	bne.n	80154ea <_strtod_l+0x37a>
 80154cc:	aa1e      	add	r2, sp, #120	; 0x78
 80154ce:	498b      	ldr	r1, [pc, #556]	; (80156fc <_strtod_l+0x58c>)
 80154d0:	a81b      	add	r0, sp, #108	; 0x6c
 80154d2:	f001 fddb 	bl	801708c <__hexnan>
 80154d6:	2805      	cmp	r0, #5
 80154d8:	d107      	bne.n	80154ea <_strtod_l+0x37a>
 80154da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80154dc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80154e0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80154e4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80154e8:	e681      	b.n	80151ee <_strtod_l+0x7e>
 80154ea:	f8df b224 	ldr.w	fp, [pc, #548]	; 8015710 <_strtod_l+0x5a0>
 80154ee:	e7d2      	b.n	8015496 <_strtod_l+0x326>
 80154f0:	ebae 0302 	sub.w	r3, lr, r2
 80154f4:	9306      	str	r3, [sp, #24]
 80154f6:	9b05      	ldr	r3, [sp, #20]
 80154f8:	9807      	ldr	r0, [sp, #28]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	bf08      	it	eq
 80154fe:	4623      	moveq	r3, r4
 8015500:	2c10      	cmp	r4, #16
 8015502:	9305      	str	r3, [sp, #20]
 8015504:	46a0      	mov	r8, r4
 8015506:	bfa8      	it	ge
 8015508:	f04f 0810 	movge.w	r8, #16
 801550c:	f7eb f812 	bl	8000534 <__aeabi_ui2d>
 8015510:	2c09      	cmp	r4, #9
 8015512:	4682      	mov	sl, r0
 8015514:	468b      	mov	fp, r1
 8015516:	dc13      	bgt.n	8015540 <_strtod_l+0x3d0>
 8015518:	9b06      	ldr	r3, [sp, #24]
 801551a:	2b00      	cmp	r3, #0
 801551c:	f43f ae67 	beq.w	80151ee <_strtod_l+0x7e>
 8015520:	9b06      	ldr	r3, [sp, #24]
 8015522:	dd7a      	ble.n	801561a <_strtod_l+0x4aa>
 8015524:	2b16      	cmp	r3, #22
 8015526:	dc61      	bgt.n	80155ec <_strtod_l+0x47c>
 8015528:	4a75      	ldr	r2, [pc, #468]	; (8015700 <_strtod_l+0x590>)
 801552a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801552e:	e9de 0100 	ldrd	r0, r1, [lr]
 8015532:	4652      	mov	r2, sl
 8015534:	465b      	mov	r3, fp
 8015536:	f7eb f877 	bl	8000628 <__aeabi_dmul>
 801553a:	4682      	mov	sl, r0
 801553c:	468b      	mov	fp, r1
 801553e:	e656      	b.n	80151ee <_strtod_l+0x7e>
 8015540:	4b6f      	ldr	r3, [pc, #444]	; (8015700 <_strtod_l+0x590>)
 8015542:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015546:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801554a:	f7eb f86d 	bl	8000628 <__aeabi_dmul>
 801554e:	4606      	mov	r6, r0
 8015550:	4628      	mov	r0, r5
 8015552:	460f      	mov	r7, r1
 8015554:	f7ea ffee 	bl	8000534 <__aeabi_ui2d>
 8015558:	4602      	mov	r2, r0
 801555a:	460b      	mov	r3, r1
 801555c:	4630      	mov	r0, r6
 801555e:	4639      	mov	r1, r7
 8015560:	f7ea feac 	bl	80002bc <__adddf3>
 8015564:	2c0f      	cmp	r4, #15
 8015566:	4682      	mov	sl, r0
 8015568:	468b      	mov	fp, r1
 801556a:	ddd5      	ble.n	8015518 <_strtod_l+0x3a8>
 801556c:	9b06      	ldr	r3, [sp, #24]
 801556e:	eba4 0808 	sub.w	r8, r4, r8
 8015572:	4498      	add	r8, r3
 8015574:	f1b8 0f00 	cmp.w	r8, #0
 8015578:	f340 8096 	ble.w	80156a8 <_strtod_l+0x538>
 801557c:	f018 030f 	ands.w	r3, r8, #15
 8015580:	d00a      	beq.n	8015598 <_strtod_l+0x428>
 8015582:	495f      	ldr	r1, [pc, #380]	; (8015700 <_strtod_l+0x590>)
 8015584:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015588:	4652      	mov	r2, sl
 801558a:	465b      	mov	r3, fp
 801558c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015590:	f7eb f84a 	bl	8000628 <__aeabi_dmul>
 8015594:	4682      	mov	sl, r0
 8015596:	468b      	mov	fp, r1
 8015598:	f038 080f 	bics.w	r8, r8, #15
 801559c:	d073      	beq.n	8015686 <_strtod_l+0x516>
 801559e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80155a2:	dd47      	ble.n	8015634 <_strtod_l+0x4c4>
 80155a4:	2400      	movs	r4, #0
 80155a6:	46a0      	mov	r8, r4
 80155a8:	9407      	str	r4, [sp, #28]
 80155aa:	9405      	str	r4, [sp, #20]
 80155ac:	2322      	movs	r3, #34	; 0x22
 80155ae:	f8df b158 	ldr.w	fp, [pc, #344]	; 8015708 <_strtod_l+0x598>
 80155b2:	f8c9 3000 	str.w	r3, [r9]
 80155b6:	f04f 0a00 	mov.w	sl, #0
 80155ba:	9b07      	ldr	r3, [sp, #28]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	f43f ae16 	beq.w	80151ee <_strtod_l+0x7e>
 80155c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80155c4:	4648      	mov	r0, r9
 80155c6:	f001 fe61 	bl	801728c <_Bfree>
 80155ca:	9905      	ldr	r1, [sp, #20]
 80155cc:	4648      	mov	r0, r9
 80155ce:	f001 fe5d 	bl	801728c <_Bfree>
 80155d2:	4641      	mov	r1, r8
 80155d4:	4648      	mov	r0, r9
 80155d6:	f001 fe59 	bl	801728c <_Bfree>
 80155da:	9907      	ldr	r1, [sp, #28]
 80155dc:	4648      	mov	r0, r9
 80155de:	f001 fe55 	bl	801728c <_Bfree>
 80155e2:	4621      	mov	r1, r4
 80155e4:	4648      	mov	r0, r9
 80155e6:	f001 fe51 	bl	801728c <_Bfree>
 80155ea:	e600      	b.n	80151ee <_strtod_l+0x7e>
 80155ec:	9a06      	ldr	r2, [sp, #24]
 80155ee:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80155f2:	4293      	cmp	r3, r2
 80155f4:	dbba      	blt.n	801556c <_strtod_l+0x3fc>
 80155f6:	4d42      	ldr	r5, [pc, #264]	; (8015700 <_strtod_l+0x590>)
 80155f8:	f1c4 040f 	rsb	r4, r4, #15
 80155fc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8015600:	4652      	mov	r2, sl
 8015602:	465b      	mov	r3, fp
 8015604:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015608:	f7eb f80e 	bl	8000628 <__aeabi_dmul>
 801560c:	9b06      	ldr	r3, [sp, #24]
 801560e:	1b1c      	subs	r4, r3, r4
 8015610:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8015614:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015618:	e78d      	b.n	8015536 <_strtod_l+0x3c6>
 801561a:	f113 0f16 	cmn.w	r3, #22
 801561e:	dba5      	blt.n	801556c <_strtod_l+0x3fc>
 8015620:	4a37      	ldr	r2, [pc, #220]	; (8015700 <_strtod_l+0x590>)
 8015622:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8015626:	e9d2 2300 	ldrd	r2, r3, [r2]
 801562a:	4650      	mov	r0, sl
 801562c:	4659      	mov	r1, fp
 801562e:	f7eb f925 	bl	800087c <__aeabi_ddiv>
 8015632:	e782      	b.n	801553a <_strtod_l+0x3ca>
 8015634:	2300      	movs	r3, #0
 8015636:	4e33      	ldr	r6, [pc, #204]	; (8015704 <_strtod_l+0x594>)
 8015638:	ea4f 1828 	mov.w	r8, r8, asr #4
 801563c:	4650      	mov	r0, sl
 801563e:	4659      	mov	r1, fp
 8015640:	461d      	mov	r5, r3
 8015642:	f1b8 0f01 	cmp.w	r8, #1
 8015646:	dc21      	bgt.n	801568c <_strtod_l+0x51c>
 8015648:	b10b      	cbz	r3, 801564e <_strtod_l+0x4de>
 801564a:	4682      	mov	sl, r0
 801564c:	468b      	mov	fp, r1
 801564e:	4b2d      	ldr	r3, [pc, #180]	; (8015704 <_strtod_l+0x594>)
 8015650:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015654:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015658:	4652      	mov	r2, sl
 801565a:	465b      	mov	r3, fp
 801565c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015660:	f7ea ffe2 	bl	8000628 <__aeabi_dmul>
 8015664:	4b28      	ldr	r3, [pc, #160]	; (8015708 <_strtod_l+0x598>)
 8015666:	460a      	mov	r2, r1
 8015668:	400b      	ands	r3, r1
 801566a:	4928      	ldr	r1, [pc, #160]	; (801570c <_strtod_l+0x59c>)
 801566c:	428b      	cmp	r3, r1
 801566e:	4682      	mov	sl, r0
 8015670:	d898      	bhi.n	80155a4 <_strtod_l+0x434>
 8015672:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015676:	428b      	cmp	r3, r1
 8015678:	bf86      	itte	hi
 801567a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8015714 <_strtod_l+0x5a4>
 801567e:	f04f 3aff 	movhi.w	sl, #4294967295
 8015682:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8015686:	2300      	movs	r3, #0
 8015688:	9304      	str	r3, [sp, #16]
 801568a:	e077      	b.n	801577c <_strtod_l+0x60c>
 801568c:	f018 0f01 	tst.w	r8, #1
 8015690:	d006      	beq.n	80156a0 <_strtod_l+0x530>
 8015692:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8015696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801569a:	f7ea ffc5 	bl	8000628 <__aeabi_dmul>
 801569e:	2301      	movs	r3, #1
 80156a0:	3501      	adds	r5, #1
 80156a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80156a6:	e7cc      	b.n	8015642 <_strtod_l+0x4d2>
 80156a8:	d0ed      	beq.n	8015686 <_strtod_l+0x516>
 80156aa:	f1c8 0800 	rsb	r8, r8, #0
 80156ae:	f018 020f 	ands.w	r2, r8, #15
 80156b2:	d00a      	beq.n	80156ca <_strtod_l+0x55a>
 80156b4:	4b12      	ldr	r3, [pc, #72]	; (8015700 <_strtod_l+0x590>)
 80156b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80156ba:	4650      	mov	r0, sl
 80156bc:	4659      	mov	r1, fp
 80156be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156c2:	f7eb f8db 	bl	800087c <__aeabi_ddiv>
 80156c6:	4682      	mov	sl, r0
 80156c8:	468b      	mov	fp, r1
 80156ca:	ea5f 1828 	movs.w	r8, r8, asr #4
 80156ce:	d0da      	beq.n	8015686 <_strtod_l+0x516>
 80156d0:	f1b8 0f1f 	cmp.w	r8, #31
 80156d4:	dd20      	ble.n	8015718 <_strtod_l+0x5a8>
 80156d6:	2400      	movs	r4, #0
 80156d8:	46a0      	mov	r8, r4
 80156da:	9407      	str	r4, [sp, #28]
 80156dc:	9405      	str	r4, [sp, #20]
 80156de:	2322      	movs	r3, #34	; 0x22
 80156e0:	f04f 0a00 	mov.w	sl, #0
 80156e4:	f04f 0b00 	mov.w	fp, #0
 80156e8:	f8c9 3000 	str.w	r3, [r9]
 80156ec:	e765      	b.n	80155ba <_strtod_l+0x44a>
 80156ee:	bf00      	nop
 80156f0:	08018f4d 	.word	0x08018f4d
 80156f4:	08018fd3 	.word	0x08018fd3
 80156f8:	08018f55 	.word	0x08018f55
 80156fc:	08018f94 	.word	0x08018f94
 8015700:	08019078 	.word	0x08019078
 8015704:	08019050 	.word	0x08019050
 8015708:	7ff00000 	.word	0x7ff00000
 801570c:	7ca00000 	.word	0x7ca00000
 8015710:	fff80000 	.word	0xfff80000
 8015714:	7fefffff 	.word	0x7fefffff
 8015718:	f018 0310 	ands.w	r3, r8, #16
 801571c:	bf18      	it	ne
 801571e:	236a      	movne	r3, #106	; 0x6a
 8015720:	4da0      	ldr	r5, [pc, #640]	; (80159a4 <_strtod_l+0x834>)
 8015722:	9304      	str	r3, [sp, #16]
 8015724:	4650      	mov	r0, sl
 8015726:	4659      	mov	r1, fp
 8015728:	2300      	movs	r3, #0
 801572a:	f1b8 0f00 	cmp.w	r8, #0
 801572e:	f300 810a 	bgt.w	8015946 <_strtod_l+0x7d6>
 8015732:	b10b      	cbz	r3, 8015738 <_strtod_l+0x5c8>
 8015734:	4682      	mov	sl, r0
 8015736:	468b      	mov	fp, r1
 8015738:	9b04      	ldr	r3, [sp, #16]
 801573a:	b1bb      	cbz	r3, 801576c <_strtod_l+0x5fc>
 801573c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8015740:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015744:	2b00      	cmp	r3, #0
 8015746:	4659      	mov	r1, fp
 8015748:	dd10      	ble.n	801576c <_strtod_l+0x5fc>
 801574a:	2b1f      	cmp	r3, #31
 801574c:	f340 8107 	ble.w	801595e <_strtod_l+0x7ee>
 8015750:	2b34      	cmp	r3, #52	; 0x34
 8015752:	bfde      	ittt	le
 8015754:	3b20      	suble	r3, #32
 8015756:	f04f 32ff 	movle.w	r2, #4294967295
 801575a:	fa02 f303 	lslle.w	r3, r2, r3
 801575e:	f04f 0a00 	mov.w	sl, #0
 8015762:	bfcc      	ite	gt
 8015764:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015768:	ea03 0b01 	andle.w	fp, r3, r1
 801576c:	2200      	movs	r2, #0
 801576e:	2300      	movs	r3, #0
 8015770:	4650      	mov	r0, sl
 8015772:	4659      	mov	r1, fp
 8015774:	f7eb f9c0 	bl	8000af8 <__aeabi_dcmpeq>
 8015778:	2800      	cmp	r0, #0
 801577a:	d1ac      	bne.n	80156d6 <_strtod_l+0x566>
 801577c:	9b07      	ldr	r3, [sp, #28]
 801577e:	9300      	str	r3, [sp, #0]
 8015780:	9a05      	ldr	r2, [sp, #20]
 8015782:	9908      	ldr	r1, [sp, #32]
 8015784:	4623      	mov	r3, r4
 8015786:	4648      	mov	r0, r9
 8015788:	f001 fdd2 	bl	8017330 <__s2b>
 801578c:	9007      	str	r0, [sp, #28]
 801578e:	2800      	cmp	r0, #0
 8015790:	f43f af08 	beq.w	80155a4 <_strtod_l+0x434>
 8015794:	9a06      	ldr	r2, [sp, #24]
 8015796:	9b06      	ldr	r3, [sp, #24]
 8015798:	2a00      	cmp	r2, #0
 801579a:	f1c3 0300 	rsb	r3, r3, #0
 801579e:	bfa8      	it	ge
 80157a0:	2300      	movge	r3, #0
 80157a2:	930e      	str	r3, [sp, #56]	; 0x38
 80157a4:	2400      	movs	r4, #0
 80157a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80157aa:	9316      	str	r3, [sp, #88]	; 0x58
 80157ac:	46a0      	mov	r8, r4
 80157ae:	9b07      	ldr	r3, [sp, #28]
 80157b0:	4648      	mov	r0, r9
 80157b2:	6859      	ldr	r1, [r3, #4]
 80157b4:	f001 fd36 	bl	8017224 <_Balloc>
 80157b8:	9005      	str	r0, [sp, #20]
 80157ba:	2800      	cmp	r0, #0
 80157bc:	f43f aef6 	beq.w	80155ac <_strtod_l+0x43c>
 80157c0:	9b07      	ldr	r3, [sp, #28]
 80157c2:	691a      	ldr	r2, [r3, #16]
 80157c4:	3202      	adds	r2, #2
 80157c6:	f103 010c 	add.w	r1, r3, #12
 80157ca:	0092      	lsls	r2, r2, #2
 80157cc:	300c      	adds	r0, #12
 80157ce:	f7fe fdd3 	bl	8014378 <memcpy>
 80157d2:	aa1e      	add	r2, sp, #120	; 0x78
 80157d4:	a91d      	add	r1, sp, #116	; 0x74
 80157d6:	ec4b ab10 	vmov	d0, sl, fp
 80157da:	4648      	mov	r0, r9
 80157dc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80157e0:	f002 f862 	bl	80178a8 <__d2b>
 80157e4:	901c      	str	r0, [sp, #112]	; 0x70
 80157e6:	2800      	cmp	r0, #0
 80157e8:	f43f aee0 	beq.w	80155ac <_strtod_l+0x43c>
 80157ec:	2101      	movs	r1, #1
 80157ee:	4648      	mov	r0, r9
 80157f0:	f001 fe2a 	bl	8017448 <__i2b>
 80157f4:	4680      	mov	r8, r0
 80157f6:	2800      	cmp	r0, #0
 80157f8:	f43f aed8 	beq.w	80155ac <_strtod_l+0x43c>
 80157fc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80157fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015800:	2e00      	cmp	r6, #0
 8015802:	bfab      	itete	ge
 8015804:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8015806:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8015808:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801580a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801580c:	bfac      	ite	ge
 801580e:	18f7      	addge	r7, r6, r3
 8015810:	1b9d      	sublt	r5, r3, r6
 8015812:	9b04      	ldr	r3, [sp, #16]
 8015814:	1af6      	subs	r6, r6, r3
 8015816:	4416      	add	r6, r2
 8015818:	4b63      	ldr	r3, [pc, #396]	; (80159a8 <_strtod_l+0x838>)
 801581a:	3e01      	subs	r6, #1
 801581c:	429e      	cmp	r6, r3
 801581e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015822:	f280 80af 	bge.w	8015984 <_strtod_l+0x814>
 8015826:	1b9b      	subs	r3, r3, r6
 8015828:	2b1f      	cmp	r3, #31
 801582a:	eba2 0203 	sub.w	r2, r2, r3
 801582e:	f04f 0101 	mov.w	r1, #1
 8015832:	f300 809b 	bgt.w	801596c <_strtod_l+0x7fc>
 8015836:	fa01 f303 	lsl.w	r3, r1, r3
 801583a:	930f      	str	r3, [sp, #60]	; 0x3c
 801583c:	2300      	movs	r3, #0
 801583e:	930a      	str	r3, [sp, #40]	; 0x28
 8015840:	18be      	adds	r6, r7, r2
 8015842:	9b04      	ldr	r3, [sp, #16]
 8015844:	42b7      	cmp	r7, r6
 8015846:	4415      	add	r5, r2
 8015848:	441d      	add	r5, r3
 801584a:	463b      	mov	r3, r7
 801584c:	bfa8      	it	ge
 801584e:	4633      	movge	r3, r6
 8015850:	42ab      	cmp	r3, r5
 8015852:	bfa8      	it	ge
 8015854:	462b      	movge	r3, r5
 8015856:	2b00      	cmp	r3, #0
 8015858:	bfc2      	ittt	gt
 801585a:	1af6      	subgt	r6, r6, r3
 801585c:	1aed      	subgt	r5, r5, r3
 801585e:	1aff      	subgt	r7, r7, r3
 8015860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015862:	b1bb      	cbz	r3, 8015894 <_strtod_l+0x724>
 8015864:	4641      	mov	r1, r8
 8015866:	461a      	mov	r2, r3
 8015868:	4648      	mov	r0, r9
 801586a:	f001 fe8d 	bl	8017588 <__pow5mult>
 801586e:	4680      	mov	r8, r0
 8015870:	2800      	cmp	r0, #0
 8015872:	f43f ae9b 	beq.w	80155ac <_strtod_l+0x43c>
 8015876:	4601      	mov	r1, r0
 8015878:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801587a:	4648      	mov	r0, r9
 801587c:	f001 fded 	bl	801745a <__multiply>
 8015880:	900c      	str	r0, [sp, #48]	; 0x30
 8015882:	2800      	cmp	r0, #0
 8015884:	f43f ae92 	beq.w	80155ac <_strtod_l+0x43c>
 8015888:	991c      	ldr	r1, [sp, #112]	; 0x70
 801588a:	4648      	mov	r0, r9
 801588c:	f001 fcfe 	bl	801728c <_Bfree>
 8015890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015892:	931c      	str	r3, [sp, #112]	; 0x70
 8015894:	2e00      	cmp	r6, #0
 8015896:	dc7a      	bgt.n	801598e <_strtod_l+0x81e>
 8015898:	9b06      	ldr	r3, [sp, #24]
 801589a:	2b00      	cmp	r3, #0
 801589c:	dd08      	ble.n	80158b0 <_strtod_l+0x740>
 801589e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80158a0:	9905      	ldr	r1, [sp, #20]
 80158a2:	4648      	mov	r0, r9
 80158a4:	f001 fe70 	bl	8017588 <__pow5mult>
 80158a8:	9005      	str	r0, [sp, #20]
 80158aa:	2800      	cmp	r0, #0
 80158ac:	f43f ae7e 	beq.w	80155ac <_strtod_l+0x43c>
 80158b0:	2d00      	cmp	r5, #0
 80158b2:	dd08      	ble.n	80158c6 <_strtod_l+0x756>
 80158b4:	462a      	mov	r2, r5
 80158b6:	9905      	ldr	r1, [sp, #20]
 80158b8:	4648      	mov	r0, r9
 80158ba:	f001 feb3 	bl	8017624 <__lshift>
 80158be:	9005      	str	r0, [sp, #20]
 80158c0:	2800      	cmp	r0, #0
 80158c2:	f43f ae73 	beq.w	80155ac <_strtod_l+0x43c>
 80158c6:	2f00      	cmp	r7, #0
 80158c8:	dd08      	ble.n	80158dc <_strtod_l+0x76c>
 80158ca:	4641      	mov	r1, r8
 80158cc:	463a      	mov	r2, r7
 80158ce:	4648      	mov	r0, r9
 80158d0:	f001 fea8 	bl	8017624 <__lshift>
 80158d4:	4680      	mov	r8, r0
 80158d6:	2800      	cmp	r0, #0
 80158d8:	f43f ae68 	beq.w	80155ac <_strtod_l+0x43c>
 80158dc:	9a05      	ldr	r2, [sp, #20]
 80158de:	991c      	ldr	r1, [sp, #112]	; 0x70
 80158e0:	4648      	mov	r0, r9
 80158e2:	f001 ff0d 	bl	8017700 <__mdiff>
 80158e6:	4604      	mov	r4, r0
 80158e8:	2800      	cmp	r0, #0
 80158ea:	f43f ae5f 	beq.w	80155ac <_strtod_l+0x43c>
 80158ee:	68c3      	ldr	r3, [r0, #12]
 80158f0:	930c      	str	r3, [sp, #48]	; 0x30
 80158f2:	2300      	movs	r3, #0
 80158f4:	60c3      	str	r3, [r0, #12]
 80158f6:	4641      	mov	r1, r8
 80158f8:	f001 fee8 	bl	80176cc <__mcmp>
 80158fc:	2800      	cmp	r0, #0
 80158fe:	da55      	bge.n	80159ac <_strtod_l+0x83c>
 8015900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015902:	b9e3      	cbnz	r3, 801593e <_strtod_l+0x7ce>
 8015904:	f1ba 0f00 	cmp.w	sl, #0
 8015908:	d119      	bne.n	801593e <_strtod_l+0x7ce>
 801590a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801590e:	b9b3      	cbnz	r3, 801593e <_strtod_l+0x7ce>
 8015910:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015914:	0d1b      	lsrs	r3, r3, #20
 8015916:	051b      	lsls	r3, r3, #20
 8015918:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801591c:	d90f      	bls.n	801593e <_strtod_l+0x7ce>
 801591e:	6963      	ldr	r3, [r4, #20]
 8015920:	b913      	cbnz	r3, 8015928 <_strtod_l+0x7b8>
 8015922:	6923      	ldr	r3, [r4, #16]
 8015924:	2b01      	cmp	r3, #1
 8015926:	dd0a      	ble.n	801593e <_strtod_l+0x7ce>
 8015928:	4621      	mov	r1, r4
 801592a:	2201      	movs	r2, #1
 801592c:	4648      	mov	r0, r9
 801592e:	f001 fe79 	bl	8017624 <__lshift>
 8015932:	4641      	mov	r1, r8
 8015934:	4604      	mov	r4, r0
 8015936:	f001 fec9 	bl	80176cc <__mcmp>
 801593a:	2800      	cmp	r0, #0
 801593c:	dc67      	bgt.n	8015a0e <_strtod_l+0x89e>
 801593e:	9b04      	ldr	r3, [sp, #16]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d171      	bne.n	8015a28 <_strtod_l+0x8b8>
 8015944:	e63d      	b.n	80155c2 <_strtod_l+0x452>
 8015946:	f018 0f01 	tst.w	r8, #1
 801594a:	d004      	beq.n	8015956 <_strtod_l+0x7e6>
 801594c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015950:	f7ea fe6a 	bl	8000628 <__aeabi_dmul>
 8015954:	2301      	movs	r3, #1
 8015956:	ea4f 0868 	mov.w	r8, r8, asr #1
 801595a:	3508      	adds	r5, #8
 801595c:	e6e5      	b.n	801572a <_strtod_l+0x5ba>
 801595e:	f04f 32ff 	mov.w	r2, #4294967295
 8015962:	fa02 f303 	lsl.w	r3, r2, r3
 8015966:	ea03 0a0a 	and.w	sl, r3, sl
 801596a:	e6ff      	b.n	801576c <_strtod_l+0x5fc>
 801596c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015970:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8015974:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015978:	36e2      	adds	r6, #226	; 0xe2
 801597a:	fa01 f306 	lsl.w	r3, r1, r6
 801597e:	930a      	str	r3, [sp, #40]	; 0x28
 8015980:	910f      	str	r1, [sp, #60]	; 0x3c
 8015982:	e75d      	b.n	8015840 <_strtod_l+0x6d0>
 8015984:	2300      	movs	r3, #0
 8015986:	930a      	str	r3, [sp, #40]	; 0x28
 8015988:	2301      	movs	r3, #1
 801598a:	930f      	str	r3, [sp, #60]	; 0x3c
 801598c:	e758      	b.n	8015840 <_strtod_l+0x6d0>
 801598e:	4632      	mov	r2, r6
 8015990:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015992:	4648      	mov	r0, r9
 8015994:	f001 fe46 	bl	8017624 <__lshift>
 8015998:	901c      	str	r0, [sp, #112]	; 0x70
 801599a:	2800      	cmp	r0, #0
 801599c:	f47f af7c 	bne.w	8015898 <_strtod_l+0x728>
 80159a0:	e604      	b.n	80155ac <_strtod_l+0x43c>
 80159a2:	bf00      	nop
 80159a4:	08018fa8 	.word	0x08018fa8
 80159a8:	fffffc02 	.word	0xfffffc02
 80159ac:	465d      	mov	r5, fp
 80159ae:	f040 8086 	bne.w	8015abe <_strtod_l+0x94e>
 80159b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80159b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80159b8:	b32a      	cbz	r2, 8015a06 <_strtod_l+0x896>
 80159ba:	4aaf      	ldr	r2, [pc, #700]	; (8015c78 <_strtod_l+0xb08>)
 80159bc:	4293      	cmp	r3, r2
 80159be:	d153      	bne.n	8015a68 <_strtod_l+0x8f8>
 80159c0:	9b04      	ldr	r3, [sp, #16]
 80159c2:	4650      	mov	r0, sl
 80159c4:	b1d3      	cbz	r3, 80159fc <_strtod_l+0x88c>
 80159c6:	4aad      	ldr	r2, [pc, #692]	; (8015c7c <_strtod_l+0xb0c>)
 80159c8:	402a      	ands	r2, r5
 80159ca:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80159ce:	f04f 31ff 	mov.w	r1, #4294967295
 80159d2:	d816      	bhi.n	8015a02 <_strtod_l+0x892>
 80159d4:	0d12      	lsrs	r2, r2, #20
 80159d6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80159da:	fa01 f303 	lsl.w	r3, r1, r3
 80159de:	4298      	cmp	r0, r3
 80159e0:	d142      	bne.n	8015a68 <_strtod_l+0x8f8>
 80159e2:	4ba7      	ldr	r3, [pc, #668]	; (8015c80 <_strtod_l+0xb10>)
 80159e4:	429d      	cmp	r5, r3
 80159e6:	d102      	bne.n	80159ee <_strtod_l+0x87e>
 80159e8:	3001      	adds	r0, #1
 80159ea:	f43f addf 	beq.w	80155ac <_strtod_l+0x43c>
 80159ee:	4ba3      	ldr	r3, [pc, #652]	; (8015c7c <_strtod_l+0xb0c>)
 80159f0:	402b      	ands	r3, r5
 80159f2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80159f6:	f04f 0a00 	mov.w	sl, #0
 80159fa:	e7a0      	b.n	801593e <_strtod_l+0x7ce>
 80159fc:	f04f 33ff 	mov.w	r3, #4294967295
 8015a00:	e7ed      	b.n	80159de <_strtod_l+0x86e>
 8015a02:	460b      	mov	r3, r1
 8015a04:	e7eb      	b.n	80159de <_strtod_l+0x86e>
 8015a06:	bb7b      	cbnz	r3, 8015a68 <_strtod_l+0x8f8>
 8015a08:	f1ba 0f00 	cmp.w	sl, #0
 8015a0c:	d12c      	bne.n	8015a68 <_strtod_l+0x8f8>
 8015a0e:	9904      	ldr	r1, [sp, #16]
 8015a10:	4a9a      	ldr	r2, [pc, #616]	; (8015c7c <_strtod_l+0xb0c>)
 8015a12:	465b      	mov	r3, fp
 8015a14:	b1f1      	cbz	r1, 8015a54 <_strtod_l+0x8e4>
 8015a16:	ea02 010b 	and.w	r1, r2, fp
 8015a1a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015a1e:	dc19      	bgt.n	8015a54 <_strtod_l+0x8e4>
 8015a20:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015a24:	f77f ae5b 	ble.w	80156de <_strtod_l+0x56e>
 8015a28:	4a96      	ldr	r2, [pc, #600]	; (8015c84 <_strtod_l+0xb14>)
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8015a30:	4650      	mov	r0, sl
 8015a32:	4659      	mov	r1, fp
 8015a34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015a38:	f7ea fdf6 	bl	8000628 <__aeabi_dmul>
 8015a3c:	4682      	mov	sl, r0
 8015a3e:	468b      	mov	fp, r1
 8015a40:	2900      	cmp	r1, #0
 8015a42:	f47f adbe 	bne.w	80155c2 <_strtod_l+0x452>
 8015a46:	2800      	cmp	r0, #0
 8015a48:	f47f adbb 	bne.w	80155c2 <_strtod_l+0x452>
 8015a4c:	2322      	movs	r3, #34	; 0x22
 8015a4e:	f8c9 3000 	str.w	r3, [r9]
 8015a52:	e5b6      	b.n	80155c2 <_strtod_l+0x452>
 8015a54:	4013      	ands	r3, r2
 8015a56:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015a5a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015a5e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015a62:	f04f 3aff 	mov.w	sl, #4294967295
 8015a66:	e76a      	b.n	801593e <_strtod_l+0x7ce>
 8015a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a6a:	b193      	cbz	r3, 8015a92 <_strtod_l+0x922>
 8015a6c:	422b      	tst	r3, r5
 8015a6e:	f43f af66 	beq.w	801593e <_strtod_l+0x7ce>
 8015a72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a74:	9a04      	ldr	r2, [sp, #16]
 8015a76:	4650      	mov	r0, sl
 8015a78:	4659      	mov	r1, fp
 8015a7a:	b173      	cbz	r3, 8015a9a <_strtod_l+0x92a>
 8015a7c:	f7ff fb5c 	bl	8015138 <sulp>
 8015a80:	4602      	mov	r2, r0
 8015a82:	460b      	mov	r3, r1
 8015a84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015a88:	f7ea fc18 	bl	80002bc <__adddf3>
 8015a8c:	4682      	mov	sl, r0
 8015a8e:	468b      	mov	fp, r1
 8015a90:	e755      	b.n	801593e <_strtod_l+0x7ce>
 8015a92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a94:	ea13 0f0a 	tst.w	r3, sl
 8015a98:	e7e9      	b.n	8015a6e <_strtod_l+0x8fe>
 8015a9a:	f7ff fb4d 	bl	8015138 <sulp>
 8015a9e:	4602      	mov	r2, r0
 8015aa0:	460b      	mov	r3, r1
 8015aa2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015aa6:	f7ea fc07 	bl	80002b8 <__aeabi_dsub>
 8015aaa:	2200      	movs	r2, #0
 8015aac:	2300      	movs	r3, #0
 8015aae:	4682      	mov	sl, r0
 8015ab0:	468b      	mov	fp, r1
 8015ab2:	f7eb f821 	bl	8000af8 <__aeabi_dcmpeq>
 8015ab6:	2800      	cmp	r0, #0
 8015ab8:	f47f ae11 	bne.w	80156de <_strtod_l+0x56e>
 8015abc:	e73f      	b.n	801593e <_strtod_l+0x7ce>
 8015abe:	4641      	mov	r1, r8
 8015ac0:	4620      	mov	r0, r4
 8015ac2:	f001 ff40 	bl	8017946 <__ratio>
 8015ac6:	ec57 6b10 	vmov	r6, r7, d0
 8015aca:	2200      	movs	r2, #0
 8015acc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015ad0:	ee10 0a10 	vmov	r0, s0
 8015ad4:	4639      	mov	r1, r7
 8015ad6:	f7eb f823 	bl	8000b20 <__aeabi_dcmple>
 8015ada:	2800      	cmp	r0, #0
 8015adc:	d077      	beq.n	8015bce <_strtod_l+0xa5e>
 8015ade:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d04a      	beq.n	8015b7a <_strtod_l+0xa0a>
 8015ae4:	4b68      	ldr	r3, [pc, #416]	; (8015c88 <_strtod_l+0xb18>)
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015aec:	4f66      	ldr	r7, [pc, #408]	; (8015c88 <_strtod_l+0xb18>)
 8015aee:	2600      	movs	r6, #0
 8015af0:	4b62      	ldr	r3, [pc, #392]	; (8015c7c <_strtod_l+0xb0c>)
 8015af2:	402b      	ands	r3, r5
 8015af4:	930f      	str	r3, [sp, #60]	; 0x3c
 8015af6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015af8:	4b64      	ldr	r3, [pc, #400]	; (8015c8c <_strtod_l+0xb1c>)
 8015afa:	429a      	cmp	r2, r3
 8015afc:	f040 80ce 	bne.w	8015c9c <_strtod_l+0xb2c>
 8015b00:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015b04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015b08:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8015b0c:	ec4b ab10 	vmov	d0, sl, fp
 8015b10:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8015b14:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015b18:	f001 fe50 	bl	80177bc <__ulp>
 8015b1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015b20:	ec53 2b10 	vmov	r2, r3, d0
 8015b24:	f7ea fd80 	bl	8000628 <__aeabi_dmul>
 8015b28:	4652      	mov	r2, sl
 8015b2a:	465b      	mov	r3, fp
 8015b2c:	f7ea fbc6 	bl	80002bc <__adddf3>
 8015b30:	460b      	mov	r3, r1
 8015b32:	4952      	ldr	r1, [pc, #328]	; (8015c7c <_strtod_l+0xb0c>)
 8015b34:	4a56      	ldr	r2, [pc, #344]	; (8015c90 <_strtod_l+0xb20>)
 8015b36:	4019      	ands	r1, r3
 8015b38:	4291      	cmp	r1, r2
 8015b3a:	4682      	mov	sl, r0
 8015b3c:	d95b      	bls.n	8015bf6 <_strtod_l+0xa86>
 8015b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b40:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8015b44:	4293      	cmp	r3, r2
 8015b46:	d103      	bne.n	8015b50 <_strtod_l+0x9e0>
 8015b48:	9b08      	ldr	r3, [sp, #32]
 8015b4a:	3301      	adds	r3, #1
 8015b4c:	f43f ad2e 	beq.w	80155ac <_strtod_l+0x43c>
 8015b50:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8015c80 <_strtod_l+0xb10>
 8015b54:	f04f 3aff 	mov.w	sl, #4294967295
 8015b58:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015b5a:	4648      	mov	r0, r9
 8015b5c:	f001 fb96 	bl	801728c <_Bfree>
 8015b60:	9905      	ldr	r1, [sp, #20]
 8015b62:	4648      	mov	r0, r9
 8015b64:	f001 fb92 	bl	801728c <_Bfree>
 8015b68:	4641      	mov	r1, r8
 8015b6a:	4648      	mov	r0, r9
 8015b6c:	f001 fb8e 	bl	801728c <_Bfree>
 8015b70:	4621      	mov	r1, r4
 8015b72:	4648      	mov	r0, r9
 8015b74:	f001 fb8a 	bl	801728c <_Bfree>
 8015b78:	e619      	b.n	80157ae <_strtod_l+0x63e>
 8015b7a:	f1ba 0f00 	cmp.w	sl, #0
 8015b7e:	d11a      	bne.n	8015bb6 <_strtod_l+0xa46>
 8015b80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015b84:	b9eb      	cbnz	r3, 8015bc2 <_strtod_l+0xa52>
 8015b86:	2200      	movs	r2, #0
 8015b88:	4b3f      	ldr	r3, [pc, #252]	; (8015c88 <_strtod_l+0xb18>)
 8015b8a:	4630      	mov	r0, r6
 8015b8c:	4639      	mov	r1, r7
 8015b8e:	f7ea ffbd 	bl	8000b0c <__aeabi_dcmplt>
 8015b92:	b9c8      	cbnz	r0, 8015bc8 <_strtod_l+0xa58>
 8015b94:	4630      	mov	r0, r6
 8015b96:	4639      	mov	r1, r7
 8015b98:	2200      	movs	r2, #0
 8015b9a:	4b3e      	ldr	r3, [pc, #248]	; (8015c94 <_strtod_l+0xb24>)
 8015b9c:	f7ea fd44 	bl	8000628 <__aeabi_dmul>
 8015ba0:	4606      	mov	r6, r0
 8015ba2:	460f      	mov	r7, r1
 8015ba4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8015ba8:	9618      	str	r6, [sp, #96]	; 0x60
 8015baa:	9319      	str	r3, [sp, #100]	; 0x64
 8015bac:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8015bb0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015bb4:	e79c      	b.n	8015af0 <_strtod_l+0x980>
 8015bb6:	f1ba 0f01 	cmp.w	sl, #1
 8015bba:	d102      	bne.n	8015bc2 <_strtod_l+0xa52>
 8015bbc:	2d00      	cmp	r5, #0
 8015bbe:	f43f ad8e 	beq.w	80156de <_strtod_l+0x56e>
 8015bc2:	2200      	movs	r2, #0
 8015bc4:	4b34      	ldr	r3, [pc, #208]	; (8015c98 <_strtod_l+0xb28>)
 8015bc6:	e78f      	b.n	8015ae8 <_strtod_l+0x978>
 8015bc8:	2600      	movs	r6, #0
 8015bca:	4f32      	ldr	r7, [pc, #200]	; (8015c94 <_strtod_l+0xb24>)
 8015bcc:	e7ea      	b.n	8015ba4 <_strtod_l+0xa34>
 8015bce:	4b31      	ldr	r3, [pc, #196]	; (8015c94 <_strtod_l+0xb24>)
 8015bd0:	4630      	mov	r0, r6
 8015bd2:	4639      	mov	r1, r7
 8015bd4:	2200      	movs	r2, #0
 8015bd6:	f7ea fd27 	bl	8000628 <__aeabi_dmul>
 8015bda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015bdc:	4606      	mov	r6, r0
 8015bde:	460f      	mov	r7, r1
 8015be0:	b933      	cbnz	r3, 8015bf0 <_strtod_l+0xa80>
 8015be2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015be6:	9010      	str	r0, [sp, #64]	; 0x40
 8015be8:	9311      	str	r3, [sp, #68]	; 0x44
 8015bea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015bee:	e7df      	b.n	8015bb0 <_strtod_l+0xa40>
 8015bf0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8015bf4:	e7f9      	b.n	8015bea <_strtod_l+0xa7a>
 8015bf6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8015bfa:	9b04      	ldr	r3, [sp, #16]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d1ab      	bne.n	8015b58 <_strtod_l+0x9e8>
 8015c00:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015c04:	0d1b      	lsrs	r3, r3, #20
 8015c06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015c08:	051b      	lsls	r3, r3, #20
 8015c0a:	429a      	cmp	r2, r3
 8015c0c:	465d      	mov	r5, fp
 8015c0e:	d1a3      	bne.n	8015b58 <_strtod_l+0x9e8>
 8015c10:	4639      	mov	r1, r7
 8015c12:	4630      	mov	r0, r6
 8015c14:	f7ea ffb8 	bl	8000b88 <__aeabi_d2iz>
 8015c18:	f7ea fc9c 	bl	8000554 <__aeabi_i2d>
 8015c1c:	460b      	mov	r3, r1
 8015c1e:	4602      	mov	r2, r0
 8015c20:	4639      	mov	r1, r7
 8015c22:	4630      	mov	r0, r6
 8015c24:	f7ea fb48 	bl	80002b8 <__aeabi_dsub>
 8015c28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c2a:	4606      	mov	r6, r0
 8015c2c:	460f      	mov	r7, r1
 8015c2e:	b933      	cbnz	r3, 8015c3e <_strtod_l+0xace>
 8015c30:	f1ba 0f00 	cmp.w	sl, #0
 8015c34:	d103      	bne.n	8015c3e <_strtod_l+0xace>
 8015c36:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8015c3a:	2d00      	cmp	r5, #0
 8015c3c:	d06d      	beq.n	8015d1a <_strtod_l+0xbaa>
 8015c3e:	a30a      	add	r3, pc, #40	; (adr r3, 8015c68 <_strtod_l+0xaf8>)
 8015c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c44:	4630      	mov	r0, r6
 8015c46:	4639      	mov	r1, r7
 8015c48:	f7ea ff60 	bl	8000b0c <__aeabi_dcmplt>
 8015c4c:	2800      	cmp	r0, #0
 8015c4e:	f47f acb8 	bne.w	80155c2 <_strtod_l+0x452>
 8015c52:	a307      	add	r3, pc, #28	; (adr r3, 8015c70 <_strtod_l+0xb00>)
 8015c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c58:	4630      	mov	r0, r6
 8015c5a:	4639      	mov	r1, r7
 8015c5c:	f7ea ff74 	bl	8000b48 <__aeabi_dcmpgt>
 8015c60:	2800      	cmp	r0, #0
 8015c62:	f43f af79 	beq.w	8015b58 <_strtod_l+0x9e8>
 8015c66:	e4ac      	b.n	80155c2 <_strtod_l+0x452>
 8015c68:	94a03595 	.word	0x94a03595
 8015c6c:	3fdfffff 	.word	0x3fdfffff
 8015c70:	35afe535 	.word	0x35afe535
 8015c74:	3fe00000 	.word	0x3fe00000
 8015c78:	000fffff 	.word	0x000fffff
 8015c7c:	7ff00000 	.word	0x7ff00000
 8015c80:	7fefffff 	.word	0x7fefffff
 8015c84:	39500000 	.word	0x39500000
 8015c88:	3ff00000 	.word	0x3ff00000
 8015c8c:	7fe00000 	.word	0x7fe00000
 8015c90:	7c9fffff 	.word	0x7c9fffff
 8015c94:	3fe00000 	.word	0x3fe00000
 8015c98:	bff00000 	.word	0xbff00000
 8015c9c:	9b04      	ldr	r3, [sp, #16]
 8015c9e:	b333      	cbz	r3, 8015cee <_strtod_l+0xb7e>
 8015ca0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ca2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015ca6:	d822      	bhi.n	8015cee <_strtod_l+0xb7e>
 8015ca8:	a327      	add	r3, pc, #156	; (adr r3, 8015d48 <_strtod_l+0xbd8>)
 8015caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cae:	4630      	mov	r0, r6
 8015cb0:	4639      	mov	r1, r7
 8015cb2:	f7ea ff35 	bl	8000b20 <__aeabi_dcmple>
 8015cb6:	b1a0      	cbz	r0, 8015ce2 <_strtod_l+0xb72>
 8015cb8:	4639      	mov	r1, r7
 8015cba:	4630      	mov	r0, r6
 8015cbc:	f7ea ff8c 	bl	8000bd8 <__aeabi_d2uiz>
 8015cc0:	2800      	cmp	r0, #0
 8015cc2:	bf08      	it	eq
 8015cc4:	2001      	moveq	r0, #1
 8015cc6:	f7ea fc35 	bl	8000534 <__aeabi_ui2d>
 8015cca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ccc:	4606      	mov	r6, r0
 8015cce:	460f      	mov	r7, r1
 8015cd0:	bb03      	cbnz	r3, 8015d14 <_strtod_l+0xba4>
 8015cd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015cd6:	9012      	str	r0, [sp, #72]	; 0x48
 8015cd8:	9313      	str	r3, [sp, #76]	; 0x4c
 8015cda:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8015cde:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ce4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015ce6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015cea:	1a9b      	subs	r3, r3, r2
 8015cec:	930b      	str	r3, [sp, #44]	; 0x2c
 8015cee:	ed9d 0b08 	vldr	d0, [sp, #32]
 8015cf2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8015cf6:	f001 fd61 	bl	80177bc <__ulp>
 8015cfa:	4650      	mov	r0, sl
 8015cfc:	ec53 2b10 	vmov	r2, r3, d0
 8015d00:	4659      	mov	r1, fp
 8015d02:	f7ea fc91 	bl	8000628 <__aeabi_dmul>
 8015d06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015d0a:	f7ea fad7 	bl	80002bc <__adddf3>
 8015d0e:	4682      	mov	sl, r0
 8015d10:	468b      	mov	fp, r1
 8015d12:	e772      	b.n	8015bfa <_strtod_l+0xa8a>
 8015d14:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8015d18:	e7df      	b.n	8015cda <_strtod_l+0xb6a>
 8015d1a:	a30d      	add	r3, pc, #52	; (adr r3, 8015d50 <_strtod_l+0xbe0>)
 8015d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d20:	f7ea fef4 	bl	8000b0c <__aeabi_dcmplt>
 8015d24:	e79c      	b.n	8015c60 <_strtod_l+0xaf0>
 8015d26:	2300      	movs	r3, #0
 8015d28:	930d      	str	r3, [sp, #52]	; 0x34
 8015d2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015d2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015d2e:	6013      	str	r3, [r2, #0]
 8015d30:	f7ff ba61 	b.w	80151f6 <_strtod_l+0x86>
 8015d34:	2b65      	cmp	r3, #101	; 0x65
 8015d36:	f04f 0200 	mov.w	r2, #0
 8015d3a:	f43f ab4e 	beq.w	80153da <_strtod_l+0x26a>
 8015d3e:	2101      	movs	r1, #1
 8015d40:	4614      	mov	r4, r2
 8015d42:	9104      	str	r1, [sp, #16]
 8015d44:	f7ff bacb 	b.w	80152de <_strtod_l+0x16e>
 8015d48:	ffc00000 	.word	0xffc00000
 8015d4c:	41dfffff 	.word	0x41dfffff
 8015d50:	94a03595 	.word	0x94a03595
 8015d54:	3fcfffff 	.word	0x3fcfffff

08015d58 <_strtod_r>:
 8015d58:	4b05      	ldr	r3, [pc, #20]	; (8015d70 <_strtod_r+0x18>)
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	b410      	push	{r4}
 8015d5e:	6a1b      	ldr	r3, [r3, #32]
 8015d60:	4c04      	ldr	r4, [pc, #16]	; (8015d74 <_strtod_r+0x1c>)
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	bf08      	it	eq
 8015d66:	4623      	moveq	r3, r4
 8015d68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d6c:	f7ff ba00 	b.w	8015170 <_strtod_l>
 8015d70:	2000000c 	.word	0x2000000c
 8015d74:	20000070 	.word	0x20000070

08015d78 <_strtol_l.isra.0>:
 8015d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d7c:	4680      	mov	r8, r0
 8015d7e:	4689      	mov	r9, r1
 8015d80:	4692      	mov	sl, r2
 8015d82:	461e      	mov	r6, r3
 8015d84:	460f      	mov	r7, r1
 8015d86:	463d      	mov	r5, r7
 8015d88:	9808      	ldr	r0, [sp, #32]
 8015d8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015d8e:	f001 fa0d 	bl	80171ac <__locale_ctype_ptr_l>
 8015d92:	4420      	add	r0, r4
 8015d94:	7843      	ldrb	r3, [r0, #1]
 8015d96:	f013 0308 	ands.w	r3, r3, #8
 8015d9a:	d132      	bne.n	8015e02 <_strtol_l.isra.0+0x8a>
 8015d9c:	2c2d      	cmp	r4, #45	; 0x2d
 8015d9e:	d132      	bne.n	8015e06 <_strtol_l.isra.0+0x8e>
 8015da0:	787c      	ldrb	r4, [r7, #1]
 8015da2:	1cbd      	adds	r5, r7, #2
 8015da4:	2201      	movs	r2, #1
 8015da6:	2e00      	cmp	r6, #0
 8015da8:	d05d      	beq.n	8015e66 <_strtol_l.isra.0+0xee>
 8015daa:	2e10      	cmp	r6, #16
 8015dac:	d109      	bne.n	8015dc2 <_strtol_l.isra.0+0x4a>
 8015dae:	2c30      	cmp	r4, #48	; 0x30
 8015db0:	d107      	bne.n	8015dc2 <_strtol_l.isra.0+0x4a>
 8015db2:	782b      	ldrb	r3, [r5, #0]
 8015db4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015db8:	2b58      	cmp	r3, #88	; 0x58
 8015dba:	d14f      	bne.n	8015e5c <_strtol_l.isra.0+0xe4>
 8015dbc:	786c      	ldrb	r4, [r5, #1]
 8015dbe:	2610      	movs	r6, #16
 8015dc0:	3502      	adds	r5, #2
 8015dc2:	2a00      	cmp	r2, #0
 8015dc4:	bf14      	ite	ne
 8015dc6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8015dca:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8015dce:	2700      	movs	r7, #0
 8015dd0:	fbb1 fcf6 	udiv	ip, r1, r6
 8015dd4:	4638      	mov	r0, r7
 8015dd6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8015dda:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8015dde:	2b09      	cmp	r3, #9
 8015de0:	d817      	bhi.n	8015e12 <_strtol_l.isra.0+0x9a>
 8015de2:	461c      	mov	r4, r3
 8015de4:	42a6      	cmp	r6, r4
 8015de6:	dd23      	ble.n	8015e30 <_strtol_l.isra.0+0xb8>
 8015de8:	1c7b      	adds	r3, r7, #1
 8015dea:	d007      	beq.n	8015dfc <_strtol_l.isra.0+0x84>
 8015dec:	4584      	cmp	ip, r0
 8015dee:	d31c      	bcc.n	8015e2a <_strtol_l.isra.0+0xb2>
 8015df0:	d101      	bne.n	8015df6 <_strtol_l.isra.0+0x7e>
 8015df2:	45a6      	cmp	lr, r4
 8015df4:	db19      	blt.n	8015e2a <_strtol_l.isra.0+0xb2>
 8015df6:	fb00 4006 	mla	r0, r0, r6, r4
 8015dfa:	2701      	movs	r7, #1
 8015dfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015e00:	e7eb      	b.n	8015dda <_strtol_l.isra.0+0x62>
 8015e02:	462f      	mov	r7, r5
 8015e04:	e7bf      	b.n	8015d86 <_strtol_l.isra.0+0xe>
 8015e06:	2c2b      	cmp	r4, #43	; 0x2b
 8015e08:	bf04      	itt	eq
 8015e0a:	1cbd      	addeq	r5, r7, #2
 8015e0c:	787c      	ldrbeq	r4, [r7, #1]
 8015e0e:	461a      	mov	r2, r3
 8015e10:	e7c9      	b.n	8015da6 <_strtol_l.isra.0+0x2e>
 8015e12:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8015e16:	2b19      	cmp	r3, #25
 8015e18:	d801      	bhi.n	8015e1e <_strtol_l.isra.0+0xa6>
 8015e1a:	3c37      	subs	r4, #55	; 0x37
 8015e1c:	e7e2      	b.n	8015de4 <_strtol_l.isra.0+0x6c>
 8015e1e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8015e22:	2b19      	cmp	r3, #25
 8015e24:	d804      	bhi.n	8015e30 <_strtol_l.isra.0+0xb8>
 8015e26:	3c57      	subs	r4, #87	; 0x57
 8015e28:	e7dc      	b.n	8015de4 <_strtol_l.isra.0+0x6c>
 8015e2a:	f04f 37ff 	mov.w	r7, #4294967295
 8015e2e:	e7e5      	b.n	8015dfc <_strtol_l.isra.0+0x84>
 8015e30:	1c7b      	adds	r3, r7, #1
 8015e32:	d108      	bne.n	8015e46 <_strtol_l.isra.0+0xce>
 8015e34:	2322      	movs	r3, #34	; 0x22
 8015e36:	f8c8 3000 	str.w	r3, [r8]
 8015e3a:	4608      	mov	r0, r1
 8015e3c:	f1ba 0f00 	cmp.w	sl, #0
 8015e40:	d107      	bne.n	8015e52 <_strtol_l.isra.0+0xda>
 8015e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e46:	b102      	cbz	r2, 8015e4a <_strtol_l.isra.0+0xd2>
 8015e48:	4240      	negs	r0, r0
 8015e4a:	f1ba 0f00 	cmp.w	sl, #0
 8015e4e:	d0f8      	beq.n	8015e42 <_strtol_l.isra.0+0xca>
 8015e50:	b10f      	cbz	r7, 8015e56 <_strtol_l.isra.0+0xde>
 8015e52:	f105 39ff 	add.w	r9, r5, #4294967295
 8015e56:	f8ca 9000 	str.w	r9, [sl]
 8015e5a:	e7f2      	b.n	8015e42 <_strtol_l.isra.0+0xca>
 8015e5c:	2430      	movs	r4, #48	; 0x30
 8015e5e:	2e00      	cmp	r6, #0
 8015e60:	d1af      	bne.n	8015dc2 <_strtol_l.isra.0+0x4a>
 8015e62:	2608      	movs	r6, #8
 8015e64:	e7ad      	b.n	8015dc2 <_strtol_l.isra.0+0x4a>
 8015e66:	2c30      	cmp	r4, #48	; 0x30
 8015e68:	d0a3      	beq.n	8015db2 <_strtol_l.isra.0+0x3a>
 8015e6a:	260a      	movs	r6, #10
 8015e6c:	e7a9      	b.n	8015dc2 <_strtol_l.isra.0+0x4a>
	...

08015e70 <_strtol_r>:
 8015e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015e72:	4c06      	ldr	r4, [pc, #24]	; (8015e8c <_strtol_r+0x1c>)
 8015e74:	4d06      	ldr	r5, [pc, #24]	; (8015e90 <_strtol_r+0x20>)
 8015e76:	6824      	ldr	r4, [r4, #0]
 8015e78:	6a24      	ldr	r4, [r4, #32]
 8015e7a:	2c00      	cmp	r4, #0
 8015e7c:	bf08      	it	eq
 8015e7e:	462c      	moveq	r4, r5
 8015e80:	9400      	str	r4, [sp, #0]
 8015e82:	f7ff ff79 	bl	8015d78 <_strtol_l.isra.0>
 8015e86:	b003      	add	sp, #12
 8015e88:	bd30      	pop	{r4, r5, pc}
 8015e8a:	bf00      	nop
 8015e8c:	2000000c 	.word	0x2000000c
 8015e90:	20000070 	.word	0x20000070

08015e94 <_vsiprintf_r>:
 8015e94:	b500      	push	{lr}
 8015e96:	b09b      	sub	sp, #108	; 0x6c
 8015e98:	9100      	str	r1, [sp, #0]
 8015e9a:	9104      	str	r1, [sp, #16]
 8015e9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015ea0:	9105      	str	r1, [sp, #20]
 8015ea2:	9102      	str	r1, [sp, #8]
 8015ea4:	4905      	ldr	r1, [pc, #20]	; (8015ebc <_vsiprintf_r+0x28>)
 8015ea6:	9103      	str	r1, [sp, #12]
 8015ea8:	4669      	mov	r1, sp
 8015eaa:	f001 fecb 	bl	8017c44 <_svfiprintf_r>
 8015eae:	9b00      	ldr	r3, [sp, #0]
 8015eb0:	2200      	movs	r2, #0
 8015eb2:	701a      	strb	r2, [r3, #0]
 8015eb4:	b01b      	add	sp, #108	; 0x6c
 8015eb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8015eba:	bf00      	nop
 8015ebc:	ffff0208 	.word	0xffff0208

08015ec0 <vsiprintf>:
 8015ec0:	4613      	mov	r3, r2
 8015ec2:	460a      	mov	r2, r1
 8015ec4:	4601      	mov	r1, r0
 8015ec6:	4802      	ldr	r0, [pc, #8]	; (8015ed0 <vsiprintf+0x10>)
 8015ec8:	6800      	ldr	r0, [r0, #0]
 8015eca:	f7ff bfe3 	b.w	8015e94 <_vsiprintf_r>
 8015ece:	bf00      	nop
 8015ed0:	2000000c 	.word	0x2000000c

08015ed4 <quorem>:
 8015ed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ed8:	6903      	ldr	r3, [r0, #16]
 8015eda:	690c      	ldr	r4, [r1, #16]
 8015edc:	42a3      	cmp	r3, r4
 8015ede:	4680      	mov	r8, r0
 8015ee0:	f2c0 8082 	blt.w	8015fe8 <quorem+0x114>
 8015ee4:	3c01      	subs	r4, #1
 8015ee6:	f101 0714 	add.w	r7, r1, #20
 8015eea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8015eee:	f100 0614 	add.w	r6, r0, #20
 8015ef2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8015ef6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8015efa:	eb06 030c 	add.w	r3, r6, ip
 8015efe:	3501      	adds	r5, #1
 8015f00:	eb07 090c 	add.w	r9, r7, ip
 8015f04:	9301      	str	r3, [sp, #4]
 8015f06:	fbb0 f5f5 	udiv	r5, r0, r5
 8015f0a:	b395      	cbz	r5, 8015f72 <quorem+0x9e>
 8015f0c:	f04f 0a00 	mov.w	sl, #0
 8015f10:	4638      	mov	r0, r7
 8015f12:	46b6      	mov	lr, r6
 8015f14:	46d3      	mov	fp, sl
 8015f16:	f850 2b04 	ldr.w	r2, [r0], #4
 8015f1a:	b293      	uxth	r3, r2
 8015f1c:	fb05 a303 	mla	r3, r5, r3, sl
 8015f20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015f24:	b29b      	uxth	r3, r3
 8015f26:	ebab 0303 	sub.w	r3, fp, r3
 8015f2a:	0c12      	lsrs	r2, r2, #16
 8015f2c:	f8de b000 	ldr.w	fp, [lr]
 8015f30:	fb05 a202 	mla	r2, r5, r2, sl
 8015f34:	fa13 f38b 	uxtah	r3, r3, fp
 8015f38:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8015f3c:	fa1f fb82 	uxth.w	fp, r2
 8015f40:	f8de 2000 	ldr.w	r2, [lr]
 8015f44:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8015f48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015f4c:	b29b      	uxth	r3, r3
 8015f4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015f52:	4581      	cmp	r9, r0
 8015f54:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8015f58:	f84e 3b04 	str.w	r3, [lr], #4
 8015f5c:	d2db      	bcs.n	8015f16 <quorem+0x42>
 8015f5e:	f856 300c 	ldr.w	r3, [r6, ip]
 8015f62:	b933      	cbnz	r3, 8015f72 <quorem+0x9e>
 8015f64:	9b01      	ldr	r3, [sp, #4]
 8015f66:	3b04      	subs	r3, #4
 8015f68:	429e      	cmp	r6, r3
 8015f6a:	461a      	mov	r2, r3
 8015f6c:	d330      	bcc.n	8015fd0 <quorem+0xfc>
 8015f6e:	f8c8 4010 	str.w	r4, [r8, #16]
 8015f72:	4640      	mov	r0, r8
 8015f74:	f001 fbaa 	bl	80176cc <__mcmp>
 8015f78:	2800      	cmp	r0, #0
 8015f7a:	db25      	blt.n	8015fc8 <quorem+0xf4>
 8015f7c:	3501      	adds	r5, #1
 8015f7e:	4630      	mov	r0, r6
 8015f80:	f04f 0c00 	mov.w	ip, #0
 8015f84:	f857 2b04 	ldr.w	r2, [r7], #4
 8015f88:	f8d0 e000 	ldr.w	lr, [r0]
 8015f8c:	b293      	uxth	r3, r2
 8015f8e:	ebac 0303 	sub.w	r3, ip, r3
 8015f92:	0c12      	lsrs	r2, r2, #16
 8015f94:	fa13 f38e 	uxtah	r3, r3, lr
 8015f98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015f9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015fa0:	b29b      	uxth	r3, r3
 8015fa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015fa6:	45b9      	cmp	r9, r7
 8015fa8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015fac:	f840 3b04 	str.w	r3, [r0], #4
 8015fb0:	d2e8      	bcs.n	8015f84 <quorem+0xb0>
 8015fb2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8015fb6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8015fba:	b92a      	cbnz	r2, 8015fc8 <quorem+0xf4>
 8015fbc:	3b04      	subs	r3, #4
 8015fbe:	429e      	cmp	r6, r3
 8015fc0:	461a      	mov	r2, r3
 8015fc2:	d30b      	bcc.n	8015fdc <quorem+0x108>
 8015fc4:	f8c8 4010 	str.w	r4, [r8, #16]
 8015fc8:	4628      	mov	r0, r5
 8015fca:	b003      	add	sp, #12
 8015fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fd0:	6812      	ldr	r2, [r2, #0]
 8015fd2:	3b04      	subs	r3, #4
 8015fd4:	2a00      	cmp	r2, #0
 8015fd6:	d1ca      	bne.n	8015f6e <quorem+0x9a>
 8015fd8:	3c01      	subs	r4, #1
 8015fda:	e7c5      	b.n	8015f68 <quorem+0x94>
 8015fdc:	6812      	ldr	r2, [r2, #0]
 8015fde:	3b04      	subs	r3, #4
 8015fe0:	2a00      	cmp	r2, #0
 8015fe2:	d1ef      	bne.n	8015fc4 <quorem+0xf0>
 8015fe4:	3c01      	subs	r4, #1
 8015fe6:	e7ea      	b.n	8015fbe <quorem+0xea>
 8015fe8:	2000      	movs	r0, #0
 8015fea:	e7ee      	b.n	8015fca <quorem+0xf6>
 8015fec:	0000      	movs	r0, r0
	...

08015ff0 <_dtoa_r>:
 8015ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ff4:	ec57 6b10 	vmov	r6, r7, d0
 8015ff8:	b097      	sub	sp, #92	; 0x5c
 8015ffa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015ffc:	9106      	str	r1, [sp, #24]
 8015ffe:	4604      	mov	r4, r0
 8016000:	920b      	str	r2, [sp, #44]	; 0x2c
 8016002:	9312      	str	r3, [sp, #72]	; 0x48
 8016004:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016008:	e9cd 6700 	strd	r6, r7, [sp]
 801600c:	b93d      	cbnz	r5, 801601e <_dtoa_r+0x2e>
 801600e:	2010      	movs	r0, #16
 8016010:	f001 f8ee 	bl	80171f0 <malloc>
 8016014:	6260      	str	r0, [r4, #36]	; 0x24
 8016016:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801601a:	6005      	str	r5, [r0, #0]
 801601c:	60c5      	str	r5, [r0, #12]
 801601e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016020:	6819      	ldr	r1, [r3, #0]
 8016022:	b151      	cbz	r1, 801603a <_dtoa_r+0x4a>
 8016024:	685a      	ldr	r2, [r3, #4]
 8016026:	604a      	str	r2, [r1, #4]
 8016028:	2301      	movs	r3, #1
 801602a:	4093      	lsls	r3, r2
 801602c:	608b      	str	r3, [r1, #8]
 801602e:	4620      	mov	r0, r4
 8016030:	f001 f92c 	bl	801728c <_Bfree>
 8016034:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016036:	2200      	movs	r2, #0
 8016038:	601a      	str	r2, [r3, #0]
 801603a:	1e3b      	subs	r3, r7, #0
 801603c:	bfbb      	ittet	lt
 801603e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016042:	9301      	strlt	r3, [sp, #4]
 8016044:	2300      	movge	r3, #0
 8016046:	2201      	movlt	r2, #1
 8016048:	bfac      	ite	ge
 801604a:	f8c8 3000 	strge.w	r3, [r8]
 801604e:	f8c8 2000 	strlt.w	r2, [r8]
 8016052:	4baf      	ldr	r3, [pc, #700]	; (8016310 <_dtoa_r+0x320>)
 8016054:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016058:	ea33 0308 	bics.w	r3, r3, r8
 801605c:	d114      	bne.n	8016088 <_dtoa_r+0x98>
 801605e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016060:	f242 730f 	movw	r3, #9999	; 0x270f
 8016064:	6013      	str	r3, [r2, #0]
 8016066:	9b00      	ldr	r3, [sp, #0]
 8016068:	b923      	cbnz	r3, 8016074 <_dtoa_r+0x84>
 801606a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801606e:	2800      	cmp	r0, #0
 8016070:	f000 8542 	beq.w	8016af8 <_dtoa_r+0xb08>
 8016074:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016076:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8016324 <_dtoa_r+0x334>
 801607a:	2b00      	cmp	r3, #0
 801607c:	f000 8544 	beq.w	8016b08 <_dtoa_r+0xb18>
 8016080:	f10b 0303 	add.w	r3, fp, #3
 8016084:	f000 bd3e 	b.w	8016b04 <_dtoa_r+0xb14>
 8016088:	e9dd 6700 	ldrd	r6, r7, [sp]
 801608c:	2200      	movs	r2, #0
 801608e:	2300      	movs	r3, #0
 8016090:	4630      	mov	r0, r6
 8016092:	4639      	mov	r1, r7
 8016094:	f7ea fd30 	bl	8000af8 <__aeabi_dcmpeq>
 8016098:	4681      	mov	r9, r0
 801609a:	b168      	cbz	r0, 80160b8 <_dtoa_r+0xc8>
 801609c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801609e:	2301      	movs	r3, #1
 80160a0:	6013      	str	r3, [r2, #0]
 80160a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	f000 8524 	beq.w	8016af2 <_dtoa_r+0xb02>
 80160aa:	4b9a      	ldr	r3, [pc, #616]	; (8016314 <_dtoa_r+0x324>)
 80160ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80160ae:	f103 3bff 	add.w	fp, r3, #4294967295
 80160b2:	6013      	str	r3, [r2, #0]
 80160b4:	f000 bd28 	b.w	8016b08 <_dtoa_r+0xb18>
 80160b8:	aa14      	add	r2, sp, #80	; 0x50
 80160ba:	a915      	add	r1, sp, #84	; 0x54
 80160bc:	ec47 6b10 	vmov	d0, r6, r7
 80160c0:	4620      	mov	r0, r4
 80160c2:	f001 fbf1 	bl	80178a8 <__d2b>
 80160c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80160ca:	9004      	str	r0, [sp, #16]
 80160cc:	2d00      	cmp	r5, #0
 80160ce:	d07c      	beq.n	80161ca <_dtoa_r+0x1da>
 80160d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80160d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80160d8:	46b2      	mov	sl, r6
 80160da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80160de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80160e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80160e6:	2200      	movs	r2, #0
 80160e8:	4b8b      	ldr	r3, [pc, #556]	; (8016318 <_dtoa_r+0x328>)
 80160ea:	4650      	mov	r0, sl
 80160ec:	4659      	mov	r1, fp
 80160ee:	f7ea f8e3 	bl	80002b8 <__aeabi_dsub>
 80160f2:	a381      	add	r3, pc, #516	; (adr r3, 80162f8 <_dtoa_r+0x308>)
 80160f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160f8:	f7ea fa96 	bl	8000628 <__aeabi_dmul>
 80160fc:	a380      	add	r3, pc, #512	; (adr r3, 8016300 <_dtoa_r+0x310>)
 80160fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016102:	f7ea f8db 	bl	80002bc <__adddf3>
 8016106:	4606      	mov	r6, r0
 8016108:	4628      	mov	r0, r5
 801610a:	460f      	mov	r7, r1
 801610c:	f7ea fa22 	bl	8000554 <__aeabi_i2d>
 8016110:	a37d      	add	r3, pc, #500	; (adr r3, 8016308 <_dtoa_r+0x318>)
 8016112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016116:	f7ea fa87 	bl	8000628 <__aeabi_dmul>
 801611a:	4602      	mov	r2, r0
 801611c:	460b      	mov	r3, r1
 801611e:	4630      	mov	r0, r6
 8016120:	4639      	mov	r1, r7
 8016122:	f7ea f8cb 	bl	80002bc <__adddf3>
 8016126:	4606      	mov	r6, r0
 8016128:	460f      	mov	r7, r1
 801612a:	f7ea fd2d 	bl	8000b88 <__aeabi_d2iz>
 801612e:	2200      	movs	r2, #0
 8016130:	4682      	mov	sl, r0
 8016132:	2300      	movs	r3, #0
 8016134:	4630      	mov	r0, r6
 8016136:	4639      	mov	r1, r7
 8016138:	f7ea fce8 	bl	8000b0c <__aeabi_dcmplt>
 801613c:	b148      	cbz	r0, 8016152 <_dtoa_r+0x162>
 801613e:	4650      	mov	r0, sl
 8016140:	f7ea fa08 	bl	8000554 <__aeabi_i2d>
 8016144:	4632      	mov	r2, r6
 8016146:	463b      	mov	r3, r7
 8016148:	f7ea fcd6 	bl	8000af8 <__aeabi_dcmpeq>
 801614c:	b908      	cbnz	r0, 8016152 <_dtoa_r+0x162>
 801614e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016152:	f1ba 0f16 	cmp.w	sl, #22
 8016156:	d859      	bhi.n	801620c <_dtoa_r+0x21c>
 8016158:	4970      	ldr	r1, [pc, #448]	; (801631c <_dtoa_r+0x32c>)
 801615a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801615e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016162:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016166:	f7ea fcef 	bl	8000b48 <__aeabi_dcmpgt>
 801616a:	2800      	cmp	r0, #0
 801616c:	d050      	beq.n	8016210 <_dtoa_r+0x220>
 801616e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016172:	2300      	movs	r3, #0
 8016174:	930f      	str	r3, [sp, #60]	; 0x3c
 8016176:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016178:	1b5d      	subs	r5, r3, r5
 801617a:	f1b5 0801 	subs.w	r8, r5, #1
 801617e:	bf49      	itett	mi
 8016180:	f1c5 0301 	rsbmi	r3, r5, #1
 8016184:	2300      	movpl	r3, #0
 8016186:	9305      	strmi	r3, [sp, #20]
 8016188:	f04f 0800 	movmi.w	r8, #0
 801618c:	bf58      	it	pl
 801618e:	9305      	strpl	r3, [sp, #20]
 8016190:	f1ba 0f00 	cmp.w	sl, #0
 8016194:	db3e      	blt.n	8016214 <_dtoa_r+0x224>
 8016196:	2300      	movs	r3, #0
 8016198:	44d0      	add	r8, sl
 801619a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801619e:	9307      	str	r3, [sp, #28]
 80161a0:	9b06      	ldr	r3, [sp, #24]
 80161a2:	2b09      	cmp	r3, #9
 80161a4:	f200 8090 	bhi.w	80162c8 <_dtoa_r+0x2d8>
 80161a8:	2b05      	cmp	r3, #5
 80161aa:	bfc4      	itt	gt
 80161ac:	3b04      	subgt	r3, #4
 80161ae:	9306      	strgt	r3, [sp, #24]
 80161b0:	9b06      	ldr	r3, [sp, #24]
 80161b2:	f1a3 0302 	sub.w	r3, r3, #2
 80161b6:	bfcc      	ite	gt
 80161b8:	2500      	movgt	r5, #0
 80161ba:	2501      	movle	r5, #1
 80161bc:	2b03      	cmp	r3, #3
 80161be:	f200 808f 	bhi.w	80162e0 <_dtoa_r+0x2f0>
 80161c2:	e8df f003 	tbb	[pc, r3]
 80161c6:	7f7d      	.short	0x7f7d
 80161c8:	7131      	.short	0x7131
 80161ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80161ce:	441d      	add	r5, r3
 80161d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80161d4:	2820      	cmp	r0, #32
 80161d6:	dd13      	ble.n	8016200 <_dtoa_r+0x210>
 80161d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80161dc:	9b00      	ldr	r3, [sp, #0]
 80161de:	fa08 f800 	lsl.w	r8, r8, r0
 80161e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80161e6:	fa23 f000 	lsr.w	r0, r3, r0
 80161ea:	ea48 0000 	orr.w	r0, r8, r0
 80161ee:	f7ea f9a1 	bl	8000534 <__aeabi_ui2d>
 80161f2:	2301      	movs	r3, #1
 80161f4:	4682      	mov	sl, r0
 80161f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80161fa:	3d01      	subs	r5, #1
 80161fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80161fe:	e772      	b.n	80160e6 <_dtoa_r+0xf6>
 8016200:	9b00      	ldr	r3, [sp, #0]
 8016202:	f1c0 0020 	rsb	r0, r0, #32
 8016206:	fa03 f000 	lsl.w	r0, r3, r0
 801620a:	e7f0      	b.n	80161ee <_dtoa_r+0x1fe>
 801620c:	2301      	movs	r3, #1
 801620e:	e7b1      	b.n	8016174 <_dtoa_r+0x184>
 8016210:	900f      	str	r0, [sp, #60]	; 0x3c
 8016212:	e7b0      	b.n	8016176 <_dtoa_r+0x186>
 8016214:	9b05      	ldr	r3, [sp, #20]
 8016216:	eba3 030a 	sub.w	r3, r3, sl
 801621a:	9305      	str	r3, [sp, #20]
 801621c:	f1ca 0300 	rsb	r3, sl, #0
 8016220:	9307      	str	r3, [sp, #28]
 8016222:	2300      	movs	r3, #0
 8016224:	930e      	str	r3, [sp, #56]	; 0x38
 8016226:	e7bb      	b.n	80161a0 <_dtoa_r+0x1b0>
 8016228:	2301      	movs	r3, #1
 801622a:	930a      	str	r3, [sp, #40]	; 0x28
 801622c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801622e:	2b00      	cmp	r3, #0
 8016230:	dd59      	ble.n	80162e6 <_dtoa_r+0x2f6>
 8016232:	9302      	str	r3, [sp, #8]
 8016234:	4699      	mov	r9, r3
 8016236:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016238:	2200      	movs	r2, #0
 801623a:	6072      	str	r2, [r6, #4]
 801623c:	2204      	movs	r2, #4
 801623e:	f102 0014 	add.w	r0, r2, #20
 8016242:	4298      	cmp	r0, r3
 8016244:	6871      	ldr	r1, [r6, #4]
 8016246:	d953      	bls.n	80162f0 <_dtoa_r+0x300>
 8016248:	4620      	mov	r0, r4
 801624a:	f000 ffeb 	bl	8017224 <_Balloc>
 801624e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016250:	6030      	str	r0, [r6, #0]
 8016252:	f1b9 0f0e 	cmp.w	r9, #14
 8016256:	f8d3 b000 	ldr.w	fp, [r3]
 801625a:	f200 80e6 	bhi.w	801642a <_dtoa_r+0x43a>
 801625e:	2d00      	cmp	r5, #0
 8016260:	f000 80e3 	beq.w	801642a <_dtoa_r+0x43a>
 8016264:	ed9d 7b00 	vldr	d7, [sp]
 8016268:	f1ba 0f00 	cmp.w	sl, #0
 801626c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8016270:	dd74      	ble.n	801635c <_dtoa_r+0x36c>
 8016272:	4a2a      	ldr	r2, [pc, #168]	; (801631c <_dtoa_r+0x32c>)
 8016274:	f00a 030f 	and.w	r3, sl, #15
 8016278:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801627c:	ed93 7b00 	vldr	d7, [r3]
 8016280:	ea4f 162a 	mov.w	r6, sl, asr #4
 8016284:	06f0      	lsls	r0, r6, #27
 8016286:	ed8d 7b08 	vstr	d7, [sp, #32]
 801628a:	d565      	bpl.n	8016358 <_dtoa_r+0x368>
 801628c:	4b24      	ldr	r3, [pc, #144]	; (8016320 <_dtoa_r+0x330>)
 801628e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016292:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016296:	f7ea faf1 	bl	800087c <__aeabi_ddiv>
 801629a:	e9cd 0100 	strd	r0, r1, [sp]
 801629e:	f006 060f 	and.w	r6, r6, #15
 80162a2:	2503      	movs	r5, #3
 80162a4:	4f1e      	ldr	r7, [pc, #120]	; (8016320 <_dtoa_r+0x330>)
 80162a6:	e04c      	b.n	8016342 <_dtoa_r+0x352>
 80162a8:	2301      	movs	r3, #1
 80162aa:	930a      	str	r3, [sp, #40]	; 0x28
 80162ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80162ae:	4453      	add	r3, sl
 80162b0:	f103 0901 	add.w	r9, r3, #1
 80162b4:	9302      	str	r3, [sp, #8]
 80162b6:	464b      	mov	r3, r9
 80162b8:	2b01      	cmp	r3, #1
 80162ba:	bfb8      	it	lt
 80162bc:	2301      	movlt	r3, #1
 80162be:	e7ba      	b.n	8016236 <_dtoa_r+0x246>
 80162c0:	2300      	movs	r3, #0
 80162c2:	e7b2      	b.n	801622a <_dtoa_r+0x23a>
 80162c4:	2300      	movs	r3, #0
 80162c6:	e7f0      	b.n	80162aa <_dtoa_r+0x2ba>
 80162c8:	2501      	movs	r5, #1
 80162ca:	2300      	movs	r3, #0
 80162cc:	9306      	str	r3, [sp, #24]
 80162ce:	950a      	str	r5, [sp, #40]	; 0x28
 80162d0:	f04f 33ff 	mov.w	r3, #4294967295
 80162d4:	9302      	str	r3, [sp, #8]
 80162d6:	4699      	mov	r9, r3
 80162d8:	2200      	movs	r2, #0
 80162da:	2312      	movs	r3, #18
 80162dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80162de:	e7aa      	b.n	8016236 <_dtoa_r+0x246>
 80162e0:	2301      	movs	r3, #1
 80162e2:	930a      	str	r3, [sp, #40]	; 0x28
 80162e4:	e7f4      	b.n	80162d0 <_dtoa_r+0x2e0>
 80162e6:	2301      	movs	r3, #1
 80162e8:	9302      	str	r3, [sp, #8]
 80162ea:	4699      	mov	r9, r3
 80162ec:	461a      	mov	r2, r3
 80162ee:	e7f5      	b.n	80162dc <_dtoa_r+0x2ec>
 80162f0:	3101      	adds	r1, #1
 80162f2:	6071      	str	r1, [r6, #4]
 80162f4:	0052      	lsls	r2, r2, #1
 80162f6:	e7a2      	b.n	801623e <_dtoa_r+0x24e>
 80162f8:	636f4361 	.word	0x636f4361
 80162fc:	3fd287a7 	.word	0x3fd287a7
 8016300:	8b60c8b3 	.word	0x8b60c8b3
 8016304:	3fc68a28 	.word	0x3fc68a28
 8016308:	509f79fb 	.word	0x509f79fb
 801630c:	3fd34413 	.word	0x3fd34413
 8016310:	7ff00000 	.word	0x7ff00000
 8016314:	08019174 	.word	0x08019174
 8016318:	3ff80000 	.word	0x3ff80000
 801631c:	08019078 	.word	0x08019078
 8016320:	08019050 	.word	0x08019050
 8016324:	08018fd9 	.word	0x08018fd9
 8016328:	07f1      	lsls	r1, r6, #31
 801632a:	d508      	bpl.n	801633e <_dtoa_r+0x34e>
 801632c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016334:	f7ea f978 	bl	8000628 <__aeabi_dmul>
 8016338:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801633c:	3501      	adds	r5, #1
 801633e:	1076      	asrs	r6, r6, #1
 8016340:	3708      	adds	r7, #8
 8016342:	2e00      	cmp	r6, #0
 8016344:	d1f0      	bne.n	8016328 <_dtoa_r+0x338>
 8016346:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801634a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801634e:	f7ea fa95 	bl	800087c <__aeabi_ddiv>
 8016352:	e9cd 0100 	strd	r0, r1, [sp]
 8016356:	e01a      	b.n	801638e <_dtoa_r+0x39e>
 8016358:	2502      	movs	r5, #2
 801635a:	e7a3      	b.n	80162a4 <_dtoa_r+0x2b4>
 801635c:	f000 80a0 	beq.w	80164a0 <_dtoa_r+0x4b0>
 8016360:	f1ca 0600 	rsb	r6, sl, #0
 8016364:	4b9f      	ldr	r3, [pc, #636]	; (80165e4 <_dtoa_r+0x5f4>)
 8016366:	4fa0      	ldr	r7, [pc, #640]	; (80165e8 <_dtoa_r+0x5f8>)
 8016368:	f006 020f 	and.w	r2, r6, #15
 801636c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016374:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016378:	f7ea f956 	bl	8000628 <__aeabi_dmul>
 801637c:	e9cd 0100 	strd	r0, r1, [sp]
 8016380:	1136      	asrs	r6, r6, #4
 8016382:	2300      	movs	r3, #0
 8016384:	2502      	movs	r5, #2
 8016386:	2e00      	cmp	r6, #0
 8016388:	d17f      	bne.n	801648a <_dtoa_r+0x49a>
 801638a:	2b00      	cmp	r3, #0
 801638c:	d1e1      	bne.n	8016352 <_dtoa_r+0x362>
 801638e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016390:	2b00      	cmp	r3, #0
 8016392:	f000 8087 	beq.w	80164a4 <_dtoa_r+0x4b4>
 8016396:	e9dd 6700 	ldrd	r6, r7, [sp]
 801639a:	2200      	movs	r2, #0
 801639c:	4b93      	ldr	r3, [pc, #588]	; (80165ec <_dtoa_r+0x5fc>)
 801639e:	4630      	mov	r0, r6
 80163a0:	4639      	mov	r1, r7
 80163a2:	f7ea fbb3 	bl	8000b0c <__aeabi_dcmplt>
 80163a6:	2800      	cmp	r0, #0
 80163a8:	d07c      	beq.n	80164a4 <_dtoa_r+0x4b4>
 80163aa:	f1b9 0f00 	cmp.w	r9, #0
 80163ae:	d079      	beq.n	80164a4 <_dtoa_r+0x4b4>
 80163b0:	9b02      	ldr	r3, [sp, #8]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	dd35      	ble.n	8016422 <_dtoa_r+0x432>
 80163b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80163ba:	9308      	str	r3, [sp, #32]
 80163bc:	4639      	mov	r1, r7
 80163be:	2200      	movs	r2, #0
 80163c0:	4b8b      	ldr	r3, [pc, #556]	; (80165f0 <_dtoa_r+0x600>)
 80163c2:	4630      	mov	r0, r6
 80163c4:	f7ea f930 	bl	8000628 <__aeabi_dmul>
 80163c8:	e9cd 0100 	strd	r0, r1, [sp]
 80163cc:	9f02      	ldr	r7, [sp, #8]
 80163ce:	3501      	adds	r5, #1
 80163d0:	4628      	mov	r0, r5
 80163d2:	f7ea f8bf 	bl	8000554 <__aeabi_i2d>
 80163d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80163da:	f7ea f925 	bl	8000628 <__aeabi_dmul>
 80163de:	2200      	movs	r2, #0
 80163e0:	4b84      	ldr	r3, [pc, #528]	; (80165f4 <_dtoa_r+0x604>)
 80163e2:	f7e9 ff6b 	bl	80002bc <__adddf3>
 80163e6:	4605      	mov	r5, r0
 80163e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80163ec:	2f00      	cmp	r7, #0
 80163ee:	d15d      	bne.n	80164ac <_dtoa_r+0x4bc>
 80163f0:	2200      	movs	r2, #0
 80163f2:	4b81      	ldr	r3, [pc, #516]	; (80165f8 <_dtoa_r+0x608>)
 80163f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80163f8:	f7e9 ff5e 	bl	80002b8 <__aeabi_dsub>
 80163fc:	462a      	mov	r2, r5
 80163fe:	4633      	mov	r3, r6
 8016400:	e9cd 0100 	strd	r0, r1, [sp]
 8016404:	f7ea fba0 	bl	8000b48 <__aeabi_dcmpgt>
 8016408:	2800      	cmp	r0, #0
 801640a:	f040 8288 	bne.w	801691e <_dtoa_r+0x92e>
 801640e:	462a      	mov	r2, r5
 8016410:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8016414:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016418:	f7ea fb78 	bl	8000b0c <__aeabi_dcmplt>
 801641c:	2800      	cmp	r0, #0
 801641e:	f040 827c 	bne.w	801691a <_dtoa_r+0x92a>
 8016422:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016426:	e9cd 2300 	strd	r2, r3, [sp]
 801642a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801642c:	2b00      	cmp	r3, #0
 801642e:	f2c0 8150 	blt.w	80166d2 <_dtoa_r+0x6e2>
 8016432:	f1ba 0f0e 	cmp.w	sl, #14
 8016436:	f300 814c 	bgt.w	80166d2 <_dtoa_r+0x6e2>
 801643a:	4b6a      	ldr	r3, [pc, #424]	; (80165e4 <_dtoa_r+0x5f4>)
 801643c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016440:	ed93 7b00 	vldr	d7, [r3]
 8016444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016446:	2b00      	cmp	r3, #0
 8016448:	ed8d 7b02 	vstr	d7, [sp, #8]
 801644c:	f280 80d8 	bge.w	8016600 <_dtoa_r+0x610>
 8016450:	f1b9 0f00 	cmp.w	r9, #0
 8016454:	f300 80d4 	bgt.w	8016600 <_dtoa_r+0x610>
 8016458:	f040 825e 	bne.w	8016918 <_dtoa_r+0x928>
 801645c:	2200      	movs	r2, #0
 801645e:	4b66      	ldr	r3, [pc, #408]	; (80165f8 <_dtoa_r+0x608>)
 8016460:	ec51 0b17 	vmov	r0, r1, d7
 8016464:	f7ea f8e0 	bl	8000628 <__aeabi_dmul>
 8016468:	e9dd 2300 	ldrd	r2, r3, [sp]
 801646c:	f7ea fb62 	bl	8000b34 <__aeabi_dcmpge>
 8016470:	464f      	mov	r7, r9
 8016472:	464e      	mov	r6, r9
 8016474:	2800      	cmp	r0, #0
 8016476:	f040 8234 	bne.w	80168e2 <_dtoa_r+0x8f2>
 801647a:	2331      	movs	r3, #49	; 0x31
 801647c:	f10b 0501 	add.w	r5, fp, #1
 8016480:	f88b 3000 	strb.w	r3, [fp]
 8016484:	f10a 0a01 	add.w	sl, sl, #1
 8016488:	e22f      	b.n	80168ea <_dtoa_r+0x8fa>
 801648a:	07f2      	lsls	r2, r6, #31
 801648c:	d505      	bpl.n	801649a <_dtoa_r+0x4aa>
 801648e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016492:	f7ea f8c9 	bl	8000628 <__aeabi_dmul>
 8016496:	3501      	adds	r5, #1
 8016498:	2301      	movs	r3, #1
 801649a:	1076      	asrs	r6, r6, #1
 801649c:	3708      	adds	r7, #8
 801649e:	e772      	b.n	8016386 <_dtoa_r+0x396>
 80164a0:	2502      	movs	r5, #2
 80164a2:	e774      	b.n	801638e <_dtoa_r+0x39e>
 80164a4:	f8cd a020 	str.w	sl, [sp, #32]
 80164a8:	464f      	mov	r7, r9
 80164aa:	e791      	b.n	80163d0 <_dtoa_r+0x3e0>
 80164ac:	4b4d      	ldr	r3, [pc, #308]	; (80165e4 <_dtoa_r+0x5f4>)
 80164ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80164b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80164b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d047      	beq.n	801654c <_dtoa_r+0x55c>
 80164bc:	4602      	mov	r2, r0
 80164be:	460b      	mov	r3, r1
 80164c0:	2000      	movs	r0, #0
 80164c2:	494e      	ldr	r1, [pc, #312]	; (80165fc <_dtoa_r+0x60c>)
 80164c4:	f7ea f9da 	bl	800087c <__aeabi_ddiv>
 80164c8:	462a      	mov	r2, r5
 80164ca:	4633      	mov	r3, r6
 80164cc:	f7e9 fef4 	bl	80002b8 <__aeabi_dsub>
 80164d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80164d4:	465d      	mov	r5, fp
 80164d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80164da:	f7ea fb55 	bl	8000b88 <__aeabi_d2iz>
 80164de:	4606      	mov	r6, r0
 80164e0:	f7ea f838 	bl	8000554 <__aeabi_i2d>
 80164e4:	4602      	mov	r2, r0
 80164e6:	460b      	mov	r3, r1
 80164e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80164ec:	f7e9 fee4 	bl	80002b8 <__aeabi_dsub>
 80164f0:	3630      	adds	r6, #48	; 0x30
 80164f2:	f805 6b01 	strb.w	r6, [r5], #1
 80164f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80164fa:	e9cd 0100 	strd	r0, r1, [sp]
 80164fe:	f7ea fb05 	bl	8000b0c <__aeabi_dcmplt>
 8016502:	2800      	cmp	r0, #0
 8016504:	d163      	bne.n	80165ce <_dtoa_r+0x5de>
 8016506:	e9dd 2300 	ldrd	r2, r3, [sp]
 801650a:	2000      	movs	r0, #0
 801650c:	4937      	ldr	r1, [pc, #220]	; (80165ec <_dtoa_r+0x5fc>)
 801650e:	f7e9 fed3 	bl	80002b8 <__aeabi_dsub>
 8016512:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016516:	f7ea faf9 	bl	8000b0c <__aeabi_dcmplt>
 801651a:	2800      	cmp	r0, #0
 801651c:	f040 80b7 	bne.w	801668e <_dtoa_r+0x69e>
 8016520:	eba5 030b 	sub.w	r3, r5, fp
 8016524:	429f      	cmp	r7, r3
 8016526:	f77f af7c 	ble.w	8016422 <_dtoa_r+0x432>
 801652a:	2200      	movs	r2, #0
 801652c:	4b30      	ldr	r3, [pc, #192]	; (80165f0 <_dtoa_r+0x600>)
 801652e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016532:	f7ea f879 	bl	8000628 <__aeabi_dmul>
 8016536:	2200      	movs	r2, #0
 8016538:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801653c:	4b2c      	ldr	r3, [pc, #176]	; (80165f0 <_dtoa_r+0x600>)
 801653e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016542:	f7ea f871 	bl	8000628 <__aeabi_dmul>
 8016546:	e9cd 0100 	strd	r0, r1, [sp]
 801654a:	e7c4      	b.n	80164d6 <_dtoa_r+0x4e6>
 801654c:	462a      	mov	r2, r5
 801654e:	4633      	mov	r3, r6
 8016550:	f7ea f86a 	bl	8000628 <__aeabi_dmul>
 8016554:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016558:	eb0b 0507 	add.w	r5, fp, r7
 801655c:	465e      	mov	r6, fp
 801655e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016562:	f7ea fb11 	bl	8000b88 <__aeabi_d2iz>
 8016566:	4607      	mov	r7, r0
 8016568:	f7e9 fff4 	bl	8000554 <__aeabi_i2d>
 801656c:	3730      	adds	r7, #48	; 0x30
 801656e:	4602      	mov	r2, r0
 8016570:	460b      	mov	r3, r1
 8016572:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016576:	f7e9 fe9f 	bl	80002b8 <__aeabi_dsub>
 801657a:	f806 7b01 	strb.w	r7, [r6], #1
 801657e:	42ae      	cmp	r6, r5
 8016580:	e9cd 0100 	strd	r0, r1, [sp]
 8016584:	f04f 0200 	mov.w	r2, #0
 8016588:	d126      	bne.n	80165d8 <_dtoa_r+0x5e8>
 801658a:	4b1c      	ldr	r3, [pc, #112]	; (80165fc <_dtoa_r+0x60c>)
 801658c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016590:	f7e9 fe94 	bl	80002bc <__adddf3>
 8016594:	4602      	mov	r2, r0
 8016596:	460b      	mov	r3, r1
 8016598:	e9dd 0100 	ldrd	r0, r1, [sp]
 801659c:	f7ea fad4 	bl	8000b48 <__aeabi_dcmpgt>
 80165a0:	2800      	cmp	r0, #0
 80165a2:	d174      	bne.n	801668e <_dtoa_r+0x69e>
 80165a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80165a8:	2000      	movs	r0, #0
 80165aa:	4914      	ldr	r1, [pc, #80]	; (80165fc <_dtoa_r+0x60c>)
 80165ac:	f7e9 fe84 	bl	80002b8 <__aeabi_dsub>
 80165b0:	4602      	mov	r2, r0
 80165b2:	460b      	mov	r3, r1
 80165b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80165b8:	f7ea faa8 	bl	8000b0c <__aeabi_dcmplt>
 80165bc:	2800      	cmp	r0, #0
 80165be:	f43f af30 	beq.w	8016422 <_dtoa_r+0x432>
 80165c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80165c6:	2b30      	cmp	r3, #48	; 0x30
 80165c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80165cc:	d002      	beq.n	80165d4 <_dtoa_r+0x5e4>
 80165ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80165d2:	e04a      	b.n	801666a <_dtoa_r+0x67a>
 80165d4:	4615      	mov	r5, r2
 80165d6:	e7f4      	b.n	80165c2 <_dtoa_r+0x5d2>
 80165d8:	4b05      	ldr	r3, [pc, #20]	; (80165f0 <_dtoa_r+0x600>)
 80165da:	f7ea f825 	bl	8000628 <__aeabi_dmul>
 80165de:	e9cd 0100 	strd	r0, r1, [sp]
 80165e2:	e7bc      	b.n	801655e <_dtoa_r+0x56e>
 80165e4:	08019078 	.word	0x08019078
 80165e8:	08019050 	.word	0x08019050
 80165ec:	3ff00000 	.word	0x3ff00000
 80165f0:	40240000 	.word	0x40240000
 80165f4:	401c0000 	.word	0x401c0000
 80165f8:	40140000 	.word	0x40140000
 80165fc:	3fe00000 	.word	0x3fe00000
 8016600:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016604:	465d      	mov	r5, fp
 8016606:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801660a:	4630      	mov	r0, r6
 801660c:	4639      	mov	r1, r7
 801660e:	f7ea f935 	bl	800087c <__aeabi_ddiv>
 8016612:	f7ea fab9 	bl	8000b88 <__aeabi_d2iz>
 8016616:	4680      	mov	r8, r0
 8016618:	f7e9 ff9c 	bl	8000554 <__aeabi_i2d>
 801661c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016620:	f7ea f802 	bl	8000628 <__aeabi_dmul>
 8016624:	4602      	mov	r2, r0
 8016626:	460b      	mov	r3, r1
 8016628:	4630      	mov	r0, r6
 801662a:	4639      	mov	r1, r7
 801662c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8016630:	f7e9 fe42 	bl	80002b8 <__aeabi_dsub>
 8016634:	f805 6b01 	strb.w	r6, [r5], #1
 8016638:	eba5 060b 	sub.w	r6, r5, fp
 801663c:	45b1      	cmp	r9, r6
 801663e:	4602      	mov	r2, r0
 8016640:	460b      	mov	r3, r1
 8016642:	d139      	bne.n	80166b8 <_dtoa_r+0x6c8>
 8016644:	f7e9 fe3a 	bl	80002bc <__adddf3>
 8016648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801664c:	4606      	mov	r6, r0
 801664e:	460f      	mov	r7, r1
 8016650:	f7ea fa7a 	bl	8000b48 <__aeabi_dcmpgt>
 8016654:	b9c8      	cbnz	r0, 801668a <_dtoa_r+0x69a>
 8016656:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801665a:	4630      	mov	r0, r6
 801665c:	4639      	mov	r1, r7
 801665e:	f7ea fa4b 	bl	8000af8 <__aeabi_dcmpeq>
 8016662:	b110      	cbz	r0, 801666a <_dtoa_r+0x67a>
 8016664:	f018 0f01 	tst.w	r8, #1
 8016668:	d10f      	bne.n	801668a <_dtoa_r+0x69a>
 801666a:	9904      	ldr	r1, [sp, #16]
 801666c:	4620      	mov	r0, r4
 801666e:	f000 fe0d 	bl	801728c <_Bfree>
 8016672:	2300      	movs	r3, #0
 8016674:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016676:	702b      	strb	r3, [r5, #0]
 8016678:	f10a 0301 	add.w	r3, sl, #1
 801667c:	6013      	str	r3, [r2, #0]
 801667e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016680:	2b00      	cmp	r3, #0
 8016682:	f000 8241 	beq.w	8016b08 <_dtoa_r+0xb18>
 8016686:	601d      	str	r5, [r3, #0]
 8016688:	e23e      	b.n	8016b08 <_dtoa_r+0xb18>
 801668a:	f8cd a020 	str.w	sl, [sp, #32]
 801668e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016692:	2a39      	cmp	r2, #57	; 0x39
 8016694:	f105 33ff 	add.w	r3, r5, #4294967295
 8016698:	d108      	bne.n	80166ac <_dtoa_r+0x6bc>
 801669a:	459b      	cmp	fp, r3
 801669c:	d10a      	bne.n	80166b4 <_dtoa_r+0x6c4>
 801669e:	9b08      	ldr	r3, [sp, #32]
 80166a0:	3301      	adds	r3, #1
 80166a2:	9308      	str	r3, [sp, #32]
 80166a4:	2330      	movs	r3, #48	; 0x30
 80166a6:	f88b 3000 	strb.w	r3, [fp]
 80166aa:	465b      	mov	r3, fp
 80166ac:	781a      	ldrb	r2, [r3, #0]
 80166ae:	3201      	adds	r2, #1
 80166b0:	701a      	strb	r2, [r3, #0]
 80166b2:	e78c      	b.n	80165ce <_dtoa_r+0x5de>
 80166b4:	461d      	mov	r5, r3
 80166b6:	e7ea      	b.n	801668e <_dtoa_r+0x69e>
 80166b8:	2200      	movs	r2, #0
 80166ba:	4b9b      	ldr	r3, [pc, #620]	; (8016928 <_dtoa_r+0x938>)
 80166bc:	f7e9 ffb4 	bl	8000628 <__aeabi_dmul>
 80166c0:	2200      	movs	r2, #0
 80166c2:	2300      	movs	r3, #0
 80166c4:	4606      	mov	r6, r0
 80166c6:	460f      	mov	r7, r1
 80166c8:	f7ea fa16 	bl	8000af8 <__aeabi_dcmpeq>
 80166cc:	2800      	cmp	r0, #0
 80166ce:	d09a      	beq.n	8016606 <_dtoa_r+0x616>
 80166d0:	e7cb      	b.n	801666a <_dtoa_r+0x67a>
 80166d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80166d4:	2a00      	cmp	r2, #0
 80166d6:	f000 808b 	beq.w	80167f0 <_dtoa_r+0x800>
 80166da:	9a06      	ldr	r2, [sp, #24]
 80166dc:	2a01      	cmp	r2, #1
 80166de:	dc6e      	bgt.n	80167be <_dtoa_r+0x7ce>
 80166e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80166e2:	2a00      	cmp	r2, #0
 80166e4:	d067      	beq.n	80167b6 <_dtoa_r+0x7c6>
 80166e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80166ea:	9f07      	ldr	r7, [sp, #28]
 80166ec:	9d05      	ldr	r5, [sp, #20]
 80166ee:	9a05      	ldr	r2, [sp, #20]
 80166f0:	2101      	movs	r1, #1
 80166f2:	441a      	add	r2, r3
 80166f4:	4620      	mov	r0, r4
 80166f6:	9205      	str	r2, [sp, #20]
 80166f8:	4498      	add	r8, r3
 80166fa:	f000 fea5 	bl	8017448 <__i2b>
 80166fe:	4606      	mov	r6, r0
 8016700:	2d00      	cmp	r5, #0
 8016702:	dd0c      	ble.n	801671e <_dtoa_r+0x72e>
 8016704:	f1b8 0f00 	cmp.w	r8, #0
 8016708:	dd09      	ble.n	801671e <_dtoa_r+0x72e>
 801670a:	4545      	cmp	r5, r8
 801670c:	9a05      	ldr	r2, [sp, #20]
 801670e:	462b      	mov	r3, r5
 8016710:	bfa8      	it	ge
 8016712:	4643      	movge	r3, r8
 8016714:	1ad2      	subs	r2, r2, r3
 8016716:	9205      	str	r2, [sp, #20]
 8016718:	1aed      	subs	r5, r5, r3
 801671a:	eba8 0803 	sub.w	r8, r8, r3
 801671e:	9b07      	ldr	r3, [sp, #28]
 8016720:	b1eb      	cbz	r3, 801675e <_dtoa_r+0x76e>
 8016722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016724:	2b00      	cmp	r3, #0
 8016726:	d067      	beq.n	80167f8 <_dtoa_r+0x808>
 8016728:	b18f      	cbz	r7, 801674e <_dtoa_r+0x75e>
 801672a:	4631      	mov	r1, r6
 801672c:	463a      	mov	r2, r7
 801672e:	4620      	mov	r0, r4
 8016730:	f000 ff2a 	bl	8017588 <__pow5mult>
 8016734:	9a04      	ldr	r2, [sp, #16]
 8016736:	4601      	mov	r1, r0
 8016738:	4606      	mov	r6, r0
 801673a:	4620      	mov	r0, r4
 801673c:	f000 fe8d 	bl	801745a <__multiply>
 8016740:	9904      	ldr	r1, [sp, #16]
 8016742:	9008      	str	r0, [sp, #32]
 8016744:	4620      	mov	r0, r4
 8016746:	f000 fda1 	bl	801728c <_Bfree>
 801674a:	9b08      	ldr	r3, [sp, #32]
 801674c:	9304      	str	r3, [sp, #16]
 801674e:	9b07      	ldr	r3, [sp, #28]
 8016750:	1bda      	subs	r2, r3, r7
 8016752:	d004      	beq.n	801675e <_dtoa_r+0x76e>
 8016754:	9904      	ldr	r1, [sp, #16]
 8016756:	4620      	mov	r0, r4
 8016758:	f000 ff16 	bl	8017588 <__pow5mult>
 801675c:	9004      	str	r0, [sp, #16]
 801675e:	2101      	movs	r1, #1
 8016760:	4620      	mov	r0, r4
 8016762:	f000 fe71 	bl	8017448 <__i2b>
 8016766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016768:	4607      	mov	r7, r0
 801676a:	2b00      	cmp	r3, #0
 801676c:	f000 81d0 	beq.w	8016b10 <_dtoa_r+0xb20>
 8016770:	461a      	mov	r2, r3
 8016772:	4601      	mov	r1, r0
 8016774:	4620      	mov	r0, r4
 8016776:	f000 ff07 	bl	8017588 <__pow5mult>
 801677a:	9b06      	ldr	r3, [sp, #24]
 801677c:	2b01      	cmp	r3, #1
 801677e:	4607      	mov	r7, r0
 8016780:	dc40      	bgt.n	8016804 <_dtoa_r+0x814>
 8016782:	9b00      	ldr	r3, [sp, #0]
 8016784:	2b00      	cmp	r3, #0
 8016786:	d139      	bne.n	80167fc <_dtoa_r+0x80c>
 8016788:	9b01      	ldr	r3, [sp, #4]
 801678a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801678e:	2b00      	cmp	r3, #0
 8016790:	d136      	bne.n	8016800 <_dtoa_r+0x810>
 8016792:	9b01      	ldr	r3, [sp, #4]
 8016794:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016798:	0d1b      	lsrs	r3, r3, #20
 801679a:	051b      	lsls	r3, r3, #20
 801679c:	b12b      	cbz	r3, 80167aa <_dtoa_r+0x7ba>
 801679e:	9b05      	ldr	r3, [sp, #20]
 80167a0:	3301      	adds	r3, #1
 80167a2:	9305      	str	r3, [sp, #20]
 80167a4:	f108 0801 	add.w	r8, r8, #1
 80167a8:	2301      	movs	r3, #1
 80167aa:	9307      	str	r3, [sp, #28]
 80167ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d12a      	bne.n	8016808 <_dtoa_r+0x818>
 80167b2:	2001      	movs	r0, #1
 80167b4:	e030      	b.n	8016818 <_dtoa_r+0x828>
 80167b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80167b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80167bc:	e795      	b.n	80166ea <_dtoa_r+0x6fa>
 80167be:	9b07      	ldr	r3, [sp, #28]
 80167c0:	f109 37ff 	add.w	r7, r9, #4294967295
 80167c4:	42bb      	cmp	r3, r7
 80167c6:	bfbf      	itttt	lt
 80167c8:	9b07      	ldrlt	r3, [sp, #28]
 80167ca:	9707      	strlt	r7, [sp, #28]
 80167cc:	1afa      	sublt	r2, r7, r3
 80167ce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80167d0:	bfbb      	ittet	lt
 80167d2:	189b      	addlt	r3, r3, r2
 80167d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80167d6:	1bdf      	subge	r7, r3, r7
 80167d8:	2700      	movlt	r7, #0
 80167da:	f1b9 0f00 	cmp.w	r9, #0
 80167de:	bfb5      	itete	lt
 80167e0:	9b05      	ldrlt	r3, [sp, #20]
 80167e2:	9d05      	ldrge	r5, [sp, #20]
 80167e4:	eba3 0509 	sublt.w	r5, r3, r9
 80167e8:	464b      	movge	r3, r9
 80167ea:	bfb8      	it	lt
 80167ec:	2300      	movlt	r3, #0
 80167ee:	e77e      	b.n	80166ee <_dtoa_r+0x6fe>
 80167f0:	9f07      	ldr	r7, [sp, #28]
 80167f2:	9d05      	ldr	r5, [sp, #20]
 80167f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80167f6:	e783      	b.n	8016700 <_dtoa_r+0x710>
 80167f8:	9a07      	ldr	r2, [sp, #28]
 80167fa:	e7ab      	b.n	8016754 <_dtoa_r+0x764>
 80167fc:	2300      	movs	r3, #0
 80167fe:	e7d4      	b.n	80167aa <_dtoa_r+0x7ba>
 8016800:	9b00      	ldr	r3, [sp, #0]
 8016802:	e7d2      	b.n	80167aa <_dtoa_r+0x7ba>
 8016804:	2300      	movs	r3, #0
 8016806:	9307      	str	r3, [sp, #28]
 8016808:	693b      	ldr	r3, [r7, #16]
 801680a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801680e:	6918      	ldr	r0, [r3, #16]
 8016810:	f000 fdcc 	bl	80173ac <__hi0bits>
 8016814:	f1c0 0020 	rsb	r0, r0, #32
 8016818:	4440      	add	r0, r8
 801681a:	f010 001f 	ands.w	r0, r0, #31
 801681e:	d047      	beq.n	80168b0 <_dtoa_r+0x8c0>
 8016820:	f1c0 0320 	rsb	r3, r0, #32
 8016824:	2b04      	cmp	r3, #4
 8016826:	dd3b      	ble.n	80168a0 <_dtoa_r+0x8b0>
 8016828:	9b05      	ldr	r3, [sp, #20]
 801682a:	f1c0 001c 	rsb	r0, r0, #28
 801682e:	4403      	add	r3, r0
 8016830:	9305      	str	r3, [sp, #20]
 8016832:	4405      	add	r5, r0
 8016834:	4480      	add	r8, r0
 8016836:	9b05      	ldr	r3, [sp, #20]
 8016838:	2b00      	cmp	r3, #0
 801683a:	dd05      	ble.n	8016848 <_dtoa_r+0x858>
 801683c:	461a      	mov	r2, r3
 801683e:	9904      	ldr	r1, [sp, #16]
 8016840:	4620      	mov	r0, r4
 8016842:	f000 feef 	bl	8017624 <__lshift>
 8016846:	9004      	str	r0, [sp, #16]
 8016848:	f1b8 0f00 	cmp.w	r8, #0
 801684c:	dd05      	ble.n	801685a <_dtoa_r+0x86a>
 801684e:	4639      	mov	r1, r7
 8016850:	4642      	mov	r2, r8
 8016852:	4620      	mov	r0, r4
 8016854:	f000 fee6 	bl	8017624 <__lshift>
 8016858:	4607      	mov	r7, r0
 801685a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801685c:	b353      	cbz	r3, 80168b4 <_dtoa_r+0x8c4>
 801685e:	4639      	mov	r1, r7
 8016860:	9804      	ldr	r0, [sp, #16]
 8016862:	f000 ff33 	bl	80176cc <__mcmp>
 8016866:	2800      	cmp	r0, #0
 8016868:	da24      	bge.n	80168b4 <_dtoa_r+0x8c4>
 801686a:	2300      	movs	r3, #0
 801686c:	220a      	movs	r2, #10
 801686e:	9904      	ldr	r1, [sp, #16]
 8016870:	4620      	mov	r0, r4
 8016872:	f000 fd22 	bl	80172ba <__multadd>
 8016876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016878:	9004      	str	r0, [sp, #16]
 801687a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801687e:	2b00      	cmp	r3, #0
 8016880:	f000 814d 	beq.w	8016b1e <_dtoa_r+0xb2e>
 8016884:	2300      	movs	r3, #0
 8016886:	4631      	mov	r1, r6
 8016888:	220a      	movs	r2, #10
 801688a:	4620      	mov	r0, r4
 801688c:	f000 fd15 	bl	80172ba <__multadd>
 8016890:	9b02      	ldr	r3, [sp, #8]
 8016892:	2b00      	cmp	r3, #0
 8016894:	4606      	mov	r6, r0
 8016896:	dc4f      	bgt.n	8016938 <_dtoa_r+0x948>
 8016898:	9b06      	ldr	r3, [sp, #24]
 801689a:	2b02      	cmp	r3, #2
 801689c:	dd4c      	ble.n	8016938 <_dtoa_r+0x948>
 801689e:	e011      	b.n	80168c4 <_dtoa_r+0x8d4>
 80168a0:	d0c9      	beq.n	8016836 <_dtoa_r+0x846>
 80168a2:	9a05      	ldr	r2, [sp, #20]
 80168a4:	331c      	adds	r3, #28
 80168a6:	441a      	add	r2, r3
 80168a8:	9205      	str	r2, [sp, #20]
 80168aa:	441d      	add	r5, r3
 80168ac:	4498      	add	r8, r3
 80168ae:	e7c2      	b.n	8016836 <_dtoa_r+0x846>
 80168b0:	4603      	mov	r3, r0
 80168b2:	e7f6      	b.n	80168a2 <_dtoa_r+0x8b2>
 80168b4:	f1b9 0f00 	cmp.w	r9, #0
 80168b8:	dc38      	bgt.n	801692c <_dtoa_r+0x93c>
 80168ba:	9b06      	ldr	r3, [sp, #24]
 80168bc:	2b02      	cmp	r3, #2
 80168be:	dd35      	ble.n	801692c <_dtoa_r+0x93c>
 80168c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80168c4:	9b02      	ldr	r3, [sp, #8]
 80168c6:	b963      	cbnz	r3, 80168e2 <_dtoa_r+0x8f2>
 80168c8:	4639      	mov	r1, r7
 80168ca:	2205      	movs	r2, #5
 80168cc:	4620      	mov	r0, r4
 80168ce:	f000 fcf4 	bl	80172ba <__multadd>
 80168d2:	4601      	mov	r1, r0
 80168d4:	4607      	mov	r7, r0
 80168d6:	9804      	ldr	r0, [sp, #16]
 80168d8:	f000 fef8 	bl	80176cc <__mcmp>
 80168dc:	2800      	cmp	r0, #0
 80168de:	f73f adcc 	bgt.w	801647a <_dtoa_r+0x48a>
 80168e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80168e4:	465d      	mov	r5, fp
 80168e6:	ea6f 0a03 	mvn.w	sl, r3
 80168ea:	f04f 0900 	mov.w	r9, #0
 80168ee:	4639      	mov	r1, r7
 80168f0:	4620      	mov	r0, r4
 80168f2:	f000 fccb 	bl	801728c <_Bfree>
 80168f6:	2e00      	cmp	r6, #0
 80168f8:	f43f aeb7 	beq.w	801666a <_dtoa_r+0x67a>
 80168fc:	f1b9 0f00 	cmp.w	r9, #0
 8016900:	d005      	beq.n	801690e <_dtoa_r+0x91e>
 8016902:	45b1      	cmp	r9, r6
 8016904:	d003      	beq.n	801690e <_dtoa_r+0x91e>
 8016906:	4649      	mov	r1, r9
 8016908:	4620      	mov	r0, r4
 801690a:	f000 fcbf 	bl	801728c <_Bfree>
 801690e:	4631      	mov	r1, r6
 8016910:	4620      	mov	r0, r4
 8016912:	f000 fcbb 	bl	801728c <_Bfree>
 8016916:	e6a8      	b.n	801666a <_dtoa_r+0x67a>
 8016918:	2700      	movs	r7, #0
 801691a:	463e      	mov	r6, r7
 801691c:	e7e1      	b.n	80168e2 <_dtoa_r+0x8f2>
 801691e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016922:	463e      	mov	r6, r7
 8016924:	e5a9      	b.n	801647a <_dtoa_r+0x48a>
 8016926:	bf00      	nop
 8016928:	40240000 	.word	0x40240000
 801692c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801692e:	f8cd 9008 	str.w	r9, [sp, #8]
 8016932:	2b00      	cmp	r3, #0
 8016934:	f000 80fa 	beq.w	8016b2c <_dtoa_r+0xb3c>
 8016938:	2d00      	cmp	r5, #0
 801693a:	dd05      	ble.n	8016948 <_dtoa_r+0x958>
 801693c:	4631      	mov	r1, r6
 801693e:	462a      	mov	r2, r5
 8016940:	4620      	mov	r0, r4
 8016942:	f000 fe6f 	bl	8017624 <__lshift>
 8016946:	4606      	mov	r6, r0
 8016948:	9b07      	ldr	r3, [sp, #28]
 801694a:	2b00      	cmp	r3, #0
 801694c:	d04c      	beq.n	80169e8 <_dtoa_r+0x9f8>
 801694e:	6871      	ldr	r1, [r6, #4]
 8016950:	4620      	mov	r0, r4
 8016952:	f000 fc67 	bl	8017224 <_Balloc>
 8016956:	6932      	ldr	r2, [r6, #16]
 8016958:	3202      	adds	r2, #2
 801695a:	4605      	mov	r5, r0
 801695c:	0092      	lsls	r2, r2, #2
 801695e:	f106 010c 	add.w	r1, r6, #12
 8016962:	300c      	adds	r0, #12
 8016964:	f7fd fd08 	bl	8014378 <memcpy>
 8016968:	2201      	movs	r2, #1
 801696a:	4629      	mov	r1, r5
 801696c:	4620      	mov	r0, r4
 801696e:	f000 fe59 	bl	8017624 <__lshift>
 8016972:	9b00      	ldr	r3, [sp, #0]
 8016974:	f8cd b014 	str.w	fp, [sp, #20]
 8016978:	f003 0301 	and.w	r3, r3, #1
 801697c:	46b1      	mov	r9, r6
 801697e:	9307      	str	r3, [sp, #28]
 8016980:	4606      	mov	r6, r0
 8016982:	4639      	mov	r1, r7
 8016984:	9804      	ldr	r0, [sp, #16]
 8016986:	f7ff faa5 	bl	8015ed4 <quorem>
 801698a:	4649      	mov	r1, r9
 801698c:	4605      	mov	r5, r0
 801698e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016992:	9804      	ldr	r0, [sp, #16]
 8016994:	f000 fe9a 	bl	80176cc <__mcmp>
 8016998:	4632      	mov	r2, r6
 801699a:	9000      	str	r0, [sp, #0]
 801699c:	4639      	mov	r1, r7
 801699e:	4620      	mov	r0, r4
 80169a0:	f000 feae 	bl	8017700 <__mdiff>
 80169a4:	68c3      	ldr	r3, [r0, #12]
 80169a6:	4602      	mov	r2, r0
 80169a8:	bb03      	cbnz	r3, 80169ec <_dtoa_r+0x9fc>
 80169aa:	4601      	mov	r1, r0
 80169ac:	9008      	str	r0, [sp, #32]
 80169ae:	9804      	ldr	r0, [sp, #16]
 80169b0:	f000 fe8c 	bl	80176cc <__mcmp>
 80169b4:	9a08      	ldr	r2, [sp, #32]
 80169b6:	4603      	mov	r3, r0
 80169b8:	4611      	mov	r1, r2
 80169ba:	4620      	mov	r0, r4
 80169bc:	9308      	str	r3, [sp, #32]
 80169be:	f000 fc65 	bl	801728c <_Bfree>
 80169c2:	9b08      	ldr	r3, [sp, #32]
 80169c4:	b9a3      	cbnz	r3, 80169f0 <_dtoa_r+0xa00>
 80169c6:	9a06      	ldr	r2, [sp, #24]
 80169c8:	b992      	cbnz	r2, 80169f0 <_dtoa_r+0xa00>
 80169ca:	9a07      	ldr	r2, [sp, #28]
 80169cc:	b982      	cbnz	r2, 80169f0 <_dtoa_r+0xa00>
 80169ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80169d2:	d029      	beq.n	8016a28 <_dtoa_r+0xa38>
 80169d4:	9b00      	ldr	r3, [sp, #0]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	dd01      	ble.n	80169de <_dtoa_r+0x9ee>
 80169da:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80169de:	9b05      	ldr	r3, [sp, #20]
 80169e0:	1c5d      	adds	r5, r3, #1
 80169e2:	f883 8000 	strb.w	r8, [r3]
 80169e6:	e782      	b.n	80168ee <_dtoa_r+0x8fe>
 80169e8:	4630      	mov	r0, r6
 80169ea:	e7c2      	b.n	8016972 <_dtoa_r+0x982>
 80169ec:	2301      	movs	r3, #1
 80169ee:	e7e3      	b.n	80169b8 <_dtoa_r+0x9c8>
 80169f0:	9a00      	ldr	r2, [sp, #0]
 80169f2:	2a00      	cmp	r2, #0
 80169f4:	db04      	blt.n	8016a00 <_dtoa_r+0xa10>
 80169f6:	d125      	bne.n	8016a44 <_dtoa_r+0xa54>
 80169f8:	9a06      	ldr	r2, [sp, #24]
 80169fa:	bb1a      	cbnz	r2, 8016a44 <_dtoa_r+0xa54>
 80169fc:	9a07      	ldr	r2, [sp, #28]
 80169fe:	bb0a      	cbnz	r2, 8016a44 <_dtoa_r+0xa54>
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	ddec      	ble.n	80169de <_dtoa_r+0x9ee>
 8016a04:	2201      	movs	r2, #1
 8016a06:	9904      	ldr	r1, [sp, #16]
 8016a08:	4620      	mov	r0, r4
 8016a0a:	f000 fe0b 	bl	8017624 <__lshift>
 8016a0e:	4639      	mov	r1, r7
 8016a10:	9004      	str	r0, [sp, #16]
 8016a12:	f000 fe5b 	bl	80176cc <__mcmp>
 8016a16:	2800      	cmp	r0, #0
 8016a18:	dc03      	bgt.n	8016a22 <_dtoa_r+0xa32>
 8016a1a:	d1e0      	bne.n	80169de <_dtoa_r+0x9ee>
 8016a1c:	f018 0f01 	tst.w	r8, #1
 8016a20:	d0dd      	beq.n	80169de <_dtoa_r+0x9ee>
 8016a22:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016a26:	d1d8      	bne.n	80169da <_dtoa_r+0x9ea>
 8016a28:	9b05      	ldr	r3, [sp, #20]
 8016a2a:	9a05      	ldr	r2, [sp, #20]
 8016a2c:	1c5d      	adds	r5, r3, #1
 8016a2e:	2339      	movs	r3, #57	; 0x39
 8016a30:	7013      	strb	r3, [r2, #0]
 8016a32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016a36:	2b39      	cmp	r3, #57	; 0x39
 8016a38:	f105 32ff 	add.w	r2, r5, #4294967295
 8016a3c:	d04f      	beq.n	8016ade <_dtoa_r+0xaee>
 8016a3e:	3301      	adds	r3, #1
 8016a40:	7013      	strb	r3, [r2, #0]
 8016a42:	e754      	b.n	80168ee <_dtoa_r+0x8fe>
 8016a44:	9a05      	ldr	r2, [sp, #20]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	f102 0501 	add.w	r5, r2, #1
 8016a4c:	dd06      	ble.n	8016a5c <_dtoa_r+0xa6c>
 8016a4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016a52:	d0e9      	beq.n	8016a28 <_dtoa_r+0xa38>
 8016a54:	f108 0801 	add.w	r8, r8, #1
 8016a58:	9b05      	ldr	r3, [sp, #20]
 8016a5a:	e7c2      	b.n	80169e2 <_dtoa_r+0x9f2>
 8016a5c:	9a02      	ldr	r2, [sp, #8]
 8016a5e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8016a62:	eba5 030b 	sub.w	r3, r5, fp
 8016a66:	4293      	cmp	r3, r2
 8016a68:	d021      	beq.n	8016aae <_dtoa_r+0xabe>
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	220a      	movs	r2, #10
 8016a6e:	9904      	ldr	r1, [sp, #16]
 8016a70:	4620      	mov	r0, r4
 8016a72:	f000 fc22 	bl	80172ba <__multadd>
 8016a76:	45b1      	cmp	r9, r6
 8016a78:	9004      	str	r0, [sp, #16]
 8016a7a:	f04f 0300 	mov.w	r3, #0
 8016a7e:	f04f 020a 	mov.w	r2, #10
 8016a82:	4649      	mov	r1, r9
 8016a84:	4620      	mov	r0, r4
 8016a86:	d105      	bne.n	8016a94 <_dtoa_r+0xaa4>
 8016a88:	f000 fc17 	bl	80172ba <__multadd>
 8016a8c:	4681      	mov	r9, r0
 8016a8e:	4606      	mov	r6, r0
 8016a90:	9505      	str	r5, [sp, #20]
 8016a92:	e776      	b.n	8016982 <_dtoa_r+0x992>
 8016a94:	f000 fc11 	bl	80172ba <__multadd>
 8016a98:	4631      	mov	r1, r6
 8016a9a:	4681      	mov	r9, r0
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	220a      	movs	r2, #10
 8016aa0:	4620      	mov	r0, r4
 8016aa2:	f000 fc0a 	bl	80172ba <__multadd>
 8016aa6:	4606      	mov	r6, r0
 8016aa8:	e7f2      	b.n	8016a90 <_dtoa_r+0xaa0>
 8016aaa:	f04f 0900 	mov.w	r9, #0
 8016aae:	2201      	movs	r2, #1
 8016ab0:	9904      	ldr	r1, [sp, #16]
 8016ab2:	4620      	mov	r0, r4
 8016ab4:	f000 fdb6 	bl	8017624 <__lshift>
 8016ab8:	4639      	mov	r1, r7
 8016aba:	9004      	str	r0, [sp, #16]
 8016abc:	f000 fe06 	bl	80176cc <__mcmp>
 8016ac0:	2800      	cmp	r0, #0
 8016ac2:	dcb6      	bgt.n	8016a32 <_dtoa_r+0xa42>
 8016ac4:	d102      	bne.n	8016acc <_dtoa_r+0xadc>
 8016ac6:	f018 0f01 	tst.w	r8, #1
 8016aca:	d1b2      	bne.n	8016a32 <_dtoa_r+0xa42>
 8016acc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016ad0:	2b30      	cmp	r3, #48	; 0x30
 8016ad2:	f105 32ff 	add.w	r2, r5, #4294967295
 8016ad6:	f47f af0a 	bne.w	80168ee <_dtoa_r+0x8fe>
 8016ada:	4615      	mov	r5, r2
 8016adc:	e7f6      	b.n	8016acc <_dtoa_r+0xadc>
 8016ade:	4593      	cmp	fp, r2
 8016ae0:	d105      	bne.n	8016aee <_dtoa_r+0xafe>
 8016ae2:	2331      	movs	r3, #49	; 0x31
 8016ae4:	f10a 0a01 	add.w	sl, sl, #1
 8016ae8:	f88b 3000 	strb.w	r3, [fp]
 8016aec:	e6ff      	b.n	80168ee <_dtoa_r+0x8fe>
 8016aee:	4615      	mov	r5, r2
 8016af0:	e79f      	b.n	8016a32 <_dtoa_r+0xa42>
 8016af2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8016b58 <_dtoa_r+0xb68>
 8016af6:	e007      	b.n	8016b08 <_dtoa_r+0xb18>
 8016af8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016afa:	f8df b060 	ldr.w	fp, [pc, #96]	; 8016b5c <_dtoa_r+0xb6c>
 8016afe:	b11b      	cbz	r3, 8016b08 <_dtoa_r+0xb18>
 8016b00:	f10b 0308 	add.w	r3, fp, #8
 8016b04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016b06:	6013      	str	r3, [r2, #0]
 8016b08:	4658      	mov	r0, fp
 8016b0a:	b017      	add	sp, #92	; 0x5c
 8016b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b10:	9b06      	ldr	r3, [sp, #24]
 8016b12:	2b01      	cmp	r3, #1
 8016b14:	f77f ae35 	ble.w	8016782 <_dtoa_r+0x792>
 8016b18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b1a:	9307      	str	r3, [sp, #28]
 8016b1c:	e649      	b.n	80167b2 <_dtoa_r+0x7c2>
 8016b1e:	9b02      	ldr	r3, [sp, #8]
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	dc03      	bgt.n	8016b2c <_dtoa_r+0xb3c>
 8016b24:	9b06      	ldr	r3, [sp, #24]
 8016b26:	2b02      	cmp	r3, #2
 8016b28:	f73f aecc 	bgt.w	80168c4 <_dtoa_r+0x8d4>
 8016b2c:	465d      	mov	r5, fp
 8016b2e:	4639      	mov	r1, r7
 8016b30:	9804      	ldr	r0, [sp, #16]
 8016b32:	f7ff f9cf 	bl	8015ed4 <quorem>
 8016b36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016b3a:	f805 8b01 	strb.w	r8, [r5], #1
 8016b3e:	9a02      	ldr	r2, [sp, #8]
 8016b40:	eba5 030b 	sub.w	r3, r5, fp
 8016b44:	429a      	cmp	r2, r3
 8016b46:	ddb0      	ble.n	8016aaa <_dtoa_r+0xaba>
 8016b48:	2300      	movs	r3, #0
 8016b4a:	220a      	movs	r2, #10
 8016b4c:	9904      	ldr	r1, [sp, #16]
 8016b4e:	4620      	mov	r0, r4
 8016b50:	f000 fbb3 	bl	80172ba <__multadd>
 8016b54:	9004      	str	r0, [sp, #16]
 8016b56:	e7ea      	b.n	8016b2e <_dtoa_r+0xb3e>
 8016b58:	08019173 	.word	0x08019173
 8016b5c:	08018fd0 	.word	0x08018fd0

08016b60 <rshift>:
 8016b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b62:	6906      	ldr	r6, [r0, #16]
 8016b64:	114b      	asrs	r3, r1, #5
 8016b66:	429e      	cmp	r6, r3
 8016b68:	f100 0414 	add.w	r4, r0, #20
 8016b6c:	dd30      	ble.n	8016bd0 <rshift+0x70>
 8016b6e:	f011 011f 	ands.w	r1, r1, #31
 8016b72:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8016b76:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8016b7a:	d108      	bne.n	8016b8e <rshift+0x2e>
 8016b7c:	4621      	mov	r1, r4
 8016b7e:	42b2      	cmp	r2, r6
 8016b80:	460b      	mov	r3, r1
 8016b82:	d211      	bcs.n	8016ba8 <rshift+0x48>
 8016b84:	f852 3b04 	ldr.w	r3, [r2], #4
 8016b88:	f841 3b04 	str.w	r3, [r1], #4
 8016b8c:	e7f7      	b.n	8016b7e <rshift+0x1e>
 8016b8e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8016b92:	f1c1 0c20 	rsb	ip, r1, #32
 8016b96:	40cd      	lsrs	r5, r1
 8016b98:	3204      	adds	r2, #4
 8016b9a:	4623      	mov	r3, r4
 8016b9c:	42b2      	cmp	r2, r6
 8016b9e:	4617      	mov	r7, r2
 8016ba0:	d30c      	bcc.n	8016bbc <rshift+0x5c>
 8016ba2:	601d      	str	r5, [r3, #0]
 8016ba4:	b105      	cbz	r5, 8016ba8 <rshift+0x48>
 8016ba6:	3304      	adds	r3, #4
 8016ba8:	1b1a      	subs	r2, r3, r4
 8016baa:	42a3      	cmp	r3, r4
 8016bac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016bb0:	bf08      	it	eq
 8016bb2:	2300      	moveq	r3, #0
 8016bb4:	6102      	str	r2, [r0, #16]
 8016bb6:	bf08      	it	eq
 8016bb8:	6143      	streq	r3, [r0, #20]
 8016bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016bbc:	683f      	ldr	r7, [r7, #0]
 8016bbe:	fa07 f70c 	lsl.w	r7, r7, ip
 8016bc2:	433d      	orrs	r5, r7
 8016bc4:	f843 5b04 	str.w	r5, [r3], #4
 8016bc8:	f852 5b04 	ldr.w	r5, [r2], #4
 8016bcc:	40cd      	lsrs	r5, r1
 8016bce:	e7e5      	b.n	8016b9c <rshift+0x3c>
 8016bd0:	4623      	mov	r3, r4
 8016bd2:	e7e9      	b.n	8016ba8 <rshift+0x48>

08016bd4 <__hexdig_fun>:
 8016bd4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016bd8:	2b09      	cmp	r3, #9
 8016bda:	d802      	bhi.n	8016be2 <__hexdig_fun+0xe>
 8016bdc:	3820      	subs	r0, #32
 8016bde:	b2c0      	uxtb	r0, r0
 8016be0:	4770      	bx	lr
 8016be2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016be6:	2b05      	cmp	r3, #5
 8016be8:	d801      	bhi.n	8016bee <__hexdig_fun+0x1a>
 8016bea:	3847      	subs	r0, #71	; 0x47
 8016bec:	e7f7      	b.n	8016bde <__hexdig_fun+0xa>
 8016bee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016bf2:	2b05      	cmp	r3, #5
 8016bf4:	d801      	bhi.n	8016bfa <__hexdig_fun+0x26>
 8016bf6:	3827      	subs	r0, #39	; 0x27
 8016bf8:	e7f1      	b.n	8016bde <__hexdig_fun+0xa>
 8016bfa:	2000      	movs	r0, #0
 8016bfc:	4770      	bx	lr

08016bfe <__gethex>:
 8016bfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c02:	b08b      	sub	sp, #44	; 0x2c
 8016c04:	468a      	mov	sl, r1
 8016c06:	9002      	str	r0, [sp, #8]
 8016c08:	9816      	ldr	r0, [sp, #88]	; 0x58
 8016c0a:	9306      	str	r3, [sp, #24]
 8016c0c:	4690      	mov	r8, r2
 8016c0e:	f000 fadf 	bl	80171d0 <__localeconv_l>
 8016c12:	6803      	ldr	r3, [r0, #0]
 8016c14:	9303      	str	r3, [sp, #12]
 8016c16:	4618      	mov	r0, r3
 8016c18:	f7e9 faf2 	bl	8000200 <strlen>
 8016c1c:	9b03      	ldr	r3, [sp, #12]
 8016c1e:	9001      	str	r0, [sp, #4]
 8016c20:	4403      	add	r3, r0
 8016c22:	f04f 0b00 	mov.w	fp, #0
 8016c26:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8016c2a:	9307      	str	r3, [sp, #28]
 8016c2c:	f8da 3000 	ldr.w	r3, [sl]
 8016c30:	3302      	adds	r3, #2
 8016c32:	461f      	mov	r7, r3
 8016c34:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016c38:	2830      	cmp	r0, #48	; 0x30
 8016c3a:	d06c      	beq.n	8016d16 <__gethex+0x118>
 8016c3c:	f7ff ffca 	bl	8016bd4 <__hexdig_fun>
 8016c40:	4604      	mov	r4, r0
 8016c42:	2800      	cmp	r0, #0
 8016c44:	d16a      	bne.n	8016d1c <__gethex+0x11e>
 8016c46:	9a01      	ldr	r2, [sp, #4]
 8016c48:	9903      	ldr	r1, [sp, #12]
 8016c4a:	4638      	mov	r0, r7
 8016c4c:	f001 fc36 	bl	80184bc <strncmp>
 8016c50:	2800      	cmp	r0, #0
 8016c52:	d166      	bne.n	8016d22 <__gethex+0x124>
 8016c54:	9b01      	ldr	r3, [sp, #4]
 8016c56:	5cf8      	ldrb	r0, [r7, r3]
 8016c58:	18fe      	adds	r6, r7, r3
 8016c5a:	f7ff ffbb 	bl	8016bd4 <__hexdig_fun>
 8016c5e:	2800      	cmp	r0, #0
 8016c60:	d062      	beq.n	8016d28 <__gethex+0x12a>
 8016c62:	4633      	mov	r3, r6
 8016c64:	7818      	ldrb	r0, [r3, #0]
 8016c66:	2830      	cmp	r0, #48	; 0x30
 8016c68:	461f      	mov	r7, r3
 8016c6a:	f103 0301 	add.w	r3, r3, #1
 8016c6e:	d0f9      	beq.n	8016c64 <__gethex+0x66>
 8016c70:	f7ff ffb0 	bl	8016bd4 <__hexdig_fun>
 8016c74:	fab0 f580 	clz	r5, r0
 8016c78:	096d      	lsrs	r5, r5, #5
 8016c7a:	4634      	mov	r4, r6
 8016c7c:	f04f 0b01 	mov.w	fp, #1
 8016c80:	463a      	mov	r2, r7
 8016c82:	4616      	mov	r6, r2
 8016c84:	3201      	adds	r2, #1
 8016c86:	7830      	ldrb	r0, [r6, #0]
 8016c88:	f7ff ffa4 	bl	8016bd4 <__hexdig_fun>
 8016c8c:	2800      	cmp	r0, #0
 8016c8e:	d1f8      	bne.n	8016c82 <__gethex+0x84>
 8016c90:	9a01      	ldr	r2, [sp, #4]
 8016c92:	9903      	ldr	r1, [sp, #12]
 8016c94:	4630      	mov	r0, r6
 8016c96:	f001 fc11 	bl	80184bc <strncmp>
 8016c9a:	b950      	cbnz	r0, 8016cb2 <__gethex+0xb4>
 8016c9c:	b954      	cbnz	r4, 8016cb4 <__gethex+0xb6>
 8016c9e:	9b01      	ldr	r3, [sp, #4]
 8016ca0:	18f4      	adds	r4, r6, r3
 8016ca2:	4622      	mov	r2, r4
 8016ca4:	4616      	mov	r6, r2
 8016ca6:	3201      	adds	r2, #1
 8016ca8:	7830      	ldrb	r0, [r6, #0]
 8016caa:	f7ff ff93 	bl	8016bd4 <__hexdig_fun>
 8016cae:	2800      	cmp	r0, #0
 8016cb0:	d1f8      	bne.n	8016ca4 <__gethex+0xa6>
 8016cb2:	b10c      	cbz	r4, 8016cb8 <__gethex+0xba>
 8016cb4:	1ba4      	subs	r4, r4, r6
 8016cb6:	00a4      	lsls	r4, r4, #2
 8016cb8:	7833      	ldrb	r3, [r6, #0]
 8016cba:	2b50      	cmp	r3, #80	; 0x50
 8016cbc:	d001      	beq.n	8016cc2 <__gethex+0xc4>
 8016cbe:	2b70      	cmp	r3, #112	; 0x70
 8016cc0:	d140      	bne.n	8016d44 <__gethex+0x146>
 8016cc2:	7873      	ldrb	r3, [r6, #1]
 8016cc4:	2b2b      	cmp	r3, #43	; 0x2b
 8016cc6:	d031      	beq.n	8016d2c <__gethex+0x12e>
 8016cc8:	2b2d      	cmp	r3, #45	; 0x2d
 8016cca:	d033      	beq.n	8016d34 <__gethex+0x136>
 8016ccc:	1c71      	adds	r1, r6, #1
 8016cce:	f04f 0900 	mov.w	r9, #0
 8016cd2:	7808      	ldrb	r0, [r1, #0]
 8016cd4:	f7ff ff7e 	bl	8016bd4 <__hexdig_fun>
 8016cd8:	1e43      	subs	r3, r0, #1
 8016cda:	b2db      	uxtb	r3, r3
 8016cdc:	2b18      	cmp	r3, #24
 8016cde:	d831      	bhi.n	8016d44 <__gethex+0x146>
 8016ce0:	f1a0 0210 	sub.w	r2, r0, #16
 8016ce4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016ce8:	f7ff ff74 	bl	8016bd4 <__hexdig_fun>
 8016cec:	1e43      	subs	r3, r0, #1
 8016cee:	b2db      	uxtb	r3, r3
 8016cf0:	2b18      	cmp	r3, #24
 8016cf2:	d922      	bls.n	8016d3a <__gethex+0x13c>
 8016cf4:	f1b9 0f00 	cmp.w	r9, #0
 8016cf8:	d000      	beq.n	8016cfc <__gethex+0xfe>
 8016cfa:	4252      	negs	r2, r2
 8016cfc:	4414      	add	r4, r2
 8016cfe:	f8ca 1000 	str.w	r1, [sl]
 8016d02:	b30d      	cbz	r5, 8016d48 <__gethex+0x14a>
 8016d04:	f1bb 0f00 	cmp.w	fp, #0
 8016d08:	bf0c      	ite	eq
 8016d0a:	2706      	moveq	r7, #6
 8016d0c:	2700      	movne	r7, #0
 8016d0e:	4638      	mov	r0, r7
 8016d10:	b00b      	add	sp, #44	; 0x2c
 8016d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d16:	f10b 0b01 	add.w	fp, fp, #1
 8016d1a:	e78a      	b.n	8016c32 <__gethex+0x34>
 8016d1c:	2500      	movs	r5, #0
 8016d1e:	462c      	mov	r4, r5
 8016d20:	e7ae      	b.n	8016c80 <__gethex+0x82>
 8016d22:	463e      	mov	r6, r7
 8016d24:	2501      	movs	r5, #1
 8016d26:	e7c7      	b.n	8016cb8 <__gethex+0xba>
 8016d28:	4604      	mov	r4, r0
 8016d2a:	e7fb      	b.n	8016d24 <__gethex+0x126>
 8016d2c:	f04f 0900 	mov.w	r9, #0
 8016d30:	1cb1      	adds	r1, r6, #2
 8016d32:	e7ce      	b.n	8016cd2 <__gethex+0xd4>
 8016d34:	f04f 0901 	mov.w	r9, #1
 8016d38:	e7fa      	b.n	8016d30 <__gethex+0x132>
 8016d3a:	230a      	movs	r3, #10
 8016d3c:	fb03 0202 	mla	r2, r3, r2, r0
 8016d40:	3a10      	subs	r2, #16
 8016d42:	e7cf      	b.n	8016ce4 <__gethex+0xe6>
 8016d44:	4631      	mov	r1, r6
 8016d46:	e7da      	b.n	8016cfe <__gethex+0x100>
 8016d48:	1bf3      	subs	r3, r6, r7
 8016d4a:	3b01      	subs	r3, #1
 8016d4c:	4629      	mov	r1, r5
 8016d4e:	2b07      	cmp	r3, #7
 8016d50:	dc49      	bgt.n	8016de6 <__gethex+0x1e8>
 8016d52:	9802      	ldr	r0, [sp, #8]
 8016d54:	f000 fa66 	bl	8017224 <_Balloc>
 8016d58:	9b01      	ldr	r3, [sp, #4]
 8016d5a:	f100 0914 	add.w	r9, r0, #20
 8016d5e:	f04f 0b00 	mov.w	fp, #0
 8016d62:	f1c3 0301 	rsb	r3, r3, #1
 8016d66:	4605      	mov	r5, r0
 8016d68:	f8cd 9010 	str.w	r9, [sp, #16]
 8016d6c:	46da      	mov	sl, fp
 8016d6e:	9308      	str	r3, [sp, #32]
 8016d70:	42b7      	cmp	r7, r6
 8016d72:	d33b      	bcc.n	8016dec <__gethex+0x1ee>
 8016d74:	9804      	ldr	r0, [sp, #16]
 8016d76:	f840 ab04 	str.w	sl, [r0], #4
 8016d7a:	eba0 0009 	sub.w	r0, r0, r9
 8016d7e:	1080      	asrs	r0, r0, #2
 8016d80:	6128      	str	r0, [r5, #16]
 8016d82:	0147      	lsls	r7, r0, #5
 8016d84:	4650      	mov	r0, sl
 8016d86:	f000 fb11 	bl	80173ac <__hi0bits>
 8016d8a:	f8d8 6000 	ldr.w	r6, [r8]
 8016d8e:	1a3f      	subs	r7, r7, r0
 8016d90:	42b7      	cmp	r7, r6
 8016d92:	dd64      	ble.n	8016e5e <__gethex+0x260>
 8016d94:	1bbf      	subs	r7, r7, r6
 8016d96:	4639      	mov	r1, r7
 8016d98:	4628      	mov	r0, r5
 8016d9a:	f000 fe21 	bl	80179e0 <__any_on>
 8016d9e:	4682      	mov	sl, r0
 8016da0:	b178      	cbz	r0, 8016dc2 <__gethex+0x1c4>
 8016da2:	1e7b      	subs	r3, r7, #1
 8016da4:	1159      	asrs	r1, r3, #5
 8016da6:	f003 021f 	and.w	r2, r3, #31
 8016daa:	f04f 0a01 	mov.w	sl, #1
 8016dae:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8016db2:	fa0a f202 	lsl.w	r2, sl, r2
 8016db6:	420a      	tst	r2, r1
 8016db8:	d003      	beq.n	8016dc2 <__gethex+0x1c4>
 8016dba:	4553      	cmp	r3, sl
 8016dbc:	dc46      	bgt.n	8016e4c <__gethex+0x24e>
 8016dbe:	f04f 0a02 	mov.w	sl, #2
 8016dc2:	4639      	mov	r1, r7
 8016dc4:	4628      	mov	r0, r5
 8016dc6:	f7ff fecb 	bl	8016b60 <rshift>
 8016dca:	443c      	add	r4, r7
 8016dcc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016dd0:	42a3      	cmp	r3, r4
 8016dd2:	da52      	bge.n	8016e7a <__gethex+0x27c>
 8016dd4:	4629      	mov	r1, r5
 8016dd6:	9802      	ldr	r0, [sp, #8]
 8016dd8:	f000 fa58 	bl	801728c <_Bfree>
 8016ddc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016dde:	2300      	movs	r3, #0
 8016de0:	6013      	str	r3, [r2, #0]
 8016de2:	27a3      	movs	r7, #163	; 0xa3
 8016de4:	e793      	b.n	8016d0e <__gethex+0x110>
 8016de6:	3101      	adds	r1, #1
 8016de8:	105b      	asrs	r3, r3, #1
 8016dea:	e7b0      	b.n	8016d4e <__gethex+0x150>
 8016dec:	1e73      	subs	r3, r6, #1
 8016dee:	9305      	str	r3, [sp, #20]
 8016df0:	9a07      	ldr	r2, [sp, #28]
 8016df2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016df6:	4293      	cmp	r3, r2
 8016df8:	d018      	beq.n	8016e2c <__gethex+0x22e>
 8016dfa:	f1bb 0f20 	cmp.w	fp, #32
 8016dfe:	d107      	bne.n	8016e10 <__gethex+0x212>
 8016e00:	9b04      	ldr	r3, [sp, #16]
 8016e02:	f8c3 a000 	str.w	sl, [r3]
 8016e06:	3304      	adds	r3, #4
 8016e08:	f04f 0a00 	mov.w	sl, #0
 8016e0c:	9304      	str	r3, [sp, #16]
 8016e0e:	46d3      	mov	fp, sl
 8016e10:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8016e14:	f7ff fede 	bl	8016bd4 <__hexdig_fun>
 8016e18:	f000 000f 	and.w	r0, r0, #15
 8016e1c:	fa00 f00b 	lsl.w	r0, r0, fp
 8016e20:	ea4a 0a00 	orr.w	sl, sl, r0
 8016e24:	f10b 0b04 	add.w	fp, fp, #4
 8016e28:	9b05      	ldr	r3, [sp, #20]
 8016e2a:	e00d      	b.n	8016e48 <__gethex+0x24a>
 8016e2c:	9b05      	ldr	r3, [sp, #20]
 8016e2e:	9a08      	ldr	r2, [sp, #32]
 8016e30:	4413      	add	r3, r2
 8016e32:	42bb      	cmp	r3, r7
 8016e34:	d3e1      	bcc.n	8016dfa <__gethex+0x1fc>
 8016e36:	4618      	mov	r0, r3
 8016e38:	9a01      	ldr	r2, [sp, #4]
 8016e3a:	9903      	ldr	r1, [sp, #12]
 8016e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8016e3e:	f001 fb3d 	bl	80184bc <strncmp>
 8016e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e44:	2800      	cmp	r0, #0
 8016e46:	d1d8      	bne.n	8016dfa <__gethex+0x1fc>
 8016e48:	461e      	mov	r6, r3
 8016e4a:	e791      	b.n	8016d70 <__gethex+0x172>
 8016e4c:	1eb9      	subs	r1, r7, #2
 8016e4e:	4628      	mov	r0, r5
 8016e50:	f000 fdc6 	bl	80179e0 <__any_on>
 8016e54:	2800      	cmp	r0, #0
 8016e56:	d0b2      	beq.n	8016dbe <__gethex+0x1c0>
 8016e58:	f04f 0a03 	mov.w	sl, #3
 8016e5c:	e7b1      	b.n	8016dc2 <__gethex+0x1c4>
 8016e5e:	da09      	bge.n	8016e74 <__gethex+0x276>
 8016e60:	1bf7      	subs	r7, r6, r7
 8016e62:	4629      	mov	r1, r5
 8016e64:	463a      	mov	r2, r7
 8016e66:	9802      	ldr	r0, [sp, #8]
 8016e68:	f000 fbdc 	bl	8017624 <__lshift>
 8016e6c:	1be4      	subs	r4, r4, r7
 8016e6e:	4605      	mov	r5, r0
 8016e70:	f100 0914 	add.w	r9, r0, #20
 8016e74:	f04f 0a00 	mov.w	sl, #0
 8016e78:	e7a8      	b.n	8016dcc <__gethex+0x1ce>
 8016e7a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016e7e:	42a0      	cmp	r0, r4
 8016e80:	dd6a      	ble.n	8016f58 <__gethex+0x35a>
 8016e82:	1b04      	subs	r4, r0, r4
 8016e84:	42a6      	cmp	r6, r4
 8016e86:	dc2e      	bgt.n	8016ee6 <__gethex+0x2e8>
 8016e88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016e8c:	2b02      	cmp	r3, #2
 8016e8e:	d022      	beq.n	8016ed6 <__gethex+0x2d8>
 8016e90:	2b03      	cmp	r3, #3
 8016e92:	d024      	beq.n	8016ede <__gethex+0x2e0>
 8016e94:	2b01      	cmp	r3, #1
 8016e96:	d115      	bne.n	8016ec4 <__gethex+0x2c6>
 8016e98:	42a6      	cmp	r6, r4
 8016e9a:	d113      	bne.n	8016ec4 <__gethex+0x2c6>
 8016e9c:	2e01      	cmp	r6, #1
 8016e9e:	dc0b      	bgt.n	8016eb8 <__gethex+0x2ba>
 8016ea0:	9a06      	ldr	r2, [sp, #24]
 8016ea2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016ea6:	6013      	str	r3, [r2, #0]
 8016ea8:	2301      	movs	r3, #1
 8016eaa:	612b      	str	r3, [r5, #16]
 8016eac:	f8c9 3000 	str.w	r3, [r9]
 8016eb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016eb2:	2762      	movs	r7, #98	; 0x62
 8016eb4:	601d      	str	r5, [r3, #0]
 8016eb6:	e72a      	b.n	8016d0e <__gethex+0x110>
 8016eb8:	1e71      	subs	r1, r6, #1
 8016eba:	4628      	mov	r0, r5
 8016ebc:	f000 fd90 	bl	80179e0 <__any_on>
 8016ec0:	2800      	cmp	r0, #0
 8016ec2:	d1ed      	bne.n	8016ea0 <__gethex+0x2a2>
 8016ec4:	4629      	mov	r1, r5
 8016ec6:	9802      	ldr	r0, [sp, #8]
 8016ec8:	f000 f9e0 	bl	801728c <_Bfree>
 8016ecc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016ece:	2300      	movs	r3, #0
 8016ed0:	6013      	str	r3, [r2, #0]
 8016ed2:	2750      	movs	r7, #80	; 0x50
 8016ed4:	e71b      	b.n	8016d0e <__gethex+0x110>
 8016ed6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d0e1      	beq.n	8016ea0 <__gethex+0x2a2>
 8016edc:	e7f2      	b.n	8016ec4 <__gethex+0x2c6>
 8016ede:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d1dd      	bne.n	8016ea0 <__gethex+0x2a2>
 8016ee4:	e7ee      	b.n	8016ec4 <__gethex+0x2c6>
 8016ee6:	1e67      	subs	r7, r4, #1
 8016ee8:	f1ba 0f00 	cmp.w	sl, #0
 8016eec:	d131      	bne.n	8016f52 <__gethex+0x354>
 8016eee:	b127      	cbz	r7, 8016efa <__gethex+0x2fc>
 8016ef0:	4639      	mov	r1, r7
 8016ef2:	4628      	mov	r0, r5
 8016ef4:	f000 fd74 	bl	80179e0 <__any_on>
 8016ef8:	4682      	mov	sl, r0
 8016efa:	117a      	asrs	r2, r7, #5
 8016efc:	2301      	movs	r3, #1
 8016efe:	f007 071f 	and.w	r7, r7, #31
 8016f02:	fa03 f707 	lsl.w	r7, r3, r7
 8016f06:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8016f0a:	4621      	mov	r1, r4
 8016f0c:	421f      	tst	r7, r3
 8016f0e:	4628      	mov	r0, r5
 8016f10:	bf18      	it	ne
 8016f12:	f04a 0a02 	orrne.w	sl, sl, #2
 8016f16:	1b36      	subs	r6, r6, r4
 8016f18:	f7ff fe22 	bl	8016b60 <rshift>
 8016f1c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8016f20:	2702      	movs	r7, #2
 8016f22:	f1ba 0f00 	cmp.w	sl, #0
 8016f26:	d048      	beq.n	8016fba <__gethex+0x3bc>
 8016f28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016f2c:	2b02      	cmp	r3, #2
 8016f2e:	d015      	beq.n	8016f5c <__gethex+0x35e>
 8016f30:	2b03      	cmp	r3, #3
 8016f32:	d017      	beq.n	8016f64 <__gethex+0x366>
 8016f34:	2b01      	cmp	r3, #1
 8016f36:	d109      	bne.n	8016f4c <__gethex+0x34e>
 8016f38:	f01a 0f02 	tst.w	sl, #2
 8016f3c:	d006      	beq.n	8016f4c <__gethex+0x34e>
 8016f3e:	f8d9 3000 	ldr.w	r3, [r9]
 8016f42:	ea4a 0a03 	orr.w	sl, sl, r3
 8016f46:	f01a 0f01 	tst.w	sl, #1
 8016f4a:	d10e      	bne.n	8016f6a <__gethex+0x36c>
 8016f4c:	f047 0710 	orr.w	r7, r7, #16
 8016f50:	e033      	b.n	8016fba <__gethex+0x3bc>
 8016f52:	f04f 0a01 	mov.w	sl, #1
 8016f56:	e7d0      	b.n	8016efa <__gethex+0x2fc>
 8016f58:	2701      	movs	r7, #1
 8016f5a:	e7e2      	b.n	8016f22 <__gethex+0x324>
 8016f5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016f5e:	f1c3 0301 	rsb	r3, r3, #1
 8016f62:	9315      	str	r3, [sp, #84]	; 0x54
 8016f64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d0f0      	beq.n	8016f4c <__gethex+0x34e>
 8016f6a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8016f6e:	f105 0314 	add.w	r3, r5, #20
 8016f72:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8016f76:	eb03 010a 	add.w	r1, r3, sl
 8016f7a:	f04f 0c00 	mov.w	ip, #0
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f84:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016f88:	d01c      	beq.n	8016fc4 <__gethex+0x3c6>
 8016f8a:	3201      	adds	r2, #1
 8016f8c:	6002      	str	r2, [r0, #0]
 8016f8e:	2f02      	cmp	r7, #2
 8016f90:	f105 0314 	add.w	r3, r5, #20
 8016f94:	d138      	bne.n	8017008 <__gethex+0x40a>
 8016f96:	f8d8 2000 	ldr.w	r2, [r8]
 8016f9a:	3a01      	subs	r2, #1
 8016f9c:	42b2      	cmp	r2, r6
 8016f9e:	d10a      	bne.n	8016fb6 <__gethex+0x3b8>
 8016fa0:	1171      	asrs	r1, r6, #5
 8016fa2:	2201      	movs	r2, #1
 8016fa4:	f006 061f 	and.w	r6, r6, #31
 8016fa8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016fac:	fa02 f606 	lsl.w	r6, r2, r6
 8016fb0:	421e      	tst	r6, r3
 8016fb2:	bf18      	it	ne
 8016fb4:	4617      	movne	r7, r2
 8016fb6:	f047 0720 	orr.w	r7, r7, #32
 8016fba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016fbc:	601d      	str	r5, [r3, #0]
 8016fbe:	9b06      	ldr	r3, [sp, #24]
 8016fc0:	601c      	str	r4, [r3, #0]
 8016fc2:	e6a4      	b.n	8016d0e <__gethex+0x110>
 8016fc4:	4299      	cmp	r1, r3
 8016fc6:	f843 cc04 	str.w	ip, [r3, #-4]
 8016fca:	d8d8      	bhi.n	8016f7e <__gethex+0x380>
 8016fcc:	68ab      	ldr	r3, [r5, #8]
 8016fce:	4599      	cmp	r9, r3
 8016fd0:	db12      	blt.n	8016ff8 <__gethex+0x3fa>
 8016fd2:	6869      	ldr	r1, [r5, #4]
 8016fd4:	9802      	ldr	r0, [sp, #8]
 8016fd6:	3101      	adds	r1, #1
 8016fd8:	f000 f924 	bl	8017224 <_Balloc>
 8016fdc:	692a      	ldr	r2, [r5, #16]
 8016fde:	3202      	adds	r2, #2
 8016fe0:	f105 010c 	add.w	r1, r5, #12
 8016fe4:	4683      	mov	fp, r0
 8016fe6:	0092      	lsls	r2, r2, #2
 8016fe8:	300c      	adds	r0, #12
 8016fea:	f7fd f9c5 	bl	8014378 <memcpy>
 8016fee:	4629      	mov	r1, r5
 8016ff0:	9802      	ldr	r0, [sp, #8]
 8016ff2:	f000 f94b 	bl	801728c <_Bfree>
 8016ff6:	465d      	mov	r5, fp
 8016ff8:	692b      	ldr	r3, [r5, #16]
 8016ffa:	1c5a      	adds	r2, r3, #1
 8016ffc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8017000:	612a      	str	r2, [r5, #16]
 8017002:	2201      	movs	r2, #1
 8017004:	615a      	str	r2, [r3, #20]
 8017006:	e7c2      	b.n	8016f8e <__gethex+0x390>
 8017008:	692a      	ldr	r2, [r5, #16]
 801700a:	454a      	cmp	r2, r9
 801700c:	dd0b      	ble.n	8017026 <__gethex+0x428>
 801700e:	2101      	movs	r1, #1
 8017010:	4628      	mov	r0, r5
 8017012:	f7ff fda5 	bl	8016b60 <rshift>
 8017016:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801701a:	3401      	adds	r4, #1
 801701c:	42a3      	cmp	r3, r4
 801701e:	f6ff aed9 	blt.w	8016dd4 <__gethex+0x1d6>
 8017022:	2701      	movs	r7, #1
 8017024:	e7c7      	b.n	8016fb6 <__gethex+0x3b8>
 8017026:	f016 061f 	ands.w	r6, r6, #31
 801702a:	d0fa      	beq.n	8017022 <__gethex+0x424>
 801702c:	449a      	add	sl, r3
 801702e:	f1c6 0620 	rsb	r6, r6, #32
 8017032:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8017036:	f000 f9b9 	bl	80173ac <__hi0bits>
 801703a:	42b0      	cmp	r0, r6
 801703c:	dbe7      	blt.n	801700e <__gethex+0x410>
 801703e:	e7f0      	b.n	8017022 <__gethex+0x424>

08017040 <L_shift>:
 8017040:	f1c2 0208 	rsb	r2, r2, #8
 8017044:	0092      	lsls	r2, r2, #2
 8017046:	b570      	push	{r4, r5, r6, lr}
 8017048:	f1c2 0620 	rsb	r6, r2, #32
 801704c:	6843      	ldr	r3, [r0, #4]
 801704e:	6804      	ldr	r4, [r0, #0]
 8017050:	fa03 f506 	lsl.w	r5, r3, r6
 8017054:	432c      	orrs	r4, r5
 8017056:	40d3      	lsrs	r3, r2
 8017058:	6004      	str	r4, [r0, #0]
 801705a:	f840 3f04 	str.w	r3, [r0, #4]!
 801705e:	4288      	cmp	r0, r1
 8017060:	d3f4      	bcc.n	801704c <L_shift+0xc>
 8017062:	bd70      	pop	{r4, r5, r6, pc}

08017064 <__match>:
 8017064:	b530      	push	{r4, r5, lr}
 8017066:	6803      	ldr	r3, [r0, #0]
 8017068:	3301      	adds	r3, #1
 801706a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801706e:	b914      	cbnz	r4, 8017076 <__match+0x12>
 8017070:	6003      	str	r3, [r0, #0]
 8017072:	2001      	movs	r0, #1
 8017074:	bd30      	pop	{r4, r5, pc}
 8017076:	f813 2b01 	ldrb.w	r2, [r3], #1
 801707a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801707e:	2d19      	cmp	r5, #25
 8017080:	bf98      	it	ls
 8017082:	3220      	addls	r2, #32
 8017084:	42a2      	cmp	r2, r4
 8017086:	d0f0      	beq.n	801706a <__match+0x6>
 8017088:	2000      	movs	r0, #0
 801708a:	e7f3      	b.n	8017074 <__match+0x10>

0801708c <__hexnan>:
 801708c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017090:	680b      	ldr	r3, [r1, #0]
 8017092:	6801      	ldr	r1, [r0, #0]
 8017094:	115f      	asrs	r7, r3, #5
 8017096:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801709a:	f013 031f 	ands.w	r3, r3, #31
 801709e:	b087      	sub	sp, #28
 80170a0:	bf18      	it	ne
 80170a2:	3704      	addne	r7, #4
 80170a4:	2500      	movs	r5, #0
 80170a6:	1f3e      	subs	r6, r7, #4
 80170a8:	4682      	mov	sl, r0
 80170aa:	4690      	mov	r8, r2
 80170ac:	9301      	str	r3, [sp, #4]
 80170ae:	f847 5c04 	str.w	r5, [r7, #-4]
 80170b2:	46b1      	mov	r9, r6
 80170b4:	4634      	mov	r4, r6
 80170b6:	9502      	str	r5, [sp, #8]
 80170b8:	46ab      	mov	fp, r5
 80170ba:	784a      	ldrb	r2, [r1, #1]
 80170bc:	1c4b      	adds	r3, r1, #1
 80170be:	9303      	str	r3, [sp, #12]
 80170c0:	b342      	cbz	r2, 8017114 <__hexnan+0x88>
 80170c2:	4610      	mov	r0, r2
 80170c4:	9105      	str	r1, [sp, #20]
 80170c6:	9204      	str	r2, [sp, #16]
 80170c8:	f7ff fd84 	bl	8016bd4 <__hexdig_fun>
 80170cc:	2800      	cmp	r0, #0
 80170ce:	d143      	bne.n	8017158 <__hexnan+0xcc>
 80170d0:	9a04      	ldr	r2, [sp, #16]
 80170d2:	9905      	ldr	r1, [sp, #20]
 80170d4:	2a20      	cmp	r2, #32
 80170d6:	d818      	bhi.n	801710a <__hexnan+0x7e>
 80170d8:	9b02      	ldr	r3, [sp, #8]
 80170da:	459b      	cmp	fp, r3
 80170dc:	dd13      	ble.n	8017106 <__hexnan+0x7a>
 80170de:	454c      	cmp	r4, r9
 80170e0:	d206      	bcs.n	80170f0 <__hexnan+0x64>
 80170e2:	2d07      	cmp	r5, #7
 80170e4:	dc04      	bgt.n	80170f0 <__hexnan+0x64>
 80170e6:	462a      	mov	r2, r5
 80170e8:	4649      	mov	r1, r9
 80170ea:	4620      	mov	r0, r4
 80170ec:	f7ff ffa8 	bl	8017040 <L_shift>
 80170f0:	4544      	cmp	r4, r8
 80170f2:	d944      	bls.n	801717e <__hexnan+0xf2>
 80170f4:	2300      	movs	r3, #0
 80170f6:	f1a4 0904 	sub.w	r9, r4, #4
 80170fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80170fe:	f8cd b008 	str.w	fp, [sp, #8]
 8017102:	464c      	mov	r4, r9
 8017104:	461d      	mov	r5, r3
 8017106:	9903      	ldr	r1, [sp, #12]
 8017108:	e7d7      	b.n	80170ba <__hexnan+0x2e>
 801710a:	2a29      	cmp	r2, #41	; 0x29
 801710c:	d14a      	bne.n	80171a4 <__hexnan+0x118>
 801710e:	3102      	adds	r1, #2
 8017110:	f8ca 1000 	str.w	r1, [sl]
 8017114:	f1bb 0f00 	cmp.w	fp, #0
 8017118:	d044      	beq.n	80171a4 <__hexnan+0x118>
 801711a:	454c      	cmp	r4, r9
 801711c:	d206      	bcs.n	801712c <__hexnan+0xa0>
 801711e:	2d07      	cmp	r5, #7
 8017120:	dc04      	bgt.n	801712c <__hexnan+0xa0>
 8017122:	462a      	mov	r2, r5
 8017124:	4649      	mov	r1, r9
 8017126:	4620      	mov	r0, r4
 8017128:	f7ff ff8a 	bl	8017040 <L_shift>
 801712c:	4544      	cmp	r4, r8
 801712e:	d928      	bls.n	8017182 <__hexnan+0xf6>
 8017130:	4643      	mov	r3, r8
 8017132:	f854 2b04 	ldr.w	r2, [r4], #4
 8017136:	f843 2b04 	str.w	r2, [r3], #4
 801713a:	42a6      	cmp	r6, r4
 801713c:	d2f9      	bcs.n	8017132 <__hexnan+0xa6>
 801713e:	2200      	movs	r2, #0
 8017140:	f843 2b04 	str.w	r2, [r3], #4
 8017144:	429e      	cmp	r6, r3
 8017146:	d2fb      	bcs.n	8017140 <__hexnan+0xb4>
 8017148:	6833      	ldr	r3, [r6, #0]
 801714a:	b91b      	cbnz	r3, 8017154 <__hexnan+0xc8>
 801714c:	4546      	cmp	r6, r8
 801714e:	d127      	bne.n	80171a0 <__hexnan+0x114>
 8017150:	2301      	movs	r3, #1
 8017152:	6033      	str	r3, [r6, #0]
 8017154:	2005      	movs	r0, #5
 8017156:	e026      	b.n	80171a6 <__hexnan+0x11a>
 8017158:	3501      	adds	r5, #1
 801715a:	2d08      	cmp	r5, #8
 801715c:	f10b 0b01 	add.w	fp, fp, #1
 8017160:	dd06      	ble.n	8017170 <__hexnan+0xe4>
 8017162:	4544      	cmp	r4, r8
 8017164:	d9cf      	bls.n	8017106 <__hexnan+0x7a>
 8017166:	2300      	movs	r3, #0
 8017168:	f844 3c04 	str.w	r3, [r4, #-4]
 801716c:	2501      	movs	r5, #1
 801716e:	3c04      	subs	r4, #4
 8017170:	6822      	ldr	r2, [r4, #0]
 8017172:	f000 000f 	and.w	r0, r0, #15
 8017176:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801717a:	6020      	str	r0, [r4, #0]
 801717c:	e7c3      	b.n	8017106 <__hexnan+0x7a>
 801717e:	2508      	movs	r5, #8
 8017180:	e7c1      	b.n	8017106 <__hexnan+0x7a>
 8017182:	9b01      	ldr	r3, [sp, #4]
 8017184:	2b00      	cmp	r3, #0
 8017186:	d0df      	beq.n	8017148 <__hexnan+0xbc>
 8017188:	f04f 32ff 	mov.w	r2, #4294967295
 801718c:	f1c3 0320 	rsb	r3, r3, #32
 8017190:	fa22 f303 	lsr.w	r3, r2, r3
 8017194:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017198:	401a      	ands	r2, r3
 801719a:	f847 2c04 	str.w	r2, [r7, #-4]
 801719e:	e7d3      	b.n	8017148 <__hexnan+0xbc>
 80171a0:	3e04      	subs	r6, #4
 80171a2:	e7d1      	b.n	8017148 <__hexnan+0xbc>
 80171a4:	2004      	movs	r0, #4
 80171a6:	b007      	add	sp, #28
 80171a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080171ac <__locale_ctype_ptr_l>:
 80171ac:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80171b0:	4770      	bx	lr
	...

080171b4 <__locale_ctype_ptr>:
 80171b4:	4b04      	ldr	r3, [pc, #16]	; (80171c8 <__locale_ctype_ptr+0x14>)
 80171b6:	4a05      	ldr	r2, [pc, #20]	; (80171cc <__locale_ctype_ptr+0x18>)
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	6a1b      	ldr	r3, [r3, #32]
 80171bc:	2b00      	cmp	r3, #0
 80171be:	bf08      	it	eq
 80171c0:	4613      	moveq	r3, r2
 80171c2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80171c6:	4770      	bx	lr
 80171c8:	2000000c 	.word	0x2000000c
 80171cc:	20000070 	.word	0x20000070

080171d0 <__localeconv_l>:
 80171d0:	30f0      	adds	r0, #240	; 0xf0
 80171d2:	4770      	bx	lr

080171d4 <_localeconv_r>:
 80171d4:	4b04      	ldr	r3, [pc, #16]	; (80171e8 <_localeconv_r+0x14>)
 80171d6:	681b      	ldr	r3, [r3, #0]
 80171d8:	6a18      	ldr	r0, [r3, #32]
 80171da:	4b04      	ldr	r3, [pc, #16]	; (80171ec <_localeconv_r+0x18>)
 80171dc:	2800      	cmp	r0, #0
 80171de:	bf08      	it	eq
 80171e0:	4618      	moveq	r0, r3
 80171e2:	30f0      	adds	r0, #240	; 0xf0
 80171e4:	4770      	bx	lr
 80171e6:	bf00      	nop
 80171e8:	2000000c 	.word	0x2000000c
 80171ec:	20000070 	.word	0x20000070

080171f0 <malloc>:
 80171f0:	4b02      	ldr	r3, [pc, #8]	; (80171fc <malloc+0xc>)
 80171f2:	4601      	mov	r1, r0
 80171f4:	6818      	ldr	r0, [r3, #0]
 80171f6:	f000 bc71 	b.w	8017adc <_malloc_r>
 80171fa:	bf00      	nop
 80171fc:	2000000c 	.word	0x2000000c

08017200 <__ascii_mbtowc>:
 8017200:	b082      	sub	sp, #8
 8017202:	b901      	cbnz	r1, 8017206 <__ascii_mbtowc+0x6>
 8017204:	a901      	add	r1, sp, #4
 8017206:	b142      	cbz	r2, 801721a <__ascii_mbtowc+0x1a>
 8017208:	b14b      	cbz	r3, 801721e <__ascii_mbtowc+0x1e>
 801720a:	7813      	ldrb	r3, [r2, #0]
 801720c:	600b      	str	r3, [r1, #0]
 801720e:	7812      	ldrb	r2, [r2, #0]
 8017210:	1c10      	adds	r0, r2, #0
 8017212:	bf18      	it	ne
 8017214:	2001      	movne	r0, #1
 8017216:	b002      	add	sp, #8
 8017218:	4770      	bx	lr
 801721a:	4610      	mov	r0, r2
 801721c:	e7fb      	b.n	8017216 <__ascii_mbtowc+0x16>
 801721e:	f06f 0001 	mvn.w	r0, #1
 8017222:	e7f8      	b.n	8017216 <__ascii_mbtowc+0x16>

08017224 <_Balloc>:
 8017224:	b570      	push	{r4, r5, r6, lr}
 8017226:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017228:	4604      	mov	r4, r0
 801722a:	460e      	mov	r6, r1
 801722c:	b93d      	cbnz	r5, 801723e <_Balloc+0x1a>
 801722e:	2010      	movs	r0, #16
 8017230:	f7ff ffde 	bl	80171f0 <malloc>
 8017234:	6260      	str	r0, [r4, #36]	; 0x24
 8017236:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801723a:	6005      	str	r5, [r0, #0]
 801723c:	60c5      	str	r5, [r0, #12]
 801723e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017240:	68eb      	ldr	r3, [r5, #12]
 8017242:	b183      	cbz	r3, 8017266 <_Balloc+0x42>
 8017244:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017246:	68db      	ldr	r3, [r3, #12]
 8017248:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801724c:	b9b8      	cbnz	r0, 801727e <_Balloc+0x5a>
 801724e:	2101      	movs	r1, #1
 8017250:	fa01 f506 	lsl.w	r5, r1, r6
 8017254:	1d6a      	adds	r2, r5, #5
 8017256:	0092      	lsls	r2, r2, #2
 8017258:	4620      	mov	r0, r4
 801725a:	f000 fbe2 	bl	8017a22 <_calloc_r>
 801725e:	b160      	cbz	r0, 801727a <_Balloc+0x56>
 8017260:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8017264:	e00e      	b.n	8017284 <_Balloc+0x60>
 8017266:	2221      	movs	r2, #33	; 0x21
 8017268:	2104      	movs	r1, #4
 801726a:	4620      	mov	r0, r4
 801726c:	f000 fbd9 	bl	8017a22 <_calloc_r>
 8017270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017272:	60e8      	str	r0, [r5, #12]
 8017274:	68db      	ldr	r3, [r3, #12]
 8017276:	2b00      	cmp	r3, #0
 8017278:	d1e4      	bne.n	8017244 <_Balloc+0x20>
 801727a:	2000      	movs	r0, #0
 801727c:	bd70      	pop	{r4, r5, r6, pc}
 801727e:	6802      	ldr	r2, [r0, #0]
 8017280:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8017284:	2300      	movs	r3, #0
 8017286:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801728a:	e7f7      	b.n	801727c <_Balloc+0x58>

0801728c <_Bfree>:
 801728c:	b570      	push	{r4, r5, r6, lr}
 801728e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017290:	4606      	mov	r6, r0
 8017292:	460d      	mov	r5, r1
 8017294:	b93c      	cbnz	r4, 80172a6 <_Bfree+0x1a>
 8017296:	2010      	movs	r0, #16
 8017298:	f7ff ffaa 	bl	80171f0 <malloc>
 801729c:	6270      	str	r0, [r6, #36]	; 0x24
 801729e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80172a2:	6004      	str	r4, [r0, #0]
 80172a4:	60c4      	str	r4, [r0, #12]
 80172a6:	b13d      	cbz	r5, 80172b8 <_Bfree+0x2c>
 80172a8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80172aa:	686a      	ldr	r2, [r5, #4]
 80172ac:	68db      	ldr	r3, [r3, #12]
 80172ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80172b2:	6029      	str	r1, [r5, #0]
 80172b4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80172b8:	bd70      	pop	{r4, r5, r6, pc}

080172ba <__multadd>:
 80172ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172be:	690d      	ldr	r5, [r1, #16]
 80172c0:	461f      	mov	r7, r3
 80172c2:	4606      	mov	r6, r0
 80172c4:	460c      	mov	r4, r1
 80172c6:	f101 0c14 	add.w	ip, r1, #20
 80172ca:	2300      	movs	r3, #0
 80172cc:	f8dc 0000 	ldr.w	r0, [ip]
 80172d0:	b281      	uxth	r1, r0
 80172d2:	fb02 7101 	mla	r1, r2, r1, r7
 80172d6:	0c0f      	lsrs	r7, r1, #16
 80172d8:	0c00      	lsrs	r0, r0, #16
 80172da:	fb02 7000 	mla	r0, r2, r0, r7
 80172de:	b289      	uxth	r1, r1
 80172e0:	3301      	adds	r3, #1
 80172e2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80172e6:	429d      	cmp	r5, r3
 80172e8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80172ec:	f84c 1b04 	str.w	r1, [ip], #4
 80172f0:	dcec      	bgt.n	80172cc <__multadd+0x12>
 80172f2:	b1d7      	cbz	r7, 801732a <__multadd+0x70>
 80172f4:	68a3      	ldr	r3, [r4, #8]
 80172f6:	42ab      	cmp	r3, r5
 80172f8:	dc12      	bgt.n	8017320 <__multadd+0x66>
 80172fa:	6861      	ldr	r1, [r4, #4]
 80172fc:	4630      	mov	r0, r6
 80172fe:	3101      	adds	r1, #1
 8017300:	f7ff ff90 	bl	8017224 <_Balloc>
 8017304:	6922      	ldr	r2, [r4, #16]
 8017306:	3202      	adds	r2, #2
 8017308:	f104 010c 	add.w	r1, r4, #12
 801730c:	4680      	mov	r8, r0
 801730e:	0092      	lsls	r2, r2, #2
 8017310:	300c      	adds	r0, #12
 8017312:	f7fd f831 	bl	8014378 <memcpy>
 8017316:	4621      	mov	r1, r4
 8017318:	4630      	mov	r0, r6
 801731a:	f7ff ffb7 	bl	801728c <_Bfree>
 801731e:	4644      	mov	r4, r8
 8017320:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017324:	3501      	adds	r5, #1
 8017326:	615f      	str	r7, [r3, #20]
 8017328:	6125      	str	r5, [r4, #16]
 801732a:	4620      	mov	r0, r4
 801732c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017330 <__s2b>:
 8017330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017334:	460c      	mov	r4, r1
 8017336:	4615      	mov	r5, r2
 8017338:	461f      	mov	r7, r3
 801733a:	2209      	movs	r2, #9
 801733c:	3308      	adds	r3, #8
 801733e:	4606      	mov	r6, r0
 8017340:	fb93 f3f2 	sdiv	r3, r3, r2
 8017344:	2100      	movs	r1, #0
 8017346:	2201      	movs	r2, #1
 8017348:	429a      	cmp	r2, r3
 801734a:	db20      	blt.n	801738e <__s2b+0x5e>
 801734c:	4630      	mov	r0, r6
 801734e:	f7ff ff69 	bl	8017224 <_Balloc>
 8017352:	9b08      	ldr	r3, [sp, #32]
 8017354:	6143      	str	r3, [r0, #20]
 8017356:	2d09      	cmp	r5, #9
 8017358:	f04f 0301 	mov.w	r3, #1
 801735c:	6103      	str	r3, [r0, #16]
 801735e:	dd19      	ble.n	8017394 <__s2b+0x64>
 8017360:	f104 0809 	add.w	r8, r4, #9
 8017364:	46c1      	mov	r9, r8
 8017366:	442c      	add	r4, r5
 8017368:	f819 3b01 	ldrb.w	r3, [r9], #1
 801736c:	4601      	mov	r1, r0
 801736e:	3b30      	subs	r3, #48	; 0x30
 8017370:	220a      	movs	r2, #10
 8017372:	4630      	mov	r0, r6
 8017374:	f7ff ffa1 	bl	80172ba <__multadd>
 8017378:	45a1      	cmp	r9, r4
 801737a:	d1f5      	bne.n	8017368 <__s2b+0x38>
 801737c:	eb08 0405 	add.w	r4, r8, r5
 8017380:	3c08      	subs	r4, #8
 8017382:	1b2d      	subs	r5, r5, r4
 8017384:	1963      	adds	r3, r4, r5
 8017386:	42bb      	cmp	r3, r7
 8017388:	db07      	blt.n	801739a <__s2b+0x6a>
 801738a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801738e:	0052      	lsls	r2, r2, #1
 8017390:	3101      	adds	r1, #1
 8017392:	e7d9      	b.n	8017348 <__s2b+0x18>
 8017394:	340a      	adds	r4, #10
 8017396:	2509      	movs	r5, #9
 8017398:	e7f3      	b.n	8017382 <__s2b+0x52>
 801739a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801739e:	4601      	mov	r1, r0
 80173a0:	3b30      	subs	r3, #48	; 0x30
 80173a2:	220a      	movs	r2, #10
 80173a4:	4630      	mov	r0, r6
 80173a6:	f7ff ff88 	bl	80172ba <__multadd>
 80173aa:	e7eb      	b.n	8017384 <__s2b+0x54>

080173ac <__hi0bits>:
 80173ac:	0c02      	lsrs	r2, r0, #16
 80173ae:	0412      	lsls	r2, r2, #16
 80173b0:	4603      	mov	r3, r0
 80173b2:	b9b2      	cbnz	r2, 80173e2 <__hi0bits+0x36>
 80173b4:	0403      	lsls	r3, r0, #16
 80173b6:	2010      	movs	r0, #16
 80173b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80173bc:	bf04      	itt	eq
 80173be:	021b      	lsleq	r3, r3, #8
 80173c0:	3008      	addeq	r0, #8
 80173c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80173c6:	bf04      	itt	eq
 80173c8:	011b      	lsleq	r3, r3, #4
 80173ca:	3004      	addeq	r0, #4
 80173cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80173d0:	bf04      	itt	eq
 80173d2:	009b      	lsleq	r3, r3, #2
 80173d4:	3002      	addeq	r0, #2
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	db06      	blt.n	80173e8 <__hi0bits+0x3c>
 80173da:	005b      	lsls	r3, r3, #1
 80173dc:	d503      	bpl.n	80173e6 <__hi0bits+0x3a>
 80173de:	3001      	adds	r0, #1
 80173e0:	4770      	bx	lr
 80173e2:	2000      	movs	r0, #0
 80173e4:	e7e8      	b.n	80173b8 <__hi0bits+0xc>
 80173e6:	2020      	movs	r0, #32
 80173e8:	4770      	bx	lr

080173ea <__lo0bits>:
 80173ea:	6803      	ldr	r3, [r0, #0]
 80173ec:	f013 0207 	ands.w	r2, r3, #7
 80173f0:	4601      	mov	r1, r0
 80173f2:	d00b      	beq.n	801740c <__lo0bits+0x22>
 80173f4:	07da      	lsls	r2, r3, #31
 80173f6:	d423      	bmi.n	8017440 <__lo0bits+0x56>
 80173f8:	0798      	lsls	r0, r3, #30
 80173fa:	bf49      	itett	mi
 80173fc:	085b      	lsrmi	r3, r3, #1
 80173fe:	089b      	lsrpl	r3, r3, #2
 8017400:	2001      	movmi	r0, #1
 8017402:	600b      	strmi	r3, [r1, #0]
 8017404:	bf5c      	itt	pl
 8017406:	600b      	strpl	r3, [r1, #0]
 8017408:	2002      	movpl	r0, #2
 801740a:	4770      	bx	lr
 801740c:	b298      	uxth	r0, r3
 801740e:	b9a8      	cbnz	r0, 801743c <__lo0bits+0x52>
 8017410:	0c1b      	lsrs	r3, r3, #16
 8017412:	2010      	movs	r0, #16
 8017414:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017418:	bf04      	itt	eq
 801741a:	0a1b      	lsreq	r3, r3, #8
 801741c:	3008      	addeq	r0, #8
 801741e:	071a      	lsls	r2, r3, #28
 8017420:	bf04      	itt	eq
 8017422:	091b      	lsreq	r3, r3, #4
 8017424:	3004      	addeq	r0, #4
 8017426:	079a      	lsls	r2, r3, #30
 8017428:	bf04      	itt	eq
 801742a:	089b      	lsreq	r3, r3, #2
 801742c:	3002      	addeq	r0, #2
 801742e:	07da      	lsls	r2, r3, #31
 8017430:	d402      	bmi.n	8017438 <__lo0bits+0x4e>
 8017432:	085b      	lsrs	r3, r3, #1
 8017434:	d006      	beq.n	8017444 <__lo0bits+0x5a>
 8017436:	3001      	adds	r0, #1
 8017438:	600b      	str	r3, [r1, #0]
 801743a:	4770      	bx	lr
 801743c:	4610      	mov	r0, r2
 801743e:	e7e9      	b.n	8017414 <__lo0bits+0x2a>
 8017440:	2000      	movs	r0, #0
 8017442:	4770      	bx	lr
 8017444:	2020      	movs	r0, #32
 8017446:	4770      	bx	lr

08017448 <__i2b>:
 8017448:	b510      	push	{r4, lr}
 801744a:	460c      	mov	r4, r1
 801744c:	2101      	movs	r1, #1
 801744e:	f7ff fee9 	bl	8017224 <_Balloc>
 8017452:	2201      	movs	r2, #1
 8017454:	6144      	str	r4, [r0, #20]
 8017456:	6102      	str	r2, [r0, #16]
 8017458:	bd10      	pop	{r4, pc}

0801745a <__multiply>:
 801745a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801745e:	4614      	mov	r4, r2
 8017460:	690a      	ldr	r2, [r1, #16]
 8017462:	6923      	ldr	r3, [r4, #16]
 8017464:	429a      	cmp	r2, r3
 8017466:	bfb8      	it	lt
 8017468:	460b      	movlt	r3, r1
 801746a:	4688      	mov	r8, r1
 801746c:	bfbc      	itt	lt
 801746e:	46a0      	movlt	r8, r4
 8017470:	461c      	movlt	r4, r3
 8017472:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017476:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801747a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801747e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017482:	eb07 0609 	add.w	r6, r7, r9
 8017486:	42b3      	cmp	r3, r6
 8017488:	bfb8      	it	lt
 801748a:	3101      	addlt	r1, #1
 801748c:	f7ff feca 	bl	8017224 <_Balloc>
 8017490:	f100 0514 	add.w	r5, r0, #20
 8017494:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8017498:	462b      	mov	r3, r5
 801749a:	2200      	movs	r2, #0
 801749c:	4573      	cmp	r3, lr
 801749e:	d316      	bcc.n	80174ce <__multiply+0x74>
 80174a0:	f104 0214 	add.w	r2, r4, #20
 80174a4:	f108 0114 	add.w	r1, r8, #20
 80174a8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80174ac:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80174b0:	9300      	str	r3, [sp, #0]
 80174b2:	9b00      	ldr	r3, [sp, #0]
 80174b4:	9201      	str	r2, [sp, #4]
 80174b6:	4293      	cmp	r3, r2
 80174b8:	d80c      	bhi.n	80174d4 <__multiply+0x7a>
 80174ba:	2e00      	cmp	r6, #0
 80174bc:	dd03      	ble.n	80174c6 <__multiply+0x6c>
 80174be:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d05d      	beq.n	8017582 <__multiply+0x128>
 80174c6:	6106      	str	r6, [r0, #16]
 80174c8:	b003      	add	sp, #12
 80174ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174ce:	f843 2b04 	str.w	r2, [r3], #4
 80174d2:	e7e3      	b.n	801749c <__multiply+0x42>
 80174d4:	f8b2 b000 	ldrh.w	fp, [r2]
 80174d8:	f1bb 0f00 	cmp.w	fp, #0
 80174dc:	d023      	beq.n	8017526 <__multiply+0xcc>
 80174de:	4689      	mov	r9, r1
 80174e0:	46ac      	mov	ip, r5
 80174e2:	f04f 0800 	mov.w	r8, #0
 80174e6:	f859 4b04 	ldr.w	r4, [r9], #4
 80174ea:	f8dc a000 	ldr.w	sl, [ip]
 80174ee:	b2a3      	uxth	r3, r4
 80174f0:	fa1f fa8a 	uxth.w	sl, sl
 80174f4:	fb0b a303 	mla	r3, fp, r3, sl
 80174f8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80174fc:	f8dc 4000 	ldr.w	r4, [ip]
 8017500:	4443      	add	r3, r8
 8017502:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017506:	fb0b 840a 	mla	r4, fp, sl, r8
 801750a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801750e:	46e2      	mov	sl, ip
 8017510:	b29b      	uxth	r3, r3
 8017512:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017516:	454f      	cmp	r7, r9
 8017518:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801751c:	f84a 3b04 	str.w	r3, [sl], #4
 8017520:	d82b      	bhi.n	801757a <__multiply+0x120>
 8017522:	f8cc 8004 	str.w	r8, [ip, #4]
 8017526:	9b01      	ldr	r3, [sp, #4]
 8017528:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801752c:	3204      	adds	r2, #4
 801752e:	f1ba 0f00 	cmp.w	sl, #0
 8017532:	d020      	beq.n	8017576 <__multiply+0x11c>
 8017534:	682b      	ldr	r3, [r5, #0]
 8017536:	4689      	mov	r9, r1
 8017538:	46a8      	mov	r8, r5
 801753a:	f04f 0b00 	mov.w	fp, #0
 801753e:	f8b9 c000 	ldrh.w	ip, [r9]
 8017542:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8017546:	fb0a 440c 	mla	r4, sl, ip, r4
 801754a:	445c      	add	r4, fp
 801754c:	46c4      	mov	ip, r8
 801754e:	b29b      	uxth	r3, r3
 8017550:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017554:	f84c 3b04 	str.w	r3, [ip], #4
 8017558:	f859 3b04 	ldr.w	r3, [r9], #4
 801755c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8017560:	0c1b      	lsrs	r3, r3, #16
 8017562:	fb0a b303 	mla	r3, sl, r3, fp
 8017566:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801756a:	454f      	cmp	r7, r9
 801756c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8017570:	d805      	bhi.n	801757e <__multiply+0x124>
 8017572:	f8c8 3004 	str.w	r3, [r8, #4]
 8017576:	3504      	adds	r5, #4
 8017578:	e79b      	b.n	80174b2 <__multiply+0x58>
 801757a:	46d4      	mov	ip, sl
 801757c:	e7b3      	b.n	80174e6 <__multiply+0x8c>
 801757e:	46e0      	mov	r8, ip
 8017580:	e7dd      	b.n	801753e <__multiply+0xe4>
 8017582:	3e01      	subs	r6, #1
 8017584:	e799      	b.n	80174ba <__multiply+0x60>
	...

08017588 <__pow5mult>:
 8017588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801758c:	4615      	mov	r5, r2
 801758e:	f012 0203 	ands.w	r2, r2, #3
 8017592:	4606      	mov	r6, r0
 8017594:	460f      	mov	r7, r1
 8017596:	d007      	beq.n	80175a8 <__pow5mult+0x20>
 8017598:	3a01      	subs	r2, #1
 801759a:	4c21      	ldr	r4, [pc, #132]	; (8017620 <__pow5mult+0x98>)
 801759c:	2300      	movs	r3, #0
 801759e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80175a2:	f7ff fe8a 	bl	80172ba <__multadd>
 80175a6:	4607      	mov	r7, r0
 80175a8:	10ad      	asrs	r5, r5, #2
 80175aa:	d035      	beq.n	8017618 <__pow5mult+0x90>
 80175ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80175ae:	b93c      	cbnz	r4, 80175c0 <__pow5mult+0x38>
 80175b0:	2010      	movs	r0, #16
 80175b2:	f7ff fe1d 	bl	80171f0 <malloc>
 80175b6:	6270      	str	r0, [r6, #36]	; 0x24
 80175b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80175bc:	6004      	str	r4, [r0, #0]
 80175be:	60c4      	str	r4, [r0, #12]
 80175c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80175c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80175c8:	b94c      	cbnz	r4, 80175de <__pow5mult+0x56>
 80175ca:	f240 2171 	movw	r1, #625	; 0x271
 80175ce:	4630      	mov	r0, r6
 80175d0:	f7ff ff3a 	bl	8017448 <__i2b>
 80175d4:	2300      	movs	r3, #0
 80175d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80175da:	4604      	mov	r4, r0
 80175dc:	6003      	str	r3, [r0, #0]
 80175de:	f04f 0800 	mov.w	r8, #0
 80175e2:	07eb      	lsls	r3, r5, #31
 80175e4:	d50a      	bpl.n	80175fc <__pow5mult+0x74>
 80175e6:	4639      	mov	r1, r7
 80175e8:	4622      	mov	r2, r4
 80175ea:	4630      	mov	r0, r6
 80175ec:	f7ff ff35 	bl	801745a <__multiply>
 80175f0:	4639      	mov	r1, r7
 80175f2:	4681      	mov	r9, r0
 80175f4:	4630      	mov	r0, r6
 80175f6:	f7ff fe49 	bl	801728c <_Bfree>
 80175fa:	464f      	mov	r7, r9
 80175fc:	106d      	asrs	r5, r5, #1
 80175fe:	d00b      	beq.n	8017618 <__pow5mult+0x90>
 8017600:	6820      	ldr	r0, [r4, #0]
 8017602:	b938      	cbnz	r0, 8017614 <__pow5mult+0x8c>
 8017604:	4622      	mov	r2, r4
 8017606:	4621      	mov	r1, r4
 8017608:	4630      	mov	r0, r6
 801760a:	f7ff ff26 	bl	801745a <__multiply>
 801760e:	6020      	str	r0, [r4, #0]
 8017610:	f8c0 8000 	str.w	r8, [r0]
 8017614:	4604      	mov	r4, r0
 8017616:	e7e4      	b.n	80175e2 <__pow5mult+0x5a>
 8017618:	4638      	mov	r0, r7
 801761a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801761e:	bf00      	nop
 8017620:	08019140 	.word	0x08019140

08017624 <__lshift>:
 8017624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017628:	460c      	mov	r4, r1
 801762a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801762e:	6923      	ldr	r3, [r4, #16]
 8017630:	6849      	ldr	r1, [r1, #4]
 8017632:	eb0a 0903 	add.w	r9, sl, r3
 8017636:	68a3      	ldr	r3, [r4, #8]
 8017638:	4607      	mov	r7, r0
 801763a:	4616      	mov	r6, r2
 801763c:	f109 0501 	add.w	r5, r9, #1
 8017640:	42ab      	cmp	r3, r5
 8017642:	db32      	blt.n	80176aa <__lshift+0x86>
 8017644:	4638      	mov	r0, r7
 8017646:	f7ff fded 	bl	8017224 <_Balloc>
 801764a:	2300      	movs	r3, #0
 801764c:	4680      	mov	r8, r0
 801764e:	f100 0114 	add.w	r1, r0, #20
 8017652:	461a      	mov	r2, r3
 8017654:	4553      	cmp	r3, sl
 8017656:	db2b      	blt.n	80176b0 <__lshift+0x8c>
 8017658:	6920      	ldr	r0, [r4, #16]
 801765a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801765e:	f104 0314 	add.w	r3, r4, #20
 8017662:	f016 021f 	ands.w	r2, r6, #31
 8017666:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801766a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801766e:	d025      	beq.n	80176bc <__lshift+0x98>
 8017670:	f1c2 0e20 	rsb	lr, r2, #32
 8017674:	2000      	movs	r0, #0
 8017676:	681e      	ldr	r6, [r3, #0]
 8017678:	468a      	mov	sl, r1
 801767a:	4096      	lsls	r6, r2
 801767c:	4330      	orrs	r0, r6
 801767e:	f84a 0b04 	str.w	r0, [sl], #4
 8017682:	f853 0b04 	ldr.w	r0, [r3], #4
 8017686:	459c      	cmp	ip, r3
 8017688:	fa20 f00e 	lsr.w	r0, r0, lr
 801768c:	d814      	bhi.n	80176b8 <__lshift+0x94>
 801768e:	6048      	str	r0, [r1, #4]
 8017690:	b108      	cbz	r0, 8017696 <__lshift+0x72>
 8017692:	f109 0502 	add.w	r5, r9, #2
 8017696:	3d01      	subs	r5, #1
 8017698:	4638      	mov	r0, r7
 801769a:	f8c8 5010 	str.w	r5, [r8, #16]
 801769e:	4621      	mov	r1, r4
 80176a0:	f7ff fdf4 	bl	801728c <_Bfree>
 80176a4:	4640      	mov	r0, r8
 80176a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176aa:	3101      	adds	r1, #1
 80176ac:	005b      	lsls	r3, r3, #1
 80176ae:	e7c7      	b.n	8017640 <__lshift+0x1c>
 80176b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80176b4:	3301      	adds	r3, #1
 80176b6:	e7cd      	b.n	8017654 <__lshift+0x30>
 80176b8:	4651      	mov	r1, sl
 80176ba:	e7dc      	b.n	8017676 <__lshift+0x52>
 80176bc:	3904      	subs	r1, #4
 80176be:	f853 2b04 	ldr.w	r2, [r3], #4
 80176c2:	f841 2f04 	str.w	r2, [r1, #4]!
 80176c6:	459c      	cmp	ip, r3
 80176c8:	d8f9      	bhi.n	80176be <__lshift+0x9a>
 80176ca:	e7e4      	b.n	8017696 <__lshift+0x72>

080176cc <__mcmp>:
 80176cc:	6903      	ldr	r3, [r0, #16]
 80176ce:	690a      	ldr	r2, [r1, #16]
 80176d0:	1a9b      	subs	r3, r3, r2
 80176d2:	b530      	push	{r4, r5, lr}
 80176d4:	d10c      	bne.n	80176f0 <__mcmp+0x24>
 80176d6:	0092      	lsls	r2, r2, #2
 80176d8:	3014      	adds	r0, #20
 80176da:	3114      	adds	r1, #20
 80176dc:	1884      	adds	r4, r0, r2
 80176de:	4411      	add	r1, r2
 80176e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80176e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80176e8:	4295      	cmp	r5, r2
 80176ea:	d003      	beq.n	80176f4 <__mcmp+0x28>
 80176ec:	d305      	bcc.n	80176fa <__mcmp+0x2e>
 80176ee:	2301      	movs	r3, #1
 80176f0:	4618      	mov	r0, r3
 80176f2:	bd30      	pop	{r4, r5, pc}
 80176f4:	42a0      	cmp	r0, r4
 80176f6:	d3f3      	bcc.n	80176e0 <__mcmp+0x14>
 80176f8:	e7fa      	b.n	80176f0 <__mcmp+0x24>
 80176fa:	f04f 33ff 	mov.w	r3, #4294967295
 80176fe:	e7f7      	b.n	80176f0 <__mcmp+0x24>

08017700 <__mdiff>:
 8017700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017704:	460d      	mov	r5, r1
 8017706:	4607      	mov	r7, r0
 8017708:	4611      	mov	r1, r2
 801770a:	4628      	mov	r0, r5
 801770c:	4614      	mov	r4, r2
 801770e:	f7ff ffdd 	bl	80176cc <__mcmp>
 8017712:	1e06      	subs	r6, r0, #0
 8017714:	d108      	bne.n	8017728 <__mdiff+0x28>
 8017716:	4631      	mov	r1, r6
 8017718:	4638      	mov	r0, r7
 801771a:	f7ff fd83 	bl	8017224 <_Balloc>
 801771e:	2301      	movs	r3, #1
 8017720:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8017724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017728:	bfa4      	itt	ge
 801772a:	4623      	movge	r3, r4
 801772c:	462c      	movge	r4, r5
 801772e:	4638      	mov	r0, r7
 8017730:	6861      	ldr	r1, [r4, #4]
 8017732:	bfa6      	itte	ge
 8017734:	461d      	movge	r5, r3
 8017736:	2600      	movge	r6, #0
 8017738:	2601      	movlt	r6, #1
 801773a:	f7ff fd73 	bl	8017224 <_Balloc>
 801773e:	692b      	ldr	r3, [r5, #16]
 8017740:	60c6      	str	r6, [r0, #12]
 8017742:	6926      	ldr	r6, [r4, #16]
 8017744:	f105 0914 	add.w	r9, r5, #20
 8017748:	f104 0214 	add.w	r2, r4, #20
 801774c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8017750:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8017754:	f100 0514 	add.w	r5, r0, #20
 8017758:	f04f 0e00 	mov.w	lr, #0
 801775c:	f852 ab04 	ldr.w	sl, [r2], #4
 8017760:	f859 4b04 	ldr.w	r4, [r9], #4
 8017764:	fa1e f18a 	uxtah	r1, lr, sl
 8017768:	b2a3      	uxth	r3, r4
 801776a:	1ac9      	subs	r1, r1, r3
 801776c:	0c23      	lsrs	r3, r4, #16
 801776e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8017772:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8017776:	b289      	uxth	r1, r1
 8017778:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801777c:	45c8      	cmp	r8, r9
 801777e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8017782:	4694      	mov	ip, r2
 8017784:	f845 3b04 	str.w	r3, [r5], #4
 8017788:	d8e8      	bhi.n	801775c <__mdiff+0x5c>
 801778a:	45bc      	cmp	ip, r7
 801778c:	d304      	bcc.n	8017798 <__mdiff+0x98>
 801778e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8017792:	b183      	cbz	r3, 80177b6 <__mdiff+0xb6>
 8017794:	6106      	str	r6, [r0, #16]
 8017796:	e7c5      	b.n	8017724 <__mdiff+0x24>
 8017798:	f85c 1b04 	ldr.w	r1, [ip], #4
 801779c:	fa1e f381 	uxtah	r3, lr, r1
 80177a0:	141a      	asrs	r2, r3, #16
 80177a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80177a6:	b29b      	uxth	r3, r3
 80177a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80177ac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80177b0:	f845 3b04 	str.w	r3, [r5], #4
 80177b4:	e7e9      	b.n	801778a <__mdiff+0x8a>
 80177b6:	3e01      	subs	r6, #1
 80177b8:	e7e9      	b.n	801778e <__mdiff+0x8e>
	...

080177bc <__ulp>:
 80177bc:	4b12      	ldr	r3, [pc, #72]	; (8017808 <__ulp+0x4c>)
 80177be:	ee10 2a90 	vmov	r2, s1
 80177c2:	401a      	ands	r2, r3
 80177c4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	dd04      	ble.n	80177d6 <__ulp+0x1a>
 80177cc:	2000      	movs	r0, #0
 80177ce:	4619      	mov	r1, r3
 80177d0:	ec41 0b10 	vmov	d0, r0, r1
 80177d4:	4770      	bx	lr
 80177d6:	425b      	negs	r3, r3
 80177d8:	151b      	asrs	r3, r3, #20
 80177da:	2b13      	cmp	r3, #19
 80177dc:	f04f 0000 	mov.w	r0, #0
 80177e0:	f04f 0100 	mov.w	r1, #0
 80177e4:	dc04      	bgt.n	80177f0 <__ulp+0x34>
 80177e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80177ea:	fa42 f103 	asr.w	r1, r2, r3
 80177ee:	e7ef      	b.n	80177d0 <__ulp+0x14>
 80177f0:	3b14      	subs	r3, #20
 80177f2:	2b1e      	cmp	r3, #30
 80177f4:	f04f 0201 	mov.w	r2, #1
 80177f8:	bfda      	itte	le
 80177fa:	f1c3 031f 	rsble	r3, r3, #31
 80177fe:	fa02 f303 	lslle.w	r3, r2, r3
 8017802:	4613      	movgt	r3, r2
 8017804:	4618      	mov	r0, r3
 8017806:	e7e3      	b.n	80177d0 <__ulp+0x14>
 8017808:	7ff00000 	.word	0x7ff00000

0801780c <__b2d>:
 801780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801780e:	6905      	ldr	r5, [r0, #16]
 8017810:	f100 0714 	add.w	r7, r0, #20
 8017814:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017818:	1f2e      	subs	r6, r5, #4
 801781a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801781e:	4620      	mov	r0, r4
 8017820:	f7ff fdc4 	bl	80173ac <__hi0bits>
 8017824:	f1c0 0320 	rsb	r3, r0, #32
 8017828:	280a      	cmp	r0, #10
 801782a:	600b      	str	r3, [r1, #0]
 801782c:	f8df c074 	ldr.w	ip, [pc, #116]	; 80178a4 <__b2d+0x98>
 8017830:	dc14      	bgt.n	801785c <__b2d+0x50>
 8017832:	f1c0 0e0b 	rsb	lr, r0, #11
 8017836:	fa24 f10e 	lsr.w	r1, r4, lr
 801783a:	42b7      	cmp	r7, r6
 801783c:	ea41 030c 	orr.w	r3, r1, ip
 8017840:	bf34      	ite	cc
 8017842:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017846:	2100      	movcs	r1, #0
 8017848:	3015      	adds	r0, #21
 801784a:	fa04 f000 	lsl.w	r0, r4, r0
 801784e:	fa21 f10e 	lsr.w	r1, r1, lr
 8017852:	ea40 0201 	orr.w	r2, r0, r1
 8017856:	ec43 2b10 	vmov	d0, r2, r3
 801785a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801785c:	42b7      	cmp	r7, r6
 801785e:	bf3a      	itte	cc
 8017860:	f1a5 0608 	subcc.w	r6, r5, #8
 8017864:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017868:	2100      	movcs	r1, #0
 801786a:	380b      	subs	r0, #11
 801786c:	d015      	beq.n	801789a <__b2d+0x8e>
 801786e:	4084      	lsls	r4, r0
 8017870:	f1c0 0520 	rsb	r5, r0, #32
 8017874:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8017878:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801787c:	42be      	cmp	r6, r7
 801787e:	fa21 fc05 	lsr.w	ip, r1, r5
 8017882:	ea44 030c 	orr.w	r3, r4, ip
 8017886:	bf8c      	ite	hi
 8017888:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801788c:	2400      	movls	r4, #0
 801788e:	fa01 f000 	lsl.w	r0, r1, r0
 8017892:	40ec      	lsrs	r4, r5
 8017894:	ea40 0204 	orr.w	r2, r0, r4
 8017898:	e7dd      	b.n	8017856 <__b2d+0x4a>
 801789a:	ea44 030c 	orr.w	r3, r4, ip
 801789e:	460a      	mov	r2, r1
 80178a0:	e7d9      	b.n	8017856 <__b2d+0x4a>
 80178a2:	bf00      	nop
 80178a4:	3ff00000 	.word	0x3ff00000

080178a8 <__d2b>:
 80178a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80178ac:	460e      	mov	r6, r1
 80178ae:	2101      	movs	r1, #1
 80178b0:	ec59 8b10 	vmov	r8, r9, d0
 80178b4:	4615      	mov	r5, r2
 80178b6:	f7ff fcb5 	bl	8017224 <_Balloc>
 80178ba:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80178be:	4607      	mov	r7, r0
 80178c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80178c4:	bb34      	cbnz	r4, 8017914 <__d2b+0x6c>
 80178c6:	9301      	str	r3, [sp, #4]
 80178c8:	f1b8 0300 	subs.w	r3, r8, #0
 80178cc:	d027      	beq.n	801791e <__d2b+0x76>
 80178ce:	a802      	add	r0, sp, #8
 80178d0:	f840 3d08 	str.w	r3, [r0, #-8]!
 80178d4:	f7ff fd89 	bl	80173ea <__lo0bits>
 80178d8:	9900      	ldr	r1, [sp, #0]
 80178da:	b1f0      	cbz	r0, 801791a <__d2b+0x72>
 80178dc:	9a01      	ldr	r2, [sp, #4]
 80178de:	f1c0 0320 	rsb	r3, r0, #32
 80178e2:	fa02 f303 	lsl.w	r3, r2, r3
 80178e6:	430b      	orrs	r3, r1
 80178e8:	40c2      	lsrs	r2, r0
 80178ea:	617b      	str	r3, [r7, #20]
 80178ec:	9201      	str	r2, [sp, #4]
 80178ee:	9b01      	ldr	r3, [sp, #4]
 80178f0:	61bb      	str	r3, [r7, #24]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	bf14      	ite	ne
 80178f6:	2102      	movne	r1, #2
 80178f8:	2101      	moveq	r1, #1
 80178fa:	6139      	str	r1, [r7, #16]
 80178fc:	b1c4      	cbz	r4, 8017930 <__d2b+0x88>
 80178fe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8017902:	4404      	add	r4, r0
 8017904:	6034      	str	r4, [r6, #0]
 8017906:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801790a:	6028      	str	r0, [r5, #0]
 801790c:	4638      	mov	r0, r7
 801790e:	b003      	add	sp, #12
 8017910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017914:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017918:	e7d5      	b.n	80178c6 <__d2b+0x1e>
 801791a:	6179      	str	r1, [r7, #20]
 801791c:	e7e7      	b.n	80178ee <__d2b+0x46>
 801791e:	a801      	add	r0, sp, #4
 8017920:	f7ff fd63 	bl	80173ea <__lo0bits>
 8017924:	9b01      	ldr	r3, [sp, #4]
 8017926:	617b      	str	r3, [r7, #20]
 8017928:	2101      	movs	r1, #1
 801792a:	6139      	str	r1, [r7, #16]
 801792c:	3020      	adds	r0, #32
 801792e:	e7e5      	b.n	80178fc <__d2b+0x54>
 8017930:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8017934:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017938:	6030      	str	r0, [r6, #0]
 801793a:	6918      	ldr	r0, [r3, #16]
 801793c:	f7ff fd36 	bl	80173ac <__hi0bits>
 8017940:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8017944:	e7e1      	b.n	801790a <__d2b+0x62>

08017946 <__ratio>:
 8017946:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801794a:	4688      	mov	r8, r1
 801794c:	4669      	mov	r1, sp
 801794e:	4681      	mov	r9, r0
 8017950:	f7ff ff5c 	bl	801780c <__b2d>
 8017954:	a901      	add	r1, sp, #4
 8017956:	4640      	mov	r0, r8
 8017958:	ec57 6b10 	vmov	r6, r7, d0
 801795c:	f7ff ff56 	bl	801780c <__b2d>
 8017960:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017964:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017968:	eba3 0c02 	sub.w	ip, r3, r2
 801796c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017970:	1a9b      	subs	r3, r3, r2
 8017972:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017976:	ec5b ab10 	vmov	sl, fp, d0
 801797a:	2b00      	cmp	r3, #0
 801797c:	bfce      	itee	gt
 801797e:	463a      	movgt	r2, r7
 8017980:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017984:	465a      	movle	r2, fp
 8017986:	4659      	mov	r1, fp
 8017988:	463d      	mov	r5, r7
 801798a:	bfd4      	ite	le
 801798c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8017990:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8017994:	4630      	mov	r0, r6
 8017996:	ee10 2a10 	vmov	r2, s0
 801799a:	460b      	mov	r3, r1
 801799c:	4629      	mov	r1, r5
 801799e:	f7e8 ff6d 	bl	800087c <__aeabi_ddiv>
 80179a2:	ec41 0b10 	vmov	d0, r0, r1
 80179a6:	b003      	add	sp, #12
 80179a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080179ac <__copybits>:
 80179ac:	3901      	subs	r1, #1
 80179ae:	b510      	push	{r4, lr}
 80179b0:	1149      	asrs	r1, r1, #5
 80179b2:	6914      	ldr	r4, [r2, #16]
 80179b4:	3101      	adds	r1, #1
 80179b6:	f102 0314 	add.w	r3, r2, #20
 80179ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80179be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80179c2:	42a3      	cmp	r3, r4
 80179c4:	4602      	mov	r2, r0
 80179c6:	d303      	bcc.n	80179d0 <__copybits+0x24>
 80179c8:	2300      	movs	r3, #0
 80179ca:	428a      	cmp	r2, r1
 80179cc:	d305      	bcc.n	80179da <__copybits+0x2e>
 80179ce:	bd10      	pop	{r4, pc}
 80179d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80179d4:	f840 2b04 	str.w	r2, [r0], #4
 80179d8:	e7f3      	b.n	80179c2 <__copybits+0x16>
 80179da:	f842 3b04 	str.w	r3, [r2], #4
 80179de:	e7f4      	b.n	80179ca <__copybits+0x1e>

080179e0 <__any_on>:
 80179e0:	f100 0214 	add.w	r2, r0, #20
 80179e4:	6900      	ldr	r0, [r0, #16]
 80179e6:	114b      	asrs	r3, r1, #5
 80179e8:	4298      	cmp	r0, r3
 80179ea:	b510      	push	{r4, lr}
 80179ec:	db11      	blt.n	8017a12 <__any_on+0x32>
 80179ee:	dd0a      	ble.n	8017a06 <__any_on+0x26>
 80179f0:	f011 011f 	ands.w	r1, r1, #31
 80179f4:	d007      	beq.n	8017a06 <__any_on+0x26>
 80179f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80179fa:	fa24 f001 	lsr.w	r0, r4, r1
 80179fe:	fa00 f101 	lsl.w	r1, r0, r1
 8017a02:	428c      	cmp	r4, r1
 8017a04:	d10b      	bne.n	8017a1e <__any_on+0x3e>
 8017a06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017a0a:	4293      	cmp	r3, r2
 8017a0c:	d803      	bhi.n	8017a16 <__any_on+0x36>
 8017a0e:	2000      	movs	r0, #0
 8017a10:	bd10      	pop	{r4, pc}
 8017a12:	4603      	mov	r3, r0
 8017a14:	e7f7      	b.n	8017a06 <__any_on+0x26>
 8017a16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017a1a:	2900      	cmp	r1, #0
 8017a1c:	d0f5      	beq.n	8017a0a <__any_on+0x2a>
 8017a1e:	2001      	movs	r0, #1
 8017a20:	e7f6      	b.n	8017a10 <__any_on+0x30>

08017a22 <_calloc_r>:
 8017a22:	b538      	push	{r3, r4, r5, lr}
 8017a24:	fb02 f401 	mul.w	r4, r2, r1
 8017a28:	4621      	mov	r1, r4
 8017a2a:	f000 f857 	bl	8017adc <_malloc_r>
 8017a2e:	4605      	mov	r5, r0
 8017a30:	b118      	cbz	r0, 8017a3a <_calloc_r+0x18>
 8017a32:	4622      	mov	r2, r4
 8017a34:	2100      	movs	r1, #0
 8017a36:	f7fc fcaa 	bl	801438e <memset>
 8017a3a:	4628      	mov	r0, r5
 8017a3c:	bd38      	pop	{r3, r4, r5, pc}
	...

08017a40 <_free_r>:
 8017a40:	b538      	push	{r3, r4, r5, lr}
 8017a42:	4605      	mov	r5, r0
 8017a44:	2900      	cmp	r1, #0
 8017a46:	d045      	beq.n	8017ad4 <_free_r+0x94>
 8017a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017a4c:	1f0c      	subs	r4, r1, #4
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	bfb8      	it	lt
 8017a52:	18e4      	addlt	r4, r4, r3
 8017a54:	f000 fe30 	bl	80186b8 <__malloc_lock>
 8017a58:	4a1f      	ldr	r2, [pc, #124]	; (8017ad8 <_free_r+0x98>)
 8017a5a:	6813      	ldr	r3, [r2, #0]
 8017a5c:	4610      	mov	r0, r2
 8017a5e:	b933      	cbnz	r3, 8017a6e <_free_r+0x2e>
 8017a60:	6063      	str	r3, [r4, #4]
 8017a62:	6014      	str	r4, [r2, #0]
 8017a64:	4628      	mov	r0, r5
 8017a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017a6a:	f000 be26 	b.w	80186ba <__malloc_unlock>
 8017a6e:	42a3      	cmp	r3, r4
 8017a70:	d90c      	bls.n	8017a8c <_free_r+0x4c>
 8017a72:	6821      	ldr	r1, [r4, #0]
 8017a74:	1862      	adds	r2, r4, r1
 8017a76:	4293      	cmp	r3, r2
 8017a78:	bf04      	itt	eq
 8017a7a:	681a      	ldreq	r2, [r3, #0]
 8017a7c:	685b      	ldreq	r3, [r3, #4]
 8017a7e:	6063      	str	r3, [r4, #4]
 8017a80:	bf04      	itt	eq
 8017a82:	1852      	addeq	r2, r2, r1
 8017a84:	6022      	streq	r2, [r4, #0]
 8017a86:	6004      	str	r4, [r0, #0]
 8017a88:	e7ec      	b.n	8017a64 <_free_r+0x24>
 8017a8a:	4613      	mov	r3, r2
 8017a8c:	685a      	ldr	r2, [r3, #4]
 8017a8e:	b10a      	cbz	r2, 8017a94 <_free_r+0x54>
 8017a90:	42a2      	cmp	r2, r4
 8017a92:	d9fa      	bls.n	8017a8a <_free_r+0x4a>
 8017a94:	6819      	ldr	r1, [r3, #0]
 8017a96:	1858      	adds	r0, r3, r1
 8017a98:	42a0      	cmp	r0, r4
 8017a9a:	d10b      	bne.n	8017ab4 <_free_r+0x74>
 8017a9c:	6820      	ldr	r0, [r4, #0]
 8017a9e:	4401      	add	r1, r0
 8017aa0:	1858      	adds	r0, r3, r1
 8017aa2:	4282      	cmp	r2, r0
 8017aa4:	6019      	str	r1, [r3, #0]
 8017aa6:	d1dd      	bne.n	8017a64 <_free_r+0x24>
 8017aa8:	6810      	ldr	r0, [r2, #0]
 8017aaa:	6852      	ldr	r2, [r2, #4]
 8017aac:	605a      	str	r2, [r3, #4]
 8017aae:	4401      	add	r1, r0
 8017ab0:	6019      	str	r1, [r3, #0]
 8017ab2:	e7d7      	b.n	8017a64 <_free_r+0x24>
 8017ab4:	d902      	bls.n	8017abc <_free_r+0x7c>
 8017ab6:	230c      	movs	r3, #12
 8017ab8:	602b      	str	r3, [r5, #0]
 8017aba:	e7d3      	b.n	8017a64 <_free_r+0x24>
 8017abc:	6820      	ldr	r0, [r4, #0]
 8017abe:	1821      	adds	r1, r4, r0
 8017ac0:	428a      	cmp	r2, r1
 8017ac2:	bf04      	itt	eq
 8017ac4:	6811      	ldreq	r1, [r2, #0]
 8017ac6:	6852      	ldreq	r2, [r2, #4]
 8017ac8:	6062      	str	r2, [r4, #4]
 8017aca:	bf04      	itt	eq
 8017acc:	1809      	addeq	r1, r1, r0
 8017ace:	6021      	streq	r1, [r4, #0]
 8017ad0:	605c      	str	r4, [r3, #4]
 8017ad2:	e7c7      	b.n	8017a64 <_free_r+0x24>
 8017ad4:	bd38      	pop	{r3, r4, r5, pc}
 8017ad6:	bf00      	nop
 8017ad8:	2003c4ac 	.word	0x2003c4ac

08017adc <_malloc_r>:
 8017adc:	b570      	push	{r4, r5, r6, lr}
 8017ade:	1ccd      	adds	r5, r1, #3
 8017ae0:	f025 0503 	bic.w	r5, r5, #3
 8017ae4:	3508      	adds	r5, #8
 8017ae6:	2d0c      	cmp	r5, #12
 8017ae8:	bf38      	it	cc
 8017aea:	250c      	movcc	r5, #12
 8017aec:	2d00      	cmp	r5, #0
 8017aee:	4606      	mov	r6, r0
 8017af0:	db01      	blt.n	8017af6 <_malloc_r+0x1a>
 8017af2:	42a9      	cmp	r1, r5
 8017af4:	d903      	bls.n	8017afe <_malloc_r+0x22>
 8017af6:	230c      	movs	r3, #12
 8017af8:	6033      	str	r3, [r6, #0]
 8017afa:	2000      	movs	r0, #0
 8017afc:	bd70      	pop	{r4, r5, r6, pc}
 8017afe:	f000 fddb 	bl	80186b8 <__malloc_lock>
 8017b02:	4a21      	ldr	r2, [pc, #132]	; (8017b88 <_malloc_r+0xac>)
 8017b04:	6814      	ldr	r4, [r2, #0]
 8017b06:	4621      	mov	r1, r4
 8017b08:	b991      	cbnz	r1, 8017b30 <_malloc_r+0x54>
 8017b0a:	4c20      	ldr	r4, [pc, #128]	; (8017b8c <_malloc_r+0xb0>)
 8017b0c:	6823      	ldr	r3, [r4, #0]
 8017b0e:	b91b      	cbnz	r3, 8017b18 <_malloc_r+0x3c>
 8017b10:	4630      	mov	r0, r6
 8017b12:	f000 fc91 	bl	8018438 <_sbrk_r>
 8017b16:	6020      	str	r0, [r4, #0]
 8017b18:	4629      	mov	r1, r5
 8017b1a:	4630      	mov	r0, r6
 8017b1c:	f000 fc8c 	bl	8018438 <_sbrk_r>
 8017b20:	1c43      	adds	r3, r0, #1
 8017b22:	d124      	bne.n	8017b6e <_malloc_r+0x92>
 8017b24:	230c      	movs	r3, #12
 8017b26:	6033      	str	r3, [r6, #0]
 8017b28:	4630      	mov	r0, r6
 8017b2a:	f000 fdc6 	bl	80186ba <__malloc_unlock>
 8017b2e:	e7e4      	b.n	8017afa <_malloc_r+0x1e>
 8017b30:	680b      	ldr	r3, [r1, #0]
 8017b32:	1b5b      	subs	r3, r3, r5
 8017b34:	d418      	bmi.n	8017b68 <_malloc_r+0x8c>
 8017b36:	2b0b      	cmp	r3, #11
 8017b38:	d90f      	bls.n	8017b5a <_malloc_r+0x7e>
 8017b3a:	600b      	str	r3, [r1, #0]
 8017b3c:	50cd      	str	r5, [r1, r3]
 8017b3e:	18cc      	adds	r4, r1, r3
 8017b40:	4630      	mov	r0, r6
 8017b42:	f000 fdba 	bl	80186ba <__malloc_unlock>
 8017b46:	f104 000b 	add.w	r0, r4, #11
 8017b4a:	1d23      	adds	r3, r4, #4
 8017b4c:	f020 0007 	bic.w	r0, r0, #7
 8017b50:	1ac3      	subs	r3, r0, r3
 8017b52:	d0d3      	beq.n	8017afc <_malloc_r+0x20>
 8017b54:	425a      	negs	r2, r3
 8017b56:	50e2      	str	r2, [r4, r3]
 8017b58:	e7d0      	b.n	8017afc <_malloc_r+0x20>
 8017b5a:	428c      	cmp	r4, r1
 8017b5c:	684b      	ldr	r3, [r1, #4]
 8017b5e:	bf16      	itet	ne
 8017b60:	6063      	strne	r3, [r4, #4]
 8017b62:	6013      	streq	r3, [r2, #0]
 8017b64:	460c      	movne	r4, r1
 8017b66:	e7eb      	b.n	8017b40 <_malloc_r+0x64>
 8017b68:	460c      	mov	r4, r1
 8017b6a:	6849      	ldr	r1, [r1, #4]
 8017b6c:	e7cc      	b.n	8017b08 <_malloc_r+0x2c>
 8017b6e:	1cc4      	adds	r4, r0, #3
 8017b70:	f024 0403 	bic.w	r4, r4, #3
 8017b74:	42a0      	cmp	r0, r4
 8017b76:	d005      	beq.n	8017b84 <_malloc_r+0xa8>
 8017b78:	1a21      	subs	r1, r4, r0
 8017b7a:	4630      	mov	r0, r6
 8017b7c:	f000 fc5c 	bl	8018438 <_sbrk_r>
 8017b80:	3001      	adds	r0, #1
 8017b82:	d0cf      	beq.n	8017b24 <_malloc_r+0x48>
 8017b84:	6025      	str	r5, [r4, #0]
 8017b86:	e7db      	b.n	8017b40 <_malloc_r+0x64>
 8017b88:	2003c4ac 	.word	0x2003c4ac
 8017b8c:	2003c4b0 	.word	0x2003c4b0

08017b90 <__ssputs_r>:
 8017b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b94:	688e      	ldr	r6, [r1, #8]
 8017b96:	429e      	cmp	r6, r3
 8017b98:	4682      	mov	sl, r0
 8017b9a:	460c      	mov	r4, r1
 8017b9c:	4690      	mov	r8, r2
 8017b9e:	4699      	mov	r9, r3
 8017ba0:	d837      	bhi.n	8017c12 <__ssputs_r+0x82>
 8017ba2:	898a      	ldrh	r2, [r1, #12]
 8017ba4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017ba8:	d031      	beq.n	8017c0e <__ssputs_r+0x7e>
 8017baa:	6825      	ldr	r5, [r4, #0]
 8017bac:	6909      	ldr	r1, [r1, #16]
 8017bae:	1a6f      	subs	r7, r5, r1
 8017bb0:	6965      	ldr	r5, [r4, #20]
 8017bb2:	2302      	movs	r3, #2
 8017bb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017bb8:	fb95 f5f3 	sdiv	r5, r5, r3
 8017bbc:	f109 0301 	add.w	r3, r9, #1
 8017bc0:	443b      	add	r3, r7
 8017bc2:	429d      	cmp	r5, r3
 8017bc4:	bf38      	it	cc
 8017bc6:	461d      	movcc	r5, r3
 8017bc8:	0553      	lsls	r3, r2, #21
 8017bca:	d530      	bpl.n	8017c2e <__ssputs_r+0x9e>
 8017bcc:	4629      	mov	r1, r5
 8017bce:	f7ff ff85 	bl	8017adc <_malloc_r>
 8017bd2:	4606      	mov	r6, r0
 8017bd4:	b950      	cbnz	r0, 8017bec <__ssputs_r+0x5c>
 8017bd6:	230c      	movs	r3, #12
 8017bd8:	f8ca 3000 	str.w	r3, [sl]
 8017bdc:	89a3      	ldrh	r3, [r4, #12]
 8017bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017be2:	81a3      	strh	r3, [r4, #12]
 8017be4:	f04f 30ff 	mov.w	r0, #4294967295
 8017be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bec:	463a      	mov	r2, r7
 8017bee:	6921      	ldr	r1, [r4, #16]
 8017bf0:	f7fc fbc2 	bl	8014378 <memcpy>
 8017bf4:	89a3      	ldrh	r3, [r4, #12]
 8017bf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017bfe:	81a3      	strh	r3, [r4, #12]
 8017c00:	6126      	str	r6, [r4, #16]
 8017c02:	6165      	str	r5, [r4, #20]
 8017c04:	443e      	add	r6, r7
 8017c06:	1bed      	subs	r5, r5, r7
 8017c08:	6026      	str	r6, [r4, #0]
 8017c0a:	60a5      	str	r5, [r4, #8]
 8017c0c:	464e      	mov	r6, r9
 8017c0e:	454e      	cmp	r6, r9
 8017c10:	d900      	bls.n	8017c14 <__ssputs_r+0x84>
 8017c12:	464e      	mov	r6, r9
 8017c14:	4632      	mov	r2, r6
 8017c16:	4641      	mov	r1, r8
 8017c18:	6820      	ldr	r0, [r4, #0]
 8017c1a:	f000 fd34 	bl	8018686 <memmove>
 8017c1e:	68a3      	ldr	r3, [r4, #8]
 8017c20:	1b9b      	subs	r3, r3, r6
 8017c22:	60a3      	str	r3, [r4, #8]
 8017c24:	6823      	ldr	r3, [r4, #0]
 8017c26:	441e      	add	r6, r3
 8017c28:	6026      	str	r6, [r4, #0]
 8017c2a:	2000      	movs	r0, #0
 8017c2c:	e7dc      	b.n	8017be8 <__ssputs_r+0x58>
 8017c2e:	462a      	mov	r2, r5
 8017c30:	f000 fd44 	bl	80186bc <_realloc_r>
 8017c34:	4606      	mov	r6, r0
 8017c36:	2800      	cmp	r0, #0
 8017c38:	d1e2      	bne.n	8017c00 <__ssputs_r+0x70>
 8017c3a:	6921      	ldr	r1, [r4, #16]
 8017c3c:	4650      	mov	r0, sl
 8017c3e:	f7ff feff 	bl	8017a40 <_free_r>
 8017c42:	e7c8      	b.n	8017bd6 <__ssputs_r+0x46>

08017c44 <_svfiprintf_r>:
 8017c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c48:	461d      	mov	r5, r3
 8017c4a:	898b      	ldrh	r3, [r1, #12]
 8017c4c:	061f      	lsls	r7, r3, #24
 8017c4e:	b09d      	sub	sp, #116	; 0x74
 8017c50:	4680      	mov	r8, r0
 8017c52:	460c      	mov	r4, r1
 8017c54:	4616      	mov	r6, r2
 8017c56:	d50f      	bpl.n	8017c78 <_svfiprintf_r+0x34>
 8017c58:	690b      	ldr	r3, [r1, #16]
 8017c5a:	b96b      	cbnz	r3, 8017c78 <_svfiprintf_r+0x34>
 8017c5c:	2140      	movs	r1, #64	; 0x40
 8017c5e:	f7ff ff3d 	bl	8017adc <_malloc_r>
 8017c62:	6020      	str	r0, [r4, #0]
 8017c64:	6120      	str	r0, [r4, #16]
 8017c66:	b928      	cbnz	r0, 8017c74 <_svfiprintf_r+0x30>
 8017c68:	230c      	movs	r3, #12
 8017c6a:	f8c8 3000 	str.w	r3, [r8]
 8017c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8017c72:	e0c8      	b.n	8017e06 <_svfiprintf_r+0x1c2>
 8017c74:	2340      	movs	r3, #64	; 0x40
 8017c76:	6163      	str	r3, [r4, #20]
 8017c78:	2300      	movs	r3, #0
 8017c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8017c7c:	2320      	movs	r3, #32
 8017c7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017c82:	2330      	movs	r3, #48	; 0x30
 8017c84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017c88:	9503      	str	r5, [sp, #12]
 8017c8a:	f04f 0b01 	mov.w	fp, #1
 8017c8e:	4637      	mov	r7, r6
 8017c90:	463d      	mov	r5, r7
 8017c92:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017c96:	b10b      	cbz	r3, 8017c9c <_svfiprintf_r+0x58>
 8017c98:	2b25      	cmp	r3, #37	; 0x25
 8017c9a:	d13e      	bne.n	8017d1a <_svfiprintf_r+0xd6>
 8017c9c:	ebb7 0a06 	subs.w	sl, r7, r6
 8017ca0:	d00b      	beq.n	8017cba <_svfiprintf_r+0x76>
 8017ca2:	4653      	mov	r3, sl
 8017ca4:	4632      	mov	r2, r6
 8017ca6:	4621      	mov	r1, r4
 8017ca8:	4640      	mov	r0, r8
 8017caa:	f7ff ff71 	bl	8017b90 <__ssputs_r>
 8017cae:	3001      	adds	r0, #1
 8017cb0:	f000 80a4 	beq.w	8017dfc <_svfiprintf_r+0x1b8>
 8017cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cb6:	4453      	add	r3, sl
 8017cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8017cba:	783b      	ldrb	r3, [r7, #0]
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	f000 809d 	beq.w	8017dfc <_svfiprintf_r+0x1b8>
 8017cc2:	2300      	movs	r3, #0
 8017cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8017cc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017ccc:	9304      	str	r3, [sp, #16]
 8017cce:	9307      	str	r3, [sp, #28]
 8017cd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017cd4:	931a      	str	r3, [sp, #104]	; 0x68
 8017cd6:	462f      	mov	r7, r5
 8017cd8:	2205      	movs	r2, #5
 8017cda:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017cde:	4850      	ldr	r0, [pc, #320]	; (8017e20 <_svfiprintf_r+0x1dc>)
 8017ce0:	f7e8 fa96 	bl	8000210 <memchr>
 8017ce4:	9b04      	ldr	r3, [sp, #16]
 8017ce6:	b9d0      	cbnz	r0, 8017d1e <_svfiprintf_r+0xda>
 8017ce8:	06d9      	lsls	r1, r3, #27
 8017cea:	bf44      	itt	mi
 8017cec:	2220      	movmi	r2, #32
 8017cee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017cf2:	071a      	lsls	r2, r3, #28
 8017cf4:	bf44      	itt	mi
 8017cf6:	222b      	movmi	r2, #43	; 0x2b
 8017cf8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017cfc:	782a      	ldrb	r2, [r5, #0]
 8017cfe:	2a2a      	cmp	r2, #42	; 0x2a
 8017d00:	d015      	beq.n	8017d2e <_svfiprintf_r+0xea>
 8017d02:	9a07      	ldr	r2, [sp, #28]
 8017d04:	462f      	mov	r7, r5
 8017d06:	2000      	movs	r0, #0
 8017d08:	250a      	movs	r5, #10
 8017d0a:	4639      	mov	r1, r7
 8017d0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017d10:	3b30      	subs	r3, #48	; 0x30
 8017d12:	2b09      	cmp	r3, #9
 8017d14:	d94d      	bls.n	8017db2 <_svfiprintf_r+0x16e>
 8017d16:	b1b8      	cbz	r0, 8017d48 <_svfiprintf_r+0x104>
 8017d18:	e00f      	b.n	8017d3a <_svfiprintf_r+0xf6>
 8017d1a:	462f      	mov	r7, r5
 8017d1c:	e7b8      	b.n	8017c90 <_svfiprintf_r+0x4c>
 8017d1e:	4a40      	ldr	r2, [pc, #256]	; (8017e20 <_svfiprintf_r+0x1dc>)
 8017d20:	1a80      	subs	r0, r0, r2
 8017d22:	fa0b f000 	lsl.w	r0, fp, r0
 8017d26:	4318      	orrs	r0, r3
 8017d28:	9004      	str	r0, [sp, #16]
 8017d2a:	463d      	mov	r5, r7
 8017d2c:	e7d3      	b.n	8017cd6 <_svfiprintf_r+0x92>
 8017d2e:	9a03      	ldr	r2, [sp, #12]
 8017d30:	1d11      	adds	r1, r2, #4
 8017d32:	6812      	ldr	r2, [r2, #0]
 8017d34:	9103      	str	r1, [sp, #12]
 8017d36:	2a00      	cmp	r2, #0
 8017d38:	db01      	blt.n	8017d3e <_svfiprintf_r+0xfa>
 8017d3a:	9207      	str	r2, [sp, #28]
 8017d3c:	e004      	b.n	8017d48 <_svfiprintf_r+0x104>
 8017d3e:	4252      	negs	r2, r2
 8017d40:	f043 0302 	orr.w	r3, r3, #2
 8017d44:	9207      	str	r2, [sp, #28]
 8017d46:	9304      	str	r3, [sp, #16]
 8017d48:	783b      	ldrb	r3, [r7, #0]
 8017d4a:	2b2e      	cmp	r3, #46	; 0x2e
 8017d4c:	d10c      	bne.n	8017d68 <_svfiprintf_r+0x124>
 8017d4e:	787b      	ldrb	r3, [r7, #1]
 8017d50:	2b2a      	cmp	r3, #42	; 0x2a
 8017d52:	d133      	bne.n	8017dbc <_svfiprintf_r+0x178>
 8017d54:	9b03      	ldr	r3, [sp, #12]
 8017d56:	1d1a      	adds	r2, r3, #4
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	9203      	str	r2, [sp, #12]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	bfb8      	it	lt
 8017d60:	f04f 33ff 	movlt.w	r3, #4294967295
 8017d64:	3702      	adds	r7, #2
 8017d66:	9305      	str	r3, [sp, #20]
 8017d68:	4d2e      	ldr	r5, [pc, #184]	; (8017e24 <_svfiprintf_r+0x1e0>)
 8017d6a:	7839      	ldrb	r1, [r7, #0]
 8017d6c:	2203      	movs	r2, #3
 8017d6e:	4628      	mov	r0, r5
 8017d70:	f7e8 fa4e 	bl	8000210 <memchr>
 8017d74:	b138      	cbz	r0, 8017d86 <_svfiprintf_r+0x142>
 8017d76:	2340      	movs	r3, #64	; 0x40
 8017d78:	1b40      	subs	r0, r0, r5
 8017d7a:	fa03 f000 	lsl.w	r0, r3, r0
 8017d7e:	9b04      	ldr	r3, [sp, #16]
 8017d80:	4303      	orrs	r3, r0
 8017d82:	3701      	adds	r7, #1
 8017d84:	9304      	str	r3, [sp, #16]
 8017d86:	7839      	ldrb	r1, [r7, #0]
 8017d88:	4827      	ldr	r0, [pc, #156]	; (8017e28 <_svfiprintf_r+0x1e4>)
 8017d8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017d8e:	2206      	movs	r2, #6
 8017d90:	1c7e      	adds	r6, r7, #1
 8017d92:	f7e8 fa3d 	bl	8000210 <memchr>
 8017d96:	2800      	cmp	r0, #0
 8017d98:	d038      	beq.n	8017e0c <_svfiprintf_r+0x1c8>
 8017d9a:	4b24      	ldr	r3, [pc, #144]	; (8017e2c <_svfiprintf_r+0x1e8>)
 8017d9c:	bb13      	cbnz	r3, 8017de4 <_svfiprintf_r+0x1a0>
 8017d9e:	9b03      	ldr	r3, [sp, #12]
 8017da0:	3307      	adds	r3, #7
 8017da2:	f023 0307 	bic.w	r3, r3, #7
 8017da6:	3308      	adds	r3, #8
 8017da8:	9303      	str	r3, [sp, #12]
 8017daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017dac:	444b      	add	r3, r9
 8017dae:	9309      	str	r3, [sp, #36]	; 0x24
 8017db0:	e76d      	b.n	8017c8e <_svfiprintf_r+0x4a>
 8017db2:	fb05 3202 	mla	r2, r5, r2, r3
 8017db6:	2001      	movs	r0, #1
 8017db8:	460f      	mov	r7, r1
 8017dba:	e7a6      	b.n	8017d0a <_svfiprintf_r+0xc6>
 8017dbc:	2300      	movs	r3, #0
 8017dbe:	3701      	adds	r7, #1
 8017dc0:	9305      	str	r3, [sp, #20]
 8017dc2:	4619      	mov	r1, r3
 8017dc4:	250a      	movs	r5, #10
 8017dc6:	4638      	mov	r0, r7
 8017dc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017dcc:	3a30      	subs	r2, #48	; 0x30
 8017dce:	2a09      	cmp	r2, #9
 8017dd0:	d903      	bls.n	8017dda <_svfiprintf_r+0x196>
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d0c8      	beq.n	8017d68 <_svfiprintf_r+0x124>
 8017dd6:	9105      	str	r1, [sp, #20]
 8017dd8:	e7c6      	b.n	8017d68 <_svfiprintf_r+0x124>
 8017dda:	fb05 2101 	mla	r1, r5, r1, r2
 8017dde:	2301      	movs	r3, #1
 8017de0:	4607      	mov	r7, r0
 8017de2:	e7f0      	b.n	8017dc6 <_svfiprintf_r+0x182>
 8017de4:	ab03      	add	r3, sp, #12
 8017de6:	9300      	str	r3, [sp, #0]
 8017de8:	4622      	mov	r2, r4
 8017dea:	4b11      	ldr	r3, [pc, #68]	; (8017e30 <_svfiprintf_r+0x1ec>)
 8017dec:	a904      	add	r1, sp, #16
 8017dee:	4640      	mov	r0, r8
 8017df0:	f7fc fb6a 	bl	80144c8 <_printf_float>
 8017df4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017df8:	4681      	mov	r9, r0
 8017dfa:	d1d6      	bne.n	8017daa <_svfiprintf_r+0x166>
 8017dfc:	89a3      	ldrh	r3, [r4, #12]
 8017dfe:	065b      	lsls	r3, r3, #25
 8017e00:	f53f af35 	bmi.w	8017c6e <_svfiprintf_r+0x2a>
 8017e04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017e06:	b01d      	add	sp, #116	; 0x74
 8017e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e0c:	ab03      	add	r3, sp, #12
 8017e0e:	9300      	str	r3, [sp, #0]
 8017e10:	4622      	mov	r2, r4
 8017e12:	4b07      	ldr	r3, [pc, #28]	; (8017e30 <_svfiprintf_r+0x1ec>)
 8017e14:	a904      	add	r1, sp, #16
 8017e16:	4640      	mov	r0, r8
 8017e18:	f7fc fe0c 	bl	8014a34 <_printf_i>
 8017e1c:	e7ea      	b.n	8017df4 <_svfiprintf_r+0x1b0>
 8017e1e:	bf00      	nop
 8017e20:	0801914c 	.word	0x0801914c
 8017e24:	08019152 	.word	0x08019152
 8017e28:	08019156 	.word	0x08019156
 8017e2c:	080144c9 	.word	0x080144c9
 8017e30:	08017b91 	.word	0x08017b91

08017e34 <_sungetc_r>:
 8017e34:	b538      	push	{r3, r4, r5, lr}
 8017e36:	1c4b      	adds	r3, r1, #1
 8017e38:	4614      	mov	r4, r2
 8017e3a:	d103      	bne.n	8017e44 <_sungetc_r+0x10>
 8017e3c:	f04f 35ff 	mov.w	r5, #4294967295
 8017e40:	4628      	mov	r0, r5
 8017e42:	bd38      	pop	{r3, r4, r5, pc}
 8017e44:	8993      	ldrh	r3, [r2, #12]
 8017e46:	f023 0320 	bic.w	r3, r3, #32
 8017e4a:	8193      	strh	r3, [r2, #12]
 8017e4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017e4e:	6852      	ldr	r2, [r2, #4]
 8017e50:	b2cd      	uxtb	r5, r1
 8017e52:	b18b      	cbz	r3, 8017e78 <_sungetc_r+0x44>
 8017e54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017e56:	4293      	cmp	r3, r2
 8017e58:	dd08      	ble.n	8017e6c <_sungetc_r+0x38>
 8017e5a:	6823      	ldr	r3, [r4, #0]
 8017e5c:	1e5a      	subs	r2, r3, #1
 8017e5e:	6022      	str	r2, [r4, #0]
 8017e60:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017e64:	6863      	ldr	r3, [r4, #4]
 8017e66:	3301      	adds	r3, #1
 8017e68:	6063      	str	r3, [r4, #4]
 8017e6a:	e7e9      	b.n	8017e40 <_sungetc_r+0xc>
 8017e6c:	4621      	mov	r1, r4
 8017e6e:	f000 fbc3 	bl	80185f8 <__submore>
 8017e72:	2800      	cmp	r0, #0
 8017e74:	d0f1      	beq.n	8017e5a <_sungetc_r+0x26>
 8017e76:	e7e1      	b.n	8017e3c <_sungetc_r+0x8>
 8017e78:	6921      	ldr	r1, [r4, #16]
 8017e7a:	6823      	ldr	r3, [r4, #0]
 8017e7c:	b151      	cbz	r1, 8017e94 <_sungetc_r+0x60>
 8017e7e:	4299      	cmp	r1, r3
 8017e80:	d208      	bcs.n	8017e94 <_sungetc_r+0x60>
 8017e82:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017e86:	42a9      	cmp	r1, r5
 8017e88:	d104      	bne.n	8017e94 <_sungetc_r+0x60>
 8017e8a:	3b01      	subs	r3, #1
 8017e8c:	3201      	adds	r2, #1
 8017e8e:	6023      	str	r3, [r4, #0]
 8017e90:	6062      	str	r2, [r4, #4]
 8017e92:	e7d5      	b.n	8017e40 <_sungetc_r+0xc>
 8017e94:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017e98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017e9c:	6363      	str	r3, [r4, #52]	; 0x34
 8017e9e:	2303      	movs	r3, #3
 8017ea0:	63a3      	str	r3, [r4, #56]	; 0x38
 8017ea2:	4623      	mov	r3, r4
 8017ea4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017ea8:	6023      	str	r3, [r4, #0]
 8017eaa:	2301      	movs	r3, #1
 8017eac:	e7dc      	b.n	8017e68 <_sungetc_r+0x34>

08017eae <__ssrefill_r>:
 8017eae:	b510      	push	{r4, lr}
 8017eb0:	460c      	mov	r4, r1
 8017eb2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017eb4:	b169      	cbz	r1, 8017ed2 <__ssrefill_r+0x24>
 8017eb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017eba:	4299      	cmp	r1, r3
 8017ebc:	d001      	beq.n	8017ec2 <__ssrefill_r+0x14>
 8017ebe:	f7ff fdbf 	bl	8017a40 <_free_r>
 8017ec2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017ec4:	6063      	str	r3, [r4, #4]
 8017ec6:	2000      	movs	r0, #0
 8017ec8:	6360      	str	r0, [r4, #52]	; 0x34
 8017eca:	b113      	cbz	r3, 8017ed2 <__ssrefill_r+0x24>
 8017ecc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017ece:	6023      	str	r3, [r4, #0]
 8017ed0:	bd10      	pop	{r4, pc}
 8017ed2:	6923      	ldr	r3, [r4, #16]
 8017ed4:	6023      	str	r3, [r4, #0]
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	6063      	str	r3, [r4, #4]
 8017eda:	89a3      	ldrh	r3, [r4, #12]
 8017edc:	f043 0320 	orr.w	r3, r3, #32
 8017ee0:	81a3      	strh	r3, [r4, #12]
 8017ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8017ee6:	e7f3      	b.n	8017ed0 <__ssrefill_r+0x22>

08017ee8 <__ssvfiscanf_r>:
 8017ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eec:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8017ef0:	460c      	mov	r4, r1
 8017ef2:	2100      	movs	r1, #0
 8017ef4:	9144      	str	r1, [sp, #272]	; 0x110
 8017ef6:	9145      	str	r1, [sp, #276]	; 0x114
 8017ef8:	499f      	ldr	r1, [pc, #636]	; (8018178 <__ssvfiscanf_r+0x290>)
 8017efa:	91a0      	str	r1, [sp, #640]	; 0x280
 8017efc:	f10d 0804 	add.w	r8, sp, #4
 8017f00:	499e      	ldr	r1, [pc, #632]	; (801817c <__ssvfiscanf_r+0x294>)
 8017f02:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8018180 <__ssvfiscanf_r+0x298>
 8017f06:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017f0a:	4606      	mov	r6, r0
 8017f0c:	4692      	mov	sl, r2
 8017f0e:	91a1      	str	r1, [sp, #644]	; 0x284
 8017f10:	9300      	str	r3, [sp, #0]
 8017f12:	270a      	movs	r7, #10
 8017f14:	f89a 3000 	ldrb.w	r3, [sl]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	f000 812a 	beq.w	8018172 <__ssvfiscanf_r+0x28a>
 8017f1e:	4655      	mov	r5, sl
 8017f20:	f7ff f948 	bl	80171b4 <__locale_ctype_ptr>
 8017f24:	f815 bb01 	ldrb.w	fp, [r5], #1
 8017f28:	4458      	add	r0, fp
 8017f2a:	7843      	ldrb	r3, [r0, #1]
 8017f2c:	f013 0308 	ands.w	r3, r3, #8
 8017f30:	d01c      	beq.n	8017f6c <__ssvfiscanf_r+0x84>
 8017f32:	6863      	ldr	r3, [r4, #4]
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	dd12      	ble.n	8017f5e <__ssvfiscanf_r+0x76>
 8017f38:	f7ff f93c 	bl	80171b4 <__locale_ctype_ptr>
 8017f3c:	6823      	ldr	r3, [r4, #0]
 8017f3e:	781a      	ldrb	r2, [r3, #0]
 8017f40:	4410      	add	r0, r2
 8017f42:	7842      	ldrb	r2, [r0, #1]
 8017f44:	0712      	lsls	r2, r2, #28
 8017f46:	d401      	bmi.n	8017f4c <__ssvfiscanf_r+0x64>
 8017f48:	46aa      	mov	sl, r5
 8017f4a:	e7e3      	b.n	8017f14 <__ssvfiscanf_r+0x2c>
 8017f4c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017f4e:	3201      	adds	r2, #1
 8017f50:	9245      	str	r2, [sp, #276]	; 0x114
 8017f52:	6862      	ldr	r2, [r4, #4]
 8017f54:	3301      	adds	r3, #1
 8017f56:	3a01      	subs	r2, #1
 8017f58:	6062      	str	r2, [r4, #4]
 8017f5a:	6023      	str	r3, [r4, #0]
 8017f5c:	e7e9      	b.n	8017f32 <__ssvfiscanf_r+0x4a>
 8017f5e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017f60:	4621      	mov	r1, r4
 8017f62:	4630      	mov	r0, r6
 8017f64:	4798      	blx	r3
 8017f66:	2800      	cmp	r0, #0
 8017f68:	d0e6      	beq.n	8017f38 <__ssvfiscanf_r+0x50>
 8017f6a:	e7ed      	b.n	8017f48 <__ssvfiscanf_r+0x60>
 8017f6c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8017f70:	f040 8082 	bne.w	8018078 <__ssvfiscanf_r+0x190>
 8017f74:	9343      	str	r3, [sp, #268]	; 0x10c
 8017f76:	9341      	str	r3, [sp, #260]	; 0x104
 8017f78:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8017f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8017f7e:	d103      	bne.n	8017f88 <__ssvfiscanf_r+0xa0>
 8017f80:	2310      	movs	r3, #16
 8017f82:	9341      	str	r3, [sp, #260]	; 0x104
 8017f84:	f10a 0502 	add.w	r5, sl, #2
 8017f88:	46aa      	mov	sl, r5
 8017f8a:	f815 1b01 	ldrb.w	r1, [r5], #1
 8017f8e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8017f92:	2a09      	cmp	r2, #9
 8017f94:	d922      	bls.n	8017fdc <__ssvfiscanf_r+0xf4>
 8017f96:	2203      	movs	r2, #3
 8017f98:	4879      	ldr	r0, [pc, #484]	; (8018180 <__ssvfiscanf_r+0x298>)
 8017f9a:	f7e8 f939 	bl	8000210 <memchr>
 8017f9e:	b138      	cbz	r0, 8017fb0 <__ssvfiscanf_r+0xc8>
 8017fa0:	eba0 0309 	sub.w	r3, r0, r9
 8017fa4:	2001      	movs	r0, #1
 8017fa6:	4098      	lsls	r0, r3
 8017fa8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017faa:	4318      	orrs	r0, r3
 8017fac:	9041      	str	r0, [sp, #260]	; 0x104
 8017fae:	46aa      	mov	sl, r5
 8017fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8017fb4:	2b67      	cmp	r3, #103	; 0x67
 8017fb6:	f10a 0501 	add.w	r5, sl, #1
 8017fba:	d82b      	bhi.n	8018014 <__ssvfiscanf_r+0x12c>
 8017fbc:	2b65      	cmp	r3, #101	; 0x65
 8017fbe:	f080 809f 	bcs.w	8018100 <__ssvfiscanf_r+0x218>
 8017fc2:	2b47      	cmp	r3, #71	; 0x47
 8017fc4:	d810      	bhi.n	8017fe8 <__ssvfiscanf_r+0x100>
 8017fc6:	2b45      	cmp	r3, #69	; 0x45
 8017fc8:	f080 809a 	bcs.w	8018100 <__ssvfiscanf_r+0x218>
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d06c      	beq.n	80180aa <__ssvfiscanf_r+0x1c2>
 8017fd0:	2b25      	cmp	r3, #37	; 0x25
 8017fd2:	d051      	beq.n	8018078 <__ssvfiscanf_r+0x190>
 8017fd4:	2303      	movs	r3, #3
 8017fd6:	9347      	str	r3, [sp, #284]	; 0x11c
 8017fd8:	9742      	str	r7, [sp, #264]	; 0x108
 8017fda:	e027      	b.n	801802c <__ssvfiscanf_r+0x144>
 8017fdc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017fde:	fb07 1303 	mla	r3, r7, r3, r1
 8017fe2:	3b30      	subs	r3, #48	; 0x30
 8017fe4:	9343      	str	r3, [sp, #268]	; 0x10c
 8017fe6:	e7cf      	b.n	8017f88 <__ssvfiscanf_r+0xa0>
 8017fe8:	2b5b      	cmp	r3, #91	; 0x5b
 8017fea:	d06a      	beq.n	80180c2 <__ssvfiscanf_r+0x1da>
 8017fec:	d80c      	bhi.n	8018008 <__ssvfiscanf_r+0x120>
 8017fee:	2b58      	cmp	r3, #88	; 0x58
 8017ff0:	d1f0      	bne.n	8017fd4 <__ssvfiscanf_r+0xec>
 8017ff2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017ff8:	9241      	str	r2, [sp, #260]	; 0x104
 8017ffa:	2210      	movs	r2, #16
 8017ffc:	9242      	str	r2, [sp, #264]	; 0x108
 8017ffe:	2b6e      	cmp	r3, #110	; 0x6e
 8018000:	bf8c      	ite	hi
 8018002:	2304      	movhi	r3, #4
 8018004:	2303      	movls	r3, #3
 8018006:	e010      	b.n	801802a <__ssvfiscanf_r+0x142>
 8018008:	2b63      	cmp	r3, #99	; 0x63
 801800a:	d065      	beq.n	80180d8 <__ssvfiscanf_r+0x1f0>
 801800c:	2b64      	cmp	r3, #100	; 0x64
 801800e:	d1e1      	bne.n	8017fd4 <__ssvfiscanf_r+0xec>
 8018010:	9742      	str	r7, [sp, #264]	; 0x108
 8018012:	e7f4      	b.n	8017ffe <__ssvfiscanf_r+0x116>
 8018014:	2b70      	cmp	r3, #112	; 0x70
 8018016:	d04b      	beq.n	80180b0 <__ssvfiscanf_r+0x1c8>
 8018018:	d826      	bhi.n	8018068 <__ssvfiscanf_r+0x180>
 801801a:	2b6e      	cmp	r3, #110	; 0x6e
 801801c:	d062      	beq.n	80180e4 <__ssvfiscanf_r+0x1fc>
 801801e:	d84c      	bhi.n	80180ba <__ssvfiscanf_r+0x1d2>
 8018020:	2b69      	cmp	r3, #105	; 0x69
 8018022:	d1d7      	bne.n	8017fd4 <__ssvfiscanf_r+0xec>
 8018024:	2300      	movs	r3, #0
 8018026:	9342      	str	r3, [sp, #264]	; 0x108
 8018028:	2303      	movs	r3, #3
 801802a:	9347      	str	r3, [sp, #284]	; 0x11c
 801802c:	6863      	ldr	r3, [r4, #4]
 801802e:	2b00      	cmp	r3, #0
 8018030:	dd68      	ble.n	8018104 <__ssvfiscanf_r+0x21c>
 8018032:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018034:	0659      	lsls	r1, r3, #25
 8018036:	d407      	bmi.n	8018048 <__ssvfiscanf_r+0x160>
 8018038:	f7ff f8bc 	bl	80171b4 <__locale_ctype_ptr>
 801803c:	6823      	ldr	r3, [r4, #0]
 801803e:	781a      	ldrb	r2, [r3, #0]
 8018040:	4410      	add	r0, r2
 8018042:	7842      	ldrb	r2, [r0, #1]
 8018044:	0712      	lsls	r2, r2, #28
 8018046:	d464      	bmi.n	8018112 <__ssvfiscanf_r+0x22a>
 8018048:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801804a:	2b02      	cmp	r3, #2
 801804c:	dc73      	bgt.n	8018136 <__ssvfiscanf_r+0x24e>
 801804e:	466b      	mov	r3, sp
 8018050:	4622      	mov	r2, r4
 8018052:	a941      	add	r1, sp, #260	; 0x104
 8018054:	4630      	mov	r0, r6
 8018056:	f000 f897 	bl	8018188 <_scanf_chars>
 801805a:	2801      	cmp	r0, #1
 801805c:	f000 8089 	beq.w	8018172 <__ssvfiscanf_r+0x28a>
 8018060:	2802      	cmp	r0, #2
 8018062:	f47f af71 	bne.w	8017f48 <__ssvfiscanf_r+0x60>
 8018066:	e01d      	b.n	80180a4 <__ssvfiscanf_r+0x1bc>
 8018068:	2b75      	cmp	r3, #117	; 0x75
 801806a:	d0d1      	beq.n	8018010 <__ssvfiscanf_r+0x128>
 801806c:	2b78      	cmp	r3, #120	; 0x78
 801806e:	d0c0      	beq.n	8017ff2 <__ssvfiscanf_r+0x10a>
 8018070:	2b73      	cmp	r3, #115	; 0x73
 8018072:	d1af      	bne.n	8017fd4 <__ssvfiscanf_r+0xec>
 8018074:	2302      	movs	r3, #2
 8018076:	e7d8      	b.n	801802a <__ssvfiscanf_r+0x142>
 8018078:	6863      	ldr	r3, [r4, #4]
 801807a:	2b00      	cmp	r3, #0
 801807c:	dd0c      	ble.n	8018098 <__ssvfiscanf_r+0x1b0>
 801807e:	6823      	ldr	r3, [r4, #0]
 8018080:	781a      	ldrb	r2, [r3, #0]
 8018082:	455a      	cmp	r2, fp
 8018084:	d175      	bne.n	8018172 <__ssvfiscanf_r+0x28a>
 8018086:	3301      	adds	r3, #1
 8018088:	6862      	ldr	r2, [r4, #4]
 801808a:	6023      	str	r3, [r4, #0]
 801808c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801808e:	3a01      	subs	r2, #1
 8018090:	3301      	adds	r3, #1
 8018092:	6062      	str	r2, [r4, #4]
 8018094:	9345      	str	r3, [sp, #276]	; 0x114
 8018096:	e757      	b.n	8017f48 <__ssvfiscanf_r+0x60>
 8018098:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801809a:	4621      	mov	r1, r4
 801809c:	4630      	mov	r0, r6
 801809e:	4798      	blx	r3
 80180a0:	2800      	cmp	r0, #0
 80180a2:	d0ec      	beq.n	801807e <__ssvfiscanf_r+0x196>
 80180a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80180a6:	2800      	cmp	r0, #0
 80180a8:	d159      	bne.n	801815e <__ssvfiscanf_r+0x276>
 80180aa:	f04f 30ff 	mov.w	r0, #4294967295
 80180ae:	e05c      	b.n	801816a <__ssvfiscanf_r+0x282>
 80180b0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80180b2:	f042 0220 	orr.w	r2, r2, #32
 80180b6:	9241      	str	r2, [sp, #260]	; 0x104
 80180b8:	e79b      	b.n	8017ff2 <__ssvfiscanf_r+0x10a>
 80180ba:	2308      	movs	r3, #8
 80180bc:	9342      	str	r3, [sp, #264]	; 0x108
 80180be:	2304      	movs	r3, #4
 80180c0:	e7b3      	b.n	801802a <__ssvfiscanf_r+0x142>
 80180c2:	4629      	mov	r1, r5
 80180c4:	4640      	mov	r0, r8
 80180c6:	f000 f9c7 	bl	8018458 <__sccl>
 80180ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80180cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80180d0:	9341      	str	r3, [sp, #260]	; 0x104
 80180d2:	4605      	mov	r5, r0
 80180d4:	2301      	movs	r3, #1
 80180d6:	e7a8      	b.n	801802a <__ssvfiscanf_r+0x142>
 80180d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80180da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80180de:	9341      	str	r3, [sp, #260]	; 0x104
 80180e0:	2300      	movs	r3, #0
 80180e2:	e7a2      	b.n	801802a <__ssvfiscanf_r+0x142>
 80180e4:	9841      	ldr	r0, [sp, #260]	; 0x104
 80180e6:	06c3      	lsls	r3, r0, #27
 80180e8:	f53f af2e 	bmi.w	8017f48 <__ssvfiscanf_r+0x60>
 80180ec:	9b00      	ldr	r3, [sp, #0]
 80180ee:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80180f0:	1d19      	adds	r1, r3, #4
 80180f2:	9100      	str	r1, [sp, #0]
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	07c0      	lsls	r0, r0, #31
 80180f8:	bf4c      	ite	mi
 80180fa:	801a      	strhmi	r2, [r3, #0]
 80180fc:	601a      	strpl	r2, [r3, #0]
 80180fe:	e723      	b.n	8017f48 <__ssvfiscanf_r+0x60>
 8018100:	2305      	movs	r3, #5
 8018102:	e792      	b.n	801802a <__ssvfiscanf_r+0x142>
 8018104:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018106:	4621      	mov	r1, r4
 8018108:	4630      	mov	r0, r6
 801810a:	4798      	blx	r3
 801810c:	2800      	cmp	r0, #0
 801810e:	d090      	beq.n	8018032 <__ssvfiscanf_r+0x14a>
 8018110:	e7c8      	b.n	80180a4 <__ssvfiscanf_r+0x1bc>
 8018112:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018114:	3201      	adds	r2, #1
 8018116:	9245      	str	r2, [sp, #276]	; 0x114
 8018118:	6862      	ldr	r2, [r4, #4]
 801811a:	3a01      	subs	r2, #1
 801811c:	2a00      	cmp	r2, #0
 801811e:	6062      	str	r2, [r4, #4]
 8018120:	dd02      	ble.n	8018128 <__ssvfiscanf_r+0x240>
 8018122:	3301      	adds	r3, #1
 8018124:	6023      	str	r3, [r4, #0]
 8018126:	e787      	b.n	8018038 <__ssvfiscanf_r+0x150>
 8018128:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801812a:	4621      	mov	r1, r4
 801812c:	4630      	mov	r0, r6
 801812e:	4798      	blx	r3
 8018130:	2800      	cmp	r0, #0
 8018132:	d081      	beq.n	8018038 <__ssvfiscanf_r+0x150>
 8018134:	e7b6      	b.n	80180a4 <__ssvfiscanf_r+0x1bc>
 8018136:	2b04      	cmp	r3, #4
 8018138:	dc06      	bgt.n	8018148 <__ssvfiscanf_r+0x260>
 801813a:	466b      	mov	r3, sp
 801813c:	4622      	mov	r2, r4
 801813e:	a941      	add	r1, sp, #260	; 0x104
 8018140:	4630      	mov	r0, r6
 8018142:	f000 f885 	bl	8018250 <_scanf_i>
 8018146:	e788      	b.n	801805a <__ssvfiscanf_r+0x172>
 8018148:	4b0e      	ldr	r3, [pc, #56]	; (8018184 <__ssvfiscanf_r+0x29c>)
 801814a:	2b00      	cmp	r3, #0
 801814c:	f43f aefc 	beq.w	8017f48 <__ssvfiscanf_r+0x60>
 8018150:	466b      	mov	r3, sp
 8018152:	4622      	mov	r2, r4
 8018154:	a941      	add	r1, sp, #260	; 0x104
 8018156:	4630      	mov	r0, r6
 8018158:	f7fc fd7e 	bl	8014c58 <_scanf_float>
 801815c:	e77d      	b.n	801805a <__ssvfiscanf_r+0x172>
 801815e:	89a3      	ldrh	r3, [r4, #12]
 8018160:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018164:	bf18      	it	ne
 8018166:	f04f 30ff 	movne.w	r0, #4294967295
 801816a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801816e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018172:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018174:	e7f9      	b.n	801816a <__ssvfiscanf_r+0x282>
 8018176:	bf00      	nop
 8018178:	08017e35 	.word	0x08017e35
 801817c:	08017eaf 	.word	0x08017eaf
 8018180:	08019152 	.word	0x08019152
 8018184:	08014c59 	.word	0x08014c59

08018188 <_scanf_chars>:
 8018188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801818c:	4615      	mov	r5, r2
 801818e:	688a      	ldr	r2, [r1, #8]
 8018190:	4680      	mov	r8, r0
 8018192:	460c      	mov	r4, r1
 8018194:	b932      	cbnz	r2, 80181a4 <_scanf_chars+0x1c>
 8018196:	698a      	ldr	r2, [r1, #24]
 8018198:	2a00      	cmp	r2, #0
 801819a:	bf14      	ite	ne
 801819c:	f04f 32ff 	movne.w	r2, #4294967295
 80181a0:	2201      	moveq	r2, #1
 80181a2:	608a      	str	r2, [r1, #8]
 80181a4:	6822      	ldr	r2, [r4, #0]
 80181a6:	06d1      	lsls	r1, r2, #27
 80181a8:	bf5f      	itttt	pl
 80181aa:	681a      	ldrpl	r2, [r3, #0]
 80181ac:	1d11      	addpl	r1, r2, #4
 80181ae:	6019      	strpl	r1, [r3, #0]
 80181b0:	6817      	ldrpl	r7, [r2, #0]
 80181b2:	2600      	movs	r6, #0
 80181b4:	69a3      	ldr	r3, [r4, #24]
 80181b6:	b1db      	cbz	r3, 80181f0 <_scanf_chars+0x68>
 80181b8:	2b01      	cmp	r3, #1
 80181ba:	d107      	bne.n	80181cc <_scanf_chars+0x44>
 80181bc:	682b      	ldr	r3, [r5, #0]
 80181be:	6962      	ldr	r2, [r4, #20]
 80181c0:	781b      	ldrb	r3, [r3, #0]
 80181c2:	5cd3      	ldrb	r3, [r2, r3]
 80181c4:	b9a3      	cbnz	r3, 80181f0 <_scanf_chars+0x68>
 80181c6:	2e00      	cmp	r6, #0
 80181c8:	d132      	bne.n	8018230 <_scanf_chars+0xa8>
 80181ca:	e006      	b.n	80181da <_scanf_chars+0x52>
 80181cc:	2b02      	cmp	r3, #2
 80181ce:	d007      	beq.n	80181e0 <_scanf_chars+0x58>
 80181d0:	2e00      	cmp	r6, #0
 80181d2:	d12d      	bne.n	8018230 <_scanf_chars+0xa8>
 80181d4:	69a3      	ldr	r3, [r4, #24]
 80181d6:	2b01      	cmp	r3, #1
 80181d8:	d12a      	bne.n	8018230 <_scanf_chars+0xa8>
 80181da:	2001      	movs	r0, #1
 80181dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181e0:	f7fe ffe8 	bl	80171b4 <__locale_ctype_ptr>
 80181e4:	682b      	ldr	r3, [r5, #0]
 80181e6:	781b      	ldrb	r3, [r3, #0]
 80181e8:	4418      	add	r0, r3
 80181ea:	7843      	ldrb	r3, [r0, #1]
 80181ec:	071b      	lsls	r3, r3, #28
 80181ee:	d4ef      	bmi.n	80181d0 <_scanf_chars+0x48>
 80181f0:	6823      	ldr	r3, [r4, #0]
 80181f2:	06da      	lsls	r2, r3, #27
 80181f4:	bf5e      	ittt	pl
 80181f6:	682b      	ldrpl	r3, [r5, #0]
 80181f8:	781b      	ldrbpl	r3, [r3, #0]
 80181fa:	703b      	strbpl	r3, [r7, #0]
 80181fc:	682a      	ldr	r2, [r5, #0]
 80181fe:	686b      	ldr	r3, [r5, #4]
 8018200:	f102 0201 	add.w	r2, r2, #1
 8018204:	602a      	str	r2, [r5, #0]
 8018206:	68a2      	ldr	r2, [r4, #8]
 8018208:	f103 33ff 	add.w	r3, r3, #4294967295
 801820c:	f102 32ff 	add.w	r2, r2, #4294967295
 8018210:	606b      	str	r3, [r5, #4]
 8018212:	f106 0601 	add.w	r6, r6, #1
 8018216:	bf58      	it	pl
 8018218:	3701      	addpl	r7, #1
 801821a:	60a2      	str	r2, [r4, #8]
 801821c:	b142      	cbz	r2, 8018230 <_scanf_chars+0xa8>
 801821e:	2b00      	cmp	r3, #0
 8018220:	dcc8      	bgt.n	80181b4 <_scanf_chars+0x2c>
 8018222:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018226:	4629      	mov	r1, r5
 8018228:	4640      	mov	r0, r8
 801822a:	4798      	blx	r3
 801822c:	2800      	cmp	r0, #0
 801822e:	d0c1      	beq.n	80181b4 <_scanf_chars+0x2c>
 8018230:	6823      	ldr	r3, [r4, #0]
 8018232:	f013 0310 	ands.w	r3, r3, #16
 8018236:	d105      	bne.n	8018244 <_scanf_chars+0xbc>
 8018238:	68e2      	ldr	r2, [r4, #12]
 801823a:	3201      	adds	r2, #1
 801823c:	60e2      	str	r2, [r4, #12]
 801823e:	69a2      	ldr	r2, [r4, #24]
 8018240:	b102      	cbz	r2, 8018244 <_scanf_chars+0xbc>
 8018242:	703b      	strb	r3, [r7, #0]
 8018244:	6923      	ldr	r3, [r4, #16]
 8018246:	441e      	add	r6, r3
 8018248:	6126      	str	r6, [r4, #16]
 801824a:	2000      	movs	r0, #0
 801824c:	e7c6      	b.n	80181dc <_scanf_chars+0x54>
	...

08018250 <_scanf_i>:
 8018250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018254:	469a      	mov	sl, r3
 8018256:	4b74      	ldr	r3, [pc, #464]	; (8018428 <_scanf_i+0x1d8>)
 8018258:	460c      	mov	r4, r1
 801825a:	4683      	mov	fp, r0
 801825c:	4616      	mov	r6, r2
 801825e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018262:	b087      	sub	sp, #28
 8018264:	ab03      	add	r3, sp, #12
 8018266:	68a7      	ldr	r7, [r4, #8]
 8018268:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801826c:	4b6f      	ldr	r3, [pc, #444]	; (801842c <_scanf_i+0x1dc>)
 801826e:	69a1      	ldr	r1, [r4, #24]
 8018270:	4a6f      	ldr	r2, [pc, #444]	; (8018430 <_scanf_i+0x1e0>)
 8018272:	2903      	cmp	r1, #3
 8018274:	bf08      	it	eq
 8018276:	461a      	moveq	r2, r3
 8018278:	1e7b      	subs	r3, r7, #1
 801827a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801827e:	bf84      	itt	hi
 8018280:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018284:	60a3      	strhi	r3, [r4, #8]
 8018286:	6823      	ldr	r3, [r4, #0]
 8018288:	9200      	str	r2, [sp, #0]
 801828a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801828e:	bf88      	it	hi
 8018290:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018294:	f104 091c 	add.w	r9, r4, #28
 8018298:	6023      	str	r3, [r4, #0]
 801829a:	bf8c      	ite	hi
 801829c:	197f      	addhi	r7, r7, r5
 801829e:	2700      	movls	r7, #0
 80182a0:	464b      	mov	r3, r9
 80182a2:	f04f 0800 	mov.w	r8, #0
 80182a6:	9301      	str	r3, [sp, #4]
 80182a8:	6831      	ldr	r1, [r6, #0]
 80182aa:	ab03      	add	r3, sp, #12
 80182ac:	2202      	movs	r2, #2
 80182ae:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80182b2:	7809      	ldrb	r1, [r1, #0]
 80182b4:	f7e7 ffac 	bl	8000210 <memchr>
 80182b8:	9b01      	ldr	r3, [sp, #4]
 80182ba:	b330      	cbz	r0, 801830a <_scanf_i+0xba>
 80182bc:	f1b8 0f01 	cmp.w	r8, #1
 80182c0:	d15a      	bne.n	8018378 <_scanf_i+0x128>
 80182c2:	6862      	ldr	r2, [r4, #4]
 80182c4:	b92a      	cbnz	r2, 80182d2 <_scanf_i+0x82>
 80182c6:	6822      	ldr	r2, [r4, #0]
 80182c8:	2108      	movs	r1, #8
 80182ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80182ce:	6061      	str	r1, [r4, #4]
 80182d0:	6022      	str	r2, [r4, #0]
 80182d2:	6822      	ldr	r2, [r4, #0]
 80182d4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80182d8:	6022      	str	r2, [r4, #0]
 80182da:	68a2      	ldr	r2, [r4, #8]
 80182dc:	1e51      	subs	r1, r2, #1
 80182de:	60a1      	str	r1, [r4, #8]
 80182e0:	b19a      	cbz	r2, 801830a <_scanf_i+0xba>
 80182e2:	6832      	ldr	r2, [r6, #0]
 80182e4:	1c51      	adds	r1, r2, #1
 80182e6:	6031      	str	r1, [r6, #0]
 80182e8:	7812      	ldrb	r2, [r2, #0]
 80182ea:	701a      	strb	r2, [r3, #0]
 80182ec:	1c5d      	adds	r5, r3, #1
 80182ee:	6873      	ldr	r3, [r6, #4]
 80182f0:	3b01      	subs	r3, #1
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	6073      	str	r3, [r6, #4]
 80182f6:	dc07      	bgt.n	8018308 <_scanf_i+0xb8>
 80182f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80182fc:	4631      	mov	r1, r6
 80182fe:	4658      	mov	r0, fp
 8018300:	4798      	blx	r3
 8018302:	2800      	cmp	r0, #0
 8018304:	f040 8086 	bne.w	8018414 <_scanf_i+0x1c4>
 8018308:	462b      	mov	r3, r5
 801830a:	f108 0801 	add.w	r8, r8, #1
 801830e:	f1b8 0f03 	cmp.w	r8, #3
 8018312:	d1c8      	bne.n	80182a6 <_scanf_i+0x56>
 8018314:	6862      	ldr	r2, [r4, #4]
 8018316:	b90a      	cbnz	r2, 801831c <_scanf_i+0xcc>
 8018318:	220a      	movs	r2, #10
 801831a:	6062      	str	r2, [r4, #4]
 801831c:	6862      	ldr	r2, [r4, #4]
 801831e:	4945      	ldr	r1, [pc, #276]	; (8018434 <_scanf_i+0x1e4>)
 8018320:	6960      	ldr	r0, [r4, #20]
 8018322:	9301      	str	r3, [sp, #4]
 8018324:	1a89      	subs	r1, r1, r2
 8018326:	f000 f897 	bl	8018458 <__sccl>
 801832a:	9b01      	ldr	r3, [sp, #4]
 801832c:	f04f 0800 	mov.w	r8, #0
 8018330:	461d      	mov	r5, r3
 8018332:	68a3      	ldr	r3, [r4, #8]
 8018334:	6822      	ldr	r2, [r4, #0]
 8018336:	2b00      	cmp	r3, #0
 8018338:	d03a      	beq.n	80183b0 <_scanf_i+0x160>
 801833a:	6831      	ldr	r1, [r6, #0]
 801833c:	6960      	ldr	r0, [r4, #20]
 801833e:	f891 c000 	ldrb.w	ip, [r1]
 8018342:	f810 000c 	ldrb.w	r0, [r0, ip]
 8018346:	2800      	cmp	r0, #0
 8018348:	d032      	beq.n	80183b0 <_scanf_i+0x160>
 801834a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801834e:	d121      	bne.n	8018394 <_scanf_i+0x144>
 8018350:	0510      	lsls	r0, r2, #20
 8018352:	d51f      	bpl.n	8018394 <_scanf_i+0x144>
 8018354:	f108 0801 	add.w	r8, r8, #1
 8018358:	b117      	cbz	r7, 8018360 <_scanf_i+0x110>
 801835a:	3301      	adds	r3, #1
 801835c:	3f01      	subs	r7, #1
 801835e:	60a3      	str	r3, [r4, #8]
 8018360:	6873      	ldr	r3, [r6, #4]
 8018362:	3b01      	subs	r3, #1
 8018364:	2b00      	cmp	r3, #0
 8018366:	6073      	str	r3, [r6, #4]
 8018368:	dd1b      	ble.n	80183a2 <_scanf_i+0x152>
 801836a:	6833      	ldr	r3, [r6, #0]
 801836c:	3301      	adds	r3, #1
 801836e:	6033      	str	r3, [r6, #0]
 8018370:	68a3      	ldr	r3, [r4, #8]
 8018372:	3b01      	subs	r3, #1
 8018374:	60a3      	str	r3, [r4, #8]
 8018376:	e7dc      	b.n	8018332 <_scanf_i+0xe2>
 8018378:	f1b8 0f02 	cmp.w	r8, #2
 801837c:	d1ad      	bne.n	80182da <_scanf_i+0x8a>
 801837e:	6822      	ldr	r2, [r4, #0]
 8018380:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8018384:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8018388:	d1bf      	bne.n	801830a <_scanf_i+0xba>
 801838a:	2110      	movs	r1, #16
 801838c:	6061      	str	r1, [r4, #4]
 801838e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018392:	e7a1      	b.n	80182d8 <_scanf_i+0x88>
 8018394:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8018398:	6022      	str	r2, [r4, #0]
 801839a:	780b      	ldrb	r3, [r1, #0]
 801839c:	702b      	strb	r3, [r5, #0]
 801839e:	3501      	adds	r5, #1
 80183a0:	e7de      	b.n	8018360 <_scanf_i+0x110>
 80183a2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80183a6:	4631      	mov	r1, r6
 80183a8:	4658      	mov	r0, fp
 80183aa:	4798      	blx	r3
 80183ac:	2800      	cmp	r0, #0
 80183ae:	d0df      	beq.n	8018370 <_scanf_i+0x120>
 80183b0:	6823      	ldr	r3, [r4, #0]
 80183b2:	05d9      	lsls	r1, r3, #23
 80183b4:	d50c      	bpl.n	80183d0 <_scanf_i+0x180>
 80183b6:	454d      	cmp	r5, r9
 80183b8:	d908      	bls.n	80183cc <_scanf_i+0x17c>
 80183ba:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80183be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80183c2:	4632      	mov	r2, r6
 80183c4:	4658      	mov	r0, fp
 80183c6:	4798      	blx	r3
 80183c8:	1e6f      	subs	r7, r5, #1
 80183ca:	463d      	mov	r5, r7
 80183cc:	454d      	cmp	r5, r9
 80183ce:	d029      	beq.n	8018424 <_scanf_i+0x1d4>
 80183d0:	6822      	ldr	r2, [r4, #0]
 80183d2:	f012 0210 	ands.w	r2, r2, #16
 80183d6:	d113      	bne.n	8018400 <_scanf_i+0x1b0>
 80183d8:	702a      	strb	r2, [r5, #0]
 80183da:	6863      	ldr	r3, [r4, #4]
 80183dc:	9e00      	ldr	r6, [sp, #0]
 80183de:	4649      	mov	r1, r9
 80183e0:	4658      	mov	r0, fp
 80183e2:	47b0      	blx	r6
 80183e4:	f8da 3000 	ldr.w	r3, [sl]
 80183e8:	6821      	ldr	r1, [r4, #0]
 80183ea:	1d1a      	adds	r2, r3, #4
 80183ec:	f8ca 2000 	str.w	r2, [sl]
 80183f0:	f011 0f20 	tst.w	r1, #32
 80183f4:	681b      	ldr	r3, [r3, #0]
 80183f6:	d010      	beq.n	801841a <_scanf_i+0x1ca>
 80183f8:	6018      	str	r0, [r3, #0]
 80183fa:	68e3      	ldr	r3, [r4, #12]
 80183fc:	3301      	adds	r3, #1
 80183fe:	60e3      	str	r3, [r4, #12]
 8018400:	eba5 0509 	sub.w	r5, r5, r9
 8018404:	44a8      	add	r8, r5
 8018406:	6925      	ldr	r5, [r4, #16]
 8018408:	4445      	add	r5, r8
 801840a:	6125      	str	r5, [r4, #16]
 801840c:	2000      	movs	r0, #0
 801840e:	b007      	add	sp, #28
 8018410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018414:	f04f 0800 	mov.w	r8, #0
 8018418:	e7ca      	b.n	80183b0 <_scanf_i+0x160>
 801841a:	07ca      	lsls	r2, r1, #31
 801841c:	bf4c      	ite	mi
 801841e:	8018      	strhmi	r0, [r3, #0]
 8018420:	6018      	strpl	r0, [r3, #0]
 8018422:	e7ea      	b.n	80183fa <_scanf_i+0x1aa>
 8018424:	2001      	movs	r0, #1
 8018426:	e7f2      	b.n	801840e <_scanf_i+0x1be>
 8018428:	08018cb0 	.word	0x08018cb0
 801842c:	08015e71 	.word	0x08015e71
 8018430:	080185d5 	.word	0x080185d5
 8018434:	0801916d 	.word	0x0801916d

08018438 <_sbrk_r>:
 8018438:	b538      	push	{r3, r4, r5, lr}
 801843a:	4c06      	ldr	r4, [pc, #24]	; (8018454 <_sbrk_r+0x1c>)
 801843c:	2300      	movs	r3, #0
 801843e:	4605      	mov	r5, r0
 8018440:	4608      	mov	r0, r1
 8018442:	6023      	str	r3, [r4, #0]
 8018444:	f7ee fd2c 	bl	8006ea0 <_sbrk>
 8018448:	1c43      	adds	r3, r0, #1
 801844a:	d102      	bne.n	8018452 <_sbrk_r+0x1a>
 801844c:	6823      	ldr	r3, [r4, #0]
 801844e:	b103      	cbz	r3, 8018452 <_sbrk_r+0x1a>
 8018450:	602b      	str	r3, [r5, #0]
 8018452:	bd38      	pop	{r3, r4, r5, pc}
 8018454:	20040e4c 	.word	0x20040e4c

08018458 <__sccl>:
 8018458:	b570      	push	{r4, r5, r6, lr}
 801845a:	780b      	ldrb	r3, [r1, #0]
 801845c:	2b5e      	cmp	r3, #94	; 0x5e
 801845e:	bf13      	iteet	ne
 8018460:	1c4a      	addne	r2, r1, #1
 8018462:	1c8a      	addeq	r2, r1, #2
 8018464:	784b      	ldrbeq	r3, [r1, #1]
 8018466:	2100      	movne	r1, #0
 8018468:	bf08      	it	eq
 801846a:	2101      	moveq	r1, #1
 801846c:	1e44      	subs	r4, r0, #1
 801846e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8018472:	f804 1f01 	strb.w	r1, [r4, #1]!
 8018476:	42ac      	cmp	r4, r5
 8018478:	d1fb      	bne.n	8018472 <__sccl+0x1a>
 801847a:	b913      	cbnz	r3, 8018482 <__sccl+0x2a>
 801847c:	3a01      	subs	r2, #1
 801847e:	4610      	mov	r0, r2
 8018480:	bd70      	pop	{r4, r5, r6, pc}
 8018482:	f081 0401 	eor.w	r4, r1, #1
 8018486:	54c4      	strb	r4, [r0, r3]
 8018488:	1c51      	adds	r1, r2, #1
 801848a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801848e:	2d2d      	cmp	r5, #45	; 0x2d
 8018490:	f101 36ff 	add.w	r6, r1, #4294967295
 8018494:	460a      	mov	r2, r1
 8018496:	d006      	beq.n	80184a6 <__sccl+0x4e>
 8018498:	2d5d      	cmp	r5, #93	; 0x5d
 801849a:	d0f0      	beq.n	801847e <__sccl+0x26>
 801849c:	b90d      	cbnz	r5, 80184a2 <__sccl+0x4a>
 801849e:	4632      	mov	r2, r6
 80184a0:	e7ed      	b.n	801847e <__sccl+0x26>
 80184a2:	462b      	mov	r3, r5
 80184a4:	e7ef      	b.n	8018486 <__sccl+0x2e>
 80184a6:	780e      	ldrb	r6, [r1, #0]
 80184a8:	2e5d      	cmp	r6, #93	; 0x5d
 80184aa:	d0fa      	beq.n	80184a2 <__sccl+0x4a>
 80184ac:	42b3      	cmp	r3, r6
 80184ae:	dcf8      	bgt.n	80184a2 <__sccl+0x4a>
 80184b0:	3301      	adds	r3, #1
 80184b2:	429e      	cmp	r6, r3
 80184b4:	54c4      	strb	r4, [r0, r3]
 80184b6:	dcfb      	bgt.n	80184b0 <__sccl+0x58>
 80184b8:	3102      	adds	r1, #2
 80184ba:	e7e6      	b.n	801848a <__sccl+0x32>

080184bc <strncmp>:
 80184bc:	b510      	push	{r4, lr}
 80184be:	b16a      	cbz	r2, 80184dc <strncmp+0x20>
 80184c0:	3901      	subs	r1, #1
 80184c2:	1884      	adds	r4, r0, r2
 80184c4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80184c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80184cc:	4293      	cmp	r3, r2
 80184ce:	d103      	bne.n	80184d8 <strncmp+0x1c>
 80184d0:	42a0      	cmp	r0, r4
 80184d2:	d001      	beq.n	80184d8 <strncmp+0x1c>
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d1f5      	bne.n	80184c4 <strncmp+0x8>
 80184d8:	1a98      	subs	r0, r3, r2
 80184da:	bd10      	pop	{r4, pc}
 80184dc:	4610      	mov	r0, r2
 80184de:	e7fc      	b.n	80184da <strncmp+0x1e>

080184e0 <_strtoul_l.isra.0>:
 80184e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184e4:	4680      	mov	r8, r0
 80184e6:	4689      	mov	r9, r1
 80184e8:	4692      	mov	sl, r2
 80184ea:	461e      	mov	r6, r3
 80184ec:	460f      	mov	r7, r1
 80184ee:	463d      	mov	r5, r7
 80184f0:	9808      	ldr	r0, [sp, #32]
 80184f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80184f6:	f7fe fe59 	bl	80171ac <__locale_ctype_ptr_l>
 80184fa:	4420      	add	r0, r4
 80184fc:	7843      	ldrb	r3, [r0, #1]
 80184fe:	f013 0308 	ands.w	r3, r3, #8
 8018502:	d130      	bne.n	8018566 <_strtoul_l.isra.0+0x86>
 8018504:	2c2d      	cmp	r4, #45	; 0x2d
 8018506:	d130      	bne.n	801856a <_strtoul_l.isra.0+0x8a>
 8018508:	787c      	ldrb	r4, [r7, #1]
 801850a:	1cbd      	adds	r5, r7, #2
 801850c:	2101      	movs	r1, #1
 801850e:	2e00      	cmp	r6, #0
 8018510:	d05c      	beq.n	80185cc <_strtoul_l.isra.0+0xec>
 8018512:	2e10      	cmp	r6, #16
 8018514:	d109      	bne.n	801852a <_strtoul_l.isra.0+0x4a>
 8018516:	2c30      	cmp	r4, #48	; 0x30
 8018518:	d107      	bne.n	801852a <_strtoul_l.isra.0+0x4a>
 801851a:	782b      	ldrb	r3, [r5, #0]
 801851c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018520:	2b58      	cmp	r3, #88	; 0x58
 8018522:	d14e      	bne.n	80185c2 <_strtoul_l.isra.0+0xe2>
 8018524:	786c      	ldrb	r4, [r5, #1]
 8018526:	2610      	movs	r6, #16
 8018528:	3502      	adds	r5, #2
 801852a:	f04f 32ff 	mov.w	r2, #4294967295
 801852e:	2300      	movs	r3, #0
 8018530:	fbb2 f2f6 	udiv	r2, r2, r6
 8018534:	fb06 fc02 	mul.w	ip, r6, r2
 8018538:	ea6f 0c0c 	mvn.w	ip, ip
 801853c:	4618      	mov	r0, r3
 801853e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8018542:	2f09      	cmp	r7, #9
 8018544:	d817      	bhi.n	8018576 <_strtoul_l.isra.0+0x96>
 8018546:	463c      	mov	r4, r7
 8018548:	42a6      	cmp	r6, r4
 801854a:	dd23      	ble.n	8018594 <_strtoul_l.isra.0+0xb4>
 801854c:	2b00      	cmp	r3, #0
 801854e:	db1e      	blt.n	801858e <_strtoul_l.isra.0+0xae>
 8018550:	4282      	cmp	r2, r0
 8018552:	d31c      	bcc.n	801858e <_strtoul_l.isra.0+0xae>
 8018554:	d101      	bne.n	801855a <_strtoul_l.isra.0+0x7a>
 8018556:	45a4      	cmp	ip, r4
 8018558:	db19      	blt.n	801858e <_strtoul_l.isra.0+0xae>
 801855a:	fb00 4006 	mla	r0, r0, r6, r4
 801855e:	2301      	movs	r3, #1
 8018560:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018564:	e7eb      	b.n	801853e <_strtoul_l.isra.0+0x5e>
 8018566:	462f      	mov	r7, r5
 8018568:	e7c1      	b.n	80184ee <_strtoul_l.isra.0+0xe>
 801856a:	2c2b      	cmp	r4, #43	; 0x2b
 801856c:	bf04      	itt	eq
 801856e:	1cbd      	addeq	r5, r7, #2
 8018570:	787c      	ldrbeq	r4, [r7, #1]
 8018572:	4619      	mov	r1, r3
 8018574:	e7cb      	b.n	801850e <_strtoul_l.isra.0+0x2e>
 8018576:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801857a:	2f19      	cmp	r7, #25
 801857c:	d801      	bhi.n	8018582 <_strtoul_l.isra.0+0xa2>
 801857e:	3c37      	subs	r4, #55	; 0x37
 8018580:	e7e2      	b.n	8018548 <_strtoul_l.isra.0+0x68>
 8018582:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018586:	2f19      	cmp	r7, #25
 8018588:	d804      	bhi.n	8018594 <_strtoul_l.isra.0+0xb4>
 801858a:	3c57      	subs	r4, #87	; 0x57
 801858c:	e7dc      	b.n	8018548 <_strtoul_l.isra.0+0x68>
 801858e:	f04f 33ff 	mov.w	r3, #4294967295
 8018592:	e7e5      	b.n	8018560 <_strtoul_l.isra.0+0x80>
 8018594:	2b00      	cmp	r3, #0
 8018596:	da09      	bge.n	80185ac <_strtoul_l.isra.0+0xcc>
 8018598:	2322      	movs	r3, #34	; 0x22
 801859a:	f8c8 3000 	str.w	r3, [r8]
 801859e:	f04f 30ff 	mov.w	r0, #4294967295
 80185a2:	f1ba 0f00 	cmp.w	sl, #0
 80185a6:	d107      	bne.n	80185b8 <_strtoul_l.isra.0+0xd8>
 80185a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185ac:	b101      	cbz	r1, 80185b0 <_strtoul_l.isra.0+0xd0>
 80185ae:	4240      	negs	r0, r0
 80185b0:	f1ba 0f00 	cmp.w	sl, #0
 80185b4:	d0f8      	beq.n	80185a8 <_strtoul_l.isra.0+0xc8>
 80185b6:	b10b      	cbz	r3, 80185bc <_strtoul_l.isra.0+0xdc>
 80185b8:	f105 39ff 	add.w	r9, r5, #4294967295
 80185bc:	f8ca 9000 	str.w	r9, [sl]
 80185c0:	e7f2      	b.n	80185a8 <_strtoul_l.isra.0+0xc8>
 80185c2:	2430      	movs	r4, #48	; 0x30
 80185c4:	2e00      	cmp	r6, #0
 80185c6:	d1b0      	bne.n	801852a <_strtoul_l.isra.0+0x4a>
 80185c8:	2608      	movs	r6, #8
 80185ca:	e7ae      	b.n	801852a <_strtoul_l.isra.0+0x4a>
 80185cc:	2c30      	cmp	r4, #48	; 0x30
 80185ce:	d0a4      	beq.n	801851a <_strtoul_l.isra.0+0x3a>
 80185d0:	260a      	movs	r6, #10
 80185d2:	e7aa      	b.n	801852a <_strtoul_l.isra.0+0x4a>

080185d4 <_strtoul_r>:
 80185d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80185d6:	4c06      	ldr	r4, [pc, #24]	; (80185f0 <_strtoul_r+0x1c>)
 80185d8:	4d06      	ldr	r5, [pc, #24]	; (80185f4 <_strtoul_r+0x20>)
 80185da:	6824      	ldr	r4, [r4, #0]
 80185dc:	6a24      	ldr	r4, [r4, #32]
 80185de:	2c00      	cmp	r4, #0
 80185e0:	bf08      	it	eq
 80185e2:	462c      	moveq	r4, r5
 80185e4:	9400      	str	r4, [sp, #0]
 80185e6:	f7ff ff7b 	bl	80184e0 <_strtoul_l.isra.0>
 80185ea:	b003      	add	sp, #12
 80185ec:	bd30      	pop	{r4, r5, pc}
 80185ee:	bf00      	nop
 80185f0:	2000000c 	.word	0x2000000c
 80185f4:	20000070 	.word	0x20000070

080185f8 <__submore>:
 80185f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185fc:	460c      	mov	r4, r1
 80185fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018600:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018604:	4299      	cmp	r1, r3
 8018606:	d11d      	bne.n	8018644 <__submore+0x4c>
 8018608:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801860c:	f7ff fa66 	bl	8017adc <_malloc_r>
 8018610:	b918      	cbnz	r0, 801861a <__submore+0x22>
 8018612:	f04f 30ff 	mov.w	r0, #4294967295
 8018616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801861a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801861e:	63a3      	str	r3, [r4, #56]	; 0x38
 8018620:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8018624:	6360      	str	r0, [r4, #52]	; 0x34
 8018626:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801862a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801862e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8018632:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018636:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801863a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801863e:	6020      	str	r0, [r4, #0]
 8018640:	2000      	movs	r0, #0
 8018642:	e7e8      	b.n	8018616 <__submore+0x1e>
 8018644:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018646:	0077      	lsls	r7, r6, #1
 8018648:	463a      	mov	r2, r7
 801864a:	f000 f837 	bl	80186bc <_realloc_r>
 801864e:	4605      	mov	r5, r0
 8018650:	2800      	cmp	r0, #0
 8018652:	d0de      	beq.n	8018612 <__submore+0x1a>
 8018654:	eb00 0806 	add.w	r8, r0, r6
 8018658:	4601      	mov	r1, r0
 801865a:	4632      	mov	r2, r6
 801865c:	4640      	mov	r0, r8
 801865e:	f7fb fe8b 	bl	8014378 <memcpy>
 8018662:	f8c4 8000 	str.w	r8, [r4]
 8018666:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801866a:	e7e9      	b.n	8018640 <__submore+0x48>

0801866c <__ascii_wctomb>:
 801866c:	b149      	cbz	r1, 8018682 <__ascii_wctomb+0x16>
 801866e:	2aff      	cmp	r2, #255	; 0xff
 8018670:	bf85      	ittet	hi
 8018672:	238a      	movhi	r3, #138	; 0x8a
 8018674:	6003      	strhi	r3, [r0, #0]
 8018676:	700a      	strbls	r2, [r1, #0]
 8018678:	f04f 30ff 	movhi.w	r0, #4294967295
 801867c:	bf98      	it	ls
 801867e:	2001      	movls	r0, #1
 8018680:	4770      	bx	lr
 8018682:	4608      	mov	r0, r1
 8018684:	4770      	bx	lr

08018686 <memmove>:
 8018686:	4288      	cmp	r0, r1
 8018688:	b510      	push	{r4, lr}
 801868a:	eb01 0302 	add.w	r3, r1, r2
 801868e:	d807      	bhi.n	80186a0 <memmove+0x1a>
 8018690:	1e42      	subs	r2, r0, #1
 8018692:	4299      	cmp	r1, r3
 8018694:	d00a      	beq.n	80186ac <memmove+0x26>
 8018696:	f811 4b01 	ldrb.w	r4, [r1], #1
 801869a:	f802 4f01 	strb.w	r4, [r2, #1]!
 801869e:	e7f8      	b.n	8018692 <memmove+0xc>
 80186a0:	4283      	cmp	r3, r0
 80186a2:	d9f5      	bls.n	8018690 <memmove+0xa>
 80186a4:	1881      	adds	r1, r0, r2
 80186a6:	1ad2      	subs	r2, r2, r3
 80186a8:	42d3      	cmn	r3, r2
 80186aa:	d100      	bne.n	80186ae <memmove+0x28>
 80186ac:	bd10      	pop	{r4, pc}
 80186ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80186b2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80186b6:	e7f7      	b.n	80186a8 <memmove+0x22>

080186b8 <__malloc_lock>:
 80186b8:	4770      	bx	lr

080186ba <__malloc_unlock>:
 80186ba:	4770      	bx	lr

080186bc <_realloc_r>:
 80186bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186be:	4607      	mov	r7, r0
 80186c0:	4614      	mov	r4, r2
 80186c2:	460e      	mov	r6, r1
 80186c4:	b921      	cbnz	r1, 80186d0 <_realloc_r+0x14>
 80186c6:	4611      	mov	r1, r2
 80186c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80186cc:	f7ff ba06 	b.w	8017adc <_malloc_r>
 80186d0:	b922      	cbnz	r2, 80186dc <_realloc_r+0x20>
 80186d2:	f7ff f9b5 	bl	8017a40 <_free_r>
 80186d6:	4625      	mov	r5, r4
 80186d8:	4628      	mov	r0, r5
 80186da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80186dc:	f000 f814 	bl	8018708 <_malloc_usable_size_r>
 80186e0:	42a0      	cmp	r0, r4
 80186e2:	d20f      	bcs.n	8018704 <_realloc_r+0x48>
 80186e4:	4621      	mov	r1, r4
 80186e6:	4638      	mov	r0, r7
 80186e8:	f7ff f9f8 	bl	8017adc <_malloc_r>
 80186ec:	4605      	mov	r5, r0
 80186ee:	2800      	cmp	r0, #0
 80186f0:	d0f2      	beq.n	80186d8 <_realloc_r+0x1c>
 80186f2:	4631      	mov	r1, r6
 80186f4:	4622      	mov	r2, r4
 80186f6:	f7fb fe3f 	bl	8014378 <memcpy>
 80186fa:	4631      	mov	r1, r6
 80186fc:	4638      	mov	r0, r7
 80186fe:	f7ff f99f 	bl	8017a40 <_free_r>
 8018702:	e7e9      	b.n	80186d8 <_realloc_r+0x1c>
 8018704:	4635      	mov	r5, r6
 8018706:	e7e7      	b.n	80186d8 <_realloc_r+0x1c>

08018708 <_malloc_usable_size_r>:
 8018708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801870c:	1f18      	subs	r0, r3, #4
 801870e:	2b00      	cmp	r3, #0
 8018710:	bfbc      	itt	lt
 8018712:	580b      	ldrlt	r3, [r1, r0]
 8018714:	18c0      	addlt	r0, r0, r3
 8018716:	4770      	bx	lr

08018718 <_init>:
 8018718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801871a:	bf00      	nop
 801871c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801871e:	bc08      	pop	{r3}
 8018720:	469e      	mov	lr, r3
 8018722:	4770      	bx	lr

08018724 <_fini>:
 8018724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018726:	bf00      	nop
 8018728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801872a:	bc08      	pop	{r3}
 801872c:	469e      	mov	lr, r3
 801872e:	4770      	bx	lr
